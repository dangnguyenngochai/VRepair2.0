<S2SV_ModStart> , umax_val ; u64 insn_bitness = <S2SV_ModEnd> ( BPF_CLASS ( <S2SV_ModStart> -> code ) == BPF_ALU64 ) ? 64 : 32 ; <S2SV_ModEnd> smin_val = src_reg <S2SV_ModStart> if ( umax_val >= insn_bitness <S2SV_ModEnd> ) { mark_reg_unknown <S2SV_ModStart> if ( umax_val >= insn_bitness <S2SV_ModEnd> ) { mark_reg_unknown <S2SV_ModStart> break ; } if ( BPF_CLASS ( insn -> code ) != BPF_ALU64 ) { coerce_reg_to_32 ( dst_reg , 63 ) ; coerce_reg_to_32 = BPF_ALU64 ) ; <S2SV_ModEnd> smin_val = case
<S2SV_ModStart> ret ; if ( unlikely ( file -> u2_total_mbs_coded - EINVAL ; else if ( unlikely ( file -> UIO_MAXIOV ) ) { ret = - ENOMEM ; break ; } <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> f_op ) ; <S2SV_ModEnd> if ( VERIFY_READ
<S2SV_ModStart> size_t fail ; size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( name ) ) { if ( g_settings_privatereports ) { printf ( "ERROR:<S2SV_blank>Input<S2SV_blank>file<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>to<S2SV_blank>contain<S2SV_blank>valid<S2SV_blank>plist<S2SV_blank>data.\\n" ) ; return - 1 ; }
<S2SV_ModStart> ssize_t SENT_ALL = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 0 ) )
<S2SV_ModStart> src , const char * tfm = rd_transform ( vp9_fdct32x32 , vp9_fdct32x32 , GFP_KERNEL ) ; if ( ! <S2SV_ModStart> ) ) { memcpy ( vec , 0 , nr <S2SV_ModEnd> ) ; src
<S2SV_ModStart> int downmix_object_t ( jas_longlong <S2SV_ModEnd> * downmix_object_t ,
<S2SV_ModStart> FORM_INPUT_FILE ) && value -> len < 0 ) &&
<S2SV_ModStart> if ( mode != MODE_INVALID <S2SV_ModEnd> ) { *
<S2SV_ModStart> -> clock_type ; memset ( & sync , 0 , sizeof ( sync ) ) ;
<S2SV_ModStart> ; err : <S2SV_ModEnd> return ( &
<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int32 <S2SV_ModStart> ( buf , L_BUFSIZE <S2SV_ModEnd> , "wgnuplot<S2SV_blank>%s" , <S2SV_ModStart> , ifndef ) ; if ( fchown ( dest_fd , uid , gid , L_BUFSIZE <S2SV_ModEnd> , cmdname , <S2SV_ModStart> , ifndef , L_BUFSIZE <S2SV_ModEnd> , system ,
<S2SV_ModStart> |= split_flag1 ; if ( flags & EXT4_GET_BLOCKS_CONVERT ) split_flag |= EXT4_EXT_DATA_VALID2 ;
<S2SV_ModStart> ] ) { int rc ; <S2SV_ModStart> ( obj , name , sizeof ( * bio ) ;
<S2SV_ModStart> ptr ) { if ( ! VFile ( VFile ) ) { <unk> ( VFile , PATH_MAX ) ; return - ENOMEM ; } <S2SV_ModStart> ptr , strlen ( buf ) == NULL ) { <S2SV_ModEnd> return '\\0' ; }
<S2SV_ModStart> skb ) ; ND_TCHECK_32BITS ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;
<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;
<S2SV_ModStart> 1 ) ; gss_release_buffer ( & key1 , & kgctx ) ;
<S2SV_ModStart> * ret ; if ( ! session -> EFAULT
<S2SV_ModStart> ( base_addr ) ; if ( i < 17 ) { return - EINVAL ; }
<S2SV_ModStart> case VPX_IMG_FMT_I420 : <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( cfg
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = sinpi_2_9 ( calloc ( int16_t )
<S2SV_ModStart> ( const struct arpt_entry * e <S2SV_ModEnd> ) { static <S2SV_ModStart> uncond ; return e -> target_offset == sizeof ( struct arpt_entry ) && memcmp ( & e -> <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ret = 0 ; if ( test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) return - ENOKEY
<S2SV_ModStart> len = 0 , end <S2SV_ModStart> base_len = GIT_ADD_SIZET_OVERFLOW ( & end , off , len ) || base_len < end <S2SV_ModEnd> || res_sz <
<S2SV_ModStart> == endif if ( <S2SV_ModStart> ( s ) < 0 ) return - 1 ; <S2SV_ModStart> listen ) { if ( <S2SV_ModStart> rr -> seq_num ) < 0 ) return - 1 ; dtls1_record_bitmap_update ( s , bitmap <S2SV_ModStart> again ; } dtls1_record_bitmap_update ( s , bitmap ) ;
<S2SV_ModStart> intf ) { <S2SV_ModEnd> char * name <S2SV_ModStart> ; char * user = get_current_user ( ) ; if ( ! too_many_pipe_buffers_hard ( user ) ) { if ( too_many_pipe_buffers_soft ( current_user ( ) ) pipe_bufs ; <S2SV_ModStart> dev ; dev_dbg ( & eip <S2SV_ModEnd> , name ) <S2SV_ModStart> d ) ; } <S2SV_ModStart> -> "%s:<S2SV_blank>\'%s\'<S2SV_blank>successfully<S2SV_blank>deinitialized<S2SV_blank>and<S2SV_blank>disconnected\\n" ) ;
<S2SV_ModStart> vcpu ) { __sock_release ( vcpu -> arch . eobs
<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> saddr , sizeof ( *
<S2SV_ModStart> p_data , p_total_data_size ,
<S2SV_ModStart> int get_max_filter_level ( netdissect_options * ndo , <S2SV_ModStart> / MAX_LOOP_FILTER ) ; if ( ! ND_TTEST2 ( twopass -> MAX_LOOP_FILTER ) / 8 ; return MAX_LOOP_FILTER ; } <S2SV_ModEnd> MAX_LOOP_FILTER : section_intra_rating
<S2SV_ModStart> if ( ret < 0 || group > inotify_max_queued_events ) return - ENOENT ;
<S2SV_ModStart> . refcount ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> int err ; int num_descriptors ; size_t offset = offsetof ( inet -> name , sizeof ( inet -> name ) ; <S2SV_ModStart> ; if ( sockaddr_in < sizeof ( struct dccps_role * ) ) { err = - EINVAL ; err = <unk> ( sk , DCCP_ROLE_CLIENT , DCCP_ROLE_CLIENT , opt <S2SV_ModEnd> ) ; != <S2SV_ModStart> ; opt . out :
<S2SV_ModStart> ; } } fuse_conn_put ( & long ) ;
<S2SV_ModStart> ; int best_motion_err ; vpx_mse16x16 <S2SV_ModEnd> ( xd -> <S2SV_ModStart> + y_buffer , recon_yoffset , recon_yoffset , recon_yoffset ) ;
<S2SV_ModStart> * rc ; struct <unk> * sgp = & key , sizeof ( tfm_des * key2 ) ; ) { rc = 0 ; goto out ; } if ( rc ) goto out ; } if ( ! ND_TTEST ( tfm_des ) ) goto out ; } <S2SV_ModStart> : rc = & req , key2 ) ; ) ; <S2SV_ModEnd> return rc ; <S2SV_ModStart> : return rc ; } <S2SV_ModEnd> return rc ;
<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } if
<S2SV_ModStart> . MSG_TRUNC ; <S2SV_ModEnd> copied = 0
<S2SV_ModStart> * xd , vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( cm , MACROBLOCKD * const <S2SV_ModEnd> * r ) <S2SV_ModStart> { TX_SIZE tx_size = xd -> mi [ 0 ] -> mbmi . tx_size ; int xd -> mi [ 0 ] -> mbmi . sb_type ; <S2SV_ModStart> ] ; if ( counts ) ++ ; <S2SV_ModStart> && ( counts , <S2SV_ModEnd> tx . tx_size
<S2SV_ModStart> file ) ; bit_name ( & dev -> tag , bid_name ) ;
<S2SV_ModStart> IOPRIO_NORM : if ( ! IS_ERR ( io_context ) ) return ret ; <S2SV_ModStart> ioprio : io_context ( p , io_context ) ; goto ret ; }
<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> ; } } io -> io_cleanup = io_cleanup ;
<S2SV_ModStart> si ) { <S2SV_ModEnd> si -> VPX_CODEC_UNSUP_BITSTREAM <S2SV_ModStart> si = ( data , sizeof ( si ) ) ;
<S2SV_ModStart> lds ) { if ( len < 4 ) { return ; }
<S2SV_ModStart> ) { return count_mounts ( m -> mnt_ns , child ) <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; if ( ! ctx -> gf128 ) return - ENOKEY ; if (
<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if
<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( MACROBLOCKD * <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( pbi , <S2SV_ModStart> j ) ) ; memset <S2SV_ModEnd> ( pbi , <S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> i < 8 ) ; memset <S2SV_ModEnd> ( xd ->
<S2SV_ModStart> { frames_till_gf_update_due ; } <S2SV_ModEnd> ( & twopass <S2SV_ModStart> bits_left ) ; cpi -> fc = 0 ;
<S2SV_ModStart> tl_tpg ) ; <S2SV_ModEnd> ret = 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> cost_mv_ref ( const <S2SV_ModStart> ) { const <S2SV_ModStart> ) ; } <S2SV_ModEnd> mode <S2SV_null> <S2SV_null>
<S2SV_ModStart> ++ ) { int tend_off = <unk> ( * ) + 1 ; <S2SV_ModStart> + 1 ; }
<S2SV_ModStart> cpi ) { PREDICTION_MODE <S2SV_ModEnd> zbin_mode_boost ( cpi <S2SV_ModStart> cpi -> cpi -> flags .
<S2SV_ModStart> ; x -> plane [ 0 ] . eobs
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> parse_input ( conn <S2SV_ModStart> != 0 ) return
<S2SV_ModStart> stream * stream , int olen <S2SV_ModStart> ; # config . <unk> ;
<S2SV_ModStart> IVD_ERROR_NONE == e_error && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset )
<S2SV_ModStart> ) ; } if ( ! <S2SV_ModStart> ) ) btif_config_remove_restricted ( NULL ) ;
<S2SV_ModStart> * list ; unsigned char * next = nick ( nick , nick ) ; <S2SV_ModStart> = nick ( <S2SV_ModEnd> , nick -> <S2SV_ModStart> ; if ( is_one_pass_cbr_svc ( nick ) <S2SV_ModEnd> ) { nick
<S2SV_ModStart> cpu_to_le64 ) ; <S2SV_ModEnd> DataOffset = ( <S2SV_ModStart> length ) ; DataOffset ( ses , "%s" , rpl_tstr <S2SV_ModEnd> ) ;
<S2SV_ModStart> = frame_size ; memset <S2SV_ModEnd> ( oci ->
<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> if ( vcpu
<S2SV_ModStart> * cm , vpx_writer * w , FRAME_COUNTS * counts <S2SV_ModEnd> ) { int <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> switchable_interp_prob [ j <S2SV_ModStart> ] ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ] ) ; <S2SV_ModEnd> for ( i
<S2SV_ModStart> char * data <S2SV_ModEnd> ; StringValue ,
<S2SV_ModStart> key_ref ) ; ret = key_read_state ( key ) ; if ( ret < 0 ) goto error2 ; <S2SV_ModEnd> ret = can_read_key
<S2SV_ModStart> options ) { if ( * data == NULL || ( ext3_msg ( data ) ) { set_error_detail ( options , options , sizeof ( ext3_msg ) ) ; return ; }
<S2SV_ModStart> * tagval ( struct stream packet * s ; <S2SV_ModStart> ; if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( "cliprdr_process(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & packet ) ; } if (
<S2SV_ModStart> && eoc [ <S2SV_ModEnd> ] += eoc
<S2SV_ModStart> ) ) { if ( pos < 0 -> head_skb < size ) offset = 0 ; <S2SV_ModStart> + ENOMEM ; if ( err < 0 ) return err ;
<S2SV_ModStart> ; if ( l_px0 >= 31 ) { th = ( ( numresolutions -> dx << 1 ) ; if (
<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc32 ( TIFF <S2SV_ModStart> / 4 ; if ( ! <S2SV_ModStart> , cc ) ) return 0 <S2SV_ModStart> wc ) ; return 1 ;
<S2SV_ModStart> , fp ) , "<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%127s\\n" <S2SV_ModEnd> , (
<S2SV_ModStart> return mbox ; if ( idata , path , mbox )
<S2SV_ModStart> code ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> event , code )
<S2SV_ModStart> inode * inode { int relocated ; int flags = relocated ? RR_RELOC_DE : 0 ; <S2SV_ModEnd> if ( inode <S2SV_ModStart> , inode , flags <S2SV_ModEnd> ) ; if <S2SV_ModStart> , goto discard_fq ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> inode ) goto discard_fq ; if ( fq_kill ( inode ) ;
<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr2 , <S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr2 ,
<S2SV_ModStart> ; if ( th -> au + EPERM ) ret - EINVAL ; if (
<S2SV_ModStart> = tu [ 10 <S2SV_ModEnd> tread ; if <S2SV_ModStart> < tu -> <unk> <S2SV_ModEnd> ) goto
<S2SV_ModStart> listener ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> void H264SwDecMalloc defined ( MAGICKCORE_WINDOWS_SUPPORT ) && ! vpx_read_bit ( int16_t )
<S2SV_ModStart> = res ; cond_resched ( ) <S2SV_ModEnd> ; key1 ->
<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> * ) return
<S2SV_ModStart> ] ) { if ( width >= 2 ) { LOGE ( "malloc<S2SV_blank>failed:<S2SV_blank>%s\\n" ) ; return AVERROR_INVALIDDATA ; }
<S2SV_ModStart> frame -> data && frame -> linesize [ plane ]
<S2SV_ModStart> ; valuelen -> rmtvaluelen ; args -> valuelen = 0 <S2SV_ModStart> args -> valuelen = args -> valuelen ; valuelen = args -> valuelen ; valuelen = 0 ;
<S2SV_ModStart> INTERP_FILTER ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb , <S2SV_ModStart> wb ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb , <S2SV_ModStart> SWITCHABLE ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , <S2SV_ModStart> 2 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb ,
<S2SV_ModStart> ; p ++ ; if ( head + p ++ ) return 0 ;
<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while
<S2SV_ModStart> ptr ) { if ( ! test_bit ( KEY_FLAG_NEGATIVE , & dev -> flags ) ) { <S2SV_ModEnd> return netdev_notifier_info ( <S2SV_ModStart> ( info -> bs_name <S2SV_ModEnd> ) ; return
<S2SV_ModStart> data ) ; return - 1 ; if ( ! <S2SV_ModStart> ) ) { return FALSE ; } if (
<S2SV_ModStart> void ip6_append_data_mtu ( const VP9_COMMON * const cm , const struct user_struct * user , get_current_user ( ) ; if ( ! too_many_pipe_buffers_hard ( user ) ) { if ( too_many_pipe_buffers_soft ( user ) ) pipe_bufs = 1 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> = x_origin ; if ( <S2SV_ModEnd> & bits_per_pixel <S2SV_ModStart> & bits_per_pixel ) ;
<S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ( unsigned <S2SV_ModStart> ) ) { pr_debug <S2SV_ModEnd> ( ( unsigned char *
<S2SV_ModStart> = 0 ; <unk> ( skb ) ; <S2SV_ModStart> - 1 ; <S2SV_ModEnd> count = unix_sock_count <S2SV_ModStart> return - 1 ;
<S2SV_ModStart> costs , const vpx_prob <S2SV_ModEnd> * probs , <S2SV_ModStart> * probs , vpx_tree <S2SV_ModEnd> tree ) {
<S2SV_ModStart> rq ) { spin_lock ( & bm -> data + sizeof ( bm ) ) ;
<S2SV_ModStart> ( buf = jas_alloc3 ( bufsize , bufsize , sizeof ( bufsize <S2SV_ModStart> - 1 ; } if ( bufsize
<S2SV_ModStart> common ) { memcpy <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> -> baseline_gf_interval = ( cpi -> min_gf_interval + cpi -> max_gf_interval ) / 2 <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ( port ) ; <S2SV_ModEnd> if ( port <S2SV_ModStart> == 0 ) {
<S2SV_ModStart> = 0 ; <S2SV_ModEnd> int target_submit_tmr = <S2SV_ModStart> < 0 ; || ( = cm_id -> send_ioctx ;
<S2SV_ModStart> ; xfs_attr3_leaf_name_remote args -> rmtvaluelen <S2SV_ModEnd> leaf1 = args
<S2SV_ModStart> cryptostats ) { <S2SV_ModEnd> protostats ( & <S2SV_ModStart> cryptostats ) ; vpx_free ( DEBUG , DEBUG , cryptostats ) ;
<S2SV_ModStart> void i ; <S2SV_ModEnd> if ( vct_iscrlf <S2SV_ModStart> ! vct_iscrlf ( <S2SV_ModEnd> l ) ;
<S2SV_ModStart> * up ; int ulen ; <S2SV_ModStart> ) ; } no_promotions =
<S2SV_ModStart> ; } if ( loc_name ( & efree ( tag_value ) ;
<S2SV_ModStart> ; } } if ( udp -> frame_to_show + <S2SV_ModStart> ++ ) { ( udp + 8 ) ; <S2SV_ModStart> ; } else { memset ( * dest , udp -> mb_cols , udp + 8 ) ;
<S2SV_ModStart> } icsk_ext_hdr_len -> <unk> -> <unk> = <S2SV_ModEnd> ; opt ->
<S2SV_ModStart> ; if ( get_pi_state == uaddr2 ) return - EINVAL ; if ( <S2SV_ModStart> goto curval ) ; if (
<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( ms -> elf_notes_max = * <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> ) ) { struct mnt_namespace * ns ; <S2SV_ModStart> mnt_list ) ; ns = p -> mnt_ns ; if ( ns ) { ns -> mounts -- ; __touch_mnt_namespace ( ns ) ; } <S2SV_ModEnd> p -> mnt_ns
<S2SV_ModStart> * ndev , <S2SV_ModEnd> struct hns_nic_ring_data * <S2SV_ModStart> ; } dev = <S2SV_ModEnd> ; skb_shinfo ( <S2SV_ModStart> skb ) ; } return <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> ; if ( * state != CCS_START )
<S2SV_ModStart> ) ) ; if ( archive_write_disk ( src >= separator ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , "Malformed<S2SV_blank>OS<S2SV_blank>X<S2SV_blank>metadata<S2SV_blank>entry:<S2SV_blank>inconsistent<S2SV_blank>size" ) ; return ; } if ( src >= 2 ) return 0 ; } if ( src > HOST_NAME_MAX [ 1 ] ) ;
<S2SV_ModStart> void byteSwap ( const vpx_tree_index <S2SV_ModEnd> * p ,
<S2SV_ModStart> return get_time ( <S2SV_ModEnd> timr -> hrtimer_forward <S2SV_ModStart> timer )
<S2SV_ModStart> "&quot;" ) ; if ( i > str ) return 0 ;
<S2SV_ModStart> NULL ) { netdev_err <S2SV_ModEnd> ( p , <S2SV_ModStart> xIter , xIter <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( strcmp ( p , tmp , sizeof ( xIter ) ) { if ( test_bit ( KEY_FLAG_NEGATIVE , & p ) ) { <S2SV_ModStart> return NULL ; } <S2SV_ModStart> * path , <S2SV_ModEnd> ) ; }
<S2SV_ModStart> * mi_rows mi_cols mi_cols * <S2SV_ModEnd> CYCLIC_REFRESH ( int <S2SV_ModStart> * cr
<S2SV_ModStart> x > collen ) { if ( in > UT_WS_SVR_MAX_HEADER_SIZE
<S2SV_ModStart> , pending_idx , u8 status <S2SV_ModStart> ) ; index , UINT_MAX - pending_idx , pending_idx , XEN_NETIF_RSP_OKAY
<S2SV_ModStart> && av_freep ( & comp -> <unk> ) ;
<S2SV_ModStart> ; assert ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , count ) )
<S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> i ) { if <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> , mbgraph_stats -> common . mb_rows ) ;
<S2SV_ModStart> goto FMODE_NDELAY ; error = 0 ;
<S2SV_ModStart> * alloc ) { if ( alloc > 2 ) && <S2SV_ModStart> ( alloc > 2 ) &&
<S2SV_ModStart> ; } ; <S2SV_ModEnd> fcntl ( fd
<S2SV_ModStart> ; } } if ( psf -> sf . <unk> ) { return - EINVAL ; }
<S2SV_ModStart> uaddr_t ) { if ( len < ROSE_MIN_LEN ) { size_t u ; <S2SV_ModStart> = CORE_MMU_USER_CODE_SIZE ; return NULL ; } <S2SV_ModStart> res ; if ( raw_len < sizeof ( a ) ) ; return NULL ; } <S2SV_ModStart> TEE_MATTR_UR ) ; <S2SV_ModEnd> return res ;
<S2SV_ModStart> ; return error < 0 ? error : 0
<S2SV_ModStart> = malloc ( "%s" , rpl_tstr <S2SV_ModEnd> ) ; if
<S2SV_ModStart> if ( ( skb_mac_header <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) < skb -> head +
<S2SV_ModStart> = param_count ; <S2SV_ModEnd> return ( param_count
<S2SV_ModStart> << 4 ; if ( ! access_ok ( VERIFY_READ , next_op , 4 ) ) { return 0 ; }
<S2SV_ModStart> ( net_dev ) ; u32 "/lxc/lock/var/lib/lxc/" <S2SV_ModEnd> ; memset (
<S2SV_ModStart> , sizeof ( *
<S2SV_ModStart> pc ) { if ( pc -> buf + ENOMEM ; } if ( pc -> buf + 8 ) { next = next -> next + 3 ; next = <S2SV_ModEnd> ; state + <S2SV_ModStart> ; } if ( pc -> last_index + 8 ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> ion_handle_put ( struct <S2SV_ModStart> & kref_put
<S2SV_ModStart> 0 ) ; msg -> msg_namelen = 0 ; <S2SV_ModStart> out ) ; av_assert0 ( skb -> msg_name ) ;
<S2SV_ModStart> ( asoc , true
<S2SV_ModStart> if ( ( unconditional ( e <S2SV_ModEnd> ) && ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited
<S2SV_ModStart> dev_list_lock ) ; <S2SV_ModEnd> if ( port_dev <S2SV_ModStart> , port_dev ) <S2SV_ModEnd> ; break ;
<S2SV_ModStart> out ) ; <S2SV_ModEnd> out -> path_init <S2SV_ModStart> path ; <S2SV_ModEnd> out : return
<S2SV_ModStart> * tl ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left
<S2SV_ModStart> double motion_pct ; ( void ) cpi ;
<S2SV_ModStart> sepIdx ++ ) { _gdImageWBMPCtx <S2SV_ModEnd> ( stderr , <S2SV_ModStart> ( ! <S2SV_ModEnd> ( sepIdx , <S2SV_ModStart> '=' ) ; if ( stringlen + opt_string ( stderr , "RTMP<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>mismatch<S2SV_blank>%d<S2SV_blank>!=<S2SV_blank>%d\\n" , const stderr , const stderr , <S2SV_ModEnd> ) ; return
<S2SV_ModStart> >= GET8 - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> - 1 ; <S2SV_ModEnd> if ( 0x3f <S2SV_ModStart> end ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> length + fc -> <S2SV_ModEnd> ) ; return
<S2SV_ModStart> return VPX_CODEC_ERROR ; <S2SV_ModEnd> if ( !
<S2SV_ModStart> , 1 , <S2SV_ModEnd> regs , address
<S2SV_ModStart> user -> uid_keyring && user -> session_keyring
<S2SV_ModStart> ( spin_lock ( & sk -> dev , false , sizeof ( spin_lock ( & po -> bind_lock ) ; if ( po -> dev ) ; <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> ; } } if ( unlikely ( !
<S2SV_ModStart> ) ) ; if ( unlikely ( len > UT_WS_SVR_MAX_HEADER_SIZE
<S2SV_ModStart> + 1 ; memset ( UINT_MAX , UINT_MAX ) ; <S2SV_ModStart> = near_sad ( cpi , 6 ) ; <S2SV_ModStart> = 5 ; if ( cpi -> near_sad [ 5 [ 5 ] . cpi -> flags .
<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ( cpi -> td . <S2SV_ModStart> = this_rd ( cpi -> sf . mv
<S2SV_ModStart> str ) ; int i ;
<S2SV_ModStart> 0 ; } if ( ps_dec -> pf_vld_inv_quant > MPEG2_MAX_FRAME_RATE_CODE ) { return IMPEG2D_FRM_HDR_DECODE_ERR ; }
<S2SV_ModStart> dref ) { <S2SV_ModEnd> if ( s <S2SV_ModStart> * s ) ; return <S2SV_ModEnd> GF_LOG_CONTAINER ( s <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; <S2SV_ModEnd> return gf_isom_box_array_read (
<S2SV_ModStart> ; if ( ! nsops ( & long ) <S2SV_ModEnd> nsops ( &
<S2SV_ModStart> cm , const vpx_prob <S2SV_ModEnd> * r ) <S2SV_ModStart> * cm , vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r ,
<S2SV_ModStart> asoc ; struct sock * sk = asoc -> base . sk ; struct <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> timeout_type ( timeout_type <S2SV_ModStart> ( timeout_type ) <S2SV_ModEnd> sk ) { <S2SV_ModStart> ( error ) <S2SV_ModEnd> sk -> sk_err <S2SV_ModStart> : bh_unlock_sock ( <S2SV_ModEnd> sk ) ;
<S2SV_ModStart> ) { int tend_off = <unk> ( vma ) ; <S2SV_ModStart> -> vm_file ) ; down_read ( & EXT4_I ( & EXT4_I ( vma , host ) ; <S2SV_ModStart> ; } return - 1 ;
<S2SV_ModStart> int input_stats ( TWO_PASS <S2SV_ModEnd> * p ,
<S2SV_ModStart> buf ) { if ( ! <unk> ( size ) ) { ALOGE ( "b/34031018,<S2SV_blank>stackPtr(%d)" , * buf , buf , size ) ; android_errorWriteLog ( 0x534e4554 , "27855419" ) ; return NULL ; }
<S2SV_ModStart> * uid_server ; unsigned <S2SV_ModStart> = uid_server ( & client -> maxusage <S2SV_ModStart> return FALSE ; } # endif
<S2SV_ModStart> ; if ( len <S2SV_ModEnd> == \'\\"\'
<S2SV_ModStart> exception ) ; <S2SV_ModEnd> image2 ( CopyMagickString <S2SV_ModStart> ; columns ) ;
<S2SV_ModStart> * cpi , vpx_prob <S2SV_ModEnd> * cpi , <S2SV_ModStart> * cpi , MACROBLOCKD * const <S2SV_ModEnd> * MODE_INFO * MODE_INFO * <S2SV_ModStart> mi ) { const vpx_prob <S2SV_ModEnd> mi -> mb . <S2SV_ModStart> mi , vp9_writer , xd -> mi . mb . mbmi_ext <S2SV_ModEnd> ) ; const <S2SV_ModStart> ) ; return success <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> -> wpc ; if ( channel_reordering ( & wpc -> channel_reordering ) { av_log ( NULL , AV_LOG_ERROR , "trns<S2SV_blank>before<S2SV_blank>IHDR\\n" ) ; return FALSE ; } if ( channel_reordering ( nchans ) ) { return FALSE ; } else { if ( channel_reordering ( wpc , wpc , channel_reordering ) ; return FALSE ; }
<S2SV_ModStart> 0 ) { mutex_lock ( & kvm -> lock ) ; list_del ( & dev -> create ) ; mutex_unlock ( & kvm -> lock ) ; <S2SV_ModStart> destroy ( dev <S2SV_ModEnd> ) ; return
<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src , <S2SV_ModStart> S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( "clone" <S2SV_ModStart> "clone" , dest <S2SV_ModEnd> ) ; unlink
<S2SV_ModStart> return - EINVAL ; if ( <unk> ( & asoc -> <unk> ) ) return - EBUSY
<S2SV_ModStart> ( attrs , PAGE_KERNEL <S2SV_ModEnd> ) ; void
<S2SV_ModStart> = 0 ; if ( dst -> av_rescale_q_rnd < fifo
<S2SV_ModStart> "unencrypted" ) ; # ifdef HAVE_MKDTEMP if ( no_rc_dir && tmp_dir != <unk> ) if ( <unk> ( tmp_dir ) != 0 ) { fprintf ( stderr , "Can\'t<S2SV_blank>remove<S2SV_blank>temporary<S2SV_blank>directory<S2SV_blank>(%s)!\\n" , tmp_dir ) ; } <unk> ( 1 ) ; } # endif
<S2SV_ModStart> -> compnoend + <S2SV_ModEnd> picomp -> numrlvls <S2SV_ModStart> -> prcwidthexpn + <S2SV_ModEnd> picomp -> numrlvls
<S2SV_ModStart> const int qindex , vpx_bit_depth_t bit_depth ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> return 3300000 ( <S2SV_ModStart> ( q , bit_depth <S2SV_ModStart> KEY_FRAME ) / correction_factor <S2SV_ModEnd> ( q , <S2SV_ModStart> / 12 ) ; }
<S2SV_ModStart> key_ref ) ; up_write ( key , 0 ) ;
<S2SV_ModStart> goto out_unlock ; if ( out_dput == <S2SV_ModEnd> ) { down_read <S2SV_ModStart> == fs_info ) ; goto out_unlock ; }
<S2SV_ModStart> ; args -> rmtvaluelen = args -> valuelen ; args -> rmtvaluelen <S2SV_ModEnd> = args -> valuelen <S2SV_ModStart> ; args -> rmtvaluelen = args -> valuelen ;
<S2SV_ModStart> ; if ( ! mode == 0 ) return err ; if (
<S2SV_ModStart> in ) ; int64 iskew = ( int64 ) imagew - ( int64 ) <S2SV_ModEnd> tilew ; uint8 <S2SV_ModStart> if ( colb > done <S2SV_ModEnd> ) { uint32
<S2SV_ModStart> & mm ) { <S2SV_ModStart> ; } } if ( page ) ) ) { ret = ERR_PTR ( - ENOMEM ) ; goto put_page ( address , page ) ; } <S2SV_ModEnd> if ( flags
<S2SV_ModStart> kcontrol -> private_data ; mutex_lock ( & ue -> card -> user_ctl_lock ) <S2SV_ModStart> elem_data_size ) ; mutex_unlock ( & ue -> card -> user_ctl_lock ) ;
<S2SV_ModStart> NULL ) ; if ( ! _gdImageWBMPCtx <S2SV_ModEnd> ( im , <S2SV_ModStart> , out ) ) { <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; } else { rv = NULL ; }
<S2SV_ModStart> { umode_t mode ; error = posix_acl_update_mode ( inode <S2SV_ModEnd> , & mode <S2SV_ModStart> , & mode , & acl ) ; if ( error <S2SV_ModEnd> ) { 0 <S2SV_ModStart> { error = memchr <S2SV_ModEnd> ( inode <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> skb ) { strncpy ( <S2SV_ModEnd> ( skb ) <S2SV_ModStart> dev ) ; if ( ! skb_set_dev ( skb ) ) return - ENOMEM ; <S2SV_ModStart> ; } } <S2SV_ModEnd> skb <S2SV_null> <S2SV_null>
<S2SV_ModStart> * z ) { sqlite3_int64 <S2SV_ModEnd> n = pnEntry <S2SV_ModStart> ( sz * ( sqlite3_int64 ) n
<S2SV_ModStart> int m , jas_ulonglong <S2SV_ModEnd> ) { if
<S2SV_ModStart> charlen ; } if ( len < 5 ) { ALOGE ( "b/26366256" ) ; return 0 ; }
<S2SV_ModStart> void count_segs ( const VP9_COMMON * const <S2SV_ModEnd> TileInfo , const <S2SV_ModStart> , const tile , MACROBLOCKD * <S2SV_ModEnd> bw , 0 <S2SV_ModStart> { const <S2SV_ModEnd> bw , segment_id <S2SV_ModStart> & cpi -> td . <S2SV_ModStart> { int ) ; vpx_mse16x16 <S2SV_ModEnd> ; } }
<S2SV_ModStart> ~ rc ; if ( ! strcmp ( size , sizeof ( vendor_flags ) ) return - EINVAL ; if (
<S2SV_ModStart> = utf8s_to_utf16s ; <S2SV_ModEnd> value ; u64 <S2SV_ModStart> ; } } if ( u64 + 1 ) <S2SV_ModStart> . wchar_t ; <S2SV_ModEnd> * ( data <S2SV_ModStart> ; } } ND_TCHECK ( * data ) ;
<S2SV_ModStart> -> endif ret = <unk> ( & data , sizeof ( tp_value ) ] <S2SV_ModEnd> ; if (
<S2SV_ModStart> * bp ; ND_TCHECK ( dp -> ip6r_len ) ;
<S2SV_ModStart> mask ) ; dwc3_gadget_del_and_unmap_request ( & len , 2 , sizeof ( * ie_length ) ) ;
<S2SV_ModStart> * key ; <S2SV_ModEnd> } * pair <S2SV_ModStart> it ) ; <S2SV_ModEnd> it = it
<S2SV_ModStart> } bufsize = MIN ( <S2SV_ModStart> file -> size , sizeof buf )
<S2SV_ModStart> ) ) ; if ( len < 0 ) { err = true ; goto out ; }
<S2SV_ModStart> , j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if (
<S2SV_ModStart> ; ue -> card = card ; ue ->
<S2SV_ModStart> 1 -- ; dwc3_gadget_del_and_unmap_request <S2SV_ModEnd> ( in ,
<S2SV_ModStart> = object ; size_t size = 0 ;
<S2SV_ModStart> { js_Object * js_doregexec ( J , <S2SV_ModEnd> buf , js_pushstring <S2SV_ModStart> ( "0123456789abcdefghijklmnopqrstuvwxyz" ) ; if ( js_doregexec ( J , <S2SV_ModEnd> ) ; if
<S2SV_ModStart> * input , vpx_prob <S2SV_ModEnd> * input ) <S2SV_ModStart> ) { si <S2SV_ModEnd> ( input , <S2SV_ModStart> + decoder -> codec_interface <S2SV_ModEnd> ( input ,
<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , pfds )
<S2SV_ModStart> ; if ( skb -> UNIXCB ) { <unk> ( sk ) ; path_put ( & path ) ; if (
<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return is_pseudo_ta_ctx ->
<S2SV_ModStart> * ERESTARTSYS ; unsigned char * mmget_still_valid ( * lock ) ; <S2SV_ModStart> if ( ctx -> return NULL ;
<S2SV_ModStart> ) * realptr ; int i ; <S2SV_ModStart> nf >= realptr ) ; <S2SV_ModEnd> tm = field
<S2SV_ModStart> { const int is_two_pass_svc ( cpi ) <S2SV_ModEnd> ) { for
<S2SV_ModStart> int len ; ND_TCHECK2 ( * ext , sizeof ( a ) <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY
<S2SV_ModStart> atomic64_set ) ; <S2SV_ModEnd> memset ( newsk
<S2SV_ModStart> t1_getline ) ; cleanup_srcu_struct ( & t1_line_array , <unk> ) ;
<S2SV_ModStart> ; if ( "%s" == NULL ) { <S2SV_ModEnd> newnp -> <S2SV_ModStart> sk ) ; } newnp -> ipv6_mc_list
<S2SV_ModStart> open_list_head ) ; <S2SV_ModEnd> module = 0 <S2SV_ModStart> open_list ) ; module = module ; module ( & timeri -> timer ) ; lock ) ; <S2SV_ModStart> open_list ) ; mutex_unlock ( & timeri -> timer ) ;
<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ) , func <S2SV_ModEnd> , line , <S2SV_ModStart> ( "[0000:00:00.0]:[%s:%d]:<S2SV_blank>%pV" , func <S2SV_ModEnd> , line ,
<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; p ++ ; if ( dlen < p ) return 0 <S2SV_ModStart> ; return 0 ; }
<S2SV_ModStart> , clsid * ( <S2SV_ModEnd> str , clsid <S2SV_ModStart> , 2 ) ; if ( clsid == 1 ) { <S2SV_ModStart> - 1 ; }
<S2SV_ModStart> ; header -> bit_depth = 0 ;
<S2SV_ModStart> struct skip_perm_check * once_key <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( in_egroup_p ( name <S2SV_ModEnd> ) ) {
<S2SV_ModStart> * object , size_t <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd> , void *
<S2SV_ModStart> length [ length ] <S2SV_ModEnd> ) ; break
<S2SV_ModStart> return aux ; <unk> ( f ) ;
<S2SV_ModStart> new_blkg ) ; if ( q -> blkg_free = new_blkg ( & q -> root_rl ) ; <S2SV_ModStart> return ret ; }
<S2SV_ModStart> it_overrun += <S2SV_ModEnd> timr -> it_overrun_last <S2SV_ModStart> timr -> it_overrun <S2SV_ModEnd> += si_overrun ,
<S2SV_ModStart> vp9_iwht4x4_add ( const tran_low_t <S2SV_ModEnd> * input , <S2SV_ModStart> > 1 ) <unk> <S2SV_ModEnd> ( input , <S2SV_ModStart> ) ; else <unk> <S2SV_ModEnd> ( input ,
<S2SV_ModStart> len * tlen ; ND_TCHECK ( * pptr <S2SV_ModStart> ) ; eofs = XFS_FSB_TO_BB ( len == len ) ; break ; } ND_TCHECK ( error_code ) ) { return ; }
<S2SV_ModStart> int ret ; struct <unk> * <S2SV_ModEnd> dev = xen_pcibk_read_config_word <S2SV_ModStart> ( dev , GFP_KERNEL ) ; if ( ret == - ENOMEM ) { return ret ; } <S2SV_ModEnd> if ( i <S2SV_ModStart> < IORESOURCE_IO ) { <S2SV_ModEnd> return i ;
<S2SV_ModStart> map = { 0 , 0 ,
<S2SV_ModStart> 0 ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( mb_col , <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( mb_col , <S2SV_ModStart> ; partitioning ; partitioning <S2SV_ModEnd> ( mb_col
<S2SV_ModStart> - 1 ; <S2SV_ModEnd> return - 1
<S2SV_ModStart> ) ) ; if ( len < 0 ) { ret = 0 ; zval_copy_ctor ( & header_type & XML_PARSE_NOENT ) ; } ret = len_buf_pos ( 4 , "ridiculous<S2SV_blank>length,<S2SV_blank>%ld" ) ; } <S2SV_ModEnd> if ( 4 <S2SV_ModStart> ) ) { if ( length > 0 ) return - 1 ; }
<S2SV_ModStart> ; if ( key_is_negative ( key <S2SV_ModEnd> ) ) return
<S2SV_ModStart> ) ) { if ( len >= INT_MAX ) { <S2SV_ModStart> invalid ; } if (
<S2SV_ModStart> * flowi6 ) ; struct stream = & * err ; <S2SV_ModStart> u . fl ) ; u16 <S2SV_ModEnd> struct cork ( <S2SV_ModStart> ; } else -> <unk> = udp_hdr ( dest , 0 , sizeof ( * saddr ) ; }
<S2SV_ModStart> -> buffer ; if ( copy_to_user ( unsigned long ) <S2SV_ModEnd> cpu - EINVAL <S2SV_ModStart> cpu ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args
<S2SV_ModStart> kiocb_batch_free ( struct <unk> *
<S2SV_ModStart> ; } err = 0 ; if ( put_user ( * c , count ) , 8 ) ;
<S2SV_ModStart> ; printf ( plen <S2SV_ModEnd> ) ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> if ( len
<S2SV_ModStart> ; if ( s -> width > 8 ) { avpriv_request_sample ( s -> avctx , "Support<S2SV_blank>for<S2SV_blank>image<S2SV_blank>offsets" ) ; return AVERROR_INVALIDDATA ; }
<S2SV_ModStart> RelinquishMagickMemory ( } if ( image == image ) columns ( image -> rows ) <S2SV_ModEnd> ; } return
<S2SV_ModStart> send - 1 <S2SV_ModEnd> ) { MSG_NOSIGNAL
<S2SV_ModStart> ; i = 0 ; 0 ;
<S2SV_ModStart> err ; BUG_ON ( ( ( len > UT_WS_SVR_MAX_HEADER_SIZE
<S2SV_ModStart> , newdata ) <S2SV_ModEnd> ; realloc ->
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args
<S2SV_ModStart> u_int length - 1 <S2SV_ModEnd> ) { if <S2SV_ModStart> p <= 1 <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> p , length <S2SV_ModEnd> ) ; break
<S2SV_ModStart> sock * & EAFNOSUPPORT ) { if ( protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (
<S2SV_ModStart> ; } # if CONFIG_VP9_HIGHBITDEPTH if ( rc_resize_down_thresh == "Codec:<S2SV_blank>%s\\n" ) { LOGE ( "malloc<S2SV_blank>failed:<S2SV_blank>%s\\n" , global ) ; fprintf ( input -> allowed_extensions , "ALL" ) && ! av_match_ext ( ) ; } <S2SV_ModEnd> ) ; }
<S2SV_ModStart> ; if ( 0 > ( void ) { # if CONFIG_VP9_HIGHBITDEPTH if ( si_mem_available ( ) ) return VPX_CODEC_OK ; }
<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * mi_row , <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } const YV12_BUFFER_CONFIG <S2SV_ModStart> int alpha_buffer ; vpx_wb_write_literal <S2SV_ModEnd> ( src , <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> void restore_context ( MACROBLOCK * const x <S2SV_ModEnd> , int mi_row <S2SV_ModStart> ) { const <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> p ) { memcpy <S2SV_ModEnd> ( a + <S2SV_ModStart> subsampling_x ) ; memcpy <S2SV_ModEnd> ( l + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( sa , <S2SV_ModStart> mi_width ) ; memcpy <S2SV_ModEnd> ( left_seg_context ,
<S2SV_ModStart> 0 ) ; if ( value + ( key > sizeof ( "Got<S2SV_blank>key:<S2SV_blank>%s=%s\\n" ) ) return 0 ;
<S2SV_ModStart> & 0xFFFFFFFF ; int remaining ; <S2SV_ModStart> ) continue ; <S2SV_ModEnd> remaining = avpriv_dnxhd_get_frame_size <S2SV_ModStart> ; if ( <S2SV_ModEnd> remaining <= 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> remaining = ff_dnxhd_get_hr_frame_size <S2SV_ModStart> ; if ( <S2SV_ModEnd> remaining <= 0 <S2SV_ModStart> <= 0 ) continue ; } dctx -> remaining = remaining ; <S2SV_ModEnd> if ( buf_size
<S2SV_ModStart> -> port_data ; spin_lock_irq ( & i8042_lock ) ; <S2SV_ModStart> exists = true ; port -> serio = 0 ; spin_unlock_irq ( & i8042_lock ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;
<S2SV_ModStart> cdf_secid_t ) { pr_debug <S2SV_ModEnd> ( DPRINTF (
<S2SV_ModStart> ) ) ; return
<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } <S2SV_null>
<S2SV_ModStart> set_registers ( indx , buf <S2SV_ModEnd> , size , <S2SV_ModStart> * data , NFC_SENSB_RES_MAXSIZE )
<S2SV_ModStart> data ++ ) * <S2SV_ModStart> -> "sens_res<S2SV_blank>0x%x,<S2SV_blank>nfcid1_len<S2SV_blank>%d\\n" ++ ;
<S2SV_ModStart> oid_len ) { if ( tptr == 0 )
<S2SV_ModStart> fpath , fi , & sb
<S2SV_ModStart> -> mm ) { <S2SV_ModStart> start ) ; } if ( ! test_bit ( KEY_FLAG_NEGATIVE , & TLB_FLUSH_ALL ) ) goto out ; } <S2SV_ModStart> out ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; long timeo ; msg -> msg_namelen = 0
<S2SV_ModStart> * object , size_t <S2SV_ModEnd> const char * <S2SV_ModStart> const char * name <S2SV_ModEnd> , void *
<S2SV_ModStart> * input , tran_low_t <S2SV_ModEnd> * output , <S2SV_ModStart> case DCT_DCT : <unk> <S2SV_ModEnd> ( input ,
<S2SV_ModStart> ( pb ) ; if ( avio_feof ( pb ) ) return - 1
<S2SV_ModStart> ) ) ; <S2SV_ModEnd> code = req_data
<S2SV_ModStart> ; char * buffer ; int ret ; buffer = kmalloc ( 1 , GFP_KERNEL ) ; if ( ! buffer ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> ) ; } kfree ( buffer ) ;
<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd> , & inode <S2SV_ModStart> inode -> i_mode , & acl ) ; if ( ret <S2SV_ModEnd> ) return ret
<S2SV_ModStart> || uid_eq ( TWO_PASS <S2SV_ModEnd> -> nsown_capable ,
<S2SV_ModStart> { # ifdef HAVE_MKDTEMP if ( no_rc_dir && tmp_dir != <unk> ) if ( <unk> ( & Next , tmp_dir ) != 0 ) { fprintf ( stderr , "Can\'t<S2SV_blank>remove<S2SV_blank>temporary<S2SV_blank>directory<S2SV_blank>(%s)!\\n" , tmp_dir ) ; } # endif
<S2SV_ModStart> goto fail2 ; if ( nfs_request_too_big ( efx -> fail2 ) { rc = 0 ; if ( rc -> PSW_MASK_ASC ) == PSW_ASC_HOME <S2SV_ModEnd> ) { rc
<S2SV_ModStart> dst_reg ) ; coerce_reg_to_size <S2SV_ModEnd> ( & regs <S2SV_ModStart> -> dst_reg ] , 4
<S2SV_ModStart> -> fl6 , rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> final ) ; rcu_read_unlock ( ) ;
<S2SV_ModStart> target_enc = conv_encoding <S2SV_ModEnd> ( reg ,
<S2SV_ModStart> * object ; size_t d ; <S2SV_ModStart> ; } } if ( BPLIST_UNICODE ( & data + 1 ) { return FALSE ; } if ( BPLIST_UNICODE ( & size ) ) { return FALSE ; } if ( BPLIST_UNICODE ( PLIST_BIN_ERR ( "overlayfs:<S2SV_blank>maximum<S2SV_blank>fs<S2SV_blank>stacking<S2SV_blank>depth<S2SV_blank>exceeded\\n" ) ; return FALSE ; }
<S2SV_ModStart> stride ) ; memset <S2SV_ModEnd> ( input ,
<S2SV_ModStart> unimac_mdio_read ) ; <S2SV_ModEnd> unimac_mdio_read ( r
<S2SV_ModStart> -> next_op + vpx_mse16x16 <S2SV_ModEnd> ( r ,
<S2SV_ModStart> { err = posix_acl_update_mode ( ! skb , & ieee_pfc -> err , & <S2SV_ModEnd> , sizeof ( <S2SV_ModStart> nla_nest_start ) ; <S2SV_ModEnd> if ( dcbx <S2SV_ModStart> ; } if ( dcbx ( dcbx ( dcbx ) ) ;
<S2SV_ModStart> ; if ( ctxt -> ds ) ) return ret ; if (
<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd )
<S2SV_ModStart> return return ; if ( ! strcmp ( inode , "url" ) && ( NULL && inode -> i_uid <S2SV_ModEnd> ) return
<S2SV_ModStart> = 0 ; rc = bprm_change_interp ( ! source_alt_ref_active ) ; if ( cpi -> oxcf . <unk> |= PER_CLEAR_ON_SETID ; if (
<S2SV_ModStart> RAPTOR_OPTION_RELATIVE_URIS : case RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES : case
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> void set_block_size ( YV12_BUFFER_CONFIG * frame , <S2SV_ModStart> , e_mbd ; PREDICTION_MODE <S2SV_ModEnd> set_modeinfo_offsets ( & <S2SV_ModStart> int e_mbd ; vpx_wb_write_literal <S2SV_ModEnd> ( & cpi <S2SV_ModStart> & cpi -> td . <S2SV_ModStart> cpi , cpi <S2SV_ModEnd> , MACROBLOCKD * <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> [ 16 ] ; void *
<S2SV_ModStart> ( d ) ; <S2SV_ModEnd> msg -> rfcomm_dlc_accept
<S2SV_ModStart> id ) { if ( size_t ss < <S2SV_ModEnd> cdf_read ( h <S2SV_ModStart> info ) ) { set_error_detail ( info , CDF_SEC_SIZE ( info ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ( fd = safe_mount ( ! epi , ( fd ) ; if ( error , ep , ) ) <S2SV_ModEnd> mutex_lock ( tfile <S2SV_ModStart> , file , <S2SV_ModEnd> ) ) {
<S2SV_ModStart> 4 ) ; if ( ps_dec -> u2_frame_rate_code > MPEG2_MAX_FRAME_RATE_CODE ) { return IMPEG2D_FRM_HDR_DECODE_ERR ; }
<S2SV_ModStart> { LEX_ID ( "server<S2SV_blank>disconnected" , ( str <S2SV_ModStart> ) ; else if ( len == NULL ) { set_error_detail ( str , str , strncat -> <unk> ) ; <S2SV_ModEnd> else if (
<S2SV_ModStart> * ! set_rtrn <S2SV_ModEnd> ) { if
<S2SV_ModStart> void f2fs_wait_discard_bios ( netdissect_options * ndo , <S2SV_ModStart> __drop_discard_cmd ) { if ( ! ND_TTEST2 ( sbi , sbi , ) ) ; return false ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ) { if ( status < 0 ) ThrowReaderException ( CorruptImageError , "UnexpectedEndOfFile" ) ;
<S2SV_ModStart> int hscale ; memset <S2SV_ModEnd> ( src -> <S2SV_ModStart> int ) ; memset <S2SV_ModEnd> ( temp_area -> <S2SV_ModStart> ) / i ; memset <S2SV_ModEnd> ( src -> <S2SV_ModStart> ; } } if ( temp_area + 1 ) ; return ;
<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * const cm , const MACROBLOCKD * <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> 0 ] = 0 ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> MODE_INFO * seg , vpx_prob <S2SV_ModEnd> seg , segment_id <S2SV_ModStart> 0 ] ; } <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> BLOCK_SIZE above_mi = NULL ; <S2SV_ModEnd> const MODE_INFO *
<S2SV_ModStart> , gb , if ( j == get_bits1 ) { LOGE ( "malloc<S2SV_blank>failed:<S2SV_blank>%s\\n" , 8 ) ; } else { close ( s -> get_bits1 ; <S2SV_ModStart> i ; } return 0 ;
<S2SV_ModStart> void kvm_lapic_set_vapic_addr ( TWO_PASS <S2SV_ModEnd> * vcpu , <S2SV_ModStart> ) { if ( vol -> arch . set_error_detail ( vcpu , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> vcpu -> apic -> <unk> , & x -> plane [ 0 ] . si_code = ILL_ILLOPC ; info -> <unk> = NULL ; arm64_notify_die <S2SV_ModEnd> ( vcpu , <S2SV_ModStart> ) ; } else <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> if ( MSG_OOB ( flags ) <S2SV_ModStart> goto out ; err = sizeof ( * sin ) ;
<S2SV_ModStart> break ; } <S2SV_ModEnd> dst_reg -> smin_value <S2SV_ModStart> = S64_MAX ; <S2SV_ModEnd> if ( insn
<S2SV_ModStart> * input , tran_low_t <S2SV_ModEnd> * output , <S2SV_ModStart> * output , PREDICTION_MODE <S2SV_ModEnd> * output , <S2SV_ModStart> + 1 ; vpx_lpf_vertical_4 ( input , <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; if ( task == 0 ) goto NLMCLNT_GRACE_WAIT ; if (
<S2SV_ModStart> void set_segment_id ( const VP9_COMMON * const <S2SV_ModEnd> cm , int <S2SV_ModStart> , segment_id , vpx_prob <S2SV_ModEnd> bw [ int <S2SV_ModStart> ] ; const <S2SV_ModStart> = 0 ; memcpy ( x -> common + 1 <S2SV_ModEnd> ) ; for
<S2SV_ModStart> if ( q == NULL ) { <S2SV_ModEnd> if ( q <S2SV_ModStart> -> dev , "reading<S2SV_blank>line<S2SV_blank>status<S2SV_blank>failed:<S2SV_blank>%d\\n" , dev ) ; goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> iph -> dev <S2SV_ModEnd> ) ; goto
<S2SV_ModStart> void * r , vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> { int * const vpx_prob <S2SV_ModEnd> * p ) <S2SV_ModStart> { const p = ( PREDICTION_MODE ) vpx_read_tree <S2SV_ModEnd> ( r ,
<S2SV_ModStart> ctxt ) { int rc ; unsigned long eip ; rc = emulate_pop ( ctxt , & eip , <S2SV_ModEnd> ctxt -> X86EMUL_CONTINUE ) return <S2SV_ModStart> src -> emulate_pop ( ctxt , i , eip <S2SV_ModEnd> ) ; if
<S2SV_ModStart> * sk = NULL ; newnp -> <S2SV_ModStart> newinet -> inet_opt = NULL ; newnp -> ipv6_mc_list
<S2SV_ModStart> costs , const vpx_prob <S2SV_ModEnd> * probs , <S2SV_ModStart> * probs , vpx_tree <S2SV_ModEnd> tree ) { <S2SV_ModStart> / probs , vpx_tree <S2SV_ModEnd> tree ) ;
