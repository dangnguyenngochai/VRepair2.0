static int parseOperand ( RAsm * a , const char * str , Operand * op , bool isrepop ) { //<S2SV> size_t pos , nextpos = 0 ; //<S2SV> x86newTokenType last_type ; //<S2SV> int size_token = 1 ; //<S2SV> bool explicit_size = false ; //<S2SV> int reg_index = 0 ; //<S2SV> op -> type = 0 ; //<S2SV> while ( size_token ) { //<S2SV> pos = nextpos ; //<S2SV> last_type = getToken ( str , & pos , & nextpos ) ; //<S2SV> if ( ! r_str_ncasecmp ( str + pos , "ptr" , 3 ) ) { //<S2SV> continue ; //<S2SV> } else if ( ! r_str_ncasecmp ( str + pos , "byte" , 4 ) ) { //<S2SV> op -> type |= OT_MEMORY | OT_BYTE ; //<S2SV> op -> dest_size = OT_BYTE ; //<S2SV> explicit_size = true ; //<S2SV> } else if ( ! r_str_ncasecmp ( str + pos , "word" , 4 ) ) { //<S2SV> op -> type |= OT_MEMORY | OT_WORD ; //<S2SV> op -> dest_size = OT_WORD ; //<S2SV> explicit_size = true ; //<S2SV> } else if ( ! r_str_ncasecmp ( str + pos , "dword" , 5 ) ) { //<S2SV> op -> type |= OT_MEMORY | OT_DWORD ; //<S2SV> op -> dest_size = OT_DWORD ; //<S2SV> explicit_size = true ; //<S2SV> } else if ( ! r_str_ncasecmp ( str + pos , "qword" , 5 ) ) { //<S2SV> op -> type |= OT_MEMORY | OT_QWORD ; //<S2SV> op -> dest_size = OT_QWORD ; //<S2SV> explicit_size = true ; //<S2SV> } else if ( ! r_str_ncasecmp ( str + pos , "oword" , 5 ) ) { //<S2SV> op -> type |= OT_MEMORY | OT_OWORD ; //<S2SV> op -> dest_size = OT_OWORD ; //<S2SV> explicit_size = true ; //<S2SV> } else if ( ! r_str_ncasecmp ( str + pos , "tbyte" , 5 ) ) { //<S2SV> op -> type |= OT_MEMORY | OT_TBYTE ; //<S2SV> op -> dest_size = OT_TBYTE ; //<S2SV> explicit_size = true ; //<S2SV> } else { //<S2SV> size_token = 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( str [ pos ] == '[' ) { //<S2SV> if ( ! op -> type ) { //<S2SV> op -> type = OT_MEMORY ; //<S2SV> } //<S2SV> op -> offset = op -> scale [ 0 ] = op -> scale [ 1 ] = 0 ; //<S2SV> ut64 temp = 1 ; //<S2SV> Register reg = X86R_UNDEFINED ; //<S2SV> bool first_reg = true ; //<S2SV> while ( str [ pos ] != ']' ) { //<S2SV> if ( pos > nextpos ) { //<S2SV> break ; //<S2SV> } //<S2SV> pos = nextpos ; //<S2SV> if ( ! str [ pos ] ) { //<S2SV> break ; //<S2SV> } //<S2SV> last_type = getToken ( str , & pos , & nextpos ) ; //<S2SV> if ( last_type == TT_SPECIAL ) { //<S2SV> if ( str [ pos ] == '+' || str [ pos ] == '-' || str [ pos ] == ']' ) { //<S2SV> if ( reg != X86R_UNDEFINED ) { //<S2SV> op -> regs [ reg_index ] = reg ; //<S2SV> op -> scale [ reg_index ] = temp ; //<S2SV> ++ reg_index ; //<S2SV> } else { //<S2SV> op -> offset += temp ; //<S2SV> op -> regs [ reg_index ] = X86R_UNDEFINED ; //<S2SV> } //<S2SV> temp = 1 ; //<S2SV> reg = X86R_UNDEFINED ; //<S2SV> } else if ( str [ pos ] == '*' ) { //<S2SV> } //<S2SV> } //<S2SV> else if ( last_type == TT_WORD ) { //<S2SV> ut32 reg_type = 0 ; //<S2SV> if ( reg != X86R_UNDEFINED ) { //<S2SV> op -> type = 0 ; //<S2SV> } //<S2SV> nextpos = pos ; //<S2SV> reg = parseReg ( a , str , & nextpos , & reg_type ) ; //<S2SV> if ( first_reg ) { //<S2SV> op -> extended = false ; //<S2SV> if ( reg > 8 ) { //<S2SV> op -> extended = true ; //<S2SV> op -> reg = reg - 9 ; //<S2SV> } //<S2SV> first_reg = false ; //<S2SV> } else if ( reg > 8 ) { //<S2SV> op -> reg = reg - 9 ; //<S2SV> } //<S2SV> if ( reg_type & OT_REGTYPE & OT_SEGMENTREG ) { //<S2SV> op -> reg = reg ; //<S2SV> op -> type = reg_type ; //<S2SV> parse_segment_offset ( a , str , & nextpos , op , reg_index ) ; //<S2SV> return nextpos ; //<S2SV> } //<S2SV> if ( ! explicit_size ) { //<S2SV> op -> type |= reg_type ; //<S2SV> } //<S2SV> op -> reg_size = reg_type ; //<S2SV> op -> explicit_size = explicit_size ; //<S2SV> if ( ! ( reg_type & OT_GPREG ) ) { //<S2SV> op -> type = 0 ; //<S2SV> } //<S2SV> } //<S2SV> else { //<S2SV> char * p = strchr ( str , '+' ) ; //<S2SV> op -> offset_sign = 1 ; //<S2SV> if ( ! p ) { //<S2SV> p = strchr ( str , '-' ) ; //<S2SV> if ( p ) { //<S2SV> op -> offset_sign = - 1 ; //<S2SV> } //<S2SV> } //<S2SV> char * plus = strchr ( str , '+' ) ; //<S2SV> char * minus = strchr ( str , '-' ) ; //<S2SV> char * closeB = strchr ( str , ']' ) ; //<S2SV> if ( plus && minus && plus < closeB && minus < closeB ) { //<S2SV> op -> offset_sign = - 1 ; //<S2SV> } //<S2SV> char * tmp ; //<S2SV> tmp = malloc ( strlen ( str + pos ) + 1 ) ; //<S2SV> strcpy ( tmp , str + pos ) ; //<S2SV> strtok ( tmp , "+-" ) ; //<S2SV> st64 read = getnum ( a , tmp ) ; //<S2SV> free ( tmp ) ; //<S2SV> temp *= read ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( last_type == TT_WORD ) { //<S2SV> nextpos = pos ; //<S2SV> RFlagItem * flag ; //<S2SV> if ( isrepop ) { //<S2SV> op -> is_good_flag = false ; //<S2SV> strncpy ( op -> rep_op , str , MAX_REPOP_LENGTH - 1 ) ; //<S2SV> op -> rep_op [ MAX_REPOP_LENGTH - 1 ] = '\\0' ; //<S2SV> return nextpos ; //<S2SV> } //<S2SV> op -> reg = parseReg ( a , str , & nextpos , & op -> type ) ; //<S2SV> op -> extended = false ; //<S2SV> if ( op -> reg > 8 ) { //<S2SV> op -> extended = true ; //<S2SV> op -> reg -= 9 ; //<S2SV> } //<S2SV> if ( op -> type & OT_REGTYPE & OT_SEGMENTREG ) { //<S2SV> parse_segment_offset ( a , str , & nextpos , op , reg_index ) ; //<S2SV> return nextpos ; //<S2SV> } //<S2SV> if ( op -> reg == X86R_UNDEFINED ) { //<S2SV> op -> is_good_flag = false ; //<S2SV> if ( a -> num && a -> num -> value == 0 ) { //<S2SV> return nextpos ; //<S2SV> } //<S2SV> op -> type = OT_CONSTANT ; //<S2SV> RCore * core = a -> num ? ( RCore * ) ( a -> num -> userptr ) : NULL ; //<S2SV> if ( core && ( flag = r_flag_get ( core -> flags , str ) ) ) { //<S2SV> op -> is_good_flag = true ; //<S2SV> } //<S2SV> char * p = strchr ( str , '-' ) ; //<S2SV> if ( p ) { //<S2SV> op -> sign = - 1 ; //<S2SV> str = ++ p ; //<S2SV> } //<S2SV> op -> immediate = getnum ( a , str ) ; //<S2SV> } else if ( op -> reg < X86R_UNDEFINED ) { //<S2SV> strncpy ( op -> rep_op , str , MAX_REPOP_LENGTH - 1 ) ; //<S2SV> op -> rep_op [ MAX_REPOP_LENGTH - 1 ] = '\\0' ; //<S2SV> } //<S2SV> } else { //<S2SV> op -> type = OT_CONSTANT ; //<S2SV> op -> sign = 1 ; //<S2SV> char * p = strchr ( str , '-' ) ; //<S2SV> if ( p ) { //<S2SV> op -> sign = - 1 ; //<S2SV> str = ++ p ; //<S2SV> } //<S2SV> op -> immediate = getnum ( a , str ) ; //<S2SV> } //<S2SV> return nextpos ; //<S2SV> } //<S2SV> 