static void dex_parse_debug_item ( RBinFile * binfile , RBinDexObj * bin , //<S2SV> RBinDexClass * c , int MI , int MA , int paddr , int ins_size , //<S2SV> int insns_size , char * class_name , int regsz , //<S2SV> int debug_info_off ) { //<S2SV> struct r_bin_t * rbin = binfile -> rbin ; //<S2SV> const ut8 * p4 = r_buf_get_at ( binfile -> buf , debug_info_off , NULL ) ; //<S2SV> const ut8 * p4_end = p4 + binfile -> buf -> length - debug_info_off ; //<S2SV> ut64 line_start ; //<S2SV> ut64 parameters_size ; //<S2SV> ut64 param_type_idx ; //<S2SV> ut16 argReg = regsz - ins_size ; //<S2SV> ut64 source_file_idx = c -> source_file ; //<S2SV> RList * params , * debug_positions , * emitted_debug_locals = NULL ; //<S2SV> bool keep = true ; //<S2SV> if ( argReg > regsz ) { //<S2SV> return ; //<S2SV> } //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & line_start ) ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & parameters_size ) ; //<S2SV> ut32 address = 0 ; //<S2SV> ut32 line = line_start ; //<S2SV> if ( ! ( debug_positions = r_list_newf ( ( RListFree ) free ) ) ) { //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! ( emitted_debug_locals = r_list_newf ( ( RListFree ) free ) ) ) { //<S2SV> r_list_free ( debug_positions ) ; //<S2SV> return ; //<S2SV> } //<S2SV> struct dex_debug_local_t debug_locals [ regsz ] ; //<S2SV> memset ( debug_locals , 0 , sizeof ( struct dex_debug_local_t ) * regsz ) ; //<S2SV> if ( ! ( MA & 0x0008 ) ) { //<S2SV> debug_locals [ argReg ] . name = "this" ; //<S2SV> debug_locals [ argReg ] . descriptor = r_str_newf ( "%s;" , class_name ) ; //<S2SV> debug_locals [ argReg ] . startAddress = 0 ; //<S2SV> debug_locals [ argReg ] . signature = NULL ; //<S2SV> debug_locals [ argReg ] . live = true ; //<S2SV> argReg ++ ; //<S2SV> } //<S2SV> if ( ! ( params = dex_method_signature2 ( bin , MI ) ) ) { //<S2SV> r_list_free ( debug_positions ) ; //<S2SV> r_list_free ( emitted_debug_locals ) ; //<S2SV> return ; //<S2SV> } //<S2SV> RListIter * iter = r_list_iterator ( params ) ; //<S2SV> char * name ; //<S2SV> char * type ; //<S2SV> int reg ; //<S2SV> r_list_foreach ( params , iter , type ) { //<S2SV> if ( ( argReg >= regsz ) || ! type || parameters_size <= 0 ) { //<S2SV> r_list_free ( debug_positions ) ; //<S2SV> r_list_free ( params ) ; //<S2SV> r_list_free ( emitted_debug_locals ) ; //<S2SV> return ; //<S2SV> } //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & param_type_idx ) ; //<S2SV> param_type_idx -= 1 ; //<S2SV> name = getstr ( bin , param_type_idx ) ; //<S2SV> reg = argReg ; //<S2SV> switch ( type [ 0 ] ) { //<S2SV> case 'D' : //<S2SV> case 'J' : //<S2SV> argReg += 2 ; //<S2SV> break ; //<S2SV> default : //<S2SV> argReg += 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( name ) { //<S2SV> debug_locals [ reg ] . name = name ; //<S2SV> debug_locals [ reg ] . descriptor = type ; //<S2SV> debug_locals [ reg ] . signature = NULL ; //<S2SV> debug_locals [ reg ] . startAddress = address ; //<S2SV> debug_locals [ reg ] . live = true ; //<S2SV> } //<S2SV> -- parameters_size ; //<S2SV> } //<S2SV> ut8 opcode = * ( p4 ++ ) & 0xff ; //<S2SV> while ( keep ) { //<S2SV> switch ( opcode ) { //<S2SV> case 0x0 : //<S2SV> keep = false ; //<S2SV> break ; //<S2SV> case 0x1 : //<S2SV> { //<S2SV> ut64 addr_diff ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & addr_diff ) ; //<S2SV> address += addr_diff ; //<S2SV> } //<S2SV> break ; //<S2SV> case 0x2 : //<S2SV> { //<S2SV> st64 line_diff = r_sleb128 ( & p4 , p4_end ) ; //<S2SV> line += line_diff ; //<S2SV> } //<S2SV> break ; //<S2SV> case 0x3 : //<S2SV> { //<S2SV> ut64 register_num ; //<S2SV> ut64 name_idx ; //<S2SV> ut64 type_idx ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & register_num ) ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & name_idx ) ; //<S2SV> name_idx -= 1 ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & type_idx ) ; //<S2SV> type_idx -= 1 ; //<S2SV> if ( register_num >= regsz ) { //<S2SV> r_list_free ( debug_positions ) ; //<S2SV> r_list_free ( params ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( debug_locals [ register_num ] . live ) { //<S2SV> struct dex_debug_local_t * local = malloc ( //<S2SV> sizeof ( struct dex_debug_local_t ) ) ; //<S2SV> if ( ! local ) { //<S2SV> keep = false ; //<S2SV> break ; //<S2SV> } //<S2SV> local -> name = debug_locals [ register_num ] . name ; //<S2SV> local -> descriptor = debug_locals [ register_num ] . descriptor ; //<S2SV> local -> startAddress = debug_locals [ register_num ] . startAddress ; //<S2SV> local -> signature = debug_locals [ register_num ] . signature ; //<S2SV> local -> live = true ; //<S2SV> local -> reg = register_num ; //<S2SV> local -> endAddress = address ; //<S2SV> r_list_append ( emitted_debug_locals , local ) ; //<S2SV> } //<S2SV> debug_locals [ register_num ] . name = getstr ( bin , name_idx ) ; //<S2SV> debug_locals [ register_num ] . descriptor = dex_type_descriptor ( bin , type_idx ) ; //<S2SV> debug_locals [ register_num ] . startAddress = address ; //<S2SV> debug_locals [ register_num ] . signature = NULL ; //<S2SV> debug_locals [ register_num ] . live = true ; //<S2SV> } //<S2SV> break ; //<S2SV> case 0x4 : //<S2SV> { //<S2SV> ut64 register_num ; //<S2SV> ut64 name_idx ; //<S2SV> ut64 type_idx ; //<S2SV> ut64 sig_idx ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & register_num ) ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & name_idx ) ; //<S2SV> name_idx -= 1 ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & type_idx ) ; //<S2SV> type_idx -= 1 ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & sig_idx ) ; //<S2SV> sig_idx -= 1 ; //<S2SV> if ( register_num >= regsz ) { //<S2SV> r_list_free ( debug_positions ) ; //<S2SV> r_list_free ( params ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( debug_locals [ register_num ] . live ) { //<S2SV> struct dex_debug_local_t * local = malloc ( //<S2SV> sizeof ( struct dex_debug_local_t ) ) ; //<S2SV> if ( ! local ) { //<S2SV> keep = false ; //<S2SV> break ; //<S2SV> } //<S2SV> local -> name = debug_locals [ register_num ] . name ; //<S2SV> local -> descriptor = debug_locals [ register_num ] . descriptor ; //<S2SV> local -> startAddress = debug_locals [ register_num ] . startAddress ; //<S2SV> local -> signature = debug_locals [ register_num ] . signature ; //<S2SV> local -> live = true ; //<S2SV> local -> reg = register_num ; //<S2SV> local -> endAddress = address ; //<S2SV> r_list_append ( emitted_debug_locals , local ) ; //<S2SV> } //<S2SV> debug_locals [ register_num ] . name = getstr ( bin , name_idx ) ; //<S2SV> debug_locals [ register_num ] . descriptor = dex_type_descriptor ( bin , type_idx ) ; //<S2SV> debug_locals [ register_num ] . startAddress = address ; //<S2SV> debug_locals [ register_num ] . signature = getstr ( bin , sig_idx ) ; //<S2SV> debug_locals [ register_num ] . live = true ; //<S2SV> } //<S2SV> break ; //<S2SV> case 0x5 : //<S2SV> { //<S2SV> ut64 register_num ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & register_num ) ; //<S2SV> if ( debug_locals [ register_num ] . live ) { //<S2SV> struct dex_debug_local_t * local = malloc ( //<S2SV> sizeof ( struct dex_debug_local_t ) ) ; //<S2SV> if ( ! local ) { //<S2SV> keep = false ; //<S2SV> break ; //<S2SV> } //<S2SV> local -> name = debug_locals [ register_num ] . name ; //<S2SV> local -> descriptor = debug_locals [ register_num ] . descriptor ; //<S2SV> local -> startAddress = debug_locals [ register_num ] . startAddress ; //<S2SV> local -> signature = debug_locals [ register_num ] . signature ; //<S2SV> local -> live = true ; //<S2SV> local -> reg = register_num ; //<S2SV> local -> endAddress = address ; //<S2SV> r_list_append ( emitted_debug_locals , local ) ; //<S2SV> } //<S2SV> debug_locals [ register_num ] . live = false ; //<S2SV> } //<S2SV> break ; //<S2SV> case 0x6 : //<S2SV> { //<S2SV> ut64 register_num ; //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & register_num ) ; //<S2SV> if ( ! debug_locals [ register_num ] . live ) { //<S2SV> debug_locals [ register_num ] . startAddress = address ; //<S2SV> debug_locals [ register_num ] . live = true ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 0x7 : //<S2SV> break ; //<S2SV> case 0x8 : //<S2SV> break ; //<S2SV> case 0x9 : //<S2SV> { //<S2SV> p4 = r_uleb128 ( p4 , p4_end - p4 , & source_file_idx ) ; //<S2SV> source_file_idx -- ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> { //<S2SV> int adjusted_opcode = opcode - 0x0a ; //<S2SV> address += ( adjusted_opcode / 15 ) ; //<S2SV> line += - 4 + ( adjusted_opcode % 15 ) ; //<S2SV> struct dex_debug_position_t * position = //<S2SV> malloc ( sizeof ( struct dex_debug_position_t ) ) ; //<S2SV> if ( ! position ) { //<S2SV> keep = false ; //<S2SV> break ; //<S2SV> } //<S2SV> position -> source_file_idx = source_file_idx ; //<S2SV> position -> address = address ; //<S2SV> position -> line = line ; //<S2SV> r_list_append ( debug_positions , position ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> opcode = * ( p4 ++ ) & 0xff ; //<S2SV> } //<S2SV> if ( ! binfile -> sdb_addrinfo ) { //<S2SV> binfile -> sdb_addrinfo = sdb_new0 ( ) ; //<S2SV> } //<S2SV> char * fileline ; //<S2SV> char offset [ 64 ] ; //<S2SV> char * offset_ptr ; //<S2SV> RListIter * iter1 ; //<S2SV> struct dex_debug_position_t * pos ; //<S2SV> r_list_foreach ( debug_positions , iter1 , pos ) { //<S2SV> fileline = r_str_newf ( "%s|%" PFMT64d , getstr ( bin , pos -> source_file_idx ) , pos -> line ) ; //<S2SV> offset_ptr = sdb_itoa ( pos -> address + paddr , offset , 16 ) ; //<S2SV> sdb_set ( binfile -> sdb_addrinfo , offset_ptr , fileline , 0 ) ; //<S2SV> sdb_set ( binfile -> sdb_addrinfo , fileline , offset_ptr , 0 ) ; //<S2SV> } //<S2SV> if ( ! dexdump ) { //<S2SV> r_list_free ( debug_positions ) ; //<S2SV> r_list_free ( emitted_debug_locals ) ; //<S2SV> r_list_free ( params ) ; //<S2SV> return ; //<S2SV> } //<S2SV> RListIter * iter2 ; //<S2SV> struct dex_debug_position_t * position ; //<S2SV> rbin -> cb_printf ( "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>positions<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>:\\n" ) ; //<S2SV> r_list_foreach ( debug_positions , iter2 , position ) { //<S2SV> rbin -> cb_printf ( "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>0x%04llx<S2SV_blank>line=%llu\\n" , //<S2SV> position -> address , position -> line ) ; //<S2SV> } //<S2SV> rbin -> cb_printf ( "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>locals<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>:\\n" ) ; //<S2SV> RListIter * iter3 ; //<S2SV> struct dex_debug_local_t * local ; //<S2SV> r_list_foreach ( emitted_debug_locals , iter3 , local ) { //<S2SV> if ( local -> signature ) { //<S2SV> rbin -> cb_printf ( //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>0x%04x<S2SV_blank>-<S2SV_blank>0x%04x<S2SV_blank>reg=%d<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>%s\\n" , //<S2SV> local -> startAddress , local -> endAddress , //<S2SV> local -> reg , local -> name , local -> descriptor , //<S2SV> local -> signature ) ; //<S2SV> } else { //<S2SV> rbin -> cb_printf ( //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>0x%04x<S2SV_blank>-<S2SV_blank>0x%04x<S2SV_blank>reg=%d<S2SV_blank>%s<S2SV_blank>%s\\n" , //<S2SV> local -> startAddress , local -> endAddress , //<S2SV> local -> reg , local -> name , local -> descriptor ) ; //<S2SV> } //<S2SV> } //<S2SV> for ( reg = 0 ; reg < regsz ; reg ++ ) { //<S2SV> if ( debug_locals [ reg ] . live ) { //<S2SV> if ( debug_locals [ reg ] . signature ) { //<S2SV> rbin -> cb_printf ( //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>0x%04x<S2SV_blank>-<S2SV_blank>0x%04x<S2SV_blank>reg=%d<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>" //<S2SV> "%s\\n" , //<S2SV> debug_locals [ reg ] . startAddress , //<S2SV> insns_size , reg , debug_locals [ reg ] . name , //<S2SV> debug_locals [ reg ] . descriptor , //<S2SV> debug_locals [ reg ] . signature ) ; //<S2SV> } else { //<S2SV> rbin -> cb_printf ( //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>0x%04x<S2SV_blank>-<S2SV_blank>0x%04x<S2SV_blank>reg=%d<S2SV_blank>%s<S2SV_blank>%s" //<S2SV> "\\n" , //<S2SV> debug_locals [ reg ] . startAddress , //<S2SV> insns_size , reg , debug_locals [ reg ] . name , //<S2SV> debug_locals [ reg ] . descriptor ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> r_list_free ( debug_positions ) ; //<S2SV> r_list_free ( emitted_debug_locals ) ; //<S2SV> r_list_free ( params ) ; //<S2SV> } //<S2SV> 