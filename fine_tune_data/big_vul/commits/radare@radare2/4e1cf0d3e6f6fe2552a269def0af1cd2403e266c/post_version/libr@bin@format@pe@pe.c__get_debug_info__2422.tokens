static int get_debug_info ( struct PE_ ( r_bin_pe_obj_t ) * bin , PE_ ( image_debug_directory_entry ) * dbg_dir_entry , ut8 * dbg_data , int dbg_data_len , SDebugInfo * res ) { //<S2SV> # define SIZEOF_FILE_NAME 255 //<S2SV> int i = 0 ; //<S2SV> const char * basename ; //<S2SV> if ( ! dbg_data ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> switch ( dbg_dir_entry -> Type ) { //<S2SV> case IMAGE_DEBUG_TYPE_CODEVIEW : //<S2SV> if ( ! strncmp ( ( char * ) dbg_data , "RSDS" , 4 ) ) { //<S2SV> SCV_RSDS_HEADER rsds_hdr ; //<S2SV> init_rsdr_hdr ( & rsds_hdr ) ; //<S2SV> if ( ! get_rsds ( dbg_data , dbg_data_len , & rsds_hdr ) ) { //<S2SV> bprintf ( "Warning:<S2SV_blank>Cannot<S2SV_blank>read<S2SV_blank>PE<S2SV_blank>debug<S2SV_blank>info\\n" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> snprintf ( res -> guidstr , GUIDSTR_LEN , //<S2SV> "%08x%04x%04x%02x%02x%02x%02x%02x%02x%02x%02x%x" , //<S2SV> rsds_hdr . guid . data1 , //<S2SV> rsds_hdr . guid . data2 , //<S2SV> rsds_hdr . guid . data3 , //<S2SV> rsds_hdr . guid . data4 [ 0 ] , //<S2SV> rsds_hdr . guid . data4 [ 1 ] , //<S2SV> rsds_hdr . guid . data4 [ 2 ] , //<S2SV> rsds_hdr . guid . data4 [ 3 ] , //<S2SV> rsds_hdr . guid . data4 [ 4 ] , //<S2SV> rsds_hdr . guid . data4 [ 5 ] , //<S2SV> rsds_hdr . guid . data4 [ 6 ] , //<S2SV> rsds_hdr . guid . data4 [ 7 ] , //<S2SV> rsds_hdr . age ) ; //<S2SV> basename = r_file_basename ( ( char * ) rsds_hdr . file_name ) ; //<S2SV> strncpy ( res -> file_name , ( const char * ) //<S2SV> basename , sizeof ( res -> file_name ) ) ; //<S2SV> res -> file_name [ sizeof ( res -> file_name ) - 1 ] = 0 ; //<S2SV> rsds_hdr . free ( ( struct SCV_RSDS_HEADER * ) & rsds_hdr ) ; //<S2SV> } else if ( strncmp ( ( const char * ) dbg_data , "NB10" , 4 ) == 0 ) { //<S2SV> if ( dbg_data_len < 20 ) { //<S2SV> eprintf ( "Truncated<S2SV_blank>NB10<S2SV_blank>entry,<S2SV_blank>not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>to<S2SV_blank>parse\\n" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> SCV_NB10_HEADER nb10_hdr = { { 0 } } ; //<S2SV> init_cv_nb10_header ( & nb10_hdr ) ; //<S2SV> get_nb10 ( dbg_data , & nb10_hdr ) ; //<S2SV> snprintf ( res -> guidstr , sizeof ( res -> guidstr ) , //<S2SV> "%x%x" , nb10_hdr . timestamp , nb10_hdr . age ) ; //<S2SV> res -> file_name [ 0 ] = 0 ; //<S2SV> if ( nb10_hdr . file_name ) { //<S2SV> strncpy ( res -> file_name , ( const char * ) //<S2SV> nb10_hdr . file_name , sizeof ( res -> file_name ) - 1 ) ; //<S2SV> } //<S2SV> res -> file_name [ sizeof ( res -> file_name ) - 1 ] = 0 ; //<S2SV> nb10_hdr . free ( ( struct SCV_NB10_HEADER * ) & nb10_hdr ) ; //<S2SV> } else { //<S2SV> bprintf ( "CodeView<S2SV_blank>section<S2SV_blank>not<S2SV_blank>NB10<S2SV_blank>or<S2SV_blank>RSDS\\n" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> return 0 ; //<S2SV> } //<S2SV> while ( i < 33 ) { //<S2SV> res -> guidstr [ i ] = toupper ( ( int ) res -> guidstr [ i ] ) ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 