static void process_constructors ( RBinFile * bf , RList * ret , int bits ) { //<S2SV> RList * secs = sections ( bf ) ; //<S2SV> RListIter * iter ; //<S2SV> RBinSection * sec ; //<S2SV> int i , type ; //<S2SV> r_list_foreach ( secs , iter , sec ) { //<S2SV> type = - 1 ; //<S2SV> if ( ! strcmp ( sec -> name , ".fini_array" ) ) { //<S2SV> type = R_BIN_ENTRY_TYPE_FINI ; //<S2SV> } else if ( ! strcmp ( sec -> name , ".init_array" ) ) { //<S2SV> type = R_BIN_ENTRY_TYPE_INIT ; //<S2SV> } else if ( ! strcmp ( sec -> name , ".preinit_array" ) ) { //<S2SV> type = R_BIN_ENTRY_TYPE_PREINIT ; //<S2SV> } //<S2SV> if ( type != - 1 ) { //<S2SV> ut8 * buf = calloc ( sec -> size , 1 ) ; //<S2SV> if ( ! buf ) { //<S2SV> continue ; //<S2SV> } //<S2SV> ( void ) r_buf_read_at ( bf -> buf , sec -> paddr , buf , sec -> size ) ; //<S2SV> if ( bits == 32 ) { //<S2SV> for ( i = 0 ; ( i + 3 ) < sec -> size ; i += 4 ) { //<S2SV> ut32 addr32 = r_read_le32 ( buf + i ) ; //<S2SV> if ( addr32 ) { //<S2SV> RBinAddr * ba = newEntry ( sec -> paddr + i , ( ut64 ) addr32 , type , bits ) ; //<S2SV> r_list_append ( ret , ba ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> for ( i = 0 ; ( i + 7 ) < sec -> size ; i += 8 ) { //<S2SV> ut64 addr64 = r_read_le64 ( buf + i ) ; //<S2SV> if ( addr64 ) { //<S2SV> RBinAddr * ba = newEntry ( sec -> paddr + i , addr64 , type , bits ) ; //<S2SV> r_list_append ( ret , ba ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> free ( buf ) ; //<S2SV> } //<S2SV> } //<S2SV> r_list_free ( secs ) ; //<S2SV> } //<S2SV> 