static int _6502_op ( RAnal * anal , RAnalOp * op , ut64 addr , const ut8 * data , int len ) { //<S2SV> char addrbuf [ 64 ] ; //<S2SV> const int buffsize = sizeof ( addrbuf ) - 1 ; //<S2SV> memset ( op , '\\0' , sizeof ( RAnalOp ) ) ; //<S2SV> op -> size = snes_op_get_size ( 1 , 1 , & snes_op [ data [ 0 ] ] ) ; //<S2SV> op -> addr = addr ; //<S2SV> op -> type = R_ANAL_OP_TYPE_UNK ; //<S2SV> op -> id = data [ 0 ] ; //<S2SV> r_strbuf_init ( & op -> esil ) ; //<S2SV> switch ( data [ 0 ] ) { //<S2SV> case 0x02 : //<S2SV> case 0x03 : //<S2SV> case 0x04 : //<S2SV> case 0x07 : //<S2SV> case 0x0b : //<S2SV> case 0x0c : //<S2SV> case 0x0f : //<S2SV> case 0x12 : //<S2SV> case 0x13 : //<S2SV> case 0x14 : //<S2SV> case 0x17 : //<S2SV> case 0x1a : //<S2SV> case 0x1b : //<S2SV> case 0x1c : //<S2SV> case 0x1f : //<S2SV> case 0x22 : //<S2SV> case 0x23 : //<S2SV> case 0x27 : //<S2SV> case 0x2b : //<S2SV> case 0x2f : //<S2SV> case 0x32 : //<S2SV> case 0x33 : //<S2SV> case 0x34 : //<S2SV> case 0x37 : //<S2SV> case 0x3a : //<S2SV> case 0x3b : //<S2SV> case 0x3c : //<S2SV> case 0x3f : //<S2SV> case 0x42 : //<S2SV> case 0x43 : //<S2SV> case 0x44 : //<S2SV> case 0x47 : //<S2SV> case 0x4b : //<S2SV> case 0x4f : //<S2SV> case 0x52 : //<S2SV> case 0x53 : //<S2SV> case 0x54 : //<S2SV> case 0x57 : //<S2SV> case 0x5a : //<S2SV> case 0x5b : //<S2SV> case 0x5c : //<S2SV> case 0x5f : //<S2SV> case 0x62 : //<S2SV> case 0x63 : //<S2SV> case 0x64 : //<S2SV> case 0x67 : //<S2SV> case 0x6b : //<S2SV> case 0x6f : //<S2SV> case 0x72 : //<S2SV> case 0x73 : //<S2SV> case 0x74 : //<S2SV> case 0x77 : //<S2SV> case 0x7a : //<S2SV> case 0x7b : //<S2SV> case 0x7c : //<S2SV> case 0x7f : //<S2SV> case 0x80 : //<S2SV> case 0x82 : //<S2SV> case 0x83 : //<S2SV> case 0x87 : //<S2SV> case 0x89 : //<S2SV> case 0x8b : //<S2SV> case 0x8f : //<S2SV> case 0x92 : //<S2SV> case 0x93 : //<S2SV> case 0x97 : //<S2SV> case 0x9b : //<S2SV> case 0x9c : //<S2SV> case 0x9e : //<S2SV> case 0x9f : //<S2SV> case 0xa3 : //<S2SV> case 0xa7 : //<S2SV> case 0xab : //<S2SV> case 0xaf : //<S2SV> case 0xb2 : //<S2SV> case 0xb3 : //<S2SV> case 0xb7 : //<S2SV> case 0xbb : //<S2SV> case 0xbf : //<S2SV> case 0xc2 : //<S2SV> case 0xc3 : //<S2SV> case 0xc7 : //<S2SV> case 0xcb : //<S2SV> case 0xcf : //<S2SV> case 0xd2 : //<S2SV> case 0xd3 : //<S2SV> case 0xd4 : //<S2SV> case 0xd7 : //<S2SV> case 0xda : //<S2SV> case 0xdb : //<S2SV> case 0xdc : //<S2SV> case 0xdf : //<S2SV> case 0xe2 : //<S2SV> case 0xe3 : //<S2SV> case 0xe7 : //<S2SV> case 0xeb : //<S2SV> case 0xef : //<S2SV> case 0xf2 : //<S2SV> case 0xf3 : //<S2SV> case 0xf4 : //<S2SV> case 0xf7 : //<S2SV> case 0xfa : //<S2SV> case 0xfb : //<S2SV> case 0xfc : //<S2SV> case 0xff : //<S2SV> op -> size = 1 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_ILL ; //<S2SV> break ; //<S2SV> case 0x00 : //<S2SV> op -> cycles = 7 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_SWI ; //<S2SV> op -> size = 1 ; //<S2SV> r_strbuf_set ( & op -> esil , ",1,I,=,0,D,=,flags,0x10,|,0x100,sp,+,=[1],pc,1,+,0xfe,sp,+,=[2],3,sp,-=,0xfffe,[2],pc,=" ) ; //<S2SV> break ; //<S2SV> case 0x78 : //<S2SV> case 0x58 : //<S2SV> case 0x38 : //<S2SV> case 0x18 : //<S2SV> case 0xf8 : //<S2SV> case 0xd8 : //<S2SV> case 0xb8 : //<S2SV> op -> cycles = 2 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_NOP ; //<S2SV> _6502_anal_esil_flags ( op , data [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 0x24 : //<S2SV> case 0x2c : //<S2SV> op -> type = R_ANAL_OP_TYPE_MOV ; //<S2SV> _6502_anal_esil_get_addr_pattern3 ( op , data , addrbuf , buffsize , 0 ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "a,%s,[1],&,0x80,&,!,!,N,=,a,%s,[1],&,0x40,&,!,!,V,=,a,%s,[1],&,0xff,&,!,Z,=" , addrbuf , addrbuf , addrbuf ) ; //<S2SV> break ; //<S2SV> case 0x69 : //<S2SV> case 0x65 : //<S2SV> case 0x75 : //<S2SV> case 0x6d : //<S2SV> case 0x7d : //<S2SV> case 0x79 : //<S2SV> case 0x61 : //<S2SV> case 0x71 : //<S2SV> op -> type = R_ANAL_OP_TYPE_ADD ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> if ( data [ 0 ] == 0x69 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],a,+=,C,NUM,$c7,C,=,a,+=,$c7,C,|=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> r_strbuf_append ( & op -> esil , ",a,a,=,$z,Z,=" ) ; //<S2SV> break ; //<S2SV> case 0xe9 : //<S2SV> case 0xe5 : //<S2SV> case 0xf5 : //<S2SV> case 0xed : //<S2SV> case 0xfd : //<S2SV> case 0xf9 : //<S2SV> case 0xe1 : //<S2SV> case 0xf1 : //<S2SV> op -> type = R_ANAL_OP_TYPE_SUB ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> if ( data [ 0 ] == 0xe9 ) //<S2SV> r_strbuf_setf ( & op -> esil , "C,!,%s,+,a,-=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "C,!,%s,[1],+,a,-=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_BNZ ) ; //<S2SV> r_strbuf_append ( & op -> esil , ",a,a,=,$z,Z,=,C,!=" ) ; //<S2SV> break ; //<S2SV> case 0x09 : //<S2SV> case 0x05 : //<S2SV> case 0x15 : //<S2SV> case 0x0d : //<S2SV> case 0x1d : //<S2SV> case 0x19 : //<S2SV> case 0x01 : //<S2SV> case 0x11 : //<S2SV> op -> type = R_ANAL_OP_TYPE_OR ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> if ( data [ 0 ] == 0x09 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,a,|=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],a,|=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0x29 : //<S2SV> case 0x25 : //<S2SV> case 0x35 : //<S2SV> case 0x2d : //<S2SV> case 0x3d : //<S2SV> case 0x39 : //<S2SV> case 0x21 : //<S2SV> case 0x31 : //<S2SV> op -> type = R_ANAL_OP_TYPE_AND ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> if ( data [ 0 ] == 0x29 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,a,&=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],a,&=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0x49 : //<S2SV> case 0x45 : //<S2SV> case 0x55 : //<S2SV> case 0x4d : //<S2SV> case 0x5d : //<S2SV> case 0x59 : //<S2SV> case 0x41 : //<S2SV> case 0x51 : //<S2SV> op -> type = R_ANAL_OP_TYPE_XOR ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> if ( data [ 0 ] == 0x49 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,a,^=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],a,^=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0x0a : //<S2SV> case 0x06 : //<S2SV> case 0x16 : //<S2SV> case 0x0e : //<S2SV> case 0x1e : //<S2SV> op -> type = R_ANAL_OP_TYPE_SHL ; //<S2SV> if ( data [ 0 ] == 0x0a ) { //<S2SV> r_strbuf_set ( & op -> esil , "1,a,<<=,$c7,C,=,a,a,=" ) ; //<S2SV> } else { //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "1,%s,[1],<<,%s,=[1],$c7,C,=" , addrbuf , addrbuf ) ; //<S2SV> } //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0x4a : //<S2SV> case 0x46 : //<S2SV> case 0x56 : //<S2SV> case 0x4e : //<S2SV> case 0x5e : //<S2SV> op -> type = R_ANAL_OP_TYPE_SHR ; //<S2SV> if ( data [ 0 ] == 0x4a ) { //<S2SV> r_strbuf_set ( & op -> esil , "1,a,&,C,=,1,a,>>=" ) ; //<S2SV> } else { //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "1,%s,[1],&,C,=,1,%s,[1],>>,%s,=[1]" , addrbuf , addrbuf , addrbuf ) ; //<S2SV> } //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0x2a : //<S2SV> case 0x26 : //<S2SV> case 0x36 : //<S2SV> case 0x2e : //<S2SV> case 0x3e : //<S2SV> op -> type = R_ANAL_OP_TYPE_ROL ; //<S2SV> if ( data [ 0 ] == 0x2a ) { //<S2SV> r_strbuf_set ( & op -> esil , "1,a,<<,C,|,a,=,$c7,C,=,a,a,=" ) ; //<S2SV> } else { //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "1,%s,[1],<<,C,|,%s,=[1],$c7,C,=" , addrbuf , addrbuf ) ; //<S2SV> } //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0x6a : //<S2SV> case 0x66 : //<S2SV> case 0x76 : //<S2SV> case 0x6e : //<S2SV> case 0x7e : //<S2SV> op -> type = R_ANAL_OP_TYPE_ROR ; //<S2SV> if ( data [ 0 ] == 0x6a ) { //<S2SV> r_strbuf_set ( & op -> esil , "C,N,=,1,a,&,C,=,1,a,>>,7,N,<<,|,a,=" ) ; //<S2SV> } else { //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "C,N,=,1,%s,[1],&,C,=,1,%s,[1],>>,7,N,<<,|,%s,=[1]" , addrbuf , addrbuf , addrbuf ) ; //<S2SV> } //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0xe6 : //<S2SV> case 0xf6 : //<S2SV> case 0xee : //<S2SV> case 0xfe : //<S2SV> op -> type = R_ANAL_OP_TYPE_STORE ; //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "%s,++=[1]" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0xc6 : //<S2SV> case 0xd6 : //<S2SV> case 0xce : //<S2SV> case 0xde : //<S2SV> op -> type = R_ANAL_OP_TYPE_STORE ; //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "%s,--=[1]" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0xe8 : //<S2SV> case 0xc8 : //<S2SV> op -> cycles = 2 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_STORE ; //<S2SV> _6502_anal_esil_inc_reg ( op , data [ 0 ] , "+" ) ; //<S2SV> break ; //<S2SV> case 0xca : //<S2SV> case 0x88 : //<S2SV> op -> cycles = 2 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_STORE ; //<S2SV> _6502_anal_esil_inc_reg ( op , data [ 0 ] , "-" ) ; //<S2SV> break ; //<S2SV> case 0xc9 : //<S2SV> case 0xc5 : //<S2SV> case 0xd5 : //<S2SV> case 0xcd : //<S2SV> case 0xdd : //<S2SV> case 0xd9 : //<S2SV> case 0xc1 : //<S2SV> case 0xd1 : //<S2SV> op -> type = R_ANAL_OP_TYPE_CMP ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> if ( data [ 0 ] == 0xc9 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,a,==" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],a,==" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_BNZ ) ; //<S2SV> r_strbuf_append ( & op -> esil , ",C,!,C,=" ) ; //<S2SV> break ; //<S2SV> case 0xe0 : //<S2SV> case 0xe4 : //<S2SV> case 0xec : //<S2SV> op -> type = R_ANAL_OP_TYPE_CMP ; //<S2SV> _6502_anal_esil_get_addr_pattern3 ( op , data , addrbuf , buffsize , 0 ) ; //<S2SV> if ( data [ 0 ] == 0xe0 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,x,==" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],x,==" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_BNZ ) ; //<S2SV> r_strbuf_append ( & op -> esil , ",C,!,C,=" ) ; //<S2SV> break ; //<S2SV> case 0xc0 : //<S2SV> case 0xc4 : //<S2SV> case 0xcc : //<S2SV> op -> type = R_ANAL_OP_TYPE_CMP ; //<S2SV> _6502_anal_esil_get_addr_pattern3 ( op , data , addrbuf , buffsize , 0 ) ; //<S2SV> if ( data [ 0 ] == 0xc0 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,y,==" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],y,==" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_BNZ ) ; //<S2SV> r_strbuf_append ( & op -> esil , ",C,!,C,=" ) ; //<S2SV> break ; //<S2SV> case 0x10 : //<S2SV> case 0x30 : //<S2SV> case 0x50 : //<S2SV> case 0x70 : //<S2SV> case 0x90 : //<S2SV> case 0xb0 : //<S2SV> case 0xd0 : //<S2SV> case 0xf0 : //<S2SV> op -> cycles = 2 ; //<S2SV> op -> failcycles = 3 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_CJMP ; //<S2SV> if ( data [ 1 ] <= 127 ) //<S2SV> op -> jump = addr + data [ 1 ] + op -> size ; //<S2SV> else op -> jump = addr - ( 256 - data [ 1 ] ) + op -> size ; //<S2SV> op -> fail = addr + op -> size ; //<S2SV> _6502_anal_esil_ccall ( op , data [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 0x20 : //<S2SV> op -> cycles = 6 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_CALL ; //<S2SV> op -> jump = data [ 1 ] | data [ 2 ] << 8 ; //<S2SV> op -> stackop = R_ANAL_STACK_INC ; //<S2SV> op -> stackptr = 2 ; //<S2SV> r_strbuf_setf ( & op -> esil , "1,pc,-,0xff,sp,+,=[2],0x%04x,pc,=,2,sp,-=" , op -> jump ) ; //<S2SV> break ; //<S2SV> case 0x4c : //<S2SV> op -> cycles = 3 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_JMP ; //<S2SV> op -> jump = data [ 1 ] | data [ 2 ] << 8 ; //<S2SV> r_strbuf_setf ( & op -> esil , "0x%04x,pc,=" , op -> jump ) ; //<S2SV> break ; //<S2SV> case 0x6c : //<S2SV> op -> cycles = 5 ; //<S2SV> op -> type = R_ANAL_OP_TYPE_UJMP ; //<S2SV> r_strbuf_setf ( & op -> esil , "0x%04x,[2],pc,=" , data [ 1 ] | data [ 2 ] << 8 ) ; //<S2SV> break ; //<S2SV> case 0x60 : //<S2SV> op -> eob = true ; //<S2SV> op -> type = R_ANAL_OP_TYPE_RET ; //<S2SV> op -> cycles = 6 ; //<S2SV> op -> stackop = R_ANAL_STACK_INC ; //<S2SV> op -> stackptr = - 2 ; //<S2SV> r_strbuf_set ( & op -> esil , "0x101,sp,+,[2],pc,=,pc,++=,2,sp,+=" ) ; //<S2SV> break ; //<S2SV> case 0x40 : //<S2SV> op -> eob = true ; //<S2SV> op -> type = R_ANAL_OP_TYPE_RET ; //<S2SV> op -> cycles = 6 ; //<S2SV> op -> stackop = R_ANAL_STACK_INC ; //<S2SV> op -> stackptr = - 3 ; //<S2SV> r_strbuf_set ( & op -> esil , "0x101,sp,+,[1],flags,=,0x102,sp,+,[2],pc,=,3,sp,+=" ) ; //<S2SV> break ; //<S2SV> case 0xea : //<S2SV> op -> type = R_ANAL_OP_TYPE_NOP ; //<S2SV> op -> cycles = 2 ; //<S2SV> break ; //<S2SV> case 0xa9 : //<S2SV> case 0xa5 : //<S2SV> case 0xb5 : //<S2SV> case 0xad : //<S2SV> case 0xbd : //<S2SV> case 0xb9 : //<S2SV> case 0xa1 : //<S2SV> case 0xb1 : //<S2SV> op -> type = R_ANAL_OP_TYPE_LOAD ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> if ( data [ 0 ] == 0xa9 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,a,=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],a,=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0xa2 : //<S2SV> case 0xa6 : //<S2SV> case 0xb6 : //<S2SV> case 0xae : //<S2SV> case 0xbe : //<S2SV> op -> type = R_ANAL_OP_TYPE_LOAD ; //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'y' ) ; //<S2SV> if ( data [ 0 ] == 0xa2 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,x,=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],x,=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0xa0 : //<S2SV> case 0xa4 : //<S2SV> case 0xb4 : //<S2SV> case 0xac : //<S2SV> case 0xbc : //<S2SV> op -> type = R_ANAL_OP_TYPE_LOAD ; //<S2SV> _6502_anal_esil_get_addr_pattern3 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> if ( data [ 0 ] == 0xa0 ) //<S2SV> r_strbuf_setf ( & op -> esil , "%s,y,=" , addrbuf ) ; //<S2SV> else r_strbuf_setf ( & op -> esil , "%s,[1],y,=" , addrbuf ) ; //<S2SV> _6502_anal_update_flags ( op , _6502_FLAGS_NZ ) ; //<S2SV> break ; //<S2SV> case 0x85 : //<S2SV> case 0x95 : //<S2SV> case 0x8d : //<S2SV> case 0x9d : //<S2SV> case 0x99 : //<S2SV> case 0x81 : //<S2SV> case 0x91 : //<S2SV> op -> type = R_ANAL_OP_TYPE_STORE ; //<S2SV> _6502_anal_esil_get_addr_pattern1 ( op , data , addrbuf , buffsize ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "a,%s,=[1]" , addrbuf ) ; //<S2SV> break ; //<S2SV> case 0x86 : //<S2SV> case 0x96 : //<S2SV> case 0x8e : //<S2SV> op -> type = R_ANAL_OP_TYPE_STORE ; //<S2SV> _6502_anal_esil_get_addr_pattern2 ( op , data , addrbuf , buffsize , 'y' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "x,%s,=[1]" , addrbuf ) ; //<S2SV> break ; //<S2SV> case 0x84 : //<S2SV> case 0x94 : //<S2SV> case 0x8c : //<S2SV> op -> type = R_ANAL_OP_TYPE_STORE ; //<S2SV> _6502_anal_esil_get_addr_pattern3 ( op , data , addrbuf , buffsize , 'x' ) ; //<S2SV> r_strbuf_setf ( & op -> esil , "y,%s,=[1]" , addrbuf ) ; //<S2SV> break ; //<S2SV> case 0x08 : //<S2SV> case 0x48 : //<S2SV> op -> type = R_ANAL_OP_TYPE_PUSH ; //<S2SV> op -> cycles = 3 ; //<S2SV> op -> stackop = R_ANAL_STACK_INC ; //<S2SV> op -> stackptr = 1 ; //<S2SV> _6502_anal_esil_push ( op , data [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 0x28 : //<S2SV> case 0x68 : //<S2SV> op -> type = R_ANAL_OP_TYPE_POP ; //<S2SV> op -> cycles = 4 ; //<S2SV> op -> stackop = R_ANAL_STACK_INC ; //<S2SV> op -> stackptr = - 1 ; //<S2SV> _6502_anal_esil_pop ( op , data [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 0xaa : //<S2SV> case 0x8a : //<S2SV> case 0xa8 : //<S2SV> case 0x98 : //<S2SV> op -> type = R_ANAL_OP_TYPE_MOV ; //<S2SV> op -> cycles = 2 ; //<S2SV> _6502_anal_esil_mov ( op , data [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 0x9a : //<S2SV> op -> type = R_ANAL_OP_TYPE_MOV ; //<S2SV> op -> cycles = 2 ; //<S2SV> op -> stackop = R_ANAL_STACK_SET ; //<S2SV> _6502_anal_esil_mov ( op , data [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 0xba : //<S2SV> op -> type = R_ANAL_OP_TYPE_MOV ; //<S2SV> op -> cycles = 2 ; //<S2SV> op -> stackop = R_ANAL_STACK_GET ; //<S2SV> _6502_anal_esil_mov ( op , data [ 0 ] ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return op -> size ; //<S2SV> } //<S2SV> 