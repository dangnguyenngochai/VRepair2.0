static grub_disk_addr_t //<S2SV> grub_ext2_read_block ( grub_fshelp_node_t node , grub_disk_addr_t fileblock ) //<S2SV> { //<S2SV> struct grub_ext2_data * data = node -> data ; //<S2SV> struct grub_ext2_inode * inode = & node -> inode ; //<S2SV> int blknr = - 1 ; //<S2SV> unsigned int blksz = EXT2_BLOCK_SIZE ( data ) ; //<S2SV> int log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; //<S2SV> if ( grub_le_to_cpu32 ( inode -> flags ) & EXT4_EXTENTS_FLAG ) //<S2SV> { //<S2SV> # ifndef _MSC_VER //<S2SV> char buf [ EXT2_BLOCK_SIZE ( data ) ] ; //<S2SV> # else //<S2SV> char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; //<S2SV> # endif //<S2SV> struct grub_ext4_extent_header * leaf ; //<S2SV> struct grub_ext4_extent * ext ; //<S2SV> int i ; //<S2SV> leaf = grub_ext4_find_leaf ( data , buf , //<S2SV> ( struct grub_ext4_extent_header * ) inode -> blocks . dir_blocks , //<S2SV> fileblock ) ; //<S2SV> if ( ! leaf ) //<S2SV> { //<S2SV> grub_error ( GRUB_ERR_BAD_FS , "invalid<S2SV_blank>extent" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; //<S2SV> for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) //<S2SV> { //<S2SV> if ( fileblock < grub_le_to_cpu32 ( ext [ i ] . block ) ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( -- i >= 0 ) //<S2SV> { //<S2SV> fileblock -= grub_le_to_cpu32 ( ext [ i ] . block ) ; //<S2SV> if ( fileblock >= grub_le_to_cpu16 ( ext [ i ] . len ) ) //<S2SV> return 0 ; //<S2SV> else //<S2SV> { //<S2SV> grub_disk_addr_t start ; //<S2SV> start = grub_le_to_cpu16 ( ext [ i ] . start_hi ) ; //<S2SV> start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ] . start ) ; //<S2SV> return fileblock + start ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> grub_error ( GRUB_ERR_BAD_FS , "something<S2SV_blank>wrong<S2SV_blank>with<S2SV_blank>extent" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( fileblock < INDIRECT_BLOCKS ) //<S2SV> blknr = grub_le_to_cpu32 ( inode -> blocks . dir_blocks [ fileblock ] ) ; //<S2SV> else if ( fileblock < INDIRECT_BLOCKS + blksz / 4 ) //<S2SV> { //<S2SV> grub_uint32_t * indir ; //<S2SV> indir = grub_malloc ( blksz ) ; //<S2SV> if ( ! indir ) //<S2SV> return grub_errno ; //<S2SV> if ( grub_disk_read ( data -> disk , //<S2SV> ( ( grub_disk_addr_t ) //<S2SV> grub_le_to_cpu32 ( inode -> blocks . indir_block ) ) //<S2SV> << log2_blksz , //<S2SV> 0 , blksz , indir ) ) //<S2SV> return grub_errno ; //<S2SV> blknr = grub_le_to_cpu32 ( indir [ fileblock - INDIRECT_BLOCKS ] ) ; //<S2SV> grub_free ( indir ) ; //<S2SV> } //<S2SV> else if ( fileblock < ( grub_disk_addr_t ) ( INDIRECT_BLOCKS + blksz / 4 ) * ( grub_disk_addr_t ) ( blksz / 4 + 1 ) ) //<S2SV> { //<S2SV> unsigned int perblock = blksz / 4 ; //<S2SV> unsigned int rblock = fileblock - ( INDIRECT_BLOCKS //<S2SV> + blksz / 4 ) ; //<S2SV> grub_uint32_t * indir ; //<S2SV> indir = grub_malloc ( blksz ) ; //<S2SV> if ( ! indir ) //<S2SV> return grub_errno ; //<S2SV> if ( grub_disk_read ( data -> disk , //<S2SV> ( ( grub_disk_addr_t ) //<S2SV> grub_le_to_cpu32 ( inode -> blocks . double_indir_block ) ) //<S2SV> << log2_blksz , //<S2SV> 0 , blksz , indir ) ) //<S2SV> return grub_errno ; //<S2SV> if ( grub_disk_read ( data -> disk , //<S2SV> ( ( grub_disk_addr_t ) //<S2SV> grub_le_to_cpu32 ( indir [ rblock / perblock ] ) ) //<S2SV> << log2_blksz , //<S2SV> 0 , blksz , indir ) ) //<S2SV> return grub_errno ; //<S2SV> blknr = grub_le_to_cpu32 ( indir [ rblock % perblock ] ) ; //<S2SV> grub_free ( indir ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> grub_error ( GRUB_ERR_NOT_IMPLEMENTED_YET , //<S2SV> "ext2fs<S2SV_blank>doesn\'t<S2SV_blank>support<S2SV_blank>triple<S2SV_blank>indirect<S2SV_blank>blocks" ) ; //<S2SV> } //<S2SV> return blknr ; //<S2SV> } //<S2SV> 