grub_ssize_t //<S2SV> grub_fshelp_read_file ( grub_disk_t disk , grub_fshelp_node_t node , //<S2SV> void ( * read_hook ) ( grub_disk_addr_t sector , //<S2SV> unsigned offset , //<S2SV> unsigned length , //<S2SV> void * closure ) , //<S2SV> void * closure , int flags , //<S2SV> grub_off_t pos , grub_size_t len , char * buf , //<S2SV> grub_disk_addr_t ( * get_block ) ( grub_fshelp_node_t node , //<S2SV> grub_disk_addr_t block ) , //<S2SV> grub_off_t filesize , int log2blocksize ) //<S2SV> { //<S2SV> grub_disk_addr_t i , blockcnt ; //<S2SV> int blocksize = 1 << ( log2blocksize + GRUB_DISK_SECTOR_BITS ) ; //<S2SV> if ( pos + len > filesize ) //<S2SV> len = filesize - pos ; //<S2SV> blockcnt = ( ( len + pos ) + blocksize - 1 ) >> //<S2SV> ( log2blocksize + GRUB_DISK_SECTOR_BITS ) ; //<S2SV> for ( i = pos >> ( log2blocksize + GRUB_DISK_SECTOR_BITS ) ; i < blockcnt ; i ++ ) //<S2SV> { //<S2SV> grub_disk_addr_t blknr ; //<S2SV> int blockoff = pos & ( blocksize - 1 ) ; //<S2SV> int blockend = blocksize ; //<S2SV> int skipfirst = 0 ; //<S2SV> blknr = get_block ( node , i ) ; //<S2SV> if ( grub_errno ) //<S2SV> return - 1 ; //<S2SV> blknr = blknr << log2blocksize ; //<S2SV> if ( i == blockcnt - 1 ) //<S2SV> { //<S2SV> blockend = ( len + pos ) & ( blocksize - 1 ) ; //<S2SV> if ( ! blockend ) //<S2SV> blockend = blocksize ; //<S2SV> } //<S2SV> if ( i == ( pos >> ( log2blocksize + GRUB_DISK_SECTOR_BITS ) ) ) //<S2SV> { //<S2SV> skipfirst = blockoff ; //<S2SV> blockend -= skipfirst ; //<S2SV> } //<S2SV> if ( blknr ) //<S2SV> { //<S2SV> disk -> read_hook = read_hook ; //<S2SV> disk -> closure = closure ; //<S2SV> grub_hack_lastoff = blknr * 512 ; //<S2SV> grub_disk_read_ex ( disk , blknr , skipfirst , blockend , buf , flags ) ; //<S2SV> disk -> read_hook = 0 ; //<S2SV> if ( grub_errno ) //<S2SV> return - 1 ; //<S2SV> } //<S2SV> else if ( buf ) //<S2SV> grub_memset ( buf , 0 , blockend ) ; //<S2SV> if ( buf ) //<S2SV> buf += blocksize - skipfirst ; //<S2SV> } //<S2SV> return len ; //<S2SV> } //<S2SV> 