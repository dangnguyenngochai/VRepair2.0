grub_err_t //<S2SV> grub_disk_read ( grub_disk_t disk , grub_disk_addr_t sector , //<S2SV> grub_off_t offset , grub_size_t size , void * buf ) //<S2SV> { //<S2SV> char * tmp_buf ; //<S2SV> unsigned real_offset ; //<S2SV> if ( grub_disk_adjust_range ( disk , & sector , & offset , size ) != GRUB_ERR_NONE ) //<S2SV> { //<S2SV> grub_error_push ( ) ; //<S2SV> grub_dprintf ( "disk" , "Read<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range:<S2SV_blank>sector<S2SV_blank>0x%llx<S2SV_blank>(%s).\\n" , //<S2SV> ( unsigned long long ) sector , grub_errmsg ) ; //<S2SV> grub_error_pop ( ) ; //<S2SV> return grub_errno ; //<S2SV> } //<S2SV> real_offset = offset ; //<S2SV> tmp_buf = grub_malloc ( GRUB_DISK_SECTOR_SIZE << GRUB_DISK_CACHE_BITS ) ; //<S2SV> if ( ! tmp_buf ) //<S2SV> return grub_errno ; //<S2SV> while ( size ) //<S2SV> { //<S2SV> char * data ; //<S2SV> grub_disk_addr_t start_sector ; //<S2SV> grub_size_t len ; //<S2SV> grub_size_t pos ; //<S2SV> start_sector = sector & ~ ( GRUB_DISK_CACHE_SIZE - 1 ) ; //<S2SV> pos = ( sector - start_sector ) << GRUB_DISK_SECTOR_BITS ; //<S2SV> len = ( ( GRUB_DISK_SECTOR_SIZE << GRUB_DISK_CACHE_BITS ) //<S2SV> - pos - real_offset ) ; //<S2SV> if ( len > size ) //<S2SV> len = size ; //<S2SV> data = grub_disk_cache_fetch ( disk -> dev -> id , disk -> id , start_sector ) ; //<S2SV> if ( data ) //<S2SV> { //<S2SV> if ( buf ) { //<S2SV> if ( pos + real_offset + len >= size ) { //<S2SV> grub_errno = GRUB_ERR_BAD_FS ; //<S2SV> return grub_errno ; //<S2SV> } //<S2SV> grub_memcpy ( buf , data + pos + real_offset , len ) ; //<S2SV> } //<S2SV> grub_disk_cache_unlock ( disk -> dev -> id , disk -> id , start_sector ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( start_sector + GRUB_DISK_CACHE_SIZE > disk -> total_sectors //<S2SV> || ( disk -> dev -> read ) ( disk , start_sector , //<S2SV> GRUB_DISK_CACHE_SIZE , tmp_buf ) //<S2SV> != GRUB_ERR_NONE ) //<S2SV> { //<S2SV> unsigned num ; //<S2SV> char * p ; //<S2SV> grub_errno = GRUB_ERR_NONE ; //<S2SV> num = ( ( size + real_offset + GRUB_DISK_SECTOR_SIZE - 1 ) //<S2SV> >> GRUB_DISK_SECTOR_BITS ) ; //<S2SV> p = grub_realloc ( tmp_buf , num << GRUB_DISK_SECTOR_BITS ) ; //<S2SV> if ( ! p ) //<S2SV> goto finish ; //<S2SV> tmp_buf = p ; //<S2SV> if ( ( disk -> dev -> read ) ( disk , sector , num , tmp_buf ) ) //<S2SV> { //<S2SV> grub_error_push ( ) ; //<S2SV> grub_dprintf ( "disk" , "%s<S2SV_blank>read<S2SV_blank>failed\\n" , disk -> name ) ; //<S2SV> grub_error_pop ( ) ; //<S2SV> goto finish ; //<S2SV> } //<S2SV> if ( buf ) //<S2SV> grub_memcpy ( buf , tmp_buf + real_offset , size ) ; //<S2SV> if ( disk -> read_hook ) //<S2SV> while ( size ) //<S2SV> { //<S2SV> grub_size_t to_read ; //<S2SV> to_read = size ; //<S2SV> if ( real_offset + to_read > GRUB_DISK_SECTOR_SIZE ) //<S2SV> to_read = GRUB_DISK_SECTOR_SIZE - real_offset ; //<S2SV> ( disk -> read_hook ) ( sector , real_offset , //<S2SV> to_read , disk -> closure ) ; //<S2SV> if ( grub_errno != GRUB_ERR_NONE ) //<S2SV> goto finish ; //<S2SV> sector ++ ; //<S2SV> size -= to_read ; //<S2SV> real_offset = 0 ; //<S2SV> } //<S2SV> goto finish ; //<S2SV> } //<S2SV> if ( buf ) //<S2SV> grub_memcpy ( buf , tmp_buf + pos + real_offset , len ) ; //<S2SV> grub_disk_cache_store ( disk -> dev -> id , disk -> id , //<S2SV> start_sector , tmp_buf ) ; //<S2SV> } //<S2SV> if ( disk -> read_hook ) //<S2SV> { //<S2SV> grub_disk_addr_t s = sector ; //<S2SV> grub_size_t l = len ; //<S2SV> while ( l ) //<S2SV> { //<S2SV> ( disk -> read_hook ) ( s , real_offset , //<S2SV> ( ( l > GRUB_DISK_SECTOR_SIZE ) //<S2SV> ? GRUB_DISK_SECTOR_SIZE //<S2SV> : l ) , disk -> closure ) ; //<S2SV> if ( l < GRUB_DISK_SECTOR_SIZE - real_offset ) //<S2SV> break ; //<S2SV> s ++ ; //<S2SV> l -= GRUB_DISK_SECTOR_SIZE - real_offset ; //<S2SV> real_offset = 0 ; //<S2SV> } //<S2SV> } //<S2SV> sector = start_sector + GRUB_DISK_CACHE_SIZE ; //<S2SV> if ( buf ) //<S2SV> buf = ( char * ) buf + len ; //<S2SV> size -= len ; //<S2SV> real_offset = 0 ; //<S2SV> } //<S2SV> finish : //<S2SV> grub_free ( tmp_buf ) ; //<S2SV> return grub_errno ; //<S2SV> } //<S2SV> 