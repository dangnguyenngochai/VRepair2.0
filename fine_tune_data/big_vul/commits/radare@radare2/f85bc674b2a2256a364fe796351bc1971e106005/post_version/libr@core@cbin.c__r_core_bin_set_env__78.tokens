R_API int r_core_bin_set_env ( RCore * r , RBinFile * binfile ) { //<S2SV> RBinObject * binobj = binfile ? binfile -> o : NULL ; //<S2SV> RBinInfo * info = binobj ? binobj -> info : NULL ; //<S2SV> if ( info ) { //<S2SV> int va = info -> has_va ; //<S2SV> char * arch = strdup ( info -> arch ) ; //<S2SV> char * cpu = info -> cpu ? strdup ( info -> cpu ) : NULL ; //<S2SV> ut16 bits = info -> bits ; //<S2SV> ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; //<S2SV> r_config_set_i ( r -> config , "io.va" , //<S2SV> ( binobj -> info ) ? binobj -> info -> has_va : 0 ) ; //<S2SV> r_config_set_i ( r -> config , "bin.baddr" , baseaddr ) ; //<S2SV> r_config_set ( r -> config , "asm.arch" , arch ) ; //<S2SV> r_config_set_i ( r -> config , "asm.bits" , bits ) ; //<S2SV> r_config_set ( r -> config , "anal.arch" , arch ) ; //<S2SV> if ( cpu && * cpu ) { //<S2SV> r_config_set ( r -> config , "anal.cpu" , cpu ) ; //<S2SV> } else { //<S2SV> r_config_set ( r -> config , "anal.cpu" , arch ) ; //<S2SV> } //<S2SV> r_asm_use ( r -> assembler , arch ) ; //<S2SV> r_core_bin_info ( r , R_CORE_BIN_ACC_ALL , R_CORE_BIN_SET , va , NULL , NULL ) ; //<S2SV> r_core_bin_set_cur ( r , binfile ) ; //<S2SV> free ( cpu ) ; //<S2SV> free ( arch ) ; //<S2SV> return true ; //<S2SV> } //<S2SV> return false ; //<S2SV> } //<S2SV> 