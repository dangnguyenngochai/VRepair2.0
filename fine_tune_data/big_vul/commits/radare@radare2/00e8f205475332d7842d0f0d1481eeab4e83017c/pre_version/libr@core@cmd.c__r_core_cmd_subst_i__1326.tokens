static int r_core_cmd_subst_i ( RCore * core , char * cmd , char * colon ) { //<S2SV> const char * quotestr = "`" ; //<S2SV> const char * tick = NULL ; //<S2SV> char * ptr , * ptr2 , * str ; //<S2SV> char * arroba = NULL ; //<S2SV> int i , ret = 0 , pipefd ; //<S2SV> bool usemyblock = false ; //<S2SV> int scr_html = - 1 ; //<S2SV> int scr_color = - 1 ; //<S2SV> bool eos = false ; //<S2SV> bool haveQuote = false ; //<S2SV> if ( ! cmd ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> cmd = r_str_trim_head_tail ( cmd ) ; //<S2SV> switch ( * cmd ) { //<S2SV> case '.' : //<S2SV> if ( cmd [ 1 ] == \'"\' ) { //<S2SV> return r_cmd_call ( core -> rcmd , cmd ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case \'"\' : //<S2SV> for ( ; * cmd ; ) { //<S2SV> int pipefd = - 1 ; //<S2SV> ut64 oseek = UT64_MAX ; //<S2SV> char * line , * p ; //<S2SV> haveQuote = * cmd == \'"\' ; //<S2SV> if ( haveQuote ) { //<S2SV> cmd ++ ; //<S2SV> p = find_eoq ( cmd + 1 ) ; //<S2SV> if ( ! p || ! * p ) { //<S2SV> eprintf ( "Missing<S2SV_blank>\\"<S2SV_blank>in<S2SV_blank>(%s)." , cmd ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> * p ++ = 0 ; //<S2SV> if ( ! * p ) { //<S2SV> eos = true ; //<S2SV> } //<S2SV> } else { //<S2SV> char * sc = strchr ( cmd , ';' ) ; //<S2SV> if ( sc ) { //<S2SV> * sc = 0 ; //<S2SV> } //<S2SV> r_core_cmd0 ( core , cmd ) ; //<S2SV> if ( ! sc ) { //<S2SV> break ; //<S2SV> } //<S2SV> cmd = sc + 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( p [ 0 ] ) { //<S2SV> if ( p [ 0 ] == '@' ) { //<S2SV> p -- ; //<S2SV> } //<S2SV> while ( p [ 1 ] == ';' || IS_WHITESPACE ( p [ 1 ] ) ) { //<S2SV> p ++ ; //<S2SV> } //<S2SV> if ( p [ 1 ] == '@' || ( p [ 1 ] && p [ 2 ] == '@' ) ) { //<S2SV> char * q = strchr ( p + 1 , \'"\' ) ; //<S2SV> if ( q ) { //<S2SV> * q = 0 ; //<S2SV> } //<S2SV> haveQuote = q != NULL ; //<S2SV> oseek = core -> offset ; //<S2SV> r_core_seek ( core , //<S2SV> r_num_math ( core -> num , p + 2 ) , 1 ) ; //<S2SV> if ( q ) { //<S2SV> * p = \'"\' ; //<S2SV> p = q ; //<S2SV> } else { //<S2SV> p = strchr ( p + 1 , ';' ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( p && * p && p [ 1 ] == '>' ) { //<S2SV> str = p + 2 ; //<S2SV> while ( * str == '>' ) { //<S2SV> str ++ ; //<S2SV> } //<S2SV> while ( IS_WHITESPACE ( * str ) ) { //<S2SV> str ++ ; //<S2SV> } //<S2SV> r_cons_flush ( ) ; //<S2SV> pipefd = r_cons_pipe_open ( str , 1 , p [ 2 ] == '>' ) ; //<S2SV> } //<S2SV> } //<S2SV> line = strdup ( cmd ) ; //<S2SV> line = r_str_replace ( line , "\\\\\\"" , "\\"" , true ) ; //<S2SV> if ( p && * p && p [ 1 ] == '|' ) { //<S2SV> str = p + 2 ; //<S2SV> while ( IS_WHITESPACE ( * str ) ) { //<S2SV> str ++ ; //<S2SV> } //<S2SV> r_core_cmd_pipe ( core , cmd , str ) ; //<S2SV> } else { //<S2SV> r_cmd_call ( core -> rcmd , line ) ; //<S2SV> } //<S2SV> free ( line ) ; //<S2SV> if ( oseek != UT64_MAX ) { //<S2SV> r_core_seek ( core , oseek , 1 ) ; //<S2SV> oseek = UT64_MAX ; //<S2SV> } //<S2SV> if ( pipefd != - 1 ) { //<S2SV> r_cons_flush ( ) ; //<S2SV> r_cons_pipe_close ( pipefd ) ; //<S2SV> } //<S2SV> if ( ! p ) { //<S2SV> break ; //<S2SV> } //<S2SV> if ( eos ) { //<S2SV> break ; //<S2SV> } //<S2SV> if ( haveQuote ) { //<S2SV> if ( * p == ';' ) { //<S2SV> cmd = p + 1 ; //<S2SV> } else { //<S2SV> if ( * p == \'"\' ) { //<S2SV> cmd = p + 1 ; //<S2SV> } else { //<S2SV> * p = \'"\' ; //<S2SV> cmd = p ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> cmd = p + 1 ; //<S2SV> } //<S2SV> } //<S2SV> return true ; //<S2SV> case '(' : //<S2SV> if ( cmd [ 1 ] != '*' ) { //<S2SV> return r_cmd_call ( core -> rcmd , cmd ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( * cmd != '#' ) { //<S2SV> ptr = ( char * ) r_str_lastbut ( cmd , '#' , quotestr ) ; //<S2SV> if ( ptr && ( ptr [ 1 ] == '<S2SV_blank>' || ptr [ 1 ] == '\\t' ) ) { //<S2SV> * ptr = '\\0' ; //<S2SV> } //<S2SV> } //<S2SV> if ( * cmd != '#' ) { //<S2SV> ptr = ( char * ) r_str_lastbut ( cmd , ';' , quotestr ) ; //<S2SV> if ( colon && ptr ) { //<S2SV> int ret ; //<S2SV> * ptr = '\\0' ; //<S2SV> if ( r_core_cmd_subst ( core , cmd ) == - 1 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> cmd = ptr + 1 ; //<S2SV> ret = r_core_cmd_subst ( core , cmd ) ; //<S2SV> * ptr = ';' ; //<S2SV> return ret ; //<S2SV> } //<S2SV> } //<S2SV> ptr = ( char * ) r_str_lastbut ( cmd , '|' , quotestr ) ; //<S2SV> if ( ptr ) { //<S2SV> char * ptr2 = strchr ( cmd , '`' ) ; //<S2SV> if ( ! ptr2 || ( ptr2 && ptr2 > ptr ) ) { //<S2SV> if ( ! tick || ( tick && tick > ptr ) ) { //<S2SV> * ptr = '\\0' ; //<S2SV> cmd = r_str_clean ( cmd ) ; //<S2SV> if ( ! strcmp ( ptr + 1 , "?" ) ) { //<S2SV> eprintf ( "Usage:<S2SV_blank><r2command><S2SV_blank>|<S2SV_blank><program|H|>\\n" ) ; //<S2SV> eprintf ( "<S2SV_blank>pd|?<S2SV_blank><S2SV_blank><S2SV_blank>-<S2SV_blank>show<S2SV_blank>this<S2SV_blank>help\\n" ) ; //<S2SV> eprintf ( "<S2SV_blank>pd|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>-<S2SV_blank>disable<S2SV_blank>scr.html<S2SV_blank>and<S2SV_blank>scr.color\\n" ) ; //<S2SV> eprintf ( "<S2SV_blank>pd|H<S2SV_blank><S2SV_blank><S2SV_blank>-<S2SV_blank>enable<S2SV_blank>scr.html,<S2SV_blank>respect<S2SV_blank>scr.color\\n" ) ; //<S2SV> return ret ; //<S2SV> } else if ( ! strcmp ( ptr + 1 , "H" ) ) { //<S2SV> scr_html = r_config_get_i ( core -> config , "scr.html" ) ; //<S2SV> r_config_set_i ( core -> config , "scr.html" , true ) ; //<S2SV> } else if ( ptr [ 1 ] ) { //<S2SV> int value = core -> num -> value ; //<S2SV> if ( * cmd ) { //<S2SV> r_core_cmd_pipe ( core , cmd , ptr + 1 ) ; //<S2SV> } else { //<S2SV> r_io_system ( core -> io , ptr + 1 ) ; //<S2SV> } //<S2SV> core -> num -> value = value ; //<S2SV> return 0 ; //<S2SV> } else { //<S2SV> scr_html = r_config_get_i ( core -> config , "scr.html" ) ; //<S2SV> r_config_set_i ( core -> config , "scr.html" , 0 ) ; //<S2SV> scr_color = r_config_get_i ( core -> config , "scr.color" ) ; //<S2SV> r_config_set_i ( core -> config , "scr.color" , false ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> ptr = ( char * ) r_str_lastbut ( cmd , '&' , quotestr ) ; //<S2SV> while ( ptr && ptr [ 1 ] == '&' ) { //<S2SV> * ptr = '\\0' ; //<S2SV> ret = r_cmd_call ( core -> rcmd , cmd ) ; //<S2SV> if ( ret == - 1 ) { //<S2SV> eprintf ( "command<S2SV_blank>error(%s)\\n" , cmd ) ; //<S2SV> if ( scr_html != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.html" , scr_html ) ; //<S2SV> } //<S2SV> if ( scr_color != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.color" , scr_color ) ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> for ( cmd = ptr + 2 ; cmd && * cmd == '<S2SV_blank>' ; cmd ++ ) ; //<S2SV> ptr = strchr ( cmd , '&' ) ; //<S2SV> } //<S2SV> free ( core -> oobi ) ; //<S2SV> core -> oobi = NULL ; //<S2SV> ptr = strstr ( cmd , "?*" ) ; //<S2SV> if ( ptr ) { //<S2SV> char * prech = ptr - 1 ; //<S2SV> if ( * prech != '~' ) { //<S2SV> ptr [ 1 ] = 0 ; //<S2SV> if ( * cmd != '#' && strlen ( cmd ) < 5 ) { //<S2SV> r_cons_break_push ( NULL , NULL ) ; //<S2SV> recursive_help ( core , cmd ) ; //<S2SV> r_cons_break_pop ( ) ; //<S2SV> r_cons_grep_parsecmd ( ptr + 2 , "`" ) ; //<S2SV> if ( scr_html != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.html" , scr_html ) ; //<S2SV> } //<S2SV> if ( scr_color != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.color" , scr_color ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # if 0 //<S2SV> ptr = strchr ( cmd , '<' ) ; //<S2SV> if ( ptr ) { //<S2SV> ptr [ 0 ] = '\\0' ; //<S2SV> if ( r_cons_singleton ( ) -> is_interactive ) { //<S2SV> if ( ptr [ 1 ] == '<' ) { //<S2SV> for ( str = ptr + 2 ; str [ 0 ] == '<S2SV_blank>' ; str ++ ) { //<S2SV> } //<S2SV> eprintf ( "==><S2SV_blank>Reading<S2SV_blank>from<S2SV_blank>stdin<S2SV_blank>until<S2SV_blank>\'%s\'\\n" , str ) ; //<S2SV> free ( core -> oobi ) ; //<S2SV> core -> oobi = malloc ( 1 ) ; //<S2SV> if ( core -> oobi ) { //<S2SV> core -> oobi [ 0 ] = '\\0' ; //<S2SV> } //<S2SV> core -> oobi_len = 0 ; //<S2SV> for ( ; ; ) { //<S2SV> char buf [ 1024 ] ; //<S2SV> int ret ; //<S2SV> write ( 1 , "><S2SV_blank>" , 2 ) ; //<S2SV> fgets ( buf , sizeof ( buf ) - 1 , stdin ) ; //<S2SV> if ( feof ( stdin ) ) { //<S2SV> break ; //<S2SV> } //<S2SV> if ( * buf ) buf [ strlen ( buf ) - 1 ] = '\\0' ; //<S2SV> ret = strlen ( buf ) ; //<S2SV> core -> oobi_len += ret ; //<S2SV> core -> oobi = realloc ( core -> oobi , core -> oobi_len + 1 ) ; //<S2SV> if ( core -> oobi ) { //<S2SV> if ( ! strcmp ( buf , str ) ) { //<S2SV> break ; //<S2SV> } //<S2SV> strcat ( ( char * ) core -> oobi , buf ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> for ( str = ptr + 1 ; * str == '<S2SV_blank>' ; str ++ ) { //<S2SV> } //<S2SV> if ( ! * str ) { //<S2SV> goto next ; //<S2SV> } //<S2SV> eprintf ( "Slurping<S2SV_blank>file<S2SV_blank>\'%s\'\\n" , str ) ; //<S2SV> free ( core -> oobi ) ; //<S2SV> core -> oobi = ( ut8 * ) r_file_slurp ( str , & core -> oobi_len ) ; //<S2SV> if ( ! core -> oobi ) { //<S2SV> eprintf ( "cannot<S2SV_blank>open<S2SV_blank>file\\n" ) ; //<S2SV> } else if ( ptr == cmd ) { //<S2SV> return r_core_cmd_buffer ( core , ( const char * ) core -> oobi ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> eprintf ( "Cannot<S2SV_blank>slurp<S2SV_blank>with<S2SV_blank><<<S2SV_blank>in<S2SV_blank>non-interactive<S2SV_blank>mode\\n" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> next : //<S2SV> # endif //<S2SV> ptr = strchr ( cmd , '>' ) ; //<S2SV> if ( ptr ) { //<S2SV> int fdn = 1 ; //<S2SV> int pipecolor = r_config_get_i ( core -> config , "scr.pipecolor" ) ; //<S2SV> int use_editor = false ; //<S2SV> int ocolor = r_config_get_i ( core -> config , "scr.color" ) ; //<S2SV> * ptr = '\\0' ; //<S2SV> str = r_str_trim_head_tail ( ptr + 1 + ( ptr [ 1 ] == '>' ) ) ; //<S2SV> if ( ! * str ) { //<S2SV> eprintf ( "No<S2SV_blank>output?\\n" ) ; //<S2SV> goto next2 ; //<S2SV> } //<S2SV> if ( ptr > ( cmd + 1 ) && ISWHITECHAR ( ptr [ - 2 ] ) ) { //<S2SV> char * fdnum = ptr - 1 ; //<S2SV> if ( * fdnum == 'H' ) { //<S2SV> scr_html = r_config_get_i ( core -> config , "scr.html" ) ; //<S2SV> r_config_set_i ( core -> config , "scr.html" , true ) ; //<S2SV> pipecolor = true ; //<S2SV> * fdnum = 0 ; //<S2SV> } else { //<S2SV> if ( IS_DIGIT ( * fdnum ) ) { //<S2SV> fdn = * fdnum - '0' ; //<S2SV> } //<S2SV> * fdnum = 0 ; //<S2SV> } //<S2SV> } //<S2SV> r_cons_set_interactive ( false ) ; //<S2SV> if ( ! strcmp ( str , "-" ) ) { //<S2SV> use_editor = true ; //<S2SV> str = r_file_temp ( "dumpedit" ) ; //<S2SV> r_config_set ( core -> config , "scr.color" , "false" ) ; //<S2SV> } //<S2SV> if ( fdn > 0 ) { //<S2SV> pipefd = r_cons_pipe_open ( str , fdn , ptr [ 1 ] == '>' ) ; //<S2SV> if ( pipefd != - 1 ) { //<S2SV> if ( ! pipecolor ) { //<S2SV> r_config_set_i ( core -> config , "scr.color" , 0 ) ; //<S2SV> } //<S2SV> ret = r_core_cmd_subst ( core , cmd ) ; //<S2SV> r_cons_flush ( ) ; //<S2SV> r_cons_pipe_close ( pipefd ) ; //<S2SV> } //<S2SV> } //<S2SV> r_cons_set_last_interactive ( ) ; //<S2SV> if ( ! pipecolor ) { //<S2SV> r_config_set_i ( core -> config , "scr.color" , ocolor ) ; //<S2SV> } //<S2SV> if ( use_editor ) { //<S2SV> const char * editor = r_config_get ( core -> config , "cfg.editor" ) ; //<S2SV> if ( editor && * editor ) { //<S2SV> r_sys_cmdf ( "%s<S2SV_blank>\'%s\'" , editor , str ) ; //<S2SV> r_file_rm ( str ) ; //<S2SV> } else { //<S2SV> eprintf ( "No<S2SV_blank>cfg.editor<S2SV_blank>configured\\n" ) ; //<S2SV> } //<S2SV> r_config_set_i ( core -> config , "scr.color" , ocolor ) ; //<S2SV> free ( str ) ; //<S2SV> } //<S2SV> if ( scr_html != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.html" , scr_html ) ; //<S2SV> } //<S2SV> if ( scr_color != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.color" , scr_color ) ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> next2 : //<S2SV> ptr = strchr ( cmd , '`' ) ; //<S2SV> if ( ptr ) { //<S2SV> int empty = 0 ; //<S2SV> int oneline = 1 ; //<S2SV> if ( ptr [ 1 ] == '`' ) { //<S2SV> memmove ( ptr , ptr + 1 , strlen ( ptr ) ) ; //<S2SV> oneline = 0 ; //<S2SV> empty = 1 ; //<S2SV> } //<S2SV> ptr2 = strchr ( ptr + 1 , '`' ) ; //<S2SV> if ( empty ) { //<S2SV> } else if ( ! ptr2 ) { //<S2SV> eprintf ( "parse:<S2SV_blank>Missing<S2SV_blank>backtick<S2SV_blank>in<S2SV_blank>expression.\\n" ) ; //<S2SV> goto fail ; //<S2SV> } else { //<S2SV> int value = core -> num -> value ; //<S2SV> * ptr = '\\0' ; //<S2SV> * ptr2 = '\\0' ; //<S2SV> if ( ptr [ 1 ] == '!' ) { //<S2SV> str = r_core_cmd_str_pipe ( core , ptr + 1 ) ; //<S2SV> } else { //<S2SV> str = r_core_cmd_str ( core , ptr + 1 ) ; //<S2SV> } //<S2SV> if ( ! str ) { //<S2SV> goto fail ; //<S2SV> } //<S2SV> if ( * str == '|' || * str == '*' ) { //<S2SV> eprintf ( "r_core_cmd_subst_i:<S2SV_blank>invalid<S2SV_blank>backticked<S2SV_blank>command\\n" ) ; //<S2SV> free ( str ) ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> if ( oneline && str ) { //<S2SV> for ( i = 0 ; str [ i ] ; i ++ ) { //<S2SV> if ( str [ i ] == '\\n' ) { //<S2SV> str [ i ] = '<S2SV_blank>' ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> str = r_str_append ( str , ptr2 + 1 ) ; //<S2SV> cmd = r_str_append ( strdup ( cmd ) , str ) ; //<S2SV> core -> num -> value = value ; //<S2SV> ret = r_core_cmd_subst ( core , cmd ) ; //<S2SV> free ( cmd ) ; //<S2SV> if ( scr_html != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.html" , scr_html ) ; //<S2SV> } //<S2SV> free ( str ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> } //<S2SV> core -> fixedblock = false ; //<S2SV> if ( r_str_endswith ( cmd , "~?" ) && cmd [ 2 ] == '\\0' ) { //<S2SV> r_cons_grep_help ( ) ; //<S2SV> return true ; //<S2SV> } //<S2SV> if ( * cmd != '.' ) { //<S2SV> r_cons_grep_parsecmd ( cmd , quotestr ) ; //<S2SV> } //<S2SV> if ( * cmd != '(' && * cmd != \'"\' ) { //<S2SV> ptr = strchr ( cmd , '@' ) ; //<S2SV> if ( ptr == cmd + 1 && * cmd == '?' ) { //<S2SV> ptr = NULL ; //<S2SV> } //<S2SV> } else { //<S2SV> ptr = NULL ; //<S2SV> } //<S2SV> core -> tmpseek = ptr ? true : false ; //<S2SV> int rc = 0 ; //<S2SV> if ( ptr ) { //<S2SV> char * f , * ptr2 = strchr ( ptr + 1 , '!' ) ; //<S2SV> ut64 addr = UT64_MAX ; //<S2SV> const char * tmpbits = NULL ; //<S2SV> const char * offstr = NULL ; //<S2SV> ut64 tmpbsz = core -> blocksize ; //<S2SV> char * tmpeval = NULL ; //<S2SV> ut64 tmpoff = core -> offset ; //<S2SV> char * tmpasm = NULL ; //<S2SV> int tmpfd = - 1 ; //<S2SV> int sz , len ; //<S2SV> ut8 * buf ; //<S2SV> * ptr = '\\0' ; //<S2SV> for ( ptr ++ ; * ptr == '<S2SV_blank>' ; ptr ++ ) { //<S2SV> } //<S2SV> if ( * ptr && ptr [ 1 ] == ':' ) { //<S2SV> } else { //<S2SV> ptr -- ; //<S2SV> } //<S2SV> arroba = ( ptr [ 0 ] && ptr [ 1 ] && ptr [ 2 ] ) ? //<S2SV> strchr ( ptr + 2 , '@' ) : NULL ; //<S2SV> repeat_arroba : //<S2SV> if ( arroba ) { //<S2SV> * arroba = 0 ; //<S2SV> } //<S2SV> if ( ptr [ 1 ] == '?' ) { //<S2SV> helpCmdAt ( core ) ; //<S2SV> } else if ( ptr [ 0 ] && ptr [ 1 ] == ':' && ptr [ 2 ] ) { //<S2SV> usemyblock = true ; //<S2SV> switch ( ptr [ 0 ] ) { //<S2SV> case 'f' : //<S2SV> f = r_file_slurp ( ptr + 2 , & sz ) ; //<S2SV> if ( f ) { //<S2SV> buf = malloc ( sz ) ; //<S2SV> if ( buf ) { //<S2SV> free ( core -> block ) ; //<S2SV> core -> block = buf ; //<S2SV> core -> blocksize = sz ; //<S2SV> memcpy ( core -> block , f , sz ) ; //<S2SV> } else { //<S2SV> eprintf ( "cannot<S2SV_blank>alloc<S2SV_blank>%d" , sz ) ; //<S2SV> } //<S2SV> free ( f ) ; //<S2SV> } else { //<S2SV> eprintf ( "cannot<S2SV_blank>open<S2SV_blank>\'%s\'\\n" , ptr + 3 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'r' : //<S2SV> if ( ptr [ 1 ] == ':' ) { //<S2SV> ut64 regval ; //<S2SV> char * mander = strdup ( ptr + 2 ) ; //<S2SV> char * sep = findSeparator ( mander ) ; //<S2SV> if ( sep ) { //<S2SV> char ch = * sep ; //<S2SV> * sep = 0 ; //<S2SV> regval = r_debug_reg_get ( core -> dbg , mander ) ; //<S2SV> * sep = ch ; //<S2SV> char * numexpr = r_str_newf ( "0x%" PFMT64x "%s" , regval , sep ) ; //<S2SV> regval = r_num_math ( core -> num , numexpr ) ; //<S2SV> free ( numexpr ) ; //<S2SV> } else { //<S2SV> regval = r_debug_reg_get ( core -> dbg , ptr + 2 ) ; //<S2SV> } //<S2SV> r_core_seek ( core , regval , 1 ) ; //<S2SV> free ( mander ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'b' : //<S2SV> tmpbits = strdup ( r_config_get ( core -> config , "asm.bits" ) ) ; //<S2SV> r_config_set_i ( core -> config , "asm.bits" , //<S2SV> r_num_math ( core -> num , ptr + 2 ) ) ; //<S2SV> break ; //<S2SV> case 'i' : //<S2SV> { //<S2SV> ut64 addr = r_num_math ( core -> num , ptr + 2 ) ; //<S2SV> if ( addr ) { //<S2SV> r_core_cmdf ( core , "so<S2SV_blank>%s" , ptr + 2 ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 'e' : //<S2SV> tmpeval = parse_tmp_evals ( core , ptr + 2 ) ; //<S2SV> break ; //<S2SV> case 'x' : //<S2SV> if ( ptr [ 1 ] == ':' ) { //<S2SV> buf = malloc ( strlen ( ptr + 2 ) + 1 ) ; //<S2SV> if ( buf ) { //<S2SV> len = r_hex_str2bin ( ptr + 2 , buf ) ; //<S2SV> r_core_block_size ( core , R_ABS ( len ) ) ; //<S2SV> memcpy ( core -> block , buf , core -> blocksize ) ; //<S2SV> core -> fixedblock = true ; //<S2SV> free ( buf ) ; //<S2SV> } else { //<S2SV> eprintf ( "cannot<S2SV_blank>allocate\\n" ) ; //<S2SV> } //<S2SV> } else { //<S2SV> eprintf ( "Invalid<S2SV_blank>@x:<S2SV_blank>syntax\\n" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'k' : //<S2SV> { //<S2SV> char * out = sdb_querys ( core -> sdb , NULL , 0 , ptr + ( ( ptr [ 1 ] ) ? 2 : 1 ) ) ; //<S2SV> if ( out ) { //<S2SV> r_core_seek ( core , r_num_math ( core -> num , out ) , 1 ) ; //<S2SV> free ( out ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 'o' : //<S2SV> if ( ptr [ 1 ] == ':' ) { //<S2SV> tmpfd = core -> io -> raised ; //<S2SV> r_io_raise ( core -> io , atoi ( ptr + 2 ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'a' : //<S2SV> if ( ptr [ 1 ] == ':' ) { //<S2SV> char * q = strchr ( ptr + 2 , ':' ) ; //<S2SV> tmpasm = strdup ( r_config_get ( core -> config , "asm.arch" ) ) ; //<S2SV> if ( q ) { //<S2SV> * q ++ = 0 ; //<S2SV> tmpbits = r_config_get ( core -> config , "asm.bits" ) ; //<S2SV> r_config_set ( core -> config , "asm.bits" , q ) ; //<S2SV> } //<S2SV> r_config_set ( core -> config , "asm.arch" , ptr + 2 ) ; //<S2SV> } else { //<S2SV> eprintf ( "Usage:<S2SV_blank>pd<S2SV_blank>10<S2SV_blank>@a:arm:32\\n" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 's' : //<S2SV> len = strlen ( ptr + 2 ) ; //<S2SV> r_core_block_size ( core , len ) ; //<S2SV> memcpy ( core -> block , ptr + 2 , len ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> goto ignore ; //<S2SV> } //<S2SV> * ptr = '@' ; //<S2SV> goto next_arroba ; //<S2SV> } //<S2SV> ignore : //<S2SV> ptr = r_str_trim_head ( ptr + 1 ) ; //<S2SV> ptr -- ; //<S2SV> cmd = r_str_clean ( cmd ) ; //<S2SV> if ( ptr2 ) { //<S2SV> if ( strlen ( ptr + 1 ) == 13 && strlen ( ptr2 + 1 ) == 6 && //<S2SV> ! memcmp ( ptr + 1 , "0x" , 2 ) && //<S2SV> ! memcmp ( ptr2 + 1 , "0x" , 2 ) ) { //<S2SV> } else if ( strlen ( ptr + 1 ) == 9 && strlen ( ptr2 + 1 ) == 4 ) { //<S2SV> } else { //<S2SV> * ptr2 = '\\0' ; //<S2SV> if ( ! ptr2 [ 1 ] ) { //<S2SV> goto fail ; //<S2SV> } //<S2SV> r_core_block_size ( //<S2SV> core , r_num_math ( core -> num , ptr2 + 1 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> offstr = r_str_trim_head ( ptr + 1 ) ; //<S2SV> addr = r_num_math ( core -> num , offstr ) ; //<S2SV> if ( isalpha ( ( unsigned char ) ptr [ 1 ] ) && ! addr ) { //<S2SV> if ( ! r_flag_get ( core -> flags , ptr + 1 ) ) { //<S2SV> eprintf ( "Invalid<S2SV_blank>address<S2SV_blank>(%s)\\n" , ptr + 1 ) ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> } else { //<S2SV> char ch = * offstr ; //<S2SV> if ( ch == '-' || ch == '+' ) { //<S2SV> addr = core -> offset + addr ; //<S2SV> } //<S2SV> } //<S2SV> next_arroba : //<S2SV> if ( arroba ) { //<S2SV> ptr = arroba ; //<S2SV> arroba = NULL ; //<S2SV> goto repeat_arroba ; //<S2SV> } //<S2SV> if ( ptr [ 1 ] == '@' ) { //<S2SV> if ( ptr [ 2 ] == '@' ) { //<S2SV> char * rule = ptr + 3 ; //<S2SV> while ( * rule && * rule == '<S2SV_blank>' ) rule ++ ; //<S2SV> ret = r_core_cmd_foreach3 ( core , cmd , rule ) ; //<S2SV> } else { //<S2SV> ret = r_core_cmd_foreach ( core , cmd , ptr + 2 ) ; //<S2SV> } //<S2SV> } else { //<S2SV> bool tmpseek = false ; //<S2SV> const char * fromvars [ ] = { "anal.from" , "diff.from" , "graph.from" , //<S2SV> "io.buffer.from" , "lines.from" , "search.from" , "zoom.from" , NULL } ; //<S2SV> const char * tovars [ ] = { "anal.to" , "diff.to" , "graph.to" , //<S2SV> "io.buffer.to" , "lines.to" , "search.to" , "zoom.to" , NULL } ; //<S2SV> ut64 curfrom [ R_ARRAY_SIZE ( fromvars ) - 1 ] , curto [ R_ARRAY_SIZE ( tovars ) - 1 ] ; //<S2SV> if ( ptr [ 1 ] == '.' && ptr [ 2 ] == '.' ) { //<S2SV> char * range = ptr + 3 ; //<S2SV> char * p = strchr ( range , '<S2SV_blank>' ) ; //<S2SV> if ( ! p ) { //<S2SV> eprintf ( "Usage:<S2SV_blank>/<S2SV_blank>ABCD<S2SV_blank>@..0x1000<S2SV_blank>0x3000\\n" ) ; //<S2SV> free ( tmpeval ) ; //<S2SV> free ( tmpasm ) ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> * p = '\\x00' ; //<S2SV> ut64 from = r_num_math ( core -> num , range ) ; //<S2SV> ut64 to = r_num_math ( core -> num , p + 1 ) ; //<S2SV> for ( i = 0 ; fromvars [ i ] ; i ++ ) { //<S2SV> curfrom [ i ] = r_config_get_i ( core -> config , fromvars [ i ] ) ; //<S2SV> } //<S2SV> for ( i = 0 ; tovars [ i ] ; i ++ ) { //<S2SV> curto [ i ] = r_config_get_i ( core -> config , tovars [ i ] ) ; //<S2SV> } //<S2SV> for ( i = 0 ; fromvars [ i ] ; i ++ ) { //<S2SV> r_config_set_i ( core -> config , fromvars [ i ] , from ) ; //<S2SV> } //<S2SV> for ( i = 0 ; tovars [ i ] ; i ++ ) { //<S2SV> r_config_set_i ( core -> config , tovars [ i ] , to ) ; //<S2SV> } //<S2SV> tmpseek = true ; //<S2SV> } //<S2SV> if ( usemyblock ) { //<S2SV> if ( addr != UT64_MAX ) { //<S2SV> core -> offset = addr ; //<S2SV> } //<S2SV> ret = r_cmd_call ( core -> rcmd , r_str_trim_head ( cmd ) ) ; //<S2SV> } else { //<S2SV> if ( addr != UT64_MAX ) { //<S2SV> if ( ! ptr [ 1 ] || r_core_seek ( core , addr , 1 ) ) { //<S2SV> r_core_block_read ( core ) ; //<S2SV> ret = r_cmd_call ( core -> rcmd , r_str_trim_head ( cmd ) ) ; //<S2SV> } else { //<S2SV> ret = 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( tmpseek ) { //<S2SV> for ( i = 0 ; fromvars [ i ] ; i ++ ) { //<S2SV> r_config_set_i ( core -> config , fromvars [ i ] , curfrom [ i ] ) ; //<S2SV> } //<S2SV> for ( i = 0 ; tovars [ i ] ; i ++ ) { //<S2SV> r_config_set_i ( core -> config , tovars [ i ] , curto [ i ] ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ptr2 ) { //<S2SV> * ptr2 = '!' ; //<S2SV> r_core_block_size ( core , tmpbsz ) ; //<S2SV> } //<S2SV> if ( tmpasm ) { //<S2SV> r_config_set ( core -> config , "asm.arch" , tmpasm ) ; //<S2SV> tmpasm = NULL ; //<S2SV> } //<S2SV> if ( tmpfd != - 1 ) { //<S2SV> r_io_raise ( core -> io , tmpfd ) ; //<S2SV> } //<S2SV> if ( tmpbits ) { //<S2SV> r_config_set ( core -> config , "asm.bits" , tmpbits ) ; //<S2SV> tmpbits = NULL ; //<S2SV> } //<S2SV> if ( tmpeval ) { //<S2SV> r_core_cmd0 ( core , tmpeval ) ; //<S2SV> R_FREE ( tmpeval ) ; //<S2SV> } //<S2SV> r_core_seek ( core , tmpoff , 1 ) ; //<S2SV> * ptr = '@' ; //<S2SV> rc = ret ; //<S2SV> goto beach ; //<S2SV> } //<S2SV> rc = cmd ? r_cmd_call ( core -> rcmd , r_str_trim_head ( cmd ) ) : false ; //<S2SV> beach : //<S2SV> if ( scr_html != - 1 ) { //<S2SV> r_cons_flush ( ) ; //<S2SV> r_config_set_i ( core -> config , "scr.html" , scr_html ) ; //<S2SV> } //<S2SV> if ( scr_color != - 1 ) { //<S2SV> r_config_set_i ( core -> config , "scr.color" , scr_color ) ; //<S2SV> } //<S2SV> core -> fixedblock = false ; //<S2SV> return rc ; //<S2SV> fail : //<S2SV> rc = - 1 ; //<S2SV> goto beach ; //<S2SV> } //<S2SV> 