static struct grub_ext4_extent_header * //<S2SV> grub_ext4_find_leaf ( struct grub_ext2_data * data , char * buf , //<S2SV> struct grub_ext4_extent_header * ext_block , //<S2SV> grub_uint32_t fileblock ) //<S2SV> { //<S2SV> struct grub_ext4_extent_idx * index ; //<S2SV> while ( 1 ) //<S2SV> { //<S2SV> int i ; //<S2SV> grub_disk_addr_t block ; //<S2SV> index = ( struct grub_ext4_extent_idx * ) ( ext_block + 1 ) ; //<S2SV> if ( grub_le_to_cpu16 ( ext_block -> magic ) != EXT4_EXT_MAGIC ) //<S2SV> return 0 ; //<S2SV> if ( ext_block -> depth == 0 ) //<S2SV> return ext_block ; //<S2SV> for ( i = 0 ; i < grub_le_to_cpu16 ( ext_block -> entries ) ; i ++ ) //<S2SV> { //<S2SV> if ( fileblock < grub_le_to_cpu32 ( index [ i ] . block ) ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( -- i < 0 ) //<S2SV> return 0 ; //<S2SV> block = grub_le_to_cpu16 ( index [ i ] . leaf_hi ) ; //<S2SV> block = ( block << 32 ) + grub_le_to_cpu32 ( index [ i ] . leaf ) ; //<S2SV> if ( grub_disk_read ( data -> disk , //<S2SV> block << LOG2_EXT2_BLOCK_SIZE ( data ) , //<S2SV> 0 , EXT2_BLOCK_SIZE ( data ) , buf ) ) //<S2SV> return 0 ; //<S2SV> ext_block = ( struct grub_ext4_extent_header * ) buf ; //<S2SV> } //<S2SV> } //<S2SV> 