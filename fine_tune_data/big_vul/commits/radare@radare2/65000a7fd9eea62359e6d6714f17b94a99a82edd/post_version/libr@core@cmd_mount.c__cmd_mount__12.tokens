static int cmd_mount ( void * data , const char * _input ) { //<S2SV> ut64 off = 0 ; //<S2SV> char * input , * oinput , * ptr , * ptr2 ; //<S2SV> RList * list ; //<S2SV> RListIter * iter ; //<S2SV> RFSFile * file ; //<S2SV> RFSRoot * root ; //<S2SV> RFSPlugin * plug ; //<S2SV> RFSPartition * part ; //<S2SV> RCore * core = ( RCore * ) data ; //<S2SV> if ( ! strncmp ( "kdir" , _input , 4 ) ) { //<S2SV> return cmd_mkdir ( data , _input ) ; //<S2SV> } //<S2SV> if ( ! strncmp ( "v" , _input , 1 ) ) { //<S2SV> return cmd_mv ( data , _input ) ; //<S2SV> } //<S2SV> input = oinput = strdup ( _input ) ; //<S2SV> switch ( * input ) { //<S2SV> case '<S2SV_blank>' : //<S2SV> input ++ ; //<S2SV> if ( input [ 0 ] == '<S2SV_blank>' ) { //<S2SV> input ++ ; //<S2SV> } //<S2SV> ptr = strchr ( input , '<S2SV_blank>' ) ; //<S2SV> if ( ptr ) { //<S2SV> * ptr = 0 ; //<S2SV> ptr ++ ; //<S2SV> ptr2 = strchr ( ptr , '<S2SV_blank>' ) ; //<S2SV> if ( ptr2 ) { //<S2SV> * ptr2 = 0 ; //<S2SV> off = r_num_math ( core -> num , ptr2 + 1 ) ; //<S2SV> } //<S2SV> if ( ! r_fs_mount ( core -> fs , ptr , input , off ) ) { //<S2SV> eprintf ( "Cannot<S2SV_blank>mount<S2SV_blank>%s\\n" , input ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( ! ( ptr = r_fs_name ( core -> fs , core -> offset ) ) ) { //<S2SV> eprintf ( "Unknown<S2SV_blank>filesystem<S2SV_blank>type\\n" ) ; //<S2SV> } else if ( ! r_fs_mount ( core -> fs , ptr , input , core -> offset ) ) { //<S2SV> eprintf ( "Cannot<S2SV_blank>mount<S2SV_blank>%s\\n" , input ) ; //<S2SV> } //<S2SV> free ( ptr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case '-' : //<S2SV> r_fs_umount ( core -> fs , input + 1 ) ; //<S2SV> break ; //<S2SV> case '*' : //<S2SV> eprintf ( "List<S2SV_blank>commands<S2SV_blank>in<S2SV_blank>radare<S2SV_blank>format\\n" ) ; //<S2SV> r_list_foreach ( core -> fs -> roots , iter , root ) { //<S2SV> r_cons_printf ( "m<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>0x%" PFMT64x "\\n" , //<S2SV> root -> path , root -> p -> name , root -> delta ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case '\\0' : //<S2SV> r_list_foreach ( core -> fs -> roots , iter , root ) { //<S2SV> r_cons_printf ( "%s\\t0x%" PFMT64x "\\t%s\\n" , //<S2SV> root -> p -> name , root -> delta , root -> path ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'l' : //<S2SV> r_list_foreach ( core -> fs -> plugins , iter , plug ) { //<S2SV> r_cons_printf ( "%10s<S2SV_blank><S2SV_blank>%s\\n" , plug -> name , plug -> desc ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'd' : //<S2SV> input ++ ; //<S2SV> if ( input [ 0 ] == '<S2SV_blank>' ) //<S2SV> input ++ ; //<S2SV> list = r_fs_dir ( core -> fs , input ) ; //<S2SV> if ( list ) { //<S2SV> r_list_foreach ( list , iter , file ) { //<S2SV> r_cons_printf ( "%c<S2SV_blank>%s\\n" , file -> type , file -> name ) ; //<S2SV> } //<S2SV> r_list_free ( list ) ; //<S2SV> } else eprintf ( "Cannot<S2SV_blank>open<S2SV_blank>\'%s\'<S2SV_blank>directory\\n" , input ) ; //<S2SV> break ; //<S2SV> case 'p' : //<S2SV> input ++ ; //<S2SV> if ( * input == '<S2SV_blank>' ) //<S2SV> input ++ ; //<S2SV> ptr = strchr ( input , '<S2SV_blank>' ) ; //<S2SV> if ( ptr ) { //<S2SV> * ptr = 0 ; //<S2SV> off = r_num_math ( core -> num , ptr + 1 ) ; //<S2SV> } //<S2SV> list = r_fs_partitions ( core -> fs , input , off ) ; //<S2SV> if ( list ) { //<S2SV> r_list_foreach ( list , iter , part ) { //<S2SV> r_cons_printf ( "%d<S2SV_blank>%02x<S2SV_blank>0x%010" PFMT64x "<S2SV_blank>0x%010" PFMT64x "\\n" , //<S2SV> part -> number , part -> type , //<S2SV> part -> start , part -> start + part -> length ) ; //<S2SV> } //<S2SV> r_list_free ( list ) ; //<S2SV> } else eprintf ( "Cannot<S2SV_blank>read<S2SV_blank>partition\\n" ) ; //<S2SV> break ; //<S2SV> case 'o' : //<S2SV> input ++ ; //<S2SV> if ( input [ 0 ] == '<S2SV_blank>' ) //<S2SV> input ++ ; //<S2SV> file = r_fs_open ( core -> fs , input ) ; //<S2SV> if ( file ) { //<S2SV> r_fs_read ( core -> fs , file , 0 , file -> size ) ; //<S2SV> r_cons_printf ( "f<S2SV_blank>file<S2SV_blank>%d<S2SV_blank>0x%08" PFMT64x "\\n" , file -> size , file -> off ) ; //<S2SV> r_fs_close ( core -> fs , file ) ; //<S2SV> } else eprintf ( "Cannot<S2SV_blank>open<S2SV_blank>file\\n" ) ; //<S2SV> break ; //<S2SV> case 'g' : //<S2SV> input ++ ; //<S2SV> if ( * input == '<S2SV_blank>' ) //<S2SV> input ++ ; //<S2SV> ptr = strchr ( input , '<S2SV_blank>' ) ; //<S2SV> if ( ptr ) //<S2SV> * ptr ++ = 0 ; //<S2SV> else //<S2SV> ptr = "./" ; //<S2SV> file = r_fs_open ( core -> fs , input ) ; //<S2SV> if ( file ) { //<S2SV> r_fs_read ( core -> fs , file , 0 , file -> size ) ; //<S2SV> write ( 1 , file -> data , file -> size ) ; //<S2SV> r_fs_close ( core -> fs , file ) ; //<S2SV> write ( 1 , "\\n" , 1 ) ; //<S2SV> } else if ( ! r_fs_dir_dump ( core -> fs , input , ptr ) ) //<S2SV> eprintf ( "Cannot<S2SV_blank>open<S2SV_blank>file\\n" ) ; //<S2SV> break ; //<S2SV> case 'f' : //<S2SV> input ++ ; //<S2SV> switch ( * input ) { //<S2SV> case '?' : //<S2SV> r_cons_printf ( //<S2SV> "Usage:<S2SV_blank>mf[no]<S2SV_blank>[...]\\n" //<S2SV> "<S2SV_blank>mfn<S2SV_blank>/foo<S2SV_blank>*.c<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>;<S2SV_blank>search<S2SV_blank>files<S2SV_blank>by<S2SV_blank>name<S2SV_blank>in<S2SV_blank>/foo<S2SV_blank>path\\n" //<S2SV> "<S2SV_blank>mfo<S2SV_blank>/foo<S2SV_blank>0x5e91<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>;<S2SV_blank>search<S2SV_blank>files<S2SV_blank>by<S2SV_blank>offset<S2SV_blank>in<S2SV_blank>/foo<S2SV_blank>path\\n" //<S2SV> ) ; //<S2SV> break ; //<S2SV> case 'n' : //<S2SV> input ++ ; //<S2SV> if ( * input == '<S2SV_blank>' ) //<S2SV> input ++ ; //<S2SV> ptr = strchr ( input , '<S2SV_blank>' ) ; //<S2SV> if ( ptr ) { //<S2SV> * ptr ++ = 0 ; //<S2SV> list = r_fs_find_name ( core -> fs , input , ptr ) ; //<S2SV> r_list_foreach ( list , iter , ptr ) { //<S2SV> r_str_chop_path ( ptr ) ; //<S2SV> printf ( "%s\\n" , ptr ) ; //<S2SV> } //<S2SV> } else eprintf ( "Unknown<S2SV_blank>store<S2SV_blank>path\\n" ) ; //<S2SV> break ; //<S2SV> case 'o' : //<S2SV> input ++ ; //<S2SV> if ( * input == '<S2SV_blank>' ) //<S2SV> input ++ ; //<S2SV> ptr = strchr ( input , '<S2SV_blank>' ) ; //<S2SV> if ( ptr ) { //<S2SV> * ptr ++ = 0 ; //<S2SV> ut64 off = r_num_math ( core -> num , ptr ) ; //<S2SV> list = r_fs_find_off ( core -> fs , input , off ) ; //<S2SV> r_list_foreach ( list , iter , ptr ) { //<S2SV> r_str_chop_path ( ptr ) ; //<S2SV> printf ( "%s\\n" , ptr ) ; //<S2SV> } //<S2SV> } else eprintf ( "Unknown<S2SV_blank>store<S2SV_blank>path\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case 's' : //<S2SV> if ( core -> http_up ) { //<S2SV> free ( oinput ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> input ++ ; //<S2SV> if ( input [ 0 ] == '<S2SV_blank>' ) //<S2SV> input ++ ; //<S2SV> r_fs_prompt ( core -> fs , input ) ; //<S2SV> break ; //<S2SV> case 'y' : //<S2SV> eprintf ( "TODO\\n" ) ; //<S2SV> break ; //<S2SV> case '?' : { //<S2SV> const char * help_msg [ ] = { //<S2SV> "Usage:" , "m[-?*dgy]<S2SV_blank>[...]<S2SV_blank>" , "Mountpoints<S2SV_blank>management" , //<S2SV> "m" , "" , "List<S2SV_blank>all<S2SV_blank>mountpoints<S2SV_blank>in<S2SV_blank>human<S2SV_blank>readable<S2SV_blank>format" , //<S2SV> "m*" , "" , "Same<S2SV_blank>as<S2SV_blank>above,<S2SV_blank>but<S2SV_blank>in<S2SV_blank>r2<S2SV_blank>commands" , //<S2SV> "ml" , "" , "List<S2SV_blank>filesystem<S2SV_blank>plugins" , //<S2SV> "m" , "<S2SV_blank>/mnt" , "Mount<S2SV_blank>fs<S2SV_blank>at<S2SV_blank>/mnt<S2SV_blank>with<S2SV_blank>autodetect<S2SV_blank>fs<S2SV_blank>and<S2SV_blank>current<S2SV_blank>offset" , //<S2SV> "m" , "<S2SV_blank>/mnt<S2SV_blank>ext2<S2SV_blank>0" , "Mount<S2SV_blank>ext2<S2SV_blank>fs<S2SV_blank>at<S2SV_blank>/mnt<S2SV_blank>with<S2SV_blank>delta<S2SV_blank>0<S2SV_blank>on<S2SV_blank>IO" , //<S2SV> "m-/" , "" , "Umount<S2SV_blank>given<S2SV_blank>path<S2SV_blank>(/)" , //<S2SV> "my" , "" , "Yank<S2SV_blank>contents<S2SV_blank>of<S2SV_blank>file<S2SV_blank>into<S2SV_blank>clipboard" , //<S2SV> "mo" , "<S2SV_blank>/foo" , "Get<S2SV_blank>offset<S2SV_blank>and<S2SV_blank>size<S2SV_blank>of<S2SV_blank>given<S2SV_blank>file" , //<S2SV> "mg" , "<S2SV_blank>/foo" , "Get<S2SV_blank>contents<S2SV_blank>of<S2SV_blank>file/dir<S2SV_blank>dumped<S2SV_blank>to<S2SV_blank>disk<S2SV_blank>(XXX?)" , //<S2SV> "mf" , "[?]<S2SV_blank>[o|n]" , "Search<S2SV_blank>files<S2SV_blank>for<S2SV_blank>given<S2SV_blank>filename<S2SV_blank>or<S2SV_blank>for<S2SV_blank>offset" , //<S2SV> "md" , "<S2SV_blank>/" , "List<S2SV_blank>directory<S2SV_blank>contents<S2SV_blank>for<S2SV_blank>path" , //<S2SV> "mp" , "" , "List<S2SV_blank>all<S2SV_blank>supported<S2SV_blank>partition<S2SV_blank>types" , //<S2SV> "mp" , "<S2SV_blank>msdos<S2SV_blank>0" , "Show<S2SV_blank>partitions<S2SV_blank>in<S2SV_blank>msdos<S2SV_blank>format<S2SV_blank>at<S2SV_blank>offset<S2SV_blank>0" , //<S2SV> "ms" , "<S2SV_blank>/mnt" , "Open<S2SV_blank>filesystem<S2SV_blank>prompt<S2SV_blank>at<S2SV_blank>/mnt" , //<S2SV> NULL } ; //<S2SV> r_core_cmd_help ( core , help_msg ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> free ( oinput ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 