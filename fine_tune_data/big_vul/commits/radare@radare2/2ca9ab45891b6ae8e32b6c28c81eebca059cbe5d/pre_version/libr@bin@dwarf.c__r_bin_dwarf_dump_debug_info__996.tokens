static void r_bin_dwarf_dump_debug_info ( FILE * f , const RBinDwarfDebugInfo * inf ) { //<S2SV> size_t i , j , k ; //<S2SV> RBinDwarfDIE * dies ; //<S2SV> RBinDwarfAttrValue * values ; //<S2SV> if ( ! inf || ! f ) { //<S2SV> return ; //<S2SV> } //<S2SV> for ( i = 0 ; i < inf -> length ; i ++ ) { //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank>Compilation<S2SV_blank>Unit<S2SV_blank>@<S2SV_blank>offset<S2SV_blank>0x%" PFMT64x ":\\n" , inf -> comp_units [ i ] . offset ) ; //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank><S2SV_blank>Length:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>0x%x\\n" , inf -> comp_units [ i ] . hdr . length ) ; //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank><S2SV_blank>Version:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , inf -> comp_units [ i ] . hdr . version ) ; //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank><S2SV_blank>Abbrev<S2SV_blank>Offset:<S2SV_blank>0x%x\\n" , inf -> comp_units [ i ] . hdr . abbrev_offset ) ; //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank><S2SV_blank>Pointer<S2SV_blank>Size:<S2SV_blank><S2SV_blank>%d\\n" , inf -> comp_units [ i ] . hdr . pointer_size ) ; //<S2SV> dies = inf -> comp_units [ i ] . dies ; //<S2SV> for ( j = 0 ; j < inf -> comp_units [ i ] . length ; j ++ ) { //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Abbrev<S2SV_blank>Number:<S2SV_blank>%" PFMT64u "<S2SV_blank>" , dies [ j ] . abbrev_code ) ; //<S2SV> if ( dies [ j ] . tag && dies [ j ] . tag <= DW_TAG_volatile_type && //<S2SV> dwarf_tag_name_encodings [ dies [ j ] . tag ] ) { //<S2SV> fprintf ( f , "(%s)\\n" , dwarf_tag_name_encodings [ dies [ j ] . tag ] ) ; //<S2SV> } else { //<S2SV> fprintf ( f , "(Unknown<S2SV_blank>abbrev<S2SV_blank>tag)\\n" ) ; //<S2SV> } //<S2SV> if ( ! dies [ j ] . abbrev_code ) { //<S2SV> continue ; //<S2SV> } //<S2SV> values = dies [ j ] . attr_values ; //<S2SV> for ( k = 0 ; k < dies [ j ] . length ; k ++ ) { //<S2SV> if ( ! values [ k ] . name ) //<S2SV> continue ; //<S2SV> if ( values [ k ] . name < DW_AT_vtable_elem_location && //<S2SV> dwarf_attr_encodings [ values [ k ] . name ] ) { //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-18s<S2SV_blank>:<S2SV_blank>" , dwarf_attr_encodings [ values [ k ] . name ] ) ; //<S2SV> } else { //<S2SV> fprintf ( f , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>TODO\\t" ) ; //<S2SV> } //<S2SV> r_bin_dwarf_dump_attr_value ( & values [ k ] , f ) ; //<S2SV> fprintf ( f , "\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 