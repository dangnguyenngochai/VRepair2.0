static const ut8 * r_bin_dwarf_parse_attr_value ( const ut8 * obuf , int obuf_len , //<S2SV> RBinDwarfAttrSpec * spec , RBinDwarfAttrValue * value , //<S2SV> const RBinDwarfCompUnitHdr * hdr , //<S2SV> const ut8 * debug_str , size_t debug_str_len ) { //<S2SV> const ut8 * buf = obuf ; //<S2SV> const ut8 * buf_end = obuf + obuf_len ; //<S2SV> size_t j ; //<S2SV> if ( ! spec || ! value || ! hdr || ! obuf || obuf_len < 1 ) { //<S2SV> return NULL ; //<S2SV> } //<S2SV> value -> form = spec -> attr_form ; //<S2SV> value -> name = spec -> attr_name ; //<S2SV> value -> encoding . block . data = NULL ; //<S2SV> value -> encoding . str_struct . string = NULL ; //<S2SV> value -> encoding . str_struct . offset = 0 ; //<S2SV> switch ( spec -> attr_form ) { //<S2SV> case DW_FORM_addr : //<S2SV> switch ( hdr -> pointer_size ) { //<S2SV> case 1 : //<S2SV> value -> encoding . address = READ ( buf , ut8 ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> value -> encoding . address = READ ( buf , ut16 ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> value -> encoding . address = READ ( buf , ut32 ) ; //<S2SV> break ; //<S2SV> case 8 : //<S2SV> value -> encoding . address = READ ( buf , ut64 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> eprintf ( "DWARF:<S2SV_blank>Unexpected<S2SV_blank>pointer<S2SV_blank>size:<S2SV_blank>%u\\n" , ( unsigned ) hdr -> pointer_size ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> break ; //<S2SV> case DW_FORM_block2 : //<S2SV> value -> encoding . block . length = READ ( buf , ut16 ) ; //<S2SV> if ( value -> encoding . block . length > 0 ) { //<S2SV> value -> encoding . block . data = calloc ( sizeof ( ut8 ) , value -> encoding . block . length ) ; //<S2SV> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { //<S2SV> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case DW_FORM_block4 : //<S2SV> value -> encoding . block . length = READ ( buf , ut32 ) ; //<S2SV> if ( value -> encoding . block . length > 0 ) { //<S2SV> ut8 * data = calloc ( sizeof ( ut8 ) , value -> encoding . block . length ) ; //<S2SV> if ( data ) { //<S2SV> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { //<S2SV> data [ j ] = READ ( buf , ut8 ) ; //<S2SV> } //<S2SV> } //<S2SV> value -> encoding . block . data = data ; //<S2SV> } //<S2SV> break ; //<S2SV> # if 0 //<S2SV> case DW_FORM_data2 : //<S2SV> value -> encoding . data = READ ( buf , ut16 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_data4 : //<S2SV> value -> encoding . data = READ ( buf , ut32 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_data8 : //<S2SV> value -> encoding . data = READ ( buf , ut64 ) ; //<S2SV> break ; //<S2SV> # endif //<S2SV> case DW_FORM_string : //<S2SV> value -> encoding . str_struct . string = * buf ? strdup ( ( const char * ) buf ) : NULL ; //<S2SV> buf += ( strlen ( ( const char * ) buf ) + 1 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_block : //<S2SV> buf = r_uleb128 ( buf , buf_end - buf , & value -> encoding . block . length ) ; //<S2SV> if ( ! buf ) { //<S2SV> return NULL ; //<S2SV> } //<S2SV> value -> encoding . block . data = calloc ( sizeof ( ut8 ) , value -> encoding . block . length ) ; //<S2SV> if ( value -> encoding . block . data ) { //<S2SV> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { //<S2SV> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case DW_FORM_block1 : //<S2SV> value -> encoding . block . length = READ ( buf , ut8 ) ; //<S2SV> value -> encoding . block . data = calloc ( sizeof ( ut8 ) , value -> encoding . block . length + 1 ) ; //<S2SV> if ( value -> encoding . block . data ) { //<S2SV> for ( j = 0 ; j < value -> encoding . block . length ; j ++ ) { //<S2SV> value -> encoding . block . data [ j ] = READ ( buf , ut8 ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case DW_FORM_flag : //<S2SV> value -> encoding . flag = READ ( buf , ut8 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_sdata : //<S2SV> buf = r_leb128 ( buf , & value -> encoding . sdata ) ; //<S2SV> break ; //<S2SV> case DW_FORM_strp : //<S2SV> value -> encoding . str_struct . offset = READ ( buf , ut32 ) ; //<S2SV> if ( debug_str && value -> encoding . str_struct . offset < debug_str_len ) { //<S2SV> value -> encoding . str_struct . string = strdup ( //<S2SV> ( const char * ) ( debug_str + //<S2SV> value -> encoding . str_struct . offset ) ) ; //<S2SV> } else { //<S2SV> value -> encoding . str_struct . string = NULL ; //<S2SV> } //<S2SV> break ; //<S2SV> case DW_FORM_udata : //<S2SV> { //<S2SV> ut64 ndata = 0 ; //<S2SV> const ut8 * data = ( const ut8 * ) & ndata ; //<S2SV> buf = r_uleb128 ( buf , R_MIN ( sizeof ( data ) , ( size_t ) ( buf_end - buf ) ) , & ndata ) ; //<S2SV> memcpy ( & value -> encoding . data , data , sizeof ( value -> encoding . data ) ) ; //<S2SV> value -> encoding . str_struct . string = NULL ; //<S2SV> } //<S2SV> break ; //<S2SV> case DW_FORM_ref_addr : //<S2SV> value -> encoding . reference = READ ( buf , ut64 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_ref1 : //<S2SV> value -> encoding . reference = READ ( buf , ut8 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_ref2 : //<S2SV> value -> encoding . reference = READ ( buf , ut16 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_ref4 : //<S2SV> value -> encoding . reference = READ ( buf , ut32 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_ref8 : //<S2SV> value -> encoding . reference = READ ( buf , ut64 ) ; //<S2SV> break ; //<S2SV> case DW_FORM_data1 : //<S2SV> value -> encoding . data = READ ( buf , ut8 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> eprintf ( "Unknown<S2SV_blank>DW_FORM<S2SV_blank>0x%02" PFMT64x "\\n" , spec -> attr_form ) ; //<S2SV> value -> encoding . data = 0 ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return buf ; //<S2SV> } //<S2SV> 