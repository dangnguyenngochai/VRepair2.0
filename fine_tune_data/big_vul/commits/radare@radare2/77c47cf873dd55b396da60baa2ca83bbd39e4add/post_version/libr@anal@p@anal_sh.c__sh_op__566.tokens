static int sh_op ( RAnal * anal , RAnalOp * op , ut64 addr , const ut8 * data , int len ) { //<S2SV> ut8 op_MSB , op_LSB ; //<S2SV> int ret ; //<S2SV> if ( ! data || len < 2 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> memset ( op , '\\0' , sizeof ( RAnalOp ) ) ; //<S2SV> op -> addr = addr ; //<S2SV> op -> type = R_ANAL_OP_TYPE_UNK ; //<S2SV> op -> jump = op -> fail = - 1 ; //<S2SV> op -> ptr = op -> val = - 1 ; //<S2SV> op -> size = 2 ; //<S2SV> op_MSB = anal -> big_endian ? data [ 0 ] : data [ 1 ] ; //<S2SV> op_LSB = anal -> big_endian ? data [ 1 ] : data [ 0 ] ; //<S2SV> ret = first_nibble_decode [ ( op_MSB >> 4 ) & 0x0F ] ( anal , op , ( ut16 ) ( op_MSB << 8 | op_LSB ) ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 