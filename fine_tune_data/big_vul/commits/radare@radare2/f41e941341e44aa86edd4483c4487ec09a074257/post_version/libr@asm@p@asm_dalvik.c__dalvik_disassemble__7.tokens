static int dalvik_disassemble ( RAsm * a , RAsmOp * op , const ut8 * buf , int len ) { //<S2SV> int vA , vB , vC , payload = 0 , i = ( int ) buf [ 0 ] ; //<S2SV> int size = dalvik_opcodes [ i ] . len ; //<S2SV> char str [ 1024 ] , * strasm ; //<S2SV> ut64 offset ; //<S2SV> const char * flag_str ; //<S2SV> op -> buf_asm [ 0 ] = 0 ; //<S2SV> if ( buf [ 0 ] == 0x00 ) { //<S2SV> switch ( buf [ 1 ] ) { //<S2SV> case 0x01 : //<S2SV> { //<S2SV> unsigned short array_size = buf [ 2 ] | ( buf [ 3 ] << 8 ) ; //<S2SV> int first_key = buf [ 4 ] | ( buf [ 5 ] << 8 ) | ( buf [ 6 ] << 16 ) | ( buf [ 7 ] << 24 ) ; //<S2SV> snprintf ( op -> buf_asm , sizeof ( op -> buf_asm ) , "packed-switch-payload<S2SV_blank>%d,<S2SV_blank>%d" , array_size , first_key ) ; //<S2SV> size = 8 ; //<S2SV> payload = 2 * ( array_size * 2 ) ; //<S2SV> len = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> case 0x02 : //<S2SV> { //<S2SV> unsigned short array_size = buf [ 2 ] | ( buf [ 3 ] << 8 ) ; //<S2SV> snprintf ( op -> buf_asm , sizeof ( op -> buf_asm ) , "sparse-switch-payload<S2SV_blank>%d" , array_size ) ; //<S2SV> size = 4 ; //<S2SV> payload = 2 * ( array_size * 4 ) ; //<S2SV> len = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> case 0x03 : //<S2SV> if ( len > 7 ) { //<S2SV> unsigned short elem_width = buf [ 2 ] | ( buf [ 3 ] << 8 ) ; //<S2SV> unsigned int array_size = buf [ 4 ] | ( buf [ 5 ] << 8 ) | ( buf [ 6 ] << 16 ) | ( buf [ 7 ] << 24 ) ; //<S2SV> snprintf ( op -> buf_asm , sizeof ( op -> buf_asm ) , //<S2SV> "fill-array-data-payload<S2SV_blank>%d,<S2SV_blank>%d" , //<S2SV> elem_width , array_size ) ; //<S2SV> payload = 2 * ( ( array_size * elem_width + 1 ) / 2 ) ; //<S2SV> } //<S2SV> size = 8 ; //<S2SV> len = 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> strasm = NULL ; //<S2SV> if ( size <= len ) { //<S2SV> strncpy ( op -> buf_asm , dalvik_opcodes [ i ] . name , sizeof ( op -> buf_asm ) - 1 ) ; //<S2SV> strasm = strdup ( op -> buf_asm ) ; //<S2SV> size = dalvik_opcodes [ i ] . len ; //<S2SV> switch ( dalvik_opcodes [ i ] . fmt ) { //<S2SV> case fmtop : break ; //<S2SV> case fmtopvAvB : //<S2SV> vA = buf [ 1 ] & 0x0f ; //<S2SV> vB = ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAvBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAAAvBBBB : //<S2SV> vA = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> vB = ( buf [ 5 ] << 8 ) | buf [ 4 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAA : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i" , vA ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAcB : //<S2SV> vA = buf [ 1 ] & 0x0f ; //<S2SV> vB = ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>%#x" , vA , vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAcBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> { //<S2SV> short sB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>%#04hx" , vA , sB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case fmtopvAAcBBBBBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = buf [ 2 ] | ( buf [ 3 ] << 8 ) | ( buf [ 4 ] << 16 ) | ( buf [ 5 ] << 24 ) ; //<S2SV> if ( buf [ 0 ] == 0x17 ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i:v%i,<S2SV_blank>0x%08x" , vA , vA + 1 , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>0x%08x" , vA , vB ) ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAcBBBB0000 : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = 0 | ( buf [ 2 ] << 16 ) | ( buf [ 3 ] << 24 ) ; //<S2SV> if ( buf [ 0 ] == 0x19 ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i:v%i,<S2SV_blank>0x%08x" , vA , vA + 1 , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>0x%08x" , vA , vB ) ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAcBBBBBBBBBBBBBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> # define llint long long int //<S2SV> llint lB = ( llint ) buf [ 2 ] | ( ( llint ) buf [ 3 ] << 8 ) | //<S2SV> ( ( llint ) buf [ 4 ] << 16 ) | ( ( llint ) buf [ 5 ] << 24 ) | //<S2SV> ( ( llint ) buf [ 6 ] << 32 ) | ( ( llint ) buf [ 7 ] << 40 ) | //<S2SV> ( ( llint ) buf [ 8 ] << 48 ) | ( ( llint ) buf [ 9 ] << 56 ) ; //<S2SV> # undef llint //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i:v%i,<S2SV_blank>0x%" PFMT64x , vA , vA + 1 , lB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAvBBvCC : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( int ) buf [ 2 ] ; //<S2SV> vC = ( int ) buf [ 3 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i" , vA , vB , vC ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAvBBcCC : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( int ) buf [ 2 ] ; //<S2SV> vC = ( int ) buf [ 3 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x" , vA , vB , vC ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAvBcCCCC : //<S2SV> vA = buf [ 1 ] & 0x0f ; //<S2SV> vB = ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> vC = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x" , vA , vB , vC ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoppAA : //<S2SV> vA = ( char ) buf [ 1 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>0x%08" PFMT64x , a -> pc + ( vA * 2 ) ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoppAAAA : //<S2SV> vA = ( short ) ( buf [ 3 ] << 8 | buf [ 2 ] ) ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>0x%08" PFMT64x , a -> pc + ( vA * 2 ) ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAApBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( int ) ( buf [ 3 ] << 8 | buf [ 2 ] ) ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>0x%08" PFMT64x , vA , a -> pc + ( vB * 2 ) ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoppAAAAAAAA : //<S2SV> vA = ( int ) ( buf [ 2 ] | ( buf [ 3 ] << 8 ) | ( buf [ 4 ] << 16 ) | ( buf [ 5 ] << 24 ) ) ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>0x%08" PFMT64x , a -> pc + ( vA * 2 ) ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAvBpCCCC : //<S2SV> vA = buf [ 1 ] & 0x0f ; //<S2SV> vB = ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> vC = ( int ) ( buf [ 3 ] << 8 | buf [ 2 ] ) ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>0x%08" PFMT64x , vA , vB , a -> pc + ( vC * 2 ) ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAApBBBBBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( int ) ( buf [ 2 ] | ( buf [ 3 ] << 8 ) | ( buf [ 4 ] << 16 ) | ( buf [ 5 ] << 24 ) ) ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>0x%08" PFMT64x , vA , a -> pc + vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoptinlineI : //<S2SV> vA = ( int ) ( buf [ 1 ] & 0x0f ) ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> * str = 0 ; //<S2SV> switch ( vA ) { //<S2SV> case 1 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i}" , buf [ 4 ] & 0x0f ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , //<S2SV> ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f , ( buf [ 5 ] & 0xf0 ) >> 4 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{}" ) ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> snprintf ( str , sizeof ( str ) , ",<S2SV_blank>[%04x]" , vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoptinlineIR : //<S2SV> case fmtoptinvokeVSR : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> vC = ( buf [ 5 ] << 8 ) | buf [ 4 ] ; //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i..v%i},<S2SV_blank>[%04x]" , vC , vC + vA - 1 , vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoptinvokeVS : //<S2SV> vA = ( int ) ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> switch ( vA ) { //<S2SV> case 1 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i}" , buf [ 4 ] & 0x0f ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , //<S2SV> ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , //<S2SV> ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f , ( buf [ 5 ] & 0xf0 ) >> 4 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{}" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> snprintf ( str , sizeof ( str ) , ",<S2SV_blank>[%04x]" , vB ) ; //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAtBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> if ( buf [ 0 ] == 0x1a ) { //<S2SV> offset = R_ASM_GET_OFFSET ( a , 's' , vB ) ; //<S2SV> if ( offset == - 1 ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>string+%i" , vA , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , vA , offset ) ; //<S2SV> } //<S2SV> } else if ( buf [ 0 ] == 0x1c || buf [ 0 ] == 0x1f || buf [ 0 ] == 0x22 ) { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'c' , vB ) ; //<S2SV> if ( ! flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>class+%i" , vA , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>%s" , vA , flag_str ) ; //<S2SV> } //<S2SV> } else { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'f' , vB ) ; //<S2SV> if ( ! flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>field+%i" , vA , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>%s" , vA , flag_str ) ; //<S2SV> } //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoptopvAvBoCCCC : //<S2SV> vA = ( buf [ 1 ] & 0x0f ) ; //<S2SV> vB = ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> vC = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> offset = R_ASM_GET_OFFSET ( a , 'o' , vC ) ; //<S2SV> if ( offset == - 1 ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[obj+%04x]" , vA , vB , vC ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[0x%" PFMT64x "]" , vA , vB , offset ) ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopAAtBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> offset = R_ASM_GET_OFFSET ( a , 't' , vB ) ; //<S2SV> if ( offset == - 1 ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>thing+%i" , vA , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , vA , offset ) ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAvBtCCCC : //<S2SV> vA = ( buf [ 1 ] & 0x0f ) ; //<S2SV> vB = ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> vC = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> if ( buf [ 0 ] == 0x20 || buf [ 0 ] == 0x23 ) { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'c' , vC ) ; //<S2SV> if ( flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s" , vA , vB , flag_str ) ; //<S2SV> } //<S2SV> else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>class+%i" , vA , vB , vC ) ; //<S2SV> } //<S2SV> } else { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'f' , vC ) ; //<S2SV> if ( flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s" , vA , vB , flag_str ) ; //<S2SV> } //<S2SV> else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>field+%i" , vA , vB , vC ) ; //<S2SV> } //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvAAtBBBBBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( int ) ( buf [ 5 ] | ( buf [ 4 ] << 8 ) | ( buf [ 3 ] << 16 ) | ( buf [ 2 ] << 24 ) ) ; //<S2SV> offset = R_ASM_GET_OFFSET ( a , 's' , vB ) ; //<S2SV> if ( offset == - 1 ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>string+%i" , vA , vB ) ; //<S2SV> } //<S2SV> else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , vA , offset ) ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvCCCCmBBBB : //<S2SV> vA = ( int ) buf [ 1 ] ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> vC = ( buf [ 5 ] << 8 ) | buf [ 4 ] ; //<S2SV> if ( buf [ 0 ] == 0x25 ) { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'c' , vB ) ; //<S2SV> if ( flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i..v%i},<S2SV_blank>%s" , vC , vC + vA - 1 , flag_str ) ; //<S2SV> } //<S2SV> else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i..v%i},<S2SV_blank>class+%i" , vC , vC + vA - 1 , vB ) ; //<S2SV> } //<S2SV> } else { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'm' , vB ) ; //<S2SV> if ( flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i..v%i},<S2SV_blank>%s" , vC , vC + vA - 1 , flag_str ) ; //<S2SV> } //<S2SV> else { //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i..v%i},<S2SV_blank>method+%i" , vC , vC + vA - 1 , vB ) ; //<S2SV> } //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtopvXtBBBB : //<S2SV> vA = ( int ) ( buf [ 1 ] & 0xf0 ) >> 4 ; //<S2SV> vB = ( buf [ 3 ] << 8 ) | buf [ 2 ] ; //<S2SV> switch ( vA ) { //<S2SV> case 1 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i}" , buf [ 4 ] & 0x0f ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , ( buf [ 4 ] & 0xf0 ) >> 4 ) ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , //<S2SV> ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , //<S2SV> ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f , ( buf [ 5 ] & 0xf0 ) >> 4 ) ; //<S2SV> break ; //<S2SV> case 5 : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf [ 4 ] & 0x0f , //<S2SV> ( buf [ 4 ] & 0xf0 ) >> 4 , buf [ 5 ] & 0x0f , ( buf [ 5 ] & 0xf0 ) >> 4 , buf [ 1 ] & 0x0f ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> snprintf ( str , sizeof ( str ) , "<S2SV_blank>{}" ) ; //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> if ( buf [ 0 ] == 0x24 ) { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'c' , vB ) ; //<S2SV> if ( flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , ",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x" , flag_str , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , ",<S2SV_blank>class+%i" , vB ) ; //<S2SV> } //<S2SV> } else { //<S2SV> flag_str = R_ASM_GET_NAME ( a , 'm' , vB ) ; //<S2SV> if ( flag_str ) { //<S2SV> snprintf ( str , sizeof ( str ) , ",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x" , flag_str , vB ) ; //<S2SV> } else { //<S2SV> snprintf ( str , sizeof ( str ) , ",<S2SV_blank>method+%i" , vB ) ; //<S2SV> } //<S2SV> } //<S2SV> strasm = r_str_concat ( strasm , str ) ; //<S2SV> break ; //<S2SV> case fmtoptinvokeI : //<S2SV> case fmtoptinvokeIR : //<S2SV> case fmt00 : //<S2SV> default : //<S2SV> strcpy ( op -> buf_asm , "invalid<S2SV_blank>" ) ; //<S2SV> free ( strasm ) ; //<S2SV> strasm = NULL ; //<S2SV> size = 2 ; //<S2SV> } //<S2SV> if ( strasm ) { //<S2SV> strncpy ( op -> buf_asm , strasm , sizeof ( op -> buf_asm ) - 1 ) ; //<S2SV> op -> buf_asm [ sizeof ( op -> buf_asm ) - 1 ] = 0 ; //<S2SV> } else { //<S2SV> strcpy ( op -> buf_asm , "invalid" ) ; //<S2SV> } //<S2SV> } else if ( len > 0 ) { //<S2SV> strcpy ( op -> buf_asm , "invalid<S2SV_blank>" ) ; //<S2SV> op -> size = len ; //<S2SV> size = len ; //<S2SV> } //<S2SV> op -> payload = payload ; //<S2SV> size += payload ; //<S2SV> op -> size = size ; //<S2SV> free ( strasm ) ; //<S2SV> return size ; //<S2SV> } //<S2SV> 