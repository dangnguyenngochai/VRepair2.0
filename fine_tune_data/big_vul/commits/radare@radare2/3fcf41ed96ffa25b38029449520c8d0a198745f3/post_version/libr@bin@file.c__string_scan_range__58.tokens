static int string_scan_range ( RList * list , RBinFile * bf , int min , //<S2SV> const ut64 from , const ut64 to , int type ) { //<S2SV> ut8 tmp [ R_STRING_SCAN_BUFFER_SIZE ] ; //<S2SV> ut64 str_start , needle = from ; //<S2SV> int count = 0 , i , rc , runes ; //<S2SV> int str_type = R_STRING_TYPE_DETECT ; //<S2SV> if ( type == - 1 ) { //<S2SV> type = R_STRING_TYPE_DETECT ; //<S2SV> } //<S2SV> if ( from >= to ) { //<S2SV> eprintf ( "Invalid<S2SV_blank>range<S2SV_blank>to<S2SV_blank>find<S2SV_blank>strings<S2SV_blank>0x%llx<S2SV_blank>..<S2SV_blank>0x%llx\\n" , from , to ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> int len = to - from ; //<S2SV> ut8 * buf = calloc ( len , 1 ) ; //<S2SV> if ( ! buf || ! min ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> r_buf_read_at ( bf -> buf , from , buf , len ) ; //<S2SV> while ( needle < to ) { //<S2SV> rc = r_utf8_decode ( buf + needle - from , to - needle , NULL ) ; //<S2SV> if ( ! rc ) { //<S2SV> needle ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( type == R_STRING_TYPE_DETECT ) { //<S2SV> char * w = ( char * ) buf + needle + rc - from ; //<S2SV> if ( ( to - needle ) > 5 + rc ) { //<S2SV> bool is_wide32 = ( needle + rc + 2 < to ) && ( ! w [ 0 ] && ! w [ 1 ] && ! w [ 2 ] && w [ 3 ] && ! w [ 4 ] ) ; //<S2SV> if ( is_wide32 ) { //<S2SV> str_type = R_STRING_TYPE_WIDE32 ; //<S2SV> } else { //<S2SV> bool is_wide = needle + rc + 2 < to && ! w [ 0 ] && w [ 1 ] && ! w [ 2 ] ; //<S2SV> str_type = is_wide ? R_STRING_TYPE_WIDE : R_STRING_TYPE_ASCII ; //<S2SV> } //<S2SV> } else { //<S2SV> str_type = R_STRING_TYPE_ASCII ; //<S2SV> } //<S2SV> } else { //<S2SV> str_type = type ; //<S2SV> } //<S2SV> runes = 0 ; //<S2SV> str_start = needle ; //<S2SV> for ( rc = i = 0 ; i < sizeof ( tmp ) - 3 && needle < to ; i += rc ) { //<S2SV> RRune r = { 0 } ; //<S2SV> if ( str_type == R_STRING_TYPE_WIDE32 ) { //<S2SV> rc = r_utf32le_decode ( buf + needle - from , to - needle , & r ) ; //<S2SV> if ( rc ) { //<S2SV> rc = 4 ; //<S2SV> } //<S2SV> } else if ( str_type == R_STRING_TYPE_WIDE ) { //<S2SV> rc = r_utf16le_decode ( buf + needle - from , to - needle , & r ) ; //<S2SV> if ( rc == 1 ) { //<S2SV> rc = 2 ; //<S2SV> } //<S2SV> } else { //<S2SV> rc = r_utf8_decode ( buf + needle - from , to - needle , & r ) ; //<S2SV> if ( rc > 1 ) { //<S2SV> str_type = R_STRING_TYPE_UTF8 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! rc ) { //<S2SV> needle ++ ; //<S2SV> break ; //<S2SV> } //<S2SV> needle += rc ; //<S2SV> if ( r_isprint ( r ) && r != '\\\\' ) { //<S2SV> if ( str_type == R_STRING_TYPE_WIDE32 ) { //<S2SV> if ( r == 0xff ) { //<S2SV> r = 0 ; //<S2SV> } //<S2SV> } //<S2SV> rc = r_utf8_encode ( & tmp [ i ] , r ) ; //<S2SV> runes ++ ; //<S2SV> } else if ( r && r < 0x100 && strchr ( "\\b\\v\\f\\n\\r\\t\\a\\033\\\\" , ( char ) r ) ) { //<S2SV> if ( ( i + 32 ) < sizeof ( tmp ) && r < 93 ) { //<S2SV> tmp [ i + 0 ] = '\\\\' ; //<S2SV> tmp [ i + 1 ] = "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>abtnvfr<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>e<S2SV_blank><S2SV_blank>" //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "<S2SV_blank><S2SV_blank>\\\\" [ r ] ; //<S2SV> } else { //<S2SV> break ; //<S2SV> } //<S2SV> rc = 2 ; //<S2SV> runes ++ ; //<S2SV> } else { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> tmp [ i ++ ] = '\\0' ; //<S2SV> if ( runes >= min ) { //<S2SV> if ( str_type == R_STRING_TYPE_ASCII ) { //<S2SV> int j ; //<S2SV> for ( j = 0 ; j < i ; j ++ ) { //<S2SV> char ch = tmp [ j ] ; //<S2SV> if ( ch != '\\n' && ch != '\\r' && ch != '\\t' ) { //<S2SV> if ( ! IS_PRINTABLE ( tmp [ j ] ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> RBinString * bs = R_NEW0 ( RBinString ) ; //<S2SV> if ( ! bs ) { //<S2SV> break ; //<S2SV> } //<S2SV> bs -> type = str_type ; //<S2SV> bs -> length = runes ; //<S2SV> bs -> size = needle - str_start ; //<S2SV> bs -> ordinal = count ++ ; //<S2SV> switch ( str_type ) { //<S2SV> case R_STRING_TYPE_WIDE : //<S2SV> if ( str_start - from > 1 ) { //<S2SV> const ut8 * p = buf + str_start - 2 - from ; //<S2SV> if ( p [ 0 ] == 0xff && p [ 1 ] == 0xfe ) { //<S2SV> str_start -= 2 ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case R_STRING_TYPE_WIDE32 : //<S2SV> if ( str_start - from > 3 ) { //<S2SV> const ut8 * p = buf + str_start - 4 - from ; //<S2SV> if ( p [ 0 ] == 0xff && p [ 1 ] == 0xfe ) { //<S2SV> str_start -= 4 ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> bs -> paddr = bs -> vaddr = str_start ; //<S2SV> bs -> string = r_str_ndup ( ( const char * ) tmp , i ) ; //<S2SV> if ( list ) { //<S2SV> r_list_append ( list , bs ) ; //<S2SV> } else { //<S2SV> print_string ( bs , bf ) ; //<S2SV> r_bin_string_free ( bs ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> free ( buf ) ; //<S2SV> return count ; //<S2SV> } //<S2SV> 