static OPCODE_DESC * avr_op_analyze ( RAnal * anal , RAnalOp * op , ut64 addr , const ut8 * buf , int len , CPU_MODEL * cpu ) { //<S2SV> OPCODE_DESC * opcode_desc ; //<S2SV> ut16 ins = ( buf [ 1 ] << 8 ) | buf [ 0 ] ; //<S2SV> int fail ; //<S2SV> char * t ; //<S2SV> memset ( op , 0 , sizeof ( RAnalOp ) ) ; //<S2SV> op -> ptr = UT64_MAX ; //<S2SV> op -> val = UT64_MAX ; //<S2SV> op -> jump = UT64_MAX ; //<S2SV> r_strbuf_init ( & op -> esil ) ; //<S2SV> for ( opcode_desc = opcodes ; opcode_desc -> handler ; opcode_desc ++ ) { //<S2SV> if ( ( ins & opcode_desc -> mask ) == opcode_desc -> selector ) { //<S2SV> fail = 0 ; //<S2SV> op -> cycles = opcode_desc -> cycles ; //<S2SV> op -> size = opcode_desc -> size ; //<S2SV> op -> type = opcode_desc -> type ; //<S2SV> op -> jump = UT64_MAX ; //<S2SV> op -> fail = UT64_MAX ; //<S2SV> op -> addr = addr ; //<S2SV> r_strbuf_setf ( & op -> esil , "" ) ; //<S2SV> opcode_desc -> handler ( anal , op , buf , len , & fail , cpu ) ; //<S2SV> if ( fail ) { //<S2SV> goto INVALID_OP ; //<S2SV> } //<S2SV> if ( op -> cycles <= 0 ) { //<S2SV> opcode_desc -> cycles = 2 ; //<S2SV> } //<S2SV> op -> nopcode = ( op -> type == R_ANAL_OP_TYPE_UNK ) ; //<S2SV> t = r_strbuf_get ( & op -> esil ) ; //<S2SV> if ( t && strlen ( t ) > 1 ) { //<S2SV> t += strlen ( t ) - 1 ; //<S2SV> if ( * t == ',' ) { //<S2SV> * t = '\\0' ; //<S2SV> } //<S2SV> } //<S2SV> return opcode_desc ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( ins & 0xff00 ) == 0xff00 && ( ins & 0xf ) > 7 ) { //<S2SV> goto INVALID_OP ; //<S2SV> } //<S2SV> INVALID_OP : //<S2SV> op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; //<S2SV> op -> type = R_ANAL_OP_TYPE_UNK ; //<S2SV> op -> addr = addr ; //<S2SV> op -> fail = UT64_MAX ; //<S2SV> op -> jump = UT64_MAX ; //<S2SV> op -> ptr = UT64_MAX ; //<S2SV> op -> val = UT64_MAX ; //<S2SV> op -> nopcode = 1 ; //<S2SV> op -> cycles = 1 ; //<S2SV> op -> size = 2 ; //<S2SV> r_strbuf_set ( & op -> esil , "1,$" ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 