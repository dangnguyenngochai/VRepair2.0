void //<S2SV> pango_glyph_string_set_size ( PangoGlyphString * string , gint new_len ) //<S2SV> { //<S2SV> g_return_if_fail ( new_len >= 0 ) ; //<S2SV> while ( new_len > string -> space ) //<S2SV> { //<S2SV> if ( string -> space == 0 ) //<S2SV> { //<S2SV> string -> space = 4 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> const guint max_space = //<S2SV> MIN ( G_MAXINT , G_MAXSIZE / MAX ( sizeof ( PangoGlyphInfo ) , sizeof ( gint ) ) ) ; //<S2SV> guint more_space = ( guint ) string -> space * 2 ; //<S2SV> if ( more_space > max_space ) //<S2SV> { //<S2SV> more_space = max_space ; //<S2SV> if ( ( guint ) new_len > max_space ) //<S2SV> { //<S2SV> g_error ( "%s:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>glyph<S2SV_blank>string<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%i\\n" , //<S2SV> G_STRLOC , new_len ) ; //<S2SV> } //<S2SV> } //<S2SV> string -> space = more_space ; //<S2SV> } //<S2SV> } //<S2SV> string -> glyphs = g_realloc ( string -> glyphs , string -> space * sizeof ( PangoGlyphInfo ) ) ; //<S2SV> string -> log_clusters = g_realloc ( string -> log_clusters , string -> space * sizeof ( gint ) ) ; //<S2SV> string -> num_glyphs = new_len ; //<S2SV> } //<S2SV> 