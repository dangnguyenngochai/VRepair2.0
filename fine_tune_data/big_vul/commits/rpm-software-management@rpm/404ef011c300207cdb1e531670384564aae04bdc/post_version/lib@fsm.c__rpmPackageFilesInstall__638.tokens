int rpmPackageFilesInstall ( rpmts ts , rpmte te , rpmfiles files , //<S2SV> rpmpsm psm , char * * failedFile ) //<S2SV> { //<S2SV> FD_t payload = rpmtePayload ( te ) ; //<S2SV> rpmfi fi = rpmfiNewArchiveReader ( payload , files , RPMFI_ITER_READ_ARCHIVE ) ; //<S2SV> rpmfs fs = rpmteGetFileStates ( te ) ; //<S2SV> rpmPlugins plugins = rpmtsPlugins ( ts ) ; //<S2SV> struct stat sb ; //<S2SV> int saveerrno = errno ; //<S2SV> int rc = 0 ; //<S2SV> int nodigest = ( rpmtsFlags ( ts ) & RPMTRANS_FLAG_NOFILEDIGEST ) ? 1 : 0 ; //<S2SV> int nofcaps = ( rpmtsFlags ( ts ) & RPMTRANS_FLAG_NOCAPS ) ? 1 : 0 ; //<S2SV> int firsthardlink = - 1 ; //<S2SV> int skip ; //<S2SV> rpmFileAction action ; //<S2SV> char * tid = NULL ; //<S2SV> const char * suffix ; //<S2SV> char * fpath = NULL ; //<S2SV> if ( fi == NULL ) { //<S2SV> rc = RPMERR_BAD_MAGIC ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> rasprintf ( & tid , ";%08x" , ( unsigned ) rpmtsGetTid ( ts ) ) ; //<S2SV> rc = fsmMkdirs ( files , fs , plugins ) ; //<S2SV> while ( ! rc ) { //<S2SV> rc = rpmfiNext ( fi ) ; //<S2SV> if ( rc < 0 ) { //<S2SV> if ( rc == RPMERR_ITER_END ) //<S2SV> rc = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> action = rpmfsGetAction ( fs , rpmfiFX ( fi ) ) ; //<S2SV> skip = XFA_SKIPPING ( action ) ; //<S2SV> suffix = S_ISDIR ( rpmfiFMode ( fi ) ) ? NULL : tid ; //<S2SV> if ( action != FA_TOUCH ) { //<S2SV> fpath = fsmFsPath ( fi , suffix ) ; //<S2SV> } else { //<S2SV> fpath = fsmFsPath ( fi , "" ) ; //<S2SV> } //<S2SV> rc = rpmfiStat ( fi , 1 , & sb ) ; //<S2SV> fsmDebug ( fpath , action , & sb ) ; //<S2SV> if ( rc ) //<S2SV> break ; //<S2SV> rc = rpmpluginsCallFsmFilePre ( plugins , fi , fpath , //<S2SV> sb . st_mode , action ) ; //<S2SV> if ( rc ) { //<S2SV> skip = 1 ; //<S2SV> } else { //<S2SV> setFileState ( fs , rpmfiFX ( fi ) ) ; //<S2SV> } //<S2SV> if ( ! skip ) { //<S2SV> int setmeta = 1 ; //<S2SV> if ( ! suffix ) { //<S2SV> rc = fsmBackup ( fi , action ) ; //<S2SV> } //<S2SV> if ( ! suffix ) { //<S2SV> rc = fsmVerify ( fpath , fi ) ; //<S2SV> } else { //<S2SV> rc = ( action == FA_TOUCH ) ? 0 : RPMERR_ENOENT ; //<S2SV> } //<S2SV> if ( S_ISREG ( sb . st_mode ) ) { //<S2SV> if ( rc == RPMERR_ENOENT ) { //<S2SV> rc = fsmMkfile ( fi , fpath , files , psm , nodigest , //<S2SV> & setmeta , & firsthardlink ) ; //<S2SV> } //<S2SV> } else if ( S_ISDIR ( sb . st_mode ) ) { //<S2SV> if ( rc == RPMERR_ENOENT ) { //<S2SV> mode_t mode = sb . st_mode ; //<S2SV> mode &= ~ 07777 ; //<S2SV> mode |= 00700 ; //<S2SV> rc = fsmMkdir ( fpath , mode ) ; //<S2SV> } //<S2SV> } else if ( S_ISLNK ( sb . st_mode ) ) { //<S2SV> if ( rc == RPMERR_ENOENT ) { //<S2SV> rc = fsmSymlink ( rpmfiFLink ( fi ) , fpath ) ; //<S2SV> } //<S2SV> } else if ( S_ISFIFO ( sb . st_mode ) ) { //<S2SV> if ( rc == RPMERR_ENOENT ) { //<S2SV> rc = fsmMkfifo ( fpath , 0000 ) ; //<S2SV> } //<S2SV> } else if ( S_ISCHR ( sb . st_mode ) || //<S2SV> S_ISBLK ( sb . st_mode ) || //<S2SV> S_ISSOCK ( sb . st_mode ) ) //<S2SV> { //<S2SV> if ( rc == RPMERR_ENOENT ) { //<S2SV> rc = fsmMknod ( fpath , sb . st_mode , sb . st_rdev ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( ! IS_DEV_LOG ( fpath ) ) //<S2SV> rc = RPMERR_UNKNOWN_FILETYPE ; //<S2SV> } //<S2SV> if ( ! rc && setmeta ) { //<S2SV> rc = fsmSetmeta ( fpath , fi , plugins , action , & sb , nofcaps ) ; //<S2SV> } //<S2SV> } else if ( firsthardlink >= 0 && rpmfiArchiveHasContent ( fi ) ) { //<S2SV> char * fn = rpmfilesFN ( files , firsthardlink ) ; //<S2SV> rc = expandRegular ( fi , fn , psm , 0 , nodigest , 0 ) ; //<S2SV> firsthardlink = - 1 ; //<S2SV> free ( fn ) ; //<S2SV> } //<S2SV> if ( rc ) { //<S2SV> if ( ! skip ) { //<S2SV> if ( suffix && ( action != FA_TOUCH ) ) { //<S2SV> ( void ) fsmRemove ( fpath , sb . st_mode ) ; //<S2SV> } //<S2SV> errno = saveerrno ; //<S2SV> } //<S2SV> } else { //<S2SV> rpmpsmNotify ( psm , RPMCALLBACK_INST_PROGRESS , rpmfiArchiveTell ( fi ) ) ; //<S2SV> if ( ! skip ) { //<S2SV> if ( suffix ) //<S2SV> rc = fsmBackup ( fi , action ) ; //<S2SV> if ( ! rc ) //<S2SV> rc = fsmCommit ( & fpath , fi , action , suffix ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( rc ) //<S2SV> * failedFile = xstrdup ( fpath ) ; //<S2SV> rpmpluginsCallFsmFilePost ( plugins , fi , fpath , //<S2SV> sb . st_mode , action , rc ) ; //<S2SV> fpath = _free ( fpath ) ; //<S2SV> } //<S2SV> rpmswAdd ( rpmtsOp ( ts , RPMTS_OP_UNCOMPRESS ) , fdOp ( payload , FDSTAT_READ ) ) ; //<S2SV> rpmswAdd ( rpmtsOp ( ts , RPMTS_OP_DIGEST ) , fdOp ( payload , FDSTAT_DIGEST ) ) ; //<S2SV> exit : //<S2SV> rpmfiArchiveClose ( fi ) ; //<S2SV> rpmfiFree ( fi ) ; //<S2SV> Fclose ( payload ) ; //<S2SV> free ( tid ) ; //<S2SV> free ( fpath ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> 