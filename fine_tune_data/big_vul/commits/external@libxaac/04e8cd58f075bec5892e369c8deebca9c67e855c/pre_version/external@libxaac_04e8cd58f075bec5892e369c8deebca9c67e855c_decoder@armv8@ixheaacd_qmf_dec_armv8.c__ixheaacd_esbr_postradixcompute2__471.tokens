VOID ixheaacd_esbr_postradixcompute2 ( WORD32 * ptr_y , WORD32 * ptr_x , //<S2SV> const WORD32 * pdig_rev_tbl , //<S2SV> WORD32 npoints ) { //<S2SV> WORD32 i , k ; //<S2SV> WORD32 h2 ; //<S2SV> WORD32 x_0 , x_1 , x_2 , x_3 ; //<S2SV> WORD32 x_4 , x_5 , x_6 , x_7 ; //<S2SV> WORD32 x_8 , x_9 , x_a , x_b , x_c , x_d , x_e , x_f ; //<S2SV> WORD32 n00 , n10 , n20 , n30 , n01 , n11 , n21 , n31 ; //<S2SV> WORD32 n02 , n12 , n22 , n32 , n03 , n13 , n23 , n33 ; //<S2SV> WORD32 n0 , j0 ; //<S2SV> WORD32 * x2 , * x0 ; //<S2SV> WORD32 * y0 , * y1 , * y2 , * y3 ; //<S2SV> y0 = ptr_y ; //<S2SV> y2 = ptr_y + ( WORD32 ) npoints ; //<S2SV> x0 = ptr_x ; //<S2SV> x2 = ptr_x + ( WORD32 ) ( npoints >> 1 ) ; //<S2SV> y1 = y0 + ( WORD32 ) ( npoints >> 2 ) ; //<S2SV> y3 = y2 + ( WORD32 ) ( npoints >> 2 ) ; //<S2SV> j0 = 8 ; //<S2SV> n0 = npoints >> 1 ; //<S2SV> for ( k = 0 ; k < 2 ; k ++ ) { //<S2SV> for ( i = 0 ; i < npoints >> 1 ; i += 8 ) { //<S2SV> h2 = * pdig_rev_tbl ++ >> 2 ; //<S2SV> x_0 = * x0 ++ ; //<S2SV> x_1 = * x0 ++ ; //<S2SV> x_2 = * x0 ++ ; //<S2SV> x_3 = * x0 ++ ; //<S2SV> x_4 = * x0 ++ ; //<S2SV> x_5 = * x0 ++ ; //<S2SV> x_6 = * x0 ++ ; //<S2SV> x_7 = * x0 ++ ; //<S2SV> n00 = x_0 + x_2 ; //<S2SV> n01 = x_1 + x_3 ; //<S2SV> n20 = x_0 - x_2 ; //<S2SV> n21 = x_1 - x_3 ; //<S2SV> n10 = x_4 + x_6 ; //<S2SV> n11 = x_5 + x_7 ; //<S2SV> n30 = x_4 - x_6 ; //<S2SV> n31 = x_5 - x_7 ; //<S2SV> y0 [ h2 ] = n00 ; //<S2SV> y0 [ h2 + 1 ] = n01 ; //<S2SV> y1 [ h2 ] = n10 ; //<S2SV> y1 [ h2 + 1 ] = n11 ; //<S2SV> y2 [ h2 ] = n20 ; //<S2SV> y2 [ h2 + 1 ] = n21 ; //<S2SV> y3 [ h2 ] = n30 ; //<S2SV> y3 [ h2 + 1 ] = n31 ; //<S2SV> x_8 = * x2 ++ ; //<S2SV> x_9 = * x2 ++ ; //<S2SV> x_a = * x2 ++ ; //<S2SV> x_b = * x2 ++ ; //<S2SV> x_c = * x2 ++ ; //<S2SV> x_d = * x2 ++ ; //<S2SV> x_e = * x2 ++ ; //<S2SV> x_f = * x2 ++ ; //<S2SV> n02 = x_8 + x_a ; //<S2SV> n03 = x_9 + x_b ; //<S2SV> n22 = x_8 - x_a ; //<S2SV> n23 = x_9 - x_b ; //<S2SV> n12 = x_c + x_e ; //<S2SV> n13 = x_d + x_f ; //<S2SV> n32 = x_c - x_e ; //<S2SV> n33 = x_d - x_f ; //<S2SV> y0 [ h2 + 2 ] = n02 ; //<S2SV> y0 [ h2 + 3 ] = n03 ; //<S2SV> y1 [ h2 + 2 ] = n12 ; //<S2SV> y1 [ h2 + 3 ] = n13 ; //<S2SV> y2 [ h2 + 2 ] = n22 ; //<S2SV> y2 [ h2 + 3 ] = n23 ; //<S2SV> y3 [ h2 + 2 ] = n32 ; //<S2SV> y3 [ h2 + 3 ] = n33 ; //<S2SV> } //<S2SV> x0 += ( WORD32 ) npoints >> 1 ; //<S2SV> x2 += ( WORD32 ) npoints >> 1 ; //<S2SV> } //<S2SV> } //<S2SV> 