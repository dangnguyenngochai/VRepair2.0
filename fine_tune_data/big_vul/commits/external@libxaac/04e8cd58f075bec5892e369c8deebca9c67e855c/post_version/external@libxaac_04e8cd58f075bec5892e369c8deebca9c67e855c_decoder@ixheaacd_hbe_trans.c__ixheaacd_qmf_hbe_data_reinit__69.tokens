WORD32 ixheaacd_qmf_hbe_data_reinit ( ia_esbr_hbe_txposer_struct * ptr_hbe_txposer , //<S2SV> WORD16 * p_freq_band_tab [ 2 ] , //<S2SV> WORD16 * p_num_sfb , WORD32 upsamp_4_flag ) { //<S2SV> WORD32 synth_size , sfb , patch , stop_patch ; //<S2SV> if ( ptr_hbe_txposer != NULL ) { //<S2SV> ptr_hbe_txposer -> start_band = p_freq_band_tab [ LOW ] [ 0 ] ; //<S2SV> ptr_hbe_txposer -> end_band = p_freq_band_tab [ LOW ] [ p_num_sfb [ LOW ] ] ; //<S2SV> ptr_hbe_txposer -> synth_size = //<S2SV> 4 * ( ( ptr_hbe_txposer -> start_band + 4 ) / 8 + 1 ) ; //<S2SV> ptr_hbe_txposer -> k_start = //<S2SV> ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> start_band ] ; //<S2SV> ptr_hbe_txposer -> upsamp_4_flag = upsamp_4_flag ; //<S2SV> if ( upsamp_4_flag ) { //<S2SV> if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 16 ) //<S2SV> ptr_hbe_txposer -> k_start = 16 - ptr_hbe_txposer -> synth_size ; //<S2SV> } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { //<S2SV> if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 24 ) //<S2SV> ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; //<S2SV> } //<S2SV> memset ( ptr_hbe_txposer -> synth_buf , 0 , 1280 * sizeof ( FLOAT32 ) ) ; //<S2SV> synth_size = ptr_hbe_txposer -> synth_size ; //<S2SV> ptr_hbe_txposer -> synth_buf_offset = 18 * synth_size ; //<S2SV> switch ( synth_size ) { //<S2SV> case 4 : //<S2SV> ptr_hbe_txposer -> synth_cos_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_synth_cos_table_kl_4 ; //<S2SV> ptr_hbe_txposer -> analy_cos_sin_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_analy_cos_sin_table_kl_8 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; //<S2SV> break ; //<S2SV> case 8 : //<S2SV> ptr_hbe_txposer -> synth_cos_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_synth_cos_table_kl_8 ; //<S2SV> ptr_hbe_txposer -> analy_cos_sin_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_analy_cos_sin_table_kl_16 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; //<S2SV> break ; //<S2SV> case 12 : //<S2SV> ptr_hbe_txposer -> synth_cos_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_synth_cos_table_kl_12 ; //<S2SV> ptr_hbe_txposer -> analy_cos_sin_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_analy_cos_sin_table_kl_24 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p3 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p3 ; //<S2SV> break ; //<S2SV> case 16 : //<S2SV> ptr_hbe_txposer -> synth_cos_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_synth_cos_table_kl_16 ; //<S2SV> ptr_hbe_txposer -> analy_cos_sin_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_analy_cos_sin_table_kl_32 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; //<S2SV> break ; //<S2SV> case 20 : //<S2SV> ptr_hbe_txposer -> synth_cos_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_synth_cos_table_kl_20 ; //<S2SV> ptr_hbe_txposer -> analy_cos_sin_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_analy_cos_sin_table_kl_40 ; //<S2SV> break ; //<S2SV> default : //<S2SV> ptr_hbe_txposer -> synth_cos_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_synth_cos_table_kl_4 ; //<S2SV> ptr_hbe_txposer -> analy_cos_sin_tab = //<S2SV> ( FLOAT32 * ) ixheaacd_analy_cos_sin_table_kl_8 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_real_synth_fft = & ixheaacd_real_synth_fft_p2 ; //<S2SV> ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft = & ixheaacd_cmplx_anal_fft_p2 ; //<S2SV> } //<S2SV> ptr_hbe_txposer -> synth_wind_coeff = ixheaacd_map_prot_filter ( synth_size ) ; //<S2SV> memset ( ptr_hbe_txposer -> analy_buf , 0 , 640 * sizeof ( FLOAT32 ) ) ; //<S2SV> synth_size = 2 * ptr_hbe_txposer -> synth_size ; //<S2SV> ptr_hbe_txposer -> analy_wind_coeff = ixheaacd_map_prot_filter ( synth_size ) ; //<S2SV> memset ( ptr_hbe_txposer -> x_over_qmf , 0 , MAX_NUM_PATCHES * sizeof ( WORD32 ) ) ; //<S2SV> sfb = 0 ; //<S2SV> if ( upsamp_4_flag ) { //<S2SV> stop_patch = MAX_NUM_PATCHES ; //<S2SV> ptr_hbe_txposer -> max_stretch = MAX_STRETCH ; //<S2SV> } else { //<S2SV> stop_patch = MAX_STRETCH ; //<S2SV> } //<S2SV> for ( patch = 1 ; patch <= stop_patch ; patch ++ ) { //<S2SV> while ( sfb <= p_num_sfb [ LOW ] && //<S2SV> p_freq_band_tab [ LOW ] [ sfb ] <= patch * ptr_hbe_txposer -> start_band ) //<S2SV> sfb ++ ; //<S2SV> if ( sfb <= p_num_sfb [ LOW ] ) { //<S2SV> if ( ( patch * ptr_hbe_txposer -> start_band - //<S2SV> p_freq_band_tab [ LOW ] [ sfb - 1 ] ) <= 3 ) { //<S2SV> ptr_hbe_txposer -> x_over_qmf [ patch - 1 ] = //<S2SV> p_freq_band_tab [ LOW ] [ sfb - 1 ] ; //<S2SV> } else { //<S2SV> WORD32 sfb = 0 ; //<S2SV> while ( sfb <= p_num_sfb [ HIGH ] && //<S2SV> p_freq_band_tab [ HIGH ] [ sfb ] <= //<S2SV> patch * ptr_hbe_txposer -> start_band ) //<S2SV> sfb ++ ; //<S2SV> ptr_hbe_txposer -> x_over_qmf [ patch - 1 ] = //<S2SV> p_freq_band_tab [ HIGH ] [ sfb - 1 ] ; //<S2SV> } //<S2SV> } else { //<S2SV> ptr_hbe_txposer -> x_over_qmf [ patch - 1 ] = ptr_hbe_txposer -> end_band ; //<S2SV> ptr_hbe_txposer -> max_stretch = min ( patch , MAX_STRETCH ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ptr_hbe_txposer -> k_start < 0 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 