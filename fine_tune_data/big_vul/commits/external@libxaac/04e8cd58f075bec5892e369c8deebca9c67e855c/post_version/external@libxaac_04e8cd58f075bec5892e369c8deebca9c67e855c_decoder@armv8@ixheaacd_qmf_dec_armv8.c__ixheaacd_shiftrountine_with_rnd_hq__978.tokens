VOID ixheaacd_shiftrountine_with_rnd_hq ( WORD32 * qmf_real , WORD32 * qmf_imag , //<S2SV> WORD32 * filter_states , WORD32 len , //<S2SV> WORD32 shift ) { //<S2SV> WORD32 * filter_states_rev = filter_states + len ; //<S2SV> WORD32 treal , timag ; //<S2SV> WORD32 j ; //<S2SV> for ( j = ( len - 1 ) ; j >= 0 ; j -= 2 ) { //<S2SV> WORD32 r1 , r2 , i1 , i2 ; //<S2SV> i2 = qmf_imag [ j ] ; //<S2SV> r2 = qmf_real [ j ] ; //<S2SV> r1 = * qmf_real ++ ; //<S2SV> i1 = * qmf_imag ++ ; //<S2SV> timag = ixheaacd_add32_sat ( i1 , r1 ) ; //<S2SV> timag = ( ixheaacd_shl32_sat ( timag , shift ) ) ; //<S2SV> filter_states_rev [ j ] = timag ; //<S2SV> treal = ixheaacd_sub32_sat ( i2 , r2 ) ; //<S2SV> treal = ( ixheaacd_shl32_sat ( treal , shift ) ) ; //<S2SV> filter_states [ j ] = treal ; //<S2SV> treal = ixheaacd_sub32_sat ( i1 , r1 ) ; //<S2SV> treal = ( ixheaacd_shl32_sat ( treal , shift ) ) ; //<S2SV> * filter_states ++ = treal ; //<S2SV> timag = ixheaacd_add32_sat ( i2 , r2 ) ; //<S2SV> timag = ( ixheaacd_shl32_sat ( timag , shift ) ) ; //<S2SV> * filter_states_rev ++ = timag ; //<S2SV> } //<S2SV> } //<S2SV> 