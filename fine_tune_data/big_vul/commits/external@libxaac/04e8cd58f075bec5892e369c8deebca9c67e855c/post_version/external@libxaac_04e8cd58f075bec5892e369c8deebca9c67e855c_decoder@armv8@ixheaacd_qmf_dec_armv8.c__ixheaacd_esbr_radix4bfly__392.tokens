VOID ixheaacd_esbr_radix4bfly ( const WORD32 * w , WORD32 * x , WORD32 index1 , //<S2SV> WORD32 index ) { //<S2SV> int i ; //<S2SV> WORD32 l1 , l2 , h2 , fft_jmp ; //<S2SV> WORD64 xt0_0 , yt0_0 , xt1_0 , yt1_0 , xt2_0 , yt2_0 ; //<S2SV> WORD64 xh0_0 , xh1_0 , xh20_0 , xh21_0 , xl0_0 , xl1_0 , xl20_0 , xl21_0 ; //<S2SV> WORD32 x_0 , x_1 , x_l1_0 , x_l1_1 , x_l2_0 , x_l2_1 ; //<S2SV> WORD32 x_h2_0 , x_h2_1 ; //<S2SV> WORD32 si10 , si20 , si30 , co10 , co20 , co30 ; //<S2SV> WORD64 mul_1 , mul_2 , mul_3 , mul_4 , mul_5 , mul_6 ; //<S2SV> WORD64 mul_7 , mul_8 , mul_9 , mul_10 , mul_11 , mul_12 ; //<S2SV> WORD32 * x_l1 ; //<S2SV> WORD32 * x_l2 ; //<S2SV> WORD32 * x_h2 ; //<S2SV> const WORD32 * w_ptr = w ; //<S2SV> WORD32 i1 ; //<S2SV> h2 = index << 1 ; //<S2SV> l1 = index << 2 ; //<S2SV> l2 = ( index << 2 ) + ( index << 1 ) ; //<S2SV> x_l1 = & ( x [ l1 ] ) ; //<S2SV> x_l2 = & ( x [ l2 ] ) ; //<S2SV> x_h2 = & ( x [ h2 ] ) ; //<S2SV> fft_jmp = 6 * ( index ) ; //<S2SV> for ( i1 = 0 ; i1 < index1 ; i1 ++ ) { //<S2SV> for ( i = 0 ; i < index ; i ++ ) { //<S2SV> si10 = ( * w_ptr ++ ) ; //<S2SV> co10 = ( * w_ptr ++ ) ; //<S2SV> si20 = ( * w_ptr ++ ) ; //<S2SV> co20 = ( * w_ptr ++ ) ; //<S2SV> si30 = ( * w_ptr ++ ) ; //<S2SV> co30 = ( * w_ptr ++ ) ; //<S2SV> x_0 = x [ 0 ] ; //<S2SV> x_h2_0 = x [ h2 ] ; //<S2SV> x_l1_0 = x [ l1 ] ; //<S2SV> x_l2_0 = x [ l2 ] ; //<S2SV> xh0_0 = ( WORD64 ) x_0 + ( WORD64 ) x_l1_0 ; //<S2SV> xl0_0 = ( WORD64 ) x_0 - ( WORD64 ) x_l1_0 ; //<S2SV> xh20_0 = ( WORD64 ) x_h2_0 + ( WORD64 ) x_l2_0 ; //<S2SV> xl20_0 = ( WORD64 ) x_h2_0 - ( WORD64 ) x_l2_0 ; //<S2SV> x [ 0 ] = ( WORD32 ) ixheaacd_add64_sat ( xh0_0 , xh20_0 ) ; //<S2SV> xt0_0 = ( WORD64 ) xh0_0 - ( WORD64 ) xh20_0 ; //<S2SV> x_1 = x [ 1 ] ; //<S2SV> x_h2_1 = x [ h2 + 1 ] ; //<S2SV> x_l1_1 = x [ l1 + 1 ] ; //<S2SV> x_l2_1 = x [ l2 + 1 ] ; //<S2SV> xh1_0 = ( WORD64 ) x_1 + ( WORD64 ) x_l1_1 ; //<S2SV> xl1_0 = ( WORD64 ) x_1 - ( WORD64 ) x_l1_1 ; //<S2SV> xh21_0 = ( WORD64 ) x_h2_1 + ( WORD64 ) x_l2_1 ; //<S2SV> xl21_0 = ( WORD64 ) x_h2_1 - ( WORD64 ) x_l2_1 ; //<S2SV> x [ 1 ] = ( WORD32 ) ixheaacd_add64_sat ( xh1_0 , xh21_0 ) ; //<S2SV> yt0_0 = ( WORD64 ) xh1_0 - ( WORD64 ) xh21_0 ; //<S2SV> xt1_0 = ( WORD64 ) xl0_0 + ( WORD64 ) xl21_0 ; //<S2SV> xt2_0 = ( WORD64 ) xl0_0 - ( WORD64 ) xl21_0 ; //<S2SV> yt2_0 = ( WORD64 ) xl1_0 + ( WORD64 ) xl20_0 ; //<S2SV> yt1_0 = ( WORD64 ) xl1_0 - ( WORD64 ) xl20_0 ; //<S2SV> mul_11 = ixheaacd_mult64 ( xt2_0 , co30 ) ; //<S2SV> mul_3 = ixheaacd_mult64 ( yt2_0 , si30 ) ; //<S2SV> x [ l2 ] = ( WORD32 ) ( ( mul_3 + mul_11 ) >> 32 ) << RADIXSHIFT ; //<S2SV> mul_5 = ixheaacd_mult64 ( xt2_0 , si30 ) ; //<S2SV> mul_9 = ixheaacd_mult64 ( yt2_0 , co30 ) ; //<S2SV> x [ l2 + 1 ] = ( WORD32 ) ( ( mul_9 - mul_5 ) >> 32 ) << RADIXSHIFT ; //<S2SV> mul_12 = ixheaacd_mult64 ( xt0_0 , co20 ) ; //<S2SV> mul_2 = ixheaacd_mult64 ( yt0_0 , si20 ) ; //<S2SV> x [ l1 ] = ( WORD32 ) ( ( mul_2 + mul_12 ) >> 32 ) << RADIXSHIFT ; //<S2SV> mul_6 = ixheaacd_mult64 ( xt0_0 , si20 ) ; //<S2SV> mul_8 = ixheaacd_mult64 ( yt0_0 , co20 ) ; //<S2SV> x [ l1 + 1 ] = ( WORD32 ) ( ( mul_8 - mul_6 ) >> 32 ) << RADIXSHIFT ; //<S2SV> mul_4 = ixheaacd_mult64 ( xt1_0 , co10 ) ; //<S2SV> mul_1 = ixheaacd_mult64 ( yt1_0 , si10 ) ; //<S2SV> x [ h2 ] = ( WORD32 ) ( ( mul_1 + mul_4 ) >> 32 ) << RADIXSHIFT ; //<S2SV> mul_10 = ixheaacd_mult64 ( xt1_0 , si10 ) ; //<S2SV> mul_7 = ixheaacd_mult64 ( yt1_0 , co10 ) ; //<S2SV> x [ h2 + 1 ] = ( WORD32 ) ( ( mul_7 - mul_10 ) >> 32 ) << RADIXSHIFT ; //<S2SV> x += 2 ; //<S2SV> } //<S2SV> x += fft_jmp ; //<S2SV> w_ptr = w_ptr - fft_jmp ; //<S2SV> } //<S2SV> } //<S2SV> 