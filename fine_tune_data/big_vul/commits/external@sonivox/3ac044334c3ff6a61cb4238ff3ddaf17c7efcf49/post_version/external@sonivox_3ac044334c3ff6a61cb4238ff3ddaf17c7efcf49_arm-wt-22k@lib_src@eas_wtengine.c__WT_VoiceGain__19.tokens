void WT_VoiceGain ( S_WT_VOICE * pWTVoice , S_WT_INT_FRAME * pWTIntFrame ) //<S2SV> { //<S2SV> EAS_I32 * pMixBuffer ; //<S2SV> EAS_PCM * pInputBuffer ; //<S2SV> EAS_I32 gain ; //<S2SV> EAS_I32 gainIncrement ; //<S2SV> EAS_I32 tmp0 ; //<S2SV> EAS_I32 tmp1 ; //<S2SV> EAS_I32 tmp2 ; //<S2SV> EAS_I32 numSamples ; //<S2SV> # if ( NUM_OUTPUT_CHANNELS == 2 ) //<S2SV> EAS_I32 gainLeft , gainRight ; //<S2SV> # endif //<S2SV> numSamples = pWTIntFrame -> numSamples ; //<S2SV> if ( numSamples <= 0 ) { //<S2SV> ALOGE ( "b/26366256" ) ; //<S2SV> return ; //<S2SV> } //<S2SV> pMixBuffer = pWTIntFrame -> pMixBuffer ; //<S2SV> pInputBuffer = pWTIntFrame -> pAudioBuffer ; //<S2SV> gainIncrement = ( pWTIntFrame -> frame . gainTarget - pWTIntFrame -> prevGain ) << ( 16 - SYNTH_UPDATE_PERIOD_IN_BITS ) ; //<S2SV> if ( gainIncrement < 0 ) //<S2SV> gainIncrement ++ ; //<S2SV> gain = pWTIntFrame -> prevGain << 16 ; //<S2SV> # if ( NUM_OUTPUT_CHANNELS == 2 ) //<S2SV> gainLeft = pWTVoice -> gainLeft ; //<S2SV> gainRight = pWTVoice -> gainRight ; //<S2SV> # endif //<S2SV> while ( numSamples -- ) { //<S2SV> tmp0 = * pInputBuffer ++ ; //<S2SV> gain += gainIncrement ; //<S2SV> tmp2 = gain >> 16 ; //<S2SV> tmp2 *= tmp0 ; //<S2SV> # if ( NUM_OUTPUT_CHANNELS == 2 ) //<S2SV> tmp2 = tmp2 >> 14 ; //<S2SV> tmp1 = * pMixBuffer ; //<S2SV> tmp0 = tmp2 * gainLeft ; //<S2SV> tmp0 = tmp0 >> NUM_MIXER_GUARD_BITS ; //<S2SV> tmp1 += tmp0 ; //<S2SV> * pMixBuffer ++ = tmp1 ; //<S2SV> tmp1 = * pMixBuffer ; //<S2SV> tmp0 = tmp2 * gainRight ; //<S2SV> tmp0 = tmp0 >> NUM_MIXER_GUARD_BITS ; //<S2SV> tmp1 += tmp0 ; //<S2SV> * pMixBuffer ++ = tmp1 ; //<S2SV> # else //<S2SV> tmp1 = * pMixBuffer ; //<S2SV> tmp2 = tmp2 >> ( NUM_MIXER_GUARD_BITS - 1 ) ; //<S2SV> tmp1 += tmp2 ; //<S2SV> * pMixBuffer ++ = tmp1 ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> 