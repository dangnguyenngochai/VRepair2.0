void WT_NoiseGenerator ( S_WT_VOICE * pWTVoice , S_WT_INT_FRAME * pWTIntFrame ) //<S2SV> { //<S2SV> EAS_PCM * pOutputBuffer ; //<S2SV> EAS_I32 phaseInc ; //<S2SV> EAS_I32 tmp0 ; //<S2SV> EAS_I32 tmp1 ; //<S2SV> EAS_I32 nInterpolatedSample ; //<S2SV> EAS_I32 numSamples ; //<S2SV> numSamples = pWTIntFrame -> numSamples ; //<S2SV> pOutputBuffer = pWTIntFrame -> pAudioBuffer ; //<S2SV> phaseInc = pWTIntFrame -> frame . phaseIncrement ; //<S2SV> tmp0 = ( EAS_I32 ) ( pWTVoice -> phaseAccum ) >> 18 ; //<S2SV> tmp1 = ( EAS_I32 ) ( pWTVoice -> loopEnd ) >> 18 ; //<S2SV> while ( numSamples -- ) { //<S2SV> nInterpolatedSample = MULT_AUDIO_COEF ( tmp0 , ( PHASE_ONE - pWTVoice -> phaseFrac ) ) ; //<S2SV> nInterpolatedSample += MULT_AUDIO_COEF ( tmp1 , pWTVoice -> phaseFrac ) ; //<S2SV> * pOutputBuffer ++ = ( EAS_PCM ) nInterpolatedSample ; //<S2SV> pWTVoice -> phaseFrac += ( EAS_U32 ) phaseInc ; //<S2SV> if ( GET_PHASE_INT_PART ( pWTVoice -> phaseFrac ) ) { //<S2SV> tmp0 = tmp1 ; //<S2SV> pWTVoice -> phaseAccum = pWTVoice -> loopEnd ; //<S2SV> pWTVoice -> loopEnd = ( 5 * pWTVoice -> loopEnd + 1 ) ; //<S2SV> tmp1 = ( EAS_I32 ) ( pWTVoice -> loopEnd ) >> 18 ; //<S2SV> pWTVoice -> phaseFrac = GET_PHASE_FRAC_PART ( pWTVoice -> phaseFrac ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 