void HTML_put_string ( HTStructured * me , const char * s ) //<S2SV> { //<S2SV> # ifdef USE_PRETTYSRC //<S2SV> char * translated_string = NULL ; //<S2SV> # endif //<S2SV> if ( s == NULL || ( LYMapsOnly && me -> sp [ 0 ] . tag_number != HTML_OBJECT ) ) //<S2SV> return ; //<S2SV> # ifdef USE_PRETTYSRC //<S2SV> if ( psrc_convert_string ) { //<S2SV> StrAllocCopy ( translated_string , s ) ; //<S2SV> TRANSLATE_AND_UNESCAPE_ENTITIES ( & translated_string , TRUE , FALSE ) ; //<S2SV> s = ( const char * ) translated_string ; //<S2SV> } //<S2SV> # endif //<S2SV> switch ( me -> sp [ 0 ] . tag_number ) { //<S2SV> case HTML_COMMENT : //<S2SV> break ; //<S2SV> case HTML_TITLE : //<S2SV> HTChunkPuts ( & me -> title , s ) ; //<S2SV> break ; //<S2SV> case HTML_STYLE : //<S2SV> HTChunkPuts ( & me -> style_block , s ) ; //<S2SV> break ; //<S2SV> case HTML_SCRIPT : //<S2SV> HTChunkPuts ( & me -> script , s ) ; //<S2SV> break ; //<S2SV> case HTML_PRE : //<S2SV> case HTML_LISTING : //<S2SV> case HTML_XMP : //<S2SV> case HTML_PLAINTEXT : //<S2SV> HText_appendText ( me -> text , s ) ; //<S2SV> break ; //<S2SV> case HTML_OBJECT : //<S2SV> HTChunkPuts ( & me -> object , s ) ; //<S2SV> break ; //<S2SV> case HTML_TEXTAREA : //<S2SV> HTChunkPuts ( & me -> textarea , s ) ; //<S2SV> break ; //<S2SV> case HTML_SELECT : //<S2SV> case HTML_OPTION : //<S2SV> HTChunkPuts ( & me -> option , s ) ; //<S2SV> break ; //<S2SV> case HTML_MATH : //<S2SV> HTChunkPuts ( & me -> math , s ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ! me -> sp -> style -> freeFormat ) { //<S2SV> # ifdef USE_PRETTYSRC //<S2SV> if ( psrc_view ) { //<S2SV> for ( ; * s ; ++ s ) //<S2SV> HTML_put_character ( me , * s ) ; //<S2SV> } else //<S2SV> # endif //<S2SV> HText_appendText ( me -> text , s ) ; //<S2SV> break ; //<S2SV> } else { //<S2SV> const char * p = s ; //<S2SV> char c ; //<S2SV> if ( me -> style_change ) { //<S2SV> for ( ; * p && ( ( * p == '\\n' ) || ( * p == '\\r' ) || //<S2SV> ( * p == '<S2SV_blank>' ) || ( * p == '\\t' ) ) ; p ++ ) ; //<S2SV> if ( ! * p ) //<S2SV> break ; //<S2SV> UPDATE_STYLE ; //<S2SV> } //<S2SV> for ( ; * p ; p ++ ) { //<S2SV> if ( * p == 13 && p [ 1 ] != 10 ) { //<S2SV> c = '\\n' ; //<S2SV> } else { //<S2SV> c = * p ; //<S2SV> } //<S2SV> if ( me -> style_change ) { //<S2SV> if ( ( c == '\\n' ) || ( c == '<S2SV_blank>' ) || ( c == '\\t' ) ) //<S2SV> continue ; //<S2SV> UPDATE_STYLE ; //<S2SV> } //<S2SV> if ( c == '\\n' ) { //<S2SV> if ( ! FIX_JAPANESE_SPACES ) { //<S2SV> if ( me -> in_word ) { //<S2SV> if ( HText_getLastChar ( me -> text ) != '<S2SV_blank>' ) //<S2SV> HText_appendCharacter ( me -> text , '<S2SV_blank>' ) ; //<S2SV> me -> in_word = NO ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( c == '<S2SV_blank>' || c == '\\t' ) { //<S2SV> if ( HText_getLastChar ( me -> text ) != '<S2SV_blank>' ) //<S2SV> HText_appendCharacter ( me -> text , '<S2SV_blank>' ) ; //<S2SV> } else if ( c == '\\r' ) { //<S2SV> } else { //<S2SV> HText_appendCharacter ( me -> text , c ) ; //<S2SV> me -> in_word = YES ; //<S2SV> } //<S2SV> if ( c == '\\n' || c == '\\t' ) { //<S2SV> HText_setLastChar ( me -> text , '<S2SV_blank>' ) ; //<S2SV> } else if ( c == '\\r' && //<S2SV> HText_getLastChar ( me -> text ) == '<S2SV_blank>' ) { //<S2SV> HText_setLastChar ( me -> text , '<S2SV_blank>' ) ; //<S2SV> } else { //<S2SV> HText_setLastChar ( me -> text , c ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # ifdef USE_PRETTYSRC //<S2SV> if ( psrc_convert_string ) { //<S2SV> psrc_convert_string = FALSE ; //<S2SV> FREE ( translated_string ) ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> 