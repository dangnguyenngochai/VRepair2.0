const char * util_acl_to_str ( const sc_acl_entry_t * e ) //<S2SV> { //<S2SV> static char line [ 80 ] , buf [ 20 ] ; //<S2SV> unsigned int acl ; //<S2SV> if ( e == NULL ) //<S2SV> return "N/A" ; //<S2SV> line [ 0 ] = 0 ; //<S2SV> while ( e != NULL ) { //<S2SV> acl = e -> method ; //<S2SV> switch ( acl ) { //<S2SV> case SC_AC_UNKNOWN : //<S2SV> return "N/A" ; //<S2SV> case SC_AC_NEVER : //<S2SV> return "NEVR" ; //<S2SV> case SC_AC_NONE : //<S2SV> return "NONE" ; //<S2SV> case SC_AC_CHV : //<S2SV> strcpy ( buf , "CHV" ) ; //<S2SV> if ( e -> key_ref != SC_AC_KEY_REF_NONE ) //<S2SV> sprintf ( buf + 3 , "%d" , e -> key_ref ) ; //<S2SV> break ; //<S2SV> case SC_AC_TERM : //<S2SV> strcpy ( buf , "TERM" ) ; //<S2SV> break ; //<S2SV> case SC_AC_PRO : //<S2SV> strcpy ( buf , "PROT" ) ; //<S2SV> break ; //<S2SV> case SC_AC_AUT : //<S2SV> strcpy ( buf , "AUTH" ) ; //<S2SV> if ( e -> key_ref != SC_AC_KEY_REF_NONE ) //<S2SV> sprintf ( buf + 4 , "%d" , e -> key_ref ) ; //<S2SV> break ; //<S2SV> case SC_AC_SEN : //<S2SV> strcpy ( buf , "Sec.Env.<S2SV_blank>" ) ; //<S2SV> if ( e -> key_ref != SC_AC_KEY_REF_NONE ) //<S2SV> sprintf ( buf + 3 , "#%d" , e -> key_ref ) ; //<S2SV> break ; //<S2SV> case SC_AC_SCB : //<S2SV> strcpy ( buf , "Sec.ControlByte<S2SV_blank>" ) ; //<S2SV> if ( e -> key_ref != SC_AC_KEY_REF_NONE ) //<S2SV> sprintf ( buf + 3 , "Ox%X" , e -> key_ref ) ; //<S2SV> break ; //<S2SV> case SC_AC_IDA : //<S2SV> strcpy ( buf , "PKCS#15<S2SV_blank>AuthID<S2SV_blank>" ) ; //<S2SV> if ( e -> key_ref != SC_AC_KEY_REF_NONE ) //<S2SV> sprintf ( buf + 3 , "#%d" , e -> key_ref ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> strcpy ( buf , "????" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> strcat ( line , buf ) ; //<S2SV> strcat ( line , "<S2SV_blank>" ) ; //<S2SV> e = e -> next ; //<S2SV> } //<S2SV> line [ strlen ( line ) - 1 ] = 0 ; //<S2SV> return line ; //<S2SV> } //<S2SV> 