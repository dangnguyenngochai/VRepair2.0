static int sc_pkcs15emu_sc_hsm_init ( sc_pkcs15_card_t * p15card ) //<S2SV> { //<S2SV> sc_card_t * card = p15card -> card ; //<S2SV> sc_hsm_private_data_t * priv = ( sc_hsm_private_data_t * ) card -> drv_data ; //<S2SV> sc_file_t * file = NULL ; //<S2SV> sc_path_t path ; //<S2SV> u8 filelist [ MAX_EXT_APDU_LENGTH ] ; //<S2SV> int filelistlength ; //<S2SV> int r , i ; //<S2SV> sc_cvc_t devcert ; //<S2SV> struct sc_app_info * appinfo ; //<S2SV> struct sc_pkcs15_auth_info pin_info ; //<S2SV> struct sc_pkcs15_object pin_obj ; //<S2SV> struct sc_pin_cmd_data pindata ; //<S2SV> u8 efbin [ 1024 ] ; //<S2SV> u8 * ptr ; //<S2SV> size_t len ; //<S2SV> LOG_FUNC_CALLED ( card -> ctx ) ; //<S2SV> appinfo = calloc ( 1 , sizeof ( struct sc_app_info ) ) ; //<S2SV> if ( appinfo == NULL ) { //<S2SV> LOG_FUNC_RETURN ( card -> ctx , SC_ERROR_OUT_OF_MEMORY ) ; //<S2SV> } //<S2SV> appinfo -> aid = sc_hsm_aid ; //<S2SV> appinfo -> ddo . aid = sc_hsm_aid ; //<S2SV> p15card -> app = appinfo ; //<S2SV> sc_path_set ( & path , SC_PATH_TYPE_DF_NAME , sc_hsm_aid . value , sc_hsm_aid . len , 0 , 0 ) ; //<S2SV> r = sc_select_file ( card , & path , & file ) ; //<S2SV> LOG_TEST_RET ( card -> ctx , r , "Could<S2SV_blank>not<S2SV_blank>select<S2SV_blank>SmartCard-HSM<S2SV_blank>application" ) ; //<S2SV> p15card -> card -> version . hw_major = 24 ; //<S2SV> p15card -> card -> version . hw_minor = 13 ; //<S2SV> if ( file && file -> prop_attr && file -> prop_attr_len >= 2 ) { //<S2SV> p15card -> card -> version . fw_major = file -> prop_attr [ file -> prop_attr_len - 2 ] ; //<S2SV> p15card -> card -> version . fw_minor = file -> prop_attr [ file -> prop_attr_len - 1 ] ; //<S2SV> } //<S2SV> sc_file_free ( file ) ; //<S2SV> if ( priv -> EF_C_DevAut && priv -> EF_C_DevAut_len ) { //<S2SV> ptr = priv -> EF_C_DevAut ; //<S2SV> len = priv -> EF_C_DevAut_len ; //<S2SV> } else { //<S2SV> len = sizeof efbin ; //<S2SV> r = read_file ( p15card , ( u8 * ) "\\x2F\\x02" , efbin , & len , 1 ) ; //<S2SV> LOG_TEST_RET ( card -> ctx , r , "Skipping<S2SV_blank>optional<S2SV_blank>EF.C_DevAut" ) ; //<S2SV> if ( len > 0 ) { //<S2SV> ptr = realloc ( priv -> EF_C_DevAut , len ) ; //<S2SV> if ( ptr ) { //<S2SV> memcpy ( ptr , efbin , len ) ; //<S2SV> priv -> EF_C_DevAut = ptr ; //<S2SV> priv -> EF_C_DevAut_len = len ; //<S2SV> } //<S2SV> } //<S2SV> ptr = efbin ; //<S2SV> } //<S2SV> memset ( & devcert , 0 , sizeof ( devcert ) ) ; //<S2SV> r = sc_pkcs15emu_sc_hsm_decode_cvc ( p15card , ( const u8 * * ) & ptr , & len , & devcert ) ; //<S2SV> LOG_TEST_RET ( card -> ctx , r , "Could<S2SV_blank>not<S2SV_blank>decode<S2SV_blank>EF.C_DevAut" ) ; //<S2SV> sc_pkcs15emu_sc_hsm_read_tokeninfo ( p15card ) ; //<S2SV> if ( p15card -> tokeninfo -> label == NULL ) { //<S2SV> if ( p15card -> card -> type == SC_CARD_TYPE_SC_HSM_GOID //<S2SV> || p15card -> card -> type == SC_CARD_TYPE_SC_HSM_SOC ) { //<S2SV> p15card -> tokeninfo -> label = strdup ( "GoID" ) ; //<S2SV> } else { //<S2SV> p15card -> tokeninfo -> label = strdup ( "SmartCard-HSM" ) ; //<S2SV> } //<S2SV> if ( p15card -> tokeninfo -> label == NULL ) //<S2SV> LOG_FUNC_RETURN ( card -> ctx , SC_ERROR_OUT_OF_MEMORY ) ; //<S2SV> } //<S2SV> if ( ( p15card -> tokeninfo -> manufacturer_id != NULL ) && ! strcmp ( "(unknown)" , p15card -> tokeninfo -> manufacturer_id ) ) { //<S2SV> free ( p15card -> tokeninfo -> manufacturer_id ) ; //<S2SV> p15card -> tokeninfo -> manufacturer_id = NULL ; //<S2SV> } //<S2SV> if ( p15card -> tokeninfo -> manufacturer_id == NULL ) { //<S2SV> if ( p15card -> card -> type == SC_CARD_TYPE_SC_HSM_GOID //<S2SV> || p15card -> card -> type == SC_CARD_TYPE_SC_HSM_SOC ) { //<S2SV> p15card -> tokeninfo -> manufacturer_id = strdup ( "Bundesdruckerei<S2SV_blank>GmbH" ) ; //<S2SV> } else { //<S2SV> p15card -> tokeninfo -> manufacturer_id = strdup ( "www.CardContact.de" ) ; //<S2SV> } //<S2SV> if ( p15card -> tokeninfo -> manufacturer_id == NULL ) //<S2SV> LOG_FUNC_RETURN ( card -> ctx , SC_ERROR_OUT_OF_MEMORY ) ; //<S2SV> } //<S2SV> appinfo -> label = strdup ( p15card -> tokeninfo -> label ) ; //<S2SV> if ( appinfo -> label == NULL ) //<S2SV> LOG_FUNC_RETURN ( card -> ctx , SC_ERROR_OUT_OF_MEMORY ) ; //<S2SV> len = strnlen ( devcert . chr , sizeof devcert . chr ) ; //<S2SV> assert ( len >= 8 ) ; //<S2SV> len -= 5 ; //<S2SV> p15card -> tokeninfo -> serial_number = calloc ( len + 1 , 1 ) ; //<S2SV> if ( p15card -> tokeninfo -> serial_number == NULL ) //<S2SV> LOG_FUNC_RETURN ( card -> ctx , SC_ERROR_OUT_OF_MEMORY ) ; //<S2SV> memcpy ( p15card -> tokeninfo -> serial_number , devcert . chr , len ) ; //<S2SV> * ( p15card -> tokeninfo -> serial_number + len ) = 0 ; //<S2SV> sc_hsm_set_serialnr ( card , p15card -> tokeninfo -> serial_number ) ; //<S2SV> sc_pkcs15emu_sc_hsm_free_cvc ( & devcert ) ; //<S2SV> memset ( & pin_info , 0 , sizeof ( pin_info ) ) ; //<S2SV> memset ( & pin_obj , 0 , sizeof ( pin_obj ) ) ; //<S2SV> pin_info . auth_id . len = 1 ; //<S2SV> pin_info . auth_id . value [ 0 ] = 1 ; //<S2SV> pin_info . path . aid = sc_hsm_aid ; //<S2SV> pin_info . auth_type = SC_PKCS15_PIN_AUTH_TYPE_PIN ; //<S2SV> pin_info . attrs . pin . reference = 0x81 ; //<S2SV> pin_info . attrs . pin . flags = SC_PKCS15_PIN_FLAG_LOCAL | SC_PKCS15_PIN_FLAG_INITIALIZED | SC_PKCS15_PIN_FLAG_EXCHANGE_REF_DATA ; //<S2SV> pin_info . attrs . pin . type = SC_PKCS15_PIN_TYPE_ASCII_NUMERIC ; //<S2SV> pin_info . attrs . pin . min_length = 6 ; //<S2SV> pin_info . attrs . pin . stored_length = 0 ; //<S2SV> pin_info . attrs . pin . max_length = 15 ; //<S2SV> pin_info . attrs . pin . pad_char = '\\0' ; //<S2SV> pin_info . tries_left = 3 ; //<S2SV> pin_info . max_tries = 3 ; //<S2SV> pin_obj . auth_id . len = 1 ; //<S2SV> pin_obj . auth_id . value [ 0 ] = 2 ; //<S2SV> strlcpy ( pin_obj . label , "UserPIN" , sizeof ( pin_obj . label ) ) ; //<S2SV> pin_obj . flags = SC_PKCS15_CO_FLAG_PRIVATE | SC_PKCS15_CO_FLAG_MODIFIABLE ; //<S2SV> r = sc_pkcs15emu_add_pin_obj ( p15card , & pin_obj , & pin_info ) ; //<S2SV> if ( r < 0 ) //<S2SV> LOG_FUNC_RETURN ( card -> ctx , r ) ; //<S2SV> memset ( & pin_info , 0 , sizeof ( pin_info ) ) ; //<S2SV> memset ( & pin_obj , 0 , sizeof ( pin_obj ) ) ; //<S2SV> pin_info . auth_id . len = 1 ; //<S2SV> pin_info . auth_id . value [ 0 ] = 2 ; //<S2SV> pin_info . path . aid = sc_hsm_aid ; //<S2SV> pin_info . auth_type = SC_PKCS15_PIN_AUTH_TYPE_PIN ; //<S2SV> pin_info . attrs . pin . reference = 0x88 ; //<S2SV> pin_info . attrs . pin . flags = SC_PKCS15_PIN_FLAG_LOCAL | SC_PKCS15_PIN_FLAG_INITIALIZED | SC_PKCS15_PIN_FLAG_UNBLOCK_DISABLED | SC_PKCS15_PIN_FLAG_SO_PIN ; //<S2SV> pin_info . attrs . pin . type = SC_PKCS15_PIN_TYPE_BCD ; //<S2SV> pin_info . attrs . pin . min_length = 16 ; //<S2SV> pin_info . attrs . pin . stored_length = 0 ; //<S2SV> pin_info . attrs . pin . max_length = 16 ; //<S2SV> pin_info . attrs . pin . pad_char = '\\0' ; //<S2SV> pin_info . tries_left = 15 ; //<S2SV> pin_info . max_tries = 15 ; //<S2SV> strlcpy ( pin_obj . label , "SOPIN" , sizeof ( pin_obj . label ) ) ; //<S2SV> pin_obj . flags = SC_PKCS15_CO_FLAG_PRIVATE ; //<S2SV> r = sc_pkcs15emu_add_pin_obj ( p15card , & pin_obj , & pin_info ) ; //<S2SV> if ( r < 0 ) //<S2SV> LOG_FUNC_RETURN ( card -> ctx , r ) ; //<S2SV> if ( card -> type == SC_CARD_TYPE_SC_HSM_SOC //<S2SV> || card -> type == SC_CARD_TYPE_SC_HSM_GOID ) { //<S2SV> r = SC_SUCCESS ; //<S2SV> } else { //<S2SV> memset ( & pindata , 0 , sizeof ( pindata ) ) ; //<S2SV> pindata . cmd = SC_PIN_CMD_GET_INFO ; //<S2SV> pindata . pin_type = SC_AC_CHV ; //<S2SV> pindata . pin_reference = 0x85 ; //<S2SV> r = sc_pin_cmd ( card , & pindata , NULL ) ; //<S2SV> } //<S2SV> if ( r == SC_ERROR_DATA_OBJECT_NOT_FOUND ) { //<S2SV> memset ( & pindata , 0 , sizeof ( pindata ) ) ; //<S2SV> pindata . cmd = SC_PIN_CMD_GET_INFO ; //<S2SV> pindata . pin_type = SC_AC_CHV ; //<S2SV> pindata . pin_reference = 0x86 ; //<S2SV> r = sc_pin_cmd ( card , & pindata , NULL ) ; //<S2SV> } //<S2SV> if ( ( r != SC_ERROR_DATA_OBJECT_NOT_FOUND ) && ( r != SC_ERROR_INCORRECT_PARAMETERS ) ) //<S2SV> card -> caps |= SC_CARD_CAP_PROTECTED_AUTHENTICATION_PATH ; //<S2SV> filelistlength = sc_list_files ( card , filelist , sizeof ( filelist ) ) ; //<S2SV> LOG_TEST_RET ( card -> ctx , filelistlength , "Could<S2SV_blank>not<S2SV_blank>enumerate<S2SV_blank>file<S2SV_blank>and<S2SV_blank>key<S2SV_blank>identifier" ) ; //<S2SV> for ( i = 0 ; i < filelistlength ; i += 2 ) { //<S2SV> switch ( filelist [ i ] ) { //<S2SV> case KEY_PREFIX : //<S2SV> r = sc_pkcs15emu_sc_hsm_add_prkd ( p15card , filelist [ i + 1 ] ) ; //<S2SV> break ; //<S2SV> case DCOD_PREFIX : //<S2SV> r = sc_pkcs15emu_sc_hsm_add_dcod ( p15card , filelist [ i + 1 ] ) ; //<S2SV> break ; //<S2SV> case CD_PREFIX : //<S2SV> r = sc_pkcs15emu_sc_hsm_add_cd ( p15card , filelist [ i + 1 ] ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( r != SC_SUCCESS ) { //<S2SV> sc_log ( card -> ctx , "Error<S2SV_blank>%d<S2SV_blank>adding<S2SV_blank>elements<S2SV_blank>to<S2SV_blank>framework" , r ) ; //<S2SV> } //<S2SV> } //<S2SV> LOG_FUNC_RETURN ( card -> ctx , SC_SUCCESS ) ; //<S2SV> } //<S2SV> 