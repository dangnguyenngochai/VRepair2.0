static int read_private_key ( RSA * rsa ) //<S2SV> { //<S2SV> int r ; //<S2SV> sc_path_t path ; //<S2SV> sc_file_t * file ; //<S2SV> const sc_acl_entry_t * e ; //<S2SV> u8 buf [ 2048 ] , * p = buf ; //<S2SV> size_t bufsize , keysize ; //<S2SV> r = select_app_df ( ) ; //<S2SV> if ( r ) //<S2SV> return 1 ; //<S2SV> sc_format_path ( "I0012" , & path ) ; //<S2SV> r = sc_select_file ( card , & path , & file ) ; //<S2SV> if ( r ) { //<S2SV> fprintf ( stderr , "Unable<S2SV_blank>to<S2SV_blank>select<S2SV_blank>private<S2SV_blank>key<S2SV_blank>file:<S2SV_blank>%s\\n" , sc_strerror ( r ) ) ; //<S2SV> return 2 ; //<S2SV> } //<S2SV> e = sc_file_get_acl_entry ( file , SC_AC_OP_READ ) ; //<S2SV> if ( e == NULL || e -> method == SC_AC_NEVER ) //<S2SV> return 10 ; //<S2SV> bufsize = MIN ( file -> size , sizeof buf ) ; //<S2SV> sc_file_free ( file ) ; //<S2SV> r = sc_read_binary ( card , 0 , buf , bufsize , 0 ) ; //<S2SV> if ( r < 0 ) { //<S2SV> fprintf ( stderr , "Unable<S2SV_blank>to<S2SV_blank>read<S2SV_blank>private<S2SV_blank>key<S2SV_blank>file:<S2SV_blank>%s\\n" , sc_strerror ( r ) ) ; //<S2SV> return 2 ; //<S2SV> } //<S2SV> bufsize = r ; //<S2SV> do { //<S2SV> if ( bufsize < 4 ) //<S2SV> return 3 ; //<S2SV> keysize = ( p [ 0 ] << 8 ) | p [ 1 ] ; //<S2SV> if ( keysize == 0 ) //<S2SV> break ; //<S2SV> if ( keysize < 3 ) //<S2SV> return 3 ; //<S2SV> if ( p [ 2 ] == opt_key_num ) //<S2SV> break ; //<S2SV> p += keysize ; //<S2SV> bufsize -= keysize ; //<S2SV> } while ( 1 ) ; //<S2SV> if ( keysize == 0 ) { //<S2SV> printf ( "Key<S2SV_blank>number<S2SV_blank>%d<S2SV_blank>not<S2SV_blank>found.\\n" , opt_key_num ) ; //<S2SV> return 2 ; //<S2SV> } //<S2SV> return parse_private_key ( p , keysize , rsa ) ; //<S2SV> } //<S2SV> 