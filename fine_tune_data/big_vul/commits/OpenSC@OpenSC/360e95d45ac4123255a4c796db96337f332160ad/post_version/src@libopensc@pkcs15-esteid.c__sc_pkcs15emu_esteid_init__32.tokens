static int //<S2SV> sc_pkcs15emu_esteid_init ( sc_pkcs15_card_t * p15card ) //<S2SV> { //<S2SV> sc_card_t * card = p15card -> card ; //<S2SV> unsigned char buff [ 128 ] ; //<S2SV> int r , i ; //<S2SV> size_t field_length = 0 , modulus_length = 0 ; //<S2SV> sc_path_t tmppath ; //<S2SV> set_string ( & p15card -> tokeninfo -> label , "ID-kaart" ) ; //<S2SV> set_string ( & p15card -> tokeninfo -> manufacturer_id , "AS<S2SV_blank>Sertifitseerimiskeskus" ) ; //<S2SV> sc_format_path ( "3f00eeee5044" , & tmppath ) ; //<S2SV> r = sc_select_file ( card , & tmppath , NULL ) ; //<S2SV> SC_TEST_RET ( card -> ctx , SC_LOG_DEBUG_NORMAL , r , "select<S2SV_blank>esteid<S2SV_blank>PD<S2SV_blank>failed" ) ; //<S2SV> r = sc_read_record ( card , SC_ESTEID_PD_DOCUMENT_NR , buff , sizeof ( buff ) , SC_RECORD_BY_REC_NR ) ; //<S2SV> SC_TEST_RET ( card -> ctx , SC_LOG_DEBUG_NORMAL , r , "read<S2SV_blank>document<S2SV_blank>number<S2SV_blank>failed" ) ; //<S2SV> buff [ MIN ( ( size_t ) r , ( sizeof buff ) - 1 ) ] = '\\0' ; //<S2SV> set_string ( & p15card -> tokeninfo -> serial_number , ( const char * ) buff ) ; //<S2SV> p15card -> tokeninfo -> flags = SC_PKCS15_TOKEN_PRN_GENERATION //<S2SV> | SC_PKCS15_TOKEN_EID_COMPLIANT //<S2SV> | SC_PKCS15_TOKEN_READONLY ; //<S2SV> for ( i = 0 ; i < 2 ; i ++ ) { //<S2SV> static const char * esteid_cert_names [ 2 ] = { //<S2SV> "Isikutuvastus" , //<S2SV> "Allkirjastamine" } ; //<S2SV> static char const * esteid_cert_paths [ 2 ] = { //<S2SV> "3f00eeeeaace" , //<S2SV> "3f00eeeeddce" } ; //<S2SV> static int esteid_cert_ids [ 2 ] = { 1 , 2 } ; //<S2SV> struct sc_pkcs15_cert_info cert_info ; //<S2SV> struct sc_pkcs15_object cert_obj ; //<S2SV> memset ( & cert_info , 0 , sizeof ( cert_info ) ) ; //<S2SV> memset ( & cert_obj , 0 , sizeof ( cert_obj ) ) ; //<S2SV> cert_info . id . value [ 0 ] = esteid_cert_ids [ i ] ; //<S2SV> cert_info . id . len = 1 ; //<S2SV> sc_format_path ( esteid_cert_paths [ i ] , & cert_info . path ) ; //<S2SV> strlcpy ( cert_obj . label , esteid_cert_names [ i ] , sizeof ( cert_obj . label ) ) ; //<S2SV> r = sc_pkcs15emu_add_x509_cert ( p15card , & cert_obj , & cert_info ) ; //<S2SV> if ( r < 0 ) //<S2SV> return SC_ERROR_INTERNAL ; //<S2SV> if ( i == 0 ) { //<S2SV> sc_pkcs15_cert_t * cert = NULL ; //<S2SV> r = sc_pkcs15_read_certificate ( p15card , & cert_info , & cert ) ; //<S2SV> if ( r < 0 ) //<S2SV> return SC_ERROR_INTERNAL ; //<S2SV> if ( cert -> key -> algorithm == SC_ALGORITHM_EC ) //<S2SV> field_length = cert -> key -> u . ec . params . field_length ; //<S2SV> else //<S2SV> modulus_length = cert -> key -> u . rsa . modulus . len * 8 ; //<S2SV> if ( r == SC_SUCCESS ) { //<S2SV> static const struct sc_object_id cn_oid = { { 2 , 5 , 4 , 3 , - 1 } } ; //<S2SV> u8 * cn_name = NULL ; //<S2SV> size_t cn_len = 0 ; //<S2SV> sc_pkcs15_get_name_from_dn ( card -> ctx , cert -> subject , //<S2SV> cert -> subject_len , & cn_oid , & cn_name , & cn_len ) ; //<S2SV> if ( cn_len > 0 ) { //<S2SV> char * token_name = malloc ( cn_len + 1 ) ; //<S2SV> if ( token_name ) { //<S2SV> memcpy ( token_name , cn_name , cn_len ) ; //<S2SV> token_name [ cn_len ] = '\\0' ; //<S2SV> set_string ( & p15card -> tokeninfo -> label , ( const char * ) token_name ) ; //<S2SV> free ( token_name ) ; //<S2SV> } //<S2SV> } //<S2SV> free ( cn_name ) ; //<S2SV> sc_pkcs15_free_certificate ( cert ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> sc_format_path ( "3f000016" , & tmppath ) ; //<S2SV> r = sc_select_file ( card , & tmppath , NULL ) ; //<S2SV> if ( r < 0 ) //<S2SV> return SC_ERROR_INTERNAL ; //<S2SV> for ( i = 0 ; i < 3 ; i ++ ) { //<S2SV> unsigned char tries_left ; //<S2SV> static const char * esteid_pin_names [ 3 ] = { //<S2SV> "PIN1" , //<S2SV> "PIN2" , //<S2SV> "PUK" } ; //<S2SV> static const int esteid_pin_min [ 3 ] = { 4 , 5 , 8 } ; //<S2SV> static const int esteid_pin_ref [ 3 ] = { 1 , 2 , 0 } ; //<S2SV> static const int esteid_pin_authid [ 3 ] = { 1 , 2 , 3 } ; //<S2SV> static const int esteid_pin_flags [ 3 ] = { 0 , 0 , SC_PKCS15_PIN_FLAG_UNBLOCKING_PIN } ; //<S2SV> struct sc_pkcs15_auth_info pin_info ; //<S2SV> struct sc_pkcs15_object pin_obj ; //<S2SV> memset ( & pin_info , 0 , sizeof ( pin_info ) ) ; //<S2SV> memset ( & pin_obj , 0 , sizeof ( pin_obj ) ) ; //<S2SV> r = sc_read_record ( card , i + 1 , buff , sizeof ( buff ) , SC_RECORD_BY_REC_NR ) ; //<S2SV> if ( r < 0 ) //<S2SV> return SC_ERROR_INTERNAL ; //<S2SV> tries_left = buff [ 5 ] ; //<S2SV> pin_info . auth_id . len = 1 ; //<S2SV> pin_info . auth_id . value [ 0 ] = esteid_pin_authid [ i ] ; //<S2SV> pin_info . auth_type = SC_PKCS15_PIN_AUTH_TYPE_PIN ; //<S2SV> pin_info . attrs . pin . reference = esteid_pin_ref [ i ] ; //<S2SV> pin_info . attrs . pin . flags = esteid_pin_flags [ i ] ; //<S2SV> pin_info . attrs . pin . type = SC_PKCS15_PIN_TYPE_ASCII_NUMERIC ; //<S2SV> pin_info . attrs . pin . min_length = esteid_pin_min [ i ] ; //<S2SV> pin_info . attrs . pin . stored_length = 12 ; //<S2SV> pin_info . attrs . pin . max_length = 12 ; //<S2SV> pin_info . attrs . pin . pad_char = '\\0' ; //<S2SV> pin_info . tries_left = ( int ) tries_left ; //<S2SV> pin_info . max_tries = 3 ; //<S2SV> strlcpy ( pin_obj . label , esteid_pin_names [ i ] , sizeof ( pin_obj . label ) ) ; //<S2SV> pin_obj . flags = esteid_pin_flags [ i ] ; //<S2SV> if ( i < 2 ) { //<S2SV> pin_obj . auth_id . len = 1 ; //<S2SV> pin_obj . auth_id . value [ 0 ] = 3 ; //<S2SV> } //<S2SV> r = sc_pkcs15emu_add_pin_obj ( p15card , & pin_obj , & pin_info ) ; //<S2SV> if ( r < 0 ) //<S2SV> return SC_ERROR_INTERNAL ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 2 ; i ++ ) { //<S2SV> static int prkey_pin [ 2 ] = { 1 , 2 } ; //<S2SV> static const char * prkey_name [ 2 ] = { //<S2SV> "Isikutuvastus" , //<S2SV> "Allkirjastamine" } ; //<S2SV> struct sc_pkcs15_prkey_info prkey_info ; //<S2SV> struct sc_pkcs15_object prkey_obj ; //<S2SV> memset ( & prkey_info , 0 , sizeof ( prkey_info ) ) ; //<S2SV> memset ( & prkey_obj , 0 , sizeof ( prkey_obj ) ) ; //<S2SV> prkey_info . id . len = 1 ; //<S2SV> prkey_info . id . value [ 0 ] = prkey_pin [ i ] ; //<S2SV> prkey_info . native = 1 ; //<S2SV> prkey_info . key_reference = i + 1 ; //<S2SV> prkey_info . field_length = field_length ; //<S2SV> prkey_info . modulus_length = modulus_length ; //<S2SV> if ( i == 1 ) //<S2SV> prkey_info . usage = SC_PKCS15_PRKEY_USAGE_NONREPUDIATION ; //<S2SV> else if ( field_length > 0 ) //<S2SV> prkey_info . usage = SC_PKCS15_PRKEY_USAGE_SIGN | SC_PKCS15_PRKEY_USAGE_DERIVE ; //<S2SV> else //<S2SV> prkey_info . usage = SC_PKCS15_PRKEY_USAGE_SIGN | SC_PKCS15_PRKEY_USAGE_ENCRYPT | SC_PKCS15_PRKEY_USAGE_DECRYPT ; //<S2SV> strlcpy ( prkey_obj . label , prkey_name [ i ] , sizeof ( prkey_obj . label ) ) ; //<S2SV> prkey_obj . auth_id . len = 1 ; //<S2SV> prkey_obj . auth_id . value [ 0 ] = prkey_pin [ i ] ; //<S2SV> prkey_obj . user_consent = 0 ; //<S2SV> prkey_obj . flags = SC_PKCS15_CO_FLAG_PRIVATE ; //<S2SV> if ( field_length > 0 ) //<S2SV> r = sc_pkcs15emu_add_ec_prkey ( p15card , & prkey_obj , & prkey_info ) ; //<S2SV> else //<S2SV> r = sc_pkcs15emu_add_rsa_prkey ( p15card , & prkey_obj , & prkey_info ) ; //<S2SV> if ( r < 0 ) //<S2SV> return SC_ERROR_INTERNAL ; //<S2SV> } //<S2SV> return SC_SUCCESS ; //<S2SV> } //<S2SV> 