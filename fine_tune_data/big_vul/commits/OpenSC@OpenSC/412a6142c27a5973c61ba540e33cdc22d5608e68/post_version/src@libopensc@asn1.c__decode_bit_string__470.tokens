static int decode_bit_string ( const u8 * inbuf , size_t inlen , void * outbuf , //<S2SV> size_t outlen , int invert ) //<S2SV> { //<S2SV> const u8 * in = inbuf ; //<S2SV> u8 * out = ( u8 * ) outbuf ; //<S2SV> int i , count = 0 ; //<S2SV> int zero_bits ; //<S2SV> size_t octets_left ; //<S2SV> if ( outlen < octets_left ) //<S2SV> return SC_ERROR_BUFFER_TOO_SMALL ; //<S2SV> if ( inlen < 1 ) //<S2SV> return SC_ERROR_INVALID_ASN1_OBJECT ; //<S2SV> zero_bits = * in & 0x07 ; //<S2SV> octets_left = inlen - 1 ; //<S2SV> in ++ ; //<S2SV> memset ( outbuf , 0 , outlen ) ; //<S2SV> while ( octets_left ) { //<S2SV> int bits_to_go ; //<S2SV> * out = 0 ; //<S2SV> if ( octets_left == 1 ) //<S2SV> bits_to_go = 8 - zero_bits ; //<S2SV> else //<S2SV> bits_to_go = 8 ; //<S2SV> if ( invert ) //<S2SV> for ( i = 0 ; i < bits_to_go ; i ++ ) { //<S2SV> * out |= ( ( * in >> ( 7 - i ) ) & 1 ) << i ; //<S2SV> } //<S2SV> else { //<S2SV> * out = * in ; //<S2SV> } //<S2SV> out ++ ; //<S2SV> in ++ ; //<S2SV> octets_left -- ; //<S2SV> count ++ ; //<S2SV> } //<S2SV> return ( count * 8 ) - zero_bits ; //<S2SV> } //<S2SV> 