static inline LineContribType * _gdContributionsAlloc ( unsigned int line_length , unsigned int windows_size ) //<S2SV> { //<S2SV> unsigned int u = 0 ; //<S2SV> LineContribType * res ; //<S2SV> size_t weights_size ; //<S2SV> if ( overflow2 ( windows_size , sizeof ( double ) ) ) { //<S2SV> return NULL ; //<S2SV> } else { //<S2SV> weights_size = windows_size * sizeof ( double ) ; //<S2SV> } //<S2SV> res = ( LineContribType * ) gdMalloc ( sizeof ( LineContribType ) ) ; //<S2SV> if ( ! res ) { //<S2SV> return NULL ; //<S2SV> } //<S2SV> res -> WindowSize = windows_size ; //<S2SV> res -> LineLength = line_length ; //<S2SV> if ( overflow2 ( line_length , sizeof ( ContributionType ) ) ) { //<S2SV> gdFree ( res ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> res -> ContribRow = ( ContributionType * ) gdMalloc ( line_length * sizeof ( ContributionType ) ) ; //<S2SV> if ( res -> ContribRow == NULL ) { //<S2SV> gdFree ( res ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> for ( u = 0 ; u < line_length ; u ++ ) { //<S2SV> res -> ContribRow [ u ] . Weights = ( double * ) gdMalloc ( weights_size ) ; //<S2SV> if ( res -> ContribRow [ u ] . Weights == NULL ) { //<S2SV> unsigned int i ; //<S2SV> for ( i = 0 ; i < u ; i ++ ) { //<S2SV> gdFree ( res -> ContribRow [ i ] . Weights ) ; //<S2SV> } //<S2SV> gdFree ( res -> ContribRow ) ; //<S2SV> gdFree ( res ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 