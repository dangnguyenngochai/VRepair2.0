static char * create_output_name ( unsigned char * fname , unsigned char * dir , //<S2SV> int lower , int isunix , int utf8 ) //<S2SV> { //<S2SV> unsigned char * p , * name , c , * fe , sep , slash ; //<S2SV> unsigned int x ; //<S2SV> sep = ( isunix ) ? '/' : '\\\\' ; //<S2SV> slash = ( isunix ) ? '\\\\' : '/' ; //<S2SV> x = strlen ( ( char * ) fname ) ; //<S2SV> if ( utf8 ) x *= 3 ; //<S2SV> if ( dir ) x += strlen ( ( char * ) dir ) ; //<S2SV> if ( ! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { //<S2SV> fprintf ( stderr , "out<S2SV_blank>of<S2SV_blank>memory!\\n" ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> * name = '\\0' ; //<S2SV> if ( dir ) { //<S2SV> strcpy ( ( char * ) name , ( char * ) dir ) ; //<S2SV> strcat ( ( char * ) name , "/" ) ; //<S2SV> } //<S2SV> while ( * fname == sep ) fname ++ ; //<S2SV> p = & name [ strlen ( ( char * ) name ) ] ; //<S2SV> fe = & fname [ strlen ( ( char * ) fname ) ] ; //<S2SV> if ( utf8 ) { //<S2SV> do { //<S2SV> if ( fname >= fe ) { //<S2SV> free ( name ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> if ( ( c = * fname ++ ) < 0x80 ) x = c ; //<S2SV> else { //<S2SV> if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { //<S2SV> x = ( c & 0x1F ) << 6 ; //<S2SV> x |= * fname ++ & 0x3F ; //<S2SV> } //<S2SV> else if ( ( c >= 0xE0 ) && ( c < 0xF0 ) ) { //<S2SV> x = ( c & 0xF ) << 12 ; //<S2SV> x |= ( * fname ++ & 0x3F ) << 6 ; //<S2SV> x |= * fname ++ & 0x3F ; //<S2SV> } //<S2SV> else x = '?' ; //<S2SV> } //<S2SV> if ( x == sep ) x = '/' ; //<S2SV> else if ( x == slash ) x = '\\\\' ; //<S2SV> else if ( lower ) x = ( unsigned int ) tolower ( ( int ) x ) ; //<S2SV> if ( x < 0x80 ) { //<S2SV> * p ++ = ( unsigned char ) x ; //<S2SV> } //<S2SV> else if ( x < 0x800 ) { //<S2SV> * p ++ = 0xC0 | ( x >> 6 ) ; //<S2SV> * p ++ = 0x80 | ( x & 0x3F ) ; //<S2SV> } //<S2SV> else { //<S2SV> * p ++ = 0xE0 | ( x >> 12 ) ; //<S2SV> * p ++ = 0x80 | ( ( x >> 6 ) & 0x3F ) ; //<S2SV> * p ++ = 0x80 | ( x & 0x3F ) ; //<S2SV> } //<S2SV> } while ( x ) ; //<S2SV> } //<S2SV> else { //<S2SV> do { //<S2SV> c = * fname ++ ; //<S2SV> if ( c == sep ) c = '/' ; //<S2SV> else if ( c == slash ) c = '\\\\' ; //<S2SV> else if ( lower ) c = ( unsigned char ) tolower ( ( int ) c ) ; //<S2SV> } while ( ( * p ++ = c ) ) ; //<S2SV> } //<S2SV> return ( char * ) name ; //<S2SV> } //<S2SV> 