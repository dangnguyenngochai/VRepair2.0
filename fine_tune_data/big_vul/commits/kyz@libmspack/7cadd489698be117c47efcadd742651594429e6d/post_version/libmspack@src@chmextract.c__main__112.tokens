int main ( int argc , char * argv [ ] ) { //<S2SV> struct mschm_decompressor * chmd ; //<S2SV> struct mschmd_header * chm ; //<S2SV> struct mschmd_file * file , * * f ; //<S2SV> unsigned int numf , i ; //<S2SV> setbuf ( stdout , NULL ) ; //<S2SV> setbuf ( stderr , NULL ) ; //<S2SV> user_umask = umask ( 0 ) ; umask ( user_umask ) ; //<S2SV> MSPACK_SYS_SELFTEST ( i ) ; //<S2SV> if ( i ) return 0 ; //<S2SV> if ( ( chmd = mspack_create_chm_decompressor ( NULL ) ) ) { //<S2SV> for ( argv ++ ; * argv ; argv ++ ) { //<S2SV> printf ( "%s\\n" , * argv ) ; //<S2SV> if ( ( chm = chmd -> open ( chmd , * argv ) ) ) { //<S2SV> for ( numf = 0 , file = chm -> files ; file ; file = file -> next ) numf ++ ; //<S2SV> if ( ( f = ( struct mschmd_file * * ) calloc ( numf , sizeof ( struct mschmd_file * ) ) ) ) { //<S2SV> for ( i = 0 , file = chm -> files ; file ; file = file -> next ) f [ i ++ ] = file ; //<S2SV> qsort ( f , numf , sizeof ( struct mschmd_file * ) , & sortfunc ) ; //<S2SV> for ( i = 0 ; i < numf ; i ++ ) { //<S2SV> char * outname = create_output_name ( f [ i ] -> filename ) ; //<S2SV> printf ( "Extracting<S2SV_blank>%s\\n" , outname ) ; //<S2SV> ensure_filepath ( outname ) ; //<S2SV> if ( chmd -> extract ( chmd , f [ i ] , outname ) ) { //<S2SV> printf ( "%s:<S2SV_blank>extract<S2SV_blank>error<S2SV_blank>on<S2SV_blank>\\"%s\\":<S2SV_blank>%s\\n" , //<S2SV> * argv , f [ i ] -> filename , ERROR ( chmd ) ) ; //<S2SV> } //<S2SV> free ( outname ) ; //<S2SV> } //<S2SV> free ( f ) ; //<S2SV> } //<S2SV> chmd -> close ( chmd , chm ) ; //<S2SV> } //<S2SV> else { //<S2SV> printf ( "%s:<S2SV_blank>can\'t<S2SV_blank>open<S2SV_blank>--<S2SV_blank>%s\\n" , * argv , ERROR ( chmd ) ) ; //<S2SV> } //<S2SV> } //<S2SV> mspack_destroy_chm_decompressor ( chmd ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 