int //<S2SV> _fep_open_control_socket ( Fep * fep ) //<S2SV> { //<S2SV> struct sockaddr_un sun ; //<S2SV> char * path ; //<S2SV> int fd ; //<S2SV> ssize_t sun_len ; //<S2SV> fd = socket ( AF_UNIX , SOCK_STREAM , 0 ) ; //<S2SV> if ( fd < 0 ) //<S2SV> { //<S2SV> perror ( "socket" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> path = create_socket_name ( "fep-XXXXXX/control" ) ; //<S2SV> if ( strlen ( path ) + 1 >= sizeof ( sun . sun_path ) ) //<S2SV> { //<S2SV> fep_log ( FEP_LOG_LEVEL_WARNING , //<S2SV> "unix<S2SV_blank>domain<S2SV_blank>socket<S2SV_blank>path<S2SV_blank>too<S2SV_blank>long:<S2SV_blank>%d<S2SV_blank>+<S2SV_blank>1<S2SV_blank>>=<S2SV_blank>%d" , //<S2SV> strlen ( path ) , //<S2SV> sizeof ( sun . sun_path ) ) ; //<S2SV> free ( path ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memset ( & sun , 0 , sizeof ( sun ) ) ; //<S2SV> sun . sun_family = AF_UNIX ; //<S2SV> # ifdef __linux__ //<S2SV> sun . sun_path [ 0 ] = '\\0' ; //<S2SV> memcpy ( sun . sun_path + 1 , path , strlen ( path ) ) ; //<S2SV> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( path ) + 1 ; //<S2SV> remove_control_socket ( path ) ; //<S2SV> # else //<S2SV> memcpy ( sun . sun_path , path , strlen ( path ) ) ; //<S2SV> sun_len = sizeof ( struct sockaddr_un ) ; //<S2SV> # endif //<S2SV> if ( bind ( fd , ( const struct sockaddr * ) & sun , sun_len ) < 0 ) //<S2SV> { //<S2SV> perror ( "bind" ) ; //<S2SV> free ( path ) ; //<S2SV> close ( fd ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( listen ( fd , 5 ) < 0 ) //<S2SV> { //<S2SV> perror ( "listen" ) ; //<S2SV> free ( path ) ; //<S2SV> close ( fd ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> fep -> server = fd ; //<S2SV> fep -> control_socket_path = path ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 