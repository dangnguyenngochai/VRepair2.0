FepClient * //<S2SV> fep_client_open ( const char * address ) //<S2SV> { //<S2SV> FepClient * client ; //<S2SV> struct sockaddr_un sun ; //<S2SV> ssize_t sun_len ; //<S2SV> int retval ; //<S2SV> if ( ! address ) //<S2SV> address = getenv ( "LIBFEP_CONTROL_SOCK" ) ; //<S2SV> if ( ! address ) //<S2SV> return NULL ; //<S2SV> if ( strlen ( address ) + 1 >= sizeof ( sun . sun_path ) ) //<S2SV> { //<S2SV> fep_log ( FEP_LOG_LEVEL_WARNING , //<S2SV> "unix<S2SV_blank>domain<S2SV_blank>socket<S2SV_blank>path<S2SV_blank>too<S2SV_blank>long:<S2SV_blank>%d<S2SV_blank>+<S2SV_blank>1<S2SV_blank>>=<S2SV_blank>%d" , //<S2SV> strlen ( address ) , //<S2SV> sizeof ( sun . sun_path ) ) ; //<S2SV> free ( address ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> client = xzalloc ( sizeof ( FepClient ) ) ; //<S2SV> client -> filter_running = false ; //<S2SV> client -> messages = NULL ; //<S2SV> memset ( & sun , 0 , sizeof ( struct sockaddr_un ) ) ; //<S2SV> sun . sun_family = AF_UNIX ; //<S2SV> # ifdef __linux__ //<S2SV> sun . sun_path [ 0 ] = '\\0' ; //<S2SV> memcpy ( sun . sun_path + 1 , address , strlen ( address ) ) ; //<S2SV> sun_len = offsetof ( struct sockaddr_un , sun_path ) + strlen ( address ) + 1 ; //<S2SV> # else //<S2SV> memcpy ( sun . sun_path , address , strlen ( address ) ) ; //<S2SV> sun_len = sizeof ( struct sockaddr_un ) ; //<S2SV> # endif //<S2SV> client -> control = socket ( AF_UNIX , SOCK_STREAM , 0 ) ; //<S2SV> if ( client -> control < 0 ) //<S2SV> { //<S2SV> free ( client ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> retval = connect ( client -> control , //<S2SV> ( const struct sockaddr * ) & sun , //<S2SV> sun_len ) ; //<S2SV> if ( retval < 0 ) //<S2SV> { //<S2SV> close ( client -> control ) ; //<S2SV> free ( client ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return client ; //<S2SV> } //<S2SV> 