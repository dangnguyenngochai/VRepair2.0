static uint16_t //<S2SV> http_dissect_hdrs ( struct worker * w , struct http * hp , int fd , char * p , //<S2SV> const struct http_conn * htc ) //<S2SV> { //<S2SV> char * q , * r ; //<S2SV> txt t = htc -> rxbuf ; //<S2SV> if ( * p == '\\r' ) //<S2SV> p ++ ; //<S2SV> hp -> nhd = HTTP_HDR_FIRST ; //<S2SV> hp -> conds = 0 ; //<S2SV> r = NULL ; //<S2SV> for ( ; p < t . e ; p = r ) { //<S2SV> q = r = p ; //<S2SV> while ( r < t . e ) { //<S2SV> if ( ! vct_iscrlf ( * r ) ) { //<S2SV> r ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> q = r ; //<S2SV> assert ( r < t . e ) ; //<S2SV> r += vct_skipcrlf ( r ) ; //<S2SV> if ( r >= t . e ) //<S2SV> break ; //<S2SV> if ( ! vct_issp ( * r ) ) //<S2SV> break ; //<S2SV> while ( vct_islws ( * q ) ) //<S2SV> * q ++ = '<S2SV_blank>' ; //<S2SV> } //<S2SV> if ( q - p > htc -> maxhdr ) { //<S2SV> VSC_C_main -> losthdr ++ ; //<S2SV> WSL ( w , SLT_LostHeader , fd , "%.*s" , //<S2SV> q - p > 20 ? 20 : q - p , p ) ; //<S2SV> return ( 413 ) ; //<S2SV> } //<S2SV> if ( p == q ) //<S2SV> break ; //<S2SV> if ( ( p [ 0 ] == 'i' || p [ 0 ] == 'I' ) && //<S2SV> ( p [ 1 ] == 'f' || p [ 1 ] == 'F' ) && //<S2SV> p [ 2 ] == '-' ) //<S2SV> hp -> conds = 1 ; //<S2SV> while ( q > p && vct_issp ( q [ - 1 ] ) ) //<S2SV> q -- ; //<S2SV> * q = '\\0' ; //<S2SV> if ( hp -> nhd < hp -> shd ) { //<S2SV> hp -> hdf [ hp -> nhd ] = 0 ; //<S2SV> hp -> hd [ hp -> nhd ] . b = p ; //<S2SV> hp -> hd [ hp -> nhd ] . e = q ; //<S2SV> WSLH ( w , fd , hp , hp -> nhd ) ; //<S2SV> hp -> nhd ++ ; //<S2SV> } else { //<S2SV> VSC_C_main -> losthdr ++ ; //<S2SV> WSL ( w , SLT_LostHeader , fd , "%.*s" , //<S2SV> q - p > 20 ? 20 : q - p , p ) ; //<S2SV> return ( 413 ) ; //<S2SV> } //<S2SV> } //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> 