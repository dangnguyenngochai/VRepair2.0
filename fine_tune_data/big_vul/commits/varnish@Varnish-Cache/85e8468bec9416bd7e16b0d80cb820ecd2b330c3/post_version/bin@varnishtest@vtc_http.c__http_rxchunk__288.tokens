static int //<S2SV> http_rxchunk ( struct http * hp ) //<S2SV> { //<S2SV> char * q ; //<S2SV> int l , i ; //<S2SV> l = hp -> prxbuf ; //<S2SV> do //<S2SV> ( void ) http_rxchar ( hp , 1 , 0 ) ; //<S2SV> while ( hp -> rxbuf [ hp -> prxbuf - 1 ] != '\\n' ) ; //<S2SV> vtc_dump ( hp -> vl , 4 , "len" , hp -> rxbuf + l , - 1 ) ; //<S2SV> i = strtoul ( hp -> rxbuf + l , & q , 16 ) ; //<S2SV> bprintf ( hp -> chunklen , "%d" , i ) ; //<S2SV> if ( ( q == hp -> rxbuf + l ) || //<S2SV> ( * q != '\\0' && ! vct_islws ( * q ) ) ) { //<S2SV> vtc_log ( hp -> vl , hp -> fatal , "chunked<S2SV_blank>fail<S2SV_blank>%02x<S2SV_blank>@<S2SV_blank>%d" , //<S2SV> * q , q - ( hp -> rxbuf + l ) ) ; //<S2SV> } //<S2SV> assert ( q != hp -> rxbuf + l ) ; //<S2SV> assert ( * q == '\\0' || vct_islws ( * q ) ) ; //<S2SV> hp -> prxbuf = l ; //<S2SV> if ( i > 0 ) { //<S2SV> ( void ) http_rxchar ( hp , i , 0 ) ; //<S2SV> vtc_dump ( hp -> vl , 4 , "chunk" , //<S2SV> hp -> rxbuf + l , i ) ; //<S2SV> } //<S2SV> l = hp -> prxbuf ; //<S2SV> ( void ) http_rxchar ( hp , 2 , 0 ) ; //<S2SV> if ( ! vct_iscrlf ( & hp -> rxbuf [ l ] ) ) //<S2SV> vtc_log ( hp -> vl , hp -> fatal , //<S2SV> "Wrong<S2SV_blank>chunk<S2SV_blank>tail[0]<S2SV_blank>=<S2SV_blank>%02x" , //<S2SV> hp -> rxbuf [ l ] & 0xff ) ; //<S2SV> if ( ! vct_iscrlf ( & hp -> rxbuf [ l + 1 ] ) ) //<S2SV> vtc_log ( hp -> vl , hp -> fatal , //<S2SV> "Wrong<S2SV_blank>chunk<S2SV_blank>tail[1]<S2SV_blank>=<S2SV_blank>%02x" , //<S2SV> hp -> rxbuf [ l + 1 ] & 0xff ) ; //<S2SV> hp -> prxbuf = l ; //<S2SV> hp -> rxbuf [ l ] = '\\0' ; //<S2SV> return ( i ) ; //<S2SV> } //<S2SV> 