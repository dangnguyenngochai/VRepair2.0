static void //<S2SV> http_splitheader ( struct http * hp , int req ) //<S2SV> { //<S2SV> char * p , * q , * * hh ; //<S2SV> int n ; //<S2SV> char buf [ 20 ] ; //<S2SV> CHECK_OBJ_NOTNULL ( hp , HTTP_MAGIC ) ; //<S2SV> if ( req ) { //<S2SV> memset ( hp -> req , 0 , sizeof hp -> req ) ; //<S2SV> hh = hp -> req ; //<S2SV> } else { //<S2SV> memset ( hp -> resp , 0 , sizeof hp -> resp ) ; //<S2SV> hh = hp -> resp ; //<S2SV> } //<S2SV> n = 0 ; //<S2SV> p = hp -> rxbuf ; //<S2SV> while ( vct_islws ( * p ) ) //<S2SV> p ++ ; //<S2SV> hh [ n ++ ] = p ; //<S2SV> while ( ! vct_islws ( * p ) ) //<S2SV> p ++ ; //<S2SV> assert ( ! vct_iscrlf ( p ) ) ; //<S2SV> * p ++ = '\\0' ; //<S2SV> while ( vct_issp ( * p ) ) //<S2SV> p ++ ; //<S2SV> assert ( ! vct_iscrlf ( p ) ) ; //<S2SV> hh [ n ++ ] = p ; //<S2SV> while ( ! vct_islws ( * p ) ) //<S2SV> p ++ ; //<S2SV> if ( vct_iscrlf ( p ) ) { //<S2SV> hh [ n ++ ] = NULL ; //<S2SV> q = p ; //<S2SV> p += vct_skipcrlf ( p ) ; //<S2SV> * q = '\\0' ; //<S2SV> } else { //<S2SV> * p ++ = '\\0' ; //<S2SV> while ( vct_issp ( * p ) ) //<S2SV> p ++ ; //<S2SV> hh [ n ++ ] = p ; //<S2SV> while ( ! vct_iscrlf ( p ) ) //<S2SV> p ++ ; //<S2SV> q = p ; //<S2SV> p += vct_skipcrlf ( p ) ; //<S2SV> * q = '\\0' ; //<S2SV> } //<S2SV> assert ( n == 3 ) ; //<S2SV> while ( * p != '\\0' ) { //<S2SV> assert ( n < MAX_HDR ) ; //<S2SV> if ( vct_iscrlf ( p ) ) //<S2SV> break ; //<S2SV> hh [ n ++ ] = p ++ ; //<S2SV> while ( * p != '\\0' && ! vct_iscrlf ( p ) ) //<S2SV> p ++ ; //<S2SV> q = p ; //<S2SV> p += vct_skipcrlf ( p ) ; //<S2SV> * q = '\\0' ; //<S2SV> } //<S2SV> p += vct_skipcrlf ( p ) ; //<S2SV> assert ( * p == '\\0' ) ; //<S2SV> for ( n = 0 ; n < 3 || hh [ n ] != NULL ; n ++ ) { //<S2SV> sprintf ( buf , "http[%2d]<S2SV_blank>" , n ) ; //<S2SV> vtc_dump ( hp -> vl , 4 , buf , hh [ n ] , - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> 