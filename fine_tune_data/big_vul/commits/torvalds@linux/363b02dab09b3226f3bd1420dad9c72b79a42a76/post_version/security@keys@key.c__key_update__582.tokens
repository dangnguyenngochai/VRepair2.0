int key_update ( key_ref_t key_ref , const void * payload , size_t plen ) //<S2SV> { //<S2SV> struct key_preparsed_payload prep ; //<S2SV> struct key * key = key_ref_to_ptr ( key_ref ) ; //<S2SV> int ret ; //<S2SV> key_check ( key ) ; //<S2SV> ret = key_permission ( key_ref , KEY_NEED_WRITE ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> if ( ! key -> type -> update ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> memset ( & prep , 0 , sizeof ( prep ) ) ; //<S2SV> prep . data = payload ; //<S2SV> prep . datalen = plen ; //<S2SV> prep . quotalen = key -> type -> def_datalen ; //<S2SV> prep . expiry = TIME_T_MAX ; //<S2SV> if ( key -> type -> preparse ) { //<S2SV> ret = key -> type -> preparse ( & prep ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto error ; //<S2SV> } //<S2SV> down_write ( & key -> sem ) ; //<S2SV> ret = key -> type -> update ( key , & prep ) ; //<S2SV> if ( ret == 0 ) //<S2SV> mark_key_instantiated ( key , 0 ) ; //<S2SV> up_write ( & key -> sem ) ; //<S2SV> error : //<S2SV> if ( key -> type -> preparse ) //<S2SV> key -> type -> free_preparse ( & prep ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 