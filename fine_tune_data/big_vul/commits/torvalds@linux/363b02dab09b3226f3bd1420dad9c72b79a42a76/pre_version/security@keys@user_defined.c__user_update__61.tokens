int user_update ( struct key * key , struct key_preparsed_payload * prep ) //<S2SV> { //<S2SV> struct user_key_payload * zap = NULL ; //<S2SV> int ret ; //<S2SV> ret = key_payload_reserve ( key , prep -> datalen ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> key -> expiry = prep -> expiry ; //<S2SV> if ( ! test_bit ( KEY_FLAG_NEGATIVE , & key -> flags ) ) //<S2SV> zap = dereference_key_locked ( key ) ; //<S2SV> rcu_assign_keypointer ( key , prep -> payload . data [ 0 ] ) ; //<S2SV> prep -> payload . data [ 0 ] = NULL ; //<S2SV> if ( zap ) //<S2SV> call_rcu ( & zap -> rcu , user_free_payload_rcu ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 