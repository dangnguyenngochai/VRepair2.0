static void pipe_advance ( struct iov_iter * i , size_t size ) //<S2SV> { //<S2SV> struct pipe_inode_info * pipe = i -> pipe ; //<S2SV> struct pipe_buffer * buf ; //<S2SV> int idx = i -> idx ; //<S2SV> size_t off = i -> iov_offset , orig_sz ; //<S2SV> if ( unlikely ( i -> count < size ) ) //<S2SV> size = i -> count ; //<S2SV> orig_sz = size ; //<S2SV> if ( size ) { //<S2SV> if ( off ) //<S2SV> size += off - pipe -> bufs [ idx ] . offset ; //<S2SV> while ( 1 ) { //<S2SV> buf = & pipe -> bufs [ idx ] ; //<S2SV> if ( size <= buf -> len ) //<S2SV> break ; //<S2SV> size -= buf -> len ; //<S2SV> idx = next_idx ( idx , pipe ) ; //<S2SV> } //<S2SV> buf -> len = size ; //<S2SV> i -> idx = idx ; //<S2SV> off = i -> iov_offset = buf -> offset + size ; //<S2SV> } //<S2SV> if ( off ) //<S2SV> idx = next_idx ( idx , pipe ) ; //<S2SV> if ( pipe -> nrbufs ) { //<S2SV> int unused = ( pipe -> curbuf + pipe -> nrbufs ) & ( pipe -> buffers - 1 ) ; //<S2SV> while ( idx != unused ) { //<S2SV> pipe_buf_release ( pipe , & pipe -> bufs [ idx ] ) ; //<S2SV> idx = next_idx ( idx , pipe ) ; //<S2SV> pipe -> nrbufs -- ; //<S2SV> } //<S2SV> } //<S2SV> i -> count -= orig_sz ; //<S2SV> } //<S2SV> 