static int _snd_timer_stop ( struct snd_timer_instance * timeri , //<S2SV> int keep_flag , int event ) //<S2SV> { //<S2SV> struct snd_timer * timer ; //<S2SV> unsigned long flags ; //<S2SV> if ( snd_BUG_ON ( ! timeri ) ) //<S2SV> return - ENXIO ; //<S2SV> if ( timeri -> flags & SNDRV_TIMER_IFLG_SLAVE ) { //<S2SV> if ( ! keep_flag ) { //<S2SV> spin_lock_irqsave ( & slave_active_lock , flags ) ; //<S2SV> timeri -> flags &= ~ SNDRV_TIMER_IFLG_RUNNING ; //<S2SV> list_del_init ( & timeri -> ack_list ) ; //<S2SV> list_del_init ( & timeri -> active_list ) ; //<S2SV> spin_unlock_irqrestore ( & slave_active_lock , flags ) ; //<S2SV> } //<S2SV> goto __end ; //<S2SV> } //<S2SV> timer = timeri -> timer ; //<S2SV> if ( ! timer ) //<S2SV> return - EINVAL ; //<S2SV> spin_lock_irqsave ( & timer -> lock , flags ) ; //<S2SV> list_del_init ( & timeri -> ack_list ) ; //<S2SV> list_del_init ( & timeri -> active_list ) ; //<S2SV> if ( ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) && //<S2SV> ! ( -- timer -> running ) ) { //<S2SV> timer -> hw . stop ( timer ) ; //<S2SV> if ( timer -> flags & SNDRV_TIMER_FLG_RESCHED ) { //<S2SV> timer -> flags &= ~ SNDRV_TIMER_FLG_RESCHED ; //<S2SV> snd_timer_reschedule ( timer , 0 ) ; //<S2SV> if ( timer -> flags & SNDRV_TIMER_FLG_CHANGE ) { //<S2SV> timer -> flags &= ~ SNDRV_TIMER_FLG_CHANGE ; //<S2SV> timer -> hw . start ( timer ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ! keep_flag ) //<S2SV> timeri -> flags &= //<S2SV> ~ ( SNDRV_TIMER_IFLG_RUNNING | SNDRV_TIMER_IFLG_START ) ; //<S2SV> spin_unlock_irqrestore ( & timer -> lock , flags ) ; //<S2SV> __end : //<S2SV> if ( event != SNDRV_TIMER_EVENT_RESOLUTION ) //<S2SV> snd_timer_notify1 ( timeri , event ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 