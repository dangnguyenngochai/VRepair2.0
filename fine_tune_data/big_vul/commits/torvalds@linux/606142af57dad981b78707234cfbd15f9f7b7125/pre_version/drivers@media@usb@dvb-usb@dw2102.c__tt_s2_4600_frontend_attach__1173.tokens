static int tt_s2_4600_frontend_attach ( struct dvb_usb_adapter * adap ) //<S2SV> { //<S2SV> struct dvb_usb_device * d = adap -> dev ; //<S2SV> struct dw2102_state * state = d -> priv ; //<S2SV> u8 obuf [ 3 ] = { 0xe , 0x80 , 0 } ; //<S2SV> u8 ibuf [ ] = { 0 } ; //<S2SV> struct i2c_adapter * i2c_adapter ; //<S2SV> struct i2c_client * client ; //<S2SV> struct i2c_board_info board_info ; //<S2SV> struct m88ds3103_platform_data m88ds3103_pdata = { } ; //<S2SV> struct ts2020_config ts2020_config = { } ; //<S2SV> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) //<S2SV> err ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; //<S2SV> obuf [ 0 ] = 0xe ; //<S2SV> obuf [ 1 ] = 0x02 ; //<S2SV> obuf [ 2 ] = 1 ; //<S2SV> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) //<S2SV> err ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; //<S2SV> msleep ( 300 ) ; //<S2SV> obuf [ 0 ] = 0xe ; //<S2SV> obuf [ 1 ] = 0x83 ; //<S2SV> obuf [ 2 ] = 0 ; //<S2SV> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) //<S2SV> err ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; //<S2SV> obuf [ 0 ] = 0xe ; //<S2SV> obuf [ 1 ] = 0x83 ; //<S2SV> obuf [ 2 ] = 1 ; //<S2SV> if ( dvb_usb_generic_rw ( d , obuf , 3 , ibuf , 1 , 0 ) < 0 ) //<S2SV> err ( "command<S2SV_blank>0x0e<S2SV_blank>transfer<S2SV_blank>failed." ) ; //<S2SV> obuf [ 0 ] = 0x51 ; //<S2SV> if ( dvb_usb_generic_rw ( d , obuf , 1 , ibuf , 1 , 0 ) < 0 ) //<S2SV> err ( "command<S2SV_blank>0x51<S2SV_blank>transfer<S2SV_blank>failed." ) ; //<S2SV> m88ds3103_pdata . clk = 27000000 ; //<S2SV> m88ds3103_pdata . i2c_wr_max = 33 ; //<S2SV> m88ds3103_pdata . ts_mode = M88DS3103_TS_CI ; //<S2SV> m88ds3103_pdata . ts_clk = 16000 ; //<S2SV> m88ds3103_pdata . ts_clk_pol = 0 ; //<S2SV> m88ds3103_pdata . spec_inv = 0 ; //<S2SV> m88ds3103_pdata . agc = 0x99 ; //<S2SV> m88ds3103_pdata . agc_inv = 0 ; //<S2SV> m88ds3103_pdata . clk_out = M88DS3103_CLOCK_OUT_ENABLED ; //<S2SV> m88ds3103_pdata . envelope_mode = 0 ; //<S2SV> m88ds3103_pdata . lnb_hv_pol = 1 ; //<S2SV> m88ds3103_pdata . lnb_en_pol = 0 ; //<S2SV> memset ( & board_info , 0 , sizeof ( board_info ) ) ; //<S2SV> strlcpy ( board_info . type , "m88ds3103" , I2C_NAME_SIZE ) ; //<S2SV> board_info . addr = 0x68 ; //<S2SV> board_info . platform_data = & m88ds3103_pdata ; //<S2SV> request_module ( "m88ds3103" ) ; //<S2SV> client = i2c_new_device ( & d -> i2c_adap , & board_info ) ; //<S2SV> if ( client == NULL || client -> dev . driver == NULL ) //<S2SV> return - ENODEV ; //<S2SV> if ( ! try_module_get ( client -> dev . driver -> owner ) ) { //<S2SV> i2c_unregister_device ( client ) ; //<S2SV> return - ENODEV ; //<S2SV> } //<S2SV> adap -> fe_adap [ 0 ] . fe = m88ds3103_pdata . get_dvb_frontend ( client ) ; //<S2SV> i2c_adapter = m88ds3103_pdata . get_i2c_adapter ( client ) ; //<S2SV> state -> i2c_client_demod = client ; //<S2SV> ts2020_config . fe = adap -> fe_adap [ 0 ] . fe ; //<S2SV> memset ( & board_info , 0 , sizeof ( board_info ) ) ; //<S2SV> strlcpy ( board_info . type , "ts2022" , I2C_NAME_SIZE ) ; //<S2SV> board_info . addr = 0x60 ; //<S2SV> board_info . platform_data = & ts2020_config ; //<S2SV> request_module ( "ts2020" ) ; //<S2SV> client = i2c_new_device ( i2c_adapter , & board_info ) ; //<S2SV> if ( client == NULL || client -> dev . driver == NULL ) { //<S2SV> dvb_frontend_detach ( adap -> fe_adap [ 0 ] . fe ) ; //<S2SV> return - ENODEV ; //<S2SV> } //<S2SV> if ( ! try_module_get ( client -> dev . driver -> owner ) ) { //<S2SV> i2c_unregister_device ( client ) ; //<S2SV> dvb_frontend_detach ( adap -> fe_adap [ 0 ] . fe ) ; //<S2SV> return - ENODEV ; //<S2SV> } //<S2SV> adap -> fe_adap [ 0 ] . fe -> ops . read_signal_strength = //<S2SV> adap -> fe_adap [ 0 ] . fe -> ops . tuner_ops . get_rf_strength ; //<S2SV> state -> i2c_client_tuner = client ; //<S2SV> state -> fe_read_status = adap -> fe_adap [ 0 ] . fe -> ops . read_status ; //<S2SV> adap -> fe_adap [ 0 ] . fe -> ops . read_status = tt_s2_4600_read_status ; //<S2SV> state -> last_lock = 0 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 