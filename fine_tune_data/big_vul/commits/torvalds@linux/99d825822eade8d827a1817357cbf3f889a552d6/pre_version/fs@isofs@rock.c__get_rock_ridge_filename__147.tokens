int get_rock_ridge_filename ( struct iso_directory_record * de , //<S2SV> char * retname , struct inode * inode ) //<S2SV> { //<S2SV> struct rock_state rs ; //<S2SV> struct rock_ridge * rr ; //<S2SV> int sig ; //<S2SV> int retnamlen = 0 ; //<S2SV> int truncate = 0 ; //<S2SV> int ret = 0 ; //<S2SV> if ( ! ISOFS_SB ( inode -> i_sb ) -> s_rock ) //<S2SV> return 0 ; //<S2SV> * retname = 0 ; //<S2SV> init_rock_state ( & rs , inode ) ; //<S2SV> setup_rock_ridge ( de , inode , & rs ) ; //<S2SV> repeat : //<S2SV> while ( rs . len > 2 ) { //<S2SV> rr = ( struct rock_ridge * ) rs . chr ; //<S2SV> if ( rr -> len < 3 ) //<S2SV> goto out ; //<S2SV> sig = isonum_721 ( rs . chr ) ; //<S2SV> if ( rock_check_overflow ( & rs , sig ) ) //<S2SV> goto eio ; //<S2SV> rs . chr += rr -> len ; //<S2SV> rs . len -= rr -> len ; //<S2SV> if ( rs . len < 0 ) //<S2SV> goto out ; //<S2SV> switch ( sig ) { //<S2SV> case SIG ( 'R' , 'R' ) : //<S2SV> if ( ( rr -> u . RR . flags [ 0 ] & RR_NM ) == 0 ) //<S2SV> goto out ; //<S2SV> break ; //<S2SV> case SIG ( 'S' , 'P' ) : //<S2SV> if ( check_sp ( rr , inode ) ) //<S2SV> goto out ; //<S2SV> break ; //<S2SV> case SIG ( 'C' , 'E' ) : //<S2SV> rs . cont_extent = isonum_733 ( rr -> u . CE . extent ) ; //<S2SV> rs . cont_offset = isonum_733 ( rr -> u . CE . offset ) ; //<S2SV> rs . cont_size = isonum_733 ( rr -> u . CE . size ) ; //<S2SV> break ; //<S2SV> case SIG ( 'N' , 'M' ) : //<S2SV> if ( truncate ) //<S2SV> break ; //<S2SV> if ( rr -> len < 5 ) //<S2SV> break ; //<S2SV> if ( rr -> u . NM . flags & 6 ) //<S2SV> break ; //<S2SV> if ( rr -> u . NM . flags & ~ 1 ) { //<S2SV> printk ( "Unsupported<S2SV_blank>NM<S2SV_blank>flag<S2SV_blank>settings<S2SV_blank>(%d)\\n" , //<S2SV> rr -> u . NM . flags ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ( strlen ( retname ) + rr -> len - 5 ) >= 254 ) { //<S2SV> truncate = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> strncat ( retname , rr -> u . NM . name , rr -> len - 5 ) ; //<S2SV> retnamlen += rr -> len - 5 ; //<S2SV> break ; //<S2SV> case SIG ( 'R' , 'E' ) : //<S2SV> kfree ( rs . buffer ) ; //<S2SV> return - 1 ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> ret = rock_continue ( & rs ) ; //<S2SV> if ( ret == 0 ) //<S2SV> goto repeat ; //<S2SV> if ( ret == 1 ) //<S2SV> return retnamlen ; //<S2SV> out : //<S2SV> kfree ( rs . buffer ) ; //<S2SV> return ret ; //<S2SV> eio : //<S2SV> ret = - EIO ; //<S2SV> goto out ; //<S2SV> } //<S2SV> 