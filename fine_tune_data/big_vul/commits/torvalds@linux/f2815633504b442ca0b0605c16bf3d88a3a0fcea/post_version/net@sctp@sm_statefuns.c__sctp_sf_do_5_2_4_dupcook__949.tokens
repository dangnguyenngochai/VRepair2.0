sctp_disposition_t sctp_sf_do_5_2_4_dupcook ( struct net * net , //<S2SV> const struct sctp_endpoint * ep , //<S2SV> const struct sctp_association * asoc , //<S2SV> const sctp_subtype_t type , //<S2SV> void * arg , //<S2SV> sctp_cmd_seq_t * commands ) //<S2SV> { //<S2SV> sctp_disposition_t retval ; //<S2SV> struct sctp_chunk * chunk = arg ; //<S2SV> struct sctp_association * new_asoc ; //<S2SV> int error = 0 ; //<S2SV> char action ; //<S2SV> struct sctp_chunk * err_chk_p ; //<S2SV> if ( ! sctp_chunk_length_valid ( chunk , sizeof ( sctp_chunkhdr_t ) ) ) //<S2SV> return sctp_sf_violation_chunklen ( net , ep , asoc , type , arg , //<S2SV> commands ) ; //<S2SV> chunk -> subh . cookie_hdr = ( struct sctp_signed_cookie * ) chunk -> skb -> data ; //<S2SV> if ( ! pskb_pull ( chunk -> skb , ntohs ( chunk -> chunk_hdr -> length ) - //<S2SV> sizeof ( sctp_chunkhdr_t ) ) ) //<S2SV> goto nomem ; //<S2SV> new_asoc = sctp_unpack_cookie ( ep , asoc , chunk , GFP_ATOMIC , & error , //<S2SV> & err_chk_p ) ; //<S2SV> if ( ! new_asoc ) { //<S2SV> switch ( error ) { //<S2SV> case - SCTP_IERROR_NOMEM : //<S2SV> goto nomem ; //<S2SV> case - SCTP_IERROR_STALE_COOKIE : //<S2SV> sctp_send_stale_cookie_err ( net , ep , asoc , chunk , commands , //<S2SV> err_chk_p ) ; //<S2SV> return sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; //<S2SV> case - SCTP_IERROR_BAD_SIG : //<S2SV> default : //<S2SV> return sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; //<S2SV> } //<S2SV> } //<S2SV> action = sctp_tietags_compare ( new_asoc , asoc ) ; //<S2SV> switch ( action ) { //<S2SV> case 'A' : //<S2SV> retval = sctp_sf_do_dupcook_a ( net , ep , asoc , chunk , commands , //<S2SV> new_asoc ) ; //<S2SV> break ; //<S2SV> case 'B' : //<S2SV> retval = sctp_sf_do_dupcook_b ( net , ep , asoc , chunk , commands , //<S2SV> new_asoc ) ; //<S2SV> break ; //<S2SV> case 'C' : //<S2SV> retval = sctp_sf_do_dupcook_c ( net , ep , asoc , chunk , commands , //<S2SV> new_asoc ) ; //<S2SV> break ; //<S2SV> case 'D' : //<S2SV> retval = sctp_sf_do_dupcook_d ( net , ep , asoc , chunk , commands , //<S2SV> new_asoc ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> retval = sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; //<S2SV> break ; //<S2SV> } //<S2SV> sctp_add_cmd_sf ( commands , SCTP_CMD_SET_ASOC , SCTP_ASOC ( new_asoc ) ) ; //<S2SV> sctp_add_cmd_sf ( commands , SCTP_CMD_DELETE_TCB , SCTP_NULL ( ) ) ; //<S2SV> sctp_add_cmd_sf ( commands , SCTP_CMD_SET_ASOC , //<S2SV> SCTP_ASOC ( ( struct sctp_association * ) asoc ) ) ; //<S2SV> return retval ; //<S2SV> nomem : //<S2SV> return SCTP_DISPOSITION_NOMEM ; //<S2SV> } //<S2SV> 