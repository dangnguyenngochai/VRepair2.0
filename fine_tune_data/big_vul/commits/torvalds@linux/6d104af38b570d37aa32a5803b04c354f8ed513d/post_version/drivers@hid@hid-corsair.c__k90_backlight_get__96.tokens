static enum led_brightness k90_backlight_get ( struct led_classdev * led_cdev ) //<S2SV> { //<S2SV> int ret ; //<S2SV> struct k90_led * led = container_of ( led_cdev , struct k90_led , cdev ) ; //<S2SV> struct device * dev = led -> cdev . dev -> parent ; //<S2SV> struct usb_interface * usbif = to_usb_interface ( dev -> parent ) ; //<S2SV> struct usb_device * usbdev = interface_to_usbdev ( usbif ) ; //<S2SV> int brightness ; //<S2SV> char * data ; //<S2SV> data = kmalloc ( 8 , GFP_KERNEL ) ; //<S2SV> if ( ! data ) //<S2SV> return - ENOMEM ; //<S2SV> ret = usb_control_msg ( usbdev , usb_rcvctrlpipe ( usbdev , 0 ) , //<S2SV> K90_REQUEST_STATUS , //<S2SV> USB_DIR_IN | USB_TYPE_VENDOR | //<S2SV> USB_RECIP_DEVICE , 0 , 0 , data , 8 , //<S2SV> USB_CTRL_SET_TIMEOUT ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> dev_warn ( dev , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>K90<S2SV_blank>initial<S2SV_blank>state<S2SV_blank>(error<S2SV_blank>%d).\\n" , //<S2SV> ret ) ; //<S2SV> ret = - EIO ; //<S2SV> goto out ; //<S2SV> } //<S2SV> brightness = data [ 4 ] ; //<S2SV> if ( brightness < 0 || brightness > 3 ) { //<S2SV> dev_warn ( dev , //<S2SV> "Read<S2SV_blank>invalid<S2SV_blank>backlight<S2SV_blank>brightness:<S2SV_blank>%02hhx.\\n" , //<S2SV> data [ 4 ] ) ; //<S2SV> ret = - EIO ; //<S2SV> goto out ; //<S2SV> } //<S2SV> ret = brightness ; //<S2SV> out : //<S2SV> kfree ( data ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 