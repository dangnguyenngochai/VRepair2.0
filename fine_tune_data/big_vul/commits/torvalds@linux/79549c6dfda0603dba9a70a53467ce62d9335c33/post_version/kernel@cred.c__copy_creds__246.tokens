int copy_creds ( struct task_struct * p , unsigned long clone_flags ) //<S2SV> { //<S2SV> # ifdef CONFIG_KEYS //<S2SV> struct thread_group_cred * tgcred ; //<S2SV> # endif //<S2SV> struct cred * new ; //<S2SV> int ret ; //<S2SV> p -> replacement_session_keyring = NULL ; //<S2SV> if ( //<S2SV> # ifdef CONFIG_KEYS //<S2SV> ! p -> cred -> thread_keyring && //<S2SV> # endif //<S2SV> clone_flags & CLONE_THREAD //<S2SV> ) { //<S2SV> p -> real_cred = get_cred ( p -> cred ) ; //<S2SV> get_cred ( p -> cred ) ; //<S2SV> alter_cred_subscribers ( p -> cred , 2 ) ; //<S2SV> kdebug ( "share_creds(%p{%d,%d})" , //<S2SV> p -> cred , atomic_read ( & p -> cred -> usage ) , //<S2SV> read_cred_subscribers ( p -> cred ) ) ; //<S2SV> atomic_inc ( & p -> cred -> user -> processes ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> new = prepare_creds ( ) ; //<S2SV> if ( ! new ) //<S2SV> return - ENOMEM ; //<S2SV> if ( clone_flags & CLONE_NEWUSER ) { //<S2SV> ret = create_user_ns ( new ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto error_put ; //<S2SV> } //<S2SV> new -> user_ns = new -> user -> user_ns ; //<S2SV> # ifdef CONFIG_KEYS //<S2SV> if ( new -> thread_keyring ) { //<S2SV> key_put ( new -> thread_keyring ) ; //<S2SV> new -> thread_keyring = NULL ; //<S2SV> if ( clone_flags & CLONE_THREAD ) //<S2SV> install_thread_keyring_to_cred ( new ) ; //<S2SV> } //<S2SV> if ( ! ( clone_flags & CLONE_THREAD ) ) { //<S2SV> tgcred = kmalloc ( sizeof ( * tgcred ) , GFP_KERNEL ) ; //<S2SV> if ( ! tgcred ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto error_put ; //<S2SV> } //<S2SV> atomic_set ( & tgcred -> usage , 1 ) ; //<S2SV> spin_lock_init ( & tgcred -> lock ) ; //<S2SV> tgcred -> process_keyring = NULL ; //<S2SV> tgcred -> session_keyring = key_get ( new -> tgcred -> session_keyring ) ; //<S2SV> release_tgcred ( new ) ; //<S2SV> new -> tgcred = tgcred ; //<S2SV> } //<S2SV> # endif //<S2SV> atomic_inc ( & new -> user -> processes ) ; //<S2SV> p -> cred = p -> real_cred = get_cred ( new ) ; //<S2SV> alter_cred_subscribers ( new , 2 ) ; //<S2SV> validate_creds ( new ) ; //<S2SV> return 0 ; //<S2SV> error_put : //<S2SV> put_cred ( new ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 