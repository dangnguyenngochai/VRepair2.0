void fib_del_ifaddr ( struct in_ifaddr * ifa , struct in_ifaddr * iprim ) //<S2SV> { //<S2SV> struct in_device * in_dev = ifa -> ifa_dev ; //<S2SV> struct net_device * dev = in_dev -> dev ; //<S2SV> struct in_ifaddr * ifa1 ; //<S2SV> struct in_ifaddr * prim = ifa , * prim1 = NULL ; //<S2SV> __be32 brd = ifa -> ifa_address | ~ ifa -> ifa_mask ; //<S2SV> __be32 any = ifa -> ifa_address & ifa -> ifa_mask ; //<S2SV> # define LOCAL_OK 1 //<S2SV> # define BRD_OK 2 //<S2SV> # define BRD0_OK 4 //<S2SV> # define BRD1_OK 8 //<S2SV> unsigned int ok = 0 ; //<S2SV> int subnet = 0 ; //<S2SV> int gone = 1 ; //<S2SV> int same_prefsrc = 0 ; //<S2SV> if ( ifa -> ifa_flags & IFA_F_SECONDARY ) { //<S2SV> prim = inet_ifa_byprefix ( in_dev , any , ifa -> ifa_mask ) ; //<S2SV> if ( ! prim ) { //<S2SV> pr_warn ( "%s:<S2SV_blank>bug:<S2SV_blank>prim<S2SV_blank>==<S2SV_blank>NULL\\n" , __func__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( iprim && iprim != prim ) { //<S2SV> pr_warn ( "%s:<S2SV_blank>bug:<S2SV_blank>iprim<S2SV_blank>!=<S2SV_blank>prim\\n" , __func__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } else if ( ! ipv4_is_zeronet ( any ) && //<S2SV> ( any != ifa -> ifa_local || ifa -> ifa_prefixlen < 32 ) ) { //<S2SV> if ( ! ( ifa -> ifa_flags & IFA_F_NOPREFIXROUTE ) ) //<S2SV> fib_magic ( RTM_DELROUTE , //<S2SV> dev -> flags & IFF_LOOPBACK ? RTN_LOCAL : RTN_UNICAST , //<S2SV> any , ifa -> ifa_prefixlen , prim ) ; //<S2SV> subnet = 1 ; //<S2SV> } //<S2SV> for ( ifa1 = in_dev -> ifa_list ; ifa1 ; ifa1 = ifa1 -> ifa_next ) { //<S2SV> if ( ifa1 == ifa ) { //<S2SV> gone = 0 ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( iprim && ifa1 -> ifa_mask == iprim -> ifa_mask && //<S2SV> inet_ifa_match ( ifa1 -> ifa_address , iprim ) ) //<S2SV> continue ; //<S2SV> if ( ifa1 -> ifa_flags & IFA_F_SECONDARY ) { //<S2SV> if ( ifa1 -> ifa_mask == prim -> ifa_mask && //<S2SV> inet_ifa_match ( ifa1 -> ifa_address , prim ) ) //<S2SV> prim1 = prim ; //<S2SV> else { //<S2SV> if ( ! same_prefsrc ) //<S2SV> continue ; //<S2SV> if ( ! prim1 || //<S2SV> ifa1 -> ifa_mask != prim1 -> ifa_mask || //<S2SV> ! inet_ifa_match ( ifa1 -> ifa_address , prim1 ) ) //<S2SV> prim1 = inet_ifa_byprefix ( in_dev , //<S2SV> ifa1 -> ifa_address , //<S2SV> ifa1 -> ifa_mask ) ; //<S2SV> if ( ! prim1 ) //<S2SV> continue ; //<S2SV> if ( prim1 -> ifa_local != prim -> ifa_local ) //<S2SV> continue ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( prim -> ifa_local != ifa1 -> ifa_local ) //<S2SV> continue ; //<S2SV> prim1 = ifa1 ; //<S2SV> if ( prim != prim1 ) //<S2SV> same_prefsrc = 1 ; //<S2SV> } //<S2SV> if ( ifa -> ifa_local == ifa1 -> ifa_local ) //<S2SV> ok |= LOCAL_OK ; //<S2SV> if ( ifa -> ifa_broadcast == ifa1 -> ifa_broadcast ) //<S2SV> ok |= BRD_OK ; //<S2SV> if ( brd == ifa1 -> ifa_broadcast ) //<S2SV> ok |= BRD1_OK ; //<S2SV> if ( any == ifa1 -> ifa_broadcast ) //<S2SV> ok |= BRD0_OK ; //<S2SV> if ( prim1 == ifa1 && ifa1 -> ifa_prefixlen < 31 ) { //<S2SV> __be32 brd1 = ifa1 -> ifa_address | ~ ifa1 -> ifa_mask ; //<S2SV> __be32 any1 = ifa1 -> ifa_address & ifa1 -> ifa_mask ; //<S2SV> if ( ! ipv4_is_zeronet ( any1 ) ) { //<S2SV> if ( ifa -> ifa_broadcast == brd1 || //<S2SV> ifa -> ifa_broadcast == any1 ) //<S2SV> ok |= BRD_OK ; //<S2SV> if ( brd == brd1 || brd == any1 ) //<S2SV> ok |= BRD1_OK ; //<S2SV> if ( any == brd1 || any == any1 ) //<S2SV> ok |= BRD0_OK ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ! ( ok & BRD_OK ) ) //<S2SV> fib_magic ( RTM_DELROUTE , RTN_BROADCAST , ifa -> ifa_broadcast , 32 , prim ) ; //<S2SV> if ( subnet && ifa -> ifa_prefixlen < 31 ) { //<S2SV> if ( ! ( ok & BRD1_OK ) ) //<S2SV> fib_magic ( RTM_DELROUTE , RTN_BROADCAST , brd , 32 , prim ) ; //<S2SV> if ( ! ( ok & BRD0_OK ) ) //<S2SV> fib_magic ( RTM_DELROUTE , RTN_BROADCAST , any , 32 , prim ) ; //<S2SV> } //<S2SV> if ( ! ( ok & LOCAL_OK ) ) { //<S2SV> unsigned int addr_type ; //<S2SV> fib_magic ( RTM_DELROUTE , RTN_LOCAL , ifa -> ifa_local , 32 , prim ) ; //<S2SV> addr_type = inet_addr_type_dev_table ( dev_net ( dev ) , dev , //<S2SV> ifa -> ifa_local ) ; //<S2SV> if ( gone && addr_type != RTN_LOCAL ) { //<S2SV> if ( fib_sync_down_addr ( dev_net ( dev ) , ifa -> ifa_local ) ) //<S2SV> fib_flush ( dev_net ( dev ) ) ; //<S2SV> } //<S2SV> } //<S2SV> # undef LOCAL_OK //<S2SV> # undef BRD_OK //<S2SV> # undef BRD0_OK //<S2SV> # undef BRD1_OK //<S2SV> } //<S2SV> 