long keyctl_update_key ( key_serial_t id , //<S2SV> const void __user * _payload , //<S2SV> size_t plen ) //<S2SV> { //<S2SV> key_ref_t key_ref ; //<S2SV> void * payload ; //<S2SV> long ret ; //<S2SV> ret = - EINVAL ; //<S2SV> if ( plen > PAGE_SIZE ) //<S2SV> goto error ; //<S2SV> payload = NULL ; //<S2SV> if ( _payload ) { //<S2SV> ret = - ENOMEM ; //<S2SV> payload = kmalloc ( plen , GFP_KERNEL ) ; //<S2SV> if ( ! payload ) //<S2SV> goto error ; //<S2SV> ret = - EFAULT ; //<S2SV> if ( copy_from_user ( payload , _payload , plen ) != 0 ) //<S2SV> goto error2 ; //<S2SV> } //<S2SV> key_ref = lookup_user_key ( id , 0 , KEY_NEED_WRITE ) ; //<S2SV> if ( IS_ERR ( key_ref ) ) { //<S2SV> ret = PTR_ERR ( key_ref ) ; //<S2SV> goto error2 ; //<S2SV> } //<S2SV> ret = key_update ( key_ref , payload , plen ) ; //<S2SV> key_ref_put ( key_ref ) ; //<S2SV> error2 : //<S2SV> kfree ( payload ) ; //<S2SV> error : //<S2SV> return ret ; //<S2SV> } //<S2SV> 