static int nr_recvmsg ( struct kiocb * iocb , struct socket * sock , //<S2SV> struct msghdr * msg , size_t size , int flags ) //<S2SV> { //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct sockaddr_ax25 * sax = ( struct sockaddr_ax25 * ) msg -> msg_name ; //<S2SV> size_t copied ; //<S2SV> struct sk_buff * skb ; //<S2SV> int er ; //<S2SV> lock_sock ( sk ) ; //<S2SV> if ( sk -> sk_state != TCP_ESTABLISHED ) { //<S2SV> release_sock ( sk ) ; //<S2SV> return - ENOTCONN ; //<S2SV> } //<S2SV> if ( ( skb = skb_recv_datagram ( sk , flags & ~ MSG_DONTWAIT , flags & MSG_DONTWAIT , & er ) ) == NULL ) { //<S2SV> release_sock ( sk ) ; //<S2SV> return er ; //<S2SV> } //<S2SV> skb_reset_transport_header ( skb ) ; //<S2SV> copied = skb -> len ; //<S2SV> if ( copied > size ) { //<S2SV> copied = size ; //<S2SV> msg -> msg_flags |= MSG_TRUNC ; //<S2SV> } //<S2SV> er = skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , copied ) ; //<S2SV> if ( er < 0 ) { //<S2SV> skb_free_datagram ( sk , skb ) ; //<S2SV> release_sock ( sk ) ; //<S2SV> return er ; //<S2SV> } //<S2SV> if ( sax != NULL ) { //<S2SV> memset ( sax , 0 , sizeof ( * sax ) ) ; //<S2SV> sax -> sax25_family = AF_NETROM ; //<S2SV> skb_copy_from_linear_data_offset ( skb , 7 , sax -> sax25_call . ax25_call , //<S2SV> AX25_ADDR_LEN ) ; //<S2SV> } //<S2SV> msg -> msg_namelen = sizeof ( * sax ) ; //<S2SV> skb_free_datagram ( sk , skb ) ; //<S2SV> release_sock ( sk ) ; //<S2SV> return copied ; //<S2SV> } //<S2SV> 