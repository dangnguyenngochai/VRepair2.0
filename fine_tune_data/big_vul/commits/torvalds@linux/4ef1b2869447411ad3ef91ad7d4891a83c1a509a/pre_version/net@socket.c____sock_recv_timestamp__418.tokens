void __sock_recv_timestamp ( struct msghdr * msg , struct sock * sk , //<S2SV> struct sk_buff * skb ) //<S2SV> { //<S2SV> int need_software_tstamp = sock_flag ( sk , SOCK_RCVTSTAMP ) ; //<S2SV> struct scm_timestamping tss ; //<S2SV> int empty = 1 ; //<S2SV> struct skb_shared_hwtstamps * shhwtstamps = //<S2SV> skb_hwtstamps ( skb ) ; //<S2SV> if ( need_software_tstamp && skb -> tstamp == 0 ) //<S2SV> __net_timestamp ( skb ) ; //<S2SV> if ( need_software_tstamp ) { //<S2SV> if ( ! sock_flag ( sk , SOCK_RCVTSTAMPNS ) ) { //<S2SV> struct timeval tv ; //<S2SV> skb_get_timestamp ( skb , & tv ) ; //<S2SV> put_cmsg ( msg , SOL_SOCKET , SCM_TIMESTAMP , //<S2SV> sizeof ( tv ) , & tv ) ; //<S2SV> } else { //<S2SV> struct timespec ts ; //<S2SV> skb_get_timestampns ( skb , & ts ) ; //<S2SV> put_cmsg ( msg , SOL_SOCKET , SCM_TIMESTAMPNS , //<S2SV> sizeof ( ts ) , & ts ) ; //<S2SV> } //<S2SV> } //<S2SV> memset ( & tss , 0 , sizeof ( tss ) ) ; //<S2SV> if ( ( sk -> sk_tsflags & SOF_TIMESTAMPING_SOFTWARE ) && //<S2SV> ktime_to_timespec_cond ( skb -> tstamp , tss . ts + 0 ) ) //<S2SV> empty = 0 ; //<S2SV> if ( shhwtstamps && //<S2SV> ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && //<S2SV> ktime_to_timespec_cond ( shhwtstamps -> hwtstamp , tss . ts + 2 ) ) //<S2SV> empty = 0 ; //<S2SV> if ( ! empty ) { //<S2SV> put_cmsg ( msg , SOL_SOCKET , //<S2SV> SCM_TIMESTAMPING , sizeof ( tss ) , & tss ) ; //<S2SV> if ( skb_is_err_queue ( skb ) && skb -> len && //<S2SV> ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) ) //<S2SV> put_cmsg ( msg , SOL_SOCKET , SCM_TIMESTAMPING_OPT_STATS , //<S2SV> skb -> len , skb -> data ) ; //<S2SV> } //<S2SV> } //<S2SV> 