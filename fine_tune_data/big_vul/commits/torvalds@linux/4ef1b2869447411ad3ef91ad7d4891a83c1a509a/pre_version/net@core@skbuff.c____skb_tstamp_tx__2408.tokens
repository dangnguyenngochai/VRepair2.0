void __skb_tstamp_tx ( struct sk_buff * orig_skb , //<S2SV> struct skb_shared_hwtstamps * hwtstamps , //<S2SV> struct sock * sk , int tstype ) //<S2SV> { //<S2SV> struct sk_buff * skb ; //<S2SV> bool tsonly ; //<S2SV> if ( ! sk ) //<S2SV> return ; //<S2SV> tsonly = sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_TSONLY ; //<S2SV> if ( ! skb_may_tx_timestamp ( sk , tsonly ) ) //<S2SV> return ; //<S2SV> if ( tsonly ) { //<S2SV> # ifdef CONFIG_INET //<S2SV> if ( ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) && //<S2SV> sk -> sk_protocol == IPPROTO_TCP && //<S2SV> sk -> sk_type == SOCK_STREAM ) //<S2SV> skb = tcp_get_timestamping_opt_stats ( sk ) ; //<S2SV> else //<S2SV> # endif //<S2SV> skb = alloc_skb ( 0 , GFP_ATOMIC ) ; //<S2SV> } else { //<S2SV> skb = skb_clone ( orig_skb , GFP_ATOMIC ) ; //<S2SV> } //<S2SV> if ( ! skb ) //<S2SV> return ; //<S2SV> if ( tsonly ) { //<S2SV> skb_shinfo ( skb ) -> tx_flags = skb_shinfo ( orig_skb ) -> tx_flags ; //<S2SV> skb_shinfo ( skb ) -> tskey = skb_shinfo ( orig_skb ) -> tskey ; //<S2SV> } //<S2SV> if ( hwtstamps ) //<S2SV> * skb_hwtstamps ( skb ) = * hwtstamps ; //<S2SV> else //<S2SV> skb -> tstamp = ktime_get_real ( ) ; //<S2SV> __skb_complete_tx_timestamp ( skb , sk , tstype ) ; //<S2SV> } //<S2SV> 