static int atalk_recvmsg ( struct kiocb * iocb , struct socket * sock , struct msghdr * msg , //<S2SV> size_t size , int flags ) //<S2SV> { //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct ddpehdr * ddp ; //<S2SV> int copied = 0 ; //<S2SV> int offset = 0 ; //<S2SV> int err = 0 ; //<S2SV> struct sk_buff * skb ; //<S2SV> skb = skb_recv_datagram ( sk , flags & ~ MSG_DONTWAIT , //<S2SV> flags & MSG_DONTWAIT , & err ) ; //<S2SV> lock_sock ( sk ) ; //<S2SV> if ( ! skb ) //<S2SV> goto out ; //<S2SV> ddp = ddp_hdr ( skb ) ; //<S2SV> copied = ntohs ( ddp -> deh_len_hops ) & 1023 ; //<S2SV> if ( sk -> sk_type != SOCK_RAW ) { //<S2SV> offset = sizeof ( * ddp ) ; //<S2SV> copied -= offset ; //<S2SV> } //<S2SV> if ( copied > size ) { //<S2SV> copied = size ; //<S2SV> msg -> msg_flags |= MSG_TRUNC ; //<S2SV> } //<S2SV> err = skb_copy_datagram_iovec ( skb , offset , msg -> msg_iov , copied ) ; //<S2SV> if ( ! err && msg -> msg_name ) { //<S2SV> struct sockaddr_at * sat = msg -> msg_name ; //<S2SV> sat -> sat_family = AF_APPLETALK ; //<S2SV> sat -> sat_port = ddp -> deh_sport ; //<S2SV> sat -> sat_addr . s_node = ddp -> deh_snode ; //<S2SV> sat -> sat_addr . s_net = ddp -> deh_snet ; //<S2SV> msg -> msg_namelen = sizeof ( * sat ) ; //<S2SV> } //<S2SV> skb_free_datagram ( sk , skb ) ; //<S2SV> out : //<S2SV> release_sock ( sk ) ; //<S2SV> return err ? : copied ; //<S2SV> } //<S2SV> 