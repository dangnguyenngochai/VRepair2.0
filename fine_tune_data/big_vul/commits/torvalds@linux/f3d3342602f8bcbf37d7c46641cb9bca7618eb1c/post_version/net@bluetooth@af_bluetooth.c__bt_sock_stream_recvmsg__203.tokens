int bt_sock_stream_recvmsg ( struct kiocb * iocb , struct socket * sock , //<S2SV> struct msghdr * msg , size_t size , int flags ) //<S2SV> { //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> int err = 0 ; //<S2SV> size_t target , copied = 0 ; //<S2SV> long timeo ; //<S2SV> if ( flags & MSG_OOB ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> BT_DBG ( "sk<S2SV_blank>%p<S2SV_blank>size<S2SV_blank>%zu" , sk , size ) ; //<S2SV> lock_sock ( sk ) ; //<S2SV> target = sock_rcvlowat ( sk , flags & MSG_WAITALL , size ) ; //<S2SV> timeo = sock_rcvtimeo ( sk , flags & MSG_DONTWAIT ) ; //<S2SV> do { //<S2SV> struct sk_buff * skb ; //<S2SV> int chunk ; //<S2SV> skb = skb_dequeue ( & sk -> sk_receive_queue ) ; //<S2SV> if ( ! skb ) { //<S2SV> if ( copied >= target ) //<S2SV> break ; //<S2SV> err = sock_error ( sk ) ; //<S2SV> if ( err ) //<S2SV> break ; //<S2SV> if ( sk -> sk_shutdown & RCV_SHUTDOWN ) //<S2SV> break ; //<S2SV> err = - EAGAIN ; //<S2SV> if ( ! timeo ) //<S2SV> break ; //<S2SV> timeo = bt_sock_data_wait ( sk , timeo ) ; //<S2SV> if ( signal_pending ( current ) ) { //<S2SV> err = sock_intr_errno ( timeo ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> chunk = min_t ( unsigned int , skb -> len , size ) ; //<S2SV> if ( skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , chunk ) ) { //<S2SV> skb_queue_head ( & sk -> sk_receive_queue , skb ) ; //<S2SV> if ( ! copied ) //<S2SV> copied = - EFAULT ; //<S2SV> break ; //<S2SV> } //<S2SV> copied += chunk ; //<S2SV> size -= chunk ; //<S2SV> sock_recv_ts_and_drops ( msg , sk , skb ) ; //<S2SV> if ( ! ( flags & MSG_PEEK ) ) { //<S2SV> int skb_len = skb_headlen ( skb ) ; //<S2SV> if ( chunk <= skb_len ) { //<S2SV> __skb_pull ( skb , chunk ) ; //<S2SV> } else { //<S2SV> struct sk_buff * frag ; //<S2SV> __skb_pull ( skb , skb_len ) ; //<S2SV> chunk -= skb_len ; //<S2SV> skb_walk_frags ( skb , frag ) { //<S2SV> if ( chunk <= frag -> len ) { //<S2SV> skb -> len -= chunk ; //<S2SV> skb -> data_len -= chunk ; //<S2SV> __skb_pull ( frag , chunk ) ; //<S2SV> break ; //<S2SV> } else if ( frag -> len ) { //<S2SV> chunk -= frag -> len ; //<S2SV> skb -> len -= frag -> len ; //<S2SV> skb -> data_len -= frag -> len ; //<S2SV> __skb_pull ( frag , frag -> len ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( skb -> len ) { //<S2SV> skb_queue_head ( & sk -> sk_receive_queue , skb ) ; //<S2SV> break ; //<S2SV> } //<S2SV> kfree_skb ( skb ) ; //<S2SV> } else { //<S2SV> skb_queue_head ( & sk -> sk_receive_queue , skb ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } while ( size ) ; //<S2SV> out : //<S2SV> release_sock ( sk ) ; //<S2SV> return copied ? : err ; //<S2SV> } //<S2SV> 