int verify_iovec ( struct msghdr * m , struct iovec * iov , struct sockaddr_storage * address , int mode ) //<S2SV> { //<S2SV> int size , ct , err ; //<S2SV> if ( m -> msg_namelen ) { //<S2SV> if ( mode == VERIFY_READ ) { //<S2SV> void __user * namep ; //<S2SV> namep = ( void __user __force * ) m -> msg_name ; //<S2SV> err = move_addr_to_kernel ( namep , m -> msg_namelen , //<S2SV> address ) ; //<S2SV> if ( err < 0 ) //<S2SV> return err ; //<S2SV> } //<S2SV> m -> msg_name = address ; //<S2SV> } else { //<S2SV> m -> msg_name = NULL ; //<S2SV> } //<S2SV> size = m -> msg_iovlen * sizeof ( struct iovec ) ; //<S2SV> if ( copy_from_user ( iov , ( void __user __force * ) m -> msg_iov , size ) ) //<S2SV> return - EFAULT ; //<S2SV> m -> msg_iov = iov ; //<S2SV> err = 0 ; //<S2SV> for ( ct = 0 ; ct < m -> msg_iovlen ; ct ++ ) { //<S2SV> size_t len = iov [ ct ] . iov_len ; //<S2SV> if ( len > INT_MAX - err ) { //<S2SV> len = INT_MAX - err ; //<S2SV> iov [ ct ] . iov_len = len ; //<S2SV> } //<S2SV> err += len ; //<S2SV> } //<S2SV> return err ; //<S2SV> } //<S2SV> 