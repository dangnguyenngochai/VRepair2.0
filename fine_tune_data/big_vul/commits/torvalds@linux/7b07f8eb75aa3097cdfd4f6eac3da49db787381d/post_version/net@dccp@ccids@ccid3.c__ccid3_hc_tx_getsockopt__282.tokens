static int ccid3_hc_tx_getsockopt ( struct sock * sk , const int optname , int len , //<S2SV> u32 __user * optval , int __user * optlen ) //<S2SV> { //<S2SV> const struct ccid3_hc_tx_sock * hc = ccid3_hc_tx_sk ( sk ) ; //<S2SV> struct tfrc_tx_info tfrc ; //<S2SV> const void * val ; //<S2SV> switch ( optname ) { //<S2SV> case DCCP_SOCKOPT_CCID_TX_INFO : //<S2SV> if ( len < sizeof ( tfrc ) ) //<S2SV> return - EINVAL ; //<S2SV> memset ( & tfrc , 0 , sizeof ( tfrc ) ) ; //<S2SV> tfrc . tfrctx_x = hc -> tx_x ; //<S2SV> tfrc . tfrctx_x_recv = hc -> tx_x_recv ; //<S2SV> tfrc . tfrctx_x_calc = hc -> tx_x_calc ; //<S2SV> tfrc . tfrctx_rtt = hc -> tx_rtt ; //<S2SV> tfrc . tfrctx_p = hc -> tx_p ; //<S2SV> tfrc . tfrctx_rto = hc -> tx_t_rto ; //<S2SV> tfrc . tfrctx_ipi = hc -> tx_t_ipi ; //<S2SV> len = sizeof ( tfrc ) ; //<S2SV> val = & tfrc ; //<S2SV> break ; //<S2SV> default : //<S2SV> return - ENOPROTOOPT ; //<S2SV> } //<S2SV> if ( put_user ( len , optlen ) || copy_to_user ( optval , val , len ) ) //<S2SV> return - EFAULT ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 