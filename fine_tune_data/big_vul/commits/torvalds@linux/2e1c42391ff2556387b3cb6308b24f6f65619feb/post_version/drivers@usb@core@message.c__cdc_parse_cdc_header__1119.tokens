int cdc_parse_cdc_header ( struct usb_cdc_parsed_header * hdr , //<S2SV> struct usb_interface * intf , //<S2SV> u8 * buffer , //<S2SV> int buflen ) //<S2SV> { //<S2SV> struct usb_cdc_union_desc * union_header = NULL ; //<S2SV> struct usb_cdc_header_desc * header = NULL ; //<S2SV> struct usb_cdc_ether_desc * ether = NULL ; //<S2SV> struct usb_cdc_mdlm_detail_desc * detail = NULL ; //<S2SV> struct usb_cdc_mdlm_desc * desc = NULL ; //<S2SV> unsigned int elength ; //<S2SV> int cnt = 0 ; //<S2SV> memset ( hdr , 0x00 , sizeof ( struct usb_cdc_parsed_header ) ) ; //<S2SV> hdr -> phonet_magic_present = false ; //<S2SV> while ( buflen > 0 ) { //<S2SV> elength = buffer [ 0 ] ; //<S2SV> if ( ! elength ) { //<S2SV> dev_err ( & intf -> dev , "skipping<S2SV_blank>garbage<S2SV_blank>byte\\n" ) ; //<S2SV> elength = 1 ; //<S2SV> goto next_desc ; //<S2SV> } //<S2SV> if ( ( buflen < elength ) || ( elength < 3 ) ) { //<S2SV> dev_err ( & intf -> dev , "invalid<S2SV_blank>descriptor<S2SV_blank>buffer<S2SV_blank>length\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( buffer [ 1 ] != USB_DT_CS_INTERFACE ) { //<S2SV> dev_err ( & intf -> dev , "skipping<S2SV_blank>garbage\\n" ) ; //<S2SV> goto next_desc ; //<S2SV> } //<S2SV> switch ( buffer [ 2 ] ) { //<S2SV> case USB_CDC_UNION_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_union_desc ) ) //<S2SV> goto next_desc ; //<S2SV> if ( union_header ) { //<S2SV> dev_err ( & intf -> dev , "More<S2SV_blank>than<S2SV_blank>one<S2SV_blank>union<S2SV_blank>descriptor,<S2SV_blank>skipping<S2SV_blank>...\\n" ) ; //<S2SV> goto next_desc ; //<S2SV> } //<S2SV> union_header = ( struct usb_cdc_union_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_COUNTRY_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_country_functional_desc ) ) //<S2SV> goto next_desc ; //<S2SV> hdr -> usb_cdc_country_functional_desc = //<S2SV> ( struct usb_cdc_country_functional_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_HEADER_TYPE : //<S2SV> if ( elength != sizeof ( struct usb_cdc_header_desc ) ) //<S2SV> goto next_desc ; //<S2SV> if ( header ) //<S2SV> return - EINVAL ; //<S2SV> header = ( struct usb_cdc_header_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_ACM_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_acm_descriptor ) ) //<S2SV> goto next_desc ; //<S2SV> hdr -> usb_cdc_acm_descriptor = //<S2SV> ( struct usb_cdc_acm_descriptor * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_ETHERNET_TYPE : //<S2SV> if ( elength != sizeof ( struct usb_cdc_ether_desc ) ) //<S2SV> goto next_desc ; //<S2SV> if ( ether ) //<S2SV> return - EINVAL ; //<S2SV> ether = ( struct usb_cdc_ether_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_CALL_MANAGEMENT_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_call_mgmt_descriptor ) ) //<S2SV> goto next_desc ; //<S2SV> hdr -> usb_cdc_call_mgmt_descriptor = //<S2SV> ( struct usb_cdc_call_mgmt_descriptor * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_DMM_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_dmm_desc ) ) //<S2SV> goto next_desc ; //<S2SV> hdr -> usb_cdc_dmm_desc = //<S2SV> ( struct usb_cdc_dmm_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_MDLM_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_mdlm_desc * ) ) //<S2SV> goto next_desc ; //<S2SV> if ( desc ) //<S2SV> return - EINVAL ; //<S2SV> desc = ( struct usb_cdc_mdlm_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_MDLM_DETAIL_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_mdlm_detail_desc * ) ) //<S2SV> goto next_desc ; //<S2SV> if ( detail ) //<S2SV> return - EINVAL ; //<S2SV> detail = ( struct usb_cdc_mdlm_detail_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_NCM_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_ncm_desc ) ) //<S2SV> goto next_desc ; //<S2SV> hdr -> usb_cdc_ncm_desc = ( struct usb_cdc_ncm_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_MBIM_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_mbim_desc ) ) //<S2SV> goto next_desc ; //<S2SV> hdr -> usb_cdc_mbim_desc = ( struct usb_cdc_mbim_desc * ) buffer ; //<S2SV> break ; //<S2SV> case USB_CDC_MBIM_EXTENDED_TYPE : //<S2SV> if ( elength < sizeof ( struct usb_cdc_mbim_extended_desc ) ) //<S2SV> break ; //<S2SV> hdr -> usb_cdc_mbim_extended_desc = //<S2SV> ( struct usb_cdc_mbim_extended_desc * ) buffer ; //<S2SV> break ; //<S2SV> case CDC_PHONET_MAGIC_NUMBER : //<S2SV> hdr -> phonet_magic_present = true ; //<S2SV> break ; //<S2SV> default : //<S2SV> dev_dbg ( & intf -> dev , "Ignoring<S2SV_blank>descriptor:<S2SV_blank>type<S2SV_blank>%02x,<S2SV_blank>length<S2SV_blank>%ud\\n" , //<S2SV> buffer [ 2 ] , elength ) ; //<S2SV> goto next_desc ; //<S2SV> } //<S2SV> cnt ++ ; //<S2SV> next_desc : //<S2SV> buflen -= elength ; //<S2SV> buffer += elength ; //<S2SV> } //<S2SV> hdr -> usb_cdc_union_desc = union_header ; //<S2SV> hdr -> usb_cdc_header_desc = header ; //<S2SV> hdr -> usb_cdc_mdlm_detail_desc = detail ; //<S2SV> hdr -> usb_cdc_mdlm_desc = desc ; //<S2SV> hdr -> usb_cdc_ether_desc = ether ; //<S2SV> return cnt ; //<S2SV> } //<S2SV> 