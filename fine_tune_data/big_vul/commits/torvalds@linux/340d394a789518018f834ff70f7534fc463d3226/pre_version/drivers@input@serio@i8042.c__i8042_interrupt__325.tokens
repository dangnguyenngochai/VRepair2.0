static irqreturn_t i8042_interrupt ( int irq , void * dev_id ) //<S2SV> { //<S2SV> struct i8042_port * port ; //<S2SV> struct serio * serio ; //<S2SV> unsigned long flags ; //<S2SV> unsigned char str , data ; //<S2SV> unsigned int dfl ; //<S2SV> unsigned int port_no ; //<S2SV> bool filtered ; //<S2SV> int ret = 1 ; //<S2SV> spin_lock_irqsave ( & i8042_lock , flags ) ; //<S2SV> str = i8042_read_status ( ) ; //<S2SV> if ( unlikely ( ~ str & I8042_STR_OBF ) ) { //<S2SV> spin_unlock_irqrestore ( & i8042_lock , flags ) ; //<S2SV> if ( irq ) //<S2SV> dbg ( "Interrupt<S2SV_blank>%d,<S2SV_blank>without<S2SV_blank>any<S2SV_blank>data\\n" , irq ) ; //<S2SV> ret = 0 ; //<S2SV> goto out ; //<S2SV> } //<S2SV> data = i8042_read_data ( ) ; //<S2SV> if ( i8042_mux_present && ( str & I8042_STR_AUXDATA ) ) { //<S2SV> static unsigned long last_transmit ; //<S2SV> static unsigned char last_str ; //<S2SV> dfl = 0 ; //<S2SV> if ( str & I8042_STR_MUXERR ) { //<S2SV> dbg ( "MUX<S2SV_blank>error,<S2SV_blank>status<S2SV_blank>is<S2SV_blank>%02x,<S2SV_blank>data<S2SV_blank>is<S2SV_blank>%02x\\n" , //<S2SV> str , data ) ; //<S2SV> switch ( data ) { //<S2SV> default : //<S2SV> if ( time_before ( jiffies , last_transmit + HZ / 10 ) ) { //<S2SV> str = last_str ; //<S2SV> break ; //<S2SV> } //<S2SV> case 0xfc : //<S2SV> case 0xfd : //<S2SV> case 0xfe : dfl = SERIO_TIMEOUT ; data = 0xfe ; break ; //<S2SV> case 0xff : dfl = SERIO_PARITY ; data = 0xfe ; break ; //<S2SV> } //<S2SV> } //<S2SV> port_no = I8042_MUX_PORT_NO + ( ( str >> 6 ) & 3 ) ; //<S2SV> last_str = str ; //<S2SV> last_transmit = jiffies ; //<S2SV> } else { //<S2SV> dfl = ( ( str & I8042_STR_PARITY ) ? SERIO_PARITY : 0 ) | //<S2SV> ( ( str & I8042_STR_TIMEOUT && ! i8042_notimeout ) ? SERIO_TIMEOUT : 0 ) ; //<S2SV> port_no = ( str & I8042_STR_AUXDATA ) ? //<S2SV> I8042_AUX_PORT_NO : I8042_KBD_PORT_NO ; //<S2SV> } //<S2SV> port = & i8042_ports [ port_no ] ; //<S2SV> serio = port -> exists ? port -> serio : NULL ; //<S2SV> filter_dbg ( port -> driver_bound , data , "<-<S2SV_blank>i8042<S2SV_blank>(interrupt,<S2SV_blank>%d,<S2SV_blank>%d%s%s)\\n" , //<S2SV> port_no , irq , //<S2SV> dfl & SERIO_PARITY ? ",<S2SV_blank>bad<S2SV_blank>parity" : "" , //<S2SV> dfl & SERIO_TIMEOUT ? ",<S2SV_blank>timeout" : "" ) ; //<S2SV> filtered = i8042_filter ( data , str , serio ) ; //<S2SV> spin_unlock_irqrestore ( & i8042_lock , flags ) ; //<S2SV> if ( likely ( port -> exists && ! filtered ) ) //<S2SV> serio_interrupt ( serio , data , dfl ) ; //<S2SV> out : //<S2SV> return IRQ_RETVAL ( ret ) ; //<S2SV> } //<S2SV> 