static int packet_do_bind ( struct sock * sk , const char * name , int ifindex , //<S2SV> __be16 proto ) //<S2SV> { //<S2SV> struct packet_sock * po = pkt_sk ( sk ) ; //<S2SV> struct net_device * dev_curr ; //<S2SV> __be16 proto_curr ; //<S2SV> bool need_rehook ; //<S2SV> struct net_device * dev = NULL ; //<S2SV> int ret = 0 ; //<S2SV> bool unlisted = false ; //<S2SV> lock_sock ( sk ) ; //<S2SV> spin_lock ( & po -> bind_lock ) ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> if ( po -> fanout ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out_unlock ; //<S2SV> } //<S2SV> if ( name ) { //<S2SV> dev = dev_get_by_name_rcu ( sock_net ( sk ) , name ) ; //<S2SV> if ( ! dev ) { //<S2SV> ret = - ENODEV ; //<S2SV> goto out_unlock ; //<S2SV> } //<S2SV> } else if ( ifindex ) { //<S2SV> dev = dev_get_by_index_rcu ( sock_net ( sk ) , ifindex ) ; //<S2SV> if ( ! dev ) { //<S2SV> ret = - ENODEV ; //<S2SV> goto out_unlock ; //<S2SV> } //<S2SV> } //<S2SV> if ( dev ) //<S2SV> dev_hold ( dev ) ; //<S2SV> proto_curr = po -> prot_hook . type ; //<S2SV> dev_curr = po -> prot_hook . dev ; //<S2SV> need_rehook = proto_curr != proto || dev_curr != dev ; //<S2SV> if ( need_rehook ) { //<S2SV> if ( po -> running ) { //<S2SV> rcu_read_unlock ( ) ; //<S2SV> __unregister_prot_hook ( sk , true ) ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> dev_curr = po -> prot_hook . dev ; //<S2SV> if ( dev ) //<S2SV> unlisted = ! dev_get_by_index_rcu ( sock_net ( sk ) , //<S2SV> dev -> ifindex ) ; //<S2SV> } //<S2SV> po -> num = proto ; //<S2SV> po -> prot_hook . type = proto ; //<S2SV> if ( unlikely ( unlisted ) ) { //<S2SV> dev_put ( dev ) ; //<S2SV> po -> prot_hook . dev = NULL ; //<S2SV> po -> ifindex = - 1 ; //<S2SV> packet_cached_dev_reset ( po ) ; //<S2SV> } else { //<S2SV> po -> prot_hook . dev = dev ; //<S2SV> po -> ifindex = dev ? dev -> ifindex : 0 ; //<S2SV> packet_cached_dev_assign ( po , dev ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( dev_curr ) //<S2SV> dev_put ( dev_curr ) ; //<S2SV> if ( proto == 0 || ! need_rehook ) //<S2SV> goto out_unlock ; //<S2SV> if ( ! unlisted && ( ! dev || ( dev -> flags & IFF_UP ) ) ) { //<S2SV> register_prot_hook ( sk ) ; //<S2SV> } else { //<S2SV> sk -> sk_err = ENETDOWN ; //<S2SV> if ( ! sock_flag ( sk , SOCK_DEAD ) ) //<S2SV> sk -> sk_error_report ( sk ) ; //<S2SV> } //<S2SV> out_unlock : //<S2SV> rcu_read_unlock ( ) ; //<S2SV> spin_unlock ( & po -> bind_lock ) ; //<S2SV> release_sock ( sk ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 