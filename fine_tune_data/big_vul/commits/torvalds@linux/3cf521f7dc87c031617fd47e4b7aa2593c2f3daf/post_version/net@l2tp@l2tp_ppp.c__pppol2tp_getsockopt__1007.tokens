static int pppol2tp_getsockopt ( struct socket * sock , int level , int optname , //<S2SV> char __user * optval , int __user * optlen ) //<S2SV> { //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct l2tp_session * session ; //<S2SV> struct l2tp_tunnel * tunnel ; //<S2SV> int val , len ; //<S2SV> int err ; //<S2SV> struct pppol2tp_session * ps ; //<S2SV> if ( level != SOL_PPPOL2TP ) //<S2SV> return - EINVAL ; //<S2SV> if ( get_user ( len , optlen ) ) //<S2SV> return - EFAULT ; //<S2SV> len = min_t ( unsigned int , len , sizeof ( int ) ) ; //<S2SV> if ( len < 0 ) //<S2SV> return - EINVAL ; //<S2SV> err = - ENOTCONN ; //<S2SV> if ( sk -> sk_user_data == NULL ) //<S2SV> goto end ; //<S2SV> err = - EBADF ; //<S2SV> session = pppol2tp_sock_to_session ( sk ) ; //<S2SV> if ( session == NULL ) //<S2SV> goto end ; //<S2SV> ps = l2tp_session_priv ( session ) ; //<S2SV> if ( ( session -> session_id == 0 ) && //<S2SV> ( session -> peer_session_id == 0 ) ) { //<S2SV> err = - EBADF ; //<S2SV> tunnel = l2tp_sock_to_tunnel ( ps -> tunnel_sock ) ; //<S2SV> if ( tunnel == NULL ) //<S2SV> goto end_put_sess ; //<S2SV> err = pppol2tp_tunnel_getsockopt ( sk , tunnel , optname , & val ) ; //<S2SV> sock_put ( ps -> tunnel_sock ) ; //<S2SV> } else //<S2SV> err = pppol2tp_session_getsockopt ( sk , session , optname , & val ) ; //<S2SV> err = - EFAULT ; //<S2SV> if ( put_user ( len , optlen ) ) //<S2SV> goto end_put_sess ; //<S2SV> if ( copy_to_user ( ( void __user * ) optval , & val , len ) ) //<S2SV> goto end_put_sess ; //<S2SV> err = 0 ; //<S2SV> end_put_sess : //<S2SV> sock_put ( sk ) ; //<S2SV> end : //<S2SV> return err ; //<S2SV> } //<S2SV> 