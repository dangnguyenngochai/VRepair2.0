static void make_response ( struct xen_blkif_ring * ring , u64 id , //<S2SV> unsigned short op , int st ) //<S2SV> { //<S2SV> struct blkif_response * resp ; //<S2SV> unsigned long flags ; //<S2SV> union blkif_back_rings * blk_rings ; //<S2SV> int notify ; //<S2SV> spin_lock_irqsave ( & ring -> blk_ring_lock , flags ) ; //<S2SV> blk_rings = & ring -> blk_rings ; //<S2SV> switch ( ring -> blkif -> blk_protocol ) { //<S2SV> case BLKIF_PROTOCOL_NATIVE : //<S2SV> resp = RING_GET_RESPONSE ( & blk_rings -> native , //<S2SV> blk_rings -> native . rsp_prod_pvt ) ; //<S2SV> break ; //<S2SV> case BLKIF_PROTOCOL_X86_32 : //<S2SV> resp = RING_GET_RESPONSE ( & blk_rings -> x86_32 , //<S2SV> blk_rings -> x86_32 . rsp_prod_pvt ) ; //<S2SV> break ; //<S2SV> case BLKIF_PROTOCOL_X86_64 : //<S2SV> resp = RING_GET_RESPONSE ( & blk_rings -> x86_64 , //<S2SV> blk_rings -> x86_64 . rsp_prod_pvt ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> BUG ( ) ; //<S2SV> } //<S2SV> resp -> id = id ; //<S2SV> resp -> operation = op ; //<S2SV> resp -> status = st ; //<S2SV> blk_rings -> common . rsp_prod_pvt ++ ; //<S2SV> RING_PUSH_RESPONSES_AND_CHECK_NOTIFY ( & blk_rings -> common , notify ) ; //<S2SV> spin_unlock_irqrestore ( & ring -> blk_ring_lock , flags ) ; //<S2SV> if ( notify ) //<S2SV> notify_remote_via_irq ( ring -> irq ) ; //<S2SV> } //<S2SV> 