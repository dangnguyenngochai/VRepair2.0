int //<S2SV> xfs_attr_shortform_list ( xfs_attr_list_context_t * context ) //<S2SV> { //<S2SV> attrlist_cursor_kern_t * cursor ; //<S2SV> xfs_attr_sf_sort_t * sbuf , * sbp ; //<S2SV> xfs_attr_shortform_t * sf ; //<S2SV> xfs_attr_sf_entry_t * sfe ; //<S2SV> xfs_inode_t * dp ; //<S2SV> int sbsize , nsbuf , count , i ; //<S2SV> int error ; //<S2SV> ASSERT ( context != NULL ) ; //<S2SV> dp = context -> dp ; //<S2SV> ASSERT ( dp != NULL ) ; //<S2SV> ASSERT ( dp -> i_afp != NULL ) ; //<S2SV> sf = ( xfs_attr_shortform_t * ) dp -> i_afp -> if_u1 . if_data ; //<S2SV> ASSERT ( sf != NULL ) ; //<S2SV> if ( ! sf -> hdr . count ) //<S2SV> return 0 ; //<S2SV> cursor = context -> cursor ; //<S2SV> ASSERT ( cursor != NULL ) ; //<S2SV> trace_xfs_attr_list_sf ( context ) ; //<S2SV> if ( context -> bufsize == 0 || //<S2SV> ( XFS_ISRESET_CURSOR ( cursor ) && //<S2SV> ( dp -> i_afp -> if_bytes + sf -> hdr . count * 16 ) < context -> bufsize ) ) { //<S2SV> for ( i = 0 , sfe = & sf -> list [ 0 ] ; i < sf -> hdr . count ; i ++ ) { //<S2SV> error = context -> put_listent ( context , //<S2SV> sfe -> flags , //<S2SV> sfe -> nameval , //<S2SV> ( int ) sfe -> namelen , //<S2SV> ( int ) sfe -> valuelen , //<S2SV> & sfe -> nameval [ sfe -> namelen ] ) ; //<S2SV> if ( context -> seen_enough ) //<S2SV> break ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; //<S2SV> } //<S2SV> trace_xfs_attr_list_sf_all ( context ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( context -> bufsize == 0 ) //<S2SV> return 0 ; //<S2SV> sbsize = sf -> hdr . count * sizeof ( * sbuf ) ; //<S2SV> sbp = sbuf = kmem_alloc ( sbsize , KM_SLEEP | KM_NOFS ) ; //<S2SV> nsbuf = 0 ; //<S2SV> for ( i = 0 , sfe = & sf -> list [ 0 ] ; i < sf -> hdr . count ; i ++ ) { //<S2SV> if ( unlikely ( //<S2SV> ( ( char * ) sfe < ( char * ) sf ) || //<S2SV> ( ( char * ) sfe >= ( ( char * ) sf + dp -> i_afp -> if_bytes ) ) ) ) { //<S2SV> XFS_CORRUPTION_ERROR ( "xfs_attr_shortform_list" , //<S2SV> XFS_ERRLEVEL_LOW , //<S2SV> context -> dp -> i_mount , sfe ) ; //<S2SV> kmem_free ( sbuf ) ; //<S2SV> return - EFSCORRUPTED ; //<S2SV> } //<S2SV> sbp -> entno = i ; //<S2SV> sbp -> hash = xfs_da_hashname ( sfe -> nameval , sfe -> namelen ) ; //<S2SV> sbp -> name = sfe -> nameval ; //<S2SV> sbp -> namelen = sfe -> namelen ; //<S2SV> sbp -> valuelen = sfe -> valuelen ; //<S2SV> sbp -> flags = sfe -> flags ; //<S2SV> sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; //<S2SV> sbp ++ ; //<S2SV> nsbuf ++ ; //<S2SV> } //<S2SV> xfs_sort ( sbuf , nsbuf , sizeof ( * sbuf ) , xfs_attr_shortform_compare ) ; //<S2SV> count = 0 ; //<S2SV> cursor -> initted = 1 ; //<S2SV> cursor -> blkno = 0 ; //<S2SV> for ( sbp = sbuf , i = 0 ; i < nsbuf ; i ++ , sbp ++ ) { //<S2SV> if ( sbp -> hash == cursor -> hashval ) { //<S2SV> if ( cursor -> offset == count ) { //<S2SV> break ; //<S2SV> } //<S2SV> count ++ ; //<S2SV> } else if ( sbp -> hash > cursor -> hashval ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( i == nsbuf ) { //<S2SV> kmem_free ( sbuf ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> for ( ; i < nsbuf ; i ++ , sbp ++ ) { //<S2SV> if ( cursor -> hashval != sbp -> hash ) { //<S2SV> cursor -> hashval = sbp -> hash ; //<S2SV> cursor -> offset = 0 ; //<S2SV> } //<S2SV> error = context -> put_listent ( context , //<S2SV> sbp -> flags , //<S2SV> sbp -> name , //<S2SV> sbp -> namelen , //<S2SV> sbp -> valuelen , //<S2SV> & sbp -> name [ sbp -> namelen ] ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> if ( context -> seen_enough ) //<S2SV> break ; //<S2SV> cursor -> offset ++ ; //<S2SV> } //<S2SV> kmem_free ( sbuf ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 