static int pcd_detect ( void ) //<S2SV> { //<S2SV> char id [ 18 ] ; //<S2SV> int k , unit ; //<S2SV> struct pcd_unit * cd ; //<S2SV> printk ( "%s:<S2SV_blank>%s<S2SV_blank>version<S2SV_blank>%s,<S2SV_blank>major<S2SV_blank>%d,<S2SV_blank>nice<S2SV_blank>%d\\n" , //<S2SV> name , name , PCD_VERSION , major , nice ) ; //<S2SV> par_drv = pi_register_driver ( name ) ; //<S2SV> if ( ! par_drv ) { //<S2SV> pr_err ( "failed<S2SV_blank>to<S2SV_blank>register<S2SV_blank>%s<S2SV_blank>driver\\n" , name ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> k = 0 ; //<S2SV> if ( pcd_drive_count == 0 ) { //<S2SV> cd = pcd ; //<S2SV> if ( pi_init ( cd -> pi , 1 , - 1 , - 1 , - 1 , - 1 , - 1 , pcd_buffer , //<S2SV> PI_PCD , verbose , cd -> name ) ) { //<S2SV> if ( ! pcd_probe ( cd , - 1 , id ) && cd -> disk ) { //<S2SV> cd -> present = 1 ; //<S2SV> k ++ ; //<S2SV> } else //<S2SV> pi_release ( cd -> pi ) ; //<S2SV> } //<S2SV> } else { //<S2SV> for ( unit = 0 , cd = pcd ; unit < PCD_UNITS ; unit ++ , cd ++ ) { //<S2SV> int * conf = * drives [ unit ] ; //<S2SV> if ( ! conf [ D_PRT ] ) //<S2SV> continue ; //<S2SV> if ( ! pi_init ( cd -> pi , 0 , conf [ D_PRT ] , conf [ D_MOD ] , //<S2SV> conf [ D_UNI ] , conf [ D_PRO ] , conf [ D_DLY ] , //<S2SV> pcd_buffer , PI_PCD , verbose , cd -> name ) ) //<S2SV> continue ; //<S2SV> if ( ! pcd_probe ( cd , conf [ D_SLV ] , id ) && cd -> disk ) { //<S2SV> cd -> present = 1 ; //<S2SV> k ++ ; //<S2SV> } else //<S2SV> pi_release ( cd -> pi ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( k ) //<S2SV> return 0 ; //<S2SV> printk ( "%s:<S2SV_blank>No<S2SV_blank>CD-ROM<S2SV_blank>drive<S2SV_blank>found\\n" , name ) ; //<S2SV> for ( unit = 0 , cd = pcd ; unit < PCD_UNITS ; unit ++ , cd ++ ) { //<S2SV> blk_cleanup_queue ( cd -> disk -> queue ) ; //<S2SV> cd -> disk -> queue = NULL ; //<S2SV> blk_mq_free_tag_set ( & cd -> tag_set ) ; //<S2SV> put_disk ( cd -> disk ) ; //<S2SV> } //<S2SV> pi_unregister_driver ( par_drv ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 