int //<S2SV> nfsd_dispatch ( struct svc_rqst * rqstp , __be32 * statp ) //<S2SV> { //<S2SV> struct svc_procedure * proc ; //<S2SV> kxdrproc_t xdr ; //<S2SV> __be32 nfserr ; //<S2SV> __be32 * nfserrp ; //<S2SV> dprintk ( "nfsd_dispatch:<S2SV_blank>vers<S2SV_blank>%d<S2SV_blank>proc<S2SV_blank>%d\\n" , //<S2SV> rqstp -> rq_vers , rqstp -> rq_proc ) ; //<S2SV> proc = rqstp -> rq_procinfo ; //<S2SV> rqstp -> rq_cachetype = proc -> pc_cachetype ; //<S2SV> xdr = proc -> pc_decode ; //<S2SV> if ( xdr && ! xdr ( rqstp , ( __be32 * ) rqstp -> rq_arg . head [ 0 ] . iov_base , //<S2SV> rqstp -> rq_argp ) ) { //<S2SV> dprintk ( "nfsd:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>decode<S2SV_blank>arguments!\\n" ) ; //<S2SV> * statp = rpc_garbage_args ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> switch ( nfsd_cache_lookup ( rqstp ) ) { //<S2SV> case RC_DROPIT : //<S2SV> return 0 ; //<S2SV> case RC_REPLY : //<S2SV> return 1 ; //<S2SV> case RC_DOIT : ; //<S2SV> } //<S2SV> nfserrp = rqstp -> rq_res . head [ 0 ] . iov_base //<S2SV> + rqstp -> rq_res . head [ 0 ] . iov_len ; //<S2SV> rqstp -> rq_res . head [ 0 ] . iov_len += sizeof ( __be32 ) ; //<S2SV> nfserr = proc -> pc_func ( rqstp , rqstp -> rq_argp , rqstp -> rq_resp ) ; //<S2SV> nfserr = map_new_errors ( rqstp -> rq_vers , nfserr ) ; //<S2SV> if ( nfserr == nfserr_dropit || test_bit ( RQ_DROPME , & rqstp -> rq_flags ) ) { //<S2SV> dprintk ( "nfsd:<S2SV_blank>Dropping<S2SV_blank>request;<S2SV_blank>may<S2SV_blank>be<S2SV_blank>revisited<S2SV_blank>later\\n" ) ; //<S2SV> nfsd_cache_update ( rqstp , RC_NOCACHE , NULL ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( rqstp -> rq_proc != 0 ) //<S2SV> * nfserrp ++ = nfserr ; //<S2SV> if ( ! ( nfserr && rqstp -> rq_vers == 2 ) ) { //<S2SV> xdr = proc -> pc_encode ; //<S2SV> if ( xdr && ! xdr ( rqstp , nfserrp , //<S2SV> rqstp -> rq_resp ) ) { //<S2SV> dprintk ( "nfsd:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>result!\\n" ) ; //<S2SV> nfsd_cache_update ( rqstp , RC_NOCACHE , NULL ) ; //<S2SV> * statp = rpc_system_err ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> } //<S2SV> nfsd_cache_update ( rqstp , rqstp -> rq_cachetype , statp + 1 ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 