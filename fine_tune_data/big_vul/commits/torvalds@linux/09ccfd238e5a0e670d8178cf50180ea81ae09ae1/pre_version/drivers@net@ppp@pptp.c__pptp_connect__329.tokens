static int pptp_connect ( struct socket * sock , struct sockaddr * uservaddr , //<S2SV> int sockaddr_len , int flags ) //<S2SV> { //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct sockaddr_pppox * sp = ( struct sockaddr_pppox * ) uservaddr ; //<S2SV> struct pppox_sock * po = pppox_sk ( sk ) ; //<S2SV> struct pptp_opt * opt = & po -> proto . pptp ; //<S2SV> struct rtable * rt ; //<S2SV> struct flowi4 fl4 ; //<S2SV> int error = 0 ; //<S2SV> if ( sp -> sa_protocol != PX_PROTO_PPTP ) //<S2SV> return - EINVAL ; //<S2SV> if ( lookup_chan_dst ( sp -> sa_addr . pptp . call_id , sp -> sa_addr . pptp . sin_addr . s_addr ) ) //<S2SV> return - EALREADY ; //<S2SV> lock_sock ( sk ) ; //<S2SV> if ( sk -> sk_state & PPPOX_CONNECTED ) { //<S2SV> error = - EBUSY ; //<S2SV> goto end ; //<S2SV> } //<S2SV> if ( sk -> sk_state & PPPOX_DEAD ) { //<S2SV> error = - EALREADY ; //<S2SV> goto end ; //<S2SV> } //<S2SV> if ( ! opt -> src_addr . sin_addr . s_addr || ! sp -> sa_addr . pptp . sin_addr . s_addr ) { //<S2SV> error = - EINVAL ; //<S2SV> goto end ; //<S2SV> } //<S2SV> po -> chan . private = sk ; //<S2SV> po -> chan . ops = & pptp_chan_ops ; //<S2SV> rt = ip_route_output_ports ( sock_net ( sk ) , & fl4 , sk , //<S2SV> opt -> dst_addr . sin_addr . s_addr , //<S2SV> opt -> src_addr . sin_addr . s_addr , //<S2SV> 0 , 0 , //<S2SV> IPPROTO_GRE , RT_CONN_FLAGS ( sk ) , 0 ) ; //<S2SV> if ( IS_ERR ( rt ) ) { //<S2SV> error = - EHOSTUNREACH ; //<S2SV> goto end ; //<S2SV> } //<S2SV> sk_setup_caps ( sk , & rt -> dst ) ; //<S2SV> po -> chan . mtu = dst_mtu ( & rt -> dst ) ; //<S2SV> if ( ! po -> chan . mtu ) //<S2SV> po -> chan . mtu = PPP_MRU ; //<S2SV> ip_rt_put ( rt ) ; //<S2SV> po -> chan . mtu -= PPTP_HEADER_OVERHEAD ; //<S2SV> po -> chan . hdrlen = 2 + sizeof ( struct pptp_gre_header ) ; //<S2SV> error = ppp_register_channel ( & po -> chan ) ; //<S2SV> if ( error ) { //<S2SV> pr_err ( "PPTP:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>register<S2SV_blank>PPP<S2SV_blank>channel<S2SV_blank>(%d)\\n" , error ) ; //<S2SV> goto end ; //<S2SV> } //<S2SV> opt -> dst_addr = sp -> sa_addr . pptp ; //<S2SV> sk -> sk_state = PPPOX_CONNECTED ; //<S2SV> end : //<S2SV> release_sock ( sk ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 