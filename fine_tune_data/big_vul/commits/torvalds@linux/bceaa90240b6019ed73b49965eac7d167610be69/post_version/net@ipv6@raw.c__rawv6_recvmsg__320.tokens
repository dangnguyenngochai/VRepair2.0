static int rawv6_recvmsg ( struct kiocb * iocb , struct sock * sk , //<S2SV> struct msghdr * msg , size_t len , //<S2SV> int noblock , int flags , int * addr_len ) //<S2SV> { //<S2SV> struct ipv6_pinfo * np = inet6_sk ( sk ) ; //<S2SV> struct sockaddr_in6 * sin6 = ( struct sockaddr_in6 * ) msg -> msg_name ; //<S2SV> struct sk_buff * skb ; //<S2SV> size_t copied ; //<S2SV> int err ; //<S2SV> if ( flags & MSG_OOB ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> if ( flags & MSG_ERRQUEUE ) //<S2SV> return ipv6_recv_error ( sk , msg , len ) ; //<S2SV> if ( np -> rxpmtu && np -> rxopt . bits . rxpmtu ) //<S2SV> return ipv6_recv_rxpmtu ( sk , msg , len ) ; //<S2SV> skb = skb_recv_datagram ( sk , flags , noblock , & err ) ; //<S2SV> if ( ! skb ) //<S2SV> goto out ; //<S2SV> copied = skb -> len ; //<S2SV> if ( copied > len ) { //<S2SV> copied = len ; //<S2SV> msg -> msg_flags |= MSG_TRUNC ; //<S2SV> } //<S2SV> if ( skb_csum_unnecessary ( skb ) ) { //<S2SV> err = skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , copied ) ; //<S2SV> } else if ( msg -> msg_flags & MSG_TRUNC ) { //<S2SV> if ( __skb_checksum_complete ( skb ) ) //<S2SV> goto csum_copy_err ; //<S2SV> err = skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , copied ) ; //<S2SV> } else { //<S2SV> err = skb_copy_and_csum_datagram_iovec ( skb , 0 , msg -> msg_iov ) ; //<S2SV> if ( err == - EINVAL ) //<S2SV> goto csum_copy_err ; //<S2SV> } //<S2SV> if ( err ) //<S2SV> goto out_free ; //<S2SV> if ( sin6 ) { //<S2SV> sin6 -> sin6_family = AF_INET6 ; //<S2SV> sin6 -> sin6_port = 0 ; //<S2SV> sin6 -> sin6_addr = ipv6_hdr ( skb ) -> saddr ; //<S2SV> sin6 -> sin6_flowinfo = 0 ; //<S2SV> sin6 -> sin6_scope_id = ipv6_iface_scope_id ( & sin6 -> sin6_addr , //<S2SV> IP6CB ( skb ) -> iif ) ; //<S2SV> * addr_len = sizeof ( * sin6 ) ; //<S2SV> } //<S2SV> sock_recv_ts_and_drops ( msg , sk , skb ) ; //<S2SV> if ( np -> rxopt . all ) //<S2SV> ip6_datagram_recv_ctl ( sk , msg , skb ) ; //<S2SV> err = copied ; //<S2SV> if ( flags & MSG_TRUNC ) //<S2SV> err = skb -> len ; //<S2SV> out_free : //<S2SV> skb_free_datagram ( sk , skb ) ; //<S2SV> out : //<S2SV> return err ; //<S2SV> csum_copy_err : //<S2SV> skb_kill_datagram ( sk , skb , flags ) ; //<S2SV> err = ( flags & MSG_DONTWAIT ) ? - EAGAIN : - EHOSTUNREACH ; //<S2SV> goto out ; //<S2SV> } //<S2SV> 