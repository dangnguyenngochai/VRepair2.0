static int raw_recvmsg ( struct kiocb * iocb , struct sock * sk , struct msghdr * msg , //<S2SV> size_t len , int noblock , int flags , int * addr_len ) //<S2SV> { //<S2SV> struct inet_sock * inet = inet_sk ( sk ) ; //<S2SV> size_t copied = 0 ; //<S2SV> int err = - EOPNOTSUPP ; //<S2SV> struct sockaddr_in * sin = ( struct sockaddr_in * ) msg -> msg_name ; //<S2SV> struct sk_buff * skb ; //<S2SV> if ( flags & MSG_OOB ) //<S2SV> goto out ; //<S2SV> if ( flags & MSG_ERRQUEUE ) { //<S2SV> err = ip_recv_error ( sk , msg , len ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> skb = skb_recv_datagram ( sk , flags , noblock , & err ) ; //<S2SV> if ( ! skb ) //<S2SV> goto out ; //<S2SV> copied = skb -> len ; //<S2SV> if ( len < copied ) { //<S2SV> msg -> msg_flags |= MSG_TRUNC ; //<S2SV> copied = len ; //<S2SV> } //<S2SV> err = skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , copied ) ; //<S2SV> if ( err ) //<S2SV> goto done ; //<S2SV> sock_recv_ts_and_drops ( msg , sk , skb ) ; //<S2SV> if ( sin ) { //<S2SV> sin -> sin_family = AF_INET ; //<S2SV> sin -> sin_addr . s_addr = ip_hdr ( skb ) -> saddr ; //<S2SV> sin -> sin_port = 0 ; //<S2SV> memset ( & sin -> sin_zero , 0 , sizeof ( sin -> sin_zero ) ) ; //<S2SV> * addr_len = sizeof ( * sin ) ; //<S2SV> } //<S2SV> if ( inet -> cmsg_flags ) //<S2SV> ip_cmsg_recv ( msg , skb ) ; //<S2SV> if ( flags & MSG_TRUNC ) //<S2SV> copied = skb -> len ; //<S2SV> done : //<S2SV> skb_free_datagram ( sk , skb ) ; //<S2SV> out : //<S2SV> if ( err ) //<S2SV> return err ; //<S2SV> return copied ; //<S2SV> } //<S2SV> 