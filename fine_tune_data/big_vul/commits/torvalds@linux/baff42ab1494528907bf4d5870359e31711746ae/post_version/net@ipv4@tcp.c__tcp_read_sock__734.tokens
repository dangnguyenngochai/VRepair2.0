int tcp_read_sock ( struct sock * sk , read_descriptor_t * desc , //<S2SV> sk_read_actor_t recv_actor ) //<S2SV> { //<S2SV> struct sk_buff * skb ; //<S2SV> struct tcp_sock * tp = tcp_sk ( sk ) ; //<S2SV> u32 seq = tp -> copied_seq ; //<S2SV> u32 offset ; //<S2SV> int copied = 0 ; //<S2SV> if ( sk -> sk_state == TCP_LISTEN ) //<S2SV> return - ENOTCONN ; //<S2SV> while ( ( skb = tcp_recv_skb ( sk , seq , & offset ) ) != NULL ) { //<S2SV> if ( offset < skb -> len ) { //<S2SV> int used ; //<S2SV> size_t len ; //<S2SV> len = skb -> len - offset ; //<S2SV> if ( tp -> urg_data ) { //<S2SV> u32 urg_offset = tp -> urg_seq - seq ; //<S2SV> if ( urg_offset < len ) //<S2SV> len = urg_offset ; //<S2SV> if ( ! len ) //<S2SV> break ; //<S2SV> } //<S2SV> used = recv_actor ( desc , skb , offset , len ) ; //<S2SV> if ( used < 0 ) { //<S2SV> if ( ! copied ) //<S2SV> copied = used ; //<S2SV> break ; //<S2SV> } else if ( used <= len ) { //<S2SV> seq += used ; //<S2SV> copied += used ; //<S2SV> offset += used ; //<S2SV> } //<S2SV> skb = tcp_recv_skb ( sk , seq - 1 , & offset ) ; //<S2SV> if ( ! skb || ( offset + 1 != skb -> len ) ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( tcp_hdr ( skb ) -> fin ) { //<S2SV> sk_eat_skb ( sk , skb , 0 ) ; //<S2SV> ++ seq ; //<S2SV> break ; //<S2SV> } //<S2SV> sk_eat_skb ( sk , skb , 0 ) ; //<S2SV> if ( ! desc -> count ) //<S2SV> break ; //<S2SV> tp -> copied_seq = seq ; //<S2SV> } //<S2SV> tp -> copied_seq = seq ; //<S2SV> tcp_rcv_space_adjust ( sk ) ; //<S2SV> if ( copied > 0 ) //<S2SV> tcp_cleanup_rbuf ( sk , copied ) ; //<S2SV> return copied ; //<S2SV> } //<S2SV> 