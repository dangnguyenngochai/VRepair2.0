static void command_port_read_callback ( struct urb * urb ) //<S2SV> { //<S2SV> struct usb_serial_port * command_port = urb -> context ; //<S2SV> struct whiteheat_command_private * command_info ; //<S2SV> int status = urb -> status ; //<S2SV> unsigned char * data = urb -> transfer_buffer ; //<S2SV> int result ; //<S2SV> command_info = usb_get_serial_port_data ( command_port ) ; //<S2SV> if ( ! command_info ) { //<S2SV> dev_dbg ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>command_info<S2SV_blank>is<S2SV_blank>NULL,<S2SV_blank>exiting.\\n" , __func__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( status ) { //<S2SV> dev_dbg ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>nonzero<S2SV_blank>urb<S2SV_blank>status:<S2SV_blank>%d\\n" , __func__ , status ) ; //<S2SV> if ( status != - ENOENT ) //<S2SV> command_info -> command_finished = WHITEHEAT_CMD_FAILURE ; //<S2SV> wake_up ( & command_info -> wait_command ) ; //<S2SV> return ; //<S2SV> } //<S2SV> usb_serial_debug_data ( & command_port -> dev , __func__ , urb -> actual_length , data ) ; //<S2SV> if ( data [ 0 ] == WHITEHEAT_CMD_COMPLETE ) { //<S2SV> command_info -> command_finished = WHITEHEAT_CMD_COMPLETE ; //<S2SV> wake_up ( & command_info -> wait_command ) ; //<S2SV> } else if ( data [ 0 ] == WHITEHEAT_CMD_FAILURE ) { //<S2SV> command_info -> command_finished = WHITEHEAT_CMD_FAILURE ; //<S2SV> wake_up ( & command_info -> wait_command ) ; //<S2SV> } else if ( data [ 0 ] == WHITEHEAT_EVENT ) { //<S2SV> dev_dbg ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>event<S2SV_blank>received\\n" , __func__ ) ; //<S2SV> } else if ( data [ 0 ] == WHITEHEAT_GET_DTR_RTS ) { //<S2SV> memcpy ( command_info -> result_buffer , & data [ 1 ] , //<S2SV> urb -> actual_length - 1 ) ; //<S2SV> command_info -> command_finished = WHITEHEAT_CMD_COMPLETE ; //<S2SV> wake_up ( & command_info -> wait_command ) ; //<S2SV> } else //<S2SV> dev_dbg ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>reply<S2SV_blank>from<S2SV_blank>firmware\\n" , __func__ ) ; //<S2SV> result = usb_submit_urb ( command_port -> read_urb , GFP_ATOMIC ) ; //<S2SV> if ( result ) //<S2SV> dev_dbg ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>failed<S2SV_blank>resubmitting<S2SV_blank>read<S2SV_blank>urb,<S2SV_blank>error<S2SV_blank>%d\\n" , //<S2SV> __func__ , result ) ; //<S2SV> } //<S2SV> 