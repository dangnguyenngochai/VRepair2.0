static int xc2028_set_config ( struct dvb_frontend * fe , void * priv_cfg ) //<S2SV> { //<S2SV> struct xc2028_data * priv = fe -> tuner_priv ; //<S2SV> struct xc2028_ctrl * p = priv_cfg ; //<S2SV> int rc = 0 ; //<S2SV> tuner_dbg ( "%s<S2SV_blank>called\\n" , __func__ ) ; //<S2SV> mutex_lock ( & priv -> lock ) ; //<S2SV> kfree ( priv -> ctrl . fname ) ; //<S2SV> priv -> ctrl . fname = NULL ; //<S2SV> memcpy ( & priv -> ctrl , p , sizeof ( priv -> ctrl ) ) ; //<S2SV> if ( p -> fname ) { //<S2SV> priv -> ctrl . fname = kstrdup ( p -> fname , GFP_KERNEL ) ; //<S2SV> if ( priv -> ctrl . fname == NULL ) //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> if ( ! firmware_name [ 0 ] && p -> fname && //<S2SV> priv -> fname && strcmp ( p -> fname , priv -> fname ) ) //<S2SV> free_firmware ( priv ) ; //<S2SV> if ( priv -> ctrl . max_len < 9 ) //<S2SV> priv -> ctrl . max_len = 13 ; //<S2SV> if ( priv -> state == XC2028_NO_FIRMWARE ) { //<S2SV> if ( ! firmware_name [ 0 ] ) //<S2SV> priv -> fname = priv -> ctrl . fname ; //<S2SV> else //<S2SV> priv -> fname = firmware_name ; //<S2SV> rc = request_firmware_nowait ( THIS_MODULE , 1 , //<S2SV> priv -> fname , //<S2SV> priv -> i2c_props . adap -> dev . parent , //<S2SV> GFP_KERNEL , //<S2SV> fe , load_firmware_cb ) ; //<S2SV> if ( rc < 0 ) { //<S2SV> tuner_err ( "Failed<S2SV_blank>to<S2SV_blank>request<S2SV_blank>firmware<S2SV_blank>%s\\n" , //<S2SV> priv -> fname ) ; //<S2SV> priv -> state = XC2028_NODEV ; //<S2SV> } else //<S2SV> priv -> state = XC2028_WAITING_FIRMWARE ; //<S2SV> } //<S2SV> mutex_unlock ( & priv -> lock ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> 