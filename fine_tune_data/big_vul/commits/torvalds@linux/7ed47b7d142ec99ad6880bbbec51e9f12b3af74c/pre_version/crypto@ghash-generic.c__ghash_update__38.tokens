static int ghash_update ( struct shash_desc * desc , //<S2SV> const u8 * src , unsigned int srclen ) //<S2SV> { //<S2SV> struct ghash_desc_ctx * dctx = shash_desc_ctx ( desc ) ; //<S2SV> struct ghash_ctx * ctx = crypto_shash_ctx ( desc -> tfm ) ; //<S2SV> u8 * dst = dctx -> buffer ; //<S2SV> if ( dctx -> bytes ) { //<S2SV> int n = min ( srclen , dctx -> bytes ) ; //<S2SV> u8 * pos = dst + ( GHASH_BLOCK_SIZE - dctx -> bytes ) ; //<S2SV> dctx -> bytes -= n ; //<S2SV> srclen -= n ; //<S2SV> while ( n -- ) //<S2SV> * pos ++ ^= * src ++ ; //<S2SV> if ( ! dctx -> bytes ) //<S2SV> gf128mul_4k_lle ( ( be128 * ) dst , ctx -> gf128 ) ; //<S2SV> } //<S2SV> while ( srclen >= GHASH_BLOCK_SIZE ) { //<S2SV> crypto_xor ( dst , src , GHASH_BLOCK_SIZE ) ; //<S2SV> gf128mul_4k_lle ( ( be128 * ) dst , ctx -> gf128 ) ; //<S2SV> src += GHASH_BLOCK_SIZE ; //<S2SV> srclen -= GHASH_BLOCK_SIZE ; //<S2SV> } //<S2SV> if ( srclen ) { //<S2SV> dctx -> bytes = GHASH_BLOCK_SIZE - srclen ; //<S2SV> while ( srclen -- ) //<S2SV> * dst ++ ^= * src ++ ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 