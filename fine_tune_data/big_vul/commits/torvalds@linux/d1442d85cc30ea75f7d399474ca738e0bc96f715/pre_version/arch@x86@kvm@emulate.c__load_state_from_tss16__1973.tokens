static int load_state_from_tss16 ( struct x86_emulate_ctxt * ctxt , //<S2SV> struct tss_segment_16 * tss ) //<S2SV> { //<S2SV> int ret ; //<S2SV> u8 cpl ; //<S2SV> ctxt -> _eip = tss -> ip ; //<S2SV> ctxt -> eflags = tss -> flag | 2 ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RAX ) = tss -> ax ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RCX ) = tss -> cx ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RDX ) = tss -> dx ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RBX ) = tss -> bx ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RSP ) = tss -> sp ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RBP ) = tss -> bp ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RSI ) = tss -> si ; //<S2SV> * reg_write ( ctxt , VCPU_REGS_RDI ) = tss -> di ; //<S2SV> set_segment_selector ( ctxt , tss -> ldt , VCPU_SREG_LDTR ) ; //<S2SV> set_segment_selector ( ctxt , tss -> es , VCPU_SREG_ES ) ; //<S2SV> set_segment_selector ( ctxt , tss -> cs , VCPU_SREG_CS ) ; //<S2SV> set_segment_selector ( ctxt , tss -> ss , VCPU_SREG_SS ) ; //<S2SV> set_segment_selector ( ctxt , tss -> ds , VCPU_SREG_DS ) ; //<S2SV> cpl = tss -> cs & 3 ; //<S2SV> ret = __load_segment_descriptor ( ctxt , tss -> ldt , VCPU_SREG_LDTR , cpl , true ) ; //<S2SV> if ( ret != X86EMUL_CONTINUE ) //<S2SV> return ret ; //<S2SV> ret = __load_segment_descriptor ( ctxt , tss -> es , VCPU_SREG_ES , cpl , true ) ; //<S2SV> if ( ret != X86EMUL_CONTINUE ) //<S2SV> return ret ; //<S2SV> ret = __load_segment_descriptor ( ctxt , tss -> cs , VCPU_SREG_CS , cpl , true ) ; //<S2SV> if ( ret != X86EMUL_CONTINUE ) //<S2SV> return ret ; //<S2SV> ret = __load_segment_descriptor ( ctxt , tss -> ss , VCPU_SREG_SS , cpl , true ) ; //<S2SV> if ( ret != X86EMUL_CONTINUE ) //<S2SV> return ret ; //<S2SV> ret = __load_segment_descriptor ( ctxt , tss -> ds , VCPU_SREG_DS , cpl , true ) ; //<S2SV> if ( ret != X86EMUL_CONTINUE ) //<S2SV> return ret ; //<S2SV> return X86EMUL_CONTINUE ; //<S2SV> } //<S2SV> 