int sctp_verify_asconf ( const struct sctp_association * asoc , //<S2SV> struct sctp_paramhdr * param_hdr , void * chunk_end , //<S2SV> struct sctp_paramhdr * * errp ) { //<S2SV> sctp_addip_param_t * asconf_param ; //<S2SV> union sctp_params param ; //<S2SV> int length , plen ; //<S2SV> param . v = ( sctp_paramhdr_t * ) param_hdr ; //<S2SV> while ( param . v <= chunk_end - sizeof ( sctp_paramhdr_t ) ) { //<S2SV> length = ntohs ( param . p -> length ) ; //<S2SV> * errp = param . p ; //<S2SV> if ( param . v > chunk_end - length || //<S2SV> length < sizeof ( sctp_paramhdr_t ) ) //<S2SV> return 0 ; //<S2SV> switch ( param . p -> type ) { //<S2SV> case SCTP_PARAM_ADD_IP : //<S2SV> case SCTP_PARAM_DEL_IP : //<S2SV> case SCTP_PARAM_SET_PRIMARY : //<S2SV> asconf_param = ( sctp_addip_param_t * ) param . v ; //<S2SV> plen = ntohs ( asconf_param -> param_hdr . length ) ; //<S2SV> if ( plen < sizeof ( sctp_addip_param_t ) + //<S2SV> sizeof ( sctp_paramhdr_t ) ) //<S2SV> return 0 ; //<S2SV> break ; //<S2SV> case SCTP_PARAM_SUCCESS_REPORT : //<S2SV> case SCTP_PARAM_ADAPTATION_LAYER_IND : //<S2SV> if ( length != sizeof ( sctp_addip_param_t ) ) //<S2SV> return 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> param . v += WORD_ROUND ( length ) ; //<S2SV> } //<S2SV> if ( param . v != chunk_end ) //<S2SV> return 0 ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 