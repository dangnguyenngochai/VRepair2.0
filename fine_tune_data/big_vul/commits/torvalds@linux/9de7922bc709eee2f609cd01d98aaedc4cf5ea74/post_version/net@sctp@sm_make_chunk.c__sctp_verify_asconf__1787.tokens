bool sctp_verify_asconf ( const struct sctp_association * asoc , //<S2SV> struct sctp_chunk * chunk , bool addr_param_needed , //<S2SV> struct sctp_paramhdr * * errp ) //<S2SV> { //<S2SV> sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) chunk -> chunk_hdr ; //<S2SV> union sctp_params param ; //<S2SV> bool addr_param_seen = false ; //<S2SV> sctp_walk_params ( param , addip , addip_hdr . params ) { //<S2SV> size_t length = ntohs ( param . p -> length ) ; //<S2SV> * errp = param . p ; //<S2SV> switch ( param . p -> type ) { //<S2SV> case SCTP_PARAM_ERR_CAUSE : //<S2SV> break ; //<S2SV> case SCTP_PARAM_IPV4_ADDRESS : //<S2SV> if ( length != sizeof ( sctp_ipv4addr_param_t ) ) //<S2SV> return false ; //<S2SV> addr_param_seen = true ; //<S2SV> break ; //<S2SV> case SCTP_PARAM_IPV6_ADDRESS : //<S2SV> if ( length != sizeof ( sctp_ipv6addr_param_t ) ) //<S2SV> return false ; //<S2SV> addr_param_seen = true ; //<S2SV> break ; //<S2SV> case SCTP_PARAM_ADD_IP : //<S2SV> case SCTP_PARAM_DEL_IP : //<S2SV> case SCTP_PARAM_SET_PRIMARY : //<S2SV> if ( addr_param_needed && ! addr_param_seen ) //<S2SV> return false ; //<S2SV> length = ntohs ( param . addip -> param_hdr . length ) ; //<S2SV> if ( length < sizeof ( sctp_addip_param_t ) + //<S2SV> sizeof ( sctp_paramhdr_t ) ) //<S2SV> return false ; //<S2SV> break ; //<S2SV> case SCTP_PARAM_SUCCESS_REPORT : //<S2SV> case SCTP_PARAM_ADAPTATION_LAYER_IND : //<S2SV> if ( length != sizeof ( sctp_addip_param_t ) ) //<S2SV> return false ; //<S2SV> break ; //<S2SV> default : //<S2SV> return false ; //<S2SV> } //<S2SV> } //<S2SV> if ( addr_param_needed && ! addr_param_seen ) //<S2SV> return false ; //<S2SV> if ( ! addr_param_needed && addr_param_seen ) //<S2SV> return false ; //<S2SV> if ( param . v != chunk -> chunk_end ) //<S2SV> return false ; //<S2SV> return true ; //<S2SV> } //<S2SV> 