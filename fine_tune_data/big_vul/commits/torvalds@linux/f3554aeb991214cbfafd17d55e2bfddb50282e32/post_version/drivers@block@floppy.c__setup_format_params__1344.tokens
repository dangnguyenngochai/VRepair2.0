static void setup_format_params ( int track ) //<S2SV> { //<S2SV> int n ; //<S2SV> int il ; //<S2SV> int count ; //<S2SV> int head_shift ; //<S2SV> int track_shift ; //<S2SV> struct fparm { //<S2SV> unsigned char track , head , sect , size ; //<S2SV> } * here = ( struct fparm * ) floppy_track_buffer ; //<S2SV> raw_cmd = & default_raw_cmd ; //<S2SV> raw_cmd -> track = track ; //<S2SV> raw_cmd -> flags = ( FD_RAW_WRITE | FD_RAW_INTR | FD_RAW_SPIN | //<S2SV> FD_RAW_NEED_DISK | FD_RAW_NEED_SEEK ) ; //<S2SV> raw_cmd -> rate = _floppy -> rate & 0x43 ; //<S2SV> raw_cmd -> cmd_count = NR_F ; //<S2SV> COMMAND = FM_MODE ( _floppy , FD_FORMAT ) ; //<S2SV> DR_SELECT = UNIT ( current_drive ) + PH_HEAD ( _floppy , format_req . head ) ; //<S2SV> F_SIZECODE = FD_SIZECODE ( _floppy ) ; //<S2SV> F_SECT_PER_TRACK = _floppy -> sect << 2 >> F_SIZECODE ; //<S2SV> F_GAP = _floppy -> fmt_gap ; //<S2SV> F_FILL = FD_FILL_BYTE ; //<S2SV> raw_cmd -> kernel_data = floppy_track_buffer ; //<S2SV> raw_cmd -> length = 4 * F_SECT_PER_TRACK ; //<S2SV> if ( ! F_SECT_PER_TRACK ) //<S2SV> return ; //<S2SV> head_shift = ( F_SECT_PER_TRACK + 5 ) / 6 ; //<S2SV> track_shift = 2 * head_shift + 3 ; //<S2SV> n = ( track_shift * format_req . track + head_shift * format_req . head ) //<S2SV> % F_SECT_PER_TRACK ; //<S2SV> il = 1 ; //<S2SV> if ( _floppy -> fmt_gap < 0x22 ) //<S2SV> il ++ ; //<S2SV> for ( count = 0 ; count < F_SECT_PER_TRACK ; ++ count ) { //<S2SV> here [ count ] . track = format_req . track ; //<S2SV> here [ count ] . head = format_req . head ; //<S2SV> here [ count ] . sect = 0 ; //<S2SV> here [ count ] . size = F_SIZECODE ; //<S2SV> } //<S2SV> for ( count = 1 ; count <= F_SECT_PER_TRACK ; ++ count ) { //<S2SV> here [ n ] . sect = count ; //<S2SV> n = ( n + il ) % F_SECT_PER_TRACK ; //<S2SV> if ( here [ n ] . sect ) { //<S2SV> ++ n ; //<S2SV> if ( n >= F_SECT_PER_TRACK ) { //<S2SV> n -= F_SECT_PER_TRACK ; //<S2SV> while ( here [ n ] . sect ) //<S2SV> ++ n ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( _floppy -> stretch & FD_SECTBASEMASK ) { //<S2SV> for ( count = 0 ; count < F_SECT_PER_TRACK ; count ++ ) //<S2SV> here [ count ] . sect += FD_SECTBASE ( _floppy ) - 1 ; //<S2SV> } //<S2SV> } //<S2SV> 