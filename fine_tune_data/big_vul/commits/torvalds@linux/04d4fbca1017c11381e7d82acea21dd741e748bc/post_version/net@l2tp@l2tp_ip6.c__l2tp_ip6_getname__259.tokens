static int l2tp_ip6_getname ( struct socket * sock , struct sockaddr * uaddr , //<S2SV> int * uaddr_len , int peer ) //<S2SV> { //<S2SV> struct sockaddr_l2tpip6 * lsa = ( struct sockaddr_l2tpip6 * ) uaddr ; //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct ipv6_pinfo * np = inet6_sk ( sk ) ; //<S2SV> struct l2tp_ip6_sock * lsk = l2tp_ip6_sk ( sk ) ; //<S2SV> lsa -> l2tp_family = AF_INET6 ; //<S2SV> lsa -> l2tp_flowinfo = 0 ; //<S2SV> lsa -> l2tp_scope_id = 0 ; //<S2SV> lsa -> l2tp_unused = 0 ; //<S2SV> if ( peer ) { //<S2SV> if ( ! lsk -> peer_conn_id ) //<S2SV> return - ENOTCONN ; //<S2SV> lsa -> l2tp_conn_id = lsk -> peer_conn_id ; //<S2SV> lsa -> l2tp_addr = np -> daddr ; //<S2SV> if ( np -> sndflow ) //<S2SV> lsa -> l2tp_flowinfo = np -> flow_label ; //<S2SV> } else { //<S2SV> if ( ipv6_addr_any ( & np -> rcv_saddr ) ) //<S2SV> lsa -> l2tp_addr = np -> saddr ; //<S2SV> else //<S2SV> lsa -> l2tp_addr = np -> rcv_saddr ; //<S2SV> lsa -> l2tp_conn_id = lsk -> conn_id ; //<S2SV> } //<S2SV> if ( ipv6_addr_type ( & lsa -> l2tp_addr ) & IPV6_ADDR_LINKLOCAL ) //<S2SV> lsa -> l2tp_scope_id = sk -> sk_bound_dev_if ; //<S2SV> * uaddr_len = sizeof ( * lsa ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 