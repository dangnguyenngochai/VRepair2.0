static int ext4_split_unwritten_extents ( handle_t * handle , //<S2SV> struct inode * inode , //<S2SV> struct ext4_map_blocks * map , //<S2SV> struct ext4_ext_path * path , //<S2SV> int flags ) //<S2SV> { //<S2SV> ext4_lblk_t eof_block ; //<S2SV> ext4_lblk_t ee_block ; //<S2SV> struct ext4_extent * ex ; //<S2SV> unsigned int ee_len ; //<S2SV> int split_flag = 0 , depth ; //<S2SV> ext_debug ( "ext4_split_unwritten_extents:<S2SV_blank>inode<S2SV_blank>%lu,<S2SV_blank>logical" //<S2SV> "block<S2SV_blank>%llu,<S2SV_blank>max_blocks<S2SV_blank>%u\\n" , inode -> i_ino , //<S2SV> ( unsigned long long ) map -> m_lblk , map -> m_len ) ; //<S2SV> eof_block = ( inode -> i_size + inode -> i_sb -> s_blocksize - 1 ) >> //<S2SV> inode -> i_sb -> s_blocksize_bits ; //<S2SV> if ( eof_block < map -> m_lblk + map -> m_len ) //<S2SV> eof_block = map -> m_lblk + map -> m_len ; //<S2SV> depth = ext_depth ( inode ) ; //<S2SV> ex = path [ depth ] . p_ext ; //<S2SV> ee_block = le32_to_cpu ( ex -> ee_block ) ; //<S2SV> ee_len = ext4_ext_get_actual_len ( ex ) ; //<S2SV> split_flag |= ee_block + ee_len <= eof_block ? EXT4_EXT_MAY_ZEROOUT : 0 ; //<S2SV> split_flag |= EXT4_EXT_MARK_UNINIT2 ; //<S2SV> flags |= EXT4_GET_BLOCKS_PRE_IO ; //<S2SV> return ext4_split_extent ( handle , inode , path , map , split_flag , flags ) ; //<S2SV> } //<S2SV> 