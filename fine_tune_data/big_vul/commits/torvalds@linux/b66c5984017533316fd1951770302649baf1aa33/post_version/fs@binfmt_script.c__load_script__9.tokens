static int load_script ( struct linux_binprm * bprm ) //<S2SV> { //<S2SV> const char * i_arg , * i_name ; //<S2SV> char * cp ; //<S2SV> struct file * file ; //<S2SV> char interp [ BINPRM_BUF_SIZE ] ; //<S2SV> int retval ; //<S2SV> if ( ( bprm -> buf [ 0 ] != '#' ) || ( bprm -> buf [ 1 ] != '!' ) ) //<S2SV> return - ENOEXEC ; //<S2SV> allow_write_access ( bprm -> file ) ; //<S2SV> fput ( bprm -> file ) ; //<S2SV> bprm -> file = NULL ; //<S2SV> bprm -> buf [ BINPRM_BUF_SIZE - 1 ] = '\\0' ; //<S2SV> if ( ( cp = strchr ( bprm -> buf , '\\n' ) ) == NULL ) //<S2SV> cp = bprm -> buf + BINPRM_BUF_SIZE - 1 ; //<S2SV> * cp = '\\0' ; //<S2SV> while ( cp > bprm -> buf ) { //<S2SV> cp -- ; //<S2SV> if ( ( * cp == '<S2SV_blank>' ) || ( * cp == '\\t' ) ) //<S2SV> * cp = '\\0' ; //<S2SV> else //<S2SV> break ; //<S2SV> } //<S2SV> for ( cp = bprm -> buf + 2 ; ( * cp == '<S2SV_blank>' ) || ( * cp == '\\t' ) ; cp ++ ) ; //<S2SV> if ( * cp == '\\0' ) //<S2SV> return - ENOEXEC ; //<S2SV> i_name = cp ; //<S2SV> i_arg = NULL ; //<S2SV> for ( ; * cp && ( * cp != '<S2SV_blank>' ) && ( * cp != '\\t' ) ; cp ++ ) //<S2SV> ; //<S2SV> while ( ( * cp == '<S2SV_blank>' ) || ( * cp == '\\t' ) ) //<S2SV> * cp ++ = '\\0' ; //<S2SV> if ( * cp ) //<S2SV> i_arg = cp ; //<S2SV> strcpy ( interp , i_name ) ; //<S2SV> retval = remove_arg_zero ( bprm ) ; //<S2SV> if ( retval ) //<S2SV> return retval ; //<S2SV> retval = copy_strings_kernel ( 1 , & bprm -> interp , bprm ) ; //<S2SV> if ( retval < 0 ) return retval ; //<S2SV> bprm -> argc ++ ; //<S2SV> if ( i_arg ) { //<S2SV> retval = copy_strings_kernel ( 1 , & i_arg , bprm ) ; //<S2SV> if ( retval < 0 ) return retval ; //<S2SV> bprm -> argc ++ ; //<S2SV> } //<S2SV> retval = copy_strings_kernel ( 1 , & i_name , bprm ) ; //<S2SV> if ( retval ) return retval ; //<S2SV> bprm -> argc ++ ; //<S2SV> retval = bprm_change_interp ( interp , bprm ) ; //<S2SV> if ( retval < 0 ) //<S2SV> return retval ; //<S2SV> file = open_exec ( interp ) ; //<S2SV> if ( IS_ERR ( file ) ) //<S2SV> return PTR_ERR ( file ) ; //<S2SV> bprm -> file = file ; //<S2SV> retval = prepare_binprm ( bprm ) ; //<S2SV> if ( retval < 0 ) //<S2SV> return retval ; //<S2SV> return search_binary_handler ( bprm ) ; //<S2SV> } //<S2SV> 