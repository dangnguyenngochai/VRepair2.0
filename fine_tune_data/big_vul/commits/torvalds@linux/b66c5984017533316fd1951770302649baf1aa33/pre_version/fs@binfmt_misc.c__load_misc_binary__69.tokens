static int load_misc_binary ( struct linux_binprm * bprm ) //<S2SV> { //<S2SV> Node * fmt ; //<S2SV> struct file * interp_file = NULL ; //<S2SV> char iname [ BINPRM_BUF_SIZE ] ; //<S2SV> const char * iname_addr = iname ; //<S2SV> int retval ; //<S2SV> int fd_binary = - 1 ; //<S2SV> retval = - ENOEXEC ; //<S2SV> if ( ! enabled ) //<S2SV> goto _ret ; //<S2SV> read_lock ( & entries_lock ) ; //<S2SV> fmt = check_file ( bprm ) ; //<S2SV> if ( fmt ) //<S2SV> strlcpy ( iname , fmt -> interpreter , BINPRM_BUF_SIZE ) ; //<S2SV> read_unlock ( & entries_lock ) ; //<S2SV> if ( ! fmt ) //<S2SV> goto _ret ; //<S2SV> if ( ! ( fmt -> flags & MISC_FMT_PRESERVE_ARGV0 ) ) { //<S2SV> retval = remove_arg_zero ( bprm ) ; //<S2SV> if ( retval ) //<S2SV> goto _ret ; //<S2SV> } //<S2SV> if ( fmt -> flags & MISC_FMT_OPEN_BINARY ) { //<S2SV> fd_binary = get_unused_fd ( ) ; //<S2SV> if ( fd_binary < 0 ) { //<S2SV> retval = fd_binary ; //<S2SV> goto _ret ; //<S2SV> } //<S2SV> fd_install ( fd_binary , bprm -> file ) ; //<S2SV> would_dump ( bprm , bprm -> file ) ; //<S2SV> allow_write_access ( bprm -> file ) ; //<S2SV> bprm -> file = NULL ; //<S2SV> bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ; //<S2SV> bprm -> interp_data = fd_binary ; //<S2SV> } else { //<S2SV> allow_write_access ( bprm -> file ) ; //<S2SV> fput ( bprm -> file ) ; //<S2SV> bprm -> file = NULL ; //<S2SV> } //<S2SV> retval = copy_strings_kernel ( 1 , & bprm -> interp , bprm ) ; //<S2SV> if ( retval < 0 ) //<S2SV> goto _error ; //<S2SV> bprm -> argc ++ ; //<S2SV> retval = copy_strings_kernel ( 1 , & iname_addr , bprm ) ; //<S2SV> if ( retval < 0 ) //<S2SV> goto _error ; //<S2SV> bprm -> argc ++ ; //<S2SV> bprm -> interp = iname ; //<S2SV> interp_file = open_exec ( iname ) ; //<S2SV> retval = PTR_ERR ( interp_file ) ; //<S2SV> if ( IS_ERR ( interp_file ) ) //<S2SV> goto _error ; //<S2SV> bprm -> file = interp_file ; //<S2SV> if ( fmt -> flags & MISC_FMT_CREDENTIALS ) { //<S2SV> memset ( bprm -> buf , 0 , BINPRM_BUF_SIZE ) ; //<S2SV> retval = kernel_read ( bprm -> file , 0 , bprm -> buf , BINPRM_BUF_SIZE ) ; //<S2SV> } else //<S2SV> retval = prepare_binprm ( bprm ) ; //<S2SV> if ( retval < 0 ) //<S2SV> goto _error ; //<S2SV> retval = search_binary_handler ( bprm ) ; //<S2SV> if ( retval < 0 ) //<S2SV> goto _error ; //<S2SV> _ret : //<S2SV> return retval ; //<S2SV> _error : //<S2SV> if ( fd_binary > 0 ) //<S2SV> sys_close ( fd_binary ) ; //<S2SV> bprm -> interp_flags = 0 ; //<S2SV> bprm -> interp_data = 0 ; //<S2SV> goto _ret ; //<S2SV> } //<S2SV> 