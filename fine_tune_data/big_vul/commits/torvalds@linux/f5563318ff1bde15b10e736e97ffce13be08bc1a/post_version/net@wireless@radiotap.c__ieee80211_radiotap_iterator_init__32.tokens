int ieee80211_radiotap_iterator_init ( //<S2SV> struct ieee80211_radiotap_iterator * iterator , //<S2SV> struct ieee80211_radiotap_header * radiotap_header , //<S2SV> int max_length , const struct ieee80211_radiotap_vendor_namespaces * vns ) //<S2SV> { //<S2SV> if ( max_length < sizeof ( struct ieee80211_radiotap_header ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( radiotap_header -> it_version ) //<S2SV> return - EINVAL ; //<S2SV> if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) //<S2SV> return - EINVAL ; //<S2SV> iterator -> _rtheader = radiotap_header ; //<S2SV> iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; //<S2SV> iterator -> _arg_index = 0 ; //<S2SV> iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; //<S2SV> iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( * radiotap_header ) ; //<S2SV> iterator -> _reset_on_ext = 0 ; //<S2SV> iterator -> _next_bitmap = & radiotap_header -> it_present ; //<S2SV> iterator -> _next_bitmap ++ ; //<S2SV> iterator -> _vns = vns ; //<S2SV> iterator -> current_namespace = & radiotap_ns ; //<S2SV> iterator -> is_radiotap_ns = 1 ; //<S2SV> if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { //<S2SV> while ( get_unaligned_le32 ( iterator -> _arg ) & //<S2SV> ( 1 << IEEE80211_RADIOTAP_EXT ) ) { //<S2SV> iterator -> _arg += sizeof ( uint32_t ) ; //<S2SV> if ( ( unsigned long ) iterator -> _arg - //<S2SV> ( unsigned long ) iterator -> _rtheader + //<S2SV> sizeof ( uint32_t ) > //<S2SV> ( unsigned long ) iterator -> _max_length ) //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> iterator -> _arg += sizeof ( uint32_t ) ; //<S2SV> } //<S2SV> iterator -> this_arg = iterator -> _arg ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 