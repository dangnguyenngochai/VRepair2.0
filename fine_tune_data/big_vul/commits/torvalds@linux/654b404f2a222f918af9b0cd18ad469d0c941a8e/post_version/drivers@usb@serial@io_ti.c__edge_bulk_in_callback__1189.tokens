static void edge_bulk_in_callback ( struct urb * urb ) //<S2SV> { //<S2SV> struct edgeport_port * edge_port = urb -> context ; //<S2SV> struct device * dev = & edge_port -> port -> dev ; //<S2SV> unsigned char * data = urb -> transfer_buffer ; //<S2SV> int retval = 0 ; //<S2SV> int port_number ; //<S2SV> int status = urb -> status ; //<S2SV> switch ( status ) { //<S2SV> case 0 : //<S2SV> break ; //<S2SV> case - ECONNRESET : //<S2SV> case - ENOENT : //<S2SV> case - ESHUTDOWN : //<S2SV> dev_dbg ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>urb<S2SV_blank>shutting<S2SV_blank>down<S2SV_blank>with<S2SV_blank>status:<S2SV_blank>%d\\n" , __func__ , status ) ; //<S2SV> return ; //<S2SV> default : //<S2SV> dev_err ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>nonzero<S2SV_blank>read<S2SV_blank>bulk<S2SV_blank>status<S2SV_blank>received:<S2SV_blank>%d\\n" , __func__ , status ) ; //<S2SV> } //<S2SV> if ( status == - EPIPE ) //<S2SV> goto exit ; //<S2SV> if ( status ) { //<S2SV> dev_err ( & urb -> dev -> dev , "%s<S2SV_blank>-<S2SV_blank>stopping<S2SV_blank>read!\\n" , __func__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> port_number = edge_port -> port -> port_number ; //<S2SV> if ( urb -> actual_length > 0 && edge_port -> lsr_event ) { //<S2SV> edge_port -> lsr_event = 0 ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>=====<S2SV_blank>Port<S2SV_blank>%u<S2SV_blank>LSR<S2SV_blank>Status<S2SV_blank>=<S2SV_blank>%02x,<S2SV_blank>Data<S2SV_blank>=<S2SV_blank>%02x<S2SV_blank>======\\n" , //<S2SV> __func__ , port_number , edge_port -> lsr_mask , * data ) ; //<S2SV> handle_new_lsr ( edge_port , 1 , edge_port -> lsr_mask , * data ) ; //<S2SV> -- urb -> actual_length ; //<S2SV> ++ data ; //<S2SV> } //<S2SV> if ( urb -> actual_length ) { //<S2SV> usb_serial_debug_data ( dev , __func__ , urb -> actual_length , data ) ; //<S2SV> if ( edge_port -> close_pending ) //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>close<S2SV_blank>pending,<S2SV_blank>dropping<S2SV_blank>data<S2SV_blank>on<S2SV_blank>the<S2SV_blank>floor\\n" , //<S2SV> __func__ ) ; //<S2SV> else //<S2SV> edge_tty_recv ( edge_port -> port , data , //<S2SV> urb -> actual_length ) ; //<S2SV> edge_port -> port -> icount . rx += urb -> actual_length ; //<S2SV> } //<S2SV> exit : //<S2SV> spin_lock ( & edge_port -> ep_lock ) ; //<S2SV> if ( edge_port -> ep_read_urb_state == EDGE_READ_URB_RUNNING ) //<S2SV> retval = usb_submit_urb ( urb , GFP_ATOMIC ) ; //<S2SV> else if ( edge_port -> ep_read_urb_state == EDGE_READ_URB_STOPPING ) //<S2SV> edge_port -> ep_read_urb_state = EDGE_READ_URB_STOPPED ; //<S2SV> spin_unlock ( & edge_port -> ep_lock ) ; //<S2SV> if ( retval ) //<S2SV> dev_err ( dev , "%s<S2SV_blank>-<S2SV_blank>usb_submit_urb<S2SV_blank>failed<S2SV_blank>with<S2SV_blank>result<S2SV_blank>%d\\n" , __func__ , retval ) ; //<S2SV> } //<S2SV> 