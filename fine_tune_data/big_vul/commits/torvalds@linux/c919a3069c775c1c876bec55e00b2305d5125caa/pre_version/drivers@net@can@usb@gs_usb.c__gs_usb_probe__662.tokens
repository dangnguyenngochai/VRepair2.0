static int gs_usb_probe ( struct usb_interface * intf , //<S2SV> const struct usb_device_id * id ) //<S2SV> { //<S2SV> struct gs_usb * dev ; //<S2SV> int rc = - ENOMEM ; //<S2SV> unsigned int icount , i ; //<S2SV> struct gs_host_config hconf = { //<S2SV> . byte_order = 0x0000beef , //<S2SV> } ; //<S2SV> struct gs_device_config dconf ; //<S2SV> rc = usb_control_msg ( interface_to_usbdev ( intf ) , //<S2SV> usb_sndctrlpipe ( interface_to_usbdev ( intf ) , 0 ) , //<S2SV> GS_USB_BREQ_HOST_FORMAT , //<S2SV> USB_DIR_OUT | USB_TYPE_VENDOR | USB_RECIP_INTERFACE , //<S2SV> 1 , //<S2SV> intf -> altsetting [ 0 ] . desc . bInterfaceNumber , //<S2SV> & hconf , //<S2SV> sizeof ( hconf ) , //<S2SV> 1000 ) ; //<S2SV> if ( rc < 0 ) { //<S2SV> dev_err ( & intf -> dev , "Couldn\'t<S2SV_blank>send<S2SV_blank>data<S2SV_blank>format<S2SV_blank>(err=%d)\\n" , //<S2SV> rc ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> rc = usb_control_msg ( interface_to_usbdev ( intf ) , //<S2SV> usb_rcvctrlpipe ( interface_to_usbdev ( intf ) , 0 ) , //<S2SV> GS_USB_BREQ_DEVICE_CONFIG , //<S2SV> USB_DIR_IN | USB_TYPE_VENDOR | USB_RECIP_INTERFACE , //<S2SV> 1 , //<S2SV> intf -> altsetting [ 0 ] . desc . bInterfaceNumber , //<S2SV> & dconf , //<S2SV> sizeof ( dconf ) , //<S2SV> 1000 ) ; //<S2SV> if ( rc < 0 ) { //<S2SV> dev_err ( & intf -> dev , "Couldn\'t<S2SV_blank>get<S2SV_blank>device<S2SV_blank>config:<S2SV_blank>(err=%d)\\n" , //<S2SV> rc ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> icount = dconf . icount + 1 ; //<S2SV> dev_info ( & intf -> dev , "Configuring<S2SV_blank>for<S2SV_blank>%d<S2SV_blank>interfaces\\n" , icount ) ; //<S2SV> if ( icount > GS_MAX_INTF ) { //<S2SV> dev_err ( & intf -> dev , //<S2SV> "Driver<S2SV_blank>cannot<S2SV_blank>handle<S2SV_blank>more<S2SV_blank>that<S2SV_blank>%d<S2SV_blank>CAN<S2SV_blank>interfaces\\n" , //<S2SV> GS_MAX_INTF ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> dev = kzalloc ( sizeof ( * dev ) , GFP_KERNEL ) ; //<S2SV> if ( ! dev ) //<S2SV> return - ENOMEM ; //<S2SV> init_usb_anchor ( & dev -> rx_submitted ) ; //<S2SV> atomic_set ( & dev -> active_channels , 0 ) ; //<S2SV> usb_set_intfdata ( intf , dev ) ; //<S2SV> dev -> udev = interface_to_usbdev ( intf ) ; //<S2SV> for ( i = 0 ; i < icount ; i ++ ) { //<S2SV> dev -> canch [ i ] = gs_make_candev ( i , intf , & dconf ) ; //<S2SV> if ( IS_ERR_OR_NULL ( dev -> canch [ i ] ) ) { //<S2SV> rc = PTR_ERR ( dev -> canch [ i ] ) ; //<S2SV> icount = i ; //<S2SV> for ( i = 0 ; i < icount ; i ++ ) //<S2SV> gs_destroy_candev ( dev -> canch [ i ] ) ; //<S2SV> usb_kill_anchored_urbs ( & dev -> rx_submitted ) ; //<S2SV> kfree ( dev ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> dev -> canch [ i ] -> parent = dev ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 