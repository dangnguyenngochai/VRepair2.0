static ssize_t wdm_read //<S2SV> ( struct file * file , char __user * buffer , size_t count , loff_t * ppos ) //<S2SV> { //<S2SV> int rv , cntr ; //<S2SV> int i = 0 ; //<S2SV> struct wdm_device * desc = file -> private_data ; //<S2SV> rv = mutex_lock_interruptible ( & desc -> rlock ) ; //<S2SV> if ( rv < 0 ) //<S2SV> return - ERESTARTSYS ; //<S2SV> cntr = ACCESS_ONCE ( desc -> length ) ; //<S2SV> if ( cntr == 0 ) { //<S2SV> desc -> read = 0 ; //<S2SV> retry : //<S2SV> if ( test_bit ( WDM_DISCONNECTING , & desc -> flags ) ) { //<S2SV> rv = - ENODEV ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( test_bit ( WDM_OVERFLOW , & desc -> flags ) ) { //<S2SV> clear_bit ( WDM_OVERFLOW , & desc -> flags ) ; //<S2SV> rv = - ENOBUFS ; //<S2SV> goto err ; //<S2SV> } //<S2SV> i ++ ; //<S2SV> if ( file -> f_flags & O_NONBLOCK ) { //<S2SV> if ( ! test_bit ( WDM_READ , & desc -> flags ) ) { //<S2SV> rv = cntr ? cntr : - EAGAIN ; //<S2SV> goto err ; //<S2SV> } //<S2SV> rv = 0 ; //<S2SV> } else { //<S2SV> rv = wait_event_interruptible ( desc -> wait , //<S2SV> test_bit ( WDM_READ , & desc -> flags ) ) ; //<S2SV> } //<S2SV> if ( test_bit ( WDM_DISCONNECTING , & desc -> flags ) ) { //<S2SV> rv = - ENODEV ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( test_bit ( WDM_RESETTING , & desc -> flags ) ) { //<S2SV> rv = - EIO ; //<S2SV> goto err ; //<S2SV> } //<S2SV> usb_mark_last_busy ( interface_to_usbdev ( desc -> intf ) ) ; //<S2SV> if ( rv < 0 ) { //<S2SV> rv = - ERESTARTSYS ; //<S2SV> goto err ; //<S2SV> } //<S2SV> spin_lock_irq ( & desc -> iuspin ) ; //<S2SV> if ( desc -> rerr ) { //<S2SV> desc -> rerr = 0 ; //<S2SV> spin_unlock_irq ( & desc -> iuspin ) ; //<S2SV> rv = - EIO ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( ! test_bit ( WDM_READ , & desc -> flags ) ) { //<S2SV> spin_unlock_irq ( & desc -> iuspin ) ; //<S2SV> goto retry ; //<S2SV> } //<S2SV> if ( ! desc -> reslength ) { //<S2SV> dev_dbg ( & desc -> intf -> dev , "%s:<S2SV_blank>zero<S2SV_blank>length<S2SV_blank>-<S2SV_blank>clearing<S2SV_blank>WDM_READ\\n" , __func__ ) ; //<S2SV> clear_bit ( WDM_READ , & desc -> flags ) ; //<S2SV> spin_unlock_irq ( & desc -> iuspin ) ; //<S2SV> goto retry ; //<S2SV> } //<S2SV> cntr = desc -> length ; //<S2SV> spin_unlock_irq ( & desc -> iuspin ) ; //<S2SV> } //<S2SV> if ( cntr > count ) //<S2SV> cntr = count ; //<S2SV> rv = copy_to_user ( buffer , desc -> ubuf , cntr ) ; //<S2SV> if ( rv > 0 ) { //<S2SV> rv = - EFAULT ; //<S2SV> goto err ; //<S2SV> } //<S2SV> spin_lock_irq ( & desc -> iuspin ) ; //<S2SV> for ( i = 0 ; i < desc -> length - cntr ; i ++ ) //<S2SV> desc -> ubuf [ i ] = desc -> ubuf [ i + cntr ] ; //<S2SV> desc -> length -= cntr ; //<S2SV> if ( ! desc -> length ) //<S2SV> clear_bit ( WDM_READ , & desc -> flags ) ; //<S2SV> spin_unlock_irq ( & desc -> iuspin ) ; //<S2SV> rv = cntr ; //<S2SV> err : //<S2SV> mutex_unlock ( & desc -> rlock ) ; //<S2SV> return rv ; //<S2SV> } //<S2SV> 