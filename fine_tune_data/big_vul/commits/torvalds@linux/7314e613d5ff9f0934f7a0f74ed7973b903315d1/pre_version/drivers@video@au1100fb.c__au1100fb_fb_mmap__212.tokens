int au1100fb_fb_mmap ( struct fb_info * fbi , struct vm_area_struct * vma ) //<S2SV> { //<S2SV> struct au1100fb_device * fbdev ; //<S2SV> unsigned int len ; //<S2SV> unsigned long start = 0 , off ; //<S2SV> fbdev = to_au1100fb_device ( fbi ) ; //<S2SV> if ( vma -> vm_pgoff > ( ~ 0UL >> PAGE_SHIFT ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> start = fbdev -> fb_phys & PAGE_MASK ; //<S2SV> len = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) ; //<S2SV> off = vma -> vm_pgoff << PAGE_SHIFT ; //<S2SV> if ( ( vma -> vm_end - vma -> vm_start + off ) > len ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> off += start ; //<S2SV> vma -> vm_pgoff = off >> PAGE_SHIFT ; //<S2SV> vma -> vm_page_prot = pgprot_noncached ( vma -> vm_page_prot ) ; //<S2SV> pgprot_val ( vma -> vm_page_prot ) |= ( 6 << 9 ) ; //<S2SV> if ( io_remap_pfn_range ( vma , vma -> vm_start , off >> PAGE_SHIFT , //<S2SV> vma -> vm_end - vma -> vm_start , //<S2SV> vma -> vm_page_prot ) ) { //<S2SV> return - EAGAIN ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 