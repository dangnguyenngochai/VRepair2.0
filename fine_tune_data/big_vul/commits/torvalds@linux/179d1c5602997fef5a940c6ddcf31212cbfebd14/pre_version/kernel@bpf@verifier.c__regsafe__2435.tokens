static bool regsafe ( struct bpf_reg_state * rold , struct bpf_reg_state * rcur , //<S2SV> struct idpair * idmap ) //<S2SV> { //<S2SV> if ( ! ( rold -> live & REG_LIVE_READ ) ) //<S2SV> return true ; //<S2SV> if ( memcmp ( rold , rcur , offsetof ( struct bpf_reg_state , live ) ) == 0 ) //<S2SV> return true ; //<S2SV> if ( rold -> type == NOT_INIT ) //<S2SV> return true ; //<S2SV> if ( rcur -> type == NOT_INIT ) //<S2SV> return false ; //<S2SV> switch ( rold -> type ) { //<S2SV> case SCALAR_VALUE : //<S2SV> if ( rcur -> type == SCALAR_VALUE ) { //<S2SV> return range_within ( rold , rcur ) && //<S2SV> tnum_in ( rold -> var_off , rcur -> var_off ) ; //<S2SV> } else { //<S2SV> return rold -> umin_value == 0 && //<S2SV> rold -> umax_value == U64_MAX && //<S2SV> rold -> smin_value == S64_MIN && //<S2SV> rold -> smax_value == S64_MAX && //<S2SV> tnum_is_unknown ( rold -> var_off ) ; //<S2SV> } //<S2SV> case PTR_TO_MAP_VALUE : //<S2SV> return memcmp ( rold , rcur , offsetof ( struct bpf_reg_state , id ) ) == 0 && //<S2SV> range_within ( rold , rcur ) && //<S2SV> tnum_in ( rold -> var_off , rcur -> var_off ) ; //<S2SV> case PTR_TO_MAP_VALUE_OR_NULL : //<S2SV> if ( rcur -> type != PTR_TO_MAP_VALUE_OR_NULL ) //<S2SV> return false ; //<S2SV> if ( memcmp ( rold , rcur , offsetof ( struct bpf_reg_state , id ) ) ) //<S2SV> return false ; //<S2SV> return check_ids ( rold -> id , rcur -> id , idmap ) ; //<S2SV> case PTR_TO_PACKET_META : //<S2SV> case PTR_TO_PACKET : //<S2SV> if ( rcur -> type != rold -> type ) //<S2SV> return false ; //<S2SV> if ( rold -> range > rcur -> range ) //<S2SV> return false ; //<S2SV> if ( rold -> off != rcur -> off ) //<S2SV> return false ; //<S2SV> if ( rold -> id && ! check_ids ( rold -> id , rcur -> id , idmap ) ) //<S2SV> return false ; //<S2SV> return range_within ( rold , rcur ) && //<S2SV> tnum_in ( rold -> var_off , rcur -> var_off ) ; //<S2SV> case PTR_TO_CTX : //<S2SV> case CONST_PTR_TO_MAP : //<S2SV> case PTR_TO_STACK : //<S2SV> case PTR_TO_PACKET_END : //<S2SV> default : //<S2SV> return false ; //<S2SV> } //<S2SV> WARN_ON_ONCE ( 1 ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> 