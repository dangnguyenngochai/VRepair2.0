static int __poke_user ( struct task_struct * child , addr_t addr , addr_t data ) //<S2SV> { //<S2SV> struct user * dummy = NULL ; //<S2SV> addr_t offset ; //<S2SV> if ( addr < ( addr_t ) & dummy -> regs . acrs ) { //<S2SV> if ( addr == ( addr_t ) & dummy -> regs . psw . mask ) { //<S2SV> unsigned long mask = PSW_MASK_USER ; //<S2SV> mask |= is_ri_task ( child ) ? PSW_MASK_RI : 0 ; //<S2SV> if ( ( data ^ PSW_USER_BITS ) & ~ mask ) //<S2SV> return - EINVAL ; //<S2SV> if ( ( data & PSW_MASK_ASC ) == PSW_ASC_HOME ) //<S2SV> return - EINVAL ; //<S2SV> if ( ( data & PSW_MASK_EA ) && ! ( data & PSW_MASK_BA ) ) //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> * ( addr_t * ) ( ( addr_t ) & task_pt_regs ( child ) -> psw + addr ) = data ; //<S2SV> } else if ( addr < ( addr_t ) ( & dummy -> regs . orig_gpr2 ) ) { //<S2SV> offset = addr - ( addr_t ) & dummy -> regs . acrs ; //<S2SV> # ifdef CONFIG_64BIT //<S2SV> if ( addr == ( addr_t ) & dummy -> regs . acrs [ 15 ] ) //<S2SV> child -> thread . acrs [ 15 ] = ( unsigned int ) ( data >> 32 ) ; //<S2SV> else //<S2SV> # endif //<S2SV> * ( addr_t * ) ( ( addr_t ) & child -> thread . acrs + offset ) = data ; //<S2SV> } else if ( addr == ( addr_t ) & dummy -> regs . orig_gpr2 ) { //<S2SV> task_pt_regs ( child ) -> orig_gpr2 = data ; //<S2SV> } else if ( addr < ( addr_t ) & dummy -> regs . fp_regs ) { //<S2SV> return 0 ; //<S2SV> } else if ( addr < ( addr_t ) ( & dummy -> regs . fp_regs + 1 ) ) { //<S2SV> if ( addr == ( addr_t ) & dummy -> regs . fp_regs . fpc ) //<S2SV> if ( ( unsigned int ) data != 0 || //<S2SV> test_fp_ctl ( data >> ( BITS_PER_LONG - 32 ) ) ) //<S2SV> return - EINVAL ; //<S2SV> offset = addr - ( addr_t ) & dummy -> regs . fp_regs ; //<S2SV> * ( addr_t * ) ( ( addr_t ) & child -> thread . fp_regs + offset ) = data ; //<S2SV> } else if ( addr < ( addr_t ) ( & dummy -> regs . per_info + 1 ) ) { //<S2SV> addr -= ( addr_t ) & dummy -> regs . per_info ; //<S2SV> __poke_user_per ( child , addr , data ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 