static int ims_pcu_parse_cdc_data ( struct usb_interface * intf , struct ims_pcu * pcu ) //<S2SV> { //<S2SV> const struct usb_cdc_union_desc * union_desc ; //<S2SV> struct usb_host_interface * alt ; //<S2SV> union_desc = ims_pcu_get_cdc_union_desc ( intf ) ; //<S2SV> if ( ! union_desc ) //<S2SV> return - EINVAL ; //<S2SV> pcu -> ctrl_intf = usb_ifnum_to_if ( pcu -> udev , //<S2SV> union_desc -> bMasterInterface0 ) ; //<S2SV> alt = pcu -> ctrl_intf -> cur_altsetting ; //<S2SV> pcu -> ep_ctrl = & alt -> endpoint [ 0 ] . desc ; //<S2SV> pcu -> max_ctrl_size = usb_endpoint_maxp ( pcu -> ep_ctrl ) ; //<S2SV> pcu -> data_intf = usb_ifnum_to_if ( pcu -> udev , //<S2SV> union_desc -> bSlaveInterface0 ) ; //<S2SV> alt = pcu -> data_intf -> cur_altsetting ; //<S2SV> if ( alt -> desc . bNumEndpoints != 2 ) { //<S2SV> dev_err ( pcu -> dev , //<S2SV> "Incorrect<S2SV_blank>number<S2SV_blank>of<S2SV_blank>endpoints<S2SV_blank>on<S2SV_blank>data<S2SV_blank>interface<S2SV_blank>(%d)\\n" , //<S2SV> alt -> desc . bNumEndpoints ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> pcu -> ep_out = & alt -> endpoint [ 0 ] . desc ; //<S2SV> if ( ! usb_endpoint_is_bulk_out ( pcu -> ep_out ) ) { //<S2SV> dev_err ( pcu -> dev , //<S2SV> "First<S2SV_blank>endpoint<S2SV_blank>on<S2SV_blank>data<S2SV_blank>interface<S2SV_blank>is<S2SV_blank>not<S2SV_blank>BULK<S2SV_blank>OUT\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> pcu -> max_out_size = usb_endpoint_maxp ( pcu -> ep_out ) ; //<S2SV> if ( pcu -> max_out_size < 8 ) { //<S2SV> dev_err ( pcu -> dev , //<S2SV> "Max<S2SV_blank>OUT<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>(%zd)\\n" , //<S2SV> pcu -> max_out_size ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> pcu -> ep_in = & alt -> endpoint [ 1 ] . desc ; //<S2SV> if ( ! usb_endpoint_is_bulk_in ( pcu -> ep_in ) ) { //<S2SV> dev_err ( pcu -> dev , //<S2SV> "Second<S2SV_blank>endpoint<S2SV_blank>on<S2SV_blank>data<S2SV_blank>interface<S2SV_blank>is<S2SV_blank>not<S2SV_blank>BULK<S2SV_blank>IN\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> pcu -> max_in_size = usb_endpoint_maxp ( pcu -> ep_in ) ; //<S2SV> if ( pcu -> max_in_size < 8 ) { //<S2SV> dev_err ( pcu -> dev , //<S2SV> "Max<S2SV_blank>IN<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>(%zd)\\n" , //<S2SV> pcu -> max_in_size ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 