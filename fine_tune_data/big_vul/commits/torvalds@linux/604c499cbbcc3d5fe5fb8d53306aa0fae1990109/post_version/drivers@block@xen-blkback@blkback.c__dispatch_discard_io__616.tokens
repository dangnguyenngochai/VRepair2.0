static int dispatch_discard_io ( struct xen_blkif * blkif , //<S2SV> struct blkif_request * req ) //<S2SV> { //<S2SV> int err = 0 ; //<S2SV> int status = BLKIF_RSP_OKAY ; //<S2SV> struct block_device * bdev = blkif -> vbd . bdev ; //<S2SV> unsigned long secure ; //<S2SV> struct phys_req preq ; //<S2SV> preq . sector_number = req -> u . discard . sector_number ; //<S2SV> preq . nr_sects = req -> u . discard . nr_sectors ; //<S2SV> err = xen_vbd_translate ( & preq , blkif , WRITE ) ; //<S2SV> if ( err ) { //<S2SV> pr_warn ( DRV_PFX "access<S2SV_blank>denied:<S2SV_blank>DISCARD<S2SV_blank>[%llu->%llu]<S2SV_blank>on<S2SV_blank>dev=%04x\\n" , //<S2SV> preq . sector_number , //<S2SV> preq . sector_number + preq . nr_sects , blkif -> vbd . pdevice ) ; //<S2SV> goto fail_response ; //<S2SV> } //<S2SV> blkif -> st_ds_req ++ ; //<S2SV> xen_blkif_get ( blkif ) ; //<S2SV> secure = ( blkif -> vbd . discard_secure && //<S2SV> ( req -> u . discard . flag & BLKIF_DISCARD_SECURE ) ) ? //<S2SV> BLKDEV_DISCARD_SECURE : 0 ; //<S2SV> err = blkdev_issue_discard ( bdev , req -> u . discard . sector_number , //<S2SV> req -> u . discard . nr_sectors , //<S2SV> GFP_KERNEL , secure ) ; //<S2SV> fail_response : //<S2SV> if ( err == - EOPNOTSUPP ) { //<S2SV> pr_debug ( DRV_PFX "discard<S2SV_blank>op<S2SV_blank>failed,<S2SV_blank>not<S2SV_blank>supported\\n" ) ; //<S2SV> status = BLKIF_RSP_EOPNOTSUPP ; //<S2SV> } else if ( err ) //<S2SV> status = BLKIF_RSP_ERROR ; //<S2SV> make_response ( blkif , req -> u . discard . id , req -> operation , status ) ; //<S2SV> xen_blkif_put ( blkif ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 