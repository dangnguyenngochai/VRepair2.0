static int swp_handler ( struct pt_regs * regs , unsigned int instr ) //<S2SV> { //<S2SV> unsigned int address , destreg , data , type ; //<S2SV> unsigned int res = 0 ; //<S2SV> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , 1 , 0 , regs , regs -> ARM_pc ) ; //<S2SV> if ( current -> pid != previous_pid ) { //<S2SV> pr_debug ( "\\"%s\\"<S2SV_blank>(%ld)<S2SV_blank>uses<S2SV_blank>deprecated<S2SV_blank>SWP{B}<S2SV_blank>instruction\\n" , //<S2SV> current -> comm , ( unsigned long ) current -> pid ) ; //<S2SV> previous_pid = current -> pid ; //<S2SV> } //<S2SV> address = regs -> uregs [ EXTRACT_REG_NUM ( instr , RN_OFFSET ) ] ; //<S2SV> data = regs -> uregs [ EXTRACT_REG_NUM ( instr , RT2_OFFSET ) ] ; //<S2SV> destreg = EXTRACT_REG_NUM ( instr , RT_OFFSET ) ; //<S2SV> type = instr & TYPE_SWPB ; //<S2SV> pr_debug ( "addr<S2SV_blank>in<S2SV_blank>r%d->0x%08x,<S2SV_blank>dest<S2SV_blank>is<S2SV_blank>r%d,<S2SV_blank>source<S2SV_blank>in<S2SV_blank>r%d->0x%08x)\\n" , //<S2SV> EXTRACT_REG_NUM ( instr , RN_OFFSET ) , address , //<S2SV> destreg , EXTRACT_REG_NUM ( instr , RT2_OFFSET ) , data ) ; //<S2SV> if ( ! access_ok ( VERIFY_WRITE , ( address & ~ 3 ) , 4 ) ) { //<S2SV> pr_debug ( "SWP{B}<S2SV_blank>emulation:<S2SV_blank>access<S2SV_blank>to<S2SV_blank>%p<S2SV_blank>not<S2SV_blank>allowed!\\n" , //<S2SV> ( void * ) address ) ; //<S2SV> res = - EFAULT ; //<S2SV> } else { //<S2SV> res = emulate_swpX ( address , & data , type ) ; //<S2SV> } //<S2SV> if ( res == 0 ) { //<S2SV> regs -> ARM_pc += 4 ; //<S2SV> regs -> uregs [ destreg ] = data ; //<S2SV> } else if ( res == - EFAULT ) { //<S2SV> set_segfault ( regs , address ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 