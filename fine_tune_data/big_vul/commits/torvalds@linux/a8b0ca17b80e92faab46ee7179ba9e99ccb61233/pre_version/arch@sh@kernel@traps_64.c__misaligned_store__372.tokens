static int misaligned_store ( struct pt_regs * regs , //<S2SV> __u32 opcode , //<S2SV> int displacement_not_indexed , //<S2SV> int width_shift ) //<S2SV> { //<S2SV> int error ; //<S2SV> int srcreg ; //<S2SV> __u64 address ; //<S2SV> error = generate_and_check_address ( regs , opcode , //<S2SV> displacement_not_indexed , width_shift , & address ) ; //<S2SV> if ( error < 0 ) { //<S2SV> return error ; //<S2SV> } //<S2SV> perf_sw_event ( PERF_COUNT_SW_ALIGNMENT_FAULTS , 1 , 0 , regs , address ) ; //<S2SV> srcreg = ( opcode >> 4 ) & 0x3f ; //<S2SV> if ( user_mode ( regs ) ) { //<S2SV> __u64 buffer ; //<S2SV> if ( ! access_ok ( VERIFY_WRITE , ( unsigned long ) address , 1UL << width_shift ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> switch ( width_shift ) { //<S2SV> case 1 : //<S2SV> * ( __u16 * ) & buffer = ( __u16 ) regs -> regs [ srcreg ] ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> * ( __u32 * ) & buffer = ( __u32 ) regs -> regs [ srcreg ] ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> buffer = regs -> regs [ srcreg ] ; //<S2SV> break ; //<S2SV> default : //<S2SV> printk ( "Unexpected<S2SV_blank>width_shift<S2SV_blank>%d<S2SV_blank>in<S2SV_blank>misaligned_store,<S2SV_blank>PC=%08lx\\n" , //<S2SV> width_shift , ( unsigned long ) regs -> pc ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( __copy_user ( ( void * ) ( int ) address , & buffer , ( 1 << width_shift ) ) > 0 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> __u64 val = regs -> regs [ srcreg ] ; //<S2SV> switch ( width_shift ) { //<S2SV> case 1 : //<S2SV> misaligned_kernel_word_store ( address , val ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> asm ( "stlo.l<S2SV_blank>%1,<S2SV_blank>0,<S2SV_blank>%0" : : "r" ( val ) , "r" ( address ) ) ; //<S2SV> asm ( "sthi.l<S2SV_blank>%1,<S2SV_blank>3,<S2SV_blank>%0" : : "r" ( val ) , "r" ( address ) ) ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> asm ( "stlo.q<S2SV_blank>%1,<S2SV_blank>0,<S2SV_blank>%0" : : "r" ( val ) , "r" ( address ) ) ; //<S2SV> asm ( "sthi.q<S2SV_blank>%1,<S2SV_blank>7,<S2SV_blank>%0" : : "r" ( val ) , "r" ( address ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> printk ( "Unexpected<S2SV_blank>width_shift<S2SV_blank>%d<S2SV_blank>in<S2SV_blank>misaligned_store,<S2SV_blank>PC=%08lx\\n" , //<S2SV> width_shift , ( unsigned long ) regs -> pc ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 