static int simulate_rdhwr ( struct pt_regs * regs , unsigned int opcode ) //<S2SV> { //<S2SV> struct thread_info * ti = task_thread_info ( current ) ; //<S2SV> if ( ( opcode & OPCODE ) == SPEC3 && ( opcode & FUNC ) == RDHWR ) { //<S2SV> int rd = ( opcode & RD ) >> 11 ; //<S2SV> int rt = ( opcode & RT ) >> 16 ; //<S2SV> perf_sw_event ( PERF_COUNT_SW_EMULATION_FAULTS , //<S2SV> 1 , regs , 0 ) ; //<S2SV> switch ( rd ) { //<S2SV> case 0 : //<S2SV> regs -> regs [ rt ] = smp_processor_id ( ) ; //<S2SV> return 0 ; //<S2SV> case 1 : //<S2SV> regs -> regs [ rt ] = min ( current_cpu_data . dcache . linesz , //<S2SV> current_cpu_data . icache . linesz ) ; //<S2SV> return 0 ; //<S2SV> case 2 : //<S2SV> regs -> regs [ rt ] = read_c0_count ( ) ; //<S2SV> return 0 ; //<S2SV> case 3 : //<S2SV> switch ( current_cpu_data . cputype ) { //<S2SV> case CPU_20KC : //<S2SV> case CPU_25KF : //<S2SV> regs -> regs [ rt ] = 1 ; //<S2SV> break ; //<S2SV> default : //<S2SV> regs -> regs [ rt ] = 2 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> case 29 : //<S2SV> regs -> regs [ rt ] = ti -> tp_value ; //<S2SV> return 0 ; //<S2SV> default : //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 