int usb_cypress_load_firmware ( struct usb_device * udev , const struct firmware * fw , int type ) //<S2SV> { //<S2SV> struct hexline * hx ; //<S2SV> u8 * buf ; //<S2SV> int ret , pos = 0 ; //<S2SV> u16 cpu_cs_register = cypress [ type ] . cpu_cs_register ; //<S2SV> buf = kmalloc ( sizeof ( * hx ) , GFP_KERNEL ) ; //<S2SV> if ( ! buf ) //<S2SV> return - ENOMEM ; //<S2SV> hx = ( struct hexline * ) buf ; //<S2SV> buf [ 0 ] = 1 ; //<S2SV> if ( usb_cypress_writemem ( udev , cpu_cs_register , buf , 1 ) != 1 ) //<S2SV> err ( "could<S2SV_blank>not<S2SV_blank>stop<S2SV_blank>the<S2SV_blank>USB<S2SV_blank>controller<S2SV_blank>CPU." ) ; //<S2SV> while ( ( ret = dvb_usb_get_hexline ( fw , hx , & pos ) ) > 0 ) { //<S2SV> deb_fw ( "writing<S2SV_blank>to<S2SV_blank>address<S2SV_blank>0x%04x<S2SV_blank>(buffer:<S2SV_blank>0x%02x<S2SV_blank>%02x)\\n" , hx -> addr , hx -> len , hx -> chk ) ; //<S2SV> ret = usb_cypress_writemem ( udev , hx -> addr , hx -> data , hx -> len ) ; //<S2SV> if ( ret != hx -> len ) { //<S2SV> err ( "error<S2SV_blank>while<S2SV_blank>transferring<S2SV_blank>firmware<S2SV_blank>(transferred<S2SV_blank>size:<S2SV_blank>%d,<S2SV_blank>block<S2SV_blank>size:<S2SV_blank>%d)" , //<S2SV> ret , hx -> len ) ; //<S2SV> ret = - EINVAL ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ret < 0 ) { //<S2SV> err ( "firmware<S2SV_blank>download<S2SV_blank>failed<S2SV_blank>at<S2SV_blank>%d<S2SV_blank>with<S2SV_blank>%d" , pos , ret ) ; //<S2SV> kfree ( buf ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> if ( ret == 0 ) { //<S2SV> buf [ 0 ] = 0 ; //<S2SV> if ( usb_cypress_writemem ( udev , cpu_cs_register , buf , 1 ) != 1 ) { //<S2SV> err ( "could<S2SV_blank>not<S2SV_blank>restart<S2SV_blank>the<S2SV_blank>USB<S2SV_blank>controller<S2SV_blank>CPU." ) ; //<S2SV> ret = - EINVAL ; //<S2SV> } //<S2SV> } else //<S2SV> ret = - EIO ; //<S2SV> kfree ( buf ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 