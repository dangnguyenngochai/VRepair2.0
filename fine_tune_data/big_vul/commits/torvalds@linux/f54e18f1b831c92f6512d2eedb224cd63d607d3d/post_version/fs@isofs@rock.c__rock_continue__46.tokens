static int rock_continue ( struct rock_state * rs ) //<S2SV> { //<S2SV> int ret = 1 ; //<S2SV> int blocksize = 1 << rs -> inode -> i_blkbits ; //<S2SV> const int min_de_size = offsetof ( struct rock_ridge , u ) ; //<S2SV> kfree ( rs -> buffer ) ; //<S2SV> rs -> buffer = NULL ; //<S2SV> if ( ( unsigned ) rs -> cont_offset > blocksize - min_de_size || //<S2SV> ( unsigned ) rs -> cont_size > blocksize || //<S2SV> ( unsigned ) ( rs -> cont_offset + rs -> cont_size ) > blocksize ) { //<S2SV> printk ( KERN_NOTICE "rock:<S2SV_blank>corrupted<S2SV_blank>directory<S2SV_blank>entry.<S2SV_blank>" //<S2SV> "extent=%d,<S2SV_blank>offset=%d,<S2SV_blank>size=%d\\n" , //<S2SV> rs -> cont_extent , rs -> cont_offset , rs -> cont_size ) ; //<S2SV> ret = - EIO ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( rs -> cont_extent ) { //<S2SV> struct buffer_head * bh ; //<S2SV> rs -> buffer = kmalloc ( rs -> cont_size , GFP_KERNEL ) ; //<S2SV> if ( ! rs -> buffer ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto out ; //<S2SV> } //<S2SV> ret = - EIO ; //<S2SV> if ( ++ rs -> cont_loops >= RR_MAX_CE_ENTRIES ) //<S2SV> goto out ; //<S2SV> bh = sb_bread ( rs -> inode -> i_sb , rs -> cont_extent ) ; //<S2SV> if ( bh ) { //<S2SV> memcpy ( rs -> buffer , bh -> b_data + rs -> cont_offset , //<S2SV> rs -> cont_size ) ; //<S2SV> put_bh ( bh ) ; //<S2SV> rs -> chr = rs -> buffer ; //<S2SV> rs -> len = rs -> cont_size ; //<S2SV> rs -> cont_extent = 0 ; //<S2SV> rs -> cont_size = 0 ; //<S2SV> rs -> cont_offset = 0 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> printk ( "Unable<S2SV_blank>to<S2SV_blank>read<S2SV_blank>rock-ridge<S2SV_blank>attributes\\n" ) ; //<S2SV> } //<S2SV> out : //<S2SV> kfree ( rs -> buffer ) ; //<S2SV> rs -> buffer = NULL ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 