static int nfc_llcp_build_gb ( struct nfc_llcp_local * local ) //<S2SV> { //<S2SV> u8 * gb_cur , * version_tlv , version , version_length ; //<S2SV> u8 * lto_tlv , lto_length ; //<S2SV> u8 * wks_tlv , wks_length ; //<S2SV> u8 * miux_tlv , miux_length ; //<S2SV> __be16 wks = cpu_to_be16 ( local -> local_wks ) ; //<S2SV> u8 gb_len = 0 ; //<S2SV> int ret = 0 ; //<S2SV> version = LLCP_VERSION_11 ; //<S2SV> version_tlv = nfc_llcp_build_tlv ( LLCP_TLV_VERSION , & version , //<S2SV> 1 , & version_length ) ; //<S2SV> gb_len += version_length ; //<S2SV> lto_tlv = nfc_llcp_build_tlv ( LLCP_TLV_LTO , & local -> lto , 1 , & lto_length ) ; //<S2SV> gb_len += lto_length ; //<S2SV> pr_debug ( "Local<S2SV_blank>wks<S2SV_blank>0x%lx\\n" , local -> local_wks ) ; //<S2SV> wks_tlv = nfc_llcp_build_tlv ( LLCP_TLV_WKS , ( u8 * ) & wks , 2 , & wks_length ) ; //<S2SV> gb_len += wks_length ; //<S2SV> miux_tlv = nfc_llcp_build_tlv ( LLCP_TLV_MIUX , ( u8 * ) & local -> miux , 0 , //<S2SV> & miux_length ) ; //<S2SV> gb_len += miux_length ; //<S2SV> gb_len += ARRAY_SIZE ( llcp_magic ) ; //<S2SV> if ( gb_len > NFC_MAX_GT_LEN ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> gb_cur = local -> gb ; //<S2SV> memcpy ( gb_cur , llcp_magic , ARRAY_SIZE ( llcp_magic ) ) ; //<S2SV> gb_cur += ARRAY_SIZE ( llcp_magic ) ; //<S2SV> memcpy ( gb_cur , version_tlv , version_length ) ; //<S2SV> gb_cur += version_length ; //<S2SV> memcpy ( gb_cur , lto_tlv , lto_length ) ; //<S2SV> gb_cur += lto_length ; //<S2SV> memcpy ( gb_cur , wks_tlv , wks_length ) ; //<S2SV> gb_cur += wks_length ; //<S2SV> memcpy ( gb_cur , miux_tlv , miux_length ) ; //<S2SV> gb_cur += miux_length ; //<S2SV> local -> gb_len = gb_len ; //<S2SV> out : //<S2SV> kfree ( version_tlv ) ; //<S2SV> kfree ( lto_tlv ) ; //<S2SV> kfree ( wks_tlv ) ; //<S2SV> kfree ( miux_tlv ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 