void //<S2SV> mwifiex_set_wmm_params ( struct mwifiex_private * priv , //<S2SV> struct mwifiex_uap_bss_param * bss_cfg , //<S2SV> struct cfg80211_ap_settings * params ) //<S2SV> { //<S2SV> const u8 * vendor_ie ; //<S2SV> const u8 * wmm_ie ; //<S2SV> u8 wmm_oui [ ] = { 0x00 , 0x50 , 0xf2 , 0x02 } ; //<S2SV> vendor_ie = cfg80211_find_vendor_ie ( WLAN_OUI_MICROSOFT , //<S2SV> WLAN_OUI_TYPE_MICROSOFT_WMM , //<S2SV> params -> beacon . tail , //<S2SV> params -> beacon . tail_len ) ; //<S2SV> if ( vendor_ie ) { //<S2SV> wmm_ie = vendor_ie ; //<S2SV> if ( * ( wmm_ie + 1 ) > sizeof ( struct mwifiex_types_wmm_info ) ) //<S2SV> return ; //<S2SV> memcpy ( & bss_cfg -> wmm_info , wmm_ie + //<S2SV> sizeof ( struct ieee_types_header ) , * ( wmm_ie + 1 ) ) ; //<S2SV> priv -> wmm_enabled = 1 ; //<S2SV> } else { //<S2SV> memset ( & bss_cfg -> wmm_info , 0 , sizeof ( bss_cfg -> wmm_info ) ) ; //<S2SV> memcpy ( & bss_cfg -> wmm_info . oui , wmm_oui , sizeof ( wmm_oui ) ) ; //<S2SV> bss_cfg -> wmm_info . subtype = MWIFIEX_WMM_SUBTYPE ; //<S2SV> bss_cfg -> wmm_info . version = MWIFIEX_WMM_VERSION ; //<S2SV> priv -> wmm_enabled = 0 ; //<S2SV> } //<S2SV> bss_cfg -> qos_info = 0x00 ; //<S2SV> return ; //<S2SV> } //<S2SV> 