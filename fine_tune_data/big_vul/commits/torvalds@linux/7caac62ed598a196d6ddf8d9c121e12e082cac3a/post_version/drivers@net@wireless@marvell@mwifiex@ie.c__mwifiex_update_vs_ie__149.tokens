static int mwifiex_update_vs_ie ( const u8 * ies , int ies_len , //<S2SV> struct mwifiex_ie * * ie_ptr , u16 mask , //<S2SV> unsigned int oui , u8 oui_type ) //<S2SV> { //<S2SV> struct ieee_types_header * vs_ie ; //<S2SV> struct mwifiex_ie * ie = * ie_ptr ; //<S2SV> const u8 * vendor_ie ; //<S2SV> vendor_ie = cfg80211_find_vendor_ie ( oui , oui_type , ies , ies_len ) ; //<S2SV> if ( vendor_ie ) { //<S2SV> if ( ! * ie_ptr ) { //<S2SV> * ie_ptr = kzalloc ( sizeof ( struct mwifiex_ie ) , //<S2SV> GFP_KERNEL ) ; //<S2SV> if ( ! * ie_ptr ) //<S2SV> return - ENOMEM ; //<S2SV> ie = * ie_ptr ; //<S2SV> } //<S2SV> vs_ie = ( struct ieee_types_header * ) vendor_ie ; //<S2SV> if ( le16_to_cpu ( ie -> ie_length ) + vs_ie -> len + 2 > //<S2SV> IEEE_MAX_IE_SIZE ) //<S2SV> return - EINVAL ; //<S2SV> memcpy ( ie -> ie_buffer + le16_to_cpu ( ie -> ie_length ) , //<S2SV> vs_ie , vs_ie -> len + 2 ) ; //<S2SV> le16_unaligned_add_cpu ( & ie -> ie_length , vs_ie -> len + 2 ) ; //<S2SV> ie -> mgmt_subtype_mask = cpu_to_le16 ( mask ) ; //<S2SV> ie -> ie_index = cpu_to_le16 ( MWIFIEX_AUTO_IDX_MASK ) ; //<S2SV> } //<S2SV> * ie_ptr = ie ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 