static int lz4_uncompress ( const char * source , char * dest , int osize ) //<S2SV> { //<S2SV> const BYTE * ip = ( const BYTE * ) source ; //<S2SV> const BYTE * ref ; //<S2SV> BYTE * op = ( BYTE * ) dest ; //<S2SV> BYTE * const oend = op + osize ; //<S2SV> BYTE * cpy ; //<S2SV> unsigned token ; //<S2SV> size_t length ; //<S2SV> size_t dec32table [ ] = { 0 , 3 , 2 , 3 , 0 , 0 , 0 , 0 } ; //<S2SV> # if LZ4_ARCH64 //<S2SV> size_t dec64table [ ] = { 0 , 0 , 0 , - 1 , 0 , 1 , 2 , 3 } ; //<S2SV> # endif //<S2SV> while ( 1 ) { //<S2SV> token = * ip ++ ; //<S2SV> length = ( token >> ML_BITS ) ; //<S2SV> if ( length == RUN_MASK ) { //<S2SV> size_t len ; //<S2SV> len = * ip ++ ; //<S2SV> for ( ; len == 255 ; length += 255 ) //<S2SV> len = * ip ++ ; //<S2SV> length += len ; //<S2SV> } //<S2SV> cpy = op + length ; //<S2SV> if ( unlikely ( cpy > oend - COPYLENGTH ) ) { //<S2SV> if ( cpy != oend ) //<S2SV> goto _output_error ; //<S2SV> memcpy ( op , ip , length ) ; //<S2SV> ip += length ; //<S2SV> break ; //<S2SV> } //<S2SV> LZ4_WILDCOPY ( ip , op , cpy ) ; //<S2SV> ip -= ( op - cpy ) ; //<S2SV> op = cpy ; //<S2SV> LZ4_READ_LITTLEENDIAN_16 ( ref , cpy , ip ) ; //<S2SV> ip += 2 ; //<S2SV> if ( unlikely ( ref < ( BYTE * const ) dest ) ) //<S2SV> goto _output_error ; //<S2SV> length = token & ML_MASK ; //<S2SV> if ( length == ML_MASK ) { //<S2SV> for ( ; * ip == 255 ; length += 255 ) //<S2SV> ip ++ ; //<S2SV> length += * ip ++ ; //<S2SV> } //<S2SV> if ( unlikely ( ( op - ref ) < STEPSIZE ) ) { //<S2SV> # if LZ4_ARCH64 //<S2SV> size_t dec64 = dec64table [ op - ref ] ; //<S2SV> # else //<S2SV> const int dec64 = 0 ; //<S2SV> # endif //<S2SV> op [ 0 ] = ref [ 0 ] ; //<S2SV> op [ 1 ] = ref [ 1 ] ; //<S2SV> op [ 2 ] = ref [ 2 ] ; //<S2SV> op [ 3 ] = ref [ 3 ] ; //<S2SV> op += 4 ; //<S2SV> ref += 4 ; //<S2SV> ref -= dec32table [ op - ref ] ; //<S2SV> PUT4 ( ref , op ) ; //<S2SV> op += STEPSIZE - 4 ; //<S2SV> ref -= dec64 ; //<S2SV> } else { //<S2SV> LZ4_COPYSTEP ( ref , op ) ; //<S2SV> } //<S2SV> cpy = op + length - ( STEPSIZE - 4 ) ; //<S2SV> if ( cpy > ( oend - COPYLENGTH ) ) { //<S2SV> if ( cpy > oend ) //<S2SV> goto _output_error ; //<S2SV> LZ4_SECURECOPY ( ref , op , ( oend - COPYLENGTH ) ) ; //<S2SV> while ( op < cpy ) //<S2SV> * op ++ = * ref ++ ; //<S2SV> op = cpy ; //<S2SV> if ( op == oend ) //<S2SV> goto _output_error ; //<S2SV> continue ; //<S2SV> } //<S2SV> LZ4_SECURECOPY ( ref , op , cpy ) ; //<S2SV> op = cpy ; //<S2SV> } //<S2SV> return ( int ) ( ( ( char * ) ip ) - source ) ; //<S2SV> _output_error : //<S2SV> return ( int ) ( - ( ( ( char * ) ip ) - source ) ) ; //<S2SV> } //<S2SV> 