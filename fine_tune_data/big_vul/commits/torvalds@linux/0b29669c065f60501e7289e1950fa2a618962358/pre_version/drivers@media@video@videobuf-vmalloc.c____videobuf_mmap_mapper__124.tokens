static int __videobuf_mmap_mapper ( struct videobuf_queue * q , //<S2SV> struct vm_area_struct * vma ) //<S2SV> { //<S2SV> struct videbuf_vmalloc_memory * mem ; //<S2SV> struct videobuf_mapping * map ; //<S2SV> unsigned int first ; //<S2SV> int retval ; //<S2SV> unsigned long offset = vma -> vm_pgoff << PAGE_SHIFT ; //<S2SV> if ( ! ( vma -> vm_flags & VM_WRITE ) || ! ( vma -> vm_flags & VM_SHARED ) ) //<S2SV> return - EINVAL ; //<S2SV> for ( first = 0 ; first < VIDEO_MAX_FRAME ; first ++ ) { //<S2SV> if ( NULL == q -> bufs [ first ] ) //<S2SV> continue ; //<S2SV> if ( V4L2_MEMORY_MMAP != q -> bufs [ first ] -> memory ) //<S2SV> continue ; //<S2SV> if ( q -> bufs [ first ] -> boff == offset ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( VIDEO_MAX_FRAME == first ) { //<S2SV> dprintk ( 1 , "mmap<S2SV_blank>app<S2SV_blank>bug:<S2SV_blank>offset<S2SV_blank>invalid<S2SV_blank>[offset=0x%lx]\\n" , //<S2SV> ( vma -> vm_pgoff << PAGE_SHIFT ) ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> map = q -> bufs [ first ] -> map = kmalloc ( sizeof ( struct videobuf_mapping ) , GFP_KERNEL ) ; //<S2SV> if ( NULL == map ) //<S2SV> return - ENOMEM ; //<S2SV> map -> start = vma -> vm_start ; //<S2SV> map -> end = vma -> vm_end ; //<S2SV> map -> q = q ; //<S2SV> q -> bufs [ first ] -> baddr = vma -> vm_start ; //<S2SV> vma -> vm_ops = & videobuf_vm_ops ; //<S2SV> vma -> vm_flags |= VM_DONTEXPAND | VM_RESERVED ; //<S2SV> vma -> vm_private_data = map ; //<S2SV> mem = q -> bufs [ first ] -> priv ; //<S2SV> BUG_ON ( ! mem ) ; //<S2SV> MAGIC_CHECK ( mem -> magic , MAGIC_VMAL_MEM ) ; //<S2SV> retval = remap_vmalloc_range ( vma , mem -> vmalloc , 0 ) ; //<S2SV> if ( retval < 0 ) { //<S2SV> dprintk ( 1 , "mmap:<S2SV_blank>postponing<S2SV_blank>remap_vmalloc_range\\n" ) ; //<S2SV> mem -> vma = kmalloc ( sizeof ( * vma ) , GFP_KERNEL ) ; //<S2SV> if ( ! mem -> vma ) { //<S2SV> kfree ( map ) ; //<S2SV> q -> bufs [ first ] -> map = NULL ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> memcpy ( mem -> vma , vma , sizeof ( * vma ) ) ; //<S2SV> } //<S2SV> dprintk ( 1 , "mmap<S2SV_blank>%p:<S2SV_blank>q=%p<S2SV_blank>%08lx-%08lx<S2SV_blank>(%lx)<S2SV_blank>pgoff<S2SV_blank>%08lx<S2SV_blank>buf<S2SV_blank>%d\\n" , //<S2SV> map , q , vma -> vm_start , vma -> vm_end , //<S2SV> ( long int ) q -> bufs [ first ] -> bsize , //<S2SV> vma -> vm_pgoff , first ) ; //<S2SV> videobuf_vm_open ( vma ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> 