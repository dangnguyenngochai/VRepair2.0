static long madvise_remove ( struct vm_area_struct * vma , //<S2SV> struct vm_area_struct * * prev , //<S2SV> unsigned long start , unsigned long end ) //<S2SV> { //<S2SV> loff_t offset ; //<S2SV> int error ; //<S2SV> struct file * f ; //<S2SV> * prev = NULL ; //<S2SV> if ( vma -> vm_flags & ( VM_LOCKED | VM_NONLINEAR | VM_HUGETLB ) ) //<S2SV> return - EINVAL ; //<S2SV> f = vma -> vm_file ; //<S2SV> if ( ! f || ! f -> f_mapping || ! f -> f_mapping -> host ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( ( vma -> vm_flags & ( VM_SHARED | VM_WRITE ) ) != ( VM_SHARED | VM_WRITE ) ) //<S2SV> return - EACCES ; //<S2SV> offset = ( loff_t ) ( start - vma -> vm_start ) //<S2SV> + ( ( loff_t ) vma -> vm_pgoff << PAGE_SHIFT ) ; //<S2SV> get_file ( f ) ; //<S2SV> up_read ( & current -> mm -> mmap_sem ) ; //<S2SV> error = do_fallocate ( f , //<S2SV> FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE , //<S2SV> offset , end - start ) ; //<S2SV> fput ( f ) ; //<S2SV> down_read ( & current -> mm -> mmap_sem ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 