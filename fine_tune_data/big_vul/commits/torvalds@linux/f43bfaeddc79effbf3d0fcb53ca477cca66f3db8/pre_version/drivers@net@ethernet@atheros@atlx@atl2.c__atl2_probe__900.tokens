static int atl2_probe ( struct pci_dev * pdev , const struct pci_device_id * ent ) //<S2SV> { //<S2SV> struct net_device * netdev ; //<S2SV> struct atl2_adapter * adapter ; //<S2SV> static int cards_found ; //<S2SV> unsigned long mmio_start ; //<S2SV> int mmio_len ; //<S2SV> int err ; //<S2SV> cards_found = 0 ; //<S2SV> err = pci_enable_device ( pdev ) ; //<S2SV> if ( err ) //<S2SV> return err ; //<S2SV> if ( pci_set_dma_mask ( pdev , DMA_BIT_MASK ( 32 ) ) && //<S2SV> pci_set_consistent_dma_mask ( pdev , DMA_BIT_MASK ( 32 ) ) ) { //<S2SV> printk ( KERN_ERR "atl2:<S2SV_blank>No<S2SV_blank>usable<S2SV_blank>DMA<S2SV_blank>configuration,<S2SV_blank>aborting\\n" ) ; //<S2SV> goto err_dma ; //<S2SV> } //<S2SV> err = pci_request_regions ( pdev , atl2_driver_name ) ; //<S2SV> if ( err ) //<S2SV> goto err_pci_reg ; //<S2SV> pci_set_master ( pdev ) ; //<S2SV> err = - ENOMEM ; //<S2SV> netdev = alloc_etherdev ( sizeof ( struct atl2_adapter ) ) ; //<S2SV> if ( ! netdev ) //<S2SV> goto err_alloc_etherdev ; //<S2SV> SET_NETDEV_DEV ( netdev , & pdev -> dev ) ; //<S2SV> pci_set_drvdata ( pdev , netdev ) ; //<S2SV> adapter = netdev_priv ( netdev ) ; //<S2SV> adapter -> netdev = netdev ; //<S2SV> adapter -> pdev = pdev ; //<S2SV> adapter -> hw . back = adapter ; //<S2SV> mmio_start = pci_resource_start ( pdev , 0x0 ) ; //<S2SV> mmio_len = pci_resource_len ( pdev , 0x0 ) ; //<S2SV> adapter -> hw . mem_rang = ( u32 ) mmio_len ; //<S2SV> adapter -> hw . hw_addr = ioremap ( mmio_start , mmio_len ) ; //<S2SV> if ( ! adapter -> hw . hw_addr ) { //<S2SV> err = - EIO ; //<S2SV> goto err_ioremap ; //<S2SV> } //<S2SV> atl2_setup_pcicmd ( pdev ) ; //<S2SV> netdev -> netdev_ops = & atl2_netdev_ops ; //<S2SV> netdev -> ethtool_ops = & atl2_ethtool_ops ; //<S2SV> netdev -> watchdog_timeo = 5 * HZ ; //<S2SV> strncpy ( netdev -> name , pci_name ( pdev ) , sizeof ( netdev -> name ) - 1 ) ; //<S2SV> netdev -> mem_start = mmio_start ; //<S2SV> netdev -> mem_end = mmio_start + mmio_len ; //<S2SV> adapter -> bd_number = cards_found ; //<S2SV> adapter -> pci_using_64 = false ; //<S2SV> err = atl2_sw_init ( adapter ) ; //<S2SV> if ( err ) //<S2SV> goto err_sw_init ; //<S2SV> err = - EIO ; //<S2SV> netdev -> hw_features = NETIF_F_SG | NETIF_F_HW_VLAN_CTAG_RX ; //<S2SV> netdev -> features |= ( NETIF_F_HW_VLAN_CTAG_TX | NETIF_F_HW_VLAN_CTAG_RX ) ; //<S2SV> atl2_phy_init ( & adapter -> hw ) ; //<S2SV> if ( atl2_reset_hw ( & adapter -> hw ) ) { //<S2SV> err = - EIO ; //<S2SV> goto err_reset ; //<S2SV> } //<S2SV> atl2_read_mac_addr ( & adapter -> hw ) ; //<S2SV> memcpy ( netdev -> dev_addr , adapter -> hw . mac_addr , netdev -> addr_len ) ; //<S2SV> if ( ! is_valid_ether_addr ( netdev -> dev_addr ) ) { //<S2SV> err = - EIO ; //<S2SV> goto err_eeprom ; //<S2SV> } //<S2SV> atl2_check_options ( adapter ) ; //<S2SV> setup_timer ( & adapter -> watchdog_timer , atl2_watchdog , //<S2SV> ( unsigned long ) adapter ) ; //<S2SV> setup_timer ( & adapter -> phy_config_timer , atl2_phy_config , //<S2SV> ( unsigned long ) adapter ) ; //<S2SV> INIT_WORK ( & adapter -> reset_task , atl2_reset_task ) ; //<S2SV> INIT_WORK ( & adapter -> link_chg_task , atl2_link_chg_task ) ; //<S2SV> strcpy ( netdev -> name , "eth%d" ) ; //<S2SV> err = register_netdev ( netdev ) ; //<S2SV> if ( err ) //<S2SV> goto err_register ; //<S2SV> netif_carrier_off ( netdev ) ; //<S2SV> netif_stop_queue ( netdev ) ; //<S2SV> cards_found ++ ; //<S2SV> return 0 ; //<S2SV> err_reset : //<S2SV> err_register : //<S2SV> err_sw_init : //<S2SV> err_eeprom : //<S2SV> iounmap ( adapter -> hw . hw_addr ) ; //<S2SV> err_ioremap : //<S2SV> free_netdev ( netdev ) ; //<S2SV> err_alloc_etherdev : //<S2SV> pci_release_regions ( pdev ) ; //<S2SV> err_pci_reg : //<S2SV> err_dma : //<S2SV> pci_disable_device ( pdev ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 