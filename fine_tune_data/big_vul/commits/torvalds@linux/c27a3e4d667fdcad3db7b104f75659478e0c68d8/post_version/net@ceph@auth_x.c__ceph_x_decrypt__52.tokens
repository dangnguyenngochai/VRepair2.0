static int ceph_x_decrypt ( struct ceph_crypto_key * secret , //<S2SV> void * * p , void * end , void * * obuf , size_t olen ) //<S2SV> { //<S2SV> struct ceph_x_encrypt_header head ; //<S2SV> size_t head_len = sizeof ( head ) ; //<S2SV> int len , ret ; //<S2SV> len = ceph_decode_32 ( p ) ; //<S2SV> if ( * p + len > end ) //<S2SV> return - EINVAL ; //<S2SV> dout ( "ceph_x_decrypt<S2SV_blank>len<S2SV_blank>%d\\n" , len ) ; //<S2SV> if ( * obuf == NULL ) { //<S2SV> * obuf = kmalloc ( len , GFP_NOFS ) ; //<S2SV> if ( ! * obuf ) //<S2SV> return - ENOMEM ; //<S2SV> olen = len ; //<S2SV> } //<S2SV> ret = ceph_decrypt2 ( secret , & head , & head_len , * obuf , & olen , * p , len ) ; //<S2SV> if ( ret ) //<S2SV> return ret ; //<S2SV> if ( head . struct_v != 1 || le64_to_cpu ( head . magic ) != CEPHX_ENC_MAGIC ) //<S2SV> return - EPERM ; //<S2SV> * p += len ; //<S2SV> return olen ; //<S2SV> } //<S2SV> 