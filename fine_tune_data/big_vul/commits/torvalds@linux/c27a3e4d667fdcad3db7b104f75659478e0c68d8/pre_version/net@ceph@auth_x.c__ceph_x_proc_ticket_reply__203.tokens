static int ceph_x_proc_ticket_reply ( struct ceph_auth_client * ac , //<S2SV> struct ceph_crypto_key * secret , //<S2SV> void * buf , void * end ) //<S2SV> { //<S2SV> void * p = buf ; //<S2SV> char * dbuf ; //<S2SV> char * ticket_buf ; //<S2SV> u8 reply_struct_v ; //<S2SV> u32 num ; //<S2SV> int ret ; //<S2SV> dbuf = kmalloc ( TEMP_TICKET_BUF_LEN , GFP_NOFS ) ; //<S2SV> if ( ! dbuf ) //<S2SV> return - ENOMEM ; //<S2SV> ret = - ENOMEM ; //<S2SV> ticket_buf = kmalloc ( TEMP_TICKET_BUF_LEN , GFP_NOFS ) ; //<S2SV> if ( ! ticket_buf ) //<S2SV> goto out_dbuf ; //<S2SV> ceph_decode_8_safe ( & p , end , reply_struct_v , bad ) ; //<S2SV> if ( reply_struct_v != 1 ) //<S2SV> return - EINVAL ; //<S2SV> ceph_decode_32_safe ( & p , end , num , bad ) ; //<S2SV> dout ( "%d<S2SV_blank>tickets\\n" , num ) ; //<S2SV> while ( num -- ) { //<S2SV> ret = process_one_ticket ( ac , secret , & p , end , //<S2SV> dbuf , ticket_buf ) ; //<S2SV> if ( ret ) //<S2SV> goto out ; //<S2SV> } //<S2SV> ret = 0 ; //<S2SV> out : //<S2SV> kfree ( ticket_buf ) ; //<S2SV> out_dbuf : //<S2SV> kfree ( dbuf ) ; //<S2SV> return ret ; //<S2SV> bad : //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> 