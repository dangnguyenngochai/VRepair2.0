static int ceph_x_verify_authorizer_reply ( struct ceph_auth_client * ac , //<S2SV> struct ceph_authorizer * a , size_t len ) //<S2SV> { //<S2SV> struct ceph_x_authorizer * au = ( void * ) a ; //<S2SV> struct ceph_x_ticket_handler * th ; //<S2SV> int ret = 0 ; //<S2SV> struct ceph_x_authorize_reply reply ; //<S2SV> void * p = au -> reply_buf ; //<S2SV> void * end = p + sizeof ( au -> reply_buf ) ; //<S2SV> th = get_ticket_handler ( ac , au -> service ) ; //<S2SV> if ( IS_ERR ( th ) ) //<S2SV> return PTR_ERR ( th ) ; //<S2SV> ret = ceph_x_decrypt ( & th -> session_key , & p , end , & reply , sizeof ( reply ) ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> if ( ret != sizeof ( reply ) ) //<S2SV> return - EPERM ; //<S2SV> if ( au -> nonce + 1 != le64_to_cpu ( reply . nonce_plus_one ) ) //<S2SV> ret = - EPERM ; //<S2SV> else //<S2SV> ret = 0 ; //<S2SV> dout ( "verify_authorizer_reply<S2SV_blank>nonce<S2SV_blank>%llx<S2SV_blank>got<S2SV_blank>%llx<S2SV_blank>ret<S2SV_blank>%d\\n" , //<S2SV> au -> nonce , le64_to_cpu ( reply . nonce_plus_one ) , ret ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 