static int pit_ioport_read ( struct kvm_io_device * this , //<S2SV> gpa_t addr , int len , void * data ) //<S2SV> { //<S2SV> struct kvm_pit * pit = dev_to_pit ( this ) ; //<S2SV> struct kvm_kpit_state * pit_state = & pit -> pit_state ; //<S2SV> struct kvm * kvm = pit -> kvm ; //<S2SV> int ret , count ; //<S2SV> struct kvm_kpit_channel_state * s ; //<S2SV> if ( ! pit_in_range ( addr ) ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> addr &= KVM_PIT_CHANNEL_MASK ; //<S2SV> s = & pit_state -> channels [ addr ] ; //<S2SV> mutex_lock ( & pit_state -> lock ) ; //<S2SV> if ( s -> status_latched ) { //<S2SV> s -> status_latched = 0 ; //<S2SV> ret = s -> status ; //<S2SV> } else if ( s -> count_latched ) { //<S2SV> switch ( s -> count_latched ) { //<S2SV> default : //<S2SV> case RW_STATE_LSB : //<S2SV> ret = s -> latched_count & 0xff ; //<S2SV> s -> count_latched = 0 ; //<S2SV> break ; //<S2SV> case RW_STATE_MSB : //<S2SV> ret = s -> latched_count >> 8 ; //<S2SV> s -> count_latched = 0 ; //<S2SV> break ; //<S2SV> case RW_STATE_WORD0 : //<S2SV> ret = s -> latched_count & 0xff ; //<S2SV> s -> count_latched = RW_STATE_MSB ; //<S2SV> break ; //<S2SV> } //<S2SV> } else { //<S2SV> switch ( s -> read_state ) { //<S2SV> default : //<S2SV> case RW_STATE_LSB : //<S2SV> count = pit_get_count ( kvm , addr ) ; //<S2SV> ret = count & 0xff ; //<S2SV> break ; //<S2SV> case RW_STATE_MSB : //<S2SV> count = pit_get_count ( kvm , addr ) ; //<S2SV> ret = ( count >> 8 ) & 0xff ; //<S2SV> break ; //<S2SV> case RW_STATE_WORD0 : //<S2SV> count = pit_get_count ( kvm , addr ) ; //<S2SV> ret = count & 0xff ; //<S2SV> s -> read_state = RW_STATE_WORD1 ; //<S2SV> break ; //<S2SV> case RW_STATE_WORD1 : //<S2SV> count = pit_get_count ( kvm , addr ) ; //<S2SV> ret = ( count >> 8 ) & 0xff ; //<S2SV> s -> read_state = RW_STATE_WORD0 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( len > sizeof ( ret ) ) //<S2SV> len = sizeof ( ret ) ; //<S2SV> memcpy ( data , ( char * ) & ret , len ) ; //<S2SV> mutex_unlock ( & pit_state -> lock ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 