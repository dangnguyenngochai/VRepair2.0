static ssize_t ib_uverbs_write ( struct file * filp , const char __user * buf , //<S2SV> size_t count , loff_t * pos ) //<S2SV> { //<S2SV> struct ib_uverbs_file * file = filp -> private_data ; //<S2SV> struct ib_device * ib_dev ; //<S2SV> struct ib_uverbs_cmd_hdr hdr ; //<S2SV> __u32 command ; //<S2SV> __u32 flags ; //<S2SV> int srcu_key ; //<S2SV> ssize_t ret ; //<S2SV> if ( count < sizeof hdr ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & hdr , buf , sizeof hdr ) ) //<S2SV> return - EFAULT ; //<S2SV> srcu_key = srcu_read_lock ( & file -> device -> disassociate_srcu ) ; //<S2SV> ib_dev = srcu_dereference ( file -> device -> ib_dev , //<S2SV> & file -> device -> disassociate_srcu ) ; //<S2SV> if ( ! ib_dev ) { //<S2SV> ret = - EIO ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( hdr . command & ~ ( __u32 ) ( IB_USER_VERBS_CMD_FLAGS_MASK | //<S2SV> IB_USER_VERBS_CMD_COMMAND_MASK ) ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> command = hdr . command & IB_USER_VERBS_CMD_COMMAND_MASK ; //<S2SV> if ( verify_command_mask ( ib_dev , command ) ) { //<S2SV> ret = - EOPNOTSUPP ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( ! file -> ucontext && //<S2SV> command != IB_USER_VERBS_CMD_GET_CONTEXT ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> flags = ( hdr . command & //<S2SV> IB_USER_VERBS_CMD_FLAGS_MASK ) >> IB_USER_VERBS_CMD_FLAGS_SHIFT ; //<S2SV> if ( ! flags ) { //<S2SV> if ( command >= ARRAY_SIZE ( uverbs_cmd_table ) || //<S2SV> ! uverbs_cmd_table [ command ] ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( hdr . in_words * 4 != count ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> ret = uverbs_cmd_table [ command ] ( file , ib_dev , //<S2SV> buf + sizeof ( hdr ) , //<S2SV> hdr . in_words * 4 , //<S2SV> hdr . out_words * 4 ) ; //<S2SV> } else if ( flags == IB_USER_VERBS_CMD_FLAG_EXTENDED ) { //<S2SV> struct ib_uverbs_ex_cmd_hdr ex_hdr ; //<S2SV> struct ib_udata ucore ; //<S2SV> struct ib_udata uhw ; //<S2SV> size_t written_count = count ; //<S2SV> if ( command >= ARRAY_SIZE ( uverbs_ex_cmd_table ) || //<S2SV> ! uverbs_ex_cmd_table [ command ] ) { //<S2SV> ret = - ENOSYS ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( ! file -> ucontext ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( count < ( sizeof ( hdr ) + sizeof ( ex_hdr ) ) ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( copy_from_user ( & ex_hdr , buf + sizeof ( hdr ) , sizeof ( ex_hdr ) ) ) { //<S2SV> ret = - EFAULT ; //<S2SV> goto out ; //<S2SV> } //<S2SV> count -= sizeof ( hdr ) + sizeof ( ex_hdr ) ; //<S2SV> buf += sizeof ( hdr ) + sizeof ( ex_hdr ) ; //<S2SV> if ( ( hdr . in_words + ex_hdr . provider_in_words ) * 8 != count ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( ex_hdr . cmd_hdr_reserved ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( ex_hdr . response ) { //<S2SV> if ( ! hdr . out_words && ! ex_hdr . provider_out_words ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( ! access_ok ( VERIFY_WRITE , //<S2SV> ( void __user * ) ( unsigned long ) ex_hdr . response , //<S2SV> ( hdr . out_words + ex_hdr . provider_out_words ) * 8 ) ) { //<S2SV> ret = - EFAULT ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( hdr . out_words || ex_hdr . provider_out_words ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> INIT_UDATA_BUF_OR_NULL ( & ucore , buf , ( unsigned long ) ex_hdr . response , //<S2SV> hdr . in_words * 8 , hdr . out_words * 8 ) ; //<S2SV> INIT_UDATA_BUF_OR_NULL ( & uhw , //<S2SV> buf + ucore . inlen , //<S2SV> ( unsigned long ) ex_hdr . response + ucore . outlen , //<S2SV> ex_hdr . provider_in_words * 8 , //<S2SV> ex_hdr . provider_out_words * 8 ) ; //<S2SV> ret = uverbs_ex_cmd_table [ command ] ( file , //<S2SV> ib_dev , //<S2SV> & ucore , //<S2SV> & uhw ) ; //<S2SV> if ( ! ret ) //<S2SV> ret = written_count ; //<S2SV> } else { //<S2SV> ret = - ENOSYS ; //<S2SV> } //<S2SV> out : //<S2SV> srcu_read_unlock ( & file -> device -> disassociate_srcu , srcu_key ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 