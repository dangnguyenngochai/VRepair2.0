static int hidp_setup_hid ( struct hidp_session * session , //<S2SV> struct hidp_connadd_req * req ) //<S2SV> { //<S2SV> struct hid_device * hid ; //<S2SV> int err ; //<S2SV> session -> rd_data = kzalloc ( req -> rd_size , GFP_KERNEL ) ; //<S2SV> if ( ! session -> rd_data ) //<S2SV> return - ENOMEM ; //<S2SV> if ( copy_from_user ( session -> rd_data , req -> rd_data , req -> rd_size ) ) { //<S2SV> err = - EFAULT ; //<S2SV> goto fault ; //<S2SV> } //<S2SV> session -> rd_size = req -> rd_size ; //<S2SV> hid = hid_allocate_device ( ) ; //<S2SV> if ( IS_ERR ( hid ) ) { //<S2SV> err = PTR_ERR ( hid ) ; //<S2SV> goto fault ; //<S2SV> } //<S2SV> session -> hid = hid ; //<S2SV> hid -> driver_data = session ; //<S2SV> hid -> bus = BUS_BLUETOOTH ; //<S2SV> hid -> vendor = req -> vendor ; //<S2SV> hid -> product = req -> product ; //<S2SV> hid -> version = req -> version ; //<S2SV> hid -> country = req -> country ; //<S2SV> strncpy ( hid -> name , req -> name , sizeof ( req -> name ) - 1 ) ; //<S2SV> snprintf ( hid -> phys , sizeof ( hid -> phys ) , "%pMR" , //<S2SV> & bt_sk ( session -> ctrl_sock -> sk ) -> src ) ; //<S2SV> snprintf ( hid -> uniq , sizeof ( hid -> uniq ) , "%pMR" , //<S2SV> & bt_sk ( session -> ctrl_sock -> sk ) -> dst ) ; //<S2SV> hid -> dev . parent = & session -> conn -> dev ; //<S2SV> hid -> ll_driver = & hidp_hid_driver ; //<S2SV> hid -> hid_get_raw_report = hidp_get_raw_report ; //<S2SV> hid -> hid_output_raw_report = hidp_output_raw_report ; //<S2SV> if ( hid_ignore ( hid ) ) { //<S2SV> hid_destroy_device ( session -> hid ) ; //<S2SV> session -> hid = NULL ; //<S2SV> return - ENODEV ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> fault : //<S2SV> kfree ( session -> rd_data ) ; //<S2SV> session -> rd_data = NULL ; //<S2SV> return err ; //<S2SV> } //<S2SV> 