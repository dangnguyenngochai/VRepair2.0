static int nlmsg_populate_mdb_fill ( struct sk_buff * skb , //<S2SV> struct net_device * dev , //<S2SV> struct br_mdb_entry * entry , u32 pid , //<S2SV> u32 seq , int type , unsigned int flags ) //<S2SV> { //<S2SV> struct nlmsghdr * nlh ; //<S2SV> struct br_port_msg * bpm ; //<S2SV> struct nlattr * nest , * nest2 ; //<S2SV> nlh = nlmsg_put ( skb , pid , seq , type , sizeof ( * bpm ) , NLM_F_MULTI ) ; //<S2SV> if ( ! nlh ) //<S2SV> return - EMSGSIZE ; //<S2SV> bpm = nlmsg_data ( nlh ) ; //<S2SV> bpm -> family = AF_BRIDGE ; //<S2SV> bpm -> ifindex = dev -> ifindex ; //<S2SV> nest = nla_nest_start ( skb , MDBA_MDB ) ; //<S2SV> if ( nest == NULL ) //<S2SV> goto cancel ; //<S2SV> nest2 = nla_nest_start ( skb , MDBA_MDB_ENTRY ) ; //<S2SV> if ( nest2 == NULL ) //<S2SV> goto end ; //<S2SV> if ( nla_put ( skb , MDBA_MDB_ENTRY_INFO , sizeof ( * entry ) , entry ) ) //<S2SV> goto end ; //<S2SV> nla_nest_end ( skb , nest2 ) ; //<S2SV> nla_nest_end ( skb , nest ) ; //<S2SV> return nlmsg_end ( skb , nlh ) ; //<S2SV> end : //<S2SV> nla_nest_end ( skb , nest ) ; //<S2SV> cancel : //<S2SV> nlmsg_cancel ( skb , nlh ) ; //<S2SV> return - EMSGSIZE ; //<S2SV> } //<S2SV> 