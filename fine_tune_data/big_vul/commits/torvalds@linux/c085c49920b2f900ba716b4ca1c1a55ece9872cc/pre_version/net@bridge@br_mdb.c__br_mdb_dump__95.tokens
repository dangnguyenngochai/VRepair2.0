static int br_mdb_dump ( struct sk_buff * skb , struct netlink_callback * cb ) //<S2SV> { //<S2SV> struct net_device * dev ; //<S2SV> struct net * net = sock_net ( skb -> sk ) ; //<S2SV> struct nlmsghdr * nlh = NULL ; //<S2SV> int idx = 0 , s_idx ; //<S2SV> s_idx = cb -> args [ 0 ] ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> cb -> seq = net -> dev_base_seq + br_mdb_rehash_seq ; //<S2SV> for_each_netdev_rcu ( net , dev ) { //<S2SV> if ( dev -> priv_flags & IFF_EBRIDGE ) { //<S2SV> struct br_port_msg * bpm ; //<S2SV> if ( idx < s_idx ) //<S2SV> goto skip ; //<S2SV> nlh = nlmsg_put ( skb , NETLINK_CB ( cb -> skb ) . portid , //<S2SV> cb -> nlh -> nlmsg_seq , RTM_GETMDB , //<S2SV> sizeof ( * bpm ) , NLM_F_MULTI ) ; //<S2SV> if ( nlh == NULL ) //<S2SV> break ; //<S2SV> bpm = nlmsg_data ( nlh ) ; //<S2SV> bpm -> ifindex = dev -> ifindex ; //<S2SV> if ( br_mdb_fill_info ( skb , cb , dev ) < 0 ) //<S2SV> goto out ; //<S2SV> if ( br_rports_fill_info ( skb , cb , dev ) < 0 ) //<S2SV> goto out ; //<S2SV> cb -> args [ 1 ] = 0 ; //<S2SV> nlmsg_end ( skb , nlh ) ; //<S2SV> skip : //<S2SV> idx ++ ; //<S2SV> } //<S2SV> } //<S2SV> out : //<S2SV> if ( nlh ) //<S2SV> nlmsg_end ( skb , nlh ) ; //<S2SV> rcu_read_unlock ( ) ; //<S2SV> cb -> args [ 0 ] = idx ; //<S2SV> return skb -> len ; //<S2SV> } //<S2SV> 