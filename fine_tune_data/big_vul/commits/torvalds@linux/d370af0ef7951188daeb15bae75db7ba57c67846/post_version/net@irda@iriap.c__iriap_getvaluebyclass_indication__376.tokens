static void iriap_getvaluebyclass_indication ( struct iriap_cb * self , //<S2SV> struct sk_buff * skb ) //<S2SV> { //<S2SV> struct ias_object * obj ; //<S2SV> struct ias_attrib * attrib ; //<S2SV> int name_len ; //<S2SV> int attr_len ; //<S2SV> char name [ IAS_MAX_CLASSNAME + 1 ] ; //<S2SV> char attr [ IAS_MAX_ATTRIBNAME + 1 ] ; //<S2SV> __u8 * fp ; //<S2SV> int n ; //<S2SV> IRDA_DEBUG ( 4 , "%s()\\n" , __func__ ) ; //<S2SV> IRDA_ASSERT ( self != NULL , return ; ) ; //<S2SV> IRDA_ASSERT ( self -> magic == IAS_MAGIC , return ; ) ; //<S2SV> IRDA_ASSERT ( skb != NULL , return ; ) ; //<S2SV> fp = skb -> data ; //<S2SV> n = 1 ; //<S2SV> name_len = fp [ n ++ ] ; //<S2SV> IRDA_ASSERT ( name_len < IAS_MAX_CLASSNAME + 1 , return ; ) ; //<S2SV> memcpy ( name , fp + n , name_len ) ; n += name_len ; //<S2SV> name [ name_len ] = '\\0' ; //<S2SV> attr_len = fp [ n ++ ] ; //<S2SV> IRDA_ASSERT ( attr_len < IAS_MAX_ATTRIBNAME + 1 , return ; ) ; //<S2SV> memcpy ( attr , fp + n , attr_len ) ; n += attr_len ; //<S2SV> attr [ attr_len ] = '\\0' ; //<S2SV> IRDA_DEBUG ( 4 , "LM-IAS:<S2SV_blank>Looking<S2SV_blank>up<S2SV_blank>%s:<S2SV_blank>%s\\n" , name , attr ) ; //<S2SV> obj = irias_find_object ( name ) ; //<S2SV> if ( obj == NULL ) { //<S2SV> IRDA_DEBUG ( 2 , "LM-IAS:<S2SV_blank>Object<S2SV_blank>%s<S2SV_blank>not<S2SV_blank>found\\n" , name ) ; //<S2SV> iriap_getvaluebyclass_response ( self , 0x1235 , IAS_CLASS_UNKNOWN , //<S2SV> & irias_missing ) ; //<S2SV> return ; //<S2SV> } //<S2SV> IRDA_DEBUG ( 4 , "LM-IAS:<S2SV_blank>found<S2SV_blank>%s,<S2SV_blank>id=%d\\n" , obj -> name , obj -> id ) ; //<S2SV> attrib = irias_find_attrib ( obj , attr ) ; //<S2SV> if ( attrib == NULL ) { //<S2SV> IRDA_DEBUG ( 2 , "LM-IAS:<S2SV_blank>Attribute<S2SV_blank>%s<S2SV_blank>not<S2SV_blank>found\\n" , attr ) ; //<S2SV> iriap_getvaluebyclass_response ( self , obj -> id , //<S2SV> IAS_ATTRIB_UNKNOWN , //<S2SV> & irias_missing ) ; //<S2SV> return ; //<S2SV> } //<S2SV> iriap_getvaluebyclass_response ( self , obj -> id , IAS_SUCCESS , //<S2SV> attrib -> value ) ; //<S2SV> } //<S2SV> 