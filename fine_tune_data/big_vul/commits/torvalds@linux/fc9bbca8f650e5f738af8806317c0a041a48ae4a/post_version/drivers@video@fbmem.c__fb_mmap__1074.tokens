static int //<S2SV> fb_mmap ( struct file * file , struct vm_area_struct * vma ) //<S2SV> { //<S2SV> struct fb_info * info = file_fb_info ( file ) ; //<S2SV> struct fb_ops * fb ; //<S2SV> unsigned long mmio_pgoff ; //<S2SV> unsigned long start ; //<S2SV> u32 len ; //<S2SV> if ( ! info ) //<S2SV> return - ENODEV ; //<S2SV> fb = info -> fbops ; //<S2SV> if ( ! fb ) //<S2SV> return - ENODEV ; //<S2SV> mutex_lock ( & info -> mm_lock ) ; //<S2SV> if ( fb -> fb_mmap ) { //<S2SV> int res ; //<S2SV> res = fb -> fb_mmap ( info , vma ) ; //<S2SV> mutex_unlock ( & info -> mm_lock ) ; //<S2SV> return res ; //<S2SV> } //<S2SV> start = info -> fix . smem_start ; //<S2SV> len = info -> fix . smem_len ; //<S2SV> mmio_pgoff = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + len ) >> PAGE_SHIFT ; //<S2SV> if ( vma -> vm_pgoff >= mmio_pgoff ) { //<S2SV> vma -> vm_pgoff -= mmio_pgoff ; //<S2SV> start = info -> fix . mmio_start ; //<S2SV> len = info -> fix . mmio_len ; //<S2SV> } //<S2SV> mutex_unlock ( & info -> mm_lock ) ; //<S2SV> vma -> vm_page_prot = vm_get_page_prot ( vma -> vm_flags ) ; //<S2SV> fb_pgprotect ( file , vma , start ) ; //<S2SV> return vm_iomap_memory ( vma , start , len ) ; //<S2SV> } //<S2SV> 