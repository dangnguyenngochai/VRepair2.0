static int //<S2SV> xlate_to_uni ( const unsigned char * name , int len , unsigned char * outname , //<S2SV> int * longlen , int * outlen , int escape , int utf8 , //<S2SV> struct nls_table * nls ) //<S2SV> { //<S2SV> const unsigned char * ip ; //<S2SV> unsigned char nc ; //<S2SV> unsigned char * op ; //<S2SV> unsigned int ec ; //<S2SV> int i , k , fill ; //<S2SV> int charlen ; //<S2SV> if ( utf8 ) { //<S2SV> * outlen = utf8s_to_utf16s ( name , len , ( wchar_t * ) outname ) ; //<S2SV> if ( * outlen < 0 ) //<S2SV> return * outlen ; //<S2SV> else if ( * outlen > FAT_LFN_LEN ) //<S2SV> return - ENAMETOOLONG ; //<S2SV> op = & outname [ * outlen * sizeof ( wchar_t ) ] ; //<S2SV> } else { //<S2SV> if ( nls ) { //<S2SV> for ( i = 0 , ip = name , op = outname , * outlen = 0 ; //<S2SV> i < len && * outlen <= FAT_LFN_LEN ; //<S2SV> * outlen += 1 ) //<S2SV> { //<S2SV> if ( escape && ( * ip == ':' ) ) { //<S2SV> if ( i > len - 5 ) //<S2SV> return - EINVAL ; //<S2SV> ec = 0 ; //<S2SV> for ( k = 1 ; k < 5 ; k ++ ) { //<S2SV> nc = ip [ k ] ; //<S2SV> ec <<= 4 ; //<S2SV> if ( nc >= '0' && nc <= '9' ) { //<S2SV> ec |= nc - '0' ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( nc >= 'a' && nc <= 'f' ) { //<S2SV> ec |= nc - ( 'a' - 10 ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( nc >= 'A' && nc <= 'F' ) { //<S2SV> ec |= nc - ( 'A' - 10 ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> * op ++ = ec & 0xFF ; //<S2SV> * op ++ = ec >> 8 ; //<S2SV> ip += 5 ; //<S2SV> i += 5 ; //<S2SV> } else { //<S2SV> if ( ( charlen = nls -> char2uni ( ip , len - i , ( wchar_t * ) op ) ) < 0 ) //<S2SV> return - EINVAL ; //<S2SV> ip += charlen ; //<S2SV> i += charlen ; //<S2SV> op += 2 ; //<S2SV> } //<S2SV> } //<S2SV> if ( i < len ) //<S2SV> return - ENAMETOOLONG ; //<S2SV> } else { //<S2SV> for ( i = 0 , ip = name , op = outname , * outlen = 0 ; //<S2SV> i < len && * outlen <= FAT_LFN_LEN ; //<S2SV> i ++ , * outlen += 1 ) //<S2SV> { //<S2SV> * op ++ = * ip ++ ; //<S2SV> * op ++ = 0 ; //<S2SV> } //<S2SV> if ( i < len ) //<S2SV> return - ENAMETOOLONG ; //<S2SV> } //<S2SV> } //<S2SV> * longlen = * outlen ; //<S2SV> if ( * outlen % 13 ) { //<S2SV> * op ++ = 0 ; //<S2SV> * op ++ = 0 ; //<S2SV> * outlen += 1 ; //<S2SV> if ( * outlen % 13 ) { //<S2SV> fill = 13 - ( * outlen % 13 ) ; //<S2SV> for ( i = 0 ; i < fill ; i ++ ) { //<S2SV> * op ++ = 0xff ; //<S2SV> * op ++ = 0xff ; //<S2SV> } //<S2SV> * outlen += fill ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 