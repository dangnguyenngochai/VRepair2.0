int drm_mode_dirtyfb_ioctl ( struct drm_device * dev , //<S2SV> void * data , struct drm_file * file_priv ) //<S2SV> { //<S2SV> struct drm_clip_rect __user * clips_ptr ; //<S2SV> struct drm_clip_rect * clips = NULL ; //<S2SV> struct drm_mode_fb_dirty_cmd * r = data ; //<S2SV> struct drm_mode_object * obj ; //<S2SV> struct drm_framebuffer * fb ; //<S2SV> unsigned flags ; //<S2SV> int num_clips ; //<S2SV> int ret = 0 ; //<S2SV> if ( ! drm_core_check_feature ( dev , DRIVER_MODESET ) ) //<S2SV> return - EINVAL ; //<S2SV> mutex_lock ( & dev -> mode_config . mutex ) ; //<S2SV> obj = drm_mode_object_find ( dev , r -> fb_id , DRM_MODE_OBJECT_FB ) ; //<S2SV> if ( ! obj ) { //<S2SV> DRM_ERROR ( "invalid<S2SV_blank>framebuffer<S2SV_blank>id\\n" ) ; //<S2SV> ret = - EINVAL ; //<S2SV> goto out_err1 ; //<S2SV> } //<S2SV> fb = obj_to_fb ( obj ) ; //<S2SV> num_clips = r -> num_clips ; //<S2SV> clips_ptr = ( struct drm_clip_rect * ) ( unsigned long ) r -> clips_ptr ; //<S2SV> if ( ! num_clips != ! clips_ptr ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out_err1 ; //<S2SV> } //<S2SV> flags = DRM_MODE_FB_DIRTY_FLAGS & r -> flags ; //<S2SV> if ( flags & DRM_MODE_FB_DIRTY_ANNOTATE_COPY && ( num_clips % 2 ) ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto out_err1 ; //<S2SV> } //<S2SV> if ( num_clips && clips_ptr ) { //<S2SV> clips = kzalloc ( num_clips * sizeof ( * clips ) , GFP_KERNEL ) ; //<S2SV> if ( ! clips ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto out_err1 ; //<S2SV> } //<S2SV> ret = copy_from_user ( clips , clips_ptr , //<S2SV> num_clips * sizeof ( * clips ) ) ; //<S2SV> if ( ret ) { //<S2SV> ret = - EFAULT ; //<S2SV> goto out_err2 ; //<S2SV> } //<S2SV> } //<S2SV> if ( fb -> funcs -> dirty ) { //<S2SV> ret = fb -> funcs -> dirty ( fb , file_priv , flags , r -> color , //<S2SV> clips , num_clips ) ; //<S2SV> } else { //<S2SV> ret = - ENOSYS ; //<S2SV> goto out_err2 ; //<S2SV> } //<S2SV> out_err2 : //<S2SV> kfree ( clips ) ; //<S2SV> out_err1 : //<S2SV> mutex_unlock ( & dev -> mode_config . mutex ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 