static void f2fs_put_super ( struct super_block * sb ) //<S2SV> { //<S2SV> struct f2fs_sb_info * sbi = F2FS_SB ( sb ) ; //<S2SV> int i ; //<S2SV> f2fs_quota_off_umount ( sb ) ; //<S2SV> mutex_lock ( & sbi -> umount_mutex ) ; //<S2SV> if ( is_sbi_flag_set ( sbi , SBI_IS_DIRTY ) || //<S2SV> ! is_set_ckpt_flags ( sbi , CP_UMOUNT_FLAG ) ) { //<S2SV> struct cp_control cpc = { //<S2SV> . reason = CP_UMOUNT , //<S2SV> } ; //<S2SV> write_checkpoint ( sbi , & cpc ) ; //<S2SV> } //<S2SV> f2fs_wait_discard_bios ( sbi ) ; //<S2SV> if ( f2fs_discard_en ( sbi ) && ! sbi -> discard_blks ) { //<S2SV> struct cp_control cpc = { //<S2SV> . reason = CP_UMOUNT | CP_TRIMMED , //<S2SV> } ; //<S2SV> write_checkpoint ( sbi , & cpc ) ; //<S2SV> } //<S2SV> f2fs_destroy_stats ( sbi ) ; //<S2SV> release_ino_entry ( sbi , true ) ; //<S2SV> f2fs_leave_shrinker ( sbi ) ; //<S2SV> mutex_unlock ( & sbi -> umount_mutex ) ; //<S2SV> f2fs_flush_merged_writes ( sbi ) ; //<S2SV> iput ( sbi -> node_inode ) ; //<S2SV> iput ( sbi -> meta_inode ) ; //<S2SV> destroy_node_manager ( sbi ) ; //<S2SV> destroy_segment_manager ( sbi ) ; //<S2SV> kfree ( sbi -> ckpt ) ; //<S2SV> f2fs_unregister_sysfs ( sbi ) ; //<S2SV> sb -> s_fs_info = NULL ; //<S2SV> if ( sbi -> s_chksum_driver ) //<S2SV> crypto_free_shash ( sbi -> s_chksum_driver ) ; //<S2SV> kfree ( sbi -> raw_super ) ; //<S2SV> destroy_device_list ( sbi ) ; //<S2SV> mempool_destroy ( sbi -> write_io_dummy ) ; //<S2SV> # ifdef CONFIG_QUOTA //<S2SV> for ( i = 0 ; i < MAXQUOTAS ; i ++ ) //<S2SV> kfree ( sbi -> s_qf_names [ i ] ) ; //<S2SV> # endif //<S2SV> destroy_percpu_info ( sbi ) ; //<S2SV> for ( i = 0 ; i < NR_PAGE_TYPE ; i ++ ) //<S2SV> kfree ( sbi -> write_io [ i ] ) ; //<S2SV> kfree ( sbi ) ; //<S2SV> } //<S2SV> 