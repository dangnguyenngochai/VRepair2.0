static int do_timer_create ( clockid_t which_clock , struct sigevent * event , //<S2SV> timer_t __user * created_timer_id ) //<S2SV> { //<S2SV> const struct k_clock * kc = clockid_to_kclock ( which_clock ) ; //<S2SV> struct k_itimer * new_timer ; //<S2SV> int error , new_timer_id ; //<S2SV> int it_id_set = IT_ID_NOT_SET ; //<S2SV> if ( ! kc ) //<S2SV> return - EINVAL ; //<S2SV> if ( ! kc -> timer_create ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> new_timer = alloc_posix_timer ( ) ; //<S2SV> if ( unlikely ( ! new_timer ) ) //<S2SV> return - EAGAIN ; //<S2SV> spin_lock_init ( & new_timer -> it_lock ) ; //<S2SV> new_timer_id = posix_timer_add ( new_timer ) ; //<S2SV> if ( new_timer_id < 0 ) { //<S2SV> error = new_timer_id ; //<S2SV> goto out ; //<S2SV> } //<S2SV> it_id_set = IT_ID_SET ; //<S2SV> new_timer -> it_id = ( timer_t ) new_timer_id ; //<S2SV> new_timer -> it_clock = which_clock ; //<S2SV> new_timer -> kclock = kc ; //<S2SV> new_timer -> it_overrun = - 1 ; //<S2SV> if ( event ) { //<S2SV> rcu_read_lock ( ) ; //<S2SV> new_timer -> it_pid = get_pid ( good_sigevent ( event ) ) ; //<S2SV> rcu_read_unlock ( ) ; //<S2SV> if ( ! new_timer -> it_pid ) { //<S2SV> error = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> new_timer -> it_sigev_notify = event -> sigev_notify ; //<S2SV> new_timer -> sigq -> info . si_signo = event -> sigev_signo ; //<S2SV> new_timer -> sigq -> info . si_value = event -> sigev_value ; //<S2SV> } else { //<S2SV> new_timer -> it_sigev_notify = SIGEV_SIGNAL ; //<S2SV> new_timer -> sigq -> info . si_signo = SIGALRM ; //<S2SV> memset ( & new_timer -> sigq -> info . si_value , 0 , sizeof ( sigval_t ) ) ; //<S2SV> new_timer -> sigq -> info . si_value . sival_int = new_timer -> it_id ; //<S2SV> new_timer -> it_pid = get_pid ( task_tgid ( current ) ) ; //<S2SV> } //<S2SV> new_timer -> sigq -> info . si_tid = new_timer -> it_id ; //<S2SV> new_timer -> sigq -> info . si_code = SI_TIMER ; //<S2SV> if ( copy_to_user ( created_timer_id , //<S2SV> & new_timer_id , sizeof ( new_timer_id ) ) ) { //<S2SV> error = - EFAULT ; //<S2SV> goto out ; //<S2SV> } //<S2SV> error = kc -> timer_create ( new_timer ) ; //<S2SV> if ( error ) //<S2SV> goto out ; //<S2SV> spin_lock_irq ( & current -> sighand -> siglock ) ; //<S2SV> new_timer -> it_signal = current -> signal ; //<S2SV> list_add ( & new_timer -> list , & current -> signal -> posix_timers ) ; //<S2SV> spin_unlock_irq ( & current -> sighand -> siglock ) ; //<S2SV> return 0 ; //<S2SV> out : //<S2SV> release_posix_timer ( new_timer , it_id_set ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 