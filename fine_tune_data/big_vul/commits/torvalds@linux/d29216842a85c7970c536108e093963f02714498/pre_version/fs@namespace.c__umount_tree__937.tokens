static void umount_tree ( struct mount * mnt , enum umount_tree_flags how ) //<S2SV> { //<S2SV> LIST_HEAD ( tmp_list ) ; //<S2SV> struct mount * p ; //<S2SV> if ( how & UMOUNT_PROPAGATE ) //<S2SV> propagate_mount_unlock ( mnt ) ; //<S2SV> for ( p = mnt ; p ; p = next_mnt ( p , mnt ) ) { //<S2SV> p -> mnt . mnt_flags |= MNT_UMOUNT ; //<S2SV> list_move ( & p -> mnt_list , & tmp_list ) ; //<S2SV> } //<S2SV> list_for_each_entry ( p , & tmp_list , mnt_list ) { //<S2SV> list_del_init ( & p -> mnt_child ) ; //<S2SV> } //<S2SV> if ( how & UMOUNT_PROPAGATE ) //<S2SV> propagate_umount ( & tmp_list ) ; //<S2SV> while ( ! list_empty ( & tmp_list ) ) { //<S2SV> bool disconnect ; //<S2SV> p = list_first_entry ( & tmp_list , struct mount , mnt_list ) ; //<S2SV> list_del_init ( & p -> mnt_expire ) ; //<S2SV> list_del_init ( & p -> mnt_list ) ; //<S2SV> __touch_mnt_namespace ( p -> mnt_ns ) ; //<S2SV> p -> mnt_ns = NULL ; //<S2SV> if ( how & UMOUNT_SYNC ) //<S2SV> p -> mnt . mnt_flags |= MNT_SYNC_UMOUNT ; //<S2SV> disconnect = disconnect_mount ( p , how ) ; //<S2SV> pin_insert_group ( & p -> mnt_umount , & p -> mnt_parent -> mnt , //<S2SV> disconnect ? & unmounted : NULL ) ; //<S2SV> if ( mnt_has_parent ( p ) ) { //<S2SV> mnt_add_count ( p -> mnt_parent , - 1 ) ; //<S2SV> if ( ! disconnect ) { //<S2SV> list_add_tail ( & p -> mnt_child , & p -> mnt_parent -> mnt_mounts ) ; //<S2SV> } else { //<S2SV> umount_mnt ( p ) ; //<S2SV> } //<S2SV> } //<S2SV> change_mnt_propagation ( p , MS_PRIVATE ) ; //<S2SV> } //<S2SV> } //<S2SV> 