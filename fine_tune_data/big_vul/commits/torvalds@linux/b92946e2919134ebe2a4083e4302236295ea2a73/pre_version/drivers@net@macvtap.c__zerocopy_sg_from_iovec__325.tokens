static int zerocopy_sg_from_iovec ( struct sk_buff * skb , const struct iovec * from , //<S2SV> int offset , size_t count ) //<S2SV> { //<S2SV> int len = iov_length ( from , count ) - offset ; //<S2SV> int copy = skb_headlen ( skb ) ; //<S2SV> int size , offset1 = 0 ; //<S2SV> int i = 0 ; //<S2SV> while ( count && ( offset >= from -> iov_len ) ) { //<S2SV> offset -= from -> iov_len ; //<S2SV> ++ from ; //<S2SV> -- count ; //<S2SV> } //<S2SV> while ( count && ( copy > 0 ) ) { //<S2SV> size = min_t ( unsigned int , copy , from -> iov_len - offset ) ; //<S2SV> if ( copy_from_user ( skb -> data + offset1 , from -> iov_base + offset , //<S2SV> size ) ) //<S2SV> return - EFAULT ; //<S2SV> if ( copy > size ) { //<S2SV> ++ from ; //<S2SV> -- count ; //<S2SV> offset = 0 ; //<S2SV> } else //<S2SV> offset += size ; //<S2SV> copy -= size ; //<S2SV> offset1 += size ; //<S2SV> } //<S2SV> if ( len == offset1 ) //<S2SV> return 0 ; //<S2SV> while ( count -- ) { //<S2SV> struct page * page [ MAX_SKB_FRAGS ] ; //<S2SV> int num_pages ; //<S2SV> unsigned long base ; //<S2SV> unsigned long truesize ; //<S2SV> len = from -> iov_len - offset ; //<S2SV> if ( ! len ) { //<S2SV> offset = 0 ; //<S2SV> ++ from ; //<S2SV> continue ; //<S2SV> } //<S2SV> base = ( unsigned long ) from -> iov_base + offset ; //<S2SV> size = ( ( base & ~ PAGE_MASK ) + len + ~ PAGE_MASK ) >> PAGE_SHIFT ; //<S2SV> num_pages = get_user_pages_fast ( base , size , 0 , & page [ i ] ) ; //<S2SV> if ( ( num_pages != size ) || //<S2SV> ( num_pages > MAX_SKB_FRAGS - skb_shinfo ( skb ) -> nr_frags ) ) { //<S2SV> for ( i = 0 ; i < num_pages ; i ++ ) //<S2SV> put_page ( page [ i ] ) ; //<S2SV> return - EFAULT ; //<S2SV> } //<S2SV> truesize = size * PAGE_SIZE ; //<S2SV> skb -> data_len += len ; //<S2SV> skb -> len += len ; //<S2SV> skb -> truesize += truesize ; //<S2SV> atomic_add ( truesize , & skb -> sk -> sk_wmem_alloc ) ; //<S2SV> while ( len ) { //<S2SV> int off = base & ~ PAGE_MASK ; //<S2SV> int size = min_t ( int , len , PAGE_SIZE - off ) ; //<S2SV> __skb_fill_page_desc ( skb , i , page [ i ] , off , size ) ; //<S2SV> skb_shinfo ( skb ) -> nr_frags ++ ; //<S2SV> base += size ; //<S2SV> len -= size ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> offset = 0 ; //<S2SV> ++ from ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 