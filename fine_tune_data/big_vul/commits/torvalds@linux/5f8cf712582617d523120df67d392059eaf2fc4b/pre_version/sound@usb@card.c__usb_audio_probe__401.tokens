static int usb_audio_probe ( struct usb_interface * intf , //<S2SV> const struct usb_device_id * usb_id ) //<S2SV> { //<S2SV> struct usb_device * dev = interface_to_usbdev ( intf ) ; //<S2SV> const struct snd_usb_audio_quirk * quirk = //<S2SV> ( const struct snd_usb_audio_quirk * ) usb_id -> driver_info ; //<S2SV> struct snd_usb_audio * chip ; //<S2SV> int i , err ; //<S2SV> struct usb_host_interface * alts ; //<S2SV> int ifnum ; //<S2SV> u32 id ; //<S2SV> alts = & intf -> altsetting [ 0 ] ; //<S2SV> ifnum = get_iface_desc ( alts ) -> bInterfaceNumber ; //<S2SV> id = USB_ID ( le16_to_cpu ( dev -> descriptor . idVendor ) , //<S2SV> le16_to_cpu ( dev -> descriptor . idProduct ) ) ; //<S2SV> if ( get_alias_id ( dev , & id ) ) //<S2SV> quirk = get_alias_quirk ( dev , id ) ; //<S2SV> if ( quirk && quirk -> ifnum >= 0 && ifnum != quirk -> ifnum ) //<S2SV> return - ENXIO ; //<S2SV> err = snd_usb_apply_boot_quirk ( dev , intf , quirk , id ) ; //<S2SV> if ( err < 0 ) //<S2SV> return err ; //<S2SV> chip = NULL ; //<S2SV> mutex_lock ( & register_mutex ) ; //<S2SV> for ( i = 0 ; i < SNDRV_CARDS ; i ++ ) { //<S2SV> if ( usb_chip [ i ] && usb_chip [ i ] -> dev == dev ) { //<S2SV> if ( atomic_read ( & usb_chip [ i ] -> shutdown ) ) { //<S2SV> dev_err ( & dev -> dev , "USB<S2SV_blank>device<S2SV_blank>is<S2SV_blank>in<S2SV_blank>the<S2SV_blank>shutdown<S2SV_blank>state,<S2SV_blank>cannot<S2SV_blank>create<S2SV_blank>a<S2SV_blank>card<S2SV_blank>instance\\n" ) ; //<S2SV> err = - EIO ; //<S2SV> goto __error ; //<S2SV> } //<S2SV> chip = usb_chip [ i ] ; //<S2SV> atomic_inc ( & chip -> active ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! chip ) { //<S2SV> for ( i = 0 ; i < SNDRV_CARDS ; i ++ ) //<S2SV> if ( ! usb_chip [ i ] && //<S2SV> ( vid [ i ] == - 1 || vid [ i ] == USB_ID_VENDOR ( id ) ) && //<S2SV> ( pid [ i ] == - 1 || pid [ i ] == USB_ID_PRODUCT ( id ) ) ) { //<S2SV> if ( enable [ i ] ) { //<S2SV> err = snd_usb_audio_create ( intf , dev , i , quirk , //<S2SV> id , & chip ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto __error ; //<S2SV> chip -> pm_intf = intf ; //<S2SV> break ; //<S2SV> } else if ( vid [ i ] != - 1 || pid [ i ] != - 1 ) { //<S2SV> dev_info ( & dev -> dev , //<S2SV> "device<S2SV_blank>(%04x:%04x)<S2SV_blank>is<S2SV_blank>disabled\\n" , //<S2SV> USB_ID_VENDOR ( id ) , //<S2SV> USB_ID_PRODUCT ( id ) ) ; //<S2SV> err = - ENOENT ; //<S2SV> goto __error ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! chip ) { //<S2SV> dev_err ( & dev -> dev , "no<S2SV_blank>available<S2SV_blank>usb<S2SV_blank>audio<S2SV_blank>device\\n" ) ; //<S2SV> err = - ENODEV ; //<S2SV> goto __error ; //<S2SV> } //<S2SV> } //<S2SV> dev_set_drvdata ( & dev -> dev , chip ) ; //<S2SV> if ( ! chip -> ctrl_intf ) //<S2SV> chip -> ctrl_intf = alts ; //<S2SV> chip -> txfr_quirk = 0 ; //<S2SV> err = 1 ; //<S2SV> if ( quirk && quirk -> ifnum != QUIRK_NO_INTERFACE ) { //<S2SV> err = snd_usb_create_quirk ( chip , intf , & usb_audio_driver , quirk ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto __error ; //<S2SV> } //<S2SV> if ( err > 0 ) { //<S2SV> err = snd_usb_create_streams ( chip , ifnum ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto __error ; //<S2SV> err = snd_usb_create_mixer ( chip , ifnum , ignore_ctl_error ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto __error ; //<S2SV> } //<S2SV> err = snd_card_register ( chip -> card ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto __error ; //<S2SV> usb_chip [ chip -> index ] = chip ; //<S2SV> chip -> num_interfaces ++ ; //<S2SV> usb_set_intfdata ( intf , chip ) ; //<S2SV> atomic_dec ( & chip -> active ) ; //<S2SV> mutex_unlock ( & register_mutex ) ; //<S2SV> return 0 ; //<S2SV> __error : //<S2SV> if ( chip ) { //<S2SV> if ( ! chip -> num_interfaces ) //<S2SV> snd_card_free ( chip -> card ) ; //<S2SV> atomic_dec ( & chip -> active ) ; //<S2SV> } //<S2SV> mutex_unlock ( & register_mutex ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 