static int bnep_sock_ioctl ( struct socket * sock , unsigned int cmd , unsigned long arg ) //<S2SV> { //<S2SV> struct bnep_connlist_req cl ; //<S2SV> struct bnep_connadd_req ca ; //<S2SV> struct bnep_conndel_req cd ; //<S2SV> struct bnep_conninfo ci ; //<S2SV> struct socket * nsock ; //<S2SV> void __user * argp = ( void __user * ) arg ; //<S2SV> int err ; //<S2SV> BT_DBG ( "cmd<S2SV_blank>%x<S2SV_blank>arg<S2SV_blank>%lx" , cmd , arg ) ; //<S2SV> switch ( cmd ) { //<S2SV> case BNEPCONNADD : //<S2SV> if ( ! capable ( CAP_NET_ADMIN ) ) //<S2SV> return - EACCES ; //<S2SV> if ( copy_from_user ( & ca , argp , sizeof ( ca ) ) ) //<S2SV> return - EFAULT ; //<S2SV> nsock = sockfd_lookup ( ca . sock , & err ) ; //<S2SV> if ( ! nsock ) //<S2SV> return err ; //<S2SV> if ( nsock -> sk -> sk_state != BT_CONNECTED ) { //<S2SV> sockfd_put ( nsock ) ; //<S2SV> return - EBADFD ; //<S2SV> } //<S2SV> err = bnep_add_connection ( & ca , nsock ) ; //<S2SV> if ( ! err ) { //<S2SV> if ( copy_to_user ( argp , & ca , sizeof ( ca ) ) ) //<S2SV> err = - EFAULT ; //<S2SV> } else //<S2SV> sockfd_put ( nsock ) ; //<S2SV> return err ; //<S2SV> case BNEPCONNDEL : //<S2SV> if ( ! capable ( CAP_NET_ADMIN ) ) //<S2SV> return - EACCES ; //<S2SV> if ( copy_from_user ( & cd , argp , sizeof ( cd ) ) ) //<S2SV> return - EFAULT ; //<S2SV> return bnep_del_connection ( & cd ) ; //<S2SV> case BNEPGETCONNLIST : //<S2SV> if ( copy_from_user ( & cl , argp , sizeof ( cl ) ) ) //<S2SV> return - EFAULT ; //<S2SV> if ( cl . cnum <= 0 ) //<S2SV> return - EINVAL ; //<S2SV> err = bnep_get_connlist ( & cl ) ; //<S2SV> if ( ! err && copy_to_user ( argp , & cl , sizeof ( cl ) ) ) //<S2SV> return - EFAULT ; //<S2SV> return err ; //<S2SV> case BNEPGETCONNINFO : //<S2SV> if ( copy_from_user ( & ci , argp , sizeof ( ci ) ) ) //<S2SV> return - EFAULT ; //<S2SV> err = bnep_get_conninfo ( & ci ) ; //<S2SV> if ( ! err && copy_to_user ( argp , & ci , sizeof ( ci ) ) ) //<S2SV> return - EFAULT ; //<S2SV> return err ; //<S2SV> default : //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 