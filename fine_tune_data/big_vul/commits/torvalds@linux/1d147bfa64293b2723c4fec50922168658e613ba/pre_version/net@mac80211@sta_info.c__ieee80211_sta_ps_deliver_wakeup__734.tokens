void ieee80211_sta_ps_deliver_wakeup ( struct sta_info * sta ) //<S2SV> { //<S2SV> struct ieee80211_sub_if_data * sdata = sta -> sdata ; //<S2SV> struct ieee80211_local * local = sdata -> local ; //<S2SV> struct sk_buff_head pending ; //<S2SV> int filtered = 0 , buffered = 0 , ac ; //<S2SV> unsigned long flags ; //<S2SV> clear_sta_flag ( sta , WLAN_STA_SP ) ; //<S2SV> BUILD_BUG_ON ( BITS_TO_LONGS ( IEEE80211_NUM_TIDS ) > 1 ) ; //<S2SV> sta -> driver_buffered_tids = 0 ; //<S2SV> if ( ! ( local -> hw . flags & IEEE80211_HW_AP_LINK_PS ) ) //<S2SV> drv_sta_notify ( local , sdata , STA_NOTIFY_AWAKE , & sta -> sta ) ; //<S2SV> skb_queue_head_init ( & pending ) ; //<S2SV> for ( ac = 0 ; ac < IEEE80211_NUM_ACS ; ac ++ ) { //<S2SV> int count = skb_queue_len ( & pending ) , tmp ; //<S2SV> spin_lock_irqsave ( & sta -> tx_filtered [ ac ] . lock , flags ) ; //<S2SV> skb_queue_splice_tail_init ( & sta -> tx_filtered [ ac ] , & pending ) ; //<S2SV> spin_unlock_irqrestore ( & sta -> tx_filtered [ ac ] . lock , flags ) ; //<S2SV> tmp = skb_queue_len ( & pending ) ; //<S2SV> filtered += tmp - count ; //<S2SV> count = tmp ; //<S2SV> spin_lock_irqsave ( & sta -> ps_tx_buf [ ac ] . lock , flags ) ; //<S2SV> skb_queue_splice_tail_init ( & sta -> ps_tx_buf [ ac ] , & pending ) ; //<S2SV> spin_unlock_irqrestore ( & sta -> ps_tx_buf [ ac ] . lock , flags ) ; //<S2SV> tmp = skb_queue_len ( & pending ) ; //<S2SV> buffered += tmp - count ; //<S2SV> } //<S2SV> ieee80211_add_pending_skbs_fn ( local , & pending , clear_sta_ps_flags , sta ) ; //<S2SV> if ( ! ieee80211_smps_is_restrictive ( sta -> known_smps_mode , //<S2SV> sdata -> smps_mode ) && //<S2SV> sta -> known_smps_mode != sdata -> bss -> req_smps && //<S2SV> sta_info_tx_streams ( sta ) != 1 ) { //<S2SV> ht_dbg ( sdata , //<S2SV> "%pM<S2SV_blank>just<S2SV_blank>woke<S2SV_blank>up<S2SV_blank>and<S2SV_blank>MIMO<S2SV_blank>capable<S2SV_blank>-<S2SV_blank>update<S2SV_blank>SMPS\\n" , //<S2SV> sta -> sta . addr ) ; //<S2SV> ieee80211_send_smps_action ( sdata , sdata -> bss -> req_smps , //<S2SV> sta -> sta . addr , //<S2SV> sdata -> vif . bss_conf . bssid ) ; //<S2SV> } //<S2SV> local -> total_ps_buffered -= buffered ; //<S2SV> sta_info_recalc_tim ( sta ) ; //<S2SV> ps_dbg ( sdata , //<S2SV> "STA<S2SV_blank>%pM<S2SV_blank>aid<S2SV_blank>%d<S2SV_blank>sending<S2SV_blank>%d<S2SV_blank>filtered/%d<S2SV_blank>PS<S2SV_blank>frames<S2SV_blank>since<S2SV_blank>STA<S2SV_blank>not<S2SV_blank>sleeping<S2SV_blank>anymore\\n" , //<S2SV> sta -> sta . addr , sta -> sta . aid , filtered , buffered ) ; //<S2SV> } //<S2SV> 