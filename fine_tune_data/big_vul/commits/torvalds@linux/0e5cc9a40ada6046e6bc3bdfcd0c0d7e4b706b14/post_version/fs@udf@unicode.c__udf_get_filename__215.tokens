int udf_get_filename ( struct super_block * sb , uint8_t * sname , int slen , //<S2SV> uint8_t * dname , int dlen ) //<S2SV> { //<S2SV> struct ustr * filename , * unifilename ; //<S2SV> int len = 0 ; //<S2SV> filename = kmalloc ( sizeof ( struct ustr ) , GFP_NOFS ) ; //<S2SV> if ( ! filename ) //<S2SV> return 0 ; //<S2SV> unifilename = kmalloc ( sizeof ( struct ustr ) , GFP_NOFS ) ; //<S2SV> if ( ! unifilename ) //<S2SV> goto out1 ; //<S2SV> if ( udf_build_ustr_exact ( unifilename , sname , slen ) ) //<S2SV> goto out2 ; //<S2SV> if ( UDF_QUERY_FLAG ( sb , UDF_FLAG_UTF8 ) ) { //<S2SV> if ( ! udf_CS0toUTF8 ( filename , unifilename ) ) { //<S2SV> udf_debug ( "Failed<S2SV_blank>in<S2SV_blank>udf_get_filename:<S2SV_blank>sname<S2SV_blank>=<S2SV_blank>%s\\n" , //<S2SV> sname ) ; //<S2SV> goto out2 ; //<S2SV> } //<S2SV> } else if ( UDF_QUERY_FLAG ( sb , UDF_FLAG_NLS_MAP ) ) { //<S2SV> if ( ! udf_CS0toNLS ( UDF_SB ( sb ) -> s_nls_map , filename , //<S2SV> unifilename ) ) { //<S2SV> udf_debug ( "Failed<S2SV_blank>in<S2SV_blank>udf_get_filename:<S2SV_blank>sname<S2SV_blank>=<S2SV_blank>%s\\n" , //<S2SV> sname ) ; //<S2SV> goto out2 ; //<S2SV> } //<S2SV> } else //<S2SV> goto out2 ; //<S2SV> len = udf_translate_to_linux ( dname , dlen , //<S2SV> filename -> u_name , filename -> u_len , //<S2SV> unifilename -> u_name , unifilename -> u_len ) ; //<S2SV> out2 : //<S2SV> kfree ( unifilename ) ; //<S2SV> out1 : //<S2SV> kfree ( filename ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> 