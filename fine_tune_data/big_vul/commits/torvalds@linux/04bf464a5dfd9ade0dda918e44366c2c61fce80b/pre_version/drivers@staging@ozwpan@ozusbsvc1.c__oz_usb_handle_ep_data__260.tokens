static void oz_usb_handle_ep_data ( struct oz_usb_ctx * usb_ctx , //<S2SV> struct oz_usb_hdr * usb_hdr , int len ) //<S2SV> { //<S2SV> struct oz_data * data_hdr = ( struct oz_data * ) usb_hdr ; //<S2SV> switch ( data_hdr -> format ) { //<S2SV> case OZ_DATA_F_MULTIPLE_FIXED : { //<S2SV> struct oz_multiple_fixed * body = //<S2SV> ( struct oz_multiple_fixed * ) data_hdr ; //<S2SV> u8 * data = body -> data ; //<S2SV> int n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) //<S2SV> / body -> unit_size ; //<S2SV> while ( n -- ) { //<S2SV> oz_hcd_data_ind ( usb_ctx -> hport , body -> endpoint , //<S2SV> data , body -> unit_size ) ; //<S2SV> data += body -> unit_size ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case OZ_DATA_F_ISOC_FIXED : { //<S2SV> struct oz_isoc_fixed * body = //<S2SV> ( struct oz_isoc_fixed * ) data_hdr ; //<S2SV> int data_len = len - sizeof ( struct oz_isoc_fixed ) + 1 ; //<S2SV> int unit_size = body -> unit_size ; //<S2SV> u8 * data = body -> data ; //<S2SV> int count ; //<S2SV> int i ; //<S2SV> if ( ! unit_size ) //<S2SV> break ; //<S2SV> count = data_len / unit_size ; //<S2SV> for ( i = 0 ; i < count ; i ++ ) { //<S2SV> oz_hcd_data_ind ( usb_ctx -> hport , //<S2SV> body -> endpoint , data , unit_size ) ; //<S2SV> data += unit_size ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> 