static noinline void key_gc_unused_keys ( struct list_head * keys ) //<S2SV> { //<S2SV> while ( ! list_empty ( keys ) ) { //<S2SV> struct key * key = //<S2SV> list_entry ( keys -> next , struct key , graveyard_link ) ; //<S2SV> list_del ( & key -> graveyard_link ) ; //<S2SV> kdebug ( "-<S2SV_blank>%u" , key -> serial ) ; //<S2SV> key_check ( key ) ; //<S2SV> if ( key -> type -> destroy ) //<S2SV> key -> type -> destroy ( key ) ; //<S2SV> security_key_free ( key ) ; //<S2SV> if ( test_bit ( KEY_FLAG_IN_QUOTA , & key -> flags ) ) { //<S2SV> spin_lock ( & key -> user -> lock ) ; //<S2SV> key -> user -> qnkeys -- ; //<S2SV> key -> user -> qnbytes -= key -> quotalen ; //<S2SV> spin_unlock ( & key -> user -> lock ) ; //<S2SV> } //<S2SV> atomic_dec ( & key -> user -> nkeys ) ; //<S2SV> if ( test_bit ( KEY_FLAG_INSTANTIATED , & key -> flags ) ) //<S2SV> atomic_dec ( & key -> user -> nikeys ) ; //<S2SV> key_user_put ( key -> user ) ; //<S2SV> kfree ( key -> description ) ; //<S2SV> # ifdef KEY_DEBUGGING //<S2SV> key -> magic = KEY_DEBUG_MAGIC_X ; //<S2SV> # endif //<S2SV> kmem_cache_free ( key_jar , key ) ; //<S2SV> } //<S2SV> } //<S2SV> 