static long __media_device_enum_links ( struct media_device * mdev , //<S2SV> struct media_links_enum * links ) //<S2SV> { //<S2SV> struct media_entity * entity ; //<S2SV> entity = find_entity ( mdev , links -> entity ) ; //<S2SV> if ( entity == NULL ) //<S2SV> return - EINVAL ; //<S2SV> if ( links -> pads ) { //<S2SV> unsigned int p ; //<S2SV> for ( p = 0 ; p < entity -> num_pads ; p ++ ) { //<S2SV> struct media_pad_desc pad ; //<S2SV> memset ( & pad , 0 , sizeof ( pad ) ) ; //<S2SV> media_device_kpad_to_upad ( & entity -> pads [ p ] , & pad ) ; //<S2SV> if ( copy_to_user ( & links -> pads [ p ] , & pad , sizeof ( pad ) ) ) //<S2SV> return - EFAULT ; //<S2SV> } //<S2SV> } //<S2SV> if ( links -> links ) { //<S2SV> struct media_link_desc __user * ulink ; //<S2SV> unsigned int l ; //<S2SV> for ( l = 0 , ulink = links -> links ; l < entity -> num_links ; l ++ ) { //<S2SV> struct media_link_desc link ; //<S2SV> if ( entity -> links [ l ] . source -> entity != entity ) //<S2SV> continue ; //<S2SV> memset ( & link , 0 , sizeof ( link ) ) ; //<S2SV> media_device_kpad_to_upad ( entity -> links [ l ] . source , //<S2SV> & link . source ) ; //<S2SV> media_device_kpad_to_upad ( entity -> links [ l ] . sink , //<S2SV> & link . sink ) ; //<S2SV> link . flags = entity -> links [ l ] . flags ; //<S2SV> if ( copy_to_user ( ulink , & link , sizeof ( * ulink ) ) ) //<S2SV> return - EFAULT ; //<S2SV> ulink ++ ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 