int ipmi_si_mem_setup ( struct si_sm_io * io ) //<S2SV> { //<S2SV> unsigned long addr = io -> addr_data ; //<S2SV> int mapsize , idx ; //<S2SV> if ( ! addr ) //<S2SV> return - ENODEV ; //<S2SV> io -> io_cleanup = mem_cleanup ; //<S2SV> switch ( io -> regsize ) { //<S2SV> case 1 : //<S2SV> io -> inputb = intf_mem_inb ; //<S2SV> io -> outputb = intf_mem_outb ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> io -> inputb = intf_mem_inw ; //<S2SV> io -> outputb = intf_mem_outw ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> io -> inputb = intf_mem_inl ; //<S2SV> io -> outputb = intf_mem_outl ; //<S2SV> break ; //<S2SV> # ifdef readq //<S2SV> case 8 : //<S2SV> io -> inputb = mem_inq ; //<S2SV> io -> outputb = mem_outq ; //<S2SV> break ; //<S2SV> # endif //<S2SV> default : //<S2SV> dev_warn ( io -> dev , "Invalid<S2SV_blank>register<S2SV_blank>size:<S2SV_blank>%d\\n" , //<S2SV> io -> regsize ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { //<S2SV> if ( request_mem_region ( addr + idx * io -> regspacing , //<S2SV> io -> regsize , DEVICE_NAME ) == NULL ) { //<S2SV> mem_region_cleanup ( io , idx ) ; //<S2SV> return - EIO ; //<S2SV> } //<S2SV> } //<S2SV> mapsize = ( ( io -> io_size * io -> regspacing ) //<S2SV> - ( io -> regspacing - io -> regsize ) ) ; //<S2SV> io -> addr = ioremap ( addr , mapsize ) ; //<S2SV> if ( io -> addr == NULL ) { //<S2SV> mem_region_cleanup ( io , io -> io_size ) ; //<S2SV> return - EIO ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 