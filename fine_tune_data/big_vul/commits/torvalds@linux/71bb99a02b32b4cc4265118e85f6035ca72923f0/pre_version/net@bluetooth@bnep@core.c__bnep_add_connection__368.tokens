int bnep_add_connection ( struct bnep_connadd_req * req , struct socket * sock ) //<S2SV> { //<S2SV> struct net_device * dev ; //<S2SV> struct bnep_session * s , * ss ; //<S2SV> u8 dst [ ETH_ALEN ] , src [ ETH_ALEN ] ; //<S2SV> int err ; //<S2SV> BT_DBG ( "" ) ; //<S2SV> baswap ( ( void * ) dst , & l2cap_pi ( sock -> sk ) -> chan -> dst ) ; //<S2SV> baswap ( ( void * ) src , & l2cap_pi ( sock -> sk ) -> chan -> src ) ; //<S2SV> dev = alloc_netdev ( sizeof ( struct bnep_session ) , //<S2SV> ( * req -> device ) ? req -> device : "bnep%d" , //<S2SV> NET_NAME_UNKNOWN , //<S2SV> bnep_net_setup ) ; //<S2SV> if ( ! dev ) //<S2SV> return - ENOMEM ; //<S2SV> down_write ( & bnep_session_sem ) ; //<S2SV> ss = __bnep_get_session ( dst ) ; //<S2SV> if ( ss && ss -> state == BT_CONNECTED ) { //<S2SV> err = - EEXIST ; //<S2SV> goto failed ; //<S2SV> } //<S2SV> s = netdev_priv ( dev ) ; //<S2SV> memcpy ( s -> eh . h_dest , & src , ETH_ALEN ) ; //<S2SV> memcpy ( s -> eh . h_source , & dst , ETH_ALEN ) ; //<S2SV> memcpy ( dev -> dev_addr , s -> eh . h_dest , ETH_ALEN ) ; //<S2SV> s -> dev = dev ; //<S2SV> s -> sock = sock ; //<S2SV> s -> role = req -> role ; //<S2SV> s -> state = BT_CONNECTED ; //<S2SV> s -> msg . msg_flags = MSG_NOSIGNAL ; //<S2SV> # ifdef CONFIG_BT_BNEP_MC_FILTER //<S2SV> set_bit ( bnep_mc_hash ( dev -> broadcast ) , ( ulong * ) & s -> mc_filter ) ; //<S2SV> # endif //<S2SV> # ifdef CONFIG_BT_BNEP_PROTO_FILTER //<S2SV> bnep_set_default_proto_filter ( s ) ; //<S2SV> # endif //<S2SV> SET_NETDEV_DEV ( dev , bnep_get_device ( s ) ) ; //<S2SV> SET_NETDEV_DEVTYPE ( dev , & bnep_type ) ; //<S2SV> err = register_netdev ( dev ) ; //<S2SV> if ( err ) //<S2SV> goto failed ; //<S2SV> __bnep_link_session ( s ) ; //<S2SV> __module_get ( THIS_MODULE ) ; //<S2SV> s -> task = kthread_run ( bnep_session , s , "kbnepd<S2SV_blank>%s" , dev -> name ) ; //<S2SV> if ( IS_ERR ( s -> task ) ) { //<S2SV> module_put ( THIS_MODULE ) ; //<S2SV> unregister_netdev ( dev ) ; //<S2SV> __bnep_unlink_session ( s ) ; //<S2SV> err = PTR_ERR ( s -> task ) ; //<S2SV> goto failed ; //<S2SV> } //<S2SV> up_write ( & bnep_session_sem ) ; //<S2SV> strcpy ( req -> device , dev -> name ) ; //<S2SV> return 0 ; //<S2SV> failed : //<S2SV> up_write ( & bnep_session_sem ) ; //<S2SV> free_netdev ( dev ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 