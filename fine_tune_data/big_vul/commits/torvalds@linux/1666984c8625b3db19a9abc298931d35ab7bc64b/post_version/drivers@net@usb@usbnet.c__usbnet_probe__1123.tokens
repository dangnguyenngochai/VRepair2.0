int //<S2SV> usbnet_probe ( struct usb_interface * udev , const struct usb_device_id * prod ) //<S2SV> { //<S2SV> struct usbnet * dev ; //<S2SV> struct net_device * net ; //<S2SV> struct usb_host_interface * interface ; //<S2SV> struct driver_info * info ; //<S2SV> struct usb_device * xdev ; //<S2SV> int status ; //<S2SV> const char * name ; //<S2SV> struct usb_driver * driver = to_usb_driver ( udev -> dev . driver ) ; //<S2SV> if ( ! driver -> supports_autosuspend ) { //<S2SV> driver -> supports_autosuspend = 1 ; //<S2SV> pm_runtime_enable ( & udev -> dev ) ; //<S2SV> } //<S2SV> name = udev -> dev . driver -> name ; //<S2SV> info = ( struct driver_info * ) prod -> driver_info ; //<S2SV> if ( ! info ) { //<S2SV> dev_dbg ( & udev -> dev , "blacklisted<S2SV_blank>by<S2SV_blank>%s\\n" , name ) ; //<S2SV> return - ENODEV ; //<S2SV> } //<S2SV> xdev = interface_to_usbdev ( udev ) ; //<S2SV> interface = udev -> cur_altsetting ; //<S2SV> status = - ENOMEM ; //<S2SV> net = alloc_etherdev ( sizeof ( * dev ) ) ; //<S2SV> if ( ! net ) //<S2SV> goto out ; //<S2SV> SET_NETDEV_DEV ( net , & udev -> dev ) ; //<S2SV> dev = netdev_priv ( net ) ; //<S2SV> dev -> udev = xdev ; //<S2SV> dev -> intf = udev ; //<S2SV> dev -> driver_info = info ; //<S2SV> dev -> driver_name = name ; //<S2SV> dev -> msg_enable = netif_msg_init ( msg_level , NETIF_MSG_DRV //<S2SV> | NETIF_MSG_PROBE | NETIF_MSG_LINK ) ; //<S2SV> init_waitqueue_head ( & dev -> wait ) ; //<S2SV> skb_queue_head_init ( & dev -> rxq ) ; //<S2SV> skb_queue_head_init ( & dev -> txq ) ; //<S2SV> skb_queue_head_init ( & dev -> done ) ; //<S2SV> skb_queue_head_init ( & dev -> rxq_pause ) ; //<S2SV> dev -> bh . func = usbnet_bh ; //<S2SV> dev -> bh . data = ( unsigned long ) dev ; //<S2SV> INIT_WORK ( & dev -> kevent , usbnet_deferred_kevent ) ; //<S2SV> init_usb_anchor ( & dev -> deferred ) ; //<S2SV> dev -> delay . function = usbnet_bh ; //<S2SV> dev -> delay . data = ( unsigned long ) dev ; //<S2SV> init_timer ( & dev -> delay ) ; //<S2SV> mutex_init ( & dev -> phy_mutex ) ; //<S2SV> mutex_init ( & dev -> interrupt_mutex ) ; //<S2SV> dev -> interrupt_count = 0 ; //<S2SV> dev -> net = net ; //<S2SV> strcpy ( net -> name , "usb%d" ) ; //<S2SV> memcpy ( net -> dev_addr , node_id , sizeof node_id ) ; //<S2SV> dev -> hard_mtu = net -> mtu + net -> hard_header_len ; //<S2SV> net -> netdev_ops = & usbnet_netdev_ops ; //<S2SV> net -> watchdog_timeo = TX_TIMEOUT_JIFFIES ; //<S2SV> net -> ethtool_ops = & usbnet_ethtool_ops ; //<S2SV> if ( info -> bind ) { //<S2SV> status = info -> bind ( dev , udev ) ; //<S2SV> if ( status < 0 ) //<S2SV> goto out1 ; //<S2SV> if ( ( dev -> driver_info -> flags & FLAG_ETHER ) != 0 && //<S2SV> ( ( dev -> driver_info -> flags & FLAG_POINTTOPOINT ) == 0 || //<S2SV> ( net -> dev_addr [ 0 ] & 0x02 ) == 0 ) ) //<S2SV> strcpy ( net -> name , "eth%d" ) ; //<S2SV> if ( ( dev -> driver_info -> flags & FLAG_WLAN ) != 0 ) //<S2SV> strcpy ( net -> name , "wlan%d" ) ; //<S2SV> if ( ( dev -> driver_info -> flags & FLAG_WWAN ) != 0 ) //<S2SV> strcpy ( net -> name , "wwan%d" ) ; //<S2SV> if ( ( dev -> driver_info -> flags & FLAG_NOARP ) != 0 ) //<S2SV> net -> flags |= IFF_NOARP ; //<S2SV> if ( net -> mtu > ( dev -> hard_mtu - net -> hard_header_len ) ) //<S2SV> net -> mtu = dev -> hard_mtu - net -> hard_header_len ; //<S2SV> } else if ( ! info -> in || ! info -> out ) //<S2SV> status = usbnet_get_endpoints ( dev , udev ) ; //<S2SV> else { //<S2SV> dev -> in = usb_rcvbulkpipe ( xdev , info -> in ) ; //<S2SV> dev -> out = usb_sndbulkpipe ( xdev , info -> out ) ; //<S2SV> if ( ! ( info -> flags & FLAG_NO_SETINT ) ) //<S2SV> status = usb_set_interface ( xdev , //<S2SV> interface -> desc . bInterfaceNumber , //<S2SV> interface -> desc . bAlternateSetting ) ; //<S2SV> else //<S2SV> status = 0 ; //<S2SV> } //<S2SV> if ( status >= 0 && dev -> status ) //<S2SV> status = init_status ( dev , udev ) ; //<S2SV> if ( status < 0 ) //<S2SV> goto out3 ; //<S2SV> if ( ! dev -> rx_urb_size ) //<S2SV> dev -> rx_urb_size = dev -> hard_mtu ; //<S2SV> dev -> maxpacket = usb_maxpacket ( dev -> udev , dev -> out , 1 ) ; //<S2SV> if ( ether_addr_equal ( net -> dev_addr , node_id ) ) //<S2SV> net -> addr_assign_type = NET_ADDR_RANDOM ; //<S2SV> if ( ( dev -> driver_info -> flags & FLAG_WLAN ) != 0 ) //<S2SV> SET_NETDEV_DEVTYPE ( net , & wlan_type ) ; //<S2SV> if ( ( dev -> driver_info -> flags & FLAG_WWAN ) != 0 ) //<S2SV> SET_NETDEV_DEVTYPE ( net , & wwan_type ) ; //<S2SV> usbnet_update_max_qlen ( dev ) ; //<S2SV> if ( dev -> can_dma_sg && ! ( info -> flags & FLAG_SEND_ZLP ) && //<S2SV> ! ( info -> flags & FLAG_MULTI_PACKET ) ) { //<S2SV> dev -> padding_pkt = kzalloc ( 1 , GFP_KERNEL ) ; //<S2SV> if ( ! dev -> padding_pkt ) { //<S2SV> status = - ENOMEM ; //<S2SV> goto out4 ; //<S2SV> } //<S2SV> } //<S2SV> status = register_netdev ( net ) ; //<S2SV> if ( status ) //<S2SV> goto out5 ; //<S2SV> netif_info ( dev , probe , dev -> net , //<S2SV> "register<S2SV_blank>\'%s\'<S2SV_blank>at<S2SV_blank>usb-%s-%s,<S2SV_blank>%s,<S2SV_blank>%pM\\n" , //<S2SV> udev -> dev . driver -> name , //<S2SV> xdev -> bus -> bus_name , xdev -> devpath , //<S2SV> dev -> driver_info -> description , //<S2SV> net -> dev_addr ) ; //<S2SV> usb_set_intfdata ( udev , dev ) ; //<S2SV> netif_device_attach ( net ) ; //<S2SV> if ( dev -> driver_info -> flags & FLAG_LINK_INTR ) //<S2SV> usbnet_link_change ( dev , 0 , 0 ) ; //<S2SV> return 0 ; //<S2SV> out5 : //<S2SV> kfree ( dev -> padding_pkt ) ; //<S2SV> out4 : //<S2SV> usb_free_urb ( dev -> interrupt ) ; //<S2SV> out3 : //<S2SV> if ( info -> unbind ) //<S2SV> info -> unbind ( dev , udev ) ; //<S2SV> out1 : //<S2SV> cancel_work_sync ( & dev -> kevent ) ; //<S2SV> del_timer_sync ( & dev -> delay ) ; //<S2SV> free_netdev ( net ) ; //<S2SV> out : //<S2SV> return status ; //<S2SV> } //<S2SV> 