static int efx_probe_all ( struct efx_nic * efx ) //<S2SV> { //<S2SV> int rc ; //<S2SV> rc = efx_probe_nic ( efx ) ; //<S2SV> if ( rc ) { //<S2SV> netif_err ( efx , probe , efx -> net_dev , "failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>NIC\\n" ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> rc = efx_probe_port ( efx ) ; //<S2SV> if ( rc ) { //<S2SV> netif_err ( efx , probe , efx -> net_dev , "failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>port\\n" ) ; //<S2SV> goto fail2 ; //<S2SV> } //<S2SV> efx -> rxq_entries = efx -> txq_entries = EFX_DEFAULT_DMAQ_SIZE ; //<S2SV> rc = efx_probe_channels ( efx ) ; //<S2SV> if ( rc ) //<S2SV> goto fail3 ; //<S2SV> rc = efx_probe_filters ( efx ) ; //<S2SV> if ( rc ) { //<S2SV> netif_err ( efx , probe , efx -> net_dev , //<S2SV> "failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>filter<S2SV_blank>tables\\n" ) ; //<S2SV> goto fail4 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> fail4 : //<S2SV> efx_remove_channels ( efx ) ; //<S2SV> fail3 : //<S2SV> efx_remove_port ( efx ) ; //<S2SV> fail2 : //<S2SV> efx_remove_nic ( efx ) ; //<S2SV> fail1 : //<S2SV> return rc ; //<S2SV> } //<S2SV> 