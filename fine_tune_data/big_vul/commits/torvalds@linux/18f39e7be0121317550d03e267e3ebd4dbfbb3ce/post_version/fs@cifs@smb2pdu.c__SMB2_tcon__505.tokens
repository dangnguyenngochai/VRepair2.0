int //<S2SV> SMB2_tcon ( const unsigned int xid , struct cifs_ses * ses , const char * tree , //<S2SV> struct cifs_tcon * tcon , const struct nls_table * cp ) //<S2SV> { //<S2SV> struct smb2_tree_connect_req * req ; //<S2SV> struct smb2_tree_connect_rsp * rsp = NULL ; //<S2SV> struct kvec iov [ 2 ] ; //<S2SV> int rc = 0 ; //<S2SV> int resp_buftype ; //<S2SV> int unc_path_len ; //<S2SV> struct TCP_Server_Info * server ; //<S2SV> __le16 * unc_path = NULL ; //<S2SV> cifs_dbg ( FYI , "TCON\\n" ) ; //<S2SV> if ( ( ses -> server ) && tree ) //<S2SV> server = ses -> server ; //<S2SV> else //<S2SV> return - EIO ; //<S2SV> if ( tcon && tcon -> bad_network_name ) //<S2SV> return - ENOENT ; //<S2SV> unc_path = kmalloc ( MAX_SHARENAME_LENGTH * 2 , GFP_KERNEL ) ; //<S2SV> if ( unc_path == NULL ) //<S2SV> return - ENOMEM ; //<S2SV> unc_path_len = cifs_strtoUTF16 ( unc_path , tree , strlen ( tree ) , cp ) + 1 ; //<S2SV> unc_path_len *= 2 ; //<S2SV> if ( unc_path_len < 2 ) { //<S2SV> kfree ( unc_path ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> rc = small_smb2_init ( SMB2_TREE_CONNECT , tcon , ( void * * ) & req ) ; //<S2SV> if ( rc ) { //<S2SV> kfree ( unc_path ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> if ( tcon == NULL ) { //<S2SV> req -> hdr . SessionId = ses -> Suid ; //<S2SV> } //<S2SV> iov [ 0 ] . iov_base = ( char * ) req ; //<S2SV> iov [ 0 ] . iov_len = get_rfc1002_length ( req ) + 4 - 1 ; //<S2SV> req -> PathOffset = cpu_to_le16 ( sizeof ( struct smb2_tree_connect_req ) //<S2SV> - 1 - 4 ) ; //<S2SV> req -> PathLength = cpu_to_le16 ( unc_path_len - 2 ) ; //<S2SV> iov [ 1 ] . iov_base = unc_path ; //<S2SV> iov [ 1 ] . iov_len = unc_path_len ; //<S2SV> inc_rfc1001_len ( req , unc_path_len - 1 ) ; //<S2SV> rc = SendReceive2 ( xid , ses , iov , 2 , & resp_buftype , 0 ) ; //<S2SV> rsp = ( struct smb2_tree_connect_rsp * ) iov [ 0 ] . iov_base ; //<S2SV> if ( rc != 0 ) { //<S2SV> if ( tcon ) { //<S2SV> cifs_stats_fail_inc ( tcon , SMB2_TREE_CONNECT_HE ) ; //<S2SV> tcon -> need_reconnect = true ; //<S2SV> } //<S2SV> goto tcon_error_exit ; //<S2SV> } //<S2SV> if ( tcon == NULL ) { //<S2SV> ses -> ipc_tid = rsp -> hdr . TreeId ; //<S2SV> goto tcon_exit ; //<S2SV> } //<S2SV> if ( rsp -> ShareType & SMB2_SHARE_TYPE_DISK ) //<S2SV> cifs_dbg ( FYI , "connection<S2SV_blank>to<S2SV_blank>disk<S2SV_blank>share\\n" ) ; //<S2SV> else if ( rsp -> ShareType & SMB2_SHARE_TYPE_PIPE ) { //<S2SV> tcon -> ipc = true ; //<S2SV> cifs_dbg ( FYI , "connection<S2SV_blank>to<S2SV_blank>pipe<S2SV_blank>share\\n" ) ; //<S2SV> } else if ( rsp -> ShareType & SMB2_SHARE_TYPE_PRINT ) { //<S2SV> tcon -> print = true ; //<S2SV> cifs_dbg ( FYI , "connection<S2SV_blank>to<S2SV_blank>printer\\n" ) ; //<S2SV> } else { //<S2SV> cifs_dbg ( VFS , "unknown<S2SV_blank>share<S2SV_blank>type<S2SV_blank>%d\\n" , rsp -> ShareType ) ; //<S2SV> rc = - EOPNOTSUPP ; //<S2SV> goto tcon_error_exit ; //<S2SV> } //<S2SV> tcon -> share_flags = le32_to_cpu ( rsp -> ShareFlags ) ; //<S2SV> tcon -> capabilities = rsp -> Capabilities ; //<S2SV> tcon -> maximal_access = le32_to_cpu ( rsp -> MaximalAccess ) ; //<S2SV> tcon -> tidStatus = CifsGood ; //<S2SV> tcon -> need_reconnect = false ; //<S2SV> tcon -> tid = rsp -> hdr . TreeId ; //<S2SV> strlcpy ( tcon -> treeName , tree , sizeof ( tcon -> treeName ) ) ; //<S2SV> if ( ( rsp -> Capabilities & SMB2_SHARE_CAP_DFS ) && //<S2SV> ( ( tcon -> share_flags & SHI1005_FLAGS_DFS ) == 0 ) ) //<S2SV> cifs_dbg ( VFS , "DFS<S2SV_blank>capability<S2SV_blank>contradicts<S2SV_blank>DFS<S2SV_blank>flag\\n" ) ; //<S2SV> init_copy_chunk_defaults ( tcon ) ; //<S2SV> if ( tcon -> ses -> server -> ops -> validate_negotiate ) //<S2SV> rc = tcon -> ses -> server -> ops -> validate_negotiate ( xid , tcon ) ; //<S2SV> tcon_exit : //<S2SV> free_rsp_buf ( resp_buftype , rsp ) ; //<S2SV> kfree ( unc_path ) ; //<S2SV> return rc ; //<S2SV> tcon_error_exit : //<S2SV> if ( rsp -> hdr . Status == STATUS_BAD_NETWORK_NAME ) { //<S2SV> cifs_dbg ( VFS , "BAD_NETWORK_NAME:<S2SV_blank>%s\\n" , tree ) ; //<S2SV> if ( tcon ) //<S2SV> tcon -> bad_network_name = true ; //<S2SV> } //<S2SV> goto tcon_exit ; //<S2SV> } //<S2SV> 