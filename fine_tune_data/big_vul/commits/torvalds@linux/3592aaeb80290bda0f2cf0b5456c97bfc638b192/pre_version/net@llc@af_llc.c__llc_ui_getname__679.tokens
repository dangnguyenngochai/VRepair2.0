static int llc_ui_getname ( struct socket * sock , struct sockaddr * uaddr , //<S2SV> int * uaddrlen , int peer ) //<S2SV> { //<S2SV> struct sockaddr_llc sllc ; //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct llc_sock * llc = llc_sk ( sk ) ; //<S2SV> int rc = 0 ; //<S2SV> memset ( & sllc , 0 , sizeof ( sllc ) ) ; //<S2SV> lock_sock ( sk ) ; //<S2SV> if ( sock_flag ( sk , SOCK_ZAPPED ) ) //<S2SV> goto out ; //<S2SV> * uaddrlen = sizeof ( sllc ) ; //<S2SV> memset ( uaddr , 0 , * uaddrlen ) ; //<S2SV> if ( peer ) { //<S2SV> rc = - ENOTCONN ; //<S2SV> if ( sk -> sk_state != TCP_ESTABLISHED ) //<S2SV> goto out ; //<S2SV> if ( llc -> dev ) //<S2SV> sllc . sllc_arphrd = llc -> dev -> type ; //<S2SV> sllc . sllc_sap = llc -> daddr . lsap ; //<S2SV> memcpy ( & sllc . sllc_mac , & llc -> daddr . mac , IFHWADDRLEN ) ; //<S2SV> } else { //<S2SV> rc = - EINVAL ; //<S2SV> if ( ! llc -> sap ) //<S2SV> goto out ; //<S2SV> sllc . sllc_sap = llc -> sap -> laddr . lsap ; //<S2SV> if ( llc -> dev ) { //<S2SV> sllc . sllc_arphrd = llc -> dev -> type ; //<S2SV> memcpy ( & sllc . sllc_mac , llc -> dev -> dev_addr , //<S2SV> IFHWADDRLEN ) ; //<S2SV> } //<S2SV> } //<S2SV> rc = 0 ; //<S2SV> sllc . sllc_family = AF_LLC ; //<S2SV> memcpy ( uaddr , & sllc , sizeof ( sllc ) ) ; //<S2SV> out : //<S2SV> release_sock ( sk ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> 