int megasas_alloc_cmds ( struct megasas_instance * instance ) //<S2SV> { //<S2SV> int i ; //<S2SV> int j ; //<S2SV> u16 max_cmd ; //<S2SV> struct megasas_cmd * cmd ; //<S2SV> max_cmd = instance -> max_mfi_cmds ; //<S2SV> instance -> cmd_list = kcalloc ( max_cmd , sizeof ( struct megasas_cmd * ) , GFP_KERNEL ) ; //<S2SV> if ( ! instance -> cmd_list ) { //<S2SV> dev_printk ( KERN_DEBUG , & instance -> pdev -> dev , "out<S2SV_blank>of<S2SV_blank>memory\\n" ) ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> memset ( instance -> cmd_list , 0 , sizeof ( struct megasas_cmd * ) * max_cmd ) ; //<S2SV> for ( i = 0 ; i < max_cmd ; i ++ ) { //<S2SV> instance -> cmd_list [ i ] = kmalloc ( sizeof ( struct megasas_cmd ) , //<S2SV> GFP_KERNEL ) ; //<S2SV> if ( ! instance -> cmd_list [ i ] ) { //<S2SV> for ( j = 0 ; j < i ; j ++ ) //<S2SV> kfree ( instance -> cmd_list [ j ] ) ; //<S2SV> kfree ( instance -> cmd_list ) ; //<S2SV> instance -> cmd_list = NULL ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < max_cmd ; i ++ ) { //<S2SV> cmd = instance -> cmd_list [ i ] ; //<S2SV> memset ( cmd , 0 , sizeof ( struct megasas_cmd ) ) ; //<S2SV> cmd -> index = i ; //<S2SV> cmd -> scmd = NULL ; //<S2SV> cmd -> instance = instance ; //<S2SV> list_add_tail ( & cmd -> list , & instance -> cmd_pool ) ; //<S2SV> } //<S2SV> if ( megasas_create_frame_pool ( instance ) ) { //<S2SV> dev_printk ( KERN_DEBUG , & instance -> pdev -> dev , "Error<S2SV_blank>creating<S2SV_blank>frame<S2SV_blank>DMA<S2SV_blank>pool\\n" ) ; //<S2SV> megasas_free_cmds ( instance ) ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 