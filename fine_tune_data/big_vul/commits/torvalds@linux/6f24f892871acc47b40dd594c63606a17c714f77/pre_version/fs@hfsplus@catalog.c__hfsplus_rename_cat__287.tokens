int hfsplus_rename_cat ( u32 cnid , //<S2SV> struct inode * src_dir , struct qstr * src_name , //<S2SV> struct inode * dst_dir , struct qstr * dst_name ) //<S2SV> { //<S2SV> struct super_block * sb = src_dir -> i_sb ; //<S2SV> struct hfs_find_data src_fd , dst_fd ; //<S2SV> hfsplus_cat_entry entry ; //<S2SV> int entry_size , type ; //<S2SV> int err ; //<S2SV> dprint ( DBG_CAT_MOD , "rename_cat:<S2SV_blank>%u<S2SV_blank>-<S2SV_blank>%lu,%s<S2SV_blank>-<S2SV_blank>%lu,%s\\n" , //<S2SV> cnid , src_dir -> i_ino , src_name -> name , //<S2SV> dst_dir -> i_ino , dst_name -> name ) ; //<S2SV> err = hfs_find_init ( HFSPLUS_SB ( sb ) -> cat_tree , & src_fd ) ; //<S2SV> if ( err ) //<S2SV> return err ; //<S2SV> dst_fd = src_fd ; //<S2SV> hfsplus_cat_build_key ( sb , src_fd . search_key , src_dir -> i_ino , src_name ) ; //<S2SV> err = hfs_brec_find ( & src_fd ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> hfs_bnode_read ( src_fd . bnode , & entry , src_fd . entryoffset , //<S2SV> src_fd . entrylength ) ; //<S2SV> hfsplus_cat_build_key ( sb , dst_fd . search_key , dst_dir -> i_ino , dst_name ) ; //<S2SV> err = hfs_brec_find ( & dst_fd ) ; //<S2SV> if ( err != - ENOENT ) { //<S2SV> if ( ! err ) //<S2SV> err = - EEXIST ; //<S2SV> goto out ; //<S2SV> } //<S2SV> err = hfs_brec_insert ( & dst_fd , & entry , src_fd . entrylength ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> dst_dir -> i_size ++ ; //<S2SV> dst_dir -> i_mtime = dst_dir -> i_ctime = CURRENT_TIME_SEC ; //<S2SV> hfsplus_cat_build_key ( sb , src_fd . search_key , src_dir -> i_ino , src_name ) ; //<S2SV> err = hfs_brec_find ( & src_fd ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> err = hfs_brec_remove ( & src_fd ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> src_dir -> i_size -- ; //<S2SV> src_dir -> i_mtime = src_dir -> i_ctime = CURRENT_TIME_SEC ; //<S2SV> hfsplus_cat_build_key ( sb , src_fd . search_key , cnid , NULL ) ; //<S2SV> err = hfs_brec_find ( & src_fd ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> type = hfs_bnode_read_u16 ( src_fd . bnode , src_fd . entryoffset ) ; //<S2SV> err = hfs_brec_remove ( & src_fd ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> hfsplus_cat_build_key ( sb , dst_fd . search_key , cnid , NULL ) ; //<S2SV> entry_size = hfsplus_fill_cat_thread ( sb , & entry , type , //<S2SV> dst_dir -> i_ino , dst_name ) ; //<S2SV> err = hfs_brec_find ( & dst_fd ) ; //<S2SV> if ( err != - ENOENT ) { //<S2SV> if ( ! err ) //<S2SV> err = - EEXIST ; //<S2SV> goto out ; //<S2SV> } //<S2SV> err = hfs_brec_insert ( & dst_fd , & entry , entry_size ) ; //<S2SV> hfsplus_mark_inode_dirty ( dst_dir , HFSPLUS_I_CAT_DIRTY ) ; //<S2SV> hfsplus_mark_inode_dirty ( src_dir , HFSPLUS_I_CAT_DIRTY ) ; //<S2SV> out : //<S2SV> hfs_bnode_put ( dst_fd . bnode ) ; //<S2SV> hfs_find_exit ( & src_fd ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 