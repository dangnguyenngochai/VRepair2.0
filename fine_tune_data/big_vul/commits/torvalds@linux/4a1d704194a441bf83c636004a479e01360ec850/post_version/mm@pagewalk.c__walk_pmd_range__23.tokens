static int walk_pmd_range ( pud_t * pud , unsigned long addr , unsigned long end , //<S2SV> struct mm_walk * walk ) //<S2SV> { //<S2SV> pmd_t * pmd ; //<S2SV> unsigned long next ; //<S2SV> int err = 0 ; //<S2SV> pmd = pmd_offset ( pud , addr ) ; //<S2SV> do { //<S2SV> again : //<S2SV> next = pmd_addr_end ( addr , end ) ; //<S2SV> if ( pmd_none ( * pmd ) ) { //<S2SV> if ( walk -> pte_hole ) //<S2SV> err = walk -> pte_hole ( addr , next , walk ) ; //<S2SV> if ( err ) //<S2SV> break ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( walk -> pmd_entry ) //<S2SV> err = walk -> pmd_entry ( pmd , addr , next , walk ) ; //<S2SV> if ( err ) //<S2SV> break ; //<S2SV> if ( ! walk -> pte_entry ) //<S2SV> continue ; //<S2SV> split_huge_page_pmd ( walk -> mm , pmd ) ; //<S2SV> if ( pmd_none_or_trans_huge_or_clear_bad ( pmd ) ) //<S2SV> goto again ; //<S2SV> err = walk_pte_range ( pmd , addr , next , walk ) ; //<S2SV> if ( err ) //<S2SV> break ; //<S2SV> } while ( pmd ++ , addr = next , addr != end ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 