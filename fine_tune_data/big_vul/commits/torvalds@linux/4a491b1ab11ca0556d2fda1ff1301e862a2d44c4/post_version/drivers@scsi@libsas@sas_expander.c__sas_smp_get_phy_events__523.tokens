int sas_smp_get_phy_events ( struct sas_phy * phy ) //<S2SV> { //<S2SV> int res ; //<S2SV> u8 * req ; //<S2SV> u8 * resp ; //<S2SV> struct sas_rphy * rphy = dev_to_rphy ( phy -> dev . parent ) ; //<S2SV> struct domain_device * dev = sas_find_dev_by_rphy ( rphy ) ; //<S2SV> req = alloc_smp_req ( RPEL_REQ_SIZE ) ; //<S2SV> if ( ! req ) //<S2SV> return - ENOMEM ; //<S2SV> resp = alloc_smp_resp ( RPEL_RESP_SIZE ) ; //<S2SV> if ( ! resp ) { //<S2SV> kfree ( req ) ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> req [ 1 ] = SMP_REPORT_PHY_ERR_LOG ; //<S2SV> req [ 9 ] = phy -> number ; //<S2SV> res = smp_execute_task ( dev , req , RPEL_REQ_SIZE , //<S2SV> resp , RPEL_RESP_SIZE ) ; //<S2SV> if ( ! res ) //<S2SV> goto out ; //<S2SV> phy -> invalid_dword_count = scsi_to_u32 ( & resp [ 12 ] ) ; //<S2SV> phy -> running_disparity_error_count = scsi_to_u32 ( & resp [ 16 ] ) ; //<S2SV> phy -> loss_of_dword_sync_count = scsi_to_u32 ( & resp [ 20 ] ) ; //<S2SV> phy -> phy_reset_problem_count = scsi_to_u32 ( & resp [ 24 ] ) ; //<S2SV> out : //<S2SV> kfree ( req ) ; //<S2SV> kfree ( resp ) ; //<S2SV> return res ; //<S2SV> } //<S2SV> 