key_ref_t key_create_or_update ( key_ref_t keyring_ref , //<S2SV> const char * type , //<S2SV> const char * description , //<S2SV> const void * payload , //<S2SV> size_t plen , //<S2SV> key_perm_t perm , //<S2SV> unsigned long flags ) //<S2SV> { //<S2SV> struct keyring_index_key index_key = { //<S2SV> . description = description , //<S2SV> } ; //<S2SV> struct key_preparsed_payload prep ; //<S2SV> struct assoc_array_edit * edit ; //<S2SV> const struct cred * cred = current_cred ( ) ; //<S2SV> struct key * keyring , * key = NULL ; //<S2SV> key_ref_t key_ref ; //<S2SV> int ret ; //<S2SV> index_key . type = key_type_lookup ( type ) ; //<S2SV> if ( IS_ERR ( index_key . type ) ) { //<S2SV> key_ref = ERR_PTR ( - ENODEV ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> key_ref = ERR_PTR ( - EINVAL ) ; //<S2SV> if ( ! index_key . type -> match || ! index_key . type -> instantiate || //<S2SV> ( ! index_key . description && ! index_key . type -> preparse ) ) //<S2SV> goto error_put_type ; //<S2SV> keyring = key_ref_to_ptr ( keyring_ref ) ; //<S2SV> key_check ( keyring ) ; //<S2SV> key_ref = ERR_PTR ( - ENOTDIR ) ; //<S2SV> if ( keyring -> type != & key_type_keyring ) //<S2SV> goto error_put_type ; //<S2SV> memset ( & prep , 0 , sizeof ( prep ) ) ; //<S2SV> prep . data = payload ; //<S2SV> prep . datalen = plen ; //<S2SV> prep . quotalen = index_key . type -> def_datalen ; //<S2SV> prep . trusted = flags & KEY_ALLOC_TRUSTED ; //<S2SV> prep . expiry = TIME_T_MAX ; //<S2SV> if ( index_key . type -> preparse ) { //<S2SV> ret = index_key . type -> preparse ( & prep ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> key_ref = ERR_PTR ( ret ) ; //<S2SV> goto error_free_prep ; //<S2SV> } //<S2SV> if ( ! index_key . description ) //<S2SV> index_key . description = prep . description ; //<S2SV> key_ref = ERR_PTR ( - EINVAL ) ; //<S2SV> if ( ! index_key . description ) //<S2SV> goto error_free_prep ; //<S2SV> } //<S2SV> index_key . desc_len = strlen ( index_key . description ) ; //<S2SV> key_ref = ERR_PTR ( - EPERM ) ; //<S2SV> if ( ! prep . trusted && test_bit ( KEY_FLAG_TRUSTED_ONLY , & keyring -> flags ) ) //<S2SV> goto error_free_prep ; //<S2SV> flags |= prep . trusted ? KEY_ALLOC_TRUSTED : 0 ; //<S2SV> ret = __key_link_begin ( keyring , & index_key , & edit ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> key_ref = ERR_PTR ( ret ) ; //<S2SV> goto error_free_prep ; //<S2SV> } //<S2SV> ret = key_permission ( keyring_ref , KEY_NEED_WRITE ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> key_ref = ERR_PTR ( ret ) ; //<S2SV> goto error_link_end ; //<S2SV> } //<S2SV> if ( index_key . type -> update ) { //<S2SV> key_ref = find_key_to_update ( keyring_ref , & index_key ) ; //<S2SV> if ( key_ref ) //<S2SV> goto found_matching_key ; //<S2SV> } //<S2SV> if ( perm == KEY_PERM_UNDEF ) { //<S2SV> perm = KEY_POS_VIEW | KEY_POS_SEARCH | KEY_POS_LINK | KEY_POS_SETATTR ; //<S2SV> perm |= KEY_USR_VIEW ; //<S2SV> if ( index_key . type -> read ) //<S2SV> perm |= KEY_POS_READ ; //<S2SV> if ( index_key . type == & key_type_keyring || //<S2SV> index_key . type -> update ) //<S2SV> perm |= KEY_POS_WRITE ; //<S2SV> } //<S2SV> key = key_alloc ( index_key . type , index_key . description , //<S2SV> cred -> fsuid , cred -> fsgid , cred , perm , flags ) ; //<S2SV> if ( IS_ERR ( key ) ) { //<S2SV> key_ref = ERR_CAST ( key ) ; //<S2SV> goto error_link_end ; //<S2SV> } //<S2SV> ret = __key_instantiate_and_link ( key , & prep , keyring , NULL , & edit ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> key_put ( key ) ; //<S2SV> key_ref = ERR_PTR ( ret ) ; //<S2SV> goto error_link_end ; //<S2SV> } //<S2SV> key_ref = make_key_ref ( key , is_key_possessed ( keyring_ref ) ) ; //<S2SV> error_link_end : //<S2SV> __key_link_end ( keyring , & index_key , edit ) ; //<S2SV> error_free_prep : //<S2SV> if ( index_key . type -> preparse ) //<S2SV> index_key . type -> free_preparse ( & prep ) ; //<S2SV> error_put_type : //<S2SV> key_type_put ( index_key . type ) ; //<S2SV> error : //<S2SV> return key_ref ; //<S2SV> found_matching_key : //<S2SV> __key_link_end ( keyring , & index_key , edit ) ; //<S2SV> key_ref = __key_update ( key_ref , & prep ) ; //<S2SV> goto error_free_prep ; //<S2SV> } //<S2SV> 