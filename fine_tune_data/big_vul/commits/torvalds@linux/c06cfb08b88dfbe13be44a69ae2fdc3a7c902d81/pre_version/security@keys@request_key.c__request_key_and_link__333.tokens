struct key * request_key_and_link ( struct key_type * type , //<S2SV> const char * description , //<S2SV> const void * callout_info , //<S2SV> size_t callout_len , //<S2SV> void * aux , //<S2SV> struct key * dest_keyring , //<S2SV> unsigned long flags ) //<S2SV> { //<S2SV> struct keyring_search_context ctx = { //<S2SV> . index_key . type = type , //<S2SV> . index_key . description = description , //<S2SV> . cred = current_cred ( ) , //<S2SV> . match_data . cmp = type -> match , //<S2SV> . match_data . raw_data = description , //<S2SV> . match_data . lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT , //<S2SV> } ; //<S2SV> struct key * key ; //<S2SV> key_ref_t key_ref ; //<S2SV> int ret ; //<S2SV> kenter ( "%s,%s,%p,%zu,%p,%p,%lx" , //<S2SV> ctx . index_key . type -> name , ctx . index_key . description , //<S2SV> callout_info , callout_len , aux , dest_keyring , flags ) ; //<S2SV> if ( type -> match_preparse ) { //<S2SV> ret = type -> match_preparse ( & ctx . match_data ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> key = ERR_PTR ( ret ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> } //<S2SV> key_ref = search_process_keyrings ( & ctx ) ; //<S2SV> if ( ! IS_ERR ( key_ref ) ) { //<S2SV> key = key_ref_to_ptr ( key_ref ) ; //<S2SV> if ( dest_keyring ) { //<S2SV> construct_get_dest_keyring ( & dest_keyring ) ; //<S2SV> ret = key_link ( dest_keyring , key ) ; //<S2SV> key_put ( dest_keyring ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> key_put ( key ) ; //<S2SV> key = ERR_PTR ( ret ) ; //<S2SV> goto error_free ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( PTR_ERR ( key_ref ) != - EAGAIN ) { //<S2SV> key = ERR_CAST ( key_ref ) ; //<S2SV> } else { //<S2SV> key = ERR_PTR ( - ENOKEY ) ; //<S2SV> if ( ! callout_info ) //<S2SV> goto error_free ; //<S2SV> key = construct_key_and_link ( & ctx , callout_info , callout_len , //<S2SV> aux , dest_keyring , flags ) ; //<S2SV> } //<S2SV> error_free : //<S2SV> if ( type -> match_free ) //<S2SV> type -> match_free ( & ctx . match_data ) ; //<S2SV> error : //<S2SV> kleave ( "<S2SV_blank>=<S2SV_blank>%p" , key ) ; //<S2SV> return key ; //<S2SV> } //<S2SV> 