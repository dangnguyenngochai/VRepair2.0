int fscrypt_process_policy ( struct inode * inode , //<S2SV> const struct fscrypt_policy * policy ) //<S2SV> { //<S2SV> if ( ! inode_owner_or_capable ( inode ) ) //<S2SV> return - EACCES ; //<S2SV> if ( policy -> version != 0 ) //<S2SV> return - EINVAL ; //<S2SV> if ( ! inode_has_encryption_context ( inode ) ) { //<S2SV> if ( ! inode -> i_sb -> s_cop -> empty_dir ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> if ( ! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) //<S2SV> return - ENOTEMPTY ; //<S2SV> return create_encryption_context_from_policy ( inode , policy ) ; //<S2SV> } //<S2SV> if ( is_encryption_context_consistent_with_policy ( inode , policy ) ) //<S2SV> return 0 ; //<S2SV> printk ( KERN_WARNING "%s:<S2SV_blank>Policy<S2SV_blank>inconsistent<S2SV_blank>with<S2SV_blank>encryption<S2SV_blank>context\\n" , //<S2SV> __func__ ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> 