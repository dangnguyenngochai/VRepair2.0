static void change_port_settings ( struct tty_struct * tty , //<S2SV> struct edgeport_port * edge_port , struct ktermios * old_termios ) //<S2SV> { //<S2SV> struct device * dev = & edge_port -> port -> dev ; //<S2SV> struct ump_uart_config * config ; //<S2SV> int baud ; //<S2SV> unsigned cflag ; //<S2SV> int status ; //<S2SV> int port_number = edge_port -> port -> port_number ; //<S2SV> config = kmalloc ( sizeof ( * config ) , GFP_KERNEL ) ; //<S2SV> if ( ! config ) { //<S2SV> tty -> termios = * old_termios ; //<S2SV> return ; //<S2SV> } //<S2SV> cflag = tty -> termios . c_cflag ; //<S2SV> config -> wFlags = 0 ; //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_RECEIVE_MS_INT ; //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_AUTO_START_ON_ERR ; //<S2SV> config -> bUartMode = ( __u8 ) ( edge_port -> bUartMode ) ; //<S2SV> switch ( cflag & CSIZE ) { //<S2SV> case CS5 : //<S2SV> config -> bDataBits = UMP_UART_CHAR5BITS ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>data<S2SV_blank>bits<S2SV_blank>=<S2SV_blank>5\\n" , __func__ ) ; //<S2SV> break ; //<S2SV> case CS6 : //<S2SV> config -> bDataBits = UMP_UART_CHAR6BITS ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>data<S2SV_blank>bits<S2SV_blank>=<S2SV_blank>6\\n" , __func__ ) ; //<S2SV> break ; //<S2SV> case CS7 : //<S2SV> config -> bDataBits = UMP_UART_CHAR7BITS ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>data<S2SV_blank>bits<S2SV_blank>=<S2SV_blank>7\\n" , __func__ ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> case CS8 : //<S2SV> config -> bDataBits = UMP_UART_CHAR8BITS ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>data<S2SV_blank>bits<S2SV_blank>=<S2SV_blank>8\\n" , __func__ ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( cflag & PARENB ) { //<S2SV> if ( cflag & PARODD ) { //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_PARITY ; //<S2SV> config -> bParity = UMP_UART_ODDPARITY ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>parity<S2SV_blank>=<S2SV_blank>odd\\n" , __func__ ) ; //<S2SV> } else { //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_PARITY ; //<S2SV> config -> bParity = UMP_UART_EVENPARITY ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>parity<S2SV_blank>=<S2SV_blank>even\\n" , __func__ ) ; //<S2SV> } //<S2SV> } else { //<S2SV> config -> bParity = UMP_UART_NOPARITY ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>parity<S2SV_blank>=<S2SV_blank>none\\n" , __func__ ) ; //<S2SV> } //<S2SV> if ( cflag & CSTOPB ) { //<S2SV> config -> bStopBits = UMP_UART_STOPBIT2 ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>stop<S2SV_blank>bits<S2SV_blank>=<S2SV_blank>2\\n" , __func__ ) ; //<S2SV> } else { //<S2SV> config -> bStopBits = UMP_UART_STOPBIT1 ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>stop<S2SV_blank>bits<S2SV_blank>=<S2SV_blank>1\\n" , __func__ ) ; //<S2SV> } //<S2SV> if ( cflag & CRTSCTS ) { //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_OUT_X_CTS_FLOW ; //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_RTS_FLOW ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>RTS/CTS<S2SV_blank>is<S2SV_blank>enabled\\n" , __func__ ) ; //<S2SV> } else { //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>RTS/CTS<S2SV_blank>is<S2SV_blank>disabled\\n" , __func__ ) ; //<S2SV> restart_read ( edge_port ) ; //<S2SV> } //<S2SV> config -> cXon = START_CHAR ( tty ) ; //<S2SV> config -> cXoff = STOP_CHAR ( tty ) ; //<S2SV> if ( I_IXOFF ( tty ) ) { //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_IN_X ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>INBOUND<S2SV_blank>XON/XOFF<S2SV_blank>is<S2SV_blank>enabled,<S2SV_blank>XON<S2SV_blank>=<S2SV_blank>%2x,<S2SV_blank>XOFF<S2SV_blank>=<S2SV_blank>%2x\\n" , //<S2SV> __func__ , config -> cXon , config -> cXoff ) ; //<S2SV> } else //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>INBOUND<S2SV_blank>XON/XOFF<S2SV_blank>is<S2SV_blank>disabled\\n" , __func__ ) ; //<S2SV> if ( I_IXON ( tty ) ) { //<S2SV> config -> wFlags |= UMP_MASK_UART_FLAGS_OUT_X ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>OUTBOUND<S2SV_blank>XON/XOFF<S2SV_blank>is<S2SV_blank>enabled,<S2SV_blank>XON<S2SV_blank>=<S2SV_blank>%2x,<S2SV_blank>XOFF<S2SV_blank>=<S2SV_blank>%2x\\n" , //<S2SV> __func__ , config -> cXon , config -> cXoff ) ; //<S2SV> } else //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>OUTBOUND<S2SV_blank>XON/XOFF<S2SV_blank>is<S2SV_blank>disabled\\n" , __func__ ) ; //<S2SV> tty -> termios . c_cflag &= ~ CMSPAR ; //<S2SV> baud = tty_get_baud_rate ( tty ) ; //<S2SV> if ( ! baud ) { //<S2SV> baud = 9600 ; //<S2SV> } else { //<S2SV> baud = min ( baud , 461550 ) ; //<S2SV> tty_encode_baud_rate ( tty , baud , baud ) ; //<S2SV> } //<S2SV> edge_port -> baud_rate = baud ; //<S2SV> config -> wBaudRate = ( __u16 ) ( ( 461550L + baud / 2 ) / baud ) ; //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>baud<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%d,<S2SV_blank>wBaudRate<S2SV_blank>=<S2SV_blank>%d\\n" , __func__ , baud , config -> wBaudRate ) ; //<S2SV> dev_dbg ( dev , "wBaudRate:<S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , ( int ) ( 461550L / config -> wBaudRate ) ) ; //<S2SV> dev_dbg ( dev , "wFlags:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>0x%x\\n" , config -> wFlags ) ; //<S2SV> dev_dbg ( dev , "bDataBits:<S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , config -> bDataBits ) ; //<S2SV> dev_dbg ( dev , "bParity:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , config -> bParity ) ; //<S2SV> dev_dbg ( dev , "bStopBits:<S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , config -> bStopBits ) ; //<S2SV> dev_dbg ( dev , "cXon:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , config -> cXon ) ; //<S2SV> dev_dbg ( dev , "cXoff:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , config -> cXoff ) ; //<S2SV> dev_dbg ( dev , "bUartMode:<S2SV_blank><S2SV_blank><S2SV_blank>%d\\n" , config -> bUartMode ) ; //<S2SV> cpu_to_be16s ( & config -> wFlags ) ; //<S2SV> cpu_to_be16s ( & config -> wBaudRate ) ; //<S2SV> status = send_cmd ( edge_port -> port -> serial -> dev , UMPC_SET_CONFIG , //<S2SV> ( __u8 ) ( UMPM_UART1_PORT + port_number ) , //<S2SV> 0 , ( __u8 * ) config , sizeof ( * config ) ) ; //<S2SV> if ( status ) //<S2SV> dev_dbg ( dev , "%s<S2SV_blank>-<S2SV_blank>error<S2SV_blank>%d<S2SV_blank>when<S2SV_blank>trying<S2SV_blank>to<S2SV_blank>write<S2SV_blank>config<S2SV_blank>to<S2SV_blank>device\\n" , //<S2SV> __func__ , status ) ; //<S2SV> kfree ( config ) ; //<S2SV> } //<S2SV> 