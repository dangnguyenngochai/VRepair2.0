static int crypto_skcipher_init_tfm ( struct crypto_tfm * tfm ) //<S2SV> { //<S2SV> struct crypto_skcipher * skcipher = __crypto_skcipher_cast ( tfm ) ; //<S2SV> struct skcipher_alg * alg = crypto_skcipher_alg ( skcipher ) ; //<S2SV> if ( tfm -> __crt_alg -> cra_type == & crypto_blkcipher_type ) //<S2SV> return crypto_init_skcipher_ops_blkcipher ( tfm ) ; //<S2SV> if ( tfm -> __crt_alg -> cra_type == & crypto_ablkcipher_type || //<S2SV> tfm -> __crt_alg -> cra_type == & crypto_givcipher_type ) //<S2SV> return crypto_init_skcipher_ops_ablkcipher ( tfm ) ; //<S2SV> skcipher -> setkey = skcipher_setkey ; //<S2SV> skcipher -> encrypt = alg -> encrypt ; //<S2SV> skcipher -> decrypt = alg -> decrypt ; //<S2SV> skcipher -> ivsize = alg -> ivsize ; //<S2SV> skcipher -> keysize = alg -> max_keysize ; //<S2SV> if ( alg -> exit ) //<S2SV> skcipher -> base . exit = crypto_skcipher_exit_tfm ; //<S2SV> if ( alg -> init ) //<S2SV> return alg -> init ( skcipher ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 