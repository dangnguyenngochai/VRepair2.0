long kernel_wait4 ( pid_t upid , int __user * stat_addr , int options , //<S2SV> struct rusage * ru ) //<S2SV> { //<S2SV> struct wait_opts wo ; //<S2SV> struct pid * pid = NULL ; //<S2SV> enum pid_type type ; //<S2SV> long ret ; //<S2SV> if ( options & ~ ( WNOHANG | WUNTRACED | WCONTINUED | //<S2SV> __WNOTHREAD | __WCLONE | __WALL ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( upid == INT_MIN ) //<S2SV> return - ESRCH ; //<S2SV> if ( upid == - 1 ) //<S2SV> type = PIDTYPE_MAX ; //<S2SV> else if ( upid < 0 ) { //<S2SV> type = PIDTYPE_PGID ; //<S2SV> pid = find_get_pid ( - upid ) ; //<S2SV> } else if ( upid == 0 ) { //<S2SV> type = PIDTYPE_PGID ; //<S2SV> pid = get_task_pid ( current , PIDTYPE_PGID ) ; //<S2SV> } else { //<S2SV> type = PIDTYPE_PID ; //<S2SV> pid = find_get_pid ( upid ) ; //<S2SV> } //<S2SV> wo . wo_type = type ; //<S2SV> wo . wo_pid = pid ; //<S2SV> wo . wo_flags = options | WEXITED ; //<S2SV> wo . wo_info = NULL ; //<S2SV> wo . wo_stat = 0 ; //<S2SV> wo . wo_rusage = ru ; //<S2SV> ret = do_wait ( & wo ) ; //<S2SV> put_pid ( pid ) ; //<S2SV> if ( ret > 0 && stat_addr && put_user ( wo . wo_stat , stat_addr ) ) //<S2SV> ret = - EFAULT ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 