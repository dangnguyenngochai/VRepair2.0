static void regulator_ena_gpio_free ( struct regulator_dev * rdev ) //<S2SV> { //<S2SV> struct regulator_enable_gpio * pin , * n ; //<S2SV> if ( ! rdev -> ena_pin ) //<S2SV> return ; //<S2SV> list_for_each_entry_safe ( pin , n , & regulator_ena_gpio_list , list ) { //<S2SV> if ( pin -> gpiod == rdev -> ena_pin -> gpiod ) { //<S2SV> if ( pin -> request_count <= 1 ) { //<S2SV> pin -> request_count = 0 ; //<S2SV> gpiod_put ( pin -> gpiod ) ; //<S2SV> list_del ( & pin -> list ) ; //<S2SV> kfree ( pin ) ; //<S2SV> rdev -> ena_pin = NULL ; //<S2SV> return ; //<S2SV> } else { //<S2SV> pin -> request_count -- ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 