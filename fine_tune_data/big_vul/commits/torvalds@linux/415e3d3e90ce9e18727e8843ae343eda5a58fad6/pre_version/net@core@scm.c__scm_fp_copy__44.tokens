static int scm_fp_copy ( struct cmsghdr * cmsg , struct scm_fp_list * * fplp ) //<S2SV> { //<S2SV> int * fdp = ( int * ) CMSG_DATA ( cmsg ) ; //<S2SV> struct scm_fp_list * fpl = * fplp ; //<S2SV> struct file * * fpp ; //<S2SV> int i , num ; //<S2SV> num = ( cmsg -> cmsg_len - CMSG_ALIGN ( sizeof ( struct cmsghdr ) ) ) / sizeof ( int ) ; //<S2SV> if ( num <= 0 ) //<S2SV> return 0 ; //<S2SV> if ( num > SCM_MAX_FD ) //<S2SV> return - EINVAL ; //<S2SV> if ( ! fpl ) //<S2SV> { //<S2SV> fpl = kmalloc ( sizeof ( struct scm_fp_list ) , GFP_KERNEL ) ; //<S2SV> if ( ! fpl ) //<S2SV> return - ENOMEM ; //<S2SV> * fplp = fpl ; //<S2SV> fpl -> count = 0 ; //<S2SV> fpl -> max = SCM_MAX_FD ; //<S2SV> } //<S2SV> fpp = & fpl -> fp [ fpl -> count ] ; //<S2SV> if ( fpl -> count + num > fpl -> max ) //<S2SV> return - EINVAL ; //<S2SV> for ( i = 0 ; i < num ; i ++ ) //<S2SV> { //<S2SV> int fd = fdp [ i ] ; //<S2SV> struct file * file ; //<S2SV> if ( fd < 0 || ! ( file = fget_raw ( fd ) ) ) //<S2SV> return - EBADF ; //<S2SV> * fpp ++ = file ; //<S2SV> fpl -> count ++ ; //<S2SV> } //<S2SV> return num ; //<S2SV> } //<S2SV> 