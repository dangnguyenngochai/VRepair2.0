static int cqspi_setup_flash ( struct cqspi_st * cqspi , struct device_node * np ) //<S2SV> { //<S2SV> struct platform_device * pdev = cqspi -> pdev ; //<S2SV> struct device * dev = & pdev -> dev ; //<S2SV> struct cqspi_flash_pdata * f_pdata ; //<S2SV> struct spi_nor * nor ; //<S2SV> struct mtd_info * mtd ; //<S2SV> unsigned int cs ; //<S2SV> int i , ret ; //<S2SV> for_each_available_child_of_node ( dev -> of_node , np ) { //<S2SV> if ( of_property_read_u32 ( np , "reg" , & cs ) ) { //<S2SV> dev_err ( dev , "Couldn\'t<S2SV_blank>determine<S2SV_blank>chip<S2SV_blank>select.\\n" ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( cs > CQSPI_MAX_CHIPSELECT ) { //<S2SV> dev_err ( dev , "Chip<S2SV_blank>select<S2SV_blank>%d<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range.\\n" , cs ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> f_pdata = & cqspi -> f_pdata [ cs ] ; //<S2SV> f_pdata -> cqspi = cqspi ; //<S2SV> f_pdata -> cs = cs ; //<S2SV> ret = cqspi_of_get_flash_pdata ( pdev , f_pdata , np ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> nor = & f_pdata -> nor ; //<S2SV> mtd = & nor -> mtd ; //<S2SV> mtd -> priv = nor ; //<S2SV> nor -> dev = dev ; //<S2SV> spi_nor_set_flash_node ( nor , np ) ; //<S2SV> nor -> priv = f_pdata ; //<S2SV> nor -> read_reg = cqspi_read_reg ; //<S2SV> nor -> write_reg = cqspi_write_reg ; //<S2SV> nor -> read = cqspi_read ; //<S2SV> nor -> write = cqspi_write ; //<S2SV> nor -> erase = cqspi_erase ; //<S2SV> nor -> prepare = cqspi_prep ; //<S2SV> nor -> unprepare = cqspi_unprep ; //<S2SV> mtd -> name = devm_kasprintf ( dev , GFP_KERNEL , "%s.%d" , //<S2SV> dev_name ( dev ) , cs ) ; //<S2SV> if ( ! mtd -> name ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto err ; //<S2SV> } //<S2SV> ret = spi_nor_scan ( nor , NULL , SPI_NOR_QUAD ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> ret = mtd_device_register ( mtd , NULL , 0 ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> f_pdata -> registered = true ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> err : //<S2SV> for ( i = 0 ; i < CQSPI_MAX_CHIPSELECT ; i ++ ) //<S2SV> if ( cqspi -> f_pdata [ i ] . registered ) //<S2SV> mtd_device_unregister ( & cqspi -> f_pdata [ i ] . nor . mtd ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 