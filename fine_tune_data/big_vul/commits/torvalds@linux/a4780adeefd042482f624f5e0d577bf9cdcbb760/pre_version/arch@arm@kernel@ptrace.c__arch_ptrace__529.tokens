long arch_ptrace ( struct task_struct * child , long request , //<S2SV> unsigned long addr , unsigned long data ) //<S2SV> { //<S2SV> int ret ; //<S2SV> unsigned long __user * datap = ( unsigned long __user * ) data ; //<S2SV> switch ( request ) { //<S2SV> case PTRACE_PEEKUSR : //<S2SV> ret = ptrace_read_user ( child , addr , datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_POKEUSR : //<S2SV> ret = ptrace_write_user ( child , addr , data ) ; //<S2SV> break ; //<S2SV> case PTRACE_GETREGS : //<S2SV> ret = copy_regset_to_user ( child , //<S2SV> & user_arm_view , REGSET_GPR , //<S2SV> 0 , sizeof ( struct pt_regs ) , //<S2SV> datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_SETREGS : //<S2SV> ret = copy_regset_from_user ( child , //<S2SV> & user_arm_view , REGSET_GPR , //<S2SV> 0 , sizeof ( struct pt_regs ) , //<S2SV> datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_GETFPREGS : //<S2SV> ret = copy_regset_to_user ( child , //<S2SV> & user_arm_view , REGSET_FPR , //<S2SV> 0 , sizeof ( union fp_state ) , //<S2SV> datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_SETFPREGS : //<S2SV> ret = copy_regset_from_user ( child , //<S2SV> & user_arm_view , REGSET_FPR , //<S2SV> 0 , sizeof ( union fp_state ) , //<S2SV> datap ) ; //<S2SV> break ; //<S2SV> # ifdef CONFIG_IWMMXT //<S2SV> case PTRACE_GETWMMXREGS : //<S2SV> ret = ptrace_getwmmxregs ( child , datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_SETWMMXREGS : //<S2SV> ret = ptrace_setwmmxregs ( child , datap ) ; //<S2SV> break ; //<S2SV> # endif //<S2SV> case PTRACE_GET_THREAD_AREA : //<S2SV> ret = put_user ( task_thread_info ( child ) -> tp_value , //<S2SV> datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_SET_SYSCALL : //<S2SV> task_thread_info ( child ) -> syscall = data ; //<S2SV> ret = 0 ; //<S2SV> break ; //<S2SV> # ifdef CONFIG_CRUNCH //<S2SV> case PTRACE_GETCRUNCHREGS : //<S2SV> ret = ptrace_getcrunchregs ( child , datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_SETCRUNCHREGS : //<S2SV> ret = ptrace_setcrunchregs ( child , datap ) ; //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef CONFIG_VFP //<S2SV> case PTRACE_GETVFPREGS : //<S2SV> ret = copy_regset_to_user ( child , //<S2SV> & user_arm_view , REGSET_VFP , //<S2SV> 0 , ARM_VFPREGS_SIZE , //<S2SV> datap ) ; //<S2SV> break ; //<S2SV> case PTRACE_SETVFPREGS : //<S2SV> ret = copy_regset_from_user ( child , //<S2SV> & user_arm_view , REGSET_VFP , //<S2SV> 0 , ARM_VFPREGS_SIZE , //<S2SV> datap ) ; //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef CONFIG_HAVE_HW_BREAKPOINT //<S2SV> case PTRACE_GETHBPREGS : //<S2SV> if ( ptrace_get_breakpoints ( child ) < 0 ) //<S2SV> return - ESRCH ; //<S2SV> ret = ptrace_gethbpregs ( child , addr , //<S2SV> ( unsigned long __user * ) data ) ; //<S2SV> ptrace_put_breakpoints ( child ) ; //<S2SV> break ; //<S2SV> case PTRACE_SETHBPREGS : //<S2SV> if ( ptrace_get_breakpoints ( child ) < 0 ) //<S2SV> return - ESRCH ; //<S2SV> ret = ptrace_sethbpregs ( child , addr , //<S2SV> ( unsigned long __user * ) data ) ; //<S2SV> ptrace_put_breakpoints ( child ) ; //<S2SV> break ; //<S2SV> # endif //<S2SV> default : //<S2SV> ret = ptrace_request ( child , request , addr , data ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> 