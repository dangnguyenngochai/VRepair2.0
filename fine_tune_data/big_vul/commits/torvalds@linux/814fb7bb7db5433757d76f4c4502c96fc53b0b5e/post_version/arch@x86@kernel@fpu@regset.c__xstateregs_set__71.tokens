int xstateregs_set ( struct task_struct * target , const struct user_regset * regset , //<S2SV> unsigned int pos , unsigned int count , //<S2SV> const void * kbuf , const void __user * ubuf ) //<S2SV> { //<S2SV> struct fpu * fpu = & target -> thread . fpu ; //<S2SV> struct xregs_state * xsave ; //<S2SV> int ret ; //<S2SV> if ( ! boot_cpu_has ( X86_FEATURE_XSAVE ) ) //<S2SV> return - ENODEV ; //<S2SV> if ( ( pos != 0 ) || ( count < fpu_user_xstate_size ) ) //<S2SV> return - EFAULT ; //<S2SV> xsave = & fpu -> state . xsave ; //<S2SV> fpu__activate_fpstate_write ( fpu ) ; //<S2SV> if ( boot_cpu_has ( X86_FEATURE_XSAVES ) ) { //<S2SV> if ( kbuf ) //<S2SV> ret = copy_kernel_to_xstate ( xsave , kbuf ) ; //<S2SV> else //<S2SV> ret = copy_user_to_xstate ( xsave , ubuf ) ; //<S2SV> } else { //<S2SV> ret = user_regset_copyin ( & pos , & count , & kbuf , & ubuf , xsave , 0 , - 1 ) ; //<S2SV> if ( ! ret && xsave -> header . xcomp_bv ) //<S2SV> ret = - EINVAL ; //<S2SV> } //<S2SV> if ( ret ) //<S2SV> fpstate_init ( & fpu -> state ) ; //<S2SV> xsave -> i387 . mxcsr &= mxcsr_feature_mask ; //<S2SV> xsave -> header . xfeatures &= xfeatures_mask ; //<S2SV> memset ( & xsave -> header . reserved , 0 , 48 ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 