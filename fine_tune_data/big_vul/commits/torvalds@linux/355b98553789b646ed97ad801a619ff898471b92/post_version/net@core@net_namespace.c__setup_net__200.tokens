static __net_init int setup_net ( struct net * net , struct user_namespace * user_ns ) //<S2SV> { //<S2SV> const struct pernet_operations * ops , * saved_ops ; //<S2SV> int error = 0 ; //<S2SV> LIST_HEAD ( net_exit_list ) ; //<S2SV> refcount_set ( & net -> count , 1 ) ; //<S2SV> refcount_set ( & net -> passive , 1 ) ; //<S2SV> get_random_bytes ( & net -> hash_mix , sizeof ( u32 ) ) ; //<S2SV> net -> dev_base_seq = 1 ; //<S2SV> net -> user_ns = user_ns ; //<S2SV> idr_init ( & net -> netns_ids ) ; //<S2SV> spin_lock_init ( & net -> nsid_lock ) ; //<S2SV> mutex_init ( & net -> ipv4 . ra_mutex ) ; //<S2SV> list_for_each_entry ( ops , & pernet_list , list ) { //<S2SV> error = ops_init ( ops , net ) ; //<S2SV> if ( error < 0 ) //<S2SV> goto out_undo ; //<S2SV> } //<S2SV> down_write ( & net_rwsem ) ; //<S2SV> list_add_tail_rcu ( & net -> list , & net_namespace_list ) ; //<S2SV> up_write ( & net_rwsem ) ; //<S2SV> out : //<S2SV> return error ; //<S2SV> out_undo : //<S2SV> list_add ( & net -> exit_list , & net_exit_list ) ; //<S2SV> saved_ops = ops ; //<S2SV> list_for_each_entry_continue_reverse ( ops , & pernet_list , list ) //<S2SV> ops_exit_list ( ops , & net_exit_list ) ; //<S2SV> ops = saved_ops ; //<S2SV> list_for_each_entry_continue_reverse ( ops , & pernet_list , list ) //<S2SV> ops_free_list ( ops , & net_exit_list ) ; //<S2SV> rcu_barrier ( ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> 