static void userfaultfd_event_wait_completion ( struct userfaultfd_ctx * ctx , //<S2SV> struct userfaultfd_wait_queue * ewq ) //<S2SV> { //<S2SV> struct userfaultfd_ctx * release_new_ctx ; //<S2SV> if ( WARN_ON_ONCE ( current -> flags & PF_EXITING ) ) //<S2SV> goto out ; //<S2SV> ewq -> ctx = ctx ; //<S2SV> init_waitqueue_entry ( & ewq -> wq , current ) ; //<S2SV> release_new_ctx = NULL ; //<S2SV> spin_lock ( & ctx -> event_wqh . lock ) ; //<S2SV> __add_wait_queue ( & ctx -> event_wqh , & ewq -> wq ) ; //<S2SV> for ( ; ; ) { //<S2SV> set_current_state ( TASK_KILLABLE ) ; //<S2SV> if ( ewq -> msg . event == 0 ) //<S2SV> break ; //<S2SV> if ( READ_ONCE ( ctx -> released ) || //<S2SV> fatal_signal_pending ( current ) ) { //<S2SV> __remove_wait_queue ( & ctx -> event_wqh , & ewq -> wq ) ; //<S2SV> if ( ewq -> msg . event == UFFD_EVENT_FORK ) { //<S2SV> struct userfaultfd_ctx * new ; //<S2SV> new = ( struct userfaultfd_ctx * ) //<S2SV> ( unsigned long ) //<S2SV> ewq -> msg . arg . reserved . reserved1 ; //<S2SV> release_new_ctx = new ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> spin_unlock ( & ctx -> event_wqh . lock ) ; //<S2SV> wake_up_poll ( & ctx -> fd_wqh , EPOLLIN ) ; //<S2SV> schedule ( ) ; //<S2SV> spin_lock ( & ctx -> event_wqh . lock ) ; //<S2SV> } //<S2SV> __set_current_state ( TASK_RUNNING ) ; //<S2SV> spin_unlock ( & ctx -> event_wqh . lock ) ; //<S2SV> if ( release_new_ctx ) { //<S2SV> struct vm_area_struct * vma ; //<S2SV> struct mm_struct * mm = release_new_ctx -> mm ; //<S2SV> down_write ( & mm -> mmap_sem ) ; //<S2SV> for ( vma = mm -> mmap ; vma ; vma = vma -> vm_next ) //<S2SV> if ( vma -> vm_userfaultfd_ctx . ctx == release_new_ctx ) { //<S2SV> vma -> vm_userfaultfd_ctx = NULL_VM_UFFD_CTX ; //<S2SV> vma -> vm_flags &= ~ ( VM_UFFD_WP | VM_UFFD_MISSING ) ; //<S2SV> } //<S2SV> up_write ( & mm -> mmap_sem ) ; //<S2SV> userfaultfd_ctx_put ( release_new_ctx ) ; //<S2SV> } //<S2SV> out : //<S2SV> WRITE_ONCE ( ctx -> mmap_changing , false ) ; //<S2SV> userfaultfd_ctx_put ( ctx ) ; //<S2SV> } //<S2SV> 