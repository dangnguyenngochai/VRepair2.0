void uverbs_user_mmap_disassociate ( struct ib_uverbs_file * ufile ) //<S2SV> { //<S2SV> struct rdma_umap_priv * priv , * next_priv ; //<S2SV> lockdep_assert_held ( & ufile -> hw_destroy_rwsem ) ; //<S2SV> while ( 1 ) { //<S2SV> struct mm_struct * mm = NULL ; //<S2SV> mutex_lock ( & ufile -> umap_lock ) ; //<S2SV> while ( ! list_empty ( & ufile -> umaps ) ) { //<S2SV> int ret ; //<S2SV> priv = list_first_entry ( & ufile -> umaps , //<S2SV> struct rdma_umap_priv , list ) ; //<S2SV> mm = priv -> vma -> vm_mm ; //<S2SV> ret = mmget_not_zero ( mm ) ; //<S2SV> if ( ! ret ) { //<S2SV> list_del_init ( & priv -> list ) ; //<S2SV> mm = NULL ; //<S2SV> continue ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> mutex_unlock ( & ufile -> umap_lock ) ; //<S2SV> if ( ! mm ) //<S2SV> return ; //<S2SV> down_write ( & mm -> mmap_sem ) ; //<S2SV> mutex_lock ( & ufile -> umap_lock ) ; //<S2SV> list_for_each_entry_safe ( priv , next_priv , & ufile -> umaps , //<S2SV> list ) { //<S2SV> struct vm_area_struct * vma = priv -> vma ; //<S2SV> if ( vma -> vm_mm != mm ) //<S2SV> continue ; //<S2SV> list_del_init ( & priv -> list ) ; //<S2SV> zap_vma_ptes ( vma , vma -> vm_start , //<S2SV> vma -> vm_end - vma -> vm_start ) ; //<S2SV> vma -> vm_flags &= ~ ( VM_SHARED | VM_MAYSHARE ) ; //<S2SV> } //<S2SV> mutex_unlock ( & ufile -> umap_lock ) ; //<S2SV> up_write ( & mm -> mmap_sem ) ; //<S2SV> mmput ( mm ) ; //<S2SV> } //<S2SV> } //<S2SV> 