int blkcg_init_queue ( struct request_queue * q ) //<S2SV> { //<S2SV> struct blkcg_gq * new_blkg , * blkg ; //<S2SV> bool preloaded ; //<S2SV> int ret ; //<S2SV> new_blkg = blkg_alloc ( & blkcg_root , q , GFP_KERNEL ) ; //<S2SV> if ( ! new_blkg ) //<S2SV> return - ENOMEM ; //<S2SV> preloaded = ! radix_tree_preload ( GFP_KERNEL ) ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> spin_lock_irq ( q -> queue_lock ) ; //<S2SV> blkg = blkg_create ( & blkcg_root , q , new_blkg ) ; //<S2SV> spin_unlock_irq ( q -> queue_lock ) ; //<S2SV> rcu_read_unlock ( ) ; //<S2SV> if ( preloaded ) //<S2SV> radix_tree_preload_end ( ) ; //<S2SV> if ( IS_ERR ( blkg ) ) { //<S2SV> blkg_free ( new_blkg ) ; //<S2SV> return PTR_ERR ( blkg ) ; //<S2SV> } //<S2SV> q -> root_blkg = blkg ; //<S2SV> q -> root_rl . blkg = blkg ; //<S2SV> ret = blk_throtl_init ( q ) ; //<S2SV> if ( ret ) { //<S2SV> spin_lock_irq ( q -> queue_lock ) ; //<S2SV> blkg_destroy_all ( q ) ; //<S2SV> spin_unlock_irq ( q -> queue_lock ) ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> 