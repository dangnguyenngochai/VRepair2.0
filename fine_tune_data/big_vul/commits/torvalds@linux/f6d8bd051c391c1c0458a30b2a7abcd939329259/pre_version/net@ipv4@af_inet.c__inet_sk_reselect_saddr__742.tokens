static int inet_sk_reselect_saddr ( struct sock * sk ) //<S2SV> { //<S2SV> struct inet_sock * inet = inet_sk ( sk ) ; //<S2SV> __be32 old_saddr = inet -> inet_saddr ; //<S2SV> __be32 daddr = inet -> inet_daddr ; //<S2SV> struct flowi4 fl4 ; //<S2SV> struct rtable * rt ; //<S2SV> __be32 new_saddr ; //<S2SV> if ( inet -> opt && inet -> opt -> srr ) //<S2SV> daddr = inet -> opt -> faddr ; //<S2SV> rt = ip_route_connect ( & fl4 , daddr , 0 , RT_CONN_FLAGS ( sk ) , //<S2SV> sk -> sk_bound_dev_if , sk -> sk_protocol , //<S2SV> inet -> inet_sport , inet -> inet_dport , sk , false ) ; //<S2SV> if ( IS_ERR ( rt ) ) //<S2SV> return PTR_ERR ( rt ) ; //<S2SV> sk_setup_caps ( sk , & rt -> dst ) ; //<S2SV> new_saddr = rt -> rt_src ; //<S2SV> if ( new_saddr == old_saddr ) //<S2SV> return 0 ; //<S2SV> if ( sysctl_ip_dynaddr > 1 ) { //<S2SV> printk ( KERN_INFO "%s():<S2SV_blank>shifting<S2SV_blank>inet->saddr<S2SV_blank>from<S2SV_blank>%pI4<S2SV_blank>to<S2SV_blank>%pI4\\n" , //<S2SV> __func__ , & old_saddr , & new_saddr ) ; //<S2SV> } //<S2SV> inet -> inet_saddr = inet -> inet_rcv_saddr = new_saddr ; //<S2SV> __sk_prot_rehash ( sk ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 