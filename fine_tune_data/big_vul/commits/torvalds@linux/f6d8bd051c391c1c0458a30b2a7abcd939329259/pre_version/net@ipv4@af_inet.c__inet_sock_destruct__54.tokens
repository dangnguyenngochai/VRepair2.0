void inet_sock_destruct ( struct sock * sk ) //<S2SV> { //<S2SV> struct inet_sock * inet = inet_sk ( sk ) ; //<S2SV> __skb_queue_purge ( & sk -> sk_receive_queue ) ; //<S2SV> __skb_queue_purge ( & sk -> sk_error_queue ) ; //<S2SV> sk_mem_reclaim ( sk ) ; //<S2SV> if ( sk -> sk_type == SOCK_STREAM && sk -> sk_state != TCP_CLOSE ) { //<S2SV> pr_err ( "Attempt<S2SV_blank>to<S2SV_blank>release<S2SV_blank>TCP<S2SV_blank>socket<S2SV_blank>in<S2SV_blank>state<S2SV_blank>%d<S2SV_blank>%p\\n" , //<S2SV> sk -> sk_state , sk ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! sock_flag ( sk , SOCK_DEAD ) ) { //<S2SV> pr_err ( "Attempt<S2SV_blank>to<S2SV_blank>release<S2SV_blank>alive<S2SV_blank>inet<S2SV_blank>socket<S2SV_blank>%p\\n" , sk ) ; //<S2SV> return ; //<S2SV> } //<S2SV> WARN_ON ( atomic_read ( & sk -> sk_rmem_alloc ) ) ; //<S2SV> WARN_ON ( atomic_read ( & sk -> sk_wmem_alloc ) ) ; //<S2SV> WARN_ON ( sk -> sk_wmem_queued ) ; //<S2SV> WARN_ON ( sk -> sk_forward_alloc ) ; //<S2SV> kfree ( inet -> opt ) ; //<S2SV> dst_release ( rcu_dereference_check ( sk -> sk_dst_cache , 1 ) ) ; //<S2SV> sk_refcnt_debug_dec ( sk ) ; //<S2SV> } //<S2SV> 