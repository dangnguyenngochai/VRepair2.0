static ssize_t aio_setup_iocb ( struct kiocb * kiocb , bool compat ) //<S2SV> { //<S2SV> struct file * file = kiocb -> ki_filp ; //<S2SV> ssize_t ret = 0 ; //<S2SV> switch ( kiocb -> ki_opcode ) { //<S2SV> case IOCB_CMD_PREAD : //<S2SV> ret = - EBADF ; //<S2SV> if ( unlikely ( ! ( file -> f_mode & FMODE_READ ) ) ) //<S2SV> break ; //<S2SV> ret = - EFAULT ; //<S2SV> if ( unlikely ( ! access_ok ( VERIFY_WRITE , kiocb -> ki_buf , //<S2SV> kiocb -> ki_left ) ) ) //<S2SV> break ; //<S2SV> ret = aio_setup_single_vector ( READ , file , kiocb ) ; //<S2SV> if ( ret ) //<S2SV> break ; //<S2SV> ret = - EINVAL ; //<S2SV> if ( file -> f_op -> aio_read ) //<S2SV> kiocb -> ki_retry = aio_rw_vect_retry ; //<S2SV> break ; //<S2SV> case IOCB_CMD_PWRITE : //<S2SV> ret = - EBADF ; //<S2SV> if ( unlikely ( ! ( file -> f_mode & FMODE_WRITE ) ) ) //<S2SV> break ; //<S2SV> ret = - EFAULT ; //<S2SV> if ( unlikely ( ! access_ok ( VERIFY_READ , kiocb -> ki_buf , //<S2SV> kiocb -> ki_left ) ) ) //<S2SV> break ; //<S2SV> ret = aio_setup_single_vector ( WRITE , file , kiocb ) ; //<S2SV> if ( ret ) //<S2SV> break ; //<S2SV> ret = - EINVAL ; //<S2SV> if ( file -> f_op -> aio_write ) //<S2SV> kiocb -> ki_retry = aio_rw_vect_retry ; //<S2SV> break ; //<S2SV> case IOCB_CMD_PREADV : //<S2SV> ret = - EBADF ; //<S2SV> if ( unlikely ( ! ( file -> f_mode & FMODE_READ ) ) ) //<S2SV> break ; //<S2SV> ret = aio_setup_vectored_rw ( READ , kiocb , compat ) ; //<S2SV> if ( ret ) //<S2SV> break ; //<S2SV> ret = - EINVAL ; //<S2SV> if ( file -> f_op -> aio_read ) //<S2SV> kiocb -> ki_retry = aio_rw_vect_retry ; //<S2SV> break ; //<S2SV> case IOCB_CMD_PWRITEV : //<S2SV> ret = - EBADF ; //<S2SV> if ( unlikely ( ! ( file -> f_mode & FMODE_WRITE ) ) ) //<S2SV> break ; //<S2SV> ret = aio_setup_vectored_rw ( WRITE , kiocb , compat ) ; //<S2SV> if ( ret ) //<S2SV> break ; //<S2SV> ret = - EINVAL ; //<S2SV> if ( file -> f_op -> aio_write ) //<S2SV> kiocb -> ki_retry = aio_rw_vect_retry ; //<S2SV> break ; //<S2SV> case IOCB_CMD_FDSYNC : //<S2SV> ret = - EINVAL ; //<S2SV> if ( file -> f_op -> aio_fsync ) //<S2SV> kiocb -> ki_retry = aio_fdsync ; //<S2SV> break ; //<S2SV> case IOCB_CMD_FSYNC : //<S2SV> ret = - EINVAL ; //<S2SV> if ( file -> f_op -> aio_fsync ) //<S2SV> kiocb -> ki_retry = aio_fsync ; //<S2SV> break ; //<S2SV> default : //<S2SV> dprintk ( "EINVAL:<S2SV_blank>io_submit:<S2SV_blank>no<S2SV_blank>operation<S2SV_blank>provided\\n" ) ; //<S2SV> ret = - EINVAL ; //<S2SV> } //<S2SV> if ( ! kiocb -> ki_retry ) //<S2SV> return ret ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 