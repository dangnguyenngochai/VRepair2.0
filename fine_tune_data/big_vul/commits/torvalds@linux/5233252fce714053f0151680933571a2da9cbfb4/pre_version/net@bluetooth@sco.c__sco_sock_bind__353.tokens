static int sco_sock_bind ( struct socket * sock , struct sockaddr * addr , //<S2SV> int addr_len ) //<S2SV> { //<S2SV> struct sockaddr_sco * sa = ( struct sockaddr_sco * ) addr ; //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> int err = 0 ; //<S2SV> BT_DBG ( "sk<S2SV_blank>%p<S2SV_blank>%pMR" , sk , & sa -> sco_bdaddr ) ; //<S2SV> if ( ! addr || addr -> sa_family != AF_BLUETOOTH ) //<S2SV> return - EINVAL ; //<S2SV> lock_sock ( sk ) ; //<S2SV> if ( sk -> sk_state != BT_OPEN ) { //<S2SV> err = - EBADFD ; //<S2SV> goto done ; //<S2SV> } //<S2SV> if ( sk -> sk_type != SOCK_SEQPACKET ) { //<S2SV> err = - EINVAL ; //<S2SV> goto done ; //<S2SV> } //<S2SV> bacpy ( & sco_pi ( sk ) -> src , & sa -> sco_bdaddr ) ; //<S2SV> sk -> sk_state = BT_BOUND ; //<S2SV> done : //<S2SV> release_sock ( sk ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 