static int ovl_rename2 ( struct inode * olddir , struct dentry * old , //<S2SV> struct inode * newdir , struct dentry * new , //<S2SV> unsigned int flags ) //<S2SV> { //<S2SV> int err ; //<S2SV> enum ovl_path_type old_type ; //<S2SV> enum ovl_path_type new_type ; //<S2SV> struct dentry * old_upperdir ; //<S2SV> struct dentry * new_upperdir ; //<S2SV> struct dentry * olddentry ; //<S2SV> struct dentry * newdentry ; //<S2SV> struct dentry * trap ; //<S2SV> bool old_opaque ; //<S2SV> bool new_opaque ; //<S2SV> bool new_create = false ; //<S2SV> bool cleanup_whiteout = false ; //<S2SV> bool overwrite = ! ( flags & RENAME_EXCHANGE ) ; //<S2SV> bool is_dir = d_is_dir ( old ) ; //<S2SV> bool new_is_dir = false ; //<S2SV> struct dentry * opaquedir = NULL ; //<S2SV> const struct cred * old_cred = NULL ; //<S2SV> struct cred * override_cred = NULL ; //<S2SV> err = - EINVAL ; //<S2SV> if ( flags & ~ ( RENAME_EXCHANGE | RENAME_NOREPLACE ) ) //<S2SV> goto out ; //<S2SV> flags &= ~ RENAME_NOREPLACE ; //<S2SV> err = ovl_check_sticky ( old ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> old_type = ovl_path_type ( old ) ; //<S2SV> err = - EXDEV ; //<S2SV> if ( OVL_TYPE_MERGE_OR_LOWER ( old_type ) && is_dir ) //<S2SV> goto out ; //<S2SV> if ( new -> d_inode ) { //<S2SV> err = ovl_check_sticky ( new ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> if ( d_is_dir ( new ) ) //<S2SV> new_is_dir = true ; //<S2SV> new_type = ovl_path_type ( new ) ; //<S2SV> err = - EXDEV ; //<S2SV> if ( ! overwrite && OVL_TYPE_MERGE_OR_LOWER ( new_type ) && new_is_dir ) //<S2SV> goto out ; //<S2SV> err = 0 ; //<S2SV> if ( ! OVL_TYPE_UPPER ( new_type ) && ! OVL_TYPE_UPPER ( old_type ) ) { //<S2SV> if ( ovl_dentry_lower ( old ) -> d_inode == //<S2SV> ovl_dentry_lower ( new ) -> d_inode ) //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( OVL_TYPE_UPPER ( new_type ) && OVL_TYPE_UPPER ( old_type ) ) { //<S2SV> if ( ovl_dentry_upper ( old ) -> d_inode == //<S2SV> ovl_dentry_upper ( new ) -> d_inode ) //<S2SV> goto out ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( ovl_dentry_is_opaque ( new ) ) //<S2SV> new_type = __OVL_PATH_UPPER ; //<S2SV> else //<S2SV> new_type = __OVL_PATH_UPPER | __OVL_PATH_PURE ; //<S2SV> } //<S2SV> err = ovl_want_write ( old ) ; //<S2SV> if ( err ) //<S2SV> goto out ; //<S2SV> err = ovl_copy_up ( old ) ; //<S2SV> if ( err ) //<S2SV> goto out_drop_write ; //<S2SV> err = ovl_copy_up ( new -> d_parent ) ; //<S2SV> if ( err ) //<S2SV> goto out_drop_write ; //<S2SV> if ( ! overwrite ) { //<S2SV> err = ovl_copy_up ( new ) ; //<S2SV> if ( err ) //<S2SV> goto out_drop_write ; //<S2SV> } //<S2SV> old_opaque = ! OVL_TYPE_PURE_UPPER ( old_type ) ; //<S2SV> new_opaque = ! OVL_TYPE_PURE_UPPER ( new_type ) ; //<S2SV> if ( old_opaque || new_opaque ) { //<S2SV> err = - ENOMEM ; //<S2SV> override_cred = prepare_creds ( ) ; //<S2SV> if ( ! override_cred ) //<S2SV> goto out_drop_write ; //<S2SV> cap_raise ( override_cred -> cap_effective , CAP_SYS_ADMIN ) ; //<S2SV> cap_raise ( override_cred -> cap_effective , CAP_DAC_OVERRIDE ) ; //<S2SV> cap_raise ( override_cred -> cap_effective , CAP_FOWNER ) ; //<S2SV> cap_raise ( override_cred -> cap_effective , CAP_FSETID ) ; //<S2SV> cap_raise ( override_cred -> cap_effective , CAP_CHOWN ) ; //<S2SV> old_cred = override_creds ( override_cred ) ; //<S2SV> } //<S2SV> if ( overwrite && OVL_TYPE_MERGE_OR_LOWER ( new_type ) && new_is_dir ) { //<S2SV> opaquedir = ovl_check_empty_and_clear ( new ) ; //<S2SV> err = PTR_ERR ( opaquedir ) ; //<S2SV> if ( IS_ERR ( opaquedir ) ) { //<S2SV> opaquedir = NULL ; //<S2SV> goto out_revert_creds ; //<S2SV> } //<S2SV> } //<S2SV> if ( overwrite ) { //<S2SV> if ( old_opaque ) { //<S2SV> if ( new -> d_inode || ! new_opaque ) { //<S2SV> flags |= RENAME_WHITEOUT ; //<S2SV> } else { //<S2SV> flags |= RENAME_EXCHANGE ; //<S2SV> } //<S2SV> } else if ( is_dir && ! new -> d_inode && new_opaque ) { //<S2SV> flags |= RENAME_EXCHANGE ; //<S2SV> cleanup_whiteout = true ; //<S2SV> } //<S2SV> } //<S2SV> old_upperdir = ovl_dentry_upper ( old -> d_parent ) ; //<S2SV> new_upperdir = ovl_dentry_upper ( new -> d_parent ) ; //<S2SV> trap = lock_rename ( new_upperdir , old_upperdir ) ; //<S2SV> olddentry = lookup_one_len ( old -> d_name . name , old_upperdir , //<S2SV> old -> d_name . len ) ; //<S2SV> err = PTR_ERR ( olddentry ) ; //<S2SV> if ( IS_ERR ( olddentry ) ) //<S2SV> goto out_unlock ; //<S2SV> err = - ESTALE ; //<S2SV> if ( olddentry != ovl_dentry_upper ( old ) ) //<S2SV> goto out_dput_old ; //<S2SV> newdentry = lookup_one_len ( new -> d_name . name , new_upperdir , //<S2SV> new -> d_name . len ) ; //<S2SV> err = PTR_ERR ( newdentry ) ; //<S2SV> if ( IS_ERR ( newdentry ) ) //<S2SV> goto out_dput_old ; //<S2SV> err = - ESTALE ; //<S2SV> if ( ovl_dentry_upper ( new ) ) { //<S2SV> if ( opaquedir ) { //<S2SV> if ( newdentry != opaquedir ) //<S2SV> goto out_dput ; //<S2SV> } else { //<S2SV> if ( newdentry != ovl_dentry_upper ( new ) ) //<S2SV> goto out_dput ; //<S2SV> } //<S2SV> } else { //<S2SV> new_create = true ; //<S2SV> if ( ! d_is_negative ( newdentry ) && //<S2SV> ( ! new_opaque || ! ovl_is_whiteout ( newdentry ) ) ) //<S2SV> goto out_dput ; //<S2SV> } //<S2SV> if ( olddentry == trap ) //<S2SV> goto out_dput ; //<S2SV> if ( newdentry == trap ) //<S2SV> goto out_dput ; //<S2SV> if ( is_dir && ! old_opaque && new_opaque ) { //<S2SV> err = ovl_set_opaque ( olddentry ) ; //<S2SV> if ( err ) //<S2SV> goto out_dput ; //<S2SV> } //<S2SV> if ( ! overwrite && new_is_dir && old_opaque && ! new_opaque ) { //<S2SV> err = ovl_set_opaque ( newdentry ) ; //<S2SV> if ( err ) //<S2SV> goto out_dput ; //<S2SV> } //<S2SV> if ( old_opaque || new_opaque ) { //<S2SV> err = ovl_do_rename ( old_upperdir -> d_inode , olddentry , //<S2SV> new_upperdir -> d_inode , newdentry , //<S2SV> flags ) ; //<S2SV> } else { //<S2SV> BUG_ON ( flags & ~ RENAME_EXCHANGE ) ; //<S2SV> err = vfs_rename ( old_upperdir -> d_inode , olddentry , //<S2SV> new_upperdir -> d_inode , newdentry , //<S2SV> NULL , flags ) ; //<S2SV> } //<S2SV> if ( err ) { //<S2SV> if ( is_dir && ! old_opaque && new_opaque ) //<S2SV> ovl_remove_opaque ( olddentry ) ; //<S2SV> if ( ! overwrite && new_is_dir && old_opaque && ! new_opaque ) //<S2SV> ovl_remove_opaque ( newdentry ) ; //<S2SV> goto out_dput ; //<S2SV> } //<S2SV> if ( is_dir && old_opaque && ! new_opaque ) //<S2SV> ovl_remove_opaque ( olddentry ) ; //<S2SV> if ( ! overwrite && new_is_dir && ! old_opaque && new_opaque ) //<S2SV> ovl_remove_opaque ( newdentry ) ; //<S2SV> if ( old_opaque != new_opaque ) { //<S2SV> ovl_dentry_set_opaque ( old , new_opaque ) ; //<S2SV> if ( ! overwrite ) //<S2SV> ovl_dentry_set_opaque ( new , old_opaque ) ; //<S2SV> } //<S2SV> if ( cleanup_whiteout ) //<S2SV> ovl_cleanup ( old_upperdir -> d_inode , newdentry ) ; //<S2SV> ovl_dentry_version_inc ( old -> d_parent ) ; //<S2SV> ovl_dentry_version_inc ( new -> d_parent ) ; //<S2SV> out_dput : //<S2SV> dput ( newdentry ) ; //<S2SV> out_dput_old : //<S2SV> dput ( olddentry ) ; //<S2SV> out_unlock : //<S2SV> unlock_rename ( new_upperdir , old_upperdir ) ; //<S2SV> out_revert_creds : //<S2SV> if ( old_opaque || new_opaque ) { //<S2SV> revert_creds ( old_cred ) ; //<S2SV> put_cred ( override_cred ) ; //<S2SV> } //<S2SV> out_drop_write : //<S2SV> ovl_drop_write ( old ) ; //<S2SV> out : //<S2SV> dput ( opaquedir ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 