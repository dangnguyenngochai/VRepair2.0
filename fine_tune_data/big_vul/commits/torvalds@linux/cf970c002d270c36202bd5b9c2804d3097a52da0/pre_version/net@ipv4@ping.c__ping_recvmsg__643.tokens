int ping_recvmsg ( struct kiocb * iocb , struct sock * sk , struct msghdr * msg , //<S2SV> size_t len , int noblock , int flags , int * addr_len ) //<S2SV> { //<S2SV> struct inet_sock * isk = inet_sk ( sk ) ; //<S2SV> int family = sk -> sk_family ; //<S2SV> struct sk_buff * skb ; //<S2SV> int copied , err ; //<S2SV> pr_debug ( "ping_recvmsg(sk=%p,sk->num=%u)\\n" , isk , isk -> inet_num ) ; //<S2SV> err = - EOPNOTSUPP ; //<S2SV> if ( flags & MSG_OOB ) //<S2SV> goto out ; //<S2SV> if ( flags & MSG_ERRQUEUE ) { //<S2SV> if ( family == AF_INET ) { //<S2SV> return ip_recv_error ( sk , msg , len ) ; //<S2SV> # if IS_ENABLED ( CONFIG_IPV6 ) //<S2SV> } else if ( family == AF_INET6 ) { //<S2SV> return pingv6_ops . ipv6_recv_error ( sk , msg , len ) ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> skb = skb_recv_datagram ( sk , flags , noblock , & err ) ; //<S2SV> if ( ! skb ) //<S2SV> goto out ; //<S2SV> copied = skb -> len ; //<S2SV> if ( copied > len ) { //<S2SV> msg -> msg_flags |= MSG_TRUNC ; //<S2SV> copied = len ; //<S2SV> } //<S2SV> err = skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , copied ) ; //<S2SV> if ( err ) //<S2SV> goto done ; //<S2SV> sock_recv_timestamp ( msg , sk , skb ) ; //<S2SV> if ( family == AF_INET ) { //<S2SV> struct sockaddr_in * sin = ( struct sockaddr_in * ) msg -> msg_name ; //<S2SV> sin -> sin_family = AF_INET ; //<S2SV> sin -> sin_port = 0 ; //<S2SV> sin -> sin_addr . s_addr = ip_hdr ( skb ) -> saddr ; //<S2SV> memset ( sin -> sin_zero , 0 , sizeof ( sin -> sin_zero ) ) ; //<S2SV> * addr_len = sizeof ( * sin ) ; //<S2SV> if ( isk -> cmsg_flags ) //<S2SV> ip_cmsg_recv ( msg , skb ) ; //<S2SV> # if IS_ENABLED ( CONFIG_IPV6 ) //<S2SV> } else if ( family == AF_INET6 ) { //<S2SV> struct ipv6_pinfo * np = inet6_sk ( sk ) ; //<S2SV> struct ipv6hdr * ip6 = ipv6_hdr ( skb ) ; //<S2SV> struct sockaddr_in6 * sin6 = //<S2SV> ( struct sockaddr_in6 * ) msg -> msg_name ; //<S2SV> sin6 -> sin6_family = AF_INET6 ; //<S2SV> sin6 -> sin6_port = 0 ; //<S2SV> sin6 -> sin6_addr = ip6 -> saddr ; //<S2SV> sin6 -> sin6_flowinfo = 0 ; //<S2SV> if ( np -> sndflow ) //<S2SV> sin6 -> sin6_flowinfo = ip6_flowinfo ( ip6 ) ; //<S2SV> sin6 -> sin6_scope_id = ipv6_iface_scope_id ( & sin6 -> sin6_addr , //<S2SV> IP6CB ( skb ) -> iif ) ; //<S2SV> * addr_len = sizeof ( * sin6 ) ; //<S2SV> if ( inet6_sk ( sk ) -> rxopt . all ) //<S2SV> pingv6_ops . ip6_datagram_recv_ctl ( sk , msg , skb ) ; //<S2SV> # endif //<S2SV> } else { //<S2SV> BUG ( ) ; //<S2SV> } //<S2SV> err = copied ; //<S2SV> done : //<S2SV> skb_free_datagram ( sk , skb ) ; //<S2SV> out : //<S2SV> pr_debug ( "ping_recvmsg<S2SV_blank>-><S2SV_blank>%d\\n" , err ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 