static void //<S2SV> call_bind_status ( struct rpc_task * task ) //<S2SV> { //<S2SV> int status = - EIO ; //<S2SV> if ( task -> tk_status >= 0 ) { //<S2SV> dprint_status ( task ) ; //<S2SV> task -> tk_status = 0 ; //<S2SV> task -> tk_action = call_connect ; //<S2SV> return ; //<S2SV> } //<S2SV> switch ( task -> tk_status ) { //<S2SV> case - ENOMEM : //<S2SV> dprintk ( "RPC:<S2SV_blank>%5u<S2SV_blank>rpcbind<S2SV_blank>out<S2SV_blank>of<S2SV_blank>memory\\n" , task -> tk_pid ) ; //<S2SV> rpc_delay ( task , HZ >> 2 ) ; //<S2SV> goto retry_timeout ; //<S2SV> case - EACCES : //<S2SV> dprintk ( "RPC:<S2SV_blank>%5u<S2SV_blank>remote<S2SV_blank>rpcbind:<S2SV_blank>RPC<S2SV_blank>program/version<S2SV_blank>" //<S2SV> "unavailable\\n" , task -> tk_pid ) ; //<S2SV> if ( task -> tk_msg . rpc_proc -> p_proc == 0 ) { //<S2SV> status = - EOPNOTSUPP ; //<S2SV> break ; //<S2SV> } //<S2SV> rpc_delay ( task , 3 * HZ ) ; //<S2SV> goto retry_timeout ; //<S2SV> case - ETIMEDOUT : //<S2SV> dprintk ( "RPC:<S2SV_blank>%5u<S2SV_blank>rpcbind<S2SV_blank>request<S2SV_blank>timed<S2SV_blank>out\\n" , //<S2SV> task -> tk_pid ) ; //<S2SV> goto retry_timeout ; //<S2SV> case - EPFNOSUPPORT : //<S2SV> dprintk ( "RPC:<S2SV_blank>%5u<S2SV_blank>unrecognized<S2SV_blank>remote<S2SV_blank>rpcbind<S2SV_blank>service\\n" , //<S2SV> task -> tk_pid ) ; //<S2SV> break ; //<S2SV> case - EPROTONOSUPPORT : //<S2SV> dprintk ( "RPC:<S2SV_blank>%5u<S2SV_blank>remote<S2SV_blank>rpcbind<S2SV_blank>version<S2SV_blank>unavailable,<S2SV_blank>retrying\\n" , //<S2SV> task -> tk_pid ) ; //<S2SV> task -> tk_status = 0 ; //<S2SV> task -> tk_action = call_bind ; //<S2SV> return ; //<S2SV> case - ECONNREFUSED : //<S2SV> case - ECONNRESET : //<S2SV> case - ENOTCONN : //<S2SV> case - EHOSTDOWN : //<S2SV> case - EHOSTUNREACH : //<S2SV> case - ENETUNREACH : //<S2SV> case - EPIPE : //<S2SV> dprintk ( "RPC:<S2SV_blank>%5u<S2SV_blank>remote<S2SV_blank>rpcbind<S2SV_blank>unreachable:<S2SV_blank>%d\\n" , //<S2SV> task -> tk_pid , task -> tk_status ) ; //<S2SV> if ( ! RPC_IS_SOFTCONN ( task ) ) { //<S2SV> rpc_delay ( task , 5 * HZ ) ; //<S2SV> goto retry_timeout ; //<S2SV> } //<S2SV> status = task -> tk_status ; //<S2SV> break ; //<S2SV> default : //<S2SV> dprintk ( "RPC:<S2SV_blank>%5u<S2SV_blank>unrecognized<S2SV_blank>rpcbind<S2SV_blank>error<S2SV_blank>(%d)\\n" , //<S2SV> task -> tk_pid , - task -> tk_status ) ; //<S2SV> } //<S2SV> rpc_exit ( task , status ) ; //<S2SV> return ; //<S2SV> retry_timeout : //<S2SV> task -> tk_action = call_timeout ; //<S2SV> } //<S2SV> 