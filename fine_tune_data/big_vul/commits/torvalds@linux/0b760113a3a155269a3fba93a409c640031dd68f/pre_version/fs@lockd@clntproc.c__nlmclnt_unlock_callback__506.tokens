static void nlmclnt_unlock_callback ( struct rpc_task * task , void * data ) //<S2SV> { //<S2SV> struct nlm_rqst * req = data ; //<S2SV> u32 status = ntohl ( req -> a_res . status ) ; //<S2SV> if ( RPC_ASSASSINATED ( task ) ) //<S2SV> goto die ; //<S2SV> if ( task -> tk_status < 0 ) { //<S2SV> dprintk ( "lockd:<S2SV_blank>unlock<S2SV_blank>failed<S2SV_blank>(err<S2SV_blank>=<S2SV_blank>%d)\\n" , - task -> tk_status ) ; //<S2SV> goto retry_rebind ; //<S2SV> } //<S2SV> if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { //<S2SV> rpc_delay ( task , NLMCLNT_GRACE_WAIT ) ; //<S2SV> goto retry_unlock ; //<S2SV> } //<S2SV> if ( status != NLM_LCK_GRANTED ) //<S2SV> printk ( KERN_WARNING "lockd:<S2SV_blank>unexpected<S2SV_blank>unlock<S2SV_blank>status:<S2SV_blank>%d\\n" , status ) ; //<S2SV> die : //<S2SV> return ; //<S2SV> retry_rebind : //<S2SV> nlm_rebind_host ( req -> a_host ) ; //<S2SV> retry_unlock : //<S2SV> rpc_restart_call ( task ) ; //<S2SV> } //<S2SV> 