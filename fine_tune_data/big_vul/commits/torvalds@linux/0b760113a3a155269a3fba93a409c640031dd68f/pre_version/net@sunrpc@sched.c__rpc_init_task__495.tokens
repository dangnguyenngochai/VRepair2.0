static void rpc_init_task ( struct rpc_task * task , const struct rpc_task_setup * task_setup_data ) //<S2SV> { //<S2SV> memset ( task , 0 , sizeof ( * task ) ) ; //<S2SV> atomic_set ( & task -> tk_count , 1 ) ; //<S2SV> task -> tk_flags = task_setup_data -> flags ; //<S2SV> task -> tk_ops = task_setup_data -> callback_ops ; //<S2SV> task -> tk_calldata = task_setup_data -> callback_data ; //<S2SV> INIT_LIST_HEAD ( & task -> tk_task ) ; //<S2SV> task -> tk_garb_retry = 2 ; //<S2SV> task -> tk_cred_retry = 2 ; //<S2SV> task -> tk_priority = task_setup_data -> priority - RPC_PRIORITY_LOW ; //<S2SV> task -> tk_owner = current -> tgid ; //<S2SV> task -> tk_workqueue = task_setup_data -> workqueue ; //<S2SV> if ( task -> tk_ops -> rpc_call_prepare != NULL ) //<S2SV> task -> tk_action = rpc_prepare_task ; //<S2SV> task -> tk_start = ktime_get ( ) ; //<S2SV> dprintk ( "RPC:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>new<S2SV_blank>task<S2SV_blank>initialized,<S2SV_blank>procpid<S2SV_blank>%u\\n" , //<S2SV> task_pid_nr ( current ) ) ; //<S2SV> } //<S2SV> 