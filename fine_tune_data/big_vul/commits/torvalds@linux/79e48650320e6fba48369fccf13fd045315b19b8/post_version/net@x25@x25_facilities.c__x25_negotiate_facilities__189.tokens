int x25_negotiate_facilities ( struct sk_buff * skb , struct sock * sk , //<S2SV> struct x25_facilities * new , struct x25_dte_facilities * dte ) //<S2SV> { //<S2SV> struct x25_sock * x25 = x25_sk ( sk ) ; //<S2SV> struct x25_facilities * ours = & x25 -> facilities ; //<S2SV> struct x25_facilities theirs ; //<S2SV> int len ; //<S2SV> memset ( & theirs , 0 , sizeof ( theirs ) ) ; //<S2SV> memcpy ( new , ours , sizeof ( * new ) ) ; //<S2SV> memset ( dte , 0 , sizeof ( * dte ) ) ; //<S2SV> len = x25_parse_facilities ( skb , & theirs , dte , & x25 -> vc_facil_mask ) ; //<S2SV> if ( len < 0 ) //<S2SV> return len ; //<S2SV> if ( ( theirs . reverse & 0x01 ) && ( ours -> reverse & 0x01 ) ) { //<S2SV> SOCK_DEBUG ( sk , "X.25:<S2SV_blank>rejecting<S2SV_blank>reverse<S2SV_blank>charging<S2SV_blank>request\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> new -> reverse = theirs . reverse ; //<S2SV> if ( theirs . throughput ) { //<S2SV> int theirs_in = theirs . throughput & 0x0f ; //<S2SV> int theirs_out = theirs . throughput & 0xf0 ; //<S2SV> int ours_in = ours -> throughput & 0x0f ; //<S2SV> int ours_out = ours -> throughput & 0xf0 ; //<S2SV> if ( ! ours_in || theirs_in < ours_in ) { //<S2SV> SOCK_DEBUG ( sk , "X.25:<S2SV_blank>inbound<S2SV_blank>throughput<S2SV_blank>negotiated\\n" ) ; //<S2SV> new -> throughput = ( new -> throughput & 0xf0 ) | theirs_in ; //<S2SV> } //<S2SV> if ( ! ours_out || theirs_out < ours_out ) { //<S2SV> SOCK_DEBUG ( sk , //<S2SV> "X.25:<S2SV_blank>outbound<S2SV_blank>throughput<S2SV_blank>negotiated\\n" ) ; //<S2SV> new -> throughput = ( new -> throughput & 0x0f ) | theirs_out ; //<S2SV> } //<S2SV> } //<S2SV> if ( theirs . pacsize_in && theirs . pacsize_out ) { //<S2SV> if ( theirs . pacsize_in < ours -> pacsize_in ) { //<S2SV> SOCK_DEBUG ( sk , "X.25:<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>inwards<S2SV_blank>negotiated<S2SV_blank>down\\n" ) ; //<S2SV> new -> pacsize_in = theirs . pacsize_in ; //<S2SV> } //<S2SV> if ( theirs . pacsize_out < ours -> pacsize_out ) { //<S2SV> SOCK_DEBUG ( sk , "X.25:<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>outwards<S2SV_blank>negotiated<S2SV_blank>down\\n" ) ; //<S2SV> new -> pacsize_out = theirs . pacsize_out ; //<S2SV> } //<S2SV> } //<S2SV> if ( theirs . winsize_in && theirs . winsize_out ) { //<S2SV> if ( theirs . winsize_in < ours -> winsize_in ) { //<S2SV> SOCK_DEBUG ( sk , "X.25:<S2SV_blank>window<S2SV_blank>size<S2SV_blank>inwards<S2SV_blank>negotiated<S2SV_blank>down\\n" ) ; //<S2SV> new -> winsize_in = theirs . winsize_in ; //<S2SV> } //<S2SV> if ( theirs . winsize_out < ours -> winsize_out ) { //<S2SV> SOCK_DEBUG ( sk , "X.25:<S2SV_blank>window<S2SV_blank>size<S2SV_blank>outwards<S2SV_blank>negotiated<S2SV_blank>down\\n" ) ; //<S2SV> new -> winsize_out = theirs . winsize_out ; //<S2SV> } //<S2SV> } //<S2SV> return len ; //<S2SV> } //<S2SV> 