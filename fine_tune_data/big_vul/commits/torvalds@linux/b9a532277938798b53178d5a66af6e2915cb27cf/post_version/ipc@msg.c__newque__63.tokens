static int newque ( struct ipc_namespace * ns , struct ipc_params * params ) //<S2SV> { //<S2SV> struct msg_queue * msq ; //<S2SV> int id , retval ; //<S2SV> key_t key = params -> key ; //<S2SV> int msgflg = params -> flg ; //<S2SV> msq = ipc_rcu_alloc ( sizeof ( * msq ) ) ; //<S2SV> if ( ! msq ) //<S2SV> return - ENOMEM ; //<S2SV> msq -> q_perm . mode = msgflg & S_IRWXUGO ; //<S2SV> msq -> q_perm . key = key ; //<S2SV> msq -> q_perm . security = NULL ; //<S2SV> retval = security_msg_queue_alloc ( msq ) ; //<S2SV> if ( retval ) { //<S2SV> ipc_rcu_putref ( msq , ipc_rcu_free ) ; //<S2SV> return retval ; //<S2SV> } //<S2SV> msq -> q_stime = msq -> q_rtime = 0 ; //<S2SV> msq -> q_ctime = get_seconds ( ) ; //<S2SV> msq -> q_cbytes = msq -> q_qnum = 0 ; //<S2SV> msq -> q_qbytes = ns -> msg_ctlmnb ; //<S2SV> msq -> q_lspid = msq -> q_lrpid = 0 ; //<S2SV> INIT_LIST_HEAD ( & msq -> q_messages ) ; //<S2SV> INIT_LIST_HEAD ( & msq -> q_receivers ) ; //<S2SV> INIT_LIST_HEAD ( & msq -> q_senders ) ; //<S2SV> id = ipc_addid ( & msg_ids ( ns ) , & msq -> q_perm , ns -> msg_ctlmni ) ; //<S2SV> if ( id < 0 ) { //<S2SV> ipc_rcu_putref ( msq , msg_rcu_free ) ; //<S2SV> return id ; //<S2SV> } //<S2SV> ipc_unlock_object ( & msq -> q_perm ) ; //<S2SV> rcu_read_unlock ( ) ; //<S2SV> return msq -> q_perm . id ; //<S2SV> } //<S2SV> 