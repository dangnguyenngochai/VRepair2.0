struct sctp_chunk * sctp_inq_pop ( struct sctp_inq * queue ) //<S2SV> { //<S2SV> struct sctp_chunk * chunk ; //<S2SV> sctp_chunkhdr_t * ch = NULL ; //<S2SV> if ( ( chunk = queue -> in_progress ) ) { //<S2SV> if ( chunk -> singleton || //<S2SV> chunk -> end_of_packet || //<S2SV> chunk -> pdiscard ) { //<S2SV> sctp_chunk_free ( chunk ) ; //<S2SV> chunk = queue -> in_progress = NULL ; //<S2SV> } else { //<S2SV> ch = ( sctp_chunkhdr_t * ) chunk -> chunk_end ; //<S2SV> skb_pull ( chunk -> skb , //<S2SV> chunk -> chunk_end - chunk -> skb -> data ) ; //<S2SV> if ( skb_headlen ( chunk -> skb ) < sizeof ( sctp_chunkhdr_t ) ) { //<S2SV> sctp_chunk_free ( chunk ) ; //<S2SV> chunk = queue -> in_progress = NULL ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ! chunk ) { //<S2SV> struct list_head * entry ; //<S2SV> if ( list_empty ( & queue -> in_chunk_list ) ) //<S2SV> return NULL ; //<S2SV> entry = queue -> in_chunk_list . next ; //<S2SV> chunk = queue -> in_progress = //<S2SV> list_entry ( entry , struct sctp_chunk , list ) ; //<S2SV> list_del_init ( entry ) ; //<S2SV> chunk -> singleton = 1 ; //<S2SV> ch = ( sctp_chunkhdr_t * ) chunk -> skb -> data ; //<S2SV> chunk -> data_accepted = 0 ; //<S2SV> } //<S2SV> chunk -> chunk_hdr = ch ; //<S2SV> chunk -> chunk_end = ( ( __u8 * ) ch ) + WORD_ROUND ( ntohs ( ch -> length ) ) ; //<S2SV> if ( unlikely ( skb_is_nonlinear ( chunk -> skb ) ) ) { //<S2SV> if ( chunk -> chunk_end > skb_tail_pointer ( chunk -> skb ) ) //<S2SV> chunk -> chunk_end = skb_tail_pointer ( chunk -> skb ) ; //<S2SV> } //<S2SV> skb_pull ( chunk -> skb , sizeof ( sctp_chunkhdr_t ) ) ; //<S2SV> chunk -> subh . v = NULL ; //<S2SV> if ( chunk -> chunk_end < skb_tail_pointer ( chunk -> skb ) ) { //<S2SV> chunk -> singleton = 0 ; //<S2SV> } else if ( chunk -> chunk_end > skb_tail_pointer ( chunk -> skb ) ) { //<S2SV> sctp_chunk_free ( chunk ) ; //<S2SV> chunk = queue -> in_progress = NULL ; //<S2SV> return NULL ; //<S2SV> } else { //<S2SV> chunk -> end_of_packet = 1 ; //<S2SV> } //<S2SV> pr_debug ( "+++sctp_inq_pop+++<S2SV_blank>chunk:%p[%s],<S2SV_blank>length:%d,<S2SV_blank>skb->len:%d\\n" , //<S2SV> chunk , sctp_cname ( SCTP_ST_CHUNK ( chunk -> chunk_hdr -> type ) ) , //<S2SV> ntohs ( chunk -> chunk_hdr -> length ) , chunk -> skb -> len ) ; //<S2SV> return chunk ; //<S2SV> } //<S2SV> 