int ceph_set_acl ( struct inode * inode , struct posix_acl * acl , int type ) //<S2SV> { //<S2SV> int ret = 0 , size = 0 ; //<S2SV> const char * name = NULL ; //<S2SV> char * value = NULL ; //<S2SV> struct iattr newattrs ; //<S2SV> umode_t new_mode = inode -> i_mode , old_mode = inode -> i_mode ; //<S2SV> switch ( type ) { //<S2SV> case ACL_TYPE_ACCESS : //<S2SV> name = XATTR_NAME_POSIX_ACL_ACCESS ; //<S2SV> if ( acl ) { //<S2SV> ret = posix_acl_update_mode ( inode , & new_mode , & acl ) ; //<S2SV> if ( ret ) //<S2SV> goto out ; //<S2SV> } //<S2SV> break ; //<S2SV> case ACL_TYPE_DEFAULT : //<S2SV> if ( ! S_ISDIR ( inode -> i_mode ) ) { //<S2SV> ret = acl ? - EINVAL : 0 ; //<S2SV> goto out ; //<S2SV> } //<S2SV> name = XATTR_NAME_POSIX_ACL_DEFAULT ; //<S2SV> break ; //<S2SV> default : //<S2SV> ret = - EINVAL ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( acl ) { //<S2SV> size = posix_acl_xattr_size ( acl -> a_count ) ; //<S2SV> value = kmalloc ( size , GFP_NOFS ) ; //<S2SV> if ( ! value ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto out ; //<S2SV> } //<S2SV> ret = posix_acl_to_xattr ( & init_user_ns , acl , value , size ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto out_free ; //<S2SV> } //<S2SV> if ( new_mode != old_mode ) { //<S2SV> newattrs . ia_mode = new_mode ; //<S2SV> newattrs . ia_valid = ATTR_MODE ; //<S2SV> ret = __ceph_setattr ( inode , & newattrs ) ; //<S2SV> if ( ret ) //<S2SV> goto out_free ; //<S2SV> } //<S2SV> ret = __ceph_setxattr ( inode , name , value , size , 0 ) ; //<S2SV> if ( ret ) { //<S2SV> if ( new_mode != old_mode ) { //<S2SV> newattrs . ia_mode = old_mode ; //<S2SV> newattrs . ia_valid = ATTR_MODE ; //<S2SV> __ceph_setattr ( inode , & newattrs ) ; //<S2SV> } //<S2SV> goto out_free ; //<S2SV> } //<S2SV> ceph_set_cached_acl ( inode , type , acl ) ; //<S2SV> out_free : //<S2SV> kfree ( value ) ; //<S2SV> out : //<S2SV> return ret ; //<S2SV> } //<S2SV> 