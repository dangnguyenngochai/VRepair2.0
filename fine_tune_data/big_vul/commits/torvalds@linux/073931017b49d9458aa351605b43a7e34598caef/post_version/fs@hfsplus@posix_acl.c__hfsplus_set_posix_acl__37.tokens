int hfsplus_set_posix_acl ( struct inode * inode , struct posix_acl * acl , //<S2SV> int type ) //<S2SV> { //<S2SV> int err ; //<S2SV> char * xattr_name ; //<S2SV> size_t size = 0 ; //<S2SV> char * value = NULL ; //<S2SV> hfs_dbg ( ACL_MOD , "[%s]:<S2SV_blank>ino<S2SV_blank>%lu\\n" , __func__ , inode -> i_ino ) ; //<S2SV> switch ( type ) { //<S2SV> case ACL_TYPE_ACCESS : //<S2SV> xattr_name = XATTR_NAME_POSIX_ACL_ACCESS ; //<S2SV> if ( acl ) { //<S2SV> err = posix_acl_update_mode ( inode , & inode -> i_mode , & acl ) ; //<S2SV> if ( err ) //<S2SV> return err ; //<S2SV> } //<S2SV> err = 0 ; //<S2SV> break ; //<S2SV> case ACL_TYPE_DEFAULT : //<S2SV> xattr_name = XATTR_NAME_POSIX_ACL_DEFAULT ; //<S2SV> if ( ! S_ISDIR ( inode -> i_mode ) ) //<S2SV> return acl ? - EACCES : 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( acl ) { //<S2SV> size = posix_acl_xattr_size ( acl -> a_count ) ; //<S2SV> if ( unlikely ( size > HFSPLUS_MAX_INLINE_DATA_SIZE ) ) //<S2SV> return - ENOMEM ; //<S2SV> value = ( char * ) hfsplus_alloc_attr_entry ( ) ; //<S2SV> if ( unlikely ( ! value ) ) //<S2SV> return - ENOMEM ; //<S2SV> err = posix_acl_to_xattr ( & init_user_ns , acl , value , size ) ; //<S2SV> if ( unlikely ( err < 0 ) ) //<S2SV> goto end_set_acl ; //<S2SV> } //<S2SV> err = __hfsplus_setxattr ( inode , xattr_name , value , size , 0 ) ; //<S2SV> end_set_acl : //<S2SV> hfsplus_destroy_attr_entry ( ( hfsplus_attr_entry * ) value ) ; //<S2SV> if ( ! err ) //<S2SV> set_cached_acl ( inode , type , acl ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 