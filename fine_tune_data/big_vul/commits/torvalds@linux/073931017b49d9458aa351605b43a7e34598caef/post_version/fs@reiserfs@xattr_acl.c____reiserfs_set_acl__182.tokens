static int //<S2SV> __reiserfs_set_acl ( struct reiserfs_transaction_handle * th , struct inode * inode , //<S2SV> int type , struct posix_acl * acl ) //<S2SV> { //<S2SV> char * name ; //<S2SV> void * value = NULL ; //<S2SV> size_t size = 0 ; //<S2SV> int error ; //<S2SV> switch ( type ) { //<S2SV> case ACL_TYPE_ACCESS : //<S2SV> name = XATTR_NAME_POSIX_ACL_ACCESS ; //<S2SV> if ( acl ) { //<S2SV> error = posix_acl_update_mode ( inode , & inode -> i_mode , & acl ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> } //<S2SV> break ; //<S2SV> case ACL_TYPE_DEFAULT : //<S2SV> name = XATTR_NAME_POSIX_ACL_DEFAULT ; //<S2SV> if ( ! S_ISDIR ( inode -> i_mode ) ) //<S2SV> return acl ? - EACCES : 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( acl ) { //<S2SV> value = reiserfs_posix_acl_to_disk ( acl , & size ) ; //<S2SV> if ( IS_ERR ( value ) ) //<S2SV> return ( int ) PTR_ERR ( value ) ; //<S2SV> } //<S2SV> error = reiserfs_xattr_set_handle ( th , inode , name , value , size , 0 ) ; //<S2SV> if ( error == - ENODATA ) { //<S2SV> error = 0 ; //<S2SV> if ( type == ACL_TYPE_ACCESS ) { //<S2SV> inode -> i_ctime = CURRENT_TIME_SEC ; //<S2SV> mark_inode_dirty ( inode ) ; //<S2SV> } //<S2SV> } //<S2SV> kfree ( value ) ; //<S2SV> if ( ! error ) //<S2SV> set_cached_acl ( inode , type , acl ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 