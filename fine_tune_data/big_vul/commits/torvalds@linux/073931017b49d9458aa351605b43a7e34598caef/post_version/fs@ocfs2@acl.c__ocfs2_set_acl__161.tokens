int ocfs2_set_acl ( handle_t * handle , //<S2SV> struct inode * inode , //<S2SV> struct buffer_head * di_bh , //<S2SV> int type , //<S2SV> struct posix_acl * acl , //<S2SV> struct ocfs2_alloc_context * meta_ac , //<S2SV> struct ocfs2_alloc_context * data_ac ) //<S2SV> { //<S2SV> int name_index ; //<S2SV> void * value = NULL ; //<S2SV> size_t size = 0 ; //<S2SV> int ret ; //<S2SV> if ( S_ISLNK ( inode -> i_mode ) ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> switch ( type ) { //<S2SV> case ACL_TYPE_ACCESS : //<S2SV> name_index = OCFS2_XATTR_INDEX_POSIX_ACL_ACCESS ; //<S2SV> if ( acl ) { //<S2SV> umode_t mode ; //<S2SV> ret = posix_acl_update_mode ( inode , & mode , & acl ) ; //<S2SV> if ( ret ) //<S2SV> return ret ; //<S2SV> ret = ocfs2_acl_set_mode ( inode , di_bh , //<S2SV> handle , mode ) ; //<S2SV> if ( ret ) //<S2SV> return ret ; //<S2SV> } //<S2SV> break ; //<S2SV> case ACL_TYPE_DEFAULT : //<S2SV> name_index = OCFS2_XATTR_INDEX_POSIX_ACL_DEFAULT ; //<S2SV> if ( ! S_ISDIR ( inode -> i_mode ) ) //<S2SV> return acl ? - EACCES : 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( acl ) { //<S2SV> value = ocfs2_acl_to_xattr ( acl , & size ) ; //<S2SV> if ( IS_ERR ( value ) ) //<S2SV> return ( int ) PTR_ERR ( value ) ; //<S2SV> } //<S2SV> if ( handle ) //<S2SV> ret = ocfs2_xattr_set_handle ( handle , inode , di_bh , name_index , //<S2SV> "" , value , size , 0 , //<S2SV> meta_ac , data_ac ) ; //<S2SV> else //<S2SV> ret = ocfs2_xattr_set ( inode , name_index , "" , value , size , 0 ) ; //<S2SV> kfree ( value ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 