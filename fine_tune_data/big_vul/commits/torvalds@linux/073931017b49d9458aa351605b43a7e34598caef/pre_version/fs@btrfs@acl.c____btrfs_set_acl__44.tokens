static int __btrfs_set_acl ( struct btrfs_trans_handle * trans , //<S2SV> struct inode * inode , struct posix_acl * acl , int type ) //<S2SV> { //<S2SV> int ret , size = 0 ; //<S2SV> const char * name ; //<S2SV> char * value = NULL ; //<S2SV> switch ( type ) { //<S2SV> case ACL_TYPE_ACCESS : //<S2SV> name = XATTR_NAME_POSIX_ACL_ACCESS ; //<S2SV> if ( acl ) { //<S2SV> ret = posix_acl_equiv_mode ( acl , & inode -> i_mode ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> if ( ret == 0 ) //<S2SV> acl = NULL ; //<S2SV> } //<S2SV> ret = 0 ; //<S2SV> break ; //<S2SV> case ACL_TYPE_DEFAULT : //<S2SV> if ( ! S_ISDIR ( inode -> i_mode ) ) //<S2SV> return acl ? - EINVAL : 0 ; //<S2SV> name = XATTR_NAME_POSIX_ACL_DEFAULT ; //<S2SV> break ; //<S2SV> default : //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( acl ) { //<S2SV> size = posix_acl_xattr_size ( acl -> a_count ) ; //<S2SV> value = kmalloc ( size , GFP_KERNEL ) ; //<S2SV> if ( ! value ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto out ; //<S2SV> } //<S2SV> ret = posix_acl_to_xattr ( & init_user_ns , acl , value , size ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto out ; //<S2SV> } //<S2SV> ret = __btrfs_setxattr ( trans , inode , name , value , size , 0 ) ; //<S2SV> out : //<S2SV> kfree ( value ) ; //<S2SV> if ( ! ret ) //<S2SV> set_cached_acl ( inode , type , acl ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 