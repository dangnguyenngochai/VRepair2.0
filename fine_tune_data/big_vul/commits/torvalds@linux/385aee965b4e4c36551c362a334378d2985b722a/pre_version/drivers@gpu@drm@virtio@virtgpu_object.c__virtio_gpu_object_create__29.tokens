int virtio_gpu_object_create ( struct virtio_gpu_device * vgdev , //<S2SV> unsigned long size , bool kernel , bool pinned , //<S2SV> struct virtio_gpu_object * * bo_ptr ) //<S2SV> { //<S2SV> struct virtio_gpu_object * bo ; //<S2SV> enum ttm_bo_type type ; //<S2SV> size_t acc_size ; //<S2SV> int ret ; //<S2SV> if ( kernel ) //<S2SV> type = ttm_bo_type_kernel ; //<S2SV> else //<S2SV> type = ttm_bo_type_device ; //<S2SV> * bo_ptr = NULL ; //<S2SV> acc_size = ttm_bo_dma_acc_size ( & vgdev -> mman . bdev , size , //<S2SV> sizeof ( struct virtio_gpu_object ) ) ; //<S2SV> bo = kzalloc ( sizeof ( struct virtio_gpu_object ) , GFP_KERNEL ) ; //<S2SV> if ( bo == NULL ) //<S2SV> return - ENOMEM ; //<S2SV> size = roundup ( size , PAGE_SIZE ) ; //<S2SV> ret = drm_gem_object_init ( vgdev -> ddev , & bo -> gem_base , size ) ; //<S2SV> if ( ret != 0 ) //<S2SV> return ret ; //<S2SV> bo -> dumb = false ; //<S2SV> virtio_gpu_init_ttm_placement ( bo , pinned ) ; //<S2SV> ret = ttm_bo_init ( & vgdev -> mman . bdev , & bo -> tbo , size , type , //<S2SV> & bo -> placement , 0 , ! kernel , NULL , acc_size , //<S2SV> NULL , NULL , & virtio_gpu_ttm_bo_destroy ) ; //<S2SV> if ( ret != 0 ) //<S2SV> return ret ; //<S2SV> * bo_ptr = bo ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 