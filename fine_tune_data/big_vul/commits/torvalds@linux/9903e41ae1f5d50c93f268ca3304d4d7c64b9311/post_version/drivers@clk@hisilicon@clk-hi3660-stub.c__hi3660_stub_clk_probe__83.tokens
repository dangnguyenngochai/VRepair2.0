static int hi3660_stub_clk_probe ( struct platform_device * pdev ) //<S2SV> { //<S2SV> struct device * dev = & pdev -> dev ; //<S2SV> struct resource * res ; //<S2SV> unsigned int i ; //<S2SV> int ret ; //<S2SV> stub_clk_chan . cl . dev = dev ; //<S2SV> stub_clk_chan . cl . tx_done = NULL ; //<S2SV> stub_clk_chan . cl . tx_block = false ; //<S2SV> stub_clk_chan . cl . knows_txdone = false ; //<S2SV> stub_clk_chan . mbox = mbox_request_channel ( & stub_clk_chan . cl , 0 ) ; //<S2SV> if ( IS_ERR ( stub_clk_chan . mbox ) ) //<S2SV> return PTR_ERR ( stub_clk_chan . mbox ) ; //<S2SV> res = platform_get_resource ( pdev , IORESOURCE_MEM , 0 ) ; //<S2SV> if ( ! res ) //<S2SV> return - EINVAL ; //<S2SV> freq_reg = devm_ioremap ( dev , res -> start , resource_size ( res ) ) ; //<S2SV> if ( ! freq_reg ) //<S2SV> return - ENOMEM ; //<S2SV> freq_reg += HI3660_STUB_CLOCK_DATA ; //<S2SV> for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { //<S2SV> ret = devm_clk_hw_register ( & pdev -> dev , & hi3660_stub_clks [ i ] . hw ) ; //<S2SV> if ( ret ) //<S2SV> return ret ; //<S2SV> } //<S2SV> return devm_of_clk_add_hw_provider ( & pdev -> dev , hi3660_stub_clk_hw_get , //<S2SV> hi3660_stub_clks ) ; //<S2SV> } //<S2SV> 