static int check_stack_boundary ( struct bpf_verifier_env * env , int regno , //<S2SV> int access_size , bool zero_size_allowed , //<S2SV> struct bpf_call_arg_meta * meta ) //<S2SV> { //<S2SV> struct bpf_verifier_state * state = env -> cur_state ; //<S2SV> struct bpf_reg_state * regs = state -> regs ; //<S2SV> int off , i , slot , spi ; //<S2SV> if ( regs [ regno ] . type != PTR_TO_STACK ) { //<S2SV> if ( zero_size_allowed && access_size == 0 && //<S2SV> register_is_null ( regs [ regno ] ) ) //<S2SV> return 0 ; //<S2SV> verbose ( env , "R%d<S2SV_blank>type=%s<S2SV_blank>expected=%s\\n" , regno , //<S2SV> reg_type_str [ regs [ regno ] . type ] , //<S2SV> reg_type_str [ PTR_TO_STACK ] ) ; //<S2SV> return - EACCES ; //<S2SV> } //<S2SV> if ( ! tnum_is_const ( regs [ regno ] . var_off ) ) { //<S2SV> char tn_buf [ 48 ] ; //<S2SV> tnum_strn ( tn_buf , sizeof ( tn_buf ) , regs [ regno ] . var_off ) ; //<S2SV> verbose ( env , "invalid<S2SV_blank>variable<S2SV_blank>stack<S2SV_blank>read<S2SV_blank>R%d<S2SV_blank>var_off=%s\\n" , //<S2SV> regno , tn_buf ) ; //<S2SV> } //<S2SV> off = regs [ regno ] . off + regs [ regno ] . var_off . value ; //<S2SV> if ( off >= 0 || off < - MAX_BPF_STACK || off + access_size > 0 || //<S2SV> access_size < 0 || ( access_size == 0 && ! zero_size_allowed ) ) { //<S2SV> verbose ( env , "invalid<S2SV_blank>stack<S2SV_blank>type<S2SV_blank>R%d<S2SV_blank>off=%d<S2SV_blank>access_size=%d\\n" , //<S2SV> regno , off , access_size ) ; //<S2SV> return - EACCES ; //<S2SV> } //<S2SV> if ( env -> prog -> aux -> stack_depth < - off ) //<S2SV> env -> prog -> aux -> stack_depth = - off ; //<S2SV> if ( meta && meta -> raw_mode ) { //<S2SV> meta -> access_size = access_size ; //<S2SV> meta -> regno = regno ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < access_size ; i ++ ) { //<S2SV> slot = - ( off + i ) - 1 ; //<S2SV> spi = slot / BPF_REG_SIZE ; //<S2SV> if ( state -> allocated_stack <= slot || //<S2SV> state -> stack [ spi ] . slot_type [ slot % BPF_REG_SIZE ] != //<S2SV> STACK_MISC ) { //<S2SV> verbose ( env , "invalid<S2SV_blank>indirect<S2SV_blank>read<S2SV_blank>from<S2SV_blank>stack<S2SV_blank>off<S2SV_blank>%d+%d<S2SV_blank>size<S2SV_blank>%d\\n" , //<S2SV> off , i , access_size ) ; //<S2SV> return - EACCES ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 