static struct ucounts * get_ucounts ( struct user_namespace * ns , kuid_t uid ) //<S2SV> { //<S2SV> struct hlist_head * hashent = ucounts_hashentry ( ns , uid ) ; //<S2SV> struct ucounts * ucounts , * new ; //<S2SV> spin_lock_irq ( & ucounts_lock ) ; //<S2SV> ucounts = find_ucounts ( ns , uid , hashent ) ; //<S2SV> if ( ! ucounts ) { //<S2SV> spin_unlock_irq ( & ucounts_lock ) ; //<S2SV> new = kzalloc ( sizeof ( * new ) , GFP_KERNEL ) ; //<S2SV> if ( ! new ) //<S2SV> return NULL ; //<S2SV> new -> ns = ns ; //<S2SV> new -> uid = uid ; //<S2SV> new -> count = 0 ; //<S2SV> spin_lock_irq ( & ucounts_lock ) ; //<S2SV> ucounts = find_ucounts ( ns , uid , hashent ) ; //<S2SV> if ( ucounts ) { //<S2SV> kfree ( new ) ; //<S2SV> } else { //<S2SV> hlist_add_head ( & new -> node , hashent ) ; //<S2SV> ucounts = new ; //<S2SV> } //<S2SV> } //<S2SV> if ( ucounts -> count == INT_MAX ) //<S2SV> ucounts = NULL ; //<S2SV> else //<S2SV> ucounts -> count += 1 ; //<S2SV> spin_unlock_irq ( & ucounts_lock ) ; //<S2SV> return ucounts ; //<S2SV> } //<S2SV> 