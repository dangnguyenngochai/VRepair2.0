static void sas_discover_domain ( struct work_struct * work ) //<S2SV> { //<S2SV> struct domain_device * dev ; //<S2SV> int error = 0 ; //<S2SV> struct sas_discovery_event * ev = to_sas_discovery_event ( work ) ; //<S2SV> struct asd_sas_port * port = ev -> port ; //<S2SV> clear_bit ( DISCE_DISCOVER_DOMAIN , & port -> disc . pending ) ; //<S2SV> if ( port -> port_dev ) //<S2SV> return ; //<S2SV> error = sas_get_port_device ( port ) ; //<S2SV> if ( error ) //<S2SV> return ; //<S2SV> dev = port -> port_dev ; //<S2SV> SAS_DPRINTK ( "DOING<S2SV_blank>DISCOVERY<S2SV_blank>on<S2SV_blank>port<S2SV_blank>%d,<S2SV_blank>pid:%d\\n" , port -> id , //<S2SV> task_pid_nr ( current ) ) ; //<S2SV> switch ( dev -> dev_type ) { //<S2SV> case SAS_END_DEVICE : //<S2SV> error = sas_discover_end_dev ( dev ) ; //<S2SV> break ; //<S2SV> case SAS_EDGE_EXPANDER_DEVICE : //<S2SV> case SAS_FANOUT_EXPANDER_DEVICE : //<S2SV> error = sas_discover_root_expander ( dev ) ; //<S2SV> break ; //<S2SV> case SAS_SATA_DEV : //<S2SV> case SAS_SATA_PM : //<S2SV> # ifdef CONFIG_SCSI_SAS_ATA //<S2SV> error = sas_discover_sata ( dev ) ; //<S2SV> break ; //<S2SV> # else //<S2SV> SAS_DPRINTK ( "ATA<S2SV_blank>device<S2SV_blank>seen<S2SV_blank>but<S2SV_blank>CONFIG_SCSI_SAS_ATA=N<S2SV_blank>so<S2SV_blank>cannot<S2SV_blank>attach\\n" ) ; //<S2SV> # endif //<S2SV> default : //<S2SV> error = - ENXIO ; //<S2SV> SAS_DPRINTK ( "unhandled<S2SV_blank>device<S2SV_blank>%d\\n" , dev -> dev_type ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( error ) { //<S2SV> sas_rphy_free ( dev -> rphy ) ; //<S2SV> list_del_init ( & dev -> disco_list_node ) ; //<S2SV> spin_lock_irq ( & port -> dev_list_lock ) ; //<S2SV> list_del_init ( & dev -> dev_list_node ) ; //<S2SV> spin_unlock_irq ( & port -> dev_list_lock ) ; //<S2SV> sas_put_device ( dev ) ; //<S2SV> port -> port_dev = NULL ; //<S2SV> } //<S2SV> sas_probe_devices ( port ) ; //<S2SV> SAS_DPRINTK ( "DONE<S2SV_blank>DISCOVERY<S2SV_blank>on<S2SV_blank>port<S2SV_blank>%d,<S2SV_blank>pid:%d,<S2SV_blank>result:%d\\n" , port -> id , //<S2SV> task_pid_nr ( current ) , error ) ; //<S2SV> } //<S2SV> 