static void sas_unregister_devs_sas_addr ( struct domain_device * parent , //<S2SV> int phy_id , bool last ) //<S2SV> { //<S2SV> struct expander_device * ex_dev = & parent -> ex_dev ; //<S2SV> struct ex_phy * phy = & ex_dev -> ex_phy [ phy_id ] ; //<S2SV> struct domain_device * child , * n , * found = NULL ; //<S2SV> if ( last ) { //<S2SV> list_for_each_entry_safe ( child , n , //<S2SV> & ex_dev -> children , siblings ) { //<S2SV> if ( SAS_ADDR ( child -> sas_addr ) == //<S2SV> SAS_ADDR ( phy -> attached_sas_addr ) ) { //<S2SV> set_bit ( SAS_DEV_GONE , & child -> state ) ; //<S2SV> if ( child -> dev_type == SAS_EDGE_EXPANDER_DEVICE || //<S2SV> child -> dev_type == SAS_FANOUT_EXPANDER_DEVICE ) //<S2SV> sas_unregister_ex_tree ( parent -> port , child ) ; //<S2SV> else //<S2SV> sas_unregister_dev ( parent -> port , child ) ; //<S2SV> found = child ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> sas_disable_routing ( parent , phy -> attached_sas_addr ) ; //<S2SV> } //<S2SV> memset ( phy -> attached_sas_addr , 0 , SAS_ADDR_SIZE ) ; //<S2SV> if ( phy -> port ) { //<S2SV> sas_port_delete_phy ( phy -> port , phy -> phy ) ; //<S2SV> sas_device_set_phy ( found , phy -> port ) ; //<S2SV> if ( phy -> port -> num_phys == 0 ) //<S2SV> sas_port_delete ( phy -> port ) ; //<S2SV> phy -> port = NULL ; //<S2SV> } //<S2SV> } //<S2SV> 