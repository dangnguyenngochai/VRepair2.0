static void sas_resume_port ( struct asd_sas_phy * phy ) //<S2SV> { //<S2SV> struct domain_device * dev ; //<S2SV> struct asd_sas_port * port = phy -> port ; //<S2SV> struct sas_ha_struct * sas_ha = phy -> ha ; //<S2SV> struct sas_internal * si = to_sas_internal ( sas_ha -> core . shost -> transportt ) ; //<S2SV> if ( si -> dft -> lldd_port_formed ) //<S2SV> si -> dft -> lldd_port_formed ( phy ) ; //<S2SV> if ( port -> suspended ) //<S2SV> port -> suspended = 0 ; //<S2SV> else { //<S2SV> return ; //<S2SV> } //<S2SV> list_for_each_entry ( dev , & port -> dev_list , dev_list_node ) { //<S2SV> int i , rc ; //<S2SV> rc = sas_notify_lldd_dev_found ( dev ) ; //<S2SV> if ( rc ) { //<S2SV> sas_unregister_dev ( port , dev ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( dev -> dev_type == SAS_EDGE_EXPANDER_DEVICE || dev -> dev_type == SAS_FANOUT_EXPANDER_DEVICE ) { //<S2SV> dev -> ex_dev . ex_change_count = - 1 ; //<S2SV> for ( i = 0 ; i < dev -> ex_dev . num_phys ; i ++ ) { //<S2SV> struct ex_phy * phy = & dev -> ex_dev . ex_phy [ i ] ; //<S2SV> phy -> phy_change_count = - 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> sas_discover_event ( port , DISCE_RESUME ) ; //<S2SV> } //<S2SV> 