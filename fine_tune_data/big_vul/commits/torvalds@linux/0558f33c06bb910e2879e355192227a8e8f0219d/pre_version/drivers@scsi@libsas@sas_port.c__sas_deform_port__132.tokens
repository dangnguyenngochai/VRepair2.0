void sas_deform_port ( struct asd_sas_phy * phy , int gone ) //<S2SV> { //<S2SV> struct sas_ha_struct * sas_ha = phy -> ha ; //<S2SV> struct asd_sas_port * port = phy -> port ; //<S2SV> struct sas_internal * si = //<S2SV> to_sas_internal ( sas_ha -> core . shost -> transportt ) ; //<S2SV> struct domain_device * dev ; //<S2SV> unsigned long flags ; //<S2SV> if ( ! port ) //<S2SV> return ; //<S2SV> dev = port -> port_dev ; //<S2SV> if ( dev ) //<S2SV> dev -> pathways -- ; //<S2SV> if ( port -> num_phys == 1 ) { //<S2SV> sas_unregister_domain_devices ( port , gone ) ; //<S2SV> sas_port_delete ( port -> port ) ; //<S2SV> port -> port = NULL ; //<S2SV> } else { //<S2SV> sas_port_delete_phy ( port -> port , phy -> phy ) ; //<S2SV> sas_device_set_phy ( dev , port -> port ) ; //<S2SV> } //<S2SV> if ( si -> dft -> lldd_port_deformed ) //<S2SV> si -> dft -> lldd_port_deformed ( phy ) ; //<S2SV> spin_lock_irqsave ( & sas_ha -> phy_port_lock , flags ) ; //<S2SV> spin_lock ( & port -> phy_list_lock ) ; //<S2SV> list_del_init ( & phy -> port_phy_el ) ; //<S2SV> sas_phy_set_target ( phy , NULL ) ; //<S2SV> phy -> port = NULL ; //<S2SV> port -> num_phys -- ; //<S2SV> port -> phy_mask &= ~ ( 1U << phy -> id ) ; //<S2SV> if ( port -> num_phys == 0 ) { //<S2SV> INIT_LIST_HEAD ( & port -> phy_list ) ; //<S2SV> memset ( port -> sas_addr , 0 , SAS_ADDR_SIZE ) ; //<S2SV> memset ( port -> attached_sas_addr , 0 , SAS_ADDR_SIZE ) ; //<S2SV> port -> class = 0 ; //<S2SV> port -> iproto = 0 ; //<S2SV> port -> tproto = 0 ; //<S2SV> port -> oob_mode = 0 ; //<S2SV> port -> phy_mask = 0 ; //<S2SV> } //<S2SV> spin_unlock ( & port -> phy_list_lock ) ; //<S2SV> spin_unlock_irqrestore ( & sas_ha -> phy_port_lock , flags ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 