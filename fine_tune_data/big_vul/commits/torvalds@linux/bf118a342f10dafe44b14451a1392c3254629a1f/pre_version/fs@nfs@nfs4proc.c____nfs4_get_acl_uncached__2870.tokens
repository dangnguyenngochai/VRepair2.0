static ssize_t __nfs4_get_acl_uncached ( struct inode * inode , void * buf , size_t buflen ) //<S2SV> { //<S2SV> struct page * pages [ NFS4ACL_MAXPAGES ] ; //<S2SV> struct nfs_getaclargs args = { //<S2SV> . fh = NFS_FH ( inode ) , //<S2SV> . acl_pages = pages , //<S2SV> . acl_len = buflen , //<S2SV> } ; //<S2SV> struct nfs_getaclres res = { //<S2SV> . acl_len = buflen , //<S2SV> } ; //<S2SV> void * resp_buf ; //<S2SV> struct rpc_message msg = { //<S2SV> . rpc_proc = & nfs4_procedures [ NFSPROC4_CLNT_GETACL ] , //<S2SV> . rpc_argp = & args , //<S2SV> . rpc_resp = & res , //<S2SV> } ; //<S2SV> struct page * localpage = NULL ; //<S2SV> int ret ; //<S2SV> if ( buflen < PAGE_SIZE ) { //<S2SV> localpage = alloc_page ( GFP_KERNEL ) ; //<S2SV> resp_buf = page_address ( localpage ) ; //<S2SV> if ( localpage == NULL ) //<S2SV> return - ENOMEM ; //<S2SV> args . acl_pages [ 0 ] = localpage ; //<S2SV> args . acl_pgbase = 0 ; //<S2SV> args . acl_len = PAGE_SIZE ; //<S2SV> } else { //<S2SV> resp_buf = buf ; //<S2SV> buf_to_pages ( buf , buflen , args . acl_pages , & args . acl_pgbase ) ; //<S2SV> } //<S2SV> ret = nfs4_call_sync ( NFS_SERVER ( inode ) -> client , NFS_SERVER ( inode ) , & msg , & args . seq_args , & res . seq_res , 0 ) ; //<S2SV> if ( ret ) //<S2SV> goto out_free ; //<S2SV> if ( res . acl_len > args . acl_len ) //<S2SV> nfs4_write_cached_acl ( inode , NULL , res . acl_len ) ; //<S2SV> else //<S2SV> nfs4_write_cached_acl ( inode , resp_buf , res . acl_len ) ; //<S2SV> if ( buf ) { //<S2SV> ret = - ERANGE ; //<S2SV> if ( res . acl_len > buflen ) //<S2SV> goto out_free ; //<S2SV> if ( localpage ) //<S2SV> memcpy ( buf , resp_buf , res . acl_len ) ; //<S2SV> } //<S2SV> ret = res . acl_len ; //<S2SV> out_free : //<S2SV> if ( localpage ) //<S2SV> __free_page ( localpage ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 