static int decode_getacl ( struct xdr_stream * xdr , struct rpc_rqst * req , //<S2SV> struct nfs_getaclres * res ) //<S2SV> { //<S2SV> __be32 * savep , * bm_p ; //<S2SV> uint32_t attrlen , //<S2SV> bitmap [ 3 ] = { 0 } ; //<S2SV> struct kvec * iov = req -> rq_rcv_buf . head ; //<S2SV> int status ; //<S2SV> res -> acl_len = 0 ; //<S2SV> if ( ( status = decode_op_hdr ( xdr , OP_GETATTR ) ) != 0 ) //<S2SV> goto out ; //<S2SV> bm_p = xdr -> p ; //<S2SV> if ( ( status = decode_attr_bitmap ( xdr , bitmap ) ) != 0 ) //<S2SV> goto out ; //<S2SV> if ( ( status = decode_attr_length ( xdr , & attrlen , & savep ) ) != 0 ) //<S2SV> goto out ; //<S2SV> if ( unlikely ( bitmap [ 0 ] & ( FATTR4_WORD0_ACL - 1U ) ) ) //<S2SV> return - EIO ; //<S2SV> if ( likely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { //<S2SV> size_t hdrlen ; //<S2SV> u32 recvd ; //<S2SV> xdr -> p = bm_p ; //<S2SV> res -> acl_data_offset = be32_to_cpup ( bm_p ) + 2 ; //<S2SV> res -> acl_data_offset <<= 2 ; //<S2SV> hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; //<S2SV> attrlen += res -> acl_data_offset ; //<S2SV> recvd = req -> rq_rcv_buf . len - hdrlen ; //<S2SV> if ( attrlen > recvd ) { //<S2SV> if ( res -> acl_flags & NFS4_ACL_LEN_REQUEST ) { //<S2SV> res -> acl_len = attrlen ; //<S2SV> goto out ; //<S2SV> } //<S2SV> dprintk ( "NFS:<S2SV_blank>acl<S2SV_blank>reply:<S2SV_blank>attrlen<S2SV_blank>%u<S2SV_blank>><S2SV_blank>recvd<S2SV_blank>%u\\n" , //<S2SV> attrlen , recvd ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> xdr_read_pages ( xdr , attrlen ) ; //<S2SV> res -> acl_len = attrlen ; //<S2SV> } else //<S2SV> status = - EOPNOTSUPP ; //<S2SV> out : //<S2SV> return status ; //<S2SV> } //<S2SV> 