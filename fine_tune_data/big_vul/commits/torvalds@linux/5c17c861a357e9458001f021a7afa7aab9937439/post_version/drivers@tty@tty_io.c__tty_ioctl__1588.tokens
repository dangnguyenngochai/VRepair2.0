long tty_ioctl ( struct file * file , unsigned int cmd , unsigned long arg ) //<S2SV> { //<S2SV> struct tty_struct * tty = file_tty ( file ) ; //<S2SV> struct tty_struct * real_tty ; //<S2SV> void __user * p = ( void __user * ) arg ; //<S2SV> int retval ; //<S2SV> struct tty_ldisc * ld ; //<S2SV> if ( tty_paranoia_check ( tty , file_inode ( file ) , "tty_ioctl" ) ) //<S2SV> return - EINVAL ; //<S2SV> real_tty = tty_pair_get_tty ( tty ) ; //<S2SV> switch ( cmd ) { //<S2SV> case TIOCSETD : //<S2SV> case TIOCSBRK : //<S2SV> case TIOCCBRK : //<S2SV> case TCSBRK : //<S2SV> case TCSBRKP : //<S2SV> retval = tty_check_change ( tty ) ; //<S2SV> if ( retval ) //<S2SV> return retval ; //<S2SV> if ( cmd != TIOCCBRK ) { //<S2SV> tty_wait_until_sent ( tty , 0 ) ; //<S2SV> if ( signal_pending ( current ) ) //<S2SV> return - EINTR ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> switch ( cmd ) { //<S2SV> case TIOCSTI : //<S2SV> return tiocsti ( tty , p ) ; //<S2SV> case TIOCGWINSZ : //<S2SV> return tiocgwinsz ( real_tty , p ) ; //<S2SV> case TIOCSWINSZ : //<S2SV> return tiocswinsz ( real_tty , p ) ; //<S2SV> case TIOCCONS : //<S2SV> return real_tty != tty ? - EINVAL : tioccons ( file ) ; //<S2SV> case FIONBIO : //<S2SV> return fionbio ( file , p ) ; //<S2SV> case TIOCEXCL : //<S2SV> set_bit ( TTY_EXCLUSIVE , & tty -> flags ) ; //<S2SV> return 0 ; //<S2SV> case TIOCNXCL : //<S2SV> clear_bit ( TTY_EXCLUSIVE , & tty -> flags ) ; //<S2SV> return 0 ; //<S2SV> case TIOCGEXCL : //<S2SV> { //<S2SV> int excl = test_bit ( TTY_EXCLUSIVE , & tty -> flags ) ; //<S2SV> return put_user ( excl , ( int __user * ) p ) ; //<S2SV> } //<S2SV> case TIOCNOTTY : //<S2SV> if ( current -> signal -> tty != tty ) //<S2SV> return - ENOTTY ; //<S2SV> no_tty ( ) ; //<S2SV> return 0 ; //<S2SV> case TIOCSCTTY : //<S2SV> return tiocsctty ( real_tty , file , arg ) ; //<S2SV> case TIOCGPGRP : //<S2SV> return tiocgpgrp ( tty , real_tty , p ) ; //<S2SV> case TIOCSPGRP : //<S2SV> return tiocspgrp ( tty , real_tty , p ) ; //<S2SV> case TIOCGSID : //<S2SV> return tiocgsid ( tty , real_tty , p ) ; //<S2SV> case TIOCGETD : //<S2SV> return tiocgetd ( tty , p ) ; //<S2SV> case TIOCSETD : //<S2SV> return tiocsetd ( tty , p ) ; //<S2SV> case TIOCVHANGUP : //<S2SV> if ( ! capable ( CAP_SYS_ADMIN ) ) //<S2SV> return - EPERM ; //<S2SV> tty_vhangup ( tty ) ; //<S2SV> return 0 ; //<S2SV> case TIOCGDEV : //<S2SV> { //<S2SV> unsigned int ret = new_encode_dev ( tty_devnum ( real_tty ) ) ; //<S2SV> return put_user ( ret , ( unsigned int __user * ) p ) ; //<S2SV> } //<S2SV> case TIOCSBRK : //<S2SV> if ( tty -> ops -> break_ctl ) //<S2SV> return tty -> ops -> break_ctl ( tty , - 1 ) ; //<S2SV> return 0 ; //<S2SV> case TIOCCBRK : //<S2SV> if ( tty -> ops -> break_ctl ) //<S2SV> return tty -> ops -> break_ctl ( tty , 0 ) ; //<S2SV> return 0 ; //<S2SV> case TCSBRK : //<S2SV> if ( ! arg ) //<S2SV> return send_break ( tty , 250 ) ; //<S2SV> return 0 ; //<S2SV> case TCSBRKP : //<S2SV> return send_break ( tty , arg ? arg * 100 : 250 ) ; //<S2SV> case TIOCMGET : //<S2SV> return tty_tiocmget ( tty , p ) ; //<S2SV> case TIOCMSET : //<S2SV> case TIOCMBIC : //<S2SV> case TIOCMBIS : //<S2SV> return tty_tiocmset ( tty , cmd , p ) ; //<S2SV> case TIOCGICOUNT : //<S2SV> retval = tty_tiocgicount ( tty , p ) ; //<S2SV> if ( retval != - EINVAL ) //<S2SV> return retval ; //<S2SV> break ; //<S2SV> case TCFLSH : //<S2SV> switch ( arg ) { //<S2SV> case TCIFLUSH : //<S2SV> case TCIOFLUSH : //<S2SV> tty_buffer_flush ( tty , NULL ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case TIOCSSERIAL : //<S2SV> tty_warn_deprecated_flags ( p ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( tty -> ops -> ioctl ) { //<S2SV> retval = tty -> ops -> ioctl ( tty , cmd , arg ) ; //<S2SV> if ( retval != - ENOIOCTLCMD ) //<S2SV> return retval ; //<S2SV> } //<S2SV> ld = tty_ldisc_ref_wait ( tty ) ; //<S2SV> retval = - EINVAL ; //<S2SV> if ( ld -> ops -> ioctl ) { //<S2SV> retval = ld -> ops -> ioctl ( tty , file , cmd , arg ) ; //<S2SV> if ( retval == - ENOIOCTLCMD ) //<S2SV> retval = - ENOTTY ; //<S2SV> } //<S2SV> tty_ldisc_deref ( ld ) ; //<S2SV> return retval ; //<S2SV> } //<S2SV> 