SYSCALL_DEFINE4 ( epoll_ctl , int , epfd , int , op , int , fd , //<S2SV> struct epoll_event __user * , event ) //<S2SV> { //<S2SV> int error ; //<S2SV> int did_lock_epmutex = 0 ; //<S2SV> struct file * file , * tfile ; //<S2SV> struct eventpoll * ep ; //<S2SV> struct epitem * epi ; //<S2SV> struct epoll_event epds ; //<S2SV> error = - EFAULT ; //<S2SV> if ( ep_op_has_event ( op ) && //<S2SV> copy_from_user ( & epds , event , sizeof ( struct epoll_event ) ) ) //<S2SV> goto error_return ; //<S2SV> error = - EBADF ; //<S2SV> file = fget ( epfd ) ; //<S2SV> if ( ! file ) //<S2SV> goto error_return ; //<S2SV> tfile = fget ( fd ) ; //<S2SV> if ( ! tfile ) //<S2SV> goto error_fput ; //<S2SV> error = - EPERM ; //<S2SV> if ( ! tfile -> f_op || ! tfile -> f_op -> poll ) //<S2SV> goto error_tgt_fput ; //<S2SV> error = - EINVAL ; //<S2SV> if ( file == tfile || ! is_file_epoll ( file ) ) //<S2SV> goto error_tgt_fput ; //<S2SV> ep = file -> private_data ; //<S2SV> if ( op == EPOLL_CTL_ADD || op == EPOLL_CTL_DEL ) { //<S2SV> mutex_lock ( & epmutex ) ; //<S2SV> did_lock_epmutex = 1 ; //<S2SV> } //<S2SV> if ( op == EPOLL_CTL_ADD ) { //<S2SV> if ( is_file_epoll ( tfile ) ) { //<S2SV> error = - ELOOP ; //<S2SV> if ( ep_loop_check ( ep , tfile ) != 0 ) //<S2SV> goto error_tgt_fput ; //<S2SV> } else //<S2SV> list_add ( & tfile -> f_tfile_llink , & tfile_check_list ) ; //<S2SV> } //<S2SV> mutex_lock_nested ( & ep -> mtx , 0 ) ; //<S2SV> epi = ep_find ( ep , tfile , fd ) ; //<S2SV> error = - EINVAL ; //<S2SV> switch ( op ) { //<S2SV> case EPOLL_CTL_ADD : //<S2SV> if ( ! epi ) { //<S2SV> epds . events |= POLLERR | POLLHUP ; //<S2SV> error = ep_insert ( ep , & epds , tfile , fd ) ; //<S2SV> } else //<S2SV> error = - EEXIST ; //<S2SV> clear_tfile_check_list ( ) ; //<S2SV> break ; //<S2SV> case EPOLL_CTL_DEL : //<S2SV> if ( epi ) //<S2SV> error = ep_remove ( ep , epi ) ; //<S2SV> else //<S2SV> error = - ENOENT ; //<S2SV> break ; //<S2SV> case EPOLL_CTL_MOD : //<S2SV> if ( epi ) { //<S2SV> epds . events |= POLLERR | POLLHUP ; //<S2SV> error = ep_modify ( ep , epi , & epds ) ; //<S2SV> } else //<S2SV> error = - ENOENT ; //<S2SV> break ; //<S2SV> } //<S2SV> mutex_unlock ( & ep -> mtx ) ; //<S2SV> error_tgt_fput : //<S2SV> if ( did_lock_epmutex ) //<S2SV> mutex_unlock ( & epmutex ) ; //<S2SV> fput ( tfile ) ; //<S2SV> error_fput : //<S2SV> fput ( file ) ; //<S2SV> error_return : //<S2SV> return error ; //<S2SV> } //<S2SV> 