int iscsi_decode_text_input ( //<S2SV> u8 phase , //<S2SV> u8 sender , //<S2SV> char * textbuf , //<S2SV> u32 length , //<S2SV> struct iscsi_conn * conn ) //<S2SV> { //<S2SV> struct iscsi_param_list * param_list = conn -> param_list ; //<S2SV> char * tmpbuf , * start = NULL , * end = NULL ; //<S2SV> tmpbuf = kzalloc ( length + 1 , GFP_KERNEL ) ; //<S2SV> if ( ! tmpbuf ) { //<S2SV> pr_err ( "Unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>tmpbuf.\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memcpy ( tmpbuf , textbuf , length ) ; //<S2SV> tmpbuf [ length ] = '\\0' ; //<S2SV> start = tmpbuf ; //<S2SV> end = ( start + length ) ; //<S2SV> while ( start < end ) { //<S2SV> char * key , * value ; //<S2SV> struct iscsi_param * param ; //<S2SV> if ( iscsi_extract_key_value ( start , & key , & value ) < 0 ) { //<S2SV> kfree ( tmpbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> pr_debug ( "Got<S2SV_blank>key:<S2SV_blank>%s=%s\\n" , key , value ) ; //<S2SV> if ( phase & PHASE_SECURITY ) { //<S2SV> if ( iscsi_check_for_auth_key ( key ) > 0 ) { //<S2SV> kfree ( tmpbuf ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> } //<S2SV> param = iscsi_check_key ( key , phase , sender , param_list ) ; //<S2SV> if ( ! param ) { //<S2SV> if ( iscsi_add_notunderstood_response ( key , //<S2SV> value , param_list ) < 0 ) { //<S2SV> kfree ( tmpbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> start += strlen ( key ) + strlen ( value ) + 2 ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( iscsi_check_value ( param , value ) < 0 ) { //<S2SV> kfree ( tmpbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> start += strlen ( key ) + strlen ( value ) + 2 ; //<S2SV> if ( IS_PSTATE_PROPOSER ( param ) ) { //<S2SV> if ( iscsi_check_proposer_state ( param , value ) < 0 ) { //<S2SV> kfree ( tmpbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> SET_PSTATE_RESPONSE_GOT ( param ) ; //<S2SV> } else { //<S2SV> if ( iscsi_check_acceptor_state ( param , value , conn ) < 0 ) { //<S2SV> kfree ( tmpbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> SET_PSTATE_ACCEPTOR ( param ) ; //<S2SV> } //<S2SV> } //<S2SV> kfree ( tmpbuf ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 