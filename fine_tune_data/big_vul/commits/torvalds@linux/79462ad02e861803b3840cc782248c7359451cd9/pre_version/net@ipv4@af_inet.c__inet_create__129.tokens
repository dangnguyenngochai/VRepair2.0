static int inet_create ( struct net * net , struct socket * sock , int protocol , //<S2SV> int kern ) //<S2SV> { //<S2SV> struct sock * sk ; //<S2SV> struct inet_protosw * answer ; //<S2SV> struct inet_sock * inet ; //<S2SV> struct proto * answer_prot ; //<S2SV> unsigned char answer_flags ; //<S2SV> int try_loading_module = 0 ; //<S2SV> int err ; //<S2SV> sock -> state = SS_UNCONNECTED ; //<S2SV> lookup_protocol : //<S2SV> err = - ESOCKTNOSUPPORT ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> list_for_each_entry_rcu ( answer , & inetsw [ sock -> type ] , list ) { //<S2SV> err = 0 ; //<S2SV> if ( protocol == answer -> protocol ) { //<S2SV> if ( protocol != IPPROTO_IP ) //<S2SV> break ; //<S2SV> } else { //<S2SV> if ( IPPROTO_IP == protocol ) { //<S2SV> protocol = answer -> protocol ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( IPPROTO_IP == answer -> protocol ) //<S2SV> break ; //<S2SV> } //<S2SV> err = - EPROTONOSUPPORT ; //<S2SV> } //<S2SV> if ( unlikely ( err ) ) { //<S2SV> if ( try_loading_module < 2 ) { //<S2SV> rcu_read_unlock ( ) ; //<S2SV> if ( ++ try_loading_module == 1 ) //<S2SV> request_module ( "net-pf-%d-proto-%d-type-%d" , //<S2SV> PF_INET , protocol , sock -> type ) ; //<S2SV> else //<S2SV> request_module ( "net-pf-%d-proto-%d" , //<S2SV> PF_INET , protocol ) ; //<S2SV> goto lookup_protocol ; //<S2SV> } else //<S2SV> goto out_rcu_unlock ; //<S2SV> } //<S2SV> err = - EPERM ; //<S2SV> if ( sock -> type == SOCK_RAW && ! kern && //<S2SV> ! ns_capable ( net -> user_ns , CAP_NET_RAW ) ) //<S2SV> goto out_rcu_unlock ; //<S2SV> sock -> ops = answer -> ops ; //<S2SV> answer_prot = answer -> prot ; //<S2SV> answer_flags = answer -> flags ; //<S2SV> rcu_read_unlock ( ) ; //<S2SV> WARN_ON ( ! answer_prot -> slab ) ; //<S2SV> err = - ENOBUFS ; //<S2SV> sk = sk_alloc ( net , PF_INET , GFP_KERNEL , answer_prot , kern ) ; //<S2SV> if ( ! sk ) //<S2SV> goto out ; //<S2SV> err = 0 ; //<S2SV> if ( INET_PROTOSW_REUSE & answer_flags ) //<S2SV> sk -> sk_reuse = SK_CAN_REUSE ; //<S2SV> inet = inet_sk ( sk ) ; //<S2SV> inet -> is_icsk = ( INET_PROTOSW_ICSK & answer_flags ) != 0 ; //<S2SV> inet -> nodefrag = 0 ; //<S2SV> if ( SOCK_RAW == sock -> type ) { //<S2SV> inet -> inet_num = protocol ; //<S2SV> if ( IPPROTO_RAW == protocol ) //<S2SV> inet -> hdrincl = 1 ; //<S2SV> } //<S2SV> if ( net -> ipv4 . sysctl_ip_no_pmtu_disc ) //<S2SV> inet -> pmtudisc = IP_PMTUDISC_DONT ; //<S2SV> else //<S2SV> inet -> pmtudisc = IP_PMTUDISC_WANT ; //<S2SV> inet -> inet_id = 0 ; //<S2SV> sock_init_data ( sock , sk ) ; //<S2SV> sk -> sk_destruct = inet_sock_destruct ; //<S2SV> sk -> sk_protocol = protocol ; //<S2SV> sk -> sk_backlog_rcv = sk -> sk_prot -> backlog_rcv ; //<S2SV> inet -> uc_ttl = - 1 ; //<S2SV> inet -> mc_loop = 1 ; //<S2SV> inet -> mc_ttl = 1 ; //<S2SV> inet -> mc_all = 1 ; //<S2SV> inet -> mc_index = 0 ; //<S2SV> inet -> mc_list = NULL ; //<S2SV> inet -> rcv_tos = 0 ; //<S2SV> sk_refcnt_debug_inc ( sk ) ; //<S2SV> if ( inet -> inet_num ) { //<S2SV> inet -> inet_sport = htons ( inet -> inet_num ) ; //<S2SV> sk -> sk_prot -> hash ( sk ) ; //<S2SV> } //<S2SV> if ( sk -> sk_prot -> init ) { //<S2SV> err = sk -> sk_prot -> init ( sk ) ; //<S2SV> if ( err ) //<S2SV> sk_common_release ( sk ) ; //<S2SV> } //<S2SV> out : //<S2SV> return err ; //<S2SV> out_rcu_unlock : //<S2SV> rcu_read_unlock ( ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> 