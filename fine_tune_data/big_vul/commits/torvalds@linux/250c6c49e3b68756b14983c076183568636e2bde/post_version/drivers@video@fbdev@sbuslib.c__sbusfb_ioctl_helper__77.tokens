int sbusfb_ioctl_helper ( unsigned long cmd , unsigned long arg , //<S2SV> struct fb_info * info , //<S2SV> int type , int fb_depth , unsigned long fb_size ) //<S2SV> { //<S2SV> switch ( cmd ) { //<S2SV> case FBIOGTYPE : { //<S2SV> struct fbtype __user * f = ( struct fbtype __user * ) arg ; //<S2SV> if ( put_user ( type , & f -> fb_type ) || //<S2SV> __put_user ( info -> var . yres , & f -> fb_height ) || //<S2SV> __put_user ( info -> var . xres , & f -> fb_width ) || //<S2SV> __put_user ( fb_depth , & f -> fb_depth ) || //<S2SV> __put_user ( 0 , & f -> fb_cmsize ) || //<S2SV> __put_user ( fb_size , & f -> fb_cmsize ) ) //<S2SV> return - EFAULT ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case FBIOPUTCMAP_SPARC : { //<S2SV> struct fbcmap __user * c = ( struct fbcmap __user * ) arg ; //<S2SV> struct fb_cmap cmap ; //<S2SV> u16 red , green , blue ; //<S2SV> u8 red8 , green8 , blue8 ; //<S2SV> unsigned char __user * ured ; //<S2SV> unsigned char __user * ugreen ; //<S2SV> unsigned char __user * ublue ; //<S2SV> unsigned int index , count , i ; //<S2SV> if ( get_user ( index , & c -> index ) || //<S2SV> __get_user ( count , & c -> count ) || //<S2SV> __get_user ( ured , & c -> red ) || //<S2SV> __get_user ( ugreen , & c -> green ) || //<S2SV> __get_user ( ublue , & c -> blue ) ) //<S2SV> return - EFAULT ; //<S2SV> cmap . len = 1 ; //<S2SV> cmap . red = & red ; //<S2SV> cmap . green = & green ; //<S2SV> cmap . blue = & blue ; //<S2SV> cmap . transp = NULL ; //<S2SV> for ( i = 0 ; i < count ; i ++ ) { //<S2SV> int err ; //<S2SV> if ( get_user ( red8 , & ured [ i ] ) || //<S2SV> get_user ( green8 , & ugreen [ i ] ) || //<S2SV> get_user ( blue8 , & ublue [ i ] ) ) //<S2SV> return - EFAULT ; //<S2SV> red = red8 << 8 ; //<S2SV> green = green8 << 8 ; //<S2SV> blue = blue8 << 8 ; //<S2SV> cmap . start = index + i ; //<S2SV> err = fb_set_cmap ( & cmap , info ) ; //<S2SV> if ( err ) //<S2SV> return err ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> case FBIOGETCMAP_SPARC : { //<S2SV> struct fbcmap __user * c = ( struct fbcmap __user * ) arg ; //<S2SV> unsigned char __user * ured ; //<S2SV> unsigned char __user * ugreen ; //<S2SV> unsigned char __user * ublue ; //<S2SV> struct fb_cmap * cmap = & info -> cmap ; //<S2SV> unsigned int index , count , i ; //<S2SV> u8 red , green , blue ; //<S2SV> if ( get_user ( index , & c -> index ) || //<S2SV> __get_user ( count , & c -> count ) || //<S2SV> __get_user ( ured , & c -> red ) || //<S2SV> __get_user ( ugreen , & c -> green ) || //<S2SV> __get_user ( ublue , & c -> blue ) ) //<S2SV> return - EFAULT ; //<S2SV> if ( index + count > cmap -> len ) //<S2SV> return - EINVAL ; //<S2SV> for ( i = 0 ; i < count ; i ++ ) { //<S2SV> red = cmap -> red [ index + i ] >> 8 ; //<S2SV> green = cmap -> green [ index + i ] >> 8 ; //<S2SV> blue = cmap -> blue [ index + i ] >> 8 ; //<S2SV> if ( put_user ( red , & ured [ i ] ) || //<S2SV> put_user ( green , & ugreen [ i ] ) || //<S2SV> put_user ( blue , & ublue [ i ] ) ) //<S2SV> return - EFAULT ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> default : //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> } //<S2SV> 