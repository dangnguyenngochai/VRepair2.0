static int rds_loop_xmit ( struct rds_connection * conn , struct rds_message * rm , //<S2SV> unsigned int hdr_off , unsigned int sg , //<S2SV> unsigned int off ) //<S2SV> { //<S2SV> struct scatterlist * sgp = & rm -> data . op_sg [ sg ] ; //<S2SV> int ret = sizeof ( struct rds_header ) + //<S2SV> be32_to_cpu ( rm -> m_inc . i_hdr . h_len ) ; //<S2SV> if ( rm -> m_inc . i_hdr . h_flags & RDS_FLAG_CONG_BITMAP ) { //<S2SV> rds_cong_map_updated ( conn -> c_fcong , ~ ( u64 ) 0 ) ; //<S2SV> ret = min_t ( int , ret , sgp -> length - conn -> c_xmit_data_off ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> BUG_ON ( hdr_off || sg || off ) ; //<S2SV> rds_inc_init ( & rm -> m_inc , conn , conn -> c_laddr ) ; //<S2SV> rds_message_addref ( rm ) ; //<S2SV> rds_recv_incoming ( conn , conn -> c_laddr , conn -> c_faddr , & rm -> m_inc , //<S2SV> GFP_KERNEL , KM_USER0 ) ; //<S2SV> rds_send_drop_acked ( conn , be64_to_cpu ( rm -> m_inc . i_hdr . h_sequence ) , //<S2SV> NULL ) ; //<S2SV> rds_inc_put ( & rm -> m_inc ) ; //<S2SV> out : //<S2SV> return ret ; //<S2SV> } //<S2SV> 