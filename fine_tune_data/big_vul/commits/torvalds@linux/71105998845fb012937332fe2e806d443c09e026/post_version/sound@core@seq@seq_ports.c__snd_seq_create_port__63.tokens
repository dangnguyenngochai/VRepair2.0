struct snd_seq_client_port * snd_seq_create_port ( struct snd_seq_client * client , //<S2SV> int port ) //<S2SV> { //<S2SV> unsigned long flags ; //<S2SV> struct snd_seq_client_port * new_port , * p ; //<S2SV> int num = - 1 ; //<S2SV> if ( snd_BUG_ON ( ! client ) ) //<S2SV> return NULL ; //<S2SV> if ( client -> num_ports >= SNDRV_SEQ_MAX_PORTS ) { //<S2SV> pr_warn ( "ALSA:<S2SV_blank>seq:<S2SV_blank>too<S2SV_blank>many<S2SV_blank>ports<S2SV_blank>for<S2SV_blank>client<S2SV_blank>%d\\n" , client -> number ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> new_port = kzalloc ( sizeof ( * new_port ) , GFP_KERNEL ) ; //<S2SV> if ( ! new_port ) //<S2SV> return NULL ; //<S2SV> new_port -> addr . client = client -> number ; //<S2SV> new_port -> addr . port = - 1 ; //<S2SV> new_port -> owner = THIS_MODULE ; //<S2SV> sprintf ( new_port -> name , "port-%d" , num ) ; //<S2SV> snd_use_lock_init ( & new_port -> use_lock ) ; //<S2SV> port_subs_info_init ( & new_port -> c_src ) ; //<S2SV> port_subs_info_init ( & new_port -> c_dest ) ; //<S2SV> snd_use_lock_use ( & new_port -> use_lock ) ; //<S2SV> num = port >= 0 ? port : 0 ; //<S2SV> mutex_lock ( & client -> ports_mutex ) ; //<S2SV> write_lock_irqsave ( & client -> ports_lock , flags ) ; //<S2SV> list_for_each_entry ( p , & client -> ports_list_head , list ) { //<S2SV> if ( p -> addr . port > num ) //<S2SV> break ; //<S2SV> if ( port < 0 ) //<S2SV> num = p -> addr . port + 1 ; //<S2SV> } //<S2SV> list_add_tail ( & new_port -> list , & p -> list ) ; //<S2SV> client -> num_ports ++ ; //<S2SV> new_port -> addr . port = num ; //<S2SV> sprintf ( new_port -> name , "port-%d" , num ) ; //<S2SV> write_unlock_irqrestore ( & client -> ports_lock , flags ) ; //<S2SV> mutex_unlock ( & client -> ports_mutex ) ; //<S2SV> return new_port ; //<S2SV> } //<S2SV> 