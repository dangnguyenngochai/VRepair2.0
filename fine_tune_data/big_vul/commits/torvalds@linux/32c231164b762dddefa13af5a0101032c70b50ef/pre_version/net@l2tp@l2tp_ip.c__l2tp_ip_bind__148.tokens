static int l2tp_ip_bind ( struct sock * sk , struct sockaddr * uaddr , int addr_len ) //<S2SV> { //<S2SV> struct inet_sock * inet = inet_sk ( sk ) ; //<S2SV> struct sockaddr_l2tpip * addr = ( struct sockaddr_l2tpip * ) uaddr ; //<S2SV> struct net * net = sock_net ( sk ) ; //<S2SV> int ret ; //<S2SV> int chk_addr_ret ; //<S2SV> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( addr -> l2tp_family != AF_INET ) //<S2SV> return - EINVAL ; //<S2SV> ret = - EADDRINUSE ; //<S2SV> read_lock_bh ( & l2tp_ip_lock ) ; //<S2SV> if ( __l2tp_ip_bind_lookup ( net , addr -> l2tp_addr . s_addr , //<S2SV> sk -> sk_bound_dev_if , addr -> l2tp_conn_id ) ) //<S2SV> goto out_in_use ; //<S2SV> read_unlock_bh ( & l2tp_ip_lock ) ; //<S2SV> lock_sock ( sk ) ; //<S2SV> if ( sk -> sk_state != TCP_CLOSE || addr_len < sizeof ( struct sockaddr_l2tpip ) ) //<S2SV> goto out ; //<S2SV> chk_addr_ret = inet_addr_type ( net , addr -> l2tp_addr . s_addr ) ; //<S2SV> ret = - EADDRNOTAVAIL ; //<S2SV> if ( addr -> l2tp_addr . s_addr && chk_addr_ret != RTN_LOCAL && //<S2SV> chk_addr_ret != RTN_MULTICAST && chk_addr_ret != RTN_BROADCAST ) //<S2SV> goto out ; //<S2SV> if ( addr -> l2tp_addr . s_addr ) //<S2SV> inet -> inet_rcv_saddr = inet -> inet_saddr = addr -> l2tp_addr . s_addr ; //<S2SV> if ( chk_addr_ret == RTN_MULTICAST || chk_addr_ret == RTN_BROADCAST ) //<S2SV> inet -> inet_saddr = 0 ; //<S2SV> sk_dst_reset ( sk ) ; //<S2SV> l2tp_ip_sk ( sk ) -> conn_id = addr -> l2tp_conn_id ; //<S2SV> write_lock_bh ( & l2tp_ip_lock ) ; //<S2SV> sk_add_bind_node ( sk , & l2tp_ip_bind_table ) ; //<S2SV> sk_del_node_init ( sk ) ; //<S2SV> write_unlock_bh ( & l2tp_ip_lock ) ; //<S2SV> ret = 0 ; //<S2SV> sock_reset_flag ( sk , SOCK_ZAPPED ) ; //<S2SV> out : //<S2SV> release_sock ( sk ) ; //<S2SV> return ret ; //<S2SV> out_in_use : //<S2SV> read_unlock_bh ( & l2tp_ip_lock ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 