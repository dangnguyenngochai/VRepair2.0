static int l2tp_ip6_bind ( struct sock * sk , struct sockaddr * uaddr , int addr_len ) //<S2SV> { //<S2SV> struct inet_sock * inet = inet_sk ( sk ) ; //<S2SV> struct ipv6_pinfo * np = inet6_sk ( sk ) ; //<S2SV> struct sockaddr_l2tpip6 * addr = ( struct sockaddr_l2tpip6 * ) uaddr ; //<S2SV> struct net * net = sock_net ( sk ) ; //<S2SV> __be32 v4addr = 0 ; //<S2SV> int addr_type ; //<S2SV> int err ; //<S2SV> if ( addr -> l2tp_family != AF_INET6 ) //<S2SV> return - EINVAL ; //<S2SV> if ( addr_len < sizeof ( * addr ) ) //<S2SV> return - EINVAL ; //<S2SV> addr_type = ipv6_addr_type ( & addr -> l2tp_addr ) ; //<S2SV> if ( addr_type == IPV6_ADDR_MAPPED ) //<S2SV> return - EADDRNOTAVAIL ; //<S2SV> if ( addr_type & IPV6_ADDR_MULTICAST ) //<S2SV> return - EADDRNOTAVAIL ; //<S2SV> err = - EADDRINUSE ; //<S2SV> read_lock_bh ( & l2tp_ip6_lock ) ; //<S2SV> if ( __l2tp_ip6_bind_lookup ( net , & addr -> l2tp_addr , //<S2SV> sk -> sk_bound_dev_if , addr -> l2tp_conn_id ) ) //<S2SV> goto out_in_use ; //<S2SV> read_unlock_bh ( & l2tp_ip6_lock ) ; //<S2SV> lock_sock ( sk ) ; //<S2SV> err = - EINVAL ; //<S2SV> if ( ! sock_flag ( sk , SOCK_ZAPPED ) ) //<S2SV> goto out_unlock ; //<S2SV> if ( sk -> sk_state != TCP_CLOSE ) //<S2SV> goto out_unlock ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> if ( addr_type != IPV6_ADDR_ANY ) { //<S2SV> struct net_device * dev = NULL ; //<S2SV> if ( addr_type & IPV6_ADDR_LINKLOCAL ) { //<S2SV> if ( addr_len >= sizeof ( struct sockaddr_in6 ) && //<S2SV> addr -> l2tp_scope_id ) { //<S2SV> sk -> sk_bound_dev_if = addr -> l2tp_scope_id ; //<S2SV> } //<S2SV> if ( ! sk -> sk_bound_dev_if ) //<S2SV> goto out_unlock_rcu ; //<S2SV> err = - ENODEV ; //<S2SV> dev = dev_get_by_index_rcu ( sock_net ( sk ) , //<S2SV> sk -> sk_bound_dev_if ) ; //<S2SV> if ( ! dev ) //<S2SV> goto out_unlock_rcu ; //<S2SV> } //<S2SV> v4addr = LOOPBACK4_IPV6 ; //<S2SV> err = - EADDRNOTAVAIL ; //<S2SV> if ( ! ipv6_chk_addr ( sock_net ( sk ) , & addr -> l2tp_addr , dev , 0 ) ) //<S2SV> goto out_unlock_rcu ; //<S2SV> } //<S2SV> rcu_read_unlock ( ) ; //<S2SV> inet -> inet_rcv_saddr = inet -> inet_saddr = v4addr ; //<S2SV> sk -> sk_v6_rcv_saddr = addr -> l2tp_addr ; //<S2SV> np -> saddr = addr -> l2tp_addr ; //<S2SV> l2tp_ip6_sk ( sk ) -> conn_id = addr -> l2tp_conn_id ; //<S2SV> write_lock_bh ( & l2tp_ip6_lock ) ; //<S2SV> sk_add_bind_node ( sk , & l2tp_ip6_bind_table ) ; //<S2SV> sk_del_node_init ( sk ) ; //<S2SV> write_unlock_bh ( & l2tp_ip6_lock ) ; //<S2SV> sock_reset_flag ( sk , SOCK_ZAPPED ) ; //<S2SV> release_sock ( sk ) ; //<S2SV> return 0 ; //<S2SV> out_unlock_rcu : //<S2SV> rcu_read_unlock ( ) ; //<S2SV> out_unlock : //<S2SV> release_sock ( sk ) ; //<S2SV> return err ; //<S2SV> out_in_use : //<S2SV> read_unlock_bh ( & l2tp_ip6_lock ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 