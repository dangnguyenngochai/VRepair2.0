static int dccp_v6_send_response ( const struct sock * sk , struct request_sock * req ) //<S2SV> { //<S2SV> struct inet_request_sock * ireq = inet_rsk ( req ) ; //<S2SV> struct ipv6_pinfo * np = inet6_sk ( sk ) ; //<S2SV> struct sk_buff * skb ; //<S2SV> struct in6_addr * final_p , final ; //<S2SV> struct flowi6 fl6 ; //<S2SV> int err = - 1 ; //<S2SV> struct dst_entry * dst ; //<S2SV> memset ( & fl6 , 0 , sizeof ( fl6 ) ) ; //<S2SV> fl6 . flowi6_proto = IPPROTO_DCCP ; //<S2SV> fl6 . daddr = ireq -> ir_v6_rmt_addr ; //<S2SV> fl6 . saddr = ireq -> ir_v6_loc_addr ; //<S2SV> fl6 . flowlabel = 0 ; //<S2SV> fl6 . flowi6_oif = ireq -> ir_iif ; //<S2SV> fl6 . fl6_dport = ireq -> ir_rmt_port ; //<S2SV> fl6 . fl6_sport = htons ( ireq -> ir_num ) ; //<S2SV> security_req_classify_flow ( req , flowi6_to_flowi ( & fl6 ) ) ; //<S2SV> final_p = fl6_update_dst ( & fl6 , np -> opt , & final ) ; //<S2SV> dst = ip6_dst_lookup_flow ( sk , & fl6 , final_p ) ; //<S2SV> if ( IS_ERR ( dst ) ) { //<S2SV> err = PTR_ERR ( dst ) ; //<S2SV> dst = NULL ; //<S2SV> goto done ; //<S2SV> } //<S2SV> skb = dccp_make_response ( sk , dst , req ) ; //<S2SV> if ( skb != NULL ) { //<S2SV> struct dccp_hdr * dh = dccp_hdr ( skb ) ; //<S2SV> dh -> dccph_checksum = dccp_v6_csum_finish ( skb , //<S2SV> & ireq -> ir_v6_loc_addr , //<S2SV> & ireq -> ir_v6_rmt_addr ) ; //<S2SV> fl6 . daddr = ireq -> ir_v6_rmt_addr ; //<S2SV> err = ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; //<S2SV> err = net_xmit_eval ( err ) ; //<S2SV> } //<S2SV> done : //<S2SV> dst_release ( dst ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 