sctp_disposition_t sctp_sf_ootb ( struct net * net , //<S2SV> const struct sctp_endpoint * ep , //<S2SV> const struct sctp_association * asoc , //<S2SV> const sctp_subtype_t type , //<S2SV> void * arg , //<S2SV> sctp_cmd_seq_t * commands ) //<S2SV> { //<S2SV> struct sctp_chunk * chunk = arg ; //<S2SV> struct sk_buff * skb = chunk -> skb ; //<S2SV> sctp_chunkhdr_t * ch ; //<S2SV> sctp_errhdr_t * err ; //<S2SV> __u8 * ch_end ; //<S2SV> int ootb_shut_ack = 0 ; //<S2SV> int ootb_cookie_ack = 0 ; //<S2SV> SCTP_INC_STATS ( net , SCTP_MIB_OUTOFBLUES ) ; //<S2SV> ch = ( sctp_chunkhdr_t * ) chunk -> chunk_hdr ; //<S2SV> do { //<S2SV> if ( ntohs ( ch -> length ) < sizeof ( sctp_chunkhdr_t ) ) //<S2SV> return sctp_sf_violation_chunklen ( net , ep , asoc , type , arg , //<S2SV> commands ) ; //<S2SV> ch_end = ( ( __u8 * ) ch ) + SCTP_PAD4 ( ntohs ( ch -> length ) ) ; //<S2SV> if ( ch_end > skb_tail_pointer ( skb ) ) //<S2SV> return sctp_sf_violation_chunklen ( net , ep , asoc , type , arg , //<S2SV> commands ) ; //<S2SV> if ( SCTP_CID_SHUTDOWN_ACK == ch -> type ) //<S2SV> ootb_shut_ack = 1 ; //<S2SV> if ( SCTP_CID_ABORT == ch -> type ) //<S2SV> return sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; //<S2SV> if ( SCTP_CID_COOKIE_ACK == ch -> type ) //<S2SV> ootb_cookie_ack = 1 ; //<S2SV> if ( SCTP_CID_ERROR == ch -> type ) { //<S2SV> sctp_walk_errors ( err , ch ) { //<S2SV> if ( SCTP_ERROR_STALE_COOKIE == err -> cause ) { //<S2SV> ootb_cookie_ack = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> ch = ( sctp_chunkhdr_t * ) ch_end ; //<S2SV> } while ( ch_end < skb_tail_pointer ( skb ) ) ; //<S2SV> if ( ootb_shut_ack ) //<S2SV> return sctp_sf_shut_8_4_5 ( net , ep , asoc , type , arg , commands ) ; //<S2SV> else if ( ootb_cookie_ack ) //<S2SV> return sctp_sf_pdiscard ( net , ep , asoc , type , arg , commands ) ; //<S2SV> else //<S2SV> return sctp_sf_tabort_8_4_8 ( net , ep , asoc , type , arg , commands ) ; //<S2SV> } //<S2SV> 