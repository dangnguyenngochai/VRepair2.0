int inode_change_ok ( const struct inode * inode , struct iattr * attr ) //<S2SV> { //<S2SV> unsigned int ia_valid = attr -> ia_valid ; //<S2SV> if ( ia_valid & ATTR_SIZE ) { //<S2SV> int error = inode_newsize_ok ( inode , attr -> ia_size ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> } //<S2SV> if ( ia_valid & ATTR_FORCE ) //<S2SV> return 0 ; //<S2SV> if ( ( ia_valid & ATTR_UID ) && //<S2SV> ( ! uid_eq ( current_fsuid ( ) , inode -> i_uid ) || //<S2SV> ! uid_eq ( attr -> ia_uid , inode -> i_uid ) ) && //<S2SV> ! capable_wrt_inode_uidgid ( inode , CAP_CHOWN ) ) //<S2SV> return - EPERM ; //<S2SV> if ( ( ia_valid & ATTR_GID ) && //<S2SV> ( ! uid_eq ( current_fsuid ( ) , inode -> i_uid ) || //<S2SV> ( ! in_group_p ( attr -> ia_gid ) && ! gid_eq ( attr -> ia_gid , inode -> i_gid ) ) ) && //<S2SV> ! capable_wrt_inode_uidgid ( inode , CAP_CHOWN ) ) //<S2SV> return - EPERM ; //<S2SV> if ( ia_valid & ATTR_MODE ) { //<S2SV> if ( ! inode_owner_or_capable ( inode ) ) //<S2SV> return - EPERM ; //<S2SV> if ( ! in_group_p ( ( ia_valid & ATTR_GID ) ? attr -> ia_gid : //<S2SV> inode -> i_gid ) && //<S2SV> ! capable_wrt_inode_uidgid ( inode , CAP_FSETID ) ) //<S2SV> attr -> ia_mode &= ~ S_ISGID ; //<S2SV> } //<S2SV> if ( ia_valid & ( ATTR_MTIME_SET | ATTR_ATIME_SET | ATTR_TIMES_SET ) ) { //<S2SV> if ( ! inode_owner_or_capable ( inode ) ) //<S2SV> return - EPERM ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 