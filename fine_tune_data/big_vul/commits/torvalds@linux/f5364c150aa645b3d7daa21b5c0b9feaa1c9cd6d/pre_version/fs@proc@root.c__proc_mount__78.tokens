static struct dentry * proc_mount ( struct file_system_type * fs_type , //<S2SV> int flags , const char * dev_name , void * data ) //<S2SV> { //<S2SV> int err ; //<S2SV> struct super_block * sb ; //<S2SV> struct pid_namespace * ns ; //<S2SV> char * options ; //<S2SV> if ( flags & MS_KERNMOUNT ) { //<S2SV> ns = ( struct pid_namespace * ) data ; //<S2SV> options = NULL ; //<S2SV> } else { //<S2SV> ns = task_active_pid_ns ( current ) ; //<S2SV> options = data ; //<S2SV> if ( ! ns_capable ( ns -> user_ns , CAP_SYS_ADMIN ) ) //<S2SV> return ERR_PTR ( - EPERM ) ; //<S2SV> } //<S2SV> sb = sget ( fs_type , proc_test_super , proc_set_super , flags , ns ) ; //<S2SV> if ( IS_ERR ( sb ) ) //<S2SV> return ERR_CAST ( sb ) ; //<S2SV> if ( ! proc_parse_options ( options , ns ) ) { //<S2SV> deactivate_locked_super ( sb ) ; //<S2SV> return ERR_PTR ( - EINVAL ) ; //<S2SV> } //<S2SV> if ( ! sb -> s_root ) { //<S2SV> err = proc_fill_super ( sb ) ; //<S2SV> if ( err ) { //<S2SV> deactivate_locked_super ( sb ) ; //<S2SV> return ERR_PTR ( err ) ; //<S2SV> } //<S2SV> sb -> s_flags |= MS_ACTIVE ; //<S2SV> sb -> s_iflags |= SB_I_NOEXEC ; //<S2SV> } //<S2SV> return dget ( sb -> s_root ) ; //<S2SV> } //<S2SV> 