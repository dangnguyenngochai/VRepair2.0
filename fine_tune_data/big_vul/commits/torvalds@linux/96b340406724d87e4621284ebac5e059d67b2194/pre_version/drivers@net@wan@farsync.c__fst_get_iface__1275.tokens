static int //<S2SV> fst_get_iface ( struct fst_card_info * card , struct fst_port_info * port , //<S2SV> struct ifreq * ifr ) //<S2SV> { //<S2SV> sync_serial_settings sync ; //<S2SV> int i ; //<S2SV> switch ( port -> hwif ) { //<S2SV> case E1 : //<S2SV> ifr -> ifr_settings . type = IF_IFACE_E1 ; //<S2SV> break ; //<S2SV> case T1 : //<S2SV> ifr -> ifr_settings . type = IF_IFACE_T1 ; //<S2SV> break ; //<S2SV> case V35 : //<S2SV> ifr -> ifr_settings . type = IF_IFACE_V35 ; //<S2SV> break ; //<S2SV> case V24 : //<S2SV> ifr -> ifr_settings . type = IF_IFACE_V24 ; //<S2SV> break ; //<S2SV> case X21D : //<S2SV> ifr -> ifr_settings . type = IF_IFACE_X21D ; //<S2SV> break ; //<S2SV> case X21 : //<S2SV> default : //<S2SV> ifr -> ifr_settings . type = IF_IFACE_X21 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ifr -> ifr_settings . size == 0 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ifr -> ifr_settings . size < sizeof ( sync ) ) { //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> i = port -> index ; //<S2SV> sync . clock_rate = FST_RDL ( card , portConfig [ i ] . lineSpeed ) ; //<S2SV> sync . clock_type = FST_RDB ( card , portConfig [ i ] . internalClock ) == //<S2SV> INTCLK ? CLOCK_INT : CLOCK_EXT ; //<S2SV> sync . loopback = 0 ; //<S2SV> if ( copy_to_user ( ifr -> ifr_settings . ifs_ifsu . sync , & sync , sizeof ( sync ) ) ) { //<S2SV> return - EFAULT ; //<S2SV> } //<S2SV> ifr -> ifr_settings . size = sizeof ( sync ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 