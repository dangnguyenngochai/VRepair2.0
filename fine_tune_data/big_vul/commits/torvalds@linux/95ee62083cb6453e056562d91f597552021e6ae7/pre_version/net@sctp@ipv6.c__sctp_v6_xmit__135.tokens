static int sctp_v6_xmit ( struct sk_buff * skb , struct sctp_transport * transport ) //<S2SV> { //<S2SV> struct sock * sk = skb -> sk ; //<S2SV> struct ipv6_pinfo * np = inet6_sk ( sk ) ; //<S2SV> struct flowi6 fl6 ; //<S2SV> memset ( & fl6 , 0 , sizeof ( fl6 ) ) ; //<S2SV> fl6 . flowi6_proto = sk -> sk_protocol ; //<S2SV> fl6 . daddr = transport -> ipaddr . v6 . sin6_addr ; //<S2SV> fl6 . saddr = transport -> saddr . v6 . sin6_addr ; //<S2SV> fl6 . flowlabel = np -> flow_label ; //<S2SV> IP6_ECN_flow_xmit ( sk , fl6 . flowlabel ) ; //<S2SV> if ( ipv6_addr_type ( & fl6 . saddr ) & IPV6_ADDR_LINKLOCAL ) //<S2SV> fl6 . flowi6_oif = transport -> saddr . v6 . sin6_scope_id ; //<S2SV> else //<S2SV> fl6 . flowi6_oif = sk -> sk_bound_dev_if ; //<S2SV> if ( np -> opt && np -> opt -> srcrt ) { //<S2SV> struct rt0_hdr * rt0 = ( struct rt0_hdr * ) np -> opt -> srcrt ; //<S2SV> fl6 . daddr = * rt0 -> addr ; //<S2SV> } //<S2SV> pr_debug ( "%s:<S2SV_blank>skb:%p,<S2SV_blank>len:%d,<S2SV_blank>src:%pI6<S2SV_blank>dst:%pI6\\n" , __func__ , skb , //<S2SV> skb -> len , & fl6 . saddr , & fl6 . daddr ) ; //<S2SV> SCTP_INC_STATS ( sock_net ( sk ) , SCTP_MIB_OUTSCTPPACKS ) ; //<S2SV> if ( ! ( transport -> param_flags & SPP_PMTUD_ENABLE ) ) //<S2SV> skb -> local_df = 1 ; //<S2SV> return ip6_xmit ( sk , skb , & fl6 , np -> opt , np -> tclass ) ; //<S2SV> } //<S2SV> 