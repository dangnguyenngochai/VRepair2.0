static void bond_setup ( struct net_device * bond_dev ) //<S2SV> { //<S2SV> struct bonding * bond = netdev_priv ( bond_dev ) ; //<S2SV> rwlock_init ( & bond -> lock ) ; //<S2SV> rwlock_init ( & bond -> curr_slave_lock ) ; //<S2SV> bond -> params = bonding_defaults ; //<S2SV> bond -> dev = bond_dev ; //<S2SV> INIT_LIST_HEAD ( & bond -> vlan_list ) ; //<S2SV> ether_setup ( bond_dev ) ; //<S2SV> bond_dev -> netdev_ops = & bond_netdev_ops ; //<S2SV> bond_dev -> ethtool_ops = & bond_ethtool_ops ; //<S2SV> bond_set_mode_ops ( bond , bond -> params . mode ) ; //<S2SV> bond_dev -> destructor = bond_destructor ; //<S2SV> bond_dev -> tx_queue_len = 0 ; //<S2SV> bond_dev -> flags |= IFF_MASTER | IFF_MULTICAST ; //<S2SV> bond_dev -> priv_flags |= IFF_BONDING ; //<S2SV> bond_dev -> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) ; //<S2SV> bond_dev -> features |= NETIF_F_VLAN_CHALLENGED ; //<S2SV> bond_dev -> features |= NETIF_F_LLTX ; //<S2SV> bond_dev -> hw_features = BOND_VLAN_FEATURES | //<S2SV> NETIF_F_HW_VLAN_TX | //<S2SV> NETIF_F_HW_VLAN_RX | //<S2SV> NETIF_F_HW_VLAN_FILTER ; //<S2SV> bond_dev -> hw_features &= ~ ( NETIF_F_ALL_CSUM & ~ NETIF_F_NO_CSUM ) ; //<S2SV> bond_dev -> features |= bond_dev -> hw_features ; //<S2SV> } //<S2SV> 