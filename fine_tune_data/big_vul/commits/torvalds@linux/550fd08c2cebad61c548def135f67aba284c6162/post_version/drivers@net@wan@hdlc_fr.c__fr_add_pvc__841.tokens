static int fr_add_pvc ( struct net_device * frad , unsigned int dlci , int type ) //<S2SV> { //<S2SV> hdlc_device * hdlc = dev_to_hdlc ( frad ) ; //<S2SV> pvc_device * pvc ; //<S2SV> struct net_device * dev ; //<S2SV> int used ; //<S2SV> if ( ( pvc = add_pvc ( frad , dlci ) ) == NULL ) { //<S2SV> netdev_warn ( frad , "Memory<S2SV_blank>squeeze<S2SV_blank>on<S2SV_blank>fr_add_pvc()\\n" ) ; //<S2SV> return - ENOBUFS ; //<S2SV> } //<S2SV> if ( * get_dev_p ( pvc , type ) ) //<S2SV> return - EEXIST ; //<S2SV> used = pvc_is_used ( pvc ) ; //<S2SV> if ( type == ARPHRD_ETHER ) { //<S2SV> dev = alloc_netdev ( 0 , "pvceth%d" , ether_setup ) ; //<S2SV> dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; //<S2SV> } else //<S2SV> dev = alloc_netdev ( 0 , "pvc%d" , pvc_setup ) ; //<S2SV> if ( ! dev ) { //<S2SV> netdev_warn ( frad , "Memory<S2SV_blank>squeeze<S2SV_blank>on<S2SV_blank>fr_pvc()\\n" ) ; //<S2SV> delete_unused_pvcs ( hdlc ) ; //<S2SV> return - ENOBUFS ; //<S2SV> } //<S2SV> if ( type == ARPHRD_ETHER ) //<S2SV> random_ether_addr ( dev -> dev_addr ) ; //<S2SV> else { //<S2SV> * ( __be16 * ) dev -> dev_addr = htons ( dlci ) ; //<S2SV> dlci_to_q922 ( dev -> broadcast , dlci ) ; //<S2SV> } //<S2SV> dev -> netdev_ops = & pvc_ops ; //<S2SV> dev -> mtu = HDLC_MAX_MTU ; //<S2SV> dev -> tx_queue_len = 0 ; //<S2SV> dev -> ml_priv = pvc ; //<S2SV> if ( register_netdevice ( dev ) != 0 ) { //<S2SV> free_netdev ( dev ) ; //<S2SV> delete_unused_pvcs ( hdlc ) ; //<S2SV> return - EIO ; //<S2SV> } //<S2SV> dev -> destructor = free_netdev ; //<S2SV> * get_dev_p ( pvc , type ) = dev ; //<S2SV> if ( ! used ) { //<S2SV> state ( hdlc ) -> dce_changed = 1 ; //<S2SV> state ( hdlc ) -> dce_pvc_count ++ ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 