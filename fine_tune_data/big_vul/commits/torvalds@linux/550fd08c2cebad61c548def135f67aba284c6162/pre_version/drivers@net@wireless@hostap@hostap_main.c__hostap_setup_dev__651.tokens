void hostap_setup_dev ( struct net_device * dev , local_info_t * local , //<S2SV> int type ) //<S2SV> { //<S2SV> struct hostap_interface * iface ; //<S2SV> iface = netdev_priv ( dev ) ; //<S2SV> ether_setup ( dev ) ; //<S2SV> if ( iface ) { //<S2SV> iface -> wireless_data . spy_data = & iface -> spy_data ; //<S2SV> dev -> wireless_data = & iface -> wireless_data ; //<S2SV> } //<S2SV> dev -> wireless_handlers = & hostap_iw_handler_def ; //<S2SV> dev -> watchdog_timeo = TX_TIMEOUT ; //<S2SV> switch ( type ) { //<S2SV> case HOSTAP_INTERFACE_AP : //<S2SV> dev -> tx_queue_len = 0 ; //<S2SV> dev -> netdev_ops = & hostap_mgmt_netdev_ops ; //<S2SV> dev -> type = ARPHRD_IEEE80211 ; //<S2SV> dev -> header_ops = & hostap_80211_ops ; //<S2SV> break ; //<S2SV> case HOSTAP_INTERFACE_MASTER : //<S2SV> dev -> netdev_ops = & hostap_master_ops ; //<S2SV> break ; //<S2SV> default : //<S2SV> dev -> tx_queue_len = 0 ; //<S2SV> dev -> netdev_ops = & hostap_netdev_ops ; //<S2SV> } //<S2SV> dev -> mtu = local -> mtu ; //<S2SV> SET_ETHTOOL_OPS ( dev , & prism2_ethtool_ops ) ; //<S2SV> } //<S2SV> 