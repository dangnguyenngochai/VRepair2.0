static int apparmor_setprocattr ( struct task_struct * task , char * name , //<S2SV> void * value , size_t size ) //<S2SV> { //<S2SV> char * command , * args = value ; //<S2SV> size_t arg_size ; //<S2SV> int error ; //<S2SV> if ( size == 0 ) //<S2SV> return - EINVAL ; //<S2SV> if ( args [ size - 1 ] != '\\0' ) { //<S2SV> if ( size == PAGE_SIZE ) //<S2SV> return - EINVAL ; //<S2SV> args [ size ] = '\\0' ; //<S2SV> } //<S2SV> if ( current != task ) //<S2SV> return - EACCES ; //<S2SV> args = value ; //<S2SV> args = strim ( args ) ; //<S2SV> command = strsep ( & args , "<S2SV_blank>" ) ; //<S2SV> if ( ! args ) //<S2SV> return - EINVAL ; //<S2SV> args = skip_spaces ( args ) ; //<S2SV> if ( ! * args ) //<S2SV> return - EINVAL ; //<S2SV> arg_size = size - ( args - ( char * ) value ) ; //<S2SV> if ( strcmp ( name , "current" ) == 0 ) { //<S2SV> if ( strcmp ( command , "changehat" ) == 0 ) { //<S2SV> error = aa_setprocattr_changehat ( args , arg_size , //<S2SV> ! AA_DO_TEST ) ; //<S2SV> } else if ( strcmp ( command , "permhat" ) == 0 ) { //<S2SV> error = aa_setprocattr_changehat ( args , arg_size , //<S2SV> AA_DO_TEST ) ; //<S2SV> } else if ( strcmp ( command , "changeprofile" ) == 0 ) { //<S2SV> error = aa_setprocattr_changeprofile ( args , ! AA_ONEXEC , //<S2SV> ! AA_DO_TEST ) ; //<S2SV> } else if ( strcmp ( command , "permprofile" ) == 0 ) { //<S2SV> error = aa_setprocattr_changeprofile ( args , ! AA_ONEXEC , //<S2SV> AA_DO_TEST ) ; //<S2SV> } else if ( strcmp ( command , "permipc" ) == 0 ) { //<S2SV> error = aa_setprocattr_permipc ( args ) ; //<S2SV> } else { //<S2SV> struct common_audit_data sa ; //<S2SV> COMMON_AUDIT_DATA_INIT ( & sa , NONE ) ; //<S2SV> sa . aad . op = OP_SETPROCATTR ; //<S2SV> sa . aad . info = name ; //<S2SV> sa . aad . error = - EINVAL ; //<S2SV> return aa_audit ( AUDIT_APPARMOR_DENIED , //<S2SV> __aa_current_profile ( ) , GFP_KERNEL , //<S2SV> & sa , NULL ) ; //<S2SV> } //<S2SV> } else if ( strcmp ( name , "exec" ) == 0 ) { //<S2SV> error = aa_setprocattr_changeprofile ( args , AA_ONEXEC , //<S2SV> ! AA_DO_TEST ) ; //<S2SV> } else { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( ! error ) //<S2SV> error = size ; //<S2SV> return error ; //<S2SV> } //<S2SV> 