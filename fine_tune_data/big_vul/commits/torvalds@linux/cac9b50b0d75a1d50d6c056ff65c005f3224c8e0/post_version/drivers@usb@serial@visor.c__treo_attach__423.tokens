static int treo_attach ( struct usb_serial * serial ) //<S2SV> { //<S2SV> struct usb_serial_port * swap_port ; //<S2SV> if ( ! ( ( le16_to_cpu ( serial -> dev -> descriptor . idVendor ) //<S2SV> == HANDSPRING_VENDOR_ID ) || //<S2SV> ( le16_to_cpu ( serial -> dev -> descriptor . idVendor ) //<S2SV> == KYOCERA_VENDOR_ID ) ) || //<S2SV> ( serial -> num_interrupt_in == 0 ) ) //<S2SV> return 0 ; //<S2SV> if ( serial -> num_bulk_in < 2 || serial -> num_interrupt_in < 2 ) { //<S2SV> dev_err ( & serial -> interface -> dev , "missing<S2SV_blank>endpoints\\n" ) ; //<S2SV> return - ENODEV ; //<S2SV> } //<S2SV> # define COPY_PORT ( dest , src ) do { int i ; for ( i = 0 ; i < ARRAY_SIZE ( src -> read_urbs ) ; ++ i ) { dest -> read_urbs [ i ] = src -> read_urbs [ i ] ; dest -> read_urbs [ i ] -> context = dest ; dest -> bulk_in_buffers [ i ] = src -> bulk_in_buffers [ i ] ; } dest -> read_urb = src -> read_urb ; dest -> bulk_in_endpointAddress = src -> bulk_in_endpointAddress ; dest -> bulk_in_buffer = src -> bulk_in_buffer ; dest -> bulk_in_size = src -> bulk_in_size ; dest -> interrupt_in_urb = src -> interrupt_in_urb ; dest -> interrupt_in_urb -> context = dest ; dest -> interrupt_in_endpointAddress = src -> interrupt_in_endpointAddress ; dest -> interrupt_in_buffer = src -> interrupt_in_buffer ; } while ( 0 ) ; //<S2SV> swap_port = kmalloc ( sizeof ( * swap_port ) , GFP_KERNEL ) ; //<S2SV> if ( ! swap_port ) //<S2SV> return - ENOMEM ; //<S2SV> COPY_PORT ( swap_port , serial -> port [ 0 ] ) ; //<S2SV> COPY_PORT ( serial -> port [ 0 ] , serial -> port [ 1 ] ) ; //<S2SV> COPY_PORT ( serial -> port [ 1 ] , swap_port ) ; //<S2SV> kfree ( swap_port ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 