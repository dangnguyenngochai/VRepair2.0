static void logi_dj_recv_add_djhid_device ( struct dj_receiver_dev * djrcv_dev , //<S2SV> struct dj_report * dj_report ) //<S2SV> { //<S2SV> struct hid_device * djrcv_hdev = djrcv_dev -> hdev ; //<S2SV> struct usb_interface * intf = to_usb_interface ( djrcv_hdev -> dev . parent ) ; //<S2SV> struct usb_device * usbdev = interface_to_usbdev ( intf ) ; //<S2SV> struct hid_device * dj_hiddev ; //<S2SV> struct dj_device * dj_dev ; //<S2SV> unsigned char tmpstr [ 3 ] ; //<S2SV> if ( dj_report -> report_params [ DEVICE_PAIRED_PARAM_SPFUNCTION ] & //<S2SV> SPFUNCTION_DEVICE_LIST_EMPTY ) { //<S2SV> dbg_hid ( "%s:<S2SV_blank>device<S2SV_blank>list<S2SV_blank>is<S2SV_blank>empty\\n" , __func__ ) ; //<S2SV> djrcv_dev -> querying_devices = false ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || //<S2SV> ( dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) ) { //<S2SV> dev_err ( & djrcv_hdev -> dev , "%s:<S2SV_blank>invalid<S2SV_blank>device<S2SV_blank>index:%d\\n" , //<S2SV> __func__ , dj_report -> device_index ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( djrcv_dev -> paired_dj_devices [ dj_report -> device_index ] ) { //<S2SV> dbg_hid ( "%s:<S2SV_blank>device<S2SV_blank>is<S2SV_blank>already<S2SV_blank>known\\n" , __func__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> dj_hiddev = hid_allocate_device ( ) ; //<S2SV> if ( IS_ERR ( dj_hiddev ) ) { //<S2SV> dev_err ( & djrcv_hdev -> dev , "%s:<S2SV_blank>hid_allocate_device<S2SV_blank>failed\\n" , //<S2SV> __func__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> dj_hiddev -> ll_driver = & logi_dj_ll_driver ; //<S2SV> dj_hiddev -> dev . parent = & djrcv_hdev -> dev ; //<S2SV> dj_hiddev -> bus = BUS_USB ; //<S2SV> dj_hiddev -> vendor = le16_to_cpu ( usbdev -> descriptor . idVendor ) ; //<S2SV> dj_hiddev -> product = le16_to_cpu ( usbdev -> descriptor . idProduct ) ; //<S2SV> snprintf ( dj_hiddev -> name , sizeof ( dj_hiddev -> name ) , //<S2SV> "Logitech<S2SV_blank>Unifying<S2SV_blank>Device.<S2SV_blank>Wireless<S2SV_blank>PID:%02x%02x" , //<S2SV> dj_report -> report_params [ DEVICE_PAIRED_PARAM_EQUAD_ID_MSB ] , //<S2SV> dj_report -> report_params [ DEVICE_PAIRED_PARAM_EQUAD_ID_LSB ] ) ; //<S2SV> usb_make_path ( usbdev , dj_hiddev -> phys , sizeof ( dj_hiddev -> phys ) ) ; //<S2SV> snprintf ( tmpstr , sizeof ( tmpstr ) , ":%d" , dj_report -> device_index ) ; //<S2SV> strlcat ( dj_hiddev -> phys , tmpstr , sizeof ( dj_hiddev -> phys ) ) ; //<S2SV> dj_dev = kzalloc ( sizeof ( struct dj_device ) , GFP_KERNEL ) ; //<S2SV> if ( ! dj_dev ) { //<S2SV> dev_err ( & djrcv_hdev -> dev , "%s:<S2SV_blank>failed<S2SV_blank>allocating<S2SV_blank>dj_device\\n" , //<S2SV> __func__ ) ; //<S2SV> goto dj_device_allocate_fail ; //<S2SV> } //<S2SV> dj_dev -> reports_supported = get_unaligned_le32 ( //<S2SV> dj_report -> report_params + DEVICE_PAIRED_RF_REPORT_TYPE ) ; //<S2SV> dj_dev -> hdev = dj_hiddev ; //<S2SV> dj_dev -> dj_receiver_dev = djrcv_dev ; //<S2SV> dj_dev -> device_index = dj_report -> device_index ; //<S2SV> dj_hiddev -> driver_data = dj_dev ; //<S2SV> djrcv_dev -> paired_dj_devices [ dj_report -> device_index ] = dj_dev ; //<S2SV> if ( hid_add_device ( dj_hiddev ) ) { //<S2SV> dev_err ( & djrcv_hdev -> dev , "%s:<S2SV_blank>failed<S2SV_blank>adding<S2SV_blank>dj_device\\n" , //<S2SV> __func__ ) ; //<S2SV> goto hid_add_device_fail ; //<S2SV> } //<S2SV> return ; //<S2SV> hid_add_device_fail : //<S2SV> djrcv_dev -> paired_dj_devices [ dj_report -> device_index ] = NULL ; //<S2SV> kfree ( dj_dev ) ; //<S2SV> dj_device_allocate_fail : //<S2SV> hid_destroy_device ( dj_hiddev ) ; //<S2SV> } //<S2SV> 