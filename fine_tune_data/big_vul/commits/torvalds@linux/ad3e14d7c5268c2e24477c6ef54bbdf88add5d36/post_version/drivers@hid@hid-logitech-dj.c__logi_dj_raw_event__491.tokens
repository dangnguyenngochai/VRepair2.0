static int logi_dj_raw_event ( struct hid_device * hdev , //<S2SV> struct hid_report * report , u8 * data , //<S2SV> int size ) //<S2SV> { //<S2SV> struct dj_receiver_dev * djrcv_dev = hid_get_drvdata ( hdev ) ; //<S2SV> struct dj_report * dj_report = ( struct dj_report * ) data ; //<S2SV> unsigned long flags ; //<S2SV> bool report_processed = false ; //<S2SV> dbg_hid ( "%s,<S2SV_blank>size:%d\\n" , __func__ , size ) ; //<S2SV> if ( ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || //<S2SV> ( dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) ) { //<S2SV> dev_err ( & hdev -> dev , "%s:<S2SV_blank>invalid<S2SV_blank>device<S2SV_blank>index:%d\\n" , //<S2SV> __func__ , dj_report -> device_index ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> spin_lock_irqsave ( & djrcv_dev -> lock , flags ) ; //<S2SV> if ( dj_report -> report_id == REPORT_ID_DJ_SHORT ) { //<S2SV> switch ( dj_report -> report_type ) { //<S2SV> case REPORT_TYPE_NOTIF_DEVICE_PAIRED : //<S2SV> case REPORT_TYPE_NOTIF_DEVICE_UNPAIRED : //<S2SV> logi_dj_recv_queue_notification ( djrcv_dev , dj_report ) ; //<S2SV> break ; //<S2SV> case REPORT_TYPE_NOTIF_CONNECTION_STATUS : //<S2SV> if ( dj_report -> report_params [ CONNECTION_STATUS_PARAM_STATUS ] == //<S2SV> STATUS_LINKLOSS ) { //<S2SV> logi_dj_recv_forward_null_report ( djrcv_dev , dj_report ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> logi_dj_recv_forward_report ( djrcv_dev , dj_report ) ; //<S2SV> } //<S2SV> report_processed = true ; //<S2SV> } //<S2SV> spin_unlock_irqrestore ( & djrcv_dev -> lock , flags ) ; //<S2SV> return report_processed ; //<S2SV> } //<S2SV> 