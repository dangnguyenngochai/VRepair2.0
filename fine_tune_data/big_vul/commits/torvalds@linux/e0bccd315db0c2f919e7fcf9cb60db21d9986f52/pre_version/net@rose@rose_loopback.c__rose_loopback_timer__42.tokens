static void rose_loopback_timer ( unsigned long param ) //<S2SV> { //<S2SV> struct sk_buff * skb ; //<S2SV> struct net_device * dev ; //<S2SV> rose_address * dest ; //<S2SV> struct sock * sk ; //<S2SV> unsigned short frametype ; //<S2SV> unsigned int lci_i , lci_o ; //<S2SV> while ( ( skb = skb_dequeue ( & loopback_queue ) ) != NULL ) { //<S2SV> lci_i = ( ( skb -> data [ 0 ] << 8 ) & 0xF00 ) + ( ( skb -> data [ 1 ] << 0 ) & 0x0FF ) ; //<S2SV> frametype = skb -> data [ 2 ] ; //<S2SV> dest = ( rose_address * ) ( skb -> data + 4 ) ; //<S2SV> lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; //<S2SV> skb_reset_transport_header ( skb ) ; //<S2SV> sk = rose_find_socket ( lci_o , rose_loopback_neigh ) ; //<S2SV> if ( sk ) { //<S2SV> if ( rose_process_rx_frame ( sk , skb ) == 0 ) //<S2SV> kfree_skb ( skb ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( frametype == ROSE_CALL_REQUEST ) { //<S2SV> if ( ( dev = rose_dev_get ( dest ) ) != NULL ) { //<S2SV> if ( rose_rx_call_request ( skb , dev , rose_loopback_neigh , lci_o ) == 0 ) //<S2SV> kfree_skb ( skb ) ; //<S2SV> } else { //<S2SV> kfree_skb ( skb ) ; //<S2SV> } //<S2SV> } else { //<S2SV> kfree_skb ( skb ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 