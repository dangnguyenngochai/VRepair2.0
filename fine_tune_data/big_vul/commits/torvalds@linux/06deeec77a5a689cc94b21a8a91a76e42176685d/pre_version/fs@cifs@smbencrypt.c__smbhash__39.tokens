static int //<S2SV> smbhash ( unsigned char * out , const unsigned char * in , unsigned char * key ) //<S2SV> { //<S2SV> int rc ; //<S2SV> unsigned char key2 [ 8 ] ; //<S2SV> struct crypto_skcipher * tfm_des ; //<S2SV> struct scatterlist sgin , sgout ; //<S2SV> struct skcipher_request * req ; //<S2SV> str_to_key ( key , key2 ) ; //<S2SV> tfm_des = crypto_alloc_skcipher ( "ecb(des)" , 0 , CRYPTO_ALG_ASYNC ) ; //<S2SV> if ( IS_ERR ( tfm_des ) ) { //<S2SV> rc = PTR_ERR ( tfm_des ) ; //<S2SV> cifs_dbg ( VFS , "could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>des<S2SV_blank>crypto<S2SV_blank>API\\n" ) ; //<S2SV> goto smbhash_err ; //<S2SV> } //<S2SV> req = skcipher_request_alloc ( tfm_des , GFP_KERNEL ) ; //<S2SV> if ( ! req ) { //<S2SV> rc = - ENOMEM ; //<S2SV> cifs_dbg ( VFS , "could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>des<S2SV_blank>crypto<S2SV_blank>API\\n" ) ; //<S2SV> goto smbhash_free_skcipher ; //<S2SV> } //<S2SV> crypto_skcipher_setkey ( tfm_des , key2 , 8 ) ; //<S2SV> sg_init_one ( & sgin , in , 8 ) ; //<S2SV> sg_init_one ( & sgout , out , 8 ) ; //<S2SV> skcipher_request_set_callback ( req , 0 , NULL , NULL ) ; //<S2SV> skcipher_request_set_crypt ( req , & sgin , & sgout , 8 , NULL ) ; //<S2SV> rc = crypto_skcipher_encrypt ( req ) ; //<S2SV> if ( rc ) //<S2SV> cifs_dbg ( VFS , "could<S2SV_blank>not<S2SV_blank>encrypt<S2SV_blank>crypt<S2SV_blank>key<S2SV_blank>rc:<S2SV_blank>%d\\n" , rc ) ; //<S2SV> skcipher_request_free ( req ) ; //<S2SV> smbhash_free_skcipher : //<S2SV> crypto_free_skcipher ( tfm_des ) ; //<S2SV> smbhash_err : //<S2SV> return rc ; //<S2SV> } //<S2SV> 