long join_session_keyring ( const char * name ) //<S2SV> { //<S2SV> const struct cred * old ; //<S2SV> struct cred * new ; //<S2SV> struct key * keyring ; //<S2SV> long ret , serial ; //<S2SV> new = prepare_creds ( ) ; //<S2SV> if ( ! new ) //<S2SV> return - ENOMEM ; //<S2SV> old = current_cred ( ) ; //<S2SV> if ( ! name ) { //<S2SV> ret = install_session_keyring_to_cred ( new , NULL ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto error ; //<S2SV> serial = new -> session_keyring -> serial ; //<S2SV> ret = commit_creds ( new ) ; //<S2SV> if ( ret == 0 ) //<S2SV> ret = serial ; //<S2SV> goto okay ; //<S2SV> } //<S2SV> mutex_lock ( & key_session_mutex ) ; //<S2SV> keyring = find_keyring_by_name ( name , false ) ; //<S2SV> if ( PTR_ERR ( keyring ) == - ENOKEY ) { //<S2SV> keyring = keyring_alloc ( //<S2SV> name , old -> uid , old -> gid , old , //<S2SV> KEY_POS_ALL | KEY_USR_VIEW | KEY_USR_READ | KEY_USR_LINK , //<S2SV> KEY_ALLOC_IN_QUOTA , NULL ) ; //<S2SV> if ( IS_ERR ( keyring ) ) { //<S2SV> ret = PTR_ERR ( keyring ) ; //<S2SV> goto error2 ; //<S2SV> } //<S2SV> } else if ( IS_ERR ( keyring ) ) { //<S2SV> ret = PTR_ERR ( keyring ) ; //<S2SV> goto error2 ; //<S2SV> } else if ( keyring == new -> session_keyring ) { //<S2SV> ret = 0 ; //<S2SV> goto error2 ; //<S2SV> } //<S2SV> ret = install_session_keyring_to_cred ( new , keyring ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto error2 ; //<S2SV> commit_creds ( new ) ; //<S2SV> mutex_unlock ( & key_session_mutex ) ; //<S2SV> ret = keyring -> serial ; //<S2SV> key_put ( keyring ) ; //<S2SV> okay : //<S2SV> return ret ; //<S2SV> error2 : //<S2SV> mutex_unlock ( & key_session_mutex ) ; //<S2SV> error : //<S2SV> abort_creds ( new ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 