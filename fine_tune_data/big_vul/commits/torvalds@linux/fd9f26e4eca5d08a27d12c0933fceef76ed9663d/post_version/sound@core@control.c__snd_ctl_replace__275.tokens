int snd_ctl_replace ( struct snd_card * card , struct snd_kcontrol * kcontrol , //<S2SV> bool add_on_replace ) //<S2SV> { //<S2SV> struct snd_ctl_elem_id id ; //<S2SV> unsigned int count ; //<S2SV> unsigned int idx ; //<S2SV> struct snd_kcontrol * old ; //<S2SV> int ret ; //<S2SV> if ( ! kcontrol ) //<S2SV> return - EINVAL ; //<S2SV> if ( snd_BUG_ON ( ! card || ! kcontrol -> info ) ) { //<S2SV> ret = - EINVAL ; //<S2SV> goto error ; //<S2SV> } //<S2SV> id = kcontrol -> id ; //<S2SV> down_write ( & card -> controls_rwsem ) ; //<S2SV> old = snd_ctl_find_id ( card , & id ) ; //<S2SV> if ( ! old ) { //<S2SV> if ( add_on_replace ) //<S2SV> goto add ; //<S2SV> up_write ( & card -> controls_rwsem ) ; //<S2SV> ret = - EINVAL ; //<S2SV> goto error ; //<S2SV> } //<S2SV> ret = snd_ctl_remove ( card , old ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> up_write ( & card -> controls_rwsem ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> add : //<S2SV> if ( snd_ctl_find_hole ( card , kcontrol -> count ) < 0 ) { //<S2SV> up_write ( & card -> controls_rwsem ) ; //<S2SV> ret = - ENOMEM ; //<S2SV> goto error ; //<S2SV> } //<S2SV> list_add_tail ( & kcontrol -> list , & card -> controls ) ; //<S2SV> card -> controls_count += kcontrol -> count ; //<S2SV> kcontrol -> id . numid = card -> last_numid + 1 ; //<S2SV> card -> last_numid += kcontrol -> count ; //<S2SV> count = kcontrol -> count ; //<S2SV> up_write ( & card -> controls_rwsem ) ; //<S2SV> for ( idx = 0 ; idx < count ; idx ++ , id . index ++ , id . numid ++ ) //<S2SV> snd_ctl_notify ( card , SNDRV_CTL_EVENT_MASK_ADD , & id ) ; //<S2SV> return 0 ; //<S2SV> error : //<S2SV> snd_ctl_free_one ( kcontrol ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 