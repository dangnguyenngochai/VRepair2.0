static int snd_ctl_tlv_ioctl ( struct snd_ctl_file * file , //<S2SV> struct snd_ctl_tlv __user * _tlv , //<S2SV> int op_flag ) //<S2SV> { //<S2SV> struct snd_card * card = file -> card ; //<S2SV> struct snd_ctl_tlv tlv ; //<S2SV> struct snd_kcontrol * kctl ; //<S2SV> struct snd_kcontrol_volatile * vd ; //<S2SV> unsigned int len ; //<S2SV> int err = 0 ; //<S2SV> if ( copy_from_user ( & tlv , _tlv , sizeof ( tlv ) ) ) //<S2SV> return - EFAULT ; //<S2SV> if ( tlv . length < sizeof ( unsigned int ) * 2 ) //<S2SV> return - EINVAL ; //<S2SV> down_read ( & card -> controls_rwsem ) ; //<S2SV> kctl = snd_ctl_find_numid ( card , tlv . numid ) ; //<S2SV> if ( kctl == NULL ) { //<S2SV> err = - ENOENT ; //<S2SV> goto __kctl_end ; //<S2SV> } //<S2SV> if ( kctl -> tlv . p == NULL ) { //<S2SV> err = - ENXIO ; //<S2SV> goto __kctl_end ; //<S2SV> } //<S2SV> vd = & kctl -> vd [ tlv . numid - kctl -> id . numid ] ; //<S2SV> if ( ( op_flag == 0 && ( vd -> access & SNDRV_CTL_ELEM_ACCESS_TLV_READ ) == 0 ) || //<S2SV> ( op_flag > 0 && ( vd -> access & SNDRV_CTL_ELEM_ACCESS_TLV_WRITE ) == 0 ) || //<S2SV> ( op_flag < 0 && ( vd -> access & SNDRV_CTL_ELEM_ACCESS_TLV_COMMAND ) == 0 ) ) { //<S2SV> err = - ENXIO ; //<S2SV> goto __kctl_end ; //<S2SV> } //<S2SV> if ( vd -> access & SNDRV_CTL_ELEM_ACCESS_TLV_CALLBACK ) { //<S2SV> if ( vd -> owner != NULL && vd -> owner != file ) { //<S2SV> err = - EPERM ; //<S2SV> goto __kctl_end ; //<S2SV> } //<S2SV> err = kctl -> tlv . c ( kctl , op_flag , tlv . length , _tlv -> tlv ) ; //<S2SV> if ( err > 0 ) { //<S2SV> up_read ( & card -> controls_rwsem ) ; //<S2SV> snd_ctl_notify ( card , SNDRV_CTL_EVENT_MASK_TLV , & kctl -> id ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( op_flag ) { //<S2SV> err = - ENXIO ; //<S2SV> goto __kctl_end ; //<S2SV> } //<S2SV> len = kctl -> tlv . p [ 1 ] + 2 * sizeof ( unsigned int ) ; //<S2SV> if ( tlv . length < len ) { //<S2SV> err = - ENOMEM ; //<S2SV> goto __kctl_end ; //<S2SV> } //<S2SV> if ( copy_to_user ( _tlv -> tlv , kctl -> tlv . p , len ) ) //<S2SV> err = - EFAULT ; //<S2SV> } //<S2SV> __kctl_end : //<S2SV> up_read ( & card -> controls_rwsem ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 