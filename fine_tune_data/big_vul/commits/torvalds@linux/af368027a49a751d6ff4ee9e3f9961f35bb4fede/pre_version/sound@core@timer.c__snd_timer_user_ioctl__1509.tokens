static long snd_timer_user_ioctl ( struct file * file , unsigned int cmd , //<S2SV> unsigned long arg ) //<S2SV> { //<S2SV> struct snd_timer_user * tu ; //<S2SV> void __user * argp = ( void __user * ) arg ; //<S2SV> int __user * p = argp ; //<S2SV> tu = file -> private_data ; //<S2SV> switch ( cmd ) { //<S2SV> case SNDRV_TIMER_IOCTL_PVERSION : //<S2SV> return put_user ( SNDRV_TIMER_VERSION , p ) ? - EFAULT : 0 ; //<S2SV> case SNDRV_TIMER_IOCTL_NEXT_DEVICE : //<S2SV> return snd_timer_user_next_device ( argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_TREAD : //<S2SV> { //<S2SV> int xarg ; //<S2SV> mutex_lock ( & tu -> tread_sem ) ; //<S2SV> if ( tu -> timeri ) { //<S2SV> mutex_unlock ( & tu -> tread_sem ) ; //<S2SV> return - EBUSY ; //<S2SV> } //<S2SV> if ( get_user ( xarg , p ) ) { //<S2SV> mutex_unlock ( & tu -> tread_sem ) ; //<S2SV> return - EFAULT ; //<S2SV> } //<S2SV> tu -> tread = xarg ? 1 : 0 ; //<S2SV> mutex_unlock ( & tu -> tread_sem ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case SNDRV_TIMER_IOCTL_GINFO : //<S2SV> return snd_timer_user_ginfo ( file , argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_GPARAMS : //<S2SV> return snd_timer_user_gparams ( file , argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_GSTATUS : //<S2SV> return snd_timer_user_gstatus ( file , argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_SELECT : //<S2SV> return snd_timer_user_tselect ( file , argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_INFO : //<S2SV> return snd_timer_user_info ( file , argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_PARAMS : //<S2SV> return snd_timer_user_params ( file , argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_STATUS : //<S2SV> return snd_timer_user_status ( file , argp ) ; //<S2SV> case SNDRV_TIMER_IOCTL_START : //<S2SV> case SNDRV_TIMER_IOCTL_START_OLD : //<S2SV> return snd_timer_user_start ( file ) ; //<S2SV> case SNDRV_TIMER_IOCTL_STOP : //<S2SV> case SNDRV_TIMER_IOCTL_STOP_OLD : //<S2SV> return snd_timer_user_stop ( file ) ; //<S2SV> case SNDRV_TIMER_IOCTL_CONTINUE : //<S2SV> case SNDRV_TIMER_IOCTL_CONTINUE_OLD : //<S2SV> return snd_timer_user_continue ( file ) ; //<S2SV> case SNDRV_TIMER_IOCTL_PAUSE : //<S2SV> case SNDRV_TIMER_IOCTL_PAUSE_OLD : //<S2SV> return snd_timer_user_pause ( file ) ; //<S2SV> } //<S2SV> return - ENOTTY ; //<S2SV> } //<S2SV> 