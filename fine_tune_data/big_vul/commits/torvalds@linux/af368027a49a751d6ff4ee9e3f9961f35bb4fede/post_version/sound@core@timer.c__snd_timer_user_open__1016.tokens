static int snd_timer_user_open ( struct inode * inode , struct file * file ) //<S2SV> { //<S2SV> struct snd_timer_user * tu ; //<S2SV> int err ; //<S2SV> err = nonseekable_open ( inode , file ) ; //<S2SV> if ( err < 0 ) //<S2SV> return err ; //<S2SV> tu = kzalloc ( sizeof ( * tu ) , GFP_KERNEL ) ; //<S2SV> if ( tu == NULL ) //<S2SV> return - ENOMEM ; //<S2SV> spin_lock_init ( & tu -> qlock ) ; //<S2SV> init_waitqueue_head ( & tu -> qchange_sleep ) ; //<S2SV> mutex_init ( & tu -> ioctl_lock ) ; //<S2SV> tu -> ticks = 1 ; //<S2SV> tu -> queue_size = 128 ; //<S2SV> tu -> queue = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ) , //<S2SV> GFP_KERNEL ) ; //<S2SV> if ( tu -> queue == NULL ) { //<S2SV> kfree ( tu ) ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> file -> private_data = tu ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 