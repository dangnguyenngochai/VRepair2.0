static void chase_port ( struct edgeport_port * port , unsigned long timeout , //<S2SV> int flush ) //<S2SV> { //<S2SV> int baud_rate ; //<S2SV> struct tty_struct * tty = tty_port_tty_get ( & port -> port -> port ) ; //<S2SV> struct usb_serial * serial = port -> port -> serial ; //<S2SV> wait_queue_t wait ; //<S2SV> unsigned long flags ; //<S2SV> if ( ! timeout ) //<S2SV> timeout = ( HZ * EDGE_CLOSING_WAIT ) / 100 ; //<S2SV> spin_lock_irqsave ( & port -> ep_lock , flags ) ; //<S2SV> init_waitqueue_entry ( & wait , current ) ; //<S2SV> add_wait_queue ( & tty -> write_wait , & wait ) ; //<S2SV> for ( ; ; ) { //<S2SV> set_current_state ( TASK_INTERRUPTIBLE ) ; //<S2SV> if ( kfifo_len ( & port -> write_fifo ) == 0 //<S2SV> || timeout == 0 || signal_pending ( current ) //<S2SV> || serial -> disconnected ) //<S2SV> break ; //<S2SV> spin_unlock_irqrestore ( & port -> ep_lock , flags ) ; //<S2SV> timeout = schedule_timeout ( timeout ) ; //<S2SV> spin_lock_irqsave ( & port -> ep_lock , flags ) ; //<S2SV> } //<S2SV> set_current_state ( TASK_RUNNING ) ; //<S2SV> remove_wait_queue ( & tty -> write_wait , & wait ) ; //<S2SV> if ( flush ) //<S2SV> kfifo_reset_out ( & port -> write_fifo ) ; //<S2SV> spin_unlock_irqrestore ( & port -> ep_lock , flags ) ; //<S2SV> tty_kref_put ( tty ) ; //<S2SV> timeout += jiffies ; //<S2SV> while ( ( long ) ( jiffies - timeout ) < 0 && ! signal_pending ( current ) //<S2SV> && ! serial -> disconnected ) { //<S2SV> if ( ! tx_active ( port ) ) //<S2SV> break ; //<S2SV> msleep ( 10 ) ; //<S2SV> } //<S2SV> if ( serial -> disconnected ) //<S2SV> return ; //<S2SV> baud_rate = port -> baud_rate ; //<S2SV> if ( baud_rate == 0 ) //<S2SV> baud_rate = 50 ; //<S2SV> msleep ( max ( 1 , DIV_ROUND_UP ( 10000 , baud_rate ) ) ) ; //<S2SV> } //<S2SV> 