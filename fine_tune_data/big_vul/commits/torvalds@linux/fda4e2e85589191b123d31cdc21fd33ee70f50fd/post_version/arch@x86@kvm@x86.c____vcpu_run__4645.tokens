static int __vcpu_run ( struct kvm_vcpu * vcpu ) //<S2SV> { //<S2SV> int r ; //<S2SV> struct kvm * kvm = vcpu -> kvm ; //<S2SV> vcpu -> srcu_idx = srcu_read_lock ( & kvm -> srcu ) ; //<S2SV> r = 1 ; //<S2SV> while ( r > 0 ) { //<S2SV> if ( vcpu -> arch . mp_state == KVM_MP_STATE_RUNNABLE && //<S2SV> ! vcpu -> arch . apf . halted ) //<S2SV> r = vcpu_enter_guest ( vcpu ) ; //<S2SV> else { //<S2SV> srcu_read_unlock ( & kvm -> srcu , vcpu -> srcu_idx ) ; //<S2SV> kvm_vcpu_block ( vcpu ) ; //<S2SV> vcpu -> srcu_idx = srcu_read_lock ( & kvm -> srcu ) ; //<S2SV> if ( kvm_check_request ( KVM_REQ_UNHALT , vcpu ) ) { //<S2SV> kvm_apic_accept_events ( vcpu ) ; //<S2SV> switch ( vcpu -> arch . mp_state ) { //<S2SV> case KVM_MP_STATE_HALTED : //<S2SV> vcpu -> arch . pv . pv_unhalted = false ; //<S2SV> vcpu -> arch . mp_state = //<S2SV> KVM_MP_STATE_RUNNABLE ; //<S2SV> case KVM_MP_STATE_RUNNABLE : //<S2SV> vcpu -> arch . apf . halted = false ; //<S2SV> break ; //<S2SV> case KVM_MP_STATE_INIT_RECEIVED : //<S2SV> break ; //<S2SV> default : //<S2SV> r = - EINTR ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( r <= 0 ) //<S2SV> break ; //<S2SV> clear_bit ( KVM_REQ_PENDING_TIMER , & vcpu -> requests ) ; //<S2SV> if ( kvm_cpu_has_pending_timer ( vcpu ) ) //<S2SV> kvm_inject_pending_timer_irqs ( vcpu ) ; //<S2SV> if ( dm_request_for_irq_injection ( vcpu ) ) { //<S2SV> r = - EINTR ; //<S2SV> vcpu -> run -> exit_reason = KVM_EXIT_INTR ; //<S2SV> ++ vcpu -> stat . request_irq_exits ; //<S2SV> } //<S2SV> kvm_check_async_pf_completion ( vcpu ) ; //<S2SV> if ( signal_pending ( current ) ) { //<S2SV> r = - EINTR ; //<S2SV> vcpu -> run -> exit_reason = KVM_EXIT_INTR ; //<S2SV> ++ vcpu -> stat . signal_exits ; //<S2SV> } //<S2SV> if ( need_resched ( ) ) { //<S2SV> srcu_read_unlock ( & kvm -> srcu , vcpu -> srcu_idx ) ; //<S2SV> kvm_resched ( vcpu ) ; //<S2SV> vcpu -> srcu_idx = srcu_read_lock ( & kvm -> srcu ) ; //<S2SV> } //<S2SV> } //<S2SV> srcu_read_unlock ( & kvm -> srcu , vcpu -> srcu_idx ) ; //<S2SV> return r ; //<S2SV> } //<S2SV> 