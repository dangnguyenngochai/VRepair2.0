int compat_get_timex ( struct timex * txc , const struct compat_timex __user * utp ) //<S2SV> { //<S2SV> struct compat_timex tx32 ; //<S2SV> if ( copy_from_user ( & tx32 , utp , sizeof ( struct compat_timex ) ) ) //<S2SV> return - EFAULT ; //<S2SV> txc -> modes = tx32 . modes ; //<S2SV> txc -> offset = tx32 . offset ; //<S2SV> txc -> freq = tx32 . freq ; //<S2SV> txc -> maxerror = tx32 . maxerror ; //<S2SV> txc -> esterror = tx32 . esterror ; //<S2SV> txc -> status = tx32 . status ; //<S2SV> txc -> constant = tx32 . constant ; //<S2SV> txc -> precision = tx32 . precision ; //<S2SV> txc -> tolerance = tx32 . tolerance ; //<S2SV> txc -> time . tv_sec = tx32 . time . tv_sec ; //<S2SV> txc -> time . tv_usec = tx32 . time . tv_usec ; //<S2SV> txc -> tick = tx32 . tick ; //<S2SV> txc -> ppsfreq = tx32 . ppsfreq ; //<S2SV> txc -> jitter = tx32 . jitter ; //<S2SV> txc -> shift = tx32 . shift ; //<S2SV> txc -> stabil = tx32 . stabil ; //<S2SV> txc -> jitcnt = tx32 . jitcnt ; //<S2SV> txc -> calcnt = tx32 . calcnt ; //<S2SV> txc -> errcnt = tx32 . errcnt ; //<S2SV> txc -> stbcnt = tx32 . stbcnt ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 