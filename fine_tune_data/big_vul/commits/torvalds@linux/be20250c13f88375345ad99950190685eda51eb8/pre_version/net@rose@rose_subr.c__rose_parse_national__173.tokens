static int rose_parse_national ( unsigned char * p , struct rose_facilities_struct * facilities , int len ) //<S2SV> { //<S2SV> unsigned char * pt ; //<S2SV> unsigned char l , lg , n = 0 ; //<S2SV> int fac_national_digis_received = 0 ; //<S2SV> do { //<S2SV> switch ( * p & 0xC0 ) { //<S2SV> case 0x00 : //<S2SV> p += 2 ; //<S2SV> n += 2 ; //<S2SV> len -= 2 ; //<S2SV> break ; //<S2SV> case 0x40 : //<S2SV> if ( * p == FAC_NATIONAL_RAND ) //<S2SV> facilities -> rand = ( ( p [ 1 ] << 8 ) & 0xFF00 ) + ( ( p [ 2 ] << 0 ) & 0x00FF ) ; //<S2SV> p += 3 ; //<S2SV> n += 3 ; //<S2SV> len -= 3 ; //<S2SV> break ; //<S2SV> case 0x80 : //<S2SV> p += 4 ; //<S2SV> n += 4 ; //<S2SV> len -= 4 ; //<S2SV> break ; //<S2SV> case 0xC0 : //<S2SV> l = p [ 1 ] ; //<S2SV> if ( * p == FAC_NATIONAL_DEST_DIGI ) { //<S2SV> if ( ! fac_national_digis_received ) { //<S2SV> memcpy ( & facilities -> source_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; //<S2SV> facilities -> source_ndigis = 1 ; //<S2SV> } //<S2SV> } //<S2SV> else if ( * p == FAC_NATIONAL_SRC_DIGI ) { //<S2SV> if ( ! fac_national_digis_received ) { //<S2SV> memcpy ( & facilities -> dest_digis [ 0 ] , p + 2 , AX25_ADDR_LEN ) ; //<S2SV> facilities -> dest_ndigis = 1 ; //<S2SV> } //<S2SV> } //<S2SV> else if ( * p == FAC_NATIONAL_FAIL_CALL ) { //<S2SV> memcpy ( & facilities -> fail_call , p + 2 , AX25_ADDR_LEN ) ; //<S2SV> } //<S2SV> else if ( * p == FAC_NATIONAL_FAIL_ADD ) { //<S2SV> memcpy ( & facilities -> fail_addr , p + 3 , ROSE_ADDR_LEN ) ; //<S2SV> } //<S2SV> else if ( * p == FAC_NATIONAL_DIGIS ) { //<S2SV> fac_national_digis_received = 1 ; //<S2SV> facilities -> source_ndigis = 0 ; //<S2SV> facilities -> dest_ndigis = 0 ; //<S2SV> for ( pt = p + 2 , lg = 0 ; lg < l ; pt += AX25_ADDR_LEN , lg += AX25_ADDR_LEN ) { //<S2SV> if ( pt [ 6 ] & AX25_HBIT ) //<S2SV> memcpy ( & facilities -> dest_digis [ facilities -> dest_ndigis ++ ] , pt , AX25_ADDR_LEN ) ; //<S2SV> else //<S2SV> memcpy ( & facilities -> source_digis [ facilities -> source_ndigis ++ ] , pt , AX25_ADDR_LEN ) ; //<S2SV> } //<S2SV> } //<S2SV> p += l + 2 ; //<S2SV> n += l + 2 ; //<S2SV> len -= l + 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> } while ( * p != 0x00 && len > 0 ) ; //<S2SV> return n ; //<S2SV> } //<S2SV> 