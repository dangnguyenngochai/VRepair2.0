static int rose_parse_ccitt ( unsigned char * p , struct rose_facilities_struct * facilities , int len ) //<S2SV> { //<S2SV> unsigned char l , n = 0 ; //<S2SV> char callsign [ 11 ] ; //<S2SV> do { //<S2SV> switch ( * p & 0xC0 ) { //<S2SV> case 0x00 : //<S2SV> p += 2 ; //<S2SV> n += 2 ; //<S2SV> len -= 2 ; //<S2SV> break ; //<S2SV> case 0x40 : //<S2SV> p += 3 ; //<S2SV> n += 3 ; //<S2SV> len -= 3 ; //<S2SV> break ; //<S2SV> case 0x80 : //<S2SV> p += 4 ; //<S2SV> n += 4 ; //<S2SV> len -= 4 ; //<S2SV> break ; //<S2SV> case 0xC0 : //<S2SV> l = p [ 1 ] ; //<S2SV> if ( * p == FAC_CCITT_DEST_NSAP ) { //<S2SV> memcpy ( & facilities -> source_addr , p + 7 , ROSE_ADDR_LEN ) ; //<S2SV> memcpy ( callsign , p + 12 , l - 10 ) ; //<S2SV> callsign [ l - 10 ] = '\\0' ; //<S2SV> asc2ax ( & facilities -> source_call , callsign ) ; //<S2SV> } //<S2SV> if ( * p == FAC_CCITT_SRC_NSAP ) { //<S2SV> memcpy ( & facilities -> dest_addr , p + 7 , ROSE_ADDR_LEN ) ; //<S2SV> memcpy ( callsign , p + 12 , l - 10 ) ; //<S2SV> callsign [ l - 10 ] = '\\0' ; //<S2SV> asc2ax ( & facilities -> dest_call , callsign ) ; //<S2SV> } //<S2SV> p += l + 2 ; //<S2SV> n += l + 2 ; //<S2SV> len -= l + 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> } while ( * p != 0x00 && len > 0 ) ; //<S2SV> return n ; //<S2SV> } //<S2SV> 