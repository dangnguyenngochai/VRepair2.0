int //<S2SV> nfs3svc_decode_symlinkargs ( struct svc_rqst * rqstp , __be32 * p , //<S2SV> struct nfsd3_symlinkargs * args ) //<S2SV> { //<S2SV> unsigned int len , avail ; //<S2SV> char * old , * new ; //<S2SV> struct kvec * vec ; //<S2SV> if ( ! ( p = decode_fh ( p , & args -> ffh ) ) || //<S2SV> ! ( p = decode_filename ( p , & args -> fname , & args -> flen ) ) //<S2SV> ) //<S2SV> return 0 ; //<S2SV> p = decode_sattr3 ( p , & args -> attrs ) ; //<S2SV> len = ntohl ( * p ++ ) ; //<S2SV> if ( len == 0 || len > NFS3_MAXPATHLEN || len >= PAGE_SIZE ) //<S2SV> return 0 ; //<S2SV> args -> tname = new = page_address ( * ( rqstp -> rq_next_page ++ ) ) ; //<S2SV> args -> tlen = len ; //<S2SV> old = ( char * ) p ; //<S2SV> vec = & rqstp -> rq_arg . head [ 0 ] ; //<S2SV> avail = vec -> iov_len - ( old - ( char * ) vec -> iov_base ) ; //<S2SV> while ( len && avail && * old ) { //<S2SV> * new ++ = * old ++ ; //<S2SV> len -- ; //<S2SV> avail -- ; //<S2SV> } //<S2SV> if ( len && ! avail && rqstp -> rq_arg . page_len ) { //<S2SV> avail = min_t ( unsigned int , rqstp -> rq_arg . page_len , PAGE_SIZE ) ; //<S2SV> old = page_address ( rqstp -> rq_arg . pages [ 0 ] ) ; //<S2SV> } //<S2SV> while ( len && avail && * old ) { //<S2SV> * new ++ = * old ++ ; //<S2SV> len -- ; //<S2SV> avail -- ; //<S2SV> } //<S2SV> * new = '\\0' ; //<S2SV> if ( len ) //<S2SV> return 0 ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 