static int br_parse_ip_options ( struct sk_buff * skb ) //<S2SV> { //<S2SV> struct ip_options * opt ; //<S2SV> struct iphdr * iph ; //<S2SV> struct net_device * dev = skb -> dev ; //<S2SV> u32 len ; //<S2SV> iph = ip_hdr ( skb ) ; //<S2SV> opt = & ( IPCB ( skb ) -> opt ) ; //<S2SV> if ( iph -> ihl < 5 || iph -> version != 4 ) //<S2SV> goto inhdr_error ; //<S2SV> if ( ! pskb_may_pull ( skb , iph -> ihl * 4 ) ) //<S2SV> goto inhdr_error ; //<S2SV> iph = ip_hdr ( skb ) ; //<S2SV> if ( unlikely ( ip_fast_csum ( ( u8 * ) iph , iph -> ihl ) ) ) //<S2SV> goto inhdr_error ; //<S2SV> len = ntohs ( iph -> tot_len ) ; //<S2SV> if ( skb -> len < len ) { //<S2SV> IP_INC_STATS_BH ( dev_net ( dev ) , IPSTATS_MIB_INTRUNCATEDPKTS ) ; //<S2SV> goto drop ; //<S2SV> } else if ( len < ( iph -> ihl * 4 ) ) //<S2SV> goto inhdr_error ; //<S2SV> if ( pskb_trim_rcsum ( skb , len ) ) { //<S2SV> IP_INC_STATS_BH ( dev_net ( dev ) , IPSTATS_MIB_INDISCARDS ) ; //<S2SV> goto drop ; //<S2SV> } //<S2SV> if ( iph -> ihl == 5 ) { //<S2SV> memset ( IPCB ( skb ) , 0 , sizeof ( struct inet_skb_parm ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; //<S2SV> if ( ip_options_compile ( dev_net ( dev ) , opt , skb ) ) //<S2SV> goto inhdr_error ; //<S2SV> if ( unlikely ( opt -> srr ) ) { //<S2SV> struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; //<S2SV> if ( in_dev && ! IN_DEV_SOURCE_ROUTE ( in_dev ) ) //<S2SV> goto drop ; //<S2SV> if ( ip_options_rcv_srr ( skb ) ) //<S2SV> goto drop ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> inhdr_error : //<S2SV> IP_INC_STATS_BH ( dev_net ( dev ) , IPSTATS_MIB_INHDRERRORS ) ; //<S2SV> drop : //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 