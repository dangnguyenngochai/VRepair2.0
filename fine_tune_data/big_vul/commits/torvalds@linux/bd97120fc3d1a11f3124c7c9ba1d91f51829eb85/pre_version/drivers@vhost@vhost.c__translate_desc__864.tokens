static int translate_desc ( struct vhost_dev * dev , u64 addr , u32 len , //<S2SV> struct iovec iov [ ] , int iov_size ) //<S2SV> { //<S2SV> const struct vhost_memory_region * reg ; //<S2SV> struct vhost_memory * mem ; //<S2SV> struct iovec * _iov ; //<S2SV> u64 s = 0 ; //<S2SV> int ret = 0 ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> mem = rcu_dereference ( dev -> memory ) ; //<S2SV> while ( ( u64 ) len > s ) { //<S2SV> u64 size ; //<S2SV> if ( unlikely ( ret >= iov_size ) ) { //<S2SV> ret = - ENOBUFS ; //<S2SV> break ; //<S2SV> } //<S2SV> reg = find_region ( mem , addr , len ) ; //<S2SV> if ( unlikely ( ! reg ) ) { //<S2SV> ret = - EFAULT ; //<S2SV> break ; //<S2SV> } //<S2SV> _iov = iov + ret ; //<S2SV> size = reg -> memory_size - addr + reg -> guest_phys_addr ; //<S2SV> _iov -> iov_len = min ( ( u64 ) len , size ) ; //<S2SV> _iov -> iov_base = ( void __user * ) ( unsigned long ) //<S2SV> ( reg -> userspace_addr + addr - reg -> guest_phys_addr ) ; //<S2SV> s += size ; //<S2SV> addr += size ; //<S2SV> ++ ret ; //<S2SV> } //<S2SV> rcu_read_unlock ( ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 