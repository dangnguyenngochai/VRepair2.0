static __u8 * lg_report_fixup ( struct hid_device * hdev , __u8 * rdesc , //<S2SV> unsigned int * rsize ) //<S2SV> { //<S2SV> struct lg_drv_data * drv_data = hid_get_drvdata ( hdev ) ; //<S2SV> struct usb_device_descriptor * udesc ; //<S2SV> __u16 bcdDevice , rev_maj , rev_min ; //<S2SV> if ( ( drv_data -> quirks & LG_RDESC ) && * rsize >= 90 && rdesc [ 83 ] == 0x26 && //<S2SV> rdesc [ 84 ] == 0x8c && rdesc [ 85 ] == 0x02 ) { //<S2SV> hid_info ( hdev , //<S2SV> "fixing<S2SV_blank>up<S2SV_blank>Logitech<S2SV_blank>keyboard<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc [ 84 ] = rdesc [ 89 ] = 0x4d ; //<S2SV> rdesc [ 85 ] = rdesc [ 90 ] = 0x10 ; //<S2SV> } //<S2SV> if ( ( drv_data -> quirks & LG_RDESC_REL_ABS ) && * rsize >= 50 && //<S2SV> rdesc [ 32 ] == 0x81 && rdesc [ 33 ] == 0x06 && //<S2SV> rdesc [ 49 ] == 0x81 && rdesc [ 50 ] == 0x06 ) { //<S2SV> hid_info ( hdev , //<S2SV> "fixing<S2SV_blank>up<S2SV_blank>rel/abs<S2SV_blank>in<S2SV_blank>Logitech<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc [ 33 ] = rdesc [ 50 ] = 0x02 ; //<S2SV> } //<S2SV> switch ( hdev -> product ) { //<S2SV> case USB_DEVICE_ID_LOGITECH_WHEEL : //<S2SV> udesc = & ( hid_to_usb_dev ( hdev ) -> descriptor ) ; //<S2SV> if ( ! udesc ) { //<S2SV> hid_err ( hdev , "NULL<S2SV_blank>USB<S2SV_blank>device<S2SV_blank>descriptor\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bcdDevice = le16_to_cpu ( udesc -> bcdDevice ) ; //<S2SV> rev_maj = bcdDevice >> 8 ; //<S2SV> rev_min = bcdDevice & 0xff ; //<S2SV> if ( rev_maj == 1 && rev_min == 2 && //<S2SV> * rsize == DF_RDESC_ORIG_SIZE ) { //<S2SV> hid_info ( hdev , //<S2SV> "fixing<S2SV_blank>up<S2SV_blank>Logitech<S2SV_blank>Driving<S2SV_blank>Force<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc = df_rdesc_fixed ; //<S2SV> * rsize = sizeof ( df_rdesc_fixed ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case USB_DEVICE_ID_LOGITECH_MOMO_WHEEL : //<S2SV> if ( * rsize == MOMO_RDESC_ORIG_SIZE ) { //<S2SV> hid_info ( hdev , //<S2SV> "fixing<S2SV_blank>up<S2SV_blank>Logitech<S2SV_blank>Momo<S2SV_blank>Force<S2SV_blank>(Red)<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc = momo_rdesc_fixed ; //<S2SV> * rsize = sizeof ( momo_rdesc_fixed ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case USB_DEVICE_ID_LOGITECH_MOMO_WHEEL2 : //<S2SV> if ( * rsize == MOMO2_RDESC_ORIG_SIZE ) { //<S2SV> hid_info ( hdev , //<S2SV> "fixing<S2SV_blank>up<S2SV_blank>Logitech<S2SV_blank>Momo<S2SV_blank>Racing<S2SV_blank>Force<S2SV_blank>(Black)<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc = momo2_rdesc_fixed ; //<S2SV> * rsize = sizeof ( momo2_rdesc_fixed ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case USB_DEVICE_ID_LOGITECH_VIBRATION_WHEEL : //<S2SV> if ( * rsize == FV_RDESC_ORIG_SIZE ) { //<S2SV> hid_info ( hdev , //<S2SV> "fixing<S2SV_blank>up<S2SV_blank>Logitech<S2SV_blank>Formula<S2SV_blank>Vibration<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc = fv_rdesc_fixed ; //<S2SV> * rsize = sizeof ( fv_rdesc_fixed ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case USB_DEVICE_ID_LOGITECH_DFP_WHEEL : //<S2SV> if ( * rsize == DFP_RDESC_ORIG_SIZE ) { //<S2SV> hid_info ( hdev , //<S2SV> "fixing<S2SV_blank>up<S2SV_blank>Logitech<S2SV_blank>Driving<S2SV_blank>Force<S2SV_blank>Pro<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc = dfp_rdesc_fixed ; //<S2SV> * rsize = sizeof ( dfp_rdesc_fixed ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case USB_DEVICE_ID_LOGITECH_WII_WHEEL : //<S2SV> if ( * rsize >= 101 && rdesc [ 41 ] == 0x95 && rdesc [ 42 ] == 0x0B && //<S2SV> rdesc [ 47 ] == 0x05 && rdesc [ 48 ] == 0x09 ) { //<S2SV> hid_info ( hdev , "fixing<S2SV_blank>up<S2SV_blank>Logitech<S2SV_blank>Speed<S2SV_blank>Force<S2SV_blank>Wireless<S2SV_blank>report<S2SV_blank>descriptor\\n" ) ; //<S2SV> rdesc [ 41 ] = 0x05 ; //<S2SV> rdesc [ 42 ] = 0x09 ; //<S2SV> rdesc [ 47 ] = 0x95 ; //<S2SV> rdesc [ 48 ] = 0x0B ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> return rdesc ; //<S2SV> } //<S2SV> 