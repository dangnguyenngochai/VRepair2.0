static ssize_t n_tty_write ( struct tty_struct * tty , struct file * file , //<S2SV> const unsigned char * buf , size_t nr ) //<S2SV> { //<S2SV> const unsigned char * b = buf ; //<S2SV> DECLARE_WAITQUEUE ( wait , current ) ; //<S2SV> int c ; //<S2SV> ssize_t retval = 0 ; //<S2SV> if ( L_TOSTOP ( tty ) && file -> f_op -> write != redirected_tty_write ) { //<S2SV> retval = tty_check_change ( tty ) ; //<S2SV> if ( retval ) //<S2SV> return retval ; //<S2SV> } //<S2SV> down_read ( & tty -> termios_rwsem ) ; //<S2SV> process_echoes ( tty ) ; //<S2SV> add_wait_queue ( & tty -> write_wait , & wait ) ; //<S2SV> while ( 1 ) { //<S2SV> set_current_state ( TASK_INTERRUPTIBLE ) ; //<S2SV> if ( signal_pending ( current ) ) { //<S2SV> retval = - ERESTARTSYS ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( tty_hung_up_p ( file ) || ( tty -> link && ! tty -> link -> count ) ) { //<S2SV> retval = - EIO ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( O_OPOST ( tty ) ) { //<S2SV> while ( nr > 0 ) { //<S2SV> ssize_t num = process_output_block ( tty , b , nr ) ; //<S2SV> if ( num < 0 ) { //<S2SV> if ( num == - EAGAIN ) //<S2SV> break ; //<S2SV> retval = num ; //<S2SV> goto break_out ; //<S2SV> } //<S2SV> b += num ; //<S2SV> nr -= num ; //<S2SV> if ( nr == 0 ) //<S2SV> break ; //<S2SV> c = * b ; //<S2SV> if ( process_output ( c , tty ) < 0 ) //<S2SV> break ; //<S2SV> b ++ ; nr -- ; //<S2SV> } //<S2SV> if ( tty -> ops -> flush_chars ) //<S2SV> tty -> ops -> flush_chars ( tty ) ; //<S2SV> } else { //<S2SV> while ( nr > 0 ) { //<S2SV> c = tty -> ops -> write ( tty , b , nr ) ; //<S2SV> if ( c < 0 ) { //<S2SV> retval = c ; //<S2SV> goto break_out ; //<S2SV> } //<S2SV> if ( ! c ) //<S2SV> break ; //<S2SV> b += c ; //<S2SV> nr -= c ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! nr ) //<S2SV> break ; //<S2SV> if ( file -> f_flags & O_NONBLOCK ) { //<S2SV> retval = - EAGAIN ; //<S2SV> break ; //<S2SV> } //<S2SV> up_read ( & tty -> termios_rwsem ) ; //<S2SV> schedule ( ) ; //<S2SV> down_read ( & tty -> termios_rwsem ) ; //<S2SV> } //<S2SV> break_out : //<S2SV> __set_current_state ( TASK_RUNNING ) ; //<S2SV> remove_wait_queue ( & tty -> write_wait , & wait ) ; //<S2SV> if ( b - buf != nr && tty -> fasync ) //<S2SV> set_bit ( TTY_DO_WRITE_WAKEUP , & tty -> flags ) ; //<S2SV> up_read ( & tty -> termios_rwsem ) ; //<S2SV> return ( b - buf ) ? b - buf : retval ; //<S2SV> } //<S2SV> 