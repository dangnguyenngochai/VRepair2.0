static int kill_something_info ( int sig , struct siginfo * info , pid_t pid ) //<S2SV> { //<S2SV> int ret ; //<S2SV> if ( pid > 0 ) { //<S2SV> rcu_read_lock ( ) ; //<S2SV> ret = kill_pid_info ( sig , info , find_vpid ( pid ) ) ; //<S2SV> rcu_read_unlock ( ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> read_lock ( & tasklist_lock ) ; //<S2SV> if ( pid != - 1 ) { //<S2SV> ret = __kill_pgrp_info ( sig , info , //<S2SV> pid ? find_vpid ( - pid ) : task_pgrp ( current ) ) ; //<S2SV> } else { //<S2SV> int retval = 0 , count = 0 ; //<S2SV> struct task_struct * p ; //<S2SV> for_each_process ( p ) { //<S2SV> if ( task_pid_vnr ( p ) > 1 && //<S2SV> ! same_thread_group ( p , current ) ) { //<S2SV> int err = group_send_sig_info ( sig , info , p ) ; //<S2SV> ++ count ; //<S2SV> if ( err != - EPERM ) //<S2SV> retval = err ; //<S2SV> } //<S2SV> } //<S2SV> ret = count ? retval : - ESRCH ; //<S2SV> } //<S2SV> read_unlock ( & tasklist_lock ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 