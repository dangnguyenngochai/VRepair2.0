static int xfrm_user_rcv_msg ( struct sk_buff * skb , struct nlmsghdr * nlh , //<S2SV> struct netlink_ext_ack * extack ) //<S2SV> { //<S2SV> struct net * net = sock_net ( skb -> sk ) ; //<S2SV> struct nlattr * attrs [ XFRMA_MAX + 1 ] ; //<S2SV> const struct xfrm_link * link ; //<S2SV> int type , err ; //<S2SV> # ifdef CONFIG_COMPAT //<S2SV> if ( in_compat_syscall ( ) ) //<S2SV> return - EOPNOTSUPP ; //<S2SV> # endif //<S2SV> type = nlh -> nlmsg_type ; //<S2SV> if ( type > XFRM_MSG_MAX ) //<S2SV> return - EINVAL ; //<S2SV> type -= XFRM_MSG_BASE ; //<S2SV> link = & xfrm_dispatch [ type ] ; //<S2SV> if ( ! netlink_net_capable ( skb , CAP_NET_ADMIN ) ) //<S2SV> return - EPERM ; //<S2SV> if ( ( type == ( XFRM_MSG_GETSA - XFRM_MSG_BASE ) || //<S2SV> type == ( XFRM_MSG_GETPOLICY - XFRM_MSG_BASE ) ) && //<S2SV> ( nlh -> nlmsg_flags & NLM_F_DUMP ) ) { //<S2SV> if ( link -> dump == NULL ) //<S2SV> return - EINVAL ; //<S2SV> { //<S2SV> struct netlink_dump_control c = { //<S2SV> . start = link -> start , //<S2SV> . dump = link -> dump , //<S2SV> . done = link -> done , //<S2SV> } ; //<S2SV> return netlink_dump_start ( net -> xfrm . nlsk , skb , nlh , & c ) ; //<S2SV> } //<S2SV> } //<S2SV> err = nlmsg_parse ( nlh , xfrm_msg_min [ type ] , attrs , //<S2SV> link -> nla_max ? : XFRMA_MAX , //<S2SV> link -> nla_pol ? : xfrma_policy , extack ) ; //<S2SV> if ( err < 0 ) //<S2SV> return err ; //<S2SV> if ( link -> doit == NULL ) //<S2SV> return - EINVAL ; //<S2SV> return link -> doit ( skb , nlh , attrs ) ; //<S2SV> } //<S2SV> 