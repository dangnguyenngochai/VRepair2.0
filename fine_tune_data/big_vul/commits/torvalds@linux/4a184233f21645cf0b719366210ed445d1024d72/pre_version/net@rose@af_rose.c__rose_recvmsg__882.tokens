static int rose_recvmsg ( struct kiocb * iocb , struct socket * sock , //<S2SV> struct msghdr * msg , size_t size , int flags ) //<S2SV> { //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct rose_sock * rose = rose_sk ( sk ) ; //<S2SV> struct sockaddr_rose * srose = ( struct sockaddr_rose * ) msg -> msg_name ; //<S2SV> size_t copied ; //<S2SV> unsigned char * asmptr ; //<S2SV> struct sk_buff * skb ; //<S2SV> int n , er , qbit ; //<S2SV> if ( sk -> sk_state != TCP_ESTABLISHED ) //<S2SV> return - ENOTCONN ; //<S2SV> if ( ( skb = skb_recv_datagram ( sk , flags & ~ MSG_DONTWAIT , flags & MSG_DONTWAIT , & er ) ) == NULL ) //<S2SV> return er ; //<S2SV> qbit = ( skb -> data [ 0 ] & ROSE_Q_BIT ) == ROSE_Q_BIT ; //<S2SV> skb_pull ( skb , ROSE_MIN_LEN ) ; //<S2SV> if ( rose -> qbitincl ) { //<S2SV> asmptr = skb_push ( skb , 1 ) ; //<S2SV> * asmptr = qbit ; //<S2SV> } //<S2SV> skb_reset_transport_header ( skb ) ; //<S2SV> copied = skb -> len ; //<S2SV> if ( copied > size ) { //<S2SV> copied = size ; //<S2SV> msg -> msg_flags |= MSG_TRUNC ; //<S2SV> } //<S2SV> skb_copy_datagram_iovec ( skb , 0 , msg -> msg_iov , copied ) ; //<S2SV> if ( srose != NULL ) { //<S2SV> srose -> srose_family = AF_ROSE ; //<S2SV> srose -> srose_addr = rose -> dest_addr ; //<S2SV> srose -> srose_call = rose -> dest_call ; //<S2SV> srose -> srose_ndigis = rose -> dest_ndigis ; //<S2SV> if ( msg -> msg_namelen >= sizeof ( struct full_sockaddr_rose ) ) { //<S2SV> struct full_sockaddr_rose * full_srose = ( struct full_sockaddr_rose * ) msg -> msg_name ; //<S2SV> for ( n = 0 ; n < rose -> dest_ndigis ; n ++ ) //<S2SV> full_srose -> srose_digis [ n ] = rose -> dest_digis [ n ] ; //<S2SV> msg -> msg_namelen = sizeof ( struct full_sockaddr_rose ) ; //<S2SV> } else { //<S2SV> if ( rose -> dest_ndigis >= 1 ) { //<S2SV> srose -> srose_ndigis = 1 ; //<S2SV> srose -> srose_digi = rose -> dest_digis [ 0 ] ; //<S2SV> } //<S2SV> msg -> msg_namelen = sizeof ( struct sockaddr_rose ) ; //<S2SV> } //<S2SV> } //<S2SV> skb_free_datagram ( sk , skb ) ; //<S2SV> return copied ; //<S2SV> } //<S2SV> 