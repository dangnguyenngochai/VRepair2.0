static void rd_release_device_space ( struct rd_dev * rd_dev ) //<S2SV> { //<S2SV> u32 i , j , page_count = 0 , sg_per_table ; //<S2SV> struct rd_dev_sg_table * sg_table ; //<S2SV> struct page * pg ; //<S2SV> struct scatterlist * sg ; //<S2SV> if ( ! rd_dev -> sg_table_array || ! rd_dev -> sg_table_count ) //<S2SV> return ; //<S2SV> sg_table = rd_dev -> sg_table_array ; //<S2SV> for ( i = 0 ; i < rd_dev -> sg_table_count ; i ++ ) { //<S2SV> sg = sg_table [ i ] . sg_table ; //<S2SV> sg_per_table = sg_table [ i ] . rd_sg_count ; //<S2SV> for ( j = 0 ; j < sg_per_table ; j ++ ) { //<S2SV> pg = sg_page ( & sg [ j ] ) ; //<S2SV> if ( pg ) { //<S2SV> __free_page ( pg ) ; //<S2SV> page_count ++ ; //<S2SV> } //<S2SV> } //<S2SV> kfree ( sg ) ; //<S2SV> } //<S2SV> pr_debug ( "CORE_RD[%u]<S2SV_blank>-<S2SV_blank>Released<S2SV_blank>device<S2SV_blank>space<S2SV_blank>for<S2SV_blank>Ramdisk" //<S2SV> "<S2SV_blank>Device<S2SV_blank>ID:<S2SV_blank>%u,<S2SV_blank>pages<S2SV_blank>%u<S2SV_blank>in<S2SV_blank>%u<S2SV_blank>tables<S2SV_blank>total<S2SV_blank>bytes<S2SV_blank>%lu\\n" , //<S2SV> rd_dev -> rd_host -> rd_host_id , rd_dev -> rd_dev_id , page_count , //<S2SV> rd_dev -> sg_table_count , ( unsigned long ) page_count * PAGE_SIZE ) ; //<S2SV> kfree ( sg_table ) ; //<S2SV> rd_dev -> sg_table_array = NULL ; //<S2SV> rd_dev -> sg_table_count = 0 ; //<S2SV> } //<S2SV> 