static void ffs_user_copy_worker ( struct work_struct * work ) //<S2SV> { //<S2SV> struct ffs_io_data * io_data = container_of ( work , struct ffs_io_data , //<S2SV> work ) ; //<S2SV> int ret = io_data -> req -> status ? io_data -> req -> status : //<S2SV> io_data -> req -> actual ; //<S2SV> bool kiocb_has_eventfd = io_data -> kiocb -> ki_flags & IOCB_EVENTFD ; //<S2SV> if ( io_data -> read && ret > 0 ) { //<S2SV> use_mm ( io_data -> mm ) ; //<S2SV> ret = copy_to_iter ( io_data -> buf , ret , & io_data -> data ) ; //<S2SV> if ( iov_iter_count ( & io_data -> data ) ) //<S2SV> ret = - EFAULT ; //<S2SV> unuse_mm ( io_data -> mm ) ; //<S2SV> } //<S2SV> io_data -> kiocb -> ki_complete ( io_data -> kiocb , ret , ret ) ; //<S2SV> if ( io_data -> ffs -> ffs_eventfd && ! kiocb_has_eventfd ) //<S2SV> eventfd_signal ( io_data -> ffs -> ffs_eventfd , 1 ) ; //<S2SV> usb_ep_free_request ( io_data -> ep , io_data -> req ) ; //<S2SV> if ( io_data -> read ) //<S2SV> kfree ( io_data -> to_free ) ; //<S2SV> kfree ( io_data -> buf ) ; //<S2SV> kfree ( io_data ) ; //<S2SV> } //<S2SV> 