static int //<S2SV> get_endpoints ( struct usbtest_dev * dev , struct usb_interface * intf ) //<S2SV> { //<S2SV> int tmp ; //<S2SV> struct usb_host_interface * alt ; //<S2SV> struct usb_host_endpoint * in , * out ; //<S2SV> struct usb_host_endpoint * iso_in , * iso_out ; //<S2SV> struct usb_host_endpoint * int_in , * int_out ; //<S2SV> struct usb_device * udev ; //<S2SV> for ( tmp = 0 ; tmp < intf -> num_altsetting ; tmp ++ ) { //<S2SV> unsigned ep ; //<S2SV> in = out = NULL ; //<S2SV> iso_in = iso_out = NULL ; //<S2SV> int_in = int_out = NULL ; //<S2SV> alt = intf -> altsetting + tmp ; //<S2SV> if ( override_alt >= 0 && //<S2SV> override_alt != alt -> desc . bAlternateSetting ) //<S2SV> continue ; //<S2SV> for ( ep = 0 ; ep < alt -> desc . bNumEndpoints ; ep ++ ) { //<S2SV> struct usb_host_endpoint * e ; //<S2SV> int edi ; //<S2SV> e = alt -> endpoint + ep ; //<S2SV> edi = usb_endpoint_dir_in ( & e -> desc ) ; //<S2SV> switch ( usb_endpoint_type ( & e -> desc ) ) { //<S2SV> case USB_ENDPOINT_XFER_BULK : //<S2SV> endpoint_update ( edi , & in , & out , e ) ; //<S2SV> continue ; //<S2SV> case USB_ENDPOINT_XFER_INT : //<S2SV> if ( dev -> info -> intr ) //<S2SV> endpoint_update ( edi , & int_in , & int_out , e ) ; //<S2SV> continue ; //<S2SV> case USB_ENDPOINT_XFER_ISOC : //<S2SV> if ( dev -> info -> iso ) //<S2SV> endpoint_update ( edi , & iso_in , & iso_out , e ) ; //<S2SV> default : //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( in && out ) || iso_in || iso_out || int_in || int_out ) //<S2SV> goto found ; //<S2SV> } //<S2SV> return - EINVAL ; //<S2SV> found : //<S2SV> udev = testdev_to_usbdev ( dev ) ; //<S2SV> dev -> info -> alt = alt -> desc . bAlternateSetting ; //<S2SV> if ( alt -> desc . bAlternateSetting != 0 ) { //<S2SV> tmp = usb_set_interface ( udev , //<S2SV> alt -> desc . bInterfaceNumber , //<S2SV> alt -> desc . bAlternateSetting ) ; //<S2SV> if ( tmp < 0 ) //<S2SV> return tmp ; //<S2SV> } //<S2SV> if ( in ) { //<S2SV> dev -> in_pipe = usb_rcvbulkpipe ( udev , //<S2SV> in -> desc . bEndpointAddress & USB_ENDPOINT_NUMBER_MASK ) ; //<S2SV> dev -> out_pipe = usb_sndbulkpipe ( udev , //<S2SV> out -> desc . bEndpointAddress & USB_ENDPOINT_NUMBER_MASK ) ; //<S2SV> } //<S2SV> if ( iso_in ) { //<S2SV> dev -> iso_in = & iso_in -> desc ; //<S2SV> dev -> in_iso_pipe = usb_rcvisocpipe ( udev , //<S2SV> iso_in -> desc . bEndpointAddress //<S2SV> & USB_ENDPOINT_NUMBER_MASK ) ; //<S2SV> } //<S2SV> if ( iso_out ) { //<S2SV> dev -> iso_out = & iso_out -> desc ; //<S2SV> dev -> out_iso_pipe = usb_sndisocpipe ( udev , //<S2SV> iso_out -> desc . bEndpointAddress //<S2SV> & USB_ENDPOINT_NUMBER_MASK ) ; //<S2SV> } //<S2SV> if ( int_in ) { //<S2SV> dev -> int_in = & int_in -> desc ; //<S2SV> dev -> in_int_pipe = usb_rcvintpipe ( udev , //<S2SV> int_in -> desc . bEndpointAddress //<S2SV> & USB_ENDPOINT_NUMBER_MASK ) ; //<S2SV> } //<S2SV> if ( int_out ) { //<S2SV> dev -> int_out = & int_out -> desc ; //<S2SV> dev -> out_int_pipe = usb_sndintpipe ( udev , //<S2SV> int_out -> desc . bEndpointAddress //<S2SV> & USB_ENDPOINT_NUMBER_MASK ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 