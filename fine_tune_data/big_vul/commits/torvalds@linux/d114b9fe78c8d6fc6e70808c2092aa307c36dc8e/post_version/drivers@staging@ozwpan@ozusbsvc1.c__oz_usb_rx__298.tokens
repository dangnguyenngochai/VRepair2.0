void oz_usb_rx ( struct oz_pd * pd , struct oz_elt * elt ) //<S2SV> { //<S2SV> struct oz_usb_hdr * usb_hdr = ( struct oz_usb_hdr * ) ( elt + 1 ) ; //<S2SV> struct oz_usb_ctx * usb_ctx ; //<S2SV> spin_lock_bh ( & pd -> app_lock [ OZ_APPID_USB ] ) ; //<S2SV> usb_ctx = ( struct oz_usb_ctx * ) pd -> app_ctx [ OZ_APPID_USB ] ; //<S2SV> if ( usb_ctx ) //<S2SV> oz_usb_get ( usb_ctx ) ; //<S2SV> spin_unlock_bh ( & pd -> app_lock [ OZ_APPID_USB ] ) ; //<S2SV> if ( usb_ctx == NULL ) //<S2SV> return ; //<S2SV> if ( usb_ctx -> stopped ) //<S2SV> goto done ; //<S2SV> if ( usb_hdr -> elt_seq_num != 0 ) { //<S2SV> if ( ( ( usb_ctx -> rx_seq_num - usb_hdr -> elt_seq_num ) & 0x80 ) == 0 ) //<S2SV> goto done ; //<S2SV> } //<S2SV> usb_ctx -> rx_seq_num = usb_hdr -> elt_seq_num ; //<S2SV> switch ( usb_hdr -> type ) { //<S2SV> case OZ_GET_DESC_RSP : { //<S2SV> struct oz_get_desc_rsp * body = //<S2SV> ( struct oz_get_desc_rsp * ) usb_hdr ; //<S2SV> u16 offs , total_size ; //<S2SV> u8 data_len ; //<S2SV> if ( elt -> length < sizeof ( struct oz_get_desc_rsp ) - 1 ) //<S2SV> break ; //<S2SV> data_len = elt -> length - //<S2SV> ( sizeof ( struct oz_get_desc_rsp ) - 1 ) ; //<S2SV> offs = le16_to_cpu ( get_unaligned ( & body -> offset ) ) ; //<S2SV> total_size = //<S2SV> le16_to_cpu ( get_unaligned ( & body -> total_size ) ) ; //<S2SV> oz_dbg ( ON , "USB_REQ_GET_DESCRIPTOR<S2SV_blank>-<S2SV_blank>cnf\\n" ) ; //<S2SV> oz_hcd_get_desc_cnf ( usb_ctx -> hport , body -> req_id , //<S2SV> body -> rcode , body -> data , //<S2SV> data_len , offs , total_size ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case OZ_SET_CONFIG_RSP : { //<S2SV> struct oz_set_config_rsp * body = //<S2SV> ( struct oz_set_config_rsp * ) usb_hdr ; //<S2SV> oz_hcd_control_cnf ( usb_ctx -> hport , body -> req_id , //<S2SV> body -> rcode , NULL , 0 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case OZ_SET_INTERFACE_RSP : { //<S2SV> struct oz_set_interface_rsp * body = //<S2SV> ( struct oz_set_interface_rsp * ) usb_hdr ; //<S2SV> oz_hcd_control_cnf ( usb_ctx -> hport , //<S2SV> body -> req_id , body -> rcode , NULL , 0 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case OZ_VENDOR_CLASS_RSP : { //<S2SV> struct oz_vendor_class_rsp * body = //<S2SV> ( struct oz_vendor_class_rsp * ) usb_hdr ; //<S2SV> oz_hcd_control_cnf ( usb_ctx -> hport , body -> req_id , //<S2SV> body -> rcode , body -> data , elt -> length - //<S2SV> sizeof ( struct oz_vendor_class_rsp ) + 1 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case OZ_USB_ENDPOINT_DATA : //<S2SV> oz_usb_handle_ep_data ( usb_ctx , usb_hdr , elt -> length ) ; //<S2SV> break ; //<S2SV> } //<S2SV> done : //<S2SV> oz_usb_put ( usb_ctx ) ; //<S2SV> } //<S2SV> 