static void n_tty_set_termios ( struct tty_struct * tty , struct ktermios * old ) //<S2SV> { //<S2SV> struct n_tty_data * ldata = tty -> disc_data ; //<S2SV> if ( ! old || ( old -> c_lflag ^ tty -> termios . c_lflag ) & ICANON ) { //<S2SV> bitmap_zero ( ldata -> read_flags , N_TTY_BUF_SIZE ) ; //<S2SV> ldata -> line_start = ldata -> read_tail ; //<S2SV> if ( ! L_ICANON ( tty ) || ! read_cnt ( ldata ) ) { //<S2SV> ldata -> canon_head = ldata -> read_tail ; //<S2SV> ldata -> push = 0 ; //<S2SV> } else { //<S2SV> set_bit ( ( ldata -> read_head - 1 ) & ( N_TTY_BUF_SIZE - 1 ) , //<S2SV> ldata -> read_flags ) ; //<S2SV> ldata -> canon_head = ldata -> read_head ; //<S2SV> ldata -> push = 1 ; //<S2SV> } //<S2SV> ldata -> commit_head = ldata -> read_head ; //<S2SV> ldata -> erasing = 0 ; //<S2SV> ldata -> lnext = 0 ; //<S2SV> } //<S2SV> ldata -> icanon = ( L_ICANON ( tty ) != 0 ) ; //<S2SV> if ( I_ISTRIP ( tty ) || I_IUCLC ( tty ) || I_IGNCR ( tty ) || //<S2SV> I_ICRNL ( tty ) || I_INLCR ( tty ) || L_ICANON ( tty ) || //<S2SV> I_IXON ( tty ) || L_ISIG ( tty ) || L_ECHO ( tty ) || //<S2SV> I_PARMRK ( tty ) ) { //<S2SV> bitmap_zero ( ldata -> char_map , 256 ) ; //<S2SV> if ( I_IGNCR ( tty ) || I_ICRNL ( tty ) ) //<S2SV> set_bit ( '\\r' , ldata -> char_map ) ; //<S2SV> if ( I_INLCR ( tty ) ) //<S2SV> set_bit ( '\\n' , ldata -> char_map ) ; //<S2SV> if ( L_ICANON ( tty ) ) { //<S2SV> set_bit ( ERASE_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( KILL_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( EOF_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( '\\n' , ldata -> char_map ) ; //<S2SV> set_bit ( EOL_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> if ( L_IEXTEN ( tty ) ) { //<S2SV> set_bit ( WERASE_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( LNEXT_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( EOL2_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> if ( L_ECHO ( tty ) ) //<S2SV> set_bit ( REPRINT_CHAR ( tty ) , //<S2SV> ldata -> char_map ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( I_IXON ( tty ) ) { //<S2SV> set_bit ( START_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( STOP_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> } //<S2SV> if ( L_ISIG ( tty ) ) { //<S2SV> set_bit ( INTR_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( QUIT_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> set_bit ( SUSP_CHAR ( tty ) , ldata -> char_map ) ; //<S2SV> } //<S2SV> clear_bit ( __DISABLED_CHAR , ldata -> char_map ) ; //<S2SV> ldata -> raw = 0 ; //<S2SV> ldata -> real_raw = 0 ; //<S2SV> } else { //<S2SV> ldata -> raw = 1 ; //<S2SV> if ( ( I_IGNBRK ( tty ) || ( ! I_BRKINT ( tty ) && ! I_PARMRK ( tty ) ) ) && //<S2SV> ( I_IGNPAR ( tty ) || ! I_INPCK ( tty ) ) && //<S2SV> ( tty -> driver -> flags & TTY_DRIVER_REAL_RAW ) ) //<S2SV> ldata -> real_raw = 1 ; //<S2SV> else //<S2SV> ldata -> real_raw = 0 ; //<S2SV> } //<S2SV> if ( ! I_IXON ( tty ) && old && ( old -> c_iflag & IXON ) && ! tty -> flow_stopped ) { //<S2SV> start_tty ( tty ) ; //<S2SV> process_echoes ( tty ) ; //<S2SV> } //<S2SV> wake_up_interruptible ( & tty -> write_wait ) ; //<S2SV> wake_up_interruptible ( & tty -> read_wait ) ; //<S2SV> } //<S2SV> 