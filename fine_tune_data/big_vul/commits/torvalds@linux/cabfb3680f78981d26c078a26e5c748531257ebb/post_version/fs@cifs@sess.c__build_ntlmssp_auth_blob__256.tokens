int build_ntlmssp_auth_blob ( unsigned char * * pbuffer , //<S2SV> u16 * buflen , //<S2SV> struct cifs_ses * ses , //<S2SV> const struct nls_table * nls_cp ) //<S2SV> { //<S2SV> int rc ; //<S2SV> AUTHENTICATE_MESSAGE * sec_blob ; //<S2SV> __u32 flags ; //<S2SV> unsigned char * tmp ; //<S2SV> rc = setup_ntlmv2_rsp ( ses , nls_cp ) ; //<S2SV> if ( rc ) { //<S2SV> cifs_dbg ( VFS , "Error<S2SV_blank>%d<S2SV_blank>during<S2SV_blank>NTLMSSP<S2SV_blank>authentication\\n" , rc ) ; //<S2SV> * buflen = 0 ; //<S2SV> goto setup_ntlmv2_ret ; //<S2SV> } //<S2SV> * pbuffer = kmalloc ( size_of_ntlmssp_blob ( ses ) , GFP_KERNEL ) ; //<S2SV> sec_blob = ( AUTHENTICATE_MESSAGE * ) * pbuffer ; //<S2SV> memcpy ( sec_blob -> Signature , NTLMSSP_SIGNATURE , 8 ) ; //<S2SV> sec_blob -> MessageType = NtLmAuthenticate ; //<S2SV> flags = NTLMSSP_NEGOTIATE_56 | //<S2SV> NTLMSSP_REQUEST_TARGET | NTLMSSP_NEGOTIATE_TARGET_INFO | //<S2SV> NTLMSSP_NEGOTIATE_128 | NTLMSSP_NEGOTIATE_UNICODE | //<S2SV> NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC | //<S2SV> NTLMSSP_NEGOTIATE_SEAL ; //<S2SV> if ( ses -> server -> sign ) //<S2SV> flags |= NTLMSSP_NEGOTIATE_SIGN ; //<S2SV> if ( ! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) //<S2SV> flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; //<S2SV> tmp = * pbuffer + sizeof ( AUTHENTICATE_MESSAGE ) ; //<S2SV> sec_blob -> NegotiateFlags = cpu_to_le32 ( flags ) ; //<S2SV> sec_blob -> LmChallengeResponse . BufferOffset = //<S2SV> cpu_to_le32 ( sizeof ( AUTHENTICATE_MESSAGE ) ) ; //<S2SV> sec_blob -> LmChallengeResponse . Length = 0 ; //<S2SV> sec_blob -> LmChallengeResponse . MaximumLength = 0 ; //<S2SV> sec_blob -> NtChallengeResponse . BufferOffset = //<S2SV> cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> if ( ses -> user_name != NULL ) { //<S2SV> memcpy ( tmp , ses -> auth_key . response + CIFS_SESS_KEY_SIZE , //<S2SV> ses -> auth_key . len - CIFS_SESS_KEY_SIZE ) ; //<S2SV> tmp += ses -> auth_key . len - CIFS_SESS_KEY_SIZE ; //<S2SV> sec_blob -> NtChallengeResponse . Length = //<S2SV> cpu_to_le16 ( ses -> auth_key . len - CIFS_SESS_KEY_SIZE ) ; //<S2SV> sec_blob -> NtChallengeResponse . MaximumLength = //<S2SV> cpu_to_le16 ( ses -> auth_key . len - CIFS_SESS_KEY_SIZE ) ; //<S2SV> } else { //<S2SV> sec_blob -> NtChallengeResponse . Length = 0 ; //<S2SV> sec_blob -> NtChallengeResponse . MaximumLength = 0 ; //<S2SV> } //<S2SV> if ( ses -> domainName == NULL ) { //<S2SV> sec_blob -> DomainName . BufferOffset = cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> sec_blob -> DomainName . Length = 0 ; //<S2SV> sec_blob -> DomainName . MaximumLength = 0 ; //<S2SV> tmp += 2 ; //<S2SV> } else { //<S2SV> int len ; //<S2SV> len = cifs_strtoUTF16 ( ( __le16 * ) tmp , ses -> domainName , //<S2SV> CIFS_MAX_DOMAINNAME_LEN , nls_cp ) ; //<S2SV> len *= 2 ; //<S2SV> sec_blob -> DomainName . BufferOffset = cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> sec_blob -> DomainName . Length = cpu_to_le16 ( len ) ; //<S2SV> sec_blob -> DomainName . MaximumLength = cpu_to_le16 ( len ) ; //<S2SV> tmp += len ; //<S2SV> } //<S2SV> if ( ses -> user_name == NULL ) { //<S2SV> sec_blob -> UserName . BufferOffset = cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> sec_blob -> UserName . Length = 0 ; //<S2SV> sec_blob -> UserName . MaximumLength = 0 ; //<S2SV> tmp += 2 ; //<S2SV> } else { //<S2SV> int len ; //<S2SV> len = cifs_strtoUTF16 ( ( __le16 * ) tmp , ses -> user_name , //<S2SV> CIFS_MAX_USERNAME_LEN , nls_cp ) ; //<S2SV> len *= 2 ; //<S2SV> sec_blob -> UserName . BufferOffset = cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> sec_blob -> UserName . Length = cpu_to_le16 ( len ) ; //<S2SV> sec_blob -> UserName . MaximumLength = cpu_to_le16 ( len ) ; //<S2SV> tmp += len ; //<S2SV> } //<S2SV> sec_blob -> WorkstationName . BufferOffset = cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> sec_blob -> WorkstationName . Length = 0 ; //<S2SV> sec_blob -> WorkstationName . MaximumLength = 0 ; //<S2SV> tmp += 2 ; //<S2SV> if ( ( ( ses -> ntlmssp -> server_flags & NTLMSSP_NEGOTIATE_KEY_XCH ) || //<S2SV> ( ses -> ntlmssp -> server_flags & NTLMSSP_NEGOTIATE_EXTENDED_SEC ) ) //<S2SV> && ! calc_seckey ( ses ) ) { //<S2SV> memcpy ( tmp , ses -> ntlmssp -> ciphertext , CIFS_CPHTXT_SIZE ) ; //<S2SV> sec_blob -> SessionKey . BufferOffset = cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> sec_blob -> SessionKey . Length = cpu_to_le16 ( CIFS_CPHTXT_SIZE ) ; //<S2SV> sec_blob -> SessionKey . MaximumLength = //<S2SV> cpu_to_le16 ( CIFS_CPHTXT_SIZE ) ; //<S2SV> tmp += CIFS_CPHTXT_SIZE ; //<S2SV> } else { //<S2SV> sec_blob -> SessionKey . BufferOffset = cpu_to_le32 ( tmp - * pbuffer ) ; //<S2SV> sec_blob -> SessionKey . Length = 0 ; //<S2SV> sec_blob -> SessionKey . MaximumLength = 0 ; //<S2SV> } //<S2SV> * buflen = tmp - * pbuffer ; //<S2SV> setup_ntlmv2_ret : //<S2SV> return rc ; //<S2SV> } //<S2SV> 