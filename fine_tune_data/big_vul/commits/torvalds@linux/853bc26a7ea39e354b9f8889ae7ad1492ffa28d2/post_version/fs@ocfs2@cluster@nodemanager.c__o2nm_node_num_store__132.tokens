static ssize_t o2nm_node_num_store ( struct config_item * item , const char * page , //<S2SV> size_t count ) //<S2SV> { //<S2SV> struct o2nm_node * node = to_o2nm_node ( item ) ; //<S2SV> struct o2nm_cluster * cluster ; //<S2SV> unsigned long tmp ; //<S2SV> char * p = ( char * ) page ; //<S2SV> int ret = 0 ; //<S2SV> tmp = simple_strtoul ( p , & p , 0 ) ; //<S2SV> if ( ! p || ( * p && ( * p != '\\n' ) ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( tmp >= O2NM_MAX_NODES ) //<S2SV> return - ERANGE ; //<S2SV> if ( ! test_bit ( O2NM_NODE_ATTR_ADDRESS , & node -> nd_set_attributes ) || //<S2SV> ! test_bit ( O2NM_NODE_ATTR_PORT , & node -> nd_set_attributes ) ) //<S2SV> return - EINVAL ; //<S2SV> o2nm_lock_subsystem ( ) ; //<S2SV> cluster = to_o2nm_cluster_from_node ( node ) ; //<S2SV> if ( ! cluster ) { //<S2SV> o2nm_unlock_subsystem ( ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> write_lock ( & cluster -> cl_nodes_lock ) ; //<S2SV> if ( cluster -> cl_nodes [ tmp ] ) //<S2SV> ret = - EEXIST ; //<S2SV> else if ( test_and_set_bit ( O2NM_NODE_ATTR_NUM , //<S2SV> & node -> nd_set_attributes ) ) //<S2SV> ret = - EBUSY ; //<S2SV> else { //<S2SV> cluster -> cl_nodes [ tmp ] = node ; //<S2SV> node -> nd_num = tmp ; //<S2SV> set_bit ( tmp , cluster -> cl_nodes_bitmap ) ; //<S2SV> } //<S2SV> write_unlock ( & cluster -> cl_nodes_lock ) ; //<S2SV> o2nm_unlock_subsystem ( ) ; //<S2SV> if ( ret ) //<S2SV> return ret ; //<S2SV> return count ; //<S2SV> } //<S2SV> 