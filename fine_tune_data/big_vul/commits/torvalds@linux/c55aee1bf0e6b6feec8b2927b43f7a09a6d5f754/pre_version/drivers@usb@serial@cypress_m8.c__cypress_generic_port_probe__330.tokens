static int cypress_generic_port_probe ( struct usb_serial_port * port ) //<S2SV> { //<S2SV> struct usb_serial * serial = port -> serial ; //<S2SV> struct cypress_private * priv ; //<S2SV> priv = kzalloc ( sizeof ( struct cypress_private ) , GFP_KERNEL ) ; //<S2SV> if ( ! priv ) //<S2SV> return - ENOMEM ; //<S2SV> priv -> comm_is_ok = ! 0 ; //<S2SV> spin_lock_init ( & priv -> lock ) ; //<S2SV> if ( kfifo_alloc ( & priv -> write_fifo , CYPRESS_BUF_SIZE , GFP_KERNEL ) ) { //<S2SV> kfree ( priv ) ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> if ( ! is_frwd ( serial -> dev ) ) //<S2SV> usb_reset_configuration ( serial -> dev ) ; //<S2SV> priv -> cmd_ctrl = 0 ; //<S2SV> priv -> line_control = 0 ; //<S2SV> priv -> termios_initialized = 0 ; //<S2SV> priv -> rx_flags = 0 ; //<S2SV> if ( port -> interrupt_out_size > 9 ) //<S2SV> priv -> pkt_fmt = packet_format_1 ; //<S2SV> else //<S2SV> priv -> pkt_fmt = packet_format_2 ; //<S2SV> if ( interval > 0 ) { //<S2SV> priv -> write_urb_interval = interval ; //<S2SV> priv -> read_urb_interval = interval ; //<S2SV> dev_dbg ( & port -> dev , "%s<S2SV_blank>-<S2SV_blank>read<S2SV_blank>&<S2SV_blank>write<S2SV_blank>intervals<S2SV_blank>forced<S2SV_blank>to<S2SV_blank>%d\\n" , //<S2SV> __func__ , interval ) ; //<S2SV> } else { //<S2SV> priv -> write_urb_interval = port -> interrupt_out_urb -> interval ; //<S2SV> priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; //<S2SV> dev_dbg ( & port -> dev , "%s<S2SV_blank>-<S2SV_blank>intervals:<S2SV_blank>read=%d<S2SV_blank>write=%d\\n" , //<S2SV> __func__ , priv -> read_urb_interval , //<S2SV> priv -> write_urb_interval ) ; //<S2SV> } //<S2SV> usb_set_serial_port_data ( port , priv ) ; //<S2SV> port -> port . drain_delay = 256 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 