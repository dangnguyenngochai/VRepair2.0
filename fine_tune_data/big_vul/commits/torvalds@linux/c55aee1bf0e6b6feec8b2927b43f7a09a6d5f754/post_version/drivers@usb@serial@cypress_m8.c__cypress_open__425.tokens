static int cypress_open ( struct tty_struct * tty , struct usb_serial_port * port ) //<S2SV> { //<S2SV> struct cypress_private * priv = usb_get_serial_port_data ( port ) ; //<S2SV> struct usb_serial * serial = port -> serial ; //<S2SV> unsigned long flags ; //<S2SV> int result = 0 ; //<S2SV> if ( ! priv -> comm_is_ok ) //<S2SV> return - EIO ; //<S2SV> usb_clear_halt ( serial -> dev , 0x81 ) ; //<S2SV> usb_clear_halt ( serial -> dev , 0x02 ) ; //<S2SV> spin_lock_irqsave ( & priv -> lock , flags ) ; //<S2SV> priv -> bytes_in = 0 ; //<S2SV> priv -> bytes_out = 0 ; //<S2SV> priv -> cmd_count = 0 ; //<S2SV> priv -> rx_flags = 0 ; //<S2SV> spin_unlock_irqrestore ( & priv -> lock , flags ) ; //<S2SV> cypress_send ( port ) ; //<S2SV> if ( tty ) //<S2SV> cypress_set_termios ( tty , port , & priv -> tmp_termios ) ; //<S2SV> usb_fill_int_urb ( port -> interrupt_in_urb , serial -> dev , //<S2SV> usb_rcvintpipe ( serial -> dev , port -> interrupt_in_endpointAddress ) , //<S2SV> port -> interrupt_in_urb -> transfer_buffer , //<S2SV> port -> interrupt_in_urb -> transfer_buffer_length , //<S2SV> cypress_read_int_callback , port , priv -> read_urb_interval ) ; //<S2SV> result = usb_submit_urb ( port -> interrupt_in_urb , GFP_KERNEL ) ; //<S2SV> if ( result ) { //<S2SV> dev_err ( & port -> dev , //<S2SV> "%s<S2SV_blank>-<S2SV_blank>failed<S2SV_blank>submitting<S2SV_blank>read<S2SV_blank>urb,<S2SV_blank>error<S2SV_blank>%d\\n" , //<S2SV> __func__ , result ) ; //<S2SV> cypress_set_dead ( port ) ; //<S2SV> } //<S2SV> return result ; //<S2SV> } //<S2SV> 