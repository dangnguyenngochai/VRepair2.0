int create_user_ns ( struct cred * new ) //<S2SV> { //<S2SV> struct user_namespace * ns , * parent_ns = new -> user_ns ; //<S2SV> kuid_t owner = new -> euid ; //<S2SV> kgid_t group = new -> egid ; //<S2SV> int ret ; //<S2SV> if ( current_chrooted ( ) ) //<S2SV> return - EPERM ; //<S2SV> if ( ! kuid_has_mapping ( parent_ns , owner ) || //<S2SV> ! kgid_has_mapping ( parent_ns , group ) ) //<S2SV> return - EPERM ; //<S2SV> ns = kmem_cache_zalloc ( user_ns_cachep , GFP_KERNEL ) ; //<S2SV> if ( ! ns ) //<S2SV> return - ENOMEM ; //<S2SV> ret = proc_alloc_inum ( & ns -> proc_inum ) ; //<S2SV> if ( ret ) { //<S2SV> kmem_cache_free ( user_ns_cachep , ns ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> atomic_set ( & ns -> count , 1 ) ; //<S2SV> ns -> parent = parent_ns ; //<S2SV> ns -> owner = owner ; //<S2SV> ns -> group = group ; //<S2SV> set_cred_user_ns ( new , ns ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 