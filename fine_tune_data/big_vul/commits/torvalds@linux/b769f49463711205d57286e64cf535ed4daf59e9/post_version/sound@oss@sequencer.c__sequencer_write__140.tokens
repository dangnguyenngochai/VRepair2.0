int sequencer_write ( int dev , struct file * file , const char __user * buf , int count ) //<S2SV> { //<S2SV> unsigned char event_rec [ EV_SZ ] , ev_code ; //<S2SV> int p = 0 , c , ev_size ; //<S2SV> int mode = translate_mode ( file ) ; //<S2SV> dev = dev >> 4 ; //<S2SV> DEB ( printk ( "sequencer_write(dev=%d,<S2SV_blank>count=%d)\\n" , dev , count ) ) ; //<S2SV> if ( mode == OPEN_READ ) //<S2SV> return - EIO ; //<S2SV> c = count ; //<S2SV> while ( c >= 4 ) //<S2SV> { //<S2SV> if ( copy_from_user ( ( char * ) event_rec , & ( buf ) [ p ] , 4 ) ) //<S2SV> goto out ; //<S2SV> ev_code = event_rec [ 0 ] ; //<S2SV> if ( ev_code == SEQ_FULLSIZE ) //<S2SV> { //<S2SV> int err , fmt ; //<S2SV> dev = * ( unsigned short * ) & event_rec [ 2 ] ; //<S2SV> if ( dev < 0 || dev >= max_synthdev || synth_devs [ dev ] == NULL ) //<S2SV> return - ENXIO ; //<S2SV> if ( ! ( synth_open_mask & ( 1 << dev ) ) ) //<S2SV> return - ENXIO ; //<S2SV> fmt = ( * ( short * ) & event_rec [ 0 ] ) & 0xffff ; //<S2SV> err = synth_devs [ dev ] -> load_patch ( dev , fmt , buf + p , c , 0 ) ; //<S2SV> if ( err < 0 ) //<S2SV> return err ; //<S2SV> return err ; //<S2SV> } //<S2SV> if ( ev_code >= 128 ) //<S2SV> { //<S2SV> if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) //<S2SV> { //<S2SV> printk ( KERN_WARNING "Sequencer:<S2SV_blank>Invalid<S2SV_blank>level<S2SV_blank>2<S2SV_blank>event<S2SV_blank>%x\\n" , ev_code ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ev_size = 8 ; //<S2SV> if ( c < ev_size ) //<S2SV> { //<S2SV> if ( ! seq_playing ) //<S2SV> seq_startplay ( ) ; //<S2SV> return count - c ; //<S2SV> } //<S2SV> if ( copy_from_user ( ( char * ) & event_rec [ 4 ] , //<S2SV> & ( buf ) [ p + 4 ] , 4 ) ) //<S2SV> goto out ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( seq_mode == SEQ_2 ) //<S2SV> { //<S2SV> printk ( KERN_WARNING "Sequencer:<S2SV_blank>4<S2SV_blank>byte<S2SV_blank>event<S2SV_blank>in<S2SV_blank>level<S2SV_blank>2<S2SV_blank>mode\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ev_size = 4 ; //<S2SV> if ( event_rec [ 0 ] != SEQ_MIDIPUTC ) //<S2SV> obsolete_api_used = 1 ; //<S2SV> } //<S2SV> if ( event_rec [ 0 ] == SEQ_MIDIPUTC ) //<S2SV> { //<S2SV> if ( ! midi_opened [ event_rec [ 2 ] ] ) //<S2SV> { //<S2SV> int err , mode ; //<S2SV> int dev = event_rec [ 2 ] ; //<S2SV> if ( dev >= max_mididev || midi_devs [ dev ] == NULL ) //<S2SV> { //<S2SV> return - ENXIO ; //<S2SV> } //<S2SV> mode = translate_mode ( file ) ; //<S2SV> if ( ( err = midi_devs [ dev ] -> open ( dev , mode , //<S2SV> sequencer_midi_input , sequencer_midi_output ) ) < 0 ) //<S2SV> { //<S2SV> seq_reset ( ) ; //<S2SV> printk ( KERN_WARNING "Sequencer<S2SV_blank>Error:<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>Midi<S2SV_blank>#%d\\n" , dev ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> midi_opened [ dev ] = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! seq_queue ( event_rec , ( file -> f_flags & ( O_NONBLOCK ) ? 1 : 0 ) ) ) //<S2SV> { //<S2SV> int processed = count - c ; //<S2SV> if ( ! seq_playing ) //<S2SV> seq_startplay ( ) ; //<S2SV> if ( ! processed && ( file -> f_flags & O_NONBLOCK ) ) //<S2SV> return - EAGAIN ; //<S2SV> else //<S2SV> return processed ; //<S2SV> } //<S2SV> p += ev_size ; //<S2SV> c -= ev_size ; //<S2SV> } //<S2SV> if ( ! seq_playing ) //<S2SV> seq_startplay ( ) ; //<S2SV> out : //<S2SV> return count ; //<S2SV> } //<S2SV> 