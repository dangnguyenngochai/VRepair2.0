int //<S2SV> midi_synth_load_patch ( int dev , int format , const char __user * addr , //<S2SV> int count , int pmgr_flag ) //<S2SV> { //<S2SV> int orig_dev = synth_devs [ dev ] -> midi_dev ; //<S2SV> struct sysex_info sysex ; //<S2SV> int i ; //<S2SV> unsigned long left , src_offs , eox_seen = 0 ; //<S2SV> int first_byte = 1 ; //<S2SV> int hdr_size = ( unsigned long ) & sysex . data [ 0 ] - ( unsigned long ) & sysex ; //<S2SV> leave_sysex ( dev ) ; //<S2SV> if ( ! prefix_cmd ( orig_dev , 0xf0 ) ) //<S2SV> return 0 ; //<S2SV> if ( format != SYSEX_PATCH ) //<S2SV> return - EINVAL ; //<S2SV> if ( count < hdr_size ) //<S2SV> return - EINVAL ; //<S2SV> count -= hdr_size ; //<S2SV> if ( copy_from_user ( & sysex , addr , hdr_size ) ) //<S2SV> return - EFAULT ; //<S2SV> if ( ( unsigned ) count < ( unsigned ) sysex . len ) //<S2SV> sysex . len = count ; //<S2SV> left = sysex . len ; //<S2SV> src_offs = 0 ; //<S2SV> for ( i = 0 ; i < left && ! signal_pending ( current ) ; i ++ ) //<S2SV> { //<S2SV> unsigned char data ; //<S2SV> if ( get_user ( data , //<S2SV> ( unsigned char __user * ) ( addr + hdr_size + i ) ) ) //<S2SV> return - EFAULT ; //<S2SV> eox_seen = ( i > 0 && data & 0x80 ) ; //<S2SV> if ( eox_seen && data != 0xf7 ) //<S2SV> data = 0xf7 ; //<S2SV> if ( i == 0 ) //<S2SV> { //<S2SV> if ( data != 0xf0 ) //<S2SV> { //<S2SV> printk ( KERN_WARNING "midi_synth:<S2SV_blank>Sysex<S2SV_blank>start<S2SV_blank>missing\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> } //<S2SV> while ( ! midi_devs [ orig_dev ] -> outputc ( orig_dev , ( unsigned char ) ( data & 0xff ) ) && //<S2SV> ! signal_pending ( current ) ) //<S2SV> schedule ( ) ; //<S2SV> if ( ! first_byte && data & 0x80 ) //<S2SV> return 0 ; //<S2SV> first_byte = 0 ; //<S2SV> } //<S2SV> if ( ! eox_seen ) //<S2SV> midi_outc ( orig_dev , 0xf7 ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 