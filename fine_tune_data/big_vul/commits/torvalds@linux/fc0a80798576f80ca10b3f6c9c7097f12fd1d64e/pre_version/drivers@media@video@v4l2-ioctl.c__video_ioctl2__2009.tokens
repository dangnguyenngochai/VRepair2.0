long video_ioctl2 ( struct file * file , //<S2SV> unsigned int cmd , unsigned long arg ) //<S2SV> { //<S2SV> char sbuf [ 128 ] ; //<S2SV> void * mbuf = NULL ; //<S2SV> void * parg = ( void * ) arg ; //<S2SV> long err = - EINVAL ; //<S2SV> bool has_array_args ; //<S2SV> size_t array_size = 0 ; //<S2SV> void __user * user_ptr = NULL ; //<S2SV> void * * kernel_ptr = NULL ; //<S2SV> if ( _IOC_DIR ( cmd ) != _IOC_NONE ) { //<S2SV> if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { //<S2SV> parg = sbuf ; //<S2SV> } else { //<S2SV> mbuf = kmalloc ( _IOC_SIZE ( cmd ) , GFP_KERNEL ) ; //<S2SV> if ( NULL == mbuf ) //<S2SV> return - ENOMEM ; //<S2SV> parg = mbuf ; //<S2SV> } //<S2SV> err = - EFAULT ; //<S2SV> if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) { //<S2SV> unsigned long n = cmd_input_size ( cmd ) ; //<S2SV> if ( copy_from_user ( parg , ( void __user * ) arg , n ) ) //<S2SV> goto out ; //<S2SV> if ( n < _IOC_SIZE ( cmd ) ) //<S2SV> memset ( ( u8 * ) parg + n , 0 , _IOC_SIZE ( cmd ) - n ) ; //<S2SV> } else { //<S2SV> memset ( parg , 0 , _IOC_SIZE ( cmd ) ) ; //<S2SV> } //<S2SV> } //<S2SV> err = check_array_args ( cmd , parg , & array_size , & user_ptr , & kernel_ptr ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto out ; //<S2SV> has_array_args = err ; //<S2SV> if ( has_array_args ) { //<S2SV> mbuf = kmalloc ( array_size , GFP_KERNEL ) ; //<S2SV> err = - ENOMEM ; //<S2SV> if ( NULL == mbuf ) //<S2SV> goto out_array_args ; //<S2SV> err = - EFAULT ; //<S2SV> if ( copy_from_user ( mbuf , user_ptr , array_size ) ) //<S2SV> goto out_array_args ; //<S2SV> * kernel_ptr = mbuf ; //<S2SV> } //<S2SV> err = __video_do_ioctl ( file , cmd , parg ) ; //<S2SV> if ( err == - ENOIOCTLCMD ) //<S2SV> err = - EINVAL ; //<S2SV> if ( has_array_args ) { //<S2SV> * kernel_ptr = user_ptr ; //<S2SV> if ( copy_to_user ( user_ptr , mbuf , array_size ) ) //<S2SV> err = - EFAULT ; //<S2SV> goto out_array_args ; //<S2SV> } //<S2SV> if ( err < 0 ) //<S2SV> goto out ; //<S2SV> out_array_args : //<S2SV> switch ( _IOC_DIR ( cmd ) ) { //<S2SV> case _IOC_READ : //<S2SV> case ( _IOC_WRITE | _IOC_READ ) : //<S2SV> if ( copy_to_user ( ( void __user * ) arg , parg , _IOC_SIZE ( cmd ) ) ) //<S2SV> err = - EFAULT ; //<S2SV> break ; //<S2SV> } //<S2SV> out : //<S2SV> kfree ( mbuf ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 