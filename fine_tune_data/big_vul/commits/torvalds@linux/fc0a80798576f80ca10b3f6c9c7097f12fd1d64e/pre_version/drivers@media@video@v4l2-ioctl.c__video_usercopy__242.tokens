long //<S2SV> video_usercopy ( struct file * file , unsigned int cmd , unsigned long arg , //<S2SV> v4l2_kioctl func ) //<S2SV> { //<S2SV> char sbuf [ 128 ] ; //<S2SV> void * mbuf = NULL ; //<S2SV> void * parg = NULL ; //<S2SV> long err = - EINVAL ; //<S2SV> int is_ext_ctrl ; //<S2SV> size_t ctrls_size = 0 ; //<S2SV> void __user * user_ptr = NULL ; //<S2SV> is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || //<S2SV> cmd == VIDIOC_TRY_EXT_CTRLS ) ; //<S2SV> switch ( _IOC_DIR ( cmd ) ) { //<S2SV> case _IOC_NONE : //<S2SV> parg = NULL ; //<S2SV> break ; //<S2SV> case _IOC_READ : //<S2SV> case _IOC_WRITE : //<S2SV> case ( _IOC_WRITE | _IOC_READ ) : //<S2SV> if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { //<S2SV> parg = sbuf ; //<S2SV> } else { //<S2SV> mbuf = kmalloc ( _IOC_SIZE ( cmd ) , GFP_KERNEL ) ; //<S2SV> if ( NULL == mbuf ) //<S2SV> return - ENOMEM ; //<S2SV> parg = mbuf ; //<S2SV> } //<S2SV> err = - EFAULT ; //<S2SV> if ( _IOC_DIR ( cmd ) & _IOC_WRITE ) //<S2SV> if ( copy_from_user ( parg , ( void __user * ) arg , _IOC_SIZE ( cmd ) ) ) //<S2SV> goto out ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( is_ext_ctrl ) { //<S2SV> struct v4l2_ext_controls * p = parg ; //<S2SV> p -> error_idx = p -> count ; //<S2SV> user_ptr = ( void __user * ) p -> controls ; //<S2SV> if ( p -> count ) { //<S2SV> ctrls_size = sizeof ( struct v4l2_ext_control ) * p -> count ; //<S2SV> mbuf = kmalloc ( ctrls_size , GFP_KERNEL ) ; //<S2SV> err = - ENOMEM ; //<S2SV> if ( NULL == mbuf ) //<S2SV> goto out_ext_ctrl ; //<S2SV> err = - EFAULT ; //<S2SV> if ( copy_from_user ( mbuf , user_ptr , ctrls_size ) ) //<S2SV> goto out_ext_ctrl ; //<S2SV> p -> controls = mbuf ; //<S2SV> } //<S2SV> } //<S2SV> err = func ( file , cmd , parg ) ; //<S2SV> if ( err == - ENOIOCTLCMD ) //<S2SV> err = - EINVAL ; //<S2SV> if ( is_ext_ctrl ) { //<S2SV> struct v4l2_ext_controls * p = parg ; //<S2SV> p -> controls = ( void * ) user_ptr ; //<S2SV> if ( p -> count && err == 0 && copy_to_user ( user_ptr , mbuf , ctrls_size ) ) //<S2SV> err = - EFAULT ; //<S2SV> goto out_ext_ctrl ; //<S2SV> } //<S2SV> if ( err < 0 ) //<S2SV> goto out ; //<S2SV> out_ext_ctrl : //<S2SV> switch ( _IOC_DIR ( cmd ) ) { //<S2SV> case _IOC_READ : //<S2SV> case ( _IOC_WRITE | _IOC_READ ) : //<S2SV> if ( copy_to_user ( ( void __user * ) arg , parg , _IOC_SIZE ( cmd ) ) ) //<S2SV> err = - EFAULT ; //<S2SV> break ; //<S2SV> } //<S2SV> out : //<S2SV> kfree ( mbuf ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 