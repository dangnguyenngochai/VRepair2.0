int //<S2SV> SMB2_read ( const unsigned int xid , struct cifs_io_parms * io_parms , //<S2SV> unsigned int * nbytes , char * * buf , int * buf_type ) //<S2SV> { //<S2SV> struct smb_rqst rqst ; //<S2SV> int resp_buftype , rc = - EACCES ; //<S2SV> struct smb2_read_plain_req * req = NULL ; //<S2SV> struct smb2_read_rsp * rsp = NULL ; //<S2SV> struct kvec iov [ 1 ] ; //<S2SV> struct kvec rsp_iov ; //<S2SV> unsigned int total_len ; //<S2SV> int flags = CIFS_LOG_ERROR ; //<S2SV> struct cifs_ses * ses = io_parms -> tcon -> ses ; //<S2SV> * nbytes = 0 ; //<S2SV> rc = smb2_new_read_req ( ( void * * ) & req , & total_len , io_parms , NULL , 0 , 0 ) ; //<S2SV> if ( rc ) //<S2SV> return rc ; //<S2SV> if ( smb3_encryption_required ( io_parms -> tcon ) ) //<S2SV> flags |= CIFS_TRANSFORM_REQ ; //<S2SV> iov [ 0 ] . iov_base = ( char * ) req ; //<S2SV> iov [ 0 ] . iov_len = total_len ; //<S2SV> memset ( & rqst , 0 , sizeof ( struct smb_rqst ) ) ; //<S2SV> rqst . rq_iov = iov ; //<S2SV> rqst . rq_nvec = 1 ; //<S2SV> rc = cifs_send_recv ( xid , ses , & rqst , & resp_buftype , flags , & rsp_iov ) ; //<S2SV> cifs_small_buf_release ( req ) ; //<S2SV> rsp = ( struct smb2_read_rsp * ) rsp_iov . iov_base ; //<S2SV> if ( rc ) { //<S2SV> if ( rc != - ENODATA ) { //<S2SV> cifs_stats_fail_inc ( io_parms -> tcon , SMB2_READ_HE ) ; //<S2SV> cifs_dbg ( VFS , "Send<S2SV_blank>error<S2SV_blank>in<S2SV_blank>read<S2SV_blank>=<S2SV_blank>%d\\n" , rc ) ; //<S2SV> trace_smb3_read_err ( xid , req -> PersistentFileId , //<S2SV> io_parms -> tcon -> tid , ses -> Suid , //<S2SV> io_parms -> offset , io_parms -> length , //<S2SV> rc ) ; //<S2SV> } else //<S2SV> trace_smb3_read_done ( xid , req -> PersistentFileId , //<S2SV> io_parms -> tcon -> tid , ses -> Suid , //<S2SV> io_parms -> offset , 0 ) ; //<S2SV> free_rsp_buf ( resp_buftype , rsp_iov . iov_base ) ; //<S2SV> return rc == - ENODATA ? 0 : rc ; //<S2SV> } else //<S2SV> trace_smb3_read_done ( xid , req -> PersistentFileId , //<S2SV> io_parms -> tcon -> tid , ses -> Suid , //<S2SV> io_parms -> offset , io_parms -> length ) ; //<S2SV> * nbytes = le32_to_cpu ( rsp -> DataLength ) ; //<S2SV> if ( ( * nbytes > CIFS_MAX_MSGSIZE ) || //<S2SV> ( * nbytes > io_parms -> length ) ) { //<S2SV> cifs_dbg ( FYI , "bad<S2SV_blank>length<S2SV_blank>%d<S2SV_blank>for<S2SV_blank>count<S2SV_blank>%d\\n" , //<S2SV> * nbytes , io_parms -> length ) ; //<S2SV> rc = - EIO ; //<S2SV> * nbytes = 0 ; //<S2SV> } //<S2SV> if ( * buf ) { //<S2SV> memcpy ( * buf , ( char * ) rsp + rsp -> DataOffset , * nbytes ) ; //<S2SV> free_rsp_buf ( resp_buftype , rsp_iov . iov_base ) ; //<S2SV> } else if ( resp_buftype != CIFS_NO_BUFFER ) { //<S2SV> * buf = rsp_iov . iov_base ; //<S2SV> if ( resp_buftype == CIFS_SMALL_BUFFER ) //<S2SV> * buf_type = CIFS_SMALL_BUFFER ; //<S2SV> else if ( resp_buftype == CIFS_LARGE_BUFFER ) //<S2SV> * buf_type = CIFS_LARGE_BUFFER ; //<S2SV> } //<S2SV> return rc ; //<S2SV> } //<S2SV> 