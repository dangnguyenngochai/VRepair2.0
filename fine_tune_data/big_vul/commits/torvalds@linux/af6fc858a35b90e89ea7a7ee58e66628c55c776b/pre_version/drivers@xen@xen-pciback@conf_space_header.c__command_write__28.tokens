static int command_write ( struct pci_dev * dev , int offset , u16 value , void * data ) //<S2SV> { //<S2SV> struct xen_pcibk_dev_data * dev_data ; //<S2SV> int err ; //<S2SV> dev_data = pci_get_drvdata ( dev ) ; //<S2SV> if ( ! pci_is_enabled ( dev ) && is_enable_cmd ( value ) ) { //<S2SV> if ( unlikely ( verbose_request ) ) //<S2SV> printk ( KERN_DEBUG DRV_NAME ":<S2SV_blank>%s:<S2SV_blank>enable\\n" , //<S2SV> pci_name ( dev ) ) ; //<S2SV> err = pci_enable_device ( dev ) ; //<S2SV> if ( err ) //<S2SV> return err ; //<S2SV> if ( dev_data ) //<S2SV> dev_data -> enable_intx = 1 ; //<S2SV> } else if ( pci_is_enabled ( dev ) && ! is_enable_cmd ( value ) ) { //<S2SV> if ( unlikely ( verbose_request ) ) //<S2SV> printk ( KERN_DEBUG DRV_NAME ":<S2SV_blank>%s:<S2SV_blank>disable\\n" , //<S2SV> pci_name ( dev ) ) ; //<S2SV> pci_disable_device ( dev ) ; //<S2SV> if ( dev_data ) //<S2SV> dev_data -> enable_intx = 0 ; //<S2SV> } //<S2SV> if ( ! dev -> is_busmaster && is_master_cmd ( value ) ) { //<S2SV> if ( unlikely ( verbose_request ) ) //<S2SV> printk ( KERN_DEBUG DRV_NAME ":<S2SV_blank>%s:<S2SV_blank>set<S2SV_blank>bus<S2SV_blank>master\\n" , //<S2SV> pci_name ( dev ) ) ; //<S2SV> pci_set_master ( dev ) ; //<S2SV> } //<S2SV> if ( value & PCI_COMMAND_INVALIDATE ) { //<S2SV> if ( unlikely ( verbose_request ) ) //<S2SV> printk ( KERN_DEBUG //<S2SV> DRV_NAME ":<S2SV_blank>%s:<S2SV_blank>enable<S2SV_blank>memory-write-invalidate\\n" , //<S2SV> pci_name ( dev ) ) ; //<S2SV> err = pci_set_mwi ( dev ) ; //<S2SV> if ( err ) { //<S2SV> pr_warn ( "%s:<S2SV_blank>cannot<S2SV_blank>enable<S2SV_blank>memory-write-invalidate<S2SV_blank>(%d)\\n" , //<S2SV> pci_name ( dev ) , err ) ; //<S2SV> value &= ~ PCI_COMMAND_INVALIDATE ; //<S2SV> } //<S2SV> } //<S2SV> return pci_write_config_word ( dev , offset , value ) ; //<S2SV> } //<S2SV> 