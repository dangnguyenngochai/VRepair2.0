static struct svc_serv * nfs_callback_create_svc ( int minorversion ) //<S2SV> { //<S2SV> struct nfs_callback_data * cb_info = & nfs_callback_info [ minorversion ] ; //<S2SV> struct svc_serv * serv ; //<S2SV> struct svc_serv_ops * sv_ops ; //<S2SV> if ( cb_info -> serv ) { //<S2SV> svc_get ( cb_info -> serv ) ; //<S2SV> return cb_info -> serv ; //<S2SV> } //<S2SV> switch ( minorversion ) { //<S2SV> case 0 : //<S2SV> sv_ops = nfs4_cb_sv_ops [ 0 ] ; //<S2SV> break ; //<S2SV> default : //<S2SV> sv_ops = nfs4_cb_sv_ops [ 1 ] ; //<S2SV> } //<S2SV> if ( sv_ops == NULL ) //<S2SV> return ERR_PTR ( - ENOTSUPP ) ; //<S2SV> if ( cb_info -> users ) //<S2SV> printk ( KERN_WARNING "nfs_callback_create_svc:<S2SV_blank>no<S2SV_blank>kthread,<S2SV_blank>%d<S2SV_blank>users??\\n" , //<S2SV> cb_info -> users ) ; //<S2SV> serv = svc_create ( & nfs4_callback_program , NFS4_CALLBACK_BUFSIZE , sv_ops ) ; //<S2SV> if ( ! serv ) { //<S2SV> printk ( KERN_ERR "nfs_callback_create_svc:<S2SV_blank>create<S2SV_blank>service<S2SV_blank>failed\\n" ) ; //<S2SV> return ERR_PTR ( - ENOMEM ) ; //<S2SV> } //<S2SV> cb_info -> serv = serv ; //<S2SV> serv -> sv_maxconn = 1024 ; //<S2SV> dprintk ( "nfs_callback_create_svc:<S2SV_blank>service<S2SV_blank>created\\n" ) ; //<S2SV> return serv ; //<S2SV> } //<S2SV> 