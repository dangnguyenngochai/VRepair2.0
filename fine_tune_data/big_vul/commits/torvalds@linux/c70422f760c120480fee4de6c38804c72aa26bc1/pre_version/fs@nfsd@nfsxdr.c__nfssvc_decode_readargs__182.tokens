int //<S2SV> nfssvc_decode_readargs ( struct svc_rqst * rqstp , __be32 * p , //<S2SV> struct nfsd_readargs * args ) //<S2SV> { //<S2SV> unsigned int len ; //<S2SV> int v ; //<S2SV> p = decode_fh ( p , & args -> fh ) ; //<S2SV> if ( ! p ) //<S2SV> return 0 ; //<S2SV> args -> offset = ntohl ( * p ++ ) ; //<S2SV> len = args -> count = ntohl ( * p ++ ) ; //<S2SV> p ++ ; //<S2SV> len = min_t ( unsigned int , len , NFSSVC_MAXBLKSIZE_V2 ) ; //<S2SV> v = 0 ; //<S2SV> while ( len > 0 ) { //<S2SV> struct page * p = * ( rqstp -> rq_next_page ++ ) ; //<S2SV> rqstp -> rq_vec [ v ] . iov_base = page_address ( p ) ; //<S2SV> rqstp -> rq_vec [ v ] . iov_len = min_t ( unsigned int , len , PAGE_SIZE ) ; //<S2SV> len -= rqstp -> rq_vec [ v ] . iov_len ; //<S2SV> v ++ ; //<S2SV> } //<S2SV> args -> vlen = v ; //<S2SV> return xdr_argsize_check ( rqstp , p ) ; //<S2SV> } //<S2SV> 