static int //<S2SV> lockd ( void * vrqstp ) //<S2SV> { //<S2SV> int err = 0 ; //<S2SV> struct svc_rqst * rqstp = vrqstp ; //<S2SV> struct net * net = & init_net ; //<S2SV> struct lockd_net * ln = net_generic ( net , lockd_net_id ) ; //<S2SV> set_freezable ( ) ; //<S2SV> allow_signal ( SIGKILL ) ; //<S2SV> dprintk ( "NFS<S2SV_blank>locking<S2SV_blank>service<S2SV_blank>started<S2SV_blank>(ver<S2SV_blank>" LOCKD_VERSION ").\\n" ) ; //<S2SV> while ( ! kthread_should_stop ( ) ) { //<S2SV> long timeout = MAX_SCHEDULE_TIMEOUT ; //<S2SV> RPC_IFDEBUG ( char buf [ RPC_MAX_ADDRBUFLEN ] ) ; //<S2SV> rqstp -> rq_server -> sv_maxconn = nlm_max_connections ; //<S2SV> if ( signalled ( ) ) { //<S2SV> flush_signals ( current ) ; //<S2SV> restart_grace ( ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> timeout = nlmsvc_retry_blocked ( ) ; //<S2SV> err = svc_recv ( rqstp , timeout ) ; //<S2SV> if ( err == - EAGAIN || err == - EINTR ) //<S2SV> continue ; //<S2SV> dprintk ( "lockd:<S2SV_blank>request<S2SV_blank>from<S2SV_blank>%s\\n" , //<S2SV> svc_print_addr ( rqstp , buf , sizeof ( buf ) ) ) ; //<S2SV> svc_process ( rqstp ) ; //<S2SV> } //<S2SV> flush_signals ( current ) ; //<S2SV> if ( nlmsvc_ops ) //<S2SV> nlmsvc_invalidate_all ( ) ; //<S2SV> nlm_shutdown_hosts ( ) ; //<S2SV> cancel_delayed_work_sync ( & ln -> grace_period_end ) ; //<S2SV> locks_end_grace ( & ln -> lockd_manager ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 