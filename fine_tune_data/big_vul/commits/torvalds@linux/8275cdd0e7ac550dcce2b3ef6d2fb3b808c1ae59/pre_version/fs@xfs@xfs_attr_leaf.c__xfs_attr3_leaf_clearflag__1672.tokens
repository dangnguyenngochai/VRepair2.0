int //<S2SV> xfs_attr3_leaf_clearflag ( //<S2SV> struct xfs_da_args * args ) //<S2SV> { //<S2SV> struct xfs_attr_leafblock * leaf ; //<S2SV> struct xfs_attr_leaf_entry * entry ; //<S2SV> struct xfs_attr_leaf_name_remote * name_rmt ; //<S2SV> struct xfs_buf * bp ; //<S2SV> int error ; //<S2SV> # ifdef DEBUG //<S2SV> struct xfs_attr3_icleaf_hdr ichdr ; //<S2SV> xfs_attr_leaf_name_local_t * name_loc ; //<S2SV> int namelen ; //<S2SV> char * name ; //<S2SV> # endif //<S2SV> trace_xfs_attr_leaf_clearflag ( args ) ; //<S2SV> error = xfs_attr3_leaf_read ( args -> trans , args -> dp , args -> blkno , - 1 , & bp ) ; //<S2SV> if ( error ) //<S2SV> return ( error ) ; //<S2SV> leaf = bp -> b_addr ; //<S2SV> entry = & xfs_attr3_leaf_entryp ( leaf ) [ args -> index ] ; //<S2SV> ASSERT ( entry -> flags & XFS_ATTR_INCOMPLETE ) ; //<S2SV> # ifdef DEBUG //<S2SV> xfs_attr3_leaf_hdr_from_disk ( & ichdr , leaf ) ; //<S2SV> ASSERT ( args -> index < ichdr . count ) ; //<S2SV> ASSERT ( args -> index >= 0 ) ; //<S2SV> if ( entry -> flags & XFS_ATTR_LOCAL ) { //<S2SV> name_loc = xfs_attr3_leaf_name_local ( leaf , args -> index ) ; //<S2SV> namelen = name_loc -> namelen ; //<S2SV> name = ( char * ) name_loc -> nameval ; //<S2SV> } else { //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf , args -> index ) ; //<S2SV> namelen = name_rmt -> namelen ; //<S2SV> name = ( char * ) name_rmt -> name ; //<S2SV> } //<S2SV> ASSERT ( be32_to_cpu ( entry -> hashval ) == args -> hashval ) ; //<S2SV> ASSERT ( namelen == args -> namelen ) ; //<S2SV> ASSERT ( memcmp ( name , args -> name , namelen ) == 0 ) ; //<S2SV> # endif //<S2SV> entry -> flags &= ~ XFS_ATTR_INCOMPLETE ; //<S2SV> xfs_trans_log_buf ( args -> trans , bp , //<S2SV> XFS_DA_LOGRANGE ( leaf , entry , sizeof ( * entry ) ) ) ; //<S2SV> if ( args -> rmtblkno ) { //<S2SV> ASSERT ( ( entry -> flags & XFS_ATTR_LOCAL ) == 0 ) ; //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf , args -> index ) ; //<S2SV> name_rmt -> valueblk = cpu_to_be32 ( args -> rmtblkno ) ; //<S2SV> name_rmt -> valuelen = cpu_to_be32 ( args -> valuelen ) ; //<S2SV> xfs_trans_log_buf ( args -> trans , bp , //<S2SV> XFS_DA_LOGRANGE ( leaf , name_rmt , sizeof ( * name_rmt ) ) ) ; //<S2SV> } //<S2SV> return xfs_trans_roll ( & args -> trans , args -> dp ) ; //<S2SV> } //<S2SV> 