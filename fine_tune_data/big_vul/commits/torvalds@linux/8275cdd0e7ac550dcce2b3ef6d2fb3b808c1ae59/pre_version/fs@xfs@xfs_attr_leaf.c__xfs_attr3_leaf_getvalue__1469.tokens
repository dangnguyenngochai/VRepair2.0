int //<S2SV> xfs_attr3_leaf_getvalue ( //<S2SV> struct xfs_buf * bp , //<S2SV> struct xfs_da_args * args ) //<S2SV> { //<S2SV> struct xfs_attr_leafblock * leaf ; //<S2SV> struct xfs_attr3_icleaf_hdr ichdr ; //<S2SV> struct xfs_attr_leaf_entry * entry ; //<S2SV> struct xfs_attr_leaf_name_local * name_loc ; //<S2SV> struct xfs_attr_leaf_name_remote * name_rmt ; //<S2SV> int valuelen ; //<S2SV> leaf = bp -> b_addr ; //<S2SV> xfs_attr3_leaf_hdr_from_disk ( & ichdr , leaf ) ; //<S2SV> ASSERT ( ichdr . count < XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) ; //<S2SV> ASSERT ( args -> index < ichdr . count ) ; //<S2SV> entry = & xfs_attr3_leaf_entryp ( leaf ) [ args -> index ] ; //<S2SV> if ( entry -> flags & XFS_ATTR_LOCAL ) { //<S2SV> name_loc = xfs_attr3_leaf_name_local ( leaf , args -> index ) ; //<S2SV> ASSERT ( name_loc -> namelen == args -> namelen ) ; //<S2SV> ASSERT ( memcmp ( args -> name , name_loc -> nameval , args -> namelen ) == 0 ) ; //<S2SV> valuelen = be16_to_cpu ( name_loc -> valuelen ) ; //<S2SV> if ( args -> flags & ATTR_KERNOVAL ) { //<S2SV> args -> valuelen = valuelen ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( args -> valuelen < valuelen ) { //<S2SV> args -> valuelen = valuelen ; //<S2SV> return XFS_ERROR ( ERANGE ) ; //<S2SV> } //<S2SV> args -> valuelen = valuelen ; //<S2SV> memcpy ( args -> value , & name_loc -> nameval [ args -> namelen ] , valuelen ) ; //<S2SV> } else { //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf , args -> index ) ; //<S2SV> ASSERT ( name_rmt -> namelen == args -> namelen ) ; //<S2SV> ASSERT ( memcmp ( args -> name , name_rmt -> name , args -> namelen ) == 0 ) ; //<S2SV> valuelen = be32_to_cpu ( name_rmt -> valuelen ) ; //<S2SV> args -> rmtblkno = be32_to_cpu ( name_rmt -> valueblk ) ; //<S2SV> args -> rmtblkcnt = xfs_attr3_rmt_blocks ( args -> dp -> i_mount , //<S2SV> valuelen ) ; //<S2SV> if ( args -> flags & ATTR_KERNOVAL ) { //<S2SV> args -> valuelen = valuelen ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( args -> valuelen < valuelen ) { //<S2SV> args -> valuelen = valuelen ; //<S2SV> return XFS_ERROR ( ERANGE ) ; //<S2SV> } //<S2SV> args -> valuelen = valuelen ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 