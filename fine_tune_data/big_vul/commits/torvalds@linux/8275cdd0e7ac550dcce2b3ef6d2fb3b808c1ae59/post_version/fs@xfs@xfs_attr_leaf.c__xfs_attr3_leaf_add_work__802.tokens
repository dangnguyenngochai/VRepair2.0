STATIC int //<S2SV> xfs_attr3_leaf_add_work ( //<S2SV> struct xfs_buf * bp , //<S2SV> struct xfs_attr3_icleaf_hdr * ichdr , //<S2SV> struct xfs_da_args * args , //<S2SV> int mapindex ) //<S2SV> { //<S2SV> struct xfs_attr_leafblock * leaf ; //<S2SV> struct xfs_attr_leaf_entry * entry ; //<S2SV> struct xfs_attr_leaf_name_local * name_loc ; //<S2SV> struct xfs_attr_leaf_name_remote * name_rmt ; //<S2SV> struct xfs_mount * mp ; //<S2SV> int tmp ; //<S2SV> int i ; //<S2SV> trace_xfs_attr_leaf_add_work ( args ) ; //<S2SV> leaf = bp -> b_addr ; //<S2SV> ASSERT ( mapindex >= 0 && mapindex < XFS_ATTR_LEAF_MAPSIZE ) ; //<S2SV> ASSERT ( args -> index >= 0 && args -> index <= ichdr -> count ) ; //<S2SV> entry = & xfs_attr3_leaf_entryp ( leaf ) [ args -> index ] ; //<S2SV> if ( args -> index < ichdr -> count ) { //<S2SV> tmp = ichdr -> count - args -> index ; //<S2SV> tmp *= sizeof ( xfs_attr_leaf_entry_t ) ; //<S2SV> memmove ( entry + 1 , entry , tmp ) ; //<S2SV> xfs_trans_log_buf ( args -> trans , bp , //<S2SV> XFS_DA_LOGRANGE ( leaf , entry , tmp + sizeof ( * entry ) ) ) ; //<S2SV> } //<S2SV> ichdr -> count ++ ; //<S2SV> mp = args -> trans -> t_mountp ; //<S2SV> ASSERT ( ichdr -> freemap [ mapindex ] . base < XFS_LBSIZE ( mp ) ) ; //<S2SV> ASSERT ( ( ichdr -> freemap [ mapindex ] . base & 0x3 ) == 0 ) ; //<S2SV> ASSERT ( ichdr -> freemap [ mapindex ] . size >= //<S2SV> xfs_attr_leaf_newentsize ( args -> namelen , args -> valuelen , //<S2SV> mp -> m_sb . sb_blocksize , NULL ) ) ; //<S2SV> ASSERT ( ichdr -> freemap [ mapindex ] . size < XFS_LBSIZE ( mp ) ) ; //<S2SV> ASSERT ( ( ichdr -> freemap [ mapindex ] . size & 0x3 ) == 0 ) ; //<S2SV> ichdr -> freemap [ mapindex ] . size -= //<S2SV> xfs_attr_leaf_newentsize ( args -> namelen , args -> valuelen , //<S2SV> mp -> m_sb . sb_blocksize , & tmp ) ; //<S2SV> entry -> nameidx = cpu_to_be16 ( ichdr -> freemap [ mapindex ] . base + //<S2SV> ichdr -> freemap [ mapindex ] . size ) ; //<S2SV> entry -> hashval = cpu_to_be32 ( args -> hashval ) ; //<S2SV> entry -> flags = tmp ? XFS_ATTR_LOCAL : 0 ; //<S2SV> entry -> flags |= XFS_ATTR_NSP_ARGS_TO_ONDISK ( args -> flags ) ; //<S2SV> if ( args -> op_flags & XFS_DA_OP_RENAME ) { //<S2SV> entry -> flags |= XFS_ATTR_INCOMPLETE ; //<S2SV> if ( ( args -> blkno2 == args -> blkno ) && //<S2SV> ( args -> index2 <= args -> index ) ) { //<S2SV> args -> index2 ++ ; //<S2SV> } //<S2SV> } //<S2SV> xfs_trans_log_buf ( args -> trans , bp , //<S2SV> XFS_DA_LOGRANGE ( leaf , entry , sizeof ( * entry ) ) ) ; //<S2SV> ASSERT ( ( args -> index == 0 ) || //<S2SV> ( be32_to_cpu ( entry -> hashval ) >= be32_to_cpu ( ( entry - 1 ) -> hashval ) ) ) ; //<S2SV> ASSERT ( ( args -> index == ichdr -> count - 1 ) || //<S2SV> ( be32_to_cpu ( entry -> hashval ) <= be32_to_cpu ( ( entry + 1 ) -> hashval ) ) ) ; //<S2SV> if ( entry -> flags & XFS_ATTR_LOCAL ) { //<S2SV> name_loc = xfs_attr3_leaf_name_local ( leaf , args -> index ) ; //<S2SV> name_loc -> namelen = args -> namelen ; //<S2SV> name_loc -> valuelen = cpu_to_be16 ( args -> valuelen ) ; //<S2SV> memcpy ( ( char * ) name_loc -> nameval , args -> name , args -> namelen ) ; //<S2SV> memcpy ( ( char * ) & name_loc -> nameval [ args -> namelen ] , args -> value , //<S2SV> be16_to_cpu ( name_loc -> valuelen ) ) ; //<S2SV> } else { //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf , args -> index ) ; //<S2SV> name_rmt -> namelen = args -> namelen ; //<S2SV> memcpy ( ( char * ) name_rmt -> name , args -> name , args -> namelen ) ; //<S2SV> entry -> flags |= XFS_ATTR_INCOMPLETE ; //<S2SV> name_rmt -> valuelen = 0 ; //<S2SV> name_rmt -> valueblk = 0 ; //<S2SV> args -> rmtblkno = 1 ; //<S2SV> args -> rmtblkcnt = xfs_attr3_rmt_blocks ( mp , args -> valuelen ) ; //<S2SV> args -> rmtvaluelen = args -> valuelen ; //<S2SV> } //<S2SV> xfs_trans_log_buf ( args -> trans , bp , //<S2SV> XFS_DA_LOGRANGE ( leaf , xfs_attr3_leaf_name ( leaf , args -> index ) , //<S2SV> xfs_attr_leaf_entsize ( leaf , args -> index ) ) ) ; //<S2SV> if ( be16_to_cpu ( entry -> nameidx ) < ichdr -> firstused ) //<S2SV> ichdr -> firstused = be16_to_cpu ( entry -> nameidx ) ; //<S2SV> ASSERT ( ichdr -> firstused >= ichdr -> count * sizeof ( xfs_attr_leaf_entry_t ) //<S2SV> + xfs_attr3_leaf_hdr_size ( leaf ) ) ; //<S2SV> tmp = ( ichdr -> count - 1 ) * sizeof ( xfs_attr_leaf_entry_t ) //<S2SV> + xfs_attr3_leaf_hdr_size ( leaf ) ; //<S2SV> for ( i = 0 ; i < XFS_ATTR_LEAF_MAPSIZE ; i ++ ) { //<S2SV> if ( ichdr -> freemap [ i ] . base == tmp ) { //<S2SV> ichdr -> freemap [ i ] . base += sizeof ( xfs_attr_leaf_entry_t ) ; //<S2SV> ichdr -> freemap [ i ] . size -= sizeof ( xfs_attr_leaf_entry_t ) ; //<S2SV> } //<S2SV> } //<S2SV> ichdr -> usedbytes += xfs_attr_leaf_entsize ( leaf , args -> index ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 