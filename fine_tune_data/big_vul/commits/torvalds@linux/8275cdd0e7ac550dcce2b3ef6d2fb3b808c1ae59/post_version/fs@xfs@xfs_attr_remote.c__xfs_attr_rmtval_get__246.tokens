int //<S2SV> xfs_attr_rmtval_get ( //<S2SV> struct xfs_da_args * args ) //<S2SV> { //<S2SV> struct xfs_bmbt_irec map [ ATTR_RMTVALUE_MAPSIZE ] ; //<S2SV> struct xfs_mount * mp = args -> dp -> i_mount ; //<S2SV> struct xfs_buf * bp ; //<S2SV> xfs_dablk_t lblkno = args -> rmtblkno ; //<S2SV> __uint8_t * dst = args -> value ; //<S2SV> int valuelen ; //<S2SV> int nmap ; //<S2SV> int error ; //<S2SV> int blkcnt = args -> rmtblkcnt ; //<S2SV> int i ; //<S2SV> int offset = 0 ; //<S2SV> trace_xfs_attr_rmtval_get ( args ) ; //<S2SV> ASSERT ( ! ( args -> flags & ATTR_KERNOVAL ) ) ; //<S2SV> ASSERT ( args -> rmtvaluelen == args -> valuelen ) ; //<S2SV> valuelen = args -> rmtvaluelen ; //<S2SV> while ( valuelen > 0 ) { //<S2SV> nmap = ATTR_RMTVALUE_MAPSIZE ; //<S2SV> error = xfs_bmapi_read ( args -> dp , ( xfs_fileoff_t ) lblkno , //<S2SV> blkcnt , map , & nmap , //<S2SV> XFS_BMAPI_ATTRFORK ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> ASSERT ( nmap >= 1 ) ; //<S2SV> for ( i = 0 ; ( i < nmap ) && ( valuelen > 0 ) ; i ++ ) { //<S2SV> xfs_daddr_t dblkno ; //<S2SV> int dblkcnt ; //<S2SV> ASSERT ( ( map [ i ] . br_startblock != DELAYSTARTBLOCK ) && //<S2SV> ( map [ i ] . br_startblock != HOLESTARTBLOCK ) ) ; //<S2SV> dblkno = XFS_FSB_TO_DADDR ( mp , map [ i ] . br_startblock ) ; //<S2SV> dblkcnt = XFS_FSB_TO_BB ( mp , map [ i ] . br_blockcount ) ; //<S2SV> error = xfs_trans_read_buf ( mp , NULL , mp -> m_ddev_targp , //<S2SV> dblkno , dblkcnt , 0 , & bp , //<S2SV> & xfs_attr3_rmt_buf_ops ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> error = xfs_attr_rmtval_copyout ( mp , bp , args -> dp -> i_ino , //<S2SV> & offset , & valuelen , //<S2SV> & dst ) ; //<S2SV> xfs_buf_relse ( bp ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> lblkno += map [ i ] . br_blockcount ; //<S2SV> blkcnt -= map [ i ] . br_blockcount ; //<S2SV> } //<S2SV> } //<S2SV> ASSERT ( valuelen == 0 ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 