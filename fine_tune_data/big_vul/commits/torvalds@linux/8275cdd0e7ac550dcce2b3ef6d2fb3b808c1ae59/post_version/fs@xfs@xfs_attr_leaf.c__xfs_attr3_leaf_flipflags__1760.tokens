int //<S2SV> xfs_attr3_leaf_flipflags ( //<S2SV> struct xfs_da_args * args ) //<S2SV> { //<S2SV> struct xfs_attr_leafblock * leaf1 ; //<S2SV> struct xfs_attr_leafblock * leaf2 ; //<S2SV> struct xfs_attr_leaf_entry * entry1 ; //<S2SV> struct xfs_attr_leaf_entry * entry2 ; //<S2SV> struct xfs_attr_leaf_name_remote * name_rmt ; //<S2SV> struct xfs_buf * bp1 ; //<S2SV> struct xfs_buf * bp2 ; //<S2SV> int error ; //<S2SV> # ifdef DEBUG //<S2SV> struct xfs_attr3_icleaf_hdr ichdr1 ; //<S2SV> struct xfs_attr3_icleaf_hdr ichdr2 ; //<S2SV> xfs_attr_leaf_name_local_t * name_loc ; //<S2SV> int namelen1 , namelen2 ; //<S2SV> char * name1 , * name2 ; //<S2SV> # endif //<S2SV> trace_xfs_attr_leaf_flipflags ( args ) ; //<S2SV> error = xfs_attr3_leaf_read ( args -> trans , args -> dp , args -> blkno , - 1 , & bp1 ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> if ( args -> blkno2 != args -> blkno ) { //<S2SV> error = xfs_attr3_leaf_read ( args -> trans , args -> dp , args -> blkno2 , //<S2SV> - 1 , & bp2 ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> } else { //<S2SV> bp2 = bp1 ; //<S2SV> } //<S2SV> leaf1 = bp1 -> b_addr ; //<S2SV> entry1 = & xfs_attr3_leaf_entryp ( leaf1 ) [ args -> index ] ; //<S2SV> leaf2 = bp2 -> b_addr ; //<S2SV> entry2 = & xfs_attr3_leaf_entryp ( leaf2 ) [ args -> index2 ] ; //<S2SV> # ifdef DEBUG //<S2SV> xfs_attr3_leaf_hdr_from_disk ( & ichdr1 , leaf1 ) ; //<S2SV> ASSERT ( args -> index < ichdr1 . count ) ; //<S2SV> ASSERT ( args -> index >= 0 ) ; //<S2SV> xfs_attr3_leaf_hdr_from_disk ( & ichdr2 , leaf2 ) ; //<S2SV> ASSERT ( args -> index2 < ichdr2 . count ) ; //<S2SV> ASSERT ( args -> index2 >= 0 ) ; //<S2SV> if ( entry1 -> flags & XFS_ATTR_LOCAL ) { //<S2SV> name_loc = xfs_attr3_leaf_name_local ( leaf1 , args -> index ) ; //<S2SV> namelen1 = name_loc -> namelen ; //<S2SV> name1 = ( char * ) name_loc -> nameval ; //<S2SV> } else { //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf1 , args -> index ) ; //<S2SV> namelen1 = name_rmt -> namelen ; //<S2SV> name1 = ( char * ) name_rmt -> name ; //<S2SV> } //<S2SV> if ( entry2 -> flags & XFS_ATTR_LOCAL ) { //<S2SV> name_loc = xfs_attr3_leaf_name_local ( leaf2 , args -> index2 ) ; //<S2SV> namelen2 = name_loc -> namelen ; //<S2SV> name2 = ( char * ) name_loc -> nameval ; //<S2SV> } else { //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf2 , args -> index2 ) ; //<S2SV> namelen2 = name_rmt -> namelen ; //<S2SV> name2 = ( char * ) name_rmt -> name ; //<S2SV> } //<S2SV> ASSERT ( be32_to_cpu ( entry1 -> hashval ) == be32_to_cpu ( entry2 -> hashval ) ) ; //<S2SV> ASSERT ( namelen1 == namelen2 ) ; //<S2SV> ASSERT ( memcmp ( name1 , name2 , namelen1 ) == 0 ) ; //<S2SV> # endif //<S2SV> ASSERT ( entry1 -> flags & XFS_ATTR_INCOMPLETE ) ; //<S2SV> ASSERT ( ( entry2 -> flags & XFS_ATTR_INCOMPLETE ) == 0 ) ; //<S2SV> entry1 -> flags &= ~ XFS_ATTR_INCOMPLETE ; //<S2SV> xfs_trans_log_buf ( args -> trans , bp1 , //<S2SV> XFS_DA_LOGRANGE ( leaf1 , entry1 , sizeof ( * entry1 ) ) ) ; //<S2SV> if ( args -> rmtblkno ) { //<S2SV> ASSERT ( ( entry1 -> flags & XFS_ATTR_LOCAL ) == 0 ) ; //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf1 , args -> index ) ; //<S2SV> name_rmt -> valueblk = cpu_to_be32 ( args -> rmtblkno ) ; //<S2SV> name_rmt -> valuelen = cpu_to_be32 ( args -> rmtvaluelen ) ; //<S2SV> xfs_trans_log_buf ( args -> trans , bp1 , //<S2SV> XFS_DA_LOGRANGE ( leaf1 , name_rmt , sizeof ( * name_rmt ) ) ) ; //<S2SV> } //<S2SV> entry2 -> flags |= XFS_ATTR_INCOMPLETE ; //<S2SV> xfs_trans_log_buf ( args -> trans , bp2 , //<S2SV> XFS_DA_LOGRANGE ( leaf2 , entry2 , sizeof ( * entry2 ) ) ) ; //<S2SV> if ( ( entry2 -> flags & XFS_ATTR_LOCAL ) == 0 ) { //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf2 , args -> index2 ) ; //<S2SV> name_rmt -> valueblk = 0 ; //<S2SV> name_rmt -> valuelen = 0 ; //<S2SV> xfs_trans_log_buf ( args -> trans , bp2 , //<S2SV> XFS_DA_LOGRANGE ( leaf2 , name_rmt , sizeof ( * name_rmt ) ) ) ; //<S2SV> } //<S2SV> error = xfs_trans_roll ( & args -> trans , args -> dp ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 