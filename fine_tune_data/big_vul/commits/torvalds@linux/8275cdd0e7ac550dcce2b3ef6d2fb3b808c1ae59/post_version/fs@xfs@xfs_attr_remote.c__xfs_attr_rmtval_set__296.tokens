int //<S2SV> xfs_attr_rmtval_set ( //<S2SV> struct xfs_da_args * args ) //<S2SV> { //<S2SV> struct xfs_inode * dp = args -> dp ; //<S2SV> struct xfs_mount * mp = dp -> i_mount ; //<S2SV> struct xfs_bmbt_irec map ; //<S2SV> xfs_dablk_t lblkno ; //<S2SV> xfs_fileoff_t lfileoff = 0 ; //<S2SV> __uint8_t * src = args -> value ; //<S2SV> int blkcnt ; //<S2SV> int valuelen ; //<S2SV> int nmap ; //<S2SV> int error ; //<S2SV> int offset = 0 ; //<S2SV> trace_xfs_attr_rmtval_set ( args ) ; //<S2SV> blkcnt = xfs_attr3_rmt_blocks ( mp , args -> rmtvaluelen ) ; //<S2SV> error = xfs_bmap_first_unused ( args -> trans , args -> dp , blkcnt , & lfileoff , //<S2SV> XFS_ATTR_FORK ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> args -> rmtblkno = lblkno = ( xfs_dablk_t ) lfileoff ; //<S2SV> args -> rmtblkcnt = blkcnt ; //<S2SV> while ( blkcnt > 0 ) { //<S2SV> int committed ; //<S2SV> xfs_bmap_init ( args -> flist , args -> firstblock ) ; //<S2SV> nmap = 1 ; //<S2SV> error = xfs_bmapi_write ( args -> trans , dp , ( xfs_fileoff_t ) lblkno , //<S2SV> blkcnt , //<S2SV> XFS_BMAPI_ATTRFORK | XFS_BMAPI_METADATA , //<S2SV> args -> firstblock , args -> total , & map , & nmap , //<S2SV> args -> flist ) ; //<S2SV> if ( ! error ) { //<S2SV> error = xfs_bmap_finish ( & args -> trans , args -> flist , //<S2SV> & committed ) ; //<S2SV> } //<S2SV> if ( error ) { //<S2SV> ASSERT ( committed ) ; //<S2SV> args -> trans = NULL ; //<S2SV> xfs_bmap_cancel ( args -> flist ) ; //<S2SV> return ( error ) ; //<S2SV> } //<S2SV> if ( committed ) //<S2SV> xfs_trans_ijoin ( args -> trans , dp , 0 ) ; //<S2SV> ASSERT ( nmap == 1 ) ; //<S2SV> ASSERT ( ( map . br_startblock != DELAYSTARTBLOCK ) && //<S2SV> ( map . br_startblock != HOLESTARTBLOCK ) ) ; //<S2SV> lblkno += map . br_blockcount ; //<S2SV> blkcnt -= map . br_blockcount ; //<S2SV> error = xfs_trans_roll ( & args -> trans , dp ) ; //<S2SV> if ( error ) //<S2SV> return ( error ) ; //<S2SV> } //<S2SV> lblkno = args -> rmtblkno ; //<S2SV> blkcnt = args -> rmtblkcnt ; //<S2SV> valuelen = args -> rmtvaluelen ; //<S2SV> while ( valuelen > 0 ) { //<S2SV> struct xfs_buf * bp ; //<S2SV> xfs_daddr_t dblkno ; //<S2SV> int dblkcnt ; //<S2SV> ASSERT ( blkcnt > 0 ) ; //<S2SV> xfs_bmap_init ( args -> flist , args -> firstblock ) ; //<S2SV> nmap = 1 ; //<S2SV> error = xfs_bmapi_read ( dp , ( xfs_fileoff_t ) lblkno , //<S2SV> blkcnt , & map , & nmap , //<S2SV> XFS_BMAPI_ATTRFORK ) ; //<S2SV> if ( error ) //<S2SV> return ( error ) ; //<S2SV> ASSERT ( nmap == 1 ) ; //<S2SV> ASSERT ( ( map . br_startblock != DELAYSTARTBLOCK ) && //<S2SV> ( map . br_startblock != HOLESTARTBLOCK ) ) ; //<S2SV> dblkno = XFS_FSB_TO_DADDR ( mp , map . br_startblock ) , //<S2SV> dblkcnt = XFS_FSB_TO_BB ( mp , map . br_blockcount ) ; //<S2SV> bp = xfs_buf_get ( mp -> m_ddev_targp , dblkno , dblkcnt , 0 ) ; //<S2SV> if ( ! bp ) //<S2SV> return ENOMEM ; //<S2SV> bp -> b_ops = & xfs_attr3_rmt_buf_ops ; //<S2SV> xfs_attr_rmtval_copyin ( mp , bp , args -> dp -> i_ino , & offset , //<S2SV> & valuelen , & src ) ; //<S2SV> error = xfs_bwrite ( bp ) ; //<S2SV> xfs_buf_relse ( bp ) ; //<S2SV> if ( error ) //<S2SV> return error ; //<S2SV> lblkno += map . br_blockcount ; //<S2SV> blkcnt -= map . br_blockcount ; //<S2SV> } //<S2SV> ASSERT ( valuelen == 0 ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 