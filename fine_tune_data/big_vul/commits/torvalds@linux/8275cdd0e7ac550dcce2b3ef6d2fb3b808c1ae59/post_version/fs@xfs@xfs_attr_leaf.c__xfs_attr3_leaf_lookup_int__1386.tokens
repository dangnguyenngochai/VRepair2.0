int //<S2SV> xfs_attr3_leaf_lookup_int ( //<S2SV> struct xfs_buf * bp , //<S2SV> struct xfs_da_args * args ) //<S2SV> { //<S2SV> struct xfs_attr_leafblock * leaf ; //<S2SV> struct xfs_attr3_icleaf_hdr ichdr ; //<S2SV> struct xfs_attr_leaf_entry * entry ; //<S2SV> struct xfs_attr_leaf_entry * entries ; //<S2SV> struct xfs_attr_leaf_name_local * name_loc ; //<S2SV> struct xfs_attr_leaf_name_remote * name_rmt ; //<S2SV> xfs_dahash_t hashval ; //<S2SV> int probe ; //<S2SV> int span ; //<S2SV> trace_xfs_attr_leaf_lookup ( args ) ; //<S2SV> leaf = bp -> b_addr ; //<S2SV> xfs_attr3_leaf_hdr_from_disk ( & ichdr , leaf ) ; //<S2SV> entries = xfs_attr3_leaf_entryp ( leaf ) ; //<S2SV> ASSERT ( ichdr . count < XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) ; //<S2SV> hashval = args -> hashval ; //<S2SV> probe = span = ichdr . count / 2 ; //<S2SV> for ( entry = & entries [ probe ] ; span > 4 ; entry = & entries [ probe ] ) { //<S2SV> span /= 2 ; //<S2SV> if ( be32_to_cpu ( entry -> hashval ) < hashval ) //<S2SV> probe += span ; //<S2SV> else if ( be32_to_cpu ( entry -> hashval ) > hashval ) //<S2SV> probe -= span ; //<S2SV> else //<S2SV> break ; //<S2SV> } //<S2SV> ASSERT ( probe >= 0 && ( ! ichdr . count || probe < ichdr . count ) ) ; //<S2SV> ASSERT ( span <= 4 || be32_to_cpu ( entry -> hashval ) == hashval ) ; //<S2SV> while ( probe > 0 && be32_to_cpu ( entry -> hashval ) >= hashval ) { //<S2SV> entry -- ; //<S2SV> probe -- ; //<S2SV> } //<S2SV> while ( probe < ichdr . count && //<S2SV> be32_to_cpu ( entry -> hashval ) < hashval ) { //<S2SV> entry ++ ; //<S2SV> probe ++ ; //<S2SV> } //<S2SV> if ( probe == ichdr . count || be32_to_cpu ( entry -> hashval ) != hashval ) { //<S2SV> args -> index = probe ; //<S2SV> return XFS_ERROR ( ENOATTR ) ; //<S2SV> } //<S2SV> for ( ; probe < ichdr . count && ( be32_to_cpu ( entry -> hashval ) == hashval ) ; //<S2SV> entry ++ , probe ++ ) { //<S2SV> if ( ( args -> flags & XFS_ATTR_INCOMPLETE ) != //<S2SV> ( entry -> flags & XFS_ATTR_INCOMPLETE ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> if ( entry -> flags & XFS_ATTR_LOCAL ) { //<S2SV> name_loc = xfs_attr3_leaf_name_local ( leaf , probe ) ; //<S2SV> if ( name_loc -> namelen != args -> namelen ) //<S2SV> continue ; //<S2SV> if ( memcmp ( args -> name , name_loc -> nameval , //<S2SV> args -> namelen ) != 0 ) //<S2SV> continue ; //<S2SV> if ( ! xfs_attr_namesp_match ( args -> flags , entry -> flags ) ) //<S2SV> continue ; //<S2SV> args -> index = probe ; //<S2SV> return XFS_ERROR ( EEXIST ) ; //<S2SV> } else { //<S2SV> name_rmt = xfs_attr3_leaf_name_remote ( leaf , probe ) ; //<S2SV> if ( name_rmt -> namelen != args -> namelen ) //<S2SV> continue ; //<S2SV> if ( memcmp ( args -> name , name_rmt -> name , //<S2SV> args -> namelen ) != 0 ) //<S2SV> continue ; //<S2SV> if ( ! xfs_attr_namesp_match ( args -> flags , entry -> flags ) ) //<S2SV> continue ; //<S2SV> args -> index = probe ; //<S2SV> args -> rmtvaluelen = be32_to_cpu ( name_rmt -> valuelen ) ; //<S2SV> args -> rmtblkno = be32_to_cpu ( name_rmt -> valueblk ) ; //<S2SV> args -> rmtblkcnt = xfs_attr3_rmt_blocks ( //<S2SV> args -> dp -> i_mount , //<S2SV> args -> rmtvaluelen ) ; //<S2SV> return XFS_ERROR ( EEXIST ) ; //<S2SV> } //<S2SV> } //<S2SV> args -> index = probe ; //<S2SV> return XFS_ERROR ( ENOATTR ) ; //<S2SV> } //<S2SV> 