asmlinkage long sys_oabi_fcntl64 ( unsigned int fd , unsigned int cmd , //<S2SV> unsigned long arg ) //<S2SV> { //<S2SV> struct oabi_flock64 user ; //<S2SV> struct flock64 kernel ; //<S2SV> mm_segment_t fs = USER_DS ; //<S2SV> unsigned long local_arg = arg ; //<S2SV> int ret ; //<S2SV> switch ( cmd ) { //<S2SV> case F_OFD_GETLK : //<S2SV> case F_OFD_SETLK : //<S2SV> case F_OFD_SETLKW : //<S2SV> case F_GETLK64 : //<S2SV> case F_SETLK64 : //<S2SV> case F_SETLKW64 : //<S2SV> if ( copy_from_user ( & user , ( struct oabi_flock64 __user * ) arg , //<S2SV> sizeof ( user ) ) ) //<S2SV> return - EFAULT ; //<S2SV> kernel . l_type = user . l_type ; //<S2SV> kernel . l_whence = user . l_whence ; //<S2SV> kernel . l_start = user . l_start ; //<S2SV> kernel . l_len = user . l_len ; //<S2SV> kernel . l_pid = user . l_pid ; //<S2SV> local_arg = ( unsigned long ) & kernel ; //<S2SV> fs = get_fs ( ) ; //<S2SV> set_fs ( KERNEL_DS ) ; //<S2SV> } //<S2SV> ret = sys_fcntl64 ( fd , cmd , local_arg ) ; //<S2SV> switch ( cmd ) { //<S2SV> case F_GETLK64 : //<S2SV> if ( ! ret ) { //<S2SV> user . l_type = kernel . l_type ; //<S2SV> user . l_whence = kernel . l_whence ; //<S2SV> user . l_start = kernel . l_start ; //<S2SV> user . l_len = kernel . l_len ; //<S2SV> user . l_pid = kernel . l_pid ; //<S2SV> if ( copy_to_user ( ( struct oabi_flock64 __user * ) arg , //<S2SV> & user , sizeof ( user ) ) ) //<S2SV> ret = - EFAULT ; //<S2SV> } //<S2SV> case F_SETLK64 : //<S2SV> case F_SETLKW64 : //<S2SV> set_fs ( fs ) ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> 