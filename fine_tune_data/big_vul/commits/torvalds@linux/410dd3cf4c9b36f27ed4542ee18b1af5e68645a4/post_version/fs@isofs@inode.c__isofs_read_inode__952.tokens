static int isofs_read_inode ( struct inode * inode , int relocated ) //<S2SV> { //<S2SV> struct super_block * sb = inode -> i_sb ; //<S2SV> struct isofs_sb_info * sbi = ISOFS_SB ( sb ) ; //<S2SV> unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; //<S2SV> unsigned long block ; //<S2SV> int high_sierra = sbi -> s_high_sierra ; //<S2SV> struct buffer_head * bh = NULL ; //<S2SV> struct iso_directory_record * de ; //<S2SV> struct iso_directory_record * tmpde = NULL ; //<S2SV> unsigned int de_len ; //<S2SV> unsigned long offset ; //<S2SV> struct iso_inode_info * ei = ISOFS_I ( inode ) ; //<S2SV> int ret = - EIO ; //<S2SV> block = ei -> i_iget5_block ; //<S2SV> bh = sb_bread ( inode -> i_sb , block ) ; //<S2SV> if ( ! bh ) //<S2SV> goto out_badread ; //<S2SV> offset = ei -> i_iget5_offset ; //<S2SV> de = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; //<S2SV> de_len = * ( unsigned char * ) de ; //<S2SV> if ( offset + de_len > bufsize ) { //<S2SV> int frag1 = bufsize - offset ; //<S2SV> tmpde = kmalloc ( de_len , GFP_KERNEL ) ; //<S2SV> if ( tmpde == NULL ) { //<S2SV> printk ( KERN_INFO "%s:<S2SV_blank>out<S2SV_blank>of<S2SV_blank>memory\\n" , __func__ ) ; //<S2SV> ret = - ENOMEM ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> memcpy ( tmpde , bh -> b_data + offset , frag1 ) ; //<S2SV> brelse ( bh ) ; //<S2SV> bh = sb_bread ( inode -> i_sb , ++ block ) ; //<S2SV> if ( ! bh ) //<S2SV> goto out_badread ; //<S2SV> memcpy ( ( char * ) tmpde + frag1 , bh -> b_data , de_len - frag1 ) ; //<S2SV> de = tmpde ; //<S2SV> } //<S2SV> inode -> i_ino = isofs_get_ino ( ei -> i_iget5_block , //<S2SV> ei -> i_iget5_offset , //<S2SV> ISOFS_BUFFER_BITS ( inode ) ) ; //<S2SV> ei -> i_file_format = isofs_file_normal ; //<S2SV> if ( de -> flags [ - high_sierra ] & 2 ) { //<S2SV> if ( sbi -> s_dmode != ISOFS_INVALID_MODE ) //<S2SV> inode -> i_mode = S_IFDIR | sbi -> s_dmode ; //<S2SV> else //<S2SV> inode -> i_mode = S_IFDIR | S_IRUGO | S_IXUGO ; //<S2SV> set_nlink ( inode , 1 ) ; //<S2SV> } else { //<S2SV> if ( sbi -> s_fmode != ISOFS_INVALID_MODE ) { //<S2SV> inode -> i_mode = S_IFREG | sbi -> s_fmode ; //<S2SV> } else { //<S2SV> inode -> i_mode = S_IFREG | S_IRUGO | S_IXUGO ; //<S2SV> } //<S2SV> set_nlink ( inode , 1 ) ; //<S2SV> } //<S2SV> inode -> i_uid = sbi -> s_uid ; //<S2SV> inode -> i_gid = sbi -> s_gid ; //<S2SV> inode -> i_blocks = 0 ; //<S2SV> ei -> i_format_parm [ 0 ] = 0 ; //<S2SV> ei -> i_format_parm [ 1 ] = 0 ; //<S2SV> ei -> i_format_parm [ 2 ] = 0 ; //<S2SV> ei -> i_section_size = isonum_733 ( de -> size ) ; //<S2SV> if ( de -> flags [ - high_sierra ] & 0x80 ) { //<S2SV> ret = isofs_read_level3_size ( inode ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto fail ; //<S2SV> ret = - EIO ; //<S2SV> } else { //<S2SV> ei -> i_next_section_block = 0 ; //<S2SV> ei -> i_next_section_offset = 0 ; //<S2SV> inode -> i_size = isonum_733 ( de -> size ) ; //<S2SV> } //<S2SV> if ( sbi -> s_cruft ) //<S2SV> inode -> i_size &= 0x00ffffff ; //<S2SV> if ( de -> interleave [ 0 ] ) { //<S2SV> printk ( KERN_DEBUG "ISOFS:<S2SV_blank>Interleaved<S2SV_blank>files<S2SV_blank>not<S2SV_blank>(yet)<S2SV_blank>supported.\\n" ) ; //<S2SV> inode -> i_size = 0 ; //<S2SV> } //<S2SV> if ( de -> file_unit_size [ 0 ] != 0 ) { //<S2SV> printk ( KERN_DEBUG "ISOFS:<S2SV_blank>File<S2SV_blank>unit<S2SV_blank>size<S2SV_blank>!=<S2SV_blank>0<S2SV_blank>for<S2SV_blank>ISO<S2SV_blank>file<S2SV_blank>(%ld).\\n" , //<S2SV> inode -> i_ino ) ; //<S2SV> } //<S2SV> # ifdef DEBUG //<S2SV> if ( ( de -> flags [ - high_sierra ] & ~ 2 ) != 0 ) { //<S2SV> printk ( KERN_DEBUG "ISOFS:<S2SV_blank>Unusual<S2SV_blank>flag<S2SV_blank>settings<S2SV_blank>for<S2SV_blank>ISO<S2SV_blank>file<S2SV_blank>" //<S2SV> "(%ld<S2SV_blank>%x).\\n" , //<S2SV> inode -> i_ino , de -> flags [ - high_sierra ] ) ; //<S2SV> } //<S2SV> # endif //<S2SV> inode -> i_mtime . tv_sec = //<S2SV> inode -> i_atime . tv_sec = //<S2SV> inode -> i_ctime . tv_sec = iso_date ( de -> date , high_sierra ) ; //<S2SV> inode -> i_mtime . tv_nsec = //<S2SV> inode -> i_atime . tv_nsec = //<S2SV> inode -> i_ctime . tv_nsec = 0 ; //<S2SV> ei -> i_first_extent = ( isonum_733 ( de -> extent ) + //<S2SV> isonum_711 ( de -> ext_attr_length ) ) ; //<S2SV> inode -> i_blocks = ( inode -> i_size + 511 ) >> 9 ; //<S2SV> if ( ! high_sierra ) { //<S2SV> parse_rock_ridge_inode ( de , inode , relocated ) ; //<S2SV> if ( sbi -> s_uid_set ) //<S2SV> inode -> i_uid = sbi -> s_uid ; //<S2SV> if ( sbi -> s_gid_set ) //<S2SV> inode -> i_gid = sbi -> s_gid ; //<S2SV> } //<S2SV> if ( S_ISDIR ( inode -> i_mode ) && sbi -> s_overriderockperm && //<S2SV> sbi -> s_dmode != ISOFS_INVALID_MODE ) //<S2SV> inode -> i_mode = S_IFDIR | sbi -> s_dmode ; //<S2SV> if ( S_ISREG ( inode -> i_mode ) && sbi -> s_overriderockperm && //<S2SV> sbi -> s_fmode != ISOFS_INVALID_MODE ) //<S2SV> inode -> i_mode = S_IFREG | sbi -> s_fmode ; //<S2SV> if ( S_ISREG ( inode -> i_mode ) ) { //<S2SV> inode -> i_fop = & generic_ro_fops ; //<S2SV> switch ( ei -> i_file_format ) { //<S2SV> # ifdef CONFIG_ZISOFS //<S2SV> case isofs_file_compressed : //<S2SV> inode -> i_data . a_ops = & zisofs_aops ; //<S2SV> break ; //<S2SV> # endif //<S2SV> default : //<S2SV> inode -> i_data . a_ops = & isofs_aops ; //<S2SV> break ; //<S2SV> } //<S2SV> } else if ( S_ISDIR ( inode -> i_mode ) ) { //<S2SV> inode -> i_op = & isofs_dir_inode_operations ; //<S2SV> inode -> i_fop = & isofs_dir_operations ; //<S2SV> } else if ( S_ISLNK ( inode -> i_mode ) ) { //<S2SV> inode -> i_op = & page_symlink_inode_operations ; //<S2SV> inode -> i_data . a_ops = & isofs_symlink_aops ; //<S2SV> } else //<S2SV> init_special_inode ( inode , inode -> i_mode , inode -> i_rdev ) ; //<S2SV> ret = 0 ; //<S2SV> out : //<S2SV> kfree ( tmpde ) ; //<S2SV> if ( bh ) //<S2SV> brelse ( bh ) ; //<S2SV> return ret ; //<S2SV> out_badread : //<S2SV> printk ( KERN_WARNING "ISOFS:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>read<S2SV_blank>i-node<S2SV_blank>block\\n" ) ; //<S2SV> fail : //<S2SV> goto out ; //<S2SV> } //<S2SV> 