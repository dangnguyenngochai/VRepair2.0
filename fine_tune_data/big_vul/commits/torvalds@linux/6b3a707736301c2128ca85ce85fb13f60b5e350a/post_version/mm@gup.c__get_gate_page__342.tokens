static int get_gate_page ( struct mm_struct * mm , unsigned long address , //<S2SV> unsigned int gup_flags , struct vm_area_struct * * vma , //<S2SV> struct page * * page ) //<S2SV> { //<S2SV> pgd_t * pgd ; //<S2SV> p4d_t * p4d ; //<S2SV> pud_t * pud ; //<S2SV> pmd_t * pmd ; //<S2SV> pte_t * pte ; //<S2SV> int ret = - EFAULT ; //<S2SV> if ( gup_flags & FOLL_WRITE ) //<S2SV> return - EFAULT ; //<S2SV> if ( address > TASK_SIZE ) //<S2SV> pgd = pgd_offset_k ( address ) ; //<S2SV> else //<S2SV> pgd = pgd_offset_gate ( mm , address ) ; //<S2SV> BUG_ON ( pgd_none ( * pgd ) ) ; //<S2SV> p4d = p4d_offset ( pgd , address ) ; //<S2SV> BUG_ON ( p4d_none ( * p4d ) ) ; //<S2SV> pud = pud_offset ( p4d , address ) ; //<S2SV> BUG_ON ( pud_none ( * pud ) ) ; //<S2SV> pmd = pmd_offset ( pud , address ) ; //<S2SV> if ( ! pmd_present ( * pmd ) ) //<S2SV> return - EFAULT ; //<S2SV> VM_BUG_ON ( pmd_trans_huge ( * pmd ) ) ; //<S2SV> pte = pte_offset_map ( pmd , address ) ; //<S2SV> if ( pte_none ( * pte ) ) //<S2SV> goto unmap ; //<S2SV> * vma = get_gate_vma ( mm ) ; //<S2SV> if ( ! page ) //<S2SV> goto out ; //<S2SV> * page = vm_normal_page ( * vma , address , * pte ) ; //<S2SV> if ( ! * page ) { //<S2SV> if ( ( gup_flags & FOLL_DUMP ) || ! is_zero_pfn ( pte_pfn ( * pte ) ) ) //<S2SV> goto unmap ; //<S2SV> * page = pte_page ( * pte ) ; //<S2SV> if ( is_device_public_page ( * page ) ) //<S2SV> goto unmap ; //<S2SV> } //<S2SV> if ( unlikely ( ! try_get_page ( * page ) ) ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto unmap ; //<S2SV> } //<S2SV> out : //<S2SV> ret = 0 ; //<S2SV> unmap : //<S2SV> pte_unmap ( pte ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 