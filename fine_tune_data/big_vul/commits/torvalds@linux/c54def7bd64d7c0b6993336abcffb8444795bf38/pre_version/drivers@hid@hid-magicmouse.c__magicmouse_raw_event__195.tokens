static int magicmouse_raw_event ( struct hid_device * hdev , //<S2SV> struct hid_report * report , u8 * data , int size ) //<S2SV> { //<S2SV> struct magicmouse_sc * msc = hid_get_drvdata ( hdev ) ; //<S2SV> struct input_dev * input = msc -> input ; //<S2SV> int x = 0 , y = 0 , ii , clicks = 0 , npoints ; //<S2SV> switch ( data [ 0 ] ) { //<S2SV> case TRACKPAD_REPORT_ID : //<S2SV> if ( size < 4 || ( ( size - 4 ) % 9 ) != 0 ) //<S2SV> return 0 ; //<S2SV> npoints = ( size - 4 ) / 9 ; //<S2SV> msc -> ntouches = 0 ; //<S2SV> for ( ii = 0 ; ii < npoints ; ii ++ ) //<S2SV> magicmouse_emit_touch ( msc , ii , data + ii * 9 + 4 ) ; //<S2SV> clicks = data [ 1 ] ; //<S2SV> break ; //<S2SV> case MOUSE_REPORT_ID : //<S2SV> if ( size < 6 || ( ( size - 6 ) % 8 ) != 0 ) //<S2SV> return 0 ; //<S2SV> npoints = ( size - 6 ) / 8 ; //<S2SV> msc -> ntouches = 0 ; //<S2SV> for ( ii = 0 ; ii < npoints ; ii ++ ) //<S2SV> magicmouse_emit_touch ( msc , ii , data + ii * 8 + 6 ) ; //<S2SV> x = ( int ) ( ( ( data [ 3 ] & 0x0c ) << 28 ) | ( data [ 1 ] << 22 ) ) >> 22 ; //<S2SV> y = ( int ) ( ( ( data [ 3 ] & 0x30 ) << 26 ) | ( data [ 2 ] << 22 ) ) >> 22 ; //<S2SV> clicks = data [ 3 ] ; //<S2SV> break ; //<S2SV> case DOUBLE_REPORT_ID : //<S2SV> magicmouse_raw_event ( hdev , report , data + 2 , data [ 1 ] ) ; //<S2SV> magicmouse_raw_event ( hdev , report , data + 2 + data [ 1 ] , //<S2SV> size - 2 - data [ 1 ] ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( input -> id . product == USB_DEVICE_ID_APPLE_MAGICMOUSE ) { //<S2SV> magicmouse_emit_buttons ( msc , clicks & 3 ) ; //<S2SV> input_report_rel ( input , REL_X , x ) ; //<S2SV> input_report_rel ( input , REL_Y , y ) ; //<S2SV> } else { //<S2SV> input_report_key ( input , BTN_MOUSE , clicks & 1 ) ; //<S2SV> input_mt_report_pointer_emulation ( input , true ) ; //<S2SV> } //<S2SV> input_sync ( input ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 