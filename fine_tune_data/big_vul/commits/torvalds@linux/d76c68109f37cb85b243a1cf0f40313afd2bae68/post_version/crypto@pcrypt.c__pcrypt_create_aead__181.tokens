static int pcrypt_create_aead ( struct crypto_template * tmpl , struct rtattr * * tb , //<S2SV> u32 type , u32 mask ) //<S2SV> { //<S2SV> struct pcrypt_instance_ctx * ctx ; //<S2SV> struct crypto_attr_type * algt ; //<S2SV> struct aead_instance * inst ; //<S2SV> struct aead_alg * alg ; //<S2SV> const char * name ; //<S2SV> int err ; //<S2SV> algt = crypto_get_attr_type ( tb ) ; //<S2SV> if ( IS_ERR ( algt ) ) //<S2SV> return PTR_ERR ( algt ) ; //<S2SV> name = crypto_attr_alg_name ( tb [ 1 ] ) ; //<S2SV> if ( IS_ERR ( name ) ) //<S2SV> return PTR_ERR ( name ) ; //<S2SV> inst = kzalloc ( sizeof ( * inst ) + sizeof ( * ctx ) , GFP_KERNEL ) ; //<S2SV> if ( ! inst ) //<S2SV> return - ENOMEM ; //<S2SV> ctx = aead_instance_ctx ( inst ) ; //<S2SV> crypto_set_aead_spawn ( & ctx -> spawn , aead_crypto_instance ( inst ) ) ; //<S2SV> err = crypto_grab_aead ( & ctx -> spawn , name , 0 , 0 ) ; //<S2SV> if ( err ) //<S2SV> goto out_free_inst ; //<S2SV> alg = crypto_spawn_aead_alg ( & ctx -> spawn ) ; //<S2SV> err = pcrypt_init_instance ( aead_crypto_instance ( inst ) , & alg -> base ) ; //<S2SV> if ( err ) //<S2SV> goto out_drop_aead ; //<S2SV> inst -> alg . base . cra_flags = CRYPTO_ALG_ASYNC ; //<S2SV> inst -> alg . ivsize = crypto_aead_alg_ivsize ( alg ) ; //<S2SV> inst -> alg . maxauthsize = crypto_aead_alg_maxauthsize ( alg ) ; //<S2SV> inst -> alg . base . cra_ctxsize = sizeof ( struct pcrypt_aead_ctx ) ; //<S2SV> inst -> alg . init = pcrypt_aead_init_tfm ; //<S2SV> inst -> alg . exit = pcrypt_aead_exit_tfm ; //<S2SV> inst -> alg . setkey = pcrypt_aead_setkey ; //<S2SV> inst -> alg . setauthsize = pcrypt_aead_setauthsize ; //<S2SV> inst -> alg . encrypt = pcrypt_aead_encrypt ; //<S2SV> inst -> alg . decrypt = pcrypt_aead_decrypt ; //<S2SV> inst -> free = pcrypt_free ; //<S2SV> err = aead_register_instance ( tmpl , inst ) ; //<S2SV> if ( err ) //<S2SV> goto out_drop_aead ; //<S2SV> out : //<S2SV> return err ; //<S2SV> out_drop_aead : //<S2SV> crypto_drop_aead ( & ctx -> spawn ) ; //<S2SV> out_free_inst : //<S2SV> kfree ( inst ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> 