static void * bpf_obj_do_get ( const struct filename * pathname , //<S2SV> enum bpf_type * type ) //<S2SV> { //<S2SV> struct inode * inode ; //<S2SV> struct path path ; //<S2SV> void * raw ; //<S2SV> int ret ; //<S2SV> ret = kern_path ( pathname -> name , LOOKUP_FOLLOW , & path ) ; //<S2SV> if ( ret ) //<S2SV> return ERR_PTR ( ret ) ; //<S2SV> inode = d_backing_inode ( path . dentry ) ; //<S2SV> ret = inode_permission ( inode , MAY_WRITE ) ; //<S2SV> if ( ret ) //<S2SV> goto out ; //<S2SV> ret = bpf_inode_type ( inode , type ) ; //<S2SV> if ( ret ) //<S2SV> goto out ; //<S2SV> raw = bpf_any_get ( inode -> i_private , * type ) ; //<S2SV> if ( ! IS_ERR ( raw ) ) //<S2SV> touch_atime ( & path ) ; //<S2SV> path_put ( & path ) ; //<S2SV> return raw ; //<S2SV> out : //<S2SV> path_put ( & path ) ; //<S2SV> return ERR_PTR ( ret ) ; //<S2SV> } //<S2SV> 