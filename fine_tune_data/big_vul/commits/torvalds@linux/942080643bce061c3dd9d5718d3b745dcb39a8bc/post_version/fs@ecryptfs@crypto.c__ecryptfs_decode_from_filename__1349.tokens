static void //<S2SV> ecryptfs_decode_from_filename ( unsigned char * dst , size_t * dst_size , //<S2SV> const unsigned char * src , size_t src_size ) //<S2SV> { //<S2SV> u8 current_bit_offset = 0 ; //<S2SV> size_t src_byte_offset = 0 ; //<S2SV> size_t dst_byte_offset = 0 ; //<S2SV> if ( dst == NULL ) { //<S2SV> ( * dst_size ) = ecryptfs_max_decoded_size ( src_size ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> while ( src_byte_offset < src_size ) { //<S2SV> unsigned char src_byte = //<S2SV> filename_rev_map [ ( int ) src [ src_byte_offset ] ] ; //<S2SV> switch ( current_bit_offset ) { //<S2SV> case 0 : //<S2SV> dst [ dst_byte_offset ] = ( src_byte << 2 ) ; //<S2SV> current_bit_offset = 6 ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> dst [ dst_byte_offset ++ ] |= ( src_byte >> 4 ) ; //<S2SV> dst [ dst_byte_offset ] = ( ( src_byte & 0xF ) //<S2SV> << 4 ) ; //<S2SV> current_bit_offset = 4 ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> dst [ dst_byte_offset ++ ] |= ( src_byte >> 2 ) ; //<S2SV> dst [ dst_byte_offset ] = ( src_byte << 6 ) ; //<S2SV> current_bit_offset = 2 ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> dst [ dst_byte_offset ++ ] |= ( src_byte ) ; //<S2SV> current_bit_offset = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> src_byte_offset ++ ; //<S2SV> } //<S2SV> ( * dst_size ) = dst_byte_offset ; //<S2SV> out : //<S2SV> return ; //<S2SV> } //<S2SV> 