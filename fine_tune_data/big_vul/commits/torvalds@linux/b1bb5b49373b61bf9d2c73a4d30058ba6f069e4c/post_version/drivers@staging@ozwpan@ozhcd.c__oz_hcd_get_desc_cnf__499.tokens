void oz_hcd_get_desc_cnf ( void * hport , u8 req_id , u8 status , const u8 * desc , //<S2SV> u8 length , u16 offset , u16 total_size ) //<S2SV> { //<S2SV> struct oz_port * port = hport ; //<S2SV> struct urb * urb ; //<S2SV> int err = 0 ; //<S2SV> oz_dbg ( ON , "oz_hcd_get_desc_cnf<S2SV_blank>length<S2SV_blank>=<S2SV_blank>%d<S2SV_blank>offs<S2SV_blank>=<S2SV_blank>%d<S2SV_blank>tot_size<S2SV_blank>=<S2SV_blank>%d\\n" , //<S2SV> length , offset , total_size ) ; //<S2SV> urb = oz_find_urb_by_id ( port , 0 , req_id ) ; //<S2SV> if ( ! urb ) //<S2SV> return ; //<S2SV> if ( status == 0 ) { //<S2SV> unsigned int copy_len ; //<S2SV> unsigned int required_size = urb -> transfer_buffer_length ; //<S2SV> if ( required_size > total_size ) //<S2SV> required_size = total_size ; //<S2SV> copy_len = required_size - offset ; //<S2SV> if ( length <= copy_len ) //<S2SV> copy_len = length ; //<S2SV> memcpy ( urb -> transfer_buffer + offset , desc , copy_len ) ; //<S2SV> offset += copy_len ; //<S2SV> if ( offset < required_size ) { //<S2SV> struct usb_ctrlrequest * setup = //<S2SV> ( struct usb_ctrlrequest * ) urb -> setup_packet ; //<S2SV> unsigned wvalue = le16_to_cpu ( setup -> wValue ) ; //<S2SV> if ( oz_enqueue_ep_urb ( port , 0 , 0 , urb , req_id ) ) //<S2SV> err = - ENOMEM ; //<S2SV> else if ( oz_usb_get_desc_req ( port -> hpd , req_id , //<S2SV> setup -> bRequestType , ( u8 ) ( wvalue >> 8 ) , //<S2SV> ( u8 ) wvalue , setup -> wIndex , offset , //<S2SV> required_size - offset ) ) { //<S2SV> oz_dequeue_ep_urb ( port , 0 , 0 , urb ) ; //<S2SV> err = - ENOMEM ; //<S2SV> } //<S2SV> if ( err == 0 ) //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> urb -> actual_length = total_size ; //<S2SV> oz_complete_urb ( port -> ozhcd -> hcd , urb , 0 ) ; //<S2SV> } //<S2SV> 