static void xen_netbk_fill_frags ( struct xen_netbk * netbk , struct sk_buff * skb ) //<S2SV> { //<S2SV> struct skb_shared_info * shinfo = skb_shinfo ( skb ) ; //<S2SV> int nr_frags = shinfo -> nr_frags ; //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < nr_frags ; i ++ ) { //<S2SV> skb_frag_t * frag = shinfo -> frags + i ; //<S2SV> struct xen_netif_tx_request * txp ; //<S2SV> struct page * page ; //<S2SV> u16 pending_idx ; //<S2SV> pending_idx = frag_get_pending_idx ( frag ) ; //<S2SV> txp = & netbk -> pending_tx_info [ pending_idx ] . req ; //<S2SV> page = virt_to_page ( idx_to_kaddr ( netbk , pending_idx ) ) ; //<S2SV> __skb_fill_page_desc ( skb , i , page , txp -> offset , txp -> size ) ; //<S2SV> skb -> len += txp -> size ; //<S2SV> skb -> data_len += txp -> size ; //<S2SV> skb -> truesize += txp -> size ; //<S2SV> get_page ( netbk -> mmap_pages [ pending_idx ] ) ; //<S2SV> xen_netbk_idx_release ( netbk , pending_idx , XEN_NETIF_RSP_OKAY ) ; //<S2SV> } //<S2SV> } //<S2SV> 