static void xen_netbk_tx_submit ( struct xen_netbk * netbk ) //<S2SV> { //<S2SV> struct gnttab_copy * gop = netbk -> tx_copy_ops ; //<S2SV> struct sk_buff * skb ; //<S2SV> while ( ( skb = __skb_dequeue ( & netbk -> tx_queue ) ) != NULL ) { //<S2SV> struct xen_netif_tx_request * txp ; //<S2SV> struct xenvif * vif ; //<S2SV> u16 pending_idx ; //<S2SV> unsigned data_len ; //<S2SV> pending_idx = * ( ( u16 * ) skb -> data ) ; //<S2SV> vif = netbk -> pending_tx_info [ pending_idx ] . vif ; //<S2SV> txp = & netbk -> pending_tx_info [ pending_idx ] . req ; //<S2SV> if ( unlikely ( xen_netbk_tx_check_gop ( netbk , skb , & gop ) ) ) { //<S2SV> netdev_dbg ( vif -> dev , "netback<S2SV_blank>grant<S2SV_blank>failed.\\n" ) ; //<S2SV> skb_shinfo ( skb ) -> nr_frags = 0 ; //<S2SV> kfree_skb ( skb ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> data_len = skb -> len ; //<S2SV> memcpy ( skb -> data , //<S2SV> ( void * ) ( idx_to_kaddr ( netbk , pending_idx ) | txp -> offset ) , //<S2SV> data_len ) ; //<S2SV> if ( data_len < txp -> size ) { //<S2SV> txp -> offset += data_len ; //<S2SV> txp -> size -= data_len ; //<S2SV> } else { //<S2SV> xen_netbk_idx_release ( netbk , pending_idx , XEN_NETIF_RSP_OKAY ) ; //<S2SV> } //<S2SV> if ( txp -> flags & XEN_NETTXF_csum_blank ) //<S2SV> skb -> ip_summed = CHECKSUM_PARTIAL ; //<S2SV> else if ( txp -> flags & XEN_NETTXF_data_validated ) //<S2SV> skb -> ip_summed = CHECKSUM_UNNECESSARY ; //<S2SV> xen_netbk_fill_frags ( netbk , skb ) ; //<S2SV> if ( skb_headlen ( skb ) < PKT_PROT_LEN && skb_is_nonlinear ( skb ) ) { //<S2SV> int target = min_t ( int , skb -> len , PKT_PROT_LEN ) ; //<S2SV> __pskb_pull_tail ( skb , target - skb_headlen ( skb ) ) ; //<S2SV> } //<S2SV> skb -> dev = vif -> dev ; //<S2SV> skb -> protocol = eth_type_trans ( skb , skb -> dev ) ; //<S2SV> if ( checksum_setup ( vif , skb ) ) { //<S2SV> netdev_dbg ( vif -> dev , //<S2SV> "Can\'t<S2SV_blank>setup<S2SV_blank>checksum<S2SV_blank>in<S2SV_blank>net_tx_action\\n" ) ; //<S2SV> kfree_skb ( skb ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> vif -> dev -> stats . rx_bytes += skb -> len ; //<S2SV> vif -> dev -> stats . rx_packets ++ ; //<S2SV> xenvif_receive_skb ( vif , skb ) ; //<S2SV> } //<S2SV> } //<S2SV> 