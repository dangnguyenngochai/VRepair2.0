static int sctp_getsockopt_assoc_stats ( struct sock * sk , int len , //<S2SV> char __user * optval , //<S2SV> int __user * optlen ) //<S2SV> { //<S2SV> struct sctp_assoc_stats sas ; //<S2SV> struct sctp_association * asoc = NULL ; //<S2SV> if ( len < sizeof ( sctp_assoc_t ) ) //<S2SV> return - EINVAL ; //<S2SV> len = min_t ( size_t , len , sizeof ( sas ) ) ; //<S2SV> if ( copy_from_user ( & sas , optval , len ) ) //<S2SV> return - EFAULT ; //<S2SV> asoc = sctp_id2assoc ( sk , sas . sas_assoc_id ) ; //<S2SV> if ( ! asoc ) //<S2SV> return - EINVAL ; //<S2SV> sas . sas_rtxchunks = asoc -> stats . rtxchunks ; //<S2SV> sas . sas_gapcnt = asoc -> stats . gapcnt ; //<S2SV> sas . sas_outofseqtsns = asoc -> stats . outofseqtsns ; //<S2SV> sas . sas_osacks = asoc -> stats . osacks ; //<S2SV> sas . sas_isacks = asoc -> stats . isacks ; //<S2SV> sas . sas_octrlchunks = asoc -> stats . octrlchunks ; //<S2SV> sas . sas_ictrlchunks = asoc -> stats . ictrlchunks ; //<S2SV> sas . sas_oodchunks = asoc -> stats . oodchunks ; //<S2SV> sas . sas_iodchunks = asoc -> stats . iodchunks ; //<S2SV> sas . sas_ouodchunks = asoc -> stats . ouodchunks ; //<S2SV> sas . sas_iuodchunks = asoc -> stats . iuodchunks ; //<S2SV> sas . sas_idupchunks = asoc -> stats . idupchunks ; //<S2SV> sas . sas_opackets = asoc -> stats . opackets ; //<S2SV> sas . sas_ipackets = asoc -> stats . ipackets ; //<S2SV> sas . sas_maxrto = asoc -> stats . max_obs_rto ; //<S2SV> memcpy ( & sas . sas_obs_rto_ipaddr , & asoc -> stats . obs_rto_ipaddr , //<S2SV> sizeof ( struct sockaddr_storage ) ) ; //<S2SV> asoc -> stats . max_obs_rto = asoc -> rto_min ; //<S2SV> if ( put_user ( len , optlen ) ) //<S2SV> return - EFAULT ; //<S2SV> SCTP_DEBUG_PRINTK ( "sctp_getsockopt_assoc_stat(%d):<S2SV_blank>%d\\n" , //<S2SV> len , sas . sas_assoc_id ) ; //<S2SV> if ( copy_to_user ( optval , & sas , len ) ) //<S2SV> return - EFAULT ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 