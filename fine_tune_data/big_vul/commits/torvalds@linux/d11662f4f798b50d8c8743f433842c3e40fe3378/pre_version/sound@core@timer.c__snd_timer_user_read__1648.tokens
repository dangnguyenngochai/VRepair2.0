static ssize_t snd_timer_user_read ( struct file * file , char __user * buffer , //<S2SV> size_t count , loff_t * offset ) //<S2SV> { //<S2SV> struct snd_timer_user * tu ; //<S2SV> long result = 0 , unit ; //<S2SV> int qhead ; //<S2SV> int err = 0 ; //<S2SV> tu = file -> private_data ; //<S2SV> unit = tu -> tread ? sizeof ( struct snd_timer_tread ) : sizeof ( struct snd_timer_read ) ; //<S2SV> spin_lock_irq ( & tu -> qlock ) ; //<S2SV> while ( ( long ) count - result >= unit ) { //<S2SV> while ( ! tu -> qused ) { //<S2SV> wait_queue_t wait ; //<S2SV> if ( ( file -> f_flags & O_NONBLOCK ) != 0 || result > 0 ) { //<S2SV> err = - EAGAIN ; //<S2SV> goto _error ; //<S2SV> } //<S2SV> set_current_state ( TASK_INTERRUPTIBLE ) ; //<S2SV> init_waitqueue_entry ( & wait , current ) ; //<S2SV> add_wait_queue ( & tu -> qchange_sleep , & wait ) ; //<S2SV> spin_unlock_irq ( & tu -> qlock ) ; //<S2SV> schedule ( ) ; //<S2SV> spin_lock_irq ( & tu -> qlock ) ; //<S2SV> remove_wait_queue ( & tu -> qchange_sleep , & wait ) ; //<S2SV> if ( tu -> disconnected ) { //<S2SV> err = - ENODEV ; //<S2SV> goto _error ; //<S2SV> } //<S2SV> if ( signal_pending ( current ) ) { //<S2SV> err = - ERESTARTSYS ; //<S2SV> goto _error ; //<S2SV> } //<S2SV> } //<S2SV> qhead = tu -> qhead ++ ; //<S2SV> tu -> qhead %= tu -> queue_size ; //<S2SV> tu -> qused -- ; //<S2SV> spin_unlock_irq ( & tu -> qlock ) ; //<S2SV> mutex_lock ( & tu -> ioctl_lock ) ; //<S2SV> if ( tu -> tread ) { //<S2SV> if ( copy_to_user ( buffer , & tu -> tqueue [ qhead ] , //<S2SV> sizeof ( struct snd_timer_tread ) ) ) //<S2SV> err = - EFAULT ; //<S2SV> } else { //<S2SV> if ( copy_to_user ( buffer , & tu -> queue [ qhead ] , //<S2SV> sizeof ( struct snd_timer_read ) ) ) //<S2SV> err = - EFAULT ; //<S2SV> } //<S2SV> mutex_unlock ( & tu -> ioctl_lock ) ; //<S2SV> spin_lock_irq ( & tu -> qlock ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto _error ; //<S2SV> result += unit ; //<S2SV> buffer += unit ; //<S2SV> } //<S2SV> _error : //<S2SV> spin_unlock_irq ( & tu -> qlock ) ; //<S2SV> return result > 0 ? result : err ; //<S2SV> } //<S2SV> 