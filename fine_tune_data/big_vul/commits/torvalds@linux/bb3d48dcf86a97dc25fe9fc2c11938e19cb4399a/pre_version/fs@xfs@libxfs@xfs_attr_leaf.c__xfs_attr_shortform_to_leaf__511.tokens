int //<S2SV> xfs_attr_shortform_to_leaf ( //<S2SV> struct xfs_da_args * args , //<S2SV> struct xfs_buf * * leaf_bp ) //<S2SV> { //<S2SV> xfs_inode_t * dp ; //<S2SV> xfs_attr_shortform_t * sf ; //<S2SV> xfs_attr_sf_entry_t * sfe ; //<S2SV> xfs_da_args_t nargs ; //<S2SV> char * tmpbuffer ; //<S2SV> int error , i , size ; //<S2SV> xfs_dablk_t blkno ; //<S2SV> struct xfs_buf * bp ; //<S2SV> xfs_ifork_t * ifp ; //<S2SV> trace_xfs_attr_sf_to_leaf ( args ) ; //<S2SV> dp = args -> dp ; //<S2SV> ifp = dp -> i_afp ; //<S2SV> sf = ( xfs_attr_shortform_t * ) ifp -> if_u1 . if_data ; //<S2SV> size = be16_to_cpu ( sf -> hdr . totsize ) ; //<S2SV> tmpbuffer = kmem_alloc ( size , KM_SLEEP ) ; //<S2SV> ASSERT ( tmpbuffer != NULL ) ; //<S2SV> memcpy ( tmpbuffer , ifp -> if_u1 . if_data , size ) ; //<S2SV> sf = ( xfs_attr_shortform_t * ) tmpbuffer ; //<S2SV> xfs_idata_realloc ( dp , - size , XFS_ATTR_FORK ) ; //<S2SV> xfs_bmap_local_to_extents_empty ( dp , XFS_ATTR_FORK ) ; //<S2SV> bp = NULL ; //<S2SV> error = xfs_da_grow_inode ( args , & blkno ) ; //<S2SV> if ( error ) { //<S2SV> if ( error == - EIO ) //<S2SV> goto out ; //<S2SV> xfs_idata_realloc ( dp , size , XFS_ATTR_FORK ) ; //<S2SV> memcpy ( ifp -> if_u1 . if_data , tmpbuffer , size ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> ASSERT ( blkno == 0 ) ; //<S2SV> error = xfs_attr3_leaf_create ( args , blkno , & bp ) ; //<S2SV> if ( error ) { //<S2SV> error = xfs_da_shrink_inode ( args , 0 , bp ) ; //<S2SV> bp = NULL ; //<S2SV> if ( error ) //<S2SV> goto out ; //<S2SV> xfs_idata_realloc ( dp , size , XFS_ATTR_FORK ) ; //<S2SV> memcpy ( ifp -> if_u1 . if_data , tmpbuffer , size ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> memset ( ( char * ) & nargs , 0 , sizeof ( nargs ) ) ; //<S2SV> nargs . dp = dp ; //<S2SV> nargs . geo = args -> geo ; //<S2SV> nargs . firstblock = args -> firstblock ; //<S2SV> nargs . dfops = args -> dfops ; //<S2SV> nargs . total = args -> total ; //<S2SV> nargs . whichfork = XFS_ATTR_FORK ; //<S2SV> nargs . trans = args -> trans ; //<S2SV> nargs . op_flags = XFS_DA_OP_OKNOENT ; //<S2SV> sfe = & sf -> list [ 0 ] ; //<S2SV> for ( i = 0 ; i < sf -> hdr . count ; i ++ ) { //<S2SV> nargs . name = sfe -> nameval ; //<S2SV> nargs . namelen = sfe -> namelen ; //<S2SV> nargs . value = & sfe -> nameval [ nargs . namelen ] ; //<S2SV> nargs . valuelen = sfe -> valuelen ; //<S2SV> nargs . hashval = xfs_da_hashname ( sfe -> nameval , //<S2SV> sfe -> namelen ) ; //<S2SV> nargs . flags = XFS_ATTR_NSP_ONDISK_TO_ARGS ( sfe -> flags ) ; //<S2SV> error = xfs_attr3_leaf_lookup_int ( bp , & nargs ) ; //<S2SV> ASSERT ( error == - ENOATTR ) ; //<S2SV> error = xfs_attr3_leaf_add ( bp , & nargs ) ; //<S2SV> ASSERT ( error != - ENOSPC ) ; //<S2SV> if ( error ) //<S2SV> goto out ; //<S2SV> sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; //<S2SV> } //<S2SV> error = 0 ; //<S2SV> * leaf_bp = bp ; //<S2SV> out : //<S2SV> kmem_free ( tmpbuffer ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 