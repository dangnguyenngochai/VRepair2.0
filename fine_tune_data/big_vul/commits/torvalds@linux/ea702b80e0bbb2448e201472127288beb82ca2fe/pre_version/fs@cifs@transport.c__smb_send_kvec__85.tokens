static int //<S2SV> smb_send_kvec ( struct TCP_Server_Info * server , struct kvec * iov , size_t n_vec , //<S2SV> size_t * sent ) //<S2SV> { //<S2SV> int rc = 0 ; //<S2SV> int i = 0 ; //<S2SV> struct msghdr smb_msg ; //<S2SV> unsigned int remaining ; //<S2SV> size_t first_vec = 0 ; //<S2SV> struct socket * ssocket = server -> ssocket ; //<S2SV> * sent = 0 ; //<S2SV> if ( ssocket == NULL ) //<S2SV> return - ENOTSOCK ; //<S2SV> smb_msg . msg_name = ( struct sockaddr * ) & server -> dstaddr ; //<S2SV> smb_msg . msg_namelen = sizeof ( struct sockaddr ) ; //<S2SV> smb_msg . msg_control = NULL ; //<S2SV> smb_msg . msg_controllen = 0 ; //<S2SV> if ( server -> noblocksnd ) //<S2SV> smb_msg . msg_flags = MSG_DONTWAIT + MSG_NOSIGNAL ; //<S2SV> else //<S2SV> smb_msg . msg_flags = MSG_NOSIGNAL ; //<S2SV> remaining = 0 ; //<S2SV> for ( i = 0 ; i < n_vec ; i ++ ) //<S2SV> remaining += iov [ i ] . iov_len ; //<S2SV> i = 0 ; //<S2SV> while ( remaining ) { //<S2SV> rc = kernel_sendmsg ( ssocket , & smb_msg , & iov [ first_vec ] , //<S2SV> n_vec - first_vec , remaining ) ; //<S2SV> if ( rc == - ENOSPC || rc == - EAGAIN ) { //<S2SV> WARN_ON_ONCE ( rc == - ENOSPC ) ; //<S2SV> i ++ ; //<S2SV> if ( i >= 14 || ( ! server -> noblocksnd && ( i > 2 ) ) ) { //<S2SV> cERROR ( 1 , "sends<S2SV_blank>on<S2SV_blank>sock<S2SV_blank>%p<S2SV_blank>stuck<S2SV_blank>for<S2SV_blank>15<S2SV_blank>" //<S2SV> "seconds" , ssocket ) ; //<S2SV> rc = - EAGAIN ; //<S2SV> break ; //<S2SV> } //<S2SV> msleep ( 1 << i ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( rc < 0 ) //<S2SV> break ; //<S2SV> * sent += rc ; //<S2SV> if ( rc == remaining ) { //<S2SV> remaining = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( rc > remaining ) { //<S2SV> cERROR ( 1 , "sent<S2SV_blank>%d<S2SV_blank>requested<S2SV_blank>%d" , rc , remaining ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( rc == 0 ) { //<S2SV> cERROR ( 1 , "tcp<S2SV_blank>sent<S2SV_blank>no<S2SV_blank>data" ) ; //<S2SV> msleep ( 500 ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> remaining -= rc ; //<S2SV> for ( i = first_vec ; i < n_vec ; i ++ ) { //<S2SV> if ( iov [ i ] . iov_len ) { //<S2SV> if ( rc > iov [ i ] . iov_len ) { //<S2SV> rc -= iov [ i ] . iov_len ; //<S2SV> iov [ i ] . iov_len = 0 ; //<S2SV> } else { //<S2SV> iov [ i ] . iov_base += rc ; //<S2SV> iov [ i ] . iov_len -= rc ; //<S2SV> first_vec = i ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> i = 0 ; //<S2SV> rc = 0 ; //<S2SV> } //<S2SV> return rc ; //<S2SV> } //<S2SV> 