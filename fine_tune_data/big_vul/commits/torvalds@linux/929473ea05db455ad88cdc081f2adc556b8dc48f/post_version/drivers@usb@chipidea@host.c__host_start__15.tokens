static int host_start ( struct ci13xxx * ci ) //<S2SV> { //<S2SV> struct usb_hcd * hcd ; //<S2SV> struct ehci_hcd * ehci ; //<S2SV> int ret ; //<S2SV> if ( usb_disabled ( ) ) //<S2SV> return - ENODEV ; //<S2SV> hcd = usb_create_hcd ( & ci_ehci_hc_driver , ci -> dev , dev_name ( ci -> dev ) ) ; //<S2SV> if ( ! hcd ) //<S2SV> return - ENOMEM ; //<S2SV> dev_set_drvdata ( ci -> dev , ci ) ; //<S2SV> hcd -> rsrc_start = ci -> hw_bank . phys ; //<S2SV> hcd -> rsrc_len = ci -> hw_bank . size ; //<S2SV> hcd -> regs = ci -> hw_bank . abs ; //<S2SV> hcd -> has_tt = 1 ; //<S2SV> hcd -> power_budget = ci -> platdata -> power_budget ; //<S2SV> hcd -> phy = ci -> transceiver ; //<S2SV> ehci = hcd_to_ehci ( hcd ) ; //<S2SV> ehci -> caps = ci -> hw_bank . cap ; //<S2SV> ehci -> has_hostpc = ci -> hw_bank . lpm ; //<S2SV> ret = usb_add_hcd ( hcd , 0 , 0 ) ; //<S2SV> if ( ret ) //<S2SV> usb_put_hcd ( hcd ) ; //<S2SV> else //<S2SV> ci -> hcd = hcd ; //<S2SV> if ( ci -> platdata -> flags & CI13XXX_DISABLE_STREAMING ) //<S2SV> hw_write ( ci , OP_USBMODE , USBMODE_CI_SDIS , USBMODE_CI_SDIS ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 