static int //<S2SV> i915_gem_do_execbuffer ( struct drm_device * dev , void * data , //<S2SV> struct drm_file * file , //<S2SV> struct drm_i915_gem_execbuffer2 * args , //<S2SV> struct drm_i915_gem_exec_object2 * exec ) //<S2SV> { //<S2SV> drm_i915_private_t * dev_priv = dev -> dev_private ; //<S2SV> struct list_head objects ; //<S2SV> struct eb_objects * eb ; //<S2SV> struct drm_i915_gem_object * batch_obj ; //<S2SV> struct drm_clip_rect * cliprects = NULL ; //<S2SV> struct intel_ring_buffer * ring ; //<S2SV> u32 exec_start , exec_len ; //<S2SV> u32 seqno ; //<S2SV> u32 mask ; //<S2SV> int ret , mode , i ; //<S2SV> if ( ! i915_gem_check_execbuffer ( args ) ) { //<S2SV> DRM_DEBUG ( "execbuf<S2SV_blank>with<S2SV_blank>invalid<S2SV_blank>offset/length\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ret = validate_exec_list ( exec , args -> buffer_count ) ; //<S2SV> if ( ret ) //<S2SV> return ret ; //<S2SV> switch ( args -> flags & I915_EXEC_RING_MASK ) { //<S2SV> case I915_EXEC_DEFAULT : //<S2SV> case I915_EXEC_RENDER : //<S2SV> ring = & dev_priv -> ring [ RCS ] ; //<S2SV> break ; //<S2SV> case I915_EXEC_BSD : //<S2SV> if ( ! HAS_BSD ( dev ) ) { //<S2SV> DRM_DEBUG ( "execbuf<S2SV_blank>with<S2SV_blank>invalid<S2SV_blank>ring<S2SV_blank>(BSD)\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ring = & dev_priv -> ring [ VCS ] ; //<S2SV> break ; //<S2SV> case I915_EXEC_BLT : //<S2SV> if ( ! HAS_BLT ( dev ) ) { //<S2SV> DRM_DEBUG ( "execbuf<S2SV_blank>with<S2SV_blank>invalid<S2SV_blank>ring<S2SV_blank>(BLT)\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ring = & dev_priv -> ring [ BCS ] ; //<S2SV> break ; //<S2SV> default : //<S2SV> DRM_DEBUG ( "execbuf<S2SV_blank>with<S2SV_blank>unknown<S2SV_blank>ring:<S2SV_blank>%d\\n" , //<S2SV> ( int ) ( args -> flags & I915_EXEC_RING_MASK ) ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> mode = args -> flags & I915_EXEC_CONSTANTS_MASK ; //<S2SV> mask = I915_EXEC_CONSTANTS_MASK ; //<S2SV> switch ( mode ) { //<S2SV> case I915_EXEC_CONSTANTS_REL_GENERAL : //<S2SV> case I915_EXEC_CONSTANTS_ABSOLUTE : //<S2SV> case I915_EXEC_CONSTANTS_REL_SURFACE : //<S2SV> if ( ring == & dev_priv -> ring [ RCS ] && //<S2SV> mode != dev_priv -> relative_constants_mode ) { //<S2SV> if ( INTEL_INFO ( dev ) -> gen < 4 ) //<S2SV> return - EINVAL ; //<S2SV> if ( INTEL_INFO ( dev ) -> gen > 5 && //<S2SV> mode == I915_EXEC_CONSTANTS_REL_SURFACE ) //<S2SV> return - EINVAL ; //<S2SV> if ( INTEL_INFO ( dev ) -> gen >= 6 ) //<S2SV> mask &= ~ I915_EXEC_CONSTANTS_REL_SURFACE ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> DRM_DEBUG ( "execbuf<S2SV_blank>with<S2SV_blank>unknown<S2SV_blank>constants:<S2SV_blank>%d\\n" , mode ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( args -> buffer_count < 1 ) { //<S2SV> DRM_DEBUG ( "execbuf<S2SV_blank>with<S2SV_blank>%d<S2SV_blank>buffers\\n" , args -> buffer_count ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( args -> num_cliprects != 0 ) { //<S2SV> if ( ring != & dev_priv -> ring [ RCS ] ) { //<S2SV> DRM_DEBUG ( "clip<S2SV_blank>rectangles<S2SV_blank>are<S2SV_blank>only<S2SV_blank>valid<S2SV_blank>with<S2SV_blank>the<S2SV_blank>render<S2SV_blank>ring\\n" ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( args -> num_cliprects > UINT_MAX / sizeof ( * cliprects ) ) { //<S2SV> DRM_DEBUG ( "execbuf<S2SV_blank>with<S2SV_blank>%u<S2SV_blank>cliprects\\n" , //<S2SV> args -> num_cliprects ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> cliprects = kmalloc ( args -> num_cliprects * sizeof ( * cliprects ) , //<S2SV> GFP_KERNEL ) ; //<S2SV> if ( cliprects == NULL ) { //<S2SV> ret = - ENOMEM ; //<S2SV> goto pre_mutex_err ; //<S2SV> } //<S2SV> if ( copy_from_user ( cliprects , //<S2SV> ( struct drm_clip_rect __user * ) ( uintptr_t ) //<S2SV> args -> cliprects_ptr , //<S2SV> sizeof ( * cliprects ) * args -> num_cliprects ) ) { //<S2SV> ret = - EFAULT ; //<S2SV> goto pre_mutex_err ; //<S2SV> } //<S2SV> } //<S2SV> ret = i915_mutex_lock_interruptible ( dev ) ; //<S2SV> if ( ret ) //<S2SV> goto pre_mutex_err ; //<S2SV> if ( dev_priv -> mm . suspended ) { //<S2SV> mutex_unlock ( & dev -> struct_mutex ) ; //<S2SV> ret = - EBUSY ; //<S2SV> goto pre_mutex_err ; //<S2SV> } //<S2SV> eb = eb_create ( args -> buffer_count ) ; //<S2SV> if ( eb == NULL ) { //<S2SV> mutex_unlock ( & dev -> struct_mutex ) ; //<S2SV> ret = - ENOMEM ; //<S2SV> goto pre_mutex_err ; //<S2SV> } //<S2SV> INIT_LIST_HEAD ( & objects ) ; //<S2SV> for ( i = 0 ; i < args -> buffer_count ; i ++ ) { //<S2SV> struct drm_i915_gem_object * obj ; //<S2SV> obj = to_intel_bo ( drm_gem_object_lookup ( dev , file , //<S2SV> exec [ i ] . handle ) ) ; //<S2SV> if ( & obj -> base == NULL ) { //<S2SV> DRM_DEBUG ( "Invalid<S2SV_blank>object<S2SV_blank>handle<S2SV_blank>%d<S2SV_blank>at<S2SV_blank>index<S2SV_blank>%d\\n" , //<S2SV> exec [ i ] . handle , i ) ; //<S2SV> ret = - ENOENT ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( ! list_empty ( & obj -> exec_list ) ) { //<S2SV> DRM_DEBUG ( "Object<S2SV_blank>%p<S2SV_blank>[handle<S2SV_blank>%d,<S2SV_blank>index<S2SV_blank>%d]<S2SV_blank>appears<S2SV_blank>more<S2SV_blank>than<S2SV_blank>once<S2SV_blank>in<S2SV_blank>object<S2SV_blank>list\\n" , //<S2SV> obj , exec [ i ] . handle , i ) ; //<S2SV> ret = - EINVAL ; //<S2SV> goto err ; //<S2SV> } //<S2SV> list_add_tail ( & obj -> exec_list , & objects ) ; //<S2SV> obj -> exec_handle = exec [ i ] . handle ; //<S2SV> obj -> exec_entry = & exec [ i ] ; //<S2SV> eb_add_object ( eb , obj ) ; //<S2SV> } //<S2SV> batch_obj = list_entry ( objects . prev , //<S2SV> struct drm_i915_gem_object , //<S2SV> exec_list ) ; //<S2SV> ret = i915_gem_execbuffer_reserve ( ring , file , & objects ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> ret = i915_gem_execbuffer_relocate ( dev , eb , & objects ) ; //<S2SV> if ( ret ) { //<S2SV> if ( ret == - EFAULT ) { //<S2SV> ret = i915_gem_execbuffer_relocate_slow ( dev , file , ring , //<S2SV> & objects , eb , //<S2SV> exec , //<S2SV> args -> buffer_count ) ; //<S2SV> BUG_ON ( ! mutex_is_locked ( & dev -> struct_mutex ) ) ; //<S2SV> } //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( batch_obj -> base . pending_write_domain ) { //<S2SV> DRM_DEBUG ( "Attempting<S2SV_blank>to<S2SV_blank>use<S2SV_blank>self-modifying<S2SV_blank>batch<S2SV_blank>buffer\\n" ) ; //<S2SV> ret = - EINVAL ; //<S2SV> goto err ; //<S2SV> } //<S2SV> batch_obj -> base . pending_read_domains |= I915_GEM_DOMAIN_COMMAND ; //<S2SV> ret = i915_gem_execbuffer_move_to_gpu ( ring , & objects ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> seqno = i915_gem_next_request_seqno ( ring ) ; //<S2SV> for ( i = 0 ; i < ARRAY_SIZE ( ring -> sync_seqno ) ; i ++ ) { //<S2SV> if ( seqno < ring -> sync_seqno [ i ] ) { //<S2SV> ret = i915_gpu_idle ( dev , true ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> BUG_ON ( ring -> sync_seqno [ i ] ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ring == & dev_priv -> ring [ RCS ] && //<S2SV> mode != dev_priv -> relative_constants_mode ) { //<S2SV> ret = intel_ring_begin ( ring , 4 ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> intel_ring_emit ( ring , MI_NOOP ) ; //<S2SV> intel_ring_emit ( ring , MI_LOAD_REGISTER_IMM ( 1 ) ) ; //<S2SV> intel_ring_emit ( ring , INSTPM ) ; //<S2SV> intel_ring_emit ( ring , mask << 16 | mode ) ; //<S2SV> intel_ring_advance ( ring ) ; //<S2SV> dev_priv -> relative_constants_mode = mode ; //<S2SV> } //<S2SV> if ( args -> flags & I915_EXEC_GEN7_SOL_RESET ) { //<S2SV> ret = i915_reset_gen7_sol_offsets ( dev , ring ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> } //<S2SV> trace_i915_gem_ring_dispatch ( ring , seqno ) ; //<S2SV> exec_start = batch_obj -> gtt_offset + args -> batch_start_offset ; //<S2SV> exec_len = args -> batch_len ; //<S2SV> if ( cliprects ) { //<S2SV> for ( i = 0 ; i < args -> num_cliprects ; i ++ ) { //<S2SV> ret = i915_emit_box ( dev , & cliprects [ i ] , //<S2SV> args -> DR1 , args -> DR4 ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> ret = ring -> dispatch_execbuffer ( ring , //<S2SV> exec_start , exec_len ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> } //<S2SV> } else { //<S2SV> ret = ring -> dispatch_execbuffer ( ring , exec_start , exec_len ) ; //<S2SV> if ( ret ) //<S2SV> goto err ; //<S2SV> } //<S2SV> i915_gem_execbuffer_move_to_active ( & objects , ring , seqno ) ; //<S2SV> i915_gem_execbuffer_retire_commands ( dev , file , ring ) ; //<S2SV> err : //<S2SV> eb_destroy ( eb ) ; //<S2SV> while ( ! list_empty ( & objects ) ) { //<S2SV> struct drm_i915_gem_object * obj ; //<S2SV> obj = list_first_entry ( & objects , //<S2SV> struct drm_i915_gem_object , //<S2SV> exec_list ) ; //<S2SV> list_del_init ( & obj -> exec_list ) ; //<S2SV> drm_gem_object_unreference ( & obj -> base ) ; //<S2SV> } //<S2SV> mutex_unlock ( & dev -> struct_mutex ) ; //<S2SV> pre_mutex_err : //<S2SV> kfree ( cliprects ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 