static noinline int hiddev_ioctl_usage ( struct hiddev * hiddev , unsigned int cmd , void __user * user_arg ) //<S2SV> { //<S2SV> struct hid_device * hid = hiddev -> hid ; //<S2SV> struct hiddev_report_info rinfo ; //<S2SV> struct hiddev_usage_ref_multi * uref_multi = NULL ; //<S2SV> struct hiddev_usage_ref * uref ; //<S2SV> struct hid_report * report ; //<S2SV> struct hid_field * field ; //<S2SV> int i ; //<S2SV> uref_multi = kmalloc ( sizeof ( struct hiddev_usage_ref_multi ) , GFP_KERNEL ) ; //<S2SV> if ( ! uref_multi ) //<S2SV> return - ENOMEM ; //<S2SV> uref = & uref_multi -> uref ; //<S2SV> if ( cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES ) { //<S2SV> if ( copy_from_user ( uref_multi , user_arg , //<S2SV> sizeof ( * uref_multi ) ) ) //<S2SV> goto fault ; //<S2SV> } else { //<S2SV> if ( copy_from_user ( uref , user_arg , sizeof ( * uref ) ) ) //<S2SV> goto fault ; //<S2SV> } //<S2SV> switch ( cmd ) { //<S2SV> case HIDIOCGUCODE : //<S2SV> rinfo . report_type = uref -> report_type ; //<S2SV> rinfo . report_id = uref -> report_id ; //<S2SV> if ( ( report = hiddev_lookup_report ( hid , & rinfo ) ) == NULL ) //<S2SV> goto inval ; //<S2SV> if ( uref -> field_index >= report -> maxfield ) //<S2SV> goto inval ; //<S2SV> field = report -> field [ uref -> field_index ] ; //<S2SV> if ( uref -> usage_index >= field -> maxusage ) //<S2SV> goto inval ; //<S2SV> uref -> usage_code = field -> usage [ uref -> usage_index ] . hid ; //<S2SV> if ( copy_to_user ( user_arg , uref , sizeof ( * uref ) ) ) //<S2SV> goto fault ; //<S2SV> goto goodreturn ; //<S2SV> default : //<S2SV> if ( cmd != HIDIOCGUSAGE && //<S2SV> cmd != HIDIOCGUSAGES && //<S2SV> uref -> report_type == HID_REPORT_TYPE_INPUT ) //<S2SV> goto inval ; //<S2SV> if ( uref -> report_id == HID_REPORT_ID_UNKNOWN ) { //<S2SV> field = hiddev_lookup_usage ( hid , uref ) ; //<S2SV> if ( field == NULL ) //<S2SV> goto inval ; //<S2SV> } else { //<S2SV> rinfo . report_type = uref -> report_type ; //<S2SV> rinfo . report_id = uref -> report_id ; //<S2SV> if ( ( report = hiddev_lookup_report ( hid , & rinfo ) ) == NULL ) //<S2SV> goto inval ; //<S2SV> if ( uref -> field_index >= report -> maxfield ) //<S2SV> goto inval ; //<S2SV> field = report -> field [ uref -> field_index ] ; //<S2SV> if ( cmd == HIDIOCGCOLLECTIONINDEX ) { //<S2SV> if ( uref -> usage_index >= field -> maxusage ) //<S2SV> goto inval ; //<S2SV> } else if ( uref -> usage_index >= field -> report_count ) //<S2SV> goto inval ; //<S2SV> } //<S2SV> if ( ( cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES ) && //<S2SV> ( uref_multi -> num_values > HID_MAX_MULTI_USAGES || //<S2SV> uref -> usage_index + uref_multi -> num_values > field -> report_count ) ) //<S2SV> goto inval ; //<S2SV> switch ( cmd ) { //<S2SV> case HIDIOCGUSAGE : //<S2SV> uref -> value = field -> value [ uref -> usage_index ] ; //<S2SV> if ( copy_to_user ( user_arg , uref , sizeof ( * uref ) ) ) //<S2SV> goto fault ; //<S2SV> goto goodreturn ; //<S2SV> case HIDIOCSUSAGE : //<S2SV> field -> value [ uref -> usage_index ] = uref -> value ; //<S2SV> goto goodreturn ; //<S2SV> case HIDIOCGCOLLECTIONINDEX : //<S2SV> i = field -> usage [ uref -> usage_index ] . collection_index ; //<S2SV> kfree ( uref_multi ) ; //<S2SV> return i ; //<S2SV> case HIDIOCGUSAGES : //<S2SV> for ( i = 0 ; i < uref_multi -> num_values ; i ++ ) //<S2SV> uref_multi -> values [ i ] = //<S2SV> field -> value [ uref -> usage_index + i ] ; //<S2SV> if ( copy_to_user ( user_arg , uref_multi , //<S2SV> sizeof ( * uref_multi ) ) ) //<S2SV> goto fault ; //<S2SV> goto goodreturn ; //<S2SV> case HIDIOCSUSAGES : //<S2SV> for ( i = 0 ; i < uref_multi -> num_values ; i ++ ) //<S2SV> field -> value [ uref -> usage_index + i ] = //<S2SV> uref_multi -> values [ i ] ; //<S2SV> goto goodreturn ; //<S2SV> } //<S2SV> goodreturn : //<S2SV> kfree ( uref_multi ) ; //<S2SV> return 0 ; //<S2SV> fault : //<S2SV> kfree ( uref_multi ) ; //<S2SV> return - EFAULT ; //<S2SV> inval : //<S2SV> kfree ( uref_multi ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> } //<S2SV> 