static int create_fixed_stream_quirk ( struct snd_usb_audio * chip , //<S2SV> struct usb_interface * iface , //<S2SV> struct usb_driver * driver , //<S2SV> const struct snd_usb_audio_quirk * quirk ) //<S2SV> { //<S2SV> struct audioformat * fp ; //<S2SV> struct usb_host_interface * alts ; //<S2SV> struct usb_interface_descriptor * altsd ; //<S2SV> int stream , err ; //<S2SV> unsigned * rate_table = NULL ; //<S2SV> fp = kmemdup ( quirk -> data , sizeof ( * fp ) , GFP_KERNEL ) ; //<S2SV> if ( ! fp ) { //<S2SV> usb_audio_err ( chip , "cannot<S2SV_blank>memdup\\n" ) ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> if ( fp -> nr_rates > MAX_NR_RATES ) { //<S2SV> kfree ( fp ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( fp -> nr_rates > 0 ) { //<S2SV> rate_table = kmemdup ( fp -> rate_table , //<S2SV> sizeof ( int ) * fp -> nr_rates , GFP_KERNEL ) ; //<S2SV> if ( ! rate_table ) { //<S2SV> kfree ( fp ) ; //<S2SV> return - ENOMEM ; //<S2SV> } //<S2SV> fp -> rate_table = rate_table ; //<S2SV> } //<S2SV> stream = ( fp -> endpoint & USB_DIR_IN ) //<S2SV> ? SNDRV_PCM_STREAM_CAPTURE : SNDRV_PCM_STREAM_PLAYBACK ; //<S2SV> err = snd_usb_add_audio_stream ( chip , stream , fp ) ; //<S2SV> if ( err < 0 ) { //<S2SV> kfree ( fp ) ; //<S2SV> kfree ( rate_table ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> if ( fp -> iface != get_iface_desc ( & iface -> altsetting [ 0 ] ) -> bInterfaceNumber || //<S2SV> fp -> altset_idx >= iface -> num_altsetting ) { //<S2SV> kfree ( fp ) ; //<S2SV> kfree ( rate_table ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> alts = & iface -> altsetting [ fp -> altset_idx ] ; //<S2SV> altsd = get_iface_desc ( alts ) ; //<S2SV> if ( altsd -> bNumEndpoints < 1 ) { //<S2SV> kfree ( fp ) ; //<S2SV> kfree ( rate_table ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> fp -> protocol = altsd -> bInterfaceProtocol ; //<S2SV> if ( fp -> datainterval == 0 ) //<S2SV> fp -> datainterval = snd_usb_parse_datainterval ( chip , alts ) ; //<S2SV> if ( fp -> maxpacksize == 0 ) //<S2SV> fp -> maxpacksize = le16_to_cpu ( get_endpoint ( alts , 0 ) -> wMaxPacketSize ) ; //<S2SV> usb_set_interface ( chip -> dev , fp -> iface , 0 ) ; //<S2SV> snd_usb_init_pitch ( chip , fp -> iface , alts , fp ) ; //<S2SV> snd_usb_init_sample_rate ( chip , fp -> iface , alts , fp , fp -> rate_max ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 