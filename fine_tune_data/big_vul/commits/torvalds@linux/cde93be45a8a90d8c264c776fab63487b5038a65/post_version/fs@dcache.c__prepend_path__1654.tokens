static int prepend_path ( const struct path * path , //<S2SV> const struct path * root , //<S2SV> char * * buffer , int * buflen ) //<S2SV> { //<S2SV> struct dentry * dentry ; //<S2SV> struct vfsmount * vfsmnt ; //<S2SV> struct mount * mnt ; //<S2SV> int error = 0 ; //<S2SV> unsigned seq , m_seq = 0 ; //<S2SV> char * bptr ; //<S2SV> int blen ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> restart_mnt : //<S2SV> read_seqbegin_or_lock ( & mount_lock , & m_seq ) ; //<S2SV> seq = 0 ; //<S2SV> rcu_read_lock ( ) ; //<S2SV> restart : //<S2SV> bptr = * buffer ; //<S2SV> blen = * buflen ; //<S2SV> error = 0 ; //<S2SV> dentry = path -> dentry ; //<S2SV> vfsmnt = path -> mnt ; //<S2SV> mnt = real_mount ( vfsmnt ) ; //<S2SV> read_seqbegin_or_lock ( & rename_lock , & seq ) ; //<S2SV> while ( dentry != root -> dentry || vfsmnt != root -> mnt ) { //<S2SV> struct dentry * parent ; //<S2SV> if ( dentry == vfsmnt -> mnt_root || IS_ROOT ( dentry ) ) { //<S2SV> struct mount * parent = ACCESS_ONCE ( mnt -> mnt_parent ) ; //<S2SV> if ( dentry != vfsmnt -> mnt_root ) { //<S2SV> bptr = * buffer ; //<S2SV> blen = * buflen ; //<S2SV> error = 3 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( mnt != parent ) { //<S2SV> dentry = ACCESS_ONCE ( mnt -> mnt_mountpoint ) ; //<S2SV> mnt = parent ; //<S2SV> vfsmnt = & mnt -> mnt ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! error ) //<S2SV> error = is_mounted ( vfsmnt ) ? 1 : 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> parent = dentry -> d_parent ; //<S2SV> prefetch ( parent ) ; //<S2SV> error = prepend_name ( & bptr , & blen , & dentry -> d_name ) ; //<S2SV> if ( error ) //<S2SV> break ; //<S2SV> dentry = parent ; //<S2SV> } //<S2SV> if ( ! ( seq & 1 ) ) //<S2SV> rcu_read_unlock ( ) ; //<S2SV> if ( need_seqretry ( & rename_lock , seq ) ) { //<S2SV> seq = 1 ; //<S2SV> goto restart ; //<S2SV> } //<S2SV> done_seqretry ( & rename_lock , seq ) ; //<S2SV> if ( ! ( m_seq & 1 ) ) //<S2SV> rcu_read_unlock ( ) ; //<S2SV> if ( need_seqretry ( & mount_lock , m_seq ) ) { //<S2SV> m_seq = 1 ; //<S2SV> goto restart_mnt ; //<S2SV> } //<S2SV> done_seqretry ( & mount_lock , m_seq ) ; //<S2SV> if ( error >= 0 && bptr == * buffer ) { //<S2SV> if ( -- blen < 0 ) //<S2SV> error = - ENAMETOOLONG ; //<S2SV> else //<S2SV> * -- bptr = '/' ; //<S2SV> } //<S2SV> * buffer = bptr ; //<S2SV> * buflen = blen ; //<S2SV> return error ; //<S2SV> } //<S2SV> 