long keyctl_set_reqkey_keyring ( int reqkey_defl ) //<S2SV> { //<S2SV> struct cred * new ; //<S2SV> int ret , old_setting ; //<S2SV> old_setting = current_cred_xxx ( jit_keyring ) ; //<S2SV> if ( reqkey_defl == KEY_REQKEY_DEFL_NO_CHANGE ) //<S2SV> return old_setting ; //<S2SV> new = prepare_creds ( ) ; //<S2SV> if ( ! new ) //<S2SV> return - ENOMEM ; //<S2SV> switch ( reqkey_defl ) { //<S2SV> case KEY_REQKEY_DEFL_THREAD_KEYRING : //<S2SV> ret = install_thread_keyring_to_cred ( new ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto error ; //<S2SV> goto set ; //<S2SV> case KEY_REQKEY_DEFL_PROCESS_KEYRING : //<S2SV> ret = install_process_keyring_to_cred ( new ) ; //<S2SV> if ( ret < 0 ) //<S2SV> goto error ; //<S2SV> goto set ; //<S2SV> case KEY_REQKEY_DEFL_DEFAULT : //<S2SV> case KEY_REQKEY_DEFL_SESSION_KEYRING : //<S2SV> case KEY_REQKEY_DEFL_USER_KEYRING : //<S2SV> case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : //<S2SV> case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : //<S2SV> goto set ; //<S2SV> case KEY_REQKEY_DEFL_NO_CHANGE : //<S2SV> case KEY_REQKEY_DEFL_GROUP_KEYRING : //<S2SV> default : //<S2SV> ret = - EINVAL ; //<S2SV> goto error ; //<S2SV> } //<S2SV> set : //<S2SV> new -> jit_keyring = reqkey_defl ; //<S2SV> commit_creds ( new ) ; //<S2SV> return old_setting ; //<S2SV> error : //<S2SV> abort_creds ( new ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 