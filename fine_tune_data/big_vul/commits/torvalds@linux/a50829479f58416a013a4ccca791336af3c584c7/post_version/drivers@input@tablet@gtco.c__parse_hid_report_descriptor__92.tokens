static void parse_hid_report_descriptor ( struct gtco * device , char * report , //<S2SV> int length ) //<S2SV> { //<S2SV> struct device * ddev = & device -> intf -> dev ; //<S2SV> int x , i = 0 ; //<S2SV> __u8 prefix ; //<S2SV> __u8 size ; //<S2SV> __u8 tag ; //<S2SV> __u8 type ; //<S2SV> __u8 data = 0 ; //<S2SV> __u16 data16 = 0 ; //<S2SV> __u32 data32 = 0 ; //<S2SV> int inputnum = 0 ; //<S2SV> __u32 usage = 0 ; //<S2SV> __u32 globalval [ TAG_GLOB_MAX ] ; //<S2SV> __u32 oldval [ TAG_GLOB_MAX ] ; //<S2SV> char maintype = 'x' ; //<S2SV> char globtype [ 12 ] ; //<S2SV> int indent = 0 ; //<S2SV> char indentstr [ 10 ] = "" ; //<S2SV> dev_dbg ( ddev , "======>>>>>>PARSE<<<<<<======\\n" ) ; //<S2SV> while ( i < length ) { //<S2SV> prefix = report [ i ++ ] ; //<S2SV> size = ( 1U << PREF_SIZE ( prefix ) ) >> 1 ; //<S2SV> if ( i + size > length ) { //<S2SV> dev_err ( ddev , //<S2SV> "Not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>(need<S2SV_blank>%d,<S2SV_blank>have<S2SV_blank>%d)\\n" , //<S2SV> i + size , length ) ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( size ) { //<S2SV> case 1 : //<S2SV> data = report [ i ] ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> data16 = get_unaligned_le16 ( & report [ i ] ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> data32 = get_unaligned_le32 ( & report [ i ] ) ; //<S2SV> break ; //<S2SV> } //<S2SV> i += size ; //<S2SV> tag = PREF_TAG ( prefix ) ; //<S2SV> type = PREF_TYPE ( prefix ) ; //<S2SV> switch ( type ) { //<S2SV> case TYPE_MAIN : //<S2SV> strcpy ( globtype , "" ) ; //<S2SV> switch ( tag ) { //<S2SV> case TAG_MAIN_INPUT : //<S2SV> maintype = 'I' ; //<S2SV> if ( data == 2 ) //<S2SV> strcpy ( globtype , "Variable" ) ; //<S2SV> else if ( data == 3 ) //<S2SV> strcpy ( globtype , "Var|Const" ) ; //<S2SV> dev_dbg ( ddev , ":::::<S2SV_blank>Saving<S2SV_blank>Report:<S2SV_blank>%d<S2SV_blank>input<S2SV_blank>#%d<S2SV_blank>Max:<S2SV_blank>0x%X(%d)<S2SV_blank>Min:0x%X(%d)<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>bits\\n" , //<S2SV> globalval [ TAG_GLOB_REPORT_ID ] , inputnum , //<S2SV> globalval [ TAG_GLOB_LOG_MAX ] , globalval [ TAG_GLOB_LOG_MAX ] , //<S2SV> globalval [ TAG_GLOB_LOG_MIN ] , globalval [ TAG_GLOB_LOG_MIN ] , //<S2SV> globalval [ TAG_GLOB_REPORT_SZ ] * globalval [ TAG_GLOB_REPORT_CNT ] ) ; //<S2SV> switch ( inputnum ) { //<S2SV> case 0 : //<S2SV> dev_dbg ( ddev , "GER:<S2SV_blank>X<S2SV_blank>Usage:<S2SV_blank>0x%x\\n" , usage ) ; //<S2SV> if ( device -> max_X == 0 ) { //<S2SV> device -> max_X = globalval [ TAG_GLOB_LOG_MAX ] ; //<S2SV> device -> min_X = globalval [ TAG_GLOB_LOG_MIN ] ; //<S2SV> } //<S2SV> break ; //<S2SV> case 1 : //<S2SV> dev_dbg ( ddev , "GER:<S2SV_blank>Y<S2SV_blank>Usage:<S2SV_blank>0x%x\\n" , usage ) ; //<S2SV> if ( device -> max_Y == 0 ) { //<S2SV> device -> max_Y = globalval [ TAG_GLOB_LOG_MAX ] ; //<S2SV> device -> min_Y = globalval [ TAG_GLOB_LOG_MIN ] ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> if ( usage == DIGITIZER_USAGE_TILT_X ) { //<S2SV> if ( device -> maxtilt_X == 0 ) { //<S2SV> device -> maxtilt_X = globalval [ TAG_GLOB_LOG_MAX ] ; //<S2SV> device -> mintilt_X = globalval [ TAG_GLOB_LOG_MIN ] ; //<S2SV> } //<S2SV> } //<S2SV> if ( usage == DIGITIZER_USAGE_TILT_Y ) { //<S2SV> if ( device -> maxtilt_Y == 0 ) { //<S2SV> device -> maxtilt_Y = globalval [ TAG_GLOB_LOG_MAX ] ; //<S2SV> device -> mintilt_Y = globalval [ TAG_GLOB_LOG_MIN ] ; //<S2SV> } //<S2SV> } //<S2SV> if ( usage == DIGITIZER_USAGE_TIP_PRESSURE ) { //<S2SV> if ( device -> maxpressure == 0 ) { //<S2SV> device -> maxpressure = globalval [ TAG_GLOB_LOG_MAX ] ; //<S2SV> device -> minpressure = globalval [ TAG_GLOB_LOG_MIN ] ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> inputnum ++ ; //<S2SV> break ; //<S2SV> case TAG_MAIN_OUTPUT : //<S2SV> maintype = 'O' ; //<S2SV> break ; //<S2SV> case TAG_MAIN_FEATURE : //<S2SV> maintype = 'F' ; //<S2SV> break ; //<S2SV> case TAG_MAIN_COL_START : //<S2SV> maintype = 'S' ; //<S2SV> if ( data == 0 ) { //<S2SV> dev_dbg ( ddev , "======>>>>>><S2SV_blank>Physical\\n" ) ; //<S2SV> strcpy ( globtype , "Physical" ) ; //<S2SV> } else //<S2SV> dev_dbg ( ddev , "======>>>>>>\\n" ) ; //<S2SV> indent ++ ; //<S2SV> for ( x = 0 ; x < indent ; x ++ ) //<S2SV> indentstr [ x ] = '-' ; //<S2SV> indentstr [ x ] = 0 ; //<S2SV> for ( x = 0 ; x < TAG_GLOB_MAX ; x ++ ) //<S2SV> oldval [ x ] = globalval [ x ] ; //<S2SV> break ; //<S2SV> case TAG_MAIN_COL_END : //<S2SV> dev_dbg ( ddev , "<<<<<<======\\n" ) ; //<S2SV> maintype = 'E' ; //<S2SV> indent -- ; //<S2SV> for ( x = 0 ; x < indent ; x ++ ) //<S2SV> indentstr [ x ] = '-' ; //<S2SV> indentstr [ x ] = 0 ; //<S2SV> for ( x = 0 ; x < TAG_GLOB_MAX ; x ++ ) //<S2SV> globalval [ x ] = oldval [ x ] ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( size ) { //<S2SV> case 1 : //<S2SV> dev_dbg ( ddev , "%sMAINTAG:(%d)<S2SV_blank>%c<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>%s<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , tag , maintype , size , globtype , data ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> dev_dbg ( ddev , "%sMAINTAG:(%d)<S2SV_blank>%c<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>%s<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , tag , maintype , size , globtype , data16 ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> dev_dbg ( ddev , "%sMAINTAG:(%d)<S2SV_blank>%c<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>%s<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , tag , maintype , size , globtype , data32 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case TYPE_GLOBAL : //<S2SV> switch ( tag ) { //<S2SV> case TAG_GLOB_USAGE : //<S2SV> if ( device -> usage == 0 ) //<S2SV> device -> usage = data ; //<S2SV> strcpy ( globtype , "USAGE" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_LOG_MIN : //<S2SV> strcpy ( globtype , "LOG_MIN" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_LOG_MAX : //<S2SV> strcpy ( globtype , "LOG_MAX" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_PHYS_MIN : //<S2SV> strcpy ( globtype , "PHYS_MIN" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_PHYS_MAX : //<S2SV> strcpy ( globtype , "PHYS_MAX" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_UNIT_EXP : //<S2SV> strcpy ( globtype , "EXP" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_UNIT : //<S2SV> strcpy ( globtype , "UNIT" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_REPORT_SZ : //<S2SV> strcpy ( globtype , "REPORT_SZ" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_REPORT_ID : //<S2SV> strcpy ( globtype , "REPORT_ID" ) ; //<S2SV> inputnum = 0 ; //<S2SV> break ; //<S2SV> case TAG_GLOB_REPORT_CNT : //<S2SV> strcpy ( globtype , "REPORT_CNT" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_PUSH : //<S2SV> strcpy ( globtype , "PUSH" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_POP : //<S2SV> strcpy ( globtype , "POP" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( tag < TAG_GLOB_MAX ) { //<S2SV> switch ( size ) { //<S2SV> case 1 : //<S2SV> dev_dbg ( ddev , "%sGLOBALTAG:%s(%d)<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , globtype , tag , size , data ) ; //<S2SV> globalval [ tag ] = data ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> dev_dbg ( ddev , "%sGLOBALTAG:%s(%d)<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , globtype , tag , size , data16 ) ; //<S2SV> globalval [ tag ] = data16 ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> dev_dbg ( ddev , "%sGLOBALTAG:%s(%d)<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , globtype , tag , size , data32 ) ; //<S2SV> globalval [ tag ] = data32 ; //<S2SV> break ; //<S2SV> } //<S2SV> } else { //<S2SV> dev_dbg ( ddev , "%sGLOBALTAG:<S2SV_blank>ILLEGAL<S2SV_blank>TAG:%d<S2SV_blank>SIZE:<S2SV_blank>%d\\n" , //<S2SV> indentstr , tag , size ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case TYPE_LOCAL : //<S2SV> switch ( tag ) { //<S2SV> case TAG_GLOB_USAGE : //<S2SV> strcpy ( globtype , "USAGE" ) ; //<S2SV> usage = data ; //<S2SV> break ; //<S2SV> case TAG_GLOB_LOG_MIN : //<S2SV> strcpy ( globtype , "MIN" ) ; //<S2SV> break ; //<S2SV> case TAG_GLOB_LOG_MAX : //<S2SV> strcpy ( globtype , "MAX" ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> strcpy ( globtype , "UNKNOWN" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( size ) { //<S2SV> case 1 : //<S2SV> dev_dbg ( ddev , "%sLOCALTAG:(%d)<S2SV_blank>%s<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , tag , globtype , size , data ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> dev_dbg ( ddev , "%sLOCALTAG:(%d)<S2SV_blank>%s<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , tag , globtype , size , data16 ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> dev_dbg ( ddev , "%sLOCALTAG:(%d)<S2SV_blank>%s<S2SV_blank>SIZE:<S2SV_blank>%d<S2SV_blank>Data:<S2SV_blank>0x%x\\n" , //<S2SV> indentstr , tag , globtype , size , data32 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 