static int usb_enumerate_device_otg ( struct usb_device * udev ) //<S2SV> { //<S2SV> int err = 0 ; //<S2SV> # ifdef CONFIG_USB_OTG //<S2SV> if ( ! udev -> bus -> is_b_host //<S2SV> && udev -> config //<S2SV> && udev -> parent == udev -> bus -> root_hub ) { //<S2SV> struct usb_otg_descriptor * desc = NULL ; //<S2SV> struct usb_bus * bus = udev -> bus ; //<S2SV> unsigned port1 = udev -> portnum ; //<S2SV> err = __usb_get_extra_descriptor ( udev -> rawdescriptors [ 0 ] , //<S2SV> le16_to_cpu ( udev -> config [ 0 ] . desc . wTotalLength ) , //<S2SV> USB_DT_OTG , ( void * * ) & desc , sizeof ( * desc ) ) ; //<S2SV> if ( err || ! ( desc -> bmAttributes & USB_OTG_HNP ) ) //<S2SV> return 0 ; //<S2SV> dev_info ( & udev -> dev , "Dual-Role<S2SV_blank>OTG<S2SV_blank>device<S2SV_blank>on<S2SV_blank>%sHNP<S2SV_blank>port\\n" , //<S2SV> ( port1 == bus -> otg_port ) ? "" : "non-" ) ; //<S2SV> if ( port1 == bus -> otg_port ) { //<S2SV> bus -> b_hnp_enable = 1 ; //<S2SV> err = usb_control_msg ( udev , //<S2SV> usb_sndctrlpipe ( udev , 0 ) , //<S2SV> USB_REQ_SET_FEATURE , 0 , //<S2SV> USB_DEVICE_B_HNP_ENABLE , //<S2SV> 0 , NULL , 0 , //<S2SV> USB_CTRL_SET_TIMEOUT ) ; //<S2SV> if ( err < 0 ) { //<S2SV> dev_err ( & udev -> dev , "can\'t<S2SV_blank>set<S2SV_blank>HNP<S2SV_blank>mode:<S2SV_blank>%d\\n" , //<S2SV> err ) ; //<S2SV> bus -> b_hnp_enable = 0 ; //<S2SV> } //<S2SV> } else if ( desc -> bLength == sizeof //<S2SV> ( struct usb_otg_descriptor ) ) { //<S2SV> err = usb_control_msg ( udev , //<S2SV> usb_sndctrlpipe ( udev , 0 ) , //<S2SV> USB_REQ_SET_FEATURE , 0 , //<S2SV> USB_DEVICE_A_ALT_HNP_SUPPORT , //<S2SV> 0 , NULL , 0 , //<S2SV> USB_CTRL_SET_TIMEOUT ) ; //<S2SV> if ( err < 0 ) //<S2SV> dev_err ( & udev -> dev , //<S2SV> "set<S2SV_blank>a_alt_hnp_support<S2SV_blank>failed:<S2SV_blank>%d\\n" , //<S2SV> err ) ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> return err ; //<S2SV> } //<S2SV> 