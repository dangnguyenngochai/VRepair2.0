static int //<S2SV> packet_setsockopt ( struct socket * sock , int level , int optname , char __user * optval , unsigned int optlen ) //<S2SV> { //<S2SV> struct sock * sk = sock -> sk ; //<S2SV> struct packet_sock * po = pkt_sk ( sk ) ; //<S2SV> int ret ; //<S2SV> if ( level != SOL_PACKET ) //<S2SV> return - ENOPROTOOPT ; //<S2SV> switch ( optname ) { //<S2SV> case PACKET_ADD_MEMBERSHIP : //<S2SV> case PACKET_DROP_MEMBERSHIP : //<S2SV> { //<S2SV> struct packet_mreq_max mreq ; //<S2SV> int len = optlen ; //<S2SV> memset ( & mreq , 0 , sizeof ( mreq ) ) ; //<S2SV> if ( len < sizeof ( struct packet_mreq ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( len > sizeof ( mreq ) ) //<S2SV> len = sizeof ( mreq ) ; //<S2SV> if ( copy_from_user ( & mreq , optval , len ) ) //<S2SV> return - EFAULT ; //<S2SV> if ( len < ( mreq . mr_alen + offsetof ( struct packet_mreq , mr_address ) ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( optname == PACKET_ADD_MEMBERSHIP ) //<S2SV> ret = packet_mc_add ( sk , & mreq ) ; //<S2SV> else //<S2SV> ret = packet_mc_drop ( sk , & mreq ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> case PACKET_RX_RING : //<S2SV> case PACKET_TX_RING : //<S2SV> { //<S2SV> union tpacket_req_u req_u ; //<S2SV> int len ; //<S2SV> switch ( po -> tp_version ) { //<S2SV> case TPACKET_V1 : //<S2SV> case TPACKET_V2 : //<S2SV> len = sizeof ( req_u . req ) ; //<S2SV> break ; //<S2SV> case TPACKET_V3 : //<S2SV> default : //<S2SV> len = sizeof ( req_u . req3 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( optlen < len ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & req_u . req , optval , len ) ) //<S2SV> return - EFAULT ; //<S2SV> return packet_set_ring ( sk , & req_u , 0 , //<S2SV> optname == PACKET_TX_RING ) ; //<S2SV> } //<S2SV> case PACKET_COPY_THRESH : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> pkt_sk ( sk ) -> copy_thresh = val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_VERSION : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) //<S2SV> return - EBUSY ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> switch ( val ) { //<S2SV> case TPACKET_V1 : //<S2SV> case TPACKET_V2 : //<S2SV> case TPACKET_V3 : //<S2SV> po -> tp_version = val ; //<S2SV> return 0 ; //<S2SV> default : //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> } //<S2SV> case PACKET_RESERVE : //<S2SV> { //<S2SV> unsigned int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) //<S2SV> return - EBUSY ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> tp_reserve = val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_LOSS : //<S2SV> { //<S2SV> unsigned int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) //<S2SV> return - EBUSY ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> tp_loss = ! ! val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_AUXDATA : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( optlen < sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> auxdata = ! ! val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_ORIGDEV : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( optlen < sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> origdev = ! ! val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_VNET_HDR : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( sock -> type != SOCK_RAW ) //<S2SV> return - EINVAL ; //<S2SV> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) //<S2SV> return - EBUSY ; //<S2SV> if ( optlen < sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> has_vnet_hdr = ! ! val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_TIMESTAMP : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> tp_tstamp = val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_FANOUT : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> return fanout_add ( sk , val & 0xffff , val >> 16 ) ; //<S2SV> } //<S2SV> case PACKET_FANOUT_DATA : //<S2SV> { //<S2SV> if ( ! po -> fanout ) //<S2SV> return - EINVAL ; //<S2SV> return fanout_set_data ( po , optval , optlen ) ; //<S2SV> } //<S2SV> case PACKET_TX_HAS_OFF : //<S2SV> { //<S2SV> unsigned int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( po -> rx_ring . pg_vec || po -> tx_ring . pg_vec ) //<S2SV> return - EBUSY ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> tp_tx_has_off = ! ! val ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> case PACKET_QDISC_BYPASS : //<S2SV> { //<S2SV> int val ; //<S2SV> if ( optlen != sizeof ( val ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( copy_from_user ( & val , optval , sizeof ( val ) ) ) //<S2SV> return - EFAULT ; //<S2SV> po -> xmit = val ? packet_direct_xmit : dev_queue_xmit ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> default : //<S2SV> return - ENOPROTOOPT ; //<S2SV> } //<S2SV> } //<S2SV> 