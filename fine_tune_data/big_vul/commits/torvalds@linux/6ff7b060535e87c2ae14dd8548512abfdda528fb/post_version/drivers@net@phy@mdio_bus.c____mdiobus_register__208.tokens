int __mdiobus_register ( struct mii_bus * bus , struct module * owner ) //<S2SV> { //<S2SV> struct mdio_device * mdiodev ; //<S2SV> int i , err ; //<S2SV> struct gpio_desc * gpiod ; //<S2SV> if ( NULL == bus || NULL == bus -> name || //<S2SV> NULL == bus -> read || NULL == bus -> write ) //<S2SV> return - EINVAL ; //<S2SV> BUG_ON ( bus -> state != MDIOBUS_ALLOCATED && //<S2SV> bus -> state != MDIOBUS_UNREGISTERED ) ; //<S2SV> bus -> owner = owner ; //<S2SV> bus -> dev . parent = bus -> parent ; //<S2SV> bus -> dev . class = & mdio_bus_class ; //<S2SV> bus -> dev . groups = NULL ; //<S2SV> dev_set_name ( & bus -> dev , "%s" , bus -> id ) ; //<S2SV> err = device_register ( & bus -> dev ) ; //<S2SV> if ( err ) { //<S2SV> pr_err ( "mii_bus<S2SV_blank>%s<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>register\\n" , bus -> id ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> mutex_init ( & bus -> mdio_lock ) ; //<S2SV> gpiod = devm_gpiod_get_optional ( & bus -> dev , "reset" , GPIOD_OUT_LOW ) ; //<S2SV> if ( IS_ERR ( gpiod ) ) { //<S2SV> dev_err ( & bus -> dev , "mii_bus<S2SV_blank>%s<S2SV_blank>couldn\'t<S2SV_blank>get<S2SV_blank>reset<S2SV_blank>GPIO\\n" , //<S2SV> bus -> id ) ; //<S2SV> device_del ( & bus -> dev ) ; //<S2SV> return PTR_ERR ( gpiod ) ; //<S2SV> } else if ( gpiod ) { //<S2SV> bus -> reset_gpiod = gpiod ; //<S2SV> gpiod_set_value_cansleep ( gpiod , 1 ) ; //<S2SV> udelay ( bus -> reset_delay_us ) ; //<S2SV> gpiod_set_value_cansleep ( gpiod , 0 ) ; //<S2SV> } //<S2SV> if ( bus -> reset ) //<S2SV> bus -> reset ( bus ) ; //<S2SV> for ( i = 0 ; i < PHY_MAX_ADDR ; i ++ ) { //<S2SV> if ( ( bus -> phy_mask & ( 1 << i ) ) == 0 ) { //<S2SV> struct phy_device * phydev ; //<S2SV> phydev = mdiobus_scan ( bus , i ) ; //<S2SV> if ( IS_ERR ( phydev ) && ( PTR_ERR ( phydev ) != - ENODEV ) ) { //<S2SV> err = PTR_ERR ( phydev ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> mdiobus_setup_mdiodev_from_board_info ( bus , mdiobus_create_device ) ; //<S2SV> bus -> state = MDIOBUS_REGISTERED ; //<S2SV> pr_info ( "%s:<S2SV_blank>probed\\n" , bus -> name ) ; //<S2SV> return 0 ; //<S2SV> error : //<S2SV> while ( -- i >= 0 ) { //<S2SV> mdiodev = bus -> mdio_map [ i ] ; //<S2SV> if ( ! mdiodev ) //<S2SV> continue ; //<S2SV> mdiodev -> device_remove ( mdiodev ) ; //<S2SV> mdiodev -> device_free ( mdiodev ) ; //<S2SV> } //<S2SV> if ( bus -> reset_gpiod ) //<S2SV> gpiod_set_value_cansleep ( bus -> reset_gpiod , 1 ) ; //<S2SV> device_del ( & bus -> dev ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 