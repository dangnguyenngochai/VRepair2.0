static void rds_tcp_kill_sock ( struct net * net ) //<S2SV> { //<S2SV> struct rds_tcp_connection * tc , * _tc ; //<S2SV> LIST_HEAD ( tmp_list ) ; //<S2SV> struct rds_tcp_net * rtn = net_generic ( net , rds_tcp_netid ) ; //<S2SV> struct socket * lsock = rtn -> rds_tcp_listen_sock ; //<S2SV> rtn -> rds_tcp_listen_sock = NULL ; //<S2SV> rds_tcp_listen_stop ( lsock , & rtn -> rds_tcp_accept_w ) ; //<S2SV> spin_lock_irq ( & rds_tcp_conn_lock ) ; //<S2SV> list_for_each_entry_safe ( tc , _tc , & rds_tcp_conn_list , t_tcp_node ) { //<S2SV> struct net * c_net = read_pnet ( & tc -> t_cpath -> cp_conn -> c_net ) ; //<S2SV> if ( net != c_net ) //<S2SV> continue ; //<S2SV> if ( ! list_has_conn ( & tmp_list , tc -> t_cpath -> cp_conn ) ) { //<S2SV> list_move_tail ( & tc -> t_tcp_node , & tmp_list ) ; //<S2SV> } else { //<S2SV> list_del ( & tc -> t_tcp_node ) ; //<S2SV> tc -> t_tcp_node_detached = true ; //<S2SV> } //<S2SV> } //<S2SV> spin_unlock_irq ( & rds_tcp_conn_lock ) ; //<S2SV> list_for_each_entry_safe ( tc , _tc , & tmp_list , t_tcp_node ) //<S2SV> rds_conn_destroy ( tc -> t_cpath -> cp_conn ) ; //<S2SV> } //<S2SV> 