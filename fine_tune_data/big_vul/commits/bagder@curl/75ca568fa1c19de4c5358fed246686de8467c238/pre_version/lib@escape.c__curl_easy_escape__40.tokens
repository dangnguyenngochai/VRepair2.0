char * curl_easy_escape ( CURL * handle , const char * string , int inlength ) //<S2SV> { //<S2SV> size_t alloc = ( inlength ? ( size_t ) inlength : strlen ( string ) ) + 1 ; //<S2SV> char * ns ; //<S2SV> char * testing_ptr = NULL ; //<S2SV> unsigned char in ; //<S2SV> size_t newlen = alloc ; //<S2SV> int strindex = 0 ; //<S2SV> size_t length ; //<S2SV> CURLcode res ; //<S2SV> ns = malloc ( alloc ) ; //<S2SV> if ( ! ns ) //<S2SV> return NULL ; //<S2SV> length = alloc - 1 ; //<S2SV> while ( length -- ) { //<S2SV> in = * string ; //<S2SV> if ( Curl_isunreserved ( in ) ) //<S2SV> ns [ strindex ++ ] = in ; //<S2SV> else { //<S2SV> newlen += 2 ; //<S2SV> if ( newlen > alloc ) { //<S2SV> alloc *= 2 ; //<S2SV> testing_ptr = realloc ( ns , alloc ) ; //<S2SV> if ( ! testing_ptr ) { //<S2SV> free ( ns ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> else { //<S2SV> ns = testing_ptr ; //<S2SV> } //<S2SV> } //<S2SV> res = Curl_convert_to_network ( handle , & in , 1 ) ; //<S2SV> if ( res ) { //<S2SV> free ( ns ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> snprintf ( & ns [ strindex ] , 4 , "%%%02X" , in ) ; //<S2SV> strindex += 3 ; //<S2SV> } //<S2SV> string ++ ; //<S2SV> } //<S2SV> ns [ strindex ] = 0 ; //<S2SV> return ns ; //<S2SV> } //<S2SV> 