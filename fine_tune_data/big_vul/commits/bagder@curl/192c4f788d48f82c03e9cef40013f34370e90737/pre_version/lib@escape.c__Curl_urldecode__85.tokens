CURLcode Curl_urldecode ( struct SessionHandle * data , //<S2SV> const char * string , size_t length , //<S2SV> char * * ostring , size_t * olen , //<S2SV> bool reject_ctrl ) //<S2SV> { //<S2SV> size_t alloc = ( length ? length : strlen ( string ) ) + 1 ; //<S2SV> char * ns = malloc ( alloc ) ; //<S2SV> unsigned char in ; //<S2SV> size_t strindex = 0 ; //<S2SV> unsigned long hex ; //<S2SV> CURLcode res ; //<S2SV> if ( ! ns ) //<S2SV> return CURLE_OUT_OF_MEMORY ; //<S2SV> while ( -- alloc > 0 ) { //<S2SV> in = * string ; //<S2SV> if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { //<S2SV> char hexstr [ 3 ] ; //<S2SV> char * ptr ; //<S2SV> hexstr [ 0 ] = string [ 1 ] ; //<S2SV> hexstr [ 1 ] = string [ 2 ] ; //<S2SV> hexstr [ 2 ] = 0 ; //<S2SV> hex = strtoul ( hexstr , & ptr , 16 ) ; //<S2SV> in = curlx_ultouc ( hex ) ; //<S2SV> res = Curl_convert_from_network ( data , & in , 1 ) ; //<S2SV> if ( res ) { //<S2SV> free ( ns ) ; //<S2SV> return res ; //<S2SV> } //<S2SV> string += 2 ; //<S2SV> alloc -= 2 ; //<S2SV> } //<S2SV> if ( reject_ctrl && ( in < 0x20 ) ) { //<S2SV> free ( ns ) ; //<S2SV> return CURLE_URL_MALFORMAT ; //<S2SV> } //<S2SV> ns [ strindex ++ ] = in ; //<S2SV> string ++ ; //<S2SV> } //<S2SV> ns [ strindex ] = 0 ; //<S2SV> if ( olen ) //<S2SV> * olen = strindex ; //<S2SV> if ( ostring ) //<S2SV> * ostring = ns ; //<S2SV> return CURLE_OK ; //<S2SV> } //<S2SV> 