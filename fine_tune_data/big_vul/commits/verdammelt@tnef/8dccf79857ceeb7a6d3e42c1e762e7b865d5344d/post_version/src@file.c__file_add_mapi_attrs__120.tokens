static void //<S2SV> file_add_mapi_attrs ( File * file , MAPI_Attr * * attrs ) //<S2SV> { //<S2SV> int i ; //<S2SV> for ( i = 0 ; attrs [ i ] ; i ++ ) //<S2SV> { //<S2SV> MAPI_Attr * a = attrs [ i ] ; //<S2SV> if ( a -> num_values ) //<S2SV> { //<S2SV> switch ( a -> name ) //<S2SV> { //<S2SV> case MAPI_ATTACH_LONG_FILENAME : //<S2SV> assert ( a -> type == szMAPI_STRING ) ; //<S2SV> if ( file -> name ) XFREE ( file -> name ) ; //<S2SV> file -> name = strdup ( ( char * ) a -> values [ 0 ] . data . buf ) ; //<S2SV> break ; //<S2SV> case MAPI_ATTACH_DATA_OBJ : //<S2SV> assert ( ( a -> type == szMAPI_BINARY ) || ( a -> type == szMAPI_OBJECT ) ) ; //<S2SV> file -> len = a -> values [ 0 ] . len ; //<S2SV> if ( file -> data ) XFREE ( file -> data ) ; //<S2SV> file -> data = CHECKED_XMALLOC ( unsigned char , file -> len ) ; //<S2SV> memmove ( file -> data , a -> values [ 0 ] . data . buf , file -> len ) ; //<S2SV> break ; //<S2SV> case MAPI_ATTACH_MIME_TAG : //<S2SV> assert ( a -> type == szMAPI_STRING ) ; //<S2SV> if ( file -> mime_type ) XFREE ( file -> mime_type ) ; //<S2SV> file -> mime_type = CHECKED_XMALLOC ( char , a -> values [ 0 ] . len ) ; //<S2SV> memmove ( file -> mime_type , a -> values [ 0 ] . data . buf , a -> values [ 0 ] . len ) ; //<S2SV> break ; //<S2SV> case MAPI_ATTACH_CONTENT_ID : //<S2SV> assert ( a -> type == szMAPI_STRING ) ; //<S2SV> if ( file -> content_id ) XFREE ( file -> content_id ) ; //<S2SV> file -> content_id = CHECKED_XMALLOC ( char , a -> values [ 0 ] . len ) ; //<S2SV> memmove ( file -> content_id , a -> values [ 0 ] . data . buf , a -> values [ 0 ] . len ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 