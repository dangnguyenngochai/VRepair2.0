static int //<S2SV> m_authenticate ( struct Client * client_p , struct Client * source_p , //<S2SV> int parc , const char * parv [ ] ) //<S2SV> { //<S2SV> struct Client * agent_p = NULL ; //<S2SV> struct Client * saslserv_p = NULL ; //<S2SV> if ( ! IsCapable ( source_p , CLICAP_SASL ) ) //<S2SV> return 0 ; //<S2SV> if ( strlen ( client_p -> id ) == 3 ) //<S2SV> { //<S2SV> exit_client ( client_p , client_p , client_p , "Mixing<S2SV_blank>client<S2SV_blank>and<S2SV_blank>server<S2SV_blank>protocol" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> saslserv_p = find_named_client ( ConfigFileEntry . sasl_service ) ; //<S2SV> if ( saslserv_p == NULL || ! IsService ( saslserv_p ) ) //<S2SV> { //<S2SV> sendto_one ( source_p , form_str ( ERR_SASLABORTED ) , me . name , EmptyString ( source_p -> name ) ? "*" : source_p -> name ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( source_p -> localClient -> sasl_complete ) //<S2SV> { //<S2SV> * source_p -> localClient -> sasl_agent = '\\0' ; //<S2SV> source_p -> localClient -> sasl_complete = 0 ; //<S2SV> } //<S2SV> if ( strlen ( parv [ 1 ] ) > 400 ) //<S2SV> { //<S2SV> sendto_one ( source_p , form_str ( ERR_SASLTOOLONG ) , me . name , EmptyString ( source_p -> name ) ? "*" : source_p -> name ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! * source_p -> id ) //<S2SV> { //<S2SV> strcpy ( source_p -> id , generate_uid ( ) ) ; //<S2SV> add_to_id_hash ( source_p -> id , source_p ) ; //<S2SV> } //<S2SV> if ( * source_p -> localClient -> sasl_agent ) //<S2SV> agent_p = find_id ( source_p -> localClient -> sasl_agent ) ; //<S2SV> if ( agent_p == NULL ) //<S2SV> { //<S2SV> sendto_one ( saslserv_p , ":%s<S2SV_blank>ENCAP<S2SV_blank>%s<S2SV_blank>SASL<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>H<S2SV_blank>%s<S2SV_blank>%s" , //<S2SV> me . id , saslserv_p -> servptr -> name , source_p -> id , saslserv_p -> id , //<S2SV> source_p -> host , source_p -> sockhost ) ; //<S2SV> if ( ! strcmp ( parv [ 1 ] , "EXTERNAL" ) && source_p -> certfp != NULL ) //<S2SV> sendto_one ( saslserv_p , ":%s<S2SV_blank>ENCAP<S2SV_blank>%s<S2SV_blank>SASL<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>S<S2SV_blank>%s<S2SV_blank>%s" , //<S2SV> me . id , saslserv_p -> servptr -> name , source_p -> id , saslserv_p -> id , //<S2SV> parv [ 1 ] , source_p -> certfp ) ; //<S2SV> else //<S2SV> sendto_one ( saslserv_p , ":%s<S2SV_blank>ENCAP<S2SV_blank>%s<S2SV_blank>SASL<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>S<S2SV_blank>%s" , //<S2SV> me . id , saslserv_p -> servptr -> name , source_p -> id , saslserv_p -> id , //<S2SV> parv [ 1 ] ) ; //<S2SV> rb_strlcpy ( source_p -> localClient -> sasl_agent , saslserv_p -> id , IDLEN ) ; //<S2SV> } //<S2SV> else //<S2SV> sendto_one ( agent_p , ":%s<S2SV_blank>ENCAP<S2SV_blank>%s<S2SV_blank>SASL<S2SV_blank>%s<S2SV_blank>%s<S2SV_blank>C<S2SV_blank>%s" , //<S2SV> me . id , agent_p -> servptr -> name , source_p -> id , agent_p -> id , //<S2SV> parv [ 1 ] ) ; //<S2SV> source_p -> localClient -> sasl_out ++ ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 