static void //<S2SV> _prolog_error ( batch_job_launch_msg_t * req , int rc ) //<S2SV> { //<S2SV> char * err_name_ptr , err_name [ 256 ] , path_name [ MAXPATHLEN ] ; //<S2SV> char * fmt_char ; //<S2SV> int fd ; //<S2SV> if ( req -> std_err || req -> std_out ) { //<S2SV> if ( req -> std_err ) //<S2SV> strncpy ( err_name , req -> std_err , sizeof ( err_name ) ) ; //<S2SV> else //<S2SV> strncpy ( err_name , req -> std_out , sizeof ( err_name ) ) ; //<S2SV> if ( ( fmt_char = strchr ( err_name , ( int ) '%' ) ) && //<S2SV> ( fmt_char [ 1 ] == 'j' ) && ! strchr ( fmt_char + 1 , ( int ) '%' ) ) { //<S2SV> char tmp_name [ 256 ] ; //<S2SV> fmt_char [ 1 ] = 'u' ; //<S2SV> snprintf ( tmp_name , sizeof ( tmp_name ) , err_name , //<S2SV> req -> job_id ) ; //<S2SV> strncpy ( err_name , tmp_name , sizeof ( err_name ) ) ; //<S2SV> } //<S2SV> } else { //<S2SV> snprintf ( err_name , sizeof ( err_name ) , "slurm-%u.out" , //<S2SV> req -> job_id ) ; //<S2SV> } //<S2SV> err_name_ptr = err_name ; //<S2SV> if ( err_name_ptr [ 0 ] == '/' ) //<S2SV> snprintf ( path_name , MAXPATHLEN , "%s" , err_name_ptr ) ; //<S2SV> else if ( req -> work_dir ) //<S2SV> snprintf ( path_name , MAXPATHLEN , "%s/%s" , //<S2SV> req -> work_dir , err_name_ptr ) ; //<S2SV> else //<S2SV> snprintf ( path_name , MAXPATHLEN , "/%s" , err_name_ptr ) ; //<S2SV> if ( ( fd = open ( path_name , ( O_CREAT | O_APPEND | O_WRONLY ) , 0644 ) ) == - 1 ) { //<S2SV> error ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s:<S2SV_blank>%s" , path_name , //<S2SV> slurm_strerror ( errno ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> snprintf ( err_name , sizeof ( err_name ) , //<S2SV> "Error<S2SV_blank>running<S2SV_blank>slurm<S2SV_blank>prolog:<S2SV_blank>%d\\n" , WEXITSTATUS ( rc ) ) ; //<S2SV> safe_write ( fd , err_name , strlen ( err_name ) ) ; //<S2SV> if ( fchown ( fd , ( uid_t ) req -> uid , ( gid_t ) req -> gid ) == - 1 ) { //<S2SV> snprintf ( err_name , sizeof ( err_name ) , //<S2SV> "Couldn\'t<S2SV_blank>change<S2SV_blank>fd<S2SV_blank>owner<S2SV_blank>to<S2SV_blank>%u:%u:<S2SV_blank>%m\\n" , //<S2SV> req -> uid , req -> gid ) ; //<S2SV> } //<S2SV> rwfail : //<S2SV> close ( fd ) ; //<S2SV> } //<S2SV> 