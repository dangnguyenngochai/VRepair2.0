static apr_status_t parse_chunk_size ( http_ctx_t * ctx , const char * buffer , //<S2SV> apr_size_t len , int linelimit ) //<S2SV> { //<S2SV> apr_size_t i = 0 ; //<S2SV> while ( i < len ) { //<S2SV> char c = buffer [ i ] ; //<S2SV> ap_xlate_proto_from_ascii ( & c , 1 ) ; //<S2SV> if ( ctx -> state == BODY_CHUNK_END ) { //<S2SV> if ( c == LF ) { //<S2SV> ctx -> state = BODY_CHUNK ; //<S2SV> } //<S2SV> i ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ctx -> state == BODY_CHUNK ) { //<S2SV> if ( ! apr_isxdigit ( c ) ) { //<S2SV> return APR_EGENERAL ; //<S2SV> } //<S2SV> else { //<S2SV> ctx -> state = BODY_CHUNK_PART ; //<S2SV> } //<S2SV> ctx -> remaining = 0 ; //<S2SV> ctx -> chunkbits = sizeof ( long ) * 8 ; //<S2SV> ctx -> chunk_used = 0 ; //<S2SV> } //<S2SV> if ( c == ';' || c == CR ) { //<S2SV> ctx -> state = BODY_CHUNK_EXT ; //<S2SV> } //<S2SV> else if ( c == LF ) { //<S2SV> if ( ctx -> remaining ) { //<S2SV> ctx -> state = BODY_CHUNK_DATA ; //<S2SV> } //<S2SV> else { //<S2SV> ctx -> state = BODY_CHUNK_TRAILER ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ctx -> state != BODY_CHUNK_EXT ) { //<S2SV> int xvalue = 0 ; //<S2SV> if ( ! ctx -> remaining && c == '0' ) { //<S2SV> i ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( c >= '0' && c <= '9' ) { //<S2SV> xvalue = c - '0' ; //<S2SV> } //<S2SV> else if ( c >= 'A' && c <= 'F' ) { //<S2SV> xvalue = c - 'A' + 0xa ; //<S2SV> } //<S2SV> else if ( c >= 'a' && c <= 'f' ) { //<S2SV> xvalue = c - 'a' + 0xa ; //<S2SV> } //<S2SV> else { //<S2SV> return APR_EGENERAL ; //<S2SV> } //<S2SV> ctx -> remaining = ( ctx -> remaining << 4 ) | xvalue ; //<S2SV> ctx -> chunkbits -= 4 ; //<S2SV> if ( ctx -> chunkbits <= 0 || ctx -> remaining < 0 ) { //<S2SV> return APR_ENOSPC ; //<S2SV> } //<S2SV> } //<S2SV> i ++ ; //<S2SV> } //<S2SV> ctx -> chunk_used += len ; //<S2SV> if ( ctx -> chunk_used < 0 || ctx -> chunk_used > linelimit ) { //<S2SV> return APR_ENOSPC ; //<S2SV> } //<S2SV> return APR_SUCCESS ; //<S2SV> } //<S2SV> 