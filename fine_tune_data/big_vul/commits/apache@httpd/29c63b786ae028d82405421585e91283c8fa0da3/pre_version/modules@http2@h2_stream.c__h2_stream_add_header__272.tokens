apr_status_t h2_stream_add_header ( h2_stream * stream , //<S2SV> const char * name , size_t nlen , //<S2SV> const char * value , size_t vlen ) //<S2SV> { //<S2SV> ap_assert ( stream ) ; //<S2SV> if ( ! stream -> has_response ) { //<S2SV> if ( name [ 0 ] == ':' ) { //<S2SV> if ( ( vlen ) > stream -> session -> s -> limit_req_line ) { //<S2SV> ap_log_cerror ( APLOG_MARK , APLOG_TRACE1 , 0 , stream -> session -> c , //<S2SV> "h2_stream(%ld-%d):<S2SV_blank>pseudo<S2SV_blank>header<S2SV_blank>%s<S2SV_blank>too<S2SV_blank>long" , //<S2SV> stream -> session -> id , stream -> id , name ) ; //<S2SV> return h2_stream_set_error ( stream , //<S2SV> HTTP_REQUEST_URI_TOO_LARGE ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ( nlen + 2 + vlen ) > stream -> session -> s -> limit_req_fieldsize ) { //<S2SV> ap_log_cerror ( APLOG_MARK , APLOG_TRACE1 , 0 , stream -> session -> c , //<S2SV> "h2_stream(%ld-%d):<S2SV_blank>header<S2SV_blank>%s<S2SV_blank>too<S2SV_blank>long" , //<S2SV> stream -> session -> id , stream -> id , name ) ; //<S2SV> return h2_stream_set_error ( stream , //<S2SV> HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE ) ; //<S2SV> } //<S2SV> if ( name [ 0 ] != ':' ) { //<S2SV> ++ stream -> request_headers_added ; //<S2SV> if ( stream -> request_headers_added //<S2SV> > stream -> session -> s -> limit_req_fields ) { //<S2SV> ap_log_cerror ( APLOG_MARK , APLOG_TRACE1 , 0 , stream -> session -> c , //<S2SV> "h2_stream(%ld-%d):<S2SV_blank>too<S2SV_blank>many<S2SV_blank>header<S2SV_blank>lines" , //<S2SV> stream -> session -> id , stream -> id ) ; //<S2SV> return h2_stream_set_error ( stream , //<S2SV> HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( h2_stream_is_scheduled ( stream ) ) { //<S2SV> return add_trailer ( stream , name , nlen , value , vlen ) ; //<S2SV> } //<S2SV> else { //<S2SV> if ( ! stream -> rtmp ) { //<S2SV> stream -> rtmp = h2_req_create ( stream -> id , stream -> pool , //<S2SV> NULL , NULL , NULL , NULL , NULL , 0 ) ; //<S2SV> } //<S2SV> if ( stream -> state != H2_STREAM_ST_OPEN ) { //<S2SV> return APR_ECONNRESET ; //<S2SV> } //<S2SV> return h2_request_add_header ( stream -> rtmp , stream -> pool , //<S2SV> name , nlen , value , vlen ) ; //<S2SV> } //<S2SV> } //<S2SV> 