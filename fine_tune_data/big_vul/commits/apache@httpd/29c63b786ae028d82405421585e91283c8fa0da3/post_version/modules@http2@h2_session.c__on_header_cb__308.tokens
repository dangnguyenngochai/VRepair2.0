static int on_header_cb ( nghttp2_session * ngh2 , const nghttp2_frame * frame , //<S2SV> const uint8_t * name , size_t namelen , //<S2SV> const uint8_t * value , size_t valuelen , //<S2SV> uint8_t flags , //<S2SV> void * userp ) //<S2SV> { //<S2SV> h2_session * session = ( h2_session * ) userp ; //<S2SV> h2_stream * stream ; //<S2SV> apr_status_t status ; //<S2SV> ( void ) flags ; //<S2SV> stream = get_stream ( session , frame -> hd . stream_id ) ; //<S2SV> if ( ! stream ) { //<S2SV> ap_log_cerror ( APLOG_MARK , APLOG_DEBUG , 0 , session -> c , //<S2SV> APLOGNO ( 02920 ) //<S2SV> "h2_session:<S2SV_blank><S2SV_blank>stream(%ld-%d):<S2SV_blank>on_header<S2SV_blank>unknown<S2SV_blank>stream" , //<S2SV> session -> id , ( int ) frame -> hd . stream_id ) ; //<S2SV> return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE ; //<S2SV> } //<S2SV> status = h2_stream_add_header ( stream , ( const char * ) name , namelen , //<S2SV> ( const char * ) value , valuelen ) ; //<S2SV> if ( status == APR_ECONNRESET ) { //<S2SV> ap_log_cerror ( APLOG_MARK , APLOG_TRACE1 , status , session -> c , //<S2SV> "h2-stream(%ld-%d):<S2SV_blank>on_header,<S2SV_blank>reset<S2SV_blank>stream" , //<S2SV> session -> id , stream -> id ) ; //<S2SV> nghttp2_submit_rst_stream ( ngh2 , NGHTTP2_FLAG_NONE , stream -> id , //<S2SV> NGHTTP2_INTERNAL_ERROR ) ; //<S2SV> } //<S2SV> else if ( status != APR_SUCCESS && ! h2_stream_is_ready ( stream ) ) { //<S2SV> return NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 