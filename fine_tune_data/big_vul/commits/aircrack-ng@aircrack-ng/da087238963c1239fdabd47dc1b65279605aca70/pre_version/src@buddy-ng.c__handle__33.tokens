int handle ( int s , unsigned char * data , int len , struct sockaddr_in * s_in ) //<S2SV> { //<S2SV> char buf [ 2048 ] ; //<S2SV> unsigned short * cmd = ( unsigned short * ) buf ; //<S2SV> int plen ; //<S2SV> struct in_addr * addr = & s_in -> sin_addr ; //<S2SV> unsigned short * pid = ( unsigned short * ) data ; //<S2SV> if ( len == S_HELLO_LEN && memcmp ( data , "sorbo" , 5 ) == 0 ) { //<S2SV> unsigned short * id = ( unsigned short * ) ( data + 5 ) ; //<S2SV> int x = 2 + 4 + 2 ; //<S2SV> * cmd = htons ( S_CMD_INET_CHECK ) ; //<S2SV> memcpy ( cmd + 1 , addr , 4 ) ; //<S2SV> memcpy ( cmd + 1 + 2 , id , 2 ) ; //<S2SV> printf ( "Inet<S2SV_blank>check<S2SV_blank>by<S2SV_blank>%s<S2SV_blank>%d\\n" , //<S2SV> inet_ntoa ( * addr ) , ntohs ( * id ) ) ; //<S2SV> if ( send ( s , buf , x , 0 ) != x ) //<S2SV> return 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> * cmd ++ = htons ( S_CMD_PACKET ) ; //<S2SV> * cmd ++ = * pid ; //<S2SV> plen = len - 2 ; //<S2SV> last_id = ntohs ( * pid ) ; //<S2SV> if ( last_id > 20000 ) //<S2SV> wrap = 1 ; //<S2SV> if ( wrap && last_id < 100 ) { //<S2SV> wrap = 0 ; //<S2SV> memset ( ids , 0 , sizeof ( ids ) ) ; //<S2SV> } //<S2SV> printf ( "Got<S2SV_blank>packet<S2SV_blank>%d<S2SV_blank>%d" , last_id , plen ) ; //<S2SV> if ( is_dup ( last_id ) ) { //<S2SV> printf ( "<S2SV_blank>(DUP)\\n" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> printf ( "\\n" ) ; //<S2SV> * cmd ++ = htons ( plen ) ; //<S2SV> memcpy ( cmd , data + 2 , plen ) ; //<S2SV> plen += 2 + 2 + 2 ; //<S2SV> assert ( plen <= ( int ) sizeof ( buf ) ) ; //<S2SV> if ( send ( s , buf , plen , 0 ) != plen ) //<S2SV> return 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 