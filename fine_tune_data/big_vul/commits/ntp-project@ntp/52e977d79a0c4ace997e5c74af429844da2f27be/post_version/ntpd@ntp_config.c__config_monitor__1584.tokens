static void //<S2SV> config_monitor ( //<S2SV> config_tree * ptree //<S2SV> ) //<S2SV> { //<S2SV> int_node * pfilegen_token ; //<S2SV> const char * filegen_string ; //<S2SV> const char * filegen_file ; //<S2SV> FILEGEN * filegen ; //<S2SV> filegen_node * my_node ; //<S2SV> attr_val * my_opts ; //<S2SV> int filegen_type ; //<S2SV> int filegen_flag ; //<S2SV> if ( ptree -> stats_dir ) //<S2SV> stats_config ( STATS_STATSDIR , ptree -> stats_dir ) ; //<S2SV> pfilegen_token = HEAD_PFIFO ( ptree -> stats_list ) ; //<S2SV> for ( ; pfilegen_token != NULL ; pfilegen_token = pfilegen_token -> link ) { //<S2SV> filegen_string = keyword ( pfilegen_token -> i ) ; //<S2SV> filegen = filegen_get ( filegen_string ) ; //<S2SV> if ( NULL == filegen ) { //<S2SV> msyslog ( LOG_ERR , //<S2SV> "stats<S2SV_blank>%s<S2SV_blank>unrecognized" , //<S2SV> filegen_string ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> DPRINTF ( 4 , ( "enabling<S2SV_blank>filegen<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>statistics<S2SV_blank>\'%s%s\'\\n" , //<S2SV> filegen_string , filegen -> prefix , //<S2SV> filegen -> basename ) ) ; //<S2SV> filegen -> flag |= FGEN_FLAG_ENABLED ; //<S2SV> } //<S2SV> my_node = HEAD_PFIFO ( ptree -> filegen_opts ) ; //<S2SV> for ( ; my_node != NULL ; my_node = my_node -> link ) { //<S2SV> filegen_file = keyword ( my_node -> filegen_token ) ; //<S2SV> filegen = filegen_get ( filegen_file ) ; //<S2SV> if ( NULL == filegen ) { //<S2SV> msyslog ( LOG_ERR , //<S2SV> "filegen<S2SV_blank>category<S2SV_blank>\'%s\'<S2SV_blank>unrecognized" , //<S2SV> filegen_file ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> filegen_flag = filegen -> flag ; //<S2SV> filegen_type = filegen -> type ; //<S2SV> filegen_flag |= FGEN_FLAG_ENABLED ; //<S2SV> my_opts = HEAD_PFIFO ( my_node -> options ) ; //<S2SV> for ( ; my_opts != NULL ; my_opts = my_opts -> link ) { //<S2SV> switch ( my_opts -> attr ) { //<S2SV> case T_File : //<S2SV> filegen_file = my_opts -> value . s ; //<S2SV> break ; //<S2SV> case T_Type : //<S2SV> switch ( my_opts -> value . i ) { //<S2SV> default : //<S2SV> NTP_INSIST ( 0 ) ; //<S2SV> break ; //<S2SV> case T_None : //<S2SV> filegen_type = FILEGEN_NONE ; //<S2SV> break ; //<S2SV> case T_Pid : //<S2SV> filegen_type = FILEGEN_PID ; //<S2SV> break ; //<S2SV> case T_Day : //<S2SV> filegen_type = FILEGEN_DAY ; //<S2SV> break ; //<S2SV> case T_Week : //<S2SV> filegen_type = FILEGEN_WEEK ; //<S2SV> break ; //<S2SV> case T_Month : //<S2SV> filegen_type = FILEGEN_MONTH ; //<S2SV> break ; //<S2SV> case T_Year : //<S2SV> filegen_type = FILEGEN_YEAR ; //<S2SV> break ; //<S2SV> case T_Age : //<S2SV> filegen_type = FILEGEN_AGE ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case T_Flag : //<S2SV> switch ( my_opts -> value . i ) { //<S2SV> case T_Link : //<S2SV> filegen_flag |= FGEN_FLAG_LINK ; //<S2SV> break ; //<S2SV> case T_Nolink : //<S2SV> filegen_flag &= ~ FGEN_FLAG_LINK ; //<S2SV> break ; //<S2SV> case T_Enable : //<S2SV> filegen_flag |= FGEN_FLAG_ENABLED ; //<S2SV> break ; //<S2SV> case T_Disable : //<S2SV> filegen_flag &= ~ FGEN_FLAG_ENABLED ; //<S2SV> break ; //<S2SV> default : //<S2SV> msyslog ( LOG_ERR , //<S2SV> "Unknown<S2SV_blank>filegen<S2SV_blank>flag<S2SV_blank>token<S2SV_blank>%d" , //<S2SV> my_opts -> value . i ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> msyslog ( LOG_ERR , //<S2SV> "Unknown<S2SV_blank>filegen<S2SV_blank>option<S2SV_blank>token<S2SV_blank>%d" , //<S2SV> my_opts -> attr ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> filegen_config ( filegen , filegen_file , filegen_type , //<S2SV> filegen_flag ) ; //<S2SV> } //<S2SV> } //<S2SV> 