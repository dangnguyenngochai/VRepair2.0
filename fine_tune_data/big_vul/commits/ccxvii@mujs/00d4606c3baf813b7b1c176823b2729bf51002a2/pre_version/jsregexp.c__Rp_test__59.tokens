static void Rp_test ( js_State * J ) //<S2SV> { //<S2SV> js_Regexp * re ; //<S2SV> const char * text ; //<S2SV> int opts ; //<S2SV> Resub m ; //<S2SV> re = js_toregexp ( J , 0 ) ; //<S2SV> text = js_tostring ( J , 1 ) ; //<S2SV> opts = 0 ; //<S2SV> if ( re -> flags & JS_REGEXP_G ) { //<S2SV> if ( re -> last > strlen ( text ) ) { //<S2SV> re -> last = 0 ; //<S2SV> js_pushboolean ( J , 0 ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( re -> last > 0 ) { //<S2SV> text += re -> last ; //<S2SV> opts |= REG_NOTBOL ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! js_regexec ( re -> prog , text , & m , opts ) ) { //<S2SV> if ( re -> flags & JS_REGEXP_G ) //<S2SV> re -> last = re -> last + ( m . sub [ 0 ] . ep - text ) ; //<S2SV> js_pushboolean ( J , 1 ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( re -> flags & JS_REGEXP_G ) //<S2SV> re -> last = 0 ; //<S2SV> js_pushboolean ( J , 0 ) ; //<S2SV> } //<S2SV> 