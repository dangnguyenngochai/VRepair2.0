static void Sp_replace_regexp ( js_State * J ) //<S2SV> { //<S2SV> js_Regexp * re ; //<S2SV> const char * source , * s , * r ; //<S2SV> js_Buffer * sb = NULL ; //<S2SV> int n , x ; //<S2SV> Resub m ; //<S2SV> source = checkstring ( J , 0 ) ; //<S2SV> re = js_toregexp ( J , 1 ) ; //<S2SV> if ( js_regexec ( re -> prog , source , & m , 0 ) ) { //<S2SV> js_copy ( J , 0 ) ; //<S2SV> return ; //<S2SV> } //<S2SV> re -> last = 0 ; //<S2SV> loop : //<S2SV> s = m . sub [ 0 ] . sp ; //<S2SV> n = m . sub [ 0 ] . ep - m . sub [ 0 ] . sp ; //<S2SV> if ( js_iscallable ( J , 2 ) ) { //<S2SV> js_copy ( J , 2 ) ; //<S2SV> js_pushundefined ( J ) ; //<S2SV> for ( x = 0 ; m . sub [ x ] . sp ; ++ x ) //<S2SV> js_pushlstring ( J , m . sub [ x ] . sp , m . sub [ x ] . ep - m . sub [ x ] . sp ) ; //<S2SV> js_pushnumber ( J , s - source ) ; //<S2SV> js_copy ( J , 0 ) ; //<S2SV> js_call ( J , 2 + x ) ; //<S2SV> r = js_tostring ( J , - 1 ) ; //<S2SV> js_putm ( J , & sb , source , s ) ; //<S2SV> js_puts ( J , & sb , r ) ; //<S2SV> js_pop ( J , 1 ) ; //<S2SV> } else { //<S2SV> r = js_tostring ( J , 2 ) ; //<S2SV> js_putm ( J , & sb , source , s ) ; //<S2SV> while ( * r ) { //<S2SV> if ( * r == '$' ) { //<S2SV> switch ( * ( ++ r ) ) { //<S2SV> case 0 : -- r ; //<S2SV> case '$' : js_putc ( J , & sb , '$' ) ; break ; //<S2SV> case '`' : js_putm ( J , & sb , source , s ) ; break ; //<S2SV> case '\\'' : js_puts ( J , & sb , s + n ) ; break ; //<S2SV> case '&' : //<S2SV> js_putm ( J , & sb , s , s + n ) ; //<S2SV> break ; //<S2SV> case '0' : case '1' : case '2' : case '3' : case '4' : //<S2SV> case '5' : case '6' : case '7' : case '8' : case '9' : //<S2SV> x = * r - '0' ; //<S2SV> if ( r [ 1 ] >= '0' && r [ 1 ] <= '9' ) //<S2SV> x = x * 10 + * ( ++ r ) - '0' ; //<S2SV> if ( x > 0 && x < m . nsub ) { //<S2SV> js_putm ( J , & sb , m . sub [ x ] . sp , m . sub [ x ] . ep ) ; //<S2SV> } else { //<S2SV> js_putc ( J , & sb , '$' ) ; //<S2SV> if ( x > 10 ) { //<S2SV> js_putc ( J , & sb , '0' + x / 10 ) ; //<S2SV> js_putc ( J , & sb , '0' + x % 10 ) ; //<S2SV> } else { //<S2SV> js_putc ( J , & sb , '0' + x ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> js_putc ( J , & sb , '$' ) ; //<S2SV> js_putc ( J , & sb , * r ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ++ r ; //<S2SV> } else { //<S2SV> js_putc ( J , & sb , * r ++ ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( re -> flags & JS_REGEXP_G ) { //<S2SV> source = m . sub [ 0 ] . ep ; //<S2SV> if ( n == 0 ) { //<S2SV> if ( * source ) //<S2SV> js_putc ( J , & sb , * source ++ ) ; //<S2SV> else //<S2SV> goto end ; //<S2SV> } //<S2SV> if ( ! js_regexec ( re -> prog , source , & m , REG_NOTBOL ) ) //<S2SV> goto loop ; //<S2SV> } //<S2SV> end : //<S2SV> js_puts ( J , & sb , s + n ) ; //<S2SV> js_putc ( J , & sb , 0 ) ; //<S2SV> if ( js_try ( J ) ) { //<S2SV> js_free ( J , sb ) ; //<S2SV> js_throw ( J ) ; //<S2SV> } //<S2SV> js_pushstring ( J , sb ? sb -> s : "" ) ; //<S2SV> js_endtry ( J ) ; //<S2SV> js_free ( J , sb ) ; //<S2SV> } //<S2SV> 