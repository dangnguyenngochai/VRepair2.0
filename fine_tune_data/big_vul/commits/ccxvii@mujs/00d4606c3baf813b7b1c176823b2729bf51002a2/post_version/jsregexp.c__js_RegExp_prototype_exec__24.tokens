void js_RegExp_prototype_exec ( js_State * J , js_Regexp * re , const char * text ) //<S2SV> { //<S2SV> int result ; //<S2SV> int i ; //<S2SV> int opts ; //<S2SV> Resub m ; //<S2SV> opts = 0 ; //<S2SV> if ( re -> flags & JS_REGEXP_G ) { //<S2SV> if ( re -> last > strlen ( text ) ) { //<S2SV> re -> last = 0 ; //<S2SV> js_pushnull ( J ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( re -> last > 0 ) { //<S2SV> text += re -> last ; //<S2SV> opts |= REG_NOTBOL ; //<S2SV> } //<S2SV> } //<S2SV> result = js_regexec ( re -> prog , text , & m , opts ) ; //<S2SV> if ( result < 0 ) //<S2SV> js_error ( J , "regexec<S2SV_blank>failed" ) ; //<S2SV> if ( result == 0 ) { //<S2SV> js_newarray ( J ) ; //<S2SV> js_pushstring ( J , text ) ; //<S2SV> js_setproperty ( J , - 2 , "input" ) ; //<S2SV> js_pushnumber ( J , js_utfptrtoidx ( text , m . sub [ 0 ] . sp ) ) ; //<S2SV> js_setproperty ( J , - 2 , "index" ) ; //<S2SV> for ( i = 0 ; i < m . nsub ; ++ i ) { //<S2SV> js_pushlstring ( J , m . sub [ i ] . sp , m . sub [ i ] . ep - m . sub [ i ] . sp ) ; //<S2SV> js_setindex ( J , - 2 , i ) ; //<S2SV> } //<S2SV> if ( re -> flags & JS_REGEXP_G ) //<S2SV> re -> last = re -> last + ( m . sub [ 0 ] . ep - text ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( re -> flags & JS_REGEXP_G ) //<S2SV> re -> last = 0 ; //<S2SV> js_pushnull ( J ) ; //<S2SV> } //<S2SV> 