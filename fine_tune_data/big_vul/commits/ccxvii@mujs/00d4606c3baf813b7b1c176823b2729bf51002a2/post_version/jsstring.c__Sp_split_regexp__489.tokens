static void Sp_split_regexp ( js_State * J ) //<S2SV> { //<S2SV> js_Regexp * re ; //<S2SV> const char * text ; //<S2SV> int limit , len , k ; //<S2SV> const char * p , * a , * b , * c , * e ; //<S2SV> Resub m ; //<S2SV> text = checkstring ( J , 0 ) ; //<S2SV> re = js_toregexp ( J , 1 ) ; //<S2SV> limit = js_isdefined ( J , 2 ) ? js_tointeger ( J , 2 ) : 1 << 30 ; //<S2SV> js_newarray ( J ) ; //<S2SV> len = 0 ; //<S2SV> e = text + strlen ( text ) ; //<S2SV> if ( e == text ) { //<S2SV> if ( js_doregexec ( J , re -> prog , text , & m , 0 ) ) { //<S2SV> if ( len == limit ) return ; //<S2SV> js_pushliteral ( J , "" ) ; //<S2SV> js_setindex ( J , - 2 , 0 ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> p = a = text ; //<S2SV> while ( a < e ) { //<S2SV> if ( js_doregexec ( J , re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) //<S2SV> break ; //<S2SV> b = m . sub [ 0 ] . sp ; //<S2SV> c = m . sub [ 0 ] . ep ; //<S2SV> if ( b == p ) { //<S2SV> ++ a ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( len == limit ) return ; //<S2SV> js_pushlstring ( J , p , b - p ) ; //<S2SV> js_setindex ( J , - 2 , len ++ ) ; //<S2SV> for ( k = 1 ; k < m . nsub ; ++ k ) { //<S2SV> if ( len == limit ) return ; //<S2SV> js_pushlstring ( J , m . sub [ k ] . sp , m . sub [ k ] . ep - m . sub [ k ] . sp ) ; //<S2SV> js_setindex ( J , - 2 , len ++ ) ; //<S2SV> } //<S2SV> a = p = c ; //<S2SV> } //<S2SV> if ( len == limit ) return ; //<S2SV> js_pushstring ( J , p ) ; //<S2SV> js_setindex ( J , - 2 , len ) ; //<S2SV> } //<S2SV> 