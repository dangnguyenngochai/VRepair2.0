static void Sp_match ( js_State * J ) //<S2SV> { //<S2SV> js_Regexp * re ; //<S2SV> const char * text ; //<S2SV> int len ; //<S2SV> const char * a , * b , * c , * e ; //<S2SV> Resub m ; //<S2SV> text = checkstring ( J , 0 ) ; //<S2SV> if ( js_isregexp ( J , 1 ) ) //<S2SV> js_copy ( J , 1 ) ; //<S2SV> else if ( js_isundefined ( J , 1 ) ) //<S2SV> js_newregexp ( J , "" , 0 ) ; //<S2SV> else //<S2SV> js_newregexp ( J , js_tostring ( J , 1 ) , 0 ) ; //<S2SV> re = js_toregexp ( J , - 1 ) ; //<S2SV> if ( ! ( re -> flags & JS_REGEXP_G ) ) { //<S2SV> js_RegExp_prototype_exec ( J , re , text ) ; //<S2SV> return ; //<S2SV> } //<S2SV> re -> last = 0 ; //<S2SV> js_newarray ( J ) ; //<S2SV> len = 0 ; //<S2SV> a = text ; //<S2SV> e = text + strlen ( text ) ; //<S2SV> while ( a <= e ) { //<S2SV> if ( js_doregexec ( J , re -> prog , a , & m , a > text ? REG_NOTBOL : 0 ) ) //<S2SV> break ; //<S2SV> b = m . sub [ 0 ] . sp ; //<S2SV> c = m . sub [ 0 ] . ep ; //<S2SV> js_pushlstring ( J , b , c - b ) ; //<S2SV> js_setindex ( J , - 2 , len ++ ) ; //<S2SV> a = c ; //<S2SV> if ( c - b == 0 ) //<S2SV> ++ a ; //<S2SV> } //<S2SV> if ( len == 0 ) { //<S2SV> js_pop ( J , 1 ) ; //<S2SV> js_pushnull ( J ) ; //<S2SV> } //<S2SV> } //<S2SV> 