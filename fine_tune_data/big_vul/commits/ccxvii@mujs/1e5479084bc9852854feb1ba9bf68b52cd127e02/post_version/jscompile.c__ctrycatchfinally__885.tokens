static void ctrycatchfinally ( JF , js_Ast * trystm , js_Ast * catchvar , js_Ast * catchstm , js_Ast * finallystm ) //<S2SV> { //<S2SV> int L1 , L2 , L3 ; //<S2SV> L1 = emitjump ( J , F , OP_TRY ) ; //<S2SV> { //<S2SV> L2 = emitjump ( J , F , OP_TRY ) ; //<S2SV> { //<S2SV> cstm ( J , F , finallystm ) ; //<S2SV> emit ( J , F , OP_THROW ) ; //<S2SV> } //<S2SV> label ( J , F , L2 ) ; //<S2SV> if ( F -> strict ) { //<S2SV> checkfutureword ( J , F , catchvar ) ; //<S2SV> if ( ! strcmp ( catchvar -> string , "arguments" ) ) //<S2SV> jsC_error ( J , catchvar , "redefining<S2SV_blank>\'arguments\'<S2SV_blank>is<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>strict<S2SV_blank>mode" ) ; //<S2SV> if ( ! strcmp ( catchvar -> string , "eval" ) ) //<S2SV> jsC_error ( J , catchvar , "redefining<S2SV_blank>\'eval\'<S2SV_blank>is<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>strict<S2SV_blank>mode" ) ; //<S2SV> } //<S2SV> emitline ( J , F , catchvar ) ; //<S2SV> emitstring ( J , F , OP_CATCH , catchvar -> string ) ; //<S2SV> cstm ( J , F , catchstm ) ; //<S2SV> emit ( J , F , OP_ENDCATCH ) ; //<S2SV> emit ( J , F , OP_ENDTRY ) ; //<S2SV> L3 = emitjump ( J , F , OP_JUMP ) ; //<S2SV> } //<S2SV> label ( J , F , L1 ) ; //<S2SV> cstm ( J , F , trystm ) ; //<S2SV> emit ( J , F , OP_ENDTRY ) ; //<S2SV> label ( J , F , L3 ) ; //<S2SV> cstm ( J , F , finallystm ) ; //<S2SV> } //<S2SV> 