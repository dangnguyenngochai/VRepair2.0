static void Np_toString ( js_State * J ) //<S2SV> { //<S2SV> char buf [ 32 ] ; //<S2SV> js_Object * self = js_toobject ( J , 0 ) ; //<S2SV> int radix = js_isundefined ( J , 1 ) ? 10 : js_tointeger ( J , 1 ) ; //<S2SV> if ( self -> type != JS_CNUMBER ) //<S2SV> js_typeerror ( J , "not<S2SV_blank>a<S2SV_blank>number" ) ; //<S2SV> if ( radix == 10 ) { //<S2SV> js_pushstring ( J , jsV_numbertostring ( J , buf , self -> u . number ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( radix < 2 || radix > 36 ) //<S2SV> js_rangeerror ( J , "invalid<S2SV_blank>radix" ) ; //<S2SV> { //<S2SV> static const char digits [ ] = "0123456789abcdefghijklmnopqrstuvwxyz" ; //<S2SV> char buf [ 100 ] ; //<S2SV> double number = self -> u . number ; //<S2SV> int sign = self -> u . number < 0 ; //<S2SV> js_Buffer * sb = NULL ; //<S2SV> uint64_t u , limit = ( ( uint64_t ) 1 << 52 ) ; //<S2SV> int ndigits , exp , point ; //<S2SV> if ( number == 0 ) { js_pushstring ( J , "0" ) ; return ; } //<S2SV> if ( isnan ( number ) ) { js_pushstring ( J , "NaN" ) ; return ; } //<S2SV> if ( isinf ( number ) ) { js_pushstring ( J , sign ? "-Infinity" : "Infinity" ) ; return ; } //<S2SV> if ( sign ) //<S2SV> number = - number ; //<S2SV> exp = 0 ; //<S2SV> while ( number * pow ( radix , exp ) > limit ) //<S2SV> -- exp ; //<S2SV> while ( number * pow ( radix , exp + 1 ) < limit ) //<S2SV> ++ exp ; //<S2SV> u = number * pow ( radix , exp ) + 0.5 ; //<S2SV> while ( u > 0 && ( u % radix ) == 0 ) { //<S2SV> u /= radix ; //<S2SV> -- exp ; //<S2SV> } //<S2SV> ndigits = 0 ; //<S2SV> while ( u > 0 ) { //<S2SV> buf [ ndigits ++ ] = digits [ u % radix ] ; //<S2SV> u /= radix ; //<S2SV> } //<S2SV> point = ndigits - exp ; //<S2SV> if ( js_try ( J ) ) { //<S2SV> js_free ( J , sb ) ; //<S2SV> js_throw ( J ) ; //<S2SV> } //<S2SV> if ( sign ) //<S2SV> js_putc ( J , & sb , '-' ) ; //<S2SV> if ( point <= 0 ) { //<S2SV> js_putc ( J , & sb , '0' ) ; //<S2SV> js_putc ( J , & sb , '.' ) ; //<S2SV> while ( point ++ < 0 ) //<S2SV> js_putc ( J , & sb , '0' ) ; //<S2SV> while ( ndigits -- > 0 ) //<S2SV> js_putc ( J , & sb , buf [ ndigits ] ) ; //<S2SV> } else { //<S2SV> while ( ndigits -- > 0 ) { //<S2SV> js_putc ( J , & sb , buf [ ndigits ] ) ; //<S2SV> if ( -- point == 0 && ndigits > 0 ) //<S2SV> js_putc ( J , & sb , '.' ) ; //<S2SV> } //<S2SV> while ( point -- > 0 ) //<S2SV> js_putc ( J , & sb , '0' ) ; //<S2SV> } //<S2SV> js_putc ( J , & sb , 0 ) ; //<S2SV> js_pushstring ( J , sb -> s ) ; //<S2SV> js_endtry ( J ) ; //<S2SV> js_free ( J , sb ) ; //<S2SV> } //<S2SV> } //<S2SV> 