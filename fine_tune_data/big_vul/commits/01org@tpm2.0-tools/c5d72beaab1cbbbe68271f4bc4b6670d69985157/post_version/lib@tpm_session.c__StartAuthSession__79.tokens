static TPM_RC StartAuthSession ( TSS2_SYS_CONTEXT * sapi_context , SESSION * session ) //<S2SV> { //<S2SV> TPM_RC rval ; //<S2SV> TPM2B_ENCRYPTED_SECRET key ; //<S2SV> char label [ ] = "ATH" ; //<S2SV> UINT16 bytes ; //<S2SV> int i ; //<S2SV> key . t . size = 0 ; //<S2SV> if ( session -> nonceOlder . t . size == 0 ) //<S2SV> { //<S2SV> session -> nonceOlder . t . size = GetDigestSize ( TPM_ALG_SHA1 ) ; //<S2SV> for ( i = 0 ; i < session -> nonceOlder . t . size ; i ++ ) //<S2SV> session -> nonceOlder . t . buffer [ i ] = 0 ; //<S2SV> } //<S2SV> session -> nonceNewer . t . size = session -> nonceOlder . t . size ; //<S2SV> rval = Tss2_Sys_StartAuthSession ( sapi_context , session -> tpmKey , session -> bind , 0 , //<S2SV> & ( session -> nonceOlder ) , & ( session -> encryptedSalt ) , session -> sessionType , //<S2SV> & ( session -> symmetric ) , session -> authHash , & ( session -> sessionHandle ) , //<S2SV> & ( session -> nonceNewer ) , 0 ) ; //<S2SV> if ( rval == TPM_RC_SUCCESS ) //<S2SV> { //<S2SV> if ( session -> tpmKey == TPM_RH_NULL ) //<S2SV> session -> salt . t . size = 0 ; //<S2SV> if ( session -> bind == TPM_RH_NULL ) //<S2SV> session -> authValueBind . t . size = 0 ; //<S2SV> if ( session -> tpmKey == TPM_RH_NULL && session -> bind == TPM_RH_NULL ) //<S2SV> { //<S2SV> session -> sessionKey . b . size = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> bool result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key , & ( session -> authValueBind . b ) ) ; //<S2SV> if ( ! result ) //<S2SV> { //<S2SV> return TSS2_SYS_RC_BAD_VALUE ; //<S2SV> } //<S2SV> result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key , & ( session -> salt . b ) ) ; //<S2SV> if ( ! result ) //<S2SV> { //<S2SV> return TSS2_SYS_RC_BAD_VALUE ; //<S2SV> } //<S2SV> bytes = GetDigestSize ( session -> authHash ) ; //<S2SV> if ( key . t . size == 0 ) //<S2SV> { //<S2SV> session -> sessionKey . t . size = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> rval = tpm_kdfa ( session -> authHash , & ( key . b ) , label , & ( session -> nonceNewer . b ) , //<S2SV> & ( session -> nonceOlder . b ) , bytes * 8 , ( TPM2B_MAX_BUFFER * ) & ( session -> sessionKey ) ) ; //<S2SV> } //<S2SV> if ( rval != TPM_RC_SUCCESS ) //<S2SV> { //<S2SV> return ( TSS2_APP_RC_CREATE_SESSION_KEY_FAILED ) ; //<S2SV> } //<S2SV> } //<S2SV> session -> nonceTpmDecrypt . b . size = 0 ; //<S2SV> session -> nonceTpmEncrypt . b . size = 0 ; //<S2SV> session -> nvNameChanged = 0 ; //<S2SV> } //<S2SV> return rval ; //<S2SV> } //<S2SV> 