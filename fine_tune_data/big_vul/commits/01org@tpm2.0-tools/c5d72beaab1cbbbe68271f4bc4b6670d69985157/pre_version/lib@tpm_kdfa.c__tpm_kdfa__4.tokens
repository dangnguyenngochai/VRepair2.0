TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context , TPMI_ALG_HASH hashAlg , //<S2SV> TPM2B * key , char * label , TPM2B * contextU , TPM2B * contextV , UINT16 bits , //<S2SV> TPM2B_MAX_BUFFER * resultKey ) //<S2SV> { //<S2SV> TPM2B_DIGEST tmpResult ; //<S2SV> TPM2B_DIGEST tpm2bLabel , tpm2bBits , tpm2b_i_2 ; //<S2SV> UINT8 * tpm2bBitsPtr = & tpm2bBits . t . buffer [ 0 ] ; //<S2SV> UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2 . t . buffer [ 0 ] ; //<S2SV> TPM2B_DIGEST * bufferList [ 8 ] ; //<S2SV> UINT32 bitsSwizzled , i_Swizzled ; //<S2SV> TPM_RC rval ; //<S2SV> int i , j ; //<S2SV> UINT16 bytes = bits / 8 ; //<S2SV> resultKey -> t . size = 0 ; //<S2SV> tpm2b_i_2 . t . size = 4 ; //<S2SV> tpm2bBits . t . size = 4 ; //<S2SV> bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; //<S2SV> * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; //<S2SV> for ( i = 0 ; label [ i ] != 0 ; i ++ ) ; //<S2SV> tpm2bLabel . t . size = i + 1 ; //<S2SV> for ( i = 0 ; i < tpm2bLabel . t . size ; i ++ ) //<S2SV> { //<S2SV> tpm2bLabel . t . buffer [ i ] = label [ i ] ; //<S2SV> } //<S2SV> resultKey -> t . size = 0 ; //<S2SV> i = 1 ; //<S2SV> while ( resultKey -> t . size < bytes ) //<S2SV> { //<S2SV> i_Swizzled = string_bytes_endian_convert_32 ( i ) ; //<S2SV> * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; //<S2SV> j = 0 ; //<S2SV> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2b_i_2 . b ) ; //<S2SV> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bLabel . b ) ; //<S2SV> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) contextU ; //<S2SV> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) contextV ; //<S2SV> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) & ( tpm2bBits . b ) ; //<S2SV> bufferList [ j ++ ] = ( TPM2B_DIGEST * ) 0 ; //<S2SV> rval = tpm_hmac ( sapi_context , hashAlg , key , ( TPM2B * * ) & ( bufferList [ 0 ] ) , & tmpResult ) ; //<S2SV> if ( rval != TPM_RC_SUCCESS ) //<S2SV> { //<S2SV> return ( rval ) ; //<S2SV> } //<S2SV> bool res = string_bytes_concat_buffer ( resultKey , & ( tmpResult . b ) ) ; //<S2SV> if ( ! res ) { //<S2SV> return TSS2_SYS_RC_BAD_VALUE ; //<S2SV> } //<S2SV> } //<S2SV> resultKey -> t . size = bytes ; //<S2SV> return TPM_RC_SUCCESS ; //<S2SV> } //<S2SV> 