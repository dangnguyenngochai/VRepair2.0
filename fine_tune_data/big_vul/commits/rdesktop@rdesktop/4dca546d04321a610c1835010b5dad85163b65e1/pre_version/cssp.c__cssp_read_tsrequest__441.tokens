RD_BOOL //<S2SV> cssp_read_tsrequest ( STREAM token , STREAM pubkey ) //<S2SV> { //<S2SV> STREAM s ; //<S2SV> int length ; //<S2SV> int tagval ; //<S2SV> s = tcp_recv ( NULL , 4 ) ; //<S2SV> if ( s == NULL ) //<S2SV> return False ; //<S2SV> if ( s -> p [ 0 ] != ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) //<S2SV> { //<S2SV> logger ( Protocol , Error , //<S2SV> "cssp_read_tsrequest(),<S2SV_blank>expected<S2SV_blank>BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED,<S2SV_blank>got<S2SV_blank>%x" , //<S2SV> s -> p [ 0 ] ) ; //<S2SV> return False ; //<S2SV> } //<S2SV> if ( s -> p [ 1 ] < 0x80 ) //<S2SV> length = s -> p [ 1 ] - 2 ; //<S2SV> else if ( s -> p [ 1 ] == 0x81 ) //<S2SV> length = s -> p [ 2 ] - 1 ; //<S2SV> else if ( s -> p [ 1 ] == 0x82 ) //<S2SV> length = ( s -> p [ 2 ] << 8 ) | s -> p [ 3 ] ; //<S2SV> else //<S2SV> return False ; //<S2SV> s = tcp_recv ( s , length ) ; //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) || //<S2SV> tagval != ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) //<S2SV> return False ; //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) || //<S2SV> tagval != ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) //<S2SV> return False ; //<S2SV> in_uint8s ( s , length ) ; //<S2SV> if ( token ) //<S2SV> { //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) //<S2SV> || tagval != ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 1 ) ) //<S2SV> return False ; //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) //<S2SV> || tagval != ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) //<S2SV> return False ; //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) //<S2SV> || tagval != ( BER_TAG_SEQUENCE | BER_TAG_CONSTRUCTED ) ) //<S2SV> return False ; //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) //<S2SV> || tagval != ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 0 ) ) //<S2SV> return False ; //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) || tagval != BER_TAG_OCTET_STRING ) //<S2SV> return False ; //<S2SV> token -> end = token -> p = token -> data ; //<S2SV> out_uint8p ( token , s -> p , length ) ; //<S2SV> s_mark_end ( token ) ; //<S2SV> } //<S2SV> if ( pubkey ) //<S2SV> { //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) //<S2SV> || tagval != ( BER_TAG_CTXT_SPECIFIC | BER_TAG_CONSTRUCTED | 3 ) ) //<S2SV> return False ; //<S2SV> if ( ! ber_in_header ( s , & tagval , & length ) || tagval != BER_TAG_OCTET_STRING ) //<S2SV> return False ; //<S2SV> pubkey -> data = pubkey -> p = s -> p ; //<S2SV> pubkey -> end = pubkey -> data + length ; //<S2SV> pubkey -> size = length ; //<S2SV> } //<S2SV> return True ; //<S2SV> } //<S2SV> 