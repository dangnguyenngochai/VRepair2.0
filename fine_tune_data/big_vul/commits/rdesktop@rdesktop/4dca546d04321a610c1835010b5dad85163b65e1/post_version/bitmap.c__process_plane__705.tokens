static int //<S2SV> process_plane ( uint8 * in , int width , int height , uint8 * out , int size ) //<S2SV> { //<S2SV> UNUSED ( size ) ; //<S2SV> int indexw ; //<S2SV> int indexh ; //<S2SV> int code ; //<S2SV> int collen ; //<S2SV> int replen ; //<S2SV> int color ; //<S2SV> int x ; //<S2SV> int revcode ; //<S2SV> uint8 * last_line ; //<S2SV> uint8 * this_line ; //<S2SV> uint8 * org_in ; //<S2SV> uint8 * org_out ; //<S2SV> org_in = in ; //<S2SV> org_out = out ; //<S2SV> last_line = 0 ; //<S2SV> indexh = 0 ; //<S2SV> while ( indexh < height ) //<S2SV> { //<S2SV> out = ( org_out + width * height * 4 ) - ( ( indexh + 1 ) * width * 4 ) ; //<S2SV> color = 0 ; //<S2SV> this_line = out ; //<S2SV> indexw = 0 ; //<S2SV> if ( last_line == 0 ) //<S2SV> { //<S2SV> while ( indexw < width ) //<S2SV> { //<S2SV> code = CVAL ( in ) ; //<S2SV> replen = code & 0xf ; //<S2SV> collen = ( code >> 4 ) & 0xf ; //<S2SV> revcode = ( replen << 4 ) | collen ; //<S2SV> if ( ( revcode <= 47 ) && ( revcode >= 16 ) ) //<S2SV> { //<S2SV> replen = revcode ; //<S2SV> collen = 0 ; //<S2SV> } //<S2SV> while ( indexw < width && collen > 0 ) //<S2SV> { //<S2SV> color = CVAL ( in ) ; //<S2SV> * out = color ; //<S2SV> out += 4 ; //<S2SV> indexw ++ ; //<S2SV> collen -- ; //<S2SV> } //<S2SV> while ( indexw < width && replen > 0 ) //<S2SV> { //<S2SV> * out = color ; //<S2SV> out += 4 ; //<S2SV> indexw ++ ; //<S2SV> replen -- ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> while ( indexw < width ) //<S2SV> { //<S2SV> code = CVAL ( in ) ; //<S2SV> replen = code & 0xf ; //<S2SV> collen = ( code >> 4 ) & 0xf ; //<S2SV> revcode = ( replen << 4 ) | collen ; //<S2SV> if ( ( revcode <= 47 ) && ( revcode >= 16 ) ) //<S2SV> { //<S2SV> replen = revcode ; //<S2SV> collen = 0 ; //<S2SV> } //<S2SV> while ( indexw < width && collen > 0 ) //<S2SV> { //<S2SV> x = CVAL ( in ) ; //<S2SV> if ( x & 1 ) //<S2SV> { //<S2SV> x = x >> 1 ; //<S2SV> x = x + 1 ; //<S2SV> color = - x ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> x = x >> 1 ; //<S2SV> color = x ; //<S2SV> } //<S2SV> x = last_line [ indexw * 4 ] + color ; //<S2SV> * out = x ; //<S2SV> out += 4 ; //<S2SV> indexw ++ ; //<S2SV> collen -- ; //<S2SV> } //<S2SV> while ( indexw < width && replen > 0 ) //<S2SV> { //<S2SV> x = last_line [ indexw * 4 ] + color ; //<S2SV> * out = x ; //<S2SV> out += 4 ; //<S2SV> indexw ++ ; //<S2SV> replen -- ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> indexh ++ ; //<S2SV> last_line = this_line ; //<S2SV> } //<S2SV> return ( int ) ( in - org_in ) ; //<S2SV> } //<S2SV> 