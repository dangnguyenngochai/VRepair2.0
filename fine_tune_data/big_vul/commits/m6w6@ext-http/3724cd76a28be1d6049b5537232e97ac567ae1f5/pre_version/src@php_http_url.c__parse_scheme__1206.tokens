static const char * parse_scheme ( struct parse_state * state ) //<S2SV> { //<S2SV> size_t mb ; //<S2SV> const char * tmp = state -> ptr ; //<S2SV> do { //<S2SV> switch ( * state -> ptr ) { //<S2SV> case ':' : //<S2SV> state -> url . scheme = & state -> buffer [ 0 ] ; //<S2SV> state -> buffer [ state -> offset ++ ] = 0 ; //<S2SV> return ++ state -> ptr ; //<S2SV> case '0' : case '1' : case '2' : case '3' : case '4' : case '5' : case '6' : //<S2SV> case '7' : case '8' : case '9' : //<S2SV> case '+' : case '-' : case '.' : //<S2SV> if ( state -> ptr == tmp ) { //<S2SV> return tmp ; //<S2SV> } //<S2SV> case 'A' : case 'B' : case 'C' : case 'D' : case 'E' : case 'F' : case 'G' : //<S2SV> case 'H' : case 'I' : case 'J' : case 'K' : case 'L' : case 'M' : case 'N' : //<S2SV> case 'O' : case 'P' : case 'Q' : case 'R' : case 'S' : case 'T' : case 'U' : //<S2SV> case 'V' : case 'W' : case 'X' : case 'Y' : case 'Z' : //<S2SV> case 'a' : case 'b' : case 'c' : case 'd' : case 'e' : case 'f' : case 'g' : //<S2SV> case 'h' : case 'i' : case 'j' : case 'k' : case 'l' : case 'm' : case 'n' : //<S2SV> case 'o' : case 'p' : case 'q' : case 'r' : case 's' : case 't' : case 'u' : //<S2SV> case 'v' : case 'w' : case 'x' : case 'y' : case 'z' : //<S2SV> state -> buffer [ state -> offset ++ ] = * state -> ptr ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ! ( mb = parse_mb ( state , PARSE_SCHEME , state -> ptr , state -> end , tmp , 1 ) ) ) { //<S2SV> return tmp ; //<S2SV> } //<S2SV> state -> ptr += mb - 1 ; //<S2SV> } //<S2SV> } while ( ++ state -> ptr != state -> end ) ; //<S2SV> return state -> ptr = tmp ; //<S2SV> } //<S2SV> 