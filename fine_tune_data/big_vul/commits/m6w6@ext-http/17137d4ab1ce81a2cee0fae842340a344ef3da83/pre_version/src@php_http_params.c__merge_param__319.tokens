static void merge_param ( HashTable * params , zval * zdata , zval * * * current_param , zval * * * current_args TSRMLS_DC ) //<S2SV> { //<S2SV> zval * * ptr , * * zdata_ptr ; //<S2SV> php_http_array_hashkey_t hkey = php_http_array_hashkey_init ( 0 ) ; //<S2SV> # if 0 //<S2SV> { //<S2SV> zval tmp ; //<S2SV> INIT_PZVAL_ARRAY ( & tmp , params ) ; //<S2SV> fprintf ( stderr , "params<S2SV_blank>=<S2SV_blank>" ) ; //<S2SV> zend_print_zval_r ( & tmp , 1 TSRMLS_CC ) ; //<S2SV> fprintf ( stderr , "\\n" ) ; //<S2SV> } //<S2SV> # endif //<S2SV> hkey . type = zend_hash_get_current_key_ex ( Z_ARRVAL_P ( zdata ) , & hkey . str , & hkey . len , & hkey . num , hkey . dup , NULL ) ; //<S2SV> if ( ( hkey . type == HASH_KEY_IS_STRING && ! zend_hash_exists ( params , hkey . str , hkey . len ) ) //<S2SV> || ( hkey . type == HASH_KEY_IS_LONG && ! zend_hash_index_exists ( params , hkey . num ) ) //<S2SV> ) { //<S2SV> zval * tmp , * arg , * * args ; //<S2SV> zend_hash_get_current_data ( Z_ARRVAL_P ( zdata ) , ( void * ) & ptr ) ; //<S2SV> Z_ADDREF_PP ( ptr ) ; //<S2SV> MAKE_STD_ZVAL ( tmp ) ; //<S2SV> array_init ( tmp ) ; //<S2SV> add_assoc_zval_ex ( tmp , ZEND_STRS ( "value" ) , * ptr ) ; //<S2SV> MAKE_STD_ZVAL ( arg ) ; //<S2SV> array_init ( arg ) ; //<S2SV> zend_hash_update ( Z_ARRVAL_P ( tmp ) , "arguments" , sizeof ( "arguments" ) , ( void * ) & arg , sizeof ( zval * ) , ( void * ) & args ) ; //<S2SV> * current_args = args ; //<S2SV> if ( hkey . type == HASH_KEY_IS_STRING ) { //<S2SV> zend_hash_update ( params , hkey . str , hkey . len , ( void * ) & tmp , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> } else { //<S2SV> zend_hash_index_update ( params , hkey . num , ( void * ) & tmp , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( hkey . type == HASH_KEY_IS_STRING ) { //<S2SV> zend_hash_find ( params , hkey . str , hkey . len , ( void * ) & ptr ) ; //<S2SV> } else { //<S2SV> zend_hash_index_find ( params , hkey . num , ( void * ) & ptr ) ; //<S2SV> } //<S2SV> zdata_ptr = & zdata ; //<S2SV> if ( Z_TYPE_PP ( ptr ) == IS_ARRAY //<S2SV> && SUCCESS == zend_hash_find ( Z_ARRVAL_PP ( ptr ) , "value" , sizeof ( "value" ) , ( void * ) & ptr ) //<S2SV> && SUCCESS == zend_hash_get_current_data ( Z_ARRVAL_PP ( zdata_ptr ) , ( void * ) & zdata_ptr ) //<S2SV> ) { //<S2SV> zval * * test_ptr ; //<S2SV> while ( Z_TYPE_PP ( zdata_ptr ) == IS_ARRAY //<S2SV> && SUCCESS == zend_hash_get_current_data ( Z_ARRVAL_PP ( zdata_ptr ) , ( void * ) & test_ptr ) //<S2SV> ) { //<S2SV> if ( Z_TYPE_PP ( test_ptr ) == IS_ARRAY ) { //<S2SV> if ( HASH_KEY_IS_STRING == zend_hash_get_current_key_ex ( Z_ARRVAL_PP ( zdata_ptr ) , & hkey . str , & hkey . len , & hkey . num , hkey . dup , NULL ) ) { //<S2SV> if ( SUCCESS == zend_hash_find ( Z_ARRVAL_PP ( ptr ) , hkey . str , hkey . len , ( void * ) & ptr ) ) { //<S2SV> zdata_ptr = test_ptr ; //<S2SV> } else { //<S2SV> Z_ADDREF_PP ( test_ptr ) ; //<S2SV> zend_hash_update ( Z_ARRVAL_PP ( ptr ) , hkey . str , hkey . len , ( void * ) test_ptr , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( SUCCESS == zend_hash_index_find ( Z_ARRVAL_PP ( ptr ) , hkey . num , ( void * ) & ptr ) ) { //<S2SV> zdata_ptr = test_ptr ; //<S2SV> } else if ( hkey . num ) { //<S2SV> Z_ADDREF_PP ( test_ptr ) ; //<S2SV> zend_hash_index_update ( Z_ARRVAL_PP ( ptr ) , hkey . num , ( void * ) test_ptr , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> break ; //<S2SV> } else { //<S2SV> Z_ADDREF_PP ( test_ptr ) ; //<S2SV> zend_hash_next_index_insert ( Z_ARRVAL_PP ( ptr ) , ( void * ) test_ptr , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> Z_ADDREF_PP ( test_ptr ) ; //<S2SV> if ( Z_TYPE_PP ( ptr ) != IS_ARRAY ) { //<S2SV> zval_dtor ( * ptr ) ; //<S2SV> array_init ( * ptr ) ; //<S2SV> } //<S2SV> if ( HASH_KEY_IS_STRING == zend_hash_get_current_key_ex ( Z_ARRVAL_PP ( zdata_ptr ) , & hkey . str , & hkey . len , & hkey . num , hkey . dup , NULL ) ) { //<S2SV> zend_hash_update ( Z_ARRVAL_PP ( ptr ) , hkey . str , hkey . len , ( void * ) test_ptr , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> } else if ( hkey . num ) { //<S2SV> zend_hash_index_update ( Z_ARRVAL_PP ( ptr ) , hkey . num , ( void * ) test_ptr , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> } else { //<S2SV> zend_hash_next_index_insert ( Z_ARRVAL_PP ( ptr ) , ( void * ) test_ptr , sizeof ( zval * ) , ( void * ) & ptr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> while ( Z_TYPE_PP ( ptr ) == IS_ARRAY && SUCCESS == zend_hash_get_current_data ( Z_ARRVAL_PP ( ptr ) , ( void * ) & ptr ) ) ; //<S2SV> * current_param = ptr ; //<S2SV> } //<S2SV> 