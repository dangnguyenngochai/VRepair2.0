int m_authenticate ( struct Client * cptr , struct Client * sptr , int parc , char * parv [ ] ) //<S2SV> { //<S2SV> struct Client * acptr ; //<S2SV> int first = 0 ; //<S2SV> char realhost [ HOSTLEN + 3 ] ; //<S2SV> char * hoststr = ( cli_sockhost ( cptr ) ? cli_sockhost ( cptr ) : cli_sock_ip ( cptr ) ) ; //<S2SV> if ( ! CapActive ( cptr , CAP_SASL ) ) //<S2SV> return 0 ; //<S2SV> if ( parc < 2 ) //<S2SV> return need_more_params ( cptr , "AUTHENTICATE" ) ; //<S2SV> if ( strlen ( parv [ 1 ] ) > 400 ) //<S2SV> return send_reply ( cptr , ERR_SASLTOOLONG ) ; //<S2SV> if ( IsSASLComplete ( cptr ) ) //<S2SV> return send_reply ( cptr , ERR_SASLALREADY ) ; //<S2SV> if ( ! ( acptr = cli_saslagent ( cptr ) ) ) { //<S2SV> if ( strcmp ( feature_str ( FEAT_SASL_SERVER ) , "*" ) ) //<S2SV> acptr = find_match_server ( ( char * ) feature_str ( FEAT_SASL_SERVER ) ) ; //<S2SV> else //<S2SV> acptr = NULL ; //<S2SV> } //<S2SV> if ( ! acptr && strcmp ( feature_str ( FEAT_SASL_SERVER ) , "*" ) ) //<S2SV> return send_reply ( cptr , ERR_SASLFAIL , ":<S2SV_blank>service<S2SV_blank>unavailable" ) ; //<S2SV> if ( acptr && IsMe ( acptr ) ) //<S2SV> return 0 ; //<S2SV> if ( ! cli_saslcookie ( cptr ) ) { //<S2SV> do { //<S2SV> cli_saslcookie ( cptr ) = ircrandom ( ) & 0x7fffffff ; //<S2SV> } while ( ! cli_saslcookie ( cptr ) ) ; //<S2SV> first = 1 ; //<S2SV> } //<S2SV> if ( strchr ( hoststr , ':' ) != NULL ) //<S2SV> ircd_snprintf ( 0 , realhost , sizeof ( realhost ) , "[%s]" , hoststr ) ; //<S2SV> else //<S2SV> ircd_strncpy ( realhost , hoststr , sizeof ( realhost ) ) ; //<S2SV> if ( acptr ) { //<S2SV> if ( first ) { //<S2SV> if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) //<S2SV> return exit_client ( cptr , sptr , sptr , "Malformed<S2SV_blank>AUTHENTICATE" ) ; //<S2SV> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) //<S2SV> sendcmdto_one ( & me , CMD_SASL , acptr , "%C<S2SV_blank>%C!%u.%u<S2SV_blank>S<S2SV_blank>%s<S2SV_blank>:%s" , acptr , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , //<S2SV> parv [ 1 ] , cli_sslclifp ( cptr ) ) ; //<S2SV> else //<S2SV> sendcmdto_one ( & me , CMD_SASL , acptr , "%C<S2SV_blank>%C!%u.%u<S2SV_blank>S<S2SV_blank>:%s" , acptr , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , parv [ 1 ] ) ; //<S2SV> if ( feature_bool ( FEAT_SASL_SENDHOST ) ) //<S2SV> sendcmdto_one ( & me , CMD_SASL , acptr , "%C<S2SV_blank>%C!%u.%u<S2SV_blank>H<S2SV_blank>:%s@%s:%s" , acptr , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , cli_username ( cptr ) , //<S2SV> realhost , cli_sock_ip ( cptr ) ) ; //<S2SV> } else { //<S2SV> sendcmdto_one ( & me , CMD_SASL , acptr , "%C<S2SV_blank>%C!%u.%u<S2SV_blank>C<S2SV_blank>:%s" , acptr , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , parv [ 1 ] ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( first ) { //<S2SV> if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) //<S2SV> return exit_client ( cptr , sptr , sptr , "Malformed<S2SV_blank>AUTHENTICATE" ) ; //<S2SV> if ( ! EmptyString ( cli_sslclifp ( cptr ) ) ) //<S2SV> sendcmdto_serv_butone ( & me , CMD_SASL , cptr , "*<S2SV_blank>%C!%u.%u<S2SV_blank>S<S2SV_blank>%s<S2SV_blank>:%s" , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , //<S2SV> parv [ 1 ] , cli_sslclifp ( cptr ) ) ; //<S2SV> else //<S2SV> sendcmdto_serv_butone ( & me , CMD_SASL , cptr , "*<S2SV_blank>%C!%u.%u<S2SV_blank>S<S2SV_blank>:%s" , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , parv [ 1 ] ) ; //<S2SV> if ( feature_bool ( FEAT_SASL_SENDHOST ) ) //<S2SV> sendcmdto_serv_butone ( & me , CMD_SASL , cptr , "*<S2SV_blank>%C!%u.%u<S2SV_blank>H<S2SV_blank>:%s@%s:%s" , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , cli_username ( cptr ) , //<S2SV> realhost , cli_sock_ip ( cptr ) ) ; //<S2SV> } else { //<S2SV> sendcmdto_serv_butone ( & me , CMD_SASL , cptr , "*<S2SV_blank>%C!%u.%u<S2SV_blank>C<S2SV_blank>:%s" , & me , //<S2SV> cli_fd ( cptr ) , cli_saslcookie ( cptr ) , parv [ 1 ] ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! t_active ( & cli_sasltimeout ( cptr ) ) ) //<S2SV> timer_add ( timer_init ( & cli_sasltimeout ( cptr ) ) , sasl_timeout_callback , ( void * ) cptr , //<S2SV> TT_RELATIVE , feature_int ( FEAT_SASL_TIMEOUT ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 