int _mkp_stage_30 ( struct plugin * p , //<S2SV> struct client_session * cs , //<S2SV> struct session_request * sr ) //<S2SV> { //<S2SV> mk_ptr_t referer ; //<S2SV> ( void ) p ; //<S2SV> ( void ) cs ; //<S2SV> PLUGIN_TRACE ( "[FD<S2SV_blank>%i]<S2SV_blank>Mandril<S2SV_blank>validating<S2SV_blank>URL" , cs -> socket ) ; //<S2SV> if ( mk_security_check_url ( sr -> uri_processed ) < 0 ) { //<S2SV> PLUGIN_TRACE ( "[FD<S2SV_blank>%i]<S2SV_blank>Close<S2SV_blank>connection,<S2SV_blank>blocked<S2SV_blank>URL" , cs -> socket ) ; //<S2SV> mk_api -> header_set_http_status ( sr , MK_CLIENT_FORBIDDEN ) ; //<S2SV> return MK_PLUGIN_RET_CLOSE_CONX ; //<S2SV> } //<S2SV> PLUGIN_TRACE ( "[FD<S2SV_blank>%d]<S2SV_blank>Mandril<S2SV_blank>validating<S2SV_blank>hotlinking" , cs -> socket ) ; //<S2SV> referer = mk_api -> header_get ( & sr -> headers_toc , "Referer" , strlen ( "Referer" ) ) ; //<S2SV> if ( mk_security_check_hotlink ( sr -> uri_processed , sr -> host , referer ) < 0 ) { //<S2SV> PLUGIN_TRACE ( "[FD<S2SV_blank>%i]<S2SV_blank>Close<S2SV_blank>connection,<S2SV_blank>deny<S2SV_blank>hotlinking." , cs -> socket ) ; //<S2SV> mk_api -> header_set_http_status ( sr , MK_CLIENT_FORBIDDEN ) ; //<S2SV> return MK_PLUGIN_RET_CLOSE_CONX ; //<S2SV> } //<S2SV> return MK_PLUGIN_RET_NOT_ME ; //<S2SV> } //<S2SV> 