static size_t optsize ( lua_State * L , char opt , const char * * fmt ) { //<S2SV> switch ( opt ) { //<S2SV> case 'B' : case 'b' : return sizeof ( char ) ; //<S2SV> case 'H' : case 'h' : return sizeof ( short ) ; //<S2SV> case 'L' : case 'l' : return sizeof ( long ) ; //<S2SV> case 'T' : return sizeof ( size_t ) ; //<S2SV> case 'f' : return sizeof ( float ) ; //<S2SV> case 'd' : return sizeof ( double ) ; //<S2SV> case 'x' : return 1 ; //<S2SV> case 'c' : return getnum ( L , fmt , 1 ) ; //<S2SV> case 'i' : case 'I' : { //<S2SV> int sz = getnum ( L , fmt , sizeof ( int ) ) ; //<S2SV> if ( sz > MAXINTSIZE ) //<S2SV> luaL_error ( L , "integral<S2SV_blank>size<S2SV_blank>%d<S2SV_blank>is<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>limit<S2SV_blank>of<S2SV_blank>%d" , //<S2SV> sz , MAXINTSIZE ) ; //<S2SV> return sz ; //<S2SV> } //<S2SV> default : return 0 ; //<S2SV> } //<S2SV> } //<S2SV> 