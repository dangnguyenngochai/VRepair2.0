void loadServerConfigFromString ( char * config ) { //<S2SV> char * err = NULL ; //<S2SV> int linenum = 0 , totlines , i ; //<S2SV> int slaveof_linenum = 0 ; //<S2SV> sds * lines ; //<S2SV> lines = sdssplitlen ( config , strlen ( config ) , "\\n" , 1 , & totlines ) ; //<S2SV> for ( i = 0 ; i < totlines ; i ++ ) { //<S2SV> sds * argv ; //<S2SV> int argc ; //<S2SV> linenum = i + 1 ; //<S2SV> lines [ i ] = sdstrim ( lines [ i ] , "<S2SV_blank>\\t\\r\\n" ) ; //<S2SV> if ( lines [ i ] [ 0 ] == '#' || lines [ i ] [ 0 ] == '\\0' ) continue ; //<S2SV> argv = sdssplitargs ( lines [ i ] , & argc ) ; //<S2SV> if ( argv == NULL ) { //<S2SV> err = "Unbalanced<S2SV_blank>quotes<S2SV_blank>in<S2SV_blank>configuration<S2SV_blank>line" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> if ( argc == 0 ) { //<S2SV> sdsfreesplitres ( argv , argc ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> sdstolower ( argv [ 0 ] ) ; //<S2SV> if ( ! strcasecmp ( argv [ 0 ] , "timeout" ) && argc == 2 ) { //<S2SV> server . maxidletime = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . maxidletime < 0 ) { //<S2SV> err = "Invalid<S2SV_blank>timeout<S2SV_blank>value" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "tcp-keepalive" ) && argc == 2 ) { //<S2SV> server . tcpkeepalive = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . tcpkeepalive < 0 ) { //<S2SV> err = "Invalid<S2SV_blank>tcp-keepalive<S2SV_blank>value" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "protected-mode" ) && argc == 2 ) { //<S2SV> if ( ( server . protected_mode = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "port" ) && argc == 2 ) { //<S2SV> server . port = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . port < 0 || server . port > 65535 ) { //<S2SV> err = "Invalid<S2SV_blank>port" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "tcp-backlog" ) && argc == 2 ) { //<S2SV> server . tcp_backlog = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . tcp_backlog < 0 ) { //<S2SV> err = "Invalid<S2SV_blank>backlog<S2SV_blank>value" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "bind" ) && argc >= 2 ) { //<S2SV> int j , addresses = argc - 1 ; //<S2SV> if ( addresses > CONFIG_BINDADDR_MAX ) { //<S2SV> err = "Too<S2SV_blank>many<S2SV_blank>bind<S2SV_blank>addresses<S2SV_blank>specified" ; goto loaderr ; //<S2SV> } //<S2SV> for ( j = 0 ; j < addresses ; j ++ ) //<S2SV> server . bindaddr [ j ] = zstrdup ( argv [ j + 1 ] ) ; //<S2SV> server . bindaddr_count = addresses ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "unixsocket" ) && argc == 2 ) { //<S2SV> server . unixsocket = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "unixsocketperm" ) && argc == 2 ) { //<S2SV> errno = 0 ; //<S2SV> server . unixsocketperm = ( mode_t ) strtol ( argv [ 1 ] , NULL , 8 ) ; //<S2SV> if ( errno || server . unixsocketperm > 0777 ) { //<S2SV> err = "Invalid<S2SV_blank>socket<S2SV_blank>file<S2SV_blank>permissions" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "save" ) ) { //<S2SV> if ( argc == 3 ) { //<S2SV> int seconds = atoi ( argv [ 1 ] ) ; //<S2SV> int changes = atoi ( argv [ 2 ] ) ; //<S2SV> if ( seconds < 1 || changes < 0 ) { //<S2SV> err = "Invalid<S2SV_blank>save<S2SV_blank>parameters" ; goto loaderr ; //<S2SV> } //<S2SV> appendServerSaveParams ( seconds , changes ) ; //<S2SV> } else if ( argc == 2 && ! strcasecmp ( argv [ 1 ] , "" ) ) { //<S2SV> resetServerSaveParams ( ) ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "dir" ) && argc == 2 ) { //<S2SV> if ( chdir ( argv [ 1 ] ) == - 1 ) { //<S2SV> serverLog ( LL_WARNING , "Can\'t<S2SV_blank>chdir<S2SV_blank>to<S2SV_blank>\'%s\':<S2SV_blank>%s" , //<S2SV> argv [ 1 ] , strerror ( errno ) ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "loglevel" ) && argc == 2 ) { //<S2SV> server . verbosity = configEnumGetValue ( loglevel_enum , argv [ 1 ] ) ; //<S2SV> if ( server . verbosity == INT_MIN ) { //<S2SV> err = "Invalid<S2SV_blank>log<S2SV_blank>level.<S2SV_blank>" //<S2SV> "Must<S2SV_blank>be<S2SV_blank>one<S2SV_blank>of<S2SV_blank>debug,<S2SV_blank>verbose,<S2SV_blank>notice,<S2SV_blank>warning" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "logfile" ) && argc == 2 ) { //<S2SV> FILE * logfp ; //<S2SV> zfree ( server . logfile ) ; //<S2SV> server . logfile = zstrdup ( argv [ 1 ] ) ; //<S2SV> if ( server . logfile [ 0 ] != '\\0' ) { //<S2SV> logfp = fopen ( server . logfile , "a" ) ; //<S2SV> if ( logfp == NULL ) { //<S2SV> err = sdscatprintf ( sdsempty ( ) , //<S2SV> "Can\'t<S2SV_blank>open<S2SV_blank>the<S2SV_blank>log<S2SV_blank>file:<S2SV_blank>%s" , strerror ( errno ) ) ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> fclose ( logfp ) ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "syslog-enabled" ) && argc == 2 ) { //<S2SV> if ( ( server . syslog_enabled = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "syslog-ident" ) && argc == 2 ) { //<S2SV> if ( server . syslog_ident ) zfree ( server . syslog_ident ) ; //<S2SV> server . syslog_ident = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "syslog-facility" ) && argc == 2 ) { //<S2SV> server . syslog_facility = //<S2SV> configEnumGetValue ( syslog_facility_enum , argv [ 1 ] ) ; //<S2SV> if ( server . syslog_facility == INT_MIN ) { //<S2SV> err = "Invalid<S2SV_blank>log<S2SV_blank>facility.<S2SV_blank>Must<S2SV_blank>be<S2SV_blank>one<S2SV_blank>of<S2SV_blank>USER<S2SV_blank>or<S2SV_blank>between<S2SV_blank>LOCAL0-LOCAL7" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "databases" ) && argc == 2 ) { //<S2SV> server . dbnum = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . dbnum < 1 ) { //<S2SV> err = "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>databases" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "include" ) && argc == 2 ) { //<S2SV> loadServerConfig ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "maxclients" ) && argc == 2 ) { //<S2SV> server . maxclients = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . maxclients < 1 ) { //<S2SV> err = "Invalid<S2SV_blank>max<S2SV_blank>clients<S2SV_blank>limit" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "maxmemory" ) && argc == 2 ) { //<S2SV> server . maxmemory = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "maxmemory-policy" ) && argc == 2 ) { //<S2SV> server . maxmemory_policy = //<S2SV> configEnumGetValue ( maxmemory_policy_enum , argv [ 1 ] ) ; //<S2SV> if ( server . maxmemory_policy == INT_MIN ) { //<S2SV> err = "Invalid<S2SV_blank>maxmemory<S2SV_blank>policy" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "maxmemory-samples" ) && argc == 2 ) { //<S2SV> server . maxmemory_samples = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . maxmemory_samples <= 0 ) { //<S2SV> err = "maxmemory-samples<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "lfu-log-factor" ) && argc == 2 ) { //<S2SV> server . lfu_log_factor = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . maxmemory_samples < 0 ) { //<S2SV> err = "lfu-log-factor<S2SV_blank>must<S2SV_blank>be<S2SV_blank>0<S2SV_blank>or<S2SV_blank>greater" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "lfu-decay-time" ) && argc == 2 ) { //<S2SV> server . lfu_decay_time = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . maxmemory_samples < 1 ) { //<S2SV> err = "lfu-decay-time<S2SV_blank>must<S2SV_blank>be<S2SV_blank>0<S2SV_blank>or<S2SV_blank>greater" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slaveof" ) && argc == 3 ) { //<S2SV> slaveof_linenum = linenum ; //<S2SV> server . masterhost = sdsnew ( argv [ 1 ] ) ; //<S2SV> server . masterport = atoi ( argv [ 2 ] ) ; //<S2SV> server . repl_state = REPL_STATE_CONNECT ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "repl-ping-slave-period" ) && argc == 2 ) { //<S2SV> server . repl_ping_slave_period = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . repl_ping_slave_period <= 0 ) { //<S2SV> err = "repl-ping-slave-period<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "repl-timeout" ) && argc == 2 ) { //<S2SV> server . repl_timeout = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . repl_timeout <= 0 ) { //<S2SV> err = "repl-timeout<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "repl-disable-tcp-nodelay" ) && argc == 2 ) { //<S2SV> if ( ( server . repl_disable_tcp_nodelay = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "repl-diskless-sync" ) && argc == 2 ) { //<S2SV> if ( ( server . repl_diskless_sync = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "repl-diskless-sync-delay" ) && argc == 2 ) { //<S2SV> server . repl_diskless_sync_delay = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . repl_diskless_sync_delay < 0 ) { //<S2SV> err = "repl-diskless-sync-delay<S2SV_blank>can\'t<S2SV_blank>be<S2SV_blank>negative" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "repl-backlog-size" ) && argc == 2 ) { //<S2SV> long long size = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> if ( size <= 0 ) { //<S2SV> err = "repl-backlog-size<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater." ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> resizeReplicationBacklog ( size ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "repl-backlog-ttl" ) && argc == 2 ) { //<S2SV> server . repl_backlog_time_limit = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . repl_backlog_time_limit < 0 ) { //<S2SV> err = "repl-backlog-ttl<S2SV_blank>can\'t<S2SV_blank>be<S2SV_blank>negative<S2SV_blank>" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "masterauth" ) && argc == 2 ) { //<S2SV> zfree ( server . masterauth ) ; //<S2SV> server . masterauth = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slave-serve-stale-data" ) && argc == 2 ) { //<S2SV> if ( ( server . repl_serve_stale_data = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slave-read-only" ) && argc == 2 ) { //<S2SV> if ( ( server . repl_slave_ro = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "rdbcompression" ) && argc == 2 ) { //<S2SV> if ( ( server . rdb_compression = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "rdbchecksum" ) && argc == 2 ) { //<S2SV> if ( ( server . rdb_checksum = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "activerehashing" ) && argc == 2 ) { //<S2SV> if ( ( server . activerehashing = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "lazyfree-lazy-eviction" ) && argc == 2 ) { //<S2SV> if ( ( server . lazyfree_lazy_eviction = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "lazyfree-lazy-expire" ) && argc == 2 ) { //<S2SV> if ( ( server . lazyfree_lazy_expire = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "lazyfree-lazy-server-del" ) && argc == 2 ) { //<S2SV> if ( ( server . lazyfree_lazy_server_del = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slave-lazy-flush" ) && argc == 2 ) { //<S2SV> if ( ( server . repl_slave_lazy_flush = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "daemonize" ) && argc == 2 ) { //<S2SV> if ( ( server . daemonize = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "hz" ) && argc == 2 ) { //<S2SV> server . hz = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . hz < CONFIG_MIN_HZ ) server . hz = CONFIG_MIN_HZ ; //<S2SV> if ( server . hz > CONFIG_MAX_HZ ) server . hz = CONFIG_MAX_HZ ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "appendonly" ) && argc == 2 ) { //<S2SV> int yes ; //<S2SV> if ( ( yes = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> server . aof_state = yes ? AOF_ON : AOF_OFF ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "appendfilename" ) && argc == 2 ) { //<S2SV> if ( ! pathIsBaseName ( argv [ 1 ] ) ) { //<S2SV> err = "appendfilename<S2SV_blank>can\'t<S2SV_blank>be<S2SV_blank>a<S2SV_blank>path,<S2SV_blank>just<S2SV_blank>a<S2SV_blank>filename" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> zfree ( server . aof_filename ) ; //<S2SV> server . aof_filename = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "no-appendfsync-on-rewrite" ) //<S2SV> && argc == 2 ) { //<S2SV> if ( ( server . aof_no_fsync_on_rewrite = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "appendfsync" ) && argc == 2 ) { //<S2SV> server . aof_fsync = configEnumGetValue ( aof_fsync_enum , argv [ 1 ] ) ; //<S2SV> if ( server . aof_fsync == INT_MIN ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'no\',<S2SV_blank>\'always\'<S2SV_blank>or<S2SV_blank>\'everysec\'" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "auto-aof-rewrite-percentage" ) && //<S2SV> argc == 2 ) //<S2SV> { //<S2SV> server . aof_rewrite_perc = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . aof_rewrite_perc < 0 ) { //<S2SV> err = "Invalid<S2SV_blank>negative<S2SV_blank>percentage<S2SV_blank>for<S2SV_blank>AOF<S2SV_blank>auto<S2SV_blank>rewrite" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "auto-aof-rewrite-min-size" ) && //<S2SV> argc == 2 ) //<S2SV> { //<S2SV> server . aof_rewrite_min_size = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "aof-rewrite-incremental-fsync" ) && //<S2SV> argc == 2 ) //<S2SV> { //<S2SV> if ( ( server . aof_rewrite_incremental_fsync = //<S2SV> yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "aof-load-truncated" ) && argc == 2 ) { //<S2SV> if ( ( server . aof_load_truncated = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "aof-use-rdb-preamble" ) && argc == 2 ) { //<S2SV> if ( ( server . aof_use_rdb_preamble = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "requirepass" ) && argc == 2 ) { //<S2SV> if ( strlen ( argv [ 1 ] ) > CONFIG_AUTHPASS_MAX_LEN ) { //<S2SV> err = "Password<S2SV_blank>is<S2SV_blank>longer<S2SV_blank>than<S2SV_blank>CONFIG_AUTHPASS_MAX_LEN" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> server . requirepass = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "pidfile" ) && argc == 2 ) { //<S2SV> zfree ( server . pidfile ) ; //<S2SV> server . pidfile = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "dbfilename" ) && argc == 2 ) { //<S2SV> if ( ! pathIsBaseName ( argv [ 1 ] ) ) { //<S2SV> err = "dbfilename<S2SV_blank>can\'t<S2SV_blank>be<S2SV_blank>a<S2SV_blank>path,<S2SV_blank>just<S2SV_blank>a<S2SV_blank>filename" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> zfree ( server . rdb_filename ) ; //<S2SV> server . rdb_filename = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "hash-max-ziplist-entries" ) && argc == 2 ) { //<S2SV> server . hash_max_ziplist_entries = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "hash-max-ziplist-value" ) && argc == 2 ) { //<S2SV> server . hash_max_ziplist_value = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "list-max-ziplist-entries" ) && argc == 2 ) { //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "list-max-ziplist-value" ) && argc == 2 ) { //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "list-max-ziplist-size" ) && argc == 2 ) { //<S2SV> server . list_max_ziplist_size = atoi ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "list-compress-depth" ) && argc == 2 ) { //<S2SV> server . list_compress_depth = atoi ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "set-max-intset-entries" ) && argc == 2 ) { //<S2SV> server . set_max_intset_entries = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "zset-max-ziplist-entries" ) && argc == 2 ) { //<S2SV> server . zset_max_ziplist_entries = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "zset-max-ziplist-value" ) && argc == 2 ) { //<S2SV> server . zset_max_ziplist_value = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "hll-sparse-max-bytes" ) && argc == 2 ) { //<S2SV> server . hll_sparse_max_bytes = memtoll ( argv [ 1 ] , NULL ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "rename-command" ) && argc == 3 ) { //<S2SV> struct redisCommand * cmd = lookupCommand ( argv [ 1 ] ) ; //<S2SV> int retval ; //<S2SV> if ( ! cmd ) { //<S2SV> err = "No<S2SV_blank>such<S2SV_blank>command<S2SV_blank>in<S2SV_blank>rename-command" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> retval = dictDelete ( server . commands , argv [ 1 ] ) ; //<S2SV> serverAssert ( retval == DICT_OK ) ; //<S2SV> if ( sdslen ( argv [ 2 ] ) != 0 ) { //<S2SV> sds copy = sdsdup ( argv [ 2 ] ) ; //<S2SV> retval = dictAdd ( server . commands , copy , cmd ) ; //<S2SV> if ( retval != DICT_OK ) { //<S2SV> sdsfree ( copy ) ; //<S2SV> err = "Target<S2SV_blank>command<S2SV_blank>name<S2SV_blank>already<S2SV_blank>exists" ; goto loaderr ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-enabled" ) && argc == 2 ) { //<S2SV> if ( ( server . cluster_enabled = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-config-file" ) && argc == 2 ) { //<S2SV> zfree ( server . cluster_configfile ) ; //<S2SV> server . cluster_configfile = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-announce-ip" ) && argc == 2 ) { //<S2SV> zfree ( server . cluster_announce_ip ) ; //<S2SV> server . cluster_announce_ip = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-announce-port" ) && argc == 2 ) { //<S2SV> server . cluster_announce_port = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . cluster_announce_port < 0 || //<S2SV> server . cluster_announce_port > 65535 ) //<S2SV> { //<S2SV> err = "Invalid<S2SV_blank>port" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-announce-bus-port" ) && //<S2SV> argc == 2 ) //<S2SV> { //<S2SV> server . cluster_announce_bus_port = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . cluster_announce_bus_port < 0 || //<S2SV> server . cluster_announce_bus_port > 65535 ) //<S2SV> { //<S2SV> err = "Invalid<S2SV_blank>port" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-require-full-coverage" ) && //<S2SV> argc == 2 ) //<S2SV> { //<S2SV> if ( ( server . cluster_require_full_coverage = yesnotoi ( argv [ 1 ] ) ) == - 1 ) //<S2SV> { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-node-timeout" ) && argc == 2 ) { //<S2SV> server . cluster_node_timeout = strtoll ( argv [ 1 ] , NULL , 10 ) ; //<S2SV> if ( server . cluster_node_timeout <= 0 ) { //<S2SV> err = "cluster<S2SV_blank>node<S2SV_blank>timeout<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-migration-barrier" ) //<S2SV> && argc == 2 ) //<S2SV> { //<S2SV> server . cluster_migration_barrier = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . cluster_migration_barrier < 0 ) { //<S2SV> err = "cluster<S2SV_blank>migration<S2SV_blank>barrier<S2SV_blank>must<S2SV_blank>zero<S2SV_blank>or<S2SV_blank>positive" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "cluster-slave-validity-factor" ) //<S2SV> && argc == 2 ) //<S2SV> { //<S2SV> server . cluster_slave_validity_factor = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . cluster_slave_validity_factor < 0 ) { //<S2SV> err = "cluster<S2SV_blank>slave<S2SV_blank>validity<S2SV_blank>factor<S2SV_blank>must<S2SV_blank>be<S2SV_blank>zero<S2SV_blank>or<S2SV_blank>positive" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "lua-time-limit" ) && argc == 2 ) { //<S2SV> server . lua_time_limit = strtoll ( argv [ 1 ] , NULL , 10 ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slowlog-log-slower-than" ) && //<S2SV> argc == 2 ) //<S2SV> { //<S2SV> server . slowlog_log_slower_than = strtoll ( argv [ 1 ] , NULL , 10 ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "latency-monitor-threshold" ) && //<S2SV> argc == 2 ) //<S2SV> { //<S2SV> server . latency_monitor_threshold = strtoll ( argv [ 1 ] , NULL , 10 ) ; //<S2SV> if ( server . latency_monitor_threshold < 0 ) { //<S2SV> err = "The<S2SV_blank>latency<S2SV_blank>threshold<S2SV_blank>can\'t<S2SV_blank>be<S2SV_blank>negative" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slowlog-max-len" ) && argc == 2 ) { //<S2SV> server . slowlog_max_len = strtoll ( argv [ 1 ] , NULL , 10 ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "client-output-buffer-limit" ) && //<S2SV> argc == 5 ) //<S2SV> { //<S2SV> int class = getClientTypeByName ( argv [ 1 ] ) ; //<S2SV> unsigned long long hard , soft ; //<S2SV> int soft_seconds ; //<S2SV> if ( class == - 1 ) { //<S2SV> err = "Unrecognized<S2SV_blank>client<S2SV_blank>limit<S2SV_blank>class" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> hard = memtoll ( argv [ 2 ] , NULL ) ; //<S2SV> soft = memtoll ( argv [ 3 ] , NULL ) ; //<S2SV> soft_seconds = atoi ( argv [ 4 ] ) ; //<S2SV> if ( soft_seconds < 0 ) { //<S2SV> err = "Negative<S2SV_blank>number<S2SV_blank>of<S2SV_blank>seconds<S2SV_blank>in<S2SV_blank>soft<S2SV_blank>limit<S2SV_blank>is<S2SV_blank>invalid" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> server . client_obuf_limits [ class ] . hard_limit_bytes = hard ; //<S2SV> server . client_obuf_limits [ class ] . soft_limit_bytes = soft ; //<S2SV> server . client_obuf_limits [ class ] . soft_limit_seconds = soft_seconds ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "stop-writes-on-bgsave-error" ) && //<S2SV> argc == 2 ) { //<S2SV> if ( ( server . stop_writes_on_bgsave_err = yesnotoi ( argv [ 1 ] ) ) == - 1 ) { //<S2SV> err = "argument<S2SV_blank>must<S2SV_blank>be<S2SV_blank>\'yes\'<S2SV_blank>or<S2SV_blank>\'no\'" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slave-priority" ) && argc == 2 ) { //<S2SV> server . slave_priority = atoi ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slave-announce-ip" ) && argc == 2 ) { //<S2SV> zfree ( server . slave_announce_ip ) ; //<S2SV> server . slave_announce_ip = zstrdup ( argv [ 1 ] ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "slave-announce-port" ) && argc == 2 ) { //<S2SV> server . slave_announce_port = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . slave_announce_port < 0 || //<S2SV> server . slave_announce_port > 65535 ) //<S2SV> { //<S2SV> err = "Invalid<S2SV_blank>port" ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "min-slaves-to-write" ) && argc == 2 ) { //<S2SV> server . repl_min_slaves_to_write = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . repl_min_slaves_to_write < 0 ) { //<S2SV> err = "Invalid<S2SV_blank>value<S2SV_blank>for<S2SV_blank>min-slaves-to-write." ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "min-slaves-max-lag" ) && argc == 2 ) { //<S2SV> server . repl_min_slaves_max_lag = atoi ( argv [ 1 ] ) ; //<S2SV> if ( server . repl_min_slaves_max_lag < 0 ) { //<S2SV> err = "Invalid<S2SV_blank>value<S2SV_blank>for<S2SV_blank>min-slaves-max-lag." ; goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "notify-keyspace-events" ) && argc == 2 ) { //<S2SV> int flags = keyspaceEventsStringToFlags ( argv [ 1 ] ) ; //<S2SV> if ( flags == - 1 ) { //<S2SV> err = "Invalid<S2SV_blank>event<S2SV_blank>class<S2SV_blank>character.<S2SV_blank>Use<S2SV_blank>\'g$lshzxeA\'." ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> server . notify_keyspace_events = flags ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "supervised" ) && argc == 2 ) { //<S2SV> server . supervised_mode = //<S2SV> configEnumGetValue ( supervised_mode_enum , argv [ 1 ] ) ; //<S2SV> if ( server . supervised_mode == INT_MIN ) { //<S2SV> err = "Invalid<S2SV_blank>option<S2SV_blank>for<S2SV_blank>\'supervised\'.<S2SV_blank>" //<S2SV> "Allowed<S2SV_blank>values:<S2SV_blank>\'upstart\',<S2SV_blank>\'systemd\',<S2SV_blank>\'auto\',<S2SV_blank>or<S2SV_blank>\'no\'" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "loadmodule" ) && argc >= 2 ) { //<S2SV> queueLoadModule ( argv [ 1 ] , & argv [ 2 ] , argc - 2 ) ; //<S2SV> } else if ( ! strcasecmp ( argv [ 0 ] , "sentinel" ) ) { //<S2SV> if ( argc != 1 ) { //<S2SV> if ( ! server . sentinel_mode ) { //<S2SV> err = "sentinel<S2SV_blank>directive<S2SV_blank>while<S2SV_blank>not<S2SV_blank>in<S2SV_blank>sentinel<S2SV_blank>mode" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> err = sentinelHandleConfiguration ( argv + 1 , argc - 1 ) ; //<S2SV> if ( err ) goto loaderr ; //<S2SV> } //<S2SV> } else { //<S2SV> err = "Bad<S2SV_blank>directive<S2SV_blank>or<S2SV_blank>wrong<S2SV_blank>number<S2SV_blank>of<S2SV_blank>arguments" ; goto loaderr ; //<S2SV> } //<S2SV> sdsfreesplitres ( argv , argc ) ; //<S2SV> } //<S2SV> if ( server . cluster_enabled && server . masterhost ) { //<S2SV> linenum = slaveof_linenum ; //<S2SV> i = linenum - 1 ; //<S2SV> err = "slaveof<S2SV_blank>directive<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>in<S2SV_blank>cluster<S2SV_blank>mode" ; //<S2SV> goto loaderr ; //<S2SV> } //<S2SV> sdsfreesplitres ( lines , totlines ) ; //<S2SV> return ; //<S2SV> loaderr : //<S2SV> fprintf ( stderr , "\\n***<S2SV_blank>FATAL<S2SV_blank>CONFIG<S2SV_blank>FILE<S2SV_blank>ERROR<S2SV_blank>***\\n" ) ; //<S2SV> fprintf ( stderr , "Reading<S2SV_blank>the<S2SV_blank>configuration<S2SV_blank>file,<S2SV_blank>at<S2SV_blank>line<S2SV_blank>%d\\n" , linenum ) ; //<S2SV> fprintf ( stderr , ">>><S2SV_blank>\'%s\'\\n" , lines [ i ] ) ; //<S2SV> fprintf ( stderr , "%s\\n" , err ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> 