int mp_pack ( lua_State * L ) { //<S2SV> int nargs = lua_gettop ( L ) ; //<S2SV> int i ; //<S2SV> mp_buf * buf ; //<S2SV> if ( nargs == 0 ) //<S2SV> return luaL_argerror ( L , 0 , "MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input." ) ; //<S2SV> if ( ! lua_checkstack ( L , nargs ) ) //<S2SV> return luaL_argerror ( L , 0 , "Too<S2SV_blank>many<S2SV_blank>arguments<S2SV_blank>for<S2SV_blank>MessagePack<S2SV_blank>pack." ) ; //<S2SV> buf = mp_buf_new ( L ) ; //<S2SV> for ( i = 1 ; i <= nargs ; i ++ ) { //<S2SV> lua_pushvalue ( L , i ) ; //<S2SV> mp_encode_lua_type ( L , buf , 0 ) ; //<S2SV> lua_pushlstring ( L , ( char * ) buf -> b , buf -> len ) ; //<S2SV> buf -> free += buf -> len ; //<S2SV> buf -> len = 0 ; //<S2SV> } //<S2SV> mp_buf_free ( L , buf ) ; //<S2SV> lua_concat ( L , nargs ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 