int //<S2SV> run_cmd ( int fd , ... ) //<S2SV> { //<S2SV> pid_t pid ; //<S2SV> sigset_t sigm , sigm_old ; //<S2SV> sigemptyset ( & sigm ) ; //<S2SV> sigaddset ( & sigm , SIGTERM ) ; //<S2SV> sigprocmask ( SIG_BLOCK , & sigm , & sigm_old ) ; //<S2SV> pid = fork ( ) ; //<S2SV> if ( pid < 0 ) { //<S2SV> sigprocmask ( SIG_SETMASK , & sigm_old , NULL ) ; //<S2SV> fd_printf ( STO , "***<S2SV_blank>cannot<S2SV_blank>fork:<S2SV_blank>%s<S2SV_blank>***\\r\\n" , strerror ( errno ) ) ; //<S2SV> return - 1 ; //<S2SV> } else if ( pid ) { //<S2SV> int status , r ; //<S2SV> sigprocmask ( SIG_SETMASK , & sigm_old , NULL ) ; //<S2SV> do { //<S2SV> r = waitpid ( pid , & status , 0 ) ; //<S2SV> } while ( r < 0 && errno == EINTR ) ; //<S2SV> term_apply ( STI ) ; //<S2SV> if ( WIFEXITED ( status ) ) { //<S2SV> fd_printf ( STO , "\\r\\n***<S2SV_blank>exit<S2SV_blank>status:<S2SV_blank>%d<S2SV_blank>***\\r\\n" , //<S2SV> WEXITSTATUS ( status ) ) ; //<S2SV> return WEXITSTATUS ( status ) ; //<S2SV> } else if ( WIFSIGNALED ( status ) ) { //<S2SV> fd_printf ( STO , "\\r\\n***<S2SV_blank>killed<S2SV_blank>by<S2SV_blank>signal:<S2SV_blank>%d<S2SV_blank>***\\r\\n" , //<S2SV> WTERMSIG ( status ) ) ; //<S2SV> return - 1 ; //<S2SV> } else { //<S2SV> fd_printf ( STO , "\\r\\n***<S2SV_blank>abnormal<S2SV_blank>termination:<S2SV_blank>0x%x<S2SV_blank>***\\r\\n" , r ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> long fl ; //<S2SV> char cmd [ 512 ] ; //<S2SV> term_remove ( STI ) ; //<S2SV> term_erase ( fd ) ; //<S2SV> fl = fcntl ( fd , F_GETFL ) ; //<S2SV> fl &= ~ O_NONBLOCK ; //<S2SV> fcntl ( fd , F_SETFL , fl ) ; //<S2SV> close ( STI ) ; //<S2SV> close ( STO ) ; //<S2SV> dup2 ( fd , STI ) ; //<S2SV> dup2 ( fd , STO ) ; //<S2SV> { //<S2SV> char * c , * ce ; //<S2SV> const char * s ; //<S2SV> int n ; //<S2SV> va_list vls ; //<S2SV> strcpy ( cmd , EXEC ) ; //<S2SV> c = & cmd [ sizeof ( EXEC ) - 1 ] ; //<S2SV> ce = cmd + sizeof ( cmd ) - 1 ; //<S2SV> va_start ( vls , fd ) ; //<S2SV> while ( ( s = va_arg ( vls , const char * ) ) ) { //<S2SV> n = strlen ( s ) ; //<S2SV> if ( c + n + 1 >= ce ) break ; //<S2SV> memcpy ( c , s , n ) ; c += n ; //<S2SV> * c ++ = '<S2SV_blank>' ; //<S2SV> } //<S2SV> va_end ( vls ) ; //<S2SV> * c = '\\0' ; //<S2SV> } //<S2SV> fd_printf ( STDERR_FILENO , "%s\\n" , & cmd [ sizeof ( EXEC ) - 1 ] ) ; //<S2SV> establish_child_signal_handlers ( ) ; //<S2SV> sigprocmask ( SIG_SETMASK , & sigm_old , NULL ) ; //<S2SV> execl ( "/bin/sh" , "sh" , "-c" , cmd , NULL ) ; //<S2SV> exit ( 42 ) ; //<S2SV> } //<S2SV> } //<S2SV> 