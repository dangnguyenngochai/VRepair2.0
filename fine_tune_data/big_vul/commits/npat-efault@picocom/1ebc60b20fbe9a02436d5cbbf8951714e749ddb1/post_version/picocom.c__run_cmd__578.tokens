int //<S2SV> run_cmd ( int fd , const char * cmd , const char * args_extra ) //<S2SV> { //<S2SV> pid_t pid ; //<S2SV> sigset_t sigm , sigm_old ; //<S2SV> sigemptyset ( & sigm ) ; //<S2SV> sigaddset ( & sigm , SIGTERM ) ; //<S2SV> sigprocmask ( SIG_BLOCK , & sigm , & sigm_old ) ; //<S2SV> pid = fork ( ) ; //<S2SV> if ( pid < 0 ) { //<S2SV> sigprocmask ( SIG_SETMASK , & sigm_old , NULL ) ; //<S2SV> fd_printf ( STO , "***<S2SV_blank>cannot<S2SV_blank>fork:<S2SV_blank>%s<S2SV_blank>***\\r\\n" , strerror ( errno ) ) ; //<S2SV> return - 1 ; //<S2SV> } else if ( pid ) { //<S2SV> int status , r ; //<S2SV> sigprocmask ( SIG_SETMASK , & sigm_old , NULL ) ; //<S2SV> do { //<S2SV> r = waitpid ( pid , & status , 0 ) ; //<S2SV> } while ( r < 0 && errno == EINTR ) ; //<S2SV> term_apply ( STI ) ; //<S2SV> if ( WIFEXITED ( status ) ) { //<S2SV> fd_printf ( STO , "\\r\\n***<S2SV_blank>exit<S2SV_blank>status:<S2SV_blank>%d<S2SV_blank>***\\r\\n" , //<S2SV> WEXITSTATUS ( status ) ) ; //<S2SV> return WEXITSTATUS ( status ) ; //<S2SV> } else if ( WIFSIGNALED ( status ) ) { //<S2SV> fd_printf ( STO , "\\r\\n***<S2SV_blank>killed<S2SV_blank>by<S2SV_blank>signal:<S2SV_blank>%d<S2SV_blank>***\\r\\n" , //<S2SV> WTERMSIG ( status ) ) ; //<S2SV> return - 1 ; //<S2SV> } else { //<S2SV> fd_printf ( STO , "\\r\\n***<S2SV_blank>abnormal<S2SV_blank>termination:<S2SV_blank>0x%x<S2SV_blank>***\\r\\n" , r ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> long fl ; //<S2SV> int argc ; //<S2SV> char * argv [ RUNCMD_ARGS_MAX + 1 ] ; //<S2SV> int r ; //<S2SV> term_remove ( STI ) ; //<S2SV> term_erase ( fd ) ; //<S2SV> fl = fcntl ( fd , F_GETFL ) ; //<S2SV> fl &= ~ O_NONBLOCK ; //<S2SV> fcntl ( fd , F_SETFL , fl ) ; //<S2SV> close ( STI ) ; //<S2SV> close ( STO ) ; //<S2SV> dup2 ( fd , STI ) ; //<S2SV> dup2 ( fd , STO ) ; //<S2SV> argc = 0 ; //<S2SV> r = split_quoted ( cmd , & argc , argv , RUNCMD_ARGS_MAX ) ; //<S2SV> if ( r < 0 ) { //<S2SV> fd_printf ( STDERR_FILENO , "Cannot<S2SV_blank>parse<S2SV_blank>command\\n" ) ; //<S2SV> exit ( RUNCMD_EXEC_FAIL ) ; //<S2SV> } //<S2SV> r = split_quoted ( args_extra , & argc , argv , RUNCMD_ARGS_MAX ) ; //<S2SV> if ( r < 0 ) { //<S2SV> fd_printf ( STDERR_FILENO , "Cannot<S2SV_blank>parse<S2SV_blank>extra<S2SV_blank>args\\n" ) ; //<S2SV> exit ( RUNCMD_EXEC_FAIL ) ; //<S2SV> } //<S2SV> if ( argc < 1 ) { //<S2SV> fd_printf ( STDERR_FILENO , "No<S2SV_blank>command<S2SV_blank>given\\n" ) ; //<S2SV> exit ( RUNCMD_EXEC_FAIL ) ; //<S2SV> } //<S2SV> argv [ argc ] = NULL ; //<S2SV> fd_printf ( STDERR_FILENO , "$<S2SV_blank>%s<S2SV_blank>%s\\n" , cmd , args_extra ) ; //<S2SV> establish_child_signal_handlers ( ) ; //<S2SV> sigprocmask ( SIG_SETMASK , & sigm_old , NULL ) ; //<S2SV> execvp ( argv [ 0 ] , argv ) ; //<S2SV> fd_printf ( STDERR_FILENO , "exec:<S2SV_blank>%s\\n" , strerror ( errno ) ) ; //<S2SV> exit ( RUNCMD_EXEC_FAIL ) ; //<S2SV> } //<S2SV> } //<S2SV> 