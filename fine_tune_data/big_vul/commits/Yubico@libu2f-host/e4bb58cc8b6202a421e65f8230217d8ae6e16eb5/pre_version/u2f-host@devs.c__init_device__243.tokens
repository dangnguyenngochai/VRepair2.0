static int //<S2SV> init_device ( u2fh_devs * devs , struct u2fdevice * dev ) //<S2SV> { //<S2SV> unsigned char resp [ 1024 ] ; //<S2SV> unsigned char nonce [ 8 ] ; //<S2SV> if ( obtain_nonce ( nonce ) != 0 ) //<S2SV> { //<S2SV> return U2FH_TRANSPORT_ERROR ; //<S2SV> } //<S2SV> size_t resplen = sizeof ( resp ) ; //<S2SV> dev -> cid = CID_BROADCAST ; //<S2SV> if ( u2fh_sendrecv //<S2SV> ( devs , dev -> id , U2FHID_INIT , nonce , sizeof ( nonce ) , resp , //<S2SV> & resplen ) == U2FH_OK ) //<S2SV> { //<S2SV> U2FHID_INIT_RESP initresp ; //<S2SV> if ( resplen > sizeof ( initresp ) ) //<S2SV> { //<S2SV> return U2FH_MEMORY_ERROR ; //<S2SV> } //<S2SV> memcpy ( & initresp , resp , resplen ) ; //<S2SV> dev -> cid = initresp . cid ; //<S2SV> dev -> versionInterface = initresp . versionInterface ; //<S2SV> dev -> versionMajor = initresp . versionMajor ; //<S2SV> dev -> versionMinor = initresp . versionMinor ; //<S2SV> dev -> capFlags = initresp . capFlags ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> return U2FH_TRANSPORT_ERROR ; //<S2SV> } //<S2SV> return U2FH_OK ; //<S2SV> } //<S2SV> 