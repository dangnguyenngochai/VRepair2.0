static int //<S2SV> init_device ( u2fh_devs * devs , struct u2fdevice * dev ) //<S2SV> { //<S2SV> unsigned char resp [ 1024 ] ; //<S2SV> unsigned char nonce [ 8 ] ; //<S2SV> if ( obtain_nonce ( nonce ) != 0 ) //<S2SV> { //<S2SV> return U2FH_TRANSPORT_ERROR ; //<S2SV> } //<S2SV> size_t resplen = sizeof ( resp ) ; //<S2SV> dev -> cid = CID_BROADCAST ; //<S2SV> if ( u2fh_sendrecv //<S2SV> ( devs , dev -> id , U2FHID_INIT , nonce , sizeof ( nonce ) , resp , //<S2SV> & resplen ) == U2FH_OK ) //<S2SV> { //<S2SV> int offs = sizeof ( nonce ) ; //<S2SV> if ( resplen < 17 ) //<S2SV> { //<S2SV> return U2FH_SIZE_ERROR ; //<S2SV> } //<S2SV> if ( memcmp ( nonce , resp , sizeof ( nonce ) ) != 0 ) //<S2SV> { //<S2SV> return U2FH_TRANSPORT_ERROR ; //<S2SV> } //<S2SV> dev -> cid = //<S2SV> resp [ offs ] << 24 | resp [ offs + 1 ] << 16 | resp [ offs + //<S2SV> 2 ] << 8 | resp [ offs + //<S2SV> 3 ] ; //<S2SV> offs += 4 ; //<S2SV> dev -> versionInterface = resp [ offs ++ ] ; //<S2SV> dev -> versionMajor = resp [ offs ++ ] ; //<S2SV> dev -> versionMinor = resp [ offs ++ ] ; //<S2SV> dev -> versionBuild = resp [ offs ++ ] ; //<S2SV> dev -> capFlags = resp [ offs ++ ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> return U2FH_TRANSPORT_ERROR ; //<S2SV> } //<S2SV> return U2FH_OK ; //<S2SV> } //<S2SV> 