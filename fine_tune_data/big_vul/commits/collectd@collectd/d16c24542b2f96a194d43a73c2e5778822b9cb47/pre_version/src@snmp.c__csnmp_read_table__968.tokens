static int csnmp_read_table ( host_definition_t * host , data_definition_t * data ) { //<S2SV> struct snmp_pdu * req ; //<S2SV> struct snmp_pdu * res = NULL ; //<S2SV> struct variable_list * vb ; //<S2SV> const data_set_t * ds ; //<S2SV> size_t oid_list_len = data -> values_len + 1 ; //<S2SV> oid_t oid_list [ oid_list_len ] ; //<S2SV> _Bool oid_list_todo [ oid_list_len ] ; //<S2SV> int status ; //<S2SV> size_t i ; //<S2SV> csnmp_list_instances_t * instance_list_head ; //<S2SV> csnmp_list_instances_t * instance_list_tail ; //<S2SV> csnmp_table_values_t * * value_list_head ; //<S2SV> csnmp_table_values_t * * value_list_tail ; //<S2SV> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>csnmp_read_table<S2SV_blank>(host<S2SV_blank>=<S2SV_blank>%s,<S2SV_blank>data<S2SV_blank>=<S2SV_blank>%s)" , host -> name , //<S2SV> data -> name ) ; //<S2SV> if ( host -> sess_handle == NULL ) { //<S2SV> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>csnmp_read_table:<S2SV_blank>host->sess_handle<S2SV_blank>==<S2SV_blank>NULL" ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> ds = plugin_get_ds ( data -> type ) ; //<S2SV> if ( ! ds ) { //<S2SV> ERROR ( "snmp<S2SV_blank>plugin:<S2SV_blank>DataSet<S2SV_blank>`%s\'<S2SV_blank>not<S2SV_blank>defined." , data -> type ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> if ( ds -> ds_num != data -> values_len ) { //<S2SV> ERROR ( "snmp<S2SV_blank>plugin:<S2SV_blank>DataSet<S2SV_blank>`%s\'<S2SV_blank>requires<S2SV_blank>%zu<S2SV_blank>values,<S2SV_blank>but<S2SV_blank>config<S2SV_blank>talks<S2SV_blank>" //<S2SV> "about<S2SV_blank>%zu" , //<S2SV> data -> type , ds -> ds_num , data -> values_len ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> assert ( data -> values_len > 0 ) ; //<S2SV> memcpy ( oid_list , data -> values , data -> values_len * sizeof ( oid_t ) ) ; //<S2SV> if ( data -> instance . oid . oid_len > 0 ) //<S2SV> memcpy ( oid_list + data -> values_len , & data -> instance . oid , sizeof ( oid_t ) ) ; //<S2SV> else //<S2SV> oid_list_len -- ; //<S2SV> for ( i = 0 ; i < oid_list_len ; i ++ ) //<S2SV> oid_list_todo [ i ] = 1 ; //<S2SV> value_list_head = calloc ( data -> values_len , sizeof ( * value_list_head ) ) ; //<S2SV> value_list_tail = calloc ( data -> values_len , sizeof ( * value_list_tail ) ) ; //<S2SV> if ( ( value_list_head == NULL ) || ( value_list_tail == NULL ) ) { //<S2SV> ERROR ( "snmp<S2SV_blank>plugin:<S2SV_blank>csnmp_read_table:<S2SV_blank>calloc<S2SV_blank>failed." ) ; //<S2SV> sfree ( value_list_head ) ; //<S2SV> sfree ( value_list_tail ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> instance_list_head = NULL ; //<S2SV> instance_list_tail = NULL ; //<S2SV> status = 0 ; //<S2SV> while ( status == 0 ) { //<S2SV> int oid_list_todo_num ; //<S2SV> req = snmp_pdu_create ( SNMP_MSG_GETNEXT ) ; //<S2SV> if ( req == NULL ) { //<S2SV> ERROR ( "snmp<S2SV_blank>plugin:<S2SV_blank>snmp_pdu_create<S2SV_blank>failed." ) ; //<S2SV> status = - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> oid_list_todo_num = 0 ; //<S2SV> for ( i = 0 ; i < oid_list_len ; i ++ ) { //<S2SV> if ( ! oid_list_todo [ i ] ) //<S2SV> continue ; //<S2SV> oid_list_todo_num ++ ; //<S2SV> snmp_add_null_var ( req , oid_list [ i ] . oid , oid_list [ i ] . oid_len ) ; //<S2SV> } //<S2SV> if ( oid_list_todo_num == 0 ) { //<S2SV> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>all<S2SV_blank>variables<S2SV_blank>have<S2SV_blank>left<S2SV_blank>their<S2SV_blank>subtree" ) ; //<S2SV> status = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> res = NULL ; //<S2SV> status = snmp_sess_synch_response ( host -> sess_handle , req , & res ) ; //<S2SV> if ( ( status != STAT_SUCCESS ) || ( res == NULL ) ) { //<S2SV> char * errstr = NULL ; //<S2SV> snmp_sess_error ( host -> sess_handle , NULL , NULL , & errstr ) ; //<S2SV> c_complain ( LOG_ERR , & host -> complaint , //<S2SV> "snmp<S2SV_blank>plugin:<S2SV_blank>host<S2SV_blank>%s:<S2SV_blank>snmp_sess_synch_response<S2SV_blank>failed:<S2SV_blank>%s" , //<S2SV> host -> name , ( errstr == NULL ) ? "Unknown<S2SV_blank>problem" : errstr ) ; //<S2SV> if ( res != NULL ) //<S2SV> snmp_free_pdu ( res ) ; //<S2SV> res = NULL ; //<S2SV> req = NULL ; //<S2SV> sfree ( errstr ) ; //<S2SV> csnmp_host_close_session ( host ) ; //<S2SV> status = - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> status = 0 ; //<S2SV> assert ( res != NULL ) ; //<S2SV> c_release ( LOG_INFO , & host -> complaint , //<S2SV> "snmp<S2SV_blank>plugin:<S2SV_blank>host<S2SV_blank>%s:<S2SV_blank>snmp_sess_synch_response<S2SV_blank>successful." , //<S2SV> host -> name ) ; //<S2SV> vb = res -> variables ; //<S2SV> if ( vb == NULL ) { //<S2SV> status = - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> for ( vb = res -> variables , i = 0 ; ( vb != NULL ) ; //<S2SV> vb = vb -> next_variable , i ++ ) { //<S2SV> while ( ( i < oid_list_len ) && ! oid_list_todo [ i ] ) //<S2SV> i ++ ; //<S2SV> if ( ( data -> instance . oid . oid_len > 0 ) && ( i == data -> values_len ) ) { //<S2SV> if ( ( vb -> type == SNMP_ENDOFMIBVIEW ) || //<S2SV> ( snmp_oid_ncompare ( //<S2SV> data -> instance . oid . oid , data -> instance . oid . oid_len , vb -> name , //<S2SV> vb -> name_length , data -> instance . oid . oid_len ) != 0 ) ) { //<S2SV> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>host<S2SV_blank>=<S2SV_blank>%s;<S2SV_blank>data<S2SV_blank>=<S2SV_blank>%s;<S2SV_blank>Instance<S2SV_blank>left<S2SV_blank>its<S2SV_blank>subtree." , //<S2SV> host -> name , data -> name ) ; //<S2SV> oid_list_todo [ i ] = 0 ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( csnmp_instance_list_add ( & instance_list_head , & instance_list_tail , //<S2SV> res , host , data ) != 0 ) { //<S2SV> ERROR ( "snmp<S2SV_blank>plugin:<S2SV_blank>host<S2SV_blank>%s:<S2SV_blank>csnmp_instance_list_add<S2SV_blank>failed." , //<S2SV> host -> name ) ; //<S2SV> status = - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> } else //<S2SV> { //<S2SV> csnmp_table_values_t * vt ; //<S2SV> oid_t vb_name ; //<S2SV> oid_t suffix ; //<S2SV> int ret ; //<S2SV> csnmp_oid_init ( & vb_name , vb -> name , vb -> name_length ) ; //<S2SV> ret = csnmp_oid_suffix ( & suffix , & vb_name , data -> values + i ) ; //<S2SV> if ( ret != 0 ) { //<S2SV> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>host<S2SV_blank>=<S2SV_blank>%s;<S2SV_blank>data<S2SV_blank>=<S2SV_blank>%s;<S2SV_blank>i<S2SV_blank>=<S2SV_blank>%zu;<S2SV_blank>" //<S2SV> "Value<S2SV_blank>probably<S2SV_blank>left<S2SV_blank>its<S2SV_blank>subtree." , //<S2SV> host -> name , data -> name , i ) ; //<S2SV> oid_list_todo [ i ] = 0 ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ( value_list_tail [ i ] != NULL ) && //<S2SV> ( csnmp_oid_compare ( & suffix , & value_list_tail [ i ] -> suffix ) <= 0 ) ) { //<S2SV> DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>host<S2SV_blank>=<S2SV_blank>%s;<S2SV_blank>data<S2SV_blank>=<S2SV_blank>%s;<S2SV_blank>i<S2SV_blank>=<S2SV_blank>%zu;<S2SV_blank>" //<S2SV> "Suffix<S2SV_blank>is<S2SV_blank>not<S2SV_blank>increasing." , //<S2SV> host -> name , data -> name , i ) ; //<S2SV> oid_list_todo [ i ] = 0 ; //<S2SV> continue ; //<S2SV> } //<S2SV> vt = calloc ( 1 , sizeof ( * vt ) ) ; //<S2SV> if ( vt == NULL ) { //<S2SV> ERROR ( "snmp<S2SV_blank>plugin:<S2SV_blank>calloc<S2SV_blank>failed." ) ; //<S2SV> status = - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> vt -> value = //<S2SV> csnmp_value_list_to_value ( vb , ds -> ds [ i ] . type , data -> scale , //<S2SV> data -> shift , host -> name , data -> name ) ; //<S2SV> memcpy ( & vt -> suffix , & suffix , sizeof ( vt -> suffix ) ) ; //<S2SV> vt -> next = NULL ; //<S2SV> if ( value_list_tail [ i ] == NULL ) //<S2SV> value_list_head [ i ] = vt ; //<S2SV> else //<S2SV> value_list_tail [ i ] -> next = vt ; //<S2SV> value_list_tail [ i ] = vt ; //<S2SV> } //<S2SV> memcpy ( oid_list [ i ] . oid , vb -> name , sizeof ( oid ) * vb -> name_length ) ; //<S2SV> oid_list [ i ] . oid_len = vb -> name_length ; //<S2SV> } //<S2SV> if ( res != NULL ) //<S2SV> snmp_free_pdu ( res ) ; //<S2SV> res = NULL ; //<S2SV> } //<S2SV> if ( res != NULL ) //<S2SV> snmp_free_pdu ( res ) ; //<S2SV> res = NULL ; //<S2SV> if ( req != NULL ) //<S2SV> snmp_free_pdu ( req ) ; //<S2SV> req = NULL ; //<S2SV> if ( status == 0 ) //<S2SV> csnmp_dispatch_table ( host , data , instance_list_head , value_list_head ) ; //<S2SV> while ( instance_list_head != NULL ) { //<S2SV> csnmp_list_instances_t * next = instance_list_head -> next ; //<S2SV> sfree ( instance_list_head ) ; //<S2SV> instance_list_head = next ; //<S2SV> } //<S2SV> for ( i = 0 ; i < data -> values_len ; i ++ ) { //<S2SV> while ( value_list_head [ i ] != NULL ) { //<S2SV> csnmp_table_values_t * next = value_list_head [ i ] -> next ; //<S2SV> sfree ( value_list_head [ i ] ) ; //<S2SV> value_list_head [ i ] = next ; //<S2SV> } //<S2SV> } //<S2SV> sfree ( value_list_head ) ; //<S2SV> sfree ( value_list_tail ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> 