static int parse_packet ( sockent_t * se , //<S2SV> void * buffer , size_t buffer_size , int flags , //<S2SV> const char * username ) //<S2SV> { //<S2SV> int status ; //<S2SV> value_list_t vl = VALUE_LIST_INIT ; //<S2SV> notification_t n ; //<S2SV> # if HAVE_LIBGCRYPT //<S2SV> int packet_was_signed = ( flags & PP_SIGNED ) ; //<S2SV> int packet_was_encrypted = ( flags & PP_ENCRYPTED ) ; //<S2SV> int printed_ignore_warning = 0 ; //<S2SV> # endif //<S2SV> memset ( & vl , '\\0' , sizeof ( vl ) ) ; //<S2SV> memset ( & n , '\\0' , sizeof ( n ) ) ; //<S2SV> status = 0 ; //<S2SV> while ( ( status == 0 ) && ( 0 < buffer_size ) //<S2SV> && ( ( unsigned int ) buffer_size > sizeof ( part_header_t ) ) ) //<S2SV> { //<S2SV> uint16_t pkg_length ; //<S2SV> uint16_t pkg_type ; //<S2SV> memcpy ( ( void * ) & pkg_type , //<S2SV> ( void * ) buffer , //<S2SV> sizeof ( pkg_type ) ) ; //<S2SV> memcpy ( ( void * ) & pkg_length , //<S2SV> ( void * ) ( buffer + sizeof ( pkg_type ) ) , //<S2SV> sizeof ( pkg_length ) ) ; //<S2SV> pkg_length = ntohs ( pkg_length ) ; //<S2SV> pkg_type = ntohs ( pkg_type ) ; //<S2SV> if ( pkg_length > buffer_size ) //<S2SV> break ; //<S2SV> if ( pkg_length < ( 2 * sizeof ( uint16_t ) ) ) //<S2SV> break ; //<S2SV> if ( pkg_type == TYPE_ENCR_AES256 ) //<S2SV> { //<S2SV> status = parse_part_encr_aes256 ( se , //<S2SV> & buffer , & buffer_size , flags ) ; //<S2SV> if ( status != 0 ) //<S2SV> { //<S2SV> ERROR ( "network<S2SV_blank>plugin:<S2SV_blank>Decrypting<S2SV_blank>AES256<S2SV_blank>" //<S2SV> "part<S2SV_blank>failed<S2SV_blank>" //<S2SV> "with<S2SV_blank>status<S2SV_blank>%i." , status ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> # if HAVE_LIBGCRYPT //<S2SV> else if ( ( se -> data . server . security_level == SECURITY_LEVEL_ENCRYPT ) //<S2SV> && ( packet_was_encrypted == 0 ) ) //<S2SV> { //<S2SV> if ( printed_ignore_warning == 0 ) //<S2SV> { //<S2SV> INFO ( "network<S2SV_blank>plugin:<S2SV_blank>Unencrypted<S2SV_blank>packet<S2SV_blank>or<S2SV_blank>" //<S2SV> "part<S2SV_blank>has<S2SV_blank>been<S2SV_blank>ignored." ) ; //<S2SV> printed_ignore_warning = 1 ; //<S2SV> } //<S2SV> buffer = ( ( char * ) buffer ) + pkg_length ; //<S2SV> buffer_size -= ( size_t ) pkg_length ; //<S2SV> continue ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( pkg_type == TYPE_SIGN_SHA256 ) //<S2SV> { //<S2SV> status = parse_part_sign_sha256 ( se , //<S2SV> & buffer , & buffer_size , flags ) ; //<S2SV> if ( status != 0 ) //<S2SV> { //<S2SV> ERROR ( "network<S2SV_blank>plugin:<S2SV_blank>Verifying<S2SV_blank>HMAC-SHA-256<S2SV_blank>" //<S2SV> "signature<S2SV_blank>failed<S2SV_blank>" //<S2SV> "with<S2SV_blank>status<S2SV_blank>%i." , status ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> # if HAVE_LIBGCRYPT //<S2SV> else if ( ( se -> data . server . security_level == SECURITY_LEVEL_SIGN ) //<S2SV> && ( packet_was_encrypted == 0 ) //<S2SV> && ( packet_was_signed == 0 ) ) //<S2SV> { //<S2SV> if ( printed_ignore_warning == 0 ) //<S2SV> { //<S2SV> INFO ( "network<S2SV_blank>plugin:<S2SV_blank>Unsigned<S2SV_blank>packet<S2SV_blank>or<S2SV_blank>" //<S2SV> "part<S2SV_blank>has<S2SV_blank>been<S2SV_blank>ignored." ) ; //<S2SV> printed_ignore_warning = 1 ; //<S2SV> } //<S2SV> buffer = ( ( char * ) buffer ) + pkg_length ; //<S2SV> buffer_size -= ( size_t ) pkg_length ; //<S2SV> continue ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( pkg_type == TYPE_VALUES ) //<S2SV> { //<S2SV> status = parse_part_values ( & buffer , & buffer_size , //<S2SV> & vl . values , & vl . values_len ) ; //<S2SV> if ( status != 0 ) //<S2SV> break ; //<S2SV> network_dispatch_values ( & vl , username ) ; //<S2SV> sfree ( vl . values ) ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_TIME ) //<S2SV> { //<S2SV> uint64_t tmp = 0 ; //<S2SV> status = parse_part_number ( & buffer , & buffer_size , //<S2SV> & tmp ) ; //<S2SV> if ( status == 0 ) //<S2SV> { //<S2SV> vl . time = TIME_T_TO_CDTIME_T ( tmp ) ; //<S2SV> n . time = TIME_T_TO_CDTIME_T ( tmp ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_TIME_HR ) //<S2SV> { //<S2SV> uint64_t tmp = 0 ; //<S2SV> status = parse_part_number ( & buffer , & buffer_size , //<S2SV> & tmp ) ; //<S2SV> if ( status == 0 ) //<S2SV> { //<S2SV> vl . time = ( cdtime_t ) tmp ; //<S2SV> n . time = ( cdtime_t ) tmp ; //<S2SV> } //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_INTERVAL ) //<S2SV> { //<S2SV> uint64_t tmp = 0 ; //<S2SV> status = parse_part_number ( & buffer , & buffer_size , //<S2SV> & tmp ) ; //<S2SV> if ( status == 0 ) //<S2SV> vl . interval = TIME_T_TO_CDTIME_T ( tmp ) ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_INTERVAL_HR ) //<S2SV> { //<S2SV> uint64_t tmp = 0 ; //<S2SV> status = parse_part_number ( & buffer , & buffer_size , //<S2SV> & tmp ) ; //<S2SV> if ( status == 0 ) //<S2SV> vl . interval = ( cdtime_t ) tmp ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_HOST ) //<S2SV> { //<S2SV> status = parse_part_string ( & buffer , & buffer_size , //<S2SV> vl . host , sizeof ( vl . host ) ) ; //<S2SV> if ( status == 0 ) //<S2SV> sstrncpy ( n . host , vl . host , sizeof ( n . host ) ) ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_PLUGIN ) //<S2SV> { //<S2SV> status = parse_part_string ( & buffer , & buffer_size , //<S2SV> vl . plugin , sizeof ( vl . plugin ) ) ; //<S2SV> if ( status == 0 ) //<S2SV> sstrncpy ( n . plugin , vl . plugin , //<S2SV> sizeof ( n . plugin ) ) ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_PLUGIN_INSTANCE ) //<S2SV> { //<S2SV> status = parse_part_string ( & buffer , & buffer_size , //<S2SV> vl . plugin_instance , //<S2SV> sizeof ( vl . plugin_instance ) ) ; //<S2SV> if ( status == 0 ) //<S2SV> sstrncpy ( n . plugin_instance , //<S2SV> vl . plugin_instance , //<S2SV> sizeof ( n . plugin_instance ) ) ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_TYPE ) //<S2SV> { //<S2SV> status = parse_part_string ( & buffer , & buffer_size , //<S2SV> vl . type , sizeof ( vl . type ) ) ; //<S2SV> if ( status == 0 ) //<S2SV> sstrncpy ( n . type , vl . type , sizeof ( n . type ) ) ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_TYPE_INSTANCE ) //<S2SV> { //<S2SV> status = parse_part_string ( & buffer , & buffer_size , //<S2SV> vl . type_instance , //<S2SV> sizeof ( vl . type_instance ) ) ; //<S2SV> if ( status == 0 ) //<S2SV> sstrncpy ( n . type_instance , vl . type_instance , //<S2SV> sizeof ( n . type_instance ) ) ; //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_MESSAGE ) //<S2SV> { //<S2SV> status = parse_part_string ( & buffer , & buffer_size , //<S2SV> n . message , sizeof ( n . message ) ) ; //<S2SV> if ( status != 0 ) //<S2SV> { //<S2SV> } //<S2SV> else if ( ( n . severity != NOTIF_FAILURE ) //<S2SV> && ( n . severity != NOTIF_WARNING ) //<S2SV> && ( n . severity != NOTIF_OKAY ) ) //<S2SV> { //<S2SV> INFO ( "network<S2SV_blank>plugin:<S2SV_blank>" //<S2SV> "Ignoring<S2SV_blank>notification<S2SV_blank>with<S2SV_blank>" //<S2SV> "unknown<S2SV_blank>severity<S2SV_blank>%i." , //<S2SV> n . severity ) ; //<S2SV> } //<S2SV> else if ( n . time <= 0 ) //<S2SV> { //<S2SV> INFO ( "network<S2SV_blank>plugin:<S2SV_blank>" //<S2SV> "Ignoring<S2SV_blank>notification<S2SV_blank>with<S2SV_blank>" //<S2SV> "time<S2SV_blank>==<S2SV_blank>0." ) ; //<S2SV> } //<S2SV> else if ( strlen ( n . message ) <= 0 ) //<S2SV> { //<S2SV> INFO ( "network<S2SV_blank>plugin:<S2SV_blank>" //<S2SV> "Ignoring<S2SV_blank>notification<S2SV_blank>with<S2SV_blank>" //<S2SV> "an<S2SV_blank>empty<S2SV_blank>message." ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> network_dispatch_notification ( & n ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( pkg_type == TYPE_SEVERITY ) //<S2SV> { //<S2SV> uint64_t tmp = 0 ; //<S2SV> status = parse_part_number ( & buffer , & buffer_size , //<S2SV> & tmp ) ; //<S2SV> if ( status == 0 ) //<S2SV> n . severity = ( int ) tmp ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> DEBUG ( "network<S2SV_blank>plugin:<S2SV_blank>parse_packet:<S2SV_blank>Unknown<S2SV_blank>part" //<S2SV> "<S2SV_blank>type:<S2SV_blank>0x%04hx" , pkg_type ) ; //<S2SV> buffer = ( ( char * ) buffer ) + pkg_length ; //<S2SV> buffer_size -= ( size_t ) pkg_length ; //<S2SV> } //<S2SV> } //<S2SV> if ( status == 0 && buffer_size > 0 ) //<S2SV> WARNING ( "network<S2SV_blank>plugin:<S2SV_blank>parse_packet:<S2SV_blank>Received<S2SV_blank>truncated<S2SV_blank>" //<S2SV> "packet,<S2SV_blank>try<S2SV_blank>increasing<S2SV_blank>`MaxPacketSize\'" ) ; //<S2SV> return ( status ) ; //<S2SV> } //<S2SV> 