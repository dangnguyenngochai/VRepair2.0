static void uv__process_child_init ( const uv_process_options_t * options , //<S2SV> int stdio_count , //<S2SV> int ( * pipes ) [ 2 ] , //<S2SV> int error_fd ) { //<S2SV> int close_fd ; //<S2SV> int use_fd ; //<S2SV> int fd ; //<S2SV> if ( options -> flags & UV_PROCESS_DETACHED ) //<S2SV> setsid ( ) ; //<S2SV> for ( fd = 0 ; fd < stdio_count ; fd ++ ) { //<S2SV> close_fd = pipes [ fd ] [ 0 ] ; //<S2SV> use_fd = pipes [ fd ] [ 1 ] ; //<S2SV> if ( use_fd < 0 ) { //<S2SV> if ( fd >= 3 ) //<S2SV> continue ; //<S2SV> else { //<S2SV> use_fd = open ( "/dev/null" , fd == 0 ? O_RDONLY : O_RDWR ) ; //<S2SV> close_fd = use_fd ; //<S2SV> if ( use_fd == - 1 ) { //<S2SV> uv__write_int ( error_fd , - errno ) ; //<S2SV> perror ( "failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>stdio" ) ; //<S2SV> _exit ( 127 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( fd == use_fd ) //<S2SV> uv__cloexec ( use_fd , 0 ) ; //<S2SV> else //<S2SV> dup2 ( use_fd , fd ) ; //<S2SV> if ( fd <= 2 ) //<S2SV> uv__nonblock ( fd , 0 ) ; //<S2SV> if ( close_fd != - 1 ) //<S2SV> uv__close ( close_fd ) ; //<S2SV> } //<S2SV> for ( fd = 0 ; fd < stdio_count ; fd ++ ) { //<S2SV> use_fd = pipes [ fd ] [ 1 ] ; //<S2SV> if ( use_fd >= 0 && fd != use_fd ) //<S2SV> close ( use_fd ) ; //<S2SV> } //<S2SV> if ( options -> cwd != NULL && chdir ( options -> cwd ) ) { //<S2SV> uv__write_int ( error_fd , - errno ) ; //<S2SV> perror ( "chdir()" ) ; //<S2SV> _exit ( 127 ) ; //<S2SV> } //<S2SV> if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { //<S2SV> uv__write_int ( error_fd , - errno ) ; //<S2SV> perror ( "setgid()" ) ; //<S2SV> _exit ( 127 ) ; //<S2SV> } //<S2SV> if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { //<S2SV> uv__write_int ( error_fd , - errno ) ; //<S2SV> perror ( "setuid()" ) ; //<S2SV> _exit ( 127 ) ; //<S2SV> } //<S2SV> if ( options -> env != NULL ) { //<S2SV> environ = options -> env ; //<S2SV> } //<S2SV> execvp ( options -> file , options -> args ) ; //<S2SV> uv__write_int ( error_fd , - errno ) ; //<S2SV> perror ( "execvp()" ) ; //<S2SV> _exit ( 127 ) ; //<S2SV> } //<S2SV> 