static int ExecuteSQL ( SQLHDBC hDbc , char * szSQL , char cDelimiter , int bColumnNames , int bHTMLTable ) //<S2SV> { //<S2SV> SQLHSTMT hStmt ; //<S2SV> SQLTCHAR szSepLine [ 32001 ] ; //<S2SV> SQLTCHAR szUcSQL [ 32001 ] ; //<S2SV> SQLSMALLINT cols ; //<S2SV> SQLINTEGER ret ; //<S2SV> SQLLEN nRows = 0 ; //<S2SV> szSepLine [ 0 ] = 0 ; //<S2SV> ansi_to_unicode ( szSQL , szUcSQL ) ; //<S2SV> if ( SQLAllocStmt ( hDbc , & hStmt ) != SQL_SUCCESS ) //<S2SV> { //<S2SV> if ( bVerbose ) DumpODBCLog ( hEnv , hDbc , 0 ) ; //<S2SV> fprintf ( stderr , "[ISQL]ERROR:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>SQLAllocStmt\\n" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( buseED ) { //<S2SV> ret = SQLExecDirect ( hStmt , szUcSQL , SQL_NTS ) ; //<S2SV> if ( ret == SQL_NO_DATA ) //<S2SV> { //<S2SV> fprintf ( stderr , "[ISQL]INFO:<S2SV_blank>SQLExecDirect<S2SV_blank>returned<S2SV_blank>SQL_NO_DATA\\n" ) ; //<S2SV> } //<S2SV> else if ( ret == SQL_SUCCESS_WITH_INFO ) //<S2SV> { //<S2SV> if ( bVerbose ) DumpODBCLog ( hEnv , hDbc , hStmt ) ; //<S2SV> fprintf ( stderr , "[ISQL]INFO:<S2SV_blank>SQLExecDirect<S2SV_blank>returned<S2SV_blank>SQL_SUCCESS_WITH_INFO\\n" ) ; //<S2SV> } //<S2SV> else if ( ret != SQL_SUCCESS ) //<S2SV> { //<S2SV> if ( bVerbose ) DumpODBCLog ( hEnv , hDbc , hStmt ) ; //<S2SV> fprintf ( stderr , "[ISQL]ERROR:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>SQLExecDirect\\n" ) ; //<S2SV> SQLFreeStmt ( hStmt , SQL_DROP ) ; //<S2SV> free ( szSepLine ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> else { //<S2SV> if ( SQLPrepare ( hStmt , szUcSQL , SQL_NTS ) != SQL_SUCCESS ) //<S2SV> { //<S2SV> if ( bVerbose ) DumpODBCLog ( hEnv , hDbc , hStmt ) ; //<S2SV> fprintf ( stderr , "[ISQL]ERROR:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>SQLPrepare\\n" ) ; //<S2SV> SQLFreeStmt ( hStmt , SQL_DROP ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ret = SQLExecute ( hStmt ) ; //<S2SV> if ( ret == SQL_NO_DATA ) //<S2SV> { //<S2SV> fprintf ( stderr , "[ISQL]INFO:<S2SV_blank>SQLExecute<S2SV_blank>returned<S2SV_blank>SQL_NO_DATA\\n" ) ; //<S2SV> } //<S2SV> else if ( ret == SQL_SUCCESS_WITH_INFO ) //<S2SV> { //<S2SV> if ( bVerbose ) DumpODBCLog ( hEnv , hDbc , hStmt ) ; //<S2SV> fprintf ( stderr , "[ISQL]INFO:<S2SV_blank>SQLExecute<S2SV_blank>returned<S2SV_blank>SQL_SUCCESS_WITH_INFO\\n" ) ; //<S2SV> } //<S2SV> else if ( ret != SQL_SUCCESS ) //<S2SV> { //<S2SV> if ( bVerbose ) DumpODBCLog ( hEnv , hDbc , hStmt ) ; //<S2SV> fprintf ( stderr , "[ISQL]ERROR:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>SQLExecute\\n" ) ; //<S2SV> SQLFreeStmt ( hStmt , SQL_DROP ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> do //<S2SV> { //<S2SV> if ( SQLNumResultCols ( hStmt , & cols ) != SQL_SUCCESS ) //<S2SV> { //<S2SV> if ( bVerbose ) DumpODBCLog ( hEnv , hDbc , hStmt ) ; //<S2SV> fprintf ( stderr , "[ISQL]ERROR:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>SQLNumResultCols\\n" ) ; //<S2SV> SQLFreeStmt ( hStmt , SQL_DROP ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( cols > 0 ) //<S2SV> { //<S2SV> if ( bHTMLTable ) //<S2SV> WriteHeaderHTMLTable ( hStmt ) ; //<S2SV> else if ( cDelimiter == 0 ) //<S2SV> UWriteHeaderNormal ( hStmt , szSepLine ) ; //<S2SV> else if ( cDelimiter && bColumnNames ) //<S2SV> WriteHeaderDelimited ( hStmt , cDelimiter ) ; //<S2SV> if ( bHTMLTable ) //<S2SV> WriteBodyHTMLTable ( hStmt ) ; //<S2SV> else if ( cDelimiter == 0 ) //<S2SV> nRows = WriteBodyNormal ( hStmt ) ; //<S2SV> else //<S2SV> WriteBodyDelimited ( hStmt , cDelimiter ) ; //<S2SV> } //<S2SV> if ( bHTMLTable ) //<S2SV> WriteFooterHTMLTable ( hStmt ) ; //<S2SV> else if ( cDelimiter == 0 ) //<S2SV> UWriteFooterNormal ( hStmt , szSepLine , nRows ) ; //<S2SV> } //<S2SV> while ( SQL_SUCCEEDED ( SQLMoreResults ( hStmt ) ) ) ; //<S2SV> SQLFreeStmt ( hStmt , SQL_DROP ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 