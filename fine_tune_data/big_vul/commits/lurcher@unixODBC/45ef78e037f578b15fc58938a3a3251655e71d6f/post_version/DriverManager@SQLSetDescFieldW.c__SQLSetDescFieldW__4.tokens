SQLRETURN SQLSetDescFieldW ( SQLHDESC descriptor_handle , //<S2SV> SQLSMALLINT rec_number , //<S2SV> SQLSMALLINT field_identifier , //<S2SV> SQLPOINTER value , //<S2SV> SQLINTEGER buffer_length ) //<S2SV> { //<S2SV> DMHDESC descriptor = ( DMHDESC ) descriptor_handle ; //<S2SV> SQLRETURN ret ; //<S2SV> SQLCHAR s1 [ 100 + LOG_MESSAGE_LEN ] ; //<S2SV> int isStrField = 0 ; //<S2SV> if ( ! __validate_desc ( descriptor ) ) //<S2SV> { //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> "Error:<S2SV_blank>SQL_INVALID_HANDLE" ) ; //<S2SV> # ifdef WITH_HANDLE_REDIRECT //<S2SV> { //<S2SV> DMHDESC parent_desc ; //<S2SV> parent_desc = find_parent_handle ( descriptor , SQL_HANDLE_DESC ) ; //<S2SV> if ( parent_desc ) { //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> "Info:<S2SV_blank>found<S2SV_blank>parent<S2SV_blank>handle" ) ; //<S2SV> if ( CHECK_SQLSETDESCFIELDW ( parent_desc -> connection ) ) //<S2SV> { //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> "Info:<S2SV_blank>calling<S2SV_blank>redirected<S2SV_blank>driver<S2SV_blank>function" ) ; //<S2SV> return SQLSETDESCFIELDW ( parent_desc -> connection , //<S2SV> descriptor , //<S2SV> rec_number , //<S2SV> field_identifier , //<S2SV> value , //<S2SV> buffer_length ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> return SQL_INVALID_HANDLE ; //<S2SV> } //<S2SV> function_entry ( descriptor ) ; //<S2SV> if ( log_info . log_flag ) //<S2SV> { //<S2SV> sprintf ( descriptor -> msg , "\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" , //<S2SV> descriptor , //<S2SV> rec_number , //<S2SV> __desc_attr_as_string ( s1 , field_identifier ) , //<S2SV> value , //<S2SV> ( int ) buffer_length ) ; //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> descriptor -> msg ) ; //<S2SV> } //<S2SV> thread_protect ( SQL_HANDLE_DESC , descriptor ) ; //<S2SV> if ( descriptor -> connection -> state < STATE_C4 ) //<S2SV> { //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> "Error:<S2SV_blank>HY010" ) ; //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_HY010 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> if ( __check_stmt_from_desc ( descriptor , STATE_S8 ) || //<S2SV> __check_stmt_from_desc ( descriptor , STATE_S9 ) || //<S2SV> __check_stmt_from_desc ( descriptor , STATE_S10 ) || //<S2SV> __check_stmt_from_desc ( descriptor , STATE_S11 ) || //<S2SV> __check_stmt_from_desc ( descriptor , STATE_S12 ) || //<S2SV> __check_stmt_from_desc ( descriptor , STATE_S13 ) || //<S2SV> __check_stmt_from_desc ( descriptor , STATE_S14 ) || //<S2SV> __check_stmt_from_desc ( descriptor , STATE_S15 ) ) { //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> "Error:<S2SV_blank>HY010" ) ; //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_HY010 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> if ( rec_number < 0 ) //<S2SV> { //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_07009 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> switch ( field_identifier ) //<S2SV> { //<S2SV> case SQL_DESC_ALLOC_TYPE : //<S2SV> case SQL_DESC_ARRAY_SIZE : //<S2SV> case SQL_DESC_ARRAY_STATUS_PTR : //<S2SV> case SQL_DESC_BIND_OFFSET_PTR : //<S2SV> case SQL_DESC_BIND_TYPE : //<S2SV> case SQL_DESC_COUNT : //<S2SV> case SQL_DESC_ROWS_PROCESSED_PTR : //<S2SV> case SQL_DESC_AUTO_UNIQUE_VALUE : //<S2SV> case SQL_DESC_CASE_SENSITIVE : //<S2SV> case SQL_DESC_CONCISE_TYPE : //<S2SV> case SQL_DESC_DATA_PTR : //<S2SV> case SQL_DESC_DATETIME_INTERVAL_CODE : //<S2SV> case SQL_DESC_DATETIME_INTERVAL_PRECISION : //<S2SV> case SQL_DESC_DISPLAY_SIZE : //<S2SV> case SQL_DESC_FIXED_PREC_SCALE : //<S2SV> case SQL_DESC_INDICATOR_PTR : //<S2SV> case SQL_DESC_LENGTH : //<S2SV> case SQL_DESC_NULLABLE : //<S2SV> case SQL_DESC_NUM_PREC_RADIX : //<S2SV> case SQL_DESC_OCTET_LENGTH : //<S2SV> case SQL_DESC_OCTET_LENGTH_PTR : //<S2SV> case SQL_DESC_PARAMETER_TYPE : //<S2SV> case SQL_DESC_PRECISION : //<S2SV> case SQL_DESC_ROWVER : //<S2SV> case SQL_DESC_SCALE : //<S2SV> case SQL_DESC_SEARCHABLE : //<S2SV> case SQL_DESC_TYPE : //<S2SV> case SQL_DESC_UNNAMED : //<S2SV> case SQL_DESC_UNSIGNED : //<S2SV> case SQL_DESC_UPDATABLE : //<S2SV> isStrField = 0 ; //<S2SV> break ; //<S2SV> case SQL_DESC_BASE_COLUMN_NAME : //<S2SV> case SQL_DESC_BASE_TABLE_NAME : //<S2SV> case SQL_DESC_CATALOG_NAME : //<S2SV> case SQL_DESC_LABEL : //<S2SV> case SQL_DESC_LITERAL_PREFIX : //<S2SV> case SQL_DESC_LITERAL_SUFFIX : //<S2SV> case SQL_DESC_LOCAL_TYPE_NAME : //<S2SV> case SQL_DESC_NAME : //<S2SV> case SQL_DESC_SCHEMA_NAME : //<S2SV> case SQL_DESC_TABLE_NAME : //<S2SV> case SQL_DESC_TYPE_NAME : //<S2SV> isStrField = 1 ; //<S2SV> break ; //<S2SV> default : //<S2SV> isStrField = buffer_length != SQL_IS_POINTER && buffer_length != SQL_IS_INTEGER //<S2SV> && buffer_length != SQL_IS_UINTEGER && buffer_length != SQL_IS_SMALLINT && //<S2SV> buffer_length != SQL_IS_USMALLINT ; //<S2SV> } //<S2SV> if ( isStrField && buffer_length < 0 && buffer_length != SQL_NTS ) //<S2SV> { //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_HY090 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> if ( field_identifier == SQL_DESC_COUNT && ( intptr_t ) value < 0 ) //<S2SV> { //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_07009 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> if ( field_identifier == SQL_DESC_PARAMETER_TYPE && ( intptr_t ) value != SQL_PARAM_INPUT //<S2SV> && ( intptr_t ) value != SQL_PARAM_OUTPUT && ( intptr_t ) value != SQL_PARAM_INPUT_OUTPUT && //<S2SV> ( intptr_t ) value != SQL_PARAM_INPUT_OUTPUT_STREAM && ( intptr_t ) value != SQL_PARAM_OUTPUT_STREAM ) //<S2SV> { //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_HY105 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> if ( descriptor -> connection -> unicode_driver || //<S2SV> CHECK_SQLSETDESCFIELDW ( descriptor -> connection ) ) //<S2SV> { //<S2SV> if ( ! CHECK_SQLSETDESCFIELDW ( descriptor -> connection ) ) //<S2SV> { //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> "Error:<S2SV_blank>IM001" ) ; //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_IM001 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> ret = SQLSETDESCFIELDW ( descriptor -> connection , //<S2SV> descriptor -> driver_desc , //<S2SV> rec_number , //<S2SV> field_identifier , //<S2SV> value , //<S2SV> buffer_length ) ; //<S2SV> if ( log_info . log_flag ) //<S2SV> { //<S2SV> sprintf ( descriptor -> msg , //<S2SV> "\\n\\t\\tExit:[%s]" , //<S2SV> __get_return_status ( ret , s1 ) ) ; //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> descriptor -> msg ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> SQLCHAR * ascii_str = NULL ; //<S2SV> if ( ! CHECK_SQLSETDESCFIELD ( descriptor -> connection ) ) //<S2SV> { //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> "Error:<S2SV_blank>IM001" ) ; //<S2SV> __post_internal_error ( & descriptor -> error , //<S2SV> ERROR_IM001 , NULL , //<S2SV> descriptor -> connection -> environment -> requested_version ) ; //<S2SV> return function_return_nodrv ( SQL_HANDLE_DESC , descriptor , SQL_ERROR ) ; //<S2SV> } //<S2SV> switch ( field_identifier ) //<S2SV> { //<S2SV> case SQL_DESC_NAME : //<S2SV> ascii_str = ( SQLCHAR * ) unicode_to_ansi_alloc ( value , buffer_length , descriptor -> connection , NULL ) ; //<S2SV> value = ascii_str ; //<S2SV> buffer_length = strlen ( ( char * ) ascii_str ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> ret = SQLSETDESCFIELD ( descriptor -> connection , //<S2SV> descriptor -> driver_desc , //<S2SV> rec_number , //<S2SV> field_identifier , //<S2SV> value , //<S2SV> buffer_length ) ; //<S2SV> if ( log_info . log_flag ) //<S2SV> { //<S2SV> sprintf ( descriptor -> msg , //<S2SV> "\\n\\t\\tExit:[%s]" , //<S2SV> __get_return_status ( ret , s1 ) ) ; //<S2SV> dm_log_write ( __FILE__ , //<S2SV> __LINE__ , //<S2SV> LOG_INFO , //<S2SV> LOG_INFO , //<S2SV> descriptor -> msg ) ; //<S2SV> } //<S2SV> if ( ascii_str ) //<S2SV> { //<S2SV> free ( ascii_str ) ; //<S2SV> } //<S2SV> } //<S2SV> return function_return ( SQL_HANDLE_DESC , descriptor , ret ) ; //<S2SV> } //<S2SV> 