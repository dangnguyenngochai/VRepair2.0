static void //<S2SV> dhcp6opt_print ( netdissect_options * ndo , //<S2SV> const u_char * cp , const u_char * ep ) //<S2SV> { //<S2SV> const struct dhcp6opt * dh6o ; //<S2SV> const u_char * tp ; //<S2SV> size_t i ; //<S2SV> uint16_t opttype ; //<S2SV> size_t optlen ; //<S2SV> uint8_t auth_proto ; //<S2SV> u_int authinfolen , authrealmlen ; //<S2SV> int remain_len ; //<S2SV> int label_len ; //<S2SV> uint16_t subopt_code ; //<S2SV> uint16_t subopt_len ; //<S2SV> if ( cp == ep ) //<S2SV> return ; //<S2SV> while ( cp < ep ) { //<S2SV> if ( ep < cp + sizeof ( * dh6o ) ) //<S2SV> goto trunc ; //<S2SV> dh6o = ( const struct dhcp6opt * ) cp ; //<S2SV> ND_TCHECK ( * dh6o ) ; //<S2SV> optlen = EXTRACT_16BITS ( & dh6o -> dh6opt_len ) ; //<S2SV> if ( ep < cp + sizeof ( * dh6o ) + optlen ) //<S2SV> goto trunc ; //<S2SV> opttype = EXTRACT_16BITS ( & dh6o -> dh6opt_type ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(%s" , tok2str ( dh6opt_str , "opt_%u" , opttype ) ) ) ; //<S2SV> ND_TCHECK2 ( * ( cp + sizeof ( * dh6o ) ) , optlen ) ; //<S2SV> switch ( opttype ) { //<S2SV> case DH6OPT_CLIENTID : //<S2SV> case DH6OPT_SERVERID : //<S2SV> if ( optlen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> switch ( EXTRACT_16BITS ( tp ) ) { //<S2SV> case 1 : //<S2SV> if ( optlen >= 2 + 6 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hwaddr/time<S2SV_blank>type<S2SV_blank>%u<S2SV_blank>time<S2SV_blank>%u<S2SV_blank>" , //<S2SV> EXTRACT_16BITS ( & tp [ 2 ] ) , //<S2SV> EXTRACT_32BITS ( & tp [ 4 ] ) ) ) ; //<S2SV> for ( i = 8 ; i < optlen ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , tp [ i ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 2 : //<S2SV> if ( optlen >= 2 + 8 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>vid<S2SV_blank>" ) ) ; //<S2SV> for ( i = 2 ; i < 2 + 8 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , tp [ i ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 3 : //<S2SV> if ( optlen >= 2 + 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hwaddr<S2SV_blank>type<S2SV_blank>%u<S2SV_blank>" , //<S2SV> EXTRACT_16BITS ( & tp [ 2 ] ) ) ) ; //<S2SV> for ( i = 4 ; i < optlen ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , tp [ i ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type<S2SV_blank>%d)" , EXTRACT_16BITS ( tp ) ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case DH6OPT_IA_ADDR : //<S2SV> if ( optlen < 24 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , & tp [ 0 ] ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>pltime:%u<S2SV_blank>vltime:%u" , //<S2SV> EXTRACT_32BITS ( & tp [ 16 ] ) , //<S2SV> EXTRACT_32BITS ( & tp [ 20 ] ) ) ) ; //<S2SV> if ( optlen > 24 ) { //<S2SV> dhcp6opt_print ( ndo , tp + 24 , tp + optlen ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_ORO : //<S2SV> case DH6OPT_ERO : //<S2SV> if ( optlen % 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> for ( i = 0 ; i < optlen ; i += 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , //<S2SV> tok2str ( dh6opt_str , "opt_%u" , EXTRACT_16BITS ( & tp [ i ] ) ) ) ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_PREFERENCE : //<S2SV> if ( optlen != 1 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%d)" , * tp ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_ELAPSED_TIME : //<S2SV> if ( optlen != 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%d)" , EXTRACT_16BITS ( tp ) ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_RELAY_MSG : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(" ) ) ; //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> dhcp6_print ( ndo , tp , optlen ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_AUTH : //<S2SV> if ( optlen < 11 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> auth_proto = * tp ; //<S2SV> switch ( auth_proto ) { //<S2SV> case DH6OPT_AUTHPROTO_DELAYED : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>proto:<S2SV_blank>delayed" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_AUTHPROTO_RECONFIG : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>proto:<S2SV_blank>reconfigure" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>proto:<S2SV_blank>%d" , auth_proto ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp ++ ; //<S2SV> switch ( * tp ) { //<S2SV> case DH6OPT_AUTHALG_HMACMD5 : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>alg:<S2SV_blank>HMAC-MD5" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>alg:<S2SV_blank>%d" , * tp ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp ++ ; //<S2SV> switch ( * tp ) { //<S2SV> case DH6OPT_AUTHRDM_MONOCOUNTER : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>RDM:<S2SV_blank>mono" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>RDM:<S2SV_blank>%d" , * tp ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp ++ ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>RD:" ) ) ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ , tp += 2 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%04x" , EXTRACT_16BITS ( tp ) ) ) ; //<S2SV> authinfolen = optlen - 11 ; //<S2SV> switch ( auth_proto ) { //<S2SV> case DH6OPT_AUTHPROTO_DELAYED : //<S2SV> if ( authinfolen == 0 ) //<S2SV> break ; //<S2SV> if ( authinfolen < 20 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>??" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> authrealmlen = authinfolen - 20 ; //<S2SV> if ( authrealmlen > 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>realm:<S2SV_blank>" ) ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < authrealmlen ; i ++ , tp ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , * tp ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>key<S2SV_blank>ID:<S2SV_blank>%08x" , EXTRACT_32BITS ( tp ) ) ) ; //<S2SV> tp += 4 ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>HMAC-MD5:" ) ) ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ , tp += 4 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%08x" , EXTRACT_32BITS ( tp ) ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_AUTHPROTO_RECONFIG : //<S2SV> if ( authinfolen != 17 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>??" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( * tp ++ ) { //<S2SV> case DH6OPT_AUTHRECONFIG_KEY : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>reconfig-key" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_AUTHRECONFIG_HMACMD5 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type:<S2SV_blank>HMAC-MD5" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type:<S2SV_blank>??" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>value:" ) ) ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ , tp += 4 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%08x" , EXTRACT_32BITS ( tp ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>??" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_RAPID_COMMIT : //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_INTERFACE_ID : //<S2SV> case DH6OPT_SUBSCRIBER_ID : //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> for ( i = 0 ; i < optlen && i < 10 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , tp [ i ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_RECONF_MSG : //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> switch ( * tp ) { //<S2SV> case DH6_RENEW : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>for<S2SV_blank>renew)" ) ) ; //<S2SV> break ; //<S2SV> case DH6_INFORM_REQ : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>for<S2SV_blank>inf-req)" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>for<S2SV_blank>?\\?\\?(%02x))" , * tp ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case DH6OPT_RECONF_ACCEPT : //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_SIP_SERVER_A : //<S2SV> case DH6OPT_DNS_SERVERS : //<S2SV> case DH6OPT_SNTP_SERVERS : //<S2SV> case DH6OPT_NIS_SERVERS : //<S2SV> case DH6OPT_NISP_SERVERS : //<S2SV> case DH6OPT_BCMCS_SERVER_A : //<S2SV> case DH6OPT_PANA_AGENT : //<S2SV> case DH6OPT_LQ_CLIENT_LINK : //<S2SV> if ( optlen % 16 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> for ( i = 0 ; i < optlen ; i += 16 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , & tp [ i ] ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_SIP_SERVER_D : //<S2SV> case DH6OPT_DOMAIN_LIST : //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> while ( tp < cp + sizeof ( * dh6o ) + optlen ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> if ( ( tp = ns_nprint ( ndo , tp , cp + sizeof ( * dh6o ) + optlen ) ) == NULL ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_STATUS_CODE : //<S2SV> if ( optlen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s)" , dhcp6stcode ( EXTRACT_16BITS ( & tp [ 0 ] ) ) ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_IA_NA : //<S2SV> case DH6OPT_IA_PD : //<S2SV> if ( optlen < 12 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>IAID:%u<S2SV_blank>T1:%u<S2SV_blank>T2:%u" , //<S2SV> EXTRACT_32BITS ( & tp [ 0 ] ) , //<S2SV> EXTRACT_32BITS ( & tp [ 4 ] ) , //<S2SV> EXTRACT_32BITS ( & tp [ 8 ] ) ) ) ; //<S2SV> if ( optlen > 12 ) { //<S2SV> dhcp6opt_print ( ndo , tp + 12 , tp + optlen ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_IA_TA : //<S2SV> if ( optlen < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>IAID:%u" , EXTRACT_32BITS ( tp ) ) ) ; //<S2SV> if ( optlen > 4 ) { //<S2SV> dhcp6opt_print ( ndo , tp + 4 , tp + optlen ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_IA_PD_PREFIX : //<S2SV> if ( optlen < 25 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s/%d" , ip6addr_string ( ndo , & tp [ 9 ] ) , tp [ 8 ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>pltime:%u<S2SV_blank>vltime:%u" , //<S2SV> EXTRACT_32BITS ( & tp [ 0 ] ) , //<S2SV> EXTRACT_32BITS ( & tp [ 4 ] ) ) ) ; //<S2SV> if ( optlen > 25 ) { //<S2SV> dhcp6opt_print ( ndo , tp + 25 , tp + optlen ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_LIFETIME : //<S2SV> case DH6OPT_CLT_TIME : //<S2SV> if ( optlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%d)" , EXTRACT_32BITS ( tp ) ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_REMOTE_ID : //<S2SV> if ( optlen < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%d<S2SV_blank>" , EXTRACT_32BITS ( tp ) ) ) ; //<S2SV> for ( i = 4 ; i < optlen && i < 14 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , tp [ i ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_LQ_QUERY : //<S2SV> if ( optlen < 17 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> switch ( * tp ) { //<S2SV> case 1 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>by-address" ) ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>by-clientID" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type_%d" , ( int ) * tp ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , & tp [ 1 ] ) ) ) ; //<S2SV> if ( optlen > 17 ) { //<S2SV> dhcp6opt_print ( ndo , tp + 17 , tp + optlen ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_CLIENT_DATA : //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> if ( optlen > 0 ) { //<S2SV> dhcp6opt_print ( ndo , tp , tp + optlen ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_LQ_RELAY_DATA : //<S2SV> if ( optlen < 16 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s<S2SV_blank>" , ip6addr_string ( ndo , & tp [ 0 ] ) ) ) ; //<S2SV> for ( i = 16 ; i < optlen && i < 26 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , tp [ i ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_NTP_SERVER : //<S2SV> if ( optlen < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> while ( tp < cp + sizeof ( * dh6o ) + optlen - 4 ) { //<S2SV> subopt_code = EXTRACT_16BITS ( tp ) ; //<S2SV> tp += 2 ; //<S2SV> subopt_len = EXTRACT_16BITS ( tp ) ; //<S2SV> tp += 2 ; //<S2SV> if ( tp + subopt_len > cp + sizeof ( * dh6o ) + optlen ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>subopt:%d" , subopt_code ) ) ; //<S2SV> switch ( subopt_code ) { //<S2SV> case DH6OPT_NTP_SUBOPTION_SRV_ADDR : //<S2SV> case DH6OPT_NTP_SUBOPTION_MC_ADDR : //<S2SV> if ( subopt_len != 16 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , & tp [ 0 ] ) ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_NTP_SUBOPTION_SRV_FQDN : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> if ( ns_nprint ( ndo , tp , tp + subopt_len ) == NULL ) //<S2SV> goto trunc ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp += subopt_len ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_AFTR_NAME : //<S2SV> if ( optlen < 3 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> remain_len = optlen ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> while ( remain_len && * tp ) { //<S2SV> label_len = * tp ++ ; //<S2SV> if ( label_len < remain_len - 1 ) { //<S2SV> ( void ) fn_printn ( ndo , tp , label_len , NULL ) ; //<S2SV> tp += label_len ; //<S2SV> remain_len -= ( label_len + 1 ) ; //<S2SV> if ( * tp ) ND_PRINT ( ( ndo , "." ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case DH6OPT_NEW_POSIX_TIMEZONE : //<S2SV> case DH6OPT_NEW_TZDB_TIMEZONE : //<S2SV> case DH6OPT_MUDURL : //<S2SV> if ( optlen < 5 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tp = ( const u_char * ) ( dh6o + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "=" ) ) ; //<S2SV> ( void ) fn_printn ( ndo , tp , ( u_int ) optlen , NULL ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> cp += sizeof ( * dh6o ) + optlen ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|dhcp6ext]" ) ) ; //<S2SV> } //<S2SV> 