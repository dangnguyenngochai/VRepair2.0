static int //<S2SV> cfm_network_addr_print ( netdissect_options * ndo , //<S2SV> register const u_char * tptr , const u_int length ) //<S2SV> { //<S2SV> u_int network_addr_type ; //<S2SV> u_int hexdump = FALSE ; //<S2SV> if ( length < 1 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Network<S2SV_blank>Address<S2SV_blank>Type<S2SV_blank>(invalid,<S2SV_blank>no<S2SV_blank>data" ) ) ; //<S2SV> return hexdump ; //<S2SV> } //<S2SV> network_addr_type = * tptr ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Network<S2SV_blank>Address<S2SV_blank>Type<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( af_values , "Unknown" , network_addr_type ) , //<S2SV> network_addr_type ) ) ; //<S2SV> switch ( network_addr_type ) { //<S2SV> case AFNUM_INET : //<S2SV> if ( length != 1 + 4 ) { //<S2SV> ND_PRINT ( ( ndo , "(invalid<S2SV_blank>IPv4<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , length - 1 ) ) ; //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , ipaddr_string ( ndo , tptr + 1 ) ) ) ; //<S2SV> break ; //<S2SV> case AFNUM_INET6 : //<S2SV> if ( length != 1 + 16 ) { //<S2SV> ND_PRINT ( ( ndo , "(invalid<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , length - 1 ) ) ; //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , ip6addr_string ( ndo , tptr + 1 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> } //<S2SV> return hexdump ; //<S2SV> } //<S2SV> 