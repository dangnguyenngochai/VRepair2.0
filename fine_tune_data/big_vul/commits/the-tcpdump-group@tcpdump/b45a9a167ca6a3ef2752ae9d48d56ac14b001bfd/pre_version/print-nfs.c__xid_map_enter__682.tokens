static int //<S2SV> xid_map_enter ( netdissect_options * ndo , //<S2SV> const struct sunrpc_msg * rp , const u_char * bp ) //<S2SV> { //<S2SV> const struct ip * ip = NULL ; //<S2SV> const struct ip6_hdr * ip6 = NULL ; //<S2SV> struct xid_map_entry * xmep ; //<S2SV> if ( ! ND_TTEST ( rp -> rm_call . cb_vers ) ) //<S2SV> return ( 0 ) ; //<S2SV> switch ( IP_V ( ( const struct ip * ) bp ) ) { //<S2SV> case 4 : //<S2SV> ip = ( const struct ip * ) bp ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> ip6 = ( const struct ip6_hdr * ) bp ; //<S2SV> break ; //<S2SV> default : //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> xmep = & xid_map [ xid_map_next ] ; //<S2SV> if ( ++ xid_map_next >= XIDMAPSIZE ) //<S2SV> xid_map_next = 0 ; //<S2SV> UNALIGNED_MEMCPY ( & xmep -> xid , & rp -> rm_xid , sizeof ( xmep -> xid ) ) ; //<S2SV> if ( ip ) { //<S2SV> xmep -> ipver = 4 ; //<S2SV> UNALIGNED_MEMCPY ( & xmep -> client , & ip -> ip_src , sizeof ( ip -> ip_src ) ) ; //<S2SV> UNALIGNED_MEMCPY ( & xmep -> server , & ip -> ip_dst , sizeof ( ip -> ip_dst ) ) ; //<S2SV> } //<S2SV> else if ( ip6 ) { //<S2SV> xmep -> ipver = 6 ; //<S2SV> UNALIGNED_MEMCPY ( & xmep -> client , & ip6 -> ip6_src , sizeof ( ip6 -> ip6_src ) ) ; //<S2SV> UNALIGNED_MEMCPY ( & xmep -> server , & ip6 -> ip6_dst , sizeof ( ip6 -> ip6_dst ) ) ; //<S2SV> } //<S2SV> xmep -> proc = EXTRACT_32BITS ( & rp -> rm_call . cb_proc ) ; //<S2SV> xmep -> vers = EXTRACT_32BITS ( & rp -> rm_call . cb_vers ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> 