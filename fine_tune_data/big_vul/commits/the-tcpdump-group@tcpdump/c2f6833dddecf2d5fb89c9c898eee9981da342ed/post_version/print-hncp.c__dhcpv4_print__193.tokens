static int //<S2SV> dhcpv4_print ( netdissect_options * ndo , //<S2SV> const u_char * cp , u_int length , int indent ) //<S2SV> { //<S2SV> u_int i , t ; //<S2SV> const u_char * tlv , * value ; //<S2SV> uint8_t type , optlen ; //<S2SV> i = 0 ; //<S2SV> while ( i < length ) { //<S2SV> if ( i + 2 > length ) //<S2SV> return - 1 ; //<S2SV> tlv = cp + i ; //<S2SV> type = ( uint8_t ) tlv [ 0 ] ; //<S2SV> optlen = ( uint8_t ) tlv [ 1 ] ; //<S2SV> value = tlv + 2 ; //<S2SV> ND_PRINT ( ( ndo , "\\n" ) ) ; //<S2SV> for ( t = indent ; t > 0 ; t -- ) //<S2SV> ND_PRINT ( ( ndo , "\\t" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tok2str ( dh4opt_str , "Unknown" , type ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(%u)" , optlen + 2 ) ) ; //<S2SV> if ( i + 2 + optlen > length ) //<S2SV> return - 1 ; //<S2SV> switch ( type ) { //<S2SV> case DH4OPT_DNS_SERVERS : //<S2SV> case DH4OPT_NTP_SERVERS : { //<S2SV> if ( optlen < 4 || optlen % 4 != 0 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( t = 0 ; t < optlen ; t += 4 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ipaddr_string ( ndo , value + t ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case DH4OPT_DOMAIN_SEARCH : { //<S2SV> const u_char * tp = value ; //<S2SV> while ( tp < value + optlen ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> if ( ( tp = ns_nprint ( ndo , tp , value + optlen ) ) == NULL ) //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> i += 2 + optlen ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 