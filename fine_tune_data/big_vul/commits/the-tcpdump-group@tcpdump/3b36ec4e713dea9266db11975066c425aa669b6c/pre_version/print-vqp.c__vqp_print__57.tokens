void //<S2SV> vqp_print ( netdissect_options * ndo , register const u_char * pptr , register u_int len ) //<S2SV> { //<S2SV> const struct vqp_common_header_t * vqp_common_header ; //<S2SV> const struct vqp_obj_tlv_t * vqp_obj_tlv ; //<S2SV> const u_char * tptr ; //<S2SV> uint16_t vqp_obj_len ; //<S2SV> uint32_t vqp_obj_type ; //<S2SV> int tlen ; //<S2SV> uint8_t nitems ; //<S2SV> tptr = pptr ; //<S2SV> tlen = len ; //<S2SV> vqp_common_header = ( const struct vqp_common_header_t * ) pptr ; //<S2SV> ND_TCHECK ( * vqp_common_header ) ; //<S2SV> if ( VQP_EXTRACT_VERSION ( vqp_common_header -> version ) != VQP_VERSION ) { //<S2SV> ND_PRINT ( ( ndo , "VQP<S2SV_blank>version<S2SV_blank>%u<S2SV_blank>packet<S2SV_blank>not<S2SV_blank>supported" , //<S2SV> VQP_EXTRACT_VERSION ( vqp_common_header -> version ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag < 1 ) { //<S2SV> ND_PRINT ( ( ndo , "VQPv%u<S2SV_blank>%s<S2SV_blank>Message,<S2SV_blank>error-code<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> VQP_EXTRACT_VERSION ( vqp_common_header -> version ) , //<S2SV> tok2str ( vqp_msg_type_values , "unknown<S2SV_blank>(%u)" , vqp_common_header -> msg_type ) , //<S2SV> tok2str ( vqp_error_code_values , "unknown<S2SV_blank>(%u)" , vqp_common_header -> error_code ) , //<S2SV> vqp_common_header -> error_code , //<S2SV> len ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> nitems = vqp_common_header -> nitems ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tVQPv%u,<S2SV_blank>%s<S2SV_blank>Message,<S2SV_blank>error-code<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>seq<S2SV_blank>0x%08x,<S2SV_blank>items<S2SV_blank>%u,<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> VQP_EXTRACT_VERSION ( vqp_common_header -> version ) , //<S2SV> tok2str ( vqp_msg_type_values , "unknown<S2SV_blank>(%u)" , vqp_common_header -> msg_type ) , //<S2SV> tok2str ( vqp_error_code_values , "unknown<S2SV_blank>(%u)" , vqp_common_header -> error_code ) , //<S2SV> vqp_common_header -> error_code , //<S2SV> EXTRACT_32BITS ( & vqp_common_header -> sequence ) , //<S2SV> nitems , //<S2SV> len ) ) ; //<S2SV> tptr += sizeof ( const struct vqp_common_header_t ) ; //<S2SV> tlen -= sizeof ( const struct vqp_common_header_t ) ; //<S2SV> while ( nitems > 0 && tlen > 0 ) { //<S2SV> vqp_obj_tlv = ( const struct vqp_obj_tlv_t * ) tptr ; //<S2SV> vqp_obj_type = EXTRACT_32BITS ( vqp_obj_tlv -> obj_type ) ; //<S2SV> vqp_obj_len = EXTRACT_16BITS ( vqp_obj_tlv -> obj_length ) ; //<S2SV> tptr += sizeof ( struct vqp_obj_tlv_t ) ; //<S2SV> tlen -= sizeof ( struct vqp_obj_tlv_t ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Object<S2SV_blank>(0x%08x),<S2SV_blank>length<S2SV_blank>%u,<S2SV_blank>value:<S2SV_blank>" , //<S2SV> tok2str ( vqp_obj_values , "Unknown" , vqp_obj_type ) , //<S2SV> vqp_obj_type , vqp_obj_len ) ) ; //<S2SV> if ( vqp_obj_type == 0 || vqp_obj_len == 0 ) { //<S2SV> return ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * tptr , vqp_obj_len ) ; //<S2SV> switch ( vqp_obj_type ) { //<S2SV> case VQP_OBJ_IP_ADDRESS : //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>(0x%08x)" , ipaddr_string ( ndo , tptr ) , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> case VQP_OBJ_PORT_NAME : //<S2SV> case VQP_OBJ_VLAN_NAME : //<S2SV> case VQP_OBJ_VTP_DOMAIN : //<S2SV> case VQP_OBJ_ETHERNET_PKT : //<S2SV> safeputs ( ndo , tptr , vqp_obj_len ) ; //<S2SV> break ; //<S2SV> case VQP_OBJ_MAC_ADDRESS : //<S2SV> case VQP_OBJ_MAC_NULL : //<S2SV> ND_PRINT ( ( ndo , "%s" , etheraddr_string ( ndo , tptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , vqp_obj_len ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tptr += vqp_obj_len ; //<S2SV> tlen -= vqp_obj_len ; //<S2SV> nitems -- ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t[|VQP]" ) ) ; //<S2SV> } //<S2SV> 