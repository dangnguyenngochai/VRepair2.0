void //<S2SV> zephyr_print ( netdissect_options * ndo , const u_char * cp , int length ) //<S2SV> { //<S2SV> struct z_packet z ; //<S2SV> const char * parse = ( const char * ) cp ; //<S2SV> int parselen = length ; //<S2SV> const char * s ; //<S2SV> int lose = 0 ; //<S2SV> int truncated = 0 ; //<S2SV> z . kind = 0 ; //<S2SV> z . class = 0 ; //<S2SV> z . inst = 0 ; //<S2SV> z . opcode = 0 ; //<S2SV> z . sender = 0 ; //<S2SV> z . recipient = 0 ; //<S2SV> # define PARSE_STRING s = parse_field ( ndo , & parse , & parselen , & truncated ) ; if ( truncated ) goto trunc ; if ( ! s ) lose = 1 ; //<S2SV> # define PARSE_FIELD_INT ( field ) PARSE_STRING if ( ! lose ) field = strtol ( s , 0 , 16 ) ; //<S2SV> # define PARSE_FIELD_STR ( field ) PARSE_STRING if ( ! lose ) field = s ; //<S2SV> PARSE_FIELD_STR ( z . version ) ; //<S2SV> if ( lose ) return ; //<S2SV> if ( strncmp ( z . version , "ZEPH" , 4 ) ) //<S2SV> return ; //<S2SV> PARSE_FIELD_INT ( z . numfields ) ; //<S2SV> PARSE_FIELD_INT ( z . kind ) ; //<S2SV> PARSE_FIELD_STR ( z . uid ) ; //<S2SV> PARSE_FIELD_INT ( z . port ) ; //<S2SV> PARSE_FIELD_INT ( z . auth ) ; //<S2SV> PARSE_FIELD_INT ( z . authlen ) ; //<S2SV> PARSE_FIELD_STR ( z . authdata ) ; //<S2SV> PARSE_FIELD_STR ( z . class ) ; //<S2SV> PARSE_FIELD_STR ( z . inst ) ; //<S2SV> PARSE_FIELD_STR ( z . opcode ) ; //<S2SV> PARSE_FIELD_STR ( z . sender ) ; //<S2SV> PARSE_FIELD_STR ( z . recipient ) ; //<S2SV> PARSE_FIELD_STR ( z . format ) ; //<S2SV> PARSE_FIELD_INT ( z . cksum ) ; //<S2SV> PARSE_FIELD_INT ( z . multi ) ; //<S2SV> PARSE_FIELD_STR ( z . multi_uid ) ; //<S2SV> if ( lose ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>zephyr" ) ) ; //<S2SV> if ( strncmp ( z . version + 4 , "0.2" , 3 ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>v%s" , z . version + 4 ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , tok2str ( z_types , "type<S2SV_blank>%d" , z . kind ) ) ) ; //<S2SV> if ( z . kind == Z_PACKET_SERVACK ) { //<S2SV> const char * ackdata = NULL ; //<S2SV> PARSE_FIELD_STR ( ackdata ) ; //<S2SV> if ( ! lose && strcmp ( ackdata , "SENT" ) ) //<S2SV> ND_PRINT ( ( ndo , "/%s" , str_to_lower ( ackdata ) ) ) ; //<S2SV> } //<S2SV> if ( * z . sender ) ND_PRINT ( ( ndo , "<S2SV_blank>%s" , z . sender ) ) ; //<S2SV> if ( ! strcmp ( z . class , "USER_LOCATE" ) ) { //<S2SV> if ( ! strcmp ( z . opcode , "USER_HIDE" ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hide" ) ) ; //<S2SV> else if ( ! strcmp ( z . opcode , "USER_UNHIDE" ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>unhide" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>locate<S2SV_blank>%s" , z . inst ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . class , "ZEPHYR_ADMIN" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>zephyr-admin<S2SV_blank>%s" , str_to_lower ( z . opcode ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . class , "ZEPHYR_CTL" ) ) { //<S2SV> if ( ! strcmp ( z . inst , "CLIENT" ) ) { //<S2SV> if ( ! strcmp ( z . opcode , "SUBSCRIBE" ) || //<S2SV> ! strcmp ( z . opcode , "SUBSCRIBE_NODEFS" ) || //<S2SV> ! strcmp ( z . opcode , "UNSUBSCRIBE" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%ssub%s" , strcmp ( z . opcode , "SUBSCRIBE" ) ? "un" : "" , //<S2SV> strcmp ( z . opcode , "SUBSCRIBE_NODEFS" ) ? "" : //<S2SV> "-nodefs" ) ) ; //<S2SV> if ( z . kind != Z_PACKET_SERVACK ) { //<S2SV> const char * c = NULL , * i = NULL , * r = NULL ; //<S2SV> PARSE_FIELD_STR ( c ) ; //<S2SV> PARSE_FIELD_STR ( i ) ; //<S2SV> PARSE_FIELD_STR ( r ) ; //<S2SV> if ( ! lose ) ND_PRINT ( ( ndo , "<S2SV_blank>%s" , z_triple ( c , i , r ) ) ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . opcode , "GIMME" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ret" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . opcode , "GIMMEDEFS" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>gimme-defs" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . opcode , "CLEARSUB" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>clear-subs" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , str_to_lower ( z . opcode ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . inst , "HM" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , str_to_lower ( z . opcode ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . inst , "REALM" ) ) { //<S2SV> if ( ! strcmp ( z . opcode , "ADD_SUBSCRIBE" ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>realm<S2SV_blank>add-subs" ) ) ; //<S2SV> if ( ! strcmp ( z . opcode , "REQ_SUBSCRIBE" ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>realm<S2SV_blank>req-subs" ) ) ; //<S2SV> if ( ! strcmp ( z . opcode , "RLM_SUBSCRIBE" ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>realm<S2SV_blank>rlm-sub" ) ) ; //<S2SV> if ( ! strcmp ( z . opcode , "RLM_UNSUBSCRIBE" ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>realm<S2SV_blank>rlm-unsub" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! strcmp ( z . class , "HM_CTL" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hm_ctl<S2SV_blank>%s" , str_to_lower ( z . inst ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , str_to_lower ( z . opcode ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . class , "HM_STAT" ) ) { //<S2SV> if ( ! strcmp ( z . inst , "HMST_CLIENT" ) && ! strcmp ( z . opcode , "GIMMESTATS" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>get-client-stats" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! strcmp ( z . class , "WG_CTL" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>wg_ctl<S2SV_blank>%s" , str_to_lower ( z . inst ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , str_to_lower ( z . opcode ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . class , "LOGIN" ) ) { //<S2SV> if ( ! strcmp ( z . opcode , "USER_FLUSH" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>flush_locs" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! strcmp ( z . opcode , "NONE" ) || //<S2SV> ! strcmp ( z . opcode , "OPSTAFF" ) || //<S2SV> ! strcmp ( z . opcode , "REALM-VISIBLE" ) || //<S2SV> ! strcmp ( z . opcode , "REALM-ANNOUNCED" ) || //<S2SV> ! strcmp ( z . opcode , "NET-VISIBLE" ) || //<S2SV> ! strcmp ( z . opcode , "NET-ANNOUNCED" ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>set-exposure<S2SV_blank>%s" , str_to_lower ( z . opcode ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! * z . recipient ) //<S2SV> z . recipient = "*" ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>to<S2SV_blank>%s" , z_triple ( z . class , z . inst , z . recipient ) ) ) ; //<S2SV> if ( * z . opcode ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>op<S2SV_blank>%s" , z . opcode ) ) ; //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|zephyr]<S2SV_blank>(%d)" , length ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 