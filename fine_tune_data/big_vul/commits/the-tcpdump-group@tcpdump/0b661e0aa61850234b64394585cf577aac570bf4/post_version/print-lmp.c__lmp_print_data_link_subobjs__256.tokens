static int //<S2SV> lmp_print_data_link_subobjs ( netdissect_options * ndo , const u_char * obj_tptr , //<S2SV> int total_subobj_len , int offset ) //<S2SV> { //<S2SV> int hexdump = FALSE ; //<S2SV> int subobj_type , subobj_len ; //<S2SV> union { //<S2SV> float f ; //<S2SV> uint32_t i ; //<S2SV> } bw ; //<S2SV> while ( total_subobj_len > 0 && hexdump == FALSE ) { //<S2SV> ND_TCHECK_16BITS ( obj_tptr + offset ) ; //<S2SV> subobj_type = EXTRACT_8BITS ( obj_tptr + offset ) ; //<S2SV> subobj_len = EXTRACT_8BITS ( obj_tptr + offset + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Subobject,<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>Length:<S2SV_blank>%u" , //<S2SV> tok2str ( lmp_data_link_subobj , //<S2SV> "Unknown" , //<S2SV> subobj_type ) , //<S2SV> subobj_type , //<S2SV> subobj_len ) ) ; //<S2SV> if ( subobj_len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ( subobj_len % 4 ) != 0 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>4)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( total_subobj_len < subobj_len ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(goes<S2SV_blank>past<S2SV_blank>the<S2SV_blank>end<S2SV_blank>of<S2SV_blank>the<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( subobj_type ) { //<S2SV> case INT_SWITCHING_TYPE_SUBOBJ : //<S2SV> ND_TCHECK_8BITS ( obj_tptr + offset + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Switching<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( gmpls_switch_cap_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_8BITS ( obj_tptr + offset + 2 ) ) , //<S2SV> EXTRACT_8BITS ( obj_tptr + offset + 2 ) ) ) ; //<S2SV> ND_TCHECK_8BITS ( obj_tptr + offset + 3 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Encoding<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( gmpls_encoding_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_8BITS ( obj_tptr + offset + 3 ) ) , //<S2SV> EXTRACT_8BITS ( obj_tptr + offset + 3 ) ) ) ; //<S2SV> ND_TCHECK_32BITS ( obj_tptr + offset + 4 ) ; //<S2SV> bw . i = EXTRACT_32BITS ( obj_tptr + offset + 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Min<S2SV_blank>Reservable<S2SV_blank>Bandwidth:<S2SV_blank>%.3f<S2SV_blank>Mbps" , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> ND_TCHECK_32BITS ( obj_tptr + offset + 8 ) ; //<S2SV> bw . i = EXTRACT_32BITS ( obj_tptr + offset + 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Max<S2SV_blank>Reservable<S2SV_blank>Bandwidth:<S2SV_blank>%.3f<S2SV_blank>Mbps" , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> break ; //<S2SV> case WAVELENGTH_SUBOBJ : //<S2SV> ND_TCHECK_32BITS ( obj_tptr + offset + 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Wavelength:<S2SV_blank>%u" , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset + 4 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> } //<S2SV> total_subobj_len -= subobj_len ; //<S2SV> offset += subobj_len ; //<S2SV> } //<S2SV> return ( hexdump ) ; //<S2SV> trunc : //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 