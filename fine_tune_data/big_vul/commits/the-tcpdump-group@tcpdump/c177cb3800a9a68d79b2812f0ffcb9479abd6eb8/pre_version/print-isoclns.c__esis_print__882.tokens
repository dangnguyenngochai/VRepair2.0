static void //<S2SV> esis_print ( netdissect_options * ndo , //<S2SV> const uint8_t * pptr , u_int length ) //<S2SV> { //<S2SV> const uint8_t * optr ; //<S2SV> u_int li , esis_pdu_type , source_address_length , source_address_number ; //<S2SV> const struct esis_header_t * esis_header ; //<S2SV> if ( ! ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , "ES-IS" ) ) ; //<S2SV> if ( length <= 2 ) { //<S2SV> ND_PRINT ( ( ndo , ndo -> ndo_qflag ? "bad<S2SV_blank>pkt!" : "no<S2SV_blank>header<S2SV_blank>at<S2SV_blank>all!" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> esis_header = ( const struct esis_header_t * ) pptr ; //<S2SV> ND_TCHECK ( * esis_header ) ; //<S2SV> li = esis_header -> length_indicator ; //<S2SV> optr = pptr ; //<S2SV> if ( esis_header -> nlpid != NLPID_ESIS ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>nlpid<S2SV_blank>0x%02x<S2SV_blank>packet<S2SV_blank>not<S2SV_blank>supported" , esis_header -> nlpid ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( esis_header -> version != ESIS_VERSION ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>version<S2SV_blank>%d<S2SV_blank>packet<S2SV_blank>not<S2SV_blank>supported" , esis_header -> version ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( li > length ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>length<S2SV_blank>indicator(%u)<S2SV_blank>><S2SV_blank>PDU<S2SV_blank>size<S2SV_blank>(%u)!" , li , length ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( li < sizeof ( struct esis_header_t ) + 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>length<S2SV_blank>indicator<S2SV_blank>%u<S2SV_blank><<S2SV_blank>min<S2SV_blank>PDU<S2SV_blank>size:" , li ) ) ; //<S2SV> while ( pptr < ndo -> ndo_snapend ) //<S2SV> ND_PRINT ( ( ndo , "%02X" , * pptr ++ ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> esis_pdu_type = esis_header -> type & ESIS_PDU_TYPE_MASK ; //<S2SV> if ( ndo -> ndo_vflag < 1 ) { //<S2SV> ND_PRINT ( ( ndo , "%s%s,<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> ndo -> ndo_eflag ? "" : ",<S2SV_blank>" , //<S2SV> tok2str ( esis_pdu_values , "unknown<S2SV_blank>type<S2SV_blank>(%u)" , esis_pdu_type ) , //<S2SV> length ) ) ; //<S2SV> return ; //<S2SV> } else //<S2SV> ND_PRINT ( ( ndo , "%slength<S2SV_blank>%u\\n\\t%s<S2SV_blank>(%u)" , //<S2SV> ndo -> ndo_eflag ? "" : ",<S2SV_blank>" , //<S2SV> length , //<S2SV> tok2str ( esis_pdu_values , "unknown<S2SV_blank>type:<S2SV_blank>%u" , esis_pdu_type ) , //<S2SV> esis_pdu_type ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>v:<S2SV_blank>%u%s" , esis_header -> version , esis_header -> version == ESIS_VERSION ? "" : "unsupported" ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>checksum:<S2SV_blank>0x%04x" , EXTRACT_16BITS ( esis_header -> cksum ) ) ) ; //<S2SV> osi_print_cksum ( ndo , pptr , EXTRACT_16BITS ( esis_header -> cksum ) , 7 , li ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>holding<S2SV_blank>time:<S2SV_blank>%us,<S2SV_blank>length<S2SV_blank>indicator:<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( esis_header -> holdtime ) , li ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , optr , "\\n\\t" , sizeof ( struct esis_header_t ) ) ; //<S2SV> pptr += sizeof ( struct esis_header_t ) ; //<S2SV> li -= sizeof ( struct esis_header_t ) ; //<S2SV> switch ( esis_pdu_type ) { //<S2SV> case ESIS_PDU_REDIRECT : { //<S2SV> const uint8_t * dst , * snpa , * neta ; //<S2SV> u_int dstl , snpal , netal ; //<S2SV> ND_TCHECK ( * pptr ) ; //<S2SV> if ( li < 1 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>redirect/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> dstl = * pptr ; //<S2SV> pptr ++ ; //<S2SV> li -- ; //<S2SV> ND_TCHECK2 ( * pptr , dstl ) ; //<S2SV> if ( li < dstl ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>redirect/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> dst = pptr ; //<S2SV> pptr += dstl ; //<S2SV> li -= dstl ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s" , isonsap_string ( ndo , dst , dstl ) ) ) ; //<S2SV> ND_TCHECK ( * pptr ) ; //<S2SV> if ( li < 1 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>redirect/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> snpal = * pptr ; //<S2SV> pptr ++ ; //<S2SV> li -- ; //<S2SV> ND_TCHECK2 ( * pptr , snpal ) ; //<S2SV> if ( li < snpal ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>redirect/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> snpa = pptr ; //<S2SV> pptr += snpal ; //<S2SV> li -= snpal ; //<S2SV> ND_TCHECK ( * pptr ) ; //<S2SV> if ( li < 1 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>redirect/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> netal = * pptr ; //<S2SV> pptr ++ ; //<S2SV> ND_TCHECK2 ( * pptr , netal ) ; //<S2SV> if ( li < netal ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>redirect/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> neta = pptr ; //<S2SV> pptr += netal ; //<S2SV> li -= netal ; //<S2SV> if ( netal == 0 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s" , etheraddr_string ( ndo , snpa ) ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s" , isonsap_string ( ndo , neta , netal ) ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case ESIS_PDU_ESH : //<S2SV> ND_TCHECK ( * pptr ) ; //<S2SV> if ( li < 1 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>esh/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> source_address_number = * pptr ; //<S2SV> pptr ++ ; //<S2SV> li -- ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Number<S2SV_blank>of<S2SV_blank>Source<S2SV_blank>Addresses:<S2SV_blank>%u" , source_address_number ) ) ; //<S2SV> while ( source_address_number > 0 ) { //<S2SV> ND_TCHECK ( * pptr ) ; //<S2SV> if ( li < 1 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>esh/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> source_address_length = * pptr ; //<S2SV> pptr ++ ; //<S2SV> li -- ; //<S2SV> ND_TCHECK2 ( * pptr , source_address_length ) ; //<S2SV> if ( li < source_address_length ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>esh/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>NET<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s" , //<S2SV> source_address_length , //<S2SV> isonsap_string ( ndo , pptr , source_address_length ) ) ) ; //<S2SV> pptr += source_address_length ; //<S2SV> li -= source_address_length ; //<S2SV> source_address_number -- ; //<S2SV> } //<S2SV> break ; //<S2SV> case ESIS_PDU_ISH : { //<S2SV> ND_TCHECK ( * pptr ) ; //<S2SV> if ( li < 1 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>ish/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> source_address_length = * pptr ; //<S2SV> pptr ++ ; //<S2SV> li -- ; //<S2SV> ND_TCHECK2 ( * pptr , source_address_length ) ; //<S2SV> if ( li < source_address_length ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>ish/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>NET<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s" , source_address_length , isonsap_string ( ndo , pptr , source_address_length ) ) ) ; //<S2SV> pptr += source_address_length ; //<S2SV> li -= source_address_length ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) { //<S2SV> if ( pptr < ndo -> ndo_snapend ) //<S2SV> print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , ndo -> ndo_snapend - pptr ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> while ( li != 0 ) { //<S2SV> u_int op , opli ; //<S2SV> const uint8_t * tptr ; //<S2SV> if ( li < 2 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bad<S2SV_blank>opts/li" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * pptr , 2 ) ; //<S2SV> op = * pptr ++ ; //<S2SV> opli = * pptr ++ ; //<S2SV> li -= 2 ; //<S2SV> if ( opli > li ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>opt<S2SV_blank>(%d)<S2SV_blank>too<S2SV_blank>long" , op ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> li -= opli ; //<S2SV> tptr = pptr ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>#%u,<S2SV_blank>length<S2SV_blank>%u,<S2SV_blank>value:<S2SV_blank>" , //<S2SV> tok2str ( esis_option_values , "Unknown" , op ) , //<S2SV> op , //<S2SV> opli ) ) ; //<S2SV> switch ( op ) { //<S2SV> case ESIS_OPTION_ES_CONF_TIME : //<S2SV> if ( opli == 2 ) { //<S2SV> ND_TCHECK2 ( * pptr , 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "%us" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> } else //<S2SV> ND_PRINT ( ( ndo , "(bad<S2SV_blank>length)" ) ) ; //<S2SV> break ; //<S2SV> case ESIS_OPTION_PROTOCOLS : //<S2SV> while ( opli > 0 ) { //<S2SV> ND_TCHECK ( * pptr ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>(0x%02x)" , //<S2SV> tok2str ( nlpid_values , //<S2SV> "unknown" , //<S2SV> * tptr ) , //<S2SV> * tptr ) ) ; //<S2SV> if ( opli > 1 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> tptr ++ ; //<S2SV> opli -- ; //<S2SV> } //<S2SV> break ; //<S2SV> case ESIS_OPTION_QOS_MAINTENANCE : //<S2SV> case ESIS_OPTION_SECURITY : //<S2SV> case ESIS_OPTION_PRIORITY : //<S2SV> case ESIS_OPTION_ADDRESS_MASK : //<S2SV> case ESIS_OPTION_SNPA_MASK : //<S2SV> default : //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank>" , opli ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , opli ) ; //<S2SV> pptr += opli ; //<S2SV> } //<S2SV> trunc : //<S2SV> return ; //<S2SV> } //<S2SV> 