static int //<S2SV> rx_cache_find ( const struct rx_header * rxh , const struct ip * ip , int sport , //<S2SV> int32_t * opcode ) //<S2SV> { //<S2SV> int i ; //<S2SV> struct rx_cache_entry * rxent ; //<S2SV> uint32_t clip ; //<S2SV> uint32_t sip ; //<S2SV> UNALIGNED_MEMCPY ( & clip , & ip -> ip_dst , sizeof ( uint32_t ) ) ; //<S2SV> UNALIGNED_MEMCPY ( & sip , & ip -> ip_src , sizeof ( uint32_t ) ) ; //<S2SV> i = rx_cache_hint ; //<S2SV> do { //<S2SV> rxent = & rx_cache [ i ] ; //<S2SV> if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && //<S2SV> rxent -> client . s_addr == clip && //<S2SV> rxent -> server . s_addr == sip && //<S2SV> rxent -> serviceId == EXTRACT_16BITS ( & rxh -> serviceId ) && //<S2SV> rxent -> dport == sport ) { //<S2SV> rx_cache_hint = i ; //<S2SV> * opcode = rxent -> opcode ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> if ( ++ i >= RX_CACHE_SIZE ) //<S2SV> i = 0 ; //<S2SV> } while ( i != rx_cache_hint ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> 