static int //<S2SV> isis_print ( netdissect_options * ndo , //<S2SV> const uint8_t * p , u_int length ) //<S2SV> { //<S2SV> const struct isis_common_header * isis_header ; //<S2SV> const struct isis_iih_lan_header * header_iih_lan ; //<S2SV> const struct isis_iih_ptp_header * header_iih_ptp ; //<S2SV> const struct isis_lsp_header * header_lsp ; //<S2SV> const struct isis_csnp_header * header_csnp ; //<S2SV> const struct isis_psnp_header * header_psnp ; //<S2SV> const struct isis_tlv_lsp * tlv_lsp ; //<S2SV> const struct isis_tlv_ptp_adj * tlv_ptp_adj ; //<S2SV> const struct isis_tlv_is_reach * tlv_is_reach ; //<S2SV> const struct isis_tlv_es_reach * tlv_es_reach ; //<S2SV> uint8_t pdu_type , max_area , id_length , tlv_type , tlv_len , tmp , alen , lan_alen , prefix_len ; //<S2SV> uint8_t ext_is_len , ext_ip_len , mt_len ; //<S2SV> const uint8_t * optr , * pptr , * tptr ; //<S2SV> u_short packet_len , pdu_len , key_id ; //<S2SV> u_int i , vendor_id ; //<S2SV> int sigcheck ; //<S2SV> packet_len = length ; //<S2SV> optr = p ; //<S2SV> isis_header = ( const struct isis_common_header * ) p ; //<S2SV> ND_TCHECK ( * isis_header ) ; //<S2SV> if ( length < ISIS_COMMON_HEADER_SIZE ) //<S2SV> goto trunc ; //<S2SV> pptr = p + ( ISIS_COMMON_HEADER_SIZE ) ; //<S2SV> header_iih_lan = ( const struct isis_iih_lan_header * ) pptr ; //<S2SV> header_iih_ptp = ( const struct isis_iih_ptp_header * ) pptr ; //<S2SV> header_lsp = ( const struct isis_lsp_header * ) pptr ; //<S2SV> header_csnp = ( const struct isis_csnp_header * ) pptr ; //<S2SV> header_psnp = ( const struct isis_psnp_header * ) pptr ; //<S2SV> if ( ! ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , "IS-IS" ) ) ; //<S2SV> if ( isis_header -> version != ISIS_VERSION ) { //<S2SV> ND_PRINT ( ( ndo , "version<S2SV_blank>%d<S2SV_blank>packet<S2SV_blank>not<S2SV_blank>supported" , isis_header -> version ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( ( isis_header -> id_length != SYSTEM_ID_LEN ) && ( isis_header -> id_length != 0 ) ) { //<S2SV> ND_PRINT ( ( ndo , "system<S2SV_blank>ID<S2SV_blank>length<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>is<S2SV_blank>not<S2SV_blank>supported" , //<S2SV> isis_header -> id_length ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( isis_header -> pdu_version != ISIS_VERSION ) { //<S2SV> ND_PRINT ( ( ndo , "version<S2SV_blank>%d<S2SV_blank>packet<S2SV_blank>not<S2SV_blank>supported" , isis_header -> pdu_version ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( length < isis_header -> fixed_len ) { //<S2SV> ND_PRINT ( ( ndo , "fixed<S2SV_blank>header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>><S2SV_blank>packet<S2SV_blank>length<S2SV_blank>%u" , isis_header -> fixed_len , length ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( isis_header -> fixed_len < ISIS_COMMON_HEADER_SIZE ) { //<S2SV> ND_PRINT ( ( ndo , "fixed<S2SV_blank>header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank><<S2SV_blank>minimum<S2SV_blank>header<S2SV_blank>size<S2SV_blank>%u" , isis_header -> fixed_len , ( u_int ) ISIS_COMMON_HEADER_SIZE ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> max_area = isis_header -> max_area ; //<S2SV> switch ( max_area ) { //<S2SV> case 0 : //<S2SV> max_area = 3 ; //<S2SV> break ; //<S2SV> case 255 : //<S2SV> ND_PRINT ( ( ndo , "bad<S2SV_blank>packet<S2SV_blank>--<S2SV_blank>255<S2SV_blank>areas" ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> id_length = isis_header -> id_length ; //<S2SV> switch ( id_length ) { //<S2SV> case 0 : //<S2SV> id_length = 6 ; //<S2SV> break ; //<S2SV> case 1 : //<S2SV> case 2 : //<S2SV> case 3 : //<S2SV> case 4 : //<S2SV> case 5 : //<S2SV> case 6 : //<S2SV> case 7 : //<S2SV> case 8 : //<S2SV> break ; //<S2SV> case 255 : //<S2SV> id_length = 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> if ( id_length != 6 ) { //<S2SV> ND_PRINT ( ( ndo , "bad<S2SV_blank>packet<S2SV_blank>--<S2SV_blank>illegal<S2SV_blank>sys-ID<S2SV_blank>length<S2SV_blank>(%u)" , id_length ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> pdu_type = isis_header -> pdu_type ; //<S2SV> if ( ndo -> ndo_vflag == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "%s%s" , //<S2SV> ndo -> ndo_eflag ? "" : ",<S2SV_blank>" , //<S2SV> tok2str ( isis_pdu_values , "unknown<S2SV_blank>PDU-Type<S2SV_blank>%u" , pdu_type ) ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "%slength<S2SV_blank>%u" , ndo -> ndo_eflag ? "" : ",<S2SV_blank>" , length ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t%s,<S2SV_blank>hlen:<S2SV_blank>%u,<S2SV_blank>v:<S2SV_blank>%u,<S2SV_blank>pdu-v:<S2SV_blank>%u,<S2SV_blank>sys-id-len:<S2SV_blank>%u<S2SV_blank>(%u),<S2SV_blank>max-area:<S2SV_blank>%u<S2SV_blank>(%u)" , //<S2SV> tok2str ( isis_pdu_values , //<S2SV> "unknown,<S2SV_blank>type<S2SV_blank>%u" , //<S2SV> pdu_type ) , //<S2SV> isis_header -> fixed_len , //<S2SV> isis_header -> version , //<S2SV> isis_header -> pdu_version , //<S2SV> id_length , //<S2SV> isis_header -> id_length , //<S2SV> max_area , //<S2SV> isis_header -> max_area ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , optr , "\\n\\t" , 8 ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> switch ( pdu_type ) { //<S2SV> case ISIS_PDU_L1_LAN_IIH : //<S2SV> case ISIS_PDU_L2_LAN_IIH : //<S2SV> if ( isis_header -> fixed_len != ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_LAN_HEADER_SIZE ) ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bogus<S2SV_blank>fixed<S2SV_blank>header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%lu" , //<S2SV> isis_header -> fixed_len , ( unsigned long ) ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_LAN_HEADER_SIZE ) ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> ND_TCHECK ( * header_iih_lan ) ; //<S2SV> if ( length < ISIS_COMMON_HEADER_SIZE + ISIS_IIH_LAN_HEADER_SIZE ) //<S2SV> goto trunc ; //<S2SV> if ( ndo -> ndo_vflag == 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>src-id<S2SV_blank>%s" , //<S2SV> isis_print_id ( header_iih_lan -> source_id , SYSTEM_ID_LEN ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>lan-id<S2SV_blank>%s,<S2SV_blank>prio<S2SV_blank>%u" , //<S2SV> isis_print_id ( header_iih_lan -> lan_id , NODE_ID_LEN ) , //<S2SV> header_iih_lan -> priority ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> pdu_len = EXTRACT_16BITS ( header_iih_lan -> pdu_len ) ; //<S2SV> if ( packet_len > pdu_len ) { //<S2SV> packet_len = pdu_len ; //<S2SV> length = pdu_len ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>source-id:<S2SV_blank>%s,<S2SV_blank><S2SV_blank>holding<S2SV_blank>time:<S2SV_blank>%us,<S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> isis_print_id ( header_iih_lan -> source_id , SYSTEM_ID_LEN ) , //<S2SV> EXTRACT_16BITS ( header_iih_lan -> holding_time ) , //<S2SV> tok2str ( isis_iih_circuit_type_values , //<S2SV> "unknown<S2SV_blank>circuit<S2SV_blank>type<S2SV_blank>0x%02x" , //<S2SV> header_iih_lan -> circuit_type ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>lan-id:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s,<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>PDU<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> isis_print_id ( header_iih_lan -> lan_id , NODE_ID_LEN ) , //<S2SV> ( header_iih_lan -> priority ) & ISIS_LAN_PRIORITY_MASK , //<S2SV> pdu_len ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , ISIS_IIH_LAN_HEADER_SIZE ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> packet_len -= ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_LAN_HEADER_SIZE ) ; //<S2SV> pptr = p + ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_LAN_HEADER_SIZE ) ; //<S2SV> break ; //<S2SV> case ISIS_PDU_PTP_IIH : //<S2SV> if ( isis_header -> fixed_len != ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_PTP_HEADER_SIZE ) ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bogus<S2SV_blank>fixed<S2SV_blank>header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%lu" , //<S2SV> isis_header -> fixed_len , ( unsigned long ) ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_PTP_HEADER_SIZE ) ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> ND_TCHECK ( * header_iih_ptp ) ; //<S2SV> if ( length < ISIS_COMMON_HEADER_SIZE + ISIS_IIH_PTP_HEADER_SIZE ) //<S2SV> goto trunc ; //<S2SV> if ( ndo -> ndo_vflag == 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>src-id<S2SV_blank>%s" , isis_print_id ( header_iih_ptp -> source_id , SYSTEM_ID_LEN ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> pdu_len = EXTRACT_16BITS ( header_iih_ptp -> pdu_len ) ; //<S2SV> if ( packet_len > pdu_len ) { //<S2SV> packet_len = pdu_len ; //<S2SV> length = pdu_len ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>source-id:<S2SV_blank>%s,<S2SV_blank>holding<S2SV_blank>time:<S2SV_blank>%us,<S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> isis_print_id ( header_iih_ptp -> source_id , SYSTEM_ID_LEN ) , //<S2SV> EXTRACT_16BITS ( header_iih_ptp -> holding_time ) , //<S2SV> tok2str ( isis_iih_circuit_type_values , //<S2SV> "unknown<S2SV_blank>circuit<S2SV_blank>type<S2SV_blank>0x%02x" , //<S2SV> header_iih_ptp -> circuit_type ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>circuit-id:<S2SV_blank>0x%02x,<S2SV_blank>PDU<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> header_iih_ptp -> circuit_id , //<S2SV> pdu_len ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , ISIS_IIH_PTP_HEADER_SIZE ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> packet_len -= ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_PTP_HEADER_SIZE ) ; //<S2SV> pptr = p + ( ISIS_COMMON_HEADER_SIZE + ISIS_IIH_PTP_HEADER_SIZE ) ; //<S2SV> break ; //<S2SV> case ISIS_PDU_L1_LSP : //<S2SV> case ISIS_PDU_L2_LSP : //<S2SV> if ( isis_header -> fixed_len != ( ISIS_COMMON_HEADER_SIZE + ISIS_LSP_HEADER_SIZE ) ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bogus<S2SV_blank>fixed<S2SV_blank>header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%lu" , //<S2SV> isis_header -> fixed_len , ( unsigned long ) ISIS_LSP_HEADER_SIZE ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> ND_TCHECK ( * header_lsp ) ; //<S2SV> if ( length < ISIS_COMMON_HEADER_SIZE + ISIS_LSP_HEADER_SIZE ) //<S2SV> goto trunc ; //<S2SV> if ( ndo -> ndo_vflag == 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>lsp-id<S2SV_blank>%s,<S2SV_blank>seq<S2SV_blank>0x%08x,<S2SV_blank>lifetime<S2SV_blank>%5us" , //<S2SV> isis_print_id ( header_lsp -> lsp_id , LSP_ID_LEN ) , //<S2SV> EXTRACT_32BITS ( header_lsp -> sequence_number ) , //<S2SV> EXTRACT_16BITS ( header_lsp -> remaining_lifetime ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> pdu_len = EXTRACT_16BITS ( header_lsp -> pdu_len ) ; //<S2SV> if ( packet_len > pdu_len ) { //<S2SV> packet_len = pdu_len ; //<S2SV> length = pdu_len ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>lsp-id:<S2SV_blank>%s,<S2SV_blank>seq:<S2SV_blank>0x%08x,<S2SV_blank>lifetime:<S2SV_blank>%5us\\n\\t<S2SV_blank><S2SV_blank>chksum:<S2SV_blank>0x%04x" , //<S2SV> isis_print_id ( header_lsp -> lsp_id , LSP_ID_LEN ) , //<S2SV> EXTRACT_32BITS ( header_lsp -> sequence_number ) , //<S2SV> EXTRACT_16BITS ( header_lsp -> remaining_lifetime ) , //<S2SV> EXTRACT_16BITS ( header_lsp -> checksum ) ) ) ; //<S2SV> osi_print_cksum ( ndo , ( const uint8_t * ) header_lsp -> lsp_id , //<S2SV> EXTRACT_16BITS ( header_lsp -> checksum ) , //<S2SV> 12 , length - 12 ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>PDU<S2SV_blank>length:<S2SV_blank>%u,<S2SV_blank>Flags:<S2SV_blank>[<S2SV_blank>%s" , //<S2SV> pdu_len , //<S2SV> ISIS_MASK_LSP_OL_BIT ( header_lsp -> typeblock ) ? "Overload<S2SV_blank>bit<S2SV_blank>set,<S2SV_blank>" : "" ) ) ; //<S2SV> if ( ISIS_MASK_LSP_ATT_BITS ( header_lsp -> typeblock ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , ISIS_MASK_LSP_ATT_DEFAULT_BIT ( header_lsp -> typeblock ) ? "default<S2SV_blank>" : "" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ISIS_MASK_LSP_ATT_DELAY_BIT ( header_lsp -> typeblock ) ? "delay<S2SV_blank>" : "" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ISIS_MASK_LSP_ATT_EXPENSE_BIT ( header_lsp -> typeblock ) ? "expense<S2SV_blank>" : "" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ISIS_MASK_LSP_ATT_ERROR_BIT ( header_lsp -> typeblock ) ? "error<S2SV_blank>" : "" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "ATT<S2SV_blank>bit<S2SV_blank>set,<S2SV_blank>" ) ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%s" , ISIS_MASK_LSP_PARTITION_BIT ( header_lsp -> typeblock ) ? "P<S2SV_blank>bit<S2SV_blank>set,<S2SV_blank>" : "" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>]" , tok2str ( isis_lsp_istype_values , "Unknown(0x%x)" , //<S2SV> ISIS_MASK_LSP_ISTYPE_BITS ( header_lsp -> typeblock ) ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , ISIS_LSP_HEADER_SIZE ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> packet_len -= ( ISIS_COMMON_HEADER_SIZE + ISIS_LSP_HEADER_SIZE ) ; //<S2SV> pptr = p + ( ISIS_COMMON_HEADER_SIZE + ISIS_LSP_HEADER_SIZE ) ; //<S2SV> break ; //<S2SV> case ISIS_PDU_L1_CSNP : //<S2SV> case ISIS_PDU_L2_CSNP : //<S2SV> if ( isis_header -> fixed_len != ( ISIS_COMMON_HEADER_SIZE + ISIS_CSNP_HEADER_SIZE ) ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>bogus<S2SV_blank>fixed<S2SV_blank>header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%lu" , //<S2SV> isis_header -> fixed_len , ( unsigned long ) ( ISIS_COMMON_HEADER_SIZE + ISIS_CSNP_HEADER_SIZE ) ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> ND_TCHECK ( * header_csnp ) ; //<S2SV> if ( length < ISIS_COMMON_HEADER_SIZE + ISIS_CSNP_HEADER_SIZE ) //<S2SV> goto trunc ; //<S2SV> if ( ndo -> ndo_vflag == 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>src-id<S2SV_blank>%s" , isis_print_id ( header_csnp -> source_id , NODE_ID_LEN ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> pdu_len = EXTRACT_16BITS ( header_csnp -> pdu_len ) ; //<S2SV> if ( packet_len > pdu_len ) { //<S2SV> packet_len = pdu_len ; //<S2SV> length = pdu_len ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>source-id:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s,<S2SV_blank>PDU<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> isis_print_id ( header_csnp -> source_id , NODE_ID_LEN ) , //<S2SV> pdu_len ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>start<S2SV_blank>lsp-id:<S2SV_blank>%s" , //<S2SV> isis_print_id ( header_csnp -> start_lsp_id , LSP_ID_LEN ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>end<S2SV_blank>lsp-id:<S2SV_blank><S2SV_blank><S2SV_blank>%s" , //<S2SV> isis_print_id ( header_csnp -> end_lsp_id , LSP_ID_LEN ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , ISIS_CSNP_HEADER_SIZE ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> packet_len -= ( ISIS_COMMON_HEADER_SIZE + ISIS_CSNP_HEADER_SIZE ) ; //<S2SV> pptr = p + ( ISIS_COMMON_HEADER_SIZE + ISIS_CSNP_HEADER_SIZE ) ; //<S2SV> break ; //<S2SV> case ISIS_PDU_L1_PSNP : //<S2SV> case ISIS_PDU_L2_PSNP : //<S2SV> if ( isis_header -> fixed_len != ( ISIS_COMMON_HEADER_SIZE + ISIS_PSNP_HEADER_SIZE ) ) { //<S2SV> ND_PRINT ( ( ndo , "-<S2SV_blank>bogus<S2SV_blank>fixed<S2SV_blank>header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%lu" , //<S2SV> isis_header -> fixed_len , ( unsigned long ) ( ISIS_COMMON_HEADER_SIZE + ISIS_PSNP_HEADER_SIZE ) ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> ND_TCHECK ( * header_psnp ) ; //<S2SV> if ( length < ISIS_COMMON_HEADER_SIZE + ISIS_PSNP_HEADER_SIZE ) //<S2SV> goto trunc ; //<S2SV> if ( ndo -> ndo_vflag == 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>src-id<S2SV_blank>%s" , isis_print_id ( header_psnp -> source_id , NODE_ID_LEN ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> pdu_len = EXTRACT_16BITS ( header_psnp -> pdu_len ) ; //<S2SV> if ( packet_len > pdu_len ) { //<S2SV> packet_len = pdu_len ; //<S2SV> length = pdu_len ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>source-id:<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s,<S2SV_blank>PDU<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> isis_print_id ( header_psnp -> source_id , NODE_ID_LEN ) , //<S2SV> pdu_len ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , ISIS_PSNP_HEADER_SIZE ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> packet_len -= ( ISIS_COMMON_HEADER_SIZE + ISIS_PSNP_HEADER_SIZE ) ; //<S2SV> pptr = p + ( ISIS_COMMON_HEADER_SIZE + ISIS_PSNP_HEADER_SIZE ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag == 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> ( void ) print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank>" , length ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> while ( packet_len > 0 ) { //<S2SV> ND_TCHECK2 ( * pptr , 2 ) ; //<S2SV> if ( packet_len < 2 ) //<S2SV> goto trunc ; //<S2SV> tlv_type = * pptr ++ ; //<S2SV> tlv_len = * pptr ++ ; //<S2SV> tmp = tlv_len ; //<S2SV> tptr = pptr ; //<S2SV> packet_len -= 2 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>#%u,<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( isis_tlv_values , //<S2SV> "unknown" , //<S2SV> tlv_type ) , //<S2SV> tlv_type , //<S2SV> tlv_len ) ) ; //<S2SV> if ( tlv_len == 0 ) //<S2SV> continue ; //<S2SV> if ( packet_len < tlv_len ) //<S2SV> goto trunc ; //<S2SV> switch ( tlv_type ) { //<S2SV> case ISIS_TLV_AREA_ADDR : //<S2SV> ND_TCHECK2 ( * tptr , 1 ) ; //<S2SV> alen = * tptr ++ ; //<S2SV> while ( tmp && alen < tmp ) { //<S2SV> ND_TCHECK2 ( * tptr , alen ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Area<S2SV_blank>address<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s" , //<S2SV> alen , //<S2SV> isonsap_string ( ndo , tptr , alen ) ) ) ; //<S2SV> tptr += alen ; //<S2SV> tmp -= alen + 1 ; //<S2SV> if ( tmp == 0 ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , 1 ) ; //<S2SV> alen = * tptr ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_ISNEIGH : //<S2SV> while ( tmp >= ETHER_ADDR_LEN ) { //<S2SV> ND_TCHECK2 ( * tptr , ETHER_ADDR_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>SNPA:<S2SV_blank>%s" , isis_print_id ( tptr , ETHER_ADDR_LEN ) ) ) ; //<S2SV> tmp -= ETHER_ADDR_LEN ; //<S2SV> tptr += ETHER_ADDR_LEN ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_ISNEIGH_VARLEN : //<S2SV> if ( ! ND_TTEST2 ( * tptr , 1 ) || tmp < 3 ) //<S2SV> goto trunctlv ; //<S2SV> lan_alen = * tptr ++ ; //<S2SV> if ( lan_alen == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>LAN<S2SV_blank>address<S2SV_blank>length<S2SV_blank>0<S2SV_blank>bytes<S2SV_blank>(invalid)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tmp -- ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>LAN<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>bytes<S2SV_blank>" , lan_alen ) ) ; //<S2SV> while ( tmp >= lan_alen ) { //<S2SV> ND_TCHECK2 ( * tptr , lan_alen ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tIS<S2SV_blank>Neighbor:<S2SV_blank>%s" , isis_print_id ( tptr , lan_alen ) ) ) ; //<S2SV> tmp -= lan_alen ; //<S2SV> tptr += lan_alen ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_PADDING : //<S2SV> break ; //<S2SV> case ISIS_TLV_MT_IS_REACH : //<S2SV> mt_len = isis_print_mtid ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ; //<S2SV> if ( mt_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tptr += mt_len ; //<S2SV> tmp -= mt_len ; //<S2SV> while ( tmp >= 2 + NODE_ID_LEN + 3 + 1 ) { //<S2SV> ext_is_len = isis_print_ext_is_reach ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlv_type ) ; //<S2SV> if ( ext_is_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tmp -= ext_is_len ; //<S2SV> tptr += ext_is_len ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_IS_ALIAS_ID : //<S2SV> while ( tmp >= NODE_ID_LEN + 1 ) { //<S2SV> ext_is_len = isis_print_ext_is_reach ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlv_type ) ; //<S2SV> if ( ext_is_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tmp -= ext_is_len ; //<S2SV> tptr += ext_is_len ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_EXT_IS_REACH : //<S2SV> while ( tmp >= NODE_ID_LEN + 3 + 1 ) { //<S2SV> ext_is_len = isis_print_ext_is_reach ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlv_type ) ; //<S2SV> if ( ext_is_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tmp -= ext_is_len ; //<S2SV> tptr += ext_is_len ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_IS_REACH : //<S2SV> ND_TCHECK2 ( * tptr , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , //<S2SV> tok2str ( isis_is_reach_virtual_values , //<S2SV> "bogus<S2SV_blank>virtual<S2SV_blank>flag<S2SV_blank>0x%02x" , //<S2SV> * tptr ++ ) ) ) ; //<S2SV> tlv_is_reach = ( const struct isis_tlv_is_reach * ) tptr ; //<S2SV> while ( tmp >= sizeof ( struct isis_tlv_is_reach ) ) { //<S2SV> ND_TCHECK ( * tlv_is_reach ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IS<S2SV_blank>Neighbor:<S2SV_blank>%s" , //<S2SV> isis_print_id ( tlv_is_reach -> neighbor_nodeid , NODE_ID_LEN ) ) ) ; //<S2SV> isis_print_metric_block ( ndo , & tlv_is_reach -> isis_metric_block ) ; //<S2SV> tmp -= sizeof ( struct isis_tlv_is_reach ) ; //<S2SV> tlv_is_reach ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_ESNEIGH : //<S2SV> tlv_es_reach = ( const struct isis_tlv_es_reach * ) tptr ; //<S2SV> while ( tmp >= sizeof ( struct isis_tlv_es_reach ) ) { //<S2SV> ND_TCHECK ( * tlv_es_reach ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>ES<S2SV_blank>Neighbor:<S2SV_blank>%s" , //<S2SV> isis_print_id ( tlv_es_reach -> neighbor_sysid , SYSTEM_ID_LEN ) ) ) ; //<S2SV> isis_print_metric_block ( ndo , & tlv_es_reach -> isis_metric_block ) ; //<S2SV> tmp -= sizeof ( struct isis_tlv_es_reach ) ; //<S2SV> tlv_es_reach ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_INT_IP_REACH : //<S2SV> case ISIS_TLV_EXT_IP_REACH : //<S2SV> if ( ! isis_print_tlv_ip_reach ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlv_len ) ) //<S2SV> return ( 1 ) ; //<S2SV> break ; //<S2SV> case ISIS_TLV_EXTD_IP_REACH : //<S2SV> while ( tmp > 0 ) { //<S2SV> ext_ip_len = isis_print_extd_ip_reach ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , AF_INET ) ; //<S2SV> if ( ext_ip_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tptr += ext_ip_len ; //<S2SV> tmp -= ext_ip_len ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_MT_IP_REACH : //<S2SV> mt_len = isis_print_mtid ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ; //<S2SV> if ( mt_len == 0 ) { //<S2SV> goto trunctlv ; //<S2SV> } //<S2SV> tptr += mt_len ; //<S2SV> tmp -= mt_len ; //<S2SV> while ( tmp > 0 ) { //<S2SV> ext_ip_len = isis_print_extd_ip_reach ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , AF_INET ) ; //<S2SV> if ( ext_ip_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tptr += ext_ip_len ; //<S2SV> tmp -= ext_ip_len ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_IP6_REACH : //<S2SV> while ( tmp > 0 ) { //<S2SV> ext_ip_len = isis_print_extd_ip_reach ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , AF_INET6 ) ; //<S2SV> if ( ext_ip_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tptr += ext_ip_len ; //<S2SV> tmp -= ext_ip_len ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_MT_IP6_REACH : //<S2SV> mt_len = isis_print_mtid ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ; //<S2SV> if ( mt_len == 0 ) { //<S2SV> goto trunctlv ; //<S2SV> } //<S2SV> tptr += mt_len ; //<S2SV> tmp -= mt_len ; //<S2SV> while ( tmp > 0 ) { //<S2SV> ext_ip_len = isis_print_extd_ip_reach ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , AF_INET6 ) ; //<S2SV> if ( ext_ip_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tptr += ext_ip_len ; //<S2SV> tmp -= ext_ip_len ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_IP6ADDR : //<S2SV> while ( tmp >= sizeof ( struct in6_addr ) ) { //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct in6_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv6<S2SV_blank>interface<S2SV_blank>address:<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , tptr ) ) ) ; //<S2SV> tptr += sizeof ( struct in6_addr ) ; //<S2SV> tmp -= sizeof ( struct in6_addr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_AUTH : //<S2SV> ND_TCHECK2 ( * tptr , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s:<S2SV_blank>" , //<S2SV> tok2str ( isis_subtlv_auth_values , //<S2SV> "unknown<S2SV_blank>Authentication<S2SV_blank>type<S2SV_blank>0x%02x" , //<S2SV> * tptr ) ) ) ; //<S2SV> switch ( * tptr ) { //<S2SV> case ISIS_SUBTLV_AUTH_SIMPLE : //<S2SV> if ( fn_printzp ( ndo , tptr + 1 , tlv_len - 1 , ndo -> ndo_snapend ) ) //<S2SV> goto trunctlv ; //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_AUTH_MD5 : //<S2SV> for ( i = 1 ; i < tlv_len ; i ++ ) { //<S2SV> ND_TCHECK2 ( * ( tptr + i ) , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "%02x" , * ( tptr + i ) ) ) ; //<S2SV> } //<S2SV> if ( tlv_len != ISIS_SUBTLV_AUTH_MD5_LEN + 1 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>(invalid<S2SV_blank>subTLV)<S2SV_blank>" ) ) ; //<S2SV> sigcheck = signature_verify ( ndo , optr , length , tptr + 1 , //<S2SV> isis_clear_checksum_lifetime , //<S2SV> header_lsp ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(%s)" , tok2str ( signature_check_values , "Unknown" , sigcheck ) ) ) ; //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_AUTH_GENERIC : //<S2SV> ND_TCHECK2 ( * ( tptr + 1 ) , 2 ) ; //<S2SV> key_id = EXTRACT_16BITS ( ( tptr + 1 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%u,<S2SV_blank>password:<S2SV_blank>" , key_id ) ) ; //<S2SV> for ( i = 1 + sizeof ( uint16_t ) ; i < tlv_len ; i ++ ) { //<S2SV> ND_TCHECK2 ( * ( tptr + i ) , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "%02x" , * ( tptr + i ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_AUTH_PRIVATE : //<S2SV> default : //<S2SV> if ( ! print_unknown_data ( ndo , tptr + 1 , "\\n\\t\\t<S2SV_blank><S2SV_blank>" , tlv_len - 1 ) ) //<S2SV> return ( 0 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_PTP_ADJ : //<S2SV> tlv_ptp_adj = ( const struct isis_tlv_ptp_adj * ) tptr ; //<S2SV> if ( tmp >= 1 ) { //<S2SV> ND_TCHECK2 ( * tptr , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Adjacency<S2SV_blank>State:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( isis_ptp_adjancey_values , "unknown" , * tptr ) , //<S2SV> * tptr ) ) ; //<S2SV> tmp -- ; //<S2SV> } //<S2SV> if ( tmp > sizeof ( tlv_ptp_adj -> extd_local_circuit_id ) ) { //<S2SV> ND_TCHECK ( tlv_ptp_adj -> extd_local_circuit_id ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Extended<S2SV_blank>Local<S2SV_blank>circuit-ID:<S2SV_blank>0x%08x" , //<S2SV> EXTRACT_32BITS ( tlv_ptp_adj -> extd_local_circuit_id ) ) ) ; //<S2SV> tmp -= sizeof ( tlv_ptp_adj -> extd_local_circuit_id ) ; //<S2SV> } //<S2SV> if ( tmp >= SYSTEM_ID_LEN ) { //<S2SV> ND_TCHECK2 ( tlv_ptp_adj -> neighbor_sysid , SYSTEM_ID_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Neighbor<S2SV_blank>System-ID:<S2SV_blank>%s" , //<S2SV> isis_print_id ( tlv_ptp_adj -> neighbor_sysid , SYSTEM_ID_LEN ) ) ) ; //<S2SV> tmp -= SYSTEM_ID_LEN ; //<S2SV> } //<S2SV> if ( tmp >= sizeof ( tlv_ptp_adj -> neighbor_extd_local_circuit_id ) ) { //<S2SV> ND_TCHECK ( tlv_ptp_adj -> neighbor_extd_local_circuit_id ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Neighbor<S2SV_blank>Extended<S2SV_blank>Local<S2SV_blank>circuit-ID:<S2SV_blank>0x%08x" , //<S2SV> EXTRACT_32BITS ( tlv_ptp_adj -> neighbor_extd_local_circuit_id ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_PROTOCOLS : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>NLPID(s):<S2SV_blank>" ) ) ; //<S2SV> while ( tmp > 0 ) { //<S2SV> ND_TCHECK2 ( * ( tptr ) , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>(0x%02x)" , //<S2SV> tok2str ( nlpid_values , //<S2SV> "unknown" , //<S2SV> * tptr ) , //<S2SV> * tptr ) ) ; //<S2SV> if ( tmp > 1 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> tptr ++ ; //<S2SV> tmp -- ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_MT_PORT_CAP : //<S2SV> { //<S2SV> ND_TCHECK2 ( * ( tptr ) , 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>MTID(s):<S2SV_blank>%d" , //<S2SV> ( EXTRACT_16BITS ( tptr ) >> 12 ) , //<S2SV> ( EXTRACT_16BITS ( tptr ) & 0x0fff ) ) ) ; //<S2SV> tmp = tmp - 2 ; //<S2SV> tptr = tptr + 2 ; //<S2SV> if ( tmp ) //<S2SV> isis_print_mt_port_cap_subtlv ( ndo , tptr , tmp ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case ISIS_TLV_MT_CAPABILITY : //<S2SV> ND_TCHECK2 ( * ( tptr ) , 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>O:<S2SV_blank>%d,<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>MTID(s):<S2SV_blank>%d" , //<S2SV> ( EXTRACT_16BITS ( tptr ) >> 15 ) & 0x01 , //<S2SV> ( EXTRACT_16BITS ( tptr ) >> 12 ) & 0x07 , //<S2SV> EXTRACT_16BITS ( tptr ) & 0x0fff ) ) ; //<S2SV> tmp = tmp - 2 ; //<S2SV> tptr = tptr + 2 ; //<S2SV> if ( tmp ) //<S2SV> isis_print_mt_capability_subtlv ( ndo , tptr , tmp ) ; //<S2SV> break ; //<S2SV> case ISIS_TLV_TE_ROUTER_ID : //<S2SV> ND_TCHECK2 ( * pptr , sizeof ( struct in_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Traffic<S2SV_blank>Engineering<S2SV_blank>Router<S2SV_blank>ID:<S2SV_blank>%s" , ipaddr_string ( ndo , pptr ) ) ) ; //<S2SV> break ; //<S2SV> case ISIS_TLV_IPADDR : //<S2SV> while ( tmp >= sizeof ( struct in_addr ) ) { //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct in_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv4<S2SV_blank>interface<S2SV_blank>address:<S2SV_blank>%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> tptr += sizeof ( struct in_addr ) ; //<S2SV> tmp -= sizeof ( struct in_addr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_HOSTNAME : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Hostname:<S2SV_blank>" ) ) ; //<S2SV> if ( fn_printzp ( ndo , tptr , tmp , ndo -> ndo_snapend ) ) //<S2SV> goto trunctlv ; //<S2SV> break ; //<S2SV> case ISIS_TLV_SHARED_RISK_GROUP : //<S2SV> if ( tmp < NODE_ID_LEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , NODE_ID_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IS<S2SV_blank>Neighbor:<S2SV_blank>%s" , isis_print_id ( tptr , NODE_ID_LEN ) ) ) ; //<S2SV> tptr += ( NODE_ID_LEN ) ; //<S2SV> tmp -= ( NODE_ID_LEN ) ; //<S2SV> if ( tmp < 1 ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags:<S2SV_blank>[%s]" , ISIS_MASK_TLV_SHARED_RISK_GROUP ( * tptr ++ ) ? "numbered" : "unnumbered" ) ) ; //<S2SV> tmp -- ; //<S2SV> if ( tmp < sizeof ( struct in_addr ) ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct in_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv4<S2SV_blank>interface<S2SV_blank>address:<S2SV_blank>%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> tptr += sizeof ( struct in_addr ) ; //<S2SV> tmp -= sizeof ( struct in_addr ) ; //<S2SV> if ( tmp < sizeof ( struct in_addr ) ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct in_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv4<S2SV_blank>neighbor<S2SV_blank>address:<S2SV_blank>%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> tptr += sizeof ( struct in_addr ) ; //<S2SV> tmp -= sizeof ( struct in_addr ) ; //<S2SV> while ( tmp >= 4 ) { //<S2SV> ND_TCHECK2 ( * tptr , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Link-ID:<S2SV_blank>0x%08x" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> tptr += 4 ; //<S2SV> tmp -= 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_LSP : //<S2SV> tlv_lsp = ( const struct isis_tlv_lsp * ) tptr ; //<S2SV> while ( tmp >= sizeof ( struct isis_tlv_lsp ) ) { //<S2SV> ND_TCHECK ( ( tlv_lsp -> lsp_id ) [ LSP_ID_LEN - 1 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>lsp-id:<S2SV_blank>%s" , //<S2SV> isis_print_id ( tlv_lsp -> lsp_id , LSP_ID_LEN ) ) ) ; //<S2SV> ND_TCHECK2 ( tlv_lsp -> sequence_number , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>seq:<S2SV_blank>0x%08x" , EXTRACT_32BITS ( tlv_lsp -> sequence_number ) ) ) ; //<S2SV> ND_TCHECK2 ( tlv_lsp -> remaining_lifetime , 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>lifetime:<S2SV_blank>%5ds" , EXTRACT_16BITS ( tlv_lsp -> remaining_lifetime ) ) ) ; //<S2SV> ND_TCHECK2 ( tlv_lsp -> checksum , 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>chksum:<S2SV_blank>0x%04x" , EXTRACT_16BITS ( tlv_lsp -> checksum ) ) ) ; //<S2SV> tmp -= sizeof ( struct isis_tlv_lsp ) ; //<S2SV> tlv_lsp ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_CHECKSUM : //<S2SV> if ( tmp < ISIS_TLV_CHECKSUM_MINLEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , ISIS_TLV_CHECKSUM_MINLEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>checksum:<S2SV_blank>0x%04x<S2SV_blank>" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> osi_print_cksum ( ndo , optr , EXTRACT_16BITS ( tptr ) , tptr - optr , //<S2SV> length ) ; //<S2SV> break ; //<S2SV> case ISIS_TLV_POI : //<S2SV> if ( tlv_len >= SYSTEM_ID_LEN + 1 ) { //<S2SV> ND_TCHECK2 ( * tptr , SYSTEM_ID_LEN + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Purge<S2SV_blank>Originator<S2SV_blank>System-ID:<S2SV_blank>%s" , //<S2SV> isis_print_id ( tptr + 1 , SYSTEM_ID_LEN ) ) ) ; //<S2SV> } //<S2SV> if ( tlv_len == 2 * SYSTEM_ID_LEN + 1 ) { //<S2SV> ND_TCHECK2 ( * tptr , 2 * SYSTEM_ID_LEN + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Received<S2SV_blank>from<S2SV_blank>System-ID:<S2SV_blank>%s" , //<S2SV> isis_print_id ( tptr + SYSTEM_ID_LEN + 1 , SYSTEM_ID_LEN ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_MT_SUPPORTED : //<S2SV> if ( tmp < ISIS_TLV_MT_SUPPORTED_MINLEN ) //<S2SV> break ; //<S2SV> while ( tmp > 1 ) { //<S2SV> if ( tmp != 1 ) { //<S2SV> mt_len = isis_print_mtid ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ; //<S2SV> if ( mt_len == 0 ) //<S2SV> goto trunctlv ; //<S2SV> tptr += mt_len ; //<S2SV> tmp -= mt_len ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>invalid<S2SV_blank>MT-ID" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_RESTART_SIGNALING : //<S2SV> if ( tmp < ISIS_TLV_RESTART_SIGNALING_FLAGLEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , ISIS_TLV_RESTART_SIGNALING_FLAGLEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> bittok2str ( isis_restart_flag_values , "none" , * tptr ) ) ) ; //<S2SV> tptr += ISIS_TLV_RESTART_SIGNALING_FLAGLEN ; //<S2SV> tmp -= ISIS_TLV_RESTART_SIGNALING_FLAGLEN ; //<S2SV> if ( tmp == 0 ) //<S2SV> break ; //<S2SV> if ( tmp < ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Remaining<S2SV_blank>holding<S2SV_blank>time<S2SV_blank>%us" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> tptr += ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN ; //<S2SV> tmp -= ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN ; //<S2SV> if ( tmp == SYSTEM_ID_LEN ) { //<S2SV> ND_TCHECK2 ( * tptr , SYSTEM_ID_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>for<S2SV_blank>%s" , isis_print_id ( tptr , SYSTEM_ID_LEN ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_IDRP_INFO : //<S2SV> if ( tmp < ISIS_TLV_IDRP_INFO_MINLEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , ISIS_TLV_IDRP_INFO_MINLEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Inter-Domain<S2SV_blank>Information<S2SV_blank>Type:<S2SV_blank>%s" , //<S2SV> tok2str ( isis_subtlv_idrp_values , //<S2SV> "Unknown<S2SV_blank>(0x%02x)" , //<S2SV> * tptr ) ) ) ; //<S2SV> switch ( * tptr ++ ) { //<S2SV> case ISIS_SUBTLV_IDRP_ASN : //<S2SV> ND_TCHECK2 ( * tptr , 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "AS<S2SV_blank>Number:<S2SV_blank>%u" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_IDRP_LOCAL : //<S2SV> case ISIS_SUBTLV_IDRP_RES : //<S2SV> default : //<S2SV> if ( ! print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlv_len - 1 ) ) //<S2SV> return ( 0 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_LSP_BUFFERSIZE : //<S2SV> if ( tmp < ISIS_TLV_LSP_BUFFERSIZE_MINLEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , ISIS_TLV_LSP_BUFFERSIZE_MINLEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>LSP<S2SV_blank>Buffersize:<S2SV_blank>%u" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> case ISIS_TLV_PART_DIS : //<S2SV> while ( tmp >= SYSTEM_ID_LEN ) { //<S2SV> ND_TCHECK2 ( * tptr , SYSTEM_ID_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , isis_print_id ( tptr , SYSTEM_ID_LEN ) ) ) ; //<S2SV> tptr += SYSTEM_ID_LEN ; //<S2SV> tmp -= SYSTEM_ID_LEN ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_PREFIX_NEIGH : //<S2SV> if ( tmp < sizeof ( struct isis_metric_block ) ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct isis_metric_block ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Metric<S2SV_blank>Block" ) ) ; //<S2SV> isis_print_metric_block ( ndo , ( const struct isis_metric_block * ) tptr ) ; //<S2SV> tptr += sizeof ( struct isis_metric_block ) ; //<S2SV> tmp -= sizeof ( struct isis_metric_block ) ; //<S2SV> while ( tmp > 0 ) { //<S2SV> ND_TCHECK2 ( * tptr , 1 ) ; //<S2SV> prefix_len = * tptr ++ ; //<S2SV> if ( prefix_len < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tAddress:<S2SV_blank>prefix<S2SV_blank>length<S2SV_blank>%u<S2SV_blank><<S2SV_blank>2" , prefix_len ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tmp -- ; //<S2SV> if ( tmp < prefix_len / 2 ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , prefix_len / 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tAddress:<S2SV_blank>%s/%u" , //<S2SV> isonsap_string ( ndo , tptr , prefix_len / 2 ) , prefix_len * 4 ) ) ; //<S2SV> tptr += prefix_len / 2 ; //<S2SV> tmp -= prefix_len / 2 ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_TLV_IIH_SEQNR : //<S2SV> if ( tmp < ISIS_TLV_IIH_SEQNR_MINLEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , ISIS_TLV_IIH_SEQNR_MINLEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Sequence<S2SV_blank>number:<S2SV_blank>%u" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> case ISIS_TLV_VENDOR_PRIVATE : //<S2SV> if ( tmp < ISIS_TLV_VENDOR_PRIVATE_MINLEN ) //<S2SV> break ; //<S2SV> ND_TCHECK2 ( * tptr , ISIS_TLV_VENDOR_PRIVATE_MINLEN ) ; //<S2SV> vendor_id = EXTRACT_24BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Vendor:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( oui_values , "Unknown" , vendor_id ) , //<S2SV> vendor_id ) ) ; //<S2SV> tptr += 3 ; //<S2SV> tmp -= 3 ; //<S2SV> if ( tmp > 0 ) //<S2SV> if ( ! print_unknown_data ( ndo , tptr , "\\n\\t\\t" , tmp ) ) //<S2SV> return ( 0 ) ; //<S2SV> break ; //<S2SV> case ISIS_TLV_DECNET_PHASE4 : //<S2SV> case ISIS_TLV_LUCENT_PRIVATE : //<S2SV> case ISIS_TLV_IPAUTH : //<S2SV> case ISIS_TLV_NORTEL_PRIVATE1 : //<S2SV> case ISIS_TLV_NORTEL_PRIVATE2 : //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , pptr , "\\n\\t\\t" , tlv_len ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> if ( ! print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlv_len ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> pptr += tlv_len ; //<S2SV> packet_len -= tlv_len ; //<S2SV> } //<S2SV> if ( packet_len != 0 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%u<S2SV_blank>straggler<S2SV_blank>bytes" , packet_len ) ) ; //<S2SV> } //<S2SV> return ( 1 ) ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> trunctlv : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> 