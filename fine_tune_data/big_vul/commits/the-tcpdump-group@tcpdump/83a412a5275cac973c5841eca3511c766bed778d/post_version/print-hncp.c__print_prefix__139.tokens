static int //<S2SV> print_prefix ( netdissect_options * ndo , const u_char * prefix , u_int max_length ) //<S2SV> { //<S2SV> int plenbytes ; //<S2SV> char buf [ sizeof ( "xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx::/128" ) ] ; //<S2SV> if ( prefix [ 0 ] >= 96 && max_length >= IPV4_MAPPED_HEADING_LEN + 1 && //<S2SV> is_ipv4_mapped_address ( & prefix [ 1 ] ) ) { //<S2SV> struct in_addr addr ; //<S2SV> u_int plen ; //<S2SV> plen = prefix [ 0 ] - 96 ; //<S2SV> if ( 32 < plen ) //<S2SV> return - 1 ; //<S2SV> max_length -= 1 ; //<S2SV> memset ( & addr , 0 , sizeof ( addr ) ) ; //<S2SV> plenbytes = ( plen + 7 ) / 8 ; //<S2SV> if ( max_length < ( u_int ) plenbytes + IPV4_MAPPED_HEADING_LEN ) //<S2SV> return - 3 ; //<S2SV> memcpy ( & addr , & prefix [ 1 + IPV4_MAPPED_HEADING_LEN ] , plenbytes ) ; //<S2SV> if ( plen % 8 ) { //<S2SV> ( ( u_char * ) & addr ) [ plenbytes - 1 ] &= //<S2SV> ( ( 0xff00 >> ( plen % 8 ) ) & 0xff ) ; //<S2SV> } //<S2SV> snprintf ( buf , sizeof ( buf ) , "%s/%d" , ipaddr_string ( ndo , & addr ) , plen ) ; //<S2SV> plenbytes += 1 + IPV4_MAPPED_HEADING_LEN ; //<S2SV> } else { //<S2SV> plenbytes = decode_prefix6 ( ndo , prefix , max_length , buf , sizeof ( buf ) ) ; //<S2SV> if ( plenbytes < 0 ) //<S2SV> return plenbytes ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%s" , buf ) ) ; //<S2SV> return plenbytes ; //<S2SV> } //<S2SV> 