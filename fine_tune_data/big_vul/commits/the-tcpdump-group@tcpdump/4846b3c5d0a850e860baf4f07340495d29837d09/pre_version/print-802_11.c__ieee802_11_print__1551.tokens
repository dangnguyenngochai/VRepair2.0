static u_int //<S2SV> ieee802_11_print ( netdissect_options * ndo , //<S2SV> const u_char * p , u_int length , u_int orig_caplen , int pad , //<S2SV> u_int fcslen ) //<S2SV> { //<S2SV> uint16_t fc ; //<S2SV> u_int caplen , hdrlen , meshdrlen ; //<S2SV> struct lladdr_info src , dst ; //<S2SV> int llc_hdrlen ; //<S2SV> caplen = orig_caplen ; //<S2SV> if ( length < fcslen ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return caplen ; //<S2SV> } //<S2SV> length -= fcslen ; //<S2SV> if ( caplen > length ) { //<S2SV> fcslen = caplen - length ; //<S2SV> caplen -= fcslen ; //<S2SV> ndo -> ndo_snapend -= fcslen ; //<S2SV> } //<S2SV> if ( caplen < IEEE802_11_FC_LEN ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return orig_caplen ; //<S2SV> } //<S2SV> fc = EXTRACT_LE_16BITS ( p ) ; //<S2SV> hdrlen = extract_header_length ( ndo , fc ) ; //<S2SV> if ( hdrlen == 0 ) { //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( pad ) //<S2SV> hdrlen = roundup2 ( hdrlen , 4 ) ; //<S2SV> if ( ndo -> ndo_Hflag && FC_TYPE ( fc ) == T_DATA && //<S2SV> DATA_FRAME_IS_QOS ( FC_SUBTYPE ( fc ) ) ) { //<S2SV> meshdrlen = extract_mesh_header_length ( p + hdrlen ) ; //<S2SV> hdrlen += meshdrlen ; //<S2SV> } else //<S2SV> meshdrlen = 0 ; //<S2SV> if ( caplen < hdrlen ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> ieee_802_11_hdr_print ( ndo , fc , p , hdrlen , meshdrlen ) ; //<S2SV> length -= hdrlen ; //<S2SV> caplen -= hdrlen ; //<S2SV> p += hdrlen ; //<S2SV> src . addr_string = etheraddr_string ; //<S2SV> dst . addr_string = etheraddr_string ; //<S2SV> switch ( FC_TYPE ( fc ) ) { //<S2SV> case T_MGMT : //<S2SV> get_mgmt_src_dst_mac ( p - hdrlen , & src . addr , & dst . addr ) ; //<S2SV> if ( ! mgmt_body_print ( ndo , fc , src . addr , p , length ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> break ; //<S2SV> case T_CTRL : //<S2SV> if ( ! ctrl_body_print ( ndo , fc , p - hdrlen ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> break ; //<S2SV> case T_DATA : //<S2SV> if ( DATA_FRAME_IS_NULL ( FC_SUBTYPE ( fc ) ) ) //<S2SV> return hdrlen ; //<S2SV> if ( FC_PROTECTED ( fc ) ) { //<S2SV> ND_PRINT ( ( ndo , "Data" ) ) ; //<S2SV> if ( ! wep_print ( ndo , p ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> } else { //<S2SV> get_data_src_dst_mac ( fc , p - hdrlen , & src . addr , & dst . addr ) ; //<S2SV> llc_hdrlen = llc_print ( ndo , p , length , caplen , & src , & dst ) ; //<S2SV> if ( llc_hdrlen < 0 ) { //<S2SV> if ( ! ndo -> ndo_suppress_default_print ) //<S2SV> ND_DEFAULTPRINT ( p , caplen ) ; //<S2SV> llc_hdrlen = - llc_hdrlen ; //<S2SV> } //<S2SV> hdrlen += llc_hdrlen ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> 