static void //<S2SV> print_trans ( netdissect_options * ndo , //<S2SV> const u_char * words , const u_char * data1 , const u_char * buf , const u_char * maxbuf ) //<S2SV> { //<S2SV> u_int bcc ; //<S2SV> const char * f1 , * f2 , * f3 , * f4 ; //<S2SV> const u_char * data , * param ; //<S2SV> const u_char * w = words + 1 ; //<S2SV> int datalen , paramlen ; //<S2SV> if ( request ) { //<S2SV> ND_TCHECK2 ( w [ 12 * 2 ] , 2 ) ; //<S2SV> paramlen = EXTRACT_LE_16BITS ( w + 9 * 2 ) ; //<S2SV> param = buf + EXTRACT_LE_16BITS ( w + 10 * 2 ) ; //<S2SV> datalen = EXTRACT_LE_16BITS ( w + 11 * 2 ) ; //<S2SV> data = buf + EXTRACT_LE_16BITS ( w + 12 * 2 ) ; //<S2SV> f1 = "TotParamCnt=[d]<S2SV_blank>\\nTotDataCnt=[d]<S2SV_blank>\\nMaxParmCnt=[d]<S2SV_blank>\\nMaxDataCnt=[d]\\nMaxSCnt=[d]<S2SV_blank>\\nTransFlags=[w]<S2SV_blank>\\nRes1=[w]<S2SV_blank>\\nRes2=[w]<S2SV_blank>\\nRes3=[w]\\nParamCnt=[d]<S2SV_blank>\\nParamOff=[d]<S2SV_blank>\\nDataCnt=[d]<S2SV_blank>\\nDataOff=[d]<S2SV_blank>\\nSUCnt=[d]\\n" ; //<S2SV> f2 = "|Name=[S]\\n" ; //<S2SV> f3 = "|Param<S2SV_blank>" ; //<S2SV> f4 = "|Data<S2SV_blank>" ; //<S2SV> } else { //<S2SV> ND_TCHECK2 ( w [ 7 * 2 ] , 2 ) ; //<S2SV> paramlen = EXTRACT_LE_16BITS ( w + 3 * 2 ) ; //<S2SV> param = buf + EXTRACT_LE_16BITS ( w + 4 * 2 ) ; //<S2SV> datalen = EXTRACT_LE_16BITS ( w + 6 * 2 ) ; //<S2SV> data = buf + EXTRACT_LE_16BITS ( w + 7 * 2 ) ; //<S2SV> f1 = "TotParamCnt=[d]<S2SV_blank>\\nTotDataCnt=[d]<S2SV_blank>\\nRes1=[d]\\nParamCnt=[d]<S2SV_blank>\\nParamOff=[d]<S2SV_blank>\\nRes2=[d]<S2SV_blank>\\nDataCnt=[d]<S2SV_blank>\\nDataOff=[d]<S2SV_blank>\\nRes3=[d]\\nLsetup=[d]\\n" ; //<S2SV> f2 = "|Unknown<S2SV_blank>" ; //<S2SV> f3 = "|Param<S2SV_blank>" ; //<S2SV> f4 = "|Data<S2SV_blank>" ; //<S2SV> } //<S2SV> smb_fdata ( ndo , words + 1 , f1 , min ( words + 1 + 2 * words [ 0 ] , maxbuf ) , //<S2SV> unicodestr ) ; //<S2SV> ND_TCHECK2 ( * data1 , 2 ) ; //<S2SV> bcc = EXTRACT_LE_16BITS ( data1 ) ; //<S2SV> ND_PRINT ( ( ndo , "smb_bcc=%u\\n" , bcc ) ) ; //<S2SV> if ( bcc > 0 ) { //<S2SV> smb_fdata ( ndo , data1 + 2 , f2 , maxbuf - ( paramlen + datalen ) , unicodestr ) ; //<S2SV> # define MAILSLOT_BROWSE_STR "\\\\MAILSLOT\\\\BROWSE" //<S2SV> ND_TCHECK2 ( * ( data1 + 2 ) , strlen ( MAILSLOT_BROWSE_STR ) + 1 ) ; //<S2SV> if ( strcmp ( ( const char * ) ( data1 + 2 ) , MAILSLOT_BROWSE_STR ) == 0 ) { //<S2SV> print_browse ( ndo , param , paramlen , data , datalen ) ; //<S2SV> return ; //<S2SV> } //<S2SV> # undef MAILSLOT_BROWSE_STR //<S2SV> # define PIPE_LANMAN_STR "\\\\PIPE\\\\LANMAN" //<S2SV> ND_TCHECK2 ( * ( data1 + 2 ) , strlen ( PIPE_LANMAN_STR ) + 1 ) ; //<S2SV> if ( strcmp ( ( const char * ) ( data1 + 2 ) , PIPE_LANMAN_STR ) == 0 ) { //<S2SV> print_ipc ( ndo , param , paramlen , data , datalen ) ; //<S2SV> return ; //<S2SV> } //<S2SV> # undef PIPE_LANMAN_STR //<S2SV> if ( paramlen ) //<S2SV> smb_fdata ( ndo , param , f3 , min ( param + paramlen , maxbuf ) , unicodestr ) ; //<S2SV> if ( datalen ) //<S2SV> smb_fdata ( ndo , data , f4 , min ( data + datalen , maxbuf ) , unicodestr ) ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> } //<S2SV> 