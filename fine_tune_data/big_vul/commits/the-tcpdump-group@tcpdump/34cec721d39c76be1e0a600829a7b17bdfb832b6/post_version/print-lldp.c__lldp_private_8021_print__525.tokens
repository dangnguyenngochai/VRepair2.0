static int //<S2SV> lldp_private_8021_print ( netdissect_options * ndo , //<S2SV> const u_char * tptr , u_int tlv_len ) //<S2SV> { //<S2SV> int subtype , hexdump = FALSE ; //<S2SV> u_int sublen ; //<S2SV> u_int tval ; //<S2SV> u_int i ; //<S2SV> if ( tlv_len < 4 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> subtype = * ( tptr + 3 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Subtype<S2SV_blank>(%u)" , //<S2SV> tok2str ( lldp_8021_subtype_values , "unknown" , subtype ) , //<S2SV> subtype ) ) ; //<S2SV> switch ( subtype ) { //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_PORT_VLAN_ID : //<S2SV> if ( tlv_len < 6 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>port<S2SV_blank>vlan<S2SV_blank>id<S2SV_blank>(PVID):<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_PROTOCOL_VLAN_ID : //<S2SV> if ( tlv_len < 7 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>port<S2SV_blank>and<S2SV_blank>protocol<S2SV_blank>vlan<S2SV_blank>id<S2SV_blank>(PPVID):<S2SV_blank>%u,<S2SV_blank>flags<S2SV_blank>[%s]<S2SV_blank>(0x%02x)" , //<S2SV> EXTRACT_16BITS ( tptr + 5 ) , //<S2SV> bittok2str ( lldp_8021_port_protocol_id_values , "none" , * ( tptr + 4 ) ) , //<S2SV> * ( tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_VLAN_NAME : //<S2SV> if ( tlv_len < 6 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>vlan<S2SV_blank>id<S2SV_blank>(VID):<S2SV_blank>%u" , EXTRACT_16BITS ( tptr + 4 ) ) ) ; //<S2SV> if ( tlv_len < 7 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> sublen = * ( tptr + 6 ) ; //<S2SV> if ( tlv_len < 7 + sublen ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>vlan<S2SV_blank>name:<S2SV_blank>" ) ) ; //<S2SV> safeputs ( ndo , tptr + 7 , sublen ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_PROTOCOL_IDENTITY : //<S2SV> if ( tlv_len < 5 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> sublen = * ( tptr + 4 ) ; //<S2SV> if ( tlv_len < 5 + sublen ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>protocol<S2SV_blank>identity:<S2SV_blank>" ) ) ; //<S2SV> safeputs ( ndo , tptr + 5 , sublen ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_CONGESTION_NOTIFICATION : //<S2SV> if ( tlv_len < LLDP_PRIVATE_8021_SUBTYPE_CONGESTION_NOTIFICATION_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> tval = * ( tptr + 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Pre-Priority<S2SV_blank>CNPV<S2SV_blank>Indicator" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority<S2SV_blank>:<S2SV_blank>0<S2SV_blank><S2SV_blank>1<S2SV_blank><S2SV_blank>2<S2SV_blank><S2SV_blank>3<S2SV_blank><S2SV_blank>4<S2SV_blank><S2SV_blank>5<S2SV_blank><S2SV_blank>6<S2SV_blank><S2SV_blank>7" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Value<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>:<S2SV_blank>" ) ) ; //<S2SV> for ( i = 0 ; i < NO_OF_BITS ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%-2d<S2SV_blank>" , ( tval >> i ) & 0x01 ) ) ; //<S2SV> tval = * ( tptr + 5 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Pre-Priority<S2SV_blank>Ready<S2SV_blank>Indicator" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority<S2SV_blank>:<S2SV_blank>0<S2SV_blank><S2SV_blank>1<S2SV_blank><S2SV_blank>2<S2SV_blank><S2SV_blank>3<S2SV_blank><S2SV_blank>4<S2SV_blank><S2SV_blank>5<S2SV_blank><S2SV_blank>6<S2SV_blank><S2SV_blank>7" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Value<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>:<S2SV_blank>" ) ) ; //<S2SV> for ( i = 0 ; i < NO_OF_BITS ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%-2d<S2SV_blank>" , ( tval >> i ) & 0x01 ) ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_ETS_CONFIGURATION : //<S2SV> if ( tlv_len < LLDP_PRIVATE_8021_SUBTYPE_ETS_CONFIGURATION_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> tval = * ( tptr + 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Willing:%d,<S2SV_blank>CBS:%d,<S2SV_blank>RES:%d,<S2SV_blank>Max<S2SV_blank>TCs:%d" , //<S2SV> tval >> 7 , ( tval >> 6 ) & 0x02 , ( tval >> 3 ) & 0x07 , tval & 0x07 ) ) ; //<S2SV> print_ets_priority_assignment_table ( ndo , tptr + 5 ) ; //<S2SV> print_tc_bandwidth_table ( ndo , tptr + 9 ) ; //<S2SV> print_tsa_assignment_table ( ndo , tptr + 17 ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_ETS_RECOMMENDATION : //<S2SV> if ( tlv_len < LLDP_PRIVATE_8021_SUBTYPE_ETS_RECOMMENDATION_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>RES:<S2SV_blank>%d" , * ( tptr + 4 ) ) ) ; //<S2SV> print_ets_priority_assignment_table ( ndo , tptr + 5 ) ; //<S2SV> print_tc_bandwidth_table ( ndo , tptr + 9 ) ; //<S2SV> print_tsa_assignment_table ( ndo , tptr + 17 ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_PFC_CONFIGURATION : //<S2SV> if ( tlv_len < LLDP_PRIVATE_8021_SUBTYPE_PFC_CONFIGURATION_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> tval = * ( tptr + 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Willing:<S2SV_blank>%d,<S2SV_blank>MBC:<S2SV_blank>%d,<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>PFC<S2SV_blank>cap:%d<S2SV_blank>" , //<S2SV> tval >> 7 , ( tval >> 6 ) & 0x01 , ( tval >> 4 ) & 0x03 , ( tval & 0x0f ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>PFC<S2SV_blank>Enable" ) ) ; //<S2SV> tval = * ( tptr + 5 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority<S2SV_blank>:<S2SV_blank>0<S2SV_blank><S2SV_blank>1<S2SV_blank><S2SV_blank>2<S2SV_blank><S2SV_blank>3<S2SV_blank><S2SV_blank>4<S2SV_blank><S2SV_blank>5<S2SV_blank><S2SV_blank>6<S2SV_blank><S2SV_blank>7" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Value<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>:<S2SV_blank>" ) ) ; //<S2SV> for ( i = 0 ; i < NO_OF_BITS ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%-2d<S2SV_blank>" , ( tval >> i ) & 0x01 ) ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_APPLICATION_PRIORITY : //<S2SV> if ( tlv_len < LLDP_PRIVATE_8021_SUBTYPE_APPLICATION_PRIORITY_MIN_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>RES:<S2SV_blank>%d" , * ( tptr + 4 ) ) ) ; //<S2SV> if ( tlv_len <= LLDP_PRIVATE_8021_SUBTYPE_APPLICATION_PRIORITY_MIN_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> sublen = tlv_len - 5 ; //<S2SV> if ( sublen % 3 != 0 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> i = 0 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Application<S2SV_blank>Priority<S2SV_blank>Table" ) ) ; //<S2SV> while ( i < sublen ) { //<S2SV> tval = * ( tptr + i + 5 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>RES:<S2SV_blank>%u,<S2SV_blank>Sel:<S2SV_blank>%u,<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>%u" , //<S2SV> tval >> 5 , ( tval >> 3 ) & 0x03 , ( tval & 0x07 ) , //<S2SV> EXTRACT_16BITS ( tptr + i + 5 ) ) ) ; //<S2SV> i = i + 3 ; //<S2SV> } //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_EVB : //<S2SV> if ( tlv_len < LLDP_PRIVATE_8021_SUBTYPE_EVB_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>EVB<S2SV_blank>Bridge<S2SV_blank>Status" ) ) ; //<S2SV> tval = * ( tptr + 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>BGID:<S2SV_blank>%d,<S2SV_blank>RRCAP:<S2SV_blank>%d,<S2SV_blank>RRCTR:<S2SV_blank>%d" , //<S2SV> tval >> 3 , ( tval >> 2 ) & 0x01 , ( tval >> 1 ) & 0x01 , tval & 0x01 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>EVB<S2SV_blank>Station<S2SV_blank>Status" ) ) ; //<S2SV> tval = * ( tptr + 5 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>SGID:<S2SV_blank>%d,<S2SV_blank>RRREQ:<S2SV_blank>%d,RRSTAT:<S2SV_blank>%d" , //<S2SV> tval >> 4 , ( tval >> 3 ) & 0x01 , ( tval >> 2 ) & 0x01 , tval & 0x03 ) ) ; //<S2SV> tval = * ( tptr + 6 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>R:<S2SV_blank>%d,<S2SV_blank>RTE:<S2SV_blank>%d,<S2SV_blank>" , tval >> 5 , tval & 0x1f ) ) ; //<S2SV> tval = * ( tptr + 7 ) ; //<S2SV> ND_PRINT ( ( ndo , "EVB<S2SV_blank>Mode:<S2SV_blank>%s<S2SV_blank>[%d]" , //<S2SV> tok2str ( lldp_evb_mode_values , "unknown" , tval >> 6 ) , tval >> 6 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>ROL:<S2SV_blank>%d,<S2SV_blank>RWD:<S2SV_blank>%d,<S2SV_blank>" , ( tval >> 5 ) & 0x01 , tval & 0x1f ) ) ; //<S2SV> tval = * ( tptr + 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "RES:<S2SV_blank>%d,<S2SV_blank>ROL:<S2SV_blank>%d,<S2SV_blank>RKA:<S2SV_blank>%d" , tval >> 6 , ( tval >> 5 ) & 0x01 , tval & 0x1f ) ) ; //<S2SV> break ; //<S2SV> case LLDP_PRIVATE_8021_SUBTYPE_CDCP : //<S2SV> if ( tlv_len < LLDP_PRIVATE_8021_SUBTYPE_CDCP_MIN_LENGTH ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> tval = * ( tptr + 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Role:<S2SV_blank>%d,<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>Scomp:<S2SV_blank>%d<S2SV_blank>" , //<S2SV> tval >> 7 , ( tval >> 4 ) & 0x07 , ( tval >> 3 ) & 0x01 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "ChnCap:<S2SV_blank>%d" , EXTRACT_16BITS ( tptr + 6 ) & 0x0fff ) ) ; //<S2SV> sublen = tlv_len - 8 ; //<S2SV> if ( sublen % 3 != 0 ) { //<S2SV> return hexdump ; //<S2SV> } //<S2SV> i = 0 ; //<S2SV> while ( i < sublen ) { //<S2SV> tval = EXTRACT_24BITS ( tptr + i + 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>SCID:<S2SV_blank>%d,<S2SV_blank>SVID:<S2SV_blank>%d" , //<S2SV> tval >> 12 , tval & 0x000fff ) ) ; //<S2SV> i = i + 3 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> } //<S2SV> return hexdump ; //<S2SV> } //<S2SV> 