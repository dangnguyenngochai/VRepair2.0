static char * //<S2SV> bittok2str_internal ( register const struct tok * lp , register const char * fmt , //<S2SV> register u_int v , const char * sep ) //<S2SV> { //<S2SV> static char buf [ 1024 + 1 ] ; //<S2SV> char * bufp = buf ; //<S2SV> size_t space_left = sizeof ( buf ) , string_size ; //<S2SV> register u_int rotbit ; //<S2SV> register u_int tokval ; //<S2SV> const char * sepstr = "" ; //<S2SV> while ( lp != NULL && lp -> s != NULL ) { //<S2SV> tokval = lp -> v ; //<S2SV> rotbit = 1 ; //<S2SV> while ( rotbit != 0 ) { //<S2SV> if ( tokval == ( v & rotbit ) ) { //<S2SV> if ( space_left <= 1 ) //<S2SV> return ( buf ) ; //<S2SV> string_size = strlcpy ( bufp , sepstr , space_left ) ; //<S2SV> if ( string_size >= space_left ) //<S2SV> return ( buf ) ; //<S2SV> bufp += string_size ; //<S2SV> space_left -= string_size ; //<S2SV> if ( space_left <= 1 ) //<S2SV> return ( buf ) ; //<S2SV> string_size = strlcpy ( bufp , lp -> s , space_left ) ; //<S2SV> if ( string_size >= space_left ) //<S2SV> return ( buf ) ; //<S2SV> bufp += string_size ; //<S2SV> space_left -= string_size ; //<S2SV> sepstr = sep ; //<S2SV> break ; //<S2SV> } //<S2SV> rotbit = rotbit << 1 ; //<S2SV> } //<S2SV> lp ++ ; //<S2SV> } //<S2SV> if ( bufp == buf ) //<S2SV> ( void ) snprintf ( buf , sizeof ( buf ) , fmt == NULL ? "#%08x" : fmt , v ) ; //<S2SV> return ( buf ) ; //<S2SV> } //<S2SV> 