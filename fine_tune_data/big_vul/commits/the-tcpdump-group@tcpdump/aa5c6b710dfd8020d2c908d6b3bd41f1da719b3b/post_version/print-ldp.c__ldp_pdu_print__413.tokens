static u_int //<S2SV> ldp_pdu_print ( netdissect_options * ndo , //<S2SV> register const u_char * pptr ) //<S2SV> { //<S2SV> const struct ldp_common_header * ldp_com_header ; //<S2SV> const struct ldp_msg_header * ldp_msg_header ; //<S2SV> const u_char * tptr , * msg_tptr ; //<S2SV> u_short tlen ; //<S2SV> u_short pdu_len , msg_len , msg_type , msg_tlen ; //<S2SV> int hexdump , processed ; //<S2SV> ldp_com_header = ( const struct ldp_common_header * ) pptr ; //<S2SV> ND_TCHECK ( * ldp_com_header ) ; //<S2SV> if ( EXTRACT_16BITS ( & ldp_com_header -> version ) != LDP_VERSION ) { //<S2SV> ND_PRINT ( ( ndo , "%sLDP<S2SV_blank>version<S2SV_blank>%u<S2SV_blank>packet<S2SV_blank>not<S2SV_blank>supported" , //<S2SV> ( ndo -> ndo_vflag < 1 ) ? "" : "\\n\\t" , //<S2SV> EXTRACT_16BITS ( & ldp_com_header -> version ) ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> pdu_len = EXTRACT_16BITS ( & ldp_com_header -> pdu_length ) ; //<S2SV> if ( pdu_len < sizeof ( const struct ldp_common_header ) - 4 ) { //<S2SV> ND_PRINT ( ( ndo , "%sLDP,<S2SV_blank>pdu-length:<S2SV_blank>%u<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , //<S2SV> ( ndo -> ndo_vflag < 1 ) ? "" : "\\n\\t" , //<S2SV> pdu_len , //<S2SV> ( u_int ) ( sizeof ( const struct ldp_common_header ) - 4 ) ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%sLDP,<S2SV_blank>Label-Space-ID:<S2SV_blank>%s:%u,<S2SV_blank>pdu-length:<S2SV_blank>%u" , //<S2SV> ( ndo -> ndo_vflag < 1 ) ? "" : "\\n\\t" , //<S2SV> ipaddr_string ( ndo , & ldp_com_header -> lsr_id ) , //<S2SV> EXTRACT_16BITS ( & ldp_com_header -> label_space ) , //<S2SV> pdu_len ) ) ; //<S2SV> if ( ndo -> ndo_vflag < 1 ) //<S2SV> return 0 ; //<S2SV> tptr = pptr + sizeof ( const struct ldp_common_header ) ; //<S2SV> tlen = pdu_len - ( sizeof ( const struct ldp_common_header ) - 4 ) ; //<S2SV> while ( tlen > 0 ) { //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct ldp_msg_header ) ) ; //<S2SV> ldp_msg_header = ( const struct ldp_msg_header * ) tptr ; //<S2SV> msg_len = EXTRACT_16BITS ( ldp_msg_header -> length ) ; //<S2SV> msg_type = LDP_MASK_MSG_TYPE ( EXTRACT_16BITS ( ldp_msg_header -> type ) ) ; //<S2SV> if ( msg_len < sizeof ( struct ldp_msg_header ) - 4 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Message<S2SV_blank>(0x%04x),<S2SV_blank>length:<S2SV_blank>%u<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , //<S2SV> tok2str ( ldp_msg_values , //<S2SV> "Unknown" , //<S2SV> msg_type ) , //<S2SV> msg_type , //<S2SV> msg_len , //<S2SV> ( u_int ) ( sizeof ( struct ldp_msg_header ) - 4 ) ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Message<S2SV_blank>(0x%04x),<S2SV_blank>length:<S2SV_blank>%u,<S2SV_blank>Message<S2SV_blank>ID:<S2SV_blank>0x%08x,<S2SV_blank>Flags:<S2SV_blank>[%s<S2SV_blank>if<S2SV_blank>unknown]" , //<S2SV> tok2str ( ldp_msg_values , //<S2SV> "Unknown" , //<S2SV> msg_type ) , //<S2SV> msg_type , //<S2SV> msg_len , //<S2SV> EXTRACT_32BITS ( & ldp_msg_header -> id ) , //<S2SV> LDP_MASK_U_BIT ( EXTRACT_16BITS ( & ldp_msg_header -> type ) ) ? "continue<S2SV_blank>processing" : "ignore" ) ) ; //<S2SV> msg_tptr = tptr + sizeof ( struct ldp_msg_header ) ; //<S2SV> msg_tlen = msg_len - ( sizeof ( struct ldp_msg_header ) - 4 ) ; //<S2SV> ND_TCHECK2 ( * tptr , msg_len ) ; //<S2SV> hexdump = FALSE ; //<S2SV> switch ( msg_type ) { //<S2SV> case LDP_MSG_NOTIF : //<S2SV> case LDP_MSG_HELLO : //<S2SV> case LDP_MSG_INIT : //<S2SV> case LDP_MSG_KEEPALIVE : //<S2SV> case LDP_MSG_ADDRESS : //<S2SV> case LDP_MSG_LABEL_MAPPING : //<S2SV> case LDP_MSG_ADDRESS_WITHDRAW : //<S2SV> case LDP_MSG_LABEL_WITHDRAW : //<S2SV> while ( msg_tlen >= 4 ) { //<S2SV> processed = ldp_tlv_print ( ndo , msg_tptr , msg_tlen ) ; //<S2SV> if ( processed == 0 ) //<S2SV> break ; //<S2SV> msg_tlen -= processed ; //<S2SV> msg_tptr += processed ; //<S2SV> } //<S2SV> break ; //<S2SV> case LDP_MSG_LABEL_REQUEST : //<S2SV> case LDP_MSG_LABEL_RELEASE : //<S2SV> case LDP_MSG_LABEL_ABORT_REQUEST : //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , msg_tptr , "\\n\\t<S2SV_blank><S2SV_blank>" , msg_tlen ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 || hexdump == TRUE ) //<S2SV> print_unknown_data ( ndo , tptr + sizeof ( struct ldp_msg_header ) , "\\n\\t<S2SV_blank><S2SV_blank>" , //<S2SV> msg_len ) ; //<S2SV> tptr += msg_len + 4 ; //<S2SV> tlen -= msg_len + 4 ; //<S2SV> } //<S2SV> return pdu_len + 4 ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 