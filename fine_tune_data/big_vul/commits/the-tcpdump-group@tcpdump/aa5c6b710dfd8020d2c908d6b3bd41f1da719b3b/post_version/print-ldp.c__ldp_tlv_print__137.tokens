static int //<S2SV> ldp_tlv_print ( netdissect_options * ndo , //<S2SV> register const u_char * tptr , //<S2SV> u_short msg_tlen ) //<S2SV> { //<S2SV> struct ldp_tlv_header { //<S2SV> uint8_t type [ 2 ] ; //<S2SV> uint8_t length [ 2 ] ; //<S2SV> } ; //<S2SV> const struct ldp_tlv_header * ldp_tlv_header ; //<S2SV> u_short tlv_type , tlv_len , tlv_tlen , af , ft_flags ; //<S2SV> u_char fec_type ; //<S2SV> u_int ui , vc_info_len , vc_info_tlv_type , vc_info_tlv_len , idx ; //<S2SV> char buf [ 100 ] ; //<S2SV> int i ; //<S2SV> ldp_tlv_header = ( const struct ldp_tlv_header * ) tptr ; //<S2SV> ND_TCHECK ( * ldp_tlv_header ) ; //<S2SV> tlv_len = EXTRACT_16BITS ( ldp_tlv_header -> length ) ; //<S2SV> if ( tlv_len + 4 > msg_tlen ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank>TLV<S2SV_blank>contents<S2SV_blank>go<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>message" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> tlv_tlen = tlv_len ; //<S2SV> tlv_type = LDP_MASK_TLV_TYPE ( EXTRACT_16BITS ( ldp_tlv_header -> type ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>(0x%04x),<S2SV_blank>length:<S2SV_blank>%u,<S2SV_blank>Flags:<S2SV_blank>[%s<S2SV_blank>and<S2SV_blank>%s<S2SV_blank>forward<S2SV_blank>if<S2SV_blank>unknown]" , //<S2SV> tok2str ( ldp_tlv_values , //<S2SV> "Unknown" , //<S2SV> tlv_type ) , //<S2SV> tlv_type , //<S2SV> tlv_len , //<S2SV> LDP_MASK_U_BIT ( EXTRACT_16BITS ( & ldp_tlv_header -> type ) ) ? "continue<S2SV_blank>processing" : "ignore" , //<S2SV> LDP_MASK_F_BIT ( EXTRACT_16BITS ( & ldp_tlv_header -> type ) ) ? "do" : "don\'t" ) ) ; //<S2SV> tptr += sizeof ( struct ldp_tlv_header ) ; //<S2SV> switch ( tlv_type ) { //<S2SV> case LDP_TLV_COMMON_HELLO : //<S2SV> TLV_TCHECK ( 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Hold<S2SV_blank>Time:<S2SV_blank>%us,<S2SV_blank>Flags:<S2SV_blank>[%s<S2SV_blank>Hello%s]" , //<S2SV> EXTRACT_16BITS ( tptr ) , //<S2SV> ( EXTRACT_16BITS ( tptr + 2 ) & 0x8000 ) ? "Targeted" : "Link" , //<S2SV> ( EXTRACT_16BITS ( tptr + 2 ) & 0x4000 ) ? ",<S2SV_blank>Request<S2SV_blank>for<S2SV_blank>targeted<S2SV_blank>Hellos" : "" ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_IPV4_TRANSPORT_ADDR : //<S2SV> TLV_TCHECK ( 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Transport<S2SV_blank>Address:<S2SV_blank>%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_IPV6_TRANSPORT_ADDR : //<S2SV> TLV_TCHECK ( 16 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Transport<S2SV_blank>Address:<S2SV_blank>%s" , ip6addr_string ( ndo , tptr ) ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_CONFIG_SEQ_NUMBER : //<S2SV> TLV_TCHECK ( 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Sequence<S2SV_blank>Number:<S2SV_blank>%u" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_ADDRESS_LIST : //<S2SV> TLV_TCHECK ( LDP_TLV_ADDRESS_LIST_AFNUM_LEN ) ; //<S2SV> af = EXTRACT_16BITS ( tptr ) ; //<S2SV> tptr += LDP_TLV_ADDRESS_LIST_AFNUM_LEN ; //<S2SV> tlv_tlen -= LDP_TLV_ADDRESS_LIST_AFNUM_LEN ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Address<S2SV_blank>Family:<S2SV_blank>%s,<S2SV_blank>addresses" , //<S2SV> tok2str ( af_values , "Unknown<S2SV_blank>(%u)" , af ) ) ) ; //<S2SV> switch ( af ) { //<S2SV> case AFNUM_INET : //<S2SV> while ( tlv_tlen >= sizeof ( struct in_addr ) ) { //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct in_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> tlv_tlen -= sizeof ( struct in_addr ) ; //<S2SV> tptr += sizeof ( struct in_addr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case AFNUM_INET6 : //<S2SV> while ( tlv_tlen >= sizeof ( struct in6_addr ) ) { //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct in6_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , tptr ) ) ) ; //<S2SV> tlv_tlen -= sizeof ( struct in6_addr ) ; //<S2SV> tptr += sizeof ( struct in6_addr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case LDP_TLV_COMMON_SESSION : //<S2SV> TLV_TCHECK ( 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Version:<S2SV_blank>%u,<S2SV_blank>Keepalive:<S2SV_blank>%us,<S2SV_blank>Flags:<S2SV_blank>[Downstream<S2SV_blank>%s,<S2SV_blank>Loop<S2SV_blank>Detection<S2SV_blank>%s]" , //<S2SV> EXTRACT_16BITS ( tptr ) , EXTRACT_16BITS ( tptr + 2 ) , //<S2SV> ( EXTRACT_16BITS ( tptr + 6 ) & 0x8000 ) ? "On<S2SV_blank>Demand" : "Unsolicited" , //<S2SV> ( EXTRACT_16BITS ( tptr + 6 ) & 0x4000 ) ? "Enabled" : "Disabled" //<S2SV> ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_FEC : //<S2SV> TLV_TCHECK ( 1 ) ; //<S2SV> fec_type = * tptr ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>FEC<S2SV_blank>(0x%02x)" , //<S2SV> tok2str ( ldp_fec_values , "Unknown" , fec_type ) , //<S2SV> fec_type ) ) ; //<S2SV> tptr += 1 ; //<S2SV> tlv_tlen -= 1 ; //<S2SV> switch ( fec_type ) { //<S2SV> case LDP_FEC_WILDCARD : //<S2SV> break ; //<S2SV> case LDP_FEC_PREFIX : //<S2SV> TLV_TCHECK ( 2 ) ; //<S2SV> af = EXTRACT_16BITS ( tptr ) ; //<S2SV> tptr += LDP_TLV_ADDRESS_LIST_AFNUM_LEN ; //<S2SV> tlv_tlen -= LDP_TLV_ADDRESS_LIST_AFNUM_LEN ; //<S2SV> if ( af == AFNUM_INET ) { //<S2SV> i = decode_prefix4 ( ndo , tptr , tlv_tlen , buf , sizeof ( buf ) ) ; //<S2SV> if ( i == - 2 ) //<S2SV> goto trunc ; //<S2SV> if ( i == - 3 ) //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>IPv4<S2SV_blank>prefix<S2SV_blank>(goes<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>TLV)" ) ) ; //<S2SV> else if ( i == - 1 ) //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>IPv4<S2SV_blank>prefix<S2SV_blank>(invalid<S2SV_blank>length)" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>IPv4<S2SV_blank>prefix<S2SV_blank>%s" , buf ) ) ; //<S2SV> } //<S2SV> else if ( af == AFNUM_INET6 ) { //<S2SV> i = decode_prefix6 ( ndo , tptr , tlv_tlen , buf , sizeof ( buf ) ) ; //<S2SV> if ( i == - 2 ) //<S2SV> goto trunc ; //<S2SV> if ( i == - 3 ) //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>IPv4<S2SV_blank>prefix<S2SV_blank>(goes<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>TLV)" ) ) ; //<S2SV> else if ( i == - 1 ) //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>IPv6<S2SV_blank>prefix<S2SV_blank>(invalid<S2SV_blank>length)" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>IPv6<S2SV_blank>prefix<S2SV_blank>%s" , buf ) ) ; //<S2SV> } //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Address<S2SV_blank>family<S2SV_blank>%u<S2SV_blank>prefix" , af ) ) ; //<S2SV> break ; //<S2SV> case LDP_FEC_HOSTADDRESS : //<S2SV> break ; //<S2SV> case LDP_FEC_MARTINI_VC : //<S2SV> TLV_TCHECK ( 7 ) ; //<S2SV> vc_info_len = * ( tptr + 2 ) ; //<S2SV> if ( vc_info_len == 0 ) { //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s,<S2SV_blank>%scontrol<S2SV_blank>word,<S2SV_blank>group-ID<S2SV_blank>%u,<S2SV_blank>VC-info-length:<S2SV_blank>%u" , //<S2SV> tok2str ( mpls_pw_types_values , "Unknown" , EXTRACT_16BITS ( tptr ) & 0x7fff ) , //<S2SV> EXTRACT_16BITS ( tptr ) & 0x8000 ? "" : "no<S2SV_blank>" , //<S2SV> EXTRACT_32BITS ( tptr + 3 ) , //<S2SV> vc_info_len ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> TLV_TCHECK ( 11 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s,<S2SV_blank>%scontrol<S2SV_blank>word,<S2SV_blank>group-ID<S2SV_blank>%u,<S2SV_blank>VC-ID<S2SV_blank>%u,<S2SV_blank>VC-info-length:<S2SV_blank>%u" , //<S2SV> tok2str ( mpls_pw_types_values , "Unknown" , EXTRACT_16BITS ( tptr ) & 0x7fff ) , //<S2SV> EXTRACT_16BITS ( tptr ) & 0x8000 ? "" : "no<S2SV_blank>" , //<S2SV> EXTRACT_32BITS ( tptr + 3 ) , //<S2SV> EXTRACT_32BITS ( tptr + 7 ) , //<S2SV> vc_info_len ) ) ; //<S2SV> if ( vc_info_len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(invalid,<S2SV_blank><<S2SV_blank>4" ) ) ; //<S2SV> return ( tlv_len + 4 ) ; //<S2SV> } //<S2SV> vc_info_len -= 4 ; //<S2SV> tptr += 11 ; //<S2SV> tlv_tlen -= 11 ; //<S2SV> TLV_TCHECK ( vc_info_len ) ; //<S2SV> while ( vc_info_len > 2 ) { //<S2SV> vc_info_tlv_type = * tptr ; //<S2SV> vc_info_tlv_len = * ( tptr + 1 ) ; //<S2SV> if ( vc_info_tlv_len < 2 ) //<S2SV> break ; //<S2SV> if ( vc_info_len < vc_info_tlv_len ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tInterface<S2SV_blank>Parameter:<S2SV_blank>%s<S2SV_blank>(0x%02x),<S2SV_blank>len<S2SV_blank>%u" , //<S2SV> tok2str ( ldp_fec_martini_ifparm_values , "Unknown" , vc_info_tlv_type ) , //<S2SV> vc_info_tlv_type , //<S2SV> vc_info_tlv_len ) ) ; //<S2SV> switch ( vc_info_tlv_type ) { //<S2SV> case LDP_FEC_MARTINI_IFPARM_MTU : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%u" , EXTRACT_16BITS ( tptr + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case LDP_FEC_MARTINI_IFPARM_DESC : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>" ) ) ; //<S2SV> for ( idx = 2 ; idx < vc_info_tlv_len ; idx ++ ) //<S2SV> safeputchar ( ndo , * ( tptr + idx ) ) ; //<S2SV> break ; //<S2SV> case LDP_FEC_MARTINI_IFPARM_VCCV : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank>Control<S2SV_blank>Channels<S2SV_blank>(0x%02x)<S2SV_blank>=<S2SV_blank>[%s]" , //<S2SV> * ( tptr + 2 ) , //<S2SV> bittok2str ( ldp_fec_martini_ifparm_vccv_cc_values , "none" , * ( tptr + 2 ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank>CV<S2SV_blank>Types<S2SV_blank>(0x%02x)<S2SV_blank>=<S2SV_blank>[%s]" , //<S2SV> * ( tptr + 3 ) , //<S2SV> bittok2str ( ldp_fec_martini_ifparm_vccv_cv_values , "none" , * ( tptr + 3 ) ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> print_unknown_data ( ndo , tptr + 2 , "\\n\\t\\t<S2SV_blank><S2SV_blank>" , vc_info_tlv_len - 2 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> vc_info_len -= vc_info_tlv_len ; //<S2SV> tptr += vc_info_tlv_len ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case LDP_TLV_GENERIC_LABEL : //<S2SV> TLV_TCHECK ( 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Label:<S2SV_blank>%u" , EXTRACT_32BITS ( tptr ) & 0xfffff ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_STATUS : //<S2SV> TLV_TCHECK ( 8 ) ; //<S2SV> ui = EXTRACT_32BITS ( tptr ) ; //<S2SV> tptr += 4 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Status:<S2SV_blank>0x%02x,<S2SV_blank>Flags:<S2SV_blank>[%s<S2SV_blank>and<S2SV_blank>%s<S2SV_blank>forward]" , //<S2SV> ui & 0x3fffffff , //<S2SV> ui & 0x80000000 ? "Fatal<S2SV_blank>error" : "Advisory<S2SV_blank>Notification" , //<S2SV> ui & 0x40000000 ? "do" : "don\'t" ) ) ; //<S2SV> ui = EXTRACT_32BITS ( tptr ) ; //<S2SV> tptr += 4 ; //<S2SV> if ( ui ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>causing<S2SV_blank>Message<S2SV_blank>ID:<S2SV_blank>0x%08x" , ui ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_FT_SESSION : //<S2SV> TLV_TCHECK ( 12 ) ; //<S2SV> ft_flags = EXTRACT_16BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%sReconnect,<S2SV_blank>%sSave<S2SV_blank>State,<S2SV_blank>%sAll-Label<S2SV_blank>Protection,<S2SV_blank>%s<S2SV_blank>Checkpoint,<S2SV_blank>%sRe-Learn<S2SV_blank>State]" , //<S2SV> ft_flags & 0x8000 ? "" : "No<S2SV_blank>" , //<S2SV> ft_flags & 0x8 ? "" : "Don\'t<S2SV_blank>" , //<S2SV> ft_flags & 0x4 ? "" : "No<S2SV_blank>" , //<S2SV> ft_flags & 0x2 ? "Sequence<S2SV_blank>Numbered<S2SV_blank>Label" : "All<S2SV_blank>Labels" , //<S2SV> ft_flags & 0x1 ? "" : "Don\'t<S2SV_blank>" ) ) ; //<S2SV> tptr += 4 ; //<S2SV> ui = EXTRACT_32BITS ( tptr ) ; //<S2SV> if ( ui ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Reconnect<S2SV_blank>Timeout:<S2SV_blank>%ums" , ui ) ) ; //<S2SV> tptr += 4 ; //<S2SV> ui = EXTRACT_32BITS ( tptr ) ; //<S2SV> if ( ui ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Recovery<S2SV_blank>Time:<S2SV_blank>%ums" , ui ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_MTU : //<S2SV> TLV_TCHECK ( 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>MTU:<S2SV_blank>%u" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> case LDP_TLV_HOP_COUNT : //<S2SV> case LDP_TLV_PATH_VECTOR : //<S2SV> case LDP_TLV_ATM_LABEL : //<S2SV> case LDP_TLV_FR_LABEL : //<S2SV> case LDP_TLV_EXTD_STATUS : //<S2SV> case LDP_TLV_RETURNED_PDU : //<S2SV> case LDP_TLV_RETURNED_MSG : //<S2SV> case LDP_TLV_ATM_SESSION_PARM : //<S2SV> case LDP_TLV_FR_SESSION_PARM : //<S2SV> case LDP_TLV_LABEL_REQUEST_MSG_ID : //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlv_tlen ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return ( tlv_len + 4 ) ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return 0 ; //<S2SV> badtlv : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank>TLV<S2SV_blank>contents<S2SV_blank>go<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>TLV" ) ) ; //<S2SV> return ( tlv_len + 4 ) ; //<S2SV> } //<S2SV> 