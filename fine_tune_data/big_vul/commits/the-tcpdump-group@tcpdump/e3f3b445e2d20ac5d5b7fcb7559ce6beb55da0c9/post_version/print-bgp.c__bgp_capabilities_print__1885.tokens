static void //<S2SV> bgp_capabilities_print ( netdissect_options * ndo , //<S2SV> const u_char * opt , int caps_len ) //<S2SV> { //<S2SV> int cap_type , cap_len , tcap_len , cap_offset ; //<S2SV> int i = 0 ; //<S2SV> while ( i < caps_len ) { //<S2SV> ND_TCHECK2 ( opt [ i ] , BGP_CAP_HEADER_SIZE ) ; //<S2SV> cap_type = opt [ i ] ; //<S2SV> cap_len = opt [ i + 1 ] ; //<S2SV> tcap_len = cap_len ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( bgp_capcode_values , "Unknown" , //<S2SV> cap_type ) , //<S2SV> cap_type , //<S2SV> cap_len ) ) ; //<S2SV> ND_TCHECK2 ( opt [ i + 2 ] , cap_len ) ; //<S2SV> switch ( cap_type ) { //<S2SV> case BGP_CAPCODE_MP : //<S2SV> ND_TCHECK_8BITS ( opt + i + 5 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tAFI<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>SAFI<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( af_values , "Unknown" , //<S2SV> EXTRACT_16BITS ( opt + i + 2 ) ) , //<S2SV> EXTRACT_16BITS ( opt + i + 2 ) , //<S2SV> tok2str ( bgp_safi_values , "Unknown" , //<S2SV> opt [ i + 5 ] ) , //<S2SV> opt [ i + 5 ] ) ) ; //<S2SV> break ; //<S2SV> case BGP_CAPCODE_RESTART : //<S2SV> ND_TCHECK_16BITS ( opt + i + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tRestart<S2SV_blank>Flags:<S2SV_blank>[%s],<S2SV_blank>Restart<S2SV_blank>Time<S2SV_blank>%us" , //<S2SV> ( ( opt [ i + 2 ] ) & 0x80 ) ? "R" : "none" , //<S2SV> EXTRACT_16BITS ( opt + i + 2 ) & 0xfff ) ) ; //<S2SV> tcap_len -= 2 ; //<S2SV> cap_offset = 4 ; //<S2SV> while ( tcap_len >= 4 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank>AFI<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>SAFI<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>Forwarding<S2SV_blank>state<S2SV_blank>preserved:<S2SV_blank>%s" , //<S2SV> tok2str ( af_values , "Unknown" , //<S2SV> EXTRACT_16BITS ( opt + i + cap_offset ) ) , //<S2SV> EXTRACT_16BITS ( opt + i + cap_offset ) , //<S2SV> tok2str ( bgp_safi_values , "Unknown" , //<S2SV> opt [ i + cap_offset + 2 ] ) , //<S2SV> opt [ i + cap_offset + 2 ] , //<S2SV> ( ( opt [ i + cap_offset + 3 ] ) & 0x80 ) ? "yes" : "no" ) ) ; //<S2SV> tcap_len -= 4 ; //<S2SV> cap_offset += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGP_CAPCODE_RR : //<S2SV> case BGP_CAPCODE_RR_CISCO : //<S2SV> break ; //<S2SV> case BGP_CAPCODE_AS_NEW : //<S2SV> if ( cap_len == 4 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank>4<S2SV_blank>Byte<S2SV_blank>AS<S2SV_blank>%s" , //<S2SV> as_printf ( ndo , astostr , sizeof ( astostr ) , //<S2SV> EXTRACT_32BITS ( opt + i + 2 ) ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGP_CAPCODE_ADD_PATH : //<S2SV> cap_offset = 2 ; //<S2SV> if ( tcap_len == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(bogus)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> while ( tcap_len > 0 ) { //<S2SV> if ( tcap_len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t(invalid)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tAFI<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>SAFI<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>Send/Receive:<S2SV_blank>%s" , //<S2SV> tok2str ( af_values , "Unknown" , EXTRACT_16BITS ( opt + i + cap_offset ) ) , //<S2SV> EXTRACT_16BITS ( opt + i + cap_offset ) , //<S2SV> tok2str ( bgp_safi_values , "Unknown" , opt [ i + cap_offset + 2 ] ) , //<S2SV> opt [ i + cap_offset + 2 ] , //<S2SV> tok2str ( bgp_add_path_recvsend , "Bogus<S2SV_blank>(0x%02x)" , opt [ i + cap_offset + 3 ] ) //<S2SV> ) ) ; //<S2SV> tcap_len -= 4 ; //<S2SV> cap_offset += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\tno<S2SV_blank>decoder<S2SV_blank>for<S2SV_blank>Capability<S2SV_blank>%u" , //<S2SV> cap_type ) ) ; //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , & opt [ i + 2 ] , "\\n\\t\\t" , cap_len ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 && cap_len > 0 ) { //<S2SV> print_unknown_data ( ndo , & opt [ i + 2 ] , "\\n\\t\\t" , cap_len ) ; //<S2SV> } //<S2SV> i += BGP_CAP_HEADER_SIZE + cap_len ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|BGP]" ) ) ; //<S2SV> } //<S2SV> 