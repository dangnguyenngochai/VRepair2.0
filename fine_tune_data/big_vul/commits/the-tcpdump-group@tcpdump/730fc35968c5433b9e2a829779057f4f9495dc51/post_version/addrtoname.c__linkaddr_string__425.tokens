const char * //<S2SV> linkaddr_string ( netdissect_options * ndo , const u_char * ep , //<S2SV> const unsigned int type , const unsigned int len ) //<S2SV> { //<S2SV> register u_int i ; //<S2SV> register char * cp ; //<S2SV> register struct bsnamemem * tp ; //<S2SV> if ( len == 0 ) //<S2SV> return ( "<empty>" ) ; //<S2SV> if ( type == LINKADDR_ETHER && len == ETHER_ADDR_LEN ) //<S2SV> return ( etheraddr_string ( ndo , ep ) ) ; //<S2SV> if ( type == LINKADDR_FRELAY ) //<S2SV> return ( q922_string ( ndo , ep , len ) ) ; //<S2SV> tp = lookup_bytestring ( ndo , ep , len ) ; //<S2SV> if ( tp -> bs_name ) //<S2SV> return ( tp -> bs_name ) ; //<S2SV> tp -> bs_name = cp = ( char * ) malloc ( len * 3 ) ; //<S2SV> if ( tp -> bs_name == NULL ) //<S2SV> ( * ndo -> ndo_error ) ( ndo , "linkaddr_string:<S2SV_blank>malloc" ) ; //<S2SV> * cp ++ = hex [ * ep >> 4 ] ; //<S2SV> * cp ++ = hex [ * ep ++ & 0xf ] ; //<S2SV> for ( i = len - 1 ; i > 0 ; -- i ) { //<S2SV> * cp ++ = ':' ; //<S2SV> * cp ++ = hex [ * ep >> 4 ] ; //<S2SV> * cp ++ = hex [ * ep ++ & 0xf ] ; //<S2SV> } //<S2SV> * cp = '\\0' ; //<S2SV> return ( tp -> bs_name ) ; //<S2SV> } //<S2SV> 