static void //<S2SV> aodv_extension ( netdissect_options * ndo , //<S2SV> const struct aodv_ext * ep , u_int length ) //<S2SV> { //<S2SV> const struct aodv_hello * ah ; //<S2SV> ND_TCHECK ( * ep ) ; //<S2SV> switch ( ep -> type ) { //<S2SV> case AODV_EXT_HELLO : //<S2SV> ah = ( const struct aodv_hello * ) ( const void * ) ep ; //<S2SV> ND_TCHECK ( * ah ) ; //<S2SV> if ( length < sizeof ( struct aodv_hello ) ) //<S2SV> goto trunc ; //<S2SV> if ( ep -> length < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\text<S2SV_blank>HELLO<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>length<S2SV_blank>%u" , ep -> length ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\text<S2SV_blank>HELLO<S2SV_blank>%ld<S2SV_blank>ms" , //<S2SV> ( unsigned long ) EXTRACT_32BITS ( & ah -> interval ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "\\n\\text<S2SV_blank>%u<S2SV_blank>%u" , ep -> type , ep -> length ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|hello]" ) ) ; //<S2SV> } //<S2SV> 