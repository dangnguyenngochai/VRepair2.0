void //<S2SV> arp_print ( netdissect_options * ndo , //<S2SV> const u_char * bp , u_int length , u_int caplen ) //<S2SV> { //<S2SV> const struct arp_pkthdr * ap ; //<S2SV> u_short pro , hrd , op , linkaddr ; //<S2SV> ap = ( const struct arp_pkthdr * ) bp ; //<S2SV> ND_TCHECK ( * ap ) ; //<S2SV> hrd = HRD ( ap ) ; //<S2SV> pro = PRO ( ap ) ; //<S2SV> op = OP ( ap ) ; //<S2SV> switch ( hrd ) { //<S2SV> case ARPHRD_ATM2225 : //<S2SV> atmarp_print ( ndo , bp , length , caplen ) ; //<S2SV> return ; //<S2SV> case ARPHRD_FRELAY : //<S2SV> linkaddr = LINKADDR_FRELAY ; //<S2SV> break ; //<S2SV> default : //<S2SV> linkaddr = LINKADDR_ETHER ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! ND_TTEST2 ( * ar_tpa ( ap ) , PROTO_LEN ( ap ) ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> ND_DEFAULTPRINT ( ( const u_char * ) ap , length ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! ndo -> ndo_eflag ) { //<S2SV> ND_PRINT ( ( ndo , "ARP,<S2SV_blank>" ) ) ; //<S2SV> } //<S2SV> if ( ( pro != ETHERTYPE_IP && pro != ETHERTYPE_TRAIL ) || //<S2SV> PROTO_LEN ( ap ) != 4 || //<S2SV> HRD_LEN ( ap ) == 0 || //<S2SV> ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>(len<S2SV_blank>%u),<S2SV_blank>%s<S2SV_blank>(len<S2SV_blank>%u)" , //<S2SV> tok2str ( arphrd_values , "Unknown<S2SV_blank>Hardware<S2SV_blank>(%u)" , hrd ) , //<S2SV> HRD_LEN ( ap ) , //<S2SV> tok2str ( ethertype_values , "Unknown<S2SV_blank>Protocol<S2SV_blank>(0x%04x)" , pro ) , //<S2SV> PROTO_LEN ( ap ) ) ) ; //<S2SV> if ( ! ndo -> ndo_vflag ) { //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%s%s<S2SV_blank>" , //<S2SV> ndo -> ndo_vflag ? ",<S2SV_blank>" : "" , //<S2SV> tok2str ( arpop_values , "Unknown<S2SV_blank>(%u)" , op ) ) ) ; //<S2SV> switch ( op ) { //<S2SV> case ARPOP_REQUEST : //<S2SV> ND_PRINT ( ( ndo , "who-has<S2SV_blank>%s" , ipaddr_string ( ndo , TPA ( ap ) ) ) ) ; //<S2SV> if ( isnonzero ( ( const u_char * ) THA ( ap ) , HRD_LEN ( ap ) ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(%s)" , //<S2SV> linkaddr_string ( ndo , THA ( ap ) , linkaddr , HRD_LEN ( ap ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tell<S2SV_blank>%s" , ipaddr_string ( ndo , SPA ( ap ) ) ) ) ; //<S2SV> break ; //<S2SV> case ARPOP_REPLY : //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>is-at<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , SPA ( ap ) ) , //<S2SV> linkaddr_string ( ndo , SHA ( ap ) , linkaddr , HRD_LEN ( ap ) ) ) ) ; //<S2SV> break ; //<S2SV> case ARPOP_REVREQUEST : //<S2SV> ND_PRINT ( ( ndo , "who-is<S2SV_blank>%s<S2SV_blank>tell<S2SV_blank>%s" , //<S2SV> linkaddr_string ( ndo , THA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , //<S2SV> linkaddr_string ( ndo , SHA ( ap ) , linkaddr , HRD_LEN ( ap ) ) ) ) ; //<S2SV> break ; //<S2SV> case ARPOP_REVREPLY : //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>%s" , //<S2SV> linkaddr_string ( ndo , THA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , //<S2SV> ipaddr_string ( ndo , TPA ( ap ) ) ) ) ; //<S2SV> break ; //<S2SV> case ARPOP_INVREQUEST : //<S2SV> ND_PRINT ( ( ndo , "who-is<S2SV_blank>%s<S2SV_blank>tell<S2SV_blank>%s" , //<S2SV> linkaddr_string ( ndo , THA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , //<S2SV> linkaddr_string ( ndo , SHA ( ap ) , linkaddr , HRD_LEN ( ap ) ) ) ) ; //<S2SV> break ; //<S2SV> case ARPOP_INVREPLY : //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>%s" , //<S2SV> linkaddr_string ( ndo , SHA ( ap ) , linkaddr , HRD_LEN ( ap ) ) , //<S2SV> ipaddr_string ( ndo , SPA ( ap ) ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_DEFAULTPRINT ( ( const u_char * ) ap , caplen ) ; //<S2SV> return ; //<S2SV> } //<S2SV> out : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> } //<S2SV> 