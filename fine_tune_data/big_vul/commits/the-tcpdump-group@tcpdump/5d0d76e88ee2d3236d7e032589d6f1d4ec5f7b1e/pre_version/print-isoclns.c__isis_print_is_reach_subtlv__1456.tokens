static int //<S2SV> isis_print_is_reach_subtlv ( netdissect_options * ndo , //<S2SV> const uint8_t * tptr , u_int subt , u_int subl , //<S2SV> const char * ident ) //<S2SV> { //<S2SV> u_int te_class , priority_level , gmpls_switch_cap ; //<S2SV> union { //<S2SV> float f ; //<S2SV> uint32_t i ; //<S2SV> } bw ; //<S2SV> ND_PRINT ( ( ndo , "%s%s<S2SV_blank>subTLV<S2SV_blank>#%u,<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> ident , tok2str ( isis_ext_is_reach_subtlv_values , "unknown" , subt ) , //<S2SV> subt , subl ) ) ; //<S2SV> ND_TCHECK2 ( * tptr , subl ) ; //<S2SV> switch ( subt ) { //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_ADMIN_GROUP : //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_LINK_LOCAL_REMOTE_ID : //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_LINK_REMOTE_ID : //<S2SV> if ( subl >= 4 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>0x%08x" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> if ( subl == 8 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>0x%08x" , EXTRACT_32BITS ( tptr + 4 ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_INTF_ADDR : //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_IPV4_NEIGHBOR_ADDR : //<S2SV> if ( subl >= sizeof ( struct in_addr ) ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_MAX_LINK_BW : //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_RESERVABLE_BW : //<S2SV> if ( subl >= 4 ) { //<S2SV> bw . i = EXTRACT_32BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%.3f<S2SV_blank>Mbps" , bw . f * 8 / 1000000 ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_UNRESERVED_BW : //<S2SV> if ( subl >= 32 ) { //<S2SV> for ( te_class = 0 ; te_class < 8 ; te_class ++ ) { //<S2SV> bw . i = EXTRACT_32BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>TE-Class<S2SV_blank>%u:<S2SV_blank>%.3f<S2SV_blank>Mbps" , //<S2SV> ident , //<S2SV> te_class , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> tptr += 4 ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS : //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : //<S2SV> ND_PRINT ( ( ndo , "%sBandwidth<S2SV_blank>Constraints<S2SV_blank>Model<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ident , //<S2SV> tok2str ( diffserv_te_bc_values , "unknown" , * tptr ) , //<S2SV> * tptr ) ) ; //<S2SV> tptr ++ ; //<S2SV> for ( te_class = 0 ; te_class < ( subl - 1 ) / 4 ; te_class ++ ) { //<S2SV> ND_TCHECK2 ( * tptr , 4 ) ; //<S2SV> bw . i = EXTRACT_32BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Bandwidth<S2SV_blank>constraint<S2SV_blank>CT%u:<S2SV_blank>%.3f<S2SV_blank>Mbps" , //<S2SV> ident , //<S2SV> te_class , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> tptr += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_TE_METRIC : //<S2SV> if ( subl >= 3 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%u" , EXTRACT_24BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_LINK_ATTRIBUTE : //<S2SV> if ( subl == 2 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>[<S2SV_blank>%s<S2SV_blank>]<S2SV_blank>(0x%04x)" , //<S2SV> bittok2str ( isis_subtlv_link_attribute_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_16BITS ( tptr ) ) , //<S2SV> EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_LINK_PROTECTION_TYPE : //<S2SV> if ( subl >= 2 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s,<S2SV_blank>Priority<S2SV_blank>%u" , //<S2SV> bittok2str ( gmpls_link_prot_values , "none" , * tptr ) , //<S2SV> * ( tptr + 1 ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_SPB_METRIC : //<S2SV> if ( subl >= 6 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>LM:<S2SV_blank>%u" , EXTRACT_24BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 3 ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>P:<S2SV_blank>%u" , * ( tptr ) ) ) ; //<S2SV> tptr ++ ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>P-ID:<S2SV_blank>%u" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_EXT_IS_REACH_INTF_SW_CAP_DESCR : //<S2SV> if ( subl >= 36 ) { //<S2SV> gmpls_switch_cap = * tptr ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Interface<S2SV_blank>Switching<S2SV_blank>Capability:%s" , //<S2SV> ident , //<S2SV> tok2str ( gmpls_switch_cap_values , "Unknown" , gmpls_switch_cap ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>LSP<S2SV_blank>Encoding:<S2SV_blank>%s" , //<S2SV> tok2str ( gmpls_encoding_values , "Unknown" , * ( tptr + 1 ) ) ) ) ; //<S2SV> tptr += 4 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Max<S2SV_blank>LSP<S2SV_blank>Bandwidth:" , ident ) ) ; //<S2SV> for ( priority_level = 0 ; priority_level < 8 ; priority_level ++ ) { //<S2SV> bw . i = EXTRACT_32BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>priority<S2SV_blank>level<S2SV_blank>%d:<S2SV_blank>%.3f<S2SV_blank>Mbps" , //<S2SV> ident , //<S2SV> priority_level , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> tptr += 4 ; //<S2SV> } //<S2SV> subl -= 36 ; //<S2SV> switch ( gmpls_switch_cap ) { //<S2SV> case GMPLS_PSC1 : //<S2SV> case GMPLS_PSC2 : //<S2SV> case GMPLS_PSC3 : //<S2SV> case GMPLS_PSC4 : //<S2SV> ND_TCHECK2 ( * tptr , 6 ) ; //<S2SV> bw . i = EXTRACT_32BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Min<S2SV_blank>LSP<S2SV_blank>Bandwidth:<S2SV_blank>%.3f<S2SV_blank>Mbps" , ident , bw . f * 8 / 1000000 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Interface<S2SV_blank>MTU:<S2SV_blank>%u" , ident , EXTRACT_16BITS ( tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case GMPLS_TSC : //<S2SV> ND_TCHECK2 ( * tptr , 8 ) ; //<S2SV> bw . i = EXTRACT_32BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Min<S2SV_blank>LSP<S2SV_blank>Bandwidth:<S2SV_blank>%.3f<S2SV_blank>Mbps" , ident , bw . f * 8 / 1000000 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Indication<S2SV_blank>%s" , ident , //<S2SV> tok2str ( gmpls_switch_cap_tsc_indication_values , "Unknown<S2SV_blank>(%u)" , * ( tptr + 4 ) ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( subl > 0 ) { //<S2SV> if ( ! print_unknown_data ( ndo , tptr , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , subl ) ) //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ! print_unknown_data ( ndo , tptr , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , subl ) ) //<S2SV> return ( 0 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return ( 1 ) ; //<S2SV> trunc : //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> 