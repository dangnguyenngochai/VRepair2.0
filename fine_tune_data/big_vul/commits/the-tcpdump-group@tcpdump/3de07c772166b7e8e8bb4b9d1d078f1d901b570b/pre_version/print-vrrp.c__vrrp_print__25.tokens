void //<S2SV> vrrp_print ( netdissect_options * ndo , //<S2SV> register const u_char * bp , register u_int len , //<S2SV> register const u_char * bp2 , int ttl ) //<S2SV> { //<S2SV> int version , type , auth_type = VRRP_AUTH_NONE ; //<S2SV> const char * type_s ; //<S2SV> ND_TCHECK ( bp [ 0 ] ) ; //<S2SV> version = ( bp [ 0 ] & 0xf0 ) >> 4 ; //<S2SV> type = bp [ 0 ] & 0x0f ; //<S2SV> type_s = tok2str ( type2str , "unknown<S2SV_blank>type<S2SV_blank>(%u)" , type ) ; //<S2SV> ND_PRINT ( ( ndo , "VRRPv%u,<S2SV_blank>%s" , version , type_s ) ) ; //<S2SV> if ( ttl != 255 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>(ttl<S2SV_blank>%u)" , ttl ) ) ; //<S2SV> if ( version < 2 || version > 3 || type != VRRP_TYPE_ADVERTISEMENT ) //<S2SV> return ; //<S2SV> ND_TCHECK ( bp [ 2 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>vrid<S2SV_blank>%u,<S2SV_blank>prio<S2SV_blank>%u" , bp [ 1 ] , bp [ 2 ] ) ) ; //<S2SV> ND_TCHECK ( bp [ 5 ] ) ; //<S2SV> if ( version == 2 ) { //<S2SV> auth_type = bp [ 4 ] ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>authtype<S2SV_blank>%s" , tok2str ( auth2str , NULL , auth_type ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>intvl<S2SV_blank>%us,<S2SV_blank>length<S2SV_blank>%u" , bp [ 5 ] , len ) ) ; //<S2SV> } else { //<S2SV> uint16_t intvl = ( bp [ 4 ] & 0x0f ) << 8 | bp [ 5 ] ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>intvl<S2SV_blank>%ucs,<S2SV_blank>length<S2SV_blank>%u" , intvl , len ) ) ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> int naddrs = bp [ 3 ] ; //<S2SV> int i ; //<S2SV> char c ; //<S2SV> if ( version == 2 && ND_TTEST2 ( bp [ 0 ] , len ) ) { //<S2SV> struct cksum_vec vec [ 1 ] ; //<S2SV> vec [ 0 ] . ptr = bp ; //<S2SV> vec [ 0 ] . len = len ; //<S2SV> if ( in_cksum ( vec , 1 ) ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>(bad<S2SV_blank>vrrp<S2SV_blank>cksum<S2SV_blank>%x)" , //<S2SV> EXTRACT_16BITS ( & bp [ 6 ] ) ) ) ; //<S2SV> } //<S2SV> if ( version == 3 && ND_TTEST2 ( bp [ 0 ] , len ) ) { //<S2SV> uint16_t cksum = nextproto4_cksum ( ndo , ( const struct ip * ) bp2 , bp , //<S2SV> len , len , IPPROTO_VRRP ) ; //<S2SV> if ( cksum ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>(bad<S2SV_blank>vrrp<S2SV_blank>cksum<S2SV_blank>%x)" , //<S2SV> EXTRACT_16BITS ( & bp [ 6 ] ) ) ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>addrs" ) ) ; //<S2SV> if ( naddrs > 1 ) //<S2SV> ND_PRINT ( ( ndo , "(%d)" , naddrs ) ) ; //<S2SV> ND_PRINT ( ( ndo , ":" ) ) ; //<S2SV> c = '<S2SV_blank>' ; //<S2SV> bp += 8 ; //<S2SV> for ( i = 0 ; i < naddrs ; i ++ ) { //<S2SV> ND_TCHECK ( bp [ 3 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "%c%s" , c , ipaddr_string ( ndo , bp ) ) ) ; //<S2SV> c = ',' ; //<S2SV> bp += 4 ; //<S2SV> } //<S2SV> if ( version == 2 && auth_type == VRRP_AUTH_SIMPLE ) { //<S2SV> ND_TCHECK ( bp [ 7 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>auth<S2SV_blank>\\"" ) ) ; //<S2SV> if ( fn_printn ( ndo , bp , 8 , ndo -> ndo_snapend ) ) { //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> goto trunc ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> } //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|vrrp]" ) ) ; //<S2SV> } //<S2SV> 