int //<S2SV> mobility_print ( netdissect_options * ndo , //<S2SV> const u_char * bp , const u_char * bp2 _U_ ) //<S2SV> { //<S2SV> const struct ip6_mobility * mh ; //<S2SV> const u_char * ep ; //<S2SV> unsigned mhlen , hlen ; //<S2SV> uint8_t type ; //<S2SV> mh = ( const struct ip6_mobility * ) bp ; //<S2SV> ep = ndo -> ndo_snapend ; //<S2SV> if ( ! ND_TTEST ( mh -> ip6m_len ) ) { //<S2SV> mhlen = ep - bp ; //<S2SV> goto trunc ; //<S2SV> } //<S2SV> mhlen = ( mh -> ip6m_len + 1 ) << 3 ; //<S2SV> ND_TCHECK ( mh -> ip6m_type ) ; //<S2SV> type = mh -> ip6m_type ; //<S2SV> if ( type <= IP6M_MAX && mhlen < ip6m_hdrlen [ type ] ) { //<S2SV> ND_PRINT ( ( ndo , "(header<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>for<S2SV_blank>type<S2SV_blank>%u)" , mhlen , type ) ) ; //<S2SV> goto trunc ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "mobility:<S2SV_blank>%s" , tok2str ( ip6m_str , "type-#%u" , type ) ) ) ; //<S2SV> switch ( type ) { //<S2SV> case IP6M_BINDING_REQUEST : //<S2SV> hlen = IP6M_MINLEN ; //<S2SV> break ; //<S2SV> case IP6M_HOME_TEST_INIT : //<S2SV> case IP6M_CAREOF_TEST_INIT : //<S2SV> hlen = IP6M_MINLEN ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_TCHECK2 ( * mh , hlen + 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s<S2SV_blank>Init<S2SV_blank>Cookie=%08x:%08x" , //<S2SV> type == IP6M_HOME_TEST_INIT ? "Home" : "Care-of" , //<S2SV> EXTRACT_32BITS ( & bp [ hlen ] ) , //<S2SV> EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; //<S2SV> } //<S2SV> hlen += 8 ; //<S2SV> break ; //<S2SV> case IP6M_HOME_TEST : //<S2SV> case IP6M_CAREOF_TEST : //<S2SV> ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>nonce<S2SV_blank>id=0x%x" , EXTRACT_16BITS ( & mh -> ip6m_data16 [ 0 ] ) ) ) ; //<S2SV> hlen = IP6M_MINLEN ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_TCHECK2 ( * mh , hlen + 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s<S2SV_blank>Init<S2SV_blank>Cookie=%08x:%08x" , //<S2SV> type == IP6M_HOME_TEST ? "Home" : "Care-of" , //<S2SV> EXTRACT_32BITS ( & bp [ hlen ] ) , //<S2SV> EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; //<S2SV> } //<S2SV> hlen += 8 ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_TCHECK2 ( * mh , hlen + 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s<S2SV_blank>Keygen<S2SV_blank>Token=%08x:%08x" , //<S2SV> type == IP6M_HOME_TEST ? "Home" : "Care-of" , //<S2SV> EXTRACT_32BITS ( & bp [ hlen ] ) , //<S2SV> EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; //<S2SV> } //<S2SV> hlen += 8 ; //<S2SV> break ; //<S2SV> case IP6M_BINDING_UPDATE : //<S2SV> ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>seq#=%u" , EXTRACT_16BITS ( & mh -> ip6m_data16 [ 0 ] ) ) ) ; //<S2SV> hlen = IP6M_MINLEN ; //<S2SV> ND_TCHECK2 ( * mh , hlen + 1 ) ; //<S2SV> if ( bp [ hlen ] & 0xf0 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> if ( bp [ hlen ] & 0x80 ) //<S2SV> ND_PRINT ( ( ndo , "A" ) ) ; //<S2SV> if ( bp [ hlen ] & 0x40 ) //<S2SV> ND_PRINT ( ( ndo , "H" ) ) ; //<S2SV> if ( bp [ hlen ] & 0x20 ) //<S2SV> ND_PRINT ( ( ndo , "L" ) ) ; //<S2SV> if ( bp [ hlen ] & 0x10 ) //<S2SV> ND_PRINT ( ( ndo , "K" ) ) ; //<S2SV> hlen += 1 ; //<S2SV> hlen += 1 ; //<S2SV> ND_TCHECK2 ( * mh , hlen + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>lifetime=%u" , EXTRACT_16BITS ( & bp [ hlen ] ) << 2 ) ) ; //<S2SV> hlen += 2 ; //<S2SV> break ; //<S2SV> case IP6M_BINDING_ACK : //<S2SV> ND_TCHECK ( mh -> ip6m_data8 [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>status=%u" , mh -> ip6m_data8 [ 0 ] ) ) ; //<S2SV> if ( mh -> ip6m_data8 [ 1 ] & 0x80 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>K" ) ) ; //<S2SV> hlen = IP6M_MINLEN ; //<S2SV> ND_TCHECK2 ( * mh , hlen + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>seq#=%u" , EXTRACT_16BITS ( & bp [ hlen ] ) ) ) ; //<S2SV> hlen += 2 ; //<S2SV> ND_TCHECK2 ( * mh , hlen + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>lifetime=%u" , EXTRACT_16BITS ( & bp [ hlen ] ) << 2 ) ) ; //<S2SV> hlen += 2 ; //<S2SV> break ; //<S2SV> case IP6M_BINDING_ERROR : //<S2SV> ND_TCHECK ( mh -> ip6m_data8 [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>status=%u" , mh -> ip6m_data8 [ 0 ] ) ) ; //<S2SV> hlen = IP6M_MINLEN ; //<S2SV> ND_TCHECK2 ( * mh , hlen + 16 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>homeaddr<S2SV_blank>%s" , ip6addr_string ( ndo , & bp [ hlen ] ) ) ) ; //<S2SV> hlen += 16 ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>len=%u" , mh -> ip6m_len ) ) ; //<S2SV> return ( mhlen ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> if ( mobility_opt_print ( ndo , & bp [ hlen ] , mhlen - hlen ) ) //<S2SV> goto trunc ; //<S2SV> return ( mhlen ) ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> 