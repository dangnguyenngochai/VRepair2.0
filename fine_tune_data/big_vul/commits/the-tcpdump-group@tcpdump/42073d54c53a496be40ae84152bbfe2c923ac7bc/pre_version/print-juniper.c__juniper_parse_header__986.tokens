static int //<S2SV> juniper_parse_header ( netdissect_options * ndo , //<S2SV> const u_char * p , const struct pcap_pkthdr * h , struct juniper_l2info_t * l2info ) //<S2SV> { //<S2SV> const struct juniper_cookie_table_t * lp = juniper_cookie_table ; //<S2SV> u_int idx , jnx_ext_len , jnx_header_len = 0 ; //<S2SV> uint8_t tlv_type , tlv_len ; //<S2SV> uint32_t control_word ; //<S2SV> int tlv_value ; //<S2SV> const u_char * tptr ; //<S2SV> l2info -> header_len = 0 ; //<S2SV> l2info -> cookie_len = 0 ; //<S2SV> l2info -> proto = 0 ; //<S2SV> l2info -> length = h -> len ; //<S2SV> l2info -> caplen = h -> caplen ; //<S2SV> ND_TCHECK2 ( p [ 0 ] , 4 ) ; //<S2SV> l2info -> flags = p [ 3 ] ; //<S2SV> l2info -> direction = p [ 3 ] & JUNIPER_BPF_PKT_IN ; //<S2SV> if ( EXTRACT_24BITS ( p ) != JUNIPER_MGC_NUMBER ) { //<S2SV> ND_PRINT ( ( ndo , "no<S2SV_blank>magic-number<S2SV_blank>found!" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , "%3s<S2SV_blank>" , tok2str ( juniper_direction_values , "---" , l2info -> direction ) ) ) ; //<S2SV> jnx_header_len = 4 ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\tJuniper<S2SV_blank>PCAP<S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> bittok2str ( jnx_flag_values , "none" , l2info -> flags ) ) ) ; //<S2SV> if ( ( l2info -> flags & JUNIPER_BPF_EXT ) == JUNIPER_BPF_EXT ) { //<S2SV> tptr = p + jnx_header_len ; //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 2 ) ; //<S2SV> jnx_ext_len = EXTRACT_16BITS ( tptr ) ; //<S2SV> jnx_header_len += 2 ; //<S2SV> tptr += 2 ; //<S2SV> jnx_header_len += jnx_ext_len ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>PCAP<S2SV_blank>Extension(s)<S2SV_blank>total<S2SV_blank>length<S2SV_blank>%u" , jnx_ext_len ) ) ; //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , jnx_ext_len ) ; //<S2SV> while ( jnx_ext_len > JUNIPER_EXT_TLV_OVERHEAD ) { //<S2SV> tlv_type = * ( tptr ++ ) ; //<S2SV> tlv_len = * ( tptr ++ ) ; //<S2SV> tlv_value = 0 ; //<S2SV> if ( tlv_type == 0 || tlv_len == 0 ) //<S2SV> break ; //<S2SV> if ( tlv_len + JUNIPER_EXT_TLV_OVERHEAD > jnx_ext_len ) //<S2SV> goto trunc ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Extension<S2SV_blank>TLV<S2SV_blank>#%u,<S2SV_blank>length<S2SV_blank>%u,<S2SV_blank>value<S2SV_blank>" , //<S2SV> tok2str ( jnx_ext_tlv_values , "Unknown" , tlv_type ) , //<S2SV> tlv_type , //<S2SV> tlv_len ) ) ; //<S2SV> tlv_value = juniper_read_tlv_value ( tptr , tlv_type , tlv_len ) ; //<S2SV> switch ( tlv_type ) { //<S2SV> case JUNIPER_EXT_TLV_IFD_NAME : //<S2SV> break ; //<S2SV> case JUNIPER_EXT_TLV_IFD_MEDIATYPE : //<S2SV> case JUNIPER_EXT_TLV_TTP_IFD_MEDIATYPE : //<S2SV> if ( tlv_value != - 1 ) { //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( juniper_ifmt_values , "Unknown" , tlv_value ) , //<S2SV> tlv_value ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case JUNIPER_EXT_TLV_IFL_ENCAPS : //<S2SV> case JUNIPER_EXT_TLV_TTP_IFL_ENCAPS : //<S2SV> if ( tlv_value != - 1 ) { //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( juniper_ifle_values , "Unknown" , tlv_value ) , //<S2SV> tlv_value ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case JUNIPER_EXT_TLV_IFL_IDX : //<S2SV> case JUNIPER_EXT_TLV_IFL_UNIT : //<S2SV> case JUNIPER_EXT_TLV_IFD_IDX : //<S2SV> default : //<S2SV> if ( tlv_value != - 1 ) { //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "%u" , tlv_value ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> tptr += tlv_len ; //<S2SV> jnx_ext_len -= tlv_len + JUNIPER_EXT_TLV_OVERHEAD ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t-----original<S2SV_blank>packet-----\\n\\t" ) ) ; //<S2SV> } //<S2SV> if ( ( l2info -> flags & JUNIPER_BPF_NO_L2 ) == JUNIPER_BPF_NO_L2 ) { //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , "no-L2-hdr,<S2SV_blank>" ) ) ; //<S2SV> ND_TCHECK2 ( p [ jnx_header_len + 4 ] , 1 ) ; //<S2SV> if ( ip_heuristic_guess ( ndo , p + jnx_header_len + 4 , //<S2SV> l2info -> length - ( jnx_header_len + 4 ) ) == 0 ) //<S2SV> ND_PRINT ( ( ndo , "no<S2SV_blank>IP-hdr<S2SV_blank>found!" ) ) ; //<S2SV> l2info -> header_len = jnx_header_len + 4 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> l2info -> header_len = jnx_header_len ; //<S2SV> p += l2info -> header_len ; //<S2SV> l2info -> length -= l2info -> header_len ; //<S2SV> l2info -> caplen -= l2info -> header_len ; //<S2SV> ND_TCHECK ( p [ 0 ] ) ; //<S2SV> while ( lp -> s != NULL ) { //<S2SV> if ( lp -> pictype == l2info -> pictype ) { //<S2SV> l2info -> cookie_len += lp -> cookie_len ; //<S2SV> switch ( p [ 0 ] ) { //<S2SV> case LS_COOKIE_ID : //<S2SV> l2info -> cookie_type = LS_COOKIE_ID ; //<S2SV> l2info -> cookie_len += 2 ; //<S2SV> break ; //<S2SV> case AS_COOKIE_ID : //<S2SV> l2info -> cookie_type = AS_COOKIE_ID ; //<S2SV> l2info -> cookie_len = 8 ; //<S2SV> break ; //<S2SV> default : //<S2SV> l2info -> bundle = l2info -> cookie [ 0 ] ; //<S2SV> break ; //<S2SV> } //<S2SV> # ifdef DLT_JUNIPER_MFR //<S2SV> if ( l2info -> pictype == DLT_JUNIPER_MFR && //<S2SV> ( p [ 0 ] & MFR_BE_MASK ) == MFR_BE_MASK ) { //<S2SV> l2info -> cookie_len = 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> l2info -> header_len += l2info -> cookie_len ; //<S2SV> l2info -> length -= l2info -> cookie_len ; //<S2SV> l2info -> caplen -= l2info -> cookie_len ; //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , "%s-PIC,<S2SV_blank>cookie-len<S2SV_blank>%u" , //<S2SV> lp -> s , //<S2SV> l2info -> cookie_len ) ) ; //<S2SV> if ( l2info -> cookie_len > 0 ) { //<S2SV> ND_TCHECK2 ( p [ 0 ] , l2info -> cookie_len ) ; //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>cookie<S2SV_blank>0x" ) ) ; //<S2SV> for ( idx = 0 ; idx < l2info -> cookie_len ; idx ++ ) { //<S2SV> l2info -> cookie [ idx ] = p [ idx ] ; //<S2SV> if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo , "%02x" , p [ idx ] ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo , ":<S2SV_blank>" ) ) ; //<S2SV> l2info -> proto = EXTRACT_16BITS ( p + l2info -> cookie_len ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ++ lp ; //<S2SV> } //<S2SV> p += l2info -> cookie_len ; //<S2SV> switch ( l2info -> pictype ) { //<S2SV> # ifdef DLT_JUNIPER_MLPPP //<S2SV> case DLT_JUNIPER_MLPPP : //<S2SV> switch ( l2info -> cookie_type ) { //<S2SV> case LS_COOKIE_ID : //<S2SV> l2info -> bundle = l2info -> cookie [ 1 ] ; //<S2SV> break ; //<S2SV> case AS_COOKIE_ID : //<S2SV> l2info -> bundle = ( EXTRACT_16BITS ( & l2info -> cookie [ 6 ] ) >> 3 ) & 0xfff ; //<S2SV> l2info -> proto = ( l2info -> cookie [ 5 ] ) & JUNIPER_LSQ_L3_PROTO_MASK ; //<S2SV> break ; //<S2SV> default : //<S2SV> l2info -> bundle = l2info -> cookie [ 0 ] ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_MLFR //<S2SV> case DLT_JUNIPER_MLFR : //<S2SV> switch ( l2info -> cookie_type ) { //<S2SV> case LS_COOKIE_ID : //<S2SV> ND_TCHECK2 ( p [ 0 ] , 2 ) ; //<S2SV> l2info -> bundle = l2info -> cookie [ 1 ] ; //<S2SV> l2info -> proto = EXTRACT_16BITS ( p ) ; //<S2SV> l2info -> header_len += 2 ; //<S2SV> l2info -> length -= 2 ; //<S2SV> l2info -> caplen -= 2 ; //<S2SV> break ; //<S2SV> case AS_COOKIE_ID : //<S2SV> l2info -> bundle = ( EXTRACT_16BITS ( & l2info -> cookie [ 6 ] ) >> 3 ) & 0xfff ; //<S2SV> l2info -> proto = ( l2info -> cookie [ 5 ] ) & JUNIPER_LSQ_L3_PROTO_MASK ; //<S2SV> break ; //<S2SV> default : //<S2SV> l2info -> bundle = l2info -> cookie [ 0 ] ; //<S2SV> l2info -> header_len += 2 ; //<S2SV> l2info -> length -= 2 ; //<S2SV> l2info -> caplen -= 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_MFR //<S2SV> case DLT_JUNIPER_MFR : //<S2SV> switch ( l2info -> cookie_type ) { //<S2SV> case LS_COOKIE_ID : //<S2SV> ND_TCHECK2 ( p [ 0 ] , 2 ) ; //<S2SV> l2info -> bundle = l2info -> cookie [ 1 ] ; //<S2SV> l2info -> proto = EXTRACT_16BITS ( p ) ; //<S2SV> l2info -> header_len += 2 ; //<S2SV> l2info -> length -= 2 ; //<S2SV> l2info -> caplen -= 2 ; //<S2SV> break ; //<S2SV> case AS_COOKIE_ID : //<S2SV> l2info -> bundle = ( EXTRACT_16BITS ( & l2info -> cookie [ 6 ] ) >> 3 ) & 0xfff ; //<S2SV> l2info -> proto = ( l2info -> cookie [ 5 ] ) & JUNIPER_LSQ_L3_PROTO_MASK ; //<S2SV> break ; //<S2SV> default : //<S2SV> l2info -> bundle = l2info -> cookie [ 0 ] ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_ATM2 //<S2SV> case DLT_JUNIPER_ATM2 : //<S2SV> ND_TCHECK2 ( p [ 0 ] , 4 ) ; //<S2SV> if ( l2info -> cookie [ 7 ] & ATM2_PKT_TYPE_MASK ) { //<S2SV> control_word = EXTRACT_32BITS ( p ) ; //<S2SV> switch ( control_word ) { //<S2SV> case 0 : //<S2SV> case 0x08000000 : //<S2SV> case 0x08380000 : //<S2SV> l2info -> header_len += 4 ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , "control-word<S2SV_blank>0x%08x<S2SV_blank>" , control_word ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_GGSN //<S2SV> case DLT_JUNIPER_GGSN : //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_ATM1 //<S2SV> case DLT_JUNIPER_ATM1 : //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_PPP //<S2SV> case DLT_JUNIPER_PPP : //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_CHDLC //<S2SV> case DLT_JUNIPER_CHDLC : //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_ETHER //<S2SV> case DLT_JUNIPER_ETHER : //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef DLT_JUNIPER_FRELAY //<S2SV> case DLT_JUNIPER_FRELAY : //<S2SV> break ; //<S2SV> # endif //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "Unknown<S2SV_blank>Juniper<S2SV_blank>DLT_<S2SV_blank>type<S2SV_blank>%u:<S2SV_blank>" , l2info -> pictype ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_eflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "hlen<S2SV_blank>%u,<S2SV_blank>proto<S2SV_blank>0x%04x,<S2SV_blank>" , l2info -> header_len , l2info -> proto ) ) ; //<S2SV> return 1 ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|juniper_hdr],<S2SV_blank>length<S2SV_blank>%u" , h -> len ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 