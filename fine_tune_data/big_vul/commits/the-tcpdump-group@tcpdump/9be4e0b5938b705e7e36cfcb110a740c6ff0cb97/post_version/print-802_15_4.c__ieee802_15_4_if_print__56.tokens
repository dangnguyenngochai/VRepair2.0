u_int //<S2SV> ieee802_15_4_if_print ( netdissect_options * ndo , //<S2SV> const struct pcap_pkthdr * h , const u_char * p ) //<S2SV> { //<S2SV> u_int caplen = h -> caplen ; //<S2SV> u_int hdrlen ; //<S2SV> uint16_t fc ; //<S2SV> uint8_t seq ; //<S2SV> uint16_t panid = 0 ; //<S2SV> if ( caplen < 3 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return caplen ; //<S2SV> } //<S2SV> hdrlen = 3 ; //<S2SV> fc = EXTRACT_LE_16BITS ( p ) ; //<S2SV> seq = EXTRACT_LE_8BITS ( p + 2 ) ; //<S2SV> p += 3 ; //<S2SV> caplen -= 3 ; //<S2SV> ND_PRINT ( ( ndo , "IEEE<S2SV_blank>802.15.4<S2SV_blank>%s<S2SV_blank>packet<S2SV_blank>" , ftypes [ FC_FRAME_TYPE ( fc ) ] ) ) ; //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "seq<S2SV_blank>%02x<S2SV_blank>" , seq ) ) ; //<S2SV> switch ( FC_DEST_ADDRESSING_MODE ( fc ) ) { //<S2SV> case FC_ADDRESSING_MODE_NONE : //<S2SV> if ( fc & FC_PAN_ID_COMPRESSION ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "none<S2SV_blank>" ) ) ; //<S2SV> break ; //<S2SV> case FC_ADDRESSING_MODE_RESERVED : //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "reserved<S2SV_blank>destination<S2SV_blank>addressing<S2SV_blank>mode" ) ) ; //<S2SV> return hdrlen ; //<S2SV> case FC_ADDRESSING_MODE_SHORT : //<S2SV> if ( caplen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> caplen -= 2 ; //<S2SV> hdrlen += 2 ; //<S2SV> if ( caplen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "%04x:%04x<S2SV_blank>" , panid , EXTRACT_LE_16BITS ( p + 2 ) ) ) ; //<S2SV> p += 2 ; //<S2SV> caplen -= 2 ; //<S2SV> hdrlen += 2 ; //<S2SV> break ; //<S2SV> case FC_ADDRESSING_MODE_LONG : //<S2SV> if ( caplen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> caplen -= 2 ; //<S2SV> hdrlen += 2 ; //<S2SV> if ( caplen < 8 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "%04x:%s<S2SV_blank>" , panid , le64addr_string ( ndo , p + 2 ) ) ) ; //<S2SV> p += 8 ; //<S2SV> caplen -= 8 ; //<S2SV> hdrlen += 8 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<<S2SV_blank>" ) ) ; //<S2SV> switch ( FC_SRC_ADDRESSING_MODE ( fc ) ) { //<S2SV> case FC_ADDRESSING_MODE_NONE : //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "none<S2SV_blank>" ) ) ; //<S2SV> break ; //<S2SV> case FC_ADDRESSING_MODE_RESERVED : //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "reserved<S2SV_blank>source<S2SV_blank>addressing<S2SV_blank>mode" ) ) ; //<S2SV> return 0 ; //<S2SV> case FC_ADDRESSING_MODE_SHORT : //<S2SV> if ( ! ( fc & FC_PAN_ID_COMPRESSION ) ) { //<S2SV> if ( caplen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> caplen -= 2 ; //<S2SV> hdrlen += 2 ; //<S2SV> } //<S2SV> if ( caplen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "%04x:%04x<S2SV_blank>" , panid , EXTRACT_LE_16BITS ( p ) ) ) ; //<S2SV> p += 2 ; //<S2SV> caplen -= 2 ; //<S2SV> hdrlen += 2 ; //<S2SV> break ; //<S2SV> case FC_ADDRESSING_MODE_LONG : //<S2SV> if ( ! ( fc & FC_PAN_ID_COMPRESSION ) ) { //<S2SV> if ( caplen < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> caplen -= 2 ; //<S2SV> hdrlen += 2 ; //<S2SV> } //<S2SV> if ( caplen < 8 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "%04x:%s<S2SV_blank>" , panid , le64addr_string ( ndo , p ) ) ) ; //<S2SV> p += 8 ; //<S2SV> caplen -= 8 ; //<S2SV> hdrlen += 8 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! ndo -> ndo_suppress_default_print ) //<S2SV> ND_DEFAULTPRINT ( p , caplen ) ; //<S2SV> return hdrlen ; //<S2SV> } //<S2SV> 