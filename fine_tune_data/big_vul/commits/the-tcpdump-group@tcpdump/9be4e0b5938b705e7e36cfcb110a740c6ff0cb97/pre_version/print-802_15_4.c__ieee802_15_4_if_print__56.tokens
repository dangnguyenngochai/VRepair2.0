u_int //<S2SV> ieee802_15_4_if_print ( netdissect_options * ndo , //<S2SV> const struct pcap_pkthdr * h , const u_char * p ) //<S2SV> { //<S2SV> u_int caplen = h -> caplen ; //<S2SV> int hdrlen ; //<S2SV> uint16_t fc ; //<S2SV> uint8_t seq ; //<S2SV> if ( caplen < 3 ) { //<S2SV> ND_PRINT ( ( ndo , "[|802.15.4]<S2SV_blank>%x" , caplen ) ) ; //<S2SV> return caplen ; //<S2SV> } //<S2SV> fc = EXTRACT_LE_16BITS ( p ) ; //<S2SV> hdrlen = extract_header_length ( fc ) ; //<S2SV> seq = EXTRACT_LE_8BITS ( p + 2 ) ; //<S2SV> p += 3 ; //<S2SV> caplen -= 3 ; //<S2SV> ND_PRINT ( ( ndo , "IEEE<S2SV_blank>802.15.4<S2SV_blank>%s<S2SV_blank>packet<S2SV_blank>" , ftypes [ fc & 0x7 ] ) ) ; //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "seq<S2SV_blank>%02x<S2SV_blank>" , seq ) ) ; //<S2SV> if ( hdrlen == - 1 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid!<S2SV_blank>" ) ) ; //<S2SV> return caplen ; //<S2SV> } //<S2SV> if ( ! ndo -> ndo_vflag ) { //<S2SV> p += hdrlen ; //<S2SV> caplen -= hdrlen ; //<S2SV> } else { //<S2SV> uint16_t panid = 0 ; //<S2SV> switch ( ( fc >> 10 ) & 0x3 ) { //<S2SV> case 0x00 : //<S2SV> ND_PRINT ( ( ndo , "none<S2SV_blank>" ) ) ; //<S2SV> break ; //<S2SV> case 0x01 : //<S2SV> ND_PRINT ( ( ndo , "reserved<S2SV_blank>destination<S2SV_blank>addressing<S2SV_blank>mode" ) ) ; //<S2SV> return 0 ; //<S2SV> case 0x02 : //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> ND_PRINT ( ( ndo , "%04x:%04x<S2SV_blank>" , panid , EXTRACT_LE_16BITS ( p ) ) ) ; //<S2SV> p += 2 ; //<S2SV> break ; //<S2SV> case 0x03 : //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> ND_PRINT ( ( ndo , "%04x:%s<S2SV_blank>" , panid , le64addr_string ( ndo , p ) ) ) ; //<S2SV> p += 8 ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<<S2SV_blank>" ) ) ; //<S2SV> switch ( ( fc >> 14 ) & 0x3 ) { //<S2SV> case 0x00 : //<S2SV> ND_PRINT ( ( ndo , "none<S2SV_blank>" ) ) ; //<S2SV> break ; //<S2SV> case 0x01 : //<S2SV> ND_PRINT ( ( ndo , "reserved<S2SV_blank>source<S2SV_blank>addressing<S2SV_blank>mode" ) ) ; //<S2SV> return 0 ; //<S2SV> case 0x02 : //<S2SV> if ( ! ( fc & ( 1 << 6 ) ) ) { //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%04x:%04x<S2SV_blank>" , panid , EXTRACT_LE_16BITS ( p ) ) ) ; //<S2SV> p += 2 ; //<S2SV> break ; //<S2SV> case 0x03 : //<S2SV> if ( ! ( fc & ( 1 << 6 ) ) ) { //<S2SV> panid = EXTRACT_LE_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%04x:%s<S2SV_blank>" , panid , le64addr_string ( ndo , p ) ) ) ; //<S2SV> p += 8 ; //<S2SV> break ; //<S2SV> } //<S2SV> caplen -= hdrlen ; //<S2SV> } //<S2SV> if ( ! ndo -> ndo_suppress_default_print ) //<S2SV> ND_DEFAULTPRINT ( p , caplen ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 