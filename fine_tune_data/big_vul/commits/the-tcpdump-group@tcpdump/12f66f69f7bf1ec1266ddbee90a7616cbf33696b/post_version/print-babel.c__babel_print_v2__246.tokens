static void //<S2SV> babel_print_v2 ( netdissect_options * ndo , //<S2SV> const u_char * cp , u_int length ) //<S2SV> { //<S2SV> u_int i ; //<S2SV> u_short bodylen ; //<S2SV> u_char v4_prefix [ 16 ] = //<S2SV> { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0xFF , 0xFF , 0 , 0 , 0 , 0 } ; //<S2SV> u_char v6_prefix [ 16 ] = { 0 } ; //<S2SV> ND_TCHECK2 ( * cp , 4 ) ; //<S2SV> if ( length < 4 ) //<S2SV> goto invalid ; //<S2SV> bodylen = EXTRACT_16BITS ( cp + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(%u)" , bodylen ) ) ; //<S2SV> i = 0 ; //<S2SV> while ( i < bodylen ) { //<S2SV> const u_char * message ; //<S2SV> u_int type , len ; //<S2SV> message = cp + 4 + i ; //<S2SV> ND_TCHECK2 ( * message , 1 ) ; //<S2SV> if ( ( type = message [ 0 ] ) == MESSAGE_PAD1 ) { //<S2SV> ND_PRINT ( ( ndo , ndo -> ndo_vflag ? "\\n\\tPad<S2SV_blank>1" : "<S2SV_blank>pad1" ) ) ; //<S2SV> i += 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * message , 2 ) ; //<S2SV> ICHECK ( i , 2 ) ; //<S2SV> len = message [ 1 ] ; //<S2SV> ND_TCHECK2 ( * message , 2 + len ) ; //<S2SV> ICHECK ( i , 2 + len ) ; //<S2SV> switch ( type ) { //<S2SV> case MESSAGE_PADN : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>padN" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\tPad<S2SV_blank>%d" , len + 2 ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_ACK_REQ : { //<S2SV> u_short nonce , interval ; //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ack-req" ) ) ; //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\tAcknowledgment<S2SV_blank>Request<S2SV_blank>" ) ) ; //<S2SV> if ( len < 6 ) goto invalid ; //<S2SV> nonce = EXTRACT_16BITS ( message + 4 ) ; //<S2SV> interval = EXTRACT_16BITS ( message + 6 ) ; //<S2SV> ND_PRINT ( ( ndo , "%04x<S2SV_blank>%s" , nonce , format_interval ( interval ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_ACK : { //<S2SV> u_short nonce ; //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ack" ) ) ; //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\tAcknowledgment<S2SV_blank>" ) ) ; //<S2SV> if ( len < 2 ) goto invalid ; //<S2SV> nonce = EXTRACT_16BITS ( message + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "%04x" , nonce ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_HELLO : { //<S2SV> u_short seqno , interval ; //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hello" ) ) ; //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\tHello<S2SV_blank>" ) ) ; //<S2SV> if ( len < 6 ) goto invalid ; //<S2SV> seqno = EXTRACT_16BITS ( message + 4 ) ; //<S2SV> interval = EXTRACT_16BITS ( message + 6 ) ; //<S2SV> ND_PRINT ( ( ndo , "seqno<S2SV_blank>%u<S2SV_blank>interval<S2SV_blank>%s" , seqno , format_interval ( interval ) ) ) ; //<S2SV> if ( len > 6 ) //<S2SV> subtlvs_print ( ndo , message + 8 , message + 2 + len , type ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_IHU : { //<S2SV> unsigned short txcost , interval ; //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ihu" ) ) ; //<S2SV> else { //<S2SV> u_char address [ 16 ] ; //<S2SV> int rc ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tIHU<S2SV_blank>" ) ) ; //<S2SV> if ( len < 6 ) goto invalid ; //<S2SV> txcost = EXTRACT_16BITS ( message + 4 ) ; //<S2SV> interval = EXTRACT_16BITS ( message + 6 ) ; //<S2SV> rc = network_address ( message [ 2 ] , message + 8 , len - 6 , address ) ; //<S2SV> if ( rc < 0 ) { ND_PRINT ( ( ndo , "%s" , tstr ) ) ; break ; } //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>txcost<S2SV_blank>%u<S2SV_blank>interval<S2SV_blank>%s" , //<S2SV> format_address ( ndo , address ) , txcost , format_interval ( interval ) ) ) ; //<S2SV> if ( ( u_int ) rc < len - 6 ) //<S2SV> subtlvs_print ( ndo , message + 8 + rc , message + 2 + len , //<S2SV> type ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_ROUTER_ID : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>router-id" ) ) ; //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\tRouter<S2SV_blank>Id" ) ) ; //<S2SV> if ( len < 10 ) goto invalid ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , format_id ( message + 4 ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_NH : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>nh" ) ) ; //<S2SV> else { //<S2SV> int rc ; //<S2SV> u_char nh [ 16 ] ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tNext<S2SV_blank>Hop" ) ) ; //<S2SV> if ( len < 2 ) goto invalid ; //<S2SV> rc = network_address ( message [ 2 ] , message + 4 , len - 2 , nh ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , format_address ( ndo , nh ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_UPDATE : { //<S2SV> if ( ! ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>update" ) ) ; //<S2SV> if ( len < 10 ) //<S2SV> ND_PRINT ( ( ndo , "/truncated" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "%s%s%s" , //<S2SV> ( message [ 3 ] & 0x80 ) ? "/prefix" : "" , //<S2SV> ( message [ 3 ] & 0x40 ) ? "/id" : "" , //<S2SV> ( message [ 3 ] & 0x3f ) ? "/unknown" : "" ) ) ; //<S2SV> } else { //<S2SV> u_short interval , seqno , metric ; //<S2SV> u_char plen ; //<S2SV> int rc ; //<S2SV> u_char prefix [ 16 ] ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tUpdate" ) ) ; //<S2SV> if ( len < 10 ) goto invalid ; //<S2SV> plen = message [ 4 ] + ( message [ 2 ] == 1 ? 96 : 0 ) ; //<S2SV> rc = network_prefix ( message [ 2 ] , message [ 4 ] , message [ 5 ] , //<S2SV> message + 12 , //<S2SV> message [ 2 ] == 1 ? v4_prefix : v6_prefix , //<S2SV> len - 10 , prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> interval = EXTRACT_16BITS ( message + 6 ) ; //<S2SV> seqno = EXTRACT_16BITS ( message + 8 ) ; //<S2SV> metric = EXTRACT_16BITS ( message + 10 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s%s%s<S2SV_blank>%s<S2SV_blank>metric<S2SV_blank>%u<S2SV_blank>seqno<S2SV_blank>%u<S2SV_blank>interval<S2SV_blank>%s" , //<S2SV> ( message [ 3 ] & 0x80 ) ? "/prefix" : "" , //<S2SV> ( message [ 3 ] & 0x40 ) ? "/id" : "" , //<S2SV> ( message [ 3 ] & 0x3f ) ? "/unknown" : "" , //<S2SV> format_prefix ( ndo , prefix , plen ) , //<S2SV> metric , seqno , format_interval_update ( interval ) ) ) ; //<S2SV> if ( message [ 3 ] & 0x80 ) { //<S2SV> if ( message [ 2 ] == 1 ) //<S2SV> memcpy ( v4_prefix , prefix , 16 ) ; //<S2SV> else //<S2SV> memcpy ( v6_prefix , prefix , 16 ) ; //<S2SV> } //<S2SV> if ( ( u_int ) rc < len - 10 ) //<S2SV> subtlvs_print ( ndo , message + 12 + rc , message + 2 + len , type ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_REQUEST : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>request" ) ) ; //<S2SV> else { //<S2SV> int rc ; //<S2SV> u_char prefix [ 16 ] , plen ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tRequest<S2SV_blank>" ) ) ; //<S2SV> if ( len < 2 ) goto invalid ; //<S2SV> plen = message [ 3 ] + ( message [ 2 ] == 1 ? 96 : 0 ) ; //<S2SV> rc = network_prefix ( message [ 2 ] , message [ 3 ] , 0 , //<S2SV> message + 4 , NULL , len - 2 , prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> ND_PRINT ( ( ndo , "for<S2SV_blank>%s" , //<S2SV> message [ 2 ] == 0 ? "any" : format_prefix ( ndo , prefix , plen ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_MH_REQUEST : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>mh-request" ) ) ; //<S2SV> else { //<S2SV> int rc ; //<S2SV> u_short seqno ; //<S2SV> u_char prefix [ 16 ] , plen ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tMH-Request<S2SV_blank>" ) ) ; //<S2SV> if ( len < 14 ) goto invalid ; //<S2SV> seqno = EXTRACT_16BITS ( message + 4 ) ; //<S2SV> rc = network_prefix ( message [ 2 ] , message [ 3 ] , 0 , //<S2SV> message + 16 , NULL , len - 14 , prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> plen = message [ 3 ] + ( message [ 2 ] == 1 ? 96 : 0 ) ; //<S2SV> ND_PRINT ( ( ndo , "(%u<S2SV_blank>hops)<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>seqno<S2SV_blank>%u<S2SV_blank>id<S2SV_blank>%s" , //<S2SV> message [ 6 ] , format_prefix ( ndo , prefix , plen ) , //<S2SV> seqno , format_id ( message + 8 ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_TSPC : //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tspc" ) ) ; //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\tTS/PC<S2SV_blank>" ) ) ; //<S2SV> if ( len < 6 ) goto invalid ; //<S2SV> ND_PRINT ( ( ndo , "timestamp<S2SV_blank>%u<S2SV_blank>packetcounter<S2SV_blank>%u" , EXTRACT_32BITS ( message + 4 ) , //<S2SV> EXTRACT_16BITS ( message + 2 ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_HMAC : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hmac" ) ) ; //<S2SV> else { //<S2SV> unsigned j ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tHMAC<S2SV_blank>" ) ) ; //<S2SV> if ( len < 18 ) goto invalid ; //<S2SV> ND_PRINT ( ( ndo , "key-id<S2SV_blank>%u<S2SV_blank>digest-%u<S2SV_blank>" , EXTRACT_16BITS ( message + 2 ) , len - 2 ) ) ; //<S2SV> for ( j = 0 ; j < len - 2 ; j ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02X" , message [ 4 + j ] ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_UPDATE_SRC_SPECIFIC : { //<S2SV> if ( ! ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ss-update" ) ) ; //<S2SV> } else { //<S2SV> u_char prefix [ 16 ] , src_prefix [ 16 ] ; //<S2SV> u_short interval , seqno , metric ; //<S2SV> u_char ae , plen , src_plen , omitted ; //<S2SV> int rc ; //<S2SV> int parsed_len = 10 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tSS-Update" ) ) ; //<S2SV> if ( len < 10 ) goto invalid ; //<S2SV> ae = message [ 2 ] ; //<S2SV> src_plen = message [ 3 ] ; //<S2SV> plen = message [ 4 ] ; //<S2SV> omitted = message [ 5 ] ; //<S2SV> interval = EXTRACT_16BITS ( message + 6 ) ; //<S2SV> seqno = EXTRACT_16BITS ( message + 8 ) ; //<S2SV> metric = EXTRACT_16BITS ( message + 10 ) ; //<S2SV> rc = network_prefix ( ae , plen , omitted , message + 2 + parsed_len , //<S2SV> ae == 1 ? v4_prefix : v6_prefix , //<S2SV> len - parsed_len , prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> if ( ae == 1 ) //<S2SV> plen += 96 ; //<S2SV> parsed_len += rc ; //<S2SV> rc = network_prefix ( ae , src_plen , 0 , message + 2 + parsed_len , //<S2SV> NULL , len - parsed_len , src_prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> if ( ae == 1 ) //<S2SV> src_plen += 96 ; //<S2SV> parsed_len += rc ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s<S2SV_blank>from" , format_prefix ( ndo , prefix , plen ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s<S2SV_blank>metric<S2SV_blank>%u<S2SV_blank>seqno<S2SV_blank>%u<S2SV_blank>interval<S2SV_blank>%s" , //<S2SV> format_prefix ( ndo , src_prefix , src_plen ) , //<S2SV> metric , seqno , format_interval_update ( interval ) ) ) ; //<S2SV> if ( ( u_int ) parsed_len < len ) //<S2SV> subtlvs_print ( ndo , message + 2 + parsed_len , //<S2SV> message + 2 + len , type ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_REQUEST_SRC_SPECIFIC : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ss-request" ) ) ; //<S2SV> else { //<S2SV> int rc , parsed_len = 3 ; //<S2SV> u_char ae , plen , src_plen , prefix [ 16 ] , src_prefix [ 16 ] ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tSS-Request<S2SV_blank>" ) ) ; //<S2SV> if ( len < 3 ) goto invalid ; //<S2SV> ae = message [ 2 ] ; //<S2SV> plen = message [ 3 ] ; //<S2SV> src_plen = message [ 4 ] ; //<S2SV> rc = network_prefix ( ae , plen , 0 , message + 2 + parsed_len , //<S2SV> NULL , len - parsed_len , prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> if ( ae == 1 ) //<S2SV> plen += 96 ; //<S2SV> parsed_len += rc ; //<S2SV> rc = network_prefix ( ae , src_plen , 0 , message + 2 + parsed_len , //<S2SV> NULL , len - parsed_len , src_prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> if ( ae == 1 ) //<S2SV> src_plen += 96 ; //<S2SV> parsed_len += rc ; //<S2SV> if ( ae == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "for<S2SV_blank>any" ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "for<S2SV_blank>(%s,<S2SV_blank>" , format_prefix ( ndo , prefix , plen ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s)" , format_prefix ( ndo , src_prefix , src_plen ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case MESSAGE_MH_REQUEST_SRC_SPECIFIC : { //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ss-mh-request" ) ) ; //<S2SV> else { //<S2SV> int rc , parsed_len = 14 ; //<S2SV> u_short seqno ; //<S2SV> u_char ae , plen , src_plen , prefix [ 16 ] , src_prefix [ 16 ] , hopc ; //<S2SV> const u_char * router_id = NULL ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tSS-MH-Request<S2SV_blank>" ) ) ; //<S2SV> if ( len < 14 ) goto invalid ; //<S2SV> ae = message [ 2 ] ; //<S2SV> plen = message [ 3 ] ; //<S2SV> seqno = EXTRACT_16BITS ( message + 4 ) ; //<S2SV> hopc = message [ 6 ] ; //<S2SV> src_plen = message [ 7 ] ; //<S2SV> router_id = message + 8 ; //<S2SV> rc = network_prefix ( ae , plen , 0 , message + 2 + parsed_len , //<S2SV> NULL , len - parsed_len , prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> if ( ae == 1 ) //<S2SV> plen += 96 ; //<S2SV> parsed_len += rc ; //<S2SV> rc = network_prefix ( ae , src_plen , 0 , message + 2 + parsed_len , //<S2SV> NULL , len - parsed_len , src_prefix ) ; //<S2SV> if ( rc < 0 ) goto invalid ; //<S2SV> if ( ae == 1 ) //<S2SV> src_plen += 96 ; //<S2SV> ND_PRINT ( ( ndo , "(%u<S2SV_blank>hops)<S2SV_blank>for<S2SV_blank>(%s,<S2SV_blank>" , //<S2SV> hopc , format_prefix ( ndo , prefix , plen ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s)<S2SV_blank>seqno<S2SV_blank>%u<S2SV_blank>id<S2SV_blank>%s" , //<S2SV> format_prefix ( ndo , src_prefix , src_plen ) , //<S2SV> seqno , format_id ( router_id ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>unknown" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\tUnknown<S2SV_blank>message<S2SV_blank>type<S2SV_blank>%d" , type ) ) ; //<S2SV> } //<S2SV> i += len + 2 ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , tstr ) ) ; //<S2SV> return ; //<S2SV> invalid : //<S2SV> ND_PRINT ( ( ndo , "%s" , istr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 