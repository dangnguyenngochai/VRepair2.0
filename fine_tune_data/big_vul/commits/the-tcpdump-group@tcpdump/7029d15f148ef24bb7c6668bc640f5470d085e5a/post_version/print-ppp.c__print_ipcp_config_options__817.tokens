static int //<S2SV> print_ipcp_config_options ( netdissect_options * ndo , //<S2SV> const u_char * p , int length ) //<S2SV> { //<S2SV> int len , opt ; //<S2SV> u_int compproto , ipcomp_subopttotallen , ipcomp_subopt , ipcomp_suboptlen ; //<S2SV> if ( length < 2 ) //<S2SV> return 0 ; //<S2SV> ND_TCHECK2 ( * p , 2 ) ; //<S2SV> len = p [ 1 ] ; //<S2SV> opt = p [ 0 ] ; //<S2SV> if ( length < len ) //<S2SV> return 0 ; //<S2SV> if ( len < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>2)" , //<S2SV> tok2str ( ipcpopt_values , "unknown" , opt ) , //<S2SV> opt , //<S2SV> len ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> tok2str ( ipcpopt_values , "unknown" , opt ) , //<S2SV> opt , //<S2SV> len ) ) ; //<S2SV> switch ( opt ) { //<S2SV> case IPCPOPT_2ADDR : //<S2SV> if ( len != 10 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>10)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 6 ) , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>src<S2SV_blank>%s,<S2SV_blank>dst<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , p + 2 ) , //<S2SV> ipaddr_string ( ndo , p + 6 ) ) ) ; //<S2SV> break ; //<S2SV> case IPCPOPT_IPCOMP : //<S2SV> if ( len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>4)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK_16BITS ( p + 2 ) ; //<S2SV> compproto = EXTRACT_16BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s<S2SV_blank>(0x%02x):" , //<S2SV> tok2str ( ipcpopt_compproto_values , "Unknown" , compproto ) , //<S2SV> compproto ) ) ; //<S2SV> switch ( compproto ) { //<S2SV> case PPP_VJC : //<S2SV> break ; //<S2SV> case IPCPOPT_IPCOMP_HDRCOMP : //<S2SV> if ( len < IPCPOPT_IPCOMP_MINLEN ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>%u)" , //<S2SV> IPCPOPT_IPCOMP_MINLEN ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 2 ) , IPCPOPT_IPCOMP_MINLEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>TCP<S2SV_blank>Space<S2SV_blank>%u,<S2SV_blank>non-TCP<S2SV_blank>Space<S2SV_blank>%u" ",<S2SV_blank>maxPeriod<S2SV_blank>%u,<S2SV_blank>maxTime<S2SV_blank>%u,<S2SV_blank>maxHdr<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( p + 4 ) , //<S2SV> EXTRACT_16BITS ( p + 6 ) , //<S2SV> EXTRACT_16BITS ( p + 8 ) , //<S2SV> EXTRACT_16BITS ( p + 10 ) , //<S2SV> EXTRACT_16BITS ( p + 12 ) ) ) ; //<S2SV> if ( len > IPCPOPT_IPCOMP_MINLEN ) { //<S2SV> ipcomp_subopttotallen = len - IPCPOPT_IPCOMP_MINLEN ; //<S2SV> p += IPCPOPT_IPCOMP_MINLEN ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Suboptions,<S2SV_blank>length<S2SV_blank>%u" , ipcomp_subopttotallen ) ) ; //<S2SV> while ( ipcomp_subopttotallen >= 2 ) { //<S2SV> ND_TCHECK2 ( * p , 2 ) ; //<S2SV> ipcomp_subopt = * p ; //<S2SV> ipcomp_suboptlen = * ( p + 1 ) ; //<S2SV> if ( ipcomp_subopt == 0 || //<S2SV> ipcomp_suboptlen == 0 ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t%s<S2SV_blank>Suboption<S2SV_blank>#%u,<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> tok2str ( ipcpopt_compproto_subopt_values , //<S2SV> "Unknown" , //<S2SV> ipcomp_subopt ) , //<S2SV> ipcomp_subopt , //<S2SV> ipcomp_suboptlen ) ) ; //<S2SV> ipcomp_subopttotallen -= ipcomp_suboptlen ; //<S2SV> p += ipcomp_suboptlen ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case IPCPOPT_ADDR : //<S2SV> case IPCPOPT_MOBILE4 : //<S2SV> case IPCPOPT_PRIDNS : //<S2SV> case IPCPOPT_PRINBNS : //<S2SV> case IPCPOPT_SECDNS : //<S2SV> case IPCPOPT_SECNBNS : //<S2SV> if ( len != 6 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>6)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s" , ipaddr_string ( ndo , p + 2 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag < 2 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> return len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|ipcp]" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 