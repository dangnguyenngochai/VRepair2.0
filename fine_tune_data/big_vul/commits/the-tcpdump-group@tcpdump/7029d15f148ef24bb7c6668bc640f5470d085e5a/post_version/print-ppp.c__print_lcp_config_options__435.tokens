static int //<S2SV> print_lcp_config_options ( netdissect_options * ndo , //<S2SV> const u_char * p , int length ) //<S2SV> { //<S2SV> int len , opt ; //<S2SV> if ( length < 2 ) //<S2SV> return 0 ; //<S2SV> ND_TCHECK2 ( * p , 2 ) ; //<S2SV> len = p [ 1 ] ; //<S2SV> opt = p [ 0 ] ; //<S2SV> if ( length < len ) //<S2SV> return 0 ; //<S2SV> if ( len < 2 ) { //<S2SV> if ( ( opt >= LCPOPT_MIN ) && ( opt <= LCPOPT_MAX ) ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>2)" , //<S2SV> lcpconfopts [ opt ] , opt , len ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\tunknown<S2SV_blank>LCP<S2SV_blank>option<S2SV_blank>0x%02x" , opt ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ( opt >= LCPOPT_MIN ) && ( opt <= LCPOPT_MAX ) ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u" , lcpconfopts [ opt ] , opt , len ) ) ; //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\tunknown<S2SV_blank>LCP<S2SV_blank>option<S2SV_blank>0x%02x" , opt ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> switch ( opt ) { //<S2SV> case LCPOPT_VEXT : //<S2SV> if ( len < 6 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>6)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK_24BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Vendor:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( oui_values , "Unknown" , EXTRACT_24BITS ( p + 2 ) ) , //<S2SV> EXTRACT_24BITS ( p + 2 ) ) ) ; //<S2SV> # if 0 //<S2SV> ND_TCHECK ( p [ 5 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>kind:<S2SV_blank>0x%02x" , p [ 5 ] ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Value:<S2SV_blank>0x" ) ) ; //<S2SV> for ( i = 0 ; i < len - 6 ; i ++ ) { //<S2SV> ND_TCHECK ( p [ 6 + i ] ) ; //<S2SV> ND_PRINT ( ( ndo , "%02x" , p [ 6 + i ] ) ) ; //<S2SV> } //<S2SV> # endif //<S2SV> break ; //<S2SV> case LCPOPT_MRU : //<S2SV> if ( len != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>4)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK_16BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%u" , EXTRACT_16BITS ( p + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case LCPOPT_ACCM : //<S2SV> if ( len != 6 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>6)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK_32BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>0x%08x" , EXTRACT_32BITS ( p + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case LCPOPT_AP : //<S2SV> if ( len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>4)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK_16BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s" , tok2str ( ppptype2str , "Unknown<S2SV_blank>Auth<S2SV_blank>Proto<S2SV_blank>(0x04x)" , EXTRACT_16BITS ( p + 2 ) ) ) ) ; //<S2SV> switch ( EXTRACT_16BITS ( p + 2 ) ) { //<S2SV> case PPP_CHAP : //<S2SV> ND_TCHECK ( p [ 4 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , tok2str ( authalg_values , "Unknown<S2SV_blank>Auth<S2SV_blank>Alg<S2SV_blank>%u" , p [ 4 ] ) ) ) ; //<S2SV> break ; //<S2SV> case PPP_PAP : //<S2SV> case PPP_EAP : //<S2SV> case PPP_SPAP : //<S2SV> case PPP_SPAP_OLD : //<S2SV> break ; //<S2SV> default : //<S2SV> print_unknown_data ( ndo , p , "\\n\\t" , len ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case LCPOPT_QP : //<S2SV> if ( len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>4)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK_16BITS ( p + 2 ) ; //<S2SV> if ( EXTRACT_16BITS ( p + 2 ) == PPP_LQM ) //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>LQR" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>unknown" ) ) ; //<S2SV> break ; //<S2SV> case LCPOPT_MN : //<S2SV> if ( len != 6 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>6)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK_32BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>0x%08x" , EXTRACT_32BITS ( p + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case LCPOPT_PFC : //<S2SV> break ; //<S2SV> case LCPOPT_ACFC : //<S2SV> break ; //<S2SV> case LCPOPT_LD : //<S2SV> if ( len != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>4)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK_16BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>0x%04x" , EXTRACT_16BITS ( p + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case LCPOPT_CBACK : //<S2SV> if ( len < 3 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>3)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>" ) ) ; //<S2SV> ND_TCHECK ( p [ 2 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Callback<S2SV_blank>Operation<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( ppp_callback_values , "Unknown" , p [ 2 ] ) , //<S2SV> p [ 2 ] ) ) ; //<S2SV> break ; //<S2SV> case LCPOPT_MLMRRU : //<S2SV> if ( len != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>4)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK_16BITS ( p + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%u" , EXTRACT_16BITS ( p + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case LCPOPT_MLED : //<S2SV> if ( len < 3 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>3)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK ( p [ 2 ] ) ; //<S2SV> switch ( p [ 2 ] ) { //<S2SV> case MEDCLASS_NULL : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Null" ) ) ; //<S2SV> break ; //<S2SV> case MEDCLASS_LOCAL : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Local" ) ) ; //<S2SV> break ; //<S2SV> case MEDCLASS_IPV4 : //<S2SV> if ( len != 7 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>7)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 3 ) , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>IPv4<S2SV_blank>%s" , ipaddr_string ( ndo , p + 3 ) ) ) ; //<S2SV> break ; //<S2SV> case MEDCLASS_MAC : //<S2SV> if ( len != 9 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>9)" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 3 ) , 6 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>MAC<S2SV_blank>%s" , etheraddr_string ( ndo , p + 3 ) ) ) ; //<S2SV> break ; //<S2SV> case MEDCLASS_MNB : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Magic-Num-Block" ) ) ; //<S2SV> break ; //<S2SV> case MEDCLASS_PSNDN : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>PSNDN" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Unknown<S2SV_blank>class<S2SV_blank>%u" , p [ 2 ] ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> # if 0 //<S2SV> case LCPOPT_DEP6 : //<S2SV> case LCPOPT_FCSALT : //<S2SV> case LCPOPT_SDP : //<S2SV> case LCPOPT_NUMMODE : //<S2SV> case LCPOPT_DEP12 : //<S2SV> case LCPOPT_DEP14 : //<S2SV> case LCPOPT_DEP15 : //<S2SV> case LCPOPT_DEP16 : //<S2SV> case LCPOPT_MLSSNHF : //<S2SV> case LCPOPT_PROP : //<S2SV> case LCPOPT_DCEID : //<S2SV> case LCPOPT_MPP : //<S2SV> case LCPOPT_LCPAOPT : //<S2SV> case LCPOPT_COBS : //<S2SV> case LCPOPT_PE : //<S2SV> case LCPOPT_MLHF : //<S2SV> case LCPOPT_I18N : //<S2SV> case LCPOPT_SDLOS : //<S2SV> case LCPOPT_PPPMUX : //<S2SV> break ; //<S2SV> # endif //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag < 2 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> return len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|lcp]" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 