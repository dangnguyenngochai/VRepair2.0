static int //<S2SV> print_ccp_config_options ( netdissect_options * ndo , //<S2SV> const u_char * p , int length ) //<S2SV> { //<S2SV> int len , opt ; //<S2SV> if ( length < 2 ) //<S2SV> return 0 ; //<S2SV> ND_TCHECK2 ( * p , 2 ) ; //<S2SV> len = p [ 1 ] ; //<S2SV> opt = p [ 0 ] ; //<S2SV> if ( length < len ) //<S2SV> return 0 ; //<S2SV> if ( len < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>2)" , //<S2SV> tok2str ( ccpconfopts_values , "Unknown" , opt ) , //<S2SV> opt , //<S2SV> len ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> tok2str ( ccpconfopts_values , "Unknown" , opt ) , //<S2SV> opt , //<S2SV> len ) ) ; //<S2SV> switch ( opt ) { //<S2SV> case CCPOPT_BSDCOMP : //<S2SV> if ( len < 3 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>3)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Version:<S2SV_blank>%u,<S2SV_blank>Dictionary<S2SV_blank>Bits:<S2SV_blank>%u" , //<S2SV> p [ 2 ] >> 5 , p [ 2 ] & 0x1f ) ) ; //<S2SV> break ; //<S2SV> case CCPOPT_MVRCA : //<S2SV> if ( len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>4)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Features:<S2SV_blank>%u,<S2SV_blank>PxP:<S2SV_blank>%s,<S2SV_blank>History:<S2SV_blank>%u,<S2SV_blank>#CTX-ID:<S2SV_blank>%u" , //<S2SV> ( p [ 2 ] & 0xc0 ) >> 6 , //<S2SV> ( p [ 2 ] & 0x20 ) ? "Enabled" : "Disabled" , //<S2SV> p [ 2 ] & 0x1f , p [ 3 ] ) ) ; //<S2SV> break ; //<S2SV> case CCPOPT_DEFLATE : //<S2SV> if ( len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>4)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 2 ) , 1 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Window:<S2SV_blank>%uK,<S2SV_blank>Method:<S2SV_blank>%s<S2SV_blank>(0x%x),<S2SV_blank>MBZ:<S2SV_blank>%u,<S2SV_blank>CHK:<S2SV_blank>%u" , //<S2SV> ( p [ 2 ] & 0xf0 ) >> 4 , //<S2SV> ( ( p [ 2 ] & 0x0f ) == 8 ) ? "zlib" : "unknown" , //<S2SV> p [ 2 ] & 0x0f , ( p [ 3 ] & 0xfc ) >> 2 , p [ 3 ] & 0x03 ) ) ; //<S2SV> break ; //<S2SV> # if 0 //<S2SV> case CCPOPT_OUI : //<S2SV> case CCPOPT_PRED1 : //<S2SV> case CCPOPT_PRED2 : //<S2SV> case CCPOPT_PJUMP : //<S2SV> case CCPOPT_HPPPC : //<S2SV> case CCPOPT_STACLZS : //<S2SV> case CCPOPT_MPPC : //<S2SV> case CCPOPT_GFZA : //<S2SV> case CCPOPT_V42BIS : //<S2SV> case CCPOPT_LZSDCP : //<S2SV> case CCPOPT_DEC : //<S2SV> case CCPOPT_RESV : //<S2SV> break ; //<S2SV> # endif //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag < 2 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> return len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|ccp]" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 