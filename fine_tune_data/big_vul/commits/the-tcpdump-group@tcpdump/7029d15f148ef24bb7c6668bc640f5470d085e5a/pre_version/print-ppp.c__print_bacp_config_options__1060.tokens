static int //<S2SV> print_bacp_config_options ( netdissect_options * ndo , //<S2SV> const u_char * p , int length ) //<S2SV> { //<S2SV> int len , opt ; //<S2SV> if ( length < 2 ) //<S2SV> return 0 ; //<S2SV> ND_TCHECK2 ( * p , 2 ) ; //<S2SV> len = p [ 1 ] ; //<S2SV> opt = p [ 0 ] ; //<S2SV> if ( length < len ) //<S2SV> return 0 ; //<S2SV> if ( len < 2 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>2)" , //<S2SV> tok2str ( bacconfopts_values , "Unknown" , opt ) , //<S2SV> opt , //<S2SV> len ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(0x%02x),<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> tok2str ( bacconfopts_values , "Unknown" , opt ) , //<S2SV> opt , //<S2SV> len ) ) ; //<S2SV> switch ( opt ) { //<S2SV> case BACPOPT_FPEER : //<S2SV> if ( len != 6 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(length<S2SV_blank>bogus,<S2SV_blank>should<S2SV_blank>be<S2SV_blank>=<S2SV_blank>6)" ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ( p + 2 ) , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>Magic-Num<S2SV_blank>0x%08x" , EXTRACT_32BITS ( p + 2 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag < 2 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , & p [ 2 ] , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len - 2 ) ; //<S2SV> return len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|bacp]" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 