void //<S2SV> lmp_print ( netdissect_options * ndo , //<S2SV> register const u_char * pptr , register u_int len ) //<S2SV> { //<S2SV> const struct lmp_common_header * lmp_com_header ; //<S2SV> const struct lmp_object_header * lmp_obj_header ; //<S2SV> const u_char * tptr , * obj_tptr ; //<S2SV> u_int tlen , lmp_obj_len , lmp_obj_ctype , obj_tlen ; //<S2SV> int hexdump ; //<S2SV> u_int offset ; //<S2SV> u_int link_type ; //<S2SV> union { //<S2SV> float f ; //<S2SV> uint32_t i ; //<S2SV> } bw ; //<S2SV> tptr = pptr ; //<S2SV> lmp_com_header = ( const struct lmp_common_header * ) pptr ; //<S2SV> ND_TCHECK ( * lmp_com_header ) ; //<S2SV> if ( LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) != LMP_VERSION ) { //<S2SV> ND_PRINT ( ( ndo , "LMP<S2SV_blank>version<S2SV_blank>%u<S2SV_blank>packet<S2SV_blank>not<S2SV_blank>supported" , //<S2SV> LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag < 1 ) { //<S2SV> ND_PRINT ( ( ndo , "LMPv%u<S2SV_blank>%s<S2SV_blank>Message,<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) , //<S2SV> tok2str ( lmp_msg_type_values , "unknown<S2SV_blank>(%u)" , lmp_com_header -> msg_type ) , //<S2SV> len ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> tlen = EXTRACT_16BITS ( lmp_com_header -> length ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tLMPv%u,<S2SV_blank>msg-type:<S2SV_blank>%s,<S2SV_blank>Flags:<S2SV_blank>[%s],<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) , //<S2SV> tok2str ( lmp_msg_type_values , "unknown,<S2SV_blank>type:<S2SV_blank>%u" , lmp_com_header -> msg_type ) , //<S2SV> bittok2str ( lmp_header_flag_values , "none" , lmp_com_header -> flags ) , //<S2SV> tlen ) ) ; //<S2SV> if ( tlen < sizeof ( const struct lmp_common_header ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short)" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( tlen > len ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>long)" ) ) ; //<S2SV> tlen = len ; //<S2SV> } //<S2SV> tptr += sizeof ( const struct lmp_common_header ) ; //<S2SV> tlen -= sizeof ( const struct lmp_common_header ) ; //<S2SV> while ( tlen > 0 ) { //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct lmp_object_header ) ) ; //<S2SV> lmp_obj_header = ( const struct lmp_object_header * ) tptr ; //<S2SV> lmp_obj_len = EXTRACT_16BITS ( lmp_obj_header -> length ) ; //<S2SV> lmp_obj_ctype = ( lmp_obj_header -> ctype ) & 0x7f ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Object<S2SV_blank>(%u),<S2SV_blank>Class-Type:<S2SV_blank>%s<S2SV_blank>(%u)<S2SV_blank>Flags:<S2SV_blank>[%snegotiable],<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( lmp_obj_values , //<S2SV> "Unknown" , //<S2SV> lmp_obj_header -> class_num ) , //<S2SV> lmp_obj_header -> class_num , //<S2SV> tok2str ( lmp_ctype_values , //<S2SV> "Unknown" , //<S2SV> ( ( lmp_obj_header -> class_num ) << 8 ) + lmp_obj_ctype ) , //<S2SV> lmp_obj_ctype , //<S2SV> ( lmp_obj_header -> ctype ) & 0x80 ? "" : "non-" , //<S2SV> lmp_obj_len ) ) ; //<S2SV> if ( lmp_obj_len < 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short)" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ( lmp_obj_len % 4 ) != 0 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>4)" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> obj_tptr = tptr + sizeof ( struct lmp_object_header ) ; //<S2SV> obj_tlen = lmp_obj_len - sizeof ( struct lmp_object_header ) ; //<S2SV> ND_TCHECK2 ( * tptr , lmp_obj_len ) ; //<S2SV> hexdump = FALSE ; //<S2SV> switch ( lmp_obj_header -> class_num ) { //<S2SV> case LMP_OBJ_CC_ID : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_LOC : //<S2SV> case LMP_CTYPE_RMT : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Control<S2SV_blank>Channel<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_LINK_ID : //<S2SV> case LMP_OBJ_INTERFACE_ID : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_IPV4_LOC : //<S2SV> case LMP_CTYPE_IPV4_RMT : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Link<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_IPV6_LOC : //<S2SV> case LMP_CTYPE_IPV6_RMT : //<S2SV> if ( obj_tlen != 16 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Link<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_UNMD_LOC : //<S2SV> case LMP_CTYPE_UNMD_RMT : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Link<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_MESSAGE_ID : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_1 : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Message<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_2 : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Message<S2SV_blank>ID<S2SV_blank>Ack:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_NODE_ID : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_LOC : //<S2SV> case LMP_CTYPE_RMT : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Node<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_CONFIG : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_HELLO_CONFIG : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Hello<S2SV_blank>Interval:<S2SV_blank>%u\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Hello<S2SV_blank>Dead<S2SV_blank>Interval:<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_HELLO : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_HELLO : //<S2SV> if ( obj_tlen != 8 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Tx<S2SV_blank>Seq:<S2SV_blank>%u,<S2SV_blank>Rx<S2SV_blank>Seq:<S2SV_blank>%u" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_TE_LINK : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen != 12 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> bittok2str ( lmp_obj_te_link_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" //<S2SV> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ipaddr_string ( ndo , obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> ipaddr_string ( ndo , obj_tptr + 8 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen != 36 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> bittok2str ( lmp_obj_te_link_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" //<S2SV> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Link-ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ip6addr_string ( ndo , obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> ip6addr_string ( ndo , obj_tptr + 20 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 20 ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_UNMD : //<S2SV> if ( obj_tlen != 12 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> bittok2str ( lmp_obj_te_link_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Link-ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" //<S2SV> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Link-ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_DATA_LINK : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < 12 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> bittok2str ( lmp_obj_data_link_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" //<S2SV> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ipaddr_string ( ndo , obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> ipaddr_string ( ndo , obj_tptr + 8 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) ) ) ; //<S2SV> if ( lmp_print_data_link_subobjs ( ndo , obj_tptr , obj_tlen - 12 , 12 ) ) //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < 36 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> bittok2str ( lmp_obj_data_link_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" //<S2SV> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ip6addr_string ( ndo , obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> ip6addr_string ( ndo , obj_tptr + 20 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 20 ) ) ) ; //<S2SV> if ( lmp_print_data_link_subobjs ( ndo , obj_tptr , obj_tlen - 36 , 36 ) ) //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_UNMD : //<S2SV> if ( obj_tlen < 12 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> bittok2str ( lmp_obj_data_link_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" //<S2SV> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Remote<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) ) ) ; //<S2SV> if ( lmp_print_data_link_subobjs ( ndo , obj_tptr , obj_tlen - 12 , 12 ) ) //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_VERIFY_BEGIN : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_1 : //<S2SV> if ( obj_tlen != 20 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Flags:<S2SV_blank>%s" , //<S2SV> bittok2str ( lmp_obj_begin_verify_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_16BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Interval:<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Data<S2SV_blank>links:<S2SV_blank>%u" , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Encoding<S2SV_blank>type:<S2SV_blank>%s" , //<S2SV> tok2str ( gmpls_encoding_values , "Unknown" , * ( obj_tptr + 8 ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Transport<S2SV_blank>Mechanism:<S2SV_blank>%u<S2SV_blank>(0x%x)%s" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 10 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 10 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 10 ) & 8000 ? "<S2SV_blank>(Payload<S2SV_blank>test<S2SV_blank>messages<S2SV_blank>capable)" : "" ) ) ; //<S2SV> bw . i = EXTRACT_32BITS ( obj_tptr + 12 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Transmission<S2SV_blank>Rate:<S2SV_blank>%.3f<S2SV_blank>Mbps" , bw . f * 8 / 1000000 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Wavelength:<S2SV_blank>%u" , //<S2SV> EXTRACT_32BITS ( obj_tptr + 16 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_VERIFY_BEGIN_ACK : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_1 : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Dead<S2SV_blank>Interval:<S2SV_blank>%u" //<S2SV> "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>Transport<S2SV_blank>Response:<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_VERIFY_ID : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_1 : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Verify<S2SV_blank>ID:<S2SV_blank>%u" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_CHANNEL_STATUS : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_IPV4 : //<S2SV> offset = 0 ; //<S2SV> while ( offset + 8 <= obj_tlen ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ipaddr_string ( ndo , obj_tptr + offset ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Active:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 31 ) ? //<S2SV> "Allocated" : "Non-allocated" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 31 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Direction:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 30 ) & 0x1 ? //<S2SV> "Transmit" : "Receive" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 30 ) & 0x1 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Channel<S2SV_blank>Status:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( lmp_obj_channel_status_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset + 4 ) & 0x3FFFFFF ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset + 4 ) & 0x3FFFFFF ) ) ; //<S2SV> offset += 8 ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_CTYPE_IPV6 : //<S2SV> offset = 0 ; //<S2SV> while ( offset + 20 <= obj_tlen ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ip6addr_string ( ndo , obj_tptr + offset ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Active:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 16 ) >> 31 ) ? //<S2SV> "Allocated" : "Non-allocated" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 16 ) >> 31 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Direction:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 16 ) >> 30 ) & 0x1 ? //<S2SV> "Transmit" : "Receive" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 16 ) >> 30 ) & 0x1 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Channel<S2SV_blank>Status:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( lmp_obj_channel_status_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset + 16 ) & 0x3FFFFFF ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset + 16 ) & 0x3FFFFFF ) ) ; //<S2SV> offset += 20 ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_CTYPE_UNMD : //<S2SV> offset = 0 ; //<S2SV> while ( offset + 8 <= obj_tlen ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Active:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 31 ) ? //<S2SV> "Allocated" : "Non-allocated" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 31 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Direction:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 30 ) & 0x1 ? //<S2SV> "Transmit" : "Receive" , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + offset + 4 ) >> 30 ) & 0x1 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Channel<S2SV_blank>Status:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( lmp_obj_channel_status_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset + 4 ) & 0x3FFFFFF ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset + 4 ) & 0x3FFFFFF ) ) ; //<S2SV> offset += 8 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_CHANNEL_STATUS_REQ : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_IPV4 : //<S2SV> offset = 0 ; //<S2SV> while ( offset + 4 <= obj_tlen ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ipaddr_string ( ndo , obj_tptr + offset ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) ) ) ; //<S2SV> offset += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_CTYPE_IPV6 : //<S2SV> offset = 0 ; //<S2SV> while ( offset + 16 <= obj_tlen ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ip6addr_string ( ndo , obj_tptr + offset ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) ) ) ; //<S2SV> offset += 16 ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_CTYPE_UNMD : //<S2SV> offset = 0 ; //<S2SV> while ( offset + 4 <= obj_tlen ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%u<S2SV_blank>(0x%08x)" , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + offset ) ) ) ; //<S2SV> offset += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_ERROR_CODE : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_BEGIN_VERIFY_ERROR : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Error<S2SV_blank>Code:<S2SV_blank>%s" , //<S2SV> bittok2str ( lmp_obj_begin_verify_error_values , //<S2SV> "none" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_LINK_SUMMARY_ERROR : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Error<S2SV_blank>Code:<S2SV_blank>%s" , //<S2SV> bittok2str ( lmp_obj_link_summary_error_values , //<S2SV> "none" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case LMP_OBJ_SERVICE_CONFIG : //<S2SV> switch ( lmp_obj_ctype ) { //<S2SV> case LMP_CTYPE_SERVICE_CONFIG_SP : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Flags:<S2SV_blank>%s" , //<S2SV> bittok2str ( lmp_obj_service_config_sp_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>UNI<S2SV_blank>Version:<S2SV_blank>%u" , //<S2SV> EXTRACT_8BITS ( obj_tptr + 1 ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_SERVICE_CONFIG_CPSA : //<S2SV> if ( obj_tlen != 16 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> link_type = EXTRACT_8BITS ( obj_tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Link<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( lmp_sd_service_config_cpsa_link_type_values , //<S2SV> "Unknown" , link_type ) , //<S2SV> link_type ) ) ; //<S2SV> switch ( link_type ) { //<S2SV> case LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SDH : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Signal<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( lmp_sd_service_config_cpsa_signal_type_sdh_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_8BITS ( obj_tptr + 1 ) ) , //<S2SV> EXTRACT_8BITS ( obj_tptr + 1 ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_SD_SERVICE_CONFIG_CPSA_LINK_TYPE_SONET : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Signal<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( lmp_sd_service_config_cpsa_signal_type_sonet_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_8BITS ( obj_tptr + 1 ) ) , //<S2SV> EXTRACT_8BITS ( obj_tptr + 1 ) ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Transparency:<S2SV_blank>%s" , //<S2SV> bittok2str ( lmp_obj_service_config_cpsa_tp_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr + 2 ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Contiguous<S2SV_blank>Concatenation<S2SV_blank>Types:<S2SV_blank>%s" , //<S2SV> bittok2str ( lmp_obj_service_config_cpsa_cct_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr + 3 ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Minimum<S2SV_blank>NCC:<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 4 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Maximum<S2SV_blank>NCC:<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Minimum<S2SV_blank>NVC:%u" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 8 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Maximum<S2SV_blank>NVC:%u" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 10 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Local<S2SV_blank>Interface<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%08x)" , //<S2SV> ipaddr_string ( ndo , obj_tptr + 12 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 12 ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_SERVICE_CONFIG_TRANSPARENCY_TCM : //<S2SV> if ( obj_tlen != 8 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Transparency<S2SV_blank>Flags:<S2SV_blank>%s" , //<S2SV> bittok2str ( //<S2SV> lmp_obj_service_config_nsa_transparency_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>TCM<S2SV_blank>Monitoring<S2SV_blank>Flags:<S2SV_blank>%s" , //<S2SV> bittok2str ( //<S2SV> lmp_obj_service_config_nsa_tcm_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr + 7 ) ) ) ) ; //<S2SV> break ; //<S2SV> case LMP_CTYPE_SERVICE_CONFIG_NETWORK_DIVERSITY : //<S2SV> if ( obj_tlen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(not<S2SV_blank>correct<S2SV_blank>for<S2SV_blank>object)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank>Diversity:<S2SV_blank>Flags:<S2SV_blank>%s" , //<S2SV> bittok2str ( //<S2SV> lmp_obj_service_config_nsa_network_diversity_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_8BITS ( obj_tptr + 3 ) ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , obj_tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , obj_tlen ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 || hexdump == TRUE ) //<S2SV> print_unknown_data ( ndo , tptr + sizeof ( struct lmp_object_header ) , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , //<S2SV> lmp_obj_len - sizeof ( struct lmp_object_header ) ) ; //<S2SV> tptr += lmp_obj_len ; //<S2SV> tlen -= lmp_obj_len ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t<S2SV_blank>packet<S2SV_blank>exceeded<S2SV_blank>snapshot" ) ) ; //<S2SV> } //<S2SV> 