int //<S2SV> rt6_print ( netdissect_options * ndo , register const u_char * bp , const u_char * bp2 _U_ ) //<S2SV> { //<S2SV> register const struct ip6_rthdr * dp ; //<S2SV> register const struct ip6_rthdr0 * dp0 ; //<S2SV> register const u_char * ep ; //<S2SV> int i , len ; //<S2SV> register const struct in6_addr * addr ; //<S2SV> dp = ( const struct ip6_rthdr * ) bp ; //<S2SV> ep = ndo -> ndo_snapend ; //<S2SV> ND_TCHECK ( dp -> ip6r_segleft ) ; //<S2SV> len = dp -> ip6r_len ; //<S2SV> ND_PRINT ( ( ndo , "srcrt<S2SV_blank>(len=%d" , dp -> ip6r_len ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>type=%d" , dp -> ip6r_type ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>segleft=%d" , dp -> ip6r_segleft ) ) ; //<S2SV> switch ( dp -> ip6r_type ) { //<S2SV> case IPV6_RTHDR_TYPE_0 : //<S2SV> case IPV6_RTHDR_TYPE_2 : //<S2SV> dp0 = ( const struct ip6_rthdr0 * ) dp ; //<S2SV> ND_TCHECK ( dp0 -> ip6r0_reserved ) ; //<S2SV> if ( dp0 -> ip6r0_reserved || ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>rsv=0x%0x" , //<S2SV> EXTRACT_32BITS ( & dp0 -> ip6r0_reserved ) ) ) ; //<S2SV> } //<S2SV> if ( len % 2 == 1 ) //<S2SV> goto trunc ; //<S2SV> len >>= 1 ; //<S2SV> addr = & dp0 -> ip6r0_addr [ 0 ] ; //<S2SV> for ( i = 0 ; i < len ; i ++ ) { //<S2SV> if ( ( const u_char * ) ( addr + 1 ) > ep ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>[%d]%s" , i , ip6addr_string ( ndo , addr ) ) ) ; //<S2SV> addr ++ ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")<S2SV_blank>" ) ) ; //<S2SV> return ( ( dp0 -> ip6r0_len + 1 ) << 3 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> goto trunc ; //<S2SV> break ; //<S2SV> } //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|srcrt]" ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 