static const u_char * //<S2SV> ikev2_ID_print ( netdissect_options * ndo , u_char tpay , //<S2SV> const struct isakmp_gen * ext , //<S2SV> u_int item_len _U_ , const u_char * ep _U_ , //<S2SV> uint32_t phase _U_ , uint32_t doi _U_ , //<S2SV> uint32_t proto _U_ , int depth _U_ ) //<S2SV> { //<S2SV> struct ikev2_id id ; //<S2SV> int id_len , idtype_len , i ; //<S2SV> unsigned int dumpascii , dumphex ; //<S2SV> const unsigned char * typedata ; //<S2SV> ND_TCHECK ( * ext ) ; //<S2SV> UNALIGNED_MEMCPY ( & id , ext , sizeof ( id ) ) ; //<S2SV> ikev2_pay_print ( ndo , NPSTR ( tpay ) , id . h . critical ) ; //<S2SV> id_len = ntohs ( id . h . len ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>len=%d" , id_len - 4 ) ) ; //<S2SV> if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> if ( ! rawprint ( ndo , ( const uint8_t * ) ( ext + 1 ) , id_len - 4 ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> idtype_len = id_len - sizeof ( struct ikev2_id ) ; //<S2SV> dumpascii = 0 ; //<S2SV> dumphex = 0 ; //<S2SV> typedata = ( const unsigned char * ) ( ext ) + sizeof ( struct ikev2_id ) ; //<S2SV> switch ( id . type ) { //<S2SV> case ID_IPV4_ADDR : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ipv4:" ) ) ; //<S2SV> dumphex = 1 ; //<S2SV> break ; //<S2SV> case ID_FQDN : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>fqdn:" ) ) ; //<S2SV> dumpascii = 1 ; //<S2SV> break ; //<S2SV> case ID_RFC822_ADDR : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>rfc822:" ) ) ; //<S2SV> dumpascii = 1 ; //<S2SV> break ; //<S2SV> case ID_IPV6_ADDR : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ipv6:" ) ) ; //<S2SV> dumphex = 1 ; //<S2SV> break ; //<S2SV> case ID_DER_ASN1_DN : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>dn:" ) ) ; //<S2SV> dumphex = 1 ; //<S2SV> break ; //<S2SV> case ID_DER_ASN1_GN : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>gn:" ) ) ; //<S2SV> dumphex = 1 ; //<S2SV> break ; //<S2SV> case ID_KEY_ID : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>keyid:" ) ) ; //<S2SV> dumphex = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( dumpascii ) { //<S2SV> ND_TCHECK2 ( * typedata , idtype_len ) ; //<S2SV> for ( i = 0 ; i < idtype_len ; i ++ ) { //<S2SV> if ( ND_ISPRINT ( typedata [ i ] ) ) { //<S2SV> ND_PRINT ( ( ndo , "%c" , typedata [ i ] ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "." ) ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( dumphex ) { //<S2SV> if ( ! rawprint ( ndo , ( const uint8_t * ) typedata , idtype_len ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> return ( const u_char * ) ext + id_len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|%s]" , NPSTR ( tpay ) ) ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 