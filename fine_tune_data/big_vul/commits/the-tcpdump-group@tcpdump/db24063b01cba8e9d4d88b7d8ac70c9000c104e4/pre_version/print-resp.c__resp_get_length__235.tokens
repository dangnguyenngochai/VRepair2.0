static int //<S2SV> resp_get_length ( netdissect_options * ndo , register const u_char * bp , int len , const u_char * * endp ) //<S2SV> { //<S2SV> int result ; //<S2SV> u_char c ; //<S2SV> int saw_digit ; //<S2SV> int neg ; //<S2SV> int too_large ; //<S2SV> if ( len == 0 ) //<S2SV> goto trunc ; //<S2SV> ND_TCHECK ( * bp ) ; //<S2SV> too_large = 0 ; //<S2SV> neg = 0 ; //<S2SV> if ( * bp == '-' ) { //<S2SV> neg = 1 ; //<S2SV> bp ++ ; //<S2SV> len -- ; //<S2SV> } //<S2SV> result = 0 ; //<S2SV> saw_digit = 0 ; //<S2SV> for ( ; ; ) { //<S2SV> if ( len == 0 ) //<S2SV> goto trunc ; //<S2SV> ND_TCHECK ( * bp ) ; //<S2SV> c = * bp ; //<S2SV> if ( ! ( c >= '0' && c <= '9' ) ) { //<S2SV> if ( ! saw_digit ) //<S2SV> goto invalid ; //<S2SV> break ; //<S2SV> } //<S2SV> c -= '0' ; //<S2SV> if ( result > ( INT_MAX / 10 ) ) { //<S2SV> too_large = 1 ; //<S2SV> } else { //<S2SV> result *= 10 ; //<S2SV> if ( result == INT_MAX && c > ( INT_MAX % 10 ) ) { //<S2SV> too_large = 1 ; //<S2SV> } else //<S2SV> result += c ; //<S2SV> } //<S2SV> bp ++ ; //<S2SV> len -- ; //<S2SV> saw_digit = 1 ; //<S2SV> } //<S2SV> if ( ! saw_digit ) //<S2SV> goto invalid ; //<S2SV> if ( len == 0 ) //<S2SV> goto trunc ; //<S2SV> ND_TCHECK ( * bp ) ; //<S2SV> if ( * bp != '\\r' ) //<S2SV> goto invalid ; //<S2SV> bp ++ ; //<S2SV> len -- ; //<S2SV> if ( len == 0 ) //<S2SV> goto trunc ; //<S2SV> ND_TCHECK ( * bp ) ; //<S2SV> if ( * bp != '\\n' ) //<S2SV> goto invalid ; //<S2SV> bp ++ ; //<S2SV> len -- ; //<S2SV> * endp = bp ; //<S2SV> if ( neg ) { //<S2SV> if ( too_large || result != 1 ) //<S2SV> return ( - 4 ) ; //<S2SV> result = - 1 ; //<S2SV> } //<S2SV> return ( too_large ? - 3 : result ) ; //<S2SV> trunc : //<S2SV> return ( - 2 ) ; //<S2SV> invalid : //<S2SV> return ( - 5 ) ; //<S2SV> } //<S2SV> 