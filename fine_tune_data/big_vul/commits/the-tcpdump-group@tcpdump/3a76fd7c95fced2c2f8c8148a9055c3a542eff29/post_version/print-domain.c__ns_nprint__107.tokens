const u_char * //<S2SV> ns_nprint ( netdissect_options * ndo , //<S2SV> register const u_char * cp , register const u_char * bp ) //<S2SV> { //<S2SV> register u_int i , l ; //<S2SV> register const u_char * rp = NULL ; //<S2SV> register int compress = 0 ; //<S2SV> int elt ; //<S2SV> u_int offset , max_offset ; //<S2SV> if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) //<S2SV> return ( NULL ) ; //<S2SV> if ( ! ND_TTEST2 ( * cp , 1 ) ) //<S2SV> return ( NULL ) ; //<S2SV> max_offset = ( u_int ) ( cp - bp ) ; //<S2SV> if ( ( ( i = * cp ++ ) & INDIR_MASK ) != INDIR_MASK ) { //<S2SV> compress = 0 ; //<S2SV> rp = cp + l ; //<S2SV> } //<S2SV> if ( i != 0 ) //<S2SV> while ( i && cp < ndo -> ndo_snapend ) { //<S2SV> if ( ( i & INDIR_MASK ) == INDIR_MASK ) { //<S2SV> if ( ! compress ) { //<S2SV> rp = cp + 1 ; //<S2SV> compress = 1 ; //<S2SV> } //<S2SV> if ( ! ND_TTEST2 ( * cp , 1 ) ) //<S2SV> return ( NULL ) ; //<S2SV> offset = ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; //<S2SV> if ( offset >= max_offset ) { //<S2SV> ND_PRINT ( ( ndo , "<BAD<S2SV_blank>PTR>" ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> max_offset = offset ; //<S2SV> cp = bp + offset ; //<S2SV> if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) //<S2SV> return ( NULL ) ; //<S2SV> if ( ! ND_TTEST2 ( * cp , 1 ) ) //<S2SV> return ( NULL ) ; //<S2SV> i = * cp ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ( i & INDIR_MASK ) == EDNS0_MASK ) { //<S2SV> elt = ( i & ~ INDIR_MASK ) ; //<S2SV> switch ( elt ) { //<S2SV> case EDNS0_ELT_BITLABEL : //<S2SV> if ( blabel_print ( ndo , cp ) == NULL ) //<S2SV> return ( NULL ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<ELT<S2SV_blank>%d>" , elt ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( fn_printn ( ndo , cp , l , ndo -> ndo_snapend ) ) //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> cp += l ; //<S2SV> ND_PRINT ( ( ndo , "." ) ) ; //<S2SV> if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) //<S2SV> return ( NULL ) ; //<S2SV> if ( ! ND_TTEST2 ( * cp , 1 ) ) //<S2SV> return ( NULL ) ; //<S2SV> i = * cp ++ ; //<S2SV> if ( ! compress ) //<S2SV> rp += l + 1 ; //<S2SV> } //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "." ) ) ; //<S2SV> return ( rp ) ; //<S2SV> } //<S2SV> 