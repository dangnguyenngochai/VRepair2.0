static const u_char * //<S2SV> ikev1_n_print ( netdissect_options * ndo , u_char tpay _U_ , //<S2SV> const struct isakmp_gen * ext , u_int item_len , //<S2SV> const u_char * ep , uint32_t phase , uint32_t doi0 _U_ , //<S2SV> uint32_t proto0 _U_ , int depth ) //<S2SV> { //<S2SV> const struct ikev1_pl_n * p ; //<S2SV> struct ikev1_pl_n n ; //<S2SV> const u_char * cp ; //<S2SV> const u_char * ep2 ; //<S2SV> uint32_t doi ; //<S2SV> uint32_t proto ; //<S2SV> static const char * notify_error_str [ ] = { //<S2SV> NULL , "INVALID-PAYLOAD-TYPE" , //<S2SV> "DOI-NOT-SUPPORTED" , "SITUATION-NOT-SUPPORTED" , //<S2SV> "INVALID-COOKIE" , "INVALID-MAJOR-VERSION" , //<S2SV> "INVALID-MINOR-VERSION" , "INVALID-EXCHANGE-TYPE" , //<S2SV> "INVALID-FLAGS" , "INVALID-MESSAGE-ID" , //<S2SV> "INVALID-PROTOCOL-ID" , "INVALID-SPI" , //<S2SV> "INVALID-TRANSFORM-ID" , "ATTRIBUTES-NOT-SUPPORTED" , //<S2SV> "NO-PROPOSAL-CHOSEN" , "BAD-PROPOSAL-SYNTAX" , //<S2SV> "PAYLOAD-MALFORMED" , "INVALID-KEY-INFORMATION" , //<S2SV> "INVALID-ID-INFORMATION" , "INVALID-CERT-ENCODING" , //<S2SV> "INVALID-CERTIFICATE" , "CERT-TYPE-UNSUPPORTED" , //<S2SV> "INVALID-CERT-AUTHORITY" , "INVALID-HASH-INFORMATION" , //<S2SV> "AUTHENTICATION-FAILED" , "INVALID-SIGNATURE" , //<S2SV> "ADDRESS-NOTIFICATION" , "NOTIFY-SA-LIFETIME" , //<S2SV> "CERTIFICATE-UNAVAILABLE" , "UNSUPPORTED-EXCHANGE-TYPE" , //<S2SV> "UNEQUAL-PAYLOAD-LENGTHS" , //<S2SV> } ; //<S2SV> static const char * ipsec_notify_error_str [ ] = { //<S2SV> "RESERVED" , //<S2SV> } ; //<S2SV> static const char * notify_status_str [ ] = { //<S2SV> "CONNECTED" , //<S2SV> } ; //<S2SV> static const char * ipsec_notify_status_str [ ] = { //<S2SV> "RESPONDER-LIFETIME" , "REPLAY-STATUS" , //<S2SV> "INITIAL-CONTACT" , //<S2SV> } ; //<S2SV> # define NOTIFY_ERROR_STR ( x ) STR_OR_ID ( ( x ) , notify_error_str ) //<S2SV> # define IPSEC_NOTIFY_ERROR_STR ( x ) STR_OR_ID ( ( u_int ) ( ( x ) - 8192 ) , ipsec_notify_error_str ) //<S2SV> # define NOTIFY_STATUS_STR ( x ) STR_OR_ID ( ( u_int ) ( ( x ) - 16384 ) , notify_status_str ) //<S2SV> # define IPSEC_NOTIFY_STATUS_STR ( x ) STR_OR_ID ( ( u_int ) ( ( x ) - 24576 ) , ipsec_notify_status_str ) //<S2SV> ND_PRINT ( ( ndo , "%s:" , NPSTR ( ISAKMP_NPTYPE_N ) ) ) ; //<S2SV> p = ( const struct ikev1_pl_n * ) ext ; //<S2SV> ND_TCHECK ( * p ) ; //<S2SV> UNALIGNED_MEMCPY ( & n , ext , sizeof ( n ) ) ; //<S2SV> doi = ntohl ( n . doi ) ; //<S2SV> proto = n . prot_id ; //<S2SV> if ( doi != 1 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>doi=%d" , doi ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>proto=%d" , proto ) ) ; //<S2SV> if ( ntohs ( n . type ) < 8192 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , NOTIFY_ERROR_STR ( ntohs ( n . type ) ) ) ) ; //<S2SV> else if ( ntohs ( n . type ) < 16384 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , numstr ( ntohs ( n . type ) ) ) ) ; //<S2SV> else if ( ntohs ( n . type ) < 24576 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , NOTIFY_STATUS_STR ( ntohs ( n . type ) ) ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , numstr ( ntohs ( n . type ) ) ) ) ; //<S2SV> if ( n . spi_size ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>spi=" ) ) ; //<S2SV> if ( ! rawprint ( ndo , ( const uint8_t * ) ( p + 1 ) , n . spi_size ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> return ( const u_char * ) ( p + 1 ) + n . spi_size ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>doi=ipsec" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>proto=%s" , PROTOIDSTR ( proto ) ) ) ; //<S2SV> if ( ntohs ( n . type ) < 8192 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , NOTIFY_ERROR_STR ( ntohs ( n . type ) ) ) ) ; //<S2SV> else if ( ntohs ( n . type ) < 16384 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , IPSEC_NOTIFY_ERROR_STR ( ntohs ( n . type ) ) ) ) ; //<S2SV> else if ( ntohs ( n . type ) < 24576 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , NOTIFY_STATUS_STR ( ntohs ( n . type ) ) ) ) ; //<S2SV> else if ( ntohs ( n . type ) < 32768 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , IPSEC_NOTIFY_STATUS_STR ( ntohs ( n . type ) ) ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%s" , numstr ( ntohs ( n . type ) ) ) ) ; //<S2SV> if ( n . spi_size ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>spi=" ) ) ; //<S2SV> if ( ! rawprint ( ndo , ( const uint8_t * ) ( p + 1 ) , n . spi_size ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> cp = ( const u_char * ) ( p + 1 ) + n . spi_size ; //<S2SV> ep2 = ( const u_char * ) p + item_len ; //<S2SV> if ( cp < ep ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>orig=(" ) ) ; //<S2SV> switch ( ntohs ( n . type ) ) { //<S2SV> case IPSECDOI_NTYPE_RESPONDER_LIFETIME : //<S2SV> { //<S2SV> const struct attrmap * map = oakley_t_map ; //<S2SV> size_t nmap = sizeof ( oakley_t_map ) / sizeof ( oakley_t_map [ 0 ] ) ; //<S2SV> while ( cp < ep && cp < ep2 ) { //<S2SV> cp = ikev1_attrmap_print ( ndo , cp , //<S2SV> ( ep < ep2 ) ? ep : ep2 , map , nmap ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case IPSECDOI_NTYPE_REPLAY_STATUS : //<S2SV> ND_PRINT ( ( ndo , "replay<S2SV_blank>detection<S2SV_blank>%sabled" , //<S2SV> EXTRACT_32BITS ( cp ) ? "en" : "dis" ) ) ; //<S2SV> break ; //<S2SV> case ISAKMP_NTYPE_NO_PROPOSAL_CHOSEN : //<S2SV> if ( ikev1_sub_print ( ndo , ISAKMP_NPTYPE_SA , //<S2SV> ( const struct isakmp_gen * ) cp , ep , phase , doi , proto , //<S2SV> depth ) == NULL ) //<S2SV> return NULL ; //<S2SV> break ; //<S2SV> default : //<S2SV> isakmp_print ( ndo , cp , //<S2SV> item_len - sizeof ( * p ) - n . spi_size , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> } //<S2SV> return ( const u_char * ) ext + item_len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|%s]" , NPSTR ( ISAKMP_NPTYPE_N ) ) ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 