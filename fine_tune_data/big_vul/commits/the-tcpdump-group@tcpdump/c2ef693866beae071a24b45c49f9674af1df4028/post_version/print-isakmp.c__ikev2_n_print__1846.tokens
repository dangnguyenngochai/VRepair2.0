static const u_char * //<S2SV> ikev2_n_print ( netdissect_options * ndo , u_char tpay _U_ , //<S2SV> const struct isakmp_gen * ext , //<S2SV> u_int item_len , const u_char * ep , //<S2SV> uint32_t phase _U_ , uint32_t doi _U_ , //<S2SV> uint32_t proto _U_ , int depth _U_ ) //<S2SV> { //<S2SV> const struct ikev2_n * p ; //<S2SV> struct ikev2_n n ; //<S2SV> const u_char * cp ; //<S2SV> u_char showspi , showsomedata ; //<S2SV> const char * notify_name ; //<S2SV> uint32_t type ; //<S2SV> p = ( const struct ikev2_n * ) ext ; //<S2SV> ND_TCHECK ( * p ) ; //<S2SV> UNALIGNED_MEMCPY ( & n , ext , sizeof ( n ) ) ; //<S2SV> ikev2_pay_print ( ndo , NPSTR ( ISAKMP_NPTYPE_N ) , n . h . critical ) ; //<S2SV> showspi = 1 ; //<S2SV> showsomedata = 0 ; //<S2SV> notify_name = NULL ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>prot_id=%s" , PROTOIDSTR ( n . prot_id ) ) ) ; //<S2SV> type = ntohs ( n . type ) ; //<S2SV> switch ( type ) { //<S2SV> case IV2_NOTIFY_UNSUPPORTED_CRITICAL_PAYLOAD : //<S2SV> notify_name = "unsupported_critical_payload" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INVALID_IKE_SPI : //<S2SV> notify_name = "invalid_ike_spi" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INVALID_MAJOR_VERSION : //<S2SV> notify_name = "invalid_major_version" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INVALID_SYNTAX : //<S2SV> notify_name = "invalid_syntax" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INVALID_MESSAGE_ID : //<S2SV> notify_name = "invalid_message_id" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INVALID_SPI : //<S2SV> notify_name = "invalid_spi" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_NO_PROPOSAL_CHOSEN : //<S2SV> notify_name = "no_protocol_chosen" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INVALID_KE_PAYLOAD : //<S2SV> notify_name = "invalid_ke_payload" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_AUTHENTICATION_FAILED : //<S2SV> notify_name = "authentication_failed" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_SINGLE_PAIR_REQUIRED : //<S2SV> notify_name = "single_pair_required" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_NO_ADDITIONAL_SAS : //<S2SV> notify_name = "no_additional_sas" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INTERNAL_ADDRESS_FAILURE : //<S2SV> notify_name = "internal_address_failure" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_FAILED_CP_REQUIRED : //<S2SV> notify_name = "failed:cp_required" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INVALID_SELECTORS : //<S2SV> notify_name = "invalid_selectors" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_INITIAL_CONTACT : //<S2SV> notify_name = "initial_contact" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_SET_WINDOW_SIZE : //<S2SV> notify_name = "set_window_size" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_ADDITIONAL_TS_POSSIBLE : //<S2SV> notify_name = "additional_ts_possible" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_IPCOMP_SUPPORTED : //<S2SV> notify_name = "ipcomp_supported" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_NAT_DETECTION_SOURCE_IP : //<S2SV> notify_name = "nat_detection_source_ip" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_NAT_DETECTION_DESTINATION_IP : //<S2SV> notify_name = "nat_detection_destination_ip" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_COOKIE : //<S2SV> notify_name = "cookie" ; //<S2SV> showspi = 1 ; //<S2SV> showsomedata = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_USE_TRANSPORT_MODE : //<S2SV> notify_name = "use_transport_mode" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_HTTP_CERT_LOOKUP_SUPPORTED : //<S2SV> notify_name = "http_cert_lookup_supported" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_REKEY_SA : //<S2SV> notify_name = "rekey_sa" ; //<S2SV> showspi = 1 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_ESP_TFC_PADDING_NOT_SUPPORTED : //<S2SV> notify_name = "tfc_padding_not_supported" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> case IV2_NOTIFY_NON_FIRST_FRAGMENTS_ALSO : //<S2SV> notify_name = "non_first_fragment_also" ; //<S2SV> showspi = 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( type < 8192 ) { //<S2SV> notify_name = "error" ; //<S2SV> } else if ( type < 16384 ) { //<S2SV> notify_name = "private-error" ; //<S2SV> } else if ( type < 40960 ) { //<S2SV> notify_name = "status" ; //<S2SV> } else { //<S2SV> notify_name = "private-status" ; //<S2SV> } //<S2SV> } //<S2SV> if ( notify_name ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>type=%u(%s)" , type , notify_name ) ) ; //<S2SV> } //<S2SV> if ( showspi && n . spi_size ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>spi=" ) ) ; //<S2SV> if ( ! rawprint ( ndo , ( const uint8_t * ) ( p + 1 ) , n . spi_size ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> cp = ( const u_char * ) ( p + 1 ) + n . spi_size ; //<S2SV> if ( cp < ep ) { //<S2SV> if ( ndo -> ndo_vflag > 3 || ( showsomedata && ep - cp < 30 ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>data=(" ) ) ; //<S2SV> if ( ! rawprint ( ndo , ( const uint8_t * ) ( cp ) , ep - cp ) ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> } else if ( showsomedata ) { //<S2SV> if ( ! ike_show_somedata ( ndo , cp , ep ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> } //<S2SV> return ( const u_char * ) ext + item_len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|%s]" , NPSTR ( ISAKMP_NPTYPE_N ) ) ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 