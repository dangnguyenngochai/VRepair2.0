static const u_char * //<S2SV> ikev2_t_print ( netdissect_options * ndo , int tcount , //<S2SV> const struct isakmp_gen * ext , u_int item_len , //<S2SV> const u_char * ep ) //<S2SV> { //<S2SV> const struct ikev2_t * p ; //<S2SV> struct ikev2_t t ; //<S2SV> uint16_t t_id ; //<S2SV> const u_char * cp ; //<S2SV> const char * idstr ; //<S2SV> const struct attrmap * map ; //<S2SV> size_t nmap ; //<S2SV> const u_char * ep2 ; //<S2SV> p = ( const struct ikev2_t * ) ext ; //<S2SV> ND_TCHECK ( * p ) ; //<S2SV> UNALIGNED_MEMCPY ( & t , ext , sizeof ( t ) ) ; //<S2SV> ikev2_pay_print ( ndo , NPSTR ( ISAKMP_NPTYPE_T ) , t . h . critical ) ; //<S2SV> t_id = ntohs ( t . t_id ) ; //<S2SV> map = NULL ; //<S2SV> nmap = 0 ; //<S2SV> switch ( t . t_type ) { //<S2SV> case IV2_T_ENCR : //<S2SV> idstr = STR_OR_ID ( t_id , esp_p_map ) ; //<S2SV> map = encr_t_map ; //<S2SV> nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map [ 0 ] ) ; //<S2SV> break ; //<S2SV> case IV2_T_PRF : //<S2SV> idstr = STR_OR_ID ( t_id , prf_p_map ) ; //<S2SV> break ; //<S2SV> case IV2_T_INTEG : //<S2SV> idstr = STR_OR_ID ( t_id , integ_p_map ) ; //<S2SV> break ; //<S2SV> case IV2_T_DH : //<S2SV> idstr = STR_OR_ID ( t_id , dh_p_map ) ; //<S2SV> break ; //<S2SV> case IV2_T_ESN : //<S2SV> idstr = STR_OR_ID ( t_id , esn_p_map ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> idstr = NULL ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( idstr ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>#%u<S2SV_blank>type=%s<S2SV_blank>id=%s<S2SV_blank>" , tcount , //<S2SV> STR_OR_ID ( t . t_type , ikev2_t_type_map ) , //<S2SV> idstr ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>#%u<S2SV_blank>type=%s<S2SV_blank>id=%u<S2SV_blank>" , tcount , //<S2SV> STR_OR_ID ( t . t_type , ikev2_t_type_map ) , //<S2SV> t . t_id ) ) ; //<S2SV> cp = ( const u_char * ) ( p + 1 ) ; //<S2SV> ep2 = ( const u_char * ) p + item_len ; //<S2SV> while ( cp < ep && cp < ep2 ) { //<S2SV> if ( map && nmap ) { //<S2SV> cp = ikev1_attrmap_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 , //<S2SV> map , nmap ) ; //<S2SV> } else //<S2SV> cp = ikev1_attr_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 ) ; //<S2SV> } //<S2SV> if ( ep < ep2 ) //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> return cp ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|%s]" , NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 