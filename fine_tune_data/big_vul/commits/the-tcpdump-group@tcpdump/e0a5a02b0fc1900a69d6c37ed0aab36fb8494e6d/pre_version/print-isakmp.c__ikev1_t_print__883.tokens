static const u_char * //<S2SV> ikev1_t_print ( netdissect_options * ndo , u_char tpay _U_ , //<S2SV> const struct isakmp_gen * ext , u_int item_len , //<S2SV> const u_char * ep , uint32_t phase _U_ , uint32_t doi _U_ , //<S2SV> uint32_t proto , int depth _U_ ) //<S2SV> { //<S2SV> const struct ikev1_pl_t * p ; //<S2SV> struct ikev1_pl_t t ; //<S2SV> const u_char * cp ; //<S2SV> const char * idstr ; //<S2SV> const struct attrmap * map ; //<S2SV> size_t nmap ; //<S2SV> const u_char * ep2 ; //<S2SV> ND_PRINT ( ( ndo , "%s:" , NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; //<S2SV> p = ( const struct ikev1_pl_t * ) ext ; //<S2SV> ND_TCHECK ( * p ) ; //<S2SV> UNALIGNED_MEMCPY ( & t , ext , sizeof ( t ) ) ; //<S2SV> switch ( proto ) { //<S2SV> case 1 : //<S2SV> idstr = STR_OR_ID ( t . t_id , ikev1_p_map ) ; //<S2SV> map = oakley_t_map ; //<S2SV> nmap = sizeof ( oakley_t_map ) / sizeof ( oakley_t_map [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> idstr = STR_OR_ID ( t . t_id , ah_p_map ) ; //<S2SV> map = ipsec_t_map ; //<S2SV> nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> idstr = STR_OR_ID ( t . t_id , esp_p_map ) ; //<S2SV> map = ipsec_t_map ; //<S2SV> nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> idstr = STR_OR_ID ( t . t_id , ipcomp_p_map ) ; //<S2SV> map = ipsec_t_map ; //<S2SV> nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> idstr = NULL ; //<S2SV> map = NULL ; //<S2SV> nmap = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( idstr ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>#%d<S2SV_blank>id=%s<S2SV_blank>" , t . t_no , idstr ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>#%d<S2SV_blank>id=%d<S2SV_blank>" , t . t_no , t . t_id ) ) ; //<S2SV> cp = ( const u_char * ) ( p + 1 ) ; //<S2SV> ep2 = ( const u_char * ) p + item_len ; //<S2SV> while ( cp < ep && cp < ep2 ) { //<S2SV> if ( map && nmap ) { //<S2SV> cp = ikev1_attrmap_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 , //<S2SV> map , nmap ) ; //<S2SV> } else //<S2SV> cp = ikev1_attr_print ( ndo , cp , ( ep < ep2 ) ? ep : ep2 ) ; //<S2SV> } //<S2SV> if ( ep < ep2 ) //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> return cp ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|%s]" , NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 