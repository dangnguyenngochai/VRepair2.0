static void //<S2SV> nfs_printfh ( netdissect_options * ndo , //<S2SV> register const uint32_t * dp , const u_int len ) //<S2SV> { //<S2SV> my_fsid fsid ; //<S2SV> uint32_t ino ; //<S2SV> const char * sfsname = NULL ; //<S2SV> char * spacep ; //<S2SV> if ( ndo -> ndo_uflag ) { //<S2SV> u_int i ; //<S2SV> char const * sep = "" ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>fh[" ) ) ; //<S2SV> for ( i = 0 ; i < len ; i ++ ) { //<S2SV> ND_PRINT ( ( ndo , "%s%x" , sep , dp [ i ] ) ) ; //<S2SV> sep = ":" ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "]" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> Parse_fh ( ( const u_char * ) dp , len , & fsid , & ino , NULL , & sfsname , 0 ) ; //<S2SV> if ( sfsname ) { //<S2SV> static char temp [ NFSX_V3FHMAX + 1 ] ; //<S2SV> strncpy ( temp , sfsname , NFSX_V3FHMAX ) ; //<S2SV> temp [ sizeof ( temp ) - 1 ] = '\\0' ; //<S2SV> spacep = strchr ( temp , '<S2SV_blank>' ) ; //<S2SV> if ( spacep ) //<S2SV> * spacep = '\\0' ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>fh<S2SV_blank>%s/" , temp ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>fh<S2SV_blank>%d,%d/" , //<S2SV> fsid . Fsid_dev . Major , fsid . Fsid_dev . Minor ) ) ; //<S2SV> } //<S2SV> if ( fsid . Fsid_dev . Minor == 257 ) //<S2SV> ND_PRINT ( ( ndo , "%s" , fsid . Opaque_Handle ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "%ld" , ( long ) ino ) ) ; //<S2SV> } //<S2SV> 