static u_int //<S2SV> rpki_rtr_pdu_print ( netdissect_options * ndo , const u_char * tptr , const u_int len , //<S2SV> const u_char recurse , const u_int indent ) //<S2SV> { //<S2SV> const rpki_rtr_pdu * pdu_header ; //<S2SV> u_int pdu_type , pdu_len , hexdump ; //<S2SV> const u_char * msg ; //<S2SV> ND_TCHECK_8BITS ( tptr ) ; //<S2SV> if ( * tptr != 0 ) { //<S2SV> ND_PRINT ( ( ndo , "%sRPKI-RTRv%u<S2SV_blank>(unknown)" , indent_string ( 8 ) , * tptr ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> if ( len < sizeof ( rpki_rtr_pdu ) ) { //<S2SV> ND_PRINT ( ( ndo , "(%u<S2SV_blank>bytes<S2SV_blank>is<S2SV_blank>too<S2SV_blank>few<S2SV_blank>to<S2SV_blank>decode)" , len ) ) ; //<S2SV> goto invalid ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( rpki_rtr_pdu ) ) ; //<S2SV> pdu_header = ( const rpki_rtr_pdu * ) tptr ; //<S2SV> pdu_type = pdu_header -> pdu_type ; //<S2SV> pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; //<S2SV> hexdump = FALSE ; //<S2SV> ND_PRINT ( ( ndo , "%sRPKI-RTRv%u,<S2SV_blank>%s<S2SV_blank>PDU<S2SV_blank>(%u),<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> indent_string ( 8 ) , //<S2SV> pdu_header -> version , //<S2SV> tok2str ( rpki_rtr_pdu_values , "Unknown" , pdu_type ) , //<S2SV> pdu_type , pdu_len ) ) ; //<S2SV> if ( pdu_len < sizeof ( rpki_rtr_pdu ) || pdu_len > len ) //<S2SV> goto invalid ; //<S2SV> switch ( pdu_type ) { //<S2SV> case RPKI_RTR_SERIAL_NOTIFY_PDU : //<S2SV> case RPKI_RTR_SERIAL_QUERY_PDU : //<S2SV> case RPKI_RTR_END_OF_DATA_PDU : //<S2SV> if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 4 ) //<S2SV> goto invalid ; //<S2SV> ND_TCHECK2 ( * tptr , pdu_len ) ; //<S2SV> msg = ( const u_char * ) ( pdu_header + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "%sSession<S2SV_blank>ID:<S2SV_blank>0x%04x,<S2SV_blank>Serial:<S2SV_blank>%u" , //<S2SV> indent_string ( indent + 2 ) , //<S2SV> EXTRACT_16BITS ( pdu_header -> u . session_id ) , //<S2SV> EXTRACT_32BITS ( msg ) ) ) ; //<S2SV> break ; //<S2SV> case RPKI_RTR_RESET_QUERY_PDU : //<S2SV> case RPKI_RTR_CACHE_RESET_PDU : //<S2SV> if ( pdu_len != sizeof ( rpki_rtr_pdu ) ) //<S2SV> goto invalid ; //<S2SV> break ; //<S2SV> case RPKI_RTR_CACHE_RESPONSE_PDU : //<S2SV> if ( pdu_len != sizeof ( rpki_rtr_pdu ) ) //<S2SV> goto invalid ; //<S2SV> ND_PRINT ( ( ndo , "%sSession<S2SV_blank>ID:<S2SV_blank>0x%04x" , //<S2SV> indent_string ( indent + 2 ) , //<S2SV> EXTRACT_16BITS ( pdu_header -> u . session_id ) ) ) ; //<S2SV> break ; //<S2SV> case RPKI_RTR_IPV4_PREFIX_PDU : //<S2SV> { //<S2SV> const rpki_rtr_pdu_ipv4_prefix * pdu ; //<S2SV> if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 12 ) //<S2SV> goto invalid ; //<S2SV> ND_TCHECK2 ( * tptr , pdu_len ) ; //<S2SV> pdu = ( const rpki_rtr_pdu_ipv4_prefix * ) tptr ; //<S2SV> ND_PRINT ( ( ndo , "%sIPv4<S2SV_blank>Prefix<S2SV_blank>%s/%u-%u,<S2SV_blank>origin-as<S2SV_blank>%u,<S2SV_blank>flags<S2SV_blank>0x%02x" , //<S2SV> indent_string ( indent + 2 ) , //<S2SV> ipaddr_string ( ndo , pdu -> prefix ) , //<S2SV> pdu -> prefix_length , pdu -> max_length , //<S2SV> EXTRACT_32BITS ( pdu -> as ) , pdu -> flags ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case RPKI_RTR_IPV6_PREFIX_PDU : //<S2SV> { //<S2SV> const rpki_rtr_pdu_ipv6_prefix * pdu ; //<S2SV> if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 24 ) //<S2SV> goto invalid ; //<S2SV> ND_TCHECK2 ( * tptr , pdu_len ) ; //<S2SV> pdu = ( const rpki_rtr_pdu_ipv6_prefix * ) tptr ; //<S2SV> ND_PRINT ( ( ndo , "%sIPv6<S2SV_blank>Prefix<S2SV_blank>%s/%u-%u,<S2SV_blank>origin-as<S2SV_blank>%u,<S2SV_blank>flags<S2SV_blank>0x%02x" , //<S2SV> indent_string ( indent + 2 ) , //<S2SV> ip6addr_string ( ndo , pdu -> prefix ) , //<S2SV> pdu -> prefix_length , pdu -> max_length , //<S2SV> EXTRACT_32BITS ( pdu -> as ) , pdu -> flags ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case RPKI_RTR_ERROR_REPORT_PDU : //<S2SV> { //<S2SV> const rpki_rtr_pdu_error_report * pdu ; //<S2SV> u_int encapsulated_pdu_length , text_length , tlen , error_code ; //<S2SV> tlen = sizeof ( rpki_rtr_pdu ) ; //<S2SV> if ( pdu_len < tlen + 4 ) //<S2SV> goto invalid ; //<S2SV> ND_TCHECK2 ( * tptr , tlen + 4 ) ; //<S2SV> pdu = ( const rpki_rtr_pdu_error_report * ) tptr ; //<S2SV> encapsulated_pdu_length = EXTRACT_32BITS ( pdu -> encapsulated_pdu_length ) ; //<S2SV> tlen += 4 ; //<S2SV> error_code = EXTRACT_16BITS ( pdu -> pdu_header . u . error_code ) ; //<S2SV> ND_PRINT ( ( ndo , "%sError<S2SV_blank>code:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>Encapsulated<S2SV_blank>PDU<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> indent_string ( indent + 2 ) , //<S2SV> tok2str ( rpki_rtr_error_codes , "Unknown" , error_code ) , //<S2SV> error_code , encapsulated_pdu_length ) ) ; //<S2SV> if ( encapsulated_pdu_length ) { //<S2SV> if ( pdu_len < tlen + encapsulated_pdu_length ) //<S2SV> goto invalid ; //<S2SV> if ( ! recurse ) { //<S2SV> ND_TCHECK2 ( * tptr , tlen + encapsulated_pdu_length ) ; //<S2SV> } //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "%s-----encapsulated<S2SV_blank>PDU-----" , indent_string ( indent + 4 ) ) ) ; //<S2SV> rpki_rtr_pdu_print ( ndo , tptr + tlen , //<S2SV> encapsulated_pdu_length , 0 , indent + 2 ) ; //<S2SV> } //<S2SV> tlen += encapsulated_pdu_length ; //<S2SV> } //<S2SV> if ( pdu_len < tlen + 4 ) //<S2SV> goto invalid ; //<S2SV> ND_TCHECK2 ( * tptr , tlen + 4 ) ; //<S2SV> text_length = EXTRACT_32BITS ( tptr + tlen ) ; //<S2SV> tlen += 4 ; //<S2SV> if ( text_length ) { //<S2SV> if ( pdu_len < tlen + text_length ) //<S2SV> goto invalid ; //<S2SV> ND_PRINT ( ( ndo , "%sError<S2SV_blank>text:<S2SV_blank>" , indent_string ( indent + 2 ) ) ) ; //<S2SV> if ( fn_printn ( ndo , tptr + tlen , text_length , ndo -> ndo_snapend ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> ND_TCHECK2 ( * tptr , pdu_len ) ; //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 || ( ndo -> ndo_vflag && hexdump ) ) { //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank>" , pdu_len ) ; //<S2SV> } //<S2SV> return pdu_len ; //<S2SV> invalid : //<S2SV> ND_PRINT ( ( ndo , "%s" , istr ) ) ; //<S2SV> ND_TCHECK2 ( * tptr , len ) ; //<S2SV> return len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t%s" , tstr ) ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> 