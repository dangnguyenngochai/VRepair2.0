static int //<S2SV> mp_join_print ( netdissect_options * ndo , //<S2SV> const u_char * opt , u_int opt_len , u_char flags ) //<S2SV> { //<S2SV> const struct mp_join * mpj = ( const struct mp_join * ) opt ; //<S2SV> if ( ! ( opt_len == 12 && ( flags & TH_SYN ) ) && //<S2SV> ! ( opt_len == 16 && ( flags & ( TH_SYN | TH_ACK ) ) == ( TH_SYN | TH_ACK ) ) && //<S2SV> ! ( opt_len == 24 && ( flags & TH_ACK ) ) ) //<S2SV> return 0 ; //<S2SV> if ( opt_len != 24 ) { //<S2SV> if ( mpj -> sub_b & MP_JOIN_B ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>backup" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>id<S2SV_blank>%u" , mpj -> addr_id ) ) ; //<S2SV> } //<S2SV> switch ( opt_len ) { //<S2SV> case 12 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>token<S2SV_blank>0x%x" "<S2SV_blank>nonce<S2SV_blank>0x%x" , //<S2SV> EXTRACT_32BITS ( mpj -> u . syn . token ) , //<S2SV> EXTRACT_32BITS ( mpj -> u . syn . nonce ) ) ) ; //<S2SV> break ; //<S2SV> case 16 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hmac<S2SV_blank>0x%" PRIx64 "<S2SV_blank>nonce<S2SV_blank>0x%x" , //<S2SV> EXTRACT_64BITS ( mpj -> u . synack . mac ) , //<S2SV> EXTRACT_32BITS ( mpj -> u . synack . nonce ) ) ) ; //<S2SV> break ; //<S2SV> case 24 : { //<S2SV> size_t i ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hmac<S2SV_blank>0x" ) ) ; //<S2SV> for ( i = 0 ; i < sizeof ( mpj -> u . ack . mac ) ; ++ i ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , mpj -> u . ack . mac [ i ] ) ) ; //<S2SV> } //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 