static void //<S2SV> ubik_print ( netdissect_options * ndo , //<S2SV> register const u_char * bp ) //<S2SV> { //<S2SV> int ubik_op ; //<S2SV> int32_t temp ; //<S2SV> ubik_op = EXTRACT_32BITS ( bp + sizeof ( struct rx_header ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ubik<S2SV_blank>call<S2SV_blank>%s" , tok2str ( ubik_req , "op#%d" , ubik_op ) ) ) ; //<S2SV> bp += sizeof ( struct rx_header ) + 4 ; //<S2SV> switch ( ubik_op ) { //<S2SV> case 10000 : //<S2SV> ND_TCHECK2 ( bp [ 0 ] , 4 ) ; //<S2SV> temp = EXTRACT_32BITS ( bp ) ; //<S2SV> bp += sizeof ( int32_t ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>syncsite<S2SV_blank>%s" , temp ? "yes" : "no" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>votestart" ) ) ; //<S2SV> DATEOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>dbversion" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tid" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> break ; //<S2SV> case 10003 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>site" ) ) ; //<S2SV> UINTOUT ( ) ; //<S2SV> break ; //<S2SV> case 20000 : //<S2SV> case 20001 : //<S2SV> case 20007 : //<S2SV> case 20008 : //<S2SV> case 20010 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tid" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> break ; //<S2SV> case 20002 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tid" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>file" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>pos" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>length" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> ND_TCHECK_32BITS ( bp ) ; //<S2SV> temp = EXTRACT_32BITS ( bp ) ; //<S2SV> bp += sizeof ( int32_t ) ; //<S2SV> tok2str ( ubik_lock_types , "type<S2SV_blank>%d" , temp ) ; //<S2SV> break ; //<S2SV> case 20003 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tid" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>file" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>pos" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> break ; //<S2SV> case 20005 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>file" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> break ; //<S2SV> case 20006 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>file" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>length" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>dbversion" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> break ; //<S2SV> case 20009 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tid" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>file" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>length" ) ) ; //<S2SV> INTOUT ( ) ; //<S2SV> break ; //<S2SV> case 20012 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tid" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>oldversion" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>newversion" ) ) ; //<S2SV> UBIK_VERSIONOUT ( ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|ubik]" ) ) ; //<S2SV> } //<S2SV> 