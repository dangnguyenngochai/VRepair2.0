static void //<S2SV> bgp_update_print ( netdissect_options * ndo , //<S2SV> const u_char * dat , int length ) //<S2SV> { //<S2SV> struct bgp bgp ; //<S2SV> const u_char * p ; //<S2SV> int withdrawn_routes_len ; //<S2SV> int len ; //<S2SV> int i ; //<S2SV> ND_TCHECK2 ( dat [ 0 ] , BGP_SIZE ) ; //<S2SV> if ( length < BGP_SIZE ) //<S2SV> goto trunc ; //<S2SV> memcpy ( & bgp , dat , BGP_SIZE ) ; //<S2SV> p = dat + BGP_SIZE ; //<S2SV> length -= BGP_SIZE ; //<S2SV> ND_TCHECK2 ( p [ 0 ] , 2 ) ; //<S2SV> if ( length < 2 ) //<S2SV> goto trunc ; //<S2SV> withdrawn_routes_len = EXTRACT_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( withdrawn_routes_len ) { //<S2SV> ND_TCHECK2 ( p [ 0 ] , withdrawn_routes_len ) ; //<S2SV> if ( length < withdrawn_routes_len ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Withdrawn<S2SV_blank>routes:<S2SV_blank>%d<S2SV_blank>bytes" , withdrawn_routes_len ) ) ; //<S2SV> p += withdrawn_routes_len ; //<S2SV> length -= withdrawn_routes_len ; //<S2SV> } //<S2SV> ND_TCHECK2 ( p [ 0 ] , 2 ) ; //<S2SV> if ( length < 2 ) //<S2SV> goto trunc ; //<S2SV> len = EXTRACT_16BITS ( p ) ; //<S2SV> p += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( withdrawn_routes_len == 0 && len == 0 && length == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>End-of-Rib<S2SV_blank>Marker<S2SV_blank>(empty<S2SV_blank>NLRI)" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( len ) { //<S2SV> while ( len ) { //<S2SV> int aflags , atype , alenlen , alen ; //<S2SV> ND_TCHECK2 ( p [ 0 ] , 2 ) ; //<S2SV> if ( len < 2 ) //<S2SV> goto trunc ; //<S2SV> if ( length < 2 ) //<S2SV> goto trunc ; //<S2SV> aflags = * p ; //<S2SV> atype = * ( p + 1 ) ; //<S2SV> p += 2 ; //<S2SV> len -= 2 ; //<S2SV> length -= 2 ; //<S2SV> alenlen = bgp_attr_lenlen ( aflags , p ) ; //<S2SV> ND_TCHECK2 ( p [ 0 ] , alenlen ) ; //<S2SV> if ( len < alenlen ) //<S2SV> goto trunc ; //<S2SV> if ( length < alenlen ) //<S2SV> goto trunc ; //<S2SV> alen = bgp_attr_len ( aflags , p ) ; //<S2SV> p += alenlen ; //<S2SV> len -= alenlen ; //<S2SV> length -= alenlen ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( bgp_attr_values , "Unknown<S2SV_blank>Attribute" , //<S2SV> atype ) , //<S2SV> atype , //<S2SV> alen ) ) ; //<S2SV> if ( aflags ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[%s%s%s%s" , //<S2SV> aflags & 0x80 ? "O" : "" , //<S2SV> aflags & 0x40 ? "T" : "" , //<S2SV> aflags & 0x20 ? "P" : "" , //<S2SV> aflags & 0x10 ? "E" : "" ) ) ; //<S2SV> if ( aflags & 0xf ) //<S2SV> ND_PRINT ( ( ndo , "+%x" , aflags & 0xf ) ) ; //<S2SV> ND_PRINT ( ( ndo , "]:<S2SV_blank>" ) ) ; //<S2SV> } //<S2SV> if ( len < alen ) //<S2SV> goto trunc ; //<S2SV> if ( length < alen ) //<S2SV> goto trunc ; //<S2SV> if ( ! bgp_attr_print ( ndo , atype , p , alen ) ) //<S2SV> goto trunc ; //<S2SV> p += alen ; //<S2SV> len -= alen ; //<S2SV> length -= alen ; //<S2SV> } //<S2SV> } //<S2SV> if ( length ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Updated<S2SV_blank>routes:" ) ) ; //<S2SV> while ( length ) { //<S2SV> char buf [ MAXHOSTNAMELEN + 100 ] ; //<S2SV> i = decode_prefix4 ( ndo , p , length , buf , sizeof ( buf ) ) ; //<S2SV> if ( i == - 1 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> break ; //<S2SV> } else if ( i == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( i == - 3 ) //<S2SV> goto trunc ; //<S2SV> else { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> p += i ; //<S2SV> length -= i ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> } //<S2SV> 