static int //<S2SV> parse_elements ( netdissect_options * ndo , //<S2SV> struct mgmt_body_t * pbody , const u_char * p , int offset , //<S2SV> u_int length ) //<S2SV> { //<S2SV> u_int elementlen ; //<S2SV> struct ssid_t ssid ; //<S2SV> struct challenge_t challenge ; //<S2SV> struct rates_t rates ; //<S2SV> struct ds_t ds ; //<S2SV> struct cf_t cf ; //<S2SV> struct tim_t tim ; //<S2SV> pbody -> challenge_present = 0 ; //<S2SV> pbody -> ssid_present = 0 ; //<S2SV> pbody -> rates_present = 0 ; //<S2SV> pbody -> ds_present = 0 ; //<S2SV> pbody -> cf_present = 0 ; //<S2SV> pbody -> tim_present = 0 ; //<S2SV> while ( length != 0 ) { //<S2SV> if ( ! ND_TTEST2 ( * ( p + offset ) , 2 ) ) //<S2SV> return 0 ; //<S2SV> if ( length < 2 ) //<S2SV> return 0 ; //<S2SV> elementlen = * ( p + offset + 1 ) ; //<S2SV> if ( ! ND_TTEST2 ( * ( p + offset + 2 ) , elementlen ) ) //<S2SV> return 0 ; //<S2SV> if ( length < elementlen + 2 ) //<S2SV> return 0 ; //<S2SV> switch ( * ( p + offset ) ) { //<S2SV> case E_SSID : //<S2SV> memcpy ( & ssid , p + offset , 2 ) ; //<S2SV> offset += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( ssid . length != 0 ) { //<S2SV> if ( ssid . length > sizeof ( ssid . ssid ) - 1 ) //<S2SV> return 0 ; //<S2SV> memcpy ( & ssid . ssid , p + offset , ssid . length ) ; //<S2SV> offset += ssid . length ; //<S2SV> length -= ssid . length ; //<S2SV> } //<S2SV> ssid . ssid [ ssid . length ] = '\\0' ; //<S2SV> if ( ! pbody -> ssid_present ) { //<S2SV> pbody -> ssid = ssid ; //<S2SV> pbody -> ssid_present = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case E_CHALLENGE : //<S2SV> memcpy ( & challenge , p + offset , 2 ) ; //<S2SV> offset += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( challenge . length != 0 ) { //<S2SV> if ( challenge . length > //<S2SV> sizeof ( challenge . text ) - 1 ) //<S2SV> return 0 ; //<S2SV> memcpy ( & challenge . text , p + offset , //<S2SV> challenge . length ) ; //<S2SV> offset += challenge . length ; //<S2SV> length -= challenge . length ; //<S2SV> } //<S2SV> challenge . text [ challenge . length ] = '\\0' ; //<S2SV> if ( ! pbody -> challenge_present ) { //<S2SV> pbody -> challenge = challenge ; //<S2SV> pbody -> challenge_present = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case E_RATES : //<S2SV> memcpy ( & rates , p + offset , 2 ) ; //<S2SV> offset += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( rates . length != 0 ) { //<S2SV> if ( rates . length > sizeof rates . rate ) //<S2SV> return 0 ; //<S2SV> memcpy ( & rates . rate , p + offset , rates . length ) ; //<S2SV> offset += rates . length ; //<S2SV> length -= rates . length ; //<S2SV> } //<S2SV> if ( ! pbody -> rates_present && rates . length != 0 ) { //<S2SV> pbody -> rates = rates ; //<S2SV> pbody -> rates_present = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case E_DS : //<S2SV> memcpy ( & ds , p + offset , 2 ) ; //<S2SV> offset += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( ds . length != 1 ) { //<S2SV> offset += ds . length ; //<S2SV> length -= ds . length ; //<S2SV> break ; //<S2SV> } //<S2SV> ds . channel = * ( p + offset ) ; //<S2SV> offset += 1 ; //<S2SV> length -= 1 ; //<S2SV> if ( ! pbody -> ds_present ) { //<S2SV> pbody -> ds = ds ; //<S2SV> pbody -> ds_present = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case E_CF : //<S2SV> memcpy ( & cf , p + offset , 2 ) ; //<S2SV> offset += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( cf . length != 6 ) { //<S2SV> offset += cf . length ; //<S2SV> length -= cf . length ; //<S2SV> break ; //<S2SV> } //<S2SV> memcpy ( & cf . count , p + offset , 6 ) ; //<S2SV> offset += 6 ; //<S2SV> length -= 6 ; //<S2SV> if ( ! pbody -> cf_present ) { //<S2SV> pbody -> cf = cf ; //<S2SV> pbody -> cf_present = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case E_TIM : //<S2SV> memcpy ( & tim , p + offset , 2 ) ; //<S2SV> offset += 2 ; //<S2SV> length -= 2 ; //<S2SV> if ( tim . length <= 3 ) { //<S2SV> offset += tim . length ; //<S2SV> length -= tim . length ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( tim . length - 3 > ( int ) sizeof tim . bitmap ) //<S2SV> return 0 ; //<S2SV> memcpy ( & tim . count , p + offset , 3 ) ; //<S2SV> offset += 3 ; //<S2SV> length -= 3 ; //<S2SV> memcpy ( tim . bitmap , p + offset , tim . length - 3 ) ; //<S2SV> offset += tim . length - 3 ; //<S2SV> length -= tim . length - 3 ; //<S2SV> if ( ! pbody -> tim_present ) { //<S2SV> pbody -> tim = tim ; //<S2SV> pbody -> tim_present = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> # if 0 //<S2SV> ND_PRINT ( ( ndo , "(1)<S2SV_blank>unhandled<S2SV_blank>element_id<S2SV_blank>(%d)<S2SV_blank><S2SV_blank>" , //<S2SV> * ( p + offset ) ) ) ; //<S2SV> # endif //<S2SV> offset += 2 + elementlen ; //<S2SV> length -= 2 + elementlen ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 