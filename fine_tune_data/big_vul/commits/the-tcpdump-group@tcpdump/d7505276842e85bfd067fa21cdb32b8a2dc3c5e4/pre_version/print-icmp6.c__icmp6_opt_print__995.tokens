static void //<S2SV> icmp6_opt_print ( netdissect_options * ndo , const u_char * bp , int resid ) //<S2SV> { //<S2SV> const struct nd_opt_hdr * op ; //<S2SV> const struct nd_opt_prefix_info * opp ; //<S2SV> const struct nd_opt_mtu * opm ; //<S2SV> const struct nd_opt_rdnss * oprd ; //<S2SV> const struct nd_opt_dnssl * opds ; //<S2SV> const struct nd_opt_advinterval * opa ; //<S2SV> const struct nd_opt_homeagent_info * oph ; //<S2SV> const struct nd_opt_route_info * opri ; //<S2SV> const u_char * cp , * ep , * domp ; //<S2SV> struct in6_addr in6 ; //<S2SV> const struct in6_addr * in6p ; //<S2SV> size_t l ; //<S2SV> u_int i ; //<S2SV> # define ECHECK ( var ) if ( ( const u_char * ) & ( var ) > ep - sizeof ( var ) ) return //<S2SV> cp = bp ; //<S2SV> ep = ndo -> ndo_snapend ; //<S2SV> while ( cp < ep ) { //<S2SV> op = ( const struct nd_opt_hdr * ) cp ; //<S2SV> ECHECK ( op -> nd_opt_len ) ; //<S2SV> if ( resid <= 0 ) //<S2SV> return ; //<S2SV> if ( op -> nd_opt_len == 0 ) //<S2SV> goto trunc ; //<S2SV> if ( cp + ( op -> nd_opt_len << 3 ) > ep ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>option<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>(%u):<S2SV_blank>" , //<S2SV> tok2str ( icmp6_opt_values , "unknown" , op -> nd_opt_type ) , //<S2SV> op -> nd_opt_type , //<S2SV> op -> nd_opt_len << 3 , //<S2SV> op -> nd_opt_len ) ) ; //<S2SV> switch ( op -> nd_opt_type ) { //<S2SV> case ND_OPT_SOURCE_LINKADDR : //<S2SV> l = ( op -> nd_opt_len << 3 ) - 2 ; //<S2SV> print_lladdr ( ndo , cp + 2 , l ) ; //<S2SV> break ; //<S2SV> case ND_OPT_TARGET_LINKADDR : //<S2SV> l = ( op -> nd_opt_len << 3 ) - 2 ; //<S2SV> print_lladdr ( ndo , cp + 2 , l ) ; //<S2SV> break ; //<S2SV> case ND_OPT_PREFIX_INFORMATION : //<S2SV> opp = ( const struct nd_opt_prefix_info * ) op ; //<S2SV> ND_TCHECK ( opp -> nd_opt_pi_prefix ) ; //<S2SV> ND_PRINT ( ( ndo , "%s/%u%s,<S2SV_blank>Flags<S2SV_blank>[%s],<S2SV_blank>valid<S2SV_blank>time<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & opp -> nd_opt_pi_prefix ) , //<S2SV> opp -> nd_opt_pi_prefix_len , //<S2SV> ( op -> nd_opt_len != 4 ) ? "badlen" : "" , //<S2SV> bittok2str ( icmp6_opt_pi_flag_values , "none" , opp -> nd_opt_pi_flags_reserved ) , //<S2SV> get_lifetime ( EXTRACT_32BITS ( & opp -> nd_opt_pi_valid_time ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>pref.<S2SV_blank>time<S2SV_blank>%s" , get_lifetime ( EXTRACT_32BITS ( & opp -> nd_opt_pi_preferred_time ) ) ) ) ; //<S2SV> break ; //<S2SV> case ND_OPT_REDIRECTED_HEADER : //<S2SV> print_unknown_data ( ndo , bp , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , op -> nd_opt_len << 3 ) ; //<S2SV> break ; //<S2SV> case ND_OPT_MTU : //<S2SV> opm = ( const struct nd_opt_mtu * ) op ; //<S2SV> ND_TCHECK ( opm -> nd_opt_mtu_mtu ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u%s" , //<S2SV> EXTRACT_32BITS ( & opm -> nd_opt_mtu_mtu ) , //<S2SV> ( op -> nd_opt_len != 1 ) ? "bad<S2SV_blank>option<S2SV_blank>length" : "" ) ) ; //<S2SV> break ; //<S2SV> case ND_OPT_RDNSS : //<S2SV> oprd = ( const struct nd_opt_rdnss * ) op ; //<S2SV> l = ( op -> nd_opt_len - 1 ) / 2 ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>lifetime<S2SV_blank>%us," , //<S2SV> EXTRACT_32BITS ( & oprd -> nd_opt_rdnss_lifetime ) ) ) ; //<S2SV> for ( i = 0 ; i < l ; i ++ ) { //<S2SV> ND_TCHECK ( oprd -> nd_opt_rdnss_addr [ i ] ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>addr:<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & oprd -> nd_opt_rdnss_addr [ i ] ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ND_OPT_DNSSL : //<S2SV> opds = ( const struct nd_opt_dnssl * ) op ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>lifetime<S2SV_blank>%us,<S2SV_blank>domain(s):" , //<S2SV> EXTRACT_32BITS ( & opds -> nd_opt_dnssl_lifetime ) ) ) ; //<S2SV> domp = cp + 8 ; //<S2SV> while ( domp < cp + ( op -> nd_opt_len << 3 ) && * domp != '\\0' ) //<S2SV> { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> if ( ( domp = ns_nprint ( ndo , domp , bp ) ) == NULL ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> break ; //<S2SV> case ND_OPT_ADVINTERVAL : //<S2SV> opa = ( const struct nd_opt_advinterval * ) op ; //<S2SV> ND_TCHECK ( opa -> nd_opt_adv_interval ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%ums" , EXTRACT_32BITS ( & opa -> nd_opt_adv_interval ) ) ) ; //<S2SV> break ; //<S2SV> case ND_OPT_HOMEAGENT_INFO : //<S2SV> oph = ( const struct nd_opt_homeagent_info * ) op ; //<S2SV> ND_TCHECK ( oph -> nd_opt_hai_lifetime ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>preference<S2SV_blank>%u,<S2SV_blank>lifetime<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( & oph -> nd_opt_hai_preference ) , //<S2SV> EXTRACT_16BITS ( & oph -> nd_opt_hai_lifetime ) ) ) ; //<S2SV> break ; //<S2SV> case ND_OPT_ROUTE_INFO : //<S2SV> opri = ( const struct nd_opt_route_info * ) op ; //<S2SV> ND_TCHECK ( opri -> nd_opt_rti_lifetime ) ; //<S2SV> memset ( & in6 , 0 , sizeof ( in6 ) ) ; //<S2SV> in6p = ( const struct in6_addr * ) ( opri + 1 ) ; //<S2SV> switch ( op -> nd_opt_len ) { //<S2SV> case 1 : //<S2SV> break ; //<S2SV> case 2 : //<S2SV> ND_TCHECK2 ( * in6p , 8 ) ; //<S2SV> memcpy ( & in6 , opri + 1 , 8 ) ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> ND_TCHECK ( * in6p ) ; //<S2SV> memcpy ( & in6 , opri + 1 , sizeof ( in6 ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> goto trunc ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s/%u" , ip6addr_string ( ndo , & in6 ) , //<S2SV> opri -> nd_opt_rti_prefixlen ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>pref=%s" , get_rtpref ( opri -> nd_opt_rti_flags ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>lifetime=%s" , //<S2SV> get_lifetime ( EXTRACT_32BITS ( & opri -> nd_opt_rti_lifetime ) ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) { //<S2SV> print_unknown_data ( ndo , cp + 2 , "\\n\\t<S2SV_blank><S2SV_blank>" , ( op -> nd_opt_len << 3 ) - 2 ) ; //<S2SV> return ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , cp + 2 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , ( op -> nd_opt_len << 3 ) - 2 ) ; //<S2SV> cp += op -> nd_opt_len << 3 ; //<S2SV> resid -= op -> nd_opt_len << 3 ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[ndp<S2SV_blank>opt]" ) ) ; //<S2SV> return ; //<S2SV> # undef ECHECK //<S2SV> } //<S2SV> 