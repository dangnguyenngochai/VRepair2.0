static void //<S2SV> rpl_dio_printopt ( netdissect_options * ndo , //<S2SV> const struct rpl_dio_genoption * opt , //<S2SV> u_int length ) //<S2SV> { //<S2SV> if ( length < RPL_DIO_GENOPTION_LEN ) return ; //<S2SV> length -= RPL_DIO_GENOPTION_LEN ; //<S2SV> ND_TCHECK ( opt -> rpl_dio_len ) ; //<S2SV> while ( ( opt -> rpl_dio_type == RPL_OPT_PAD0 && //<S2SV> ( const u_char * ) opt < ndo -> ndo_snapend ) || //<S2SV> ND_TTEST2 ( * opt , ( opt -> rpl_dio_len + 2 ) ) ) { //<S2SV> unsigned int optlen = opt -> rpl_dio_len + 2 ; //<S2SV> if ( opt -> rpl_dio_type == RPL_OPT_PAD0 ) { //<S2SV> optlen = 1 ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>opt:pad0" ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>opt:%s<S2SV_blank>len:%u<S2SV_blank>" , //<S2SV> tok2str ( rpl_subopt_values , "subopt:%u" , opt -> rpl_dio_type ) , //<S2SV> optlen ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 2 ) { //<S2SV> unsigned int paylen = opt -> rpl_dio_len ; //<S2SV> if ( paylen > length ) paylen = length ; //<S2SV> hex_print ( ndo , //<S2SV> "<S2SV_blank>" , //<S2SV> ( ( const uint8_t * ) opt ) + RPL_DIO_GENOPTION_LEN , //<S2SV> paylen ) ; //<S2SV> } //<S2SV> } //<S2SV> opt = ( const struct rpl_dio_genoption * ) ( ( ( const char * ) opt ) + optlen ) ; //<S2SV> length -= optlen ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|truncated]" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 