static void //<S2SV> mldv2_query_print ( netdissect_options * ndo , const u_char * bp , u_int len ) //<S2SV> { //<S2SV> const struct icmp6_hdr * icp = ( const struct icmp6_hdr * ) bp ; //<S2SV> u_int mrc ; //<S2SV> int mrt , qqi ; //<S2SV> u_int nsrcs ; //<S2SV> register u_int i ; //<S2SV> if ( len < 28 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[invalid<S2SV_blank>len<S2SV_blank>%d]" , len ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_TCHECK ( icp -> icmp6_data16 [ 0 ] ) ; //<S2SV> mrc = EXTRACT_16BITS ( & icp -> icmp6_data16 [ 0 ] ) ; //<S2SV> if ( mrc < 32768 ) { //<S2SV> mrt = mrc ; //<S2SV> } else { //<S2SV> mrt = ( ( mrc & 0x0fff ) | 0x1000 ) << ( ( ( mrc & 0x7000 ) >> 12 ) + 3 ) ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[max<S2SV_blank>resp<S2SV_blank>delay=%d]" , mrt ) ) ; //<S2SV> } //<S2SV> ND_TCHECK2 ( bp [ 8 ] , sizeof ( struct in6_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[gaddr<S2SV_blank>%s" , ip6addr_string ( ndo , & bp [ 8 ] ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_TCHECK ( bp [ 25 ] ) ; //<S2SV> if ( bp [ 24 ] & 0x08 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>sflag" ) ) ; //<S2SV> } //<S2SV> if ( bp [ 24 ] & 0x07 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>robustness=%d" , bp [ 24 ] & 0x07 ) ) ; //<S2SV> } //<S2SV> if ( bp [ 25 ] < 128 ) { //<S2SV> qqi = bp [ 25 ] ; //<S2SV> } else { //<S2SV> qqi = ( ( bp [ 25 ] & 0x0f ) | 0x10 ) << ( ( ( bp [ 25 ] & 0x70 ) >> 4 ) + 3 ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>qqi=%d" , qqi ) ) ; //<S2SV> } //<S2SV> ND_TCHECK2 ( bp [ 26 ] , 2 ) ; //<S2SV> nsrcs = EXTRACT_16BITS ( & bp [ 26 ] ) ; //<S2SV> if ( nsrcs > 0 ) { //<S2SV> if ( len < 28 + nsrcs * sizeof ( struct in6_addr ) ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>sources]" ) ) ; //<S2SV> else if ( ndo -> ndo_vflag > 1 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>{" ) ) ; //<S2SV> for ( i = 0 ; i < nsrcs ; i ++ ) { //<S2SV> ND_TCHECK2 ( bp [ 28 + i * sizeof ( struct in6_addr ) ] , //<S2SV> sizeof ( struct in6_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , & bp [ 28 + i * sizeof ( struct in6_addr ) ] ) ) ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>}" ) ) ; //<S2SV> } else //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%d<S2SV_blank>source(s)" , nsrcs ) ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "]" ) ) ; //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|icmp6]" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 