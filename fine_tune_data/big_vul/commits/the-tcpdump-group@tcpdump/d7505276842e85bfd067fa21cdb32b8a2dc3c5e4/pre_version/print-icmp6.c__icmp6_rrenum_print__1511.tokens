static void //<S2SV> icmp6_rrenum_print ( netdissect_options * ndo , const u_char * bp , const u_char * ep ) //<S2SV> { //<S2SV> const struct icmp6_router_renum * rr6 ; //<S2SV> const char * cp ; //<S2SV> const struct rr_pco_match * match ; //<S2SV> const struct rr_pco_use * use ; //<S2SV> char hbuf [ NI_MAXHOST ] ; //<S2SV> int n ; //<S2SV> if ( ep < bp ) //<S2SV> return ; //<S2SV> rr6 = ( const struct icmp6_router_renum * ) bp ; //<S2SV> cp = ( const char * ) ( rr6 + 1 ) ; //<S2SV> ND_TCHECK ( rr6 -> rr_reserved ) ; //<S2SV> switch ( rr6 -> rr_code ) { //<S2SV> case ICMP6_ROUTER_RENUMBERING_COMMAND : //<S2SV> ND_PRINT ( ( ndo , "router<S2SV_blank>renum:<S2SV_blank>command" ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_ROUTER_RENUMBERING_RESULT : //<S2SV> ND_PRINT ( ( ndo , "router<S2SV_blank>renum:<S2SV_blank>result" ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET : //<S2SV> ND_PRINT ( ( ndo , "router<S2SV_blank>renum:<S2SV_blank>sequence<S2SV_blank>number<S2SV_blank>reset" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "router<S2SV_blank>renum:<S2SV_blank>code-#%d" , rr6 -> rr_code ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>seq=%u" , EXTRACT_32BITS ( & rr6 -> rr_seqnum ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> # define F ( x , y ) ( ( rr6 -> rr_flags ) & ( x ) ? ( y ) : "" ) //<S2SV> ND_PRINT ( ( ndo , "[" ) ) ; //<S2SV> if ( rr6 -> rr_flags ) { //<S2SV> ND_PRINT ( ( ndo , "%s%s%s%s%s," , F ( ICMP6_RR_FLAGS_TEST , "T" ) , //<S2SV> F ( ICMP6_RR_FLAGS_REQRESULT , "R" ) , //<S2SV> F ( ICMP6_RR_FLAGS_FORCEAPPLY , "A" ) , //<S2SV> F ( ICMP6_RR_FLAGS_SPECSITE , "S" ) , //<S2SV> F ( ICMP6_RR_FLAGS_PREVDONE , "P" ) ) ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "seg=%u," , rr6 -> rr_segnum ) ) ; //<S2SV> ND_PRINT ( ( ndo , "maxdelay=%u" , EXTRACT_16BITS ( & rr6 -> rr_maxdelay ) ) ) ; //<S2SV> if ( rr6 -> rr_reserved ) //<S2SV> ND_PRINT ( ( ndo , "rsvd=0x%x" , EXTRACT_32BITS ( & rr6 -> rr_reserved ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "]" ) ) ; //<S2SV> # undef F //<S2SV> } //<S2SV> if ( rr6 -> rr_code == ICMP6_ROUTER_RENUMBERING_COMMAND ) { //<S2SV> match = ( const struct rr_pco_match * ) cp ; //<S2SV> cp = ( const char * ) ( match + 1 ) ; //<S2SV> ND_TCHECK ( match -> rpm_prefix ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "match(" ) ) ; //<S2SV> switch ( match -> rpm_code ) { //<S2SV> case RPM_PCO_ADD : ND_PRINT ( ( ndo , "add" ) ) ; break ; //<S2SV> case RPM_PCO_CHANGE : ND_PRINT ( ( ndo , "change" ) ) ; break ; //<S2SV> case RPM_PCO_SETGLOBAL : ND_PRINT ( ( ndo , "setglobal" ) ) ; break ; //<S2SV> default : ND_PRINT ( ( ndo , "#%u" , match -> rpm_code ) ) ; break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , ",ord=%u" , match -> rpm_ordinal ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",min=%u" , match -> rpm_minlen ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",max=%u" , match -> rpm_maxlen ) ) ; //<S2SV> } //<S2SV> if ( addrtostr6 ( & match -> rpm_prefix , hbuf , sizeof ( hbuf ) ) ) //<S2SV> ND_PRINT ( ( ndo , ",%s/%u" , hbuf , match -> rpm_matchlen ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , ",?/%u" , match -> rpm_matchlen ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> n = match -> rpm_len - 3 ; //<S2SV> if ( n % 4 ) //<S2SV> goto trunc ; //<S2SV> n /= 4 ; //<S2SV> while ( n -- > 0 ) { //<S2SV> use = ( const struct rr_pco_use * ) cp ; //<S2SV> cp = ( const char * ) ( use + 1 ) ; //<S2SV> ND_TCHECK ( use -> rpu_prefix ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "use(" ) ) ; //<S2SV> if ( use -> rpu_flags ) { //<S2SV> # define F ( x , y ) ( ( use -> rpu_flags ) & ( x ) ? ( y ) : "" ) //<S2SV> ND_PRINT ( ( ndo , "%s%s," , //<S2SV> F ( ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME , "V" ) , //<S2SV> F ( ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME , "P" ) ) ) ; //<S2SV> # undef F //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , "mask=0x%x," , use -> rpu_ramask ) ) ; //<S2SV> ND_PRINT ( ( ndo , "raflags=0x%x," , use -> rpu_raflags ) ) ; //<S2SV> if ( ~ use -> rpu_vltime == 0 ) //<S2SV> ND_PRINT ( ( ndo , "vltime=infty," ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "vltime=%u," , //<S2SV> EXTRACT_32BITS ( & use -> rpu_vltime ) ) ) ; //<S2SV> if ( ~ use -> rpu_pltime == 0 ) //<S2SV> ND_PRINT ( ( ndo , "pltime=infty," ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "pltime=%u," , //<S2SV> EXTRACT_32BITS ( & use -> rpu_pltime ) ) ) ; //<S2SV> } //<S2SV> if ( addrtostr6 ( & use -> rpu_prefix , hbuf , sizeof ( hbuf ) ) ) //<S2SV> ND_PRINT ( ( ndo , "%s/%u/%u" , hbuf , use -> rpu_uselen , //<S2SV> use -> rpu_keeplen ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "?/%u/%u" , use -> rpu_uselen , //<S2SV> use -> rpu_keeplen ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> } //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|icmp6]" ) ) ; //<S2SV> } //<S2SV> 