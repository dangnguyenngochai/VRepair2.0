static void //<S2SV> icmp6_nodeinfo_print ( netdissect_options * ndo , u_int icmp6len , const u_char * bp , const u_char * ep ) //<S2SV> { //<S2SV> const struct icmp6_nodeinfo * ni6 ; //<S2SV> const struct icmp6_hdr * dp ; //<S2SV> const u_char * cp ; //<S2SV> size_t siz , i ; //<S2SV> int needcomma ; //<S2SV> if ( ep < bp ) //<S2SV> return ; //<S2SV> dp = ( const struct icmp6_hdr * ) bp ; //<S2SV> ni6 = ( const struct icmp6_nodeinfo * ) bp ; //<S2SV> siz = ep - bp ; //<S2SV> switch ( ni6 -> ni_type ) { //<S2SV> case ICMP6_NI_QUERY : //<S2SV> if ( siz == sizeof ( * dp ) + 4 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>who-are-you<S2SV_blank>request" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>node<S2SV_blank>information<S2SV_blank>query" ) ) ; //<S2SV> ND_TCHECK2 ( * dp , sizeof ( * ni6 ) ) ; //<S2SV> ni6 = ( const struct icmp6_nodeinfo * ) dp ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(" ) ) ; //<S2SV> switch ( EXTRACT_16BITS ( & ni6 -> ni_qtype ) ) { //<S2SV> case NI_QTYPE_NOOP : //<S2SV> ND_PRINT ( ( ndo , "noop" ) ) ; //<S2SV> break ; //<S2SV> case NI_QTYPE_SUPTYPES : //<S2SV> ND_PRINT ( ( ndo , "supported<S2SV_blank>qtypes" ) ) ; //<S2SV> i = EXTRACT_16BITS ( & ni6 -> ni_flags ) ; //<S2SV> if ( i ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[%s]" , ( i & 0x01 ) ? "C" : "" ) ) ; //<S2SV> break ; //<S2SV> case NI_QTYPE_FQDN : //<S2SV> ND_PRINT ( ( ndo , "DNS<S2SV_blank>name" ) ) ; //<S2SV> break ; //<S2SV> case NI_QTYPE_NODEADDR : //<S2SV> ND_PRINT ( ( ndo , "node<S2SV_blank>addresses" ) ) ; //<S2SV> i = ni6 -> ni_flags ; //<S2SV> if ( ! i ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[%s%s%s%s%s%s]" , //<S2SV> ( i & NI_NODEADDR_FLAG_ANYCAST ) ? "a" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_GLOBAL ) ? "G" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_SITELOCAL ) ? "S" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_LINKLOCAL ) ? "L" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_COMPAT ) ? "C" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_ALL ) ? "A" : "" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "unknown" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ni6 -> ni_qtype == NI_QTYPE_NOOP || //<S2SV> ni6 -> ni_qtype == NI_QTYPE_SUPTYPES ) { //<S2SV> if ( siz != sizeof ( * ni6 ) ) //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>invalid<S2SV_blank>len" ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( siz == sizeof ( * ni6 ) ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>03<S2SV_blank>draft" ) ) ; //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( ni6 -> ni_code ) { //<S2SV> case ICMP6_NI_SUBJ_IPV6 : //<S2SV> if ( ! ND_TTEST2 ( * dp , //<S2SV> sizeof ( * ni6 ) + sizeof ( struct in6_addr ) ) ) //<S2SV> break ; //<S2SV> if ( siz != sizeof ( * ni6 ) + sizeof ( struct in6_addr ) ) { //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>invalid<S2SV_blank>subject<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>subject=%s" , //<S2SV> ip6addr_string ( ndo , ni6 + 1 ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_NI_SUBJ_FQDN : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>subject=DNS<S2SV_blank>name" ) ) ; //<S2SV> cp = ( const u_char * ) ( ni6 + 1 ) ; //<S2SV> if ( cp [ 0 ] == ep - cp - 1 ) { //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>03<S2SV_blank>draft" ) ) ; //<S2SV> cp ++ ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>\\"" ) ) ; //<S2SV> while ( cp < ep ) { //<S2SV> safeputchar ( ndo , * cp ) ; //<S2SV> cp ++ ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> } else //<S2SV> dnsname_print ( ndo , cp , ep ) ; //<S2SV> break ; //<S2SV> case ICMP6_NI_SUBJ_IPV4 : //<S2SV> if ( ! ND_TTEST2 ( * dp , sizeof ( * ni6 ) + sizeof ( struct in_addr ) ) ) //<S2SV> break ; //<S2SV> if ( siz != sizeof ( * ni6 ) + sizeof ( struct in_addr ) ) { //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>invalid<S2SV_blank>subject<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>subject=%s" , //<S2SV> ipaddr_string ( ndo , ni6 + 1 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>unknown<S2SV_blank>subject" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_NI_REPLY : //<S2SV> if ( icmp6len > siz ) { //<S2SV> ND_PRINT ( ( ndo , "[|icmp6:<S2SV_blank>node<S2SV_blank>information<S2SV_blank>reply]" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> needcomma = 0 ; //<S2SV> ND_TCHECK2 ( * dp , sizeof ( * ni6 ) ) ; //<S2SV> ni6 = ( const struct icmp6_nodeinfo * ) dp ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>node<S2SV_blank>information<S2SV_blank>reply" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(" ) ) ; //<S2SV> switch ( ni6 -> ni_code ) { //<S2SV> case ICMP6_NI_SUCCESS : //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , "success" ) ) ; //<S2SV> needcomma ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case ICMP6_NI_REFUSED : //<S2SV> ND_PRINT ( ( ndo , "refused" ) ) ; //<S2SV> needcomma ++ ; //<S2SV> if ( siz != sizeof ( * ni6 ) ) //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>invalid<S2SV_blank>length" ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_NI_UNKNOWN : //<S2SV> ND_PRINT ( ( ndo , "unknown" ) ) ; //<S2SV> needcomma ++ ; //<S2SV> if ( siz != sizeof ( * ni6 ) ) //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>invalid<S2SV_blank>length" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ni6 -> ni_code != ICMP6_NI_SUCCESS ) { //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( EXTRACT_16BITS ( & ni6 -> ni_qtype ) ) { //<S2SV> case NI_QTYPE_NOOP : //<S2SV> if ( needcomma ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "noop" ) ) ; //<S2SV> if ( siz != sizeof ( * ni6 ) ) //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>invalid<S2SV_blank>length" ) ) ; //<S2SV> break ; //<S2SV> case NI_QTYPE_SUPTYPES : //<S2SV> if ( needcomma ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "supported<S2SV_blank>qtypes" ) ) ; //<S2SV> i = EXTRACT_16BITS ( & ni6 -> ni_flags ) ; //<S2SV> if ( i ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[%s]" , ( i & 0x01 ) ? "C" : "" ) ) ; //<S2SV> break ; //<S2SV> case NI_QTYPE_FQDN : //<S2SV> if ( needcomma ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "DNS<S2SV_blank>name" ) ) ; //<S2SV> cp = ( const u_char * ) ( ni6 + 1 ) + 4 ; //<S2SV> ND_TCHECK ( cp [ 0 ] ) ; //<S2SV> if ( cp [ 0 ] == ep - cp - 1 ) { //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>03<S2SV_blank>draft" ) ) ; //<S2SV> cp ++ ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>\\"" ) ) ; //<S2SV> while ( cp < ep ) { //<S2SV> safeputchar ( ndo , * cp ) ; //<S2SV> cp ++ ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> } else //<S2SV> dnsname_print ( ndo , cp , ep ) ; //<S2SV> if ( ( EXTRACT_16BITS ( & ni6 -> ni_flags ) & 0x01 ) != 0 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[TTL=%u]" , EXTRACT_32BITS ( ni6 + 1 ) ) ) ; //<S2SV> break ; //<S2SV> case NI_QTYPE_NODEADDR : //<S2SV> if ( needcomma ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "node<S2SV_blank>addresses" ) ) ; //<S2SV> i = sizeof ( * ni6 ) ; //<S2SV> while ( i < siz ) { //<S2SV> if ( i + sizeof ( struct in6_addr ) + sizeof ( int32_t ) > siz ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , bp + i ) ) ) ; //<S2SV> i += sizeof ( struct in6_addr ) ; //<S2SV> ND_PRINT ( ( ndo , "(%d)" , ( int32_t ) EXTRACT_32BITS ( bp + i ) ) ) ; //<S2SV> i += sizeof ( int32_t ) ; //<S2SV> } //<S2SV> i = ni6 -> ni_flags ; //<S2SV> if ( ! i ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[%s%s%s%s%s%s%s]" , //<S2SV> ( i & NI_NODEADDR_FLAG_ANYCAST ) ? "a" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_GLOBAL ) ? "G" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_SITELOCAL ) ? "S" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_LINKLOCAL ) ? "L" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_COMPAT ) ? "C" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_ALL ) ? "A" : "" , //<S2SV> ( i & NI_NODEADDR_FLAG_TRUNCATE ) ? "T" : "" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( needcomma ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "unknown" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|icmp6]" ) ) ; //<S2SV> } //<S2SV> 