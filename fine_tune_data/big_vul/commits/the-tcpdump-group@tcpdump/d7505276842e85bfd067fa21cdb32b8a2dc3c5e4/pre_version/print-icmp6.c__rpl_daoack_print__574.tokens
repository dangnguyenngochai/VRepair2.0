static void //<S2SV> rpl_daoack_print ( netdissect_options * ndo , //<S2SV> const u_char * bp , u_int length ) //<S2SV> { //<S2SV> const struct nd_rpl_daoack * daoack = ( const struct nd_rpl_daoack * ) bp ; //<S2SV> const char * dagid_str = "<elided>" ; //<S2SV> ND_TCHECK2 ( * daoack , ND_RPL_DAOACK_MIN_LEN ) ; //<S2SV> if ( length < ND_RPL_DAOACK_MIN_LEN ) //<S2SV> goto tooshort ; //<S2SV> bp += ND_RPL_DAOACK_MIN_LEN ; //<S2SV> length -= ND_RPL_DAOACK_MIN_LEN ; //<S2SV> if ( RPL_DAOACK_D ( daoack -> rpl_flags ) ) { //<S2SV> ND_TCHECK2 ( daoack -> rpl_dagid , DAGID_LEN ) ; //<S2SV> if ( length < DAGID_LEN ) //<S2SV> goto tooshort ; //<S2SV> dagid_str = ip6addr_string ( ndo , daoack -> rpl_dagid ) ; //<S2SV> bp += DAGID_LEN ; //<S2SV> length -= DAGID_LEN ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[dagid:%s,seq:%u,instance:%u,status:%u]" , //<S2SV> dagid_str , //<S2SV> daoack -> rpl_daoseq , //<S2SV> daoack -> rpl_instanceid , //<S2SV> daoack -> rpl_status ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> const struct rpl_dio_genoption * opt = ( const struct rpl_dio_genoption * ) bp ; //<S2SV> rpl_dio_printopt ( ndo , opt , length ) ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|dao-truncated]" ) ) ; //<S2SV> return ; //<S2SV> tooshort : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|dao-length<S2SV_blank>too<S2SV_blank>short]" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 