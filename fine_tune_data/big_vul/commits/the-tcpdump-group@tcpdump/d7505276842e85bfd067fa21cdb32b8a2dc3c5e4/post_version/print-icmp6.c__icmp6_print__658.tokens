void //<S2SV> icmp6_print ( netdissect_options * ndo , //<S2SV> const u_char * bp , u_int length , const u_char * bp2 , int fragmented ) //<S2SV> { //<S2SV> const struct icmp6_hdr * dp ; //<S2SV> const struct ip6_hdr * ip ; //<S2SV> const struct ip6_hdr * oip ; //<S2SV> const struct udphdr * ouh ; //<S2SV> int dport ; //<S2SV> const u_char * ep ; //<S2SV> u_int prot ; //<S2SV> dp = ( const struct icmp6_hdr * ) bp ; //<S2SV> ip = ( const struct ip6_hdr * ) bp2 ; //<S2SV> oip = ( const struct ip6_hdr * ) ( dp + 1 ) ; //<S2SV> ep = ndo -> ndo_snapend ; //<S2SV> ND_TCHECK ( dp -> icmp6_cksum ) ; //<S2SV> if ( ndo -> ndo_vflag && ! fragmented ) { //<S2SV> uint16_t sum , udp_sum ; //<S2SV> if ( ND_TTEST2 ( bp [ 0 ] , length ) ) { //<S2SV> udp_sum = EXTRACT_16BITS ( & dp -> icmp6_cksum ) ; //<S2SV> sum = icmp6_cksum ( ndo , ip , dp , length ) ; //<S2SV> if ( sum != 0 ) //<S2SV> ND_PRINT ( ( ndo , "[bad<S2SV_blank>icmp6<S2SV_blank>cksum<S2SV_blank>0x%04x<S2SV_blank>-><S2SV_blank>0x%04x!]<S2SV_blank>" , //<S2SV> udp_sum , //<S2SV> in_cksum_shouldbe ( udp_sum , sum ) ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "[icmp6<S2SV_blank>sum<S2SV_blank>ok]<S2SV_blank>" ) ) ; //<S2SV> } //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "ICMP6,<S2SV_blank>%s" , tok2str ( icmp6_type_values , "unknown<S2SV_blank>icmp6<S2SV_blank>type<S2SV_blank>(%u)" , dp -> icmp6_type ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag && ( dp -> icmp6_type == ND_ROUTER_SOLICIT || //<S2SV> dp -> icmp6_type == ND_ROUTER_ADVERT || //<S2SV> dp -> icmp6_type == ND_NEIGHBOR_ADVERT || //<S2SV> dp -> icmp6_type == ND_NEIGHBOR_SOLICIT || //<S2SV> dp -> icmp6_type == ND_REDIRECT || //<S2SV> dp -> icmp6_type == ICMP6_HADISCOV_REPLY || //<S2SV> dp -> icmp6_type == ICMP6_MOBILEPREFIX_ADVERT ) ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> switch ( dp -> icmp6_type ) { //<S2SV> case ICMP6_DST_UNREACH : //<S2SV> ND_TCHECK ( oip -> ip6_dst ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , tok2str ( icmp6_dst_unreach_code_values , "unknown<S2SV_blank>unreach<S2SV_blank>code<S2SV_blank>(%u)" , dp -> icmp6_code ) ) ) ; //<S2SV> switch ( dp -> icmp6_code ) { //<S2SV> case ICMP6_DST_UNREACH_NOROUTE : //<S2SV> case ICMP6_DST_UNREACH_ADMIN : //<S2SV> case ICMP6_DST_UNREACH_ADDR : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , ip6addr_string ( ndo , & oip -> ip6_dst ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_DST_UNREACH_BEYONDSCOPE : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s,<S2SV_blank>source<S2SV_blank>address<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & oip -> ip6_dst ) , //<S2SV> ip6addr_string ( ndo , & oip -> ip6_src ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_DST_UNREACH_NOPORT : //<S2SV> if ( ( ouh = get_upperlayer ( ndo , ( const u_char * ) oip , & prot ) ) //<S2SV> == NULL ) //<S2SV> goto trunc ; //<S2SV> dport = EXTRACT_16BITS ( & ouh -> uh_dport ) ; //<S2SV> switch ( prot ) { //<S2SV> case IPPROTO_TCP : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s<S2SV_blank>tcp<S2SV_blank>port<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & oip -> ip6_dst ) , //<S2SV> tcpport_string ( ndo , dport ) ) ) ; //<S2SV> break ; //<S2SV> case IPPROTO_UDP : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s<S2SV_blank>udp<S2SV_blank>port<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & oip -> ip6_dst ) , //<S2SV> udpport_string ( ndo , dport ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s<S2SV_blank>protocol<S2SV_blank>%d<S2SV_blank>port<S2SV_blank>%d<S2SV_blank>unreachable" , //<S2SV> ip6addr_string ( ndo , & oip -> ip6_dst ) , //<S2SV> oip -> ip6_nxt , dport ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) { //<S2SV> print_unknown_data ( ndo , bp , "\\n\\t" , length ) ; //<S2SV> return ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case ICMP6_PACKET_TOO_BIG : //<S2SV> ND_TCHECK ( dp -> icmp6_mtu ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>mtu<S2SV_blank>%u" , EXTRACT_32BITS ( & dp -> icmp6_mtu ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_TIME_EXCEEDED : //<S2SV> ND_TCHECK ( oip -> ip6_dst ) ; //<S2SV> switch ( dp -> icmp6_code ) { //<S2SV> case ICMP6_TIME_EXCEED_TRANSIT : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>for<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & oip -> ip6_dst ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_TIME_EXCEED_REASSEMBLY : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(reassembly)" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>unknown<S2SV_blank>code<S2SV_blank>(%u)" , dp -> icmp6_code ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case ICMP6_PARAM_PROB : //<S2SV> ND_TCHECK ( oip -> ip6_dst ) ; //<S2SV> switch ( dp -> icmp6_code ) { //<S2SV> case ICMP6_PARAMPROB_HEADER : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>erroneous<S2SV_blank>-<S2SV_blank>octet<S2SV_blank>%u" , EXTRACT_32BITS ( & dp -> icmp6_pptr ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_PARAMPROB_NEXTHEADER : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>next<S2SV_blank>header<S2SV_blank>-<S2SV_blank>octet<S2SV_blank>%u" , EXTRACT_32BITS ( & dp -> icmp6_pptr ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_PARAMPROB_OPTION : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>option<S2SV_blank>-<S2SV_blank>octet<S2SV_blank>%u" , EXTRACT_32BITS ( & dp -> icmp6_pptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>code-#%d" , //<S2SV> dp -> icmp6_code ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case ICMP6_ECHO_REQUEST : //<S2SV> case ICMP6_ECHO_REPLY : //<S2SV> ND_TCHECK ( dp -> icmp6_seq ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>seq<S2SV_blank>%u" , EXTRACT_16BITS ( & dp -> icmp6_seq ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_MEMBERSHIP_QUERY : //<S2SV> if ( length == MLD_MINLEN ) { //<S2SV> mld6_print ( ndo , ( const u_char * ) dp ) ; //<S2SV> } else if ( length >= MLDV2_MINLEN ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>v2" ) ) ; //<S2SV> mldv2_query_print ( ndo , ( const u_char * ) dp , length ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>unknown-version<S2SV_blank>(len<S2SV_blank>%u)<S2SV_blank>" , length ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ICMP6_MEMBERSHIP_REPORT : //<S2SV> mld6_print ( ndo , ( const u_char * ) dp ) ; //<S2SV> break ; //<S2SV> case ICMP6_MEMBERSHIP_REDUCTION : //<S2SV> mld6_print ( ndo , ( const u_char * ) dp ) ; //<S2SV> break ; //<S2SV> case ND_ROUTER_SOLICIT : //<S2SV> # define RTSOLLEN 8 //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> icmp6_opt_print ( ndo , ( const u_char * ) dp + RTSOLLEN , //<S2SV> length - RTSOLLEN ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ND_ROUTER_ADVERT : //<S2SV> # define RTADVLEN 16 //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> const struct nd_router_advert * p ; //<S2SV> p = ( const struct nd_router_advert * ) dp ; //<S2SV> ND_TCHECK ( p -> nd_ra_retransmit ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\thop<S2SV_blank>limit<S2SV_blank>%u,<S2SV_blank>Flags<S2SV_blank>[%s]" ",<S2SV_blank>pref<S2SV_blank>%s,<S2SV_blank>router<S2SV_blank>lifetime<S2SV_blank>%us,<S2SV_blank>reachable<S2SV_blank>time<S2SV_blank>%ums,<S2SV_blank>retrans<S2SV_blank>timer<S2SV_blank>%ums" , //<S2SV> ( u_int ) p -> nd_ra_curhoplimit , //<S2SV> bittok2str ( icmp6_opt_ra_flag_values , "none" , ( p -> nd_ra_flags_reserved ) ) , //<S2SV> get_rtpref ( p -> nd_ra_flags_reserved ) , //<S2SV> EXTRACT_16BITS ( & p -> nd_ra_router_lifetime ) , //<S2SV> EXTRACT_32BITS ( & p -> nd_ra_reachable ) , //<S2SV> EXTRACT_32BITS ( & p -> nd_ra_retransmit ) ) ) ; //<S2SV> icmp6_opt_print ( ndo , ( const u_char * ) dp + RTADVLEN , //<S2SV> length - RTADVLEN ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ND_NEIGHBOR_SOLICIT : //<S2SV> { //<S2SV> const struct nd_neighbor_solicit * p ; //<S2SV> p = ( const struct nd_neighbor_solicit * ) dp ; //<S2SV> ND_TCHECK ( p -> nd_ns_target ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>who<S2SV_blank>has<S2SV_blank>%s" , ip6addr_string ( ndo , & p -> nd_ns_target ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> # define NDSOLLEN 24 //<S2SV> icmp6_opt_print ( ndo , ( const u_char * ) dp + NDSOLLEN , //<S2SV> length - NDSOLLEN ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case ND_NEIGHBOR_ADVERT : //<S2SV> { //<S2SV> const struct nd_neighbor_advert * p ; //<S2SV> p = ( const struct nd_neighbor_advert * ) dp ; //<S2SV> ND_TCHECK ( p -> nd_na_target ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>tgt<S2SV_blank>is<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & p -> nd_na_target ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> bittok2str ( icmp6_nd_na_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_32BITS ( & p -> nd_na_flags_reserved ) ) ) ) ; //<S2SV> # define NDADVLEN 24 //<S2SV> icmp6_opt_print ( ndo , ( const u_char * ) dp + NDADVLEN , //<S2SV> length - NDADVLEN ) ; //<S2SV> # undef NDADVLEN //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case ND_REDIRECT : //<S2SV> # define RDR ( i ) ( ( const struct nd_redirect * ) ( i ) ) //<S2SV> ND_TCHECK ( RDR ( dp ) -> nd_rd_dst ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , ip6addr_string ( ndo , & RDR ( dp ) -> nd_rd_dst ) ) ) ; //<S2SV> ND_TCHECK ( RDR ( dp ) -> nd_rd_target ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>to<S2SV_blank>%s" , //<S2SV> ip6addr_string ( ndo , & RDR ( dp ) -> nd_rd_target ) ) ) ; //<S2SV> # define REDIRECTLEN 40 //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> icmp6_opt_print ( ndo , ( const u_char * ) dp + REDIRECTLEN , //<S2SV> length - REDIRECTLEN ) ; //<S2SV> } //<S2SV> break ; //<S2SV> # undef REDIRECTLEN //<S2SV> # undef RDR //<S2SV> case ICMP6_ROUTER_RENUMBERING : //<S2SV> icmp6_rrenum_print ( ndo , bp , ep ) ; //<S2SV> break ; //<S2SV> case ICMP6_NI_QUERY : //<S2SV> case ICMP6_NI_REPLY : //<S2SV> icmp6_nodeinfo_print ( ndo , length , bp , ep ) ; //<S2SV> break ; //<S2SV> case IND_SOLICIT : //<S2SV> case IND_ADVERT : //<S2SV> break ; //<S2SV> case ICMP6_V2_MEMBERSHIP_REPORT : //<S2SV> mldv2_report_print ( ndo , ( const u_char * ) dp , length ) ; //<S2SV> break ; //<S2SV> case ICMP6_MOBILEPREFIX_SOLICIT : //<S2SV> case ICMP6_HADISCOV_REQUEST : //<S2SV> ND_TCHECK ( dp -> icmp6_data16 [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>id<S2SV_blank>0x%04x" , EXTRACT_16BITS ( & dp -> icmp6_data16 [ 0 ] ) ) ) ; //<S2SV> break ; //<S2SV> case ICMP6_HADISCOV_REPLY : //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> const struct in6_addr * in6 ; //<S2SV> const u_char * cp ; //<S2SV> ND_TCHECK ( dp -> icmp6_data16 [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>id<S2SV_blank>0x%04x" , EXTRACT_16BITS ( & dp -> icmp6_data16 [ 0 ] ) ) ) ; //<S2SV> cp = ( const u_char * ) dp + length ; //<S2SV> in6 = ( const struct in6_addr * ) ( dp + 1 ) ; //<S2SV> for ( ; ( const u_char * ) in6 < cp ; in6 ++ ) { //<S2SV> ND_TCHECK ( * in6 ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s" , ip6addr_string ( ndo , in6 ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case ICMP6_MOBILEPREFIX_ADVERT : //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> ND_TCHECK ( dp -> icmp6_data16 [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>id<S2SV_blank>0x%04x" , EXTRACT_16BITS ( & dp -> icmp6_data16 [ 0 ] ) ) ) ; //<S2SV> ND_TCHECK ( dp -> icmp6_data16 [ 1 ] ) ; //<S2SV> if ( dp -> icmp6_data16 [ 1 ] & 0xc0 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> if ( dp -> icmp6_data16 [ 1 ] & 0x80 ) //<S2SV> ND_PRINT ( ( ndo , "M" ) ) ; //<S2SV> if ( dp -> icmp6_data16 [ 1 ] & 0x40 ) //<S2SV> ND_PRINT ( ( ndo , "O" ) ) ; //<S2SV> # define MPADVLEN 8 //<S2SV> icmp6_opt_print ( ndo , ( const u_char * ) dp + MPADVLEN , //<S2SV> length - MPADVLEN ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ND_RPL_MESSAGE : //<S2SV> rpl_print ( ndo , dp , & dp -> icmp6_data8 [ 0 ] , length - sizeof ( struct icmp6_hdr ) + 4 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , bp , "\\n\\t" , length ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , icmp6_tstr ) ) ; //<S2SV> } //<S2SV> 