static int //<S2SV> rsvp_obj_print ( netdissect_options * ndo , //<S2SV> const u_char * pptr , u_int plen , const u_char * tptr , //<S2SV> const char * ident , u_int tlen , //<S2SV> const struct rsvp_common_header * rsvp_com_header ) //<S2SV> { //<S2SV> const struct rsvp_object_header * rsvp_obj_header ; //<S2SV> const u_char * obj_tptr ; //<S2SV> union { //<S2SV> const struct rsvp_obj_integrity_t * rsvp_obj_integrity ; //<S2SV> const struct rsvp_obj_frr_t * rsvp_obj_frr ; //<S2SV> } obj_ptr ; //<S2SV> u_short rsvp_obj_len , rsvp_obj_ctype , obj_tlen , intserv_serv_tlen ; //<S2SV> int hexdump , processed , padbytes , error_code , error_value , i , sigcheck ; //<S2SV> union { //<S2SV> float f ; //<S2SV> uint32_t i ; //<S2SV> } bw ; //<S2SV> uint8_t namelen ; //<S2SV> u_int action , subchannel ; //<S2SV> while ( tlen >= sizeof ( struct rsvp_object_header ) ) { //<S2SV> ND_TCHECK2 ( * tptr , sizeof ( struct rsvp_object_header ) ) ; //<S2SV> rsvp_obj_header = ( const struct rsvp_object_header * ) tptr ; //<S2SV> rsvp_obj_len = EXTRACT_16BITS ( rsvp_obj_header -> length ) ; //<S2SV> rsvp_obj_ctype = rsvp_obj_header -> ctype ; //<S2SV> if ( rsvp_obj_len % 4 ) { //<S2SV> ND_PRINT ( ( ndo , "%sERROR:<S2SV_blank>object<S2SV_blank>header<S2SV_blank>size<S2SV_blank>%u<S2SV_blank>not<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>4" , ident , rsvp_obj_len ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( rsvp_obj_len < sizeof ( struct rsvp_object_header ) ) { //<S2SV> ND_PRINT ( ( ndo , "%sERROR:<S2SV_blank>object<S2SV_blank>header<S2SV_blank>too<S2SV_blank>short<S2SV_blank>%u<S2SV_blank><<S2SV_blank>%lu" , ident , rsvp_obj_len , //<S2SV> ( unsigned long ) sizeof ( const struct rsvp_object_header ) ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%s%s<S2SV_blank>Object<S2SV_blank>(%u)<S2SV_blank>Flags:<S2SV_blank>[%s" , //<S2SV> ident , //<S2SV> tok2str ( rsvp_obj_values , //<S2SV> "Unknown" , //<S2SV> rsvp_obj_header -> class_num ) , //<S2SV> rsvp_obj_header -> class_num , //<S2SV> ( ( rsvp_obj_header -> class_num ) & 0x80 ) ? "ignore" : "reject" ) ) ; //<S2SV> if ( rsvp_obj_header -> class_num > 128 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , //<S2SV> ( ( rsvp_obj_header -> class_num ) & 0x40 ) ? "and<S2SV_blank>forward" : "silently" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>if<S2SV_blank>unknown],<S2SV_blank>Class-Type:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( rsvp_ctype_values , //<S2SV> "Unknown" , //<S2SV> ( ( rsvp_obj_header -> class_num ) << 8 ) + rsvp_obj_ctype ) , //<S2SV> rsvp_obj_ctype , //<S2SV> rsvp_obj_len ) ) ; //<S2SV> if ( tlen < rsvp_obj_len ) { //<S2SV> ND_PRINT ( ( ndo , "%sERROR:<S2SV_blank>object<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>end<S2SV_blank>of<S2SV_blank>objects<S2SV_blank>TLV" , ident ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> obj_tptr = tptr + sizeof ( struct rsvp_object_header ) ; //<S2SV> obj_tlen = rsvp_obj_len - sizeof ( struct rsvp_object_header ) ; //<S2SV> if ( ! ND_TTEST2 ( * tptr , rsvp_obj_len ) ) //<S2SV> return - 1 ; //<S2SV> hexdump = FALSE ; //<S2SV> switch ( rsvp_obj_header -> class_num ) { //<S2SV> case RSVP_OBJ_SESSION : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>DestAddress:<S2SV_blank>%s,<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>0x%02x" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> * ( obj_tptr + sizeof ( struct in_addr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[0x%02x],<S2SV_blank>DestPort<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> * ( obj_tptr + 5 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < 20 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv6<S2SV_blank>DestAddress:<S2SV_blank>%s,<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>0x%02x" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> * ( obj_tptr + sizeof ( struct in6_addr ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Flags:<S2SV_blank>[0x%02x],<S2SV_blank>DestPort<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> * ( obj_tptr + sizeof ( struct in6_addr ) + 1 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + sizeof ( struct in6_addr ) + 2 ) ) ) ; //<S2SV> obj_tlen -= 20 ; //<S2SV> obj_tptr += 20 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_TUNNEL_IPV6 : //<S2SV> if ( obj_tlen < 36 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Tunnel<S2SV_blank>EndPoint:<S2SV_blank>%s,<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>0x%04x,<S2SV_blank>Extended<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 18 ) , //<S2SV> ip6addr_string ( ndo , obj_tptr + 20 ) ) ) ; //<S2SV> obj_tlen -= 36 ; //<S2SV> obj_tptr += 36 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_14 : //<S2SV> if ( obj_tlen < 26 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv6<S2SV_blank>P2MP<S2SV_blank>LSP<S2SV_blank>ID:<S2SV_blank>0x%08x,<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>0x%04x,<S2SV_blank>Extended<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) , //<S2SV> ip6addr_string ( ndo , obj_tptr + 8 ) ) ) ; //<S2SV> obj_tlen -= 26 ; //<S2SV> obj_tptr += 26 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_13 : //<S2SV> if ( obj_tlen < 12 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>P2MP<S2SV_blank>LSP<S2SV_blank>ID:<S2SV_blank>%s,<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>0x%04x,<S2SV_blank>Extended<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) , //<S2SV> ipaddr_string ( ndo , obj_tptr + 8 ) ) ) ; //<S2SV> obj_tlen -= 12 ; //<S2SV> obj_tptr += 12 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_TUNNEL_IPV4 : //<S2SV> case RSVP_CTYPE_UNI_IPV4 : //<S2SV> if ( obj_tlen < 12 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Tunnel<S2SV_blank>EndPoint:<S2SV_blank>%s,<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>0x%04x,<S2SV_blank>Extended<S2SV_blank>Tunnel<S2SV_blank>ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) , //<S2SV> ipaddr_string ( ndo , obj_tptr + 8 ) ) ) ; //<S2SV> obj_tlen -= 12 ; //<S2SV> obj_tptr += 12 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_CONFIRM : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < sizeof ( struct in_addr ) ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Receiver<S2SV_blank>Address:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) ) ) ; //<S2SV> obj_tlen -= sizeof ( struct in_addr ) ; //<S2SV> obj_tptr += sizeof ( struct in_addr ) ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < sizeof ( struct in6_addr ) ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Receiver<S2SV_blank>Address:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) ) ) ; //<S2SV> obj_tlen -= sizeof ( struct in6_addr ) ; //<S2SV> obj_tptr += sizeof ( struct in6_addr ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_NOTIFY_REQ : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < sizeof ( struct in_addr ) ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Notify<S2SV_blank>Node<S2SV_blank>Address:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) ) ) ; //<S2SV> obj_tlen -= sizeof ( struct in_addr ) ; //<S2SV> obj_tptr += sizeof ( struct in_addr ) ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < sizeof ( struct in6_addr ) ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Notify<S2SV_blank>Node<S2SV_blank>Address:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) ) ) ; //<S2SV> obj_tlen -= sizeof ( struct in6_addr ) ; //<S2SV> obj_tptr += sizeof ( struct in6_addr ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_SUGGESTED_LABEL : //<S2SV> case RSVP_OBJ_UPSTREAM_LABEL : //<S2SV> case RSVP_OBJ_RECOVERY_LABEL : //<S2SV> case RSVP_OBJ_LABEL : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> while ( obj_tlen >= 4 ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Label:<S2SV_blank>%u" , ident , EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_CTYPE_2 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Generalized<S2SV_blank>Label:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_3 : //<S2SV> if ( obj_tlen < 12 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Waveband<S2SV_blank>ID:<S2SV_blank>%u%s<S2SV_blank><S2SV_blank>Start<S2SV_blank>Label:<S2SV_blank>%u,<S2SV_blank>Stop<S2SV_blank>Label:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) ) ) ; //<S2SV> obj_tlen -= 12 ; //<S2SV> obj_tptr += 12 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_STYLE : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Reservation<S2SV_blank>Style:<S2SV_blank>%s,<S2SV_blank>Flags:<S2SV_blank>[0x%02x]" , //<S2SV> ident , //<S2SV> tok2str ( rsvp_resstyle_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_24BITS ( obj_tptr + 1 ) ) , //<S2SV> * ( obj_tptr ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_SENDER_TEMPLATE : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>Source<S2SV_blank>Port:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < 20 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>Source<S2SV_blank>Port:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 18 ) ) ) ; //<S2SV> obj_tlen -= 20 ; //<S2SV> obj_tptr += 20 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_13 : //<S2SV> if ( obj_tlen < 40 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Tunnel<S2SV_blank>Sender<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>LSP<S2SV_blank>ID:<S2SV_blank>0x%04x" //<S2SV> "%s<S2SV_blank><S2SV_blank>Sub-Group<S2SV_blank>Originator<S2SV_blank>ID:<S2SV_blank>%s,<S2SV_blank>Sub-Group<S2SV_blank>ID:<S2SV_blank>0x%04x" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 18 ) , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr + 20 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 38 ) ) ) ; //<S2SV> obj_tlen -= 40 ; //<S2SV> obj_tptr += 40 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_TUNNEL_IPV4 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Tunnel<S2SV_blank>Sender<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>LSP-ID:<S2SV_blank>0x%04x" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_12 : //<S2SV> if ( obj_tlen < 16 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Tunnel<S2SV_blank>Sender<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>LSP<S2SV_blank>ID:<S2SV_blank>0x%04x" //<S2SV> "%s<S2SV_blank><S2SV_blank>Sub-Group<S2SV_blank>Originator<S2SV_blank>ID:<S2SV_blank>%s,<S2SV_blank>Sub-Group<S2SV_blank>ID:<S2SV_blank>0x%04x" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr + 8 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 12 ) ) ) ; //<S2SV> obj_tlen -= 16 ; //<S2SV> obj_tptr += 16 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_LABEL_REQ : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> while ( obj_tlen >= 4 ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>L3<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> tok2str ( ethertype_values , //<S2SV> "Unknown<S2SV_blank>Protocol<S2SV_blank>(0x%04x)" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_CTYPE_2 : //<S2SV> if ( obj_tlen < 12 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>L3<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> tok2str ( ethertype_values , //<S2SV> "Unknown<S2SV_blank>Protocol<S2SV_blank>(0x%04x)" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",%s<S2SV_blank>merge<S2SV_blank>capability" , ( ( * ( obj_tptr + 4 ) ) & 0x80 ) ? "no" : "" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Minimum<S2SV_blank>VPI/VCI:<S2SV_blank>%u/%u" , //<S2SV> ident , //<S2SV> ( EXTRACT_16BITS ( obj_tptr + 4 ) ) & 0xfff , //<S2SV> ( EXTRACT_16BITS ( obj_tptr + 6 ) ) & 0xfff ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Maximum<S2SV_blank>VPI/VCI:<S2SV_blank>%u/%u" , //<S2SV> ident , //<S2SV> ( EXTRACT_16BITS ( obj_tptr + 8 ) ) & 0xfff , //<S2SV> ( EXTRACT_16BITS ( obj_tptr + 10 ) ) & 0xfff ) ) ; //<S2SV> obj_tlen -= 12 ; //<S2SV> obj_tptr += 12 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_3 : //<S2SV> if ( obj_tlen < 12 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>L3<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> tok2str ( ethertype_values , //<S2SV> "Unknown<S2SV_blank>Protocol<S2SV_blank>(0x%04x)" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Minimum/Maximum<S2SV_blank>DLCI:<S2SV_blank>%u/%u,<S2SV_blank>%s%s<S2SV_blank>bit<S2SV_blank>DLCI" , //<S2SV> ident , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + 4 ) ) & 0x7fffff , //<S2SV> ( EXTRACT_32BITS ( obj_tptr + 8 ) ) & 0x7fffff , //<S2SV> ( ( ( EXTRACT_16BITS ( obj_tptr + 4 ) >> 7 ) & 3 ) == 0 ) ? "10" : "" , //<S2SV> ( ( ( EXTRACT_16BITS ( obj_tptr + 4 ) >> 7 ) & 3 ) == 2 ) ? "23" : "" ) ) ; //<S2SV> obj_tlen -= 12 ; //<S2SV> obj_tptr += 12 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_4 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>LSP<S2SV_blank>Encoding<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ident , //<S2SV> tok2str ( gmpls_encoding_values , //<S2SV> "Unknown" , //<S2SV> * obj_tptr ) , //<S2SV> * obj_tptr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Switching<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>Payload<S2SV_blank>ID:<S2SV_blank>%s<S2SV_blank>(0x%04x)" , //<S2SV> ident , //<S2SV> tok2str ( gmpls_switch_cap_values , //<S2SV> "Unknown" , //<S2SV> * ( obj_tptr + 1 ) ) , //<S2SV> * ( obj_tptr + 1 ) , //<S2SV> tok2str ( gmpls_payload_values , //<S2SV> "Unknown" , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_RRO : //<S2SV> case RSVP_OBJ_ERO : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> while ( obj_tlen >= 4 ) { //<S2SV> u_char length ; //<S2SV> ND_TCHECK2 ( * obj_tptr , 4 ) ; //<S2SV> length = * ( obj_tptr + 1 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Subobject<S2SV_blank>Type:<S2SV_blank>%s,<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> tok2str ( rsvp_obj_xro_values , //<S2SV> "Unknown<S2SV_blank>%u" , //<S2SV> RSVP_OBJ_XRO_MASK_SUBOBJ ( * obj_tptr ) ) , //<S2SV> length ) ) ; //<S2SV> if ( length == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>ERROR:<S2SV_blank>zero<S2SV_blank>length<S2SV_blank>ERO<S2SV_blank>subtype" , ident ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( RSVP_OBJ_XRO_MASK_SUBOBJ ( * obj_tptr ) ) { //<S2SV> u_char prefix_length ; //<S2SV> case RSVP_OBJ_XRO_IPV4 : //<S2SV> if ( length != 8 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ERROR:<S2SV_blank>length<S2SV_blank>!=<S2SV_blank>8" ) ) ; //<S2SV> goto invalid ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * obj_tptr , 8 ) ; //<S2SV> prefix_length = * ( obj_tptr + 6 ) ; //<S2SV> if ( prefix_length != 32 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ERROR:<S2SV_blank>Prefix<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>!=<S2SV_blank>32" , //<S2SV> prefix_length ) ) ; //<S2SV> goto invalid ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s,<S2SV_blank>%s/%u,<S2SV_blank>Flags:<S2SV_blank>[%s]" , //<S2SV> RSVP_OBJ_XRO_MASK_LOOSE ( * obj_tptr ) ? "Loose" : "Strict" , //<S2SV> ipaddr_string ( ndo , obj_tptr + 2 ) , //<S2SV> * ( obj_tptr + 6 ) , //<S2SV> bittok2str ( rsvp_obj_rro_flag_values , //<S2SV> "none" , //<S2SV> * ( obj_tptr + 7 ) ) ) ) ; //<S2SV> break ; //<S2SV> case RSVP_OBJ_XRO_LABEL : //<S2SV> if ( length != 8 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ERROR:<S2SV_blank>length<S2SV_blank>!=<S2SV_blank>8" ) ) ; //<S2SV> goto invalid ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * obj_tptr , 8 ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags:<S2SV_blank>[%s]<S2SV_blank>(%#x),<S2SV_blank>Class-Type:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>%u" , //<S2SV> bittok2str ( rsvp_obj_rro_label_flag_values , //<S2SV> "none" , //<S2SV> * ( obj_tptr + 2 ) ) , //<S2SV> * ( obj_tptr + 2 ) , //<S2SV> tok2str ( rsvp_ctype_values , //<S2SV> "Unknown" , //<S2SV> * ( obj_tptr + 3 ) + 256 * RSVP_OBJ_RRO ) , //<S2SV> * ( obj_tptr + 3 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) ) ) ; //<S2SV> } //<S2SV> obj_tlen -= * ( obj_tptr + 1 ) ; //<S2SV> obj_tptr += * ( obj_tptr + 1 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_HELLO : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> case RSVP_CTYPE_2 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Instance:<S2SV_blank>0x%08x,<S2SV_blank>Destination<S2SV_blank>Instance:<S2SV_blank>0x%08x" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_RESTART_CAPABILITY : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Restart<S2SV_blank><S2SV_blank>Time:<S2SV_blank>%ums,<S2SV_blank>Recovery<S2SV_blank>Time:<S2SV_blank>%ums" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_SESSION_ATTRIBUTE : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_TUNNEL_IPV4 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> namelen = * ( obj_tptr + 3 ) ; //<S2SV> if ( obj_tlen < 4 + namelen ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Session<S2SV_blank>Name:<S2SV_blank>" , ident ) ) ; //<S2SV> for ( i = 0 ; i < namelen ; i ++ ) //<S2SV> safeputchar ( ndo , * ( obj_tptr + 4 + i ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Setup<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Holding<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Flags:<S2SV_blank>[%s]<S2SV_blank>(%#x)" , //<S2SV> ident , //<S2SV> ( int ) * obj_tptr , //<S2SV> ( int ) * ( obj_tptr + 1 ) , //<S2SV> bittok2str ( rsvp_session_attribute_flag_values , //<S2SV> "none" , //<S2SV> * ( obj_tptr + 2 ) ) , //<S2SV> * ( obj_tptr + 2 ) ) ) ; //<S2SV> obj_tlen -= 4 + * ( obj_tptr + 3 ) ; //<S2SV> obj_tptr += 4 + * ( obj_tptr + 3 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_GENERALIZED_UNI : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> int subobj_type , af , subobj_len , total_subobj_len ; //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> total_subobj_len = obj_tlen ; //<S2SV> while ( total_subobj_len > 0 ) { //<S2SV> if ( total_subobj_len < 4 ) //<S2SV> goto invalid ; //<S2SV> subobj_len = EXTRACT_16BITS ( obj_tptr ) ; //<S2SV> subobj_type = ( EXTRACT_16BITS ( obj_tptr + 2 ) ) >> 8 ; //<S2SV> af = ( EXTRACT_16BITS ( obj_tptr + 2 ) ) & 0x00FF ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Subobject<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>AF:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> tok2str ( rsvp_obj_generalized_uni_values , "Unknown" , subobj_type ) , //<S2SV> subobj_type , //<S2SV> tok2str ( af_values , "Unknown" , af ) , af , //<S2SV> subobj_len ) ) ; //<S2SV> if ( subobj_len < 4 || subobj_len > total_subobj_len ) //<S2SV> goto invalid ; //<S2SV> switch ( subobj_type ) { //<S2SV> case RSVP_GEN_UNI_SUBOBJ_SOURCE_TNA_ADDRESS : //<S2SV> case RSVP_GEN_UNI_SUBOBJ_DESTINATION_TNA_ADDRESS : //<S2SV> switch ( af ) { //<S2SV> case AFNUM_INET : //<S2SV> if ( subobj_len < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>UNI<S2SV_blank>IPv4<S2SV_blank>TNA<S2SV_blank>address:<S2SV_blank>%s" , //<S2SV> ident , ipaddr_string ( ndo , obj_tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case AFNUM_INET6 : //<S2SV> if ( subobj_len < 20 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>UNI<S2SV_blank>IPv6<S2SV_blank>TNA<S2SV_blank>address:<S2SV_blank>%s" , //<S2SV> ident , ip6addr_string ( ndo , obj_tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case AFNUM_NSAP : //<S2SV> if ( subobj_len ) { //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_GEN_UNI_SUBOBJ_DIVERSITY : //<S2SV> if ( subobj_len ) { //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_GEN_UNI_SUBOBJ_EGRESS_LABEL : //<S2SV> if ( subobj_len < 16 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>U-bit:<S2SV_blank>%x,<S2SV_blank>Label<S2SV_blank>type:<S2SV_blank>%u,<S2SV_blank>Logical<S2SV_blank>port<S2SV_blank>id:<S2SV_blank>%u,<S2SV_blank>Label:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> ( ( EXTRACT_32BITS ( obj_tptr + 4 ) ) >> 31 ) , //<S2SV> ( ( EXTRACT_32BITS ( obj_tptr + 4 ) ) & 0xFF ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 12 ) ) ) ; //<S2SV> break ; //<S2SV> case RSVP_GEN_UNI_SUBOBJ_SERVICE_LEVEL : //<S2SV> if ( subobj_len < 8 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Service<S2SV_blank>level:<S2SV_blank>%u" , //<S2SV> ident , ( EXTRACT_32BITS ( obj_tptr + 4 ) ) >> 24 ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> } //<S2SV> total_subobj_len -= subobj_len ; //<S2SV> obj_tptr += subobj_len ; //<S2SV> obj_tlen += subobj_len ; //<S2SV> } //<S2SV> if ( total_subobj_len ) { //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_RSVP_HOP : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_3 : //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Previous/Next<S2SV_blank>Interface:<S2SV_blank>%s,<S2SV_blank>Logical<S2SV_blank>Interface<S2SV_blank>Handle:<S2SV_blank>0x%08x" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> if ( obj_tlen ) //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_4 : //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < 20 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Previous/Next<S2SV_blank>Interface:<S2SV_blank>%s,<S2SV_blank>Logical<S2SV_blank>Interface<S2SV_blank>Handle:<S2SV_blank>0x%08x" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 16 ) ) ) ; //<S2SV> obj_tlen -= 20 ; //<S2SV> obj_tptr += 20 ; //<S2SV> hexdump = TRUE ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_TIME_VALUES : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Refresh<S2SV_blank>Period:<S2SV_blank>%ums" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_SENDER_TSPEC : //<S2SV> case RSVP_OBJ_ADSPEC : //<S2SV> case RSVP_OBJ_FLOWSPEC : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_2 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Msg-Version:<S2SV_blank>%u,<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> ( * obj_tptr & 0xf0 ) >> 4 , //<S2SV> EXTRACT_16BITS ( obj_tptr + 2 ) << 2 ) ) ; //<S2SV> obj_tptr += 4 ; //<S2SV> obj_tlen -= 4 ; //<S2SV> while ( obj_tlen >= 4 ) { //<S2SV> intserv_serv_tlen = EXTRACT_16BITS ( obj_tptr + 2 ) << 2 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Service<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>break<S2SV_blank>bit<S2SV_blank>%s<S2SV_blank>set,<S2SV_blank>Service<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> tok2str ( rsvp_intserv_service_type_values , "unknown" , * ( obj_tptr ) ) , //<S2SV> * ( obj_tptr ) , //<S2SV> ( * ( obj_tptr + 1 ) & 0x80 ) ? "" : "not" , //<S2SV> intserv_serv_tlen ) ) ; //<S2SV> obj_tptr += 4 ; //<S2SV> obj_tlen -= 4 ; //<S2SV> while ( intserv_serv_tlen >= 4 ) { //<S2SV> processed = rsvp_intserv_print ( ndo , obj_tptr , obj_tlen ) ; //<S2SV> if ( processed == 0 ) //<S2SV> break ; //<S2SV> obj_tlen -= processed ; //<S2SV> intserv_serv_tlen -= processed ; //<S2SV> obj_tptr += processed ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_FILTERSPEC : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>Source<S2SV_blank>Port:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < 20 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>Source<S2SV_blank>Port:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 18 ) ) ) ; //<S2SV> obj_tlen -= 20 ; //<S2SV> obj_tptr += 20 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_3 : //<S2SV> if ( obj_tlen < 20 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>Flow<S2SV_blank>Label:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_24BITS ( obj_tptr + 17 ) ) ) ; //<S2SV> obj_tlen -= 20 ; //<S2SV> obj_tptr += 20 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_TUNNEL_IPV6 : //<S2SV> if ( obj_tlen < 20 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>LSP-ID:<S2SV_blank>0x%04x" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 18 ) ) ) ; //<S2SV> obj_tlen -= 20 ; //<S2SV> obj_tptr += 20 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_13 : //<S2SV> if ( obj_tlen < 40 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv6<S2SV_blank>Tunnel<S2SV_blank>Sender<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>LSP<S2SV_blank>ID:<S2SV_blank>0x%04x" //<S2SV> "%s<S2SV_blank><S2SV_blank>Sub-Group<S2SV_blank>Originator<S2SV_blank>ID:<S2SV_blank>%s,<S2SV_blank>Sub-Group<S2SV_blank>ID:<S2SV_blank>0x%04x" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 18 ) , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr + 20 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 38 ) ) ) ; //<S2SV> obj_tlen -= 40 ; //<S2SV> obj_tptr += 40 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_TUNNEL_IPV4 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Source<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>LSP-ID:<S2SV_blank>0x%04x" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_12 : //<S2SV> if ( obj_tlen < 16 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>IPv4<S2SV_blank>Tunnel<S2SV_blank>Sender<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>LSP<S2SV_blank>ID:<S2SV_blank>0x%04x" //<S2SV> "%s<S2SV_blank><S2SV_blank>Sub-Group<S2SV_blank>Originator<S2SV_blank>ID:<S2SV_blank>%s,<S2SV_blank>Sub-Group<S2SV_blank>ID:<S2SV_blank>0x%04x" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 6 ) , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr + 8 ) , //<S2SV> EXTRACT_16BITS ( obj_tptr + 12 ) ) ) ; //<S2SV> obj_tlen -= 16 ; //<S2SV> obj_tptr += 16 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_FASTREROUTE : //<S2SV> obj_ptr . rsvp_obj_frr = ( const struct rsvp_obj_frr_t * ) obj_tptr ; //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < sizeof ( struct rsvp_obj_frr_t ) ) //<S2SV> return - 1 ; //<S2SV> bw . i = EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> bandwidth ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Setup<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Holding<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Hop-limit:<S2SV_blank>%u,<S2SV_blank>Bandwidth:<S2SV_blank>%.10g<S2SV_blank>Mbps" , //<S2SV> ident , //<S2SV> ( int ) obj_ptr . rsvp_obj_frr -> setup_prio , //<S2SV> ( int ) obj_ptr . rsvp_obj_frr -> hold_prio , //<S2SV> ( int ) obj_ptr . rsvp_obj_frr -> hop_limit , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Include-any:<S2SV_blank>0x%08x,<S2SV_blank>Exclude-any:<S2SV_blank>0x%08x,<S2SV_blank>Include-all:<S2SV_blank>0x%08x" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> include_any ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> exclude_any ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> include_all ) ) ) ; //<S2SV> obj_tlen -= sizeof ( struct rsvp_obj_frr_t ) ; //<S2SV> obj_tptr += sizeof ( struct rsvp_obj_frr_t ) ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_TUNNEL_IPV4 : //<S2SV> if ( obj_tlen < 16 ) //<S2SV> return - 1 ; //<S2SV> bw . i = EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> bandwidth ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Setup<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Holding<S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>Hop-limit:<S2SV_blank>%u,<S2SV_blank>Bandwidth:<S2SV_blank>%.10g<S2SV_blank>Mbps" , //<S2SV> ident , //<S2SV> ( int ) obj_ptr . rsvp_obj_frr -> setup_prio , //<S2SV> ( int ) obj_ptr . rsvp_obj_frr -> hold_prio , //<S2SV> ( int ) obj_ptr . rsvp_obj_frr -> hop_limit , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Include<S2SV_blank>Colors:<S2SV_blank>0x%08x,<S2SV_blank>Exclude<S2SV_blank>Colors:<S2SV_blank>0x%08x" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> include_any ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> exclude_any ) ) ) ; //<S2SV> obj_tlen -= 16 ; //<S2SV> obj_tptr += 16 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_DETOUR : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_TUNNEL_IPV4 : //<S2SV> while ( obj_tlen >= 8 ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>PLR-ID:<S2SV_blank>%s,<S2SV_blank>Avoid-Node-ID:<S2SV_blank>%s" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> ipaddr_string ( ndo , obj_tptr + 4 ) ) ) ; //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_CLASSTYPE : //<S2SV> case RSVP_OBJ_CLASSTYPE_OLD : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>CT:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) & 0x7 ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_ERROR_SPEC : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_3 : //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> error_code = * ( obj_tptr + 5 ) ; //<S2SV> error_value = EXTRACT_16BITS ( obj_tptr + 6 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Error<S2SV_blank>Node<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>Flags:<S2SV_blank>[0x%02x]%s<S2SV_blank><S2SV_blank>Error<S2SV_blank>Code:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , obj_tptr ) , //<S2SV> * ( obj_tptr + 4 ) , //<S2SV> ident , //<S2SV> tok2str ( rsvp_obj_error_code_values , "unknown" , error_code ) , //<S2SV> error_code ) ) ; //<S2SV> switch ( error_code ) { //<S2SV> case RSVP_OBJ_ERROR_SPEC_CODE_ROUTING : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Error<S2SV_blank>Value:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( rsvp_obj_error_code_routing_values , "unknown" , error_value ) , //<S2SV> error_value ) ) ; //<S2SV> break ; //<S2SV> case RSVP_OBJ_ERROR_SPEC_CODE_DIFFSERV_TE : //<S2SV> case RSVP_OBJ_ERROR_SPEC_CODE_DIFFSERV_TE_OLD : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Error<S2SV_blank>Value:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( rsvp_obj_error_code_diffserv_te_values , "unknown" , error_value ) , //<S2SV> error_value ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Unknown<S2SV_blank>Error<S2SV_blank>Value<S2SV_blank>(%u)" , error_value ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> obj_tlen -= 8 ; //<S2SV> obj_tptr += 8 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_4 : //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < 20 ) //<S2SV> return - 1 ; //<S2SV> error_code = * ( obj_tptr + 17 ) ; //<S2SV> error_value = EXTRACT_16BITS ( obj_tptr + 18 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Error<S2SV_blank>Node<S2SV_blank>Address:<S2SV_blank>%s,<S2SV_blank>Flags:<S2SV_blank>[0x%02x]%s<S2SV_blank><S2SV_blank>Error<S2SV_blank>Code:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , obj_tptr ) , //<S2SV> * ( obj_tptr + 16 ) , //<S2SV> ident , //<S2SV> tok2str ( rsvp_obj_error_code_values , "unknown" , error_code ) , //<S2SV> error_code ) ) ; //<S2SV> switch ( error_code ) { //<S2SV> case RSVP_OBJ_ERROR_SPEC_CODE_ROUTING : //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Error<S2SV_blank>Value:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( rsvp_obj_error_code_routing_values , "unknown" , error_value ) , //<S2SV> error_value ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> obj_tlen -= 20 ; //<S2SV> obj_tptr += 20 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_PROPERTIES : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> padbytes = EXTRACT_16BITS ( obj_tptr + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>TLV<S2SV_blank>count:<S2SV_blank>%u,<S2SV_blank>padding<S2SV_blank>bytes:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> EXTRACT_16BITS ( obj_tptr ) , //<S2SV> padbytes ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> while ( obj_tlen >= 2 + padbytes ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>(0x%02x),<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> tok2str ( rsvp_obj_prop_tlv_values , "unknown" , * obj_tptr ) , //<S2SV> * obj_tptr , //<S2SV> * ( obj_tptr + 1 ) ) ) ; //<S2SV> if ( obj_tlen < * ( obj_tptr + 1 ) ) //<S2SV> return - 1 ; //<S2SV> if ( * ( obj_tptr + 1 ) < 2 ) //<S2SV> return - 1 ; //<S2SV> print_unknown_data ( ndo , obj_tptr + 2 , "\\n\\t\\t" , * ( obj_tptr + 1 ) - 2 ) ; //<S2SV> obj_tlen -= * ( obj_tptr + 1 ) ; //<S2SV> obj_tptr += * ( obj_tptr + 1 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_MESSAGE_ID : //<S2SV> case RSVP_OBJ_MESSAGE_ID_ACK : //<S2SV> case RSVP_OBJ_MESSAGE_ID_LIST : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> case RSVP_CTYPE_2 : //<S2SV> if ( obj_tlen < 8 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Flags<S2SV_blank>[0x%02x],<S2SV_blank>epoch:<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> * obj_tptr , //<S2SV> EXTRACT_24BITS ( obj_tptr + 1 ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> while ( obj_tlen >= 4 ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Message-ID<S2SV_blank>0x%08x<S2SV_blank>(%u)" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_tptr ) , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_INTEGRITY : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < sizeof ( struct rsvp_obj_integrity_t ) ) //<S2SV> return - 1 ; //<S2SV> obj_ptr . rsvp_obj_integrity = ( const struct rsvp_obj_integrity_t * ) obj_tptr ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Key-ID<S2SV_blank>0x%04x%08x,<S2SV_blank>Sequence<S2SV_blank>0x%08x%08x,<S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> ident , //<S2SV> EXTRACT_16BITS ( obj_ptr . rsvp_obj_integrity -> key_id ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_integrity -> key_id + 2 ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_integrity -> sequence ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_integrity -> sequence + 4 ) , //<S2SV> bittok2str ( rsvp_obj_integrity_flag_values , //<S2SV> "none" , //<S2SV> obj_ptr . rsvp_obj_integrity -> flags ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>MD5-sum<S2SV_blank>0x%08x%08x%08x%08x<S2SV_blank>" , //<S2SV> ident , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_integrity -> digest ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_integrity -> digest + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_integrity -> digest + 8 ) , //<S2SV> EXTRACT_32BITS ( obj_ptr . rsvp_obj_integrity -> digest + 12 ) ) ) ; //<S2SV> sigcheck = signature_verify ( ndo , pptr , plen , //<S2SV> obj_ptr . rsvp_obj_integrity -> digest , //<S2SV> rsvp_clear_checksum , //<S2SV> rsvp_com_header ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(%s)" , tok2str ( signature_check_values , "Unknown" , sigcheck ) ) ) ; //<S2SV> obj_tlen += sizeof ( struct rsvp_obj_integrity_t ) ; //<S2SV> obj_tptr += sizeof ( struct rsvp_obj_integrity_t ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_ADMIN_STATUS : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Flags<S2SV_blank>[%s]" , ident , //<S2SV> bittok2str ( rsvp_obj_admin_status_flag_values , "none" , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_LABEL_SET : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_1 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> action = ( EXTRACT_16BITS ( obj_tptr ) >> 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Action:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>Label<S2SV_blank>type:<S2SV_blank>%u" , ident , //<S2SV> tok2str ( rsvp_obj_label_set_action_values , "Unknown" , action ) , //<S2SV> action , ( ( EXTRACT_32BITS ( obj_tptr ) & 0x7F ) ) ) ) ; //<S2SV> switch ( action ) { //<S2SV> case LABEL_SET_INCLUSIVE_RANGE : //<S2SV> case LABEL_SET_EXCLUSIVE_RANGE : //<S2SV> if ( obj_tlen < 12 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Start<S2SV_blank>range:<S2SV_blank>%u,<S2SV_blank>End<S2SV_blank>range:<S2SV_blank>%u" , ident , //<S2SV> EXTRACT_32BITS ( obj_tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( obj_tptr + 8 ) ) ) ; //<S2SV> obj_tlen -= 12 ; //<S2SV> obj_tptr += 12 ; //<S2SV> break ; //<S2SV> default : //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> subchannel = 1 ; //<S2SV> while ( obj_tlen >= 4 ) { //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Subchannel<S2SV_blank>#%u:<S2SV_blank>%u" , ident , subchannel , //<S2SV> EXTRACT_32BITS ( obj_tptr ) ) ) ; //<S2SV> obj_tptr += 4 ; //<S2SV> obj_tlen -= 4 ; //<S2SV> subchannel ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_S2L : //<S2SV> switch ( rsvp_obj_ctype ) { //<S2SV> case RSVP_CTYPE_IPV4 : //<S2SV> if ( obj_tlen < 4 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Sub-LSP<S2SV_blank>destination<S2SV_blank>address:<S2SV_blank>%s" , //<S2SV> ident , ipaddr_string ( ndo , obj_tptr ) ) ) ; //<S2SV> obj_tlen -= 4 ; //<S2SV> obj_tptr += 4 ; //<S2SV> break ; //<S2SV> case RSVP_CTYPE_IPV6 : //<S2SV> if ( obj_tlen < 16 ) //<S2SV> return - 1 ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank><S2SV_blank>Sub-LSP<S2SV_blank>destination<S2SV_blank>address:<S2SV_blank>%s" , //<S2SV> ident , ip6addr_string ( ndo , obj_tptr ) ) ) ; //<S2SV> obj_tlen -= 16 ; //<S2SV> obj_tptr += 16 ; //<S2SV> break ; //<S2SV> default : //<S2SV> hexdump = TRUE ; //<S2SV> } //<S2SV> break ; //<S2SV> case RSVP_OBJ_SCOPE : //<S2SV> case RSVP_OBJ_POLICY_DATA : //<S2SV> case RSVP_OBJ_ACCEPT_LABEL_SET : //<S2SV> case RSVP_OBJ_PROTECTION : //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , obj_tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , obj_tlen ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 || hexdump == TRUE ) //<S2SV> print_unknown_data ( ndo , tptr + sizeof ( struct rsvp_object_header ) , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , //<S2SV> rsvp_obj_len - sizeof ( struct rsvp_object_header ) ) ; //<S2SV> tptr += rsvp_obj_len ; //<S2SV> tlen -= rsvp_obj_len ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> invalid : //<S2SV> ND_PRINT ( ( ndo , "%s" , istr ) ) ; //<S2SV> return - 1 ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 