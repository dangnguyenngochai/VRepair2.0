static int //<S2SV> dccp_print_option ( netdissect_options * ndo , const u_char * option , u_int hlen ) //<S2SV> { //<S2SV> uint8_t optlen , i ; //<S2SV> ND_TCHECK ( * option ) ; //<S2SV> if ( * option >= 32 ) { //<S2SV> ND_TCHECK ( * ( option + 1 ) ) ; //<S2SV> optlen = * ( option + 1 ) ; //<S2SV> if ( optlen < 2 ) { //<S2SV> if ( * option >= 128 ) //<S2SV> ND_PRINT ( ( ndo , "CCID<S2SV_blank>option<S2SV_blank>%u<S2SV_blank>optlen<S2SV_blank>too<S2SV_blank>short" , * option ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>optlen<S2SV_blank>too<S2SV_blank>short" , //<S2SV> tok2str ( dccp_option_values , "Option<S2SV_blank>%u" , * option ) ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } else //<S2SV> optlen = 1 ; //<S2SV> if ( hlen < optlen ) { //<S2SV> if ( * option >= 128 ) //<S2SV> ND_PRINT ( ( ndo , "CCID<S2SV_blank>option<S2SV_blank>%u<S2SV_blank>optlen<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>header<S2SV_blank>length" , //<S2SV> * option ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>optlen<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>header<S2SV_blank>length" , //<S2SV> tok2str ( dccp_option_values , "Option<S2SV_blank>%u" , * option ) ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * option , optlen ) ; //<S2SV> if ( * option >= 128 ) { //<S2SV> ND_PRINT ( ( ndo , "CCID<S2SV_blank>option<S2SV_blank>%d" , * option ) ) ; //<S2SV> switch ( optlen ) { //<S2SV> case 4 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_16BITS ( option + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "%s" , tok2str ( dccp_option_values , "Option<S2SV_blank>%u" , * option ) ) ) ; //<S2SV> switch ( * option ) { //<S2SV> case 32 : //<S2SV> case 33 : //<S2SV> case 34 : //<S2SV> case 35 : //<S2SV> if ( optlen < 3 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>optlen<S2SV_blank>too<S2SV_blank>short" ) ) ; //<S2SV> return optlen ; //<S2SV> } //<S2SV> if ( * ( option + 2 ) < 10 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%s" , dccp_feature_nums [ * ( option + 2 ) ] ) ) ; //<S2SV> for ( i = 0 ; i < optlen - 3 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%d" , * ( option + 3 + i ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 36 : //<S2SV> if ( optlen > 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>0x" ) ) ; //<S2SV> for ( i = 0 ; i < optlen - 2 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , * ( option + 2 + i ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 37 : //<S2SV> for ( i = 0 ; i < optlen - 2 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%d" , * ( option + 2 + i ) ) ) ; //<S2SV> break ; //<S2SV> case 38 : //<S2SV> if ( optlen > 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>0x" ) ) ; //<S2SV> for ( i = 0 ; i < optlen - 2 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , * ( option + 2 + i ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 39 : //<S2SV> if ( optlen > 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>0x" ) ) ; //<S2SV> for ( i = 0 ; i < optlen - 2 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , * ( option + 2 + i ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 40 : //<S2SV> if ( optlen > 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>0x" ) ) ; //<S2SV> for ( i = 0 ; i < optlen - 2 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , * ( option + 2 + i ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 41 : //<S2SV> if ( optlen == 6 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>6]" ) ) ; //<S2SV> break ; //<S2SV> case 42 : //<S2SV> switch ( optlen ) { //<S2SV> case 6 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case 8 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(elapsed<S2SV_blank>time<S2SV_blank>%u)" , EXTRACT_16BITS ( option + 6 ) ) ) ; //<S2SV> break ; //<S2SV> case 10 : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(elapsed<S2SV_blank>time<S2SV_blank>%u)" , EXTRACT_32BITS ( option + 6 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>6<S2SV_blank>or<S2SV_blank>8<S2SV_blank>or<S2SV_blank>10]" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case 43 : //<S2SV> if ( optlen == 6 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; //<S2SV> else if ( optlen == 4 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_16BITS ( option + 2 ) ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>or<S2SV_blank>6]" ) ) ; //<S2SV> break ; //<S2SV> case 44 : //<S2SV> if ( optlen > 2 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> for ( i = 0 ; i < optlen - 2 ; i ++ ) //<S2SV> ND_PRINT ( ( ndo , "%02x" , * ( option + 2 + i ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> return optlen ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 