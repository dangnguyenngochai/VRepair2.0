static void //<S2SV> pimv2_print ( netdissect_options * ndo , //<S2SV> register const u_char * bp , register u_int len , const u_char * bp2 ) //<S2SV> { //<S2SV> register const u_char * ep ; //<S2SV> register const struct pim * pim = ( const struct pim * ) bp ; //<S2SV> int advance ; //<S2SV> enum checksum_status cksum_status ; //<S2SV> ep = ( const u_char * ) ndo -> ndo_snapend ; //<S2SV> if ( bp >= ep ) //<S2SV> return ; //<S2SV> if ( ep > bp + len ) //<S2SV> ep = bp + len ; //<S2SV> ND_TCHECK ( pim -> pim_rsv ) ; //<S2SV> pimv2_addr_len = pim -> pim_rsv ; //<S2SV> if ( pimv2_addr_len != 0 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>RFC2117-encoding" ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>cksum<S2SV_blank>0x%04x<S2SV_blank>" , EXTRACT_16BITS ( & pim -> pim_cksum ) ) ) ; //<S2SV> if ( EXTRACT_16BITS ( & pim -> pim_cksum ) == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "(unverified)" ) ) ; //<S2SV> } else { //<S2SV> if ( PIM_TYPE ( pim -> pim_typever ) == PIMV2_TYPE_REGISTER ) { //<S2SV> cksum_status = pimv2_check_checksum ( ndo , bp , bp2 , 8 ) ; //<S2SV> if ( cksum_status == INCORRECT ) { //<S2SV> cksum_status = pimv2_check_checksum ( ndo , bp , bp2 , len ) ; //<S2SV> } //<S2SV> } else { //<S2SV> cksum_status = pimv2_check_checksum ( ndo , bp , bp2 , len ) ; //<S2SV> } //<S2SV> switch ( cksum_status ) { //<S2SV> case CORRECT : //<S2SV> ND_PRINT ( ( ndo , "(correct)" ) ) ; //<S2SV> break ; //<S2SV> case INCORRECT : //<S2SV> ND_PRINT ( ( ndo , "(incorrect)" ) ) ; //<S2SV> break ; //<S2SV> case UNVERIFIED : //<S2SV> ND_PRINT ( ( ndo , "(unverified)" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> switch ( PIM_TYPE ( pim -> pim_typever ) ) { //<S2SV> case PIMV2_TYPE_HELLO : //<S2SV> { //<S2SV> uint16_t otype , olen ; //<S2SV> bp += 4 ; //<S2SV> while ( bp < ep ) { //<S2SV> ND_TCHECK2 ( bp [ 0 ] , 4 ) ; //<S2SV> otype = EXTRACT_16BITS ( & bp [ 0 ] ) ; //<S2SV> olen = EXTRACT_16BITS ( & bp [ 2 ] ) ; //<S2SV> ND_TCHECK2 ( bp [ 0 ] , 4 + olen ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%s<S2SV_blank>Option<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u,<S2SV_blank>Value:<S2SV_blank>" , //<S2SV> tok2str ( pimv2_hello_option_values , "Unknown" , otype ) , //<S2SV> otype , //<S2SV> olen ) ) ; //<S2SV> bp += 4 ; //<S2SV> switch ( otype ) { //<S2SV> case PIMV2_HELLO_OPTION_HOLDTIME : //<S2SV> if ( olen != 2 ) { //<S2SV> ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>2<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; //<S2SV> } else { //<S2SV> unsigned_relts_print ( ndo , EXTRACT_16BITS ( bp ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case PIMV2_HELLO_OPTION_LANPRUNEDELAY : //<S2SV> if ( olen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; //<S2SV> } else { //<S2SV> char t_bit ; //<S2SV> uint16_t lan_delay , override_interval ; //<S2SV> lan_delay = EXTRACT_16BITS ( bp ) ; //<S2SV> override_interval = EXTRACT_16BITS ( bp + 2 ) ; //<S2SV> t_bit = ( lan_delay & 0x8000 ) ? 1 : 0 ; //<S2SV> lan_delay &= ~ 0x8000 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>T-bit=%d,<S2SV_blank>LAN<S2SV_blank>delay<S2SV_blank>%dms,<S2SV_blank>Override<S2SV_blank>interval<S2SV_blank>%dms" , //<S2SV> t_bit , lan_delay , override_interval ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case PIMV2_HELLO_OPTION_DR_PRIORITY_OLD : //<S2SV> case PIMV2_HELLO_OPTION_DR_PRIORITY : //<S2SV> switch ( olen ) { //<S2SV> case 0 : //<S2SV> ND_PRINT ( ( ndo , "Bi-Directional<S2SV_blank>Capability<S2SV_blank>(Old)" ) ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> ND_PRINT ( ( ndo , "%u" , EXTRACT_32BITS ( bp ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case PIMV2_HELLO_OPTION_GENID : //<S2SV> if ( olen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "0x%08x" , EXTRACT_32BITS ( bp ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case PIMV2_HELLO_OPTION_REFRESH_CAP : //<S2SV> if ( olen != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "v%d" , * bp ) ) ; //<S2SV> if ( * ( bp + 1 ) != 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>interval<S2SV_blank>" ) ) ; //<S2SV> unsigned_relts_print ( ndo , * ( bp + 1 ) ) ; //<S2SV> } //<S2SV> if ( EXTRACT_16BITS ( bp + 2 ) != 0 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>?0x%04x?" , EXTRACT_16BITS ( bp + 2 ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case PIMV2_HELLO_OPTION_BIDIR_CAP : //<S2SV> break ; //<S2SV> case PIMV2_HELLO_OPTION_ADDRESS_LIST_OLD : //<S2SV> case PIMV2_HELLO_OPTION_ADDRESS_LIST : //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> const u_char * ptr = bp ; //<S2SV> while ( ptr < ( bp + olen ) ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ) ; //<S2SV> advance = pimv2_addr_print ( ndo , ptr , pimv2_unicast , 0 ) ; //<S2SV> if ( advance < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ptr += advance ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , bp , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , olen ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> print_unknown_data ( ndo , bp , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , olen ) ; //<S2SV> bp += olen ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case PIMV2_TYPE_REGISTER : //<S2SV> { //<S2SV> const struct ip * ip ; //<S2SV> ND_TCHECK2 ( * ( bp + 4 ) , PIMV2_REGISTER_FLAG_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[<S2SV_blank>%s<S2SV_blank>]\\n\\t" , //<S2SV> tok2str ( pimv2_register_flag_values , //<S2SV> "none" , //<S2SV> EXTRACT_32BITS ( bp + 4 ) ) ) ) ; //<S2SV> bp += 8 ; len -= 8 ; //<S2SV> ip = ( const struct ip * ) bp ; //<S2SV> switch ( IP_V ( ip ) ) { //<S2SV> case 0 : //<S2SV> ND_PRINT ( ( ndo , "IP-Null-header<S2SV_blank>%s<S2SV_blank>><S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , & ip -> ip_src ) , //<S2SV> ipaddr_string ( ndo , & ip -> ip_dst ) ) ) ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> ip_print ( ndo , bp , len ) ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> ip6_print ( ndo , bp , len ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "IP<S2SV_blank>ver<S2SV_blank>%d" , IP_V ( ip ) ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case PIMV2_TYPE_REGISTER_STOP : //<S2SV> bp += 4 ; len -= 4 ; //<S2SV> if ( bp >= ep ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>group=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> if ( bp >= ep ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>source=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> break ; //<S2SV> case PIMV2_TYPE_JOIN_PRUNE : //<S2SV> case PIMV2_TYPE_GRAFT : //<S2SV> case PIMV2_TYPE_GRAFT_ACK : //<S2SV> { //<S2SV> uint8_t ngroup ; //<S2SV> uint16_t holdtime ; //<S2SV> uint16_t njoin ; //<S2SV> uint16_t nprune ; //<S2SV> int i , j ; //<S2SV> bp += 4 ; len -= 4 ; //<S2SV> if ( PIM_TYPE ( pim -> pim_typever ) != 7 ) { //<S2SV> if ( bp >= ep ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>upstream-neighbor:<S2SV_blank>" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> } //<S2SV> if ( bp + 4 > ep ) //<S2SV> break ; //<S2SV> ngroup = bp [ 1 ] ; //<S2SV> holdtime = EXTRACT_16BITS ( & bp [ 2 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>%u<S2SV_blank>group(s)" , ngroup ) ) ; //<S2SV> if ( PIM_TYPE ( pim -> pim_typever ) != 7 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>holdtime:<S2SV_blank>" ) ) ; //<S2SV> if ( holdtime == 0xffff ) //<S2SV> ND_PRINT ( ( ndo , "infinite" ) ) ; //<S2SV> else //<S2SV> unsigned_relts_print ( ndo , holdtime ) ; //<S2SV> } //<S2SV> bp += 4 ; len -= 4 ; //<S2SV> for ( i = 0 ; i < ngroup ; i ++ ) { //<S2SV> if ( bp >= ep ) //<S2SV> goto jp_done ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>group<S2SV_blank>#%u:<S2SV_blank>" , i + 1 ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto jp_done ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> if ( bp + 4 > ep ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto jp_done ; //<S2SV> } //<S2SV> njoin = EXTRACT_16BITS ( & bp [ 0 ] ) ; //<S2SV> nprune = EXTRACT_16BITS ( & bp [ 2 ] ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>joined<S2SV_blank>sources:<S2SV_blank>%u,<S2SV_blank>pruned<S2SV_blank>sources:<S2SV_blank>%u" , njoin , nprune ) ) ; //<S2SV> bp += 4 ; len -= 4 ; //<S2SV> for ( j = 0 ; j < njoin ; j ++ ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>joined<S2SV_blank>source<S2SV_blank>#%u:<S2SV_blank>" , j + 1 ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_source , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto jp_done ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> } //<S2SV> for ( j = 0 ; j < nprune ; j ++ ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>pruned<S2SV_blank>source<S2SV_blank>#%u:<S2SV_blank>" , j + 1 ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_source , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto jp_done ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> } //<S2SV> } //<S2SV> jp_done : //<S2SV> break ; //<S2SV> } //<S2SV> case PIMV2_TYPE_BOOTSTRAP : //<S2SV> { //<S2SV> int i , j , frpcnt ; //<S2SV> bp += 4 ; //<S2SV> if ( bp + sizeof ( uint16_t ) >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>tag=%x" , EXTRACT_16BITS ( bp ) ) ) ; //<S2SV> bp += sizeof ( uint16_t ) ; //<S2SV> if ( bp >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>hashmlen=%d" , bp [ 0 ] ) ) ; //<S2SV> if ( bp + 1 >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>BSRprio=%d" , bp [ 1 ] ) ) ; //<S2SV> bp += 2 ; //<S2SV> if ( bp >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>BSR=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> for ( i = 0 ; bp < ep ; i ++ ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(group%d:<S2SV_blank>" , i ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) //<S2SV> < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto bs_done ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> if ( bp >= ep ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto bs_done ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>RPcnt=%d" , bp [ 0 ] ) ) ; //<S2SV> if ( bp + 1 >= ep ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto bs_done ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>FRPcnt=%d" , frpcnt = bp [ 1 ] ) ) ; //<S2SV> bp += 4 ; //<S2SV> for ( j = 0 ; j < frpcnt && bp < ep ; j ++ ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>RP%d=" , j ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , //<S2SV> pimv2_unicast , //<S2SV> 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto bs_done ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> if ( bp + 1 >= ep ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto bs_done ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",holdtime=" ) ) ; //<S2SV> unsigned_relts_print ( ndo , EXTRACT_16BITS ( bp ) ) ; //<S2SV> if ( bp + 2 >= ep ) { //<S2SV> ND_PRINT ( ( ndo , "...)" ) ) ; //<S2SV> goto bs_done ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",prio=%d" , bp [ 2 ] ) ) ; //<S2SV> bp += 4 ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ")" ) ) ; //<S2SV> } //<S2SV> bs_done : //<S2SV> break ; //<S2SV> } //<S2SV> case PIMV2_TYPE_ASSERT : //<S2SV> bp += 4 ; len -= 4 ; //<S2SV> if ( bp >= ep ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>group=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> if ( bp >= ep ) //<S2SV> break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>src=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; len -= advance ; //<S2SV> if ( bp + 8 > ep ) //<S2SV> break ; //<S2SV> if ( bp [ 0 ] & 0x80 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>RPT" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>pref=%u" , EXTRACT_32BITS ( & bp [ 0 ] ) & 0x7fffffff ) ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>metric=%u" , EXTRACT_32BITS ( & bp [ 4 ] ) ) ) ; //<S2SV> break ; //<S2SV> case PIMV2_TYPE_CANDIDATE_RP : //<S2SV> { //<S2SV> int i , pfxcnt ; //<S2SV> bp += 4 ; //<S2SV> if ( bp >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>prefix-cnt=%d" , bp [ 0 ] ) ) ; //<S2SV> pfxcnt = bp [ 0 ] ; //<S2SV> if ( bp + 1 >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>prio=%d" , bp [ 1 ] ) ) ; //<S2SV> if ( bp + 3 >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>holdtime=" ) ) ; //<S2SV> unsigned_relts_print ( ndo , EXTRACT_16BITS ( & bp [ 2 ] ) ) ; //<S2SV> bp += 4 ; //<S2SV> if ( bp >= ep ) break ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>RP=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> for ( i = 0 ; i < pfxcnt && bp < ep ; i ++ ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>Group%d=" , i ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) //<S2SV> < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case PIMV2_TYPE_PRUNE_REFRESH : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>src=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>grp=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_group , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>forwarder=" ) ) ; //<S2SV> if ( ( advance = pimv2_addr_print ( ndo , bp , pimv2_unicast , 0 ) ) < 0 ) { //<S2SV> ND_PRINT ( ( ndo , "..." ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> bp += advance ; //<S2SV> ND_TCHECK2 ( bp [ 0 ] , 2 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>TUNR<S2SV_blank>" ) ) ; //<S2SV> unsigned_relts_print ( ndo , EXTRACT_16BITS ( bp ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[type<S2SV_blank>%d]" , PIM_TYPE ( pim -> pim_typever ) ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|pim]" ) ) ; //<S2SV> } //<S2SV> 