static int //<S2SV> wb_prep ( netdissect_options * ndo , //<S2SV> const struct pkt_prep * prep , u_int len ) //<S2SV> { //<S2SV> int n ; //<S2SV> const struct pgstate * ps ; //<S2SV> const u_char * ep = ndo -> ndo_snapend ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>wb-prep:" ) ) ; //<S2SV> if ( len < sizeof ( * prep ) ) { //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> n = EXTRACT_32BITS ( & prep -> pp_n ) ; //<S2SV> ps = ( const struct pgstate * ) ( prep + 1 ) ; //<S2SV> while ( -- n >= 0 && ND_TTEST ( * ps ) ) { //<S2SV> const struct id_off * io , * ie ; //<S2SV> char c = '<' ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u/%s:%u" , //<S2SV> EXTRACT_32BITS ( & ps -> slot ) , //<S2SV> ipaddr_string ( ndo , & ps -> page . p_sid ) , //<S2SV> EXTRACT_32BITS ( & ps -> page . p_uid ) ) ) ; //<S2SV> io = ( struct id_off * ) ( ps + 1 ) ; //<S2SV> for ( ie = io + ps -> nid ; io < ie && ND_TTEST ( * io ) ; ++ io ) { //<S2SV> ND_PRINT ( ( ndo , "%c%s:%u" , c , ipaddr_string ( ndo , & io -> id ) , //<S2SV> EXTRACT_32BITS ( & io -> off ) ) ) ; //<S2SV> c = ',' ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ">" ) ) ; //<S2SV> ps = ( struct pgstate * ) io ; //<S2SV> } //<S2SV> return ( ( u_char * ) ps <= ep ? 0 : - 1 ) ; //<S2SV> } //<S2SV> 