static int //<S2SV> wb_id ( netdissect_options * ndo , //<S2SV> const struct pkt_id * id , u_int len ) //<S2SV> { //<S2SV> int i ; //<S2SV> const char * cp ; //<S2SV> const struct id_off * io ; //<S2SV> char c ; //<S2SV> int nid ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>wb-id:" ) ) ; //<S2SV> if ( len < sizeof ( * id ) || ! ND_TTEST ( * id ) ) //<S2SV> return ( - 1 ) ; //<S2SV> len -= sizeof ( * id ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%u/%s:%u<S2SV_blank>(max<S2SV_blank>%u/%s:%u)<S2SV_blank>" , //<S2SV> EXTRACT_32BITS ( & id -> pi_ps . slot ) , //<S2SV> ipaddr_string ( ndo , & id -> pi_ps . page . p_sid ) , //<S2SV> EXTRACT_32BITS ( & id -> pi_ps . page . p_uid ) , //<S2SV> EXTRACT_32BITS ( & id -> pi_mslot ) , //<S2SV> ipaddr_string ( ndo , & id -> pi_mpage . p_sid ) , //<S2SV> EXTRACT_32BITS ( & id -> pi_mpage . p_uid ) ) ) ; //<S2SV> nid = EXTRACT_16BITS ( & id -> pi_ps . nid ) ; //<S2SV> len -= sizeof ( * io ) * nid ; //<S2SV> io = ( struct id_off * ) ( id + 1 ) ; //<S2SV> cp = ( char * ) ( io + nid ) ; //<S2SV> if ( ! ND_TTEST2 ( cp , len ) ) { //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> fn_print ( ndo , ( u_char * ) cp , ( u_char * ) cp + len ) ; //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> } //<S2SV> c = '<' ; //<S2SV> for ( i = 0 ; i < nid && ND_TTEST ( * io ) ; ++ io , ++ i ) { //<S2SV> ND_PRINT ( ( ndo , "%c%s:%u" , //<S2SV> c , ipaddr_string ( ndo , & io -> id ) , EXTRACT_32BITS ( & io -> off ) ) ) ; //<S2SV> c = ',' ; //<S2SV> } //<S2SV> if ( i >= nid ) { //<S2SV> ND_PRINT ( ( ndo , ">" ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> 