static void //<S2SV> ppp_hdlc ( netdissect_options * ndo , //<S2SV> const u_char * p , int length ) //<S2SV> { //<S2SV> u_char * b , * t , c ; //<S2SV> const u_char * s ; //<S2SV> int i , proto ; //<S2SV> const void * se ; //<S2SV> if ( length <= 0 ) //<S2SV> return ; //<S2SV> b = ( u_char * ) malloc ( length ) ; //<S2SV> if ( b == NULL ) //<S2SV> return ; //<S2SV> for ( s = p , t = b , i = length ; i > 0 && ND_TTEST ( * s ) ; i -- ) { //<S2SV> c = * s ++ ; //<S2SV> if ( c == 0x7d ) { //<S2SV> if ( i <= 1 || ! ND_TTEST ( * s ) ) //<S2SV> break ; //<S2SV> i -- ; //<S2SV> c = * s ++ ^ 0x20 ; //<S2SV> } //<S2SV> * t ++ = c ; //<S2SV> } //<S2SV> se = ndo -> ndo_snapend ; //<S2SV> ndo -> ndo_snapend = t ; //<S2SV> length = t - b ; //<S2SV> if ( length < 1 ) //<S2SV> goto trunc ; //<S2SV> proto = * b ; //<S2SV> switch ( proto ) { //<S2SV> case PPP_IP : //<S2SV> ip_print ( ndo , b + 1 , length - 1 ) ; //<S2SV> goto cleanup ; //<S2SV> case PPP_IPV6 : //<S2SV> ip6_print ( ndo , b + 1 , length - 1 ) ; //<S2SV> goto cleanup ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> if ( length < 2 ) //<S2SV> goto trunc ; //<S2SV> proto = EXTRACT_16BITS ( b ) ; //<S2SV> switch ( proto ) { //<S2SV> case ( PPP_ADDRESS << 8 | PPP_CONTROL ) : //<S2SV> if ( length < 4 ) //<S2SV> goto trunc ; //<S2SV> proto = EXTRACT_16BITS ( b + 2 ) ; //<S2SV> handle_ppp ( ndo , proto , b + 4 , length - 4 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> handle_ppp ( ndo , proto , b + 2 , length - 2 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> cleanup : //<S2SV> ndo -> ndo_snapend = se ; //<S2SV> free ( b ) ; //<S2SV> return ; //<S2SV> trunc : //<S2SV> ndo -> ndo_snapend = se ; //<S2SV> free ( b ) ; //<S2SV> ND_PRINT ( ( ndo , "[|ppp]" ) ) ; //<S2SV> } //<S2SV> 