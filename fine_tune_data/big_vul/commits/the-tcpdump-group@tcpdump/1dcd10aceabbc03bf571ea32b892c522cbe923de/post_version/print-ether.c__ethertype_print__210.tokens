int //<S2SV> ethertype_print ( netdissect_options * ndo , //<S2SV> u_short ether_type , const u_char * p , //<S2SV> u_int length , u_int caplen , //<S2SV> const struct lladdr_info * src , const struct lladdr_info * dst ) //<S2SV> { //<S2SV> switch ( ether_type ) { //<S2SV> case ETHERTYPE_IP : //<S2SV> ip_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_IPV6 : //<S2SV> ip6_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_ARP : //<S2SV> case ETHERTYPE_REVARP : //<S2SV> arp_print ( ndo , p , length , caplen ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_DN : //<S2SV> decnet_print ( ndo , p , length , caplen ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_ATALK : //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "et1<S2SV_blank>" ) ) ; //<S2SV> atalk_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_AARP : //<S2SV> aarp_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_IPX : //<S2SV> ND_PRINT ( ( ndo , "(NOV-ETHII)<S2SV_blank>" ) ) ; //<S2SV> ipx_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_ISO : //<S2SV> if ( length == 0 || caplen == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[|osi]" ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> isoclns_print ( ndo , p + 1 , length - 1 ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_PPPOED : //<S2SV> case ETHERTYPE_PPPOES : //<S2SV> case ETHERTYPE_PPPOED2 : //<S2SV> case ETHERTYPE_PPPOES2 : //<S2SV> pppoe_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_EAPOL : //<S2SV> eap_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_RRCP : //<S2SV> rrcp_print ( ndo , p , length , src , dst ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_PPP : //<S2SV> if ( length ) { //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>" ) ) ; //<S2SV> ppp_print ( ndo , p , length ) ; //<S2SV> } //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_MPCP : //<S2SV> mpcp_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_SLOW : //<S2SV> slow_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_CFM : //<S2SV> case ETHERTYPE_CFM_OLD : //<S2SV> cfm_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_LLDP : //<S2SV> lldp_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_NSH : //<S2SV> nsh_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_LOOPBACK : //<S2SV> loopback_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_MPLS : //<S2SV> case ETHERTYPE_MPLS_MULTI : //<S2SV> mpls_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_TIPC : //<S2SV> tipc_print ( ndo , p , length , caplen ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_MS_NLB_HB : //<S2SV> msnlb_print ( ndo , p ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_GEONET_OLD : //<S2SV> case ETHERTYPE_GEONET : //<S2SV> geonet_print ( ndo , p , length , src ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_CALM_FAST : //<S2SV> calm_fast_print ( ndo , p , length , src ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_AOE : //<S2SV> aoe_print ( ndo , p , length ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_MEDSA : //<S2SV> medsa_print ( ndo , p , length , caplen , src , dst ) ; //<S2SV> return ( 1 ) ; //<S2SV> case ETHERTYPE_LAT : //<S2SV> case ETHERTYPE_SCA : //<S2SV> case ETHERTYPE_MOPRC : //<S2SV> case ETHERTYPE_MOPDL : //<S2SV> case ETHERTYPE_IEEE1905_1 : //<S2SV> default : //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> 