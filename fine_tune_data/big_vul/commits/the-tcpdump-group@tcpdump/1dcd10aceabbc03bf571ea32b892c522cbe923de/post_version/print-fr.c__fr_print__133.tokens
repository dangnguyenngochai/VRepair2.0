u_int //<S2SV> fr_print ( netdissect_options * ndo , //<S2SV> register const u_char * p , u_int length ) //<S2SV> { //<S2SV> int ret ; //<S2SV> uint16_t extracted_ethertype ; //<S2SV> u_int dlci ; //<S2SV> u_int addr_len ; //<S2SV> uint16_t nlpid ; //<S2SV> u_int hdr_len ; //<S2SV> uint8_t flags [ 4 ] ; //<S2SV> ret = parse_q922_addr ( ndo , p , & dlci , & addr_len , flags , length ) ; //<S2SV> if ( ret == - 1 ) //<S2SV> goto trunc ; //<S2SV> if ( ret == 0 ) { //<S2SV> ND_PRINT ( ( ndo , "Q.922,<S2SV_blank>invalid<S2SV_blank>address" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ND_TCHECK ( p [ addr_len ] ) ; //<S2SV> if ( length < addr_len + 1 ) //<S2SV> goto trunc ; //<S2SV> if ( p [ addr_len ] != LLC_UI && dlci != 0 ) { //<S2SV> if ( ! ND_TTEST2 ( p [ addr_len ] , 2 ) || length < addr_len + 2 ) { //<S2SV> ND_PRINT ( ( ndo , "UI<S2SV_blank>%02x!<S2SV_blank>" , p [ addr_len ] ) ) ; //<S2SV> } else { //<S2SV> extracted_ethertype = EXTRACT_16BITS ( p + addr_len ) ; //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> fr_hdr_print ( ndo , length , addr_len , dlci , //<S2SV> flags , extracted_ethertype ) ; //<S2SV> if ( ethertype_print ( ndo , extracted_ethertype , //<S2SV> p + addr_len + ETHERTYPE_LEN , //<S2SV> length - addr_len - ETHERTYPE_LEN , //<S2SV> ndo -> ndo_snapend - p - addr_len - ETHERTYPE_LEN , //<S2SV> NULL , NULL ) == 0 ) //<S2SV> ND_PRINT ( ( ndo , "UI<S2SV_blank>%02x!<S2SV_blank>" , p [ addr_len ] ) ) ; //<S2SV> else //<S2SV> return addr_len + 2 ; //<S2SV> } //<S2SV> } //<S2SV> ND_TCHECK ( p [ addr_len + 1 ] ) ; //<S2SV> if ( length < addr_len + 2 ) //<S2SV> goto trunc ; //<S2SV> if ( p [ addr_len + 1 ] == 0 ) { //<S2SV> if ( addr_len != 3 ) //<S2SV> ND_PRINT ( ( ndo , "Pad!<S2SV_blank>" ) ) ; //<S2SV> hdr_len = addr_len + 1 + 1 + 1 ; //<S2SV> } else { //<S2SV> if ( addr_len == 3 ) //<S2SV> ND_PRINT ( ( ndo , "No<S2SV_blank>pad!<S2SV_blank>" ) ) ; //<S2SV> hdr_len = addr_len + 1 + 1 ; //<S2SV> } //<S2SV> ND_TCHECK ( p [ hdr_len - 1 ] ) ; //<S2SV> if ( length < hdr_len ) //<S2SV> goto trunc ; //<S2SV> nlpid = p [ hdr_len - 1 ] ; //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> fr_hdr_print ( ndo , length , addr_len , dlci , flags , nlpid ) ; //<S2SV> p += hdr_len ; //<S2SV> length -= hdr_len ; //<S2SV> switch ( nlpid ) { //<S2SV> case NLPID_IP : //<S2SV> ip_print ( ndo , p , length ) ; //<S2SV> break ; //<S2SV> case NLPID_IP6 : //<S2SV> ip6_print ( ndo , p , length ) ; //<S2SV> break ; //<S2SV> case NLPID_CLNP : //<S2SV> case NLPID_ESIS : //<S2SV> case NLPID_ISIS : //<S2SV> isoclns_print ( ndo , p - 1 , length + 1 ) ; //<S2SV> break ; //<S2SV> case NLPID_SNAP : //<S2SV> if ( snap_print ( ndo , p , length , ndo -> ndo_snapend - p , NULL , NULL , 0 ) == 0 ) { //<S2SV> if ( ! ndo -> ndo_eflag ) //<S2SV> fr_hdr_print ( ndo , length + hdr_len , hdr_len , //<S2SV> dlci , flags , nlpid ) ; //<S2SV> if ( ! ndo -> ndo_suppress_default_print ) //<S2SV> ND_DEFAULTPRINT ( p - hdr_len , length + hdr_len ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case NLPID_Q933 : //<S2SV> q933_print ( ndo , p , length ) ; //<S2SV> break ; //<S2SV> case NLPID_MFR : //<S2SV> frf15_print ( ndo , p , length ) ; //<S2SV> break ; //<S2SV> case NLPID_PPP : //<S2SV> ppp_print ( ndo , p , length ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ! ndo -> ndo_eflag ) //<S2SV> fr_hdr_print ( ndo , length + hdr_len , addr_len , //<S2SV> dlci , flags , nlpid ) ; //<S2SV> if ( ! ndo -> ndo_xflag ) //<S2SV> ND_DEFAULTPRINT ( p , length ) ; //<S2SV> } //<S2SV> return hdr_len ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|fr]" ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 