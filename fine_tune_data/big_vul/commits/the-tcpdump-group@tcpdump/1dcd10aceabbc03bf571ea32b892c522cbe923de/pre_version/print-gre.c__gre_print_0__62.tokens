static void //<S2SV> gre_print_0 ( netdissect_options * ndo , const u_char * bp , u_int length ) //<S2SV> { //<S2SV> u_int len = length ; //<S2SV> uint16_t flags , prot ; //<S2SV> flags = EXTRACT_16BITS ( bp ) ; //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> bittok2str ( gre_flag_values , "none" , flags ) ) ) ; //<S2SV> len -= 2 ; //<S2SV> bp += 2 ; //<S2SV> ND_TCHECK2 ( * bp , 2 ) ; //<S2SV> if ( len < 2 ) //<S2SV> goto trunc ; //<S2SV> prot = EXTRACT_16BITS ( bp ) ; //<S2SV> len -= 2 ; //<S2SV> bp += 2 ; //<S2SV> if ( ( flags & GRE_CP ) | ( flags & GRE_RP ) ) { //<S2SV> ND_TCHECK2 ( * bp , 2 ) ; //<S2SV> if ( len < 2 ) //<S2SV> goto trunc ; //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>sum<S2SV_blank>0x%x" , EXTRACT_16BITS ( bp ) ) ) ; //<S2SV> bp += 2 ; //<S2SV> len -= 2 ; //<S2SV> ND_TCHECK2 ( * bp , 2 ) ; //<S2SV> if ( len < 2 ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>off<S2SV_blank>0x%x" , EXTRACT_16BITS ( bp ) ) ) ; //<S2SV> bp += 2 ; //<S2SV> len -= 2 ; //<S2SV> } //<S2SV> if ( flags & GRE_KP ) { //<S2SV> ND_TCHECK2 ( * bp , 4 ) ; //<S2SV> if ( len < 4 ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>key=0x%x" , EXTRACT_32BITS ( bp ) ) ) ; //<S2SV> bp += 4 ; //<S2SV> len -= 4 ; //<S2SV> } //<S2SV> if ( flags & GRE_SP ) { //<S2SV> ND_TCHECK2 ( * bp , 4 ) ; //<S2SV> if ( len < 4 ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>seq<S2SV_blank>%u" , EXTRACT_32BITS ( bp ) ) ) ; //<S2SV> bp += 4 ; //<S2SV> len -= 4 ; //<S2SV> } //<S2SV> if ( flags & GRE_RP ) { //<S2SV> for ( ; ; ) { //<S2SV> uint16_t af ; //<S2SV> uint8_t sreoff ; //<S2SV> uint8_t srelen ; //<S2SV> ND_TCHECK2 ( * bp , 4 ) ; //<S2SV> if ( len < 4 ) //<S2SV> goto trunc ; //<S2SV> af = EXTRACT_16BITS ( bp ) ; //<S2SV> sreoff = * ( bp + 2 ) ; //<S2SV> srelen = * ( bp + 3 ) ; //<S2SV> bp += 4 ; //<S2SV> len -= 4 ; //<S2SV> if ( af == 0 && srelen == 0 ) //<S2SV> break ; //<S2SV> if ( ! gre_sre_print ( ndo , af , sreoff , srelen , bp , len ) ) //<S2SV> goto trunc ; //<S2SV> if ( len < srelen ) //<S2SV> goto trunc ; //<S2SV> bp += srelen ; //<S2SV> len -= srelen ; //<S2SV> } //<S2SV> } //<S2SV> if ( ndo -> ndo_eflag ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>proto<S2SV_blank>%s<S2SV_blank>(0x%04x)" , //<S2SV> tok2str ( ethertype_values , "unknown" , prot ) , //<S2SV> prot ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> if ( ndo -> ndo_vflag < 1 ) //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t" ) ) ; //<S2SV> switch ( prot ) { //<S2SV> case ETHERTYPE_IP : //<S2SV> ip_print ( ndo , bp , len ) ; //<S2SV> break ; //<S2SV> case ETHERTYPE_IPV6 : //<S2SV> ip6_print ( ndo , bp , len ) ; //<S2SV> break ; //<S2SV> case ETHERTYPE_MPLS : //<S2SV> mpls_print ( ndo , bp , len ) ; //<S2SV> break ; //<S2SV> case ETHERTYPE_IPX : //<S2SV> ipx_print ( ndo , bp , len ) ; //<S2SV> break ; //<S2SV> case ETHERTYPE_ATALK : //<S2SV> atalk_print ( ndo , bp , len ) ; //<S2SV> break ; //<S2SV> case ETHERTYPE_GRE_ISO : //<S2SV> isoclns_print ( ndo , bp , len , ndo -> ndo_snapend - bp ) ; //<S2SV> break ; //<S2SV> case ETHERTYPE_TEB : //<S2SV> ether_print ( ndo , bp , len , ndo -> ndo_snapend - bp , NULL , NULL ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "gre-proto-0x%x" , prot ) ) ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> } //<S2SV> 