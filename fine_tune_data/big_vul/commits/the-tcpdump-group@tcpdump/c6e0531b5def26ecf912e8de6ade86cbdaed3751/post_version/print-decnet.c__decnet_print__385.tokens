void //<S2SV> decnet_print ( netdissect_options * ndo , //<S2SV> register const u_char * ap , register u_int length , //<S2SV> register u_int caplen ) //<S2SV> { //<S2SV> register const union routehdr * rhp ; //<S2SV> register int mflags ; //<S2SV> int dst , src , hops ; //<S2SV> u_int nsplen , pktlen ; //<S2SV> const u_char * nspp ; //<S2SV> if ( length < sizeof ( struct shorthdr ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_TCHECK2 ( * ap , sizeof ( short ) ) ; //<S2SV> pktlen = EXTRACT_LE_16BITS ( ap ) ; //<S2SV> if ( pktlen < sizeof ( struct shorthdr ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( pktlen > length ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> length = pktlen ; //<S2SV> rhp = ( const union routehdr * ) & ( ap [ sizeof ( short ) ] ) ; //<S2SV> ND_TCHECK ( rhp -> rh_short . sh_flags ) ; //<S2SV> mflags = EXTRACT_LE_8BITS ( rhp -> rh_short . sh_flags ) ; //<S2SV> if ( mflags & RMF_PAD ) { //<S2SV> u_int padlen = mflags & RMF_PADMASK ; //<S2SV> if ( ndo -> ndo_vflag ) //<S2SV> ND_PRINT ( ( ndo , "[pad:%d]<S2SV_blank>" , padlen ) ) ; //<S2SV> if ( length < padlen + 2 ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_TCHECK2 ( ap [ sizeof ( short ) ] , padlen ) ; //<S2SV> ap += padlen ; //<S2SV> length -= padlen ; //<S2SV> caplen -= padlen ; //<S2SV> rhp = ( const union routehdr * ) & ( ap [ sizeof ( short ) ] ) ; //<S2SV> ND_TCHECK ( rhp -> rh_short . sh_flags ) ; //<S2SV> mflags = EXTRACT_LE_8BITS ( rhp -> rh_short . sh_flags ) ; //<S2SV> } //<S2SV> if ( mflags & RMF_FVER ) { //<S2SV> ND_PRINT ( ( ndo , "future-version-decnet" ) ) ; //<S2SV> ND_DEFAULTPRINT ( ap , min ( length , caplen ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( mflags & RMF_CTLMSG ) { //<S2SV> if ( ! print_decnet_ctlmsg ( ndo , rhp , length , caplen ) ) //<S2SV> goto trunc ; //<S2SV> return ; //<S2SV> } //<S2SV> switch ( mflags & RMF_MASK ) { //<S2SV> case RMF_LONG : //<S2SV> if ( length < sizeof ( struct longhdr ) ) { //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_TCHECK ( rhp -> rh_long ) ; //<S2SV> dst = //<S2SV> EXTRACT_LE_16BITS ( rhp -> rh_long . lg_dst . dne_remote . dne_nodeaddr ) ; //<S2SV> src = //<S2SV> EXTRACT_LE_16BITS ( rhp -> rh_long . lg_src . dne_remote . dne_nodeaddr ) ; //<S2SV> hops = EXTRACT_LE_8BITS ( rhp -> rh_long . lg_visits ) ; //<S2SV> nspp = & ( ap [ sizeof ( short ) + sizeof ( struct longhdr ) ] ) ; //<S2SV> nsplen = length - sizeof ( struct longhdr ) ; //<S2SV> break ; //<S2SV> case RMF_SHORT : //<S2SV> ND_TCHECK ( rhp -> rh_short ) ; //<S2SV> dst = EXTRACT_LE_16BITS ( rhp -> rh_short . sh_dst ) ; //<S2SV> src = EXTRACT_LE_16BITS ( rhp -> rh_short . sh_src ) ; //<S2SV> hops = ( EXTRACT_LE_8BITS ( rhp -> rh_short . sh_visits ) & VIS_MASK ) + 1 ; //<S2SV> nspp = & ( ap [ sizeof ( short ) + sizeof ( struct shorthdr ) ] ) ; //<S2SV> nsplen = length - sizeof ( struct shorthdr ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "unknown<S2SV_blank>message<S2SV_blank>flags<S2SV_blank>under<S2SV_blank>mask" ) ) ; //<S2SV> ND_DEFAULTPRINT ( ( const u_char * ) ap , min ( length , caplen ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>><S2SV_blank>%s<S2SV_blank>%d<S2SV_blank>" , //<S2SV> dnaddr_string ( ndo , src ) , dnaddr_string ( ndo , dst ) , pktlen ) ) ; //<S2SV> if ( ndo -> ndo_vflag ) { //<S2SV> if ( mflags & RMF_RQR ) //<S2SV> ND_PRINT ( ( ndo , "RQR<S2SV_blank>" ) ) ; //<S2SV> if ( mflags & RMF_RTS ) //<S2SV> ND_PRINT ( ( ndo , "RTS<S2SV_blank>" ) ) ; //<S2SV> if ( mflags & RMF_IE ) //<S2SV> ND_PRINT ( ( ndo , "IE<S2SV_blank>" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%d<S2SV_blank>hops<S2SV_blank>" , hops ) ) ; //<S2SV> } //<S2SV> if ( ! print_nsp ( ndo , nspp , nsplen ) ) //<S2SV> goto trunc ; //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 