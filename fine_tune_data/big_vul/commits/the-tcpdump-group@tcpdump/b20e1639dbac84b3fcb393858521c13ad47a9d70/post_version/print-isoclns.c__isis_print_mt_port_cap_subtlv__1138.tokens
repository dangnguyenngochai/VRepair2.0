static int //<S2SV> isis_print_mt_port_cap_subtlv ( netdissect_options * ndo , //<S2SV> const uint8_t * tptr , int len ) //<S2SV> { //<S2SV> int stlv_type , stlv_len ; //<S2SV> const struct isis_subtlv_spb_mcid * subtlv_spb_mcid ; //<S2SV> int i ; //<S2SV> while ( len > 2 ) //<S2SV> { //<S2SV> ND_TCHECK2 ( * tptr , 2 ) ; //<S2SV> stlv_type = * ( tptr ++ ) ; //<S2SV> stlv_len = * ( tptr ++ ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>subTLV<S2SV_blank>#%u,<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( isis_mt_port_cap_subtlv_values , "unknown" , stlv_type ) , //<S2SV> stlv_type , //<S2SV> stlv_len ) ) ; //<S2SV> len = len - 2 ; //<S2SV> if ( len < stlv_len ) //<S2SV> goto trunc ; //<S2SV> ND_TCHECK2 ( * ( tptr ) , stlv_len ) ; //<S2SV> switch ( stlv_type ) //<S2SV> { //<S2SV> case ISIS_SUBTLV_SPB_MCID : //<S2SV> { //<S2SV> if ( stlv_len < ISIS_SUBTLV_SPB_MCID_MIN_LEN ) //<S2SV> goto trunc ; //<S2SV> subtlv_spb_mcid = ( const struct isis_subtlv_spb_mcid * ) tptr ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>MCID:<S2SV_blank>" ) ) ; //<S2SV> isis_print_mcid ( ndo , & ( subtlv_spb_mcid -> mcid ) ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>AUX-MCID:<S2SV_blank>" ) ) ; //<S2SV> isis_print_mcid ( ndo , & ( subtlv_spb_mcid -> aux_mcid ) ) ; //<S2SV> tptr = tptr + ISIS_SUBTLV_SPB_MCID_MIN_LEN ; //<S2SV> len = len - ISIS_SUBTLV_SPB_MCID_MIN_LEN ; //<S2SV> stlv_len = stlv_len - ISIS_SUBTLV_SPB_MCID_MIN_LEN ; //<S2SV> break ; //<S2SV> } //<S2SV> case ISIS_SUBTLV_SPB_DIGEST : //<S2SV> { //<S2SV> if ( stlv_len < ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>RES:<S2SV_blank>%d<S2SV_blank>V:<S2SV_blank>%d<S2SV_blank>A:<S2SV_blank>%d<S2SV_blank>D:<S2SV_blank>%d" , //<S2SV> ( * ( tptr ) >> 5 ) , ( ( ( * tptr ) >> 4 ) & 0x01 ) , //<S2SV> ( ( * ( tptr ) >> 2 ) & 0x03 ) , ( ( * tptr ) & 0x03 ) ) ) ; //<S2SV> tptr ++ ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Digest:<S2SV_blank>" ) ) ; //<S2SV> for ( i = 1 ; i <= 8 ; i ++ ) //<S2SV> { //<S2SV> ND_PRINT ( ( ndo , "%08x<S2SV_blank>" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> if ( i % 4 == 0 && i != 8 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> } //<S2SV> len = len - ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ; //<S2SV> stlv_len = stlv_len - ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ; //<S2SV> break ; //<S2SV> } //<S2SV> case ISIS_SUBTLV_SPB_BVID : //<S2SV> { //<S2SV> while ( stlv_len >= ISIS_SUBTLV_SPB_BVID_MIN_LEN ) //<S2SV> { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>ECT:<S2SV_blank>%08x" , //<S2SV> EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>BVID:<S2SV_blank>%d,<S2SV_blank>U:%01x<S2SV_blank>M:%01x<S2SV_blank>" , //<S2SV> ( EXTRACT_16BITS ( tptr ) >> 4 ) , //<S2SV> ( EXTRACT_16BITS ( tptr ) >> 3 ) & 0x01 , //<S2SV> ( EXTRACT_16BITS ( tptr ) >> 2 ) & 0x01 ) ) ; //<S2SV> tptr = tptr + 2 ; //<S2SV> len = len - ISIS_SUBTLV_SPB_BVID_MIN_LEN ; //<S2SV> stlv_len = stlv_len - ISIS_SUBTLV_SPB_BVID_MIN_LEN ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> tptr += stlv_len ; //<S2SV> len -= stlv_len ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> 