static int //<S2SV> isis_print_mt_capability_subtlv ( netdissect_options * ndo , //<S2SV> const uint8_t * tptr , int len ) //<S2SV> { //<S2SV> int stlv_type , stlv_len , tmp ; //<S2SV> while ( len > 2 ) //<S2SV> { //<S2SV> stlv_type = * ( tptr ++ ) ; //<S2SV> stlv_len = * ( tptr ++ ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>subTLV<S2SV_blank>#%u,<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( isis_mt_capability_subtlv_values , "unknown" , stlv_type ) , //<S2SV> stlv_type , //<S2SV> stlv_len ) ) ; //<S2SV> len = len - 2 ; //<S2SV> switch ( stlv_type ) //<S2SV> { //<S2SV> case ISIS_SUBTLV_SPB_INSTANCE : //<S2SV> ND_TCHECK2 ( * tptr , ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>CIST<S2SV_blank>Root-ID:<S2SV_blank>%08x" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>%08x" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Path<S2SV_blank>Cost:<S2SV_blank>%08x" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Prio:<S2SV_blank>%d" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 2 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>RES:<S2SV_blank>%d" , //<S2SV> EXTRACT_16BITS ( tptr ) >> 5 ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>V:<S2SV_blank>%d" , //<S2SV> ( EXTRACT_16BITS ( tptr ) >> 4 ) & 0x0001 ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>SPSource-ID:<S2SV_blank>%d" , //<S2SV> ( EXTRACT_32BITS ( tptr ) & 0x000fffff ) ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>No<S2SV_blank>of<S2SV_blank>Trees:<S2SV_blank>%x" , * ( tptr ) ) ) ; //<S2SV> tmp = * ( tptr ++ ) ; //<S2SV> len = len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; //<S2SV> while ( tmp ) //<S2SV> { //<S2SV> ND_TCHECK2 ( * tptr , ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>U:%d,<S2SV_blank>M:%d,<S2SV_blank>A:%d,<S2SV_blank>RES:%d" , //<S2SV> * ( tptr ) >> 7 , ( * ( tptr ) >> 6 ) & 0x01 , //<S2SV> ( * ( tptr ) >> 5 ) & 0x01 , ( * ( tptr ) & 0x1f ) ) ) ; //<S2SV> tptr ++ ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>ECT:<S2SV_blank>%08x" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>BVID:<S2SV_blank>%d,<S2SV_blank>SPVID:<S2SV_blank>%d" , //<S2SV> ( EXTRACT_24BITS ( tptr ) >> 12 ) & 0x000fff , //<S2SV> EXTRACT_24BITS ( tptr ) & 0x000fff ) ) ; //<S2SV> tptr = tptr + 3 ; //<S2SV> len = len - ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ; //<S2SV> tmp -- ; //<S2SV> } //<S2SV> break ; //<S2SV> case ISIS_SUBTLV_SPBM_SI : //<S2SV> ND_TCHECK2 ( * tptr , 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>BMAC:<S2SV_blank>%08x" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> ND_PRINT ( ( ndo , "%04x" , EXTRACT_16BITS ( tptr ) ) ) ; //<S2SV> tptr = tptr + 2 ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>VID:<S2SV_blank>%d" , EXTRACT_16BITS ( tptr ) >> 12 , //<S2SV> ( EXTRACT_16BITS ( tptr ) ) & 0x0fff ) ) ; //<S2SV> tptr = tptr + 2 ; //<S2SV> len = len - 8 ; //<S2SV> stlv_len = stlv_len - 8 ; //<S2SV> while ( stlv_len >= 4 ) { //<S2SV> ND_TCHECK2 ( * tptr , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>T:<S2SV_blank>%d,<S2SV_blank>R:<S2SV_blank>%d,<S2SV_blank>RES:<S2SV_blank>%d,<S2SV_blank>ISID:<S2SV_blank>%d" , //<S2SV> ( EXTRACT_32BITS ( tptr ) >> 31 ) , //<S2SV> ( EXTRACT_32BITS ( tptr ) >> 30 ) & 0x01 , //<S2SV> ( EXTRACT_32BITS ( tptr ) >> 24 ) & 0x03f , //<S2SV> ( EXTRACT_32BITS ( tptr ) ) & 0x0ffffff ) ) ; //<S2SV> tptr = tptr + 4 ; //<S2SV> len = len - 4 ; //<S2SV> stlv_len = stlv_len - 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "\\n\\t\\t" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> 