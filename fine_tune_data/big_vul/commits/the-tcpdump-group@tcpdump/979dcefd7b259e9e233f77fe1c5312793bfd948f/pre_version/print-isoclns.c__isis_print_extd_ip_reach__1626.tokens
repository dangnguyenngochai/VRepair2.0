static int //<S2SV> isis_print_extd_ip_reach ( netdissect_options * ndo , //<S2SV> const uint8_t * tptr , const char * ident , uint16_t afi ) //<S2SV> { //<S2SV> char ident_buffer [ 20 ] ; //<S2SV> uint8_t prefix [ sizeof ( struct in6_addr ) ] ; //<S2SV> u_int metric , status_byte , bit_length , byte_length , sublen , processed , subtlvtype , subtlvlen ; //<S2SV> if ( ! ND_TTEST2 ( * tptr , 4 ) ) //<S2SV> return ( 0 ) ; //<S2SV> metric = EXTRACT_32BITS ( tptr ) ; //<S2SV> processed = 4 ; //<S2SV> tptr += 4 ; //<S2SV> if ( afi == AF_INET ) { //<S2SV> if ( ! ND_TTEST2 ( * tptr , 1 ) ) //<S2SV> return ( 0 ) ; //<S2SV> status_byte = * ( tptr ++ ) ; //<S2SV> bit_length = status_byte & 0x3f ; //<S2SV> if ( bit_length > 32 ) { //<S2SV> ND_PRINT ( ( ndo , "%sIPv4<S2SV_blank>prefix:<S2SV_blank>bad<S2SV_blank>bit<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> bit_length ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> processed ++ ; //<S2SV> } else if ( afi == AF_INET6 ) { //<S2SV> if ( ! ND_TTEST2 ( * tptr , 1 ) ) //<S2SV> return ( 0 ) ; //<S2SV> status_byte = * ( tptr ++ ) ; //<S2SV> bit_length = * ( tptr ++ ) ; //<S2SV> if ( bit_length > 128 ) { //<S2SV> ND_PRINT ( ( ndo , "%sIPv6<S2SV_blank>prefix:<S2SV_blank>bad<S2SV_blank>bit<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> ident , //<S2SV> bit_length ) ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> processed += 2 ; //<S2SV> } else //<S2SV> return ( 0 ) ; //<S2SV> byte_length = ( bit_length + 7 ) / 8 ; //<S2SV> if ( ! ND_TTEST2 ( * tptr , byte_length ) ) //<S2SV> return ( 0 ) ; //<S2SV> memset ( prefix , 0 , sizeof prefix ) ; //<S2SV> memcpy ( prefix , tptr , byte_length ) ; //<S2SV> tptr += byte_length ; //<S2SV> processed += byte_length ; //<S2SV> if ( afi == AF_INET ) //<S2SV> ND_PRINT ( ( ndo , "%sIPv4<S2SV_blank>prefix:<S2SV_blank>%15s/%u" , //<S2SV> ident , //<S2SV> ipaddr_string ( ndo , prefix ) , //<S2SV> bit_length ) ) ; //<S2SV> else if ( afi == AF_INET6 ) //<S2SV> ND_PRINT ( ( ndo , "%sIPv6<S2SV_blank>prefix:<S2SV_blank>%s/%u" , //<S2SV> ident , //<S2SV> ip6addr_string ( ndo , prefix ) , //<S2SV> bit_length ) ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Distribution:<S2SV_blank>%s,<S2SV_blank>Metric:<S2SV_blank>%u" , //<S2SV> ISIS_MASK_TLV_EXTD_IP_UPDOWN ( status_byte ) ? "down" : "up" , //<S2SV> metric ) ) ; //<S2SV> if ( afi == AF_INET && ISIS_MASK_TLV_EXTD_IP_SUBTLV ( status_byte ) ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>sub-TLVs<S2SV_blank>present" ) ) ; //<S2SV> else if ( afi == AF_INET6 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>%s%s" , //<S2SV> ISIS_MASK_TLV_EXTD_IP6_IE ( status_byte ) ? "External" : "Internal" , //<S2SV> ISIS_MASK_TLV_EXTD_IP6_SUBTLV ( status_byte ) ? ",<S2SV_blank>sub-TLVs<S2SV_blank>present" : "" ) ) ; //<S2SV> if ( ( afi == AF_INET && ISIS_MASK_TLV_EXTD_IP_SUBTLV ( status_byte ) ) //<S2SV> || ( afi == AF_INET6 && ISIS_MASK_TLV_EXTD_IP6_SUBTLV ( status_byte ) ) //<S2SV> ) { //<S2SV> if ( ! ND_TTEST2 ( * tptr , 1 ) ) //<S2SV> return ( 0 ) ; //<S2SV> sublen = * ( tptr ++ ) ; //<S2SV> processed += sublen + 1 ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(%u)" , sublen ) ) ; //<S2SV> while ( sublen > 0 ) { //<S2SV> if ( ! ND_TTEST2 ( * tptr , 2 ) ) //<S2SV> return ( 0 ) ; //<S2SV> subtlvtype = * ( tptr ++ ) ; //<S2SV> subtlvlen = * ( tptr ++ ) ; //<S2SV> snprintf ( ident_buffer , sizeof ( ident_buffer ) , "%s<S2SV_blank><S2SV_blank>" , ident ) ; //<S2SV> if ( ! isis_print_ip_reach_subtlv ( ndo , tptr , subtlvtype , subtlvlen , ident_buffer ) ) //<S2SV> return ( 0 ) ; //<S2SV> tptr += subtlvlen ; //<S2SV> sublen -= ( subtlvlen + 2 ) ; //<S2SV> } //<S2SV> } //<S2SV> return ( processed ) ; //<S2SV> } //<S2SV> 