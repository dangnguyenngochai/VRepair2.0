void //<S2SV> bootp_print ( netdissect_options * ndo , //<S2SV> register const u_char * cp , u_int length ) //<S2SV> { //<S2SV> register const struct bootp * bp ; //<S2SV> static const u_char vm_cmu [ 4 ] = VM_CMU ; //<S2SV> static const u_char vm_rfc1048 [ 4 ] = VM_RFC1048 ; //<S2SV> bp = ( const struct bootp * ) cp ; //<S2SV> ND_TCHECK ( bp -> bp_op ) ; //<S2SV> ND_PRINT ( ( ndo , "BOOTP/DHCP,<S2SV_blank>%s" , //<S2SV> tok2str ( bootp_op_values , "unknown<S2SV_blank>(0x%02x)" , bp -> bp_op ) ) ) ; //<S2SV> ND_TCHECK ( bp -> bp_hlen ) ; //<S2SV> if ( bp -> bp_htype == 1 && bp -> bp_hlen == 6 && bp -> bp_op == BOOTPREQUEST ) { //<S2SV> ND_TCHECK2 ( bp -> bp_chaddr [ 0 ] , 6 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>from<S2SV_blank>%s" , etheraddr_string ( ndo , bp -> bp_chaddr ) ) ) ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>length<S2SV_blank>%u" , length ) ) ; //<S2SV> if ( ! ndo -> ndo_vflag ) //<S2SV> return ; //<S2SV> ND_TCHECK ( bp -> bp_secs ) ; //<S2SV> if ( bp -> bp_htype != 1 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>htype<S2SV_blank>%d" , bp -> bp_htype ) ) ; //<S2SV> if ( bp -> bp_htype != 1 || bp -> bp_hlen != 6 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>hlen<S2SV_blank>%d" , bp -> bp_hlen ) ) ; //<S2SV> if ( bp -> bp_hops ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>hops<S2SV_blank>%d" , bp -> bp_hops ) ) ; //<S2SV> if ( EXTRACT_32BITS ( & bp -> bp_xid ) ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>xid<S2SV_blank>0x%x" , EXTRACT_32BITS ( & bp -> bp_xid ) ) ) ; //<S2SV> if ( EXTRACT_16BITS ( & bp -> bp_secs ) ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>secs<S2SV_blank>%d" , EXTRACT_16BITS ( & bp -> bp_secs ) ) ) ; //<S2SV> ND_TCHECK ( bp -> bp_flags ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> bittok2str ( bootp_flag_values , "none" , EXTRACT_16BITS ( & bp -> bp_flags ) ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>(0x%04x)" , EXTRACT_16BITS ( & bp -> bp_flags ) ) ) ; //<S2SV> ND_TCHECK ( bp -> bp_ciaddr ) ; //<S2SV> if ( EXTRACT_32BITS ( & bp -> bp_ciaddr . s_addr ) ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Client-IP<S2SV_blank>%s" , ipaddr_string ( ndo , & bp -> bp_ciaddr ) ) ) ; //<S2SV> ND_TCHECK ( bp -> bp_yiaddr ) ; //<S2SV> if ( EXTRACT_32BITS ( & bp -> bp_yiaddr . s_addr ) ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Your-IP<S2SV_blank>%s" , ipaddr_string ( ndo , & bp -> bp_yiaddr ) ) ) ; //<S2SV> ND_TCHECK ( bp -> bp_siaddr ) ; //<S2SV> if ( EXTRACT_32BITS ( & bp -> bp_siaddr . s_addr ) ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Server-IP<S2SV_blank>%s" , ipaddr_string ( ndo , & bp -> bp_siaddr ) ) ) ; //<S2SV> ND_TCHECK ( bp -> bp_giaddr ) ; //<S2SV> if ( EXTRACT_32BITS ( & bp -> bp_giaddr . s_addr ) ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Gateway-IP<S2SV_blank>%s" , ipaddr_string ( ndo , & bp -> bp_giaddr ) ) ) ; //<S2SV> if ( bp -> bp_htype == 1 && bp -> bp_hlen == 6 ) { //<S2SV> ND_TCHECK2 ( bp -> bp_chaddr [ 0 ] , 6 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Client-Ethernet-Address<S2SV_blank>%s" , etheraddr_string ( ndo , bp -> bp_chaddr ) ) ) ; //<S2SV> } //<S2SV> ND_TCHECK2 ( bp -> bp_sname [ 0 ] , 1 ) ; //<S2SV> if ( * bp -> bp_sname ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>sname<S2SV_blank>\\"" ) ) ; //<S2SV> if ( fn_printztn ( ndo , bp -> bp_sname , ( u_int ) sizeof bp -> bp_sname , //<S2SV> ndo -> ndo_snapend ) ) { //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr + 1 ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> } //<S2SV> ND_TCHECK2 ( bp -> bp_file [ 0 ] , 1 ) ; //<S2SV> if ( * bp -> bp_file ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>file<S2SV_blank>\\"" ) ) ; //<S2SV> if ( fn_printztn ( ndo , bp -> bp_file , ( u_int ) sizeof bp -> bp_file , //<S2SV> ndo -> ndo_snapend ) ) { //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr + 1 ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\"" ) ) ; //<S2SV> } //<S2SV> ND_TCHECK ( bp -> bp_vend [ 0 ] ) ; //<S2SV> if ( memcmp ( ( const char * ) bp -> bp_vend , vm_rfc1048 , //<S2SV> sizeof ( uint32_t ) ) == 0 ) //<S2SV> rfc1048_print ( ndo , bp -> bp_vend ) ; //<S2SV> else if ( memcmp ( ( const char * ) bp -> bp_vend , vm_cmu , //<S2SV> sizeof ( uint32_t ) ) == 0 ) //<S2SV> cmu_print ( ndo , bp -> bp_vend ) ; //<S2SV> else { //<S2SV> uint32_t ul ; //<S2SV> ul = EXTRACT_32BITS ( & bp -> bp_vend ) ; //<S2SV> if ( ul != 0 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Vendor-#0x%x" , ul ) ) ; //<S2SV> } //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "%s" , tstr ) ) ; //<S2SV> } //<S2SV> 