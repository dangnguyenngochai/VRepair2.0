void //<S2SV> ripng_print ( netdissect_options * ndo , const u_char * dat , unsigned int length ) //<S2SV> { //<S2SV> register const struct rip6 * rp = ( const struct rip6 * ) dat ; //<S2SV> register const struct netinfo6 * ni ; //<S2SV> unsigned int length_left ; //<S2SV> u_int j ; //<S2SV> ND_TCHECK ( rp -> rip6_cmd ) ; //<S2SV> switch ( rp -> rip6_cmd ) { //<S2SV> case RIP6_REQUEST : //<S2SV> length_left = length ; //<S2SV> if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) //<S2SV> goto trunc ; //<S2SV> length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; //<S2SV> j = length_left / sizeof ( * ni ) ; //<S2SV> if ( j == 1 ) { //<S2SV> ND_TCHECK ( rp -> rip6_nets ) ; //<S2SV> if ( rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 //<S2SV> && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ripng-req<S2SV_blank>dump" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( j * sizeof ( * ni ) != length_left ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ripng-req<S2SV_blank>%u[%u]:" , j , length ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ripng-req<S2SV_blank>%u:" , j ) ) ; //<S2SV> for ( ni = rp -> rip6_nets ; length_left >= sizeof ( * ni ) ; //<S2SV> length_left -= sizeof ( * ni ) , ++ ni ) { //<S2SV> ND_TCHECK ( * ni ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> rip6_entry_print ( ndo , ni , 0 ) ; //<S2SV> } //<S2SV> if ( length_left != 0 ) //<S2SV> goto trunc ; //<S2SV> break ; //<S2SV> case RIP6_RESPONSE : //<S2SV> length_left = length ; //<S2SV> if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) //<S2SV> goto trunc ; //<S2SV> length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; //<S2SV> j = length_left / sizeof ( * ni ) ; //<S2SV> if ( j * sizeof ( * ni ) != length_left ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ripng-resp<S2SV_blank>%d[%u]:" , j , length ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ripng-resp<S2SV_blank>%d:" , j ) ) ; //<S2SV> for ( ni = rp -> rip6_nets ; length_left >= sizeof ( * ni ) ; //<S2SV> length_left -= sizeof ( * ni ) , ++ ni ) { //<S2SV> ND_TCHECK ( * ni ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t" ) ) ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>" ) ) ; //<S2SV> rip6_entry_print ( ndo , ni , ni -> rip6_metric ) ; //<S2SV> } //<S2SV> if ( length_left != 0 ) //<S2SV> goto trunc ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>ripng-%d<S2SV_blank>??<S2SV_blank>%u" , rp -> rip6_cmd , length ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_TCHECK ( rp -> rip6_vers ) ; //<S2SV> if ( rp -> rip6_vers != RIP6_VERSION ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>[vers<S2SV_blank>%d]" , rp -> rip6_vers ) ) ; //<S2SV> return ; //<S2SV> trunc : //<S2SV> ND_PRINT ( ( ndo , "[|ripng]" ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 