static int //<S2SV> bgp_attr_print ( netdissect_options * ndo , //<S2SV> u_int atype , const u_char * pptr , u_int len ) //<S2SV> { //<S2SV> int i ; //<S2SV> uint16_t af ; //<S2SV> uint8_t safi , snpa , nhlen ; //<S2SV> union { //<S2SV> float f ; //<S2SV> uint32_t i ; //<S2SV> } bw ; //<S2SV> int advance ; //<S2SV> u_int tlen ; //<S2SV> const u_char * tptr ; //<S2SV> char buf [ MAXHOSTNAMELEN + 100 ] ; //<S2SV> int as_size ; //<S2SV> tptr = pptr ; //<S2SV> tlen = len ; //<S2SV> switch ( atype ) { //<S2SV> case BGPTYPE_ORIGIN : //<S2SV> if ( len != 1 ) //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> else { //<S2SV> ND_TCHECK ( * tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tok2str ( bgp_origin_values , //<S2SV> "Unknown<S2SV_blank>Origin<S2SV_blank>Typecode" , //<S2SV> tptr [ 0 ] ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_AS4_PATH : //<S2SV> case BGPTYPE_AS_PATH : //<S2SV> if ( len % 2 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! len ) { //<S2SV> ND_PRINT ( ( ndo , "empty" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> as_size = bgp_attr_get_as_size ( ndo , atype , pptr , len ) ; //<S2SV> while ( tptr < pptr + len ) { //<S2SV> ND_TCHECK ( tptr [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tok2str ( bgp_as_path_segment_open_values , //<S2SV> "?" , tptr [ 0 ] ) ) ) ; //<S2SV> ND_TCHECK ( tptr [ 1 ] ) ; //<S2SV> for ( i = 0 ; i < tptr [ 1 ] * as_size ; i += as_size ) { //<S2SV> ND_TCHECK2 ( tptr [ 2 + i ] , as_size ) ; //<S2SV> ND_PRINT ( ( ndo , "%s<S2SV_blank>" , //<S2SV> as_printf ( ndo , astostr , sizeof ( astostr ) , //<S2SV> as_size == 2 ? //<S2SV> EXTRACT_16BITS ( & tptr [ 2 + i ] ) : //<S2SV> EXTRACT_32BITS ( & tptr [ 2 + i ] ) ) ) ) ; //<S2SV> } //<S2SV> ND_TCHECK ( tptr [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , tok2str ( bgp_as_path_segment_close_values , //<S2SV> "?" , tptr [ 0 ] ) ) ) ; //<S2SV> ND_TCHECK ( tptr [ 1 ] ) ; //<S2SV> tptr += 2 + tptr [ 1 ] * as_size ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_NEXT_HOP : //<S2SV> if ( len != 4 ) //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_MULTI_EXIT_DISC : //<S2SV> case BGPTYPE_LOCAL_PREF : //<S2SV> if ( len != 4 ) //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "%u" , EXTRACT_32BITS ( tptr ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_ATOMIC_AGGREGATE : //<S2SV> if ( len != 0 ) //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> case BGPTYPE_AGGREGATOR : //<S2SV> if ( len != 6 && len != 8 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , len ) ; //<S2SV> if ( len == 6 ) { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>AS<S2SV_blank>#%s,<S2SV_blank>origin<S2SV_blank>%s" , //<S2SV> as_printf ( ndo , astostr , sizeof ( astostr ) , EXTRACT_16BITS ( tptr ) ) , //<S2SV> ipaddr_string ( ndo , tptr + 2 ) ) ) ; //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>AS<S2SV_blank>#%s,<S2SV_blank>origin<S2SV_blank>%s" , //<S2SV> as_printf ( ndo , astostr , sizeof ( astostr ) , //<S2SV> EXTRACT_32BITS ( tptr ) ) , ipaddr_string ( ndo , tptr + 4 ) ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_AGGREGATOR4 : //<S2SV> if ( len != 8 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>AS<S2SV_blank>#%s,<S2SV_blank>origin<S2SV_blank>%s" , //<S2SV> as_printf ( ndo , astostr , sizeof ( astostr ) , EXTRACT_32BITS ( tptr ) ) , //<S2SV> ipaddr_string ( ndo , tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case BGPTYPE_COMMUNITIES : //<S2SV> if ( len % 4 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> while ( tlen > 0 ) { //<S2SV> uint32_t comm ; //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 4 ) ; //<S2SV> comm = EXTRACT_32BITS ( tptr ) ; //<S2SV> switch ( comm ) { //<S2SV> case BGP_COMMUNITY_NO_EXPORT : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>NO_EXPORT" ) ) ; //<S2SV> break ; //<S2SV> case BGP_COMMUNITY_NO_ADVERT : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>NO_ADVERTISE" ) ) ; //<S2SV> break ; //<S2SV> case BGP_COMMUNITY_NO_EXPORT_SUBCONFED : //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>NO_EXPORT_SUBCONFED" ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_PRINT ( ( ndo , "%u:%u%s" , //<S2SV> ( comm >> 16 ) & 0xffff , //<S2SV> comm & 0xffff , //<S2SV> ( tlen > 4 ) ? ",<S2SV_blank>" : "" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tlen -= 4 ; //<S2SV> tptr += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_ORIGINATOR_ID : //<S2SV> if ( len != 4 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> break ; //<S2SV> case BGPTYPE_CLUSTER_LIST : //<S2SV> if ( len % 4 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> while ( tlen > 0 ) { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "%s%s" , //<S2SV> ipaddr_string ( ndo , tptr ) , //<S2SV> ( tlen > 4 ) ? ",<S2SV_blank>" : "" ) ) ; //<S2SV> tlen -= 4 ; //<S2SV> tptr += 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_MP_REACH_NLRI : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 3 ) ; //<S2SV> af = EXTRACT_16BITS ( tptr ) ; //<S2SV> safi = tptr [ 2 ] ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>AFI:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>%sSAFI:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( af_values , "Unknown<S2SV_blank>AFI" , af ) , //<S2SV> af , //<S2SV> ( safi > 128 ) ? "vendor<S2SV_blank>specific<S2SV_blank>" : "" , //<S2SV> tok2str ( bgp_safi_values , "Unknown<S2SV_blank>SAFI" , safi ) , //<S2SV> safi ) ) ; //<S2SV> switch ( af << 8 | safi ) { //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_LABUNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_RT_ROUTING_INFO ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST_VPN ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MDT ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_LABUNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> case ( AFNUM_VPLS << 8 | SAFNUM_VPLS ) : //<S2SV> break ; //<S2SV> default : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , tlen ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>no<S2SV_blank>AFI<S2SV_blank>%u<S2SV_blank>/<S2SV_blank>SAFI<S2SV_blank>%u<S2SV_blank>decoder" , af , safi ) ) ; //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlen ) ; //<S2SV> goto done ; //<S2SV> break ; //<S2SV> } //<S2SV> tptr += 3 ; //<S2SV> ND_TCHECK ( tptr [ 0 ] ) ; //<S2SV> nhlen = tptr [ 0 ] ; //<S2SV> tlen = nhlen ; //<S2SV> tptr ++ ; //<S2SV> if ( tlen ) { //<S2SV> int nnh = 0 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>nexthop:<S2SV_blank>" ) ) ; //<S2SV> while ( tlen > 0 ) { //<S2SV> if ( nnh ++ > 0 ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>" ) ) ; //<S2SV> } //<S2SV> switch ( af << 8 | safi ) { //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_LABUNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_RT_ROUTING_INFO ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST_VPN ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MDT ) : //<S2SV> if ( tlen < ( int ) sizeof ( struct in_addr ) ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> tlen = 0 ; //<S2SV> } else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , sizeof ( struct in_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> tlen -= sizeof ( struct in_addr ) ; //<S2SV> tptr += sizeof ( struct in_addr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> if ( tlen < ( int ) ( sizeof ( struct in_addr ) + BGP_VPN_RD_LEN ) ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> tlen = 0 ; //<S2SV> } else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , sizeof ( struct in_addr ) + BGP_VPN_RD_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "RD:<S2SV_blank>%s,<S2SV_blank>%s" , //<S2SV> bgp_vpn_rd_print ( ndo , tptr ) , //<S2SV> ipaddr_string ( ndo , tptr + BGP_VPN_RD_LEN ) ) ) ; //<S2SV> tlen -= ( sizeof ( struct in_addr ) + BGP_VPN_RD_LEN ) ; //<S2SV> tptr += ( sizeof ( struct in_addr ) + BGP_VPN_RD_LEN ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_LABUNICAST ) : //<S2SV> if ( tlen < ( int ) sizeof ( struct in6_addr ) ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> tlen = 0 ; //<S2SV> } else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , sizeof ( struct in6_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ip6addr_string ( ndo , tptr ) ) ) ; //<S2SV> tlen -= sizeof ( struct in6_addr ) ; //<S2SV> tptr += sizeof ( struct in6_addr ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> if ( tlen < ( int ) ( sizeof ( struct in6_addr ) + BGP_VPN_RD_LEN ) ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> tlen = 0 ; //<S2SV> } else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , sizeof ( struct in6_addr ) + BGP_VPN_RD_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "RD:<S2SV_blank>%s,<S2SV_blank>%s" , //<S2SV> bgp_vpn_rd_print ( ndo , tptr ) , //<S2SV> ip6addr_string ( ndo , tptr + BGP_VPN_RD_LEN ) ) ) ; //<S2SV> tlen -= ( sizeof ( struct in6_addr ) + BGP_VPN_RD_LEN ) ; //<S2SV> tptr += ( sizeof ( struct in6_addr ) + BGP_VPN_RD_LEN ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ( AFNUM_VPLS << 8 | SAFNUM_VPLS ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> if ( tlen < ( int ) sizeof ( struct in_addr ) ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> tlen = 0 ; //<S2SV> } else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , sizeof ( struct in_addr ) ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> tlen -= ( sizeof ( struct in_addr ) ) ; //<S2SV> tptr += ( sizeof ( struct in_addr ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , tlen ) ; //<S2SV> ND_PRINT ( ( ndo , "%s" , isonsap_string ( ndo , tptr , tlen ) ) ) ; //<S2SV> tptr += tlen ; //<S2SV> tlen = 0 ; //<S2SV> break ; //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> if ( tlen < BGP_VPN_RD_LEN + 1 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> tlen = 0 ; //<S2SV> } else { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , tlen ) ; //<S2SV> ND_PRINT ( ( ndo , "RD:<S2SV_blank>%s,<S2SV_blank>%s" , //<S2SV> bgp_vpn_rd_print ( ndo , tptr ) , //<S2SV> isonsap_string ( ndo , tptr + BGP_VPN_RD_LEN , tlen - BGP_VPN_RD_LEN ) ) ) ; //<S2SV> if ( EXTRACT_32BITS ( tptr + BGP_VPN_RD_LEN ) == 0x47000601 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>=<S2SV_blank>%s" , ipaddr_string ( ndo , tptr + BGP_VPN_RD_LEN + 4 ) ) ) ; //<S2SV> else if ( EXTRACT_24BITS ( tptr + BGP_VPN_RD_LEN ) == 0x350000 ) //<S2SV> ND_PRINT ( ( ndo , "<S2SV_blank>=<S2SV_blank>%s" , ip6addr_string ( ndo , tptr + BGP_VPN_RD_LEN + 3 ) ) ) ; //<S2SV> tptr += tlen ; //<S2SV> tlen = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , tlen ) ; //<S2SV> ND_PRINT ( ( ndo , "no<S2SV_blank>AFI<S2SV_blank>%u/SAFI<S2SV_blank>%u<S2SV_blank>decoder" , af , safi ) ) ; //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlen ) ; //<S2SV> tptr += tlen ; //<S2SV> tlen = 0 ; //<S2SV> goto done ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>nh-length:<S2SV_blank>%u" , nhlen ) ) ; //<S2SV> tptr += tlen ; //<S2SV> ND_TCHECK ( tptr [ 0 ] ) ; //<S2SV> snpa = tptr [ 0 ] ; //<S2SV> tptr ++ ; //<S2SV> if ( snpa ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%u<S2SV_blank>SNPA" , snpa ) ) ; //<S2SV> for ( ; snpa > 0 ; snpa -- ) { //<S2SV> ND_TCHECK ( tptr [ 0 ] ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%d<S2SV_blank>bytes" , tptr [ 0 ] ) ) ; //<S2SV> tptr += tptr [ 0 ] + 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>no<S2SV_blank>SNPA" ) ) ; //<S2SV> } //<S2SV> while ( tptr < pptr + len ) { //<S2SV> switch ( af << 8 | safi ) { //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> advance = decode_prefix4 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_LABUNICAST ) : //<S2SV> advance = decode_labeled_prefix4 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_prefix4 ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_RT_ROUTING_INFO ) : //<S2SV> advance = decode_rt_routing_info ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST_VPN ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_MULTICAST_VPN ) : //<S2SV> advance = decode_multicast_vpn ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MDT ) : //<S2SV> advance = decode_mdt_vpn_nlri ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> advance = decode_prefix6 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_LABUNICAST ) : //<S2SV> advance = decode_labeled_prefix6 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_prefix6 ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_VPLS << 8 | SAFNUM_VPLS ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_l2 ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> advance = decode_clnp_prefix ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_clnp_prefix ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_TCHECK2 ( * tptr , tlen ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>no<S2SV_blank>AFI<S2SV_blank>%u<S2SV_blank>/<S2SV_blank>SAFI<S2SV_blank>%u<S2SV_blank>decoder" , af , safi ) ) ; //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlen ) ; //<S2SV> advance = 0 ; //<S2SV> tptr = pptr + len ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( advance < 0 ) //<S2SV> break ; //<S2SV> tptr += advance ; //<S2SV> } //<S2SV> done : //<S2SV> break ; //<S2SV> case BGPTYPE_MP_UNREACH_NLRI : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , BGP_MP_NLRI_MINSIZE ) ; //<S2SV> af = EXTRACT_16BITS ( tptr ) ; //<S2SV> safi = tptr [ 2 ] ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>AFI:<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>%sSAFI:<S2SV_blank>%s<S2SV_blank>(%u)" , //<S2SV> tok2str ( af_values , "Unknown<S2SV_blank>AFI" , af ) , //<S2SV> af , //<S2SV> ( safi > 128 ) ? "vendor<S2SV_blank>specific<S2SV_blank>" : "" , //<S2SV> tok2str ( bgp_safi_values , "Unknown<S2SV_blank>SAFI" , safi ) , //<S2SV> safi ) ) ; //<S2SV> if ( len == BGP_MP_NLRI_MINSIZE ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>End-of-Rib<S2SV_blank>Marker<S2SV_blank>(empty<S2SV_blank>NLRI)" ) ) ; //<S2SV> tptr += 3 ; //<S2SV> while ( tptr < pptr + len ) { //<S2SV> switch ( af << 8 | safi ) { //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> advance = decode_prefix4 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_LABUNICAST ) : //<S2SV> advance = decode_labeled_prefix4 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_prefix4 ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> advance = decode_prefix6 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_LABUNICAST ) : //<S2SV> advance = decode_labeled_prefix6 ( ndo , tptr , len , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else if ( advance == - 3 ) //<S2SV> break ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_prefix6 ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_VPLS << 8 | SAFNUM_VPLS ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_L2VPN << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_l2 ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_MULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_UNIMULTICAST ) : //<S2SV> advance = decode_clnp_prefix ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNMULTICAST ) : //<S2SV> case ( AFNUM_NSAP << 8 | SAFNUM_VPNUNIMULTICAST ) : //<S2SV> advance = decode_labeled_vpn_clnp_prefix ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MDT ) : //<S2SV> advance = decode_mdt_vpn_nlri ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> case ( AFNUM_INET << 8 | SAFNUM_MULTICAST_VPN ) : //<S2SV> case ( AFNUM_INET6 << 8 | SAFNUM_MULTICAST_VPN ) : //<S2SV> advance = decode_multicast_vpn ( ndo , tptr , buf , sizeof ( buf ) ) ; //<S2SV> if ( advance == - 1 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(illegal<S2SV_blank>prefix<S2SV_blank>length)" ) ) ; //<S2SV> else if ( advance == - 2 ) //<S2SV> goto trunc ; //<S2SV> else //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , buf ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_TCHECK2 ( * ( tptr - 3 ) , tlen ) ; //<S2SV> ND_PRINT ( ( ndo , "no<S2SV_blank>AFI<S2SV_blank>%u<S2SV_blank>/<S2SV_blank>SAFI<S2SV_blank>%u<S2SV_blank>decoder" , af , safi ) ) ; //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , tptr - 3 , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlen ) ; //<S2SV> advance = 0 ; //<S2SV> tptr = pptr + len ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( advance < 0 ) //<S2SV> break ; //<S2SV> tptr += advance ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_EXTD_COMMUNITIES : //<S2SV> if ( len % 8 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> while ( tlen > 0 ) { //<S2SV> uint16_t extd_comm ; //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 2 ) ; //<S2SV> extd_comm = EXTRACT_16BITS ( tptr ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>(0x%04x),<S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> tok2str ( bgp_extd_comm_subtype_values , //<S2SV> "unknown<S2SV_blank>extd<S2SV_blank>community<S2SV_blank>typecode" , //<S2SV> extd_comm ) , //<S2SV> extd_comm , //<S2SV> bittok2str ( bgp_extd_comm_flag_values , "none" , extd_comm ) ) ) ; //<S2SV> ND_TCHECK2 ( * ( tptr + 2 ) , 6 ) ; //<S2SV> switch ( extd_comm ) { //<S2SV> case BGP_EXT_COM_RT_0 : //<S2SV> case BGP_EXT_COM_RO_0 : //<S2SV> case BGP_EXT_COM_L2VPN_RT_0 : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%u:%u<S2SV_blank>(=<S2SV_blank>%s)" , //<S2SV> EXTRACT_16BITS ( tptr + 2 ) , //<S2SV> EXTRACT_32BITS ( tptr + 4 ) , //<S2SV> ipaddr_string ( ndo , tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_EXT_COM_RT_1 : //<S2SV> case BGP_EXT_COM_RO_1 : //<S2SV> case BGP_EXT_COM_L2VPN_RT_1 : //<S2SV> case BGP_EXT_COM_VRF_RT_IMP : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s:%u" , //<S2SV> ipaddr_string ( ndo , tptr + 2 ) , //<S2SV> EXTRACT_16BITS ( tptr + 6 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_EXT_COM_RT_2 : //<S2SV> case BGP_EXT_COM_RO_2 : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s:%u" , //<S2SV> as_printf ( ndo , astostr , sizeof ( astostr ) , //<S2SV> EXTRACT_32BITS ( tptr + 2 ) ) , EXTRACT_16BITS ( tptr + 6 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_EXT_COM_LINKBAND : //<S2SV> bw . i = EXTRACT_32BITS ( tptr + 2 ) ; //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>bandwidth:<S2SV_blank>%.3f<S2SV_blank>Mbps" , //<S2SV> bw . f * 8 / 1000000 ) ) ; //<S2SV> break ; //<S2SV> case BGP_EXT_COM_VPN_ORIGIN : //<S2SV> case BGP_EXT_COM_VPN_ORIGIN2 : //<S2SV> case BGP_EXT_COM_VPN_ORIGIN3 : //<S2SV> case BGP_EXT_COM_VPN_ORIGIN4 : //<S2SV> case BGP_EXT_COM_OSPF_RID : //<S2SV> case BGP_EXT_COM_OSPF_RID2 : //<S2SV> ND_PRINT ( ( ndo , "%s" , ipaddr_string ( ndo , tptr + 2 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_EXT_COM_OSPF_RTYPE : //<S2SV> case BGP_EXT_COM_OSPF_RTYPE2 : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>area:%s,<S2SV_blank>router-type:%s,<S2SV_blank>metric-type:%s%s" , //<S2SV> ipaddr_string ( ndo , tptr + 2 ) , //<S2SV> tok2str ( bgp_extd_comm_ospf_rtype_values , //<S2SV> "unknown<S2SV_blank>(0x%02x)" , //<S2SV> * ( tptr + 6 ) ) , //<S2SV> ( * ( tptr + 7 ) & BGP_OSPF_RTYPE_METRIC_TYPE ) ? "E2" : "" , //<S2SV> ( ( * ( tptr + 6 ) == BGP_OSPF_RTYPE_EXT ) || ( * ( tptr + 6 ) == BGP_OSPF_RTYPE_NSSA ) ) ? "E1" : "" ) ) ; //<S2SV> break ; //<S2SV> case BGP_EXT_COM_L2INFO : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>%s<S2SV_blank>Control<S2SV_blank>Flags<S2SV_blank>[0x%02x]:MTU<S2SV_blank>%u" , //<S2SV> tok2str ( l2vpn_encaps_values , //<S2SV> "unknown<S2SV_blank>encaps" , //<S2SV> * ( tptr + 2 ) ) , //<S2SV> * ( tptr + 3 ) , //<S2SV> EXTRACT_16BITS ( tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_EXT_COM_SOURCE_AS : //<S2SV> ND_PRINT ( ( ndo , ":<S2SV_blank>AS<S2SV_blank>%u" , EXTRACT_16BITS ( tptr + 2 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ND_TCHECK2 ( * tptr , 8 ) ; //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , 8 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> tlen -= 8 ; //<S2SV> tptr += 8 ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_PMSI_TUNNEL : //<S2SV> { //<S2SV> uint8_t tunnel_type , flags ; //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 5 ) ; //<S2SV> tunnel_type = * ( tptr + 1 ) ; //<S2SV> flags = * tptr ; //<S2SV> tlen = len ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Tunnel-type<S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>Flags<S2SV_blank>[%s],<S2SV_blank>MPLS<S2SV_blank>Label<S2SV_blank>%u" , //<S2SV> tok2str ( bgp_pmsi_tunnel_values , "Unknown" , tunnel_type ) , //<S2SV> tunnel_type , //<S2SV> bittok2str ( bgp_pmsi_flag_values , "none" , flags ) , //<S2SV> EXTRACT_24BITS ( tptr + 2 ) >> 4 ) ) ; //<S2SV> tptr += 5 ; //<S2SV> tlen -= 5 ; //<S2SV> switch ( tunnel_type ) { //<S2SV> case BGP_PMSI_TUNNEL_PIM_SM : //<S2SV> case BGP_PMSI_TUNNEL_PIM_BIDIR : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Sender<S2SV_blank>%s,<S2SV_blank>P-Group<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , tptr ) , //<S2SV> ipaddr_string ( ndo , tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_PMSI_TUNNEL_PIM_SSM : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Root-Node<S2SV_blank>%s,<S2SV_blank>P-Group<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , tptr ) , //<S2SV> ipaddr_string ( ndo , tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_PMSI_TUNNEL_INGRESS : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 4 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Tunnel-Endpoint<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , tptr ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_PMSI_TUNNEL_LDP_P2MP : //<S2SV> case BGP_PMSI_TUNNEL_LDP_MP2MP : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Root-Node<S2SV_blank>%s,<S2SV_blank>LSP-ID<S2SV_blank>0x%08x" , //<S2SV> ipaddr_string ( ndo , tptr ) , //<S2SV> EXTRACT_32BITS ( tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> case BGP_PMSI_TUNNEL_RSVP_P2MP : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 8 ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Extended-Tunnel-ID<S2SV_blank>%s,<S2SV_blank>P2MP-ID<S2SV_blank>0x%08x" , //<S2SV> ipaddr_string ( ndo , tptr ) , //<S2SV> EXTRACT_32BITS ( tptr + 4 ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) { //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , tlen ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case BGPTYPE_AIGP : //<S2SV> { //<S2SV> uint8_t type ; //<S2SV> uint16_t length ; //<S2SV> tlen = len ; //<S2SV> while ( tlen >= 3 ) { //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 3 ) ; //<S2SV> type = * tptr ; //<S2SV> length = EXTRACT_16BITS ( tptr + 1 ) ; //<S2SV> tptr += 3 ; //<S2SV> tlen -= 3 ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>TLV<S2SV_blank>(%u),<S2SV_blank>length<S2SV_blank>%u" , //<S2SV> tok2str ( bgp_aigp_values , "Unknown" , type ) , //<S2SV> type , length ) ) ; //<S2SV> if ( length < 3 ) //<S2SV> goto trunc ; //<S2SV> length -= 3 ; //<S2SV> ND_TCHECK2 ( tptr [ 3 ] , length ) ; //<S2SV> switch ( type ) { //<S2SV> case BGP_AIGP_TLV : //<S2SV> if ( length < 8 ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>metric<S2SV_blank>%" PRIu64 , //<S2SV> EXTRACT_64BITS ( tptr ) ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ndo -> ndo_vflag <= 1 ) { //<S2SV> print_unknown_data ( ndo , tptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , length ) ; //<S2SV> } //<S2SV> } //<S2SV> tptr += length ; //<S2SV> tlen -= length ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case BGPTYPE_ATTR_SET : //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 4 ) ; //<S2SV> if ( len < 4 ) //<S2SV> goto trunc ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Origin<S2SV_blank>AS:<S2SV_blank>%s" , //<S2SV> as_printf ( ndo , astostr , sizeof ( astostr ) , EXTRACT_32BITS ( tptr ) ) ) ) ; //<S2SV> tptr += 4 ; //<S2SV> len -= 4 ; //<S2SV> while ( len ) { //<S2SV> u_int aflags , alenlen , alen ; //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , 2 ) ; //<S2SV> if ( len < 2 ) //<S2SV> goto trunc ; //<S2SV> aflags = * tptr ; //<S2SV> atype = * ( tptr + 1 ) ; //<S2SV> tptr += 2 ; //<S2SV> len -= 2 ; //<S2SV> alenlen = bgp_attr_lenlen ( aflags , tptr ) ; //<S2SV> ND_TCHECK2 ( tptr [ 0 ] , alenlen ) ; //<S2SV> if ( len < alenlen ) //<S2SV> goto trunc ; //<S2SV> alen = bgp_attr_len ( aflags , tptr ) ; //<S2SV> tptr += alenlen ; //<S2SV> len -= alenlen ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s<S2SV_blank>(%u),<S2SV_blank>length:<S2SV_blank>%u" , //<S2SV> tok2str ( bgp_attr_values , //<S2SV> "Unknown<S2SV_blank>Attribute" , atype ) , //<S2SV> atype , //<S2SV> alen ) ) ; //<S2SV> if ( aflags ) { //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Flags<S2SV_blank>[%s%s%s%s" , //<S2SV> aflags & 0x80 ? "O" : "" , //<S2SV> aflags & 0x40 ? "T" : "" , //<S2SV> aflags & 0x20 ? "P" : "" , //<S2SV> aflags & 0x10 ? "E" : "" ) ) ; //<S2SV> if ( aflags & 0xf ) //<S2SV> ND_PRINT ( ( ndo , "+%x" , aflags & 0xf ) ) ; //<S2SV> ND_PRINT ( ( ndo , "]:<S2SV_blank>" ) ) ; //<S2SV> } //<S2SV> if ( ! bgp_attr_print ( ndo , atype , tptr , alen ) ) //<S2SV> return 0 ; //<S2SV> tptr += alen ; //<S2SV> len -= alen ; //<S2SV> } //<S2SV> break ; //<S2SV> case BGPTYPE_LARGE_COMMUNITY : //<S2SV> if ( len == 0 || len % 12 ) { //<S2SV> ND_PRINT ( ( ndo , "invalid<S2SV_blank>len" ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ) ; //<S2SV> while ( len > 0 ) { //<S2SV> ND_TCHECK2 ( * tptr , 12 ) ; //<S2SV> ND_PRINT ( ( ndo , "%u:%u:%u%s" , //<S2SV> EXTRACT_32BITS ( tptr ) , //<S2SV> EXTRACT_32BITS ( tptr + 4 ) , //<S2SV> EXTRACT_32BITS ( tptr + 8 ) , //<S2SV> ( len > 12 ) ? ",<S2SV_blank>" : "" ) ) ; //<S2SV> tptr += 12 ; //<S2SV> len -= 12 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> ND_TCHECK2 ( * pptr , len ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>no<S2SV_blank>Attribute<S2SV_blank>%u<S2SV_blank>decoder" , atype ) ) ; //<S2SV> if ( ndo -> ndo_vflag <= 1 ) //<S2SV> print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ndo -> ndo_vflag > 1 && len ) { //<S2SV> ND_TCHECK2 ( * pptr , len ) ; //<S2SV> print_unknown_data ( ndo , pptr , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , len ) ; //<S2SV> } //<S2SV> return 1 ; //<S2SV> trunc : //<S2SV> return 0 ; //<S2SV> } //<S2SV> 