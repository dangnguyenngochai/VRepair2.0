static int //<S2SV> ospf6_decode_v3 ( netdissect_options * ndo , //<S2SV> register const struct ospf6hdr * op , //<S2SV> register const u_char * dataend ) //<S2SV> { //<S2SV> register const rtrid_t * ap ; //<S2SV> register const struct lsr6 * lsrp ; //<S2SV> register const struct lsa6_hdr * lshp ; //<S2SV> register const struct lsa6 * lsap ; //<S2SV> register int i ; //<S2SV> switch ( op -> ospf6_type ) { //<S2SV> case OSPF_TYPE_HELLO : { //<S2SV> register const struct hello6 * hellop = ( const struct hello6 * ) ( ( const uint8_t * ) op + OSPF6HDR_LEN ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tOptions<S2SV_blank>[%s]" , //<S2SV> bittok2str ( ospf6_option_values , "none" , //<S2SV> EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; //<S2SV> ND_TCHECK ( hellop -> hello_deadint ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Hello<S2SV_blank>Timer<S2SV_blank>%us,<S2SV_blank>Dead<S2SV_blank>Timer<S2SV_blank>%us,<S2SV_blank>Interface-ID<S2SV_blank>%s,<S2SV_blank>Priority<S2SV_blank>%u" , //<S2SV> EXTRACT_16BITS ( & hellop -> hello_helloint ) , //<S2SV> EXTRACT_16BITS ( & hellop -> hello_deadint ) , //<S2SV> ipaddr_string ( ndo , & hellop -> hello_ifid ) , //<S2SV> hellop -> hello_priority ) ) ; //<S2SV> ND_TCHECK ( hellop -> hello_dr ) ; //<S2SV> if ( EXTRACT_32BITS ( & hellop -> hello_dr ) != 0 ) //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Designated<S2SV_blank>Router<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , & hellop -> hello_dr ) ) ) ; //<S2SV> ND_TCHECK ( hellop -> hello_bdr ) ; //<S2SV> if ( EXTRACT_32BITS ( & hellop -> hello_bdr ) != 0 ) //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>Backup<S2SV_blank>Designated<S2SV_blank>Router<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , & hellop -> hello_bdr ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Neighbor<S2SV_blank>List:" ) ) ; //<S2SV> ap = hellop -> hello_neighbor ; //<S2SV> while ( ( const u_char * ) ap < dataend ) { //<S2SV> ND_TCHECK ( * ap ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s" , ipaddr_string ( ndo , ap ) ) ) ; //<S2SV> ++ ap ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case OSPF_TYPE_DD : { //<S2SV> register const struct dd6 * ddp = ( const struct dd6 * ) ( ( const uint8_t * ) op + OSPF6HDR_LEN ) ; //<S2SV> ND_TCHECK ( ddp -> db_options ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\tOptions<S2SV_blank>[%s]" , //<S2SV> bittok2str ( ospf6_option_values , "none" , //<S2SV> EXTRACT_32BITS ( & ddp -> db_options ) ) ) ) ; //<S2SV> ND_TCHECK ( ddp -> db_flags ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>DD<S2SV_blank>Flags<S2SV_blank>[%s]" , //<S2SV> bittok2str ( ospf6_dd_flag_values , "none" , ddp -> db_flags ) ) ) ; //<S2SV> ND_TCHECK ( ddp -> db_seq ) ; //<S2SV> ND_PRINT ( ( ndo , ",<S2SV_blank>MTU<S2SV_blank>%u,<S2SV_blank>DD-Sequence<S2SV_blank>0x%08x" , //<S2SV> EXTRACT_16BITS ( & ddp -> db_mtu ) , //<S2SV> EXTRACT_32BITS ( & ddp -> db_seq ) ) ) ; //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> lshp = ddp -> db_lshdr ; //<S2SV> while ( ( const u_char * ) lshp < dataend ) { //<S2SV> if ( ospf6_print_lshdr ( ndo , lshp ++ , dataend ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case OSPF_TYPE_LS_REQ : //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> lsrp = ( const struct lsr6 * ) ( ( const uint8_t * ) op + OSPF6HDR_LEN ) ; //<S2SV> while ( ( const u_char * ) lsrp < dataend ) { //<S2SV> ND_TCHECK ( * lsrp ) ; //<S2SV> ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Advertising<S2SV_blank>Router<S2SV_blank>%s" , //<S2SV> ipaddr_string ( ndo , & lsrp -> ls_router ) ) ) ; //<S2SV> ospf6_print_ls_type ( ndo , EXTRACT_16BITS ( & lsrp -> ls_type ) , //<S2SV> & lsrp -> ls_stateid ) ; //<S2SV> ++ lsrp ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case OSPF_TYPE_LS_UPDATE : //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> register const struct lsu6 * lsup = ( const struct lsu6 * ) ( ( const uint8_t * ) op + OSPF6HDR_LEN ) ; //<S2SV> ND_TCHECK ( lsup -> lsu_count ) ; //<S2SV> i = EXTRACT_32BITS ( & lsup -> lsu_count ) ; //<S2SV> lsap = lsup -> lsu_lsa ; //<S2SV> while ( ( const u_char * ) lsap < dataend && i -- ) { //<S2SV> if ( ospf6_print_lsa ( ndo , lsap , dataend ) ) //<S2SV> goto trunc ; //<S2SV> lsap = ( const struct lsa6 * ) ( ( const u_char * ) lsap + //<S2SV> EXTRACT_16BITS ( & lsap -> ls_hdr . ls_length ) ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case OSPF_TYPE_LS_ACK : //<S2SV> if ( ndo -> ndo_vflag > 1 ) { //<S2SV> lshp = ( const struct lsa6_hdr * ) ( ( const uint8_t * ) op + OSPF6HDR_LEN ) ; //<S2SV> while ( ( const u_char * ) lshp < dataend ) { //<S2SV> if ( ospf6_print_lshdr ( ndo , lshp ++ , dataend ) ) //<S2SV> goto trunc ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> return ( 0 ) ; //<S2SV> trunc : //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> 