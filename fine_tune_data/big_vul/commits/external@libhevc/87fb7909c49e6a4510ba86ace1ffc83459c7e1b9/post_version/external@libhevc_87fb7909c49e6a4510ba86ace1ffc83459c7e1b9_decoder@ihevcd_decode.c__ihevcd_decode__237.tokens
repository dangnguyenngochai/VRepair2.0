WORD32 ihevcd_decode ( iv_obj_t * ps_codec_obj , void * pv_api_ip , void * pv_api_op ) //<S2SV> { //<S2SV> WORD32 ret = IV_SUCCESS ; //<S2SV> codec_t * ps_codec = ( codec_t * ) ( ps_codec_obj -> pv_codec_handle ) ; //<S2SV> ivd_video_decode_ip_t * ps_dec_ip ; //<S2SV> ivd_video_decode_op_t * ps_dec_op ; //<S2SV> WORD32 proc_idx = 0 ; //<S2SV> WORD32 prev_proc_idx = 0 ; //<S2SV> ps_codec -> i4_error_code = 0 ; //<S2SV> ps_dec_ip = ( ivd_video_decode_ip_t * ) pv_api_ip ; //<S2SV> ps_dec_op = ( ivd_video_decode_op_t * ) pv_api_op ; //<S2SV> { //<S2SV> UWORD32 u4_size = ps_dec_op -> u4_size ; //<S2SV> memset ( ps_dec_op , 0 , sizeof ( ivd_video_decode_op_t ) ) ; //<S2SV> ps_dec_op -> u4_size = u4_size ; //<S2SV> } //<S2SV> if ( ps_codec -> i4_init_done != 1 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_FATALERROR ; //<S2SV> ps_dec_op -> u4_error_code |= IHEVCD_INIT_NOT_DONE ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_codec -> u4_pic_cnt >= NUM_FRAMES_LIMIT ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_FATALERROR ; //<S2SV> ps_dec_op -> u4_error_code |= IHEVCD_NUM_FRAMES_LIMIT_REACHED ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_codec -> i4_reset_flag ) //<S2SV> { //<S2SV> ps_codec -> i4_flush_mode = 1 ; //<S2SV> } //<S2SV> if ( 0 == ps_codec -> i4_flush_mode ) //<S2SV> { //<S2SV> if ( ps_dec_ip -> pv_stream_buffer == NULL ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DEC_FRM_BS_BUF_NULL ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_dec_ip -> u4_num_Bytes <= MIN_START_CODE_LEN ) //<S2SV> { //<S2SV> if ( ( WORD32 ) ps_dec_ip -> u4_num_Bytes > 0 ) //<S2SV> ps_dec_op -> u4_num_bytes_consumed = ps_dec_ip -> u4_num_Bytes ; //<S2SV> else //<S2SV> ps_dec_op -> u4_num_bytes_consumed = 0 ; //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DEC_NUMBYTES_INV ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> # ifdef APPLY_CONCEALMENT //<S2SV> { //<S2SV> WORD32 num_mbs ; //<S2SV> num_mbs = ( ps_codec -> i4_wd * ps_codec -> i4_ht + 255 ) >> 8 ; //<S2SV> ps_codec -> mb_count = 0 ; //<S2SV> memset ( ps_codec -> mb_map , 0 , ( ( num_mbs + 7 ) >> 3 ) ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( 0 == ps_codec -> i4_share_disp_buf && ps_codec -> i4_header_mode == 0 ) //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> if ( ps_dec_ip -> s_out_buffer . u4_num_bufs == 0 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DISP_FRM_ZERO_OP_BUFS ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> for ( i = 0 ; i < ps_dec_ip -> s_out_buffer . u4_num_bufs ; i ++ ) //<S2SV> { //<S2SV> if ( ps_dec_ip -> s_out_buffer . pu1_bufs [ i ] == NULL ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DISP_FRM_OP_BUF_NULL ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_dec_ip -> s_out_buffer . u4_min_out_buf_size [ i ] == 0 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DISP_FRM_ZERO_OP_BUF_SIZE ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> ps_codec -> ps_out_buffer = & ps_dec_ip -> s_out_buffer ; //<S2SV> ps_codec -> u4_ts = ps_dec_ip -> u4_ts ; //<S2SV> if ( ps_codec -> i4_flush_mode ) //<S2SV> { //<S2SV> ps_dec_op -> u4_pic_wd = ps_codec -> i4_disp_wd ; //<S2SV> ps_dec_op -> u4_pic_ht = ps_codec -> i4_disp_ht ; //<S2SV> ps_dec_op -> u4_new_seq = 0 ; //<S2SV> ps_codec -> ps_disp_buf = ( pic_buf_t * ) ihevc_disp_mgr_get ( //<S2SV> ( disp_mgr_t * ) ps_codec -> pv_disp_buf_mgr , & ps_codec -> i4_disp_buf_id ) ; //<S2SV> if ( ( ps_codec -> ps_disp_buf ) //<S2SV> && ( ( 0 == ps_codec -> i4_share_disp_buf ) //<S2SV> || ( IV_YUV_420P //<S2SV> == ps_codec -> e_chroma_fmt ) ) ) //<S2SV> { //<S2SV> process_ctxt_t * ps_proc = & ps_codec -> as_process [ prev_proc_idx ] ; //<S2SV> if ( 0 == ps_proc -> i4_init_done ) //<S2SV> { //<S2SV> ihevcd_init_proc_ctxt ( ps_proc , 0 ) ; //<S2SV> } //<S2SV> ret = ihevcd_check_out_buf_size ( ps_codec ) ; //<S2SV> RETURN_IF ( ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) , ret ) ; //<S2SV> ret = ihevcd_fmt_conv ( ps_codec , & ps_codec -> as_process [ prev_proc_idx ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 0 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 1 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 2 ] , 0 , //<S2SV> ps_codec -> i4_disp_ht ) ; //<S2SV> ihevc_buf_mgr_release ( ( buf_mgr_t * ) ps_codec -> pv_pic_buf_mgr , //<S2SV> ps_codec -> i4_disp_buf_id , BUF_MGR_DISP ) ; //<S2SV> } //<S2SV> ihevcd_fill_outargs ( ps_codec , ps_dec_ip , ps_dec_op ) ; //<S2SV> if ( 1 == ps_dec_op -> u4_output_present ) //<S2SV> { //<S2SV> WORD32 xpos = ps_codec -> i4_disp_wd - 32 - LOGO_WD ; //<S2SV> WORD32 ypos = ps_codec -> i4_disp_ht - 32 - LOGO_HT ; //<S2SV> if ( ypos < 0 ) //<S2SV> ypos = 0 ; //<S2SV> if ( xpos < 0 ) //<S2SV> xpos = 0 ; //<S2SV> INSERT_LOGO ( ps_dec_ip -> s_out_buffer . pu1_bufs [ 0 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 1 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 2 ] , ps_codec -> i4_disp_strd , //<S2SV> xpos , //<S2SV> ypos , //<S2SV> ps_codec -> e_chroma_fmt , //<S2SV> ps_codec -> i4_disp_wd , //<S2SV> ps_codec -> i4_disp_ht ) ; //<S2SV> } //<S2SV> if ( NULL == ps_codec -> ps_disp_buf ) //<S2SV> { //<S2SV> if ( ps_codec -> i4_reset_flag ) //<S2SV> { //<S2SV> ihevcd_init ( ps_codec ) ; //<S2SV> } //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> return ( IV_SUCCESS ) ; //<S2SV> } //<S2SV> if ( ( 0 == ps_codec -> i4_header_mode ) && ( 1 == ps_codec -> i4_share_disp_buf ) ) //<S2SV> { //<S2SV> WORD32 buf_status ; //<S2SV> buf_status = 1 ; //<S2SV> if ( ps_codec -> pv_pic_buf_mgr ) //<S2SV> buf_status = ihevc_buf_mgr_check_free ( ( buf_mgr_t * ) ps_codec -> pv_pic_buf_mgr ) ; //<S2SV> if ( 0 == buf_status ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code = IVD_DEC_REF_BUF_NULL ; //<S2SV> ps_dec_op -> u4_error_code |= ( 1 << IVD_UNSUPPORTEDPARAM ) ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> ps_codec -> i4_bytes_remaining = ps_dec_ip -> u4_num_Bytes ; //<S2SV> ps_codec -> pu1_inp_bitsbuf = ( UWORD8 * ) ps_dec_ip -> pv_stream_buffer ; //<S2SV> ps_codec -> s_parse . i4_end_of_frame = 0 ; //<S2SV> ps_codec -> i4_pic_present = 0 ; //<S2SV> ps_codec -> i4_slice_error = 0 ; //<S2SV> ps_codec -> ps_disp_buf = NULL ; //<S2SV> if ( ps_codec -> i4_num_cores > 1 ) //<S2SV> { //<S2SV> ithread_set_affinity ( 0 ) ; //<S2SV> } //<S2SV> while ( MIN_START_CODE_LEN < ps_codec -> i4_bytes_remaining ) //<S2SV> { //<S2SV> WORD32 nal_len ; //<S2SV> WORD32 nal_ofst ; //<S2SV> WORD32 bits_len ; //<S2SV> if ( ps_codec -> i4_slice_error ) //<S2SV> { //<S2SV> slice_header_t * ps_slice_hdr_next = ps_codec -> s_parse . ps_slice_hdr_base + ( ps_codec -> s_parse . i4_cur_slice_idx & ( MAX_SLICE_HDR_CNT - 1 ) ) ; //<S2SV> WORD32 next_slice_addr = ps_slice_hdr_next -> i2_ctb_x + //<S2SV> ps_slice_hdr_next -> i2_ctb_y * ps_codec -> s_parse . ps_sps -> i2_pic_wd_in_ctb ; //<S2SV> if ( ps_codec -> s_parse . i4_next_ctb_indx == next_slice_addr ) //<S2SV> ps_codec -> i4_slice_error = 0 ; //<S2SV> } //<S2SV> if ( ps_codec -> pu1_bitsbuf_dynamic ) //<S2SV> { //<S2SV> ps_codec -> pu1_bitsbuf = ps_codec -> pu1_bitsbuf_dynamic ; //<S2SV> ps_codec -> u4_bitsbuf_size = ps_codec -> u4_bitsbuf_size_dynamic ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_codec -> pu1_bitsbuf = ps_codec -> pu1_bitsbuf_static ; //<S2SV> ps_codec -> u4_bitsbuf_size = ps_codec -> u4_bitsbuf_size_static ; //<S2SV> } //<S2SV> nal_ofst = ihevcd_nal_search_start_code ( ps_codec -> pu1_inp_bitsbuf , //<S2SV> ps_codec -> i4_bytes_remaining ) ; //<S2SV> ps_codec -> i4_nal_ofst = nal_ofst ; //<S2SV> { //<S2SV> WORD32 bytes_remaining = ps_codec -> i4_bytes_remaining - nal_ofst ; //<S2SV> bytes_remaining = MIN ( ( UWORD32 ) bytes_remaining , ps_codec -> u4_bitsbuf_size ) ; //<S2SV> ihevcd_nal_remv_emuln_bytes ( ps_codec -> pu1_inp_bitsbuf + nal_ofst , //<S2SV> ps_codec -> pu1_bitsbuf , //<S2SV> bytes_remaining , //<S2SV> & nal_len , & bits_len ) ; //<S2SV> if ( bits_len < ( WORD32 ) ( ps_codec -> u4_bitsbuf_size - 8 ) ) //<S2SV> { //<S2SV> memset ( ps_codec -> pu1_bitsbuf + bits_len , 0 , 2 * sizeof ( UWORD32 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> ps_codec -> i4_num_emln_bytes = nal_len - bits_len ; //<S2SV> ps_codec -> i4_nal_len = nal_len ; //<S2SV> ihevcd_bits_init ( & ps_codec -> s_parse . s_bitstrm , ps_codec -> pu1_bitsbuf , //<S2SV> bits_len ) ; //<S2SV> ret = ihevcd_nal_unit ( ps_codec ) ; //<S2SV> if ( ps_codec -> i4_pic_present && //<S2SV> ( ps_codec -> s_parse . i4_next_ctb_indx != ps_codec -> s_parse . ps_sps -> i4_pic_size_in_ctb ) ) //<S2SV> { //<S2SV> if ( ( ps_codec -> i4_bytes_remaining - ( nal_len + nal_ofst ) <= MIN_START_CODE_LEN ) || //<S2SV> ( ps_codec -> i4_header_in_slice_mode ) ) //<S2SV> { //<S2SV> slice_header_t * ps_slice_hdr_next ; //<S2SV> ps_codec -> s_parse . i4_cur_slice_idx -- ; //<S2SV> if ( ps_codec -> s_parse . i4_cur_slice_idx < 0 ) //<S2SV> ps_codec -> s_parse . i4_cur_slice_idx = 0 ; //<S2SV> ps_slice_hdr_next = ps_codec -> s_parse . ps_slice_hdr_base + ( ( ps_codec -> s_parse . i4_cur_slice_idx + 1 ) & ( MAX_SLICE_HDR_CNT - 1 ) ) ; //<S2SV> ps_slice_hdr_next -> i2_ctb_x = 0 ; //<S2SV> ps_slice_hdr_next -> i2_ctb_y = ps_codec -> s_parse . ps_sps -> i2_pic_ht_in_ctb ; //<S2SV> ps_codec -> i4_slice_error = 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> if ( IHEVCD_IGNORE_SLICE == ret ) //<S2SV> { //<S2SV> ps_codec -> pu1_inp_bitsbuf += ( nal_ofst + nal_len ) ; //<S2SV> ps_codec -> i4_bytes_remaining -= ( nal_ofst + nal_len ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ( IVD_RES_CHANGED == ret ) || //<S2SV> ( IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED == ret ) ) //<S2SV> { //<S2SV> break ; //<S2SV> } //<S2SV> if ( ret != IHEVCD_SLICE_IN_HEADER_MODE ) //<S2SV> { //<S2SV> if ( ( 0 == ps_codec -> i4_slice_error ) || //<S2SV> ( ps_codec -> i4_bytes_remaining - ( nal_len + nal_ofst ) <= MIN_START_CODE_LEN ) ) //<S2SV> { //<S2SV> ps_codec -> pu1_inp_bitsbuf += ( nal_ofst + nal_len ) ; //<S2SV> ps_codec -> i4_bytes_remaining -= ( nal_ofst + nal_len ) ; //<S2SV> } //<S2SV> if ( ret != IHEVCD_SUCCESS ) //<S2SV> break ; //<S2SV> if ( ps_codec -> s_parse . i4_end_of_frame ) //<S2SV> break ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ret = IHEVCD_SUCCESS ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ( ps_codec -> u4_allocate_dynamic_done == 0 ) && ps_codec -> i4_sps_done ) //<S2SV> { //<S2SV> WORD32 ret ; //<S2SV> ret = ihevcd_allocate_dynamic_bufs ( ps_codec ) ; //<S2SV> if ( ret != IV_SUCCESS ) //<S2SV> { //<S2SV> ihevcd_free_dynamic_bufs ( ps_codec ) ; //<S2SV> ps_codec -> i4_error_code = IVD_MEM_ALLOC_FAILED ; //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_FATALERROR ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_MEM_ALLOC_FAILED ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> BREAK_AFTER_SLICE_NAL ( ) ; //<S2SV> } //<S2SV> if ( ( ps_codec -> u4_pic_cnt == 0 ) && ( ret != IHEVCD_SUCCESS ) ) //<S2SV> { //<S2SV> ps_codec -> i4_error_code = ret ; //<S2SV> ihevcd_fill_outargs ( ps_codec , ps_dec_ip , ps_dec_op ) ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( 1 == ps_codec -> i4_pic_present ) //<S2SV> { //<S2SV> WORD32 i ; //<S2SV> sps_t * ps_sps = ps_codec -> s_parse . ps_sps ; //<S2SV> ps_codec -> i4_first_pic_done = 1 ; //<S2SV> if ( ps_codec -> i4_num_cores > 1 && ps_codec -> s_parse . i4_end_of_frame ) //<S2SV> { //<S2SV> process_ctxt_t * ps_proc ; //<S2SV> ps_proc = & ps_codec -> as_process [ ps_codec -> i4_num_cores - 1 ] ; //<S2SV> if ( ( ps_codec -> ps_disp_buf ) && //<S2SV> ( ( 0 == ps_codec -> i4_share_disp_buf ) || ( IV_YUV_420P == ps_codec -> e_chroma_fmt ) ) ) //<S2SV> { //<S2SV> if ( ( 0 == ps_codec -> u4_enable_fmt_conv_ahead ) || //<S2SV> ( ps_codec -> i4_disp_buf_id == ps_proc -> i4_cur_pic_buf_id ) ) //<S2SV> for ( i = 0 ; i < ps_sps -> i2_pic_ht_in_ctb ; i ++ ) //<S2SV> { //<S2SV> proc_job_t s_job ; //<S2SV> IHEVCD_ERROR_T ret ; //<S2SV> s_job . i4_cmd = CMD_FMTCONV ; //<S2SV> s_job . i2_ctb_cnt = 0 ; //<S2SV> s_job . i2_ctb_x = 0 ; //<S2SV> s_job . i2_ctb_y = i ; //<S2SV> s_job . i2_slice_idx = 0 ; //<S2SV> s_job . i4_tu_coeff_data_ofst = 0 ; //<S2SV> ret = ihevcd_jobq_queue ( ( jobq_t * ) ps_codec -> s_parse . pv_proc_jobq , //<S2SV> & s_job , sizeof ( proc_job_t ) , 1 ) ; //<S2SV> if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) //<S2SV> return ( WORD32 ) ret ; //<S2SV> } //<S2SV> } //<S2SV> ret = ihevcd_jobq_terminate ( ( jobq_t * ) ps_codec -> s_parse . pv_proc_jobq ) ; //<S2SV> while ( 1 ) //<S2SV> { //<S2SV> IHEVCD_ERROR_T ret ; //<S2SV> proc_job_t s_job ; //<S2SV> process_ctxt_t * ps_proc ; //<S2SV> ps_proc = & ps_codec -> as_process [ ps_codec -> i4_num_cores - 1 ] ; //<S2SV> ret = ihevcd_jobq_dequeue ( ( jobq_t * ) ps_proc -> pv_proc_jobq , & s_job , //<S2SV> sizeof ( proc_job_t ) , 1 ) ; //<S2SV> if ( ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS != ret ) //<S2SV> break ; //<S2SV> ps_proc -> i4_ctb_cnt = s_job . i2_ctb_cnt ; //<S2SV> ps_proc -> i4_ctb_x = s_job . i2_ctb_x ; //<S2SV> ps_proc -> i4_ctb_y = s_job . i2_ctb_y ; //<S2SV> ps_proc -> i4_cur_slice_idx = s_job . i2_slice_idx ; //<S2SV> if ( CMD_PROCESS == s_job . i4_cmd ) //<S2SV> { //<S2SV> ihevcd_init_proc_ctxt ( ps_proc , s_job . i4_tu_coeff_data_ofst ) ; //<S2SV> ihevcd_process ( ps_proc ) ; //<S2SV> } //<S2SV> else if ( CMD_FMTCONV == s_job . i4_cmd ) //<S2SV> { //<S2SV> sps_t * ps_sps = ps_codec -> s_parse . ps_sps ; //<S2SV> WORD32 num_rows = 1 << ps_sps -> i1_log2_ctb_size ; //<S2SV> if ( 0 == ps_proc -> i4_init_done ) //<S2SV> { //<S2SV> ihevcd_init_proc_ctxt ( ps_proc , 0 ) ; //<S2SV> } //<S2SV> num_rows = MIN ( num_rows , ( ps_codec -> i4_disp_ht - ( s_job . i2_ctb_y << ps_sps -> i1_log2_ctb_size ) ) ) ; //<S2SV> if ( num_rows < 0 ) //<S2SV> num_rows = 0 ; //<S2SV> ihevcd_fmt_conv ( ps_codec , ps_proc , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 0 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 1 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 2 ] , //<S2SV> s_job . i2_ctb_y << ps_sps -> i1_log2_ctb_size , //<S2SV> num_rows ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else if ( ( ps_codec -> ps_disp_buf ) && ( ( 0 == ps_codec -> i4_share_disp_buf ) || //<S2SV> ( IV_YUV_420P == ps_codec -> e_chroma_fmt ) ) && //<S2SV> ( ps_codec -> s_parse . i4_end_of_frame ) ) //<S2SV> { //<S2SV> process_ctxt_t * ps_proc = & ps_codec -> as_process [ proc_idx ] ; //<S2SV> ps_codec -> s_fmt_conv . i4_num_rows = ps_codec -> i4_disp_ht //<S2SV> - ps_codec -> s_fmt_conv . i4_cur_row ; //<S2SV> if ( 0 == ps_proc -> i4_init_done ) //<S2SV> { //<S2SV> ihevcd_init_proc_ctxt ( ps_proc , 0 ) ; //<S2SV> } //<S2SV> if ( ps_codec -> s_fmt_conv . i4_num_rows < 0 ) //<S2SV> ps_codec -> s_fmt_conv . i4_num_rows = 0 ; //<S2SV> ret = ihevcd_fmt_conv ( ps_codec , ps_proc , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 0 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 1 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 2 ] , //<S2SV> ps_codec -> s_fmt_conv . i4_cur_row , //<S2SV> ps_codec -> s_fmt_conv . i4_num_rows ) ; //<S2SV> ps_codec -> s_fmt_conv . i4_cur_row += ps_codec -> s_fmt_conv . i4_num_rows ; //<S2SV> } //<S2SV> DEBUG_DUMP_MV_MAP ( ps_codec ) ; //<S2SV> ihevc_buf_mgr_set_status ( ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr , //<S2SV> ps_codec -> as_process [ proc_idx ] . i4_cur_mv_bank_buf_id , //<S2SV> BUF_MGR_REF ) ; //<S2SV> ihevc_buf_mgr_set_status ( ( buf_mgr_t * ) ps_codec -> pv_pic_buf_mgr , //<S2SV> ps_codec -> as_process [ proc_idx ] . i4_cur_pic_buf_id , //<S2SV> BUF_MGR_REF ) ; //<S2SV> ihevc_buf_mgr_set_status ( ( buf_mgr_t * ) ps_codec -> pv_pic_buf_mgr , //<S2SV> ps_codec -> as_process [ proc_idx ] . i4_cur_pic_buf_id , //<S2SV> BUF_MGR_DISP ) ; //<S2SV> ihevc_dpb_mgr_insert_ref ( ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr , //<S2SV> ps_codec -> as_process [ proc_idx ] . ps_cur_pic , //<S2SV> ps_codec -> as_process [ proc_idx ] . i4_cur_pic_buf_id ) ; //<S2SV> if ( ( 0 == ps_codec -> i4_share_disp_buf ) && ( ps_codec -> ps_disp_buf ) ) //<S2SV> ihevc_buf_mgr_release ( ( buf_mgr_t * ) ps_codec -> pv_pic_buf_mgr , //<S2SV> ps_codec -> i4_disp_buf_id , BUF_MGR_DISP ) ; //<S2SV> for ( i = 0 ; i < ( ps_codec -> i4_num_cores - 1 ) ; i ++ ) //<S2SV> { //<S2SV> if ( ps_codec -> ai4_process_thread_created [ i ] ) //<S2SV> { //<S2SV> ithread_join ( ps_codec -> apv_process_thread_handle [ i ] , NULL ) ; //<S2SV> ps_codec -> ai4_process_thread_created [ i ] = 0 ; //<S2SV> } //<S2SV> } //<S2SV> DEBUG_VALIDATE_PADDED_REGION ( & ps_codec -> as_process [ proc_idx ] ) ; //<S2SV> if ( ps_codec -> u4_pic_cnt > 0 ) //<S2SV> { //<S2SV> DEBUG_DUMP_PIC_PU ( ps_codec ) ; //<S2SV> } //<S2SV> DEBUG_DUMP_PIC_BUFFERS ( ps_codec ) ; //<S2SV> ps_codec -> u4_pic_cnt ++ ; //<S2SV> } //<S2SV> ihevcd_fill_outargs ( ps_codec , ps_dec_ip , ps_dec_op ) ; //<S2SV> if ( 1 == ps_dec_op -> u4_output_present ) //<S2SV> { //<S2SV> WORD32 xpos = ps_codec -> i4_disp_wd - 32 - LOGO_WD ; //<S2SV> WORD32 ypos = ps_codec -> i4_disp_ht - 32 - LOGO_HT ; //<S2SV> if ( ypos < 0 ) //<S2SV> ypos = 0 ; //<S2SV> if ( xpos < 0 ) //<S2SV> xpos = 0 ; //<S2SV> INSERT_LOGO ( ps_dec_ip -> s_out_buffer . pu1_bufs [ 0 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 1 ] , //<S2SV> ps_dec_ip -> s_out_buffer . pu1_bufs [ 2 ] , ps_codec -> i4_disp_strd , //<S2SV> xpos , //<S2SV> ypos , //<S2SV> ps_codec -> e_chroma_fmt , //<S2SV> ps_codec -> i4_disp_wd , //<S2SV> ps_codec -> i4_disp_ht ) ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> 