WORD32 ihevcd_create ( iv_obj_t * ps_codec_obj , //<S2SV> void * pv_api_ip , //<S2SV> void * pv_api_op ) //<S2SV> { //<S2SV> ihevcd_cxa_create_ip_t * ps_create_ip ; //<S2SV> ihevcd_cxa_create_op_t * ps_create_op ; //<S2SV> WORD32 ret ; //<S2SV> codec_t * ps_codec ; //<S2SV> ps_create_ip = ( ihevcd_cxa_create_ip_t * ) pv_api_ip ; //<S2SV> ps_create_op = ( ihevcd_cxa_create_op_t * ) pv_api_op ; //<S2SV> ps_create_op -> s_ivd_create_op_t . u4_error_code = 0 ; //<S2SV> ps_codec_obj = NULL ; //<S2SV> ret = ihevcd_allocate_static_bufs ( & ps_codec_obj , pv_api_ip , pv_api_op ) ; //<S2SV> if ( IV_FAIL == ret ) //<S2SV> { //<S2SV> if ( NULL != ps_codec_obj ) //<S2SV> { //<S2SV> if ( ps_codec_obj -> pv_codec_handle ) //<S2SV> { //<S2SV> ihevcd_free_static_bufs ( ps_codec_obj ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> void ( * pf_aligned_free ) ( void * pv_mem_ctxt , void * pv_buf ) ; //<S2SV> void * pv_mem_ctxt ; //<S2SV> pf_aligned_free = ps_create_ip -> s_ivd_create_ip_t . pf_aligned_free ; //<S2SV> pv_mem_ctxt = ps_create_ip -> s_ivd_create_ip_t . pv_mem_ctxt ; //<S2SV> pf_aligned_free ( pv_mem_ctxt , ps_codec_obj ) ; //<S2SV> } //<S2SV> } //<S2SV> ps_create_op -> s_ivd_create_op_t . u4_error_code = IVD_MEM_ALLOC_FAILED ; //<S2SV> ps_create_op -> s_ivd_create_op_t . u4_error_code = 1 << IVD_FATALERROR ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> ps_codec = ( codec_t * ) ps_codec_obj -> pv_codec_handle ; //<S2SV> ret = ihevcd_init ( ps_codec ) ; //<S2SV> TRACE_INIT ( NULL ) ; //<S2SV> STATS_INIT ( ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 