IHEVCD_ERROR_T ihevcd_mv_buf_mgr_add_bufs ( codec_t * ps_codec ) //<S2SV> { //<S2SV> IHEVCD_ERROR_T ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; //<S2SV> WORD32 i ; //<S2SV> WORD32 max_dpb_size ; //<S2SV> WORD32 mv_bank_size_allocated ; //<S2SV> WORD32 pic_mv_bank_size ; //<S2SV> sps_t * ps_sps ; //<S2SV> UWORD8 * pu1_buf ; //<S2SV> mv_buf_t * ps_mv_buf ; //<S2SV> ps_sps = ps_codec -> s_parse . ps_sps ; //<S2SV> max_dpb_size = ps_sps -> ai1_sps_max_dec_pic_buffering [ ps_sps -> i1_sps_max_sub_layers - 1 ] ; //<S2SV> max_dpb_size ++ ; //<S2SV> ps_codec -> i4_max_dpb_size = max_dpb_size ; //<S2SV> pu1_buf = ( UWORD8 * ) ps_codec -> pv_mv_bank_buf_base ; //<S2SV> ps_mv_buf = ( mv_buf_t * ) pu1_buf ; //<S2SV> pu1_buf += max_dpb_size * sizeof ( mv_buf_t ) ; //<S2SV> ps_codec -> ps_mv_buf = ps_mv_buf ; //<S2SV> mv_bank_size_allocated = ps_codec -> i4_total_mv_bank_size - max_dpb_size * sizeof ( mv_buf_t ) ; //<S2SV> pic_mv_bank_size = ihevcd_get_pic_mv_bank_size ( ALIGN64 ( ps_sps -> i2_pic_width_in_luma_samples ) * //<S2SV> ALIGN64 ( ps_sps -> i2_pic_height_in_luma_samples ) ) ; //<S2SV> for ( i = 0 ; i < max_dpb_size ; i ++ ) //<S2SV> { //<S2SV> WORD32 buf_ret ; //<S2SV> WORD32 num_pu ; //<S2SV> WORD32 num_ctb ; //<S2SV> WORD32 pic_size ; //<S2SV> pic_size = ALIGN64 ( ps_sps -> i2_pic_width_in_luma_samples ) * //<S2SV> ALIGN64 ( ps_sps -> i2_pic_height_in_luma_samples ) ; //<S2SV> num_pu = pic_size / ( MIN_PU_SIZE * MIN_PU_SIZE ) ; //<S2SV> num_ctb = pic_size / ( MIN_CTB_SIZE * MIN_CTB_SIZE ) ; //<S2SV> mv_bank_size_allocated -= pic_mv_bank_size ; //<S2SV> if ( mv_bank_size_allocated < 0 ) //<S2SV> { //<S2SV> ps_codec -> s_parse . i4_error_code = IHEVCD_INSUFFICIENT_MEM_MVBANK ; //<S2SV> return IHEVCD_INSUFFICIENT_MEM_MVBANK ; //<S2SV> } //<S2SV> ps_mv_buf -> pu4_pic_pu_idx = ( UWORD32 * ) pu1_buf ; //<S2SV> pu1_buf += ( num_ctb + 1 ) * sizeof ( WORD32 ) ; //<S2SV> ps_mv_buf -> pu1_pic_pu_map = pu1_buf ; //<S2SV> pu1_buf += num_pu ; //<S2SV> ps_mv_buf -> pu1_pic_slice_map = ( UWORD16 * ) pu1_buf ; //<S2SV> pu1_buf += ALIGN4 ( num_ctb * sizeof ( UWORD16 ) ) ; //<S2SV> ps_mv_buf -> ps_pic_pu = ( pu_t * ) pu1_buf ; //<S2SV> pu1_buf += num_pu * sizeof ( pu_t ) ; //<S2SV> buf_ret = ihevc_buf_mgr_add ( ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr , ps_mv_buf , i ) ; //<S2SV> if ( 0 != buf_ret ) //<S2SV> { //<S2SV> ps_codec -> s_parse . i4_error_code = IHEVCD_BUF_MGR_ERROR ; //<S2SV> return IHEVCD_BUF_MGR_ERROR ; //<S2SV> } //<S2SV> ps_mv_buf ++ ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> 