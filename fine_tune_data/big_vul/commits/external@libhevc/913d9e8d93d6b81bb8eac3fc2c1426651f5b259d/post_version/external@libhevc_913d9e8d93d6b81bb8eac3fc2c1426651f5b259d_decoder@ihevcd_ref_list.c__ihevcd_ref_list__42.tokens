WORD32 ihevcd_ref_list ( codec_t * ps_codec , pps_t * ps_pps , sps_t * ps_sps , slice_header_t * ps_slice_hdr ) //<S2SV> { //<S2SV> WORD32 i , j ; //<S2SV> WORD32 st_rps_idx ; //<S2SV> WORD32 num_neg_pics , num_pos_pics ; //<S2SV> WORD8 * pi1_used ; //<S2SV> WORD16 * pi2_delta_poc ; //<S2SV> UWORD32 u4_max_poc_lsb ; //<S2SV> pic_buf_t * ps_pic_buf ; //<S2SV> mv_buf_t * ps_mv_buf ; //<S2SV> UWORD32 r_idx ; //<S2SV> dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; //<S2SV> buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; //<S2SV> WORD32 ai4_poc_st_curr_before [ MAX_DPB_SIZE ] , ai4_poc_st_foll [ MAX_DPB_SIZE ] , ai4_poc_st_curr_after [ MAX_DPB_SIZE ] ; //<S2SV> WORD32 ai4_poc_lt_curr [ MAX_DPB_SIZE ] , ai4_poc_lt_foll [ MAX_DPB_SIZE ] ; //<S2SV> UWORD32 u4_num_st_curr_before , u4_num_st_foll , u4_num_st_curr_after , u4_num_lt_curr , u4_num_lt_foll ; //<S2SV> UWORD32 u4_num_total_curr ; //<S2SV> WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ] , ai1_foll_delta_poc_msb_present_flag [ MAX_DPB_SIZE ] ; //<S2SV> pic_buf_t * as_ref_pic_lt_curr [ MAX_DPB_SIZE ] ; //<S2SV> pic_buf_t * as_ref_pic_lt_foll [ MAX_DPB_SIZE ] ; //<S2SV> pic_buf_t * as_ref_pic_st_curr_after [ MAX_DPB_SIZE ] ; //<S2SV> pic_buf_t * as_ref_pic_st_curr_before [ MAX_DPB_SIZE ] ; //<S2SV> pic_buf_t * as_ref_pic_st_foll [ MAX_DPB_SIZE ] ; //<S2SV> pic_buf_t * as_ref_pic_list_temp0 [ MAX_DPB_SIZE ] , * as_ref_pic_list_temp1 [ MAX_DPB_SIZE ] ; //<S2SV> UWORD32 u4_num_rps_curr_temp_list0 , u4_num_rps_curr_temp_list1 ; //<S2SV> WORD32 i4_pic_order_cnt_val ; //<S2SV> WORD32 i4_poc_lt ; //<S2SV> UNUSED ( as_ref_pic_lt_foll ) ; //<S2SV> UNUSED ( as_ref_pic_st_foll ) ; //<S2SV> UNUSED ( ps_pps ) ; //<S2SV> RETURN_IF_NAL_INFO ; //<S2SV> u4_max_poc_lsb = ( 1 << ps_sps -> i1_log2_max_pic_order_cnt_lsb ) ; //<S2SV> i4_pic_order_cnt_val = ps_slice_hdr -> i4_abs_pic_order_cnt ; //<S2SV> if ( 1 == ps_slice_hdr -> i1_short_term_ref_pic_set_sps_flag ) //<S2SV> { //<S2SV> st_rps_idx = ps_slice_hdr -> i1_short_term_ref_pic_set_idx ; //<S2SV> num_neg_pics = ps_sps -> as_stref_picset [ st_rps_idx ] . i1_num_neg_pics ; //<S2SV> num_pos_pics = ps_sps -> as_stref_picset [ st_rps_idx ] . i1_num_pos_pics ; //<S2SV> pi1_used = ps_sps -> as_stref_picset [ st_rps_idx ] . ai1_used ; //<S2SV> pi2_delta_poc = ps_sps -> as_stref_picset [ st_rps_idx ] . ai2_delta_poc ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> st_rps_idx = ps_sps -> i1_num_short_term_ref_pic_sets ; //<S2SV> num_neg_pics = ps_slice_hdr -> s_stref_picset . i1_num_neg_pics ; //<S2SV> num_pos_pics = ps_slice_hdr -> s_stref_picset . i1_num_pos_pics ; //<S2SV> pi1_used = ps_slice_hdr -> s_stref_picset . ai1_used ; //<S2SV> pi2_delta_poc = ps_slice_hdr -> s_stref_picset . ai2_delta_poc ; //<S2SV> } //<S2SV> u4_num_st_curr_before = 0 ; //<S2SV> u4_num_st_foll = 0 ; //<S2SV> for ( i = 0 ; i < num_neg_pics ; i ++ ) //<S2SV> { //<S2SV> if ( pi1_used [ i ] ) //<S2SV> { //<S2SV> ai4_poc_st_curr_before [ u4_num_st_curr_before ] = i4_pic_order_cnt_val + pi2_delta_poc [ i ] ; //<S2SV> u4_num_st_curr_before ++ ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ai4_poc_st_foll [ u4_num_st_foll ] = i4_pic_order_cnt_val + pi2_delta_poc [ i ] ; //<S2SV> u4_num_st_foll ++ ; //<S2SV> } //<S2SV> } //<S2SV> u4_num_st_curr_after = 0 ; //<S2SV> for ( i = num_neg_pics ; i < num_neg_pics + num_pos_pics ; i ++ ) //<S2SV> { //<S2SV> if ( pi1_used [ i ] ) //<S2SV> { //<S2SV> ai4_poc_st_curr_after [ u4_num_st_curr_after ] = i4_pic_order_cnt_val + pi2_delta_poc [ i ] ; //<S2SV> u4_num_st_curr_after ++ ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ai4_poc_st_foll [ u4_num_st_foll ] = i4_pic_order_cnt_val + pi2_delta_poc [ i ] ; //<S2SV> u4_num_st_foll ++ ; //<S2SV> } //<S2SV> } //<S2SV> u4_num_lt_curr = 0 ; //<S2SV> u4_num_lt_foll = 0 ; //<S2SV> for ( i = 0 ; i < ps_slice_hdr -> i1_num_long_term_sps + ps_slice_hdr -> i1_num_long_term_pics ; i ++ ) //<S2SV> { //<S2SV> i4_poc_lt = ps_slice_hdr -> ai4_poc_lsb_lt [ i ] ; //<S2SV> if ( ps_slice_hdr -> ai1_delta_poc_msb_present_flag [ i ] ) //<S2SV> { //<S2SV> i4_poc_lt += i4_pic_order_cnt_val - ps_slice_hdr -> ai1_delta_poc_msb_cycle_lt [ i ] * u4_max_poc_lsb - ps_slice_hdr -> i4_pic_order_cnt_lsb ; //<S2SV> } //<S2SV> if ( ps_slice_hdr -> ai1_used_by_curr_pic_lt_flag [ i ] ) //<S2SV> { //<S2SV> ai4_poc_lt_curr [ u4_num_lt_curr ] = i4_poc_lt ; //<S2SV> ai1_curr_delta_poc_msb_present_flag [ u4_num_lt_curr ] = ps_slice_hdr -> ai1_delta_poc_msb_present_flag [ i ] ; //<S2SV> u4_num_lt_curr ++ ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ai4_poc_lt_foll [ u4_num_lt_foll ] = i4_poc_lt ; //<S2SV> ai1_foll_delta_poc_msb_present_flag [ u4_num_lt_foll ] = ps_slice_hdr -> ai1_delta_poc_msb_present_flag [ i ] ; //<S2SV> u4_num_lt_foll ++ ; //<S2SV> } //<S2SV> } //<S2SV> u4_num_total_curr = u4_num_lt_curr + u4_num_st_curr_after + u4_num_st_curr_before ; //<S2SV> if ( 0 == ps_codec -> i4_pic_present ) //<S2SV> { //<S2SV> for ( i = 0 ; i < MAX_DPB_BUFS ; i ++ ) //<S2SV> { //<S2SV> if ( ps_dpb_mgr -> as_dpb_info [ i ] . ps_pic_buf ) //<S2SV> ps_dpb_mgr -> as_dpb_info [ i ] . ps_pic_buf -> u1_used_as_ref = UNUSED_FOR_REF ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < ( WORD32 ) u4_num_lt_curr ; i ++ ) //<S2SV> { //<S2SV> if ( 0 == ai1_curr_delta_poc_msb_present_flag [ i ] ) //<S2SV> { //<S2SV> ps_pic_buf = ihevc_dpb_mgr_get_ref_by_poc_lsb ( ps_dpb_mgr , ai4_poc_lt_curr [ i ] ) ; //<S2SV> if ( NULL != ps_pic_buf ) //<S2SV> ps_pic_buf -> u1_used_as_ref = LONG_TERM_REF ; //<S2SV> as_ref_pic_lt_curr [ i ] = ps_pic_buf ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_pic_buf = ihevc_dpb_mgr_get_ref_by_poc ( ps_dpb_mgr , ai4_poc_lt_curr [ i ] ) ; //<S2SV> if ( NULL != ps_pic_buf ) //<S2SV> ps_pic_buf -> u1_used_as_ref = LONG_TERM_REF ; //<S2SV> as_ref_pic_lt_curr [ i ] = ps_pic_buf ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < ( WORD32 ) u4_num_lt_foll ; i ++ ) //<S2SV> { //<S2SV> if ( 0 == ai1_foll_delta_poc_msb_present_flag [ i ] ) //<S2SV> { //<S2SV> ps_pic_buf = ihevc_dpb_mgr_get_ref_by_poc_lsb ( ps_dpb_mgr , ai4_poc_lt_foll [ i ] ) ; //<S2SV> if ( NULL != ps_pic_buf ) //<S2SV> ps_pic_buf -> u1_used_as_ref = LONG_TERM_REF ; //<S2SV> as_ref_pic_lt_foll [ i ] = ps_pic_buf ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_pic_buf = ihevc_dpb_mgr_get_ref_by_poc ( ps_dpb_mgr , ai4_poc_lt_foll [ i ] ) ; //<S2SV> if ( NULL != ps_pic_buf ) //<S2SV> ps_pic_buf -> u1_used_as_ref = LONG_TERM_REF ; //<S2SV> as_ref_pic_lt_foll [ i ] = ps_pic_buf ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < ( WORD32 ) u4_num_st_curr_before ; i ++ ) //<S2SV> { //<S2SV> ps_pic_buf = ihevc_dpb_mgr_get_ref_by_poc ( ps_dpb_mgr , ai4_poc_st_curr_before [ i ] ) ; //<S2SV> if ( NULL != ps_pic_buf ) //<S2SV> ps_pic_buf -> u1_used_as_ref = SHORT_TERM_REF ; //<S2SV> as_ref_pic_st_curr_before [ i ] = ps_pic_buf ; //<S2SV> } //<S2SV> for ( i = 0 ; i < ( WORD32 ) u4_num_st_curr_after ; i ++ ) //<S2SV> { //<S2SV> ps_pic_buf = ihevc_dpb_mgr_get_ref_by_poc ( ps_dpb_mgr , ai4_poc_st_curr_after [ i ] ) ; //<S2SV> if ( NULL != ps_pic_buf ) //<S2SV> ps_pic_buf -> u1_used_as_ref = SHORT_TERM_REF ; //<S2SV> as_ref_pic_st_curr_after [ i ] = ps_pic_buf ; //<S2SV> } //<S2SV> for ( i = 0 ; i < ( WORD32 ) u4_num_st_foll ; i ++ ) //<S2SV> { //<S2SV> ps_pic_buf = ihevc_dpb_mgr_get_ref_by_poc ( ps_dpb_mgr , ai4_poc_st_foll [ i ] ) ; //<S2SV> if ( NULL != ps_pic_buf ) //<S2SV> ps_pic_buf -> u1_used_as_ref = SHORT_TERM_REF ; //<S2SV> as_ref_pic_st_foll [ i ] = ps_pic_buf ; //<S2SV> } //<S2SV> u4_num_rps_curr_temp_list0 = ( WORD32 ) u4_num_total_curr > ps_slice_hdr -> i1_num_ref_idx_l0_active ? ( WORD32 ) u4_num_total_curr : ps_slice_hdr -> i1_num_ref_idx_l0_active ; //<S2SV> r_idx = 0 ; //<S2SV> if ( ( PSLICE == ps_slice_hdr -> i1_slice_type ) || //<S2SV> ( BSLICE == ps_slice_hdr -> i1_slice_type ) ) //<S2SV> { //<S2SV> while ( r_idx < u4_num_rps_curr_temp_list0 ) //<S2SV> { //<S2SV> for ( i = 0 ; ( i < ( WORD32 ) u4_num_st_curr_before ) && ( r_idx < u4_num_rps_curr_temp_list0 ) ; r_idx ++ , i ++ ) //<S2SV> { //<S2SV> if ( NULL == as_ref_pic_st_curr_before [ i ] ) //<S2SV> { //<S2SV> as_ref_pic_st_curr_before [ i ] = ihevc_dpb_mgr_get_ref_by_nearest_poc ( ps_dpb_mgr , ai4_poc_st_curr_before [ i ] ) ; //<S2SV> } //<S2SV> as_ref_pic_list_temp0 [ r_idx ] = as_ref_pic_st_curr_before [ i ] ; //<S2SV> } //<S2SV> for ( i = 0 ; ( i < ( WORD32 ) u4_num_st_curr_after ) && ( r_idx < u4_num_rps_curr_temp_list0 ) ; r_idx ++ , i ++ ) //<S2SV> { //<S2SV> if ( NULL == as_ref_pic_st_curr_after [ i ] ) //<S2SV> { //<S2SV> as_ref_pic_st_curr_after [ i ] = ihevc_dpb_mgr_get_ref_by_nearest_poc ( ps_dpb_mgr , ai4_poc_st_curr_after [ i ] ) ; //<S2SV> } //<S2SV> as_ref_pic_list_temp0 [ r_idx ] = as_ref_pic_st_curr_after [ i ] ; //<S2SV> } //<S2SV> for ( i = 0 ; ( i < ( WORD32 ) u4_num_lt_curr ) && ( r_idx < u4_num_rps_curr_temp_list0 ) ; r_idx ++ , i ++ ) //<S2SV> { //<S2SV> if ( NULL == as_ref_pic_lt_curr [ i ] ) //<S2SV> { //<S2SV> as_ref_pic_lt_curr [ i ] = ihevc_dpb_mgr_get_ref_by_nearest_poc ( ps_dpb_mgr , ai4_poc_lt_curr [ i ] ) ; //<S2SV> } //<S2SV> as_ref_pic_list_temp0 [ r_idx ] = as_ref_pic_lt_curr [ i ] ; //<S2SV> } //<S2SV> } //<S2SV> for ( r_idx = 0 ; ( WORD32 ) r_idx < ps_slice_hdr -> i1_num_ref_idx_l0_active ; r_idx ++ ) //<S2SV> { //<S2SV> pic_buf_t * ps_pic_buf ; //<S2SV> ps_slice_hdr -> as_ref_pic_list0 [ r_idx ] . pv_pic_buf = ps_slice_hdr -> s_rplm . i1_ref_pic_list_modification_flag_l0 ? ( void * ) as_ref_pic_list_temp0 [ ps_slice_hdr -> s_rplm . i1_list_entry_l0 [ r_idx ] ] : ( void * ) as_ref_pic_list_temp0 [ r_idx ] ; //<S2SV> ps_pic_buf = ( pic_buf_t * ) ps_slice_hdr -> as_ref_pic_list0 [ r_idx ] . pv_pic_buf ; //<S2SV> if ( ps_pic_buf == NULL ) //<S2SV> return IHEVCD_REF_PIC_NOT_FOUND ; //<S2SV> ps_mv_buf = ihevcd_mv_mgr_get_poc ( ps_mv_buf_mgr , ps_pic_buf -> i4_abs_poc ) ; //<S2SV> ps_slice_hdr -> as_ref_pic_list0 [ r_idx ] . pv_mv_buf = ps_mv_buf ; //<S2SV> } //<S2SV> if ( ps_slice_hdr -> i1_slice_type == BSLICE ) //<S2SV> { //<S2SV> u4_num_rps_curr_temp_list1 = ( WORD32 ) u4_num_total_curr > ps_slice_hdr -> i1_num_ref_idx_l1_active ? ( WORD32 ) u4_num_total_curr : ps_slice_hdr -> i1_num_ref_idx_l1_active ; //<S2SV> r_idx = 0 ; //<S2SV> while ( r_idx < u4_num_rps_curr_temp_list1 ) //<S2SV> { //<S2SV> for ( i = 0 ; ( i < ( WORD32 ) u4_num_st_curr_after ) && ( r_idx < u4_num_rps_curr_temp_list1 ) ; r_idx ++ , i ++ ) //<S2SV> { //<S2SV> if ( NULL == as_ref_pic_st_curr_after [ i ] ) //<S2SV> { //<S2SV> as_ref_pic_st_curr_after [ i ] = ihevc_dpb_mgr_get_ref_by_nearest_poc ( ps_dpb_mgr , ai4_poc_st_curr_after [ i ] ) ; //<S2SV> } //<S2SV> as_ref_pic_list_temp1 [ r_idx ] = as_ref_pic_st_curr_after [ i ] ; //<S2SV> } //<S2SV> for ( i = 0 ; ( i < ( WORD32 ) u4_num_st_curr_before ) && ( r_idx < u4_num_rps_curr_temp_list1 ) ; r_idx ++ , i ++ ) //<S2SV> { //<S2SV> if ( NULL == as_ref_pic_st_curr_before [ i ] ) //<S2SV> { //<S2SV> as_ref_pic_st_curr_before [ i ] = ihevc_dpb_mgr_get_ref_by_nearest_poc ( ps_dpb_mgr , ai4_poc_st_curr_before [ i ] ) ; //<S2SV> } //<S2SV> as_ref_pic_list_temp1 [ r_idx ] = as_ref_pic_st_curr_before [ i ] ; //<S2SV> } //<S2SV> for ( i = 0 ; ( i < ( WORD32 ) u4_num_lt_curr ) && ( r_idx < u4_num_rps_curr_temp_list1 ) ; r_idx ++ , i ++ ) //<S2SV> { //<S2SV> if ( NULL == as_ref_pic_lt_curr [ i ] ) //<S2SV> { //<S2SV> as_ref_pic_lt_curr [ i ] = ihevc_dpb_mgr_get_ref_by_nearest_poc ( ps_dpb_mgr , ai4_poc_lt_curr [ i ] ) ; //<S2SV> } //<S2SV> as_ref_pic_list_temp1 [ r_idx ] = as_ref_pic_lt_curr [ i ] ; //<S2SV> } //<S2SV> } //<S2SV> for ( r_idx = 0 ; ( WORD32 ) r_idx < ps_slice_hdr -> i1_num_ref_idx_l1_active ; r_idx ++ ) //<S2SV> { //<S2SV> pic_buf_t * ps_pic_buf ; //<S2SV> ps_slice_hdr -> as_ref_pic_list1 [ r_idx ] . pv_pic_buf = ps_slice_hdr -> s_rplm . i1_ref_pic_list_modification_flag_l1 ? ( void * ) as_ref_pic_list_temp1 [ ps_slice_hdr -> s_rplm . i1_list_entry_l1 [ r_idx ] ] : ( void * ) as_ref_pic_list_temp1 [ r_idx ] ; //<S2SV> ps_pic_buf = ( pic_buf_t * ) ps_slice_hdr -> as_ref_pic_list1 [ r_idx ] . pv_pic_buf ; //<S2SV> if ( ps_pic_buf == NULL ) //<S2SV> return IHEVCD_REF_PIC_NOT_FOUND ; //<S2SV> ps_mv_buf = ihevcd_mv_mgr_get_poc ( ps_mv_buf_mgr , ps_pic_buf -> i4_abs_poc ) ; //<S2SV> ps_slice_hdr -> as_ref_pic_list1 [ r_idx ] . pv_mv_buf = ps_mv_buf ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> DEBUG_PRINT_REF_LIST_POCS ( i4_pic_order_cnt_val , ps_slice_hdr , ps_dpb_mgr , u4_num_st_curr_before , u4_num_st_curr_after , u4_num_st_foll , u4_num_lt_curr , u4_num_lt_foll , ai4_poc_st_curr_before , ai4_poc_st_curr_after , ai4_poc_st_foll , ai4_poc_lt_curr , ai4_poc_lt_foll ) ; //<S2SV> for ( i = 0 ; i < MAX_DPB_BUFS ; i ++ ) //<S2SV> { //<S2SV> if ( ( ps_dpb_mgr -> as_dpb_info [ i ] . ps_pic_buf ) && ( UNUSED_FOR_REF == ps_dpb_mgr -> as_dpb_info [ i ] . ps_pic_buf -> u1_used_as_ref ) ) //<S2SV> { //<S2SV> pic_buf_t * ps_pic_buf = ps_dpb_mgr -> as_dpb_info [ i ] . ps_pic_buf ; //<S2SV> mv_buf_t * ps_mv_buf ; //<S2SV> ihevc_dpb_mgr_del_ref ( ps_dpb_mgr , ( buf_mgr_t * ) ps_codec -> pv_pic_buf_mgr , ps_pic_buf -> i4_abs_poc ) ; //<S2SV> ps_mv_buf = ( mv_buf_t * ) ps_codec -> ps_mv_buf ; //<S2SV> for ( j = 0 ; j < ps_codec -> i4_max_dpb_size ; j ++ ) //<S2SV> { //<S2SV> if ( ps_mv_buf && ps_mv_buf -> i4_abs_poc == ps_pic_buf -> i4_abs_poc ) //<S2SV> { //<S2SV> ihevc_buf_mgr_release ( ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr , j , BUF_MGR_REF ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ps_mv_buf ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return IHEVCD_SUCCESS ; //<S2SV> } //<S2SV> 