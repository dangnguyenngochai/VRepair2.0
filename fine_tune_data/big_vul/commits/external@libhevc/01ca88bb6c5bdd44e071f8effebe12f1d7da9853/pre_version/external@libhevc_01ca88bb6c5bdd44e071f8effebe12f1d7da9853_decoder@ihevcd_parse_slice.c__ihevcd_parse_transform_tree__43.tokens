WORD32 ihevcd_parse_transform_tree ( codec_t * ps_codec , //<S2SV> WORD32 x0 , WORD32 y0 , //<S2SV> WORD32 cu_x_base , WORD32 cu_y_base , //<S2SV> WORD32 log2_trafo_size , //<S2SV> WORD32 trafo_depth , //<S2SV> WORD32 blk_idx , //<S2SV> WORD32 intra_pred_mode ) //<S2SV> { //<S2SV> IHEVCD_ERROR_T ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; //<S2SV> sps_t * ps_sps ; //<S2SV> pps_t * ps_pps ; //<S2SV> WORD32 value ; //<S2SV> WORD32 x1 , y1 ; //<S2SV> WORD32 max_trafo_depth ; //<S2SV> bitstrm_t * ps_bitstrm = & ps_codec -> s_parse . s_bitstrm ; //<S2SV> WORD32 intra_split_flag ; //<S2SV> WORD32 split_transform_flag ; //<S2SV> WORD32 ctxt_idx ; //<S2SV> cab_ctxt_t * ps_cabac = & ps_codec -> s_parse . s_cabac ; //<S2SV> max_trafo_depth = ps_codec -> s_parse . s_cu . i4_max_trafo_depth ; //<S2SV> ps_sps = ps_codec -> s_parse . ps_sps ; //<S2SV> ps_pps = ps_codec -> s_parse . ps_pps ; //<S2SV> intra_split_flag = ps_codec -> s_parse . s_cu . i4_intra_split_flag ; //<S2SV> { //<S2SV> split_transform_flag = 0 ; //<S2SV> if ( ( log2_trafo_size <= ps_sps -> i1_log2_max_transform_block_size ) && //<S2SV> ( log2_trafo_size > ps_sps -> i1_log2_min_transform_block_size ) && //<S2SV> ( trafo_depth < max_trafo_depth ) && //<S2SV> ! ( intra_split_flag && ( trafo_depth == 0 ) ) ) //<S2SV> { //<S2SV> ctxt_idx = IHEVC_CAB_SPLIT_TFM + ( 5 - log2_trafo_size ) ; //<S2SV> TRACE_CABAC_CTXT ( "split_transform_flag" , ps_cabac -> u4_range , ctxt_idx ) ; //<S2SV> split_transform_flag = ihevcd_cabac_decode_bin ( ps_cabac , ps_bitstrm , ctxt_idx ) ; //<S2SV> AEV_TRACE ( "split_transform_flag" , split_transform_flag , //<S2SV> ps_cabac -> u4_range ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> WORD32 inter_split_flag = 0 ; //<S2SV> if ( ( 0 == ps_sps -> i1_max_transform_hierarchy_depth_inter ) && //<S2SV> ( PRED_MODE_INTER == ps_codec -> s_parse . s_cu . i4_pred_mode ) && //<S2SV> ( PART_2Nx2N != ps_codec -> s_parse . s_cu . i4_part_mode ) && //<S2SV> ( 0 == trafo_depth ) ) //<S2SV> { //<S2SV> inter_split_flag = 1 ; //<S2SV> } //<S2SV> if ( ( log2_trafo_size > ps_sps -> i1_log2_max_transform_block_size ) || //<S2SV> ( ( 1 == intra_split_flag ) && ( 0 == trafo_depth ) ) || //<S2SV> ( 1 == inter_split_flag ) ) //<S2SV> { //<S2SV> split_transform_flag = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( 0 == trafo_depth ) //<S2SV> { //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth ] = 0 ; //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth ] = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth ] = ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth - 1 ] ; //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth ] = ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth - 1 ] ; //<S2SV> } //<S2SV> if ( trafo_depth == 0 || log2_trafo_size > 2 ) //<S2SV> { //<S2SV> ctxt_idx = IHEVC_CAB_CBCR_IDX + trafo_depth ; //<S2SV> if ( ( trafo_depth == 0 ) || ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth - 1 ] ) //<S2SV> { //<S2SV> TRACE_CABAC_CTXT ( "cbf_cb" , ps_cabac -> u4_range , ctxt_idx ) ; //<S2SV> value = ihevcd_cabac_decode_bin ( ps_cabac , ps_bitstrm , ctxt_idx ) ; //<S2SV> AEV_TRACE ( "cbf_cb" , value , ps_cabac -> u4_range ) ; //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth ] = value ; //<S2SV> } //<S2SV> if ( ( trafo_depth == 0 ) || ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth - 1 ] ) //<S2SV> { //<S2SV> TRACE_CABAC_CTXT ( "cbf_cr" , ps_cabac -> u4_range , ctxt_idx ) ; //<S2SV> value = ihevcd_cabac_decode_bin ( ps_cabac , ps_bitstrm , ctxt_idx ) ; //<S2SV> AEV_TRACE ( "cbf_cr" , value , ps_cabac -> u4_range ) ; //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth ] = value ; //<S2SV> } //<S2SV> } //<S2SV> if ( split_transform_flag ) //<S2SV> { //<S2SV> WORD32 intra_pred_mode_tmp ; //<S2SV> x1 = x0 + ( ( 1 << log2_trafo_size ) >> 1 ) ; //<S2SV> y1 = y0 + ( ( 1 << log2_trafo_size ) >> 1 ) ; //<S2SV> intra_pred_mode_tmp = trafo_depth ? intra_pred_mode : ps_codec -> s_parse . s_cu . ai4_intra_luma_pred_mode [ 0 ] ; //<S2SV> ihevcd_parse_transform_tree ( ps_codec , x0 , y0 , x0 , y0 , log2_trafo_size - 1 , trafo_depth + 1 , 0 , intra_pred_mode_tmp ) ; //<S2SV> intra_pred_mode_tmp = trafo_depth ? intra_pred_mode : ps_codec -> s_parse . s_cu . ai4_intra_luma_pred_mode [ 1 ] ; //<S2SV> ihevcd_parse_transform_tree ( ps_codec , x1 , y0 , x0 , y0 , log2_trafo_size - 1 , trafo_depth + 1 , 1 , intra_pred_mode_tmp ) ; //<S2SV> intra_pred_mode_tmp = trafo_depth ? intra_pred_mode : ps_codec -> s_parse . s_cu . ai4_intra_luma_pred_mode [ 2 ] ; //<S2SV> ihevcd_parse_transform_tree ( ps_codec , x0 , y1 , x0 , y0 , log2_trafo_size - 1 , trafo_depth + 1 , 2 , intra_pred_mode_tmp ) ; //<S2SV> intra_pred_mode_tmp = trafo_depth ? intra_pred_mode : ps_codec -> s_parse . s_cu . ai4_intra_luma_pred_mode [ 3 ] ; //<S2SV> ihevcd_parse_transform_tree ( ps_codec , x1 , y1 , x0 , y0 , log2_trafo_size - 1 , trafo_depth + 1 , 3 , intra_pred_mode_tmp ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> WORD32 ctb_x_base ; //<S2SV> WORD32 ctb_y_base ; //<S2SV> WORD32 cu_qp_delta_abs ; //<S2SV> tu_t * ps_tu = ps_codec -> s_parse . ps_tu ; //<S2SV> cu_qp_delta_abs = 0 ; //<S2SV> ctb_x_base = ps_codec -> s_parse . i4_ctb_x << ps_sps -> i1_log2_ctb_size ; //<S2SV> ctb_y_base = ps_codec -> s_parse . i4_ctb_y << ps_sps -> i1_log2_ctb_size ; //<S2SV> if ( ( ps_codec -> s_parse . s_cu . i4_pred_mode == PRED_MODE_INTRA ) || //<S2SV> ( trafo_depth != 0 ) || //<S2SV> ( ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth ] ) || //<S2SV> ( ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth ] ) ) //<S2SV> { //<S2SV> ctxt_idx = IHEVC_CAB_CBF_LUMA_IDX ; //<S2SV> ctxt_idx += ( trafo_depth == 0 ) ? 1 : 0 ; //<S2SV> TRACE_CABAC_CTXT ( "cbf_luma" , ps_cabac -> u4_range , ctxt_idx ) ; //<S2SV> value = ihevcd_cabac_decode_bin ( ps_cabac , ps_bitstrm , ctxt_idx ) ; //<S2SV> AEV_TRACE ( "cbf_luma" , value , ps_cabac -> u4_range ) ; //<S2SV> ps_codec -> s_parse . s_cu . i1_cbf_luma = value ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_codec -> s_parse . s_cu . i1_cbf_luma = 1 ; //<S2SV> } //<S2SV> ps_tu -> b1_cb_cbf = 0 ; //<S2SV> ps_tu -> b1_cr_cbf = 0 ; //<S2SV> ps_tu -> b1_y_cbf = 0 ; //<S2SV> ps_tu -> b4_pos_x = ( ( x0 - ctb_x_base ) >> 2 ) ; //<S2SV> ps_tu -> b4_pos_y = ( ( y0 - ctb_y_base ) >> 2 ) ; //<S2SV> ps_tu -> b1_transquant_bypass = ps_codec -> s_parse . s_cu . i4_cu_transquant_bypass ; //<S2SV> ps_tu -> b3_size = ( log2_trafo_size - 2 ) ; //<S2SV> ps_tu -> b7_qp = ps_codec -> s_parse . u4_qp ; //<S2SV> ps_tu -> b6_luma_intra_mode = intra_pred_mode ; //<S2SV> ps_tu -> b3_chroma_intra_mode_idx = ps_codec -> s_parse . s_cu . i4_intra_chroma_pred_mode_idx ; //<S2SV> if ( ps_codec -> s_parse . s_cu . i1_cbf_luma || //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth ] || //<S2SV> ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth ] ) //<S2SV> { //<S2SV> WORD32 intra_pred_mode_chroma ; //<S2SV> if ( ps_pps -> i1_cu_qp_delta_enabled_flag && ! ps_codec -> s_parse . i4_is_cu_qp_delta_coded ) //<S2SV> { //<S2SV> WORD32 c_max = TU_MAX_QP_DELTA_ABS ; //<S2SV> WORD32 ctxt_inc = IHEVC_CAB_QP_DELTA_ABS ; //<S2SV> WORD32 ctxt_inc_max = CTXT_MAX_QP_DELTA_ABS ; //<S2SV> TRACE_CABAC_CTXT ( "cu_qp_delta_abs" , ps_cabac -> u4_range , ctxt_inc ) ; //<S2SV> cu_qp_delta_abs = ihevcd_cabac_decode_bins_tunary ( ps_cabac , //<S2SV> ps_bitstrm , //<S2SV> c_max , //<S2SV> ctxt_inc , //<S2SV> 0 , //<S2SV> ctxt_inc_max ) ; //<S2SV> if ( cu_qp_delta_abs >= c_max ) //<S2SV> { //<S2SV> value = ihevcd_cabac_decode_bypass_bins_egk ( ps_cabac , ps_bitstrm , 0 ) ; //<S2SV> cu_qp_delta_abs += value ; //<S2SV> } //<S2SV> AEV_TRACE ( "cu_qp_delta_abs" , cu_qp_delta_abs , ps_cabac -> u4_range ) ; //<S2SV> ps_codec -> s_parse . i4_is_cu_qp_delta_coded = 1 ; //<S2SV> if ( cu_qp_delta_abs ) //<S2SV> { //<S2SV> value = ihevcd_cabac_decode_bypass_bin ( ps_cabac , ps_bitstrm ) ; //<S2SV> AEV_TRACE ( "cu_qp_delta_sign" , value , ps_cabac -> u4_range ) ; //<S2SV> if ( value ) //<S2SV> cu_qp_delta_abs = - cu_qp_delta_abs ; //<S2SV> } //<S2SV> ps_codec -> s_parse . s_cu . i4_cu_qp_delta = cu_qp_delta_abs ; //<S2SV> } //<S2SV> if ( ps_codec -> s_parse . s_cu . i1_cbf_luma ) //<S2SV> { //<S2SV> ps_tu -> b1_y_cbf = 1 ; //<S2SV> ihevcd_parse_residual_coding ( ps_codec , x0 , y0 , log2_trafo_size , 0 , intra_pred_mode ) ; //<S2SV> } //<S2SV> if ( 4 == ps_codec -> s_parse . s_cu . i4_intra_chroma_pred_mode_idx ) //<S2SV> intra_pred_mode_chroma = ps_codec -> s_parse . s_cu . ai4_intra_luma_pred_mode [ 0 ] ; //<S2SV> else //<S2SV> { //<S2SV> intra_pred_mode_chroma = gau1_intra_pred_chroma_modes [ ps_codec -> s_parse . s_cu . i4_intra_chroma_pred_mode_idx ] ; //<S2SV> if ( intra_pred_mode_chroma == //<S2SV> ps_codec -> s_parse . s_cu . ai4_intra_luma_pred_mode [ 0 ] ) //<S2SV> { //<S2SV> intra_pred_mode_chroma = INTRA_ANGULAR ( 34 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( log2_trafo_size > 2 ) //<S2SV> { //<S2SV> if ( ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth ] ) //<S2SV> { //<S2SV> ps_tu -> b1_cb_cbf = 1 ; //<S2SV> ihevcd_parse_residual_coding ( ps_codec , x0 , y0 , log2_trafo_size - 1 , 1 , intra_pred_mode_chroma ) ; //<S2SV> } //<S2SV> if ( ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth ] ) //<S2SV> { //<S2SV> ps_tu -> b1_cr_cbf = 1 ; //<S2SV> ihevcd_parse_residual_coding ( ps_codec , x0 , y0 , log2_trafo_size - 1 , 2 , intra_pred_mode_chroma ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( blk_idx == 3 ) //<S2SV> { //<S2SV> if ( ps_codec -> s_parse . s_cu . ai1_cbf_cb [ trafo_depth ] ) //<S2SV> { //<S2SV> ps_tu -> b1_cb_cbf = 1 ; //<S2SV> ihevcd_parse_residual_coding ( ps_codec , cu_x_base , cu_y_base , log2_trafo_size , 1 , intra_pred_mode_chroma ) ; //<S2SV> } //<S2SV> if ( ps_codec -> s_parse . s_cu . ai1_cbf_cr [ trafo_depth ] ) //<S2SV> { //<S2SV> ps_tu -> b1_cr_cbf = 1 ; //<S2SV> ihevcd_parse_residual_coding ( ps_codec , cu_x_base , cu_y_base , log2_trafo_size , 2 , intra_pred_mode_chroma ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_tu -> b3_chroma_intra_mode_idx = INTRA_PRED_CHROMA_IDX_NONE ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ( 3 != blk_idx ) && ( 2 == log2_trafo_size ) ) //<S2SV> { //<S2SV> ps_tu -> b3_chroma_intra_mode_idx = INTRA_PRED_CHROMA_IDX_NONE ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> if ( ( ps_codec -> s_parse . s_cu . i4_pos_x << 3 ) == ( ps_tu -> b4_pos_x << 2 ) && //<S2SV> ( ps_codec -> s_parse . s_cu . i4_pos_y << 3 ) == ( ps_tu -> b4_pos_y << 2 ) ) //<S2SV> { //<S2SV> ps_tu -> b1_first_tu_in_cu = 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_tu -> b1_first_tu_in_cu = 0 ; //<S2SV> } //<S2SV> } //<S2SV> ps_codec -> s_parse . ps_tu ++ ; //<S2SV> ps_codec -> s_parse . s_cu . i4_tu_cnt ++ ; //<S2SV> ps_codec -> s_parse . i4_pic_tu_idx ++ ; //<S2SV> } //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> 