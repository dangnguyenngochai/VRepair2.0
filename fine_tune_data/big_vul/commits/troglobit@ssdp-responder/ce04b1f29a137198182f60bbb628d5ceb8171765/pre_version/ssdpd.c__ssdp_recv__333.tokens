static void ssdp_recv ( int sd ) //<S2SV> { //<S2SV> ssize_t len ; //<S2SV> struct sockaddr sa ; //<S2SV> socklen_t salen ; //<S2SV> char buf [ MAX_PKT_SIZE ] ; //<S2SV> memset ( buf , 0 , sizeof ( buf ) ) ; //<S2SV> len = recvfrom ( sd , buf , sizeof ( buf ) , MSG_DONTWAIT , & sa , & salen ) ; //<S2SV> if ( len > 0 ) { //<S2SV> buf [ len ] = 0 ; //<S2SV> if ( sa . sa_family != AF_INET ) //<S2SV> return ; //<S2SV> if ( strstr ( buf , "M-SEARCH<S2SV_blank>*" ) ) { //<S2SV> size_t i ; //<S2SV> char * ptr , * type ; //<S2SV> struct ifsock * ifs ; //<S2SV> struct sockaddr_in * sin = ( struct sockaddr_in * ) & sa ; //<S2SV> ifs = find_outbound ( & sa ) ; //<S2SV> if ( ! ifs ) { //<S2SV> logit ( LOG_DEBUG , "No<S2SV_blank>matching<S2SV_blank>socket<S2SV_blank>for<S2SV_blank>client<S2SV_blank>%s" , inet_ntoa ( sin -> sin_addr ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> logit ( LOG_DEBUG , "Matching<S2SV_blank>socket<S2SV_blank>for<S2SV_blank>client<S2SV_blank>%s" , inet_ntoa ( sin -> sin_addr ) ) ; //<S2SV> type = strcasestr ( buf , "\\r\\nST:" ) ; //<S2SV> if ( ! type ) { //<S2SV> logit ( LOG_DEBUG , "No<S2SV_blank>Search<S2SV_blank>Type<S2SV_blank>(ST:)<S2SV_blank>found<S2SV_blank>in<S2SV_blank>M-SEARCH<S2SV_blank>*,<S2SV_blank>assuming<S2SV_blank>" SSDP_ST_ALL ) ; //<S2SV> type = SSDP_ST_ALL ; //<S2SV> send_message ( ifs , type , & sa ) ; //<S2SV> return ; //<S2SV> } //<S2SV> type = strchr ( type , ':' ) ; //<S2SV> if ( ! type ) //<S2SV> return ; //<S2SV> type ++ ; //<S2SV> while ( isspace ( * type ) ) //<S2SV> type ++ ; //<S2SV> ptr = strstr ( type , "\\r\\n" ) ; //<S2SV> if ( ! ptr ) //<S2SV> return ; //<S2SV> * ptr = 0 ; //<S2SV> for ( i = 0 ; supported_types [ i ] ; i ++ ) { //<S2SV> if ( ! strcmp ( supported_types [ i ] , type ) ) { //<S2SV> logit ( LOG_DEBUG , "M-SEARCH<S2SV_blank>*<S2SV_blank>ST:<S2SV_blank>%s<S2SV_blank>from<S2SV_blank>%s<S2SV_blank>port<S2SV_blank>%d" , type , //<S2SV> inet_ntoa ( sin -> sin_addr ) , ntohs ( sin -> sin_port ) ) ; //<S2SV> send_message ( ifs , type , & sa ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> logit ( LOG_DEBUG , "M-SEARCH<S2SV_blank>*<S2SV_blank>for<S2SV_blank>unsupported<S2SV_blank>ST:<S2SV_blank>%s<S2SV_blank>from<S2SV_blank>%s" , type , //<S2SV> inet_ntoa ( sin -> sin_addr ) ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 