BOOL nsc_process_message ( NSC_CONTEXT * context , UINT16 bpp , //<S2SV> UINT32 width , UINT32 height , //<S2SV> const BYTE * data , UINT32 length , //<S2SV> BYTE * pDstData , UINT32 DstFormat , //<S2SV> UINT32 nDstStride , //<S2SV> UINT32 nXDst , UINT32 nYDst , UINT32 nWidth , //<S2SV> UINT32 nHeight , UINT32 flip ) //<S2SV> { //<S2SV> wStream * s ; //<S2SV> BOOL ret ; //<S2SV> s = Stream_New ( ( BYTE * ) data , length ) ; //<S2SV> if ( ! s ) //<S2SV> return FALSE ; //<S2SV> if ( nDstStride == 0 ) //<S2SV> nDstStride = nWidth * GetBytesPerPixel ( DstFormat ) ; //<S2SV> switch ( bpp ) //<S2SV> { //<S2SV> case 32 : //<S2SV> context -> format = PIXEL_FORMAT_BGRA32 ; //<S2SV> break ; //<S2SV> case 24 : //<S2SV> context -> format = PIXEL_FORMAT_BGR24 ; //<S2SV> break ; //<S2SV> case 16 : //<S2SV> context -> format = PIXEL_FORMAT_BGR16 ; //<S2SV> break ; //<S2SV> case 8 : //<S2SV> context -> format = PIXEL_FORMAT_RGB8 ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> context -> format = PIXEL_FORMAT_A4 ; //<S2SV> break ; //<S2SV> default : //<S2SV> Stream_Free ( s , TRUE ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> context -> width = width ; //<S2SV> context -> height = height ; //<S2SV> ret = nsc_context_initialize ( context , s ) ; //<S2SV> Stream_Free ( s , FALSE ) ; //<S2SV> if ( ! ret ) //<S2SV> return FALSE ; //<S2SV> PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) //<S2SV> nsc_rle_decompress_data ( context ) ; //<S2SV> PROFILER_EXIT ( context -> priv -> prof_nsc_rle_decompress_data ) //<S2SV> PROFILER_ENTER ( context -> priv -> prof_nsc_decode ) //<S2SV> context -> decode ( context ) ; //<S2SV> PROFILER_EXIT ( context -> priv -> prof_nsc_decode ) //<S2SV> if ( ! freerdp_image_copy ( pDstData , DstFormat , nDstStride , nXDst , nYDst , //<S2SV> width , height , context -> BitmapData , //<S2SV> PIXEL_FORMAT_BGRA32 , 0 , 0 , 0 , NULL , flip ) ) //<S2SV> return FALSE ; //<S2SV> return TRUE ; //<S2SV> } //<S2SV> 