static void nsc_encode_argb_to_aycocg ( NSC_CONTEXT * context , const BYTE * data , //<S2SV> UINT32 scanline ) //<S2SV> { //<S2SV> UINT16 x ; //<S2SV> UINT16 y ; //<S2SV> UINT16 rw ; //<S2SV> BYTE ccl ; //<S2SV> const BYTE * src ; //<S2SV> BYTE * yplane = NULL ; //<S2SV> BYTE * coplane = NULL ; //<S2SV> BYTE * cgplane = NULL ; //<S2SV> BYTE * aplane = NULL ; //<S2SV> INT16 r_val ; //<S2SV> INT16 g_val ; //<S2SV> INT16 b_val ; //<S2SV> BYTE a_val ; //<S2SV> UINT32 tempWidth ; //<S2SV> tempWidth = ROUND_UP_TO ( context -> width , 8 ) ; //<S2SV> rw = ( context -> ChromaSubsamplingLevel ? tempWidth : context -> width ) ; //<S2SV> ccl = context -> ColorLossLevel ; //<S2SV> for ( y = 0 ; y < context -> height ; y ++ ) //<S2SV> { //<S2SV> src = data + ( context -> height - 1 - y ) * scanline ; //<S2SV> yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; //<S2SV> coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; //<S2SV> cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; //<S2SV> aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; //<S2SV> for ( x = 0 ; x < context -> width ; x ++ ) //<S2SV> { //<S2SV> switch ( context -> format ) //<S2SV> { //<S2SV> case PIXEL_FORMAT_BGRX32 : //<S2SV> b_val = * src ++ ; //<S2SV> g_val = * src ++ ; //<S2SV> r_val = * src ++ ; //<S2SV> src ++ ; //<S2SV> a_val = 0xFF ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_BGRA32 : //<S2SV> b_val = * src ++ ; //<S2SV> g_val = * src ++ ; //<S2SV> r_val = * src ++ ; //<S2SV> a_val = * src ++ ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_RGBX32 : //<S2SV> r_val = * src ++ ; //<S2SV> g_val = * src ++ ; //<S2SV> b_val = * src ++ ; //<S2SV> src ++ ; //<S2SV> a_val = 0xFF ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_RGBA32 : //<S2SV> r_val = * src ++ ; //<S2SV> g_val = * src ++ ; //<S2SV> b_val = * src ++ ; //<S2SV> a_val = * src ++ ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_BGR24 : //<S2SV> b_val = * src ++ ; //<S2SV> g_val = * src ++ ; //<S2SV> r_val = * src ++ ; //<S2SV> a_val = 0xFF ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_RGB24 : //<S2SV> r_val = * src ++ ; //<S2SV> g_val = * src ++ ; //<S2SV> b_val = * src ++ ; //<S2SV> a_val = 0xFF ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_BGR16 : //<S2SV> b_val = ( INT16 ) ( ( ( * ( src + 1 ) ) & 0xF8 ) | ( ( * ( src + 1 ) ) >> 5 ) ) ; //<S2SV> g_val = ( INT16 ) ( ( ( ( * ( src + 1 ) ) & 0x07 ) << 5 ) | ( ( ( * src ) & 0xE0 ) >> 3 ) ) ; //<S2SV> r_val = ( INT16 ) ( ( ( ( * src ) & 0x1F ) << 3 ) | ( ( ( * src ) >> 2 ) & 0x07 ) ) ; //<S2SV> a_val = 0xFF ; //<S2SV> src += 2 ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_RGB16 : //<S2SV> r_val = ( INT16 ) ( ( ( * ( src + 1 ) ) & 0xF8 ) | ( ( * ( src + 1 ) ) >> 5 ) ) ; //<S2SV> g_val = ( INT16 ) ( ( ( ( * ( src + 1 ) ) & 0x07 ) << 5 ) | ( ( ( * src ) & 0xE0 ) >> 3 ) ) ; //<S2SV> b_val = ( INT16 ) ( ( ( ( * src ) & 0x1F ) << 3 ) | ( ( ( * src ) >> 2 ) & 0x07 ) ) ; //<S2SV> a_val = 0xFF ; //<S2SV> src += 2 ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_A4 : //<S2SV> { //<S2SV> int shift ; //<S2SV> BYTE idx ; //<S2SV> shift = ( 7 - ( x % 8 ) ) ; //<S2SV> idx = ( ( * src ) >> shift ) & 1 ; //<S2SV> idx |= ( ( ( * ( src + 1 ) ) >> shift ) & 1 ) << 1 ; //<S2SV> idx |= ( ( ( * ( src + 2 ) ) >> shift ) & 1 ) << 2 ; //<S2SV> idx |= ( ( ( * ( src + 3 ) ) >> shift ) & 1 ) << 3 ; //<S2SV> idx *= 3 ; //<S2SV> r_val = ( INT16 ) context -> palette [ idx ] ; //<S2SV> g_val = ( INT16 ) context -> palette [ idx + 1 ] ; //<S2SV> b_val = ( INT16 ) context -> palette [ idx + 2 ] ; //<S2SV> if ( shift == 0 ) //<S2SV> src += 4 ; //<S2SV> } //<S2SV> a_val = 0xFF ; //<S2SV> break ; //<S2SV> case PIXEL_FORMAT_RGB8 : //<S2SV> { //<S2SV> int idx = ( * src ) * 3 ; //<S2SV> r_val = ( INT16 ) context -> palette [ idx ] ; //<S2SV> g_val = ( INT16 ) context -> palette [ idx + 1 ] ; //<S2SV> b_val = ( INT16 ) context -> palette [ idx + 2 ] ; //<S2SV> src ++ ; //<S2SV> } //<S2SV> a_val = 0xFF ; //<S2SV> break ; //<S2SV> default : //<S2SV> r_val = g_val = b_val = a_val = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> * yplane ++ = ( BYTE ) ( ( r_val >> 2 ) + ( g_val >> 1 ) + ( b_val >> 2 ) ) ; //<S2SV> * coplane ++ = ( BYTE ) ( ( r_val - b_val ) >> ccl ) ; //<S2SV> * cgplane ++ = ( BYTE ) ( ( - ( r_val >> 1 ) + g_val - ( b_val >> 1 ) ) >> ccl ) ; //<S2SV> * aplane ++ = a_val ; //<S2SV> } //<S2SV> if ( context -> ChromaSubsamplingLevel && ( x % 2 ) == 1 ) //<S2SV> { //<S2SV> * yplane = * ( yplane - 1 ) ; //<S2SV> * coplane = * ( coplane - 1 ) ; //<S2SV> * cgplane = * ( cgplane - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( context -> ChromaSubsamplingLevel && ( y % 2 ) == 1 ) //<S2SV> { //<S2SV> yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; //<S2SV> coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; //<S2SV> cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; //<S2SV> CopyMemory ( yplane , yplane - rw , rw ) ; //<S2SV> CopyMemory ( coplane , coplane - rw , rw ) ; //<S2SV> CopyMemory ( cgplane , cgplane - rw , rw ) ; //<S2SV> } //<S2SV> } //<S2SV> 