static BOOL nsc_decode ( NSC_CONTEXT * context ) //<S2SV> { //<S2SV> UINT16 x ; //<S2SV> UINT16 y ; //<S2SV> UINT16 rw ; //<S2SV> BYTE shift ; //<S2SV> BYTE * bmpdata ; //<S2SV> size_t pos = 0 ; //<S2SV> if ( ! context ) //<S2SV> return FALSE ; //<S2SV> rw = ROUND_UP_TO ( context -> width , 8 ) ; //<S2SV> shift = context -> ColorLossLevel - 1 ; //<S2SV> bmpdata = context -> BitmapData ; //<S2SV> if ( ! bmpdata ) //<S2SV> return FALSE ; //<S2SV> for ( y = 0 ; y < context -> height ; y ++ ) //<S2SV> { //<S2SV> const BYTE * yplane ; //<S2SV> const BYTE * coplane ; //<S2SV> const BYTE * cgplane ; //<S2SV> const BYTE * aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; //<S2SV> if ( context -> ChromaSubsamplingLevel ) //<S2SV> { //<S2SV> yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; //<S2SV> coplane = context -> priv -> PlaneBuffers [ 1 ] + ( y >> 1 ) * ( rw >> //<S2SV> 1 ) ; //<S2SV> cgplane = context -> priv -> PlaneBuffers [ 2 ] + ( y >> 1 ) * ( rw >> //<S2SV> 1 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> yplane = context -> priv -> PlaneBuffers [ 0 ] + y * context -> width ; //<S2SV> coplane = context -> priv -> PlaneBuffers [ 1 ] + y * context -> width ; //<S2SV> cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * context -> width ; //<S2SV> } //<S2SV> for ( x = 0 ; x < context -> width ; x ++ ) //<S2SV> { //<S2SV> INT16 y_val = ( INT16 ) * yplane ; //<S2SV> INT16 co_val = ( INT16 ) ( INT8 ) ( * coplane << shift ) ; //<S2SV> INT16 cg_val = ( INT16 ) ( INT8 ) ( * cgplane << shift ) ; //<S2SV> INT16 r_val = y_val + co_val - cg_val ; //<S2SV> INT16 g_val = y_val + cg_val ; //<S2SV> INT16 b_val = y_val - co_val - cg_val ; //<S2SV> if ( pos + 4 > context -> BitmapDataLength ) //<S2SV> return FALSE ; //<S2SV> pos += 4 ; //<S2SV> * bmpdata ++ = MINMAX ( b_val , 0 , 0xFF ) ; //<S2SV> * bmpdata ++ = MINMAX ( g_val , 0 , 0xFF ) ; //<S2SV> * bmpdata ++ = MINMAX ( r_val , 0 , 0xFF ) ; //<S2SV> * bmpdata ++ = * aplane ; //<S2SV> yplane ++ ; //<S2SV> coplane += ( context -> ChromaSubsamplingLevel ? x % 2 : 1 ) ; //<S2SV> cgplane += ( context -> ChromaSubsamplingLevel ? x % 2 : 1 ) ; //<S2SV> aplane ++ ; //<S2SV> } //<S2SV> } //<S2SV> return TRUE ; //<S2SV> } //<S2SV> 