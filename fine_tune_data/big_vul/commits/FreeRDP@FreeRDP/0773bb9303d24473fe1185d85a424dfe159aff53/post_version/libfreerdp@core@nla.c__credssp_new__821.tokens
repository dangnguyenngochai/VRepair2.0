rdpCredssp * credssp_new ( freerdp * instance , rdpTransport * transport , rdpSettings * settings ) //<S2SV> { //<S2SV> rdpCredssp * credssp ; //<S2SV> credssp = ( rdpCredssp * ) malloc ( sizeof ( rdpCredssp ) ) ; //<S2SV> ZeroMemory ( credssp , sizeof ( rdpCredssp ) ) ; //<S2SV> if ( credssp != NULL ) //<S2SV> { //<S2SV> HKEY hKey ; //<S2SV> LONG status ; //<S2SV> DWORD dwType ; //<S2SV> DWORD dwSize ; //<S2SV> credssp -> instance = instance ; //<S2SV> credssp -> settings = settings ; //<S2SV> credssp -> server = settings -> ServerMode ; //<S2SV> credssp -> transport = transport ; //<S2SV> credssp -> send_seq_num = 0 ; //<S2SV> credssp -> recv_seq_num = 0 ; //<S2SV> ZeroMemory ( & credssp -> negoToken , sizeof ( SecBuffer ) ) ; //<S2SV> ZeroMemory ( & credssp -> pubKeyAuth , sizeof ( SecBuffer ) ) ; //<S2SV> ZeroMemory ( & credssp -> authInfo , sizeof ( SecBuffer ) ) ; //<S2SV> SecInvalidateHandle ( & credssp -> context ) ; //<S2SV> if ( credssp -> server ) //<S2SV> { //<S2SV> status = RegOpenKeyEx ( HKEY_LOCAL_MACHINE , _T ( "Software\\\\FreeRDP\\\\Server" ) , //<S2SV> 0 , KEY_READ | KEY_WOW64_64KEY , & hKey ) ; //<S2SV> if ( status == ERROR_SUCCESS ) //<S2SV> { //<S2SV> status = RegQueryValueEx ( hKey , _T ( "SspiModule" ) , NULL , & dwType , NULL , & dwSize ) ; //<S2SV> if ( status == ERROR_SUCCESS ) //<S2SV> { //<S2SV> credssp -> SspiModule = ( LPTSTR ) malloc ( dwSize + sizeof ( TCHAR ) ) ; //<S2SV> status = RegQueryValueEx ( hKey , _T ( "SspiModule" ) , NULL , & dwType , //<S2SV> ( BYTE * ) credssp -> SspiModule , & dwSize ) ; //<S2SV> if ( status == ERROR_SUCCESS ) //<S2SV> { //<S2SV> _tprintf ( _T ( "Using<S2SV_blank>SSPI<S2SV_blank>Module:<S2SV_blank>%s\\n" ) , credssp -> SspiModule ) ; //<S2SV> RegCloseKey ( hKey ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return credssp ; //<S2SV> } //<S2SV> 