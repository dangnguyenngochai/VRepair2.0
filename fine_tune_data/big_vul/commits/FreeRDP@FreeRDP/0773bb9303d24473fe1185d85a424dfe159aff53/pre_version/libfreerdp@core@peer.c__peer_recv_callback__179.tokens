static int peer_recv_callback ( rdpTransport * transport , wStream * s , void * extra ) //<S2SV> { //<S2SV> freerdp_peer * client = ( freerdp_peer * ) extra ; //<S2SV> rdpRdp * rdp = client -> context -> rdp ; //<S2SV> switch ( rdp -> state ) //<S2SV> { //<S2SV> case CONNECTION_STATE_INITIAL : //<S2SV> if ( ! rdp_server_accept_nego ( rdp , s ) ) //<S2SV> return - 1 ; //<S2SV> if ( rdp -> nego -> selected_protocol & PROTOCOL_NLA ) //<S2SV> { //<S2SV> sspi_CopyAuthIdentity ( & client -> identity , & ( rdp -> nego -> transport -> credssp -> identity ) ) ; //<S2SV> IFCALLRET ( client -> Logon , client -> authenticated , client , & client -> identity , TRUE ) ; //<S2SV> credssp_free ( rdp -> nego -> transport -> credssp ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> IFCALLRET ( client -> Logon , client -> authenticated , client , & client -> identity , FALSE ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case CONNECTION_STATE_NEGO : //<S2SV> if ( ! rdp_server_accept_mcs_connect_initial ( rdp , s ) ) //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> case CONNECTION_STATE_MCS_CONNECT : //<S2SV> if ( ! rdp_server_accept_mcs_erect_domain_request ( rdp , s ) ) //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> case CONNECTION_STATE_MCS_ERECT_DOMAIN : //<S2SV> if ( ! rdp_server_accept_mcs_attach_user_request ( rdp , s ) ) //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> case CONNECTION_STATE_MCS_ATTACH_USER : //<S2SV> if ( ! rdp_server_accept_mcs_channel_join_request ( rdp , s ) ) //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> case CONNECTION_STATE_MCS_CHANNEL_JOIN : //<S2SV> if ( rdp -> settings -> DisableEncryption ) //<S2SV> { //<S2SV> if ( ! rdp_server_accept_client_keys ( rdp , s ) ) //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> rdp -> state = CONNECTION_STATE_ESTABLISH_KEYS ; //<S2SV> case CONNECTION_STATE_ESTABLISH_KEYS : //<S2SV> if ( ! rdp_server_accept_client_info ( rdp , s ) ) //<S2SV> return - 1 ; //<S2SV> IFCALL ( client -> Capabilities , client ) ; //<S2SV> if ( ! rdp_send_demand_active ( rdp ) ) //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> case CONNECTION_STATE_LICENSE : //<S2SV> if ( ! rdp_server_accept_confirm_active ( rdp , s ) ) //<S2SV> { //<S2SV> Stream_SetPosition ( s , 0 ) ; //<S2SV> return peer_recv_pdu ( client , s ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case CONNECTION_STATE_ACTIVE : //<S2SV> if ( peer_recv_pdu ( client , s ) < 0 ) //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> default : //<S2SV> fprintf ( stderr , "Invalid<S2SV_blank>state<S2SV_blank>%d\\n" , rdp -> state ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 