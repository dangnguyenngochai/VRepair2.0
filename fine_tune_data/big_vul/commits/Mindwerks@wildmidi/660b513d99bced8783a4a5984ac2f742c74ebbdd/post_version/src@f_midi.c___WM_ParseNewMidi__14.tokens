struct _mdi * //<S2SV> _WM_ParseNewMidi ( uint8_t * midi_data , uint32_t midi_size ) { //<S2SV> struct _mdi * mdi ; //<S2SV> uint32_t tmp_val ; //<S2SV> uint32_t midi_type ; //<S2SV> uint8_t * * tracks ; //<S2SV> uint32_t * track_size ; //<S2SV> uint32_t end_of_tracks = 0 ; //<S2SV> uint32_t no_tracks ; //<S2SV> uint32_t i ; //<S2SV> uint32_t divisions = 96 ; //<S2SV> uint32_t tempo = 500000 ; //<S2SV> float samples_per_delta_f = 0.0 ; //<S2SV> uint32_t sample_count = 0 ; //<S2SV> float sample_count_f = 0.0 ; //<S2SV> float sample_remainder = 0.0 ; //<S2SV> uint8_t * sysex_store = NULL ; //<S2SV> uint32_t * track_delta ; //<S2SV> uint8_t * track_end ; //<S2SV> uint32_t smallest_delta = 0 ; //<S2SV> uint32_t subtract_delta = 0 ; //<S2SV> uint8_t * running_event ; //<S2SV> uint32_t setup_ret = 0 ; //<S2SV> if ( midi_size < 14 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( ! memcmp ( midi_data , "RIFF" , 4 ) ) { //<S2SV> if ( midi_size < 34 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> midi_data += 20 ; //<S2SV> midi_size -= 20 ; //<S2SV> } //<S2SV> if ( memcmp ( midi_data , "MThd" , 4 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_MIDI , NULL , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> midi_data += 4 ; //<S2SV> midi_size -= 4 ; //<S2SV> tmp_val = * midi_data ++ << 24 ; //<S2SV> tmp_val |= * midi_data ++ << 16 ; //<S2SV> tmp_val |= * midi_data ++ << 8 ; //<S2SV> tmp_val |= * midi_data ++ ; //<S2SV> midi_size -= 4 ; //<S2SV> if ( tmp_val != 6 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , NULL , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> tmp_val = * midi_data ++ << 8 ; //<S2SV> tmp_val |= * midi_data ++ ; //<S2SV> midi_size -= 2 ; //<S2SV> if ( tmp_val > 2 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_INVALID , NULL , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> midi_type = tmp_val ; //<S2SV> tmp_val = * midi_data ++ << 8 ; //<S2SV> tmp_val |= * midi_data ++ ; //<S2SV> midi_size -= 2 ; //<S2SV> if ( tmp_val < 1 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(no<S2SV_blank>tracks)" , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> no_tracks = tmp_val ; //<S2SV> if ( ( midi_type == 0 ) && ( no_tracks > 1 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_INVALID , "(expected<S2SV_blank>1<S2SV_blank>track<S2SV_blank>for<S2SV_blank>type<S2SV_blank>0<S2SV_blank>midi<S2SV_blank>file,<S2SV_blank>found<S2SV_blank>more)" , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> divisions = * midi_data ++ << 8 ; //<S2SV> divisions |= * midi_data ++ ; //<S2SV> midi_size -= 2 ; //<S2SV> if ( divisions & 0x00008000 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_INVALID , NULL , 0 ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> samples_per_delta_f = _WM_GetSamplesPerTick ( divisions , tempo ) ; //<S2SV> mdi = _WM_initMDI ( ) ; //<S2SV> _WM_midi_setup_divisions ( mdi , divisions ) ; //<S2SV> tracks = malloc ( sizeof ( uint8_t * ) * no_tracks ) ; //<S2SV> track_size = malloc ( sizeof ( uint32_t ) * no_tracks ) ; //<S2SV> track_delta = malloc ( sizeof ( uint32_t ) * no_tracks ) ; //<S2SV> track_end = malloc ( sizeof ( uint8_t ) * no_tracks ) ; //<S2SV> running_event = malloc ( sizeof ( uint8_t ) * no_tracks ) ; //<S2SV> smallest_delta = 0xffffffff ; //<S2SV> for ( i = 0 ; i < no_tracks ; i ++ ) { //<S2SV> if ( midi_size < 8 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> if ( memcmp ( midi_data , "MTrk" , 4 ) != 0 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(missing<S2SV_blank>track<S2SV_blank>header)" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> midi_data += 4 ; //<S2SV> midi_size -= 4 ; //<S2SV> tmp_val = * midi_data ++ << 24 ; //<S2SV> tmp_val |= * midi_data ++ << 16 ; //<S2SV> tmp_val |= * midi_data ++ << 8 ; //<S2SV> tmp_val |= * midi_data ++ ; //<S2SV> midi_size -= 4 ; //<S2SV> if ( midi_size < tmp_val ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> if ( tmp_val < 3 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(bad<S2SV_blank>track<S2SV_blank>size)" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> if ( ( midi_data [ tmp_val - 3 ] != 0xFF ) //<S2SV> || ( midi_data [ tmp_val - 2 ] != 0x2F ) //<S2SV> || ( midi_data [ tmp_val - 1 ] != 0x00 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(missing<S2SV_blank>EOT)" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> tracks [ i ] = midi_data ; //<S2SV> track_size [ i ] = tmp_val ; //<S2SV> midi_data += tmp_val ; //<S2SV> midi_size -= tmp_val ; //<S2SV> track_end [ i ] = 0 ; //<S2SV> running_event [ i ] = 0 ; //<S2SV> track_delta [ i ] = 0 ; //<S2SV> while ( * tracks [ i ] > 0x7F ) { //<S2SV> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; //<S2SV> tracks [ i ] ++ ; //<S2SV> track_size [ i ] -- ; //<S2SV> } //<S2SV> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; //<S2SV> tracks [ i ] ++ ; //<S2SV> track_size [ i ] -- ; //<S2SV> if ( midi_type == 1 ) { //<S2SV> if ( track_delta [ i ] < smallest_delta ) { //<S2SV> smallest_delta = track_delta [ i ] ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( i == 0 ) smallest_delta = track_delta [ i ] ; //<S2SV> } //<S2SV> } //<S2SV> subtract_delta = smallest_delta ; //<S2SV> sample_count_f = ( ( ( float ) smallest_delta * samples_per_delta_f ) + sample_remainder ) ; //<S2SV> sample_count = ( uint32_t ) sample_count_f ; //<S2SV> sample_remainder = sample_count_f - ( float ) sample_count ; //<S2SV> mdi -> events [ mdi -> event_count - 1 ] . samples_to_next += sample_count ; //<S2SV> mdi -> extra_info . approx_total_samples += sample_count ; //<S2SV> if ( midi_type == 1 ) { //<S2SV> while ( end_of_tracks != no_tracks ) { //<S2SV> smallest_delta = 0 ; //<S2SV> for ( i = 0 ; i < no_tracks ; i ++ ) { //<S2SV> if ( track_end [ i ] ) //<S2SV> continue ; //<S2SV> if ( track_delta [ i ] ) { //<S2SV> track_delta [ i ] -= subtract_delta ; //<S2SV> if ( track_delta [ i ] ) { //<S2SV> if ( ( ! smallest_delta ) //<S2SV> || ( smallest_delta > track_delta [ i ] ) ) { //<S2SV> smallest_delta = track_delta [ i ] ; //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> do { //<S2SV> setup_ret = _WM_SetupMidiEvent ( mdi , tracks [ i ] , track_size [ i ] , running_event [ i ] ) ; //<S2SV> if ( setup_ret == 0 ) { //<S2SV> goto _end ; //<S2SV> } //<S2SV> if ( tracks [ i ] [ 0 ] > 0x7f ) { //<S2SV> if ( tracks [ i ] [ 0 ] < 0xf0 ) { //<S2SV> running_event [ i ] = tracks [ i ] [ 0 ] ; //<S2SV> } else if ( ( tracks [ i ] [ 0 ] == 0xf0 ) || ( tracks [ i ] [ 0 ] == 0xf7 ) ) { //<S2SV> running_event [ i ] = 0 ; //<S2SV> } else if ( ( tracks [ i ] [ 0 ] == 0xff ) && ( tracks [ i ] [ 1 ] == 0x2f ) && ( tracks [ i ] [ 2 ] == 0x00 ) ) { //<S2SV> end_of_tracks ++ ; //<S2SV> track_end [ i ] = 1 ; //<S2SV> tracks [ i ] += 3 ; //<S2SV> track_size [ i ] -= 3 ; //<S2SV> goto NEXT_TRACK ; //<S2SV> } else if ( ( tracks [ i ] [ 0 ] == 0xff ) && ( tracks [ i ] [ 1 ] == 0x51 ) && ( tracks [ i ] [ 2 ] == 0x03 ) ) { //<S2SV> tempo = ( tracks [ i ] [ 3 ] << 16 ) + ( tracks [ i ] [ 4 ] << 8 ) + tracks [ i ] [ 5 ] ; //<S2SV> if ( ! tempo ) //<S2SV> tempo = 500000 ; //<S2SV> samples_per_delta_f = _WM_GetSamplesPerTick ( divisions , tempo ) ; //<S2SV> } //<S2SV> } //<S2SV> tracks [ i ] += setup_ret ; //<S2SV> track_size [ i ] -= setup_ret ; //<S2SV> if ( * tracks [ i ] > 0x7f ) { //<S2SV> do { //<S2SV> if ( ! track_size [ i ] ) break ; //<S2SV> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; //<S2SV> tracks [ i ] ++ ; //<S2SV> track_size [ i ] -- ; //<S2SV> } while ( * tracks [ i ] > 0x7f ) ; //<S2SV> } //<S2SV> if ( ! track_size [ i ] ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; //<S2SV> tracks [ i ] ++ ; //<S2SV> track_size [ i ] -- ; //<S2SV> } while ( ! track_delta [ i ] ) ; //<S2SV> if ( ( ! smallest_delta ) || ( smallest_delta > track_delta [ i ] ) ) { //<S2SV> smallest_delta = track_delta [ i ] ; //<S2SV> } //<S2SV> NEXT_TRACK : continue ; //<S2SV> } //<S2SV> subtract_delta = smallest_delta ; //<S2SV> sample_count_f = ( ( ( float ) smallest_delta * samples_per_delta_f ) //<S2SV> + sample_remainder ) ; //<S2SV> sample_count = ( uint32_t ) sample_count_f ; //<S2SV> sample_remainder = sample_count_f - ( float ) sample_count ; //<S2SV> mdi -> events [ mdi -> event_count - 1 ] . samples_to_next += sample_count ; //<S2SV> mdi -> extra_info . approx_total_samples += sample_count ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( midi_type == 2 ) { //<S2SV> mdi -> is_type2 = 1 ; //<S2SV> } //<S2SV> sample_remainder = 0.0 ; //<S2SV> for ( i = 0 ; i < no_tracks ; i ++ ) { //<S2SV> running_event [ i ] = 0 ; //<S2SV> do { //<S2SV> setup_ret = _WM_SetupMidiEvent ( mdi , tracks [ i ] , track_size [ i ] , running_event [ i ] ) ; //<S2SV> if ( setup_ret == 0 ) { //<S2SV> goto _end ; //<S2SV> } //<S2SV> if ( tracks [ i ] [ 0 ] > 0x7f ) { //<S2SV> if ( tracks [ i ] [ 0 ] < 0xf0 ) { //<S2SV> running_event [ i ] = tracks [ i ] [ 0 ] ; //<S2SV> } else if ( ( tracks [ i ] [ 0 ] == 0xf0 ) || ( tracks [ i ] [ 0 ] == 0xf7 ) ) { //<S2SV> running_event [ i ] = 0 ; //<S2SV> } else if ( ( tracks [ i ] [ 0 ] == 0xff ) && ( tracks [ i ] [ 1 ] == 0x2f ) && ( tracks [ i ] [ 2 ] == 0x00 ) ) { //<S2SV> track_end [ i ] = 1 ; //<S2SV> goto NEXT_TRACK2 ; //<S2SV> } else if ( ( tracks [ i ] [ 0 ] == 0xff ) && ( tracks [ i ] [ 1 ] == 0x51 ) && ( tracks [ i ] [ 2 ] == 0x03 ) ) { //<S2SV> tempo = ( tracks [ i ] [ 3 ] << 16 ) + ( tracks [ i ] [ 4 ] << 8 ) + tracks [ i ] [ 5 ] ; //<S2SV> if ( ! tempo ) //<S2SV> tempo = 500000 ; //<S2SV> samples_per_delta_f = _WM_GetSamplesPerTick ( divisions , tempo ) ; //<S2SV> } //<S2SV> } //<S2SV> tracks [ i ] += setup_ret ; //<S2SV> track_size [ i ] -= setup_ret ; //<S2SV> track_delta [ i ] = 0 ; //<S2SV> if ( * tracks [ i ] > 0x7f ) { //<S2SV> do { //<S2SV> if ( ! track_size [ i ] ) break ; //<S2SV> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; //<S2SV> tracks [ i ] ++ ; //<S2SV> track_size [ i ] -- ; //<S2SV> } while ( * tracks [ i ] > 0x7f ) ; //<S2SV> } //<S2SV> if ( ! track_size [ i ] ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> track_delta [ i ] = ( track_delta [ i ] << 7 ) + ( * tracks [ i ] & 0x7F ) ; //<S2SV> tracks [ i ] ++ ; //<S2SV> track_size [ i ] -- ; //<S2SV> sample_count_f = ( ( ( float ) track_delta [ i ] * samples_per_delta_f ) //<S2SV> + sample_remainder ) ; //<S2SV> sample_count = ( uint32_t ) sample_count_f ; //<S2SV> sample_remainder = sample_count_f - ( float ) sample_count ; //<S2SV> mdi -> events [ mdi -> event_count - 1 ] . samples_to_next += sample_count ; //<S2SV> mdi -> extra_info . approx_total_samples += sample_count ; //<S2SV> NEXT_TRACK2 : //<S2SV> smallest_delta = track_delta [ i ] ; //<S2SV> UNUSED ( smallest_delta ) ; //<S2SV> } while ( track_end [ i ] == 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( mdi -> reverb = _WM_init_reverb ( _WM_SampleRate , _WM_reverb_room_width , //<S2SV> _WM_reverb_room_length , _WM_reverb_listen_posx , _WM_reverb_listen_posy ) ) //<S2SV> == NULL ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_MEM , "to<S2SV_blank>init<S2SV_blank>reverb" , 0 ) ; //<S2SV> goto _end ; //<S2SV> } //<S2SV> mdi -> extra_info . current_sample = 0 ; //<S2SV> mdi -> current_event = & mdi -> events [ 0 ] ; //<S2SV> mdi -> samples_to_mix = 0 ; //<S2SV> mdi -> note = NULL ; //<S2SV> _WM_ResetToStart ( mdi ) ; //<S2SV> _end : free ( sysex_store ) ; //<S2SV> free ( track_end ) ; //<S2SV> free ( track_delta ) ; //<S2SV> free ( running_event ) ; //<S2SV> free ( tracks ) ; //<S2SV> free ( track_size ) ; //<S2SV> if ( mdi -> reverb ) return ( mdi ) ; //<S2SV> _WM_freeMDI ( mdi ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> 