struct _mdi * _WM_ParseNewXmi ( uint8_t * xmi_data , uint32_t xmi_size ) { //<S2SV> struct _mdi * xmi_mdi = NULL ; //<S2SV> uint32_t xmi_tmpdata = 0 ; //<S2SV> uint8_t xmi_formcnt = 0 ; //<S2SV> uint32_t xmi_catlen = 0 ; //<S2SV> uint32_t xmi_subformlen = 0 ; //<S2SV> uint32_t i = 0 ; //<S2SV> uint32_t j = 0 ; //<S2SV> uint32_t xmi_evntlen = 0 ; //<S2SV> uint32_t xmi_divisions = 60 ; //<S2SV> uint32_t xmi_tempo = 500000 ; //<S2SV> uint32_t xmi_sample_count = 0 ; //<S2SV> float xmi_sample_count_f = 0.0 ; //<S2SV> float xmi_sample_remainder = 0.0 ; //<S2SV> float xmi_samples_per_delta_f = 0.0 ; //<S2SV> uint8_t xmi_ch = 0 ; //<S2SV> uint8_t xmi_note = 0 ; //<S2SV> uint32_t * xmi_notelen = NULL ; //<S2SV> uint32_t setup_ret = 0 ; //<S2SV> uint32_t xmi_delta = 0 ; //<S2SV> uint32_t xmi_lowestdelta = 0 ; //<S2SV> uint32_t xmi_evnt_cnt = 0 ; //<S2SV> if ( memcmp ( xmi_data , "FORM" , 4 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> xmi_data += 4 ; //<S2SV> xmi_size -= 4 ; //<S2SV> xmi_tmpdata = * xmi_data ++ << 24 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ << 16 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ << 8 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ ; //<S2SV> xmi_size -= 4 ; //<S2SV> if ( memcmp ( xmi_data , "XDIRINFO" , 8 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> xmi_data += 8 ; //<S2SV> xmi_size -= 8 ; //<S2SV> xmi_data += 4 ; //<S2SV> xmi_size -= 4 ; //<S2SV> xmi_formcnt = * xmi_data ++ ; //<S2SV> if ( xmi_formcnt == 0 ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> xmi_size -- ; //<S2SV> xmi_tmpdata -= 13 ; //<S2SV> xmi_data += xmi_tmpdata ; //<S2SV> xmi_size -= xmi_tmpdata ; //<S2SV> if ( memcmp ( xmi_data , "CAT<S2SV_blank>" , 4 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> xmi_data += 4 ; //<S2SV> xmi_size -= 4 ; //<S2SV> xmi_catlen = * xmi_data ++ << 24 ; //<S2SV> xmi_catlen |= * xmi_data ++ << 16 ; //<S2SV> xmi_catlen |= * xmi_data ++ << 8 ; //<S2SV> xmi_catlen |= * xmi_data ++ ; //<S2SV> xmi_size -= 4 ; //<S2SV> UNUSED ( xmi_catlen ) ; //<S2SV> if ( memcmp ( xmi_data , "XMID" , 4 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> xmi_data += 4 ; //<S2SV> xmi_size -= 4 ; //<S2SV> xmi_mdi = _WM_initMDI ( ) ; //<S2SV> _WM_midi_setup_divisions ( xmi_mdi , xmi_divisions ) ; //<S2SV> _WM_midi_setup_tempo ( xmi_mdi , xmi_tempo ) ; //<S2SV> xmi_samples_per_delta_f = _WM_GetSamplesPerTick ( xmi_divisions , xmi_tempo ) ; //<S2SV> xmi_notelen = malloc ( sizeof ( uint32_t ) * 16 * 128 ) ; //<S2SV> memset ( xmi_notelen , 0 , ( sizeof ( uint32_t ) * 16 * 128 ) ) ; //<S2SV> for ( i = 0 ; i < xmi_formcnt ; i ++ ) { //<S2SV> if ( memcmp ( xmi_data , "FORM" , 4 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> goto _xmi_end ; //<S2SV> } //<S2SV> xmi_data += 4 ; //<S2SV> xmi_size -= 4 ; //<S2SV> xmi_subformlen = * xmi_data ++ << 24 ; //<S2SV> xmi_subformlen |= * xmi_data ++ << 16 ; //<S2SV> xmi_subformlen |= * xmi_data ++ << 8 ; //<S2SV> xmi_subformlen |= * xmi_data ++ ; //<S2SV> xmi_size -= 4 ; //<S2SV> if ( memcmp ( xmi_data , "XMID" , 4 ) ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> goto _xmi_end ; //<S2SV> } //<S2SV> xmi_data += 4 ; //<S2SV> xmi_size -= 4 ; //<S2SV> xmi_subformlen -= 4 ; //<S2SV> do { //<S2SV> if ( ! memcmp ( xmi_data , "TIMB" , 4 ) ) { //<S2SV> xmi_data += 4 ; //<S2SV> xmi_tmpdata = * xmi_data ++ << 24 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ << 16 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ << 8 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ ; //<S2SV> xmi_data += xmi_tmpdata ; //<S2SV> xmi_size -= ( 8 + xmi_tmpdata ) ; //<S2SV> xmi_subformlen -= ( 8 + xmi_tmpdata ) ; //<S2SV> } else if ( ! memcmp ( xmi_data , "RBRN" , 4 ) ) { //<S2SV> xmi_data += 4 ; //<S2SV> xmi_tmpdata = * xmi_data ++ << 24 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ << 16 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ << 8 ; //<S2SV> xmi_tmpdata |= * xmi_data ++ ; //<S2SV> xmi_data += xmi_tmpdata ; //<S2SV> xmi_size -= ( 8 + xmi_tmpdata ) ; //<S2SV> xmi_subformlen -= ( 8 + xmi_tmpdata ) ; //<S2SV> } else if ( ! memcmp ( xmi_data , "EVNT" , 4 ) ) { //<S2SV> xmi_data += 4 ; //<S2SV> xmi_evnt_cnt ++ ; //<S2SV> xmi_evntlen = * xmi_data ++ << 24 ; //<S2SV> xmi_evntlen |= * xmi_data ++ << 16 ; //<S2SV> xmi_evntlen |= * xmi_data ++ << 8 ; //<S2SV> xmi_evntlen |= * xmi_data ++ ; //<S2SV> xmi_size -= 8 ; //<S2SV> xmi_subformlen -= 8 ; //<S2SV> do { //<S2SV> if ( * xmi_data < 0x80 ) { //<S2SV> xmi_delta = 0 ; //<S2SV> if ( * xmi_data > 0x7f ) { //<S2SV> while ( * xmi_data > 0x7f ) { //<S2SV> xmi_delta = ( xmi_delta << 7 ) | ( * xmi_data ++ & 0x7f ) ; //<S2SV> xmi_size -- ; //<S2SV> xmi_evntlen -- ; //<S2SV> xmi_subformlen -- ; //<S2SV> } //<S2SV> } //<S2SV> xmi_delta = ( xmi_delta << 7 ) | ( * xmi_data ++ & 0x7f ) ; //<S2SV> xmi_size -- ; //<S2SV> xmi_evntlen -- ; //<S2SV> xmi_subformlen -- ; //<S2SV> do { //<S2SV> if ( ( xmi_lowestdelta != 0 ) && ( xmi_lowestdelta <= xmi_delta ) ) { //<S2SV> xmi_tmpdata = xmi_lowestdelta ; //<S2SV> } else { //<S2SV> xmi_tmpdata = xmi_delta ; //<S2SV> } //<S2SV> xmi_sample_count_f = ( ( ( float ) xmi_tmpdata * xmi_samples_per_delta_f ) + xmi_sample_remainder ) ; //<S2SV> xmi_sample_count = ( uint32_t ) xmi_sample_count_f ; //<S2SV> xmi_sample_remainder = xmi_sample_count_f - ( float ) xmi_sample_count ; //<S2SV> xmi_mdi -> events [ xmi_mdi -> event_count - 1 ] . samples_to_next += xmi_sample_count ; //<S2SV> xmi_mdi -> extra_info . approx_total_samples += xmi_sample_count ; //<S2SV> xmi_lowestdelta = 0 ; //<S2SV> for ( j = 0 ; j < ( 16 * 128 ) ; j ++ ) { //<S2SV> if ( xmi_notelen [ j ] == 0 ) continue ; //<S2SV> xmi_notelen [ j ] -= xmi_tmpdata ; //<S2SV> if ( xmi_notelen [ j ] == 0 ) { //<S2SV> xmi_ch = j / 128 ; //<S2SV> xmi_note = j - ( xmi_ch * 128 ) ; //<S2SV> _WM_midi_setup_noteoff ( xmi_mdi , xmi_ch , xmi_note , 0 ) ; //<S2SV> } else { //<S2SV> if ( ( xmi_lowestdelta == 0 ) || ( xmi_lowestdelta > xmi_notelen [ j ] ) ) { //<S2SV> xmi_lowestdelta = xmi_notelen [ j ] ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> xmi_delta -= xmi_tmpdata ; //<S2SV> } while ( xmi_delta ) ; //<S2SV> } else { //<S2SV> if ( ( xmi_data [ 0 ] == 0xff ) && ( xmi_data [ 1 ] == 0x51 ) && ( xmi_data [ 2 ] == 0x03 ) ) { //<S2SV> setup_ret = 6 ; //<S2SV> goto _XMI_Next_Event ; //<S2SV> } //<S2SV> if ( ( setup_ret = _WM_SetupMidiEvent ( xmi_mdi , xmi_data , 0 ) ) == 0 ) { //<S2SV> goto _xmi_end ; //<S2SV> } //<S2SV> if ( ( * xmi_data & 0xf0 ) == 0x90 ) { //<S2SV> xmi_ch = * xmi_data & 0x0f ; //<S2SV> xmi_note = xmi_data [ 1 ] ; //<S2SV> xmi_data += setup_ret ; //<S2SV> xmi_size -= setup_ret ; //<S2SV> xmi_evntlen -= setup_ret ; //<S2SV> xmi_subformlen -= setup_ret ; //<S2SV> xmi_tmpdata = 0 ; //<S2SV> if ( * xmi_data > 0x7f ) { //<S2SV> while ( * xmi_data > 0x7f ) { //<S2SV> xmi_tmpdata = ( xmi_tmpdata << 7 ) | ( * xmi_data ++ & 0x7f ) ; //<S2SV> xmi_size -- ; //<S2SV> xmi_evntlen -- ; //<S2SV> xmi_subformlen -- ; //<S2SV> } //<S2SV> } //<S2SV> xmi_tmpdata = ( xmi_tmpdata << 7 ) | ( * xmi_data ++ & 0x7f ) ; //<S2SV> xmi_size -- ; //<S2SV> xmi_evntlen -- ; //<S2SV> xmi_subformlen -- ; //<S2SV> xmi_notelen [ 128 * xmi_ch + xmi_note ] = xmi_tmpdata ; //<S2SV> if ( ( xmi_tmpdata > 0 ) && ( ( xmi_lowestdelta == 0 ) || ( xmi_tmpdata < xmi_lowestdelta ) ) ) { //<S2SV> xmi_lowestdelta = xmi_tmpdata ; //<S2SV> } //<S2SV> } else { //<S2SV> _XMI_Next_Event : //<S2SV> xmi_data += setup_ret ; //<S2SV> xmi_size -= setup_ret ; //<S2SV> xmi_evntlen -= setup_ret ; //<S2SV> xmi_subformlen -= setup_ret ; //<S2SV> } //<S2SV> } //<S2SV> } while ( xmi_evntlen ) ; //<S2SV> } else { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_XMI , NULL , 0 ) ; //<S2SV> goto _xmi_end ; //<S2SV> } //<S2SV> } while ( xmi_subformlen ) ; //<S2SV> } //<S2SV> if ( ( xmi_mdi -> reverb = _WM_init_reverb ( _WM_SampleRate , _WM_reverb_room_width , _WM_reverb_room_length , _WM_reverb_listen_posx , _WM_reverb_listen_posy ) ) == NULL ) { //<S2SV> _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_MEM , "to<S2SV_blank>init<S2SV_blank>reverb" , 0 ) ; //<S2SV> goto _xmi_end ; //<S2SV> } //<S2SV> xmi_mdi -> extra_info . current_sample = 0 ; //<S2SV> xmi_mdi -> current_event = & xmi_mdi -> events [ 0 ] ; //<S2SV> xmi_mdi -> samples_to_mix = 0 ; //<S2SV> xmi_mdi -> note = NULL ; //<S2SV> if ( xmi_evnt_cnt > 1 ) { //<S2SV> xmi_mdi -> is_type2 = 1 ; //<S2SV> } //<S2SV> _WM_ResetToStart ( xmi_mdi ) ; //<S2SV> _xmi_end : //<S2SV> if ( xmi_notelen != NULL ) free ( xmi_notelen ) ; //<S2SV> if ( xmi_mdi -> reverb ) return ( xmi_mdi ) ; //<S2SV> _WM_freeMDI ( xmi_mdi ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 