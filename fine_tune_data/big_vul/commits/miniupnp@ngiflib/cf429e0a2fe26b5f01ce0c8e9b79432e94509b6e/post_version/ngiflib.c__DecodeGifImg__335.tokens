static int DecodeGifImg ( struct ngiflib_img * i ) { //<S2SV> struct ngiflib_decode_context context ; //<S2SV> long npix ; //<S2SV> u8 * stackp ; //<S2SV> u8 * stack_top ; //<S2SV> u16 clr ; //<S2SV> u16 eof ; //<S2SV> u16 free ; //<S2SV> u16 act_code = 0 ; //<S2SV> u16 old_code = 0 ; //<S2SV> u16 read_byt ; //<S2SV> u16 ab_prfx [ 4096 ] ; //<S2SV> u8 ab_suffx [ 4096 ] ; //<S2SV> u8 ab_stack [ 4096 ] ; //<S2SV> u8 flags ; //<S2SV> u8 casspecial = 0 ; //<S2SV> if ( ! i ) return - 1 ; //<S2SV> i -> posX = GetWord ( i -> parent ) ; //<S2SV> i -> posY = GetWord ( i -> parent ) ; //<S2SV> i -> width = GetWord ( i -> parent ) ; //<S2SV> i -> height = GetWord ( i -> parent ) ; //<S2SV> if ( ( i -> width > i -> parent -> width ) || ( i -> height > i -> parent -> height ) ) { //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent -> log ) fprintf ( i -> parent -> log , "***<S2SV_blank>ERROR<S2SV_blank>***<S2SV_blank>Image<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>global<S2SV_blank>GIF<S2SV_blank>canvas<S2SV_blank>!\\n" ) ; //<S2SV> # endif //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ( i -> posX + i -> width ) > i -> parent -> width ) { //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent -> log ) fprintf ( i -> parent -> log , "***<S2SV_blank>WARNING<S2SV_blank>***<S2SV_blank>Adjusting<S2SV_blank>X<S2SV_blank>position\\n" ) ; //<S2SV> # endif //<S2SV> i -> posX = i -> parent -> width - i -> width ; //<S2SV> } //<S2SV> if ( ( i -> posY + i -> height ) > i -> parent -> height ) { //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent -> log ) fprintf ( i -> parent -> log , "***<S2SV_blank>WARNING<S2SV_blank>***<S2SV_blank>Adjusting<S2SV_blank>Y<S2SV_blank>position\\n" ) ; //<S2SV> # endif //<S2SV> i -> posY = i -> parent -> height - i -> height ; //<S2SV> } //<S2SV> context . Xtogo = i -> width ; //<S2SV> context . curY = i -> posY ; //<S2SV> # ifdef NGIFLIB_INDEXED_ONLY //<S2SV> # ifdef NGIFLIB_ENABLE_CALLBACKS //<S2SV> context . line_p . p8 = i -> parent -> frbuff . p8 + ( u32 ) i -> posY * i -> parent -> width ; //<S2SV> context . frbuff_p . p8 = context . line_p . p8 + i -> posX ; //<S2SV> # else //<S2SV> context . frbuff_p . p8 = i -> parent -> frbuff . p8 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; //<S2SV> # endif //<S2SV> # else //<S2SV> if ( i -> parent -> mode & NGIFLIB_MODE_INDEXED ) { //<S2SV> # ifdef NGIFLIB_ENABLE_CALLBACKS //<S2SV> context . line_p . p8 = i -> parent -> frbuff . p8 + ( u32 ) i -> posY * i -> parent -> width ; //<S2SV> context . frbuff_p . p8 = context . line_p . p8 + i -> posX ; //<S2SV> # else //<S2SV> context . frbuff_p . p8 = i -> parent -> frbuff . p8 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; //<S2SV> # endif //<S2SV> } else { //<S2SV> # ifdef NGIFLIB_ENABLE_CALLBACKS //<S2SV> context . line_p . p32 = i -> parent -> frbuff . p32 + ( u32 ) i -> posY * i -> parent -> width ; //<S2SV> context . frbuff_p . p32 = context . line_p . p32 + i -> posX ; //<S2SV> # else //<S2SV> context . frbuff_p . p32 = i -> parent -> frbuff . p32 + ( u32 ) i -> posY * i -> parent -> width + i -> posX ; //<S2SV> # endif //<S2SV> } //<S2SV> # endif //<S2SV> npix = ( long ) i -> width * i -> height ; //<S2SV> flags = GetByte ( i -> parent ) ; //<S2SV> i -> interlaced = ( flags & 64 ) >> 6 ; //<S2SV> context . pass = i -> interlaced ? 1 : 0 ; //<S2SV> i -> sort_flag = ( flags & 32 ) >> 5 ; //<S2SV> i -> localpalbits = ( flags & 7 ) + 1 ; //<S2SV> if ( flags & 128 ) { //<S2SV> int k ; //<S2SV> int localpalsize = 1 << i -> localpalbits ; //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent && i -> parent -> log ) fprintf ( i -> parent -> log , "Local<S2SV_blank>palette\\n" ) ; //<S2SV> # endif //<S2SV> i -> palette = ( struct ngiflib_rgb * ) ngiflib_malloc ( sizeof ( struct ngiflib_rgb ) * localpalsize ) ; //<S2SV> for ( k = 0 ; k < localpalsize ; k ++ ) { //<S2SV> i -> palette [ k ] . r = GetByte ( i -> parent ) ; //<S2SV> i -> palette [ k ] . g = GetByte ( i -> parent ) ; //<S2SV> i -> palette [ k ] . b = GetByte ( i -> parent ) ; //<S2SV> } //<S2SV> # ifdef NGIFLIB_ENABLE_CALLBACKS //<S2SV> if ( i -> parent -> palette_cb ) i -> parent -> palette_cb ( i -> parent , i -> palette , localpalsize ) ; //<S2SV> # endif //<S2SV> } else { //<S2SV> i -> palette = i -> parent -> palette ; //<S2SV> i -> localpalbits = i -> parent -> imgbits ; //<S2SV> } //<S2SV> i -> ncolors = 1 << i -> localpalbits ; //<S2SV> i -> imgbits = GetByte ( i -> parent ) ; //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent && i -> parent -> log ) { //<S2SV> if ( i -> interlaced ) fprintf ( i -> parent -> log , "interlaced<S2SV_blank>" ) ; //<S2SV> fprintf ( i -> parent -> log , "img<S2SV_blank>pos(%hu,%hu)<S2SV_blank>size<S2SV_blank>%hux%hu<S2SV_blank>palbits=%hhu<S2SV_blank>imgbits=%hhu<S2SV_blank>ncolors=%hu\\n" , //<S2SV> i -> posX , i -> posY , i -> width , i -> height , i -> localpalbits , i -> imgbits , i -> ncolors ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( i -> imgbits == 1 ) { //<S2SV> i -> imgbits = 2 ; //<S2SV> } //<S2SV> clr = 1 << i -> imgbits ; //<S2SV> eof = clr + 1 ; //<S2SV> free = clr + 2 ; //<S2SV> context . nbbit = i -> imgbits + 1 ; //<S2SV> context . max = clr + clr - 1 ; //<S2SV> stackp = stack_top = ab_stack + 4096 ; //<S2SV> context . restbits = 0 ; //<S2SV> context . restbyte = 0 ; //<S2SV> context . lbyte = 0 ; //<S2SV> for ( ; ; ) { //<S2SV> act_code = GetGifWord ( i , & context ) ; //<S2SV> if ( act_code == eof ) { //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent && i -> parent -> log ) fprintf ( i -> parent -> log , "End<S2SV_blank>of<S2SV_blank>image<S2SV_blank>code\\n" ) ; //<S2SV> # endif //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( npix == 0 ) { //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent && i -> parent -> log ) fprintf ( i -> parent -> log , "assez<S2SV_blank>de<S2SV_blank>pixels,<S2SV_blank>On<S2SV_blank>se<S2SV_blank>casse<S2SV_blank>!\\n" ) ; //<S2SV> # endif //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( act_code == clr ) { //<S2SV> # if ! defined ( NGIFLIB_NO_FILE ) //<S2SV> if ( i -> parent && i -> parent -> log ) fprintf ( i -> parent -> log , "Code<S2SV_blank>clear<S2SV_blank>(free=%hu)<S2SV_blank>npix=%ld\\n" , free , npix ) ; //<S2SV> # endif //<S2SV> free = clr + 2 ; //<S2SV> context . nbbit = i -> imgbits + 1 ; //<S2SV> context . max = clr + clr - 1 ; //<S2SV> act_code = GetGifWord ( i , & context ) ; //<S2SV> casspecial = ( u8 ) act_code ; //<S2SV> old_code = act_code ; //<S2SV> if ( npix > 0 ) WritePixel ( i , & context , casspecial ) ; //<S2SV> npix -- ; //<S2SV> } else { //<S2SV> read_byt = act_code ; //<S2SV> if ( act_code >= free ) { //<S2SV> * ( -- stackp ) = casspecial ; //<S2SV> act_code = old_code ; //<S2SV> } //<S2SV> while ( act_code > clr ) { //<S2SV> * ( -- stackp ) = ab_suffx [ act_code ] ; //<S2SV> act_code = ab_prfx [ act_code ] ; //<S2SV> } //<S2SV> casspecial = ( u8 ) act_code ; //<S2SV> * ( -- stackp ) = casspecial ; //<S2SV> if ( npix >= ( stack_top - stackp ) ) { //<S2SV> WritePixels ( i , & context , stackp , stack_top - stackp ) ; //<S2SV> } else if ( npix > 0 ) { //<S2SV> WritePixels ( i , & context , stackp , npix ) ; //<S2SV> } //<S2SV> npix -= ( stack_top - stackp ) ; //<S2SV> stackp = stack_top ; //<S2SV> if ( free < 4096 ) { //<S2SV> ab_prfx [ free ] = old_code ; //<S2SV> ab_suffx [ free ] = ( u8 ) act_code ; //<S2SV> free ++ ; //<S2SV> if ( ( free > context . max ) && ( context . nbbit < 12 ) ) { //<S2SV> context . nbbit ++ ; //<S2SV> context . max += context . max + 1 ; //<S2SV> } //<S2SV> } //<S2SV> old_code = read_byt ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 