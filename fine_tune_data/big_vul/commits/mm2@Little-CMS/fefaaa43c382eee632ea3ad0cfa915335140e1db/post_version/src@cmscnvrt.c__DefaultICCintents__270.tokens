static //<S2SV> cmsPipeline * DefaultICCintents ( cmsContext ContextID , //<S2SV> cmsUInt32Number nProfiles , //<S2SV> cmsUInt32Number TheIntents [ ] , //<S2SV> cmsHPROFILE hProfiles [ ] , //<S2SV> cmsBool BPC [ ] , //<S2SV> cmsFloat64Number AdaptationStates [ ] , //<S2SV> cmsUInt32Number dwFlags ) //<S2SV> { //<S2SV> cmsPipeline * Lut = NULL ; //<S2SV> cmsPipeline * Result ; //<S2SV> cmsHPROFILE hProfile ; //<S2SV> cmsMAT3 m ; //<S2SV> cmsVEC3 off ; //<S2SV> cmsColorSpaceSignature ColorSpaceIn , ColorSpaceOut , CurrentColorSpace ; //<S2SV> cmsProfileClassSignature ClassSig ; //<S2SV> cmsUInt32Number i , Intent ; //<S2SV> if ( nProfiles == 0 ) return NULL ; //<S2SV> Result = cmsPipelineAlloc ( ContextID , 0 , 0 ) ; //<S2SV> if ( Result == NULL ) return NULL ; //<S2SV> CurrentColorSpace = cmsGetColorSpace ( hProfiles [ 0 ] ) ; //<S2SV> for ( i = 0 ; i < nProfiles ; i ++ ) { //<S2SV> cmsBool lIsDeviceLink , lIsInput ; //<S2SV> hProfile = hProfiles [ i ] ; //<S2SV> ClassSig = cmsGetDeviceClass ( hProfile ) ; //<S2SV> lIsDeviceLink = ( ClassSig == cmsSigLinkClass || ClassSig == cmsSigAbstractClass ) ; //<S2SV> if ( ( i == 0 ) && ! lIsDeviceLink ) { //<S2SV> lIsInput = TRUE ; //<S2SV> } //<S2SV> else { //<S2SV> lIsInput = ( CurrentColorSpace != cmsSigXYZData ) && //<S2SV> ( CurrentColorSpace != cmsSigLabData ) ; //<S2SV> } //<S2SV> Intent = TheIntents [ i ] ; //<S2SV> if ( lIsInput || lIsDeviceLink ) { //<S2SV> ColorSpaceIn = cmsGetColorSpace ( hProfile ) ; //<S2SV> ColorSpaceOut = cmsGetPCS ( hProfile ) ; //<S2SV> } //<S2SV> else { //<S2SV> ColorSpaceIn = cmsGetPCS ( hProfile ) ; //<S2SV> ColorSpaceOut = cmsGetColorSpace ( hProfile ) ; //<S2SV> } //<S2SV> if ( ! ColorSpaceIsCompatible ( ColorSpaceIn , CurrentColorSpace ) ) { //<S2SV> cmsSignalError ( ContextID , cmsERROR_COLORSPACE_CHECK , "ColorSpace<S2SV_blank>mismatch" ) ; //<S2SV> goto Error ; //<S2SV> } //<S2SV> if ( lIsDeviceLink || ( ( ClassSig == cmsSigNamedColorClass ) && ( nProfiles == 1 ) ) ) { //<S2SV> Lut = _cmsReadDevicelinkLUT ( hProfile , Intent ) ; //<S2SV> if ( Lut == NULL ) goto Error ; //<S2SV> if ( ClassSig == cmsSigAbstractClass && i > 0 ) { //<S2SV> if ( ! ComputeConversion ( i , hProfiles , Intent , BPC [ i ] , AdaptationStates [ i ] , & m , & off ) ) goto Error ; //<S2SV> } //<S2SV> else { //<S2SV> _cmsMAT3identity ( & m ) ; //<S2SV> _cmsVEC3init ( & off , 0 , 0 , 0 ) ; //<S2SV> } //<S2SV> if ( ! AddConversion ( Result , CurrentColorSpace , ColorSpaceIn , & m , & off ) ) goto Error ; //<S2SV> } //<S2SV> else { //<S2SV> if ( lIsInput ) { //<S2SV> Lut = _cmsReadInputLUT ( hProfile , Intent ) ; //<S2SV> if ( Lut == NULL ) goto Error ; //<S2SV> } //<S2SV> else { //<S2SV> Lut = _cmsReadOutputLUT ( hProfile , Intent ) ; //<S2SV> if ( Lut == NULL ) goto Error ; //<S2SV> if ( ! ComputeConversion ( i , hProfiles , Intent , BPC [ i ] , AdaptationStates [ i ] , & m , & off ) ) goto Error ; //<S2SV> if ( ! AddConversion ( Result , CurrentColorSpace , ColorSpaceIn , & m , & off ) ) goto Error ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! cmsPipelineCat ( Result , Lut ) ) //<S2SV> goto Error ; //<S2SV> cmsPipelineFree ( Lut ) ; //<S2SV> Lut = NULL ; //<S2SV> CurrentColorSpace = ColorSpaceOut ; //<S2SV> } //<S2SV> return Result ; //<S2SV> Error : //<S2SV> if ( Lut != NULL ) cmsPipelineFree ( Lut ) ; //<S2SV> if ( Result != NULL ) cmsPipelineFree ( Result ) ; //<S2SV> return NULL ; //<S2SV> cmsUNUSED_PARAMETER ( dwFlags ) ; //<S2SV> } //<S2SV> 