static __forceinline void draw_line ( float * output , int x0 , int y0 , int x1 , int y1 , int n ) //<S2SV> { //<S2SV> int dy = y1 - y0 ; //<S2SV> int adx = x1 - x0 ; //<S2SV> int ady = abs ( dy ) ; //<S2SV> int base ; //<S2SV> int x = x0 , y = y0 ; //<S2SV> int err = 0 ; //<S2SV> int sy ; //<S2SV> # ifdef STB_VORBIS_DIVIDE_TABLE //<S2SV> if ( adx < DIVTAB_DENOM && ady < DIVTAB_NUMER ) { //<S2SV> if ( dy < 0 ) { //<S2SV> base = - integer_divide_table [ ady ] [ adx ] ; //<S2SV> sy = base - 1 ; //<S2SV> } else { //<S2SV> base = integer_divide_table [ ady ] [ adx ] ; //<S2SV> sy = base + 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> base = dy / adx ; //<S2SV> if ( dy < 0 ) //<S2SV> sy = base - 1 ; //<S2SV> else //<S2SV> sy = base + 1 ; //<S2SV> } //<S2SV> # else //<S2SV> base = dy / adx ; //<S2SV> if ( dy < 0 ) //<S2SV> sy = base - 1 ; //<S2SV> else //<S2SV> sy = base + 1 ; //<S2SV> # endif //<S2SV> ady -= abs ( base ) * adx ; //<S2SV> if ( x1 > n ) x1 = n ; //<S2SV> if ( x < x1 ) { //<S2SV> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; //<S2SV> for ( ++ x ; x < x1 ; ++ x ) { //<S2SV> err += ady ; //<S2SV> if ( err >= adx ) { //<S2SV> err -= adx ; //<S2SV> y += sy ; //<S2SV> } else //<S2SV> y += base ; //<S2SV> LINE_OP ( output [ x ] , inverse_db_table [ y ] ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 