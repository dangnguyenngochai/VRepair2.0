int main ( int argc , char * argv [ ] ) { //<S2SV> p_fm_config_conx_hdlt hdl = NULL ; //<S2SV> int instance = 0 ; //<S2SV> fm_mgr_config_errno_t res ; //<S2SV> char * rem_addr = NULL ; //<S2SV> char * community = "public" ; //<S2SV> char Opts [ 256 ] ; //<S2SV> int arg ; //<S2SV> char * command ; //<S2SV> int i ; //<S2SV> strcpy ( Opts , "i:d:h-" ) ; //<S2SV> while ( ( arg = getopt ( argc , argv , Opts ) ) != EOF ) { //<S2SV> switch ( arg ) { //<S2SV> case 'h' : //<S2SV> case '-' : //<S2SV> usage ( argv [ 0 ] ) ; //<S2SV> return ( 0 ) ; //<S2SV> case 'i' : //<S2SV> instance = atol ( optarg ) ; //<S2SV> break ; //<S2SV> case 'd' : //<S2SV> rem_addr = optarg ; //<S2SV> break ; //<S2SV> default : //<S2SV> usage ( argv [ 0 ] ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( optind >= argc ) { //<S2SV> fprintf ( stderr , "Command<S2SV_blank>required\\n" ) ; //<S2SV> usage ( argv [ 0 ] ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> command = argv [ optind ++ ] ; //<S2SV> printf ( "Connecting<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>FM<S2SV_blank>instance<S2SV_blank>%d\\n" , ( rem_addr == NULL ) ? "LOCAL" : rem_addr , instance ) ; //<S2SV> if ( ( res = fm_mgr_config_init ( & hdl , instance , rem_addr , community ) ) != FM_CONF_OK ) //<S2SV> { //<S2SV> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>the<S2SV_blank>client<S2SV_blank>handle:<S2SV_blank>%d\\n" , res ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( ( res = fm_mgr_config_connect ( hdl ) ) != FM_CONF_OK ) //<S2SV> { //<S2SV> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>connect:<S2SV_blank>(%d)<S2SV_blank>%s\\n" , res , fm_mgr_get_error_str ( res ) ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> for ( i = 0 ; i < commandListLen ; i ++ ) { //<S2SV> if ( strcmp ( command , commandList [ i ] . name ) == 0 ) { //<S2SV> res = commandList [ i ] . cmdPtr ( hdl , commandList [ i ] . mgr , ( argc - optind ) , & argv [ optind ] ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> } //<S2SV> fprintf ( stderr , "Command<S2SV_blank>(%s)<S2SV_blank>is<S2SV_blank>not<S2SV_blank>valid\\n" , command ) ; //<S2SV> usage ( argv [ 0 ] ) ; //<S2SV> res = - 1 ; //<S2SV> cleanup : //<S2SV> if ( hdl ) //<S2SV> { //<S2SV> if ( hdl -> sm_hdl ) //<S2SV> { //<S2SV> if ( hdl -> sm_hdl -> c_path [ 0 ] ) //<S2SV> unlink ( hdl -> sm_hdl -> c_path ) ; //<S2SV> } //<S2SV> if ( hdl -> pm_hdl ) //<S2SV> { //<S2SV> if ( hdl -> pm_hdl -> c_path [ 0 ] ) //<S2SV> unlink ( hdl -> pm_hdl -> c_path ) ; //<S2SV> } //<S2SV> if ( hdl -> fe_hdl ) //<S2SV> { //<S2SV> if ( hdl -> fe_hdl -> c_path [ 0 ] ) //<S2SV> unlink ( hdl -> fe_hdl -> c_path ) ; //<S2SV> } //<S2SV> free ( hdl ) ; //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 