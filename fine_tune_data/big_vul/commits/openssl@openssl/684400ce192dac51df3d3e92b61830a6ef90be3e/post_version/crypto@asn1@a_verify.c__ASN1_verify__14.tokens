int ASN1_verify ( i2d_of_void * i2d , X509_ALGOR * a , ASN1_BIT_STRING * signature , //<S2SV> char * data , EVP_PKEY * pkey ) //<S2SV> { //<S2SV> EVP_MD_CTX ctx ; //<S2SV> const EVP_MD * type ; //<S2SV> unsigned char * p , * buf_in = NULL ; //<S2SV> int ret = - 1 , i , inl ; //<S2SV> EVP_MD_CTX_init ( & ctx ) ; //<S2SV> i = OBJ_obj2nid ( a -> algorithm ) ; //<S2SV> type = EVP_get_digestbyname ( OBJ_nid2sn ( i ) ) ; //<S2SV> if ( type == NULL ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_VERIFY , ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( signature -> type == V_ASN1_BIT_STRING && signature -> flags & 0x7 ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> inl = i2d ( data , NULL ) ; //<S2SV> buf_in = OPENSSL_malloc ( ( unsigned int ) inl ) ; //<S2SV> if ( buf_in == NULL ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_VERIFY , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p = buf_in ; //<S2SV> i2d ( data , & p ) ; //<S2SV> ret = //<S2SV> EVP_VerifyInit_ex ( & ctx , type , NULL ) //<S2SV> && EVP_VerifyUpdate ( & ctx , ( unsigned char * ) buf_in , inl ) ; //<S2SV> OPENSSL_cleanse ( buf_in , ( unsigned int ) inl ) ; //<S2SV> OPENSSL_free ( buf_in ) ; //<S2SV> if ( ! ret ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_VERIFY , ERR_R_EVP_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> ret = - 1 ; //<S2SV> if ( EVP_VerifyFinal ( & ctx , ( unsigned char * ) signature -> data , //<S2SV> ( unsigned int ) signature -> length , pkey ) <= 0 ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_VERIFY , ERR_R_EVP_LIB ) ; //<S2SV> ret = 0 ; //<S2SV> goto err ; //<S2SV> } //<S2SV> ret = 1 ; //<S2SV> err : //<S2SV> EVP_MD_CTX_cleanup ( & ctx ) ; //<S2SV> return ( ret ) ; //<S2SV> } //<S2SV> 