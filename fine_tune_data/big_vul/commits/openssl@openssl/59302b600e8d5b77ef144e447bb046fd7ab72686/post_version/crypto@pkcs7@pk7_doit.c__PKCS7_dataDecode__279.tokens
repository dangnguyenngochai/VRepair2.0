BIO * PKCS7_dataDecode ( PKCS7 * p7 , EVP_PKEY * pkey , BIO * in_bio , X509 * pcert ) //<S2SV> { //<S2SV> int i , j ; //<S2SV> BIO * out = NULL , * btmp = NULL , * etmp = NULL , * bio = NULL ; //<S2SV> X509_ALGOR * xa ; //<S2SV> ASN1_OCTET_STRING * data_body = NULL ; //<S2SV> const EVP_MD * evp_md ; //<S2SV> const EVP_CIPHER * evp_cipher = NULL ; //<S2SV> EVP_CIPHER_CTX * evp_ctx = NULL ; //<S2SV> X509_ALGOR * enc_alg = NULL ; //<S2SV> STACK_OF ( X509_ALGOR ) * md_sk = NULL ; //<S2SV> STACK_OF ( PKCS7_RECIP_INFO ) * rsk = NULL ; //<S2SV> PKCS7_RECIP_INFO * ri = NULL ; //<S2SV> unsigned char * ek = NULL , * tkey = NULL ; //<S2SV> int eklen = 0 , tkeylen = 0 ; //<S2SV> if ( p7 == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , PKCS7_R_INVALID_NULL_POINTER ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> if ( p7 -> d . ptr == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , PKCS7_R_NO_CONTENT ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> i = OBJ_obj2nid ( p7 -> type ) ; //<S2SV> p7 -> state = PKCS7_S_HEADER ; //<S2SV> switch ( i ) { //<S2SV> case NID_pkcs7_signed : //<S2SV> data_body = PKCS7_get_octet_string ( p7 -> d . sign -> contents ) ; //<S2SV> if ( ! PKCS7_is_detached ( p7 ) && data_body == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , //<S2SV> PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> md_sk = p7 -> d . sign -> md_algs ; //<S2SV> break ; //<S2SV> case NID_pkcs7_signedAndEnveloped : //<S2SV> rsk = p7 -> d . signed_and_enveloped -> recipientinfo ; //<S2SV> md_sk = p7 -> d . signed_and_enveloped -> md_algs ; //<S2SV> data_body = p7 -> d . signed_and_enveloped -> enc_data -> enc_data ; //<S2SV> enc_alg = p7 -> d . signed_and_enveloped -> enc_data -> algorithm ; //<S2SV> evp_cipher = EVP_get_cipherbyobj ( enc_alg -> algorithm ) ; //<S2SV> if ( evp_cipher == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , //<S2SV> PKCS7_R_UNSUPPORTED_CIPHER_TYPE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> break ; //<S2SV> case NID_pkcs7_enveloped : //<S2SV> rsk = p7 -> d . enveloped -> recipientinfo ; //<S2SV> enc_alg = p7 -> d . enveloped -> enc_data -> algorithm ; //<S2SV> data_body = p7 -> d . enveloped -> enc_data -> enc_data ; //<S2SV> evp_cipher = EVP_get_cipherbyobj ( enc_alg -> algorithm ) ; //<S2SV> if ( evp_cipher == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , //<S2SV> PKCS7_R_UNSUPPORTED_CIPHER_TYPE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , PKCS7_R_UNSUPPORTED_CONTENT_TYPE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( data_body == NULL && in_bio == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , PKCS7_R_NO_CONTENT ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( md_sk != NULL ) { //<S2SV> for ( i = 0 ; i < sk_X509_ALGOR_num ( md_sk ) ; i ++ ) { //<S2SV> xa = sk_X509_ALGOR_value ( md_sk , i ) ; //<S2SV> if ( ( btmp = BIO_new ( BIO_f_md ( ) ) ) == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , ERR_R_BIO_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> j = OBJ_obj2nid ( xa -> algorithm ) ; //<S2SV> evp_md = EVP_get_digestbynid ( j ) ; //<S2SV> if ( evp_md == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , //<S2SV> PKCS7_R_UNKNOWN_DIGEST_TYPE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> BIO_set_md ( btmp , evp_md ) ; //<S2SV> if ( out == NULL ) //<S2SV> out = btmp ; //<S2SV> else //<S2SV> BIO_push ( out , btmp ) ; //<S2SV> btmp = NULL ; //<S2SV> } //<S2SV> } //<S2SV> if ( evp_cipher != NULL ) { //<S2SV> if ( ( etmp = BIO_new ( BIO_f_cipher ( ) ) ) == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , ERR_R_BIO_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( pcert ) { //<S2SV> for ( i = 0 ; i < sk_PKCS7_RECIP_INFO_num ( rsk ) ; i ++ ) { //<S2SV> ri = sk_PKCS7_RECIP_INFO_value ( rsk , i ) ; //<S2SV> if ( ! pkcs7_cmp_ri ( ri , pcert ) ) //<S2SV> break ; //<S2SV> ri = NULL ; //<S2SV> } //<S2SV> if ( ri == NULL ) { //<S2SV> PKCS7err ( PKCS7_F_PKCS7_DATADECODE , //<S2SV> PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> } //<S2SV> if ( pcert == NULL ) { //<S2SV> for ( i = 0 ; i < sk_PKCS7_RECIP_INFO_num ( rsk ) ; i ++ ) { //<S2SV> ri = sk_PKCS7_RECIP_INFO_value ( rsk , i ) ; //<S2SV> if ( pkcs7_decrypt_rinfo ( & ek , & eklen , ri , pkey ) < 0 ) //<S2SV> goto err ; //<S2SV> ERR_clear_error ( ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( pkcs7_decrypt_rinfo ( & ek , & eklen , ri , pkey ) < 0 ) //<S2SV> goto err ; //<S2SV> ERR_clear_error ( ) ; //<S2SV> } //<S2SV> evp_ctx = NULL ; //<S2SV> BIO_get_cipher_ctx ( etmp , & evp_ctx ) ; //<S2SV> if ( EVP_CipherInit_ex ( evp_ctx , evp_cipher , NULL , NULL , NULL , 0 ) <= 0 ) //<S2SV> goto err ; //<S2SV> if ( EVP_CIPHER_asn1_to_param ( evp_ctx , enc_alg -> parameter ) < 0 ) //<S2SV> goto err ; //<S2SV> tkeylen = EVP_CIPHER_CTX_key_length ( evp_ctx ) ; //<S2SV> tkey = OPENSSL_malloc ( tkeylen ) ; //<S2SV> if ( ! tkey ) //<S2SV> goto err ; //<S2SV> if ( EVP_CIPHER_CTX_rand_key ( evp_ctx , tkey ) <= 0 ) //<S2SV> goto err ; //<S2SV> if ( ek == NULL ) { //<S2SV> ek = tkey ; //<S2SV> eklen = tkeylen ; //<S2SV> tkey = NULL ; //<S2SV> } //<S2SV> if ( eklen != EVP_CIPHER_CTX_key_length ( evp_ctx ) ) { //<S2SV> if ( ! EVP_CIPHER_CTX_set_key_length ( evp_ctx , eklen ) ) { //<S2SV> OPENSSL_clear_free ( ek , eklen ) ; //<S2SV> ek = tkey ; //<S2SV> eklen = tkeylen ; //<S2SV> tkey = NULL ; //<S2SV> } //<S2SV> } //<S2SV> ERR_clear_error ( ) ; //<S2SV> if ( EVP_CipherInit_ex ( evp_ctx , NULL , NULL , ek , NULL , 0 ) <= 0 ) //<S2SV> goto err ; //<S2SV> OPENSSL_clear_free ( ek , eklen ) ; //<S2SV> ek = NULL ; //<S2SV> OPENSSL_clear_free ( tkey , tkeylen ) ; //<S2SV> tkey = NULL ; //<S2SV> if ( out == NULL ) //<S2SV> out = etmp ; //<S2SV> else //<S2SV> BIO_push ( out , etmp ) ; //<S2SV> etmp = NULL ; //<S2SV> } //<S2SV> if ( in_bio != NULL ) { //<S2SV> bio = in_bio ; //<S2SV> } else { //<S2SV> if ( data_body -> length > 0 ) //<S2SV> bio = BIO_new_mem_buf ( data_body -> data , data_body -> length ) ; //<S2SV> else { //<S2SV> bio = BIO_new ( BIO_s_mem ( ) ) ; //<S2SV> BIO_set_mem_eof_return ( bio , 0 ) ; //<S2SV> } //<S2SV> if ( bio == NULL ) //<S2SV> goto err ; //<S2SV> } //<S2SV> BIO_push ( out , bio ) ; //<S2SV> bio = NULL ; //<S2SV> return out ; //<S2SV> err : //<S2SV> OPENSSL_clear_free ( ek , eklen ) ; //<S2SV> OPENSSL_clear_free ( tkey , tkeylen ) ; //<S2SV> BIO_free_all ( out ) ; //<S2SV> BIO_free_all ( btmp ) ; //<S2SV> BIO_free_all ( etmp ) ; //<S2SV> BIO_free_all ( bio ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 