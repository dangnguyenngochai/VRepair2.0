int ssl3_get_key_exchange ( SSL * s ) //<S2SV> { //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> unsigned char * q , md_buf [ EVP_MAX_MD_SIZE * 2 ] ; //<S2SV> # endif //<S2SV> EVP_MD_CTX md_ctx ; //<S2SV> unsigned char * param , * p ; //<S2SV> int al , j , ok ; //<S2SV> long i , param_len , n , alg_k , alg_a ; //<S2SV> EVP_PKEY * pkey = NULL ; //<S2SV> const EVP_MD * md = NULL ; //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> RSA * rsa = NULL ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_DH //<S2SV> DH * dh = NULL ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_ECDH //<S2SV> EC_KEY * ecdh = NULL ; //<S2SV> BN_CTX * bn_ctx = NULL ; //<S2SV> EC_POINT * srvr_ecpoint = NULL ; //<S2SV> int curve_nid = 0 ; //<S2SV> int encoded_pt_len = 0 ; //<S2SV> # endif //<S2SV> EVP_MD_CTX_init ( & md_ctx ) ; //<S2SV> n = s -> method -> ssl_get_message ( s , //<S2SV> SSL3_ST_CR_KEY_EXCH_A , //<S2SV> SSL3_ST_CR_KEY_EXCH_B , //<S2SV> - 1 , //<S2SV> s -> max_cert_list , //<S2SV> & ok ) ; //<S2SV> if ( ! ok ) return ( ( int ) n ) ; //<S2SV> alg_k = s -> s3 -> tmp . new_cipher -> algorithm_mkey ; //<S2SV> if ( s -> s3 -> tmp . message_type != SSL3_MT_SERVER_KEY_EXCHANGE ) //<S2SV> { //<S2SV> if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_UNEXPECTED_MESSAGE ) ; //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_PSK //<S2SV> if ( alg_k & SSL_kPSK ) //<S2SV> { //<S2SV> s -> session -> sess_cert = ssl_sess_cert_new ( ) ; //<S2SV> if ( s -> ctx -> psk_identity_hint ) //<S2SV> OPENSSL_free ( s -> ctx -> psk_identity_hint ) ; //<S2SV> s -> ctx -> psk_identity_hint = NULL ; //<S2SV> } //<S2SV> # endif //<S2SV> s -> s3 -> tmp . reuse_message = 1 ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> param = p = ( unsigned char * ) s -> init_msg ; //<S2SV> if ( s -> session -> sess_cert != NULL ) //<S2SV> { //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> if ( s -> session -> sess_cert -> peer_rsa_tmp != NULL ) //<S2SV> { //<S2SV> RSA_free ( s -> session -> sess_cert -> peer_rsa_tmp ) ; //<S2SV> s -> session -> sess_cert -> peer_rsa_tmp = NULL ; //<S2SV> } //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_DH //<S2SV> if ( s -> session -> sess_cert -> peer_dh_tmp ) //<S2SV> { //<S2SV> DH_free ( s -> session -> sess_cert -> peer_dh_tmp ) ; //<S2SV> s -> session -> sess_cert -> peer_dh_tmp = NULL ; //<S2SV> } //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_ECDH //<S2SV> if ( s -> session -> sess_cert -> peer_ecdh_tmp ) //<S2SV> { //<S2SV> EC_KEY_free ( s -> session -> sess_cert -> peer_ecdh_tmp ) ; //<S2SV> s -> session -> sess_cert -> peer_ecdh_tmp = NULL ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> s -> session -> sess_cert = ssl_sess_cert_new ( ) ; //<S2SV> } //<S2SV> param_len = 0 ; //<S2SV> alg_a = s -> s3 -> tmp . new_cipher -> algorithm_auth ; //<S2SV> al = SSL_AD_DECODE_ERROR ; //<S2SV> # ifndef OPENSSL_NO_PSK //<S2SV> if ( alg_k & SSL_kPSK ) //<S2SV> { //<S2SV> char tmp_id_hint [ PSK_MAX_IDENTITY_LEN + 1 ] ; //<S2SV> param_len = 2 ; //<S2SV> if ( param_len > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > PSK_MAX_IDENTITY_LEN ) //<S2SV> { //<S2SV> al = SSL_AD_HANDSHAKE_FAILURE ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_DATA_LENGTH_TOO_LONG ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> memcpy ( tmp_id_hint , p , i ) ; //<S2SV> memset ( tmp_id_hint + i , 0 , PSK_MAX_IDENTITY_LEN + 1 - i ) ; //<S2SV> if ( s -> ctx -> psk_identity_hint != NULL ) //<S2SV> OPENSSL_free ( s -> ctx -> psk_identity_hint ) ; //<S2SV> s -> ctx -> psk_identity_hint = BUF_strdup ( tmp_id_hint ) ; //<S2SV> if ( s -> ctx -> psk_identity_hint == NULL ) //<S2SV> { //<S2SV> al = SSL_AD_HANDSHAKE_FAILURE ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> n -= param_len ; //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_SRP //<S2SV> if ( alg_k & SSL_kSRP ) //<S2SV> { //<S2SV> param_len = 2 ; //<S2SV> if ( param_len > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_SRP_N_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( s -> srp_ctx . N = BN_bin2bn ( p , i , NULL ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> if ( 2 > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += 2 ; //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_SRP_G_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( s -> srp_ctx . g = BN_bin2bn ( p , i , NULL ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> if ( 1 > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += 1 ; //<S2SV> i = ( unsigned int ) ( p [ 0 ] ) ; //<S2SV> p ++ ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_SRP_S_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( s -> srp_ctx . s = BN_bin2bn ( p , i , NULL ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> if ( 2 > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += 2 ; //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_SRP_B_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( s -> srp_ctx . B = BN_bin2bn ( p , i , NULL ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> n -= param_len ; //<S2SV> if ( ! srp_verify_server_param ( s , & al ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_SRP_PARAMETERS ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> if ( alg_a & SSL_aRSA ) //<S2SV> pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) ; //<S2SV> # else //<S2SV> if ( 0 ) //<S2SV> ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_DSA //<S2SV> else if ( alg_a & SSL_aDSS ) //<S2SV> pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_DSA_SIGN ] . x509 ) ; //<S2SV> # endif //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> if ( alg_k & SSL_kRSA ) //<S2SV> { //<S2SV> if ( ( rsa = RSA_new ( ) ) == NULL ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> param_len = 2 ; //<S2SV> if ( param_len > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_RSA_MODULUS_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( rsa -> n = BN_bin2bn ( p , i , rsa -> n ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> if ( 2 > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += 2 ; //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_RSA_E_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( rsa -> e = BN_bin2bn ( p , i , rsa -> e ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> n -= param_len ; //<S2SV> if ( alg_a & SSL_aRSA ) //<S2SV> pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) ; //<S2SV> else //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> s -> session -> sess_cert -> peer_rsa_tmp = rsa ; //<S2SV> rsa = NULL ; //<S2SV> } //<S2SV> # else //<S2SV> if ( 0 ) //<S2SV> ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_DH //<S2SV> else if ( alg_k & SSL_kDHE ) //<S2SV> { //<S2SV> if ( ( dh = DH_new ( ) ) == NULL ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_DH_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> param_len = 2 ; //<S2SV> if ( param_len > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_DH_P_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( dh -> p = BN_bin2bn ( p , i , NULL ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> if ( 2 > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += 2 ; //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_DH_G_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( dh -> g = BN_bin2bn ( p , i , NULL ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> if ( 2 > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += 2 ; //<S2SV> n2s ( p , i ) ; //<S2SV> if ( i > n - param_len ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_DH_PUB_KEY_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += i ; //<S2SV> if ( ! ( dh -> pub_key = BN_bin2bn ( p , i , NULL ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_BN_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> p += i ; //<S2SV> n -= param_len ; //<S2SV> if ( ! ssl_security ( s , SSL_SECOP_TMP_DH , //<S2SV> DH_security_bits ( dh ) , 0 , dh ) ) //<S2SV> { //<S2SV> al = SSL_AD_HANDSHAKE_FAILURE ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_DH_KEY_TOO_SMALL ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> if ( alg_a & SSL_aRSA ) //<S2SV> pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) ; //<S2SV> # else //<S2SV> if ( 0 ) //<S2SV> ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_DSA //<S2SV> else if ( alg_a & SSL_aDSS ) //<S2SV> pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_DSA_SIGN ] . x509 ) ; //<S2SV> # endif //<S2SV> s -> session -> sess_cert -> peer_dh_tmp = dh ; //<S2SV> dh = NULL ; //<S2SV> } //<S2SV> else if ( ( alg_k & SSL_kDHr ) || ( alg_k & SSL_kDHd ) ) //<S2SV> { //<S2SV> al = SSL_AD_ILLEGAL_PARAMETER ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_ECDH //<S2SV> else if ( alg_k & SSL_kECDHE ) //<S2SV> { //<S2SV> EC_GROUP * ngroup ; //<S2SV> const EC_GROUP * group ; //<S2SV> if ( ( ecdh = EC_KEY_new ( ) ) == NULL ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> param_len = 4 ; //<S2SV> if ( param_len > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( ! tls1_check_curve ( s , p , 3 ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_WRONG_CURVE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( ( curve_nid = tls1_ec_curve_id2nid ( * ( p + 2 ) ) ) == 0 ) //<S2SV> { //<S2SV> al = SSL_AD_INTERNAL_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> ngroup = EC_GROUP_new_by_curve_name ( curve_nid ) ; //<S2SV> if ( ngroup == NULL ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_EC_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( EC_KEY_set_group ( ecdh , ngroup ) == 0 ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_EC_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> EC_GROUP_free ( ngroup ) ; //<S2SV> group = EC_KEY_get0_group ( ecdh ) ; //<S2SV> if ( SSL_C_IS_EXPORT ( s -> s3 -> tmp . new_cipher ) && //<S2SV> ( EC_GROUP_get_degree ( group ) > 163 ) ) //<S2SV> { //<S2SV> al = SSL_AD_EXPORT_RESTRICTION ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> p += 3 ; //<S2SV> if ( ( ( srvr_ecpoint = EC_POINT_new ( group ) ) == NULL ) || //<S2SV> ( ( bn_ctx = BN_CTX_new ( ) ) == NULL ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> encoded_pt_len = * p ; //<S2SV> p += 1 ; //<S2SV> if ( ( encoded_pt_len > n - param_len ) || //<S2SV> ( EC_POINT_oct2point ( group , srvr_ecpoint , //<S2SV> p , encoded_pt_len , bn_ctx ) == 0 ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_ECPOINT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> param_len += encoded_pt_len ; //<S2SV> n -= param_len ; //<S2SV> p += encoded_pt_len ; //<S2SV> if ( 0 ) ; //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> else if ( alg_a & SSL_aRSA ) //<S2SV> pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_RSA_ENC ] . x509 ) ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_ECDSA //<S2SV> else if ( alg_a & SSL_aECDSA ) //<S2SV> pkey = X509_get_pubkey ( s -> session -> sess_cert -> peer_pkeys [ SSL_PKEY_ECC ] . x509 ) ; //<S2SV> # endif //<S2SV> EC_KEY_set_public_key ( ecdh , srvr_ecpoint ) ; //<S2SV> s -> session -> sess_cert -> peer_ecdh_tmp = ecdh ; //<S2SV> ecdh = NULL ; //<S2SV> BN_CTX_free ( bn_ctx ) ; //<S2SV> bn_ctx = NULL ; //<S2SV> EC_POINT_free ( srvr_ecpoint ) ; //<S2SV> srvr_ecpoint = NULL ; //<S2SV> } //<S2SV> else if ( alg_k ) //<S2SV> { //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_UNEXPECTED_MESSAGE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( pkey != NULL ) //<S2SV> { //<S2SV> if ( SSL_USE_SIGALGS ( s ) ) //<S2SV> { //<S2SV> int rv ; //<S2SV> if ( 2 > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> rv = tls12_check_peer_sigalg ( & md , s , p , pkey ) ; //<S2SV> if ( rv == - 1 ) //<S2SV> goto err ; //<S2SV> else if ( rv == 0 ) //<S2SV> { //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # ifdef SSL_DEBUG //<S2SV> fprintf ( stderr , "USING<S2SV_blank>TLSv1.2<S2SV_blank>HASH<S2SV_blank>%s\\n" , EVP_MD_name ( md ) ) ; //<S2SV> # endif //<S2SV> p += 2 ; //<S2SV> n -= 2 ; //<S2SV> } //<S2SV> else //<S2SV> md = EVP_sha1 ( ) ; //<S2SV> if ( 2 > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , //<S2SV> SSL_R_LENGTH_TOO_SHORT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> n2s ( p , i ) ; //<S2SV> n -= 2 ; //<S2SV> j = EVP_PKEY_size ( pkey ) ; //<S2SV> if ( ( i != n ) || ( n > j ) || ( n <= 0 ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_WRONG_SIGNATURE_LENGTH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> if ( pkey -> type == EVP_PKEY_RSA && ! SSL_USE_SIGALGS ( s ) ) //<S2SV> { //<S2SV> int num ; //<S2SV> unsigned int size ; //<S2SV> j = 0 ; //<S2SV> q = md_buf ; //<S2SV> for ( num = 2 ; num > 0 ; num -- ) //<S2SV> { //<S2SV> EVP_MD_CTX_set_flags ( & md_ctx , //<S2SV> EVP_MD_CTX_FLAG_NON_FIPS_ALLOW ) ; //<S2SV> EVP_DigestInit_ex ( & md_ctx , ( num == 2 ) //<S2SV> ? s -> ctx -> md5 : s -> ctx -> sha1 , NULL ) ; //<S2SV> EVP_DigestUpdate ( & md_ctx , & ( s -> s3 -> client_random [ 0 ] ) , SSL3_RANDOM_SIZE ) ; //<S2SV> EVP_DigestUpdate ( & md_ctx , & ( s -> s3 -> server_random [ 0 ] ) , SSL3_RANDOM_SIZE ) ; //<S2SV> EVP_DigestUpdate ( & md_ctx , param , param_len ) ; //<S2SV> EVP_DigestFinal_ex ( & md_ctx , q , & size ) ; //<S2SV> q += size ; //<S2SV> j += size ; //<S2SV> } //<S2SV> i = RSA_verify ( NID_md5_sha1 , md_buf , j , p , n , //<S2SV> pkey -> pkey . rsa ) ; //<S2SV> if ( i < 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_RSA_DECRYPT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( i == 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_SIGNATURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> { //<S2SV> EVP_VerifyInit_ex ( & md_ctx , md , NULL ) ; //<S2SV> EVP_VerifyUpdate ( & md_ctx , & ( s -> s3 -> client_random [ 0 ] ) , SSL3_RANDOM_SIZE ) ; //<S2SV> EVP_VerifyUpdate ( & md_ctx , & ( s -> s3 -> server_random [ 0 ] ) , SSL3_RANDOM_SIZE ) ; //<S2SV> EVP_VerifyUpdate ( & md_ctx , param , param_len ) ; //<S2SV> if ( EVP_VerifyFinal ( & md_ctx , p , ( int ) n , pkey ) <= 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_BAD_SIGNATURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ! ( alg_a & ( SSL_aNULL | SSL_aSRP ) ) && ! ( alg_k & SSL_kPSK ) ) //<S2SV> { //<S2SV> if ( ssl3_check_cert_and_algorithm ( s ) ) //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , ERR_R_INTERNAL_ERROR ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( n != 0 ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE , SSL_R_EXTRA_DATA_IN_MESSAGE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> EVP_PKEY_free ( pkey ) ; //<S2SV> EVP_MD_CTX_cleanup ( & md_ctx ) ; //<S2SV> return ( 1 ) ; //<S2SV> f_err : //<S2SV> ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; //<S2SV> err : //<S2SV> EVP_PKEY_free ( pkey ) ; //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> if ( rsa != NULL ) //<S2SV> RSA_free ( rsa ) ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_DH //<S2SV> if ( dh != NULL ) //<S2SV> DH_free ( dh ) ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_ECDH //<S2SV> BN_CTX_free ( bn_ctx ) ; //<S2SV> EC_POINT_free ( srvr_ecpoint ) ; //<S2SV> if ( ecdh != NULL ) //<S2SV> EC_KEY_free ( ecdh ) ; //<S2SV> # endif //<S2SV> EVP_MD_CTX_cleanup ( & md_ctx ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> 