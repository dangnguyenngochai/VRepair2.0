int BN_GF2m_mod_inv ( BIGNUM * r , const BIGNUM * a , const BIGNUM * p , BN_CTX * ctx ) //<S2SV> { //<S2SV> BIGNUM * b , * c = NULL , * u = NULL , * v = NULL , * tmp ; //<S2SV> int ret = 0 ; //<S2SV> bn_check_top ( a ) ; //<S2SV> bn_check_top ( p ) ; //<S2SV> BN_CTX_start ( ctx ) ; //<S2SV> if ( ( b = BN_CTX_get ( ctx ) ) == NULL ) //<S2SV> goto err ; //<S2SV> if ( ( c = BN_CTX_get ( ctx ) ) == NULL ) //<S2SV> goto err ; //<S2SV> if ( ( u = BN_CTX_get ( ctx ) ) == NULL ) //<S2SV> goto err ; //<S2SV> if ( ( v = BN_CTX_get ( ctx ) ) == NULL ) //<S2SV> goto err ; //<S2SV> if ( ! BN_GF2m_mod ( u , a , p ) ) //<S2SV> goto err ; //<S2SV> if ( BN_is_zero ( u ) ) //<S2SV> goto err ; //<S2SV> if ( ! BN_copy ( v , p ) ) //<S2SV> goto err ; //<S2SV> # if 0 //<S2SV> if ( ! BN_one ( b ) ) //<S2SV> goto err ; //<S2SV> while ( 1 ) { //<S2SV> while ( ! BN_is_odd ( u ) ) { //<S2SV> if ( BN_is_zero ( u ) ) //<S2SV> goto err ; //<S2SV> if ( ! BN_rshift1 ( u , u ) ) //<S2SV> goto err ; //<S2SV> if ( BN_is_odd ( b ) ) { //<S2SV> if ( ! BN_GF2m_add ( b , b , p ) ) //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( ! BN_rshift1 ( b , b ) ) //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( BN_abs_is_word ( u , 1 ) ) //<S2SV> break ; //<S2SV> if ( BN_num_bits ( u ) < BN_num_bits ( v ) ) { //<S2SV> tmp = u ; //<S2SV> u = v ; //<S2SV> v = tmp ; //<S2SV> tmp = b ; //<S2SV> b = c ; //<S2SV> c = tmp ; //<S2SV> } //<S2SV> if ( ! BN_GF2m_add ( u , u , v ) ) //<S2SV> goto err ; //<S2SV> if ( ! BN_GF2m_add ( b , b , c ) ) //<S2SV> goto err ; //<S2SV> } //<S2SV> # else //<S2SV> { //<S2SV> int i ; //<S2SV> int ubits = BN_num_bits ( u ) ; //<S2SV> int vbits = BN_num_bits ( v ) ; //<S2SV> int top = p -> top ; //<S2SV> BN_ULONG * udp , * bdp , * vdp , * cdp ; //<S2SV> bn_wexpand ( u , top ) ; //<S2SV> udp = u -> d ; //<S2SV> for ( i = u -> top ; i < top ; i ++ ) //<S2SV> udp [ i ] = 0 ; //<S2SV> u -> top = top ; //<S2SV> bn_wexpand ( b , top ) ; //<S2SV> bdp = b -> d ; //<S2SV> bdp [ 0 ] = 1 ; //<S2SV> for ( i = 1 ; i < top ; i ++ ) //<S2SV> bdp [ i ] = 0 ; //<S2SV> b -> top = top ; //<S2SV> bn_wexpand ( c , top ) ; //<S2SV> cdp = c -> d ; //<S2SV> for ( i = 0 ; i < top ; i ++ ) //<S2SV> cdp [ i ] = 0 ; //<S2SV> c -> top = top ; //<S2SV> vdp = v -> d ; //<S2SV> while ( 1 ) { //<S2SV> while ( ubits && ! ( udp [ 0 ] & 1 ) ) { //<S2SV> BN_ULONG u0 , u1 , b0 , b1 , mask ; //<S2SV> u0 = udp [ 0 ] ; //<S2SV> b0 = bdp [ 0 ] ; //<S2SV> mask = ( BN_ULONG ) 0 - ( b0 & 1 ) ; //<S2SV> b0 ^= p -> d [ 0 ] & mask ; //<S2SV> for ( i = 0 ; i < top - 1 ; i ++ ) { //<S2SV> u1 = udp [ i + 1 ] ; //<S2SV> udp [ i ] = ( ( u0 >> 1 ) | ( u1 << ( BN_BITS2 - 1 ) ) ) & BN_MASK2 ; //<S2SV> u0 = u1 ; //<S2SV> b1 = bdp [ i + 1 ] ^ ( p -> d [ i + 1 ] & mask ) ; //<S2SV> bdp [ i ] = ( ( b0 >> 1 ) | ( b1 << ( BN_BITS2 - 1 ) ) ) & BN_MASK2 ; //<S2SV> b0 = b1 ; //<S2SV> } //<S2SV> udp [ i ] = u0 >> 1 ; //<S2SV> bdp [ i ] = b0 >> 1 ; //<S2SV> ubits -- ; //<S2SV> } //<S2SV> if ( ubits <= BN_BITS2 ) { //<S2SV> if ( udp [ 0 ] == 0 ) //<S2SV> goto err ; //<S2SV> if ( udp [ 0 ] == 1 ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( ubits < vbits ) { //<S2SV> i = ubits ; //<S2SV> ubits = vbits ; //<S2SV> vbits = i ; //<S2SV> tmp = u ; //<S2SV> u = v ; //<S2SV> v = tmp ; //<S2SV> tmp = b ; //<S2SV> b = c ; //<S2SV> c = tmp ; //<S2SV> udp = vdp ; //<S2SV> vdp = v -> d ; //<S2SV> bdp = cdp ; //<S2SV> cdp = c -> d ; //<S2SV> } //<S2SV> for ( i = 0 ; i < top ; i ++ ) { //<S2SV> udp [ i ] ^= vdp [ i ] ; //<S2SV> bdp [ i ] ^= cdp [ i ] ; //<S2SV> } //<S2SV> if ( ubits == vbits ) { //<S2SV> BN_ULONG ul ; //<S2SV> int utop = ( ubits - 1 ) / BN_BITS2 ; //<S2SV> while ( ( ul = udp [ utop ] ) == 0 && utop ) //<S2SV> utop -- ; //<S2SV> ubits = utop * BN_BITS2 + BN_num_bits_word ( ul ) ; //<S2SV> } //<S2SV> } //<S2SV> bn_correct_top ( b ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ! BN_copy ( r , b ) ) //<S2SV> goto err ; //<S2SV> bn_check_top ( r ) ; //<S2SV> ret = 1 ; //<S2SV> err : //<S2SV> # ifdef BN_DEBUG //<S2SV> bn_correct_top ( c ) ; //<S2SV> bn_correct_top ( u ) ; //<S2SV> bn_correct_top ( v ) ; //<S2SV> # endif //<S2SV> BN_CTX_end ( ctx ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 