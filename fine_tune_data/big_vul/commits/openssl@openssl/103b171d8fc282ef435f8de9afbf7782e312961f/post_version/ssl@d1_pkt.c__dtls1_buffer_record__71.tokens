static int //<S2SV> dtls1_buffer_record ( SSL * s , record_pqueue * queue , unsigned char * priority ) //<S2SV> { //<S2SV> DTLS1_RECORD_DATA * rdata ; //<S2SV> pitem * item ; //<S2SV> if ( pqueue_size ( queue -> q ) >= 100 ) //<S2SV> return 0 ; //<S2SV> rdata = OPENSSL_malloc ( sizeof ( DTLS1_RECORD_DATA ) ) ; //<S2SV> item = pitem_new ( priority , rdata ) ; //<S2SV> if ( rdata == NULL || item == NULL ) //<S2SV> { //<S2SV> if ( rdata != NULL ) OPENSSL_free ( rdata ) ; //<S2SV> if ( item != NULL ) pitem_free ( item ) ; //<S2SV> SSLerr ( SSL_F_DTLS1_BUFFER_RECORD , ERR_R_INTERNAL_ERROR ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> rdata -> packet = s -> packet ; //<S2SV> rdata -> packet_length = s -> packet_length ; //<S2SV> memcpy ( & ( rdata -> rbuf ) , & ( s -> s3 -> rbuf ) , sizeof ( SSL3_BUFFER ) ) ; //<S2SV> memcpy ( & ( rdata -> rrec ) , & ( s -> s3 -> rrec ) , sizeof ( SSL3_RECORD ) ) ; //<S2SV> item -> data = rdata ; //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> if ( BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) && //<S2SV> ( s -> state == SSL3_ST_SR_FINISHED_A || s -> state == SSL3_ST_CR_FINISHED_A ) ) { //<S2SV> BIO_ctrl ( SSL_get_rbio ( s ) , BIO_CTRL_DGRAM_SCTP_GET_RCVINFO , sizeof ( rdata -> recordinfo ) , & rdata -> recordinfo ) ; //<S2SV> } //<S2SV> # endif //<S2SV> s -> packet = NULL ; //<S2SV> s -> packet_length = 0 ; //<S2SV> memset ( & ( s -> s3 -> rbuf ) , 0 , sizeof ( SSL3_BUFFER ) ) ; //<S2SV> memset ( & ( s -> s3 -> rrec ) , 0 , sizeof ( SSL3_RECORD ) ) ; //<S2SV> if ( ! ssl3_setup_buffers ( s ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_DTLS1_BUFFER_RECORD , ERR_R_INTERNAL_ERROR ) ; //<S2SV> if ( rdata -> rbuf . buf != NULL ) //<S2SV> OPENSSL_free ( rdata -> rbuf . buf ) ; //<S2SV> OPENSSL_free ( rdata ) ; //<S2SV> pitem_free ( item ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> if ( pqueue_insert ( queue -> q , item ) == NULL ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_DTLS1_BUFFER_RECORD , ERR_R_INTERNAL_ERROR ) ; //<S2SV> if ( rdata -> rbuf . buf != NULL ) //<S2SV> OPENSSL_free ( rdata -> rbuf . buf ) ; //<S2SV> OPENSSL_free ( rdata ) ; //<S2SV> pitem_free ( item ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> 