int dtls1_read_bytes ( SSL * s , int type , unsigned char * buf , int len , int peek ) //<S2SV> { //<S2SV> int al , i , j , ret ; //<S2SV> unsigned int n ; //<S2SV> SSL3_RECORD * rr ; //<S2SV> void ( * cb ) ( const SSL * ssl , int type2 , int val ) = NULL ; //<S2SV> if ( s -> s3 -> rbuf . buf == NULL ) //<S2SV> if ( ! ssl3_setup_buffers ( s ) ) //<S2SV> return ( - 1 ) ; //<S2SV> if ( ( type && ( type != SSL3_RT_APPLICATION_DATA ) && //<S2SV> ( type != SSL3_RT_HANDSHAKE ) ) || //<S2SV> ( peek && ( type != SSL3_RT_APPLICATION_DATA ) ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , ERR_R_INTERNAL_ERROR ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ( ret = have_handshake_fragment ( s , type , buf , len , peek ) ) ) //<S2SV> return ret ; //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> if ( ( ! s -> in_handshake && SSL_in_init ( s ) ) || //<S2SV> ( BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) && //<S2SV> ( s -> state == DTLS1_SCTP_ST_SR_READ_SOCK || s -> state == DTLS1_SCTP_ST_CR_READ_SOCK ) && //<S2SV> s -> s3 -> in_read_app_data != 2 ) ) //<S2SV> # else //<S2SV> if ( ! s -> in_handshake && SSL_in_init ( s ) ) //<S2SV> # endif //<S2SV> { //<S2SV> i = s -> handshake_func ( s ) ; //<S2SV> if ( i < 0 ) return ( i ) ; //<S2SV> if ( i == 0 ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_SSL_HANDSHAKE_FAILURE ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> start : //<S2SV> s -> rwstate = SSL_NOTHING ; //<S2SV> rr = & ( s -> s3 -> rrec ) ; //<S2SV> if ( s -> state == SSL_ST_OK && rr -> length == 0 ) //<S2SV> { //<S2SV> pitem * item ; //<S2SV> item = pqueue_pop ( s -> d1 -> buffered_app_data . q ) ; //<S2SV> if ( item ) //<S2SV> { //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> if ( BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) ) //<S2SV> { //<S2SV> DTLS1_RECORD_DATA * rdata = ( DTLS1_RECORD_DATA * ) item -> data ; //<S2SV> BIO_ctrl ( SSL_get_rbio ( s ) , BIO_CTRL_DGRAM_SCTP_SET_RCVINFO , sizeof ( rdata -> recordinfo ) , & rdata -> recordinfo ) ; //<S2SV> } //<S2SV> # endif //<S2SV> dtls1_copy_record ( s , item ) ; //<S2SV> OPENSSL_free ( item -> data ) ; //<S2SV> pitem_free ( item ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( dtls1_handle_timeout ( s ) > 0 ) //<S2SV> goto start ; //<S2SV> if ( ( rr -> length == 0 ) || ( s -> rstate == SSL_ST_READ_BODY ) ) //<S2SV> { //<S2SV> ret = dtls1_get_record ( s ) ; //<S2SV> if ( ret <= 0 ) //<S2SV> { //<S2SV> ret = dtls1_read_failed ( s , ret ) ; //<S2SV> if ( ret <= 0 ) //<S2SV> return ( ret ) ; //<S2SV> else //<S2SV> goto start ; //<S2SV> } //<S2SV> } //<S2SV> if ( s -> d1 -> listen && rr -> type != SSL3_RT_HANDSHAKE ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> goto start ; //<S2SV> } //<S2SV> if ( s -> s3 -> change_cipher_spec //<S2SV> && ( rr -> type != SSL3_RT_HANDSHAKE ) ) //<S2SV> { //<S2SV> dtls1_buffer_record ( s , & ( s -> d1 -> buffered_app_data ) , rr -> seq_num ) ; //<S2SV> rr -> length = 0 ; //<S2SV> goto start ; //<S2SV> } //<S2SV> if ( s -> shutdown & SSL_RECEIVED_SHUTDOWN ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> rwstate = SSL_NOTHING ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( type == rr -> type ) //<S2SV> { //<S2SV> if ( SSL_in_init ( s ) && ( type == SSL3_RT_APPLICATION_DATA ) && //<S2SV> ( s -> enc_read_ctx == NULL ) ) //<S2SV> { //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_APP_DATA_IN_HANDSHAKE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( len <= 0 ) return ( len ) ; //<S2SV> if ( ( unsigned int ) len > rr -> length ) //<S2SV> n = rr -> length ; //<S2SV> else //<S2SV> n = ( unsigned int ) len ; //<S2SV> memcpy ( buf , & ( rr -> data [ rr -> off ] ) , n ) ; //<S2SV> if ( ! peek ) //<S2SV> { //<S2SV> rr -> length -= n ; //<S2SV> rr -> off += n ; //<S2SV> if ( rr -> length == 0 ) //<S2SV> { //<S2SV> s -> rstate = SSL_ST_READ_HEADER ; //<S2SV> rr -> off = 0 ; //<S2SV> } //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> if ( BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) && //<S2SV> rr -> type == SSL3_RT_APPLICATION_DATA && //<S2SV> ( s -> state == DTLS1_SCTP_ST_SR_READ_SOCK || s -> state == DTLS1_SCTP_ST_CR_READ_SOCK ) ) //<S2SV> { //<S2SV> s -> rwstate = SSL_READING ; //<S2SV> BIO_clear_retry_flags ( SSL_get_rbio ( s ) ) ; //<S2SV> BIO_set_retry_read ( SSL_get_rbio ( s ) ) ; //<S2SV> } //<S2SV> if ( BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) && //<S2SV> s -> d1 -> shutdown_received && ! BIO_dgram_sctp_msg_waiting ( SSL_get_rbio ( s ) ) ) //<S2SV> { //<S2SV> s -> shutdown |= SSL_RECEIVED_SHUTDOWN ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> return ( n ) ; //<S2SV> } //<S2SV> { //<S2SV> unsigned int k , dest_maxlen = 0 ; //<S2SV> unsigned char * dest = NULL ; //<S2SV> unsigned int * dest_len = NULL ; //<S2SV> if ( rr -> type == SSL3_RT_HANDSHAKE ) //<S2SV> { //<S2SV> dest_maxlen = sizeof s -> d1 -> handshake_fragment ; //<S2SV> dest = s -> d1 -> handshake_fragment ; //<S2SV> dest_len = & s -> d1 -> handshake_fragment_len ; //<S2SV> } //<S2SV> else if ( rr -> type == SSL3_RT_ALERT ) //<S2SV> { //<S2SV> dest_maxlen = sizeof ( s -> d1 -> alert_fragment ) ; //<S2SV> dest = s -> d1 -> alert_fragment ; //<S2SV> dest_len = & s -> d1 -> alert_fragment_len ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_HEARTBEATS //<S2SV> else if ( rr -> type == TLS1_RT_HEARTBEAT ) //<S2SV> { //<S2SV> dtls1_process_heartbeat ( s ) ; //<S2SV> rr -> length = 0 ; //<S2SV> s -> rwstate = SSL_READING ; //<S2SV> BIO_clear_retry_flags ( SSL_get_rbio ( s ) ) ; //<S2SV> BIO_set_retry_read ( SSL_get_rbio ( s ) ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( rr -> type != SSL3_RT_CHANGE_CIPHER_SPEC ) //<S2SV> { //<S2SV> if ( rr -> type == SSL3_RT_APPLICATION_DATA ) //<S2SV> { //<S2SV> BIO * bio ; //<S2SV> s -> s3 -> in_read_app_data = 2 ; //<S2SV> bio = SSL_get_rbio ( s ) ; //<S2SV> s -> rwstate = SSL_READING ; //<S2SV> BIO_clear_retry_flags ( bio ) ; //<S2SV> BIO_set_retry_read ( bio ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_UNEXPECTED_RECORD ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( dest_maxlen > 0 ) //<S2SV> { //<S2SV> if ( rr -> length < dest_maxlen ) //<S2SV> { //<S2SV> # ifdef DTLS1_AD_MISSING_HANDSHAKE_MESSAGE //<S2SV> FIX ME //<S2SV> # endif //<S2SV> s -> rstate = SSL_ST_READ_HEADER ; //<S2SV> rr -> length = 0 ; //<S2SV> goto start ; //<S2SV> } //<S2SV> for ( k = 0 ; k < dest_maxlen ; k ++ ) //<S2SV> { //<S2SV> dest [ k ] = rr -> data [ rr -> off ++ ] ; //<S2SV> rr -> length -- ; //<S2SV> } //<S2SV> * dest_len = dest_maxlen ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( ! s -> server ) && //<S2SV> ( s -> d1 -> handshake_fragment_len >= DTLS1_HM_HEADER_LENGTH ) && //<S2SV> ( s -> d1 -> handshake_fragment [ 0 ] == SSL3_MT_HELLO_REQUEST ) && //<S2SV> ( s -> session != NULL ) && ( s -> session -> cipher != NULL ) ) //<S2SV> { //<S2SV> s -> d1 -> handshake_fragment_len = 0 ; //<S2SV> if ( ( s -> d1 -> handshake_fragment [ 1 ] != 0 ) || //<S2SV> ( s -> d1 -> handshake_fragment [ 2 ] != 0 ) || //<S2SV> ( s -> d1 -> handshake_fragment [ 3 ] != 0 ) ) //<S2SV> { //<S2SV> al = SSL_AD_DECODE_ERROR ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_BAD_HELLO_REQUEST ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( s -> msg_callback ) //<S2SV> s -> msg_callback ( 0 , s -> version , SSL3_RT_HANDSHAKE , //<S2SV> s -> d1 -> handshake_fragment , 4 , s , s -> msg_callback_arg ) ; //<S2SV> if ( SSL_is_init_finished ( s ) && //<S2SV> ! ( s -> s3 -> flags & SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS ) && //<S2SV> ! s -> s3 -> renegotiate ) //<S2SV> { //<S2SV> s -> d1 -> handshake_read_seq ++ ; //<S2SV> s -> new_session = 1 ; //<S2SV> ssl3_renegotiate ( s ) ; //<S2SV> if ( ssl3_renegotiate_check ( s ) ) //<S2SV> { //<S2SV> i = s -> handshake_func ( s ) ; //<S2SV> if ( i < 0 ) return ( i ) ; //<S2SV> if ( i == 0 ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_SSL_HANDSHAKE_FAILURE ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> if ( ! ( s -> mode & SSL_MODE_AUTO_RETRY ) ) //<S2SV> { //<S2SV> if ( s -> s3 -> rbuf . left == 0 ) //<S2SV> { //<S2SV> BIO * bio ; //<S2SV> s -> rwstate = SSL_READING ; //<S2SV> bio = SSL_get_rbio ( s ) ; //<S2SV> BIO_clear_retry_flags ( bio ) ; //<S2SV> BIO_set_retry_read ( bio ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> goto start ; //<S2SV> } //<S2SV> if ( s -> d1 -> alert_fragment_len >= DTLS1_AL_HEADER_LENGTH ) //<S2SV> { //<S2SV> int alert_level = s -> d1 -> alert_fragment [ 0 ] ; //<S2SV> int alert_descr = s -> d1 -> alert_fragment [ 1 ] ; //<S2SV> s -> d1 -> alert_fragment_len = 0 ; //<S2SV> if ( s -> msg_callback ) //<S2SV> s -> msg_callback ( 0 , s -> version , SSL3_RT_ALERT , //<S2SV> s -> d1 -> alert_fragment , 2 , s , s -> msg_callback_arg ) ; //<S2SV> if ( s -> info_callback != NULL ) //<S2SV> cb = s -> info_callback ; //<S2SV> else if ( s -> ctx -> info_callback != NULL ) //<S2SV> cb = s -> ctx -> info_callback ; //<S2SV> if ( cb != NULL ) //<S2SV> { //<S2SV> j = ( alert_level << 8 ) | alert_descr ; //<S2SV> cb ( s , SSL_CB_READ_ALERT , j ) ; //<S2SV> } //<S2SV> if ( alert_level == 1 ) //<S2SV> { //<S2SV> s -> s3 -> warn_alert = alert_descr ; //<S2SV> if ( alert_descr == SSL_AD_CLOSE_NOTIFY ) //<S2SV> { //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> if ( BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) && //<S2SV> BIO_dgram_sctp_msg_waiting ( SSL_get_rbio ( s ) ) ) //<S2SV> { //<S2SV> s -> d1 -> shutdown_received = 1 ; //<S2SV> s -> rwstate = SSL_READING ; //<S2SV> BIO_clear_retry_flags ( SSL_get_rbio ( s ) ) ; //<S2SV> BIO_set_retry_read ( SSL_get_rbio ( s ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> # endif //<S2SV> s -> shutdown |= SSL_RECEIVED_SHUTDOWN ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> # if 0 //<S2SV> if ( alert_descr == DTLS1_AD_MISSING_HANDSHAKE_MESSAGE ) //<S2SV> { //<S2SV> unsigned short seq ; //<S2SV> unsigned int frag_off ; //<S2SV> unsigned char * p = & ( s -> d1 -> alert_fragment [ 2 ] ) ; //<S2SV> n2s ( p , seq ) ; //<S2SV> n2l3 ( p , frag_off ) ; //<S2SV> dtls1_retransmit_message ( s , //<S2SV> dtls1_get_queue_priority ( frag -> msg_header . seq , 0 ) , //<S2SV> frag_off , & found ) ; //<S2SV> if ( ! found && SSL_in_init ( s ) ) //<S2SV> { //<S2SV> ssl3_send_alert ( s , SSL3_AL_WARNING , //<S2SV> DTLS1_AD_MISSING_HANDSHAKE_MESSAGE ) ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> else if ( alert_level == 2 ) //<S2SV> { //<S2SV> char tmp [ 16 ] ; //<S2SV> s -> rwstate = SSL_NOTHING ; //<S2SV> s -> s3 -> fatal_alert = alert_descr ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_AD_REASON_OFFSET + alert_descr ) ; //<S2SV> BIO_snprintf ( tmp , sizeof tmp , "%d" , alert_descr ) ; //<S2SV> ERR_add_error_data ( 2 , "SSL<S2SV_blank>alert<S2SV_blank>number<S2SV_blank>" , tmp ) ; //<S2SV> s -> shutdown |= SSL_RECEIVED_SHUTDOWN ; //<S2SV> SSL_CTX_remove_session ( s -> ctx , s -> session ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> al = SSL_AD_ILLEGAL_PARAMETER ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_UNKNOWN_ALERT_TYPE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> goto start ; //<S2SV> } //<S2SV> if ( s -> shutdown & SSL_SENT_SHUTDOWN ) //<S2SV> { //<S2SV> s -> rwstate = SSL_NOTHING ; //<S2SV> rr -> length = 0 ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( rr -> type == SSL3_RT_CHANGE_CIPHER_SPEC ) //<S2SV> { //<S2SV> struct ccs_header_st ccs_hdr ; //<S2SV> unsigned int ccs_hdr_len = DTLS1_CCS_HEADER_LENGTH ; //<S2SV> dtls1_get_ccs_header ( rr -> data , & ccs_hdr ) ; //<S2SV> if ( s -> version == DTLS1_BAD_VER ) //<S2SV> ccs_hdr_len = 3 ; //<S2SV> if ( ( rr -> length != ccs_hdr_len ) || //<S2SV> ( rr -> off != 0 ) || ( rr -> data [ 0 ] != SSL3_MT_CCS ) ) //<S2SV> { //<S2SV> i = SSL_AD_ILLEGAL_PARAMETER ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_BAD_CHANGE_CIPHER_SPEC ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> rr -> length = 0 ; //<S2SV> if ( s -> msg_callback ) //<S2SV> s -> msg_callback ( 0 , s -> version , SSL3_RT_CHANGE_CIPHER_SPEC , //<S2SV> rr -> data , 1 , s , s -> msg_callback_arg ) ; //<S2SV> if ( ! s -> d1 -> change_cipher_spec_ok ) //<S2SV> { //<S2SV> goto start ; //<S2SV> } //<S2SV> s -> d1 -> change_cipher_spec_ok = 0 ; //<S2SV> s -> s3 -> change_cipher_spec = 1 ; //<S2SV> if ( ! ssl3_do_change_cipher_spec ( s ) ) //<S2SV> goto err ; //<S2SV> dtls1_reset_seq_numbers ( s , SSL3_CC_READ ) ; //<S2SV> if ( s -> version == DTLS1_BAD_VER ) //<S2SV> s -> d1 -> handshake_read_seq ++ ; //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> BIO_ctrl ( SSL_get_wbio ( s ) , BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD , 1 , NULL ) ; //<S2SV> # endif //<S2SV> goto start ; //<S2SV> } //<S2SV> if ( ( s -> d1 -> handshake_fragment_len >= DTLS1_HM_HEADER_LENGTH ) && //<S2SV> ! s -> in_handshake ) //<S2SV> { //<S2SV> struct hm_header_st msg_hdr ; //<S2SV> dtls1_get_message_header ( rr -> data , & msg_hdr ) ; //<S2SV> if ( rr -> epoch != s -> d1 -> r_epoch ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> goto start ; //<S2SV> } //<S2SV> if ( msg_hdr . type == SSL3_MT_FINISHED ) //<S2SV> { //<S2SV> if ( dtls1_check_timeout_num ( s ) < 0 ) //<S2SV> return - 1 ; //<S2SV> dtls1_retransmit_buffered_messages ( s ) ; //<S2SV> rr -> length = 0 ; //<S2SV> goto start ; //<S2SV> } //<S2SV> if ( ( ( s -> state & SSL_ST_MASK ) == SSL_ST_OK ) && //<S2SV> ! ( s -> s3 -> flags & SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS ) ) //<S2SV> { //<S2SV> # if 0 //<S2SV> s -> state = SSL_ST_BEFORE | ( s -> server ) //<S2SV> ? SSL_ST_ACCEPT //<S2SV> : SSL_ST_CONNECT ; //<S2SV> # else //<S2SV> s -> state = s -> server ? SSL_ST_ACCEPT : SSL_ST_CONNECT ; //<S2SV> # endif //<S2SV> s -> renegotiate = 1 ; //<S2SV> s -> new_session = 1 ; //<S2SV> } //<S2SV> i = s -> handshake_func ( s ) ; //<S2SV> if ( i < 0 ) return ( i ) ; //<S2SV> if ( i == 0 ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_SSL_HANDSHAKE_FAILURE ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> if ( ! ( s -> mode & SSL_MODE_AUTO_RETRY ) ) //<S2SV> { //<S2SV> if ( s -> s3 -> rbuf . left == 0 ) //<S2SV> { //<S2SV> BIO * bio ; //<S2SV> s -> rwstate = SSL_READING ; //<S2SV> bio = SSL_get_rbio ( s ) ; //<S2SV> BIO_clear_retry_flags ( bio ) ; //<S2SV> BIO_set_retry_read ( bio ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> goto start ; //<S2SV> } //<S2SV> switch ( rr -> type ) //<S2SV> { //<S2SV> default : //<S2SV> # ifndef OPENSSL_NO_TLS //<S2SV> if ( s -> version == TLS1_VERSION ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> goto start ; //<S2SV> } //<S2SV> # endif //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_UNEXPECTED_RECORD ) ; //<S2SV> goto f_err ; //<S2SV> case SSL3_RT_CHANGE_CIPHER_SPEC : //<S2SV> case SSL3_RT_ALERT : //<S2SV> case SSL3_RT_HANDSHAKE : //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , ERR_R_INTERNAL_ERROR ) ; //<S2SV> goto f_err ; //<S2SV> case SSL3_RT_APPLICATION_DATA : //<S2SV> if ( s -> s3 -> in_read_app_data && //<S2SV> ( s -> s3 -> total_renegotiations != 0 ) && //<S2SV> ( ( //<S2SV> ( s -> state & SSL_ST_CONNECT ) && //<S2SV> ( s -> state >= SSL3_ST_CW_CLNT_HELLO_A ) && //<S2SV> ( s -> state <= SSL3_ST_CR_SRVR_HELLO_A ) //<S2SV> ) || ( //<S2SV> ( s -> state & SSL_ST_ACCEPT ) && //<S2SV> ( s -> state <= SSL3_ST_SW_HELLO_REQ_A ) && //<S2SV> ( s -> state >= SSL3_ST_SR_CLNT_HELLO_A ) //<S2SV> ) //<S2SV> ) ) //<S2SV> { //<S2SV> s -> s3 -> in_read_app_data = 2 ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> SSLerr ( SSL_F_DTLS1_READ_BYTES , SSL_R_UNEXPECTED_RECORD ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> f_err : //<S2SV> ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; //<S2SV> err : //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> 