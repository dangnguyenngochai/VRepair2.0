int dtls1_get_record ( SSL * s ) //<S2SV> { //<S2SV> int ssl_major , ssl_minor ; //<S2SV> int i , n ; //<S2SV> SSL3_RECORD * rr ; //<S2SV> unsigned char * p = NULL ; //<S2SV> unsigned short version ; //<S2SV> DTLS1_BITMAP * bitmap ; //<S2SV> unsigned int is_next_epoch ; //<S2SV> rr = & ( s -> s3 -> rrec ) ; //<S2SV> dtls1_process_buffered_records ( s ) ; //<S2SV> if ( dtls1_get_processed_record ( s ) ) //<S2SV> return 1 ; //<S2SV> again : //<S2SV> if ( ( s -> rstate != SSL_ST_READ_BODY ) || //<S2SV> ( s -> packet_length < DTLS1_RT_HEADER_LENGTH ) ) //<S2SV> { //<S2SV> n = ssl3_read_n ( s , DTLS1_RT_HEADER_LENGTH , s -> s3 -> rbuf . len , 0 ) ; //<S2SV> if ( n <= 0 ) return ( n ) ; //<S2SV> if ( s -> packet_length != DTLS1_RT_HEADER_LENGTH ) //<S2SV> { //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> s -> rstate = SSL_ST_READ_BODY ; //<S2SV> p = s -> packet ; //<S2SV> if ( s -> msg_callback ) //<S2SV> s -> msg_callback ( 0 , 0 , SSL3_RT_HEADER , p , DTLS1_RT_HEADER_LENGTH , s , s -> msg_callback_arg ) ; //<S2SV> rr -> type = * ( p ++ ) ; //<S2SV> ssl_major = * ( p ++ ) ; //<S2SV> ssl_minor = * ( p ++ ) ; //<S2SV> version = ( ssl_major << 8 ) | ssl_minor ; //<S2SV> n2s ( p , rr -> epoch ) ; //<S2SV> memcpy ( & ( s -> s3 -> read_sequence [ 2 ] ) , p , 6 ) ; //<S2SV> p += 6 ; //<S2SV> n2s ( p , rr -> length ) ; //<S2SV> if ( ! s -> first_packet ) //<S2SV> { //<S2SV> if ( version != s -> version ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( version & 0xff00 ) != ( s -> version & 0xff00 ) ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> if ( rr -> length > SSL3_RT_MAX_ENCRYPTED_LENGTH ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> } //<S2SV> if ( rr -> length > s -> packet_length - DTLS1_RT_HEADER_LENGTH ) //<S2SV> { //<S2SV> i = rr -> length ; //<S2SV> n = ssl3_read_n ( s , i , i , 1 ) ; //<S2SV> if ( n != i ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> } //<S2SV> s -> rstate = SSL_ST_READ_HEADER ; //<S2SV> bitmap = dtls1_get_bitmap ( s , rr , & is_next_epoch ) ; //<S2SV> if ( bitmap == NULL ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> if ( ! BIO_dgram_is_sctp ( SSL_get_rbio ( s ) ) ) //<S2SV> { //<S2SV> # endif //<S2SV> if ( ! ( s -> d1 -> listen && rr -> type == SSL3_RT_HANDSHAKE && //<S2SV> * p == SSL3_MT_CLIENT_HELLO ) && //<S2SV> ! dtls1_record_replay_check ( s , bitmap ) ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_SCTP //<S2SV> } //<S2SV> # endif //<S2SV> if ( rr -> length == 0 ) goto again ; //<S2SV> if ( is_next_epoch ) //<S2SV> { //<S2SV> if ( ( SSL_in_init ( s ) || s -> in_handshake ) && ! s -> d1 -> listen ) //<S2SV> { //<S2SV> dtls1_buffer_record ( s , & ( s -> d1 -> unprocessed_rcds ) , rr -> seq_num ) ; //<S2SV> } //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> if ( ! dtls1_process_record ( s ) ) //<S2SV> { //<S2SV> rr -> length = 0 ; //<S2SV> s -> packet_length = 0 ; //<S2SV> goto again ; //<S2SV> } //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> 