static int aes_gcm_ctrl ( EVP_CIPHER_CTX * c , int type , int arg , void * ptr ) //<S2SV> { //<S2SV> EVP_AES_GCM_CTX * gctx = EVP_C_DATA ( EVP_AES_GCM_CTX , c ) ; //<S2SV> switch ( type ) { //<S2SV> case EVP_CTRL_INIT : //<S2SV> gctx -> key_set = 0 ; //<S2SV> gctx -> iv_set = 0 ; //<S2SV> gctx -> ivlen = EVP_CIPHER_CTX_iv_length ( c ) ; //<S2SV> gctx -> iv = EVP_CIPHER_CTX_iv_noconst ( c ) ; //<S2SV> gctx -> taglen = - 1 ; //<S2SV> gctx -> iv_gen = 0 ; //<S2SV> gctx -> tls_aad_len = - 1 ; //<S2SV> return 1 ; //<S2SV> case EVP_CTRL_AEAD_SET_IVLEN : //<S2SV> if ( arg <= 0 ) //<S2SV> return 0 ; //<S2SV> if ( ( arg > EVP_MAX_IV_LENGTH ) && ( arg > gctx -> ivlen ) ) { //<S2SV> if ( gctx -> iv != EVP_CIPHER_CTX_iv_noconst ( c ) ) //<S2SV> OPENSSL_free ( gctx -> iv ) ; //<S2SV> gctx -> iv = OPENSSL_malloc ( arg ) ; //<S2SV> if ( gctx -> iv == NULL ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> gctx -> ivlen = arg ; //<S2SV> return 1 ; //<S2SV> case EVP_CTRL_AEAD_SET_TAG : //<S2SV> if ( arg <= 0 || arg > 16 || EVP_CIPHER_CTX_encrypting ( c ) ) //<S2SV> return 0 ; //<S2SV> memcpy ( EVP_CIPHER_CTX_buf_noconst ( c ) , ptr , arg ) ; //<S2SV> gctx -> taglen = arg ; //<S2SV> return 1 ; //<S2SV> case EVP_CTRL_AEAD_GET_TAG : //<S2SV> if ( arg <= 0 || arg > 16 || ! EVP_CIPHER_CTX_encrypting ( c ) //<S2SV> || gctx -> taglen < 0 ) //<S2SV> return 0 ; //<S2SV> memcpy ( ptr , EVP_CIPHER_CTX_buf_noconst ( c ) , arg ) ; //<S2SV> return 1 ; //<S2SV> case EVP_CTRL_GCM_SET_IV_FIXED : //<S2SV> if ( arg == - 1 ) { //<S2SV> memcpy ( gctx -> iv , ptr , gctx -> ivlen ) ; //<S2SV> gctx -> iv_gen = 1 ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( ( arg < 4 ) || ( gctx -> ivlen - arg ) < 8 ) //<S2SV> return 0 ; //<S2SV> if ( arg ) //<S2SV> memcpy ( gctx -> iv , ptr , arg ) ; //<S2SV> if ( EVP_CIPHER_CTX_encrypting ( c ) //<S2SV> && RAND_bytes ( gctx -> iv + arg , gctx -> ivlen - arg ) <= 0 ) //<S2SV> return 0 ; //<S2SV> gctx -> iv_gen = 1 ; //<S2SV> return 1 ; //<S2SV> case EVP_CTRL_GCM_IV_GEN : //<S2SV> if ( gctx -> iv_gen == 0 || gctx -> key_set == 0 ) //<S2SV> return 0 ; //<S2SV> CRYPTO_gcm128_setiv ( & gctx -> gcm , gctx -> iv , gctx -> ivlen ) ; //<S2SV> if ( arg <= 0 || arg > gctx -> ivlen ) //<S2SV> arg = gctx -> ivlen ; //<S2SV> memcpy ( ptr , gctx -> iv + gctx -> ivlen - arg , arg ) ; //<S2SV> ctr64_inc ( gctx -> iv + gctx -> ivlen - 8 ) ; //<S2SV> gctx -> iv_set = 1 ; //<S2SV> return 1 ; //<S2SV> case EVP_CTRL_GCM_SET_IV_INV : //<S2SV> if ( gctx -> iv_gen == 0 || gctx -> key_set == 0 //<S2SV> || EVP_CIPHER_CTX_encrypting ( c ) ) //<S2SV> return 0 ; //<S2SV> memcpy ( gctx -> iv + gctx -> ivlen - arg , ptr , arg ) ; //<S2SV> CRYPTO_gcm128_setiv ( & gctx -> gcm , gctx -> iv , gctx -> ivlen ) ; //<S2SV> gctx -> iv_set = 1 ; //<S2SV> return 1 ; //<S2SV> case EVP_CTRL_AEAD_TLS1_AAD : //<S2SV> if ( arg != EVP_AEAD_TLS1_AAD_LEN ) //<S2SV> return 0 ; //<S2SV> memcpy ( EVP_CIPHER_CTX_buf_noconst ( c ) , ptr , arg ) ; //<S2SV> gctx -> tls_aad_len = arg ; //<S2SV> { //<S2SV> unsigned int len = //<S2SV> EVP_CIPHER_CTX_buf_noconst ( c ) [ arg - 2 ] << 8 //<S2SV> | EVP_CIPHER_CTX_buf_noconst ( c ) [ arg - 1 ] ; //<S2SV> len -= EVP_GCM_TLS_EXPLICIT_IV_LEN ; //<S2SV> if ( ! EVP_CIPHER_CTX_encrypting ( c ) ) //<S2SV> len -= EVP_GCM_TLS_TAG_LEN ; //<S2SV> EVP_CIPHER_CTX_buf_noconst ( c ) [ arg - 2 ] = len >> 8 ; //<S2SV> EVP_CIPHER_CTX_buf_noconst ( c ) [ arg - 1 ] = len & 0xff ; //<S2SV> } //<S2SV> return EVP_GCM_TLS_TAG_LEN ; //<S2SV> case EVP_CTRL_COPY : //<S2SV> { //<S2SV> EVP_CIPHER_CTX * out = ptr ; //<S2SV> EVP_AES_GCM_CTX * gctx_out = EVP_C_DATA ( EVP_AES_GCM_CTX , out ) ; //<S2SV> if ( gctx -> gcm . key ) { //<S2SV> if ( gctx -> gcm . key != & gctx -> ks ) //<S2SV> return 0 ; //<S2SV> gctx_out -> gcm . key = & gctx_out -> ks ; //<S2SV> } //<S2SV> if ( gctx -> iv == EVP_CIPHER_CTX_iv_noconst ( c ) ) //<S2SV> gctx_out -> iv = EVP_CIPHER_CTX_iv_noconst ( out ) ; //<S2SV> else { //<S2SV> gctx_out -> iv = OPENSSL_malloc ( gctx -> ivlen ) ; //<S2SV> if ( gctx_out -> iv == NULL ) //<S2SV> return 0 ; //<S2SV> memcpy ( gctx_out -> iv , gctx -> iv , gctx -> ivlen ) ; //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> default : //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> 