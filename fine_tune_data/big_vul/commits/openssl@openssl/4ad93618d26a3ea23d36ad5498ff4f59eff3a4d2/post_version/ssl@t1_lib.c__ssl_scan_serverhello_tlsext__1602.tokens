static int ssl_scan_serverhello_tlsext ( SSL * s , PACKET * pkt , int * al ) //<S2SV> { //<S2SV> unsigned int length , type , size ; //<S2SV> int tlsext_servername = 0 ; //<S2SV> int renegotiate_seen = 0 ; //<S2SV> # ifndef OPENSSL_NO_NEXTPROTONEG //<S2SV> s -> s3 -> next_proto_neg_seen = 0 ; //<S2SV> # endif //<S2SV> s -> tlsext_ticket_expected = 0 ; //<S2SV> OPENSSL_free ( s -> s3 -> alpn_selected ) ; //<S2SV> s -> s3 -> alpn_selected = NULL ; //<S2SV> # ifndef OPENSSL_NO_HEARTBEATS //<S2SV> s -> tlsext_heartbeat &= ~ ( SSL_DTLSEXT_HB_ENABLED | //<S2SV> SSL_DTLSEXT_HB_DONT_SEND_REQUESTS ) ; //<S2SV> # endif //<S2SV> s -> tlsext_use_etm = 0 ; //<S2SV> s -> s3 -> flags &= ~ TLS1_FLAGS_RECEIVED_EXTMS ; //<S2SV> if ( ! PACKET_get_net_2 ( pkt , & length ) ) //<S2SV> goto ri_check ; //<S2SV> if ( PACKET_remaining ( pkt ) != length ) { //<S2SV> * al = SSL_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! tls1_check_duplicate_extensions ( pkt ) ) { //<S2SV> * al = SSL_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> while ( PACKET_get_net_2 ( pkt , & type ) && PACKET_get_net_2 ( pkt , & size ) ) { //<S2SV> const unsigned char * data ; //<S2SV> PACKET spkt ; //<S2SV> if ( ! PACKET_get_sub_packet ( pkt , & spkt , size ) //<S2SV> || ! PACKET_peek_bytes ( & spkt , & data , size ) ) //<S2SV> goto ri_check ; //<S2SV> if ( s -> tlsext_debug_cb ) //<S2SV> s -> tlsext_debug_cb ( s , 1 , type , data , size , s -> tlsext_debug_arg ) ; //<S2SV> if ( type == TLSEXT_TYPE_renegotiate ) { //<S2SV> if ( ! ssl_parse_serverhello_renegotiate_ext ( s , & spkt , al ) ) //<S2SV> return 0 ; //<S2SV> renegotiate_seen = 1 ; //<S2SV> } else if ( s -> version == SSL3_VERSION ) { //<S2SV> } else if ( type == TLSEXT_TYPE_server_name ) { //<S2SV> if ( s -> tlsext_hostname == NULL || size > 0 ) { //<S2SV> * al = TLS1_AD_UNRECOGNIZED_NAME ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> tlsext_servername = 1 ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_EC //<S2SV> else if ( type == TLSEXT_TYPE_ec_point_formats ) { //<S2SV> unsigned int ecpointformatlist_length ; //<S2SV> if ( ! PACKET_get_1 ( & spkt , & ecpointformatlist_length ) //<S2SV> || ecpointformatlist_length != size - 1 ) { //<S2SV> * al = TLS1_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! s -> hit ) { //<S2SV> s -> session -> tlsext_ecpointformatlist_length = 0 ; //<S2SV> OPENSSL_free ( s -> session -> tlsext_ecpointformatlist ) ; //<S2SV> if ( ( s -> session -> tlsext_ecpointformatlist = //<S2SV> OPENSSL_malloc ( ecpointformatlist_length ) ) == NULL ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> s -> session -> tlsext_ecpointformatlist_length = //<S2SV> ecpointformatlist_length ; //<S2SV> if ( ! PACKET_copy_bytes ( & spkt , //<S2SV> s -> session -> tlsext_ecpointformatlist , //<S2SV> ecpointformatlist_length ) ) { //<S2SV> * al = TLS1_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> else if ( type == TLSEXT_TYPE_session_ticket ) { //<S2SV> if ( s -> tls_session_ticket_ext_cb && //<S2SV> ! s -> tls_session_ticket_ext_cb ( s , data , size , //<S2SV> s -> tls_session_ticket_ext_cb_arg ) ) //<S2SV> { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! tls_use_ticket ( s ) || ( size > 0 ) ) { //<S2SV> * al = TLS1_AD_UNSUPPORTED_EXTENSION ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> s -> tlsext_ticket_expected = 1 ; //<S2SV> } else if ( type == TLSEXT_TYPE_status_request ) { //<S2SV> if ( ( s -> tlsext_status_type == - 1 ) || ( size > 0 ) ) { //<S2SV> * al = TLS1_AD_UNSUPPORTED_EXTENSION ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> s -> tlsext_status_expected = 1 ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_CT //<S2SV> else if ( type == TLSEXT_TYPE_signed_certificate_timestamp && //<S2SV> s -> ct_validation_callback != NULL ) { //<S2SV> if ( s -> tlsext_scts != NULL ) { //<S2SV> OPENSSL_free ( s -> tlsext_scts ) ; //<S2SV> s -> tlsext_scts = NULL ; //<S2SV> } //<S2SV> s -> tlsext_scts_len = size ; //<S2SV> if ( size > 0 ) { //<S2SV> s -> tlsext_scts = OPENSSL_malloc ( size ) ; //<S2SV> if ( s -> tlsext_scts == NULL ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> memcpy ( s -> tlsext_scts , data , size ) ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_NEXTPROTONEG //<S2SV> else if ( type == TLSEXT_TYPE_next_proto_neg && //<S2SV> s -> s3 -> tmp . finish_md_len == 0 ) { //<S2SV> unsigned char * selected ; //<S2SV> unsigned char selected_len ; //<S2SV> if ( s -> ctx -> next_proto_select_cb == NULL ) { //<S2SV> * al = TLS1_AD_UNSUPPORTED_EXTENSION ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! ssl_next_proto_validate ( & spkt ) ) { //<S2SV> * al = TLS1_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( s -> ctx -> next_proto_select_cb ( s , & selected , & selected_len , data , //<S2SV> size , //<S2SV> s -> //<S2SV> ctx -> next_proto_select_cb_arg ) != //<S2SV> SSL_TLSEXT_ERR_OK ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> OPENSSL_free ( s -> next_proto_negotiated ) ; //<S2SV> s -> next_proto_negotiated = OPENSSL_malloc ( selected_len ) ; //<S2SV> if ( s -> next_proto_negotiated == NULL ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> memcpy ( s -> next_proto_negotiated , selected , selected_len ) ; //<S2SV> s -> next_proto_negotiated_len = selected_len ; //<S2SV> s -> s3 -> next_proto_neg_seen = 1 ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( type == TLSEXT_TYPE_application_layer_protocol_negotiation ) { //<S2SV> unsigned len ; //<S2SV> if ( ! s -> s3 -> alpn_sent ) { //<S2SV> * al = TLS1_AD_UNSUPPORTED_EXTENSION ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! PACKET_get_net_2 ( & spkt , & len ) //<S2SV> || PACKET_remaining ( & spkt ) != len || ! PACKET_get_1 ( & spkt , & len ) //<S2SV> || PACKET_remaining ( & spkt ) != len ) { //<S2SV> * al = TLS1_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> OPENSSL_free ( s -> s3 -> alpn_selected ) ; //<S2SV> s -> s3 -> alpn_selected = OPENSSL_malloc ( len ) ; //<S2SV> if ( s -> s3 -> alpn_selected == NULL ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! PACKET_copy_bytes ( & spkt , s -> s3 -> alpn_selected , len ) ) { //<S2SV> * al = TLS1_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> s -> s3 -> alpn_selected_len = len ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_HEARTBEATS //<S2SV> else if ( SSL_IS_DTLS ( s ) && type == TLSEXT_TYPE_heartbeat ) { //<S2SV> unsigned int hbtype ; //<S2SV> if ( ! PACKET_get_1 ( & spkt , & hbtype ) ) { //<S2SV> * al = SSL_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> switch ( hbtype ) { //<S2SV> case 0x01 : //<S2SV> s -> tlsext_heartbeat |= SSL_DTLSEXT_HB_ENABLED ; //<S2SV> break ; //<S2SV> case 0x02 : //<S2SV> s -> tlsext_heartbeat |= SSL_DTLSEXT_HB_ENABLED ; //<S2SV> s -> tlsext_heartbeat |= SSL_DTLSEXT_HB_DONT_SEND_REQUESTS ; //<S2SV> break ; //<S2SV> default : //<S2SV> * al = SSL_AD_ILLEGAL_PARAMETER ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_SRTP //<S2SV> else if ( SSL_IS_DTLS ( s ) && type == TLSEXT_TYPE_use_srtp ) { //<S2SV> if ( ssl_parse_serverhello_use_srtp_ext ( s , & spkt , al ) ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( type == TLSEXT_TYPE_encrypt_then_mac ) { //<S2SV> if ( s -> s3 -> tmp . new_cipher -> algorithm_mac != SSL_AEAD //<S2SV> && s -> s3 -> tmp . new_cipher -> algorithm_enc != SSL_RC4 ) //<S2SV> s -> tlsext_use_etm = 1 ; //<S2SV> } else if ( type == TLSEXT_TYPE_extended_master_secret ) { //<S2SV> s -> s3 -> flags |= TLS1_FLAGS_RECEIVED_EXTMS ; //<S2SV> if ( ! s -> hit ) //<S2SV> s -> session -> flags |= SSL_SESS_FLAG_EXTMS ; //<S2SV> } //<S2SV> else if ( custom_ext_parse ( s , 0 , type , data , size , al ) <= 0 ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( PACKET_remaining ( pkt ) != 0 ) { //<S2SV> * al = SSL_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! s -> hit && tlsext_servername == 1 ) { //<S2SV> if ( s -> tlsext_hostname ) { //<S2SV> if ( s -> session -> tlsext_hostname == NULL ) { //<S2SV> s -> session -> tlsext_hostname = //<S2SV> OPENSSL_strdup ( s -> tlsext_hostname ) ; //<S2SV> if ( ! s -> session -> tlsext_hostname ) { //<S2SV> * al = SSL_AD_UNRECOGNIZED_NAME ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } else { //<S2SV> * al = SSL_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> ri_check : //<S2SV> if ( ! renegotiate_seen && ! ( s -> options & SSL_OP_LEGACY_SERVER_CONNECT ) //<S2SV> && ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) ) { //<S2SV> * al = SSL_AD_HANDSHAKE_FAILURE ; //<S2SV> SSLerr ( SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT , //<S2SV> SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( s -> hit ) { //<S2SV> if ( ! ( s -> s3 -> flags & TLS1_FLAGS_RECEIVED_EXTMS ) != //<S2SV> ! ( s -> session -> flags & SSL_SESS_FLAG_EXTMS ) ) { //<S2SV> * al = SSL_AD_HANDSHAKE_FAILURE ; //<S2SV> SSLerr ( SSL_F_SSL_SCAN_SERVERHELLO_TLSEXT , SSL_R_INCONSISTENT_EXTMS ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 