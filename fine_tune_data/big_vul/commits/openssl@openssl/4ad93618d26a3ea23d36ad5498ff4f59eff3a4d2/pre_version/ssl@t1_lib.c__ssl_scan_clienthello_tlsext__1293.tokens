static int ssl_scan_clienthello_tlsext ( SSL * s , PACKET * pkt , int * al ) //<S2SV> { //<S2SV> unsigned int type ; //<S2SV> int renegotiate_seen = 0 ; //<S2SV> PACKET extensions ; //<S2SV> * al = SSL_AD_DECODE_ERROR ; //<S2SV> s -> servername_done = 0 ; //<S2SV> s -> tlsext_status_type = - 1 ; //<S2SV> # ifndef OPENSSL_NO_NEXTPROTONEG //<S2SV> s -> s3 -> next_proto_neg_seen = 0 ; //<S2SV> # endif //<S2SV> OPENSSL_free ( s -> s3 -> alpn_selected ) ; //<S2SV> s -> s3 -> alpn_selected = NULL ; //<S2SV> s -> s3 -> alpn_selected_len = 0 ; //<S2SV> OPENSSL_free ( s -> s3 -> alpn_proposed ) ; //<S2SV> s -> s3 -> alpn_proposed = NULL ; //<S2SV> s -> s3 -> alpn_proposed_len = 0 ; //<S2SV> # ifndef OPENSSL_NO_HEARTBEATS //<S2SV> s -> tlsext_heartbeat &= ~ ( SSL_DTLSEXT_HB_ENABLED | //<S2SV> SSL_DTLSEXT_HB_DONT_SEND_REQUESTS ) ; //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_EC //<S2SV> if ( s -> options & SSL_OP_SAFARI_ECDHE_ECDSA_BUG ) //<S2SV> ssl_check_for_safari ( s , pkt ) ; //<S2SV> # endif //<S2SV> OPENSSL_free ( s -> s3 -> tmp . peer_sigalgs ) ; //<S2SV> s -> s3 -> tmp . peer_sigalgs = NULL ; //<S2SV> s -> s3 -> flags &= ~ TLS1_FLAGS_ENCRYPT_THEN_MAC ; //<S2SV> # ifndef OPENSSL_NO_SRP //<S2SV> OPENSSL_free ( s -> srp_ctx . login ) ; //<S2SV> s -> srp_ctx . login = NULL ; //<S2SV> # endif //<S2SV> s -> srtp_profile = NULL ; //<S2SV> if ( PACKET_remaining ( pkt ) == 0 ) //<S2SV> goto ri_check ; //<S2SV> if ( ! PACKET_as_length_prefixed_2 ( pkt , & extensions ) ) //<S2SV> return 0 ; //<S2SV> if ( ! tls1_check_duplicate_extensions ( & extensions ) ) //<S2SV> return 0 ; //<S2SV> while ( PACKET_get_net_2 ( & extensions , & type ) ) { //<S2SV> PACKET extension ; //<S2SV> if ( ! PACKET_get_length_prefixed_2 ( & extensions , & extension ) ) //<S2SV> return 0 ; //<S2SV> if ( s -> tlsext_debug_cb ) //<S2SV> s -> tlsext_debug_cb ( s , 0 , type , PACKET_data ( & extension ) , //<S2SV> PACKET_remaining ( & extension ) , //<S2SV> s -> tlsext_debug_arg ) ; //<S2SV> if ( type == TLSEXT_TYPE_renegotiate ) { //<S2SV> if ( ! ssl_parse_clienthello_renegotiate_ext ( s , & extension , al ) ) //<S2SV> return 0 ; //<S2SV> renegotiate_seen = 1 ; //<S2SV> } else if ( s -> version == SSL3_VERSION ) { //<S2SV> } //<S2SV> else if ( type == TLSEXT_TYPE_server_name ) { //<S2SV> unsigned int servname_type ; //<S2SV> PACKET sni , hostname ; //<S2SV> if ( ! PACKET_as_length_prefixed_2 ( & extension , & sni ) //<S2SV> || PACKET_remaining ( & sni ) == 0 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! PACKET_get_1 ( & sni , & servname_type ) //<S2SV> || servname_type != TLSEXT_NAMETYPE_host_name //<S2SV> || ! PACKET_as_length_prefixed_2 ( & sni , & hostname ) ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! s -> hit ) { //<S2SV> if ( PACKET_remaining ( & hostname ) > TLSEXT_MAXLEN_host_name ) { //<S2SV> * al = TLS1_AD_UNRECOGNIZED_NAME ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( PACKET_contains_zero_byte ( & hostname ) ) { //<S2SV> * al = TLS1_AD_UNRECOGNIZED_NAME ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! PACKET_strndup ( & hostname , & s -> session -> tlsext_hostname ) ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> s -> servername_done = 1 ; //<S2SV> } else { //<S2SV> s -> servername_done = s -> session -> tlsext_hostname //<S2SV> && PACKET_equal ( & hostname , s -> session -> tlsext_hostname , //<S2SV> strlen ( s -> session -> tlsext_hostname ) ) ; //<S2SV> } //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_SRP //<S2SV> else if ( type == TLSEXT_TYPE_srp ) { //<S2SV> PACKET srp_I ; //<S2SV> if ( ! PACKET_as_length_prefixed_1 ( & extension , & srp_I ) ) //<S2SV> return 0 ; //<S2SV> if ( PACKET_contains_zero_byte ( & srp_I ) ) //<S2SV> return 0 ; //<S2SV> if ( ! PACKET_strndup ( & srp_I , & s -> srp_ctx . login ) ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_EC //<S2SV> else if ( type == TLSEXT_TYPE_ec_point_formats ) { //<S2SV> PACKET ec_point_format_list ; //<S2SV> if ( ! PACKET_as_length_prefixed_1 ( & extension , & ec_point_format_list ) //<S2SV> || PACKET_remaining ( & ec_point_format_list ) == 0 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! s -> hit ) { //<S2SV> if ( ! PACKET_memdup ( & ec_point_format_list , //<S2SV> & s -> session -> tlsext_ecpointformatlist , //<S2SV> & s -> //<S2SV> session -> tlsext_ecpointformatlist_length ) ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( type == TLSEXT_TYPE_elliptic_curves ) { //<S2SV> PACKET elliptic_curve_list ; //<S2SV> if ( ! PACKET_as_length_prefixed_2 ( & extension , & elliptic_curve_list ) //<S2SV> || PACKET_remaining ( & elliptic_curve_list ) == 0 //<S2SV> || ( PACKET_remaining ( & elliptic_curve_list ) % 2 ) != 0 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! s -> hit ) { //<S2SV> if ( ! PACKET_memdup ( & elliptic_curve_list , //<S2SV> & s -> session -> tlsext_ellipticcurvelist , //<S2SV> & s -> //<S2SV> session -> tlsext_ellipticcurvelist_length ) ) { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> else if ( type == TLSEXT_TYPE_session_ticket ) { //<S2SV> if ( s -> tls_session_ticket_ext_cb && //<S2SV> ! s -> tls_session_ticket_ext_cb ( s , PACKET_data ( & extension ) , //<S2SV> PACKET_remaining ( & extension ) , //<S2SV> s -> tls_session_ticket_ext_cb_arg ) ) //<S2SV> { //<S2SV> * al = TLS1_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } else if ( type == TLSEXT_TYPE_signature_algorithms ) { //<S2SV> PACKET supported_sig_algs ; //<S2SV> if ( ! PACKET_as_length_prefixed_2 ( & extension , & supported_sig_algs ) //<S2SV> || ( PACKET_remaining ( & supported_sig_algs ) % 2 ) != 0 //<S2SV> || PACKET_remaining ( & supported_sig_algs ) == 0 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! s -> hit ) { //<S2SV> if ( ! tls1_save_sigalgs ( s , PACKET_data ( & supported_sig_algs ) , //<S2SV> PACKET_remaining ( & supported_sig_algs ) ) ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( type == TLSEXT_TYPE_status_request ) { //<S2SV> if ( ! PACKET_get_1 ( & extension , //<S2SV> ( unsigned int * ) & s -> tlsext_status_type ) ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_OCSP //<S2SV> if ( s -> tlsext_status_type == TLSEXT_STATUSTYPE_ocsp ) { //<S2SV> const unsigned char * ext_data ; //<S2SV> PACKET responder_id_list , exts ; //<S2SV> if ( ! PACKET_get_length_prefixed_2 //<S2SV> ( & extension , & responder_id_list ) ) //<S2SV> return 0 ; //<S2SV> sk_OCSP_RESPID_pop_free ( s -> tlsext_ocsp_ids , //<S2SV> OCSP_RESPID_free ) ; //<S2SV> if ( PACKET_remaining ( & responder_id_list ) > 0 ) { //<S2SV> s -> tlsext_ocsp_ids = sk_OCSP_RESPID_new_null ( ) ; //<S2SV> if ( s -> tlsext_ocsp_ids == NULL ) { //<S2SV> * al = SSL_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } else { //<S2SV> s -> tlsext_ocsp_ids = NULL ; //<S2SV> } //<S2SV> while ( PACKET_remaining ( & responder_id_list ) > 0 ) { //<S2SV> OCSP_RESPID * id ; //<S2SV> PACKET responder_id ; //<S2SV> const unsigned char * id_data ; //<S2SV> if ( ! PACKET_get_length_prefixed_2 ( & responder_id_list , //<S2SV> & responder_id ) //<S2SV> || PACKET_remaining ( & responder_id ) == 0 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> id_data = PACKET_data ( & responder_id ) ; //<S2SV> id = d2i_OCSP_RESPID ( NULL , & id_data , //<S2SV> PACKET_remaining ( & responder_id ) ) ; //<S2SV> if ( id == NULL ) //<S2SV> return 0 ; //<S2SV> if ( id_data != PACKET_end ( & responder_id ) ) { //<S2SV> OCSP_RESPID_free ( id ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! sk_OCSP_RESPID_push ( s -> tlsext_ocsp_ids , id ) ) { //<S2SV> OCSP_RESPID_free ( id ) ; //<S2SV> * al = SSL_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! PACKET_as_length_prefixed_2 ( & extension , & exts ) ) //<S2SV> return 0 ; //<S2SV> if ( PACKET_remaining ( & exts ) > 0 ) { //<S2SV> ext_data = PACKET_data ( & exts ) ; //<S2SV> sk_X509_EXTENSION_pop_free ( s -> tlsext_ocsp_exts , //<S2SV> X509_EXTENSION_free ) ; //<S2SV> s -> tlsext_ocsp_exts = //<S2SV> d2i_X509_EXTENSIONS ( NULL , & ext_data , //<S2SV> PACKET_remaining ( & exts ) ) ; //<S2SV> if ( s -> tlsext_ocsp_exts == NULL //<S2SV> || ext_data != PACKET_end ( & exts ) ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } else //<S2SV> # endif //<S2SV> { //<S2SV> s -> tlsext_status_type = - 1 ; //<S2SV> } //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_HEARTBEATS //<S2SV> else if ( SSL_IS_DTLS ( s ) && type == TLSEXT_TYPE_heartbeat ) { //<S2SV> unsigned int hbtype ; //<S2SV> if ( ! PACKET_get_1 ( & extension , & hbtype ) //<S2SV> || PACKET_remaining ( & extension ) ) { //<S2SV> * al = SSL_AD_DECODE_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> switch ( hbtype ) { //<S2SV> case 0x01 : //<S2SV> s -> tlsext_heartbeat |= SSL_DTLSEXT_HB_ENABLED ; //<S2SV> break ; //<S2SV> case 0x02 : //<S2SV> s -> tlsext_heartbeat |= SSL_DTLSEXT_HB_ENABLED ; //<S2SV> s -> tlsext_heartbeat |= SSL_DTLSEXT_HB_DONT_SEND_REQUESTS ; //<S2SV> break ; //<S2SV> default : //<S2SV> * al = SSL_AD_ILLEGAL_PARAMETER ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_NEXTPROTONEG //<S2SV> else if ( type == TLSEXT_TYPE_next_proto_neg && //<S2SV> s -> s3 -> tmp . finish_md_len == 0 ) { //<S2SV> s -> s3 -> next_proto_neg_seen = 1 ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( type == TLSEXT_TYPE_application_layer_protocol_negotiation && //<S2SV> s -> s3 -> tmp . finish_md_len == 0 ) { //<S2SV> if ( ! tls1_alpn_handle_client_hello ( s , & extension , al ) ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> # ifndef OPENSSL_NO_SRTP //<S2SV> else if ( SSL_IS_DTLS ( s ) && SSL_get_srtp_profiles ( s ) //<S2SV> && type == TLSEXT_TYPE_use_srtp ) { //<S2SV> if ( ssl_parse_clienthello_use_srtp_ext ( s , & extension , al ) ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( type == TLSEXT_TYPE_encrypt_then_mac ) //<S2SV> s -> s3 -> flags |= TLS1_FLAGS_ENCRYPT_THEN_MAC ; //<S2SV> else if ( ! s -> hit ) { //<S2SV> if ( custom_ext_parse ( s , 1 , type , PACKET_data ( & extension ) , //<S2SV> PACKET_remaining ( & extension ) , al ) <= 0 ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( PACKET_remaining ( pkt ) != 0 ) { //<S2SV> * al = SSL_AD_INTERNAL_ERROR ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ri_check : //<S2SV> if ( ! renegotiate_seen && s -> renegotiate && //<S2SV> ! ( s -> options & SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION ) ) { //<S2SV> * al = SSL_AD_HANDSHAKE_FAILURE ; //<S2SV> SSLerr ( SSL_F_SSL_SCAN_CLIENTHELLO_TLSEXT , //<S2SV> SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 