int ssl3_get_new_session_ticket ( SSL * s ) //<S2SV> { //<S2SV> int ok , al , ret = 0 , ticklen ; //<S2SV> long n ; //<S2SV> const unsigned char * p ; //<S2SV> unsigned char * d ; //<S2SV> n = s -> method -> ssl_get_message ( s , //<S2SV> SSL3_ST_CR_SESSION_TICKET_A , //<S2SV> SSL3_ST_CR_SESSION_TICKET_B , //<S2SV> SSL3_MT_NEWSESSION_TICKET , 16384 , & ok ) ; //<S2SV> if ( ! ok ) //<S2SV> return ( ( int ) n ) ; //<S2SV> if ( n < 6 ) { //<S2SV> al = SSL_AD_DECODE_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET , SSL_R_LENGTH_MISMATCH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> p = d = ( unsigned char * ) s -> init_msg ; //<S2SV> if ( s -> session -> session_id_length > 0 ) { //<S2SV> int i = s -> session_ctx -> session_cache_mode ; //<S2SV> SSL_SESSION * new_sess ; //<S2SV> if ( i & SSL_SESS_CACHE_CLIENT ) { //<S2SV> if ( i & SSL_SESS_CACHE_NO_INTERNAL_STORE ) { //<S2SV> if ( s -> session_ctx -> remove_session_cb != NULL ) //<S2SV> s -> session_ctx -> remove_session_cb ( s -> session_ctx , //<S2SV> s -> session ) ; //<S2SV> } else { //<S2SV> SSL_CTX_remove_session ( s -> session_ctx , s -> session ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( new_sess = ssl_session_dup ( s -> session , 0 ) ) == 0 ) { //<S2SV> al = SSL_AD_INTERNAL_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> SSL_SESSION_free ( s -> session ) ; //<S2SV> s -> session = new_sess ; //<S2SV> } //<S2SV> n2l ( p , s -> session -> tlsext_tick_lifetime_hint ) ; //<S2SV> n2s ( p , ticklen ) ; //<S2SV> if ( ticklen + 6 != n ) { //<S2SV> al = SSL_AD_DECODE_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET , SSL_R_LENGTH_MISMATCH ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> OPENSSL_free ( s -> session -> tlsext_tick ) ; //<S2SV> s -> session -> tlsext_ticklen = 0 ; //<S2SV> s -> session -> tlsext_tick = OPENSSL_malloc ( ticklen ) ; //<S2SV> if ( ! s -> session -> tlsext_tick ) { //<S2SV> SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> memcpy ( s -> session -> tlsext_tick , p , ticklen ) ; //<S2SV> s -> session -> tlsext_ticklen = ticklen ; //<S2SV> EVP_Digest ( p , ticklen , //<S2SV> s -> session -> session_id , & s -> session -> session_id_length , //<S2SV> EVP_sha256 ( ) , NULL ) ; //<S2SV> ret = 1 ; //<S2SV> return ( ret ) ; //<S2SV> f_err : //<S2SV> ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; //<S2SV> err : //<S2SV> s -> state = SSL_ST_ERR ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> 