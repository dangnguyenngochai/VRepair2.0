int ASN1_item_verify ( const ASN1_ITEM * it , X509_ALGOR * a , //<S2SV> ASN1_BIT_STRING * signature , void * asn , EVP_PKEY * pkey ) //<S2SV> { //<S2SV> EVP_MD_CTX ctx ; //<S2SV> unsigned char * buf_in = NULL ; //<S2SV> int ret = - 1 , inl ; //<S2SV> int mdnid , pknid ; //<S2SV> if ( ! pkey ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ERR_R_PASSED_NULL_PARAMETER ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( signature -> type == V_ASN1_BIT_STRING && signature -> flags & 0x7 ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ASN1_R_INVALID_BIT_STRING_BITS_LEFT ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> EVP_MD_CTX_init ( & ctx ) ; //<S2SV> if ( ! OBJ_find_sigid_algs ( OBJ_obj2nid ( a -> algorithm ) , & mdnid , & pknid ) ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( mdnid == NID_undef ) //<S2SV> { //<S2SV> if ( ! pkey -> ameth || ! pkey -> ameth -> item_verify ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> ret = pkey -> ameth -> item_verify ( & ctx , it , asn , a , //<S2SV> signature , pkey ) ; //<S2SV> if ( ret != 2 ) //<S2SV> goto err ; //<S2SV> ret = - 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> const EVP_MD * type ; //<S2SV> type = EVP_get_digestbynid ( mdnid ) ; //<S2SV> if ( type == NULL ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( EVP_PKEY_type ( pknid ) != pkey -> ameth -> pkey_id ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ASN1_R_WRONG_PUBLIC_KEY_TYPE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> if ( ! EVP_DigestVerifyInit ( & ctx , NULL , type , NULL , pkey ) ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ERR_R_EVP_LIB ) ; //<S2SV> ret = 0 ; //<S2SV> goto err ; //<S2SV> } //<S2SV> } //<S2SV> inl = ASN1_item_i2d ( asn , & buf_in , it ) ; //<S2SV> if ( buf_in == NULL ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ERR_R_MALLOC_FAILURE ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> ret = EVP_DigestVerifyUpdate ( & ctx , buf_in , inl ) ; //<S2SV> OPENSSL_cleanse ( buf_in , ( unsigned int ) inl ) ; //<S2SV> OPENSSL_free ( buf_in ) ; //<S2SV> if ( ! ret ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ERR_R_EVP_LIB ) ; //<S2SV> goto err ; //<S2SV> } //<S2SV> ret = - 1 ; //<S2SV> if ( EVP_DigestVerifyFinal ( & ctx , signature -> data , //<S2SV> ( size_t ) signature -> length ) <= 0 ) //<S2SV> { //<S2SV> ASN1err ( ASN1_F_ASN1_ITEM_VERIFY , ERR_R_EVP_LIB ) ; //<S2SV> ret = 0 ; //<S2SV> goto err ; //<S2SV> } //<S2SV> ret = 1 ; //<S2SV> err : //<S2SV> EVP_MD_CTX_cleanup ( & ctx ) ; //<S2SV> return ( ret ) ; //<S2SV> } //<S2SV> 