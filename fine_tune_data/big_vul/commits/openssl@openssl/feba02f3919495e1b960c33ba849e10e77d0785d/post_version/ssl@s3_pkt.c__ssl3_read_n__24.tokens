int ssl3_read_n ( SSL * s , int n , int max , int extend ) //<S2SV> { //<S2SV> int i , len , left ; //<S2SV> long align = 0 ; //<S2SV> unsigned char * pkt ; //<S2SV> SSL3_BUFFER * rb ; //<S2SV> if ( n <= 0 ) return n ; //<S2SV> rb = & ( s -> s3 -> rbuf ) ; //<S2SV> if ( rb -> buf == NULL ) //<S2SV> if ( ! ssl3_setup_read_buffer ( s ) ) //<S2SV> return - 1 ; //<S2SV> left = rb -> left ; //<S2SV> # if defined ( SSL3_ALIGN_PAYLOAD ) && SSL3_ALIGN_PAYLOAD != 0 //<S2SV> align = ( long ) rb -> buf + SSL3_RT_HEADER_LENGTH ; //<S2SV> align = ( - align ) & ( SSL3_ALIGN_PAYLOAD - 1 ) ; //<S2SV> # endif //<S2SV> if ( ! extend ) //<S2SV> { //<S2SV> if ( left == 0 ) //<S2SV> rb -> offset = align ; //<S2SV> else if ( align != 0 && left >= SSL3_RT_HEADER_LENGTH ) //<S2SV> { //<S2SV> pkt = rb -> buf + rb -> offset ; //<S2SV> if ( pkt [ 0 ] == SSL3_RT_APPLICATION_DATA //<S2SV> && ( pkt [ 3 ] << 8 | pkt [ 4 ] ) >= 128 ) //<S2SV> { //<S2SV> memmove ( rb -> buf + align , pkt , left ) ; //<S2SV> rb -> offset = align ; //<S2SV> } //<S2SV> } //<S2SV> s -> packet = rb -> buf + rb -> offset ; //<S2SV> s -> packet_length = 0 ; //<S2SV> } //<S2SV> if ( SSL_IS_DTLS ( s ) ) //<S2SV> { //<S2SV> if ( left == 0 && extend ) //<S2SV> return 0 ; //<S2SV> if ( left > 0 && n > left ) //<S2SV> n = left ; //<S2SV> } //<S2SV> if ( left >= n ) //<S2SV> { //<S2SV> s -> packet_length += n ; //<S2SV> rb -> left = left - n ; //<S2SV> rb -> offset += n ; //<S2SV> return ( n ) ; //<S2SV> } //<S2SV> len = s -> packet_length ; //<S2SV> pkt = rb -> buf + align ; //<S2SV> if ( s -> packet != pkt ) //<S2SV> { //<S2SV> memmove ( pkt , s -> packet , len + left ) ; //<S2SV> s -> packet = pkt ; //<S2SV> rb -> offset = len + align ; //<S2SV> } //<S2SV> if ( n > ( int ) ( rb -> len - rb -> offset ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_READ_N , ERR_R_INTERNAL_ERROR ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! s -> read_ahead ) //<S2SV> max = n ; //<S2SV> else //<S2SV> { //<S2SV> if ( max < n ) //<S2SV> max = n ; //<S2SV> if ( max > ( int ) ( rb -> len - rb -> offset ) ) //<S2SV> max = rb -> len - rb -> offset ; //<S2SV> } //<S2SV> while ( left < n ) //<S2SV> { //<S2SV> clear_sys_error ( ) ; //<S2SV> if ( s -> rbio != NULL ) //<S2SV> { //<S2SV> s -> rwstate = SSL_READING ; //<S2SV> i = BIO_read ( s -> rbio , pkt + len + left , max - left ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_READ_N , SSL_R_READ_BIO_NOT_SET ) ; //<S2SV> i = - 1 ; //<S2SV> } //<S2SV> if ( i <= 0 ) //<S2SV> { //<S2SV> rb -> left = left ; //<S2SV> if ( s -> mode & SSL_MODE_RELEASE_BUFFERS && //<S2SV> ! SSL_IS_DTLS ( s ) ) //<S2SV> if ( len + left == 0 ) //<S2SV> ssl3_release_read_buffer ( s ) ; //<S2SV> return ( i ) ; //<S2SV> } //<S2SV> left += i ; //<S2SV> if ( SSL_IS_DTLS ( s ) ) //<S2SV> { //<S2SV> if ( n > left ) //<S2SV> n = left ; //<S2SV> } //<S2SV> } //<S2SV> rb -> offset += n ; //<S2SV> rb -> left = left - n ; //<S2SV> s -> packet_length += n ; //<S2SV> s -> rwstate = SSL_NOTHING ; //<S2SV> return ( n ) ; //<S2SV> } //<S2SV> 