int ssl3_get_cert_verify ( SSL * s ) //<S2SV> { //<S2SV> EVP_PKEY * pkey = NULL ; //<S2SV> unsigned char * p ; //<S2SV> int al , ok , ret = 0 ; //<S2SV> long n ; //<S2SV> int type = 0 , i , j ; //<S2SV> X509 * peer ; //<S2SV> const EVP_MD * md = NULL ; //<S2SV> EVP_MD_CTX mctx ; //<S2SV> EVP_MD_CTX_init ( & mctx ) ; //<S2SV> n = s -> method -> ssl_get_message ( s , //<S2SV> SSL3_ST_SR_CERT_VRFY_A , //<S2SV> SSL3_ST_SR_CERT_VRFY_B , //<S2SV> - 1 , //<S2SV> SSL3_RT_MAX_PLAIN_LENGTH , //<S2SV> & ok ) ; //<S2SV> if ( ! ok ) return ( ( int ) n ) ; //<S2SV> if ( s -> session -> peer != NULL ) //<S2SV> { //<S2SV> peer = s -> session -> peer ; //<S2SV> pkey = X509_get_pubkey ( peer ) ; //<S2SV> type = X509_certificate_type ( peer , pkey ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> peer = NULL ; //<S2SV> pkey = NULL ; //<S2SV> } //<S2SV> if ( s -> s3 -> tmp . message_type != SSL3_MT_CERTIFICATE_VERIFY ) //<S2SV> { //<S2SV> s -> s3 -> tmp . reuse_message = 1 ; //<S2SV> if ( ( peer != NULL ) && ( type & EVP_PKT_SIGN ) ) //<S2SV> { //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_MISSING_VERIFY_MESSAGE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> ret = 1 ; //<S2SV> goto end ; //<S2SV> } //<S2SV> if ( peer == NULL ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_NO_CLIENT_CERT_RECEIVED ) ; //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( ! ( type & EVP_PKT_SIGN ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE ) ; //<S2SV> al = SSL_AD_ILLEGAL_PARAMETER ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( s -> s3 -> change_cipher_spec ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_CCS_RECEIVED_EARLY ) ; //<S2SV> al = SSL_AD_UNEXPECTED_MESSAGE ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> p = ( unsigned char * ) s -> init_msg ; //<S2SV> if ( n == 64 && ( pkey -> type == NID_id_GostR3410_94 || //<S2SV> pkey -> type == NID_id_GostR3410_2001 ) ) //<S2SV> { //<S2SV> i = 64 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( SSL_USE_SIGALGS ( s ) ) //<S2SV> { //<S2SV> int rv = tls12_check_peer_sigalg ( & md , s , p , pkey ) ; //<S2SV> if ( rv == - 1 ) //<S2SV> { //<S2SV> al = SSL_AD_INTERNAL_ERROR ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> else if ( rv == 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECODE_ERROR ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # ifdef SSL_DEBUG //<S2SV> fprintf ( stderr , "USING<S2SV_blank>TLSv1.2<S2SV_blank>HASH<S2SV_blank>%s\\n" , EVP_MD_name ( md ) ) ; //<S2SV> # endif //<S2SV> p += 2 ; //<S2SV> n -= 2 ; //<S2SV> } //<S2SV> n2s ( p , i ) ; //<S2SV> n -= 2 ; //<S2SV> if ( i > n ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_LENGTH_MISMATCH ) ; //<S2SV> al = SSL_AD_DECODE_ERROR ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> j = EVP_PKEY_size ( pkey ) ; //<S2SV> if ( ( i > j ) || ( n > j ) || ( n <= 0 ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_WRONG_SIGNATURE_SIZE ) ; //<S2SV> al = SSL_AD_DECODE_ERROR ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( SSL_USE_SIGALGS ( s ) ) //<S2SV> { //<S2SV> long hdatalen = 0 ; //<S2SV> void * hdata ; //<S2SV> hdatalen = BIO_get_mem_data ( s -> s3 -> handshake_buffer , & hdata ) ; //<S2SV> if ( hdatalen <= 0 ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , ERR_R_INTERNAL_ERROR ) ; //<S2SV> al = SSL_AD_INTERNAL_ERROR ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> # ifdef SSL_DEBUG //<S2SV> fprintf ( stderr , "Using<S2SV_blank>TLS<S2SV_blank>1.2<S2SV_blank>with<S2SV_blank>client<S2SV_blank>verify<S2SV_blank>alg<S2SV_blank>%s\\n" , //<S2SV> EVP_MD_name ( md ) ) ; //<S2SV> # endif //<S2SV> if ( ! EVP_VerifyInit_ex ( & mctx , md , NULL ) //<S2SV> || ! EVP_VerifyUpdate ( & mctx , hdata , hdatalen ) ) //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , ERR_R_EVP_LIB ) ; //<S2SV> al = SSL_AD_INTERNAL_ERROR ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( EVP_VerifyFinal ( & mctx , p , i , pkey ) <= 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_BAD_SIGNATURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> # ifndef OPENSSL_NO_RSA //<S2SV> if ( pkey -> type == EVP_PKEY_RSA ) //<S2SV> { //<S2SV> i = RSA_verify ( NID_md5_sha1 , s -> s3 -> tmp . cert_verify_md , //<S2SV> MD5_DIGEST_LENGTH + SHA_DIGEST_LENGTH , p , i , //<S2SV> pkey -> pkey . rsa ) ; //<S2SV> if ( i < 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_BAD_RSA_DECRYPT ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> if ( i == 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_BAD_RSA_SIGNATURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_DSA //<S2SV> if ( pkey -> type == EVP_PKEY_DSA ) //<S2SV> { //<S2SV> j = DSA_verify ( pkey -> save_type , //<S2SV> & ( s -> s3 -> tmp . cert_verify_md [ MD5_DIGEST_LENGTH ] ) , //<S2SV> SHA_DIGEST_LENGTH , p , i , pkey -> pkey . dsa ) ; //<S2SV> if ( j <= 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , SSL_R_BAD_DSA_SIGNATURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> # ifndef OPENSSL_NO_ECDSA //<S2SV> if ( pkey -> type == EVP_PKEY_EC ) //<S2SV> { //<S2SV> j = ECDSA_verify ( pkey -> save_type , //<S2SV> & ( s -> s3 -> tmp . cert_verify_md [ MD5_DIGEST_LENGTH ] ) , //<S2SV> SHA_DIGEST_LENGTH , p , i , pkey -> pkey . ec ) ; //<S2SV> if ( j <= 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , //<S2SV> SSL_R_BAD_ECDSA_SIGNATURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> if ( pkey -> type == NID_id_GostR3410_94 || pkey -> type == NID_id_GostR3410_2001 ) //<S2SV> { unsigned char signature [ 64 ] ; //<S2SV> int idx ; //<S2SV> EVP_PKEY_CTX * pctx = EVP_PKEY_CTX_new ( pkey , NULL ) ; //<S2SV> EVP_PKEY_verify_init ( pctx ) ; //<S2SV> if ( i != 64 ) { //<S2SV> fprintf ( stderr , "GOST<S2SV_blank>signature<S2SV_blank>length<S2SV_blank>is<S2SV_blank>%d" , i ) ; //<S2SV> } //<S2SV> for ( idx = 0 ; idx < 64 ; idx ++ ) { //<S2SV> signature [ 63 - idx ] = p [ idx ] ; //<S2SV> } //<S2SV> j = EVP_PKEY_verify ( pctx , signature , 64 , s -> s3 -> tmp . cert_verify_md , 32 ) ; //<S2SV> EVP_PKEY_CTX_free ( pctx ) ; //<S2SV> if ( j <= 0 ) //<S2SV> { //<S2SV> al = SSL_AD_DECRYPT_ERROR ; //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , //<S2SV> SSL_R_BAD_ECDSA_SIGNATURE ) ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> SSLerr ( SSL_F_SSL3_GET_CERT_VERIFY , ERR_R_INTERNAL_ERROR ) ; //<S2SV> al = SSL_AD_UNSUPPORTED_CERTIFICATE ; //<S2SV> goto f_err ; //<S2SV> } //<S2SV> ret = 1 ; //<S2SV> if ( 0 ) //<S2SV> { //<S2SV> f_err : //<S2SV> ssl3_send_alert ( s , SSL3_AL_FATAL , al ) ; //<S2SV> } //<S2SV> end : //<S2SV> if ( s -> s3 -> handshake_buffer ) //<S2SV> { //<S2SV> BIO_free ( s -> s3 -> handshake_buffer ) ; //<S2SV> s -> s3 -> handshake_buffer = NULL ; //<S2SV> s -> s3 -> flags &= ~ TLS1_FLAGS_KEEP_HANDSHAKE ; //<S2SV> } //<S2SV> EVP_MD_CTX_cleanup ( & mctx ) ; //<S2SV> EVP_PKEY_free ( pkey ) ; //<S2SV> return ( ret ) ; //<S2SV> } //<S2SV> 