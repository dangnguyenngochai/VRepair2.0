int X509_cmp_time ( const ASN1_TIME * ctm , time_t * cmp_time ) //<S2SV> { //<S2SV> char * str ; //<S2SV> ASN1_TIME atm ; //<S2SV> long offset ; //<S2SV> char buff1 [ 24 ] , buff2 [ 24 ] , * p ; //<S2SV> int i , j ; //<S2SV> p = buff1 ; //<S2SV> i = ctm -> length ; //<S2SV> str = ( char * ) ctm -> data ; //<S2SV> if ( ctm -> type == V_ASN1_UTCTIME ) { //<S2SV> if ( ( i < 11 ) || ( i > 17 ) ) //<S2SV> return 0 ; //<S2SV> memcpy ( p , str , 10 ) ; //<S2SV> p += 10 ; //<S2SV> str += 10 ; //<S2SV> } else { //<S2SV> if ( i < 13 ) //<S2SV> return 0 ; //<S2SV> memcpy ( p , str , 12 ) ; //<S2SV> p += 12 ; //<S2SV> str += 12 ; //<S2SV> } //<S2SV> if ( ( * str == 'Z' ) || ( * str == '-' ) || ( * str == '+' ) ) { //<S2SV> * ( p ++ ) = '0' ; //<S2SV> * ( p ++ ) = '0' ; //<S2SV> } else { //<S2SV> * ( p ++ ) = * ( str ++ ) ; //<S2SV> * ( p ++ ) = * ( str ++ ) ; //<S2SV> if ( * str == '.' ) { //<S2SV> str ++ ; //<S2SV> while ( ( * str >= '0' ) && ( * str <= '9' ) ) //<S2SV> str ++ ; //<S2SV> } //<S2SV> } //<S2SV> * ( p ++ ) = 'Z' ; //<S2SV> * ( p ++ ) = '\\0' ; //<S2SV> if ( * str == 'Z' ) //<S2SV> offset = 0 ; //<S2SV> else { //<S2SV> if ( ( * str != '+' ) && ( * str != '-' ) ) //<S2SV> return 0 ; //<S2SV> offset = ( ( str [ 1 ] - '0' ) * 10 + ( str [ 2 ] - '0' ) ) * 60 ; //<S2SV> offset += ( str [ 3 ] - '0' ) * 10 + ( str [ 4 ] - '0' ) ; //<S2SV> if ( * str == '-' ) //<S2SV> offset = - offset ; //<S2SV> } //<S2SV> atm . type = ctm -> type ; //<S2SV> atm . flags = 0 ; //<S2SV> atm . length = sizeof ( buff2 ) ; //<S2SV> atm . data = ( unsigned char * ) buff2 ; //<S2SV> if ( X509_time_adj ( & atm , offset * 60 , cmp_time ) == NULL ) //<S2SV> return 0 ; //<S2SV> if ( ctm -> type == V_ASN1_UTCTIME ) { //<S2SV> i = ( buff1 [ 0 ] - '0' ) * 10 + ( buff1 [ 1 ] - '0' ) ; //<S2SV> if ( i < 50 ) //<S2SV> i += 100 ; //<S2SV> j = ( buff2 [ 0 ] - '0' ) * 10 + ( buff2 [ 1 ] - '0' ) ; //<S2SV> if ( j < 50 ) //<S2SV> j += 100 ; //<S2SV> if ( i < j ) //<S2SV> return - 1 ; //<S2SV> if ( i > j ) //<S2SV> return 1 ; //<S2SV> } //<S2SV> i = strcmp ( buff1 , buff2 ) ; //<S2SV> if ( i == 0 ) //<S2SV> return - 1 ; //<S2SV> else //<S2SV> return i ; //<S2SV> } //<S2SV> 