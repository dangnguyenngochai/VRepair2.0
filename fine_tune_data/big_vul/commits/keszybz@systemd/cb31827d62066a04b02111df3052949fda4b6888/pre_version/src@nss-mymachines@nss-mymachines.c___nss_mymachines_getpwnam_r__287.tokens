enum nss_status _nss_mymachines_getpwnam_r ( //<S2SV> const char * name , //<S2SV> struct passwd * pwd , //<S2SV> char * buffer , size_t buflen , //<S2SV> int * errnop ) { //<S2SV> _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; //<S2SV> _cleanup_bus_message_unref_ sd_bus_message * reply = NULL ; //<S2SV> _cleanup_bus_flush_close_unref_ sd_bus * bus = NULL ; //<S2SV> const char * p , * e , * machine ; //<S2SV> uint32_t mapped ; //<S2SV> uid_t uid ; //<S2SV> size_t l ; //<S2SV> int r ; //<S2SV> assert ( name ) ; //<S2SV> assert ( pwd ) ; //<S2SV> p = startswith ( name , "vu-" ) ; //<S2SV> if ( ! p ) //<S2SV> goto not_found ; //<S2SV> e = strrchr ( p , '-' ) ; //<S2SV> if ( ! e || e == p ) //<S2SV> goto not_found ; //<S2SV> r = parse_uid ( e + 1 , & uid ) ; //<S2SV> if ( r < 0 ) //<S2SV> goto not_found ; //<S2SV> machine = strndupa ( p , e - p ) ; //<S2SV> if ( ! machine_name_is_valid ( machine ) ) //<S2SV> goto not_found ; //<S2SV> r = sd_bus_open_system ( & bus ) ; //<S2SV> if ( r < 0 ) //<S2SV> goto fail ; //<S2SV> r = sd_bus_call_method ( bus , //<S2SV> "org.freedesktop.machine1" , //<S2SV> "/org/freedesktop/machine1" , //<S2SV> "org.freedesktop.machine1.Manager" , //<S2SV> "MapFromMachineUser" , //<S2SV> & error , //<S2SV> & reply , //<S2SV> "su" , //<S2SV> machine , ( uint32_t ) uid ) ; //<S2SV> if ( r < 0 ) { //<S2SV> if ( sd_bus_error_has_name ( & error , BUS_ERROR_NO_SUCH_USER_MAPPING ) ) //<S2SV> goto not_found ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> r = sd_bus_message_read ( reply , "u" , & mapped ) ; //<S2SV> if ( r < 0 ) //<S2SV> goto fail ; //<S2SV> l = strlen ( name ) ; //<S2SV> if ( buflen < l + 1 ) { //<S2SV> * errnop = ENOMEM ; //<S2SV> return NSS_STATUS_TRYAGAIN ; //<S2SV> } //<S2SV> memcpy ( buffer , name , l + 1 ) ; //<S2SV> pwd -> pw_name = buffer ; //<S2SV> pwd -> pw_uid = mapped ; //<S2SV> pwd -> pw_gid = 65534 ; //<S2SV> pwd -> pw_gecos = buffer ; //<S2SV> pwd -> pw_passwd = ( char * ) "*" ; //<S2SV> pwd -> pw_dir = ( char * ) "/" ; //<S2SV> pwd -> pw_shell = ( char * ) "/sbin/nologin" ; //<S2SV> * errnop = 0 ; //<S2SV> return NSS_STATUS_SUCCESS ; //<S2SV> not_found : //<S2SV> * errnop = 0 ; //<S2SV> return NSS_STATUS_NOTFOUND ; //<S2SV> fail : //<S2SV> * errnop = - r ; //<S2SV> return NSS_STATUS_UNAVAIL ; //<S2SV> } //<S2SV> 