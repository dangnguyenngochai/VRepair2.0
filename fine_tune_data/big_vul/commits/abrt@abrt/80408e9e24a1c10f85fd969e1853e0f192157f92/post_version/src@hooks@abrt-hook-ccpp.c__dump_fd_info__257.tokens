static bool dump_fd_info ( const char * dest_filename , char * source_filename , int source_base_ofs , uid_t uid , gid_t gid ) //<S2SV> { //<S2SV> FILE * fp = fopen ( dest_filename , "w" ) ; //<S2SV> if ( ! fp ) //<S2SV> return false ; //<S2SV> unsigned fd = 0 ; //<S2SV> while ( fd <= 99999 ) //<S2SV> { //<S2SV> sprintf ( source_filename + source_base_ofs , "fd/%u" , fd ) ; //<S2SV> char * name = malloc_readlink ( source_filename ) ; //<S2SV> if ( ! name ) //<S2SV> break ; //<S2SV> fprintf ( fp , "%u:%s\\n" , fd , name ) ; //<S2SV> free ( name ) ; //<S2SV> sprintf ( source_filename + source_base_ofs , "fdinfo/%u" , fd ) ; //<S2SV> fd ++ ; //<S2SV> FILE * in = fopen ( source_filename , "r" ) ; //<S2SV> if ( ! in ) //<S2SV> continue ; //<S2SV> char buf [ 128 ] ; //<S2SV> while ( fgets ( buf , sizeof ( buf ) - 1 , in ) ) //<S2SV> { //<S2SV> char * eol = strchrnul ( buf , '\\n' ) ; //<S2SV> eol [ 0 ] = '\\n' ; //<S2SV> eol [ 1 ] = '\\0' ; //<S2SV> fputs ( buf , fp ) ; //<S2SV> } //<S2SV> fclose ( in ) ; //<S2SV> } //<S2SV> const int dest_fd = fileno ( fp ) ; //<S2SV> if ( fchown ( dest_fd , uid , gid ) < 0 ) //<S2SV> { //<S2SV> perror_msg ( "Can\'t<S2SV_blank>change<S2SV_blank>\'%s\'<S2SV_blank>ownership<S2SV_blank>to<S2SV_blank>%lu:%lu" , dest_filename , ( long ) uid , ( long ) gid ) ; //<S2SV> fclose ( fp ) ; //<S2SV> unlink ( dest_filename ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> fclose ( fp ) ; //<S2SV> return true ; //<S2SV> } //<S2SV> 