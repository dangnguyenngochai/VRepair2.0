int main ( int argc , char * * argv ) //<S2SV> { //<S2SV> setlocale ( LC_ALL , "" ) ; //<S2SV> # if ENABLE_NLS //<S2SV> bindtextdomain ( PACKAGE , LOCALEDIR ) ; //<S2SV> textdomain ( PACKAGE ) ; //<S2SV> # endif //<S2SV> abrt_init ( argv ) ; //<S2SV> const char * program_usage_string = _ ( //<S2SV> "&<S2SV_blank>[-y]<S2SV_blank>[-i<S2SV_blank>BUILD_IDS_FILE|-i<S2SV_blank>-]<S2SV_blank>[-e<S2SV_blank>PATH[:PATH]...]\\n" //<S2SV> "\\t[-r<S2SV_blank>REPO]\\n" //<S2SV> "\\n" //<S2SV> "Installs<S2SV_blank>debuginfo<S2SV_blank>packages<S2SV_blank>for<S2SV_blank>all<S2SV_blank>build-ids<S2SV_blank>listed<S2SV_blank>in<S2SV_blank>BUILD_IDS_FILE<S2SV_blank>to\\n" //<S2SV> "ABRT<S2SV_blank>system<S2SV_blank>cache." //<S2SV> ) ; //<S2SV> enum { //<S2SV> OPT_v = 1 << 0 , //<S2SV> OPT_y = 1 << 1 , //<S2SV> OPT_i = 1 << 2 , //<S2SV> OPT_e = 1 << 3 , //<S2SV> OPT_r = 1 << 4 , //<S2SV> OPT_s = 1 << 5 , //<S2SV> } ; //<S2SV> const char * build_ids = "build_ids" ; //<S2SV> const char * exact = NULL ; //<S2SV> const char * repo = NULL ; //<S2SV> const char * size_mb = NULL ; //<S2SV> struct options program_options [ ] = { //<S2SV> OPT__VERBOSE ( & g_verbose ) , //<S2SV> OPT_BOOL ( 'y' , "yes" , NULL , _ ( "Noninteractive,<S2SV_blank>assume<S2SV_blank>\'Yes\'<S2SV_blank>to<S2SV_blank>all<S2SV_blank>questions" ) ) , //<S2SV> OPT_STRING ( 'i' , "ids" , & build_ids , "BUILD_IDS_FILE" , _ ( "-<S2SV_blank>means<S2SV_blank>STDIN,<S2SV_blank>default:<S2SV_blank>build_ids" ) ) , //<S2SV> OPT_STRING ( 'e' , "exact" , & exact , "EXACT" , _ ( "Download<S2SV_blank>only<S2SV_blank>specified<S2SV_blank>files" ) ) , //<S2SV> OPT_STRING ( 'r' , "repo" , & repo , "REPO" , _ ( "Pattern<S2SV_blank>to<S2SV_blank>use<S2SV_blank>when<S2SV_blank>searching<S2SV_blank>for<S2SV_blank>repos,<S2SV_blank>default:<S2SV_blank>*debug*" ) ) , //<S2SV> OPT_STRING ( 's' , "size_mb" , & size_mb , "SIZE_MB" , _ ( "Ignored<S2SV_blank>option" ) ) , //<S2SV> OPT_END ( ) //<S2SV> } ; //<S2SV> const unsigned opts = parse_opts ( argc , argv , program_options , program_usage_string ) ; //<S2SV> const gid_t egid = getegid ( ) ; //<S2SV> const gid_t rgid = getgid ( ) ; //<S2SV> const uid_t euid = geteuid ( ) ; //<S2SV> const gid_t ruid = getuid ( ) ; //<S2SV> char * build_ids_self_fd = NULL ; //<S2SV> if ( strcmp ( "-" , build_ids ) != 0 ) //<S2SV> { //<S2SV> if ( setregid ( egid , rgid ) < 0 ) //<S2SV> perror_msg_and_die ( "setregid(egid,<S2SV_blank>rgid)" ) ; //<S2SV> if ( setreuid ( euid , ruid ) < 0 ) //<S2SV> perror_msg_and_die ( "setreuid(euid,<S2SV_blank>ruid)" ) ; //<S2SV> const int build_ids_fd = open ( build_ids , O_RDONLY ) ; //<S2SV> if ( setregid ( rgid , egid ) < 0 ) //<S2SV> perror_msg_and_die ( "setregid(rgid,<S2SV_blank>egid)" ) ; //<S2SV> if ( setreuid ( ruid , euid ) < 0 ) //<S2SV> perror_msg_and_die ( "setreuid(ruid,<S2SV_blank>euid)" ) ; //<S2SV> if ( build_ids_fd < 0 ) //<S2SV> perror_msg_and_die ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>file<S2SV_blank>\'%s\'" , build_ids ) ; //<S2SV> build_ids_self_fd = xasprintf ( "/proc/self/fd/%d" , build_ids_fd ) ; //<S2SV> } //<S2SV> const char * args [ 11 ] ; //<S2SV> { //<S2SV> const char * verbs [ ] = { "" , "-v" , "-vv" , "-vvv" } ; //<S2SV> unsigned i = 0 ; //<S2SV> args [ i ++ ] = EXECUTABLE ; //<S2SV> args [ i ++ ] = "--ids" ; //<S2SV> args [ i ++ ] = ( build_ids_self_fd != NULL ) ? build_ids_self_fd : "-" ; //<S2SV> if ( g_verbose > 0 ) //<S2SV> args [ i ++ ] = verbs [ g_verbose <= 3 ? g_verbose : 3 ] ; //<S2SV> if ( ( opts & OPT_y ) ) //<S2SV> args [ i ++ ] = "-y" ; //<S2SV> if ( ( opts & OPT_e ) ) //<S2SV> { //<S2SV> args [ i ++ ] = "--exact" ; //<S2SV> args [ i ++ ] = exact ; //<S2SV> } //<S2SV> if ( ( opts & OPT_r ) ) //<S2SV> { //<S2SV> args [ i ++ ] = "--repo" ; //<S2SV> args [ i ++ ] = repo ; //<S2SV> } //<S2SV> args [ i ++ ] = "--" ; //<S2SV> args [ i ] = NULL ; //<S2SV> } //<S2SV> if ( egid != rgid ) //<S2SV> IGNORE_RESULT ( setregid ( egid , egid ) ) ; //<S2SV> if ( euid != ruid ) //<S2SV> { //<S2SV> IGNORE_RESULT ( setreuid ( euid , euid ) ) ; //<S2SV> # if 1 //<S2SV> static const char * whitelist [ ] = { //<S2SV> "REPORT_CLIENT_SLAVE" , //<S2SV> "LANG" , //<S2SV> } ; //<S2SV> const size_t wlsize = sizeof ( whitelist ) / sizeof ( char * ) ; //<S2SV> char * setlist [ sizeof ( whitelist ) / sizeof ( char * ) ] = { 0 } ; //<S2SV> char * p = NULL ; //<S2SV> for ( size_t i = 0 ; i < wlsize ; i ++ ) //<S2SV> if ( ( p = getenv ( whitelist [ i ] ) ) != NULL ) //<S2SV> setlist [ i ] = xstrdup ( p ) ; //<S2SV> clearenv ( ) ; //<S2SV> for ( size_t i = 0 ; i < wlsize ; i ++ ) //<S2SV> if ( setlist [ i ] != NULL ) //<S2SV> { //<S2SV> xsetenv ( whitelist [ i ] , setlist [ i ] ) ; //<S2SV> free ( setlist [ i ] ) ; //<S2SV> } //<S2SV> # else //<S2SV> static const char forbid [ ] = //<S2SV> "LD_LIBRARY_PATH" "\\0" //<S2SV> "LD_PRELOAD" "\\0" //<S2SV> "LD_TRACE_LOADED_OBJECTS" "\\0" //<S2SV> "LD_BIND_NOW" "\\0" //<S2SV> "LD_AOUT_LIBRARY_PATH" "\\0" //<S2SV> "LD_AOUT_PRELOAD" "\\0" //<S2SV> "LD_NOWARN" "\\0" //<S2SV> "LD_KEEPDIR" "\\0" //<S2SV> ; //<S2SV> const char * p = forbid ; //<S2SV> do { //<S2SV> unsetenv ( p ) ; //<S2SV> p += strlen ( p ) + 1 ; //<S2SV> } while ( * p ) ; //<S2SV> # endif //<S2SV> char path_env [ ] = "PATH=/usr/sbin:/sbin:/usr/bin:/bin:" BIN_DIR ":" SBIN_DIR ; //<S2SV> if ( euid != 0 ) //<S2SV> strcpy ( path_env , "PATH=/usr/bin:/bin:" BIN_DIR ) ; //<S2SV> putenv ( path_env ) ; //<S2SV> umask ( 0022 ) ; //<S2SV> } //<S2SV> execvp ( EXECUTABLE , ( char * * ) args ) ; //<S2SV> error_msg_and_die ( "Can\'t<S2SV_blank>execute<S2SV_blank>%s" , EXECUTABLE ) ; //<S2SV> } //<S2SV> 