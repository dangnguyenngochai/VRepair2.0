static void save_bt_to_dump_dir ( const char * bt , const char * exe , const char * reason ) //<S2SV> { //<S2SV> time_t t = time ( NULL ) ; //<S2SV> const char * iso_date = iso_date_string ( & t ) ; //<S2SV> uid_t my_euid = ( uid_t ) - 1L ; //<S2SV> mode_t mode = DEFAULT_DUMP_DIR_MODE | S_IROTH ; //<S2SV> if ( ! ( g_opts & OPT_x ) ) //<S2SV> { //<S2SV> mode = DEFAULT_DUMP_DIR_MODE ; //<S2SV> my_euid = geteuid ( ) ; //<S2SV> } //<S2SV> pid_t my_pid = getpid ( ) ; //<S2SV> char base [ sizeof ( "xorg-YYYY-MM-DD-hh:mm:ss-%lu-%lu" ) + 2 * sizeof ( long ) * 3 ] ; //<S2SV> sprintf ( base , "xorg-%s-%lu-%u" , iso_date , ( long ) my_pid , g_bt_count ) ; //<S2SV> char * path = concat_path_file ( debug_dumps_dir , base ) ; //<S2SV> struct dump_dir * dd = dd_create ( path , my_euid , mode ) ; //<S2SV> if ( dd ) //<S2SV> { //<S2SV> dd_create_basic_files ( dd , my_euid , NULL ) ; //<S2SV> dd_save_text ( dd , FILENAME_ABRT_VERSION , VERSION ) ; //<S2SV> dd_save_text ( dd , FILENAME_ANALYZER , "xorg" ) ; //<S2SV> dd_save_text ( dd , FILENAME_TYPE , "xorg" ) ; //<S2SV> dd_save_text ( dd , FILENAME_REASON , reason ) ; //<S2SV> dd_save_text ( dd , FILENAME_BACKTRACE , bt ) ; //<S2SV> if ( ! exe ) //<S2SV> { //<S2SV> exe = "/usr/bin/X" ; //<S2SV> if ( access ( "/usr/bin/Xorg" , X_OK ) == 0 ) //<S2SV> exe = "/usr/bin/Xorg" ; //<S2SV> } //<S2SV> dd_save_text ( dd , FILENAME_EXECUTABLE , exe ) ; //<S2SV> dd_close ( dd ) ; //<S2SV> notify_new_path ( path ) ; //<S2SV> } //<S2SV> free ( path ) ; //<S2SV> } //<S2SV> 