static unsigned create_oops_dump_dirs ( GList * oops_list , unsigned oops_cnt ) //<S2SV> { //<S2SV> unsigned countdown = MAX_DUMPED_DD_COUNT ; //<S2SV> log_notice ( "Saving<S2SV_blank>%u<S2SV_blank>oopses<S2SV_blank>as<S2SV_blank>problem<S2SV_blank>dirs" , oops_cnt >= countdown ? countdown : oops_cnt ) ; //<S2SV> char * cmdline_str = xmalloc_fopen_fgetline_fclose ( "/proc/cmdline" ) ; //<S2SV> char * fips_enabled = xmalloc_fopen_fgetline_fclose ( "/proc/sys/crypto/fips_enabled" ) ; //<S2SV> char * proc_modules = xmalloc_open_read_close ( "/proc/modules" , NULL ) ; //<S2SV> char * suspend_stats = xmalloc_open_read_close ( "/sys/kernel/debug/suspend_stats" , NULL ) ; //<S2SV> time_t t = time ( NULL ) ; //<S2SV> const char * iso_date = iso_date_string ( & t ) ; //<S2SV> uid_t my_euid = ( uid_t ) - 1L ; //<S2SV> mode_t mode = DEFAULT_DUMP_DIR_MODE | S_IROTH ; //<S2SV> if ( ! world_readable_dump ) //<S2SV> { //<S2SV> mode = DEFAULT_DUMP_DIR_MODE ; //<S2SV> my_euid = geteuid ( ) ; //<S2SV> } //<S2SV> if ( g_settings_privatereports ) //<S2SV> { //<S2SV> if ( world_readable_dump ) //<S2SV> log ( "Not<S2SV_blank>going<S2SV_blank>to<S2SV_blank>make<S2SV_blank>dump<S2SV_blank>directories<S2SV_blank>world<S2SV_blank>readable<S2SV_blank>because<S2SV_blank>PrivateReports<S2SV_blank>is<S2SV_blank>on" ) ; //<S2SV> mode = DEFAULT_DUMP_DIR_MODE ; //<S2SV> my_euid = 0 ; //<S2SV> } //<S2SV> pid_t my_pid = getpid ( ) ; //<S2SV> unsigned idx = 0 ; //<S2SV> unsigned errors = 0 ; //<S2SV> while ( idx < oops_cnt ) //<S2SV> { //<S2SV> char base [ sizeof ( "oops-YYYY-MM-DD-hh:mm:ss-%lu-%lu" ) + 2 * sizeof ( long ) * 3 ] ; //<S2SV> sprintf ( base , "oops-%s-%lu-%lu" , iso_date , ( long ) my_pid , ( long ) idx ) ; //<S2SV> char * path = concat_path_file ( debug_dumps_dir , base ) ; //<S2SV> struct dump_dir * dd = dd_create ( path , my_euid , mode ) ; //<S2SV> if ( dd ) //<S2SV> { //<S2SV> dd_create_basic_files ( dd , my_euid , NULL ) ; //<S2SV> save_oops_data_in_dump_dir ( dd , ( char * ) g_list_nth_data ( oops_list , idx ++ ) , proc_modules ) ; //<S2SV> dd_save_text ( dd , FILENAME_ABRT_VERSION , VERSION ) ; //<S2SV> dd_save_text ( dd , FILENAME_ANALYZER , "Kerneloops" ) ; //<S2SV> dd_save_text ( dd , FILENAME_TYPE , "Kerneloops" ) ; //<S2SV> if ( cmdline_str ) //<S2SV> dd_save_text ( dd , FILENAME_CMDLINE , cmdline_str ) ; //<S2SV> if ( proc_modules ) //<S2SV> dd_save_text ( dd , "proc_modules" , proc_modules ) ; //<S2SV> if ( fips_enabled && strcmp ( fips_enabled , "0" ) != 0 ) //<S2SV> dd_save_text ( dd , "fips_enabled" , fips_enabled ) ; //<S2SV> if ( suspend_stats ) //<S2SV> dd_save_text ( dd , "suspend_stats" , suspend_stats ) ; //<S2SV> dd_close ( dd ) ; //<S2SV> notify_new_path ( path ) ; //<S2SV> } //<S2SV> else //<S2SV> errors ++ ; //<S2SV> free ( path ) ; //<S2SV> if ( -- countdown == 0 ) //<S2SV> break ; //<S2SV> if ( dd && throttle_dd_creation ) //<S2SV> sleep ( 1 ) ; //<S2SV> } //<S2SV> free ( cmdline_str ) ; //<S2SV> free ( proc_modules ) ; //<S2SV> free ( fips_enabled ) ; //<S2SV> free ( suspend_stats ) ; //<S2SV> return errors ; //<S2SV> } //<S2SV> 