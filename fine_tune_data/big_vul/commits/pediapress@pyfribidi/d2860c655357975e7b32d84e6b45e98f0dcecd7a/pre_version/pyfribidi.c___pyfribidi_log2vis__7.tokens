static PyObject * //<S2SV> _pyfribidi_log2vis ( PyObject * self , PyObject * args , PyObject * kw ) //<S2SV> { //<S2SV> PyObject * logical = NULL ; //<S2SV> FriBidiParType base = FRIBIDI_TYPE_RTL ; //<S2SV> const char * encoding = "utf-8" ; //<S2SV> int clean = 0 ; //<S2SV> int reordernsm = 1 ; //<S2SV> static char * kwargs [ ] = //<S2SV> { "logical" , "base_direction" , "encoding" , "clean" , "reordernsm" , NULL } ; //<S2SV> if ( ! PyArg_ParseTupleAndKeywords ( args , kw , "O|isii" , kwargs , //<S2SV> & logical , & base , & encoding , & clean , & reordernsm ) ) //<S2SV> return NULL ; //<S2SV> if ( ! ( base == FRIBIDI_TYPE_RTL || //<S2SV> base == FRIBIDI_TYPE_LTR || base == FRIBIDI_TYPE_ON ) ) //<S2SV> return PyErr_Format ( PyExc_ValueError , //<S2SV> "invalid<S2SV_blank>value<S2SV_blank>%d:<S2SV_blank>use<S2SV_blank>either<S2SV_blank>RTL,<S2SV_blank>LTR<S2SV_blank>or<S2SV_blank>ON" , //<S2SV> base ) ; //<S2SV> if ( PyUnicode_Check ( logical ) ) //<S2SV> return log2vis_unicode ( logical , base , clean , reordernsm ) ; //<S2SV> else if ( PyString_Check ( logical ) ) //<S2SV> return log2vis_encoded_string ( logical , encoding , base , clean , reordernsm ) ; //<S2SV> else //<S2SV> return PyErr_Format ( PyExc_TypeError , //<S2SV> "expected<S2SV_blank>unicode<S2SV_blank>or<S2SV_blank>str,<S2SV_blank>not<S2SV_blank>%s" , //<S2SV> logical -> ob_type -> tp_name ) ; //<S2SV> } //<S2SV> 