static OPJ_BOOL opj_t2_encode_packet ( OPJ_UINT32 tileno , //<S2SV> opj_tcd_tile_t * tile , //<S2SV> opj_tcp_t * tcp , //<S2SV> opj_pi_iterator_t * pi , //<S2SV> OPJ_BYTE * dest , //<S2SV> OPJ_UINT32 * p_data_written , //<S2SV> OPJ_UINT32 length , //<S2SV> opj_codestream_info_t * cstr_info , //<S2SV> J2K_T2_MODE p_t2_mode , //<S2SV> opj_event_mgr_t * p_manager ) //<S2SV> { //<S2SV> OPJ_UINT32 bandno , cblkno ; //<S2SV> OPJ_BYTE * c = dest ; //<S2SV> OPJ_UINT32 l_nb_bytes ; //<S2SV> OPJ_UINT32 compno = pi -> compno ; //<S2SV> OPJ_UINT32 resno = pi -> resno ; //<S2SV> OPJ_UINT32 precno = pi -> precno ; //<S2SV> OPJ_UINT32 layno = pi -> layno ; //<S2SV> OPJ_UINT32 l_nb_blocks ; //<S2SV> opj_tcd_band_t * band = 00 ; //<S2SV> opj_tcd_cblk_enc_t * cblk = 00 ; //<S2SV> opj_tcd_pass_t * pass = 00 ; //<S2SV> opj_tcd_tilecomp_t * tilec = & tile -> comps [ compno ] ; //<S2SV> opj_tcd_resolution_t * res = & tilec -> resolutions [ resno ] ; //<S2SV> opj_bio_t * bio = 00 ; //<S2SV> OPJ_BOOL packet_empty = OPJ_TRUE ; //<S2SV> if ( tcp -> csty & J2K_CP_CSTY_SOP ) { //<S2SV> c [ 0 ] = 255 ; //<S2SV> c [ 1 ] = 145 ; //<S2SV> c [ 2 ] = 0 ; //<S2SV> c [ 3 ] = 4 ; //<S2SV> # if 0 //<S2SV> c [ 4 ] = ( tile -> packno % 65536 ) / 256 ; //<S2SV> c [ 5 ] = ( tile -> packno % 65536 ) % 256 ; //<S2SV> # else //<S2SV> c [ 4 ] = ( tile -> packno >> 8 ) & 0xff ; //<S2SV> c [ 5 ] = tile -> packno & 0xff ; //<S2SV> # endif //<S2SV> c += 6 ; //<S2SV> length -= 6 ; //<S2SV> } //<S2SV> if ( ! layno ) { //<S2SV> band = res -> bands ; //<S2SV> for ( bandno = 0 ; bandno < res -> numbands ; ++ bandno , ++ band ) { //<S2SV> opj_tcd_precinct_t * prc ; //<S2SV> if ( opj_tcd_is_band_empty ( band ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> prc = & band -> precincts [ precno ] ; //<S2SV> opj_tgt_reset ( prc -> incltree ) ; //<S2SV> opj_tgt_reset ( prc -> imsbtree ) ; //<S2SV> l_nb_blocks = prc -> cw * prc -> ch ; //<S2SV> for ( cblkno = 0 ; cblkno < l_nb_blocks ; ++ cblkno ) { //<S2SV> cblk = & prc -> cblks . enc [ cblkno ] ; //<S2SV> cblk -> numpasses = 0 ; //<S2SV> opj_tgt_setvalue ( prc -> imsbtree , cblkno , band -> numbps - ( OPJ_INT32 ) cblk -> numbps ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> bio = opj_bio_create ( ) ; //<S2SV> if ( ! bio ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> opj_bio_init_enc ( bio , c , length ) ; //<S2SV> band = res -> bands ; //<S2SV> for ( bandno = 0 ; bandno < res -> numbands ; ++ bandno , ++ band ) { //<S2SV> opj_tcd_precinct_t * prc ; //<S2SV> if ( opj_tcd_is_band_empty ( band ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> prc = & band -> precincts [ precno ] ; //<S2SV> l_nb_blocks = prc -> cw * prc -> ch ; //<S2SV> cblk = prc -> cblks . enc ; //<S2SV> for ( cblkno = 0 ; cblkno < l_nb_blocks ; cblkno ++ , ++ cblk ) { //<S2SV> opj_tcd_layer_t * layer = & cblk -> layers [ layno ] ; //<S2SV> if ( ! layer -> numpasses ) { //<S2SV> continue ; //<S2SV> } //<S2SV> packet_empty = OPJ_FALSE ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! packet_empty ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> opj_bio_write ( bio , packet_empty ? 0 : 1 , 1 ) ; //<S2SV> band = res -> bands ; //<S2SV> for ( bandno = 0 ; ! packet_empty && //<S2SV> bandno < res -> numbands ; ++ bandno , ++ band ) { //<S2SV> opj_tcd_precinct_t * prc ; //<S2SV> if ( opj_tcd_is_band_empty ( band ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> prc = & band -> precincts [ precno ] ; //<S2SV> l_nb_blocks = prc -> cw * prc -> ch ; //<S2SV> cblk = prc -> cblks . enc ; //<S2SV> for ( cblkno = 0 ; cblkno < l_nb_blocks ; ++ cblkno ) { //<S2SV> opj_tcd_layer_t * layer = & cblk -> layers [ layno ] ; //<S2SV> if ( ! cblk -> numpasses && layer -> numpasses ) { //<S2SV> opj_tgt_setvalue ( prc -> incltree , cblkno , ( OPJ_INT32 ) layno ) ; //<S2SV> } //<S2SV> ++ cblk ; //<S2SV> } //<S2SV> cblk = prc -> cblks . enc ; //<S2SV> for ( cblkno = 0 ; cblkno < l_nb_blocks ; cblkno ++ ) { //<S2SV> opj_tcd_layer_t * layer = & cblk -> layers [ layno ] ; //<S2SV> OPJ_UINT32 increment = 0 ; //<S2SV> OPJ_UINT32 nump = 0 ; //<S2SV> OPJ_UINT32 len = 0 , passno ; //<S2SV> OPJ_UINT32 l_nb_passes ; //<S2SV> if ( ! cblk -> numpasses ) { //<S2SV> opj_tgt_encode ( bio , prc -> incltree , cblkno , ( OPJ_INT32 ) ( layno + 1 ) ) ; //<S2SV> } else { //<S2SV> opj_bio_write ( bio , layer -> numpasses != 0 , 1 ) ; //<S2SV> } //<S2SV> if ( ! layer -> numpasses ) { //<S2SV> ++ cblk ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! cblk -> numpasses ) { //<S2SV> cblk -> numlenbits = 3 ; //<S2SV> opj_tgt_encode ( bio , prc -> imsbtree , cblkno , 999 ) ; //<S2SV> } //<S2SV> opj_t2_putnumpasses ( bio , layer -> numpasses ) ; //<S2SV> l_nb_passes = cblk -> numpasses + layer -> numpasses ; //<S2SV> pass = cblk -> passes + cblk -> numpasses ; //<S2SV> for ( passno = cblk -> numpasses ; passno < l_nb_passes ; ++ passno ) { //<S2SV> ++ nump ; //<S2SV> len += pass -> len ; //<S2SV> if ( pass -> term || passno == ( cblk -> numpasses + layer -> numpasses ) - 1 ) { //<S2SV> increment = ( OPJ_UINT32 ) opj_int_max ( ( OPJ_INT32 ) increment , //<S2SV> opj_int_floorlog2 ( ( OPJ_INT32 ) len ) + 1 //<S2SV> - ( ( OPJ_INT32 ) cblk -> numlenbits + opj_int_floorlog2 ( ( OPJ_INT32 ) nump ) ) ) ; //<S2SV> len = 0 ; //<S2SV> nump = 0 ; //<S2SV> } //<S2SV> ++ pass ; //<S2SV> } //<S2SV> opj_t2_putcommacode ( bio , ( OPJ_INT32 ) increment ) ; //<S2SV> cblk -> numlenbits += increment ; //<S2SV> pass = cblk -> passes + cblk -> numpasses ; //<S2SV> for ( passno = cblk -> numpasses ; passno < l_nb_passes ; ++ passno ) { //<S2SV> nump ++ ; //<S2SV> len += pass -> len ; //<S2SV> if ( pass -> term || passno == ( cblk -> numpasses + layer -> numpasses ) - 1 ) { //<S2SV> opj_bio_write ( bio , ( OPJ_UINT32 ) len , //<S2SV> cblk -> numlenbits + ( OPJ_UINT32 ) opj_int_floorlog2 ( ( OPJ_INT32 ) nump ) ) ; //<S2SV> len = 0 ; //<S2SV> nump = 0 ; //<S2SV> } //<S2SV> ++ pass ; //<S2SV> } //<S2SV> ++ cblk ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! opj_bio_flush ( bio ) ) { //<S2SV> opj_bio_destroy ( bio ) ; //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> l_nb_bytes = ( OPJ_UINT32 ) opj_bio_numbytes ( bio ) ; //<S2SV> c += l_nb_bytes ; //<S2SV> length -= l_nb_bytes ; //<S2SV> opj_bio_destroy ( bio ) ; //<S2SV> if ( tcp -> csty & J2K_CP_CSTY_EPH ) { //<S2SV> c [ 0 ] = 255 ; //<S2SV> c [ 1 ] = 146 ; //<S2SV> c += 2 ; //<S2SV> length -= 2 ; //<S2SV> } //<S2SV> if ( cstr_info && cstr_info -> index_write ) { //<S2SV> opj_packet_info_t * info_PK = & cstr_info -> tile [ tileno ] . packet [ cstr_info -> packno ] ; //<S2SV> info_PK -> end_ph_pos = ( OPJ_INT32 ) ( c - dest ) ; //<S2SV> } //<S2SV> band = res -> bands ; //<S2SV> for ( bandno = 0 ; ! packet_empty && bandno < res -> numbands ; bandno ++ , ++ band ) { //<S2SV> opj_tcd_precinct_t * prc ; //<S2SV> if ( opj_tcd_is_band_empty ( band ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> prc = & band -> precincts [ precno ] ; //<S2SV> l_nb_blocks = prc -> cw * prc -> ch ; //<S2SV> cblk = prc -> cblks . enc ; //<S2SV> for ( cblkno = 0 ; cblkno < l_nb_blocks ; ++ cblkno ) { //<S2SV> opj_tcd_layer_t * layer = & cblk -> layers [ layno ] ; //<S2SV> if ( ! layer -> numpasses ) { //<S2SV> ++ cblk ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( layer -> len > length ) { //<S2SV> if ( p_t2_mode == FINAL_PASS ) { //<S2SV> opj_event_msg ( p_manager , EVT_ERROR , //<S2SV> "opj_t2_encode_packet():<S2SV_blank>only<S2SV_blank>%u<S2SV_blank>bytes<S2SV_blank>remaining<S2SV_blank>in<S2SV_blank>" //<S2SV> "output<S2SV_blank>buffer.<S2SV_blank>%u<S2SV_blank>needed.\\n" , //<S2SV> length , layer -> len ) ; //<S2SV> } //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> memcpy ( c , layer -> data , layer -> len ) ; //<S2SV> cblk -> numpasses += layer -> numpasses ; //<S2SV> c += layer -> len ; //<S2SV> length -= layer -> len ; //<S2SV> if ( cstr_info && cstr_info -> index_write ) { //<S2SV> opj_packet_info_t * info_PK = & cstr_info -> tile [ tileno ] . packet [ cstr_info -> packno ] ; //<S2SV> info_PK -> disto += layer -> disto ; //<S2SV> if ( cstr_info -> D_max < info_PK -> disto ) { //<S2SV> cstr_info -> D_max = info_PK -> disto ; //<S2SV> } //<S2SV> } //<S2SV> ++ cblk ; //<S2SV> } //<S2SV> } //<S2SV> assert ( c >= dest ) ; //<S2SV> * p_data_written += ( OPJ_UINT32 ) ( c - dest ) ; //<S2SV> return OPJ_TRUE ; //<S2SV> } //<S2SV> 