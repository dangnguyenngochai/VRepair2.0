void opj_get_all_encoding_parameters ( const opj_image_t * p_image , //<S2SV> const opj_cp_t * p_cp , //<S2SV> OPJ_UINT32 tileno , //<S2SV> OPJ_INT32 * p_tx0 , //<S2SV> OPJ_INT32 * p_tx1 , //<S2SV> OPJ_INT32 * p_ty0 , //<S2SV> OPJ_INT32 * p_ty1 , //<S2SV> OPJ_UINT32 * p_dx_min , //<S2SV> OPJ_UINT32 * p_dy_min , //<S2SV> OPJ_UINT32 * p_max_prec , //<S2SV> OPJ_UINT32 * p_max_res , //<S2SV> OPJ_UINT32 * * p_resolutions ) //<S2SV> { //<S2SV> OPJ_UINT32 compno , resno ; //<S2SV> const opj_tcp_t * tcp = 00 ; //<S2SV> const opj_tccp_t * l_tccp = 00 ; //<S2SV> const opj_image_comp_t * l_img_comp = 00 ; //<S2SV> OPJ_UINT32 * lResolutionPtr ; //<S2SV> OPJ_UINT32 p , q ; //<S2SV> assert ( p_cp != 00 ) ; //<S2SV> assert ( p_image != 00 ) ; //<S2SV> assert ( tileno < p_cp -> tw * p_cp -> th ) ; //<S2SV> tcp = & p_cp -> tcps [ tileno ] ; //<S2SV> l_tccp = tcp -> tccps ; //<S2SV> l_img_comp = p_image -> comps ; //<S2SV> p = tileno % p_cp -> tw ; //<S2SV> q = tileno / p_cp -> tw ; //<S2SV> * p_tx0 = ( OPJ_INT32 ) opj_uint_max ( p_cp -> tx0 + p * p_cp -> tdx , p_image -> x0 ) ; //<S2SV> * p_tx1 = ( OPJ_INT32 ) opj_uint_min ( p_cp -> tx0 + ( p + 1 ) * p_cp -> tdx , p_image -> x1 ) ; //<S2SV> * p_ty0 = ( OPJ_INT32 ) opj_uint_max ( p_cp -> ty0 + q * p_cp -> tdy , p_image -> y0 ) ; //<S2SV> * p_ty1 = ( OPJ_INT32 ) opj_uint_min ( p_cp -> ty0 + ( q + 1 ) * p_cp -> tdy , p_image -> y1 ) ; //<S2SV> * p_max_prec = 0 ; //<S2SV> * p_max_res = 0 ; //<S2SV> * p_dx_min = 0x7fffffff ; //<S2SV> * p_dy_min = 0x7fffffff ; //<S2SV> for ( compno = 0 ; compno < p_image -> numcomps ; ++ compno ) { //<S2SV> OPJ_UINT32 l_level_no ; //<S2SV> OPJ_INT32 l_rx0 , l_ry0 , l_rx1 , l_ry1 ; //<S2SV> OPJ_INT32 l_px0 , l_py0 , l_px1 , py1 ; //<S2SV> OPJ_UINT32 l_product ; //<S2SV> OPJ_INT32 l_tcx0 , l_tcy0 , l_tcx1 , l_tcy1 ; //<S2SV> OPJ_UINT32 l_pdx , l_pdy , l_pw , l_ph ; //<S2SV> lResolutionPtr = p_resolutions [ compno ] ; //<S2SV> l_tcx0 = opj_int_ceildiv ( * p_tx0 , ( OPJ_INT32 ) l_img_comp -> dx ) ; //<S2SV> l_tcy0 = opj_int_ceildiv ( * p_ty0 , ( OPJ_INT32 ) l_img_comp -> dy ) ; //<S2SV> l_tcx1 = opj_int_ceildiv ( * p_tx1 , ( OPJ_INT32 ) l_img_comp -> dx ) ; //<S2SV> l_tcy1 = opj_int_ceildiv ( * p_ty1 , ( OPJ_INT32 ) l_img_comp -> dy ) ; //<S2SV> if ( l_tccp -> numresolutions > * p_max_res ) { //<S2SV> * p_max_res = l_tccp -> numresolutions ; //<S2SV> } //<S2SV> l_level_no = l_tccp -> numresolutions - 1 ; //<S2SV> for ( resno = 0 ; resno < l_tccp -> numresolutions ; ++ resno ) { //<S2SV> OPJ_UINT32 l_dx , l_dy ; //<S2SV> l_pdx = l_tccp -> prcw [ resno ] ; //<S2SV> l_pdy = l_tccp -> prch [ resno ] ; //<S2SV> * lResolutionPtr ++ = l_pdx ; //<S2SV> * lResolutionPtr ++ = l_pdy ; //<S2SV> l_dx = l_img_comp -> dx * ( 1u << ( l_pdx + l_level_no ) ) ; //<S2SV> l_dy = l_img_comp -> dy * ( 1u << ( l_pdy + l_level_no ) ) ; //<S2SV> * p_dx_min = ( OPJ_UINT32 ) opj_int_min ( ( OPJ_INT32 ) * p_dx_min , ( OPJ_INT32 ) l_dx ) ; //<S2SV> * p_dy_min = ( OPJ_UINT32 ) opj_int_min ( ( OPJ_INT32 ) * p_dy_min , ( OPJ_INT32 ) l_dy ) ; //<S2SV> l_rx0 = opj_int_ceildivpow2 ( l_tcx0 , ( OPJ_INT32 ) l_level_no ) ; //<S2SV> l_ry0 = opj_int_ceildivpow2 ( l_tcy0 , ( OPJ_INT32 ) l_level_no ) ; //<S2SV> l_rx1 = opj_int_ceildivpow2 ( l_tcx1 , ( OPJ_INT32 ) l_level_no ) ; //<S2SV> l_ry1 = opj_int_ceildivpow2 ( l_tcy1 , ( OPJ_INT32 ) l_level_no ) ; //<S2SV> l_px0 = opj_int_floordivpow2 ( l_rx0 , ( OPJ_INT32 ) l_pdx ) << l_pdx ; //<S2SV> l_py0 = opj_int_floordivpow2 ( l_ry0 , ( OPJ_INT32 ) l_pdy ) << l_pdy ; //<S2SV> l_px1 = opj_int_ceildivpow2 ( l_rx1 , ( OPJ_INT32 ) l_pdx ) << l_pdx ; //<S2SV> py1 = opj_int_ceildivpow2 ( l_ry1 , ( OPJ_INT32 ) l_pdy ) << l_pdy ; //<S2SV> l_pw = ( l_rx0 == l_rx1 ) ? 0 : ( OPJ_UINT32 ) ( ( l_px1 - l_px0 ) >> l_pdx ) ; //<S2SV> l_ph = ( l_ry0 == l_ry1 ) ? 0 : ( OPJ_UINT32 ) ( ( py1 - l_py0 ) >> l_pdy ) ; //<S2SV> * lResolutionPtr ++ = l_pw ; //<S2SV> * lResolutionPtr ++ = l_ph ; //<S2SV> l_product = l_pw * l_ph ; //<S2SV> if ( l_product > * p_max_prec ) { //<S2SV> * p_max_prec = l_product ; //<S2SV> } //<S2SV> -- l_level_no ; //<S2SV> } //<S2SV> ++ l_tccp ; //<S2SV> ++ l_img_comp ; //<S2SV> } //<S2SV> } //<S2SV> 