static void sycc444_to_rgb ( opj_image_t * img ) //<S2SV> { //<S2SV> int * d0 , * d1 , * d2 , * r , * g , * b ; //<S2SV> const int * y , * cb , * cr ; //<S2SV> size_t maxw , maxh , max , i ; //<S2SV> int offset , upb ; //<S2SV> upb = ( int ) img -> comps [ 0 ] . prec ; //<S2SV> offset = 1 << ( upb - 1 ) ; upb = ( 1 << upb ) - 1 ; //<S2SV> maxw = ( size_t ) img -> comps [ 0 ] . w ; maxh = ( size_t ) img -> comps [ 0 ] . h ; //<S2SV> max = maxw * maxh ; //<S2SV> y = img -> comps [ 0 ] . data ; //<S2SV> cb = img -> comps [ 1 ] . data ; //<S2SV> cr = img -> comps [ 2 ] . data ; //<S2SV> d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; //<S2SV> d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; //<S2SV> d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; //<S2SV> if ( r == NULL || g == NULL || b == NULL ) goto fails ; //<S2SV> for ( i = 0U ; i < max ; ++ i ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ cb ; ++ cr ; ++ r ; ++ g ; ++ b ; //<S2SV> } //<S2SV> free ( img -> comps [ 0 ] . data ) ; img -> comps [ 0 ] . data = d0 ; //<S2SV> free ( img -> comps [ 1 ] . data ) ; img -> comps [ 1 ] . data = d1 ; //<S2SV> free ( img -> comps [ 2 ] . data ) ; img -> comps [ 2 ] . data = d2 ; //<S2SV> img -> color_space = OPJ_CLRSPC_SRGB ; //<S2SV> return ; //<S2SV> fails : //<S2SV> free ( r ) ; //<S2SV> free ( g ) ; //<S2SV> free ( b ) ; //<S2SV> } //<S2SV> 