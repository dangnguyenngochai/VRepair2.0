static void sycc420_to_rgb ( opj_image_t * img ) //<S2SV> { //<S2SV> int * d0 , * d1 , * d2 , * r , * g , * b , * nr , * ng , * nb ; //<S2SV> const int * y , * cb , * cr , * ny ; //<S2SV> size_t maxw , maxh , max , offx , loopmaxw , offy , loopmaxh ; //<S2SV> int offset , upb ; //<S2SV> size_t i ; //<S2SV> upb = ( int ) img -> comps [ 0 ] . prec ; //<S2SV> offset = 1 << ( upb - 1 ) ; upb = ( 1 << upb ) - 1 ; //<S2SV> maxw = ( size_t ) img -> comps [ 0 ] . w ; maxh = ( size_t ) img -> comps [ 0 ] . h ; //<S2SV> max = maxw * maxh ; //<S2SV> y = img -> comps [ 0 ] . data ; //<S2SV> cb = img -> comps [ 1 ] . data ; //<S2SV> cr = img -> comps [ 2 ] . data ; //<S2SV> d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; //<S2SV> d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; //<S2SV> d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; //<S2SV> if ( r == NULL || g == NULL || b == NULL ) goto fails ; //<S2SV> offx = img -> x0 & 1U ; //<S2SV> loopmaxw = maxw - offx ; //<S2SV> offy = img -> y0 & 1U ; //<S2SV> loopmaxh = maxh - offy ; //<S2SV> if ( offy > 0U ) { //<S2SV> size_t j ; //<S2SV> for ( j = 0 ; j < maxw ; ++ j ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0U ; i < ( loopmaxh & ~ ( size_t ) 1U ) ; i += 2U ) //<S2SV> { //<S2SV> size_t j ; //<S2SV> ny = y + maxw ; //<S2SV> nr = r + maxw ; ng = g + maxw ; nb = b + maxw ; //<S2SV> if ( offx > 0U ) { //<S2SV> sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; //<S2SV> ++ ny ; ++ nr ; ++ ng ; ++ nb ; //<S2SV> } //<S2SV> for ( j = 0 ; j < ( loopmaxw & ~ ( size_t ) 1U ) ; j += 2U ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; //<S2SV> ++ ny ; ++ nr ; ++ ng ; ++ nb ; //<S2SV> sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; //<S2SV> ++ ny ; ++ nr ; ++ ng ; ++ nb ; ++ cb ; ++ cr ; //<S2SV> } //<S2SV> if ( j < loopmaxw ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; //<S2SV> ++ ny ; ++ nr ; ++ ng ; ++ nb ; ++ cb ; ++ cr ; //<S2SV> } //<S2SV> y += maxw ; r += maxw ; g += maxw ; b += maxw ; //<S2SV> } //<S2SV> if ( i < loopmaxh ) //<S2SV> { //<S2SV> size_t j ; //<S2SV> for ( j = 0U ; j < ( maxw & ~ ( size_t ) 1U ) ; j += 2U ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; ++ cb ; ++ cr ; //<S2SV> } //<S2SV> if ( j < maxw ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> } //<S2SV> } //<S2SV> free ( img -> comps [ 0 ] . data ) ; img -> comps [ 0 ] . data = d0 ; //<S2SV> free ( img -> comps [ 1 ] . data ) ; img -> comps [ 1 ] . data = d1 ; //<S2SV> free ( img -> comps [ 2 ] . data ) ; img -> comps [ 2 ] . data = d2 ; //<S2SV> img -> comps [ 1 ] . w = img -> comps [ 2 ] . w = img -> comps [ 0 ] . w ; //<S2SV> img -> comps [ 1 ] . h = img -> comps [ 2 ] . h = img -> comps [ 0 ] . h ; //<S2SV> img -> comps [ 1 ] . dx = img -> comps [ 2 ] . dx = img -> comps [ 0 ] . dx ; //<S2SV> img -> comps [ 1 ] . dy = img -> comps [ 2 ] . dy = img -> comps [ 0 ] . dy ; //<S2SV> img -> color_space = OPJ_CLRSPC_SRGB ; //<S2SV> return ; //<S2SV> fails : //<S2SV> free ( r ) ; //<S2SV> free ( g ) ; //<S2SV> free ( b ) ; //<S2SV> } //<S2SV> 