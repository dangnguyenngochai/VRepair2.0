int imagetobmp ( opj_image_t * image , const char * outfile ) { //<S2SV> int w , h ; //<S2SV> int i , pad ; //<S2SV> FILE * fdest = NULL ; //<S2SV> int adjustR , adjustG , adjustB ; //<S2SV> if ( image -> comps [ 0 ] . prec < 8 ) { //<S2SV> fprintf ( stderr , "Unsupported<S2SV_blank>number<S2SV_blank>of<S2SV_blank>components:<S2SV_blank>%d\\n" , image -> comps [ 0 ] . prec ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( image -> numcomps >= 3 && image -> comps [ 0 ] . dx == image -> comps [ 1 ] . dx //<S2SV> && image -> comps [ 1 ] . dx == image -> comps [ 2 ] . dx //<S2SV> && image -> comps [ 0 ] . dy == image -> comps [ 1 ] . dy //<S2SV> && image -> comps [ 1 ] . dy == image -> comps [ 2 ] . dy //<S2SV> && image -> comps [ 0 ] . prec == image -> comps [ 1 ] . prec //<S2SV> && image -> comps [ 1 ] . prec == image -> comps [ 2 ] . prec ) { //<S2SV> fdest = fopen ( outfile , "wb" ) ; //<S2SV> if ( ! fdest ) { //<S2SV> fprintf ( stderr , "ERROR<S2SV_blank>-><S2SV_blank>failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>writing\\n" , outfile ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> w = ( int ) image -> comps [ 0 ] . w ; //<S2SV> h = ( int ) image -> comps [ 0 ] . h ; //<S2SV> fprintf ( fdest , "BM" ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , //<S2SV> ( OPJ_UINT8 ) ( h * w * 3 + 3 * h * ( w % 2 ) + 54 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w * 3 + 3 * h * ( w % 2 ) + 54 ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w * 3 + 3 * h * ( w % 2 ) + 54 ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w * 3 + 3 * h * ( w % 2 ) + 54 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 0 ) & 0xff , ( ( 0 ) >> 8 ) & 0xff , ( ( 0 ) >> 16 ) & 0xff , ( ( 0 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 54 ) & 0xff , ( ( 54 ) >> 8 ) & 0xff , ( ( 54 ) >> 16 ) & 0xff , ( ( 54 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 40 ) & 0xff , ( ( 40 ) >> 8 ) & 0xff , ( ( 40 ) >> 16 ) & 0xff , ( ( 40 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( OPJ_UINT8 ) ( ( w ) & 0xff ) , //<S2SV> ( OPJ_UINT8 ) ( ( w ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( w ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( w ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( OPJ_UINT8 ) ( ( h ) & 0xff ) , //<S2SV> ( OPJ_UINT8 ) ( ( h ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c" , ( 1 ) & 0xff , ( ( 1 ) >> 8 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c" , ( 24 ) & 0xff , ( ( 24 ) >> 8 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 0 ) & 0xff , ( ( 0 ) >> 8 ) & 0xff , ( ( 0 ) >> 16 ) & 0xff , ( ( 0 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( OPJ_UINT8 ) ( 3 * h * w + 3 * h * ( w % 2 ) ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w * 3 + 3 * h * ( w % 2 ) ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w * 3 + 3 * h * ( w % 2 ) ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w * 3 + 3 * h * ( w % 2 ) ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 7834 ) & 0xff , ( ( 7834 ) >> 8 ) & 0xff , ( ( 7834 ) >> 16 ) & 0xff , ( ( 7834 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 7834 ) & 0xff , ( ( 7834 ) >> 8 ) & 0xff , ( ( 7834 ) >> 16 ) & 0xff , ( ( 7834 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 0 ) & 0xff , ( ( 0 ) >> 8 ) & 0xff , ( ( 0 ) >> 16 ) & 0xff , ( ( 0 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 0 ) & 0xff , ( ( 0 ) >> 8 ) & 0xff , ( ( 0 ) >> 16 ) & 0xff , ( ( 0 ) >> 24 ) & 0xff ) ; //<S2SV> if ( image -> comps [ 0 ] . prec > 8 ) { //<S2SV> adjustR = ( int ) image -> comps [ 0 ] . prec - 8 ; //<S2SV> printf ( "BMP<S2SV_blank>CONVERSION:<S2SV_blank>Truncating<S2SV_blank>component<S2SV_blank>0<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>bits<S2SV_blank>to<S2SV_blank>8<S2SV_blank>bits\\n" , image -> comps [ 0 ] . prec ) ; //<S2SV> } //<S2SV> else //<S2SV> adjustR = 0 ; //<S2SV> if ( image -> comps [ 1 ] . prec > 8 ) { //<S2SV> adjustG = ( int ) image -> comps [ 1 ] . prec - 8 ; //<S2SV> printf ( "BMP<S2SV_blank>CONVERSION:<S2SV_blank>Truncating<S2SV_blank>component<S2SV_blank>1<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>bits<S2SV_blank>to<S2SV_blank>8<S2SV_blank>bits\\n" , image -> comps [ 1 ] . prec ) ; //<S2SV> } //<S2SV> else //<S2SV> adjustG = 0 ; //<S2SV> if ( image -> comps [ 2 ] . prec > 8 ) { //<S2SV> adjustB = ( int ) image -> comps [ 2 ] . prec - 8 ; //<S2SV> printf ( "BMP<S2SV_blank>CONVERSION:<S2SV_blank>Truncating<S2SV_blank>component<S2SV_blank>2<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>bits<S2SV_blank>to<S2SV_blank>8<S2SV_blank>bits\\n" , image -> comps [ 2 ] . prec ) ; //<S2SV> } //<S2SV> else //<S2SV> adjustB = 0 ; //<S2SV> for ( i = 0 ; i < w * h ; i ++ ) { //<S2SV> OPJ_UINT8 rc , gc , bc ; //<S2SV> int r , g , b ; //<S2SV> r = image -> comps [ 0 ] . data [ w * h - ( ( i ) / ( w ) + 1 ) * w + ( i ) % ( w ) ] ; //<S2SV> r += ( image -> comps [ 0 ] . sgnd ? 1 << ( image -> comps [ 0 ] . prec - 1 ) : 0 ) ; //<S2SV> r = ( ( r >> adjustR ) + ( ( r >> ( adjustR - 1 ) ) % 2 ) ) ; //<S2SV> if ( r > 255 ) r = 255 ; else if ( r < 0 ) r = 0 ; //<S2SV> rc = ( OPJ_UINT8 ) r ; //<S2SV> g = image -> comps [ 1 ] . data [ w * h - ( ( i ) / ( w ) + 1 ) * w + ( i ) % ( w ) ] ; //<S2SV> g += ( image -> comps [ 1 ] . sgnd ? 1 << ( image -> comps [ 1 ] . prec - 1 ) : 0 ) ; //<S2SV> g = ( ( g >> adjustG ) + ( ( g >> ( adjustG - 1 ) ) % 2 ) ) ; //<S2SV> if ( g > 255 ) g = 255 ; else if ( g < 0 ) g = 0 ; //<S2SV> gc = ( OPJ_UINT8 ) g ; //<S2SV> b = image -> comps [ 2 ] . data [ w * h - ( ( i ) / ( w ) + 1 ) * w + ( i ) % ( w ) ] ; //<S2SV> b += ( image -> comps [ 2 ] . sgnd ? 1 << ( image -> comps [ 2 ] . prec - 1 ) : 0 ) ; //<S2SV> b = ( ( b >> adjustB ) + ( ( b >> ( adjustB - 1 ) ) % 2 ) ) ; //<S2SV> if ( b > 255 ) b = 255 ; else if ( b < 0 ) b = 0 ; //<S2SV> bc = ( OPJ_UINT8 ) b ; //<S2SV> fprintf ( fdest , "%c%c%c" , bc , gc , rc ) ; //<S2SV> if ( ( i + 1 ) % w == 0 ) { //<S2SV> for ( pad = ( ( 3 * w ) % 4 ) ? ( 4 - ( 3 * w ) % 4 ) : 0 ; pad > 0 ; pad -- ) //<S2SV> fprintf ( fdest , "%c" , 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> fclose ( fdest ) ; //<S2SV> } else { //<S2SV> fdest = fopen ( outfile , "wb" ) ; //<S2SV> if ( ! fdest ) { //<S2SV> fprintf ( stderr , "ERROR<S2SV_blank>-><S2SV_blank>failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>writing\\n" , outfile ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> w = ( int ) image -> comps [ 0 ] . w ; //<S2SV> h = ( int ) image -> comps [ 0 ] . h ; //<S2SV> fprintf ( fdest , "BM" ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( OPJ_UINT8 ) ( h * w + 54 + 1024 + h * ( w % 2 ) ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w + 54 + 1024 + h * ( w % 2 ) ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w + 54 + 1024 + h * ( w % 2 ) ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w + 54 + 1024 + w * ( w % 2 ) ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 0 ) & 0xff , ( ( 0 ) >> 8 ) & 0xff , ( ( 0 ) >> 16 ) & 0xff , ( ( 0 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 54 + 1024 ) & 0xff , ( ( 54 + 1024 ) >> 8 ) & 0xff , //<S2SV> ( ( 54 + 1024 ) >> 16 ) & 0xff , //<S2SV> ( ( 54 + 1024 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 40 ) & 0xff , ( ( 40 ) >> 8 ) & 0xff , ( ( 40 ) >> 16 ) & 0xff , ( ( 40 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( OPJ_UINT8 ) ( ( w ) & 0xff ) , //<S2SV> ( OPJ_UINT8 ) ( ( w ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( w ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( w ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( OPJ_UINT8 ) ( ( h ) & 0xff ) , //<S2SV> ( OPJ_UINT8 ) ( ( h ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c" , ( 1 ) & 0xff , ( ( 1 ) >> 8 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c" , ( 8 ) & 0xff , ( ( 8 ) >> 8 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 0 ) & 0xff , ( ( 0 ) >> 8 ) & 0xff , ( ( 0 ) >> 16 ) & 0xff , ( ( 0 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( OPJ_UINT8 ) ( h * w + h * ( w % 2 ) ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w + h * ( w % 2 ) ) >> 8 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w + h * ( w % 2 ) ) >> 16 ) & 0xff , //<S2SV> ( OPJ_UINT8 ) ( ( h * w + h * ( w % 2 ) ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 7834 ) & 0xff , ( ( 7834 ) >> 8 ) & 0xff , ( ( 7834 ) >> 16 ) & 0xff , ( ( 7834 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 7834 ) & 0xff , ( ( 7834 ) >> 8 ) & 0xff , ( ( 7834 ) >> 16 ) & 0xff , ( ( 7834 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 256 ) & 0xff , ( ( 256 ) >> 8 ) & 0xff , ( ( 256 ) >> 16 ) & 0xff , ( ( 256 ) >> 24 ) & 0xff ) ; //<S2SV> fprintf ( fdest , "%c%c%c%c" , ( 256 ) & 0xff , ( ( 256 ) >> 8 ) & 0xff , ( ( 256 ) >> 16 ) & 0xff , ( ( 256 ) >> 24 ) & 0xff ) ; //<S2SV> if ( image -> comps [ 0 ] . prec > 8 ) { //<S2SV> adjustR = ( int ) image -> comps [ 0 ] . prec - 8 ; //<S2SV> printf ( "BMP<S2SV_blank>CONVERSION:<S2SV_blank>Truncating<S2SV_blank>component<S2SV_blank>0<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>bits<S2SV_blank>to<S2SV_blank>8<S2SV_blank>bits\\n" , image -> comps [ 0 ] . prec ) ; //<S2SV> } else //<S2SV> adjustR = 0 ; //<S2SV> for ( i = 0 ; i < 256 ; i ++ ) { //<S2SV> fprintf ( fdest , "%c%c%c%c" , i , i , i , 0 ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < w * h ; i ++ ) { //<S2SV> int r ; //<S2SV> r = image -> comps [ 0 ] . data [ w * h - ( ( i ) / ( w ) + 1 ) * w + ( i ) % ( w ) ] ; //<S2SV> r += ( image -> comps [ 0 ] . sgnd ? 1 << ( image -> comps [ 0 ] . prec - 1 ) : 0 ) ; //<S2SV> r = ( ( r >> adjustR ) + ( ( r >> ( adjustR - 1 ) ) % 2 ) ) ; //<S2SV> if ( r > 255 ) r = 255 ; else if ( r < 0 ) r = 0 ; //<S2SV> fprintf ( fdest , "%c" , ( OPJ_UINT8 ) r ) ; //<S2SV> if ( ( i + 1 ) % w == 0 ) { //<S2SV> for ( ( pad = w % 4 ) ? ( 4 - w % 4 ) : 0 ; pad > 0 ; pad -- ) //<S2SV> fprintf ( fdest , "%c" , 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> fclose ( fdest ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 