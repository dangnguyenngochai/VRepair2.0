static void sycc420_to_rgb ( opj_image_t * img ) //<S2SV> { //<S2SV> int * d0 , * d1 , * d2 , * r , * g , * b , * nr , * ng , * nb ; //<S2SV> const int * y , * cb , * cr , * ny ; //<S2SV> unsigned int maxw , maxh , max ; //<S2SV> int offset , upb ; //<S2SV> unsigned int i , j ; //<S2SV> upb = ( int ) img -> comps [ 0 ] . prec ; //<S2SV> offset = 1 << ( upb - 1 ) ; upb = ( 1 << upb ) - 1 ; //<S2SV> maxw = ( unsigned int ) img -> comps [ 0 ] . w ; maxh = ( unsigned int ) img -> comps [ 0 ] . h ; //<S2SV> max = maxw * maxh ; //<S2SV> y = img -> comps [ 0 ] . data ; //<S2SV> cb = img -> comps [ 1 ] . data ; //<S2SV> cr = img -> comps [ 2 ] . data ; //<S2SV> d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; //<S2SV> d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; //<S2SV> d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; //<S2SV> if ( r == NULL || g == NULL || b == NULL ) goto fails ; //<S2SV> for ( i = 0U ; i < ( maxh & ~ ( unsigned int ) 1U ) ; i += 2U ) //<S2SV> { //<S2SV> ny = y + maxw ; //<S2SV> nr = r + maxw ; ng = g + maxw ; nb = b + maxw ; //<S2SV> for ( j = 0 ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; //<S2SV> ++ ny ; ++ nr ; ++ ng ; ++ nb ; //<S2SV> sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; //<S2SV> ++ ny ; ++ nr ; ++ ng ; ++ nb ; ++ cb ; ++ cr ; //<S2SV> } //<S2SV> if ( j < maxw ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; //<S2SV> ++ ny ; ++ nr ; ++ ng ; ++ nb ; ++ cb ; ++ cr ; //<S2SV> } //<S2SV> y += maxw ; r += maxw ; g += maxw ; b += maxw ; //<S2SV> } //<S2SV> if ( i < maxh ) //<S2SV> { //<S2SV> for ( j = 0U ; j < ( maxw & ~ ( unsigned int ) 1U ) ; j += 2U ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> ++ y ; ++ r ; ++ g ; ++ b ; ++ cb ; ++ cr ; //<S2SV> } //<S2SV> if ( j < maxw ) //<S2SV> { //<S2SV> sycc_to_rgb ( offset , upb , * y , * cb , * cr , r , g , b ) ; //<S2SV> } //<S2SV> } //<S2SV> free ( img -> comps [ 0 ] . data ) ; img -> comps [ 0 ] . data = d0 ; //<S2SV> free ( img -> comps [ 1 ] . data ) ; img -> comps [ 1 ] . data = d1 ; //<S2SV> free ( img -> comps [ 2 ] . data ) ; img -> comps [ 2 ] . data = d2 ; //<S2SV> # if defined ( USE_JPWL ) || defined ( USE_MJ2 ) //<S2SV> img -> comps [ 1 ] . w = maxw ; img -> comps [ 1 ] . h = maxh ; //<S2SV> img -> comps [ 2 ] . w = maxw ; img -> comps [ 2 ] . h = maxh ; //<S2SV> # else //<S2SV> img -> comps [ 1 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 1 ] . h = ( OPJ_UINT32 ) maxh ; //<S2SV> img -> comps [ 2 ] . w = ( OPJ_UINT32 ) maxw ; img -> comps [ 2 ] . h = ( OPJ_UINT32 ) maxh ; //<S2SV> # endif //<S2SV> img -> comps [ 1 ] . dx = img -> comps [ 0 ] . dx ; //<S2SV> img -> comps [ 2 ] . dx = img -> comps [ 0 ] . dx ; //<S2SV> img -> comps [ 1 ] . dy = img -> comps [ 0 ] . dy ; //<S2SV> img -> comps [ 2 ] . dy = img -> comps [ 0 ] . dy ; //<S2SV> return ; //<S2SV> fails : //<S2SV> if ( r ) free ( r ) ; //<S2SV> if ( g ) free ( g ) ; //<S2SV> if ( b ) free ( b ) ; //<S2SV> } //<S2SV> 