static OPJ_BOOL bmp_read_rle8_data ( FILE * IN , OPJ_UINT8 * pData , //<S2SV> OPJ_UINT32 stride , OPJ_UINT32 width , OPJ_UINT32 height ) //<S2SV> { //<S2SV> OPJ_UINT32 x , y , written ; //<S2SV> OPJ_UINT8 * pix ; //<S2SV> const OPJ_UINT8 * beyond ; //<S2SV> beyond = pData + stride * height ; //<S2SV> pix = pData ; //<S2SV> x = y = written = 0U ; //<S2SV> while ( y < height ) { //<S2SV> int c = getc ( IN ) ; //<S2SV> if ( c == EOF ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> if ( c ) { //<S2SV> int j , c1_int ; //<S2SV> OPJ_UINT8 c1 ; //<S2SV> c1_int = getc ( IN ) ; //<S2SV> if ( c1_int == EOF ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> c1 = ( OPJ_UINT8 ) c1_int ; //<S2SV> for ( j = 0 ; ( j < c ) && ( x < width ) && //<S2SV> ( ( OPJ_SIZE_T ) pix < ( OPJ_SIZE_T ) beyond ) ; j ++ , x ++ , pix ++ ) { //<S2SV> * pix = c1 ; //<S2SV> written ++ ; //<S2SV> } //<S2SV> } else { //<S2SV> c = getc ( IN ) ; //<S2SV> if ( c == EOF ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> if ( c == 0x00 ) { //<S2SV> x = 0 ; //<S2SV> ++ y ; //<S2SV> pix = pData + y * stride + x ; //<S2SV> } else if ( c == 0x01 ) { //<S2SV> break ; //<S2SV> } else if ( c == 0x02 ) { //<S2SV> c = getc ( IN ) ; //<S2SV> if ( c == EOF ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> x += ( OPJ_UINT32 ) c ; //<S2SV> c = getc ( IN ) ; //<S2SV> if ( c == EOF ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> y += ( OPJ_UINT32 ) c ; //<S2SV> pix = pData + y * stride + x ; //<S2SV> } else { //<S2SV> int j ; //<S2SV> for ( j = 0 ; ( j < c ) && ( x < width ) && //<S2SV> ( ( OPJ_SIZE_T ) pix < ( OPJ_SIZE_T ) beyond ) ; j ++ , x ++ , pix ++ ) { //<S2SV> int c1_int ; //<S2SV> OPJ_UINT8 c1 ; //<S2SV> c1_int = getc ( IN ) ; //<S2SV> if ( c1_int == EOF ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> c1 = ( OPJ_UINT8 ) c1_int ; //<S2SV> * pix = c1 ; //<S2SV> written ++ ; //<S2SV> } //<S2SV> if ( ( OPJ_UINT32 ) c & 1U ) { //<S2SV> c = getc ( IN ) ; //<S2SV> if ( c == EOF ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( written != width * height ) { //<S2SV> fprintf ( stderr , "warning,<S2SV_blank>image\'s<S2SV_blank>actual<S2SV_blank>size<S2SV_blank>does<S2SV_blank>not<S2SV_blank>match<S2SV_blank>advertized<S2SV_blank>one\\n" ) ; //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> return OPJ_TRUE ; //<S2SV> } //<S2SV> 