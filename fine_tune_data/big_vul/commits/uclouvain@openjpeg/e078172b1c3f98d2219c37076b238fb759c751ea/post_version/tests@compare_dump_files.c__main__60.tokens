int main ( int argc , char * * argv ) //<S2SV> { //<S2SV> test_cmp_parameters inParam ; //<S2SV> FILE * fbase = NULL , * ftest = NULL ; //<S2SV> int same = 0 ; //<S2SV> char lbase [ 512 ] ; //<S2SV> char strbase [ 512 ] ; //<S2SV> char ltest [ 512 ] ; //<S2SV> char strtest [ 512 ] ; //<S2SV> if ( parse_cmdline_cmp ( argc , argv , & inParam ) == 1 ) //<S2SV> { //<S2SV> compare_dump_files_help_display ( ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> printf ( "******Parameters*********<S2SV_blank>\\n" ) ; //<S2SV> printf ( "<S2SV_blank>base_filename<S2SV_blank>=<S2SV_blank>%s\\n" //<S2SV> "<S2SV_blank>test_filename<S2SV_blank>=<S2SV_blank>%s\\n" , //<S2SV> inParam . base_filename , inParam . test_filename ) ; //<S2SV> printf ( "*************************<S2SV_blank>\\n" ) ; //<S2SV> printf ( "Try<S2SV_blank>to<S2SV_blank>open:<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading<S2SV_blank>...<S2SV_blank>" , inParam . base_filename ) ; //<S2SV> if ( ( fbase = fopen ( inParam . base_filename , "rb" ) ) == NULL ) //<S2SV> { //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> printf ( "Ok.\\n" ) ; //<S2SV> printf ( "Try<S2SV_blank>to<S2SV_blank>open:<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading<S2SV_blank>...<S2SV_blank>" , inParam . test_filename ) ; //<S2SV> if ( ( ftest = fopen ( inParam . test_filename , "rb" ) ) == NULL ) //<S2SV> { //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> printf ( "Ok.\\n" ) ; //<S2SV> while ( fgets ( lbase , sizeof ( lbase ) , fbase ) && fgets ( ltest , sizeof ( ltest ) , ftest ) ) //<S2SV> { //<S2SV> int nbase = sscanf ( lbase , "%511[^\\r\\n]" , strbase ) ; //<S2SV> int ntest = sscanf ( ltest , "%511[^\\r\\n]" , strtest ) ; //<S2SV> assert ( nbase != 511 && ntest != 511 ) ; //<S2SV> if ( nbase != 1 || ntest != 1 ) //<S2SV> { //<S2SV> fprintf ( stderr , "could<S2SV_blank>not<S2SV_blank>parse<S2SV_blank>line<S2SV_blank>from<S2SV_blank>files\\n" ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( strcmp ( strbase , strtest ) != 0 ) //<S2SV> { //<S2SV> fprintf ( stderr , "<%s><S2SV_blank>vs.<S2SV_blank><%s>\\n" , strbase , strtest ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> } //<S2SV> same = 1 ; //<S2SV> printf ( "\\n*****<S2SV_blank>TEST<S2SV_blank>SUCCEED:<S2SV_blank>Files<S2SV_blank>are<S2SV_blank>the<S2SV_blank>same.<S2SV_blank>*****\\n" ) ; //<S2SV> cleanup : //<S2SV> if ( fbase ) fclose ( fbase ) ; //<S2SV> if ( ftest ) fclose ( ftest ) ; //<S2SV> free ( inParam . base_filename ) ; //<S2SV> free ( inParam . test_filename ) ; //<S2SV> return same ? EXIT_SUCCESS : EXIT_FAILURE ; //<S2SV> } //<S2SV> 