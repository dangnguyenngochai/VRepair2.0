opj_image_t * pgxtoimage ( const char * filename , opj_cparameters_t * parameters ) //<S2SV> { //<S2SV> FILE * f = NULL ; //<S2SV> int w , h , prec ; //<S2SV> int i , numcomps , max ; //<S2SV> OPJ_COLOR_SPACE color_space ; //<S2SV> opj_image_cmptparm_t cmptparm ; //<S2SV> opj_image_t * image = NULL ; //<S2SV> int adjustS , ushift , dshift , force8 ; //<S2SV> char endian1 , endian2 , sign ; //<S2SV> char signtmp [ 32 ] ; //<S2SV> char temp [ 32 ] ; //<S2SV> int bigendian ; //<S2SV> opj_image_comp_t * comp = NULL ; //<S2SV> numcomps = 1 ; //<S2SV> color_space = OPJ_CLRSPC_GRAY ; //<S2SV> memset ( & cmptparm , 0 , sizeof ( opj_image_cmptparm_t ) ) ; //<S2SV> max = 0 ; //<S2SV> f = fopen ( filename , "rb" ) ; //<S2SV> if ( ! f ) { //<S2SV> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading<S2SV_blank>!\\n" , filename ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> fseek ( f , 0 , SEEK_SET ) ; //<S2SV> if ( fscanf ( f , "PG%[<S2SV_blank>\\t]%c%c%[<S2SV_blank>\\t+-]%d%[<S2SV_blank>\\t]%d%[<S2SV_blank>\\t]%d" , temp , & endian1 , //<S2SV> & endian2 , signtmp , & prec , temp , & w , temp , & h ) != 9 ) { //<S2SV> fclose ( f ) ; //<S2SV> fprintf ( stderr , //<S2SV> "ERROR:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>read<S2SV_blank>the<S2SV_blank>right<S2SV_blank>number<S2SV_blank>of<S2SV_blank>element<S2SV_blank>from<S2SV_blank>the<S2SV_blank>fscanf()<S2SV_blank>function!\\n" ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> i = 0 ; //<S2SV> sign = '+' ; //<S2SV> while ( signtmp [ i ] != '\\0' ) { //<S2SV> if ( signtmp [ i ] == '-' ) { //<S2SV> sign = '-' ; //<S2SV> } //<S2SV> i ++ ; //<S2SV> } //<S2SV> fgetc ( f ) ; //<S2SV> if ( endian1 == 'M' && endian2 == 'L' ) { //<S2SV> bigendian = 1 ; //<S2SV> } else if ( endian2 == 'M' && endian1 == 'L' ) { //<S2SV> bigendian = 0 ; //<S2SV> } else { //<S2SV> fclose ( f ) ; //<S2SV> fprintf ( stderr , "Bad<S2SV_blank>pgx<S2SV_blank>header,<S2SV_blank>please<S2SV_blank>check<S2SV_blank>input<S2SV_blank>file\\n" ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> cmptparm . x0 = ( OPJ_UINT32 ) parameters -> image_offset_x0 ; //<S2SV> cmptparm . y0 = ( OPJ_UINT32 ) parameters -> image_offset_y0 ; //<S2SV> cmptparm . w = ! cmptparm . x0 ? ( OPJ_UINT32 ) ( ( w - 1 ) * parameters -> subsampling_dx + //<S2SV> 1 ) : cmptparm . x0 + ( OPJ_UINT32 ) ( w - 1 ) * ( OPJ_UINT32 ) parameters -> subsampling_dx //<S2SV> + 1 ; //<S2SV> cmptparm . h = ! cmptparm . y0 ? ( OPJ_UINT32 ) ( ( h - 1 ) * parameters -> subsampling_dy + //<S2SV> 1 ) : cmptparm . y0 + ( OPJ_UINT32 ) ( h - 1 ) * ( OPJ_UINT32 ) parameters -> subsampling_dy //<S2SV> + 1 ; //<S2SV> if ( sign == '-' ) { //<S2SV> cmptparm . sgnd = 1 ; //<S2SV> } else { //<S2SV> cmptparm . sgnd = 0 ; //<S2SV> } //<S2SV> if ( prec < 8 ) { //<S2SV> force8 = 1 ; //<S2SV> ushift = 8 - prec ; //<S2SV> dshift = prec - ushift ; //<S2SV> if ( cmptparm . sgnd ) { //<S2SV> adjustS = ( 1 << ( prec - 1 ) ) ; //<S2SV> } else { //<S2SV> adjustS = 0 ; //<S2SV> } //<S2SV> cmptparm . sgnd = 0 ; //<S2SV> prec = 8 ; //<S2SV> } else { //<S2SV> ushift = dshift = force8 = adjustS = 0 ; //<S2SV> } //<S2SV> cmptparm . prec = ( OPJ_UINT32 ) prec ; //<S2SV> cmptparm . bpp = ( OPJ_UINT32 ) prec ; //<S2SV> cmptparm . dx = ( OPJ_UINT32 ) parameters -> subsampling_dx ; //<S2SV> cmptparm . dy = ( OPJ_UINT32 ) parameters -> subsampling_dy ; //<S2SV> image = opj_image_create ( ( OPJ_UINT32 ) numcomps , & cmptparm , color_space ) ; //<S2SV> if ( ! image ) { //<S2SV> fclose ( f ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> image -> x0 = cmptparm . x0 ; //<S2SV> image -> y0 = cmptparm . x0 ; //<S2SV> image -> x1 = cmptparm . w ; //<S2SV> image -> y1 = cmptparm . h ; //<S2SV> comp = & image -> comps [ 0 ] ; //<S2SV> for ( i = 0 ; i < w * h ; i ++ ) { //<S2SV> int v ; //<S2SV> if ( force8 ) { //<S2SV> v = readuchar ( f ) + adjustS ; //<S2SV> v = ( v << ushift ) + ( v >> dshift ) ; //<S2SV> comp -> data [ i ] = ( unsigned char ) v ; //<S2SV> if ( v > max ) { //<S2SV> max = v ; //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> if ( comp -> prec == 8 ) { //<S2SV> if ( ! comp -> sgnd ) { //<S2SV> v = readuchar ( f ) ; //<S2SV> } else { //<S2SV> v = ( char ) readuchar ( f ) ; //<S2SV> } //<S2SV> } else if ( comp -> prec <= 16 ) { //<S2SV> if ( ! comp -> sgnd ) { //<S2SV> v = readushort ( f , bigendian ) ; //<S2SV> } else { //<S2SV> v = ( short ) readushort ( f , bigendian ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( ! comp -> sgnd ) { //<S2SV> v = ( int ) readuint ( f , bigendian ) ; //<S2SV> } else { //<S2SV> v = ( int ) readuint ( f , bigendian ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( v > max ) { //<S2SV> max = v ; //<S2SV> } //<S2SV> comp -> data [ i ] = v ; //<S2SV> } //<S2SV> fclose ( f ) ; //<S2SV> comp -> bpp = ( OPJ_UINT32 ) int_floorlog2 ( max ) + 1 ; //<S2SV> return image ; //<S2SV> } //<S2SV> 