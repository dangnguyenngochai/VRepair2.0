static OPJ_BOOL opj_j2k_write_all_tile_parts ( opj_j2k_t * p_j2k , //<S2SV> OPJ_BYTE * p_data , //<S2SV> OPJ_UINT32 * p_data_written , //<S2SV> OPJ_UINT32 p_total_data_size , //<S2SV> opj_stream_private_t * p_stream , //<S2SV> struct opj_event_mgr * p_manager //<S2SV> ) //<S2SV> { //<S2SV> OPJ_UINT32 tilepartno = 0 ; //<S2SV> OPJ_UINT32 l_nb_bytes_written = 0 ; //<S2SV> OPJ_UINT32 l_current_nb_bytes_written ; //<S2SV> OPJ_UINT32 l_part_tile_size ; //<S2SV> OPJ_UINT32 tot_num_tp ; //<S2SV> OPJ_UINT32 pino ; //<S2SV> OPJ_BYTE * l_begin_data ; //<S2SV> opj_tcp_t * l_tcp = 00 ; //<S2SV> opj_tcd_t * l_tcd = 00 ; //<S2SV> opj_cp_t * l_cp = 00 ; //<S2SV> l_tcd = p_j2k -> m_tcd ; //<S2SV> l_cp = & ( p_j2k -> m_cp ) ; //<S2SV> l_tcp = l_cp -> tcps + p_j2k -> m_current_tile_number ; //<S2SV> tot_num_tp = opj_j2k_get_num_tp ( l_cp , 0 , p_j2k -> m_current_tile_number ) ; //<S2SV> ++ p_j2k -> m_specific_param . m_encoder . m_current_tile_part_number ; //<S2SV> for ( tilepartno = 1 ; tilepartno < tot_num_tp ; ++ tilepartno ) { //<S2SV> p_j2k -> m_specific_param . m_encoder . m_current_poc_tile_part_number = tilepartno ; //<S2SV> l_current_nb_bytes_written = 0 ; //<S2SV> l_part_tile_size = 0 ; //<S2SV> l_begin_data = p_data ; //<S2SV> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , //<S2SV> p_manager ) ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> l_nb_bytes_written += l_current_nb_bytes_written ; //<S2SV> p_data += l_current_nb_bytes_written ; //<S2SV> p_total_data_size -= l_current_nb_bytes_written ; //<S2SV> l_part_tile_size += l_current_nb_bytes_written ; //<S2SV> l_current_nb_bytes_written = 0 ; //<S2SV> if ( ! opj_j2k_write_sod ( p_j2k , l_tcd , p_data , & l_current_nb_bytes_written , //<S2SV> p_total_data_size , p_stream , p_manager ) ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> p_data += l_current_nb_bytes_written ; //<S2SV> l_nb_bytes_written += l_current_nb_bytes_written ; //<S2SV> p_total_data_size -= l_current_nb_bytes_written ; //<S2SV> l_part_tile_size += l_current_nb_bytes_written ; //<S2SV> opj_write_bytes ( l_begin_data + 6 , l_part_tile_size , //<S2SV> 4 ) ; //<S2SV> if ( OPJ_IS_CINEMA ( l_cp -> rsiz ) ) { //<S2SV> opj_j2k_update_tlm ( p_j2k , l_part_tile_size ) ; //<S2SV> } //<S2SV> ++ p_j2k -> m_specific_param . m_encoder . m_current_tile_part_number ; //<S2SV> } //<S2SV> for ( pino = 1 ; pino <= l_tcp -> numpocs ; ++ pino ) { //<S2SV> l_tcd -> cur_pino = pino ; //<S2SV> tot_num_tp = opj_j2k_get_num_tp ( l_cp , pino , p_j2k -> m_current_tile_number ) ; //<S2SV> for ( tilepartno = 0 ; tilepartno < tot_num_tp ; ++ tilepartno ) { //<S2SV> p_j2k -> m_specific_param . m_encoder . m_current_poc_tile_part_number = tilepartno ; //<S2SV> l_current_nb_bytes_written = 0 ; //<S2SV> l_part_tile_size = 0 ; //<S2SV> l_begin_data = p_data ; //<S2SV> if ( ! opj_j2k_write_sot ( p_j2k , p_data , & l_current_nb_bytes_written , p_stream , //<S2SV> p_manager ) ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> l_nb_bytes_written += l_current_nb_bytes_written ; //<S2SV> p_data += l_current_nb_bytes_written ; //<S2SV> p_total_data_size -= l_current_nb_bytes_written ; //<S2SV> l_part_tile_size += l_current_nb_bytes_written ; //<S2SV> l_current_nb_bytes_written = 0 ; //<S2SV> if ( ! opj_j2k_write_sod ( p_j2k , l_tcd , p_data , & l_current_nb_bytes_written , //<S2SV> p_total_data_size , p_stream , p_manager ) ) { //<S2SV> return OPJ_FALSE ; //<S2SV> } //<S2SV> l_nb_bytes_written += l_current_nb_bytes_written ; //<S2SV> p_data += l_current_nb_bytes_written ; //<S2SV> p_total_data_size -= l_current_nb_bytes_written ; //<S2SV> l_part_tile_size += l_current_nb_bytes_written ; //<S2SV> opj_write_bytes ( l_begin_data + 6 , l_part_tile_size , //<S2SV> 4 ) ; //<S2SV> if ( OPJ_IS_CINEMA ( l_cp -> rsiz ) ) { //<S2SV> opj_j2k_update_tlm ( p_j2k , l_part_tile_size ) ; //<S2SV> } //<S2SV> ++ p_j2k -> m_specific_param . m_encoder . m_current_tile_part_number ; //<S2SV> } //<S2SV> } //<S2SV> * p_data_written = l_nb_bytes_written ; //<S2SV> return OPJ_TRUE ; //<S2SV> } //<S2SV> 