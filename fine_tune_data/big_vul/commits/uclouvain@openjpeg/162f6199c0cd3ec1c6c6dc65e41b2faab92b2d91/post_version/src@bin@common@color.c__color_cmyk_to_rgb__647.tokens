void color_cmyk_to_rgb ( opj_image_t * image ) //<S2SV> { //<S2SV> float C , M , Y , K ; //<S2SV> float sC , sM , sY , sK ; //<S2SV> unsigned int w , h , max , i ; //<S2SV> w = image -> comps [ 0 ] . w ; //<S2SV> h = image -> comps [ 0 ] . h ; //<S2SV> if ( //<S2SV> ( image -> numcomps < 4 ) //<S2SV> || ( image -> comps [ 0 ] . dx != image -> comps [ 1 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 2 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 3 ] . dx ) //<S2SV> || ( image -> comps [ 0 ] . dy != image -> comps [ 1 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 2 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 3 ] . dy ) //<S2SV> ) { //<S2SV> fprintf ( stderr , "%s:%d:color_cmyk_to_rgb\\n\\tCAN<S2SV_blank>NOT<S2SV_blank>CONVERT\\n" , __FILE__ , __LINE__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> max = w * h ; //<S2SV> sC = 1.0F / ( float ) ( ( 1 << image -> comps [ 0 ] . prec ) - 1 ) ; //<S2SV> sM = 1.0F / ( float ) ( ( 1 << image -> comps [ 1 ] . prec ) - 1 ) ; //<S2SV> sY = 1.0F / ( float ) ( ( 1 << image -> comps [ 2 ] . prec ) - 1 ) ; //<S2SV> sK = 1.0F / ( float ) ( ( 1 << image -> comps [ 3 ] . prec ) - 1 ) ; //<S2SV> for ( i = 0 ; i < max ; ++ i ) //<S2SV> { //<S2SV> C = ( float ) ( image -> comps [ 0 ] . data [ i ] ) * sC ; //<S2SV> M = ( float ) ( image -> comps [ 1 ] . data [ i ] ) * sM ; //<S2SV> Y = ( float ) ( image -> comps [ 2 ] . data [ i ] ) * sY ; //<S2SV> K = ( float ) ( image -> comps [ 3 ] . data [ i ] ) * sK ; //<S2SV> C = 1.0F - C ; //<S2SV> M = 1.0F - M ; //<S2SV> Y = 1.0F - Y ; //<S2SV> K = 1.0F - K ; //<S2SV> image -> comps [ 0 ] . data [ i ] = ( int ) ( 255.0F * C * K ) ; //<S2SV> image -> comps [ 1 ] . data [ i ] = ( int ) ( 255.0F * M * K ) ; //<S2SV> image -> comps [ 2 ] . data [ i ] = ( int ) ( 255.0F * Y * K ) ; //<S2SV> } //<S2SV> free ( image -> comps [ 3 ] . data ) ; image -> comps [ 3 ] . data = NULL ; //<S2SV> image -> comps [ 0 ] . prec = 8 ; //<S2SV> image -> comps [ 1 ] . prec = 8 ; //<S2SV> image -> comps [ 2 ] . prec = 8 ; //<S2SV> image -> numcomps -= 1 ; //<S2SV> image -> color_space = OPJ_CLRSPC_SRGB ; //<S2SV> for ( i = 3 ; i < image -> numcomps ; ++ i ) { //<S2SV> memcpy ( & ( image -> comps [ i ] ) , & ( image -> comps [ i + 1 ] ) , sizeof ( image -> comps [ i ] ) ) ; //<S2SV> } //<S2SV> } //<S2SV> 