static int jpeg_size ( unsigned char * data , unsigned int data_size , //<S2SV> int * width , int * height ) //<S2SV> { //<S2SV> int i = 0 ; //<S2SV> if ( i + 3 < data_size && data [ i ] == 0xFF && data [ i + 1 ] == 0xD8 && //<S2SV> data [ i + 2 ] == 0xFF && data [ i + 3 ] == 0xE0 ) { //<S2SV> i += 4 ; //<S2SV> if ( i + 6 < data_size && //<S2SV> data [ i + 2 ] == 'J' && data [ i + 3 ] == 'F' && data [ i + 4 ] == 'I' && //<S2SV> data [ i + 5 ] == 'F' && data [ i + 6 ] == 0x00 ) { //<S2SV> unsigned short block_length = data [ i ] * 256 + data [ i + 1 ] ; //<S2SV> while ( i < data_size ) { //<S2SV> i += block_length ; //<S2SV> if ( ( i + 1 ) >= data_size ) //<S2SV> return - 1 ; //<S2SV> if ( data [ i ] != 0xFF ) //<S2SV> return - 1 ; //<S2SV> if ( data [ i + 1 ] == 0xC0 ) { //<S2SV> * height = data [ i + 5 ] * 256 + data [ i + 6 ] ; //<S2SV> * width = data [ i + 7 ] * 256 + data [ i + 8 ] ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> i += 2 ; //<S2SV> block_length = data [ i ] * 256 + data [ i + 1 ] ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 