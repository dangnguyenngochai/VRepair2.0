static void //<S2SV> test_function ( char * ( * my_asnprintf ) ( char * , size_t * , const char * , ... ) ) //<S2SV> { //<S2SV> char buf [ 8 ] ; //<S2SV> int size ; //<S2SV> for ( size = 0 ; size <= 8 ; size ++ ) //<S2SV> { //<S2SV> size_t length = size ; //<S2SV> char * result = my_asnprintf ( NULL , & length , "%d" , 12345 ) ; //<S2SV> ASSERT ( result != NULL ) ; //<S2SV> ASSERT ( strcmp ( result , "12345" ) == 0 ) ; //<S2SV> ASSERT ( length == 5 ) ; //<S2SV> free ( result ) ; //<S2SV> } //<S2SV> for ( size = 0 ; size <= 8 ; size ++ ) //<S2SV> { //<S2SV> size_t length ; //<S2SV> char * result ; //<S2SV> memcpy ( buf , "DEADBEEF" , 8 ) ; //<S2SV> length = size ; //<S2SV> result = my_asnprintf ( buf , & length , "%d" , 12345 ) ; //<S2SV> ASSERT ( result != NULL ) ; //<S2SV> ASSERT ( strcmp ( result , "12345" ) == 0 ) ; //<S2SV> ASSERT ( length == 5 ) ; //<S2SV> if ( size < 5 + 1 ) //<S2SV> ASSERT ( result != buf ) ; //<S2SV> ASSERT ( memcmp ( buf + size , & "DEADBEEF" [ size ] , 8 - size ) == 0 ) ; //<S2SV> if ( result != buf ) //<S2SV> free ( result ) ; //<S2SV> } //<S2SV> for ( size = 0 ; size <= 8 ; size ++ ) //<S2SV> { //<S2SV> size_t length ; //<S2SV> char * result ; //<S2SV> memcpy ( buf , "DEADBEEF" , 8 ) ; //<S2SV> length = size ; //<S2SV> result = my_asnprintf ( buf , & length , "%2.0f" , 1.6314159265358979e+125 ) ; //<S2SV> ASSERT ( result != NULL ) ; //<S2SV> ASSERT ( strcmp ( result , "163141592653589790215729350939528493057529598899734151772468186268423257777068536614838678161083520756952076273094236944990208" ) == 0 ) ; //<S2SV> ASSERT ( length == 126 ) ; //<S2SV> if ( size < 126 + 1 ) //<S2SV> ASSERT ( result != buf ) ; //<S2SV> ASSERT ( memcmp ( buf + size , & "DEADBEEF" [ size ] , 8 - size ) == 0 ) ; //<S2SV> if ( result != buf ) //<S2SV> free ( result ) ; //<S2SV> } //<S2SV> } //<S2SV> 