static char * //<S2SV> construct_command_line ( struct manager_ctx * manager , struct server * server ) //<S2SV> { //<S2SV> static char cmd [ BUF_SIZE ] ; //<S2SV> char * method = manager -> method ; //<S2SV> int i ; //<S2SV> build_config ( working_dir , server ) ; //<S2SV> if ( server -> method ) method = server -> method ; //<S2SV> memset ( cmd , 0 , BUF_SIZE ) ; //<S2SV> snprintf ( cmd , BUF_SIZE , //<S2SV> "%s<S2SV_blank>-m<S2SV_blank>%s<S2SV_blank>--manager-address<S2SV_blank>%s<S2SV_blank>-f<S2SV_blank>%s/.shadowsocks_%s.pid<S2SV_blank>-c<S2SV_blank>%s/.shadowsocks_%s.conf" , //<S2SV> executable , method , manager -> manager_address , //<S2SV> working_dir , server -> port , working_dir , server -> port ) ; //<S2SV> if ( manager -> acl != NULL ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>--acl<S2SV_blank>%s" , manager -> acl ) ; //<S2SV> } //<S2SV> if ( manager -> timeout != NULL ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-t<S2SV_blank>%s" , manager -> timeout ) ; //<S2SV> } //<S2SV> # ifdef HAVE_SETRLIMIT //<S2SV> if ( manager -> nofile ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-n<S2SV_blank>%d" , manager -> nofile ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( manager -> user != NULL ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-a<S2SV_blank>%s" , manager -> user ) ; //<S2SV> } //<S2SV> if ( manager -> verbose ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-v" ) ; //<S2SV> } //<S2SV> if ( server -> mode == NULL && manager -> mode == UDP_ONLY ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-U" ) ; //<S2SV> } //<S2SV> if ( server -> mode == NULL && manager -> mode == TCP_AND_UDP ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-u" ) ; //<S2SV> } //<S2SV> if ( server -> fast_open [ 0 ] == 0 && manager -> fast_open ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>--fast-open" ) ; //<S2SV> } //<S2SV> if ( manager -> ipv6first ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-6" ) ; //<S2SV> } //<S2SV> if ( manager -> mtu ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>--mtu<S2SV_blank>%d" , manager -> mtu ) ; //<S2SV> } //<S2SV> if ( server -> plugin == NULL && manager -> plugin ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>--plugin<S2SV_blank>\\"%s\\"" , manager -> plugin ) ; //<S2SV> } //<S2SV> if ( server -> plugin_opts == NULL && manager -> plugin_opts ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>--plugin-opts<S2SV_blank>\\"%s\\"" , manager -> plugin_opts ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < manager -> nameserver_num ; i ++ ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-d<S2SV_blank>%s" , manager -> nameservers [ i ] ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < manager -> host_num ; i ++ ) { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>-s<S2SV_blank>%s" , manager -> hosts [ i ] ) ; //<S2SV> } //<S2SV> { //<S2SV> int len = strlen ( cmd ) ; //<S2SV> snprintf ( cmd + len , BUF_SIZE - len , "<S2SV_blank>--reuse-port" ) ; //<S2SV> } //<S2SV> if ( verbose ) { //<S2SV> LOGI ( "cmd:<S2SV_blank>%s" , cmd ) ; //<S2SV> } //<S2SV> return cmd ; //<S2SV> } //<S2SV> 