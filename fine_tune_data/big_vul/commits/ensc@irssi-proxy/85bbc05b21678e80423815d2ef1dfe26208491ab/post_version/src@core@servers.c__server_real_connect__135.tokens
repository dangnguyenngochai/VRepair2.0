static void server_real_connect ( SERVER_REC * server , IPADDR * ip , //<S2SV> const char * unix_socket ) //<S2SV> { //<S2SV> GIOChannel * handle ; //<S2SV> IPADDR * own_ip = NULL ; //<S2SV> const char * errmsg ; //<S2SV> char * errmsg2 ; //<S2SV> char ipaddr [ MAX_IP_LEN ] ; //<S2SV> int port ; //<S2SV> g_return_if_fail ( ip != NULL || unix_socket != NULL ) ; //<S2SV> signal_emit ( "server<S2SV_blank>connecting" , 2 , server , ip ) ; //<S2SV> if ( server -> connrec -> no_connect ) //<S2SV> return ; //<S2SV> if ( ip != NULL ) { //<S2SV> own_ip = ip == NULL ? NULL : //<S2SV> ( IPADDR_IS_V6 ( ip ) ? server -> connrec -> own_ip6 : //<S2SV> server -> connrec -> own_ip4 ) ; //<S2SV> port = server -> connrec -> proxy != NULL ? //<S2SV> server -> connrec -> proxy_port : server -> connrec -> port ; //<S2SV> handle = server -> connrec -> use_ssl ? //<S2SV> net_connect_ip_ssl ( ip , port , server -> connrec -> address , own_ip , server -> connrec -> ssl_cert , server -> connrec -> ssl_pkey , //<S2SV> server -> connrec -> ssl_cafile , server -> connrec -> ssl_capath , server -> connrec -> ssl_verify ) : //<S2SV> net_connect_ip ( ip , port , own_ip ) ; //<S2SV> } else { //<S2SV> handle = net_connect_unix ( unix_socket ) ; //<S2SV> } //<S2SV> if ( handle == NULL ) { //<S2SV> errmsg = g_strerror ( errno ) ; //<S2SV> errmsg2 = NULL ; //<S2SV> if ( errno == EADDRNOTAVAIL ) { //<S2SV> if ( own_ip != NULL ) { //<S2SV> net_ip2host ( own_ip , ipaddr ) ; //<S2SV> errmsg2 = g_strconcat ( errmsg , ":<S2SV_blank>" , ipaddr , NULL ) ; //<S2SV> } //<S2SV> server -> no_reconnect = TRUE ; //<S2SV> } //<S2SV> if ( server -> connrec -> use_ssl && errno == ENOSYS ) //<S2SV> server -> no_reconnect = TRUE ; //<S2SV> server -> connection_lost = TRUE ; //<S2SV> server_connect_failed ( server , errmsg2 ? errmsg2 : errmsg ) ; //<S2SV> g_free ( errmsg2 ) ; //<S2SV> } else { //<S2SV> server -> handle = net_sendbuffer_create ( handle , 0 ) ; //<S2SV> # ifdef HAVE_OPENSSL //<S2SV> if ( server -> connrec -> use_ssl ) //<S2SV> server_connect_callback_init_ssl ( server , handle ) ; //<S2SV> else //<S2SV> # endif //<S2SV> server -> connect_tag = //<S2SV> g_input_add ( handle , G_INPUT_WRITE | G_INPUT_READ , //<S2SV> ( GInputFunction ) //<S2SV> server_connect_callback_init , //<S2SV> server ) ; //<S2SV> } //<S2SV> } //<S2SV> 