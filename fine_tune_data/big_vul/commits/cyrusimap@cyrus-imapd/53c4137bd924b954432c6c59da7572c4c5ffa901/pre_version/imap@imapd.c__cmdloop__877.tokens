static void cmdloop ( void ) //<S2SV> { //<S2SV> int c ; //<S2SV> int usinguid , havepartition , havenamespace , recursive ; //<S2SV> static struct buf tag , cmd , arg1 , arg2 , arg3 ; //<S2SV> char * p , shut [ MAX_MAILBOX_PATH + 1 ] , cmdname [ 100 ] ; //<S2SV> const char * err ; //<S2SV> const char * commandmintimer ; //<S2SV> double commandmintimerd = 0.0 ; //<S2SV> struct sync_reserve_list * reserve_list = //<S2SV> sync_reserve_list_create ( SYNC_MESSAGE_LIST_HASH_SIZE ) ; //<S2SV> struct applepushserviceargs applepushserviceargs ; //<S2SV> prot_printf ( imapd_out , "*<S2SV_blank>OK<S2SV_blank>[CAPABILITY<S2SV_blank>" ) ; //<S2SV> capa_response ( CAPA_PREAUTH ) ; //<S2SV> prot_printf ( imapd_out , "]" ) ; //<S2SV> if ( config_serverinfo ) prot_printf ( imapd_out , "<S2SV_blank>%s" , config_servername ) ; //<S2SV> if ( config_serverinfo == IMAP_ENUM_SERVERINFO_ON ) { //<S2SV> prot_printf ( imapd_out , "<S2SV_blank>Cyrus<S2SV_blank>IMAP<S2SV_blank>%s" , cyrus_version ( ) ) ; //<S2SV> } //<S2SV> prot_printf ( imapd_out , "<S2SV_blank>server<S2SV_blank>ready\\r\\n" ) ; //<S2SV> cmd_cancelled ( ) ; //<S2SV> motd_file ( ) ; //<S2SV> commandmintimer = config_getstring ( IMAPOPT_COMMANDMINTIMER ) ; //<S2SV> cmdtime_settimer ( commandmintimer ? 1 : 0 ) ; //<S2SV> if ( commandmintimer ) { //<S2SV> commandmintimerd = atof ( commandmintimer ) ; //<S2SV> } //<S2SV> for ( ; ; ) { //<S2SV> index_release ( imapd_index ) ; //<S2SV> prot_flush ( imapd_out ) ; //<S2SV> if ( backend_current ) prot_flush ( backend_current -> out ) ; //<S2SV> proc_register ( config_ident , imapd_clienthost , imapd_userid , index_mboxname ( imapd_index ) , NULL ) ; //<S2SV> if ( ! imapd_userisadmin && imapd_userid && //<S2SV> ( shutdown_file ( shut , sizeof ( shut ) ) || //<S2SV> userdeny ( imapd_userid , config_ident , shut , sizeof ( shut ) ) ) ) { //<S2SV> for ( p = shut ; * p == '[' ; p ++ ) ; //<S2SV> prot_printf ( imapd_out , "*<S2SV_blank>BYE<S2SV_blank>[ALERT]<S2SV_blank>%s\\r\\n" , p ) ; //<S2SV> telemetry_rusage ( imapd_userid ) ; //<S2SV> shut_down ( 0 ) ; //<S2SV> } //<S2SV> signals_poll ( ) ; //<S2SV> if ( ! proxy_check_input ( protin , imapd_in , imapd_out , //<S2SV> backend_current ? backend_current -> in : NULL , //<S2SV> NULL , 0 ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> c = getword ( imapd_in , & tag ) ; //<S2SV> if ( c == EOF ) { //<S2SV> if ( ( err = prot_error ( imapd_in ) ) != NULL //<S2SV> && strcmp ( err , PROT_EOF_STRING ) ) { //<S2SV> syslog ( LOG_WARNING , "%s,<S2SV_blank>closing<S2SV_blank>connection" , err ) ; //<S2SV> prot_printf ( imapd_out , "*<S2SV_blank>BYE<S2SV_blank>%s\\r\\n" , err ) ; //<S2SV> } //<S2SV> goto done ; //<S2SV> } //<S2SV> if ( c != '<S2SV_blank>' || ! imparse_isatom ( tag . s ) || ( tag . s [ 0 ] == '*' && ! tag . s [ 1 ] ) ) { //<S2SV> prot_printf ( imapd_out , "*<S2SV_blank>BAD<S2SV_blank>Invalid<S2SV_blank>tag\\r\\n" ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> c = getword ( imapd_in , & cmd ) ; //<S2SV> if ( ! cmd . s [ 0 ] ) { //<S2SV> prot_printf ( imapd_out , "%s<S2SV_blank>BAD<S2SV_blank>Null<S2SV_blank>command\\r\\n" , tag . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> lcase ( cmd . s ) ; //<S2SV> xstrncpy ( cmdname , cmd . s , 99 ) ; //<S2SV> cmd . s [ 0 ] = toupper ( ( unsigned char ) cmd . s [ 0 ] ) ; //<S2SV> if ( config_getswitch ( IMAPOPT_CHATTY ) ) //<S2SV> syslog ( LOG_NOTICE , "command:<S2SV_blank>%s<S2SV_blank>%s" , tag . s , cmd . s ) ; //<S2SV> proc_register ( config_ident , imapd_clienthost , imapd_userid , index_mboxname ( imapd_index ) , cmd . s ) ; //<S2SV> if ( referral_kick ) { //<S2SV> kick_mupdate ( ) ; //<S2SV> referral_kick = 0 ; //<S2SV> } //<S2SV> if ( plaintextloginalert ) { //<S2SV> prot_printf ( imapd_out , "*<S2SV_blank>OK<S2SV_blank>[ALERT]<S2SV_blank>%s\\r\\n" , //<S2SV> plaintextloginalert ) ; //<S2SV> plaintextloginalert = NULL ; //<S2SV> } //<S2SV> if ( ! imapd_userid && ! strchr ( "AELNCIS" , cmd . s [ 0 ] ) ) goto nologin ; //<S2SV> cmdtime_starttimer ( ) ; //<S2SV> switch ( cmd . s [ 0 ] ) { //<S2SV> case 'A' : //<S2SV> if ( ! strcmp ( cmd . s , "Authenticate" ) ) { //<S2SV> int haveinitresp = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( ! imparse_isatom ( arg1 . s ) ) { //<S2SV> prot_printf ( imapd_out , "%s<S2SV_blank>BAD<S2SV_blank>Invalid<S2SV_blank>authenticate<S2SV_blank>mechanism\\r\\n" , tag . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> haveinitresp = 1 ; //<S2SV> c = getword ( imapd_in , & arg2 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> if ( imapd_userid ) { //<S2SV> prot_printf ( imapd_out , "%s<S2SV_blank>BAD<S2SV_blank>Already<S2SV_blank>authenticated\\r\\n" , tag . s ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> cmd_authenticate ( tag . s , arg1 . s , haveinitresp ? arg2 . s : NULL ) ; //<S2SV> snmp_increment ( AUTHENTICATE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! imapd_userid ) goto nologin ; //<S2SV> else if ( ! strcmp ( cmd . s , "Append" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_append ( tag . s , arg1 . s , NULL ) ; //<S2SV> snmp_increment ( APPEND_COUNT , 1 ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'C' : //<S2SV> if ( ! strcmp ( cmd . s , "Capability" ) ) { //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_capability ( tag . s ) ; //<S2SV> snmp_increment ( CAPABILITY_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! imapd_userid ) goto nologin ; //<S2SV> # ifdef HAVE_ZLIB //<S2SV> else if ( ! strcmp ( cmd . s , "Compress" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_compress ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( COMPRESS_COUNT , 1 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> else if ( ! strcmp ( cmd . s , "Check" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_noop ( tag . s , cmd . s ) ; //<S2SV> snmp_increment ( CHECK_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Copy" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> copy : //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( c == '\\r' ) goto missingargs ; //<S2SV> if ( c != '<S2SV_blank>' || ! imparse_issequence ( arg1 . s ) ) goto badsequence ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_copy ( tag . s , arg1 . s , arg2 . s , usinguid , 0 ) ; //<S2SV> snmp_increment ( COPY_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Create" ) ) { //<S2SV> struct dlist * extargs = NULL ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> c = parsecreateargs ( & extargs ) ; //<S2SV> if ( c == EOF ) goto badpartition ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_create ( tag . s , arg1 . s , extargs , 0 ) ; //<S2SV> dlist_free ( & extargs ) ; //<S2SV> snmp_increment ( CREATE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Close" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_close ( tag . s , cmd . s ) ; //<S2SV> snmp_increment ( CLOSE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'D' : //<S2SV> if ( ! strcmp ( cmd . s , "Delete" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_delete ( tag . s , arg1 . s , 0 , 0 ) ; //<S2SV> snmp_increment ( DELETE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Deleteacl" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_setacl ( tag . s , arg1 . s , arg2 . s , NULL ) ; //<S2SV> snmp_increment ( DELETEACL_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Dump" ) ) { //<S2SV> int uid_start = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( ! imparse_isnumber ( arg2 . s ) ) goto extraargs ; //<S2SV> uid_start = atoi ( arg2 . s ) ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_dump ( tag . s , arg1 . s , uid_start ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'E' : //<S2SV> if ( ! imapd_userid ) goto nologin ; //<S2SV> else if ( ! strcmp ( cmd . s , "Enable" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_enable ( tag . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Expunge" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_expunge ( tag . s , 0 ) ; //<S2SV> snmp_increment ( EXPUNGE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Examine" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> prot_ungetc ( c , imapd_in ) ; //<S2SV> cmd_select ( tag . s , cmd . s , arg1 . s ) ; //<S2SV> snmp_increment ( EXAMINE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'F' : //<S2SV> if ( ! strcmp ( cmd . s , "Fetch" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> fetch : //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( c == '\\r' ) goto missingargs ; //<S2SV> if ( c != '<S2SV_blank>' || ! imparse_issequence ( arg1 . s ) ) goto badsequence ; //<S2SV> cmd_fetch ( tag . s , arg1 . s , usinguid ) ; //<S2SV> snmp_increment ( FETCH_COUNT , 1 ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'G' : //<S2SV> if ( ! strcmp ( cmd . s , "Getacl" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_getacl ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( GETACL_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Getannotation" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_getannotation ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( GETANNOTATION_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Getmetadata" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_getmetadata ( tag . s ) ; //<S2SV> snmp_increment ( GETANNOTATION_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Getquota" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_getquota ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( GETQUOTA_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Getquotaroot" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_getquotaroot ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( GETQUOTAROOT_COUNT , 1 ) ; //<S2SV> } //<S2SV> # ifdef HAVE_SSL //<S2SV> else if ( ! strcmp ( cmd . s , "Genurlauth" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_genurlauth ( tag . s ) ; //<S2SV> } //<S2SV> # endif //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'I' : //<S2SV> if ( ! strcmp ( cmd . s , "Id" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_id ( tag . s ) ; //<S2SV> snmp_increment ( ID_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! imapd_userid ) goto nologin ; //<S2SV> else if ( ! strcmp ( cmd . s , "Idle" ) && idle_enabled ( ) ) { //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_idle ( tag . s ) ; //<S2SV> snmp_increment ( IDLE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'L' : //<S2SV> if ( ! strcmp ( cmd . s , "Login" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_login ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( LOGIN_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Logout" ) ) { //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> snmp_increment ( LOGOUT_COUNT , 1 ) ; //<S2SV> if ( backend_current ) imapd_check ( NULL , 0 ) ; //<S2SV> prot_printf ( imapd_out , "*<S2SV_blank>BYE<S2SV_blank>%s\\r\\n" , //<S2SV> error_message ( IMAP_BYE_LOGOUT ) ) ; //<S2SV> prot_printf ( imapd_out , "%s<S2SV_blank>OK<S2SV_blank>%s\\r\\n" , tag . s , //<S2SV> error_message ( IMAP_OK_COMPLETED ) ) ; //<S2SV> if ( imapd_userid && * imapd_userid ) { //<S2SV> telemetry_rusage ( imapd_userid ) ; //<S2SV> } //<S2SV> goto done ; //<S2SV> } //<S2SV> else if ( ! imapd_userid ) goto nologin ; //<S2SV> else if ( ! strcmp ( cmd . s , "List" ) ) { //<S2SV> struct listargs listargs ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> memset ( & listargs , 0 , sizeof ( struct listargs ) ) ; //<S2SV> listargs . ret = LIST_RET_CHILDREN ; //<S2SV> getlistargs ( tag . s , & listargs ) ; //<S2SV> if ( listargs . pat . count ) cmd_list ( tag . s , & listargs ) ; //<S2SV> snmp_increment ( LIST_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Lsub" ) ) { //<S2SV> struct listargs listargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> memset ( & listargs , 0 , sizeof ( struct listargs ) ) ; //<S2SV> listargs . cmd = LIST_CMD_LSUB ; //<S2SV> listargs . sel = LIST_SEL_SUBSCRIBED ; //<S2SV> if ( ! strcasecmpsafe ( imapd_magicplus , "+dav" ) ) //<S2SV> listargs . sel |= LIST_SEL_DAV ; //<S2SV> listargs . ref = arg1 . s ; //<S2SV> strarray_append ( & listargs . pat , arg2 . s ) ; //<S2SV> cmd_list ( tag . s , & listargs ) ; //<S2SV> snmp_increment ( LSUB_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Listrights" ) ) { //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_listrights ( tag . s , arg1 . s , arg2 . s ) ; //<S2SV> snmp_increment ( LISTRIGHTS_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Localappend" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_append ( tag . s , arg1 . s , * arg2 . s ? arg2 . s : NULL ) ; //<S2SV> snmp_increment ( APPEND_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Localcreate" ) ) { //<S2SV> struct dlist * extargs = NULL ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> c = parsecreateargs ( & extargs ) ; //<S2SV> if ( c == EOF ) goto badpartition ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_create ( tag . s , arg1 . s , extargs , 1 ) ; //<S2SV> dlist_free ( & extargs ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Localdelete" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_delete ( tag . s , arg1 . s , 1 , 1 ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'M' : //<S2SV> if ( ! strcmp ( cmd . s , "Myrights" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_myrights ( tag . s , arg1 . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Mupdatepush" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_mupdatepush ( tag . s , arg1 . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Move" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> move : //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( c == '\\r' ) goto missingargs ; //<S2SV> if ( c != '<S2SV_blank>' || ! imparse_issequence ( arg1 . s ) ) goto badsequence ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_copy ( tag . s , arg1 . s , arg2 . s , usinguid , 1 ) ; //<S2SV> snmp_increment ( COPY_COUNT , 1 ) ; //<S2SV> } else goto badcmd ; //<S2SV> break ; //<S2SV> case 'N' : //<S2SV> if ( ! strcmp ( cmd . s , "Noop" ) ) { //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_noop ( tag . s , cmd . s ) ; //<S2SV> } //<S2SV> else if ( ! imapd_userid ) goto nologin ; //<S2SV> else if ( ! strcmp ( cmd . s , "Namespace" ) ) { //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_namespace ( tag . s ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'R' : //<S2SV> if ( ! strcmp ( cmd . s , "Rename" ) ) { //<S2SV> havepartition = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> havepartition = 1 ; //<S2SV> c = getword ( imapd_in , & arg3 ) ; //<S2SV> if ( ! imparse_isatom ( arg3 . s ) ) goto badpartition ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_rename ( tag . s , arg1 . s , arg2 . s , havepartition ? arg3 . s : 0 ) ; //<S2SV> } else if ( ! strcmp ( cmd . s , "Reconstruct" ) ) { //<S2SV> recursive = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> c = getword ( imapd_in , & arg2 ) ; //<S2SV> if ( ! imparse_isatom ( arg2 . s ) ) //<S2SV> goto extraargs ; //<S2SV> else if ( ! strcasecmp ( arg2 . s , "RECURSIVE" ) ) //<S2SV> recursive = 1 ; //<S2SV> else //<S2SV> goto extraargs ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_reconstruct ( tag . s , arg1 . s , recursive ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Rlist" ) ) { //<S2SV> struct listargs listargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> memset ( & listargs , 0 , sizeof ( struct listargs ) ) ; //<S2SV> listargs . sel = LIST_SEL_REMOTE ; //<S2SV> listargs . ret = LIST_RET_CHILDREN ; //<S2SV> listargs . ref = arg1 . s ; //<S2SV> strarray_append ( & listargs . pat , arg2 . s ) ; //<S2SV> cmd_list ( tag . s , & listargs ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Rlsub" ) ) { //<S2SV> struct listargs listargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> memset ( & listargs , 0 , sizeof ( struct listargs ) ) ; //<S2SV> listargs . cmd = LIST_CMD_LSUB ; //<S2SV> listargs . sel = LIST_SEL_REMOTE | LIST_SEL_SUBSCRIBED ; //<S2SV> listargs . ref = arg1 . s ; //<S2SV> strarray_append ( & listargs . pat , arg2 . s ) ; //<S2SV> cmd_list ( tag . s , & listargs ) ; //<S2SV> } //<S2SV> # ifdef HAVE_SSL //<S2SV> else if ( ! strcmp ( cmd . s , "Resetkey" ) ) { //<S2SV> int have_mbox = 0 , have_mech = 0 ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> have_mbox = 1 ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> have_mech = 1 ; //<S2SV> c = getword ( imapd_in , & arg2 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_resetkey ( tag . s , have_mbox ? arg1 . s : 0 , //<S2SV> have_mech ? arg2 . s : 0 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'S' : //<S2SV> if ( ! strcmp ( cmd . s , "Starttls" ) ) { //<S2SV> if ( ! tls_enabled ( ) ) { //<S2SV> goto badcmd ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> prot_flush ( imapd_in ) ; //<S2SV> if ( imapd_userid != NULL ) { //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Can\'t<S2SV_blank>Starttls<S2SV_blank>after<S2SV_blank>authentication\\r\\n" , tag . s ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( imapd_compress_done == 1 ) { //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Can\'t<S2SV_blank>Starttls<S2SV_blank>after<S2SV_blank>Compress\\r\\n" , tag . s ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( imapd_starttls_done == 1 ) { //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Already<S2SV_blank>did<S2SV_blank>a<S2SV_blank>successful<S2SV_blank>Starttls\\r\\n" , //<S2SV> tag . s ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> cmd_starttls ( tag . s , 0 ) ; //<S2SV> snmp_increment ( STARTTLS_COUNT , 1 ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! imapd_userid ) { //<S2SV> goto nologin ; //<S2SV> } else if ( ! strcmp ( cmd . s , "Store" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> store : //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' || ! imparse_issequence ( arg1 . s ) ) goto badsequence ; //<S2SV> cmd_store ( tag . s , arg1 . s , usinguid ) ; //<S2SV> snmp_increment ( STORE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Select" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> prot_ungetc ( c , imapd_in ) ; //<S2SV> cmd_select ( tag . s , cmd . s , arg1 . s ) ; //<S2SV> snmp_increment ( SELECT_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Search" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> search : //<S2SV> cmd_search ( tag . s , usinguid ) ; //<S2SV> snmp_increment ( SEARCH_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Subscribe" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> havenamespace = 0 ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> havenamespace = 1 ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> } //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> if ( havenamespace ) { //<S2SV> cmd_changesub ( tag . s , arg1 . s , arg2 . s , 1 ) ; //<S2SV> } //<S2SV> else { //<S2SV> cmd_changesub ( tag . s , ( char * ) 0 , arg1 . s , 1 ) ; //<S2SV> } //<S2SV> snmp_increment ( SUBSCRIBE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Setacl" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg3 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_setacl ( tag . s , arg1 . s , arg2 . s , arg3 . s ) ; //<S2SV> snmp_increment ( SETACL_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Setannotation" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_setannotation ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( SETANNOTATION_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Setmetadata" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_setmetadata ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( SETANNOTATION_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Setquota" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_setquota ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( SETQUOTA_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Sort" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> sort : //<S2SV> cmd_sort ( tag . s , usinguid ) ; //<S2SV> snmp_increment ( SORT_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Status" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_status ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( STATUS_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Scan" ) ) { //<S2SV> struct listargs listargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg3 ) ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> memset ( & listargs , 0 , sizeof ( struct listargs ) ) ; //<S2SV> listargs . ref = arg1 . s ; //<S2SV> strarray_append ( & listargs . pat , arg2 . s ) ; //<S2SV> listargs . scan = arg3 . s ; //<S2SV> cmd_list ( tag . s , & listargs ) ; //<S2SV> snmp_increment ( SCAN_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Syncapply" ) ) { //<S2SV> struct dlist * kl = sync_parseline ( imapd_in ) ; //<S2SV> if ( kl ) { //<S2SV> cmd_syncapply ( tag . s , kl , reserve_list ) ; //<S2SV> dlist_free ( & kl ) ; //<S2SV> } //<S2SV> else goto extraargs ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Syncget" ) ) { //<S2SV> struct dlist * kl = sync_parseline ( imapd_in ) ; //<S2SV> if ( kl ) { //<S2SV> cmd_syncget ( tag . s , kl ) ; //<S2SV> dlist_free ( & kl ) ; //<S2SV> } //<S2SV> else goto extraargs ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Syncrestart" ) ) { //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_syncrestart ( tag . s , & reserve_list , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Syncrestore" ) ) { //<S2SV> struct dlist * kl = sync_parseline ( imapd_in ) ; //<S2SV> if ( kl ) { //<S2SV> cmd_syncrestore ( tag . s , kl , reserve_list ) ; //<S2SV> dlist_free ( & kl ) ; //<S2SV> } //<S2SV> else goto extraargs ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'T' : //<S2SV> if ( ! strcmp ( cmd . s , "Thread" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> thread : //<S2SV> cmd_thread ( tag . s , usinguid ) ; //<S2SV> snmp_increment ( THREAD_COUNT , 1 ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'U' : //<S2SV> if ( ! strcmp ( cmd . s , "Uid" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 1 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> lcase ( arg1 . s ) ; //<S2SV> xstrncpy ( cmdname , arg1 . s , 99 ) ; //<S2SV> if ( ! strcmp ( arg1 . s , "fetch" ) ) { //<S2SV> goto fetch ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "store" ) ) { //<S2SV> goto store ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "search" ) ) { //<S2SV> goto search ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "sort" ) ) { //<S2SV> goto sort ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "thread" ) ) { //<S2SV> goto thread ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "copy" ) ) { //<S2SV> goto copy ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "move" ) ) { //<S2SV> goto move ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "xmove" ) ) { //<S2SV> goto move ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "expunge" ) ) { //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( ! imparse_issequence ( arg1 . s ) ) goto badsequence ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_expunge ( tag . s , arg1 . s ) ; //<S2SV> snmp_increment ( EXPUNGE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "xrunannotator" ) ) { //<S2SV> goto xrunannotator ; //<S2SV> } //<S2SV> else { //<S2SV> prot_printf ( imapd_out , "%s<S2SV_blank>BAD<S2SV_blank>Unrecognized<S2SV_blank>UID<S2SV_blank>subcommand\\r\\n" , tag . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Unsubscribe" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> havenamespace = 0 ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> havenamespace = 1 ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> } //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> if ( havenamespace ) { //<S2SV> cmd_changesub ( tag . s , arg1 . s , arg2 . s , 0 ) ; //<S2SV> } //<S2SV> else { //<S2SV> cmd_changesub ( tag . s , ( char * ) 0 , arg1 . s , 0 ) ; //<S2SV> } //<S2SV> snmp_increment ( UNSUBSCRIBE_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Unselect" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_close ( tag . s , cmd . s ) ; //<S2SV> snmp_increment ( UNSELECT_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Undump" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_undump ( tag . s , arg1 . s ) ; //<S2SV> } //<S2SV> # ifdef HAVE_SSL //<S2SV> else if ( ! strcmp ( cmd . s , "Urlfetch" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_urlfetch ( tag . s ) ; //<S2SV> } //<S2SV> # endif //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> case 'X' : //<S2SV> if ( ! strcmp ( cmd . s , "Xbackup" ) ) { //<S2SV> int havechannel = 0 ; //<S2SV> if ( ! config_getswitch ( IMAPOPT_XBACKUP_ENABLED ) ) //<S2SV> goto badcmd ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> havechannel = 1 ; //<S2SV> c = getword ( imapd_in , & arg2 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_xbackup ( tag . s , arg1 . s , havechannel ? arg2 . s : NULL ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xconvfetch" ) ) { //<S2SV> cmd_xconvfetch ( tag . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xconvmultisort" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> cmd_xconvmultisort ( tag . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xconvsort" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> cmd_xconvsort ( tag . s , 0 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xconvupdates" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> cmd_xconvsort ( tag . s , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xfer" ) ) { //<S2SV> int havepartition = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == '<S2SV_blank>' ) { //<S2SV> c = getastring ( imapd_in , imapd_out , & arg3 ) ; //<S2SV> if ( ! imparse_isatom ( arg3 . s ) ) goto badpartition ; //<S2SV> havepartition = 1 ; //<S2SV> } //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_xfer ( tag . s , arg1 . s , arg2 . s , //<S2SV> ( havepartition ? arg3 . s : NULL ) ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xconvmeta" ) ) { //<S2SV> cmd_xconvmeta ( tag . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xlist" ) ) { //<S2SV> struct listargs listargs ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> memset ( & listargs , 0 , sizeof ( struct listargs ) ) ; //<S2SV> listargs . cmd = LIST_CMD_XLIST ; //<S2SV> listargs . ret = LIST_RET_CHILDREN | LIST_RET_SPECIALUSE ; //<S2SV> getlistargs ( tag . s , & listargs ) ; //<S2SV> if ( listargs . pat . count ) cmd_list ( tag . s , & listargs ) ; //<S2SV> snmp_increment ( LIST_COUNT , 1 ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xmove" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> goto move ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xrunannotator" ) ) { //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> usinguid = 0 ; //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> xrunannotator : //<S2SV> c = getword ( imapd_in , & arg1 ) ; //<S2SV> if ( ! arg1 . len || ! imparse_issequence ( arg1 . s ) ) goto badsequence ; //<S2SV> cmd_xrunannotator ( tag . s , arg1 . s , usinguid ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xsnippets" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> if ( ! imapd_index && ! backend_current ) goto nomailbox ; //<S2SV> cmd_xsnippets ( tag . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xstats" ) ) { //<S2SV> cmd_xstats ( tag . s , c ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xwarmup" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> cmd_xwarmup ( tag . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xkillmy" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_xkillmy ( tag . s , arg1 . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xforever" ) ) { //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_xforever ( tag . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( cmd . s , "Xmeid" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto missingargs ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto extraargs ; //<S2SV> cmd_xmeid ( tag . s , arg1 . s ) ; //<S2SV> } //<S2SV> else if ( apns_enabled && ! strcmp ( cmd . s , "Xapplepushservice" ) ) { //<S2SV> if ( c != '<S2SV_blank>' ) goto missingargs ; //<S2SV> memset ( & applepushserviceargs , 0 , sizeof ( struct applepushserviceargs ) ) ; //<S2SV> do { //<S2SV> c = getastring ( imapd_in , imapd_out , & arg1 ) ; //<S2SV> if ( c == EOF ) goto aps_missingargs ; //<S2SV> if ( ! strcmp ( arg1 . s , "mailboxes" ) ) { //<S2SV> c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '(' ) //<S2SV> goto aps_missingargs ; //<S2SV> c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != ')' ) { //<S2SV> prot_ungetc ( c , imapd_in ) ; //<S2SV> do { //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( c == EOF ) break ; //<S2SV> strarray_push ( & applepushserviceargs . mailboxes , arg2 . s ) ; //<S2SV> } while ( c == '<S2SV_blank>' ) ; //<S2SV> } //<S2SV> if ( c != ')' ) //<S2SV> goto aps_missingargs ; //<S2SV> c = prot_getc ( imapd_in ) ; //<S2SV> } //<S2SV> else { //<S2SV> c = getastring ( imapd_in , imapd_out , & arg2 ) ; //<S2SV> if ( ! strcmp ( arg1 . s , "aps-version" ) ) { //<S2SV> if ( ! imparse_isnumber ( arg2 . s ) ) goto aps_extraargs ; //<S2SV> applepushserviceargs . aps_version = atoi ( arg2 . s ) ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg1 . s , "aps-account-id" ) ) //<S2SV> buf_copy ( & applepushserviceargs . aps_account_id , & arg2 ) ; //<S2SV> else if ( ! strcmp ( arg1 . s , "aps-device-token" ) ) //<S2SV> buf_copy ( & applepushserviceargs . aps_device_token , & arg2 ) ; //<S2SV> else if ( ! strcmp ( arg1 . s , "aps-subtopic" ) ) //<S2SV> buf_copy ( & applepushserviceargs . aps_subtopic , & arg2 ) ; //<S2SV> else //<S2SV> goto aps_extraargs ; //<S2SV> } //<S2SV> } while ( c == '<S2SV_blank>' ) ; //<S2SV> if ( c == '\\r' ) c = prot_getc ( imapd_in ) ; //<S2SV> if ( c != '\\n' ) goto aps_extraargs ; //<S2SV> cmd_xapplepushservice ( tag . s , & applepushserviceargs ) ; //<S2SV> } //<S2SV> else goto badcmd ; //<S2SV> break ; //<S2SV> default : //<S2SV> badcmd : //<S2SV> prot_printf ( imapd_out , "%s<S2SV_blank>BAD<S2SV_blank>Unrecognized<S2SV_blank>command\\r\\n" , tag . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> } //<S2SV> if ( commandmintimer && strcmp ( "idle" , cmdname ) ) { //<S2SV> double cmdtime , nettime ; //<S2SV> const char * mboxname = index_mboxname ( imapd_index ) ; //<S2SV> if ( ! mboxname ) mboxname = "<none>" ; //<S2SV> cmdtime_endtimer ( & cmdtime , & nettime ) ; //<S2SV> if ( cmdtime >= commandmintimerd ) { //<S2SV> syslog ( LOG_NOTICE , "cmdtimer:<S2SV_blank>\'%s\'<S2SV_blank>\'%s\'<S2SV_blank>\'%s\'<S2SV_blank>\'%f\'<S2SV_blank>\'%f\'<S2SV_blank>\'%f\'" , //<S2SV> imapd_userid ? imapd_userid : "<none>" , cmdname , mboxname , //<S2SV> cmdtime , nettime , cmdtime + nettime ) ; //<S2SV> } //<S2SV> } //<S2SV> continue ; //<S2SV> nologin : //<S2SV> prot_printf ( imapd_out , "%s<S2SV_blank>BAD<S2SV_blank>Please<S2SV_blank>login<S2SV_blank>first\\r\\n" , tag . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> nomailbox : //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Please<S2SV_blank>select<S2SV_blank>a<S2SV_blank>mailbox<S2SV_blank>first\\r\\n" , tag . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> aps_missingargs : //<S2SV> buf_free ( & applepushserviceargs . aps_account_id ) ; //<S2SV> buf_free ( & applepushserviceargs . aps_device_token ) ; //<S2SV> buf_free ( & applepushserviceargs . aps_subtopic ) ; //<S2SV> strarray_fini ( & applepushserviceargs . mailboxes ) ; //<S2SV> missingargs : //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Missing<S2SV_blank>required<S2SV_blank>argument<S2SV_blank>to<S2SV_blank>%s\\r\\n" , tag . s , cmd . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> aps_extraargs : //<S2SV> buf_free ( & applepushserviceargs . aps_account_id ) ; //<S2SV> buf_free ( & applepushserviceargs . aps_device_token ) ; //<S2SV> buf_free ( & applepushserviceargs . aps_subtopic ) ; //<S2SV> strarray_fini ( & applepushserviceargs . mailboxes ) ; //<S2SV> extraargs : //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Unexpected<S2SV_blank>extra<S2SV_blank>arguments<S2SV_blank>to<S2SV_blank>%s\\r\\n" , tag . s , cmd . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> badsequence : //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Invalid<S2SV_blank>sequence<S2SV_blank>in<S2SV_blank>%s\\r\\n" , tag . s , cmd . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> badpartition : //<S2SV> prot_printf ( imapd_out , //<S2SV> "%s<S2SV_blank>BAD<S2SV_blank>Invalid<S2SV_blank>partition<S2SV_blank>name<S2SV_blank>in<S2SV_blank>%s\\r\\n" , tag . s , cmd . s ) ; //<S2SV> eatline ( imapd_in , c ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> done : //<S2SV> cmd_syncrestart ( NULL , & reserve_list , 0 ) ; //<S2SV> } //<S2SV> 