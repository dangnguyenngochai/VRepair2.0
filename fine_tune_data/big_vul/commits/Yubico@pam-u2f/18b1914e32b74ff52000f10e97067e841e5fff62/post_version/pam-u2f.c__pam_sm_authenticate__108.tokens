int pam_sm_authenticate ( pam_handle_t * pamh , int flags , int argc , //<S2SV> const char * * argv ) { //<S2SV> struct passwd * pw = NULL , pw_s ; //<S2SV> const char * user = NULL ; //<S2SV> cfg_t cfg_st ; //<S2SV> cfg_t * cfg = & cfg_st ; //<S2SV> char buffer [ BUFSIZE ] ; //<S2SV> char * buf = NULL ; //<S2SV> char * authfile_dir ; //<S2SV> size_t authfile_dir_len ; //<S2SV> int pgu_ret , gpn_ret ; //<S2SV> int retval = PAM_IGNORE ; //<S2SV> device_t * devices = NULL ; //<S2SV> unsigned n_devices = 0 ; //<S2SV> int openasuser ; //<S2SV> int should_free_origin = 0 ; //<S2SV> int should_free_appid = 0 ; //<S2SV> int should_free_auth_file = 0 ; //<S2SV> int should_free_authpending_file = 0 ; //<S2SV> parse_cfg ( flags , argc , argv , cfg ) ; //<S2SV> if ( ! cfg -> origin ) { //<S2SV> strcpy ( buffer , DEFAULT_ORIGIN_PREFIX ) ; //<S2SV> if ( gethostname ( buffer + strlen ( DEFAULT_ORIGIN_PREFIX ) , //<S2SV> BUFSIZE - strlen ( DEFAULT_ORIGIN_PREFIX ) ) == - 1 ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>get<S2SV_blank>host<S2SV_blank>name" ) ; //<S2SV> goto done ; //<S2SV> } //<S2SV> DBG ( "Origin<S2SV_blank>not<S2SV_blank>specified,<S2SV_blank>using<S2SV_blank>\\"%s\\"" , buffer ) ; //<S2SV> cfg -> origin = strdup ( buffer ) ; //<S2SV> if ( ! cfg -> origin ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory" ) ; //<S2SV> goto done ; //<S2SV> } else { //<S2SV> should_free_origin = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! cfg -> appid ) { //<S2SV> DBG ( "Appid<S2SV_blank>not<S2SV_blank>specified,<S2SV_blank>using<S2SV_blank>the<S2SV_blank>same<S2SV_blank>value<S2SV_blank>of<S2SV_blank>origin<S2SV_blank>(%s)" , //<S2SV> cfg -> origin ) ; //<S2SV> cfg -> appid = strdup ( cfg -> origin ) ; //<S2SV> if ( ! cfg -> appid ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory" ) //<S2SV> goto done ; //<S2SV> } else { //<S2SV> should_free_appid = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( cfg -> max_devs == 0 ) { //<S2SV> DBG ( "Maximum<S2SV_blank>devices<S2SV_blank>number<S2SV_blank>not<S2SV_blank>set.<S2SV_blank>Using<S2SV_blank>default<S2SV_blank>(%d)" , MAX_DEVS ) ; //<S2SV> cfg -> max_devs = MAX_DEVS ; //<S2SV> } //<S2SV> devices = malloc ( sizeof ( device_t ) * cfg -> max_devs ) ; //<S2SV> if ( ! devices ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory" ) ; //<S2SV> retval = PAM_IGNORE ; //<S2SV> goto done ; //<S2SV> } //<S2SV> pgu_ret = pam_get_user ( pamh , & user , NULL ) ; //<S2SV> if ( pgu_ret != PAM_SUCCESS || user == NULL ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>access<S2SV_blank>user<S2SV_blank>%s" , user ) ; //<S2SV> retval = PAM_CONV_ERR ; //<S2SV> goto done ; //<S2SV> } //<S2SV> DBG ( "Requesting<S2SV_blank>authentication<S2SV_blank>for<S2SV_blank>user<S2SV_blank>%s" , user ) ; //<S2SV> gpn_ret = getpwnam_r ( user , & pw_s , buffer , sizeof ( buffer ) , & pw ) ; //<S2SV> if ( gpn_ret != 0 || pw == NULL || pw -> pw_dir == NULL || //<S2SV> pw -> pw_dir [ 0 ] != '/' ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>retrieve<S2SV_blank>credentials<S2SV_blank>for<S2SV_blank>user<S2SV_blank>%s,<S2SV_blank>(%s)" , user , //<S2SV> strerror ( errno ) ) ; //<S2SV> retval = PAM_USER_UNKNOWN ; //<S2SV> goto done ; //<S2SV> } //<S2SV> DBG ( "Found<S2SV_blank>user<S2SV_blank>%s" , user ) ; //<S2SV> DBG ( "Home<S2SV_blank>directory<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>%s" , user , pw -> pw_dir ) ; //<S2SV> if ( ! cfg -> auth_file ) { //<S2SV> buf = NULL ; //<S2SV> authfile_dir = secure_getenv ( DEFAULT_AUTHFILE_DIR_VAR ) ; //<S2SV> if ( ! authfile_dir ) { //<S2SV> DBG ( "Variable<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>set.<S2SV_blank>Using<S2SV_blank>default<S2SV_blank>value<S2SV_blank>($HOME/.config/)" , //<S2SV> DEFAULT_AUTHFILE_DIR_VAR ) ; //<S2SV> authfile_dir_len = //<S2SV> strlen ( pw -> pw_dir ) + strlen ( "/.config" ) + strlen ( DEFAULT_AUTHFILE ) + 1 ; //<S2SV> buf = malloc ( sizeof ( char ) * ( authfile_dir_len ) ) ; //<S2SV> if ( ! buf ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory" ) ; //<S2SV> retval = PAM_IGNORE ; //<S2SV> goto done ; //<S2SV> } //<S2SV> snprintf ( buf , authfile_dir_len , //<S2SV> "%s/.config%s" , pw -> pw_dir , DEFAULT_AUTHFILE ) ; //<S2SV> } else { //<S2SV> DBG ( "Variable<S2SV_blank>%s<S2SV_blank>set<S2SV_blank>to<S2SV_blank>%s" , DEFAULT_AUTHFILE_DIR_VAR , authfile_dir ) ; //<S2SV> authfile_dir_len = strlen ( authfile_dir ) + strlen ( DEFAULT_AUTHFILE ) + 1 ; //<S2SV> buf = malloc ( sizeof ( char ) * ( authfile_dir_len ) ) ; //<S2SV> if ( ! buf ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory" ) ; //<S2SV> retval = PAM_IGNORE ; //<S2SV> goto done ; //<S2SV> } //<S2SV> snprintf ( buf , authfile_dir_len , //<S2SV> "%s%s" , authfile_dir , DEFAULT_AUTHFILE ) ; //<S2SV> } //<S2SV> DBG ( "Using<S2SV_blank>default<S2SV_blank>authentication<S2SV_blank>file<S2SV_blank>%s" , buf ) ; //<S2SV> cfg -> auth_file = buf ; //<S2SV> should_free_auth_file = 1 ; //<S2SV> buf = NULL ; //<S2SV> } else { //<S2SV> DBG ( "Using<S2SV_blank>authentication<S2SV_blank>file<S2SV_blank>%s" , cfg -> auth_file ) ; //<S2SV> } //<S2SV> openasuser = geteuid ( ) == 0 && cfg -> openasuser ; //<S2SV> if ( openasuser ) { //<S2SV> if ( seteuid ( pw_s . pw_uid ) ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>user<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw_s . pw_uid ) ; //<S2SV> retval = PAM_IGNORE ; //<S2SV> goto done ; //<S2SV> } //<S2SV> DBG ( "Switched<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw_s . pw_uid ) ; //<S2SV> } //<S2SV> retval = get_devices_from_authfile ( cfg -> auth_file , user , cfg -> max_devs , //<S2SV> cfg -> debug , cfg -> debug_file , //<S2SV> devices , & n_devices ) ; //<S2SV> if ( openasuser ) { //<S2SV> if ( seteuid ( 0 ) ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>back<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>0" ) ; //<S2SV> retval = PAM_IGNORE ; //<S2SV> goto done ; //<S2SV> } //<S2SV> DBG ( "Switched<S2SV_blank>back<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>0" ) ; //<S2SV> } //<S2SV> if ( retval != 1 ) { //<S2SV> n_devices = 0 ; //<S2SV> } //<S2SV> if ( n_devices == 0 ) { //<S2SV> if ( cfg -> nouserok ) { //<S2SV> DBG ( "Found<S2SV_blank>no<S2SV_blank>devices<S2SV_blank>but<S2SV_blank>nouserok<S2SV_blank>specified.<S2SV_blank>Skipping<S2SV_blank>authentication" ) ; //<S2SV> retval = PAM_SUCCESS ; //<S2SV> goto done ; //<S2SV> } else if ( retval != 1 ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>get<S2SV_blank>devices<S2SV_blank>from<S2SV_blank>file<S2SV_blank>%s" , cfg -> auth_file ) ; //<S2SV> retval = PAM_AUTHINFO_UNAVAIL ; //<S2SV> goto done ; //<S2SV> } else { //<S2SV> DBG ( "Found<S2SV_blank>no<S2SV_blank>devices.<S2SV_blank>Aborting." ) ; //<S2SV> retval = PAM_AUTHINFO_UNAVAIL ; //<S2SV> goto done ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! cfg -> authpending_file ) { //<S2SV> int actual_size = snprintf ( buffer , BUFSIZE , DEFAULT_AUTHPENDING_FILE_PATH , getuid ( ) ) ; //<S2SV> if ( actual_size >= 0 && actual_size < BUFSIZE ) { //<S2SV> cfg -> authpending_file = strdup ( buffer ) ; //<S2SV> } //<S2SV> if ( ! cfg -> authpending_file ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>the<S2SV_blank>authpending_file,<S2SV_blank>touch<S2SV_blank>request<S2SV_blank>notifications<S2SV_blank>will<S2SV_blank>not<S2SV_blank>be<S2SV_blank>emitted" ) ; //<S2SV> } else { //<S2SV> should_free_authpending_file = 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( strlen ( cfg -> authpending_file ) == 0 ) { //<S2SV> DBG ( "authpending_file<S2SV_blank>is<S2SV_blank>set<S2SV_blank>to<S2SV_blank>an<S2SV_blank>empty<S2SV_blank>value,<S2SV_blank>touch<S2SV_blank>request<S2SV_blank>notifications<S2SV_blank>will<S2SV_blank>be<S2SV_blank>disabled" ) ; //<S2SV> cfg -> authpending_file = NULL ; //<S2SV> } //<S2SV> } //<S2SV> int authpending_file_descriptor = - 1 ; //<S2SV> if ( cfg -> authpending_file ) { //<S2SV> DBG ( "Using<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>for<S2SV_blank>emitting<S2SV_blank>touch<S2SV_blank>request<S2SV_blank>notifications" , cfg -> authpending_file ) ; //<S2SV> authpending_file_descriptor = //<S2SV> open ( cfg -> authpending_file , O_RDONLY | O_CREAT | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY , 0664 ) ; //<S2SV> if ( authpending_file_descriptor < 0 ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>emit<S2SV_blank>\'authentication<S2SV_blank>started\'<S2SV_blank>notification<S2SV_blank>by<S2SV_blank>opening<S2SV_blank>the<S2SV_blank>file<S2SV_blank>\'%s\',<S2SV_blank>(%s)" , //<S2SV> cfg -> authpending_file , strerror ( errno ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( cfg -> manual == 0 ) { //<S2SV> if ( cfg -> interactive ) { //<S2SV> converse ( pamh , PAM_PROMPT_ECHO_ON , //<S2SV> cfg -> prompt != NULL ? cfg -> prompt : DEFAULT_PROMPT ) ; //<S2SV> } //<S2SV> retval = do_authentication ( cfg , devices , n_devices , pamh ) ; //<S2SV> } else { //<S2SV> retval = do_manual_authentication ( cfg , devices , n_devices , pamh ) ; //<S2SV> } //<S2SV> if ( authpending_file_descriptor >= 0 ) { //<S2SV> if ( close ( authpending_file_descriptor ) < 0 ) { //<S2SV> DBG ( "Unable<S2SV_blank>to<S2SV_blank>emit<S2SV_blank>\'authentication<S2SV_blank>stopped\'<S2SV_blank>notification<S2SV_blank>by<S2SV_blank>closing<S2SV_blank>the<S2SV_blank>file<S2SV_blank>\'%s\',<S2SV_blank>(%s)" , //<S2SV> cfg -> authpending_file , strerror ( errno ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( retval != 1 ) { //<S2SV> DBG ( "do_authentication<S2SV_blank>returned<S2SV_blank>%d" , retval ) ; //<S2SV> retval = PAM_AUTH_ERR ; //<S2SV> goto done ; //<S2SV> } //<S2SV> retval = PAM_SUCCESS ; //<S2SV> done : //<S2SV> free_devices ( devices , n_devices ) ; //<S2SV> if ( buf ) { //<S2SV> free ( buf ) ; //<S2SV> buf = NULL ; //<S2SV> } //<S2SV> if ( should_free_origin ) { //<S2SV> free ( ( char * ) cfg -> origin ) ; //<S2SV> cfg -> origin = NULL ; //<S2SV> } //<S2SV> if ( should_free_appid ) { //<S2SV> free ( ( char * ) cfg -> appid ) ; //<S2SV> cfg -> appid = NULL ; //<S2SV> } //<S2SV> if ( should_free_auth_file ) { //<S2SV> free ( ( char * ) cfg -> auth_file ) ; //<S2SV> cfg -> auth_file = NULL ; //<S2SV> } //<S2SV> if ( should_free_authpending_file ) { //<S2SV> free ( ( char * ) cfg -> authpending_file ) ; //<S2SV> cfg -> authpending_file = NULL ; //<S2SV> } //<S2SV> if ( cfg -> alwaysok && retval != PAM_SUCCESS ) { //<S2SV> DBG ( "alwaysok<S2SV_blank>needed<S2SV_blank>(otherwise<S2SV_blank>return<S2SV_blank>with<S2SV_blank>%d)" , retval ) ; //<S2SV> retval = PAM_SUCCESS ; //<S2SV> } //<S2SV> DBG ( "done.<S2SV_blank>[%s]" , pam_strerror ( pamh , retval ) ) ; //<S2SV> if ( cfg -> is_custom_debug_file ) { //<S2SV> fclose ( cfg -> debug_file ) ; //<S2SV> } //<S2SV> return retval ; //<S2SV> } //<S2SV> 