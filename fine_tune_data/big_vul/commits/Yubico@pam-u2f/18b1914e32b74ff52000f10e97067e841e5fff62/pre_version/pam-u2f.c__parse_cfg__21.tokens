static void parse_cfg ( int flags , int argc , const char * * argv , cfg_t * cfg ) { //<S2SV> int i ; //<S2SV> memset ( cfg , 0 , sizeof ( cfg_t ) ) ; //<S2SV> cfg -> debug_file = stderr ; //<S2SV> for ( i = 0 ; i < argc ; i ++ ) { //<S2SV> if ( strncmp ( argv [ i ] , "max_devices=" , 12 ) == 0 ) //<S2SV> sscanf ( argv [ i ] , "max_devices=%u" , & cfg -> max_devs ) ; //<S2SV> if ( strcmp ( argv [ i ] , "manual" ) == 0 ) //<S2SV> cfg -> manual = 1 ; //<S2SV> if ( strcmp ( argv [ i ] , "debug" ) == 0 ) //<S2SV> cfg -> debug = 1 ; //<S2SV> if ( strcmp ( argv [ i ] , "nouserok" ) == 0 ) //<S2SV> cfg -> nouserok = 1 ; //<S2SV> if ( strcmp ( argv [ i ] , "openasuser" ) == 0 ) //<S2SV> cfg -> openasuser = 1 ; //<S2SV> if ( strcmp ( argv [ i ] , "alwaysok" ) == 0 ) //<S2SV> cfg -> alwaysok = 1 ; //<S2SV> if ( strcmp ( argv [ i ] , "interactive" ) == 0 ) //<S2SV> cfg -> interactive = 1 ; //<S2SV> if ( strcmp ( argv [ i ] , "cue" ) == 0 ) //<S2SV> cfg -> cue = 1 ; //<S2SV> if ( strcmp ( argv [ i ] , "nodetect" ) == 0 ) //<S2SV> cfg -> nodetect = 1 ; //<S2SV> if ( strncmp ( argv [ i ] , "authfile=" , 9 ) == 0 ) //<S2SV> cfg -> auth_file = argv [ i ] + 9 ; //<S2SV> if ( strncmp ( argv [ i ] , "authpending_file=" , 17 ) == 0 ) //<S2SV> cfg -> authpending_file = argv [ i ] + 17 ; //<S2SV> if ( strncmp ( argv [ i ] , "origin=" , 7 ) == 0 ) //<S2SV> cfg -> origin = argv [ i ] + 7 ; //<S2SV> if ( strncmp ( argv [ i ] , "appid=" , 6 ) == 0 ) //<S2SV> cfg -> appid = argv [ i ] + 6 ; //<S2SV> if ( strncmp ( argv [ i ] , "prompt=" , 7 ) == 0 ) //<S2SV> cfg -> prompt = argv [ i ] + 7 ; //<S2SV> if ( strncmp ( argv [ i ] , "debug_file=" , 11 ) == 0 ) { //<S2SV> const char * filename = argv [ i ] + 11 ; //<S2SV> if ( strncmp ( filename , "stdout" , 6 ) == 0 ) { //<S2SV> cfg -> debug_file = stdout ; //<S2SV> } //<S2SV> else if ( strncmp ( filename , "stderr" , 6 ) == 0 ) { //<S2SV> cfg -> debug_file = stderr ; //<S2SV> } //<S2SV> else if ( strncmp ( filename , "syslog" , 6 ) == 0 ) { //<S2SV> cfg -> debug_file = ( FILE * ) - 1 ; //<S2SV> } //<S2SV> else { //<S2SV> struct stat st ; //<S2SV> FILE * file ; //<S2SV> if ( lstat ( filename , & st ) == 0 ) { //<S2SV> if ( S_ISREG ( st . st_mode ) ) { //<S2SV> file = fopen ( filename , "a" ) ; //<S2SV> if ( file != NULL ) { //<S2SV> cfg -> debug_file = file ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( cfg -> debug ) { //<S2SV> D ( cfg -> debug_file , "called." ) ; //<S2SV> D ( cfg -> debug_file , "flags<S2SV_blank>%d<S2SV_blank>argc<S2SV_blank>%d" , flags , argc ) ; //<S2SV> for ( i = 0 ; i < argc ; i ++ ) { //<S2SV> D ( cfg -> debug_file , "argv[%d]=%s" , i , argv [ i ] ) ; //<S2SV> } //<S2SV> D ( cfg -> debug_file , "max_devices=%d" , cfg -> max_devs ) ; //<S2SV> D ( cfg -> debug_file , "debug=%d" , cfg -> debug ) ; //<S2SV> D ( cfg -> debug_file , "interactive=%d" , cfg -> interactive ) ; //<S2SV> D ( cfg -> debug_file , "cue=%d" , cfg -> cue ) ; //<S2SV> D ( cfg -> debug_file , "nodetect=%d" , cfg -> nodetect ) ; //<S2SV> D ( cfg -> debug_file , "manual=%d" , cfg -> manual ) ; //<S2SV> D ( cfg -> debug_file , "nouserok=%d" , cfg -> nouserok ) ; //<S2SV> D ( cfg -> debug_file , "openasuser=%d" , cfg -> openasuser ) ; //<S2SV> D ( cfg -> debug_file , "alwaysok=%d" , cfg -> alwaysok ) ; //<S2SV> D ( cfg -> debug_file , "authfile=%s" , cfg -> auth_file ? cfg -> auth_file : "(null)" ) ; //<S2SV> D ( cfg -> debug_file , "authpending_file=%s" , cfg -> authpending_file ? cfg -> authpending_file : "(null)" ) ; //<S2SV> D ( cfg -> debug_file , "origin=%s" , cfg -> origin ? cfg -> origin : "(null)" ) ; //<S2SV> D ( cfg -> debug_file , "appid=%s" , cfg -> appid ? cfg -> appid : "(null)" ) ; //<S2SV> D ( cfg -> debug_file , "prompt=%s" , cfg -> prompt ? cfg -> prompt : "(null)" ) ; //<S2SV> } //<S2SV> } //<S2SV> 