static bool do_write_pids ( pid_t tpid , uid_t tuid , const char * contrl , const char * cg , //<S2SV> const char * file , const char * buf ) //<S2SV> { //<S2SV> int sock [ 2 ] = { - 1 , - 1 } ; //<S2SV> pid_t qpid , cpid = - 1 ; //<S2SV> FILE * pids_file = NULL ; //<S2SV> bool answer = false , fail = false ; //<S2SV> pids_file = open_pids_file ( contrl , cg ) ; //<S2SV> if ( ! pids_file ) //<S2SV> return false ; //<S2SV> if ( socketpair ( AF_UNIX , SOCK_DGRAM , 0 , sock ) < 0 ) { //<S2SV> perror ( "socketpair" ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> cpid = fork ( ) ; //<S2SV> if ( cpid == - 1 ) //<S2SV> goto out ; //<S2SV> if ( ! cpid ) { //<S2SV> fclose ( pids_file ) ; //<S2SV> pid_from_ns_wrapper ( sock [ 1 ] , tpid ) ; //<S2SV> } //<S2SV> const char * ptr = buf ; //<S2SV> while ( sscanf ( ptr , "%d" , & qpid ) == 1 ) { //<S2SV> struct ucred cred ; //<S2SV> char v ; //<S2SV> if ( write ( sock [ 0 ] , & qpid , sizeof ( qpid ) ) != sizeof ( qpid ) ) { //<S2SV> fprintf ( stderr , "%s:<S2SV_blank>error<S2SV_blank>writing<S2SV_blank>pid<S2SV_blank>to<S2SV_blank>child:<S2SV_blank>%s\\n" , //<S2SV> __func__ , strerror ( errno ) ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( recv_creds ( sock [ 0 ] , & cred , & v ) ) { //<S2SV> if ( v == '0' ) { //<S2SV> if ( ! may_move_pid ( tpid , tuid , cred . pid ) ) { //<S2SV> fail = true ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( fprintf ( pids_file , "%d" , ( int ) cred . pid ) < 0 ) //<S2SV> fail = true ; //<S2SV> } //<S2SV> } //<S2SV> ptr = strchr ( ptr , '\\n' ) ; //<S2SV> if ( ! ptr ) //<S2SV> break ; //<S2SV> ptr ++ ; //<S2SV> } //<S2SV> qpid = - 1 ; //<S2SV> if ( write ( sock [ 0 ] , & qpid , sizeof ( qpid ) ) != sizeof ( qpid ) ) //<S2SV> fprintf ( stderr , "Warning:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>ask<S2SV_blank>child<S2SV_blank>to<S2SV_blank>exit\\n" ) ; //<S2SV> if ( ! fail ) //<S2SV> answer = true ; //<S2SV> out : //<S2SV> if ( cpid != - 1 ) //<S2SV> wait_for_pid ( cpid ) ; //<S2SV> if ( sock [ 0 ] != - 1 ) { //<S2SV> close ( sock [ 0 ] ) ; //<S2SV> close ( sock [ 1 ] ) ; //<S2SV> } //<S2SV> if ( pids_file ) { //<S2SV> if ( fclose ( pids_file ) != 0 ) //<S2SV> answer = false ; //<S2SV> } //<S2SV> return answer ; //<S2SV> } //<S2SV> 