static bool caller_is_in_ancestor ( pid_t pid , const char * contrl , const char * cg , char * * nextcg ) //<S2SV> { //<S2SV> char fnam [ PROCLEN ] ; //<S2SV> FILE * f ; //<S2SV> bool answer = false ; //<S2SV> char * line = NULL ; //<S2SV> size_t len = 0 ; //<S2SV> int ret ; //<S2SV> ret = snprintf ( fnam , PROCLEN , "/proc/%d/cgroup" , pid ) ; //<S2SV> if ( ret < 0 || ret >= PROCLEN ) //<S2SV> return false ; //<S2SV> if ( ! ( f = fopen ( fnam , "r" ) ) ) //<S2SV> return false ; //<S2SV> while ( getline ( & line , & len , f ) != - 1 ) { //<S2SV> char * c1 , * c2 , * linecmp ; //<S2SV> if ( ! line [ 0 ] ) //<S2SV> continue ; //<S2SV> c1 = strchr ( line , ':' ) ; //<S2SV> if ( ! c1 ) //<S2SV> goto out ; //<S2SV> c1 ++ ; //<S2SV> c2 = strchr ( c1 , ':' ) ; //<S2SV> if ( ! c2 ) //<S2SV> goto out ; //<S2SV> * c2 = '\\0' ; //<S2SV> if ( strcmp ( c1 , contrl ) != 0 ) //<S2SV> continue ; //<S2SV> c2 ++ ; //<S2SV> stripnewline ( c2 ) ; //<S2SV> prune_init_slice ( c2 ) ; //<S2SV> linecmp = * cg == '/' ? c2 : c2 + 1 ; //<S2SV> if ( strncmp ( linecmp , cg , strlen ( linecmp ) ) != 0 ) { //<S2SV> if ( nextcg ) //<S2SV> * nextcg = get_next_cgroup_dir ( linecmp , cg ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> answer = true ; //<S2SV> goto out ; //<S2SV> } //<S2SV> out : //<S2SV> fclose ( f ) ; //<S2SV> free ( line ) ; //<S2SV> return answer ; //<S2SV> } //<S2SV> 