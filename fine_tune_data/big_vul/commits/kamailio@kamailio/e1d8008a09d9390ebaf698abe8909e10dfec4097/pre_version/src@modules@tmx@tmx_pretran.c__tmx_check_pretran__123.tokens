int tmx_check_pretran ( sip_msg_t * msg ) //<S2SV> { //<S2SV> unsigned int chid ; //<S2SV> unsigned int slotid ; //<S2SV> int dsize ; //<S2SV> struct via_param * vbr ; //<S2SV> str scallid ; //<S2SV> str scseqmet ; //<S2SV> str scseqnum ; //<S2SV> str sftag ; //<S2SV> str svbranch = { NULL , 0 } ; //<S2SV> pretran_t * it ; //<S2SV> if ( _tmx_ptran_table == NULL ) { //<S2SV> LM_ERR ( "pretran<S2SV_blank>hash<S2SV_blank>table<S2SV_blank>not<S2SV_blank>initialized<S2SV_blank>yet\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( get_route_type ( ) != REQUEST_ROUTE ) { //<S2SV> LM_ERR ( "invalid<S2SV_blank>usage<S2SV_blank>-<S2SV_blank>not<S2SV_blank>in<S2SV_blank>request<S2SV_blank>route\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( msg -> first_line . type != SIP_REQUEST ) { //<S2SV> LM_ERR ( "invalid<S2SV_blank>usage<S2SV_blank>-<S2SV_blank>not<S2SV_blank>a<S2SV_blank>sip<S2SV_blank>request\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( parse_headers ( msg , HDR_FROM_F | HDR_VIA1_F | HDR_CALLID_F | HDR_CSEQ_F , 0 ) < 0 ) { //<S2SV> LM_ERR ( "failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>required<S2SV_blank>headers\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( msg -> cseq == NULL || msg -> cseq -> parsed == NULL ) { //<S2SV> LM_ERR ( "failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>cseq<S2SV_blank>headers\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( get_cseq ( msg ) -> method_id == METHOD_ACK //<S2SV> || get_cseq ( msg ) -> method_id == METHOD_CANCEL ) { //<S2SV> LM_DBG ( "no<S2SV_blank>pre-transaction<S2SV_blank>management<S2SV_blank>for<S2SV_blank>ACK<S2SV_blank>or<S2SV_blank>CANCEL\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( msg -> via1 == 0 ) { //<S2SV> LM_ERR ( "failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>Via<S2SV_blank>header\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( parse_from_header ( msg ) < 0 || get_from ( msg ) -> tag_value . len == 0 ) { //<S2SV> LM_ERR ( "failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>From<S2SV_blank>header\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( msg -> callid == NULL || msg -> callid -> body . s == NULL ) { //<S2SV> LM_ERR ( "failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>callid<S2SV_blank>headers\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> vbr = msg -> via1 -> branch ; //<S2SV> scallid = msg -> callid -> body ; //<S2SV> trim ( & scallid ) ; //<S2SV> scseqmet = get_cseq ( msg ) -> method ; //<S2SV> trim ( & scseqmet ) ; //<S2SV> scseqnum = get_cseq ( msg ) -> number ; //<S2SV> trim ( & scseqnum ) ; //<S2SV> sftag = get_from ( msg ) -> tag_value ; //<S2SV> trim ( & sftag ) ; //<S2SV> chid = get_hash1_raw ( msg -> callid -> body . s , msg -> callid -> body . len ) ; //<S2SV> slotid = chid & ( _tmx_ptran_size - 1 ) ; //<S2SV> if ( unlikely ( _tmx_proc_ptran == NULL ) ) { //<S2SV> _tmx_proc_ptran = ( pretran_t * ) shm_malloc ( sizeof ( pretran_t ) ) ; //<S2SV> if ( _tmx_proc_ptran == NULL ) { //<S2SV> LM_ERR ( "not<S2SV_blank>enough<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>pretran<S2SV_blank>structure\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memset ( _tmx_proc_ptran , 0 , sizeof ( pretran_t ) ) ; //<S2SV> _tmx_proc_ptran -> pid = my_pid ( ) ; //<S2SV> } //<S2SV> dsize = scallid . len + scseqnum . len + scseqmet . len //<S2SV> + sftag . len + 4 ; //<S2SV> if ( likely ( vbr != NULL ) ) { //<S2SV> svbranch = vbr -> value ; //<S2SV> trim ( & svbranch ) ; //<S2SV> dsize += svbranch . len ; //<S2SV> } //<S2SV> if ( dsize < 256 ) dsize = 256 ; //<S2SV> tmx_pretran_unlink ( ) ; //<S2SV> if ( dsize > _tmx_proc_ptran -> dbuf . len ) { //<S2SV> if ( _tmx_proc_ptran -> dbuf . s ) shm_free ( _tmx_proc_ptran -> dbuf . s ) ; //<S2SV> _tmx_proc_ptran -> dbuf . s = ( char * ) shm_malloc ( dsize ) ; //<S2SV> if ( _tmx_proc_ptran -> dbuf . s == NULL ) { //<S2SV> LM_ERR ( "not<S2SV_blank>enough<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>pretran<S2SV_blank>data\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> _tmx_proc_ptran -> dbuf . len = dsize ; //<S2SV> } //<S2SV> _tmx_proc_ptran -> hid = chid ; //<S2SV> _tmx_proc_ptran -> cseqmetid = ( get_cseq ( msg ) ) -> method_id ; //<S2SV> _tmx_proc_ptran -> callid . s = _tmx_proc_ptran -> dbuf . s ; //<S2SV> memcpy ( _tmx_proc_ptran -> callid . s , scallid . s , scallid . len ) ; //<S2SV> _tmx_proc_ptran -> callid . len = scallid . len ; //<S2SV> _tmx_proc_ptran -> callid . s [ _tmx_proc_ptran -> callid . len ] = '\\0' ; //<S2SV> _tmx_proc_ptran -> ftag . s = _tmx_proc_ptran -> callid . s //<S2SV> + _tmx_proc_ptran -> callid . len + 1 ; //<S2SV> memcpy ( _tmx_proc_ptran -> ftag . s , sftag . s , sftag . len ) ; //<S2SV> _tmx_proc_ptran -> ftag . len = sftag . len ; //<S2SV> _tmx_proc_ptran -> ftag . s [ _tmx_proc_ptran -> ftag . len ] = '\\0' ; //<S2SV> _tmx_proc_ptran -> cseqnum . s = _tmx_proc_ptran -> ftag . s //<S2SV> + _tmx_proc_ptran -> ftag . len + 1 ; //<S2SV> memcpy ( _tmx_proc_ptran -> cseqnum . s , scseqnum . s , scseqnum . len ) ; //<S2SV> _tmx_proc_ptran -> cseqnum . len = scseqnum . len ; //<S2SV> _tmx_proc_ptran -> cseqnum . s [ _tmx_proc_ptran -> cseqnum . len ] = '\\0' ; //<S2SV> _tmx_proc_ptran -> cseqmet . s = _tmx_proc_ptran -> cseqnum . s //<S2SV> + _tmx_proc_ptran -> cseqnum . len + 1 ; //<S2SV> memcpy ( _tmx_proc_ptran -> cseqmet . s , scseqmet . s , scseqmet . len ) ; //<S2SV> _tmx_proc_ptran -> cseqmet . len = scseqmet . len ; //<S2SV> _tmx_proc_ptran -> cseqmet . s [ _tmx_proc_ptran -> cseqmet . len ] = '\\0' ; //<S2SV> if ( likely ( vbr != NULL ) ) { //<S2SV> _tmx_proc_ptran -> vbranch . s = _tmx_proc_ptran -> cseqmet . s //<S2SV> + _tmx_proc_ptran -> cseqmet . len + 1 ; //<S2SV> memcpy ( _tmx_proc_ptran -> vbranch . s , svbranch . s , svbranch . len ) ; //<S2SV> _tmx_proc_ptran -> vbranch . len = svbranch . len ; //<S2SV> _tmx_proc_ptran -> vbranch . s [ _tmx_proc_ptran -> vbranch . len ] = '\\0' ; //<S2SV> } else { //<S2SV> _tmx_proc_ptran -> vbranch . s = NULL ; //<S2SV> _tmx_proc_ptran -> vbranch . len = 0 ; //<S2SV> } //<S2SV> lock_get ( & _tmx_ptran_table [ slotid ] . lock ) ; //<S2SV> it = _tmx_ptran_table [ slotid ] . plist ; //<S2SV> tmx_pretran_link_safe ( slotid ) ; //<S2SV> for ( ; it != NULL ; it = it -> next ) { //<S2SV> if ( _tmx_proc_ptran -> hid != it -> hid //<S2SV> || _tmx_proc_ptran -> cseqmetid != it -> cseqmetid //<S2SV> || _tmx_proc_ptran -> callid . len != it -> callid . len //<S2SV> || _tmx_proc_ptran -> ftag . len != it -> ftag . len //<S2SV> || _tmx_proc_ptran -> cseqmet . len != it -> cseqmet . len //<S2SV> || _tmx_proc_ptran -> cseqnum . len != it -> cseqnum . len ) //<S2SV> continue ; //<S2SV> if ( _tmx_proc_ptran -> vbranch . s != NULL && it -> vbranch . s != NULL ) { //<S2SV> if ( _tmx_proc_ptran -> vbranch . len != it -> vbranch . len ) //<S2SV> continue ; //<S2SV> if ( _tmx_proc_ptran -> vbranch . s [ it -> vbranch . len - 1 ] //<S2SV> != it -> vbranch . s [ it -> vbranch . len - 1 ] ) //<S2SV> continue ; //<S2SV> if ( memcmp ( _tmx_proc_ptran -> vbranch . s , //<S2SV> it -> vbranch . s , it -> vbranch . len ) != 0 ) //<S2SV> continue ; //<S2SV> } //<S2SV> if ( memcmp ( _tmx_proc_ptran -> callid . s , //<S2SV> it -> callid . s , it -> callid . len ) != 0 //<S2SV> || memcmp ( _tmx_proc_ptran -> ftag . s , //<S2SV> it -> ftag . s , it -> ftag . len ) != 0 //<S2SV> || memcmp ( _tmx_proc_ptran -> cseqnum . s , //<S2SV> it -> cseqnum . s , it -> cseqnum . len ) != 0 ) //<S2SV> continue ; //<S2SV> if ( ( it -> cseqmetid == METHOD_OTHER || it -> cseqmetid == METHOD_UNDEF ) //<S2SV> && memcmp ( _tmx_proc_ptran -> cseqmet . s , //<S2SV> it -> cseqmet . s , it -> cseqmet . len ) != 0 ) //<S2SV> continue ; //<S2SV> LM_DBG ( "matched<S2SV_blank>another<S2SV_blank>pre-transaction<S2SV_blank>by<S2SV_blank>pid<S2SV_blank>%d<S2SV_blank>for<S2SV_blank>[%.*s]\\n" , //<S2SV> it -> pid , it -> callid . len , it -> callid . s ) ; //<S2SV> lock_release ( & _tmx_ptran_table [ slotid ] . lock ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> lock_release ( & _tmx_ptran_table [ slotid ] . lock ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 