mrb_value //<S2SV> mrb_io_initialize_copy ( mrb_state * mrb , mrb_value copy ) //<S2SV> { //<S2SV> mrb_value orig ; //<S2SV> mrb_value buf ; //<S2SV> struct mrb_io * fptr_copy ; //<S2SV> struct mrb_io * fptr_orig ; //<S2SV> mrb_bool failed = TRUE ; //<S2SV> mrb_get_args ( mrb , "o" , & orig ) ; //<S2SV> fptr_orig = io_get_open_fptr ( mrb , orig ) ; //<S2SV> fptr_copy = ( struct mrb_io * ) DATA_PTR ( copy ) ; //<S2SV> if ( fptr_copy != NULL ) { //<S2SV> fptr_finalize ( mrb , fptr_copy , FALSE ) ; //<S2SV> mrb_free ( mrb , fptr_copy ) ; //<S2SV> } //<S2SV> fptr_copy = ( struct mrb_io * ) mrb_io_alloc ( mrb ) ; //<S2SV> DATA_TYPE ( copy ) = & mrb_io_type ; //<S2SV> DATA_PTR ( copy ) = fptr_copy ; //<S2SV> buf = mrb_iv_get ( mrb , orig , mrb_intern_cstr ( mrb , "@buf" ) ) ; //<S2SV> mrb_iv_set ( mrb , copy , mrb_intern_cstr ( mrb , "@buf" ) , buf ) ; //<S2SV> fptr_copy -> fd = mrb_dup ( mrb , fptr_orig -> fd , & failed ) ; //<S2SV> if ( failed ) { //<S2SV> mrb_sys_fail ( mrb , 0 ) ; //<S2SV> } //<S2SV> mrb_fd_cloexec ( mrb , fptr_copy -> fd ) ; //<S2SV> if ( fptr_orig -> fd2 != - 1 ) { //<S2SV> fptr_copy -> fd2 = mrb_dup ( mrb , fptr_orig -> fd2 , & failed ) ; //<S2SV> if ( failed ) { //<S2SV> close ( fptr_copy -> fd ) ; //<S2SV> mrb_sys_fail ( mrb , 0 ) ; //<S2SV> } //<S2SV> mrb_fd_cloexec ( mrb , fptr_copy -> fd2 ) ; //<S2SV> } //<S2SV> fptr_copy -> pid = fptr_orig -> pid ; //<S2SV> fptr_copy -> readable = fptr_orig -> readable ; //<S2SV> fptr_copy -> writable = fptr_orig -> writable ; //<S2SV> fptr_copy -> sync = fptr_orig -> sync ; //<S2SV> fptr_copy -> is_socket = fptr_orig -> is_socket ; //<S2SV> return copy ; //<S2SV> } //<S2SV> 