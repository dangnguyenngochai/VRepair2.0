static int Downmix_Command ( effect_handle_t self , uint32_t cmdCode , uint32_t cmdSize , //<S2SV> void * pCmdData , uint32_t * replySize , void * pReplyData ) { //<S2SV> downmix_module_t * pDwmModule = ( downmix_module_t * ) self ; //<S2SV> downmix_object_t * pDownmixer ; //<S2SV> int retsize ; //<S2SV> if ( pDwmModule == NULL || pDwmModule -> context . state == DOWNMIX_STATE_UNINITIALIZED ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> pDownmixer = ( downmix_object_t * ) & pDwmModule -> context ; //<S2SV> ALOGV ( "Downmix_Command<S2SV_blank>command<S2SV_blank>%" PRIu32 "<S2SV_blank>cmdSize<S2SV_blank>%" PRIu32 , cmdCode , cmdSize ) ; //<S2SV> switch ( cmdCode ) { //<S2SV> case EFFECT_CMD_INIT : //<S2SV> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> * ( int * ) pReplyData = Downmix_Init ( pDwmModule ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_CONFIG : //<S2SV> if ( pCmdData == NULL || cmdSize != sizeof ( effect_config_t ) //<S2SV> || pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> * ( int * ) pReplyData = Downmix_Configure ( pDwmModule , //<S2SV> ( effect_config_t * ) pCmdData , false ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_RESET : //<S2SV> Downmix_Reset ( pDownmixer , false ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_GET_PARAM : //<S2SV> ALOGV ( "Downmix_Command<S2SV_blank>EFFECT_CMD_GET_PARAM<S2SV_blank>pCmdData<S2SV_blank>%p,<S2SV_blank>*replySize<S2SV_blank>%" PRIu32 ",<S2SV_blank>pReplyData:<S2SV_blank>%p" , //<S2SV> pCmdData , * replySize , pReplyData ) ; //<S2SV> if ( pCmdData == NULL || cmdSize < ( int ) ( sizeof ( effect_param_t ) + sizeof ( int32_t ) ) || //<S2SV> pReplyData == NULL || //<S2SV> * replySize < ( int ) sizeof ( effect_param_t ) + 2 * sizeof ( int32_t ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> effect_param_t * rep = ( effect_param_t * ) pReplyData ; //<S2SV> memcpy ( pReplyData , pCmdData , sizeof ( effect_param_t ) + sizeof ( int32_t ) ) ; //<S2SV> ALOGV ( "Downmix_Command<S2SV_blank>EFFECT_CMD_GET_PARAM<S2SV_blank>param<S2SV_blank>%" PRId32 ",<S2SV_blank>replySize<S2SV_blank>%" PRIu32 , //<S2SV> * ( int32_t * ) rep -> data , rep -> vsize ) ; //<S2SV> rep -> status = Downmix_getParameter ( pDownmixer , * ( int32_t * ) rep -> data , & rep -> vsize , //<S2SV> rep -> data + sizeof ( int32_t ) ) ; //<S2SV> * replySize = sizeof ( effect_param_t ) + sizeof ( int32_t ) + rep -> vsize ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_PARAM : //<S2SV> ALOGV ( "Downmix_Command<S2SV_blank>EFFECT_CMD_SET_PARAM<S2SV_blank>cmdSize<S2SV_blank>%d<S2SV_blank>pCmdData<S2SV_blank>%p,<S2SV_blank>*replySize<S2SV_blank>%" PRIu32 //<S2SV> ",<S2SV_blank>pReplyData<S2SV_blank>%p" , cmdSize , pCmdData , * replySize , pReplyData ) ; //<S2SV> if ( pCmdData == NULL || ( cmdSize < ( int ) ( sizeof ( effect_param_t ) + sizeof ( int32_t ) ) ) //<S2SV> || pReplyData == NULL || * replySize != ( int ) sizeof ( int32_t ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> effect_param_t * cmd = ( effect_param_t * ) pCmdData ; //<S2SV> * ( int * ) pReplyData = Downmix_setParameter ( pDownmixer , * ( int32_t * ) cmd -> data , //<S2SV> cmd -> vsize , cmd -> data + sizeof ( int32_t ) ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_PARAM_DEFERRED : //<S2SV> ALOGW ( "Downmix_Command<S2SV_blank>command<S2SV_blank>EFFECT_CMD_SET_PARAM_DEFERRED<S2SV_blank>not<S2SV_blank>supported,<S2SV_blank>FIXME" ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_PARAM_COMMIT : //<S2SV> ALOGW ( "Downmix_Command<S2SV_blank>command<S2SV_blank>EFFECT_CMD_SET_PARAM_COMMIT<S2SV_blank>not<S2SV_blank>supported,<S2SV_blank>FIXME" ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_ENABLE : //<S2SV> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( pDownmixer -> state != DOWNMIX_STATE_INITIALIZED ) { //<S2SV> return - ENOSYS ; //<S2SV> } //<S2SV> pDownmixer -> state = DOWNMIX_STATE_ACTIVE ; //<S2SV> ALOGV ( "EFFECT_CMD_ENABLE()<S2SV_blank>OK" ) ; //<S2SV> * ( int * ) pReplyData = 0 ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_DISABLE : //<S2SV> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> if ( pDownmixer -> state != DOWNMIX_STATE_ACTIVE ) { //<S2SV> return - ENOSYS ; //<S2SV> } //<S2SV> pDownmixer -> state = DOWNMIX_STATE_INITIALIZED ; //<S2SV> ALOGV ( "EFFECT_CMD_DISABLE()<S2SV_blank>OK" ) ; //<S2SV> * ( int * ) pReplyData = 0 ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_DEVICE : //<S2SV> if ( pCmdData == NULL || cmdSize != ( int ) sizeof ( uint32_t ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ALOGV ( "Downmix_Command<S2SV_blank>EFFECT_CMD_SET_DEVICE:<S2SV_blank>0x%08" PRIx32 , * ( uint32_t * ) pCmdData ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_VOLUME : { //<S2SV> if ( pCmdData == NULL || cmdSize != ( int ) sizeof ( uint32_t ) * 2 ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ALOGW ( "Downmix_Command<S2SV_blank>command<S2SV_blank>EFFECT_CMD_SET_VOLUME<S2SV_blank>not<S2SV_blank>supported,<S2SV_blank>FIXME" ) ; //<S2SV> float left = ( float ) ( * ( uint32_t * ) pCmdData ) / ( 1 << 24 ) ; //<S2SV> float right = ( float ) ( * ( ( uint32_t * ) pCmdData + 1 ) ) / ( 1 << 24 ) ; //<S2SV> ALOGV ( "Downmix_Command<S2SV_blank>EFFECT_CMD_SET_VOLUME:<S2SV_blank>left<S2SV_blank>%f,<S2SV_blank>right<S2SV_blank>%f<S2SV_blank>" , left , right ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EFFECT_CMD_SET_AUDIO_MODE : //<S2SV> if ( pCmdData == NULL || cmdSize != ( int ) sizeof ( uint32_t ) ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> ALOGV ( "Downmix_Command<S2SV_blank>EFFECT_CMD_SET_AUDIO_MODE:<S2SV_blank>%" PRIu32 , * ( uint32_t * ) pCmdData ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_CONFIG_REVERSE : //<S2SV> case EFFECT_CMD_SET_INPUT_DEVICE : //<S2SV> break ; //<S2SV> default : //<S2SV> ALOGW ( "Downmix_Command<S2SV_blank>invalid<S2SV_blank>command<S2SV_blank>%" PRIu32 , cmdCode ) ; //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 