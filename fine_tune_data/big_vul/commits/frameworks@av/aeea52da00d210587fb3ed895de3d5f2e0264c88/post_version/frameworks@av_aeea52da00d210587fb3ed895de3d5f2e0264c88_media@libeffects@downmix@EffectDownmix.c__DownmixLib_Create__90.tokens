int32_t DownmixLib_Create ( const effect_uuid_t * uuid , //<S2SV> int32_t sessionId __unused , //<S2SV> int32_t ioId __unused , //<S2SV> effect_handle_t * pHandle ) { //<S2SV> int ret ; //<S2SV> int i ; //<S2SV> downmix_module_t * module ; //<S2SV> const effect_descriptor_t * desc ; //<S2SV> ALOGV ( "DownmixLib_Create()" ) ; //<S2SV> # ifdef DOWNMIX_TEST_CHANNEL_INDEX //<S2SV> ALOGI ( "DOWNMIX_TEST_CHANNEL_INDEX:<S2SV_blank>should<S2SV_blank>work:" ) ; //<S2SV> Downmix_testIndexComputation ( AUDIO_CHANNEL_OUT_FRONT_LEFT | AUDIO_CHANNEL_OUT_FRONT_RIGHT | //<S2SV> AUDIO_CHANNEL_OUT_LOW_FREQUENCY | AUDIO_CHANNEL_OUT_BACK_CENTER ) ; //<S2SV> Downmix_testIndexComputation ( CHANNEL_MASK_QUAD_SIDE | CHANNEL_MASK_QUAD_BACK ) ; //<S2SV> Downmix_testIndexComputation ( CHANNEL_MASK_5POINT1_SIDE | AUDIO_CHANNEL_OUT_BACK_CENTER ) ; //<S2SV> Downmix_testIndexComputation ( CHANNEL_MASK_5POINT1_BACK | AUDIO_CHANNEL_OUT_BACK_CENTER ) ; //<S2SV> ALOGI ( "DOWNMIX_TEST_CHANNEL_INDEX:<S2SV_blank>should<S2SV_blank>NOT<S2SV_blank>work:" ) ; //<S2SV> Downmix_testIndexComputation ( AUDIO_CHANNEL_OUT_FRONT_LEFT | AUDIO_CHANNEL_OUT_FRONT_RIGHT | //<S2SV> AUDIO_CHANNEL_OUT_LOW_FREQUENCY | AUDIO_CHANNEL_OUT_BACK_LEFT ) ; //<S2SV> Downmix_testIndexComputation ( AUDIO_CHANNEL_OUT_FRONT_LEFT | AUDIO_CHANNEL_OUT_FRONT_RIGHT | //<S2SV> AUDIO_CHANNEL_OUT_LOW_FREQUENCY | AUDIO_CHANNEL_OUT_SIDE_LEFT ) ; //<S2SV> Downmix_testIndexComputation ( AUDIO_CHANNEL_OUT_FRONT_LEFT | //<S2SV> AUDIO_CHANNEL_OUT_BACK_LEFT | AUDIO_CHANNEL_OUT_BACK_RIGHT ) ; //<S2SV> Downmix_testIndexComputation ( AUDIO_CHANNEL_OUT_FRONT_LEFT | //<S2SV> AUDIO_CHANNEL_OUT_SIDE_LEFT | AUDIO_CHANNEL_OUT_SIDE_RIGHT ) ; //<S2SV> # endif //<S2SV> if ( pHandle == NULL || uuid == NULL ) { //<S2SV> return - EINVAL ; //<S2SV> } //<S2SV> for ( i = 0 ; i < kNbEffects ; i ++ ) { //<S2SV> desc = gDescriptors [ i ] ; //<S2SV> if ( memcmp ( uuid , & desc -> uuid , sizeof ( effect_uuid_t ) ) == 0 ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( i == kNbEffects ) { //<S2SV> return - ENOENT ; //<S2SV> } //<S2SV> module = malloc ( sizeof ( downmix_module_t ) ) ; //<S2SV> module -> itfe = & gDownmixInterface ; //<S2SV> module -> context . state = DOWNMIX_STATE_UNINITIALIZED ; //<S2SV> ret = Downmix_Init ( module ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> ALOGW ( "DownmixLib_Create()<S2SV_blank>init<S2SV_blank>failed" ) ; //<S2SV> free ( module ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> * pHandle = ( effect_handle_t ) module ; //<S2SV> ALOGV ( "DownmixLib_Create()<S2SV_blank>%p<S2SV_blank>,<S2SV_blank>size<S2SV_blank>%zu" , module , sizeof ( downmix_module_t ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 