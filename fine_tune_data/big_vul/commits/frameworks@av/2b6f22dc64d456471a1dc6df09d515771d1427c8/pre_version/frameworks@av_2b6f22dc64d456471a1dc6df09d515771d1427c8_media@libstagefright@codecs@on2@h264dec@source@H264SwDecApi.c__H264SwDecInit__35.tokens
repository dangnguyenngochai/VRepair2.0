H264SwDecRet H264SwDecInit ( H264SwDecInst * decInst , u32 noOutputReordering ) //<S2SV> { //<S2SV> u32 rv = 0 ; //<S2SV> decContainer_t * pDecCont ; //<S2SV> DEC_API_TRC ( "H264SwDecInit#" ) ; //<S2SV> if ( ( ( - 1 ) >> 1 ) != ( - 1 ) ) //<S2SV> { //<S2SV> DEC_API_TRC ( "H264SwDecInit#<S2SV_blank>ERROR:<S2SV_blank>Right<S2SV_blank>shift<S2SV_blank>is<S2SV_blank>not<S2SV_blank>signed" ) ; //<S2SV> return ( H264SWDEC_INITFAIL ) ; //<S2SV> } //<S2SV> if ( decInst == NULL ) //<S2SV> { //<S2SV> DEC_API_TRC ( "H264SwDecInit#<S2SV_blank>ERROR:<S2SV_blank>decInst<S2SV_blank>==<S2SV_blank>NULL" ) ; //<S2SV> return ( H264SWDEC_PARAM_ERR ) ; //<S2SV> } //<S2SV> pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; //<S2SV> if ( pDecCont == NULL ) //<S2SV> { //<S2SV> DEC_API_TRC ( "H264SwDecInit#<S2SV_blank>ERROR:<S2SV_blank>Memory<S2SV_blank>allocation<S2SV_blank>failed" ) ; //<S2SV> return ( H264SWDEC_MEMFAIL ) ; //<S2SV> } //<S2SV> # ifdef H264DEC_TRACE //<S2SV> sprintf ( pDecCont -> str , "H264SwDecInit#<S2SV_blank>decInst<S2SV_blank>%p<S2SV_blank>noOutputReordering<S2SV_blank>%d" , //<S2SV> ( void * ) decInst , noOutputReordering ) ; //<S2SV> DEC_API_TRC ( pDecCont -> str ) ; //<S2SV> # endif //<S2SV> rv = h264bsdInit ( & pDecCont -> storage , noOutputReordering ) ; //<S2SV> if ( rv != HANTRO_OK ) //<S2SV> { //<S2SV> H264SwDecRelease ( pDecCont ) ; //<S2SV> return ( H264SWDEC_MEMFAIL ) ; //<S2SV> } //<S2SV> pDecCont -> decStat = INITIALIZED ; //<S2SV> pDecCont -> picNumber = 0 ; //<S2SV> # ifdef H264DEC_TRACE //<S2SV> sprintf ( pDecCont -> str , "H264SwDecInit#<S2SV_blank>OK:<S2SV_blank>return<S2SV_blank>%p" , ( void * ) pDecCont ) ; //<S2SV> DEC_API_TRC ( pDecCont -> str ) ; //<S2SV> # endif //<S2SV> * decInst = ( decContainer_t * ) pDecCont ; //<S2SV> return ( H264SWDEC_OK ) ; //<S2SV> } //<S2SV> 