void xmlrpc_char_encode ( char * outbuffer , const char * s1 ) //<S2SV> { //<S2SV> long unsigned int i ; //<S2SV> unsigned char c ; //<S2SV> char buf2 [ 15 ] ; //<S2SV> mowgli_string_t * s = mowgli_string_create ( ) ; //<S2SV> * buf2 = '\\0' ; //<S2SV> * outbuffer = '\\0' ; //<S2SV> if ( ( ! ( s1 ) || ( * ( s1 ) == '\\0' ) ) ) //<S2SV> { //<S2SV> return ; //<S2SV> } //<S2SV> for ( i = 0 ; s1 [ i ] != '\\0' ; i ++ ) //<S2SV> { //<S2SV> c = s1 [ i ] ; //<S2SV> if ( c > 127 ) //<S2SV> { //<S2SV> snprintf ( buf2 , sizeof buf2 , "&#%d;" , c ) ; //<S2SV> s -> append ( s , buf2 , strlen ( buf2 ) ) ; //<S2SV> } //<S2SV> else if ( c == '&' ) //<S2SV> { //<S2SV> s -> append ( s , "&amp;" , 5 ) ; //<S2SV> } //<S2SV> else if ( c == '<' ) //<S2SV> { //<S2SV> s -> append ( s , "&lt;" , 4 ) ; //<S2SV> } //<S2SV> else if ( c == '>' ) //<S2SV> { //<S2SV> s -> append ( s , "&gt;" , 4 ) ; //<S2SV> } //<S2SV> else if ( c == \'"\' ) //<S2SV> { //<S2SV> s -> append ( s , "&quot;" , 6 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> s -> append_char ( s , c ) ; //<S2SV> } //<S2SV> } //<S2SV> memcpy ( outbuffer , s -> str , XMLRPC_BUFSIZE ) ; //<S2SV> } //<S2SV> 