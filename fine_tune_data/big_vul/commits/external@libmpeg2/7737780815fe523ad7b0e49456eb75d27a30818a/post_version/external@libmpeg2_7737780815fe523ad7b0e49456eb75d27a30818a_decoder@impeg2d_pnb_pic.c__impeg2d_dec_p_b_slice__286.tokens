IMPEG2D_ERROR_CODES_T impeg2d_dec_p_b_slice ( dec_state_t * ps_dec ) //<S2SV> { //<S2SV> WORD16 * pi2_vld_out ; //<S2SV> UWORD32 i ; //<S2SV> yuv_buf_t * ps_cur_frm_buf = & ps_dec -> s_cur_frm_buf ; //<S2SV> UWORD32 u4_frm_offset = 0 ; //<S2SV> const dec_mb_params_t * ps_dec_mb_params ; //<S2SV> IMPEG2D_ERROR_CODES_T e_error = ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; //<S2SV> pi2_vld_out = ps_dec -> ai2_vld_buf ; //<S2SV> memset ( ps_dec -> ai2_pred_mv , 0 , sizeof ( ps_dec -> ai2_pred_mv ) ) ; //<S2SV> ps_dec -> u2_prev_intra_mb = 0 ; //<S2SV> ps_dec -> u2_first_mb = 1 ; //<S2SV> ps_dec -> u2_picture_width = ps_dec -> u2_frame_width ; //<S2SV> if ( ps_dec -> u2_picture_structure != FRAME_PICTURE ) //<S2SV> { //<S2SV> ps_dec -> u2_picture_width <<= 1 ; //<S2SV> if ( ps_dec -> u2_picture_structure == BOTTOM_FIELD ) //<S2SV> { //<S2SV> u4_frm_offset = ps_dec -> u2_frame_width ; //<S2SV> } //<S2SV> } //<S2SV> do //<S2SV> { //<S2SV> UWORD32 u4_x_offset , u4_y_offset ; //<S2SV> WORD32 ret ; //<S2SV> UWORD32 u4_x_dst_offset = 0 ; //<S2SV> UWORD32 u4_y_dst_offset = 0 ; //<S2SV> UWORD8 * pu1_out_p ; //<S2SV> UWORD8 * pu1_pred ; //<S2SV> WORD32 u4_pred_strd ; //<S2SV> IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x , ps_dec -> u2_mb_y ) ; //<S2SV> if ( ps_dec -> e_pic_type == B_PIC ) //<S2SV> ret = impeg2d_dec_pnb_mb_params ( ps_dec ) ; //<S2SV> else //<S2SV> ret = impeg2d_dec_p_mb_params ( ps_dec ) ; //<S2SV> if ( ret ) //<S2SV> return IMPEG2D_MB_TEX_DECODE_ERR ; //<S2SV> if ( 0 >= ps_dec -> u2_num_mbs_left ) //<S2SV> { //<S2SV> break ; //<S2SV> } //<S2SV> IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x , ps_dec -> u2_mb_y ) ; //<S2SV> u4_x_dst_offset = u4_frm_offset + ( ps_dec -> u2_mb_x << 4 ) ; //<S2SV> u4_y_dst_offset = ( ps_dec -> u2_mb_y << 4 ) * ps_dec -> u2_picture_width ; //<S2SV> pu1_out_p = ps_cur_frm_buf -> pu1_y + u4_x_dst_offset + u4_y_dst_offset ; //<S2SV> if ( ps_dec -> u2_prev_intra_mb == 0 ) //<S2SV> { //<S2SV> UWORD32 offset_x , offset_y , stride ; //<S2SV> UWORD16 index = ( ps_dec -> u2_motion_type ) ; //<S2SV> if ( ps_dec -> e_mb_pred == BIDIRECT ) //<S2SV> { //<S2SV> ps_dec_mb_params = & ps_dec -> ps_func_bi_direct [ index ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec_mb_params = & ps_dec -> ps_func_forw_or_back [ index ] ; //<S2SV> } //<S2SV> stride = ps_dec -> u2_picture_width ; //<S2SV> offset_x = u4_frm_offset + ( ps_dec -> u2_mb_x << 4 ) ; //<S2SV> offset_y = ( ps_dec -> u2_mb_y << 4 ) ; //<S2SV> ps_dec -> s_dest_buf . pu1_y = ps_cur_frm_buf -> pu1_y + offset_y * stride + offset_x ; //<S2SV> stride = stride >> 1 ; //<S2SV> ps_dec -> s_dest_buf . pu1_u = ps_cur_frm_buf -> pu1_u + ( offset_y >> 1 ) * stride //<S2SV> + ( offset_x >> 1 ) ; //<S2SV> ps_dec -> s_dest_buf . pu1_v = ps_cur_frm_buf -> pu1_v + ( offset_y >> 1 ) * stride //<S2SV> + ( offset_x >> 1 ) ; //<S2SV> PROFILE_DISABLE_MC_IF0 //<S2SV> ps_dec_mb_params -> pf_mc ( ps_dec ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < NUM_LUMA_BLKS ; ++ i ) //<S2SV> { //<S2SV> if ( ( ps_dec -> u2_cbp & ( 1 << ( BLOCKS_IN_MB - 1 - i ) ) ) != 0 ) //<S2SV> { //<S2SV> e_error = ps_dec -> pf_vld_inv_quant ( ps_dec , pi2_vld_out , ps_dec -> pu1_inv_scan_matrix , //<S2SV> ps_dec -> u2_prev_intra_mb , Y_LUMA , 0 ) ; //<S2SV> if ( ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE != e_error ) //<S2SV> { //<S2SV> return e_error ; //<S2SV> } //<S2SV> u4_x_offset = gai2_impeg2_blk_x_off [ i ] ; //<S2SV> if ( ps_dec -> u2_field_dct == 0 ) //<S2SV> u4_y_offset = gai2_impeg2_blk_y_off_frm [ i ] ; //<S2SV> else //<S2SV> u4_y_offset = gai2_impeg2_blk_y_off_fld [ i ] ; //<S2SV> IMPEG2D_IDCT_INP_STATISTICS ( pi2_vld_out , ps_dec -> u4_non_zero_cols , ps_dec -> u4_non_zero_rows ) ; //<S2SV> PROFILE_DISABLE_IDCT_IF0 //<S2SV> { //<S2SV> WORD32 idx ; //<S2SV> if ( 1 == ( ps_dec -> u4_non_zero_cols | ps_dec -> u4_non_zero_rows ) ) //<S2SV> idx = 0 ; //<S2SV> else //<S2SV> idx = 1 ; //<S2SV> if ( 0 == ps_dec -> u2_prev_intra_mb ) //<S2SV> { //<S2SV> pu1_pred = pu1_out_p + u4_y_offset * ps_dec -> u2_picture_width + u4_x_offset ; //<S2SV> u4_pred_strd = ps_dec -> u2_picture_width << ps_dec -> u2_field_dct ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_pred = ( UWORD8 * ) gau1_impeg2_zerobuf ; //<S2SV> u4_pred_strd = 8 ; //<S2SV> } //<S2SV> ps_dec -> pf_idct_recon [ idx * 2 + ps_dec -> i4_last_value_one ] ( pi2_vld_out , //<S2SV> ps_dec -> ai2_idct_stg1 , //<S2SV> pu1_pred , //<S2SV> pu1_out_p + u4_y_offset * ps_dec -> u2_picture_width + u4_x_offset , //<S2SV> 8 , //<S2SV> u4_pred_strd , //<S2SV> ps_dec -> u2_picture_width << ps_dec -> u2_field_dct , //<S2SV> ~ ps_dec -> u4_non_zero_cols , ~ ps_dec -> u4_non_zero_rows ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> u4_x_dst_offset >>= 1 ; //<S2SV> u4_y_dst_offset >>= 2 ; //<S2SV> if ( ( ps_dec -> u2_cbp & 0x02 ) != 0 ) //<S2SV> { //<S2SV> pu1_out_p = ps_cur_frm_buf -> pu1_u + u4_x_dst_offset + u4_y_dst_offset ; //<S2SV> e_error = ps_dec -> pf_vld_inv_quant ( ps_dec , pi2_vld_out , ps_dec -> pu1_inv_scan_matrix , //<S2SV> ps_dec -> u2_prev_intra_mb , U_CHROMA , 0 ) ; //<S2SV> if ( ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE != e_error ) //<S2SV> { //<S2SV> return e_error ; //<S2SV> } //<S2SV> IMPEG2D_IDCT_INP_STATISTICS ( pi2_vld_out , ps_dec -> u4_non_zero_cols , ps_dec -> u4_non_zero_rows ) ; //<S2SV> PROFILE_DISABLE_IDCT_IF0 //<S2SV> { //<S2SV> WORD32 idx ; //<S2SV> if ( 1 == ( ps_dec -> u4_non_zero_cols | ps_dec -> u4_non_zero_rows ) ) //<S2SV> idx = 0 ; //<S2SV> else //<S2SV> idx = 1 ; //<S2SV> if ( 0 == ps_dec -> u2_prev_intra_mb ) //<S2SV> { //<S2SV> pu1_pred = pu1_out_p ; //<S2SV> u4_pred_strd = ps_dec -> u2_picture_width >> 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_pred = ( UWORD8 * ) gau1_impeg2_zerobuf ; //<S2SV> u4_pred_strd = 8 ; //<S2SV> } //<S2SV> ps_dec -> pf_idct_recon [ idx * 2 + ps_dec -> i4_last_value_one ] ( pi2_vld_out , //<S2SV> ps_dec -> ai2_idct_stg1 , //<S2SV> pu1_pred , //<S2SV> pu1_out_p , //<S2SV> 8 , //<S2SV> u4_pred_strd , //<S2SV> ps_dec -> u2_picture_width >> 1 , //<S2SV> ~ ps_dec -> u4_non_zero_cols , ~ ps_dec -> u4_non_zero_rows ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( ps_dec -> u2_cbp & 0x01 ) != 0 ) //<S2SV> { //<S2SV> pu1_out_p = ps_cur_frm_buf -> pu1_v + u4_x_dst_offset + u4_y_dst_offset ; //<S2SV> e_error = ps_dec -> pf_vld_inv_quant ( ps_dec , pi2_vld_out , ps_dec -> pu1_inv_scan_matrix , //<S2SV> ps_dec -> u2_prev_intra_mb , V_CHROMA , 0 ) ; //<S2SV> if ( ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE != e_error ) //<S2SV> { //<S2SV> return e_error ; //<S2SV> } //<S2SV> IMPEG2D_IDCT_INP_STATISTICS ( pi2_vld_out , ps_dec -> u4_non_zero_cols , ps_dec -> u4_non_zero_rows ) ; //<S2SV> PROFILE_DISABLE_IDCT_IF0 //<S2SV> { //<S2SV> WORD32 idx ; //<S2SV> if ( 1 == ( ps_dec -> u4_non_zero_cols | ps_dec -> u4_non_zero_rows ) ) //<S2SV> idx = 0 ; //<S2SV> else //<S2SV> idx = 1 ; //<S2SV> if ( 0 == ps_dec -> u2_prev_intra_mb ) //<S2SV> { //<S2SV> pu1_pred = pu1_out_p ; //<S2SV> u4_pred_strd = ps_dec -> u2_picture_width >> 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_pred = ( UWORD8 * ) gau1_impeg2_zerobuf ; //<S2SV> u4_pred_strd = 8 ; //<S2SV> } //<S2SV> ps_dec -> pf_idct_recon [ idx * 2 + ps_dec -> i4_last_value_one ] ( pi2_vld_out , //<S2SV> ps_dec -> ai2_idct_stg1 , //<S2SV> pu1_pred , //<S2SV> pu1_out_p , //<S2SV> 8 , //<S2SV> u4_pred_strd , //<S2SV> ps_dec -> u2_picture_width >> 1 , //<S2SV> ~ ps_dec -> u4_non_zero_cols , ~ ps_dec -> u4_non_zero_rows ) ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> u2_num_mbs_left -- ; //<S2SV> ps_dec -> u2_first_mb = 0 ; //<S2SV> ps_dec -> u2_mb_x ++ ; //<S2SV> if ( ps_dec -> s_bit_stream . u4_offset > ps_dec -> s_bit_stream . u4_max_offset ) //<S2SV> { //<S2SV> return IMPEG2D_BITSTREAM_BUFF_EXCEEDED_ERR ; //<S2SV> } //<S2SV> else if ( ps_dec -> u2_mb_x == ps_dec -> u2_num_horiz_mb ) //<S2SV> { //<S2SV> ps_dec -> u2_mb_x = 0 ; //<S2SV> ps_dec -> u2_mb_y ++ ; //<S2SV> } //<S2SV> } //<S2SV> while ( ps_dec -> u2_num_mbs_left != 0 && impeg2d_bit_stream_nxt ( & ps_dec -> s_bit_stream , 23 ) != 0x0 ) ; //<S2SV> return e_error ; //<S2SV> } //<S2SV> 