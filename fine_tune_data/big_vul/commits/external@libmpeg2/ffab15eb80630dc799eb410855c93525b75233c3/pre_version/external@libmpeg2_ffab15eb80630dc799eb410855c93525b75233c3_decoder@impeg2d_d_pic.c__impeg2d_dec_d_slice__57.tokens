IMPEG2D_ERROR_CODES_T impeg2d_dec_d_slice ( dec_state_t * ps_dec ) //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> yuv_buf_t * ps_cur_frm_buf = & ps_dec -> s_cur_frm_buf ; //<S2SV> stream_t * ps_stream = & ps_dec -> s_bit_stream ; //<S2SV> UWORD8 * pu1_vld_buf ; //<S2SV> WORD16 i2_dc_diff ; //<S2SV> UWORD32 u4_frame_width = ps_dec -> u2_frame_width ; //<S2SV> UWORD32 u4_frm_offset = 0 ; //<S2SV> if ( ps_dec -> u2_picture_structure != FRAME_PICTURE ) //<S2SV> { //<S2SV> u4_frame_width <<= 1 ; //<S2SV> if ( ps_dec -> u2_picture_structure == BOTTOM_FIELD ) //<S2SV> { //<S2SV> u4_frm_offset = ps_dec -> u2_frame_width ; //<S2SV> } //<S2SV> } //<S2SV> do //<S2SV> { //<S2SV> UWORD32 u4_x_offset , u4_y_offset ; //<S2SV> UWORD32 u4_blk_pos ; //<S2SV> WORD16 i2_dc_val ; //<S2SV> UWORD32 u4_dst_x_offset = u4_frm_offset + ( ps_dec -> u2_mb_x << 4 ) ; //<S2SV> UWORD32 u4_dst_y_offset = ( ps_dec -> u2_mb_y << 4 ) * u4_frame_width ; //<S2SV> UWORD8 * pu1_vld_buf8 = ps_cur_frm_buf -> pu1_y + u4_dst_x_offset + u4_dst_y_offset ; //<S2SV> UWORD32 u4_dst_wd = u4_frame_width ; //<S2SV> while ( impeg2d_bit_stream_nxt ( ps_stream , MB_STUFFING_CODE_LEN ) == MB_STUFFING_CODE ) //<S2SV> impeg2d_bit_stream_flush ( ps_stream , MB_STUFFING_CODE_LEN ) ; //<S2SV> impeg2d_bit_stream_flush ( ps_stream , 1 ) ; //<S2SV> if ( impeg2d_bit_stream_get ( ps_stream , 1 ) != 0x01 ) //<S2SV> { //<S2SV> } //<S2SV> for ( i = 0 ; i < NUM_LUMA_BLKS ; ++ i ) //<S2SV> { //<S2SV> u4_x_offset = gai2_impeg2_blk_x_off [ i ] ; //<S2SV> u4_y_offset = gai2_impeg2_blk_y_off_frm [ i ] ; //<S2SV> u4_blk_pos = ( u4_y_offset * u4_dst_wd ) + u4_x_offset ; //<S2SV> pu1_vld_buf = pu1_vld_buf8 + u4_blk_pos ; //<S2SV> i2_dc_diff = impeg2d_get_luma_dc_diff ( ps_stream ) ; //<S2SV> i2_dc_val = ps_dec -> u2_def_dc_pred [ Y_LUMA ] + i2_dc_diff ; //<S2SV> ps_dec -> u2_def_dc_pred [ Y_LUMA ] = i2_dc_val ; //<S2SV> i2_dc_val = CLIP_U8 ( i2_dc_val ) ; //<S2SV> ps_dec -> pf_memset_8bit_8x8_block ( pu1_vld_buf , i2_dc_val , u4_dst_wd ) ; //<S2SV> } //<S2SV> u4_dst_x_offset >>= 1 ; //<S2SV> u4_dst_y_offset >>= 2 ; //<S2SV> u4_dst_wd >>= 1 ; //<S2SV> pu1_vld_buf = ps_cur_frm_buf -> pu1_u + u4_dst_x_offset + u4_dst_y_offset ; //<S2SV> i2_dc_diff = impeg2d_get_chroma_dc_diff ( ps_stream ) ; //<S2SV> i2_dc_val = ps_dec -> u2_def_dc_pred [ U_CHROMA ] + i2_dc_diff ; //<S2SV> ps_dec -> u2_def_dc_pred [ U_CHROMA ] = i2_dc_val ; //<S2SV> i2_dc_val = CLIP_U8 ( i2_dc_val ) ; //<S2SV> ps_dec -> pf_memset_8bit_8x8_block ( pu1_vld_buf , i2_dc_val , u4_dst_wd ) ; //<S2SV> pu1_vld_buf = ps_cur_frm_buf -> pu1_v + u4_dst_x_offset + u4_dst_y_offset ; //<S2SV> i2_dc_diff = impeg2d_get_chroma_dc_diff ( ps_stream ) ; //<S2SV> i2_dc_val = ps_dec -> u2_def_dc_pred [ V_CHROMA ] + i2_dc_diff ; //<S2SV> ps_dec -> u2_def_dc_pred [ V_CHROMA ] = i2_dc_val ; //<S2SV> i2_dc_val = CLIP_U8 ( i2_dc_val ) ; //<S2SV> ps_dec -> pf_memset_8bit_8x8_block ( pu1_vld_buf , i2_dc_val , u4_dst_wd ) ; //<S2SV> ps_dec -> u2_num_mbs_left -- ; //<S2SV> ps_dec -> u2_mb_x ++ ; //<S2SV> if ( ps_dec -> s_bit_stream . u4_offset > ps_dec -> s_bit_stream . u4_max_offset ) //<S2SV> { //<S2SV> return IMPEG2D_BITSTREAM_BUFF_EXCEEDED_ERR ; //<S2SV> } //<S2SV> else if ( ps_dec -> u2_mb_x == ps_dec -> u2_num_horiz_mb ) //<S2SV> { //<S2SV> ps_dec -> u2_mb_x = 0 ; //<S2SV> ps_dec -> u2_mb_y ++ ; //<S2SV> } //<S2SV> impeg2d_bit_stream_flush ( ps_stream , 1 ) ; //<S2SV> } //<S2SV> while ( ps_dec -> u2_num_mbs_left != 0 && impeg2d_bit_stream_nxt ( & ps_dec -> s_bit_stream , 23 ) != 0x0 ) ; //<S2SV> return ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; //<S2SV> } //<S2SV> 