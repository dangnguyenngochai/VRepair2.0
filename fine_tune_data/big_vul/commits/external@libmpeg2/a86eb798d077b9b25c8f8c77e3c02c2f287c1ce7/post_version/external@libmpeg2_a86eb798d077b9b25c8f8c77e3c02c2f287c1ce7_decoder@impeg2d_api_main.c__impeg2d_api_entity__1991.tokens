IV_API_CALL_STATUS_T impeg2d_api_entity ( iv_obj_t * ps_dechdl , //<S2SV> void * pv_api_ip , //<S2SV> void * pv_api_op ) //<S2SV> { //<S2SV> iv_obj_t * ps_dec_handle ; //<S2SV> dec_state_t * ps_dec_state ; //<S2SV> dec_state_multi_core_t * ps_dec_state_multi_core ; //<S2SV> impeg2d_video_decode_ip_t * ps_dec_ip ; //<S2SV> impeg2d_video_decode_op_t * ps_dec_op ; //<S2SV> WORD32 bytes_remaining ; //<S2SV> pic_buf_t * ps_disp_pic ; //<S2SV> ps_dec_ip = ( impeg2d_video_decode_ip_t * ) pv_api_ip ; //<S2SV> ps_dec_op = ( impeg2d_video_decode_op_t * ) pv_api_op ; //<S2SV> memset ( ps_dec_op , 0 , sizeof ( impeg2d_video_decode_op_t ) ) ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_size = sizeof ( impeg2d_video_decode_op_t ) ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present = 0 ; //<S2SV> bytes_remaining = ps_dec_ip -> s_ivd_video_decode_ip_t . u4_num_Bytes ; //<S2SV> ps_dec_handle = ( iv_obj_t * ) ps_dechdl ; //<S2SV> if ( ps_dechdl == NULL ) //<S2SV> { //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> ps_dec_state_multi_core = ps_dec_handle -> pv_codec_handle ; //<S2SV> ps_dec_state = ps_dec_state_multi_core -> ps_dec_state [ 0 ] ; //<S2SV> ps_dec_state -> ps_disp_frm_buf = & ( ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf ) ; //<S2SV> if ( 0 == ps_dec_state -> u4_share_disp_buf ) //<S2SV> { //<S2SV> ps_dec_state -> ps_disp_frm_buf -> pv_y_buf = ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 0 ] ; //<S2SV> ps_dec_state -> ps_disp_frm_buf -> pv_u_buf = ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 1 ] ; //<S2SV> ps_dec_state -> ps_disp_frm_buf -> pv_v_buf = ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 2 ] ; //<S2SV> } //<S2SV> ps_dec_state -> ps_disp_pic = NULL ; //<S2SV> ps_dec_state -> i4_frame_decoded = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_num_bytes_consumed = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_error_code = IV_SUCCESS ; //<S2SV> if ( ( ps_dec_ip -> s_ivd_video_decode_ip_t . pv_stream_buffer == NULL ) && ( ps_dec_state -> u1_flushfrm == 0 ) ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_error_code |= IVD_DEC_FRM_BS_BUF_NULL ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_dec_state -> u4_num_frames_decoded > NUM_FRAMES_LIMIT ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_error_code = IMPEG2D_SAMPLE_VERSION_LIMIT_ERR ; //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> if ( ( ( 0 == ps_dec_state -> u2_header_done ) || ( ps_dec_state -> u2_decode_header == 1 ) ) && ( ps_dec_state -> u1_flushfrm == 0 ) ) //<S2SV> { //<S2SV> impeg2d_dec_hdr ( ps_dec_state , ps_dec_ip , ps_dec_op ) ; //<S2SV> bytes_remaining -= ps_dec_op -> s_ivd_video_decode_op_t . u4_num_bytes_consumed ; //<S2SV> } //<S2SV> if ( ( 1 != ps_dec_state -> u2_decode_header ) && //<S2SV> ( ( ( bytes_remaining > 0 ) && ( 1 == ps_dec_state -> u2_header_done ) ) || ps_dec_state -> u1_flushfrm ) ) //<S2SV> { //<S2SV> if ( ps_dec_state -> u1_flushfrm ) //<S2SV> { //<S2SV> if ( ps_dec_state -> aps_ref_pics [ 1 ] != NULL ) //<S2SV> { //<S2SV> impeg2_disp_mgr_add ( & ps_dec_state -> s_disp_mgr , ps_dec_state -> aps_ref_pics [ 1 ] , ps_dec_state -> aps_ref_pics [ 1 ] -> i4_buf_id ) ; //<S2SV> impeg2_buf_mgr_release ( ps_dec_state -> pv_pic_buf_mg , ps_dec_state -> aps_ref_pics [ 1 ] -> i4_buf_id , BUF_MGR_REF ) ; //<S2SV> impeg2_buf_mgr_release ( ps_dec_state -> pv_pic_buf_mg , ps_dec_state -> aps_ref_pics [ 0 ] -> i4_buf_id , BUF_MGR_REF ) ; //<S2SV> ps_dec_state -> aps_ref_pics [ 1 ] = NULL ; //<S2SV> ps_dec_state -> aps_ref_pics [ 0 ] = NULL ; //<S2SV> } //<S2SV> else if ( ps_dec_state -> aps_ref_pics [ 0 ] != NULL ) //<S2SV> { //<S2SV> impeg2_disp_mgr_add ( & ps_dec_state -> s_disp_mgr , ps_dec_state -> aps_ref_pics [ 0 ] , ps_dec_state -> aps_ref_pics [ 0 ] -> i4_buf_id ) ; //<S2SV> impeg2_buf_mgr_release ( ps_dec_state -> pv_pic_buf_mg , ps_dec_state -> aps_ref_pics [ 0 ] -> i4_buf_id , BUF_MGR_REF ) ; //<S2SV> ps_dec_state -> aps_ref_pics [ 0 ] = NULL ; //<S2SV> } //<S2SV> ps_dec_ip -> s_ivd_video_decode_ip_t . u4_size = sizeof ( impeg2d_video_decode_ip_t ) ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_size = sizeof ( impeg2d_video_decode_op_t ) ; //<S2SV> ps_disp_pic = impeg2_disp_mgr_get ( & ps_dec_state -> s_disp_mgr , & ps_dec_state -> i4_disp_buf_id ) ; //<S2SV> ps_dec_state -> ps_disp_pic = ps_disp_pic ; //<S2SV> if ( ps_disp_pic == NULL ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> WORD32 fmt_conv ; //<S2SV> if ( 0 == ps_dec_state -> u4_share_disp_buf ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_y_buf = ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 0 ] ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_u_buf = ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 1 ] ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_v_buf = ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 2 ] ; //<S2SV> fmt_conv = 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_y_buf = ps_disp_pic -> pu1_y ; //<S2SV> if ( IV_YUV_420P == ps_dec_state -> i4_chromaFormat ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_u_buf = ps_disp_pic -> pu1_u ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_v_buf = ps_disp_pic -> pu1_v ; //<S2SV> fmt_conv = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> UWORD8 * pu1_buf ; //<S2SV> pu1_buf = ps_dec_state -> as_disp_buffers [ ps_disp_pic -> i4_buf_id ] . pu1_bufs [ 1 ] ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_u_buf = pu1_buf ; //<S2SV> pu1_buf = ps_dec_state -> as_disp_buffers [ ps_disp_pic -> i4_buf_id ] . pu1_bufs [ 2 ] ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . pv_v_buf = pu1_buf ; //<S2SV> fmt_conv = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( fmt_conv == 1 ) //<S2SV> { //<S2SV> iv_yuv_buf_t * ps_dst ; //<S2SV> ps_dst = & ( ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf ) ; //<S2SV> if ( ps_dec_state -> u4_deinterlace && ( 0 == ps_dec_state -> u2_progressive_frame ) ) //<S2SV> { //<S2SV> impeg2d_deinterlace ( ps_dec_state , //<S2SV> ps_disp_pic , //<S2SV> ps_dst , //<S2SV> 0 , //<S2SV> ps_dec_state -> u2_vertical_size ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> impeg2d_format_convert ( ps_dec_state , //<S2SV> ps_disp_pic , //<S2SV> ps_dst , //<S2SV> 0 , //<S2SV> ps_dec_state -> u2_vertical_size ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec_state -> u4_deinterlace ) //<S2SV> { //<S2SV> if ( ps_dec_state -> ps_deint_pic ) //<S2SV> { //<S2SV> impeg2_buf_mgr_release ( ps_dec_state -> pv_pic_buf_mg , //<S2SV> ps_dec_state -> ps_deint_pic -> i4_buf_id , //<S2SV> MPEG2_BUF_MGR_DEINT ) ; //<S2SV> } //<S2SV> ps_dec_state -> ps_deint_pic = ps_disp_pic ; //<S2SV> } //<S2SV> if ( 0 == ps_dec_state -> u4_share_disp_buf ) //<S2SV> impeg2_buf_mgr_release ( ps_dec_state -> pv_pic_buf_mg , ps_disp_pic -> i4_buf_id , BUF_MGR_DISP ) ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_pic_ht = ps_dec_state -> u2_vertical_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_pic_wd = ps_dec_state -> u2_horizontal_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present = 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_disp_buf_id = ps_disp_pic -> i4_buf_id ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_ts = ps_disp_pic -> u4_ts ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_output_format = ( IV_COLOR_FORMAT_T ) ps_dec_state -> i4_chromaFormat ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_is_ref_flag = ( B_PIC != ps_dec_state -> e_pic_type ) ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_progressive_frame_flag = IV_PROGRESSIVE ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_y_wd = ps_dec_state -> u2_horizontal_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_y_strd = ps_dec_state -> u4_frm_buf_stride ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_y_ht = ps_dec_state -> u2_vertical_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_wd = ps_dec_state -> u2_horizontal_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_strd = ps_dec_state -> u4_frm_buf_stride >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_ht = ps_dec_state -> u2_vertical_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_wd = ps_dec_state -> u2_horizontal_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_strd = ps_dec_state -> u4_frm_buf_stride >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_ht = ps_dec_state -> u2_vertical_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_size = sizeof ( ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf ) ; //<S2SV> switch ( ps_dec_state -> i4_chromaFormat ) //<S2SV> { //<S2SV> case IV_YUV_420SP_UV : //<S2SV> case IV_YUV_420SP_VU : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_wd = ps_dec_state -> u2_horizontal_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_strd = ps_dec_state -> u4_frm_buf_stride ; //<S2SV> break ; //<S2SV> case IV_YUV_422ILE : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_wd = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_ht = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_wd = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_ht = 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present ) //<S2SV> { //<S2SV> if ( 1 == ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present ) //<S2SV> { //<S2SV> INSERT_LOGO ( ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 0 ] , //<S2SV> ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 1 ] , //<S2SV> ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 2 ] , //<S2SV> ps_dec_state -> u4_frm_buf_stride , //<S2SV> ps_dec_state -> u2_horizontal_size , //<S2SV> ps_dec_state -> u2_vertical_size , //<S2SV> ps_dec_state -> i4_chromaFormat , //<S2SV> ps_dec_state -> u2_horizontal_size , //<S2SV> ps_dec_state -> u2_vertical_size ) ; //<S2SV> } //<S2SV> return ( IV_SUCCESS ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec_state -> u1_flushfrm = 0 ; //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ps_dec_state -> u1_flushfrm == 0 ) //<S2SV> { //<S2SV> ps_dec_ip -> s_ivd_video_decode_ip_t . u4_size = sizeof ( impeg2d_video_decode_ip_t ) ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_size = sizeof ( impeg2d_video_decode_op_t ) ; //<S2SV> if ( ps_dec_ip -> s_ivd_video_decode_ip_t . u4_num_Bytes < 4 ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_num_bytes_consumed = ps_dec_ip -> s_ivd_video_decode_ip_t . u4_num_Bytes ; //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> if ( 1 == ps_dec_state -> u4_share_disp_buf ) //<S2SV> { //<S2SV> if ( 0 == impeg2_buf_mgr_check_free ( ps_dec_state -> pv_pic_buf_mg ) ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_error_code = //<S2SV> ( IMPEG2D_ERROR_CODES_T ) IVD_DEC_REF_BUF_NULL ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_output_format = ( IV_COLOR_FORMAT_T ) ps_dec_state -> i4_chromaFormat ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_is_ref_flag = ( B_PIC != ps_dec_state -> e_pic_type ) ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_progressive_frame_flag = IV_PROGRESSIVE ; //<S2SV> if ( 0 == ps_dec_state -> u4_frm_buf_stride ) //<S2SV> { //<S2SV> ps_dec_state -> u4_frm_buf_stride = ( ps_dec_state -> u2_horizontal_size ) ; //<S2SV> } //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_y_wd = ps_dec_state -> u2_horizontal_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_y_strd = ps_dec_state -> u4_frm_buf_stride ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_y_ht = ps_dec_state -> u2_vertical_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_wd = ps_dec_state -> u2_horizontal_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_strd = ps_dec_state -> u4_frm_buf_stride >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_ht = ps_dec_state -> u2_vertical_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_wd = ps_dec_state -> u2_horizontal_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_strd = ps_dec_state -> u4_frm_buf_stride >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_ht = ps_dec_state -> u2_vertical_size >> 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_size = sizeof ( ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf ) ; //<S2SV> switch ( ps_dec_state -> i4_chromaFormat ) //<S2SV> { //<S2SV> case IV_YUV_420SP_UV : //<S2SV> case IV_YUV_420SP_VU : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_wd = ps_dec_state -> u2_horizontal_size ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_strd = ps_dec_state -> u4_frm_buf_stride ; //<S2SV> break ; //<S2SV> case IV_YUV_422ILE : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_wd = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_u_ht = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_wd = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . s_disp_frm_buf . u4_v_ht = 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> if ( ps_dec_state -> u1_flushfrm == 0 ) //<S2SV> { //<S2SV> ps_dec_state -> u1_flushcnt = 0 ; //<S2SV> impeg2d_dec_frm ( ps_dec_state , ps_dec_ip , ps_dec_op ) ; //<S2SV> if ( IVD_ERROR_NONE == //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_error_code ) //<S2SV> { //<S2SV> if ( ps_dec_state -> u1_first_frame_done == 0 ) //<S2SV> { //<S2SV> ps_dec_state -> u1_first_frame_done = 1 ; //<S2SV> } //<S2SV> if ( ps_dec_state -> ps_disp_pic ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present = 1 ; //<S2SV> switch ( ps_dec_state -> ps_disp_pic -> e_pic_type ) //<S2SV> { //<S2SV> case I_PIC : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_pic_type = IV_I_FRAME ; //<S2SV> break ; //<S2SV> case P_PIC : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_pic_type = IV_P_FRAME ; //<S2SV> break ; //<S2SV> case B_PIC : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_pic_type = IV_B_FRAME ; //<S2SV> break ; //<S2SV> case D_PIC : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_pic_type = IV_I_FRAME ; //<S2SV> break ; //<S2SV> default : //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_pic_type = IV_FRAMETYPE_DEFAULT ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present = 0 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e_pic_type = IV_NA_FRAME ; //<S2SV> } //<S2SV> ps_dec_state -> u4_num_frames_decoded ++ ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec_state -> u1_flushcnt ++ ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec_state -> ps_disp_pic ) //<S2SV> { //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_disp_buf_id = ps_dec_state -> ps_disp_pic -> i4_buf_id ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_ts = ps_dec_state -> ps_disp_pic -> u4_ts ; //<S2SV> if ( 0 == ps_dec_state -> u4_share_disp_buf ) //<S2SV> { //<S2SV> impeg2_buf_mgr_release ( ps_dec_state -> pv_pic_buf_mg , ps_dec_state -> ps_disp_pic -> i4_buf_id , BUF_MGR_DISP ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec_state -> u4_deinterlace ) //<S2SV> { //<S2SV> if ( ps_dec_state -> ps_deint_pic ) //<S2SV> { //<S2SV> impeg2_buf_mgr_release ( ps_dec_state -> pv_pic_buf_mg , //<S2SV> ps_dec_state -> ps_deint_pic -> i4_buf_id , //<S2SV> MPEG2_BUF_MGR_DEINT ) ; //<S2SV> } //<S2SV> ps_dec_state -> ps_deint_pic = ps_dec_state -> ps_disp_pic ; //<S2SV> } //<S2SV> if ( 1 == ps_dec_op -> s_ivd_video_decode_op_t . u4_output_present ) //<S2SV> { //<S2SV> INSERT_LOGO ( ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 0 ] , //<S2SV> ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 1 ] , //<S2SV> ps_dec_ip -> s_ivd_video_decode_ip_t . s_out_buffer . pu1_bufs [ 2 ] , //<S2SV> ps_dec_state -> u4_frm_buf_stride , //<S2SV> ps_dec_state -> u2_horizontal_size , //<S2SV> ps_dec_state -> u2_vertical_size , //<S2SV> ps_dec_state -> i4_chromaFormat , //<S2SV> ps_dec_state -> u2_horizontal_size , //<S2SV> ps_dec_state -> u2_vertical_size ) ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . u4_progressive_frame_flag = 1 ; //<S2SV> ps_dec_op -> s_ivd_video_decode_op_t . e4_fld_type = ps_dec_state -> s_disp_op . e4_fld_type ; //<S2SV> if ( ps_dec_op -> s_ivd_video_decode_op_t . u4_error_code ) //<S2SV> return IV_FAIL ; //<S2SV> else //<S2SV> return IV_SUCCESS ; //<S2SV> } //<S2SV> 