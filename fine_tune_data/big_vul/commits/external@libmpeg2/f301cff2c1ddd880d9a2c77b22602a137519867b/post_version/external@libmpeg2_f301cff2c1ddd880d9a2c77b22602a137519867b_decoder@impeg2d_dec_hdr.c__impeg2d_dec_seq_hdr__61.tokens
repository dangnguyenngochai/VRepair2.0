IMPEG2D_ERROR_CODES_T impeg2d_dec_seq_hdr ( dec_state_t * ps_dec ) //<S2SV> { //<S2SV> stream_t * ps_stream ; //<S2SV> ps_stream = & ps_dec -> s_bit_stream ; //<S2SV> UWORD16 u2_height ; //<S2SV> UWORD16 u2_width ; //<S2SV> if ( impeg2d_bit_stream_nxt ( ps_stream , START_CODE_LEN ) != SEQUENCE_HEADER_CODE ) //<S2SV> { //<S2SV> impeg2d_bit_stream_flush ( ps_stream , START_CODE_LEN ) ; //<S2SV> return IMPEG2D_FRM_HDR_START_CODE_NOT_FOUND ; //<S2SV> } //<S2SV> impeg2d_bit_stream_flush ( ps_stream , START_CODE_LEN ) ; //<S2SV> u2_width = impeg2d_bit_stream_get ( ps_stream , 12 ) ; //<S2SV> u2_height = impeg2d_bit_stream_get ( ps_stream , 12 ) ; //<S2SV> if ( ( u2_width != ps_dec -> u2_horizontal_size ) //<S2SV> || ( u2_height != ps_dec -> u2_vertical_size ) ) //<S2SV> { //<S2SV> if ( 0 == ps_dec -> u2_header_done ) //<S2SV> { //<S2SV> ps_dec -> u2_horizontal_size = u2_width ; //<S2SV> ps_dec -> u2_vertical_size = u2_height ; //<S2SV> if ( 0 == ps_dec -> u4_frm_buf_stride ) //<S2SV> { //<S2SV> ps_dec -> u4_frm_buf_stride = ( UWORD32 ) ALIGN16 ( u2_width ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ( u2_width > ps_dec -> u2_create_max_width ) //<S2SV> || ( u2_height > ps_dec -> u2_create_max_height ) ) //<S2SV> { //<S2SV> IMPEG2D_ERROR_CODES_T e_error = IMPEG2D_UNSUPPORTED_DIMENSIONS ; //<S2SV> ps_dec -> u2_reinit_max_height = u2_height ; //<S2SV> ps_dec -> u2_reinit_max_width = u2_width ; //<S2SV> return e_error ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> return ( IMPEG2D_ERROR_CODES_T ) IVD_RES_CHANGED ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ( ps_dec -> u2_horizontal_size > ps_dec -> u2_create_max_width ) //<S2SV> || ( ps_dec -> u2_vertical_size > ps_dec -> u2_create_max_height ) ) //<S2SV> { //<S2SV> IMPEG2D_ERROR_CODES_T e_error = IMPEG2D_UNSUPPORTED_DIMENSIONS ; //<S2SV> return SET_IVD_FATAL_ERROR ( e_error ) ; //<S2SV> } //<S2SV> ps_dec -> u2_aspect_ratio_info = impeg2d_bit_stream_get ( ps_stream , 4 ) ; //<S2SV> ps_dec -> u2_frame_rate_code = impeg2d_bit_stream_get ( ps_stream , 4 ) ; //<S2SV> if ( ps_dec -> u2_frame_rate_code > MPEG2_MAX_FRAME_RATE_CODE ) //<S2SV> { //<S2SV> return IMPEG2D_FRM_HDR_DECODE_ERR ; //<S2SV> } //<S2SV> impeg2d_bit_stream_flush ( ps_stream , 18 ) ; //<S2SV> GET_MARKER_BIT ( ps_dec , ps_stream ) ; //<S2SV> impeg2d_bit_stream_flush ( ps_stream , 11 ) ; //<S2SV> if ( impeg2d_bit_stream_get_bit ( ps_stream ) == 1 ) //<S2SV> { //<S2SV> UWORD16 i ; //<S2SV> for ( i = 0 ; i < NUM_PELS_IN_BLOCK ; i ++ ) //<S2SV> { //<S2SV> ps_dec -> au1_intra_quant_matrix [ gau1_impeg2_inv_scan_zig_zag [ i ] ] = ( UWORD8 ) impeg2d_bit_stream_get ( ps_stream , 8 ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memcpy ( ps_dec -> au1_intra_quant_matrix , gau1_impeg2_intra_quant_matrix_default , //<S2SV> NUM_PELS_IN_BLOCK ) ; //<S2SV> } //<S2SV> if ( impeg2d_bit_stream_get_bit ( ps_stream ) == 1 ) //<S2SV> { //<S2SV> UWORD16 i ; //<S2SV> for ( i = 0 ; i < NUM_PELS_IN_BLOCK ; i ++ ) //<S2SV> { //<S2SV> ps_dec -> au1_inter_quant_matrix [ gau1_impeg2_inv_scan_zig_zag [ i ] ] = ( UWORD8 ) impeg2d_bit_stream_get ( ps_stream , 8 ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memcpy ( ps_dec -> au1_inter_quant_matrix , gau1_impeg2_inter_quant_matrix_default , //<S2SV> NUM_PELS_IN_BLOCK ) ; //<S2SV> } //<S2SV> impeg2d_next_start_code ( ps_dec ) ; //<S2SV> return ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; //<S2SV> } //<S2SV> 