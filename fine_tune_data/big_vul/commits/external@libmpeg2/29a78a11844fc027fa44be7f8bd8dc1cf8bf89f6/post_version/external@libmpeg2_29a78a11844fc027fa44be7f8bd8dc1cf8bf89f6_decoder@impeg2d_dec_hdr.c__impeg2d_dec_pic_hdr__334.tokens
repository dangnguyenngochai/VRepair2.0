IMPEG2D_ERROR_CODES_T impeg2d_dec_pic_hdr ( dec_state_t * ps_dec ) //<S2SV> { //<S2SV> stream_t * ps_stream ; //<S2SV> ps_stream = & ps_dec -> s_bit_stream ; //<S2SV> impeg2d_bit_stream_flush ( ps_stream , START_CODE_LEN ) ; //<S2SV> impeg2d_bit_stream_get ( ps_stream , 10 ) ; //<S2SV> ps_dec -> e_pic_type = ( e_pic_type_t ) impeg2d_bit_stream_get ( ps_stream , 3 ) ; //<S2SV> if ( ( ps_dec -> e_pic_type < I_PIC ) || ( ps_dec -> e_pic_type > D_PIC ) ) //<S2SV> { //<S2SV> impeg2d_next_code ( ps_dec , PICTURE_START_CODE ) ; //<S2SV> return IMPEG2D_INVALID_PIC_TYPE ; //<S2SV> } //<S2SV> impeg2d_bit_stream_get ( ps_stream , 16 ) ; //<S2SV> if ( ps_dec -> e_pic_type == P_PIC || ps_dec -> e_pic_type == B_PIC ) //<S2SV> { //<S2SV> ps_dec -> u2_full_pel_forw_vector = impeg2d_bit_stream_get_bit ( ps_stream ) ; //<S2SV> ps_dec -> u2_forw_f_code = impeg2d_bit_stream_get ( ps_stream , 3 ) ; //<S2SV> } //<S2SV> if ( ps_dec -> e_pic_type == B_PIC ) //<S2SV> { //<S2SV> ps_dec -> u2_full_pel_back_vector = impeg2d_bit_stream_get_bit ( ps_stream ) ; //<S2SV> ps_dec -> u2_back_f_code = impeg2d_bit_stream_get ( ps_stream , 3 ) ; //<S2SV> } //<S2SV> if ( ps_dec -> u2_is_mpeg2 == 0 ) //<S2SV> { //<S2SV> if ( ps_dec -> u2_forw_f_code < 1 || ps_dec -> u2_forw_f_code > 7 || //<S2SV> ps_dec -> u2_back_f_code < 1 || ps_dec -> u2_back_f_code > 7 ) //<S2SV> { //<S2SV> return IMPEG2D_UNKNOWN_ERROR ; //<S2SV> } //<S2SV> ps_dec -> au2_f_code [ 0 ] [ 0 ] = ps_dec -> au2_f_code [ 0 ] [ 1 ] = ps_dec -> u2_forw_f_code ; //<S2SV> ps_dec -> au2_f_code [ 1 ] [ 0 ] = ps_dec -> au2_f_code [ 1 ] [ 1 ] = ps_dec -> u2_back_f_code ; //<S2SV> } //<S2SV> while ( impeg2d_bit_stream_nxt ( ps_stream , 1 ) == 1 && //<S2SV> ps_stream -> u4_offset < ps_stream -> u4_max_offset ) //<S2SV> { //<S2SV> impeg2d_bit_stream_get ( ps_stream , 9 ) ; //<S2SV> } //<S2SV> impeg2d_bit_stream_get_bit ( ps_stream ) ; //<S2SV> impeg2d_next_start_code ( ps_dec ) ; //<S2SV> return ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE ; //<S2SV> } //<S2SV> 