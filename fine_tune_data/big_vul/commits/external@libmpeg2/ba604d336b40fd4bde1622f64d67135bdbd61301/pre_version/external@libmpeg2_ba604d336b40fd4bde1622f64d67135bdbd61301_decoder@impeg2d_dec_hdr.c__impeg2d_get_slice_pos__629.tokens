WORD32 impeg2d_get_slice_pos ( dec_state_multi_core_t * ps_dec_state_multi_core ) //<S2SV> { //<S2SV> WORD32 u4_bits ; //<S2SV> WORD32 i4_row ; //<S2SV> dec_state_t * ps_dec = ps_dec_state_multi_core -> ps_dec_state [ 0 ] ; //<S2SV> WORD32 i4_prev_row ; //<S2SV> stream_t s_bitstrm ; //<S2SV> WORD32 i4_start_row ; //<S2SV> WORD32 i4_slice_bistream_ofst ; //<S2SV> WORD32 i ; //<S2SV> s_bitstrm = ps_dec -> s_bit_stream ; //<S2SV> i4_prev_row = - 1 ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 0 ] -> i4_start_mb_y = 0 ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 1 ] -> i4_start_mb_y = - 1 ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 2 ] -> i4_start_mb_y = - 1 ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 3 ] -> i4_start_mb_y = - 1 ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 0 ] -> i4_end_mb_y = ps_dec -> u2_num_vert_mb ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 1 ] -> i4_end_mb_y = - 1 ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 2 ] -> i4_end_mb_y = - 1 ; //<S2SV> ps_dec_state_multi_core -> ps_dec_state [ 3 ] -> i4_end_mb_y = - 1 ; //<S2SV> if ( ps_dec -> i4_num_cores == 1 ) //<S2SV> return 0 ; //<S2SV> impeg2_jobq_reset ( ( jobq_t * ) ps_dec -> pv_jobq ) ; //<S2SV> i4_start_row = - 1 ; //<S2SV> i4_slice_bistream_ofst = 0 ; //<S2SV> while ( 1 ) //<S2SV> { //<S2SV> WORD32 i4_is_slice ; //<S2SV> if ( s_bitstrm . u4_offset + START_CODE_LEN >= s_bitstrm . u4_max_offset ) //<S2SV> { //<S2SV> break ; //<S2SV> } //<S2SV> u4_bits = impeg2d_bit_stream_nxt ( & s_bitstrm , START_CODE_LEN ) ; //<S2SV> i4_row = u4_bits & 0xFF ; //<S2SV> i4_is_slice = ( ( ( u4_bits >> 8 ) == 0x01 ) && ( i4_row ) && ( i4_row <= ps_dec -> u2_num_vert_mb ) ) ; //<S2SV> if ( ! i4_is_slice ) //<S2SV> break ; //<S2SV> i4_row -= 1 ; //<S2SV> if ( i4_prev_row != i4_row ) //<S2SV> { //<S2SV> if ( i4_start_row != - 1 ) //<S2SV> { //<S2SV> job_t s_job ; //<S2SV> IV_API_CALL_STATUS_T ret ; //<S2SV> s_job . i2_start_mb_y = i4_start_row ; //<S2SV> s_job . i2_end_mb_y = i4_row ; //<S2SV> s_job . i4_cmd = CMD_PROCESS ; //<S2SV> s_job . i4_bistream_ofst = i4_slice_bistream_ofst ; //<S2SV> ret = impeg2_jobq_queue ( ps_dec -> pv_jobq , & s_job , sizeof ( s_job ) , 1 , 0 ) ; //<S2SV> if ( ret != IV_SUCCESS ) //<S2SV> return ret ; //<S2SV> } //<S2SV> i4_slice_bistream_ofst = s_bitstrm . u4_offset >> 3 ; //<S2SV> i4_slice_bistream_ofst -= ( size_t ) s_bitstrm . pv_bs_buf & 3 ; //<S2SV> i4_prev_row = i4_row ; //<S2SV> i4_start_row = i4_row ; //<S2SV> } //<S2SV> impeg2d_bit_stream_flush ( & s_bitstrm , START_CODE_LEN ) ; //<S2SV> while ( impeg2d_bit_stream_nxt ( & s_bitstrm , 24 ) != START_CODE_PREFIX ) //<S2SV> { //<S2SV> impeg2d_bit_stream_get ( & s_bitstrm , 8 ) ; //<S2SV> if ( s_bitstrm . u4_offset >= s_bitstrm . u4_max_offset ) //<S2SV> { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> job_t s_job ; //<S2SV> IV_API_CALL_STATUS_T e_ret ; //<S2SV> s_job . i2_start_mb_y = i4_start_row ; //<S2SV> s_job . i2_end_mb_y = ps_dec -> u2_num_vert_mb ; //<S2SV> s_job . i4_cmd = CMD_PROCESS ; //<S2SV> s_job . i4_bistream_ofst = i4_slice_bistream_ofst ; //<S2SV> e_ret = impeg2_jobq_queue ( ps_dec -> pv_jobq , & s_job , sizeof ( s_job ) , 1 , 0 ) ; //<S2SV> if ( e_ret != IV_SUCCESS ) //<S2SV> return e_ret ; //<S2SV> } //<S2SV> if ( ( NULL != ps_dec -> ps_disp_pic ) && ( ( 0 == ps_dec -> u4_share_disp_buf ) || ( IV_YUV_420P != ps_dec -> i4_chromaFormat ) ) ) //<S2SV> { //<S2SV> for ( i = 0 ; i < ps_dec -> u2_vertical_size ; i += 64 ) //<S2SV> { //<S2SV> job_t s_job ; //<S2SV> IV_API_CALL_STATUS_T ret ; //<S2SV> s_job . i2_start_mb_y = i ; //<S2SV> s_job . i2_start_mb_y >>= 4 ; //<S2SV> s_job . i2_end_mb_y = ( i + 64 ) ; //<S2SV> s_job . i2_end_mb_y >>= 4 ; //<S2SV> s_job . i4_cmd = CMD_FMTCONV ; //<S2SV> s_job . i4_bistream_ofst = 0 ; //<S2SV> ret = impeg2_jobq_queue ( ps_dec -> pv_jobq , & s_job , sizeof ( s_job ) , 1 , 0 ) ; //<S2SV> if ( ret != IV_SUCCESS ) //<S2SV> return ret ; //<S2SV> } //<S2SV> } //<S2SV> impeg2_jobq_terminate ( ps_dec -> pv_jobq ) ; //<S2SV> ps_dec -> i4_bytes_consumed = s_bitstrm . u4_offset >> 3 ; //<S2SV> ps_dec -> i4_bytes_consumed -= ( ( size_t ) s_bitstrm . pv_bs_buf & 3 ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 