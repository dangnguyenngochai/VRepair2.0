void impeg2d_dec_pic_data_thread ( dec_state_t * ps_dec ) //<S2SV> { //<S2SV> WORD32 i4_continue_decode ; //<S2SV> WORD32 i4_cur_row , temp ; //<S2SV> UWORD32 u4_bits_read ; //<S2SV> WORD32 i4_dequeue_job ; //<S2SV> IMPEG2D_ERROR_CODES_T e_error ; //<S2SV> i4_cur_row = ps_dec -> u2_mb_y + 1 ; //<S2SV> i4_continue_decode = 1 ; //<S2SV> i4_dequeue_job = 1 ; //<S2SV> do //<S2SV> { //<S2SV> if ( i4_cur_row > ps_dec -> u2_num_vert_mb ) //<S2SV> { //<S2SV> i4_continue_decode = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> { //<S2SV> if ( ( ps_dec -> i4_num_cores > 1 ) && ( i4_dequeue_job ) ) //<S2SV> { //<S2SV> job_t s_job ; //<S2SV> IV_API_CALL_STATUS_T e_ret ; //<S2SV> UWORD8 * pu1_buf ; //<S2SV> e_ret = impeg2_jobq_dequeue ( ps_dec -> pv_jobq , & s_job , sizeof ( s_job ) , 1 , 1 ) ; //<S2SV> if ( e_ret != IV_SUCCESS ) //<S2SV> break ; //<S2SV> if ( CMD_PROCESS == s_job . i4_cmd ) //<S2SV> { //<S2SV> pu1_buf = ps_dec -> pu1_inp_bits_buf + s_job . i4_bistream_ofst ; //<S2SV> impeg2d_bit_stream_init ( & ( ps_dec -> s_bit_stream ) , pu1_buf , //<S2SV> ( ps_dec -> u4_num_inp_bytes - s_job . i4_bistream_ofst ) + 8 ) ; //<S2SV> i4_cur_row = s_job . i2_start_mb_y ; //<S2SV> ps_dec -> i4_start_mb_y = s_job . i2_start_mb_y ; //<S2SV> ps_dec -> i4_end_mb_y = s_job . i2_end_mb_y ; //<S2SV> ps_dec -> u2_mb_x = 0 ; //<S2SV> ps_dec -> u2_mb_y = ps_dec -> i4_start_mb_y ; //<S2SV> ps_dec -> u2_num_mbs_left = ( ps_dec -> i4_end_mb_y - ps_dec -> i4_start_mb_y ) * ps_dec -> u2_num_horiz_mb ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> WORD32 start_row ; //<S2SV> WORD32 num_rows ; //<S2SV> start_row = s_job . i2_start_mb_y << 4 ; //<S2SV> num_rows = MIN ( ( s_job . i2_end_mb_y << 4 ) , ps_dec -> u2_vertical_size ) ; //<S2SV> num_rows -= start_row ; //<S2SV> impeg2d_format_convert ( ps_dec , ps_dec -> ps_disp_pic , //<S2SV> ps_dec -> ps_disp_frm_buf , //<S2SV> start_row , num_rows ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> e_error = impeg2d_dec_slice ( ps_dec ) ; //<S2SV> if ( ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE != e_error ) //<S2SV> { //<S2SV> impeg2d_next_start_code ( ps_dec ) ; //<S2SV> } //<S2SV> } //<S2SV> while ( 1 ) //<S2SV> { //<S2SV> u4_bits_read = impeg2d_bit_stream_nxt ( & ps_dec -> s_bit_stream , START_CODE_LEN ) ; //<S2SV> temp = u4_bits_read & 0xFF ; //<S2SV> i4_continue_decode = ( ( ( u4_bits_read >> 8 ) == 0x01 ) && ( temp ) && ( temp <= 0xAF ) ) ; //<S2SV> if ( 1 == ps_dec -> i4_num_cores && 0 == ps_dec -> u2_num_mbs_left ) //<S2SV> { //<S2SV> i4_continue_decode = 0 ; //<S2SV> android_errorWriteLog ( 0x534e4554 , "26070014" ) ; //<S2SV> } //<S2SV> if ( i4_continue_decode ) //<S2SV> { //<S2SV> if ( ( temp - 1 ) == i4_cur_row ) //<S2SV> { //<S2SV> i4_dequeue_job = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( temp < ps_dec -> i4_end_mb_y ) //<S2SV> { //<S2SV> i4_cur_row = ps_dec -> u2_mb_y ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> i4_dequeue_job = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> else //<S2SV> break ; //<S2SV> } //<S2SV> } while ( i4_continue_decode ) ; //<S2SV> if ( ps_dec -> i4_num_cores > 1 ) //<S2SV> { //<S2SV> while ( 1 ) //<S2SV> { //<S2SV> job_t s_job ; //<S2SV> IV_API_CALL_STATUS_T e_ret ; //<S2SV> e_ret = impeg2_jobq_dequeue ( ps_dec -> pv_jobq , & s_job , sizeof ( s_job ) , 1 , 1 ) ; //<S2SV> if ( e_ret != IV_SUCCESS ) //<S2SV> break ; //<S2SV> if ( CMD_FMTCONV == s_job . i4_cmd ) //<S2SV> { //<S2SV> WORD32 start_row ; //<S2SV> WORD32 num_rows ; //<S2SV> start_row = s_job . i2_start_mb_y << 4 ; //<S2SV> num_rows = MIN ( ( s_job . i2_end_mb_y << 4 ) , ps_dec -> u2_vertical_size ) ; //<S2SV> num_rows -= start_row ; //<S2SV> impeg2d_format_convert ( ps_dec , ps_dec -> ps_disp_pic , //<S2SV> ps_dec -> ps_disp_frm_buf , //<S2SV> start_row , num_rows ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ( NULL != ps_dec -> ps_disp_pic ) && ( ( 0 == ps_dec -> u4_share_disp_buf ) || ( IV_YUV_420P != ps_dec -> i4_chromaFormat ) ) ) //<S2SV> impeg2d_format_convert ( ps_dec , ps_dec -> ps_disp_pic , //<S2SV> ps_dec -> ps_disp_frm_buf , //<S2SV> 0 , ps_dec -> u2_vertical_size ) ; //<S2SV> } //<S2SV> } //<S2SV> 