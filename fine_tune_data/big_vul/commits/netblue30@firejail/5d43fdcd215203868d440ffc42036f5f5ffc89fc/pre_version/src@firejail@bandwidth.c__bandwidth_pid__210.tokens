void bandwidth_pid ( pid_t pid , const char * command , const char * dev , int down , int up ) { //<S2SV> EUID_ASSERT ( ) ; //<S2SV> EUID_ROOT ( ) ; //<S2SV> char * comm = pid_proc_comm ( pid ) ; //<S2SV> EUID_USER ( ) ; //<S2SV> if ( ! comm ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>cannot<S2SV_blank>find<S2SV_blank>sandbox\\n" ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> if ( strcmp ( comm , "firejail" ) != 0 ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>cannot<S2SV_blank>find<S2SV_blank>sandbox\\n" ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> free ( comm ) ; //<S2SV> char * name ; //<S2SV> if ( asprintf ( & name , "/run/firejail/network/%d-netmap" , pid ) == - 1 ) //<S2SV> errExit ( "asprintf" ) ; //<S2SV> struct stat s ; //<S2SV> if ( stat ( name , & s ) == - 1 ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>the<S2SV_blank>sandbox<S2SV_blank>doesn\'t<S2SV_blank>use<S2SV_blank>a<S2SV_blank>new<S2SV_blank>network<S2SV_blank>namespace\\n" ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> pid_t child ; //<S2SV> if ( find_child ( pid , & child ) == - 1 ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>cannot<S2SV_blank>join<S2SV_blank>the<S2SV_blank>network<S2SV_blank>namespace\\n" ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> EUID_ROOT ( ) ; //<S2SV> if ( join_namespace ( child , "net" ) ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>cannot<S2SV_blank>join<S2SV_blank>the<S2SV_blank>network<S2SV_blank>namespace\\n" ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> if ( strcmp ( command , "set" ) == 0 ) //<S2SV> bandwidth_set ( pid , dev , down , up ) ; //<S2SV> else if ( strcmp ( command , "clear" ) == 0 ) //<S2SV> bandwidth_remove ( pid , dev ) ; //<S2SV> char * devname = NULL ; //<S2SV> if ( dev ) { //<S2SV> char * fname ; //<S2SV> if ( asprintf ( & fname , "%s/%d-netmap" , RUN_FIREJAIL_NETWORK_DIR , ( int ) pid ) == - 1 ) //<S2SV> errExit ( "asprintf" ) ; //<S2SV> FILE * fp = fopen ( fname , "r" ) ; //<S2SV> if ( ! fp ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>cannot<S2SV_blank>read<S2SV_blank>network<S2SV_blank>map<S2SV_blank>file<S2SV_blank>%s\\n" , fname ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> char buf [ 1024 ] ; //<S2SV> int len = strlen ( dev ) ; //<S2SV> while ( fgets ( buf , 1024 , fp ) ) { //<S2SV> char * ptr = strchr ( buf , '\\n' ) ; //<S2SV> if ( ptr ) //<S2SV> * ptr = '\\0' ; //<S2SV> if ( * buf == '\\0' ) //<S2SV> break ; //<S2SV> if ( strncmp ( buf , dev , len ) == 0 && buf [ len ] == ':' ) { //<S2SV> devname = strdup ( buf + len + 1 ) ; //<S2SV> if ( ! devname ) //<S2SV> errExit ( "strdup" ) ; //<S2SV> if ( if_nametoindex ( devname ) == 0 ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>cannot<S2SV_blank>find<S2SV_blank>network<S2SV_blank>device<S2SV_blank>%s\\n" , devname ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> free ( fname ) ; //<S2SV> fclose ( fp ) ; //<S2SV> } //<S2SV> char * cmd = NULL ; //<S2SV> if ( devname ) { //<S2SV> if ( strcmp ( command , "set" ) == 0 ) { //<S2SV> if ( asprintf ( & cmd , "%s/firejail/fshaper.sh<S2SV_blank>--%s<S2SV_blank>%s<S2SV_blank>%d<S2SV_blank>%d" , //<S2SV> LIBDIR , command , devname , down , up ) == - 1 ) //<S2SV> errExit ( "asprintf" ) ; //<S2SV> } //<S2SV> else { //<S2SV> if ( asprintf ( & cmd , "%s/firejail/fshaper.sh<S2SV_blank>--%s<S2SV_blank>%s" , //<S2SV> LIBDIR , command , devname ) == - 1 ) //<S2SV> errExit ( "asprintf" ) ; //<S2SV> } //<S2SV> } //<S2SV> else { //<S2SV> if ( asprintf ( & cmd , "%s/firejail/fshaper.sh<S2SV_blank>--%s" , LIBDIR , command ) == - 1 ) //<S2SV> errExit ( "asprintf" ) ; //<S2SV> } //<S2SV> assert ( cmd ) ; //<S2SV> environ = NULL ; //<S2SV> if ( setreuid ( 0 , 0 ) ) //<S2SV> errExit ( "setreuid" ) ; //<S2SV> if ( setregid ( 0 , 0 ) ) //<S2SV> errExit ( "setregid" ) ; //<S2SV> if ( ! cfg . shell ) //<S2SV> cfg . shell = guess_shell ( ) ; //<S2SV> if ( ! cfg . shell ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>no<S2SV_blank>POSIX<S2SV_blank>shell<S2SV_blank>found,<S2SV_blank>please<S2SV_blank>use<S2SV_blank>--shell<S2SV_blank>command<S2SV_blank>line<S2SV_blank>option\\n" ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> char * arg [ 4 ] ; //<S2SV> arg [ 0 ] = cfg . shell ; //<S2SV> arg [ 1 ] = "-c" ; //<S2SV> arg [ 2 ] = cmd ; //<S2SV> arg [ 3 ] = NULL ; //<S2SV> clearenv ( ) ; //<S2SV> execvp ( arg [ 0 ] , arg ) ; //<S2SV> errExit ( "execvp" ) ; //<S2SV> } //<S2SV> 