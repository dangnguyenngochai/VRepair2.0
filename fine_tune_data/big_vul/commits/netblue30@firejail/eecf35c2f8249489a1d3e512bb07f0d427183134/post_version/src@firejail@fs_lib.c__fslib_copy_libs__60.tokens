void fslib_copy_libs ( const char * full_path ) { //<S2SV> assert ( full_path ) ; //<S2SV> if ( arg_debug || arg_debug_private_lib ) //<S2SV> printf ( "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>fslib_copy_libs<S2SV_blank>%s\\n" , full_path ) ; //<S2SV> if ( access ( full_path , R_OK ) ) { //<S2SV> if ( arg_debug || arg_debug_private_lib ) //<S2SV> printf ( "cannot<S2SV_blank>find<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>private-lib,<S2SV_blank>skipping...\\n" , full_path ) ; //<S2SV> return ; //<S2SV> } //<S2SV> unlink ( RUN_LIB_FILE ) ; //<S2SV> create_empty_file_as_root ( RUN_LIB_FILE , 0644 ) ; //<S2SV> if ( chown ( RUN_LIB_FILE , getuid ( ) , getgid ( ) ) ) //<S2SV> errExit ( "chown" ) ; //<S2SV> if ( arg_debug || arg_debug_private_lib ) //<S2SV> printf ( "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>running<S2SV_blank>fldd<S2SV_blank>%s\\n" , full_path ) ; //<S2SV> sbox_run ( SBOX_USER | SBOX_SECCOMP | SBOX_CAPS_NONE , 3 , PATH_FLDD , full_path , RUN_LIB_FILE ) ; //<S2SV> FILE * fp = fopen ( RUN_LIB_FILE , "r" ) ; //<S2SV> if ( ! fp ) //<S2SV> errExit ( "fopen" ) ; //<S2SV> char buf [ MAXBUF ] ; //<S2SV> while ( fgets ( buf , MAXBUF , fp ) ) { //<S2SV> char * ptr = strchr ( buf , '\\n' ) ; //<S2SV> if ( ptr ) //<S2SV> * ptr = '\\0' ; //<S2SV> fslib_duplicate ( buf ) ; //<S2SV> } //<S2SV> fclose ( fp ) ; //<S2SV> unlink ( RUN_LIB_FILE ) ; //<S2SV> } //<S2SV> 