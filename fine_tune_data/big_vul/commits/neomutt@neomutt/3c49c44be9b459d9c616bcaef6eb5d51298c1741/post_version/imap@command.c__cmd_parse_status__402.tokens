static void cmd_parse_status ( struct ImapData * idata , char * s ) //<S2SV> { //<S2SV> char * value = NULL ; //<S2SV> struct Buffy * inc = NULL ; //<S2SV> struct ImapMbox mx ; //<S2SV> struct ImapStatus * status = NULL ; //<S2SV> unsigned int olduv , oldun ; //<S2SV> unsigned int litlen ; //<S2SV> short new = 0 ; //<S2SV> short new_msg_count = 0 ; //<S2SV> char * mailbox = imap_next_word ( s ) ; //<S2SV> if ( imap_get_literal_count ( mailbox , & litlen ) == 0 ) //<S2SV> { //<S2SV> if ( imap_cmd_step ( idata ) != IMAP_CMD_CONTINUE ) //<S2SV> { //<S2SV> idata -> status = IMAP_FATAL ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( strlen ( idata -> buf ) < litlen ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "Error<S2SV_blank>parsing<S2SV_blank>STATUS<S2SV_blank>mailbox\\n" ) ; //<S2SV> return ; //<S2SV> } //<S2SV> mailbox = idata -> buf ; //<S2SV> s = mailbox + litlen ; //<S2SV> * s = '\\0' ; //<S2SV> s ++ ; //<S2SV> SKIPWS ( s ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> s = imap_next_word ( mailbox ) ; //<S2SV> * ( s - 1 ) = '\\0' ; //<S2SV> imap_unmunge_mbox_name ( idata , mailbox ) ; //<S2SV> } //<S2SV> status = imap_mboxcache_get ( idata , mailbox , 1 ) ; //<S2SV> olduv = status -> uidvalidity ; //<S2SV> oldun = status -> uidnext ; //<S2SV> if ( * s ++ != '(' ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "Error<S2SV_blank>parsing<S2SV_blank>STATUS\\n" ) ; //<S2SV> return ; //<S2SV> } //<S2SV> while ( * s && * s != ')' ) //<S2SV> { //<S2SV> value = imap_next_word ( s ) ; //<S2SV> errno = 0 ; //<S2SV> const unsigned long ulcount = strtoul ( value , & value , 10 ) ; //<S2SV> if ( ( ( errno == ERANGE ) && ( ulcount == ULONG_MAX ) ) || ( ( unsigned int ) ulcount != ulcount ) ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "Error<S2SV_blank>parsing<S2SV_blank>STATUS<S2SV_blank>number\\n" ) ; //<S2SV> return ; //<S2SV> } //<S2SV> const unsigned int count = ( unsigned int ) ulcount ; //<S2SV> if ( mutt_str_strncmp ( "MESSAGES" , s , 8 ) == 0 ) //<S2SV> { //<S2SV> status -> messages = count ; //<S2SV> new_msg_count = 1 ; //<S2SV> } //<S2SV> else if ( mutt_str_strncmp ( "RECENT" , s , 6 ) == 0 ) //<S2SV> status -> recent = count ; //<S2SV> else if ( mutt_str_strncmp ( "UIDNEXT" , s , 7 ) == 0 ) //<S2SV> status -> uidnext = count ; //<S2SV> else if ( mutt_str_strncmp ( "UIDVALIDITY" , s , 11 ) == 0 ) //<S2SV> status -> uidvalidity = count ; //<S2SV> else if ( mutt_str_strncmp ( "UNSEEN" , s , 6 ) == 0 ) //<S2SV> status -> unseen = count ; //<S2SV> s = value ; //<S2SV> if ( * s && * s != ')' ) //<S2SV> s = imap_next_word ( s ) ; //<S2SV> } //<S2SV> mutt_debug ( 3 , "%s<S2SV_blank>(UIDVALIDITY:<S2SV_blank>%u,<S2SV_blank>UIDNEXT:<S2SV_blank>%u)<S2SV_blank>%d<S2SV_blank>messages,<S2SV_blank>%d<S2SV_blank>recent,<S2SV_blank>%d<S2SV_blank>unseen\\n" , //<S2SV> status -> name , status -> uidvalidity , status -> uidnext , //<S2SV> status -> messages , status -> recent , status -> unseen ) ; //<S2SV> if ( idata -> cmddata && idata -> cmdtype == IMAP_CT_STATUS ) //<S2SV> { //<S2SV> memcpy ( idata -> cmddata , status , sizeof ( struct ImapStatus ) ) ; //<S2SV> return ; //<S2SV> } //<S2SV> mutt_debug ( 3 , "Running<S2SV_blank>default<S2SV_blank>STATUS<S2SV_blank>handler\\n" ) ; //<S2SV> for ( inc = Incoming ; inc ; inc = inc -> next ) //<S2SV> { //<S2SV> if ( inc -> magic != MUTT_IMAP ) //<S2SV> continue ; //<S2SV> if ( imap_parse_path ( inc -> path , & mx ) < 0 ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "Error<S2SV_blank>parsing<S2SV_blank>mailbox<S2SV_blank>%s,<S2SV_blank>skipping\\n" , inc -> path ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( imap_account_match ( & idata -> conn -> account , & mx . account ) ) //<S2SV> { //<S2SV> if ( mx . mbox ) //<S2SV> { //<S2SV> value = mutt_str_strdup ( mx . mbox ) ; //<S2SV> imap_fix_path ( idata , mx . mbox , value , mutt_str_strlen ( value ) + 1 ) ; //<S2SV> FREE ( & mx . mbox ) ; //<S2SV> } //<S2SV> else //<S2SV> value = mutt_str_strdup ( "INBOX" ) ; //<S2SV> if ( value && ( imap_mxcmp ( mailbox , value ) == 0 ) ) //<S2SV> { //<S2SV> mutt_debug ( 3 , "Found<S2SV_blank>%s<S2SV_blank>in<S2SV_blank>buffy<S2SV_blank>list<S2SV_blank>(OV:<S2SV_blank>%u<S2SV_blank>ON:<S2SV_blank>%u<S2SV_blank>U:<S2SV_blank>%d)\\n" , mailbox , //<S2SV> olduv , oldun , status -> unseen ) ; //<S2SV> if ( MailCheckRecent ) //<S2SV> { //<S2SV> if ( olduv && olduv == status -> uidvalidity ) //<S2SV> { //<S2SV> if ( oldun < status -> uidnext ) //<S2SV> new = ( status -> unseen > 0 ) ; //<S2SV> } //<S2SV> else if ( ! olduv && ! oldun ) //<S2SV> { //<S2SV> new = ( status -> recent > 0 ) ; //<S2SV> } //<S2SV> else //<S2SV> new = ( status -> unseen > 0 ) ; //<S2SV> } //<S2SV> else //<S2SV> new = ( status -> unseen > 0 ) ; //<S2SV> # ifdef USE_SIDEBAR //<S2SV> if ( ( inc -> new != new ) || ( inc -> msg_count != status -> messages ) || //<S2SV> ( inc -> msg_unread != status -> unseen ) ) //<S2SV> { //<S2SV> mutt_menu_set_current_redraw ( REDRAW_SIDEBAR ) ; //<S2SV> } //<S2SV> # endif //<S2SV> inc -> new = new ; //<S2SV> if ( new_msg_count ) //<S2SV> inc -> msg_count = status -> messages ; //<S2SV> inc -> msg_unread = status -> unseen ; //<S2SV> if ( inc -> new ) //<S2SV> { //<S2SV> status -> uidnext = oldun ; //<S2SV> } //<S2SV> FREE ( & value ) ; //<S2SV> return ; //<S2SV> } //<S2SV> FREE ( & value ) ; //<S2SV> } //<S2SV> FREE ( & mx . mbox ) ; //<S2SV> } //<S2SV> } //<S2SV> 