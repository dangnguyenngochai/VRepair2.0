static int pop_sync_mailbox ( struct Context * ctx , int * index_hint ) //<S2SV> { //<S2SV> int i , j , ret = 0 ; //<S2SV> char buf [ LONG_STRING ] ; //<S2SV> struct PopData * pop_data = ( struct PopData * ) ctx -> data ; //<S2SV> struct Progress progress ; //<S2SV> # ifdef USE_HCACHE //<S2SV> header_cache_t * hc = NULL ; //<S2SV> # endif //<S2SV> pop_data -> check_time = 0 ; //<S2SV> while ( true ) //<S2SV> { //<S2SV> if ( pop_reconnect ( ctx ) < 0 ) //<S2SV> return - 1 ; //<S2SV> mutt_progress_init ( & progress , _ ( "Marking<S2SV_blank>messages<S2SV_blank>deleted..." ) , //<S2SV> MUTT_PROGRESS_MSG , WriteInc , ctx -> deleted ) ; //<S2SV> # ifdef USE_HCACHE //<S2SV> hc = pop_hcache_open ( pop_data , ctx -> path ) ; //<S2SV> # endif //<S2SV> for ( i = 0 , j = 0 , ret = 0 ; ret == 0 && i < ctx -> msgcount ; i ++ ) //<S2SV> { //<S2SV> if ( ctx -> hdrs [ i ] -> deleted && ctx -> hdrs [ i ] -> refno != - 1 ) //<S2SV> { //<S2SV> j ++ ; //<S2SV> if ( ! ctx -> quiet ) //<S2SV> mutt_progress_update ( & progress , j , - 1 ) ; //<S2SV> snprintf ( buf , sizeof ( buf ) , "DELE<S2SV_blank>%d\\r\\n" , ctx -> hdrs [ i ] -> refno ) ; //<S2SV> ret = pop_query ( pop_data , buf , sizeof ( buf ) ) ; //<S2SV> if ( ret == 0 ) //<S2SV> { //<S2SV> mutt_bcache_del ( pop_data -> bcache , cache_id ( ctx -> hdrs [ i ] -> data ) ) ; //<S2SV> # ifdef USE_HCACHE //<S2SV> mutt_hcache_delete ( hc , ctx -> hdrs [ i ] -> data , strlen ( ctx -> hdrs [ i ] -> data ) ) ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> # ifdef USE_HCACHE //<S2SV> if ( ctx -> hdrs [ i ] -> changed ) //<S2SV> { //<S2SV> mutt_hcache_store ( hc , ctx -> hdrs [ i ] -> data , strlen ( ctx -> hdrs [ i ] -> data ) , //<S2SV> ctx -> hdrs [ i ] , 0 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> # ifdef USE_HCACHE //<S2SV> mutt_hcache_close ( hc ) ; //<S2SV> # endif //<S2SV> if ( ret == 0 ) //<S2SV> { //<S2SV> mutt_str_strfcpy ( buf , "QUIT\\r\\n" , sizeof ( buf ) ) ; //<S2SV> ret = pop_query ( pop_data , buf , sizeof ( buf ) ) ; //<S2SV> } //<S2SV> if ( ret == 0 ) //<S2SV> { //<S2SV> pop_data -> clear_cache = true ; //<S2SV> pop_clear_cache ( pop_data ) ; //<S2SV> pop_data -> status = POP_DISCONNECTED ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ret == - 2 ) //<S2SV> { //<S2SV> mutt_error ( "%s" , pop_data -> err_msg ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 