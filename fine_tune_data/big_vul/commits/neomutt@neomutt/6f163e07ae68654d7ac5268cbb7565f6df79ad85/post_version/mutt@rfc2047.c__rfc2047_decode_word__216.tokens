static char * rfc2047_decode_word ( const char * s , size_t len , enum ContentEncoding enc ) //<S2SV> { //<S2SV> const char * it = s ; //<S2SV> const char * end = s + len ; //<S2SV> if ( enc == ENCQUOTEDPRINTABLE ) //<S2SV> { //<S2SV> struct Buffer buf = { 0 } ; //<S2SV> for ( ; it < end ; ++ it ) //<S2SV> { //<S2SV> if ( * it == '_' ) //<S2SV> { //<S2SV> mutt_buffer_addch ( & buf , '<S2SV_blank>' ) ; //<S2SV> } //<S2SV> else if ( ( * it == '=' ) && ( ! ( it [ 1 ] & ~ 127 ) && hexval ( it [ 1 ] ) != - 1 ) && //<S2SV> ( ! ( it [ 2 ] & ~ 127 ) && hexval ( it [ 2 ] ) != - 1 ) ) //<S2SV> { //<S2SV> mutt_buffer_addch ( & buf , ( hexval ( it [ 1 ] ) << 4 ) | hexval ( it [ 2 ] ) ) ; //<S2SV> it += 2 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> mutt_buffer_addch ( & buf , * it ) ; //<S2SV> } //<S2SV> } //<S2SV> mutt_buffer_addch ( & buf , '\\0' ) ; //<S2SV> return buf . data ; //<S2SV> } //<S2SV> else if ( enc == ENCBASE64 ) //<S2SV> { //<S2SV> const int olen = 3 * len / 4 + 1 ; //<S2SV> char * out = mutt_mem_malloc ( olen ) ; //<S2SV> int dlen = mutt_b64_decode ( out , it , olen ) ; //<S2SV> if ( dlen == - 1 ) //<S2SV> { //<S2SV> FREE ( & out ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> out [ dlen ] = '\\0' ; //<S2SV> return out ; //<S2SV> } //<S2SV> assert ( 0 ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 