enum ImapAuthRes imap_auth_gss ( struct ImapData * idata , const char * method ) //<S2SV> { //<S2SV> gss_buffer_desc request_buf , send_token ; //<S2SV> gss_buffer_t sec_token ; //<S2SV> gss_name_t target_name ; //<S2SV> gss_ctx_id_t context ; //<S2SV> gss_OID mech_name ; //<S2SV> char server_conf_flags ; //<S2SV> gss_qop_t quality ; //<S2SV> int cflags ; //<S2SV> OM_uint32 maj_stat , min_stat ; //<S2SV> char buf1 [ GSS_BUFSIZE ] , buf2 [ GSS_BUFSIZE ] ; //<S2SV> unsigned long buf_size ; //<S2SV> int rc ; //<S2SV> if ( ! mutt_bit_isset ( idata -> capabilities , AGSSAPI ) ) //<S2SV> return IMAP_AUTH_UNAVAIL ; //<S2SV> if ( mutt_account_getuser ( & idata -> conn -> account ) < 0 ) //<S2SV> return IMAP_AUTH_FAILURE ; //<S2SV> snprintf ( buf1 , sizeof ( buf1 ) , "imap@%s" , idata -> conn -> account . host ) ; //<S2SV> request_buf . value = buf1 ; //<S2SV> request_buf . length = strlen ( buf1 ) ; //<S2SV> maj_stat = gss_import_name ( & min_stat , & request_buf , gss_nt_service_name , & target_name ) ; //<S2SV> if ( maj_stat != GSS_S_COMPLETE ) //<S2SV> { //<S2SV> mutt_debug ( 2 , "Couldn\'t<S2SV_blank>get<S2SV_blank>service<S2SV_blank>name<S2SV_blank>for<S2SV_blank>[%s]\\n" , buf1 ) ; //<S2SV> return IMAP_AUTH_UNAVAIL ; //<S2SV> } //<S2SV> else if ( DebugLevel >= 2 ) //<S2SV> { //<S2SV> gss_display_name ( & min_stat , target_name , & request_buf , & mech_name ) ; //<S2SV> mutt_debug ( 2 , "Using<S2SV_blank>service<S2SV_blank>name<S2SV_blank>[%s]\\n" , ( char * ) request_buf . value ) ; //<S2SV> gss_release_buffer ( & min_stat , & request_buf ) ; //<S2SV> } //<S2SV> sec_token = GSS_C_NO_BUFFER ; //<S2SV> context = GSS_C_NO_CONTEXT ; //<S2SV> maj_stat = gss_init_sec_context ( & min_stat , GSS_C_NO_CREDENTIAL , & context , target_name , //<S2SV> GSS_C_NO_OID , GSS_C_MUTUAL_FLAG | GSS_C_SEQUENCE_FLAG , //<S2SV> 0 , GSS_C_NO_CHANNEL_BINDINGS , sec_token , NULL , //<S2SV> & send_token , ( unsigned int * ) & cflags , NULL ) ; //<S2SV> if ( maj_stat != GSS_S_COMPLETE && maj_stat != GSS_S_CONTINUE_NEEDED ) //<S2SV> { //<S2SV> print_gss_error ( maj_stat , min_stat ) ; //<S2SV> mutt_debug ( 1 , "Error<S2SV_blank>acquiring<S2SV_blank>credentials<S2SV_blank>-<S2SV_blank>no<S2SV_blank>TGT?\\n" ) ; //<S2SV> gss_release_name ( & min_stat , & target_name ) ; //<S2SV> return IMAP_AUTH_UNAVAIL ; //<S2SV> } //<S2SV> mutt_message ( _ ( "Authenticating<S2SV_blank>(GSSAPI)..." ) ) ; //<S2SV> imap_cmd_start ( idata , "AUTHENTICATE<S2SV_blank>GSSAPI" ) ; //<S2SV> do //<S2SV> rc = imap_cmd_step ( idata ) ; //<S2SV> while ( rc == IMAP_CMD_CONTINUE ) ; //<S2SV> if ( rc != IMAP_CMD_RESPOND ) //<S2SV> { //<S2SV> mutt_debug ( 2 , "Invalid<S2SV_blank>response<S2SV_blank>from<S2SV_blank>server:<S2SV_blank>%s\\n" , buf1 ) ; //<S2SV> gss_release_name ( & min_stat , & target_name ) ; //<S2SV> goto bail ; //<S2SV> } //<S2SV> mutt_debug ( 2 , "Sending<S2SV_blank>credentials\\n" ) ; //<S2SV> mutt_b64_encode ( buf1 , send_token . value , send_token . length , sizeof ( buf1 ) - 2 ) ; //<S2SV> gss_release_buffer ( & min_stat , & send_token ) ; //<S2SV> mutt_str_strcat ( buf1 , sizeof ( buf1 ) , "\\r\\n" ) ; //<S2SV> mutt_socket_send ( idata -> conn , buf1 ) ; //<S2SV> while ( maj_stat == GSS_S_CONTINUE_NEEDED ) //<S2SV> { //<S2SV> do //<S2SV> rc = imap_cmd_step ( idata ) ; //<S2SV> while ( rc == IMAP_CMD_CONTINUE ) ; //<S2SV> if ( rc != IMAP_CMD_RESPOND ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "#1<S2SV_blank>Error<S2SV_blank>receiving<S2SV_blank>server<S2SV_blank>response.\\n" ) ; //<S2SV> gss_release_name ( & min_stat , & target_name ) ; //<S2SV> goto bail ; //<S2SV> } //<S2SV> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; //<S2SV> request_buf . value = buf2 ; //<S2SV> sec_token = & request_buf ; //<S2SV> maj_stat = gss_init_sec_context ( //<S2SV> & min_stat , GSS_C_NO_CREDENTIAL , & context , target_name , GSS_C_NO_OID , //<S2SV> GSS_C_MUTUAL_FLAG | GSS_C_SEQUENCE_FLAG , 0 , GSS_C_NO_CHANNEL_BINDINGS , //<S2SV> sec_token , NULL , & send_token , ( unsigned int * ) & cflags , NULL ) ; //<S2SV> if ( maj_stat != GSS_S_COMPLETE && maj_stat != GSS_S_CONTINUE_NEEDED ) //<S2SV> { //<S2SV> print_gss_error ( maj_stat , min_stat ) ; //<S2SV> mutt_debug ( 1 , "Error<S2SV_blank>exchanging<S2SV_blank>credentials\\n" ) ; //<S2SV> gss_release_name ( & min_stat , & target_name ) ; //<S2SV> goto err_abort_cmd ; //<S2SV> } //<S2SV> mutt_b64_encode ( buf1 , send_token . value , send_token . length , sizeof ( buf1 ) - 2 ) ; //<S2SV> gss_release_buffer ( & min_stat , & send_token ) ; //<S2SV> mutt_str_strcat ( buf1 , sizeof ( buf1 ) , "\\r\\n" ) ; //<S2SV> mutt_socket_send ( idata -> conn , buf1 ) ; //<S2SV> } //<S2SV> gss_release_name ( & min_stat , & target_name ) ; //<S2SV> do //<S2SV> rc = imap_cmd_step ( idata ) ; //<S2SV> while ( rc == IMAP_CMD_CONTINUE ) ; //<S2SV> if ( rc != IMAP_CMD_RESPOND ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "#2<S2SV_blank>Error<S2SV_blank>receiving<S2SV_blank>server<S2SV_blank>response.\\n" ) ; //<S2SV> goto bail ; //<S2SV> } //<S2SV> request_buf . length = mutt_b64_decode ( buf2 , idata -> buf + 2 ) ; //<S2SV> request_buf . value = buf2 ; //<S2SV> maj_stat = gss_unwrap ( & min_stat , context , & request_buf , & send_token , & cflags , & quality ) ; //<S2SV> if ( maj_stat != GSS_S_COMPLETE ) //<S2SV> { //<S2SV> print_gss_error ( maj_stat , min_stat ) ; //<S2SV> mutt_debug ( 2 , "Couldn\'t<S2SV_blank>unwrap<S2SV_blank>security<S2SV_blank>level<S2SV_blank>data\\n" ) ; //<S2SV> gss_release_buffer ( & min_stat , & send_token ) ; //<S2SV> goto err_abort_cmd ; //<S2SV> } //<S2SV> mutt_debug ( 2 , "Credential<S2SV_blank>exchange<S2SV_blank>complete\\n" ) ; //<S2SV> server_conf_flags = ( ( char * ) send_token . value ) [ 0 ] ; //<S2SV> if ( ! ( ( ( char * ) send_token . value ) [ 0 ] & GSS_AUTH_P_NONE ) ) //<S2SV> { //<S2SV> mutt_debug ( 2 , "Server<S2SV_blank>requires<S2SV_blank>integrity<S2SV_blank>or<S2SV_blank>privacy\\n" ) ; //<S2SV> gss_release_buffer ( & min_stat , & send_token ) ; //<S2SV> goto err_abort_cmd ; //<S2SV> } //<S2SV> ( ( char * ) send_token . value ) [ 0 ] = '\\0' ; //<S2SV> buf_size = ntohl ( * ( ( long * ) send_token . value ) ) ; //<S2SV> gss_release_buffer ( & min_stat , & send_token ) ; //<S2SV> mutt_debug ( 2 , "Unwrapped<S2SV_blank>security<S2SV_blank>level<S2SV_blank>flags:<S2SV_blank>%c%c%c\\n" , //<S2SV> ( server_conf_flags & GSS_AUTH_P_NONE ) ? 'N' : '-' , //<S2SV> ( server_conf_flags & GSS_AUTH_P_INTEGRITY ) ? 'I' : '-' , //<S2SV> ( server_conf_flags & GSS_AUTH_P_PRIVACY ) ? 'P' : '-' ) ; //<S2SV> mutt_debug ( 2 , "Maximum<S2SV_blank>GSS<S2SV_blank>token<S2SV_blank>size<S2SV_blank>is<S2SV_blank>%ld\\n" , buf_size ) ; //<S2SV> buf_size = htonl ( buf_size ) ; //<S2SV> memcpy ( buf1 , & buf_size , 4 ) ; //<S2SV> buf1 [ 0 ] = GSS_AUTH_P_NONE ; //<S2SV> strncpy ( buf1 + 4 , idata -> conn -> account . user , sizeof ( buf1 ) - 4 ) ; //<S2SV> request_buf . value = buf1 ; //<S2SV> request_buf . length = 4 + strlen ( idata -> conn -> account . user ) ; //<S2SV> maj_stat = gss_wrap ( & min_stat , context , 0 , GSS_C_QOP_DEFAULT , & request_buf , //<S2SV> & cflags , & send_token ) ; //<S2SV> if ( maj_stat != GSS_S_COMPLETE ) //<S2SV> { //<S2SV> mutt_debug ( 2 , "Error<S2SV_blank>creating<S2SV_blank>login<S2SV_blank>request\\n" ) ; //<S2SV> goto err_abort_cmd ; //<S2SV> } //<S2SV> mutt_b64_encode ( buf1 , send_token . value , send_token . length , sizeof ( buf1 ) - 2 ) ; //<S2SV> mutt_debug ( 2 , "Requesting<S2SV_blank>authorisation<S2SV_blank>as<S2SV_blank>%s\\n" , idata -> conn -> account . user ) ; //<S2SV> mutt_str_strcat ( buf1 , sizeof ( buf1 ) , "\\r\\n" ) ; //<S2SV> mutt_socket_send ( idata -> conn , buf1 ) ; //<S2SV> do //<S2SV> rc = imap_cmd_step ( idata ) ; //<S2SV> while ( rc == IMAP_CMD_CONTINUE ) ; //<S2SV> if ( rc == IMAP_CMD_RESPOND ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "Unexpected<S2SV_blank>server<S2SV_blank>continuation<S2SV_blank>request.\\n" ) ; //<S2SV> goto err_abort_cmd ; //<S2SV> } //<S2SV> if ( imap_code ( idata -> buf ) ) //<S2SV> { //<S2SV> mutt_debug ( 2 , "Releasing<S2SV_blank>GSS<S2SV_blank>credentials\\n" ) ; //<S2SV> maj_stat = gss_delete_sec_context ( & min_stat , & context , & send_token ) ; //<S2SV> if ( maj_stat != GSS_S_COMPLETE ) //<S2SV> mutt_debug ( 1 , "Error<S2SV_blank>releasing<S2SV_blank>credentials\\n" ) ; //<S2SV> gss_release_buffer ( & min_stat , & send_token ) ; //<S2SV> return IMAP_AUTH_SUCCESS ; //<S2SV> } //<S2SV> else //<S2SV> goto bail ; //<S2SV> err_abort_cmd : //<S2SV> mutt_socket_send ( idata -> conn , "*\\r\\n" ) ; //<S2SV> do //<S2SV> rc = imap_cmd_step ( idata ) ; //<S2SV> while ( rc == IMAP_CMD_CONTINUE ) ; //<S2SV> bail : //<S2SV> mutt_error ( _ ( "GSSAPI<S2SV_blank>authentication<S2SV_blank>failed." ) ) ; //<S2SV> return IMAP_AUTH_FAILURE ; //<S2SV> } //<S2SV> 