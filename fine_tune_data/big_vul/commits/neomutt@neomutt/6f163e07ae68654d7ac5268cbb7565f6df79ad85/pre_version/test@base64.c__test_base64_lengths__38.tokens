void test_base64_lengths ( void ) //<S2SV> { //<S2SV> const char * in = "FuseMuse" ; //<S2SV> char out1 [ 32 ] ; //<S2SV> char out2 [ 32 ] ; //<S2SV> size_t enclen ; //<S2SV> int declen ; //<S2SV> enclen = mutt_b64_encode ( out1 , in , 0 , 32 ) ; //<S2SV> if ( ! TEST_CHECK ( enclen == 0 ) ) //<S2SV> { //<S2SV> TEST_MSG ( "Expected:<S2SV_blank>%zu" , 0 ) ; //<S2SV> TEST_MSG ( "Actual<S2SV_blank><S2SV_blank>:<S2SV_blank>%zu" , enclen ) ; //<S2SV> } //<S2SV> out1 [ 0 ] = '\\0' ; //<S2SV> declen = mutt_b64_decode ( out2 , out1 ) ; //<S2SV> if ( ! TEST_CHECK ( declen == - 1 ) ) //<S2SV> { //<S2SV> TEST_MSG ( "Expected:<S2SV_blank>%zu" , - 1 ) ; //<S2SV> TEST_MSG ( "Actual<S2SV_blank><S2SV_blank>:<S2SV_blank>%zu" , declen ) ; //<S2SV> } //<S2SV> for ( size_t i = 1 ; i <= 8 ; ++ i ) //<S2SV> { //<S2SV> enclen = mutt_b64_encode ( out1 , in , i , 32 ) ; //<S2SV> size_t exp = ( ( i + 2 ) / 3 ) << 2 ; //<S2SV> if ( ! TEST_CHECK ( enclen == exp ) ) //<S2SV> { //<S2SV> TEST_MSG ( "Expected:<S2SV_blank>%zu" , exp ) ; //<S2SV> TEST_MSG ( "Actual<S2SV_blank><S2SV_blank>:<S2SV_blank>%zu" , enclen ) ; //<S2SV> } //<S2SV> declen = mutt_b64_decode ( out2 , out1 ) ; //<S2SV> if ( ! TEST_CHECK ( declen == i ) ) //<S2SV> { //<S2SV> TEST_MSG ( "Expected:<S2SV_blank>%zu" , i ) ; //<S2SV> TEST_MSG ( "Actual<S2SV_blank><S2SV_blank>:<S2SV_blank>%zu" , declen ) ; //<S2SV> } //<S2SV> out2 [ declen ] = '\\0' ; //<S2SV> if ( ! TEST_CHECK ( strncmp ( out2 , in , i ) == 0 ) ) //<S2SV> { //<S2SV> TEST_MSG ( "Expected:<S2SV_blank>%s" , in ) ; //<S2SV> TEST_MSG ( "Actual<S2SV_blank><S2SV_blank>:<S2SV_blank>%s" , out2 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 