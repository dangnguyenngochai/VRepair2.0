int mutt_b64_decode ( char * out , const char * in ) //<S2SV> { //<S2SV> int len = 0 ; //<S2SV> unsigned char digit4 ; //<S2SV> do //<S2SV> { //<S2SV> const unsigned char digit1 = in [ 0 ] ; //<S2SV> if ( ( digit1 > 127 ) || ( base64val ( digit1 ) == BAD ) ) //<S2SV> return - 1 ; //<S2SV> const unsigned char digit2 = in [ 1 ] ; //<S2SV> if ( ( digit2 > 127 ) || ( base64val ( digit2 ) == BAD ) ) //<S2SV> return - 1 ; //<S2SV> const unsigned char digit3 = in [ 2 ] ; //<S2SV> if ( ( digit3 > 127 ) || ( ( digit3 != '=' ) && ( base64val ( digit3 ) == BAD ) ) ) //<S2SV> return - 1 ; //<S2SV> digit4 = in [ 3 ] ; //<S2SV> if ( ( digit4 > 127 ) || ( ( digit4 != '=' ) && ( base64val ( digit4 ) == BAD ) ) ) //<S2SV> return - 1 ; //<S2SV> in += 4 ; //<S2SV> * out ++ = ( base64val ( digit1 ) << 2 ) | ( base64val ( digit2 ) >> 4 ) ; //<S2SV> len ++ ; //<S2SV> if ( digit3 != '=' ) //<S2SV> { //<S2SV> * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 2 ) ; //<S2SV> len ++ ; //<S2SV> if ( digit4 != '=' ) //<S2SV> { //<S2SV> * out ++ = ( ( base64val ( digit3 ) << 6 ) & 0xc0 ) | base64val ( digit4 ) ; //<S2SV> len ++ ; //<S2SV> } //<S2SV> } //<S2SV> } while ( * in && digit4 != '=' ) ; //<S2SV> return len ; //<S2SV> } //<S2SV> 