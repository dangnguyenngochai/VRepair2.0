static int fetch_uidl ( char * line , void * data ) //<S2SV> { //<S2SV> int i , index ; //<S2SV> struct Context * ctx = ( struct Context * ) data ; //<S2SV> struct PopData * pop_data = ( struct PopData * ) ctx -> data ; //<S2SV> char * endp = NULL ; //<S2SV> errno = 0 ; //<S2SV> index = strtol ( line , & endp , 10 ) ; //<S2SV> if ( errno ) //<S2SV> return - 1 ; //<S2SV> while ( * endp == '<S2SV_blank>' ) //<S2SV> endp ++ ; //<S2SV> memmove ( line , endp , strlen ( endp ) + 1 ) ; //<S2SV> for ( i = 0 ; i < ctx -> msgcount ; i ++ ) //<S2SV> if ( mutt_str_strcmp ( line , ctx -> hdrs [ i ] -> data ) == 0 ) //<S2SV> break ; //<S2SV> if ( i == ctx -> msgcount ) //<S2SV> { //<S2SV> mutt_debug ( 1 , "new<S2SV_blank>header<S2SV_blank>%d<S2SV_blank>%s\\n" , index , line ) ; //<S2SV> if ( i >= ctx -> hdrmax ) //<S2SV> mx_alloc_memory ( ctx ) ; //<S2SV> ctx -> msgcount ++ ; //<S2SV> ctx -> hdrs [ i ] = mutt_header_new ( ) ; //<S2SV> ctx -> hdrs [ i ] -> data = mutt_str_strdup ( line ) ; //<S2SV> } //<S2SV> else if ( ctx -> hdrs [ i ] -> index != index - 1 ) //<S2SV> pop_data -> clear_cache = true ; //<S2SV> ctx -> hdrs [ i ] -> refno = index ; //<S2SV> ctx -> hdrs [ i ] -> index = index - 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 