enum ImapAuthRes imap_auth_login ( struct ImapData * idata , const char * method ) //<S2SV> { //<S2SV> char q_user [ SHORT_STRING ] , q_pass [ SHORT_STRING ] ; //<S2SV> char buf [ STRING ] ; //<S2SV> int rc ; //<S2SV> if ( mutt_bit_isset ( idata -> capabilities , LOGINDISABLED ) ) //<S2SV> { //<S2SV> mutt_message ( _ ( "LOGIN<S2SV_blank>disabled<S2SV_blank>on<S2SV_blank>this<S2SV_blank>server." ) ) ; //<S2SV> return IMAP_AUTH_UNAVAIL ; //<S2SV> } //<S2SV> if ( mutt_account_getuser ( & idata -> conn -> account ) < 0 ) //<S2SV> return IMAP_AUTH_FAILURE ; //<S2SV> if ( mutt_account_getpass ( & idata -> conn -> account ) < 0 ) //<S2SV> return IMAP_AUTH_FAILURE ; //<S2SV> mutt_message ( _ ( "Logging<S2SV_blank>in..." ) ) ; //<S2SV> imap_quote_string ( q_user , sizeof ( q_user ) , idata -> conn -> account . user ) ; //<S2SV> imap_quote_string ( q_pass , sizeof ( q_pass ) , idata -> conn -> account . pass ) ; //<S2SV> if ( DebugLevel < IMAP_LOG_PASS ) //<S2SV> mutt_debug ( 2 , "Sending<S2SV_blank>LOGIN<S2SV_blank>command<S2SV_blank>for<S2SV_blank>%s...\\n" , idata -> conn -> account . user ) ; //<S2SV> snprintf ( buf , sizeof ( buf ) , "LOGIN<S2SV_blank>%s<S2SV_blank>%s" , q_user , q_pass ) ; //<S2SV> rc = imap_exec ( idata , buf , IMAP_CMD_FAIL_OK | IMAP_CMD_PASS ) ; //<S2SV> if ( ! rc ) //<S2SV> { //<S2SV> mutt_clear_error ( ) ; //<S2SV> return IMAP_AUTH_SUCCESS ; //<S2SV> } //<S2SV> mutt_error ( _ ( "Login<S2SV_blank>failed." ) ) ; //<S2SV> return IMAP_AUTH_FAILURE ; //<S2SV> } //<S2SV> 