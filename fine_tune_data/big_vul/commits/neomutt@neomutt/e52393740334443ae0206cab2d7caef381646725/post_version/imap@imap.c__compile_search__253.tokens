static int compile_search ( struct Context * ctx , const struct Pattern * pat , struct Buffer * buf ) //<S2SV> { //<S2SV> if ( do_search ( pat , 0 ) == 0 ) //<S2SV> return 0 ; //<S2SV> if ( pat -> not ) //<S2SV> mutt_buffer_addstr ( buf , "NOT<S2SV_blank>" ) ; //<S2SV> if ( pat -> child ) //<S2SV> { //<S2SV> int clauses ; //<S2SV> clauses = do_search ( pat -> child , 1 ) ; //<S2SV> if ( clauses > 0 ) //<S2SV> { //<S2SV> const struct Pattern * clause = pat -> child ; //<S2SV> mutt_buffer_addch ( buf , '(' ) ; //<S2SV> while ( clauses ) //<S2SV> { //<S2SV> if ( do_search ( clause , 0 ) ) //<S2SV> { //<S2SV> if ( pat -> op == MUTT_OR && clauses > 1 ) //<S2SV> mutt_buffer_addstr ( buf , "OR<S2SV_blank>" ) ; //<S2SV> clauses -- ; //<S2SV> if ( compile_search ( ctx , clause , buf ) < 0 ) //<S2SV> return - 1 ; //<S2SV> if ( clauses ) //<S2SV> mutt_buffer_addch ( buf , '<S2SV_blank>' ) ; //<S2SV> } //<S2SV> clause = clause -> next ; //<S2SV> } //<S2SV> mutt_buffer_addch ( buf , ')' ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> char term [ STRING ] ; //<S2SV> char * delim = NULL ; //<S2SV> switch ( pat -> op ) //<S2SV> { //<S2SV> case MUTT_HEADER : //<S2SV> mutt_buffer_addstr ( buf , "HEADER<S2SV_blank>" ) ; //<S2SV> delim = strchr ( pat -> p . str , ':' ) ; //<S2SV> if ( ! delim ) //<S2SV> { //<S2SV> mutt_error ( _ ( "Header<S2SV_blank>search<S2SV_blank>without<S2SV_blank>header<S2SV_blank>name:<S2SV_blank>%s" ) , pat -> p . str ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> * delim = '\\0' ; //<S2SV> imap_quote_string ( term , sizeof ( term ) , pat -> p . str , false ) ; //<S2SV> mutt_buffer_addstr ( buf , term ) ; //<S2SV> mutt_buffer_addch ( buf , '<S2SV_blank>' ) ; //<S2SV> * delim = ':' ; //<S2SV> delim ++ ; //<S2SV> SKIPWS ( delim ) ; //<S2SV> imap_quote_string ( term , sizeof ( term ) , delim , false ) ; //<S2SV> mutt_buffer_addstr ( buf , term ) ; //<S2SV> break ; //<S2SV> case MUTT_BODY : //<S2SV> mutt_buffer_addstr ( buf , "BODY<S2SV_blank>" ) ; //<S2SV> imap_quote_string ( term , sizeof ( term ) , pat -> p . str , false ) ; //<S2SV> mutt_buffer_addstr ( buf , term ) ; //<S2SV> break ; //<S2SV> case MUTT_WHOLE_MSG : //<S2SV> mutt_buffer_addstr ( buf , "TEXT<S2SV_blank>" ) ; //<S2SV> imap_quote_string ( term , sizeof ( term ) , pat -> p . str , false ) ; //<S2SV> mutt_buffer_addstr ( buf , term ) ; //<S2SV> break ; //<S2SV> case MUTT_SERVERSEARCH : //<S2SV> { //<S2SV> struct ImapData * idata = ctx -> data ; //<S2SV> if ( ! mutt_bit_isset ( idata -> capabilities , X_GM_EXT1 ) ) //<S2SV> { //<S2SV> mutt_error ( _ ( "Server-side<S2SV_blank>custom<S2SV_blank>search<S2SV_blank>not<S2SV_blank>supported:<S2SV_blank>%s" ) , pat -> p . str ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> mutt_buffer_addstr ( buf , "X-GM-RAW<S2SV_blank>" ) ; //<S2SV> imap_quote_string ( term , sizeof ( term ) , pat -> p . str , false ) ; //<S2SV> mutt_buffer_addstr ( buf , term ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 