int equalizer_get_parameter ( effect_context_t * context , effect_param_t * p , //<S2SV> uint32_t * size ) //<S2SV> { //<S2SV> equalizer_context_t * eq_ctxt = ( equalizer_context_t * ) context ; //<S2SV> int voffset = ( ( p -> psize - 1 ) / sizeof ( int32_t ) + 1 ) * sizeof ( int32_t ) ; //<S2SV> int32_t * param_tmp = ( int32_t * ) p -> data ; //<S2SV> int32_t param = * param_tmp ++ ; //<S2SV> int32_t param2 ; //<S2SV> char * name ; //<S2SV> void * value = p -> data + voffset ; //<S2SV> int i ; //<S2SV> ALOGV ( "%s" , __func__ ) ; //<S2SV> p -> status = 0 ; //<S2SV> switch ( param ) { //<S2SV> case EQ_PARAM_NUM_BANDS : //<S2SV> case EQ_PARAM_CUR_PRESET : //<S2SV> case EQ_PARAM_GET_NUM_OF_PRESETS : //<S2SV> case EQ_PARAM_BAND_LEVEL : //<S2SV> case EQ_PARAM_GET_BAND : //<S2SV> if ( p -> vsize < sizeof ( int16_t ) ) //<S2SV> p -> status = - EINVAL ; //<S2SV> p -> vsize = sizeof ( int16_t ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_LEVEL_RANGE : //<S2SV> if ( p -> vsize < 2 * sizeof ( int16_t ) ) //<S2SV> p -> status = - EINVAL ; //<S2SV> p -> vsize = 2 * sizeof ( int16_t ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_BAND_FREQ_RANGE : //<S2SV> if ( p -> vsize < 2 * sizeof ( int32_t ) ) //<S2SV> p -> status = - EINVAL ; //<S2SV> p -> vsize = 2 * sizeof ( int32_t ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_CENTER_FREQ : //<S2SV> if ( p -> vsize < sizeof ( int32_t ) ) //<S2SV> p -> status = - EINVAL ; //<S2SV> p -> vsize = sizeof ( int32_t ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_GET_PRESET_NAME : //<S2SV> break ; //<S2SV> case EQ_PARAM_PROPERTIES : //<S2SV> if ( p -> vsize < ( 2 + NUM_EQ_BANDS ) * sizeof ( uint16_t ) ) //<S2SV> p -> status = - EINVAL ; //<S2SV> p -> vsize = ( 2 + NUM_EQ_BANDS ) * sizeof ( uint16_t ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> p -> status = - EINVAL ; //<S2SV> } //<S2SV> * size = sizeof ( effect_param_t ) + voffset + p -> vsize ; //<S2SV> if ( p -> status != 0 ) //<S2SV> return 0 ; //<S2SV> switch ( param ) { //<S2SV> case EQ_PARAM_NUM_BANDS : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_NUM_BANDS" , __func__ ) ; //<S2SV> * ( uint16_t * ) value = ( uint16_t ) NUM_EQ_BANDS ; //<S2SV> break ; //<S2SV> case EQ_PARAM_LEVEL_RANGE : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_LEVEL_RANGE" , __func__ ) ; //<S2SV> * ( int16_t * ) value = - 1500 ; //<S2SV> * ( ( int16_t * ) value + 1 ) = 1500 ; //<S2SV> break ; //<S2SV> case EQ_PARAM_BAND_LEVEL : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_BAND_LEVEL" , __func__ ) ; //<S2SV> param2 = * param_tmp ; //<S2SV> if ( param2 >= NUM_EQ_BANDS ) { //<S2SV> p -> status = - EINVAL ; //<S2SV> break ; //<S2SV> } //<S2SV> * ( int16_t * ) value = ( int16_t ) equalizer_get_band_level ( eq_ctxt , param2 ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_CENTER_FREQ : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_CENTER_FREQ" , __func__ ) ; //<S2SV> param2 = * param_tmp ; //<S2SV> if ( param2 >= NUM_EQ_BANDS ) { //<S2SV> p -> status = - EINVAL ; //<S2SV> break ; //<S2SV> } //<S2SV> * ( int32_t * ) value = equalizer_get_center_frequency ( eq_ctxt , param2 ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_BAND_FREQ_RANGE : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_BAND_FREQ_RANGE" , __func__ ) ; //<S2SV> param2 = * param_tmp ; //<S2SV> if ( param2 >= NUM_EQ_BANDS ) { //<S2SV> p -> status = - EINVAL ; //<S2SV> break ; //<S2SV> } //<S2SV> equalizer_get_band_freq_range ( eq_ctxt , param2 , ( uint32_t * ) value , //<S2SV> ( ( uint32_t * ) value + 1 ) ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_GET_BAND : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_GET_BAND" , __func__ ) ; //<S2SV> param2 = * param_tmp ; //<S2SV> * ( uint16_t * ) value = ( uint16_t ) equalizer_get_band ( eq_ctxt , param2 ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_CUR_PRESET : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_CUR_PRESET" , __func__ ) ; //<S2SV> * ( uint16_t * ) value = ( uint16_t ) equalizer_get_preset ( eq_ctxt ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_GET_NUM_OF_PRESETS : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_GET_NUM_OF_PRESETS" , __func__ ) ; //<S2SV> * ( uint16_t * ) value = ( uint16_t ) equalizer_get_num_presets ( eq_ctxt ) ; //<S2SV> break ; //<S2SV> case EQ_PARAM_GET_PRESET_NAME : //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_GET_PRESET_NAME" , __func__ ) ; //<S2SV> param2 = * param_tmp ; //<S2SV> ALOGV ( "param2:<S2SV_blank>%d" , param2 ) ; //<S2SV> if ( param2 >= equalizer_get_num_presets ( eq_ctxt ) ) { //<S2SV> p -> status = - EINVAL ; //<S2SV> break ; //<S2SV> } //<S2SV> name = ( char * ) value ; //<S2SV> strlcpy ( name , equalizer_get_preset_name ( eq_ctxt , param2 ) , p -> vsize - 1 ) ; //<S2SV> name [ p -> vsize - 1 ] = 0 ; //<S2SV> p -> vsize = strlen ( name ) + 1 ; //<S2SV> break ; //<S2SV> case EQ_PARAM_PROPERTIES : { //<S2SV> ALOGV ( "%s:<S2SV_blank>EQ_PARAM_PROPERTIES" , __func__ ) ; //<S2SV> int16_t * prop = ( int16_t * ) value ; //<S2SV> prop [ 0 ] = ( int16_t ) equalizer_get_preset ( eq_ctxt ) ; //<S2SV> prop [ 1 ] = ( int16_t ) NUM_EQ_BANDS ; //<S2SV> for ( i = 0 ; i < NUM_EQ_BANDS ; i ++ ) { //<S2SV> prop [ 2 + i ] = ( int16_t ) equalizer_get_band_level ( eq_ctxt , i ) ; //<S2SV> } //<S2SV> } break ; //<S2SV> default : //<S2SV> p -> status = - EINVAL ; //<S2SV> break ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 