int effect_command ( effect_handle_t self , uint32_t cmdCode , uint32_t cmdSize , //<S2SV> void * pCmdData , uint32_t * replySize , void * pReplyData ) //<S2SV> { //<S2SV> effect_context_t * context = ( effect_context_t * ) self ; //<S2SV> int retsize ; //<S2SV> int status = 0 ; //<S2SV> pthread_mutex_lock ( & lock ) ; //<S2SV> if ( ! effect_exists ( context ) ) { //<S2SV> status = - ENOSYS ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> if ( context == NULL || context -> state == EFFECT_STATE_UNINITIALIZED ) { //<S2SV> status = - ENOSYS ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> switch ( cmdCode ) { //<S2SV> case EFFECT_CMD_INIT : //<S2SV> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> status = - EINVAL ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> if ( context -> ops . init ) //<S2SV> * ( int * ) pReplyData = context -> ops . init ( context ) ; //<S2SV> else //<S2SV> * ( int * ) pReplyData = 0 ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_SET_CONFIG : //<S2SV> if ( pCmdData == NULL || cmdSize != sizeof ( effect_config_t ) //<S2SV> || pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> status = - EINVAL ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> * ( int * ) pReplyData = set_config ( context , ( effect_config_t * ) pCmdData ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_GET_CONFIG : //<S2SV> if ( pReplyData == NULL || //<S2SV> * replySize != sizeof ( effect_config_t ) ) { //<S2SV> status = - EINVAL ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> if ( ! context -> offload_enabled ) { //<S2SV> status = - EINVAL ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> get_config ( context , ( effect_config_t * ) pReplyData ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_RESET : //<S2SV> if ( context -> ops . reset ) //<S2SV> context -> ops . reset ( context ) ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_ENABLE : //<S2SV> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> status = - EINVAL ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> if ( context -> state != EFFECT_STATE_INITIALIZED ) { //<S2SV> status = - ENOSYS ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> context -> state = EFFECT_STATE_ACTIVE ; //<S2SV> if ( context -> ops . enable ) //<S2SV> context -> ops . enable ( context ) ; //<S2SV> ALOGV ( "%s<S2SV_blank>EFFECT_CMD_ENABLE" , __func__ ) ; //<S2SV> * ( int * ) pReplyData = 0 ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_DISABLE : //<S2SV> if ( pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> status = - EINVAL ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> if ( context -> state != EFFECT_STATE_ACTIVE ) { //<S2SV> status = - ENOSYS ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> context -> state = EFFECT_STATE_INITIALIZED ; //<S2SV> if ( context -> ops . disable ) //<S2SV> context -> ops . disable ( context ) ; //<S2SV> ALOGV ( "%s<S2SV_blank>EFFECT_CMD_DISABLE" , __func__ ) ; //<S2SV> * ( int * ) pReplyData = 0 ; //<S2SV> break ; //<S2SV> case EFFECT_CMD_GET_PARAM : { //<S2SV> if ( pCmdData == NULL || //<S2SV> cmdSize < ( int ) ( sizeof ( effect_param_t ) + sizeof ( uint32_t ) ) || //<S2SV> pReplyData == NULL || //<S2SV> * replySize < ( int ) ( sizeof ( effect_param_t ) + sizeof ( uint32_t ) + //<S2SV> sizeof ( uint16_t ) ) ) { //<S2SV> status = - EINVAL ; //<S2SV> ALOGV ( "EFFECT_CMD_GET_PARAM<S2SV_blank>invalid<S2SV_blank>command<S2SV_blank>cmdSize<S2SV_blank>%d<S2SV_blank>*replySize<S2SV_blank>%d" , //<S2SV> cmdSize , * replySize ) ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> if ( ! context -> offload_enabled ) { //<S2SV> status = - EINVAL ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> effect_param_t * q = ( effect_param_t * ) pCmdData ; //<S2SV> memcpy ( pReplyData , pCmdData , sizeof ( effect_param_t ) + q -> psize ) ; //<S2SV> effect_param_t * p = ( effect_param_t * ) pReplyData ; //<S2SV> if ( context -> ops . get_parameter ) //<S2SV> context -> ops . get_parameter ( context , p , replySize ) ; //<S2SV> } break ; //<S2SV> case EFFECT_CMD_SET_PARAM : { //<S2SV> if ( pCmdData == NULL || //<S2SV> cmdSize < ( int ) ( sizeof ( effect_param_t ) + sizeof ( uint32_t ) + //<S2SV> sizeof ( uint16_t ) ) || //<S2SV> pReplyData == NULL || * replySize != sizeof ( int32_t ) ) { //<S2SV> status = - EINVAL ; //<S2SV> ALOGV ( "EFFECT_CMD_SET_PARAM<S2SV_blank>invalid<S2SV_blank>command<S2SV_blank>cmdSize<S2SV_blank>%d<S2SV_blank>*replySize<S2SV_blank>%d" , //<S2SV> cmdSize , * replySize ) ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> * ( int32_t * ) pReplyData = 0 ; //<S2SV> effect_param_t * p = ( effect_param_t * ) pCmdData ; //<S2SV> if ( context -> ops . set_parameter ) //<S2SV> * ( int32_t * ) pReplyData = context -> ops . set_parameter ( context , p , //<S2SV> * replySize ) ; //<S2SV> } break ; //<S2SV> case EFFECT_CMD_SET_DEVICE : { //<S2SV> uint32_t device ; //<S2SV> ALOGV ( "\\t<S2SV_blank>EFFECT_CMD_SET_DEVICE<S2SV_blank>start" ) ; //<S2SV> if ( pCmdData == NULL || cmdSize < sizeof ( uint32_t ) ) { //<S2SV> status = - EINVAL ; //<S2SV> ALOGV ( "EFFECT_CMD_SET_DEVICE<S2SV_blank>invalid<S2SV_blank>command<S2SV_blank>cmdSize<S2SV_blank>%d" , cmdSize ) ; //<S2SV> goto exit ; //<S2SV> } //<S2SV> device = * ( uint32_t * ) pCmdData ; //<S2SV> if ( context -> ops . set_device ) //<S2SV> context -> ops . set_device ( context , device ) ; //<S2SV> } break ; //<S2SV> case EFFECT_CMD_SET_VOLUME : //<S2SV> case EFFECT_CMD_SET_AUDIO_MODE : //<S2SV> break ; //<S2SV> case EFFECT_CMD_OFFLOAD : { //<S2SV> output_context_t * out_ctxt ; //<S2SV> if ( cmdSize != sizeof ( effect_offload_param_t ) || pCmdData == NULL //<S2SV> || pReplyData == NULL || * replySize != sizeof ( int ) ) { //<S2SV> ALOGV ( "%s<S2SV_blank>EFFECT_CMD_OFFLOAD<S2SV_blank>bad<S2SV_blank>format" , __func__ ) ; //<S2SV> status = - EINVAL ; //<S2SV> break ; //<S2SV> } //<S2SV> effect_offload_param_t * offload_param = ( effect_offload_param_t * ) pCmdData ; //<S2SV> ALOGV ( "%s<S2SV_blank>EFFECT_CMD_OFFLOAD<S2SV_blank>offload<S2SV_blank>%d<S2SV_blank>output<S2SV_blank>%d" , __func__ , //<S2SV> offload_param -> isOffload , offload_param -> ioHandle ) ; //<S2SV> * ( int * ) pReplyData = 0 ; //<S2SV> context -> offload_enabled = offload_param -> isOffload ; //<S2SV> if ( context -> out_handle == offload_param -> ioHandle ) //<S2SV> break ; //<S2SV> out_ctxt = get_output ( context -> out_handle ) ; //<S2SV> if ( out_ctxt != NULL ) //<S2SV> remove_effect_from_output ( out_ctxt , context ) ; //<S2SV> context -> out_handle = offload_param -> ioHandle ; //<S2SV> out_ctxt = get_output ( context -> out_handle ) ; //<S2SV> if ( out_ctxt != NULL ) //<S2SV> add_effect_to_output ( out_ctxt , context ) ; //<S2SV> } break ; //<S2SV> default : //<S2SV> if ( cmdCode >= EFFECT_CMD_FIRST_PROPRIETARY && context -> ops . command ) //<S2SV> status = context -> ops . command ( context , cmdCode , cmdSize , //<S2SV> pCmdData , replySize , pReplyData ) ; //<S2SV> else { //<S2SV> ALOGW ( "%s<S2SV_blank>invalid<S2SV_blank>command<S2SV_blank>%d" , __func__ , cmdCode ) ; //<S2SV> status = - EINVAL ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> exit : //<S2SV> pthread_mutex_unlock ( & lock ) ; //<S2SV> return status ; //<S2SV> } //<S2SV> 