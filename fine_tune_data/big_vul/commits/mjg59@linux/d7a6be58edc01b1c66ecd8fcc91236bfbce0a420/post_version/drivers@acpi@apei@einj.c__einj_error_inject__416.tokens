static int einj_error_inject ( u32 type , u32 flags , u64 param1 , u64 param2 , //<S2SV> u64 param3 , u64 param4 ) //<S2SV> { //<S2SV> int rc ; //<S2SV> u64 base_addr , size ; //<S2SV> if ( get_securelevel ( ) > 0 ) //<S2SV> return - EPERM ; //<S2SV> if ( flags && ( flags & //<S2SV> ~ ( SETWA_FLAGS_APICID | SETWA_FLAGS_MEM | SETWA_FLAGS_PCIE_SBDF ) ) ) //<S2SV> return - EINVAL ; //<S2SV> if ( ! ( param_extension || acpi5 ) ) //<S2SV> goto inject ; //<S2SV> if ( type & ACPI5_VENDOR_BIT ) { //<S2SV> if ( vendor_flags != SETWA_FLAGS_MEM ) //<S2SV> goto inject ; //<S2SV> } else if ( ! ( type & MEM_ERROR_MASK ) && ! ( flags & SETWA_FLAGS_MEM ) ) //<S2SV> goto inject ; //<S2SV> base_addr = param1 & param2 ; //<S2SV> size = ~ param2 + 1 ; //<S2SV> if ( ( ( param2 & PAGE_MASK ) != PAGE_MASK ) || //<S2SV> ( ( region_intersects ( base_addr , size , IORESOURCE_SYSTEM_RAM , IORES_DESC_NONE ) //<S2SV> != REGION_INTERSECTS ) && //<S2SV> ( region_intersects ( base_addr , size , IORESOURCE_MEM , IORES_DESC_PERSISTENT_MEMORY ) //<S2SV> != REGION_INTERSECTS ) ) ) //<S2SV> return - EINVAL ; //<S2SV> inject : //<S2SV> mutex_lock ( & einj_mutex ) ; //<S2SV> rc = __einj_error_inject ( type , flags , param1 , param2 , param3 , param4 ) ; //<S2SV> mutex_unlock ( & einj_mutex ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> 