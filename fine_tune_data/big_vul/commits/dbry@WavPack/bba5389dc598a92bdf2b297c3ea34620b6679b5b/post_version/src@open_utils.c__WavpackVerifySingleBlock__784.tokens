int WavpackVerifySingleBlock ( unsigned char * buffer , int verify_checksum ) //<S2SV> { //<S2SV> WavpackHeader * wphdr = ( WavpackHeader * ) buffer ; //<S2SV> uint32_t checksum_passed = 0 , bcount , meta_bc ; //<S2SV> unsigned char * dp , meta_id , c1 , c2 ; //<S2SV> if ( strncmp ( wphdr -> ckID , "wvpk" , 4 ) || wphdr -> ckSize + 8 < sizeof ( WavpackHeader ) ) //<S2SV> return FALSE ; //<S2SV> bcount = wphdr -> ckSize - sizeof ( WavpackHeader ) + 8 ; //<S2SV> dp = ( unsigned char * ) ( wphdr + 1 ) ; //<S2SV> while ( bcount >= 2 ) { //<S2SV> meta_id = * dp ++ ; //<S2SV> c1 = * dp ++ ; //<S2SV> meta_bc = c1 << 1 ; //<S2SV> bcount -= 2 ; //<S2SV> if ( meta_id & ID_LARGE ) { //<S2SV> if ( bcount < 2 ) //<S2SV> return FALSE ; //<S2SV> c1 = * dp ++ ; //<S2SV> c2 = * dp ++ ; //<S2SV> meta_bc += ( ( uint32_t ) c1 << 9 ) + ( ( uint32_t ) c2 << 17 ) ; //<S2SV> bcount -= 2 ; //<S2SV> } //<S2SV> if ( bcount < meta_bc ) //<S2SV> return FALSE ; //<S2SV> if ( verify_checksum && ( meta_id & ID_UNIQUE ) == ID_BLOCK_CHECKSUM ) { //<S2SV> # ifdef BITSTREAM_SHORTS //<S2SV> uint16_t * csptr = ( uint16_t * ) buffer ; //<S2SV> # else //<S2SV> unsigned char * csptr = buffer ; //<S2SV> # endif //<S2SV> int wcount = ( int ) ( dp - 2 - buffer ) >> 1 ; //<S2SV> uint32_t csum = ( uint32_t ) - 1 ; //<S2SV> if ( ( meta_id & ID_ODD_SIZE ) || meta_bc < 2 || meta_bc > 4 ) //<S2SV> return FALSE ; //<S2SV> # ifdef BITSTREAM_SHORTS //<S2SV> while ( wcount -- ) //<S2SV> csum = ( csum * 3 ) + * csptr ++ ; //<S2SV> # else //<S2SV> WavpackNativeToLittleEndian ( ( WavpackHeader * ) buffer , WavpackHeaderFormat ) ; //<S2SV> while ( wcount -- ) { //<S2SV> csum = ( csum * 3 ) + csptr [ 0 ] + ( csptr [ 1 ] << 8 ) ; //<S2SV> csptr += 2 ; //<S2SV> } //<S2SV> WavpackLittleEndianToNative ( ( WavpackHeader * ) buffer , WavpackHeaderFormat ) ; //<S2SV> # endif //<S2SV> if ( meta_bc == 4 ) { //<S2SV> if ( * dp != ( csum & 0xff ) || dp [ 1 ] != ( ( csum >> 8 ) & 0xff ) || dp [ 2 ] != ( ( csum >> 16 ) & 0xff ) || dp [ 3 ] != ( ( csum >> 24 ) & 0xff ) ) //<S2SV> return FALSE ; //<S2SV> } //<S2SV> else { //<S2SV> csum ^= csum >> 16 ; //<S2SV> if ( * dp != ( csum & 0xff ) || dp [ 1 ] != ( ( csum >> 8 ) & 0xff ) ) //<S2SV> return FALSE ; //<S2SV> } //<S2SV> checksum_passed ++ ; //<S2SV> } //<S2SV> bcount -= meta_bc ; //<S2SV> dp += meta_bc ; //<S2SV> } //<S2SV> return ( bcount == 0 ) && ( ! verify_checksum || ! ( wphdr -> flags & HAS_CHECKSUM ) || checksum_passed ) ; //<S2SV> } //<S2SV> 