int validate_camera_metadata_structure ( const camera_metadata_t * metadata , //<S2SV> const size_t * expected_size ) { //<S2SV> if ( metadata == NULL ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>metadata<S2SV_blank>is<S2SV_blank>null!" , __FUNCTION__ ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> { //<S2SV> static const struct { //<S2SV> const char * name ; //<S2SV> size_t alignment ; //<S2SV> } alignments [ ] = { //<S2SV> { //<S2SV> . name = "camera_metadata" , //<S2SV> . alignment = METADATA_ALIGNMENT //<S2SV> } , //<S2SV> { //<S2SV> . name = "camera_metadata_buffer_entry" , //<S2SV> . alignment = ENTRY_ALIGNMENT //<S2SV> } , //<S2SV> { //<S2SV> . name = "camera_metadata_data" , //<S2SV> . alignment = DATA_ALIGNMENT //<S2SV> } , //<S2SV> } ; //<S2SV> for ( size_t i = 0 ; i < sizeof ( alignments ) / sizeof ( alignments [ 0 ] ) ; ++ i ) { //<S2SV> uintptr_t aligned_ptr = ALIGN_TO ( metadata , alignments [ i ] . alignment ) ; //<S2SV> if ( ( uintptr_t ) metadata != aligned_ptr ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Metadata<S2SV_blank>pointer<S2SV_blank>is<S2SV_blank>not<S2SV_blank>aligned<S2SV_blank>(actual<S2SV_blank>%p,<S2SV_blank>" //<S2SV> "expected<S2SV_blank>%p)<S2SV_blank>to<S2SV_blank>type<S2SV_blank>%s" , //<S2SV> __FUNCTION__ , metadata , //<S2SV> ( void * ) aligned_ptr , alignments [ i ] . name ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( expected_size != NULL && metadata -> size > * expected_size ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Metadata<S2SV_blank>size<S2SV_blank>(%" PRIu32 ")<S2SV_blank>should<S2SV_blank>be<S2SV_blank><=<S2SV_blank>expected<S2SV_blank>size<S2SV_blank>(%zu)" , //<S2SV> __FUNCTION__ , metadata -> size , * expected_size ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> if ( metadata -> entry_count > metadata -> entry_capacity ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>count<S2SV_blank>(%" PRIu32 ")<S2SV_blank>should<S2SV_blank>be<S2SV_blank><=<S2SV_blank>entry<S2SV_blank>capacity<S2SV_blank>" //<S2SV> "(%" PRIu32 ")" , //<S2SV> __FUNCTION__ , metadata -> entry_count , metadata -> entry_capacity ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> const metadata_uptrdiff_t entries_end = //<S2SV> metadata -> entries_start + metadata -> entry_capacity ; //<S2SV> if ( entries_end < metadata -> entries_start || //<S2SV> entries_end > metadata -> data_start ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>start<S2SV_blank>+<S2SV_blank>capacity<S2SV_blank>(%" PRIu32 ")<S2SV_blank>should<S2SV_blank>be<S2SV_blank><=<S2SV_blank>data<S2SV_blank>start<S2SV_blank>" //<S2SV> "(%" PRIu32 ")" , //<S2SV> __FUNCTION__ , //<S2SV> ( metadata -> entries_start + metadata -> entry_capacity ) , //<S2SV> metadata -> data_start ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> const metadata_uptrdiff_t data_end = //<S2SV> metadata -> data_start + metadata -> data_capacity ; //<S2SV> if ( data_end < metadata -> data_start || //<S2SV> data_end > metadata -> size ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Data<S2SV_blank>start<S2SV_blank>+<S2SV_blank>capacity<S2SV_blank>(%" PRIu32 ")<S2SV_blank>should<S2SV_blank>be<S2SV_blank><=<S2SV_blank>total<S2SV_blank>size<S2SV_blank>" //<S2SV> "(%" PRIu32 ")" , //<S2SV> __FUNCTION__ , //<S2SV> ( metadata -> data_start + metadata -> data_capacity ) , //<S2SV> metadata -> size ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> const metadata_size_t entry_count = metadata -> entry_count ; //<S2SV> camera_metadata_buffer_entry_t * entries = get_entries ( metadata ) ; //<S2SV> for ( size_t i = 0 ; i < entry_count ; ++ i ) { //<S2SV> if ( ( uintptr_t ) & entries [ i ] != ALIGN_TO ( & entries [ i ] , ENTRY_ALIGNMENT ) ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>index<S2SV_blank>%zu<S2SV_blank>had<S2SV_blank>bad<S2SV_blank>alignment<S2SV_blank>(address<S2SV_blank>%p)," //<S2SV> "<S2SV_blank>expected<S2SV_blank>alignment<S2SV_blank>%zu" , //<S2SV> __FUNCTION__ , i , & entries [ i ] , ENTRY_ALIGNMENT ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> camera_metadata_buffer_entry_t entry = entries [ i ] ; //<S2SV> if ( entry . type >= NUM_TYPES ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>index<S2SV_blank>%zu<S2SV_blank>had<S2SV_blank>a<S2SV_blank>bad<S2SV_blank>type<S2SV_blank>%d" , //<S2SV> __FUNCTION__ , i , entry . type ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> uint32_t tag_section = entry . tag >> 16 ; //<S2SV> int tag_type = get_camera_metadata_tag_type ( entry . tag ) ; //<S2SV> if ( tag_type != ( int ) entry . type && tag_section < VENDOR_SECTION ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>index<S2SV_blank>%zu<S2SV_blank>had<S2SV_blank>tag<S2SV_blank>type<S2SV_blank>%d,<S2SV_blank>but<S2SV_blank>the<S2SV_blank>type<S2SV_blank>was<S2SV_blank>%d" , //<S2SV> __FUNCTION__ , i , tag_type , entry . type ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> size_t data_size = //<S2SV> calculate_camera_metadata_entry_data_size ( entry . type , //<S2SV> entry . count ) ; //<S2SV> if ( data_size != 0 ) { //<S2SV> camera_metadata_data_t * data = //<S2SV> ( camera_metadata_data_t * ) ( get_data ( metadata ) + //<S2SV> entry . data . offset ) ; //<S2SV> if ( ( uintptr_t ) data != ALIGN_TO ( data , DATA_ALIGNMENT ) ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>index<S2SV_blank>%zu<S2SV_blank>had<S2SV_blank>bad<S2SV_blank>data<S2SV_blank>alignment<S2SV_blank>(address<S2SV_blank>%p)," //<S2SV> "<S2SV_blank>expected<S2SV_blank>align<S2SV_blank>%zu,<S2SV_blank>(tag<S2SV_blank>name<S2SV_blank>%s,<S2SV_blank>data<S2SV_blank>size<S2SV_blank>%zu)" , //<S2SV> __FUNCTION__ , i , data , DATA_ALIGNMENT , //<S2SV> get_camera_metadata_tag_name ( entry . tag ) ? : "unknown" , //<S2SV> data_size ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> size_t data_entry_end = entry . data . offset + data_size ; //<S2SV> if ( data_entry_end < entry . data . offset || //<S2SV> data_entry_end > metadata -> data_capacity ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>index<S2SV_blank>%zu<S2SV_blank>data<S2SV_blank>ends<S2SV_blank>(%zu)<S2SV_blank>beyond<S2SV_blank>the<S2SV_blank>capacity<S2SV_blank>" //<S2SV> "%" PRIu32 , __FUNCTION__ , i , data_entry_end , //<S2SV> metadata -> data_capacity ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> } else if ( entry . count == 0 ) { //<S2SV> if ( entry . data . offset != 0 ) { //<S2SV> ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>index<S2SV_blank>%zu<S2SV_blank>had<S2SV_blank>0<S2SV_blank>items,<S2SV_blank>but<S2SV_blank>offset<S2SV_blank>was<S2SV_blank>non-0<S2SV_blank>" //<S2SV> "(%" PRIu32 "),<S2SV_blank>tag<S2SV_blank>name:<S2SV_blank>%s" , __FUNCTION__ , i , entry . data . offset , //<S2SV> get_camera_metadata_tag_name ( entry . tag ) ? : "unknown" ) ; //<S2SV> return ERROR ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return OK ; //<S2SV> } //<S2SV> 