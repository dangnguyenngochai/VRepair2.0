static MagickBooleanType ReadPSDLayersInternal ( Image * image , //<S2SV> const ImageInfo * image_info , const PSDInfo * psd_info , //<S2SV> const MagickBooleanType skip_layers , ExceptionInfo * exception ) //<S2SV> { //<S2SV> char //<S2SV> type [ 4 ] ; //<S2SV> LayerInfo //<S2SV> * layer_info ; //<S2SV> MagickSizeType //<S2SV> size ; //<S2SV> MagickBooleanType //<S2SV> status ; //<S2SV> register ssize_t //<S2SV> i ; //<S2SV> ssize_t //<S2SV> count , //<S2SV> j , //<S2SV> number_layers ; //<S2SV> size = GetPSDSize ( psd_info , image ) ; //<S2SV> if ( size == 0 ) //<S2SV> { //<S2SV> ( void ) ReadBlobLong ( image ) ; //<S2SV> count = ReadBlob ( image , 4 , ( unsigned char * ) type ) ; //<S2SV> ReversePSDString ( image , type , 4 ) ; //<S2SV> status = MagickFalse ; //<S2SV> if ( ( count == 0 ) || ( LocaleNCompare ( type , "8BIM" , 4 ) != 0 ) ) //<S2SV> return ( MagickTrue ) ; //<S2SV> else //<S2SV> { //<S2SV> count = ReadBlob ( image , 4 , ( unsigned char * ) type ) ; //<S2SV> ReversePSDString ( image , type , 4 ) ; //<S2SV> if ( ( count != 0 ) && ( LocaleNCompare ( type , "Lr16" , 4 ) == 0 ) ) //<S2SV> size = GetPSDSize ( psd_info , image ) ; //<S2SV> else //<S2SV> return ( MagickTrue ) ; //<S2SV> } //<S2SV> } //<S2SV> status = MagickTrue ; //<S2SV> if ( size != 0 ) //<S2SV> { //<S2SV> layer_info = ( LayerInfo * ) NULL ; //<S2SV> number_layers = ( short ) ReadBlobShort ( image ) ; //<S2SV> if ( number_layers < 0 ) //<S2SV> { //<S2SV> number_layers = MagickAbsoluteValue ( number_layers ) ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>negative<S2SV_blank>layer<S2SV_blank>count<S2SV_blank>corrected<S2SV_blank>for" ) ; //<S2SV> image -> matte = MagickTrue ; //<S2SV> } //<S2SV> if ( skip_layers != MagickFalse ) //<S2SV> return ( MagickTrue ) ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>image<S2SV_blank>contains<S2SV_blank>%.20g<S2SV_blank>layers" , ( double ) number_layers ) ; //<S2SV> if ( number_layers == 0 ) //<S2SV> ThrowBinaryException ( CorruptImageError , "InvalidNumberOfLayers" , //<S2SV> image -> filename ) ; //<S2SV> layer_info = ( LayerInfo * ) AcquireQuantumMemory ( ( size_t ) number_layers , //<S2SV> sizeof ( * layer_info ) ) ; //<S2SV> if ( layer_info == ( LayerInfo * ) NULL ) //<S2SV> { //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>allocation<S2SV_blank>of<S2SV_blank>LayerInfo<S2SV_blank>failed" ) ; //<S2SV> ThrowBinaryException ( ResourceLimitError , "MemoryAllocationFailed" , //<S2SV> image -> filename ) ; //<S2SV> } //<S2SV> ( void ) ResetMagickMemory ( layer_info , 0 , ( size_t ) number_layers * //<S2SV> sizeof ( * layer_info ) ) ; //<S2SV> for ( i = 0 ; i < number_layers ; i ++ ) //<S2SV> { //<S2SV> ssize_t //<S2SV> x , //<S2SV> y ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>reading<S2SV_blank>layer<S2SV_blank>#%.20g" , ( double ) i + 1 ) ; //<S2SV> layer_info [ i ] . page . y = ReadBlobSignedLong ( image ) ; //<S2SV> layer_info [ i ] . page . x = ReadBlobSignedLong ( image ) ; //<S2SV> y = ReadBlobSignedLong ( image ) ; //<S2SV> x = ReadBlobSignedLong ( image ) ; //<S2SV> layer_info [ i ] . page . width = ( size_t ) ( x - layer_info [ i ] . page . x ) ; //<S2SV> layer_info [ i ] . page . height = ( size_t ) ( y - layer_info [ i ] . page . y ) ; //<S2SV> layer_info [ i ] . channels = ReadBlobShort ( image ) ; //<S2SV> if ( layer_info [ i ] . channels > MaxPSDChannels ) //<S2SV> { //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> ThrowBinaryException ( CorruptImageError , "MaximumChannelsExceeded" , //<S2SV> image -> filename ) ; //<S2SV> } //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>offset(%.20g,%.20g),<S2SV_blank>size(%.20g,%.20g),<S2SV_blank>channels=%.20g" , //<S2SV> ( double ) layer_info [ i ] . page . x , ( double ) layer_info [ i ] . page . y , //<S2SV> ( double ) layer_info [ i ] . page . height , ( double ) //<S2SV> layer_info [ i ] . page . width , ( double ) layer_info [ i ] . channels ) ; //<S2SV> for ( j = 0 ; j < ( ssize_t ) layer_info [ i ] . channels ; j ++ ) //<S2SV> { //<S2SV> layer_info [ i ] . channel_info [ j ] . type = ( short ) ReadBlobShort ( image ) ; //<S2SV> layer_info [ i ] . channel_info [ j ] . size = ( size_t ) GetPSDSize ( psd_info , //<S2SV> image ) ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>channel[%.20g]:<S2SV_blank>type=%.20g,<S2SV_blank>size=%.20g" , ( double ) j , //<S2SV> ( double ) layer_info [ i ] . channel_info [ j ] . type , //<S2SV> ( double ) layer_info [ i ] . channel_info [ j ] . size ) ; //<S2SV> } //<S2SV> count = ReadBlob ( image , 4 , ( unsigned char * ) type ) ; //<S2SV> ReversePSDString ( image , type , 4 ) ; //<S2SV> if ( ( count == 0 ) || ( LocaleNCompare ( type , "8BIM" , 4 ) != 0 ) ) //<S2SV> { //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>layer<S2SV_blank>type<S2SV_blank>was<S2SV_blank>%.4s<S2SV_blank>instead<S2SV_blank>of<S2SV_blank>8BIM" , type ) ; //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> ThrowBinaryException ( CorruptImageError , "ImproperImageHeader" , //<S2SV> image -> filename ) ; //<S2SV> } //<S2SV> ( void ) ReadBlob ( image , 4 , ( unsigned char * ) layer_info [ i ] . blendkey ) ; //<S2SV> ReversePSDString ( image , layer_info [ i ] . blendkey , 4 ) ; //<S2SV> layer_info [ i ] . opacity = ( Quantum ) ScaleCharToQuantum ( ( unsigned char ) //<S2SV> ReadBlobByte ( image ) ) ; //<S2SV> layer_info [ i ] . clipping = ( unsigned char ) ReadBlobByte ( image ) ; //<S2SV> layer_info [ i ] . flags = ( unsigned char ) ReadBlobByte ( image ) ; //<S2SV> layer_info [ i ] . visible = ! ( layer_info [ i ] . flags & 0x02 ) ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank>blend=%.4s,<S2SV_blank>opacity=%.20g,<S2SV_blank>clipping=%s,<S2SV_blank>flags=%d,<S2SV_blank>visible=%s" , //<S2SV> layer_info [ i ] . blendkey , ( double ) layer_info [ i ] . opacity , //<S2SV> layer_info [ i ] . clipping ? "true" : "false" , layer_info [ i ] . flags , //<S2SV> layer_info [ i ] . visible ? "true" : "false" ) ; //<S2SV> ( void ) ReadBlobByte ( image ) ; //<S2SV> size = ReadBlobLong ( image ) ; //<S2SV> if ( size != 0 ) //<S2SV> { //<S2SV> MagickSizeType //<S2SV> combined_length , //<S2SV> length ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>layer<S2SV_blank>contains<S2SV_blank>additional<S2SV_blank>info" ) ; //<S2SV> length = ReadBlobLong ( image ) ; //<S2SV> combined_length = length + 4 ; //<S2SV> if ( length != 0 ) //<S2SV> { //<S2SV> layer_info [ i ] . mask . page . y = ReadBlobSignedLong ( image ) ; //<S2SV> layer_info [ i ] . mask . page . x = ReadBlobSignedLong ( image ) ; //<S2SV> layer_info [ i ] . mask . page . height = ( size_t ) ( ReadBlobSignedLong ( image ) - //<S2SV> layer_info [ i ] . mask . page . y ) ; //<S2SV> layer_info [ i ] . mask . page . width = ( size_t ) ( ReadBlobSignedLong ( image ) - //<S2SV> layer_info [ i ] . mask . page . x ) ; //<S2SV> layer_info [ i ] . mask . background = ( unsigned char ) ReadBlobByte ( //<S2SV> image ) ; //<S2SV> layer_info [ i ] . mask . flags = ( unsigned char ) ReadBlobByte ( image ) ; //<S2SV> if ( ! ( layer_info [ i ] . mask . flags & 0x01 ) ) //<S2SV> { //<S2SV> layer_info [ i ] . mask . page . y = layer_info [ i ] . mask . page . y - //<S2SV> layer_info [ i ] . page . y ; //<S2SV> layer_info [ i ] . mask . page . x = layer_info [ i ] . mask . page . x - //<S2SV> layer_info [ i ] . page . x ; //<S2SV> } //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>layer<S2SV_blank>mask:<S2SV_blank>offset(%.20g,%.20g),<S2SV_blank>size(%.20g,%.20g),<S2SV_blank>length=%.20g" , //<S2SV> ( double ) layer_info [ i ] . mask . page . x , ( double ) //<S2SV> layer_info [ i ] . mask . page . y , ( double ) layer_info [ i ] . mask . page . width , //<S2SV> ( double ) layer_info [ i ] . mask . page . height , ( double ) //<S2SV> ( ( MagickOffsetType ) length ) - 18 ) ; //<S2SV> if ( DiscardBlobBytes ( image , ( MagickSizeType ) ( length - 18 ) ) == MagickFalse ) //<S2SV> { //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> ThrowBinaryException ( CorruptImageError , "UnexpectedEndOfFile" , //<S2SV> image -> filename ) ; //<S2SV> } //<S2SV> } //<S2SV> length = ReadBlobLong ( image ) ; //<S2SV> combined_length += length + 4 ; //<S2SV> if ( length != 0 ) //<S2SV> { //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>layer<S2SV_blank>blending<S2SV_blank>ranges:<S2SV_blank>length=%.20g" , ( double ) //<S2SV> ( ( MagickOffsetType ) length ) ) ; //<S2SV> for ( j = 0 ; j < ( ssize_t ) length ; j += 8 ) //<S2SV> { //<S2SV> size_t blend_source = ReadBlobLong ( image ) ; //<S2SV> size_t blend_dest = ReadBlobLong ( image ) ; //<S2SV> if ( EOFBlob ( image ) != MagickFalse ) //<S2SV> { //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> ThrowBinaryException ( CorruptImageError , //<S2SV> "InsufficientImageDataInFile" , image -> filename ) ; //<S2SV> } //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>source(%x),<S2SV_blank>dest(%x)" , ( unsigned int ) //<S2SV> blend_source , ( unsigned int ) blend_dest ) ; //<S2SV> } //<S2SV> } //<S2SV> length = ( MagickSizeType ) ( unsigned char ) ReadBlobByte ( image ) ; //<S2SV> combined_length += length + 1 ; //<S2SV> if ( length > 0 ) //<S2SV> ( void ) ReadBlob ( image , ( size_t ) length ++ , layer_info [ i ] . name ) ; //<S2SV> layer_info [ i ] . name [ length ] = '\\0' ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>layer<S2SV_blank>name:<S2SV_blank>%s" , layer_info [ i ] . name ) ; //<S2SV> if ( ( length % 4 ) != 0 ) //<S2SV> { //<S2SV> length = 4 - ( length % 4 ) ; //<S2SV> combined_length += length ; //<S2SV> if ( DiscardBlobBytes ( image , length ) == MagickFalse ) //<S2SV> { //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> ThrowBinaryException ( CorruptImageError , //<S2SV> "UnexpectedEndOfFile" , image -> filename ) ; //<S2SV> } //<S2SV> } //<S2SV> length = ( MagickSizeType ) size - combined_length ; //<S2SV> if ( length > 0 ) //<S2SV> { //<S2SV> unsigned char //<S2SV> * info ; //<S2SV> if ( length > GetBlobSize ( image ) ) //<S2SV> { //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> ThrowBinaryException ( CorruptImageError , //<S2SV> "InsufficientImageDataInFile" , image -> filename ) ; //<S2SV> } //<S2SV> layer_info [ i ] . info = AcquireStringInfo ( ( const size_t ) length ) ; //<S2SV> info = GetStringInfoDatum ( layer_info [ i ] . info ) ; //<S2SV> ( void ) ReadBlob ( image , ( const size_t ) length , info ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < number_layers ; i ++ ) //<S2SV> { //<S2SV> if ( ( layer_info [ i ] . page . width == 0 ) || //<S2SV> ( layer_info [ i ] . page . height == 0 ) ) //<S2SV> { //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>layer<S2SV_blank>data<S2SV_blank>is<S2SV_blank>empty" ) ; //<S2SV> if ( layer_info [ i ] . info != ( StringInfo * ) NULL ) //<S2SV> layer_info [ i ] . info = DestroyStringInfo ( layer_info [ i ] . info ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> layer_info [ i ] . image = CloneImage ( image , layer_info [ i ] . page . width , //<S2SV> layer_info [ i ] . page . height , MagickFalse , exception ) ; //<S2SV> if ( layer_info [ i ] . image == ( Image * ) NULL ) //<S2SV> { //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>allocation<S2SV_blank>of<S2SV_blank>image<S2SV_blank>for<S2SV_blank>layer<S2SV_blank>%.20g<S2SV_blank>failed" , ( double ) i ) ; //<S2SV> ThrowBinaryException ( ResourceLimitError , "MemoryAllocationFailed" , //<S2SV> image -> filename ) ; //<S2SV> } //<S2SV> if ( layer_info [ i ] . info != ( StringInfo * ) NULL ) //<S2SV> { //<S2SV> ( void ) SetImageProfile ( layer_info [ i ] . image , "psd:additional-info" , //<S2SV> layer_info [ i ] . info ) ; //<S2SV> layer_info [ i ] . info = DestroyStringInfo ( layer_info [ i ] . info ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( image_info -> ping == MagickFalse ) //<S2SV> { //<S2SV> for ( i = 0 ; i < number_layers ; i ++ ) //<S2SV> { //<S2SV> if ( layer_info [ i ] . image == ( Image * ) NULL ) //<S2SV> { //<S2SV> for ( j = 0 ; j < layer_info [ i ] . channels ; j ++ ) //<S2SV> { //<S2SV> if ( DiscardBlobBytes ( image , ( MagickSizeType ) //<S2SV> layer_info [ i ] . channel_info [ j ] . size ) == MagickFalse ) //<S2SV> { //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> ThrowBinaryException ( CorruptImageError , //<S2SV> "UnexpectedEndOfFile" , image -> filename ) ; //<S2SV> } //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>reading<S2SV_blank>data<S2SV_blank>for<S2SV_blank>layer<S2SV_blank>%.20g" , ( double ) i ) ; //<S2SV> status = ReadPSDLayer ( image , image_info , psd_info , & layer_info [ i ] , //<S2SV> exception ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> break ; //<S2SV> status = SetImageProgress ( image , LoadImagesTag , i , ( MagickSizeType ) //<S2SV> number_layers ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( status != MagickFalse ) //<S2SV> { //<S2SV> for ( i = 0 ; i < number_layers ; i ++ ) //<S2SV> { //<S2SV> if ( layer_info [ i ] . image == ( Image * ) NULL ) //<S2SV> { //<S2SV> for ( j = i ; j < number_layers - 1 ; j ++ ) //<S2SV> layer_info [ j ] = layer_info [ j + 1 ] ; //<S2SV> number_layers -- ; //<S2SV> i -- ; //<S2SV> } //<S2SV> } //<S2SV> if ( number_layers > 0 ) //<S2SV> { //<S2SV> for ( i = 0 ; i < number_layers ; i ++ ) //<S2SV> { //<S2SV> if ( i > 0 ) //<S2SV> layer_info [ i ] . image -> previous = layer_info [ i - 1 ] . image ; //<S2SV> if ( i < ( number_layers - 1 ) ) //<S2SV> layer_info [ i ] . image -> next = layer_info [ i + 1 ] . image ; //<S2SV> layer_info [ i ] . image -> page = layer_info [ i ] . page ; //<S2SV> } //<S2SV> image -> next = layer_info [ 0 ] . image ; //<S2SV> layer_info [ 0 ] . image -> previous = image ; //<S2SV> } //<S2SV> layer_info = ( LayerInfo * ) RelinquishMagickMemory ( layer_info ) ; //<S2SV> } //<S2SV> else //<S2SV> layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; //<S2SV> } //<S2SV> return ( status ) ; //<S2SV> } //<S2SV> 