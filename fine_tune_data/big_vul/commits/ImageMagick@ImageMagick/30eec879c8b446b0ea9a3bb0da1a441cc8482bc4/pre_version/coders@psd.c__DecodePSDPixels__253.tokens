static ssize_t DecodePSDPixels ( const size_t number_compact_pixels , //<S2SV> const unsigned char * compact_pixels , const ssize_t depth , //<S2SV> const size_t number_pixels , unsigned char * pixels ) //<S2SV> { //<S2SV> # define CheckNumberCompactPixels if ( packets == 0 ) return ( i ) ; packets -- //<S2SV> # define CheckNumberPixels ( count ) if ( ( ( ssize_t ) i + count ) > ( ssize_t ) number_pixels ) return ( i ) ; i += count //<S2SV> int //<S2SV> pixel ; //<S2SV> register ssize_t //<S2SV> i , //<S2SV> j ; //<S2SV> size_t //<S2SV> length ; //<S2SV> ssize_t //<S2SV> packets ; //<S2SV> packets = ( ssize_t ) number_compact_pixels ; //<S2SV> for ( i = 0 ; ( packets > 1 ) && ( i < ( ssize_t ) number_pixels ) ; ) //<S2SV> { //<S2SV> packets -- ; //<S2SV> length = ( size_t ) ( * compact_pixels ++ ) ; //<S2SV> if ( length == 128 ) //<S2SV> continue ; //<S2SV> if ( length > 128 ) //<S2SV> { //<S2SV> length = 256 - length + 1 ; //<S2SV> CheckNumberCompactPixels ; //<S2SV> pixel = ( * compact_pixels ++ ) ; //<S2SV> for ( j = 0 ; j < ( ssize_t ) length ; j ++ ) //<S2SV> { //<S2SV> switch ( depth ) //<S2SV> { //<S2SV> case 1 : //<S2SV> { //<S2SV> CheckNumberPixels ( 8 ) ; //<S2SV> * pixels ++ = ( pixel >> 7 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( pixel >> 6 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( pixel >> 5 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( pixel >> 4 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( pixel >> 3 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( pixel >> 2 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( pixel >> 1 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( pixel >> 0 ) & 0x01 ? 0U : 255U ; //<S2SV> break ; //<S2SV> } //<S2SV> case 2 : //<S2SV> { //<S2SV> CheckNumberPixels ( 4 ) ; //<S2SV> * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; //<S2SV> * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; //<S2SV> * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; //<S2SV> * pixels ++ = ( unsigned char ) ( ( pixel & 0x03 ) & 0x03 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case 4 : //<S2SV> { //<S2SV> CheckNumberPixels ( 2 ) ; //<S2SV> * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xff ) ; //<S2SV> * pixels ++ = ( unsigned char ) ( ( pixel & 0x0f ) & 0xff ) ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> { //<S2SV> CheckNumberPixels ( 1 ) ; //<S2SV> * pixels ++ = ( unsigned char ) pixel ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> length ++ ; //<S2SV> for ( j = 0 ; j < ( ssize_t ) length ; j ++ ) //<S2SV> { //<S2SV> switch ( depth ) //<S2SV> { //<S2SV> case 1 : //<S2SV> { //<S2SV> CheckNumberPixels ( 8 ) ; //<S2SV> * pixels ++ = ( * compact_pixels >> 7 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( * compact_pixels >> 6 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( * compact_pixels >> 5 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( * compact_pixels >> 4 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( * compact_pixels >> 3 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( * compact_pixels >> 2 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( * compact_pixels >> 1 ) & 0x01 ? 0U : 255U ; //<S2SV> * pixels ++ = ( * compact_pixels >> 0 ) & 0x01 ? 0U : 255U ; //<S2SV> break ; //<S2SV> } //<S2SV> case 2 : //<S2SV> { //<S2SV> CheckNumberPixels ( 4 ) ; //<S2SV> * pixels ++ = ( * compact_pixels >> 6 ) & 0x03 ; //<S2SV> * pixels ++ = ( * compact_pixels >> 4 ) & 0x03 ; //<S2SV> * pixels ++ = ( * compact_pixels >> 2 ) & 0x03 ; //<S2SV> * pixels ++ = ( * compact_pixels & 0x03 ) & 0x03 ; //<S2SV> break ; //<S2SV> } //<S2SV> case 4 : //<S2SV> { //<S2SV> CheckNumberPixels ( 2 ) ; //<S2SV> * pixels ++ = ( * compact_pixels >> 4 ) & 0xff ; //<S2SV> * pixels ++ = ( * compact_pixels & 0x0f ) & 0xff ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> { //<S2SV> CheckNumberPixels ( 1 ) ; //<S2SV> * pixels ++ = ( * compact_pixels ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> CheckNumberCompactPixels ; //<S2SV> compact_pixels ++ ; //<S2SV> } //<S2SV> } //<S2SV> return ( i ) ; //<S2SV> } //<S2SV> 