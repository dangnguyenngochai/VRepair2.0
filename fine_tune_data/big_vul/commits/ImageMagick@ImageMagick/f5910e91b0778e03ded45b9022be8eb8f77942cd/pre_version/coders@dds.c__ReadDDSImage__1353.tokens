static Image * ReadDDSImage ( const ImageInfo * image_info , ExceptionInfo * exception ) //<S2SV> { //<S2SV> Image //<S2SV> * image ; //<S2SV> MagickBooleanType //<S2SV> status , //<S2SV> cubemap = MagickFalse , //<S2SV> volume = MagickFalse , //<S2SV> matte ; //<S2SV> CompressionType //<S2SV> compression ; //<S2SV> DDSInfo //<S2SV> dds_info ; //<S2SV> DDSDecoder //<S2SV> * decoder ; //<S2SV> size_t //<S2SV> n , //<S2SV> num_images ; //<S2SV> assert ( image_info != ( const ImageInfo * ) NULL ) ; //<S2SV> assert ( image_info -> signature == MagickSignature ) ; //<S2SV> if ( image_info -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( TraceEvent , GetMagickModule ( ) , "%s" , //<S2SV> image_info -> filename ) ; //<S2SV> assert ( exception != ( ExceptionInfo * ) NULL ) ; //<S2SV> assert ( exception -> signature == MagickSignature ) ; //<S2SV> image = AcquireImage ( image_info ) ; //<S2SV> status = OpenBlob ( image_info , image , ReadBinaryBlobMode , exception ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> image = DestroyImageList ( image ) ; //<S2SV> return ( ( Image * ) NULL ) ; //<S2SV> } //<S2SV> if ( ReadDDSInfo ( image , & dds_info ) != MagickTrue ) { //<S2SV> ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; //<S2SV> } //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_CUBEMAP ) //<S2SV> cubemap = MagickTrue ; //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_VOLUME && dds_info . depth > 0 ) //<S2SV> volume = MagickTrue ; //<S2SV> ( void ) SeekBlob ( image , 128 , SEEK_SET ) ; //<S2SV> if ( dds_info . pixelformat . flags & DDPF_RGB ) //<S2SV> { //<S2SV> compression = NoCompression ; //<S2SV> if ( dds_info . pixelformat . flags & DDPF_ALPHAPIXELS ) //<S2SV> { //<S2SV> matte = MagickTrue ; //<S2SV> decoder = ReadUncompressedRGBA ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> matte = MagickTrue ; //<S2SV> decoder = ReadUncompressedRGB ; //<S2SV> } //<S2SV> } //<S2SV> else if ( dds_info . pixelformat . flags & DDPF_LUMINANCE ) //<S2SV> { //<S2SV> compression = NoCompression ; //<S2SV> if ( dds_info . pixelformat . flags & DDPF_ALPHAPIXELS ) //<S2SV> { //<S2SV> ThrowReaderException ( CorruptImageError , "ImageTypeNotSupported" ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> matte = MagickFalse ; //<S2SV> decoder = ReadUncompressedRGB ; //<S2SV> } //<S2SV> } //<S2SV> else if ( dds_info . pixelformat . flags & DDPF_FOURCC ) //<S2SV> { //<S2SV> switch ( dds_info . pixelformat . fourcc ) //<S2SV> { //<S2SV> case FOURCC_DXT1 : //<S2SV> { //<S2SV> matte = MagickFalse ; //<S2SV> compression = DXT1Compression ; //<S2SV> decoder = ReadDXT1 ; //<S2SV> break ; //<S2SV> } //<S2SV> case FOURCC_DXT3 : //<S2SV> { //<S2SV> matte = MagickTrue ; //<S2SV> compression = DXT3Compression ; //<S2SV> decoder = ReadDXT3 ; //<S2SV> break ; //<S2SV> } //<S2SV> case FOURCC_DXT5 : //<S2SV> { //<S2SV> matte = MagickTrue ; //<S2SV> compression = DXT5Compression ; //<S2SV> decoder = ReadDXT5 ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> { //<S2SV> ThrowReaderException ( CorruptImageError , "ImageTypeNotSupported" ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ThrowReaderException ( CorruptImageError , "ImageTypeNotSupported" ) ; //<S2SV> } //<S2SV> num_images = 1 ; //<S2SV> if ( cubemap ) //<S2SV> { //<S2SV> num_images = 0 ; //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_CUBEMAP_POSITIVEX ) num_images ++ ; //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_CUBEMAP_NEGATIVEX ) num_images ++ ; //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_CUBEMAP_POSITIVEY ) num_images ++ ; //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_CUBEMAP_NEGATIVEY ) num_images ++ ; //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_CUBEMAP_POSITIVEZ ) num_images ++ ; //<S2SV> if ( dds_info . ddscaps2 & DDSCAPS2_CUBEMAP_NEGATIVEZ ) num_images ++ ; //<S2SV> } //<S2SV> if ( volume ) //<S2SV> num_images = dds_info . depth ; //<S2SV> for ( n = 0 ; n < num_images ; n ++ ) //<S2SV> { //<S2SV> if ( n != 0 ) //<S2SV> { //<S2SV> if ( EOFBlob ( image ) != MagickFalse ) //<S2SV> ThrowReaderException ( CorruptImageError , "UnexpectedEndOfFile" ) ; //<S2SV> AcquireNextImage ( image_info , image ) ; //<S2SV> if ( GetNextImageInList ( image ) == ( Image * ) NULL ) //<S2SV> return ( DestroyImageList ( image ) ) ; //<S2SV> image = SyncNextImageInList ( image ) ; //<S2SV> } //<S2SV> image -> matte = matte ; //<S2SV> image -> compression = compression ; //<S2SV> image -> columns = dds_info . width ; //<S2SV> image -> rows = dds_info . height ; //<S2SV> image -> storage_class = DirectClass ; //<S2SV> image -> endian = LSBEndian ; //<S2SV> image -> depth = 8 ; //<S2SV> if ( image_info -> ping != MagickFalse ) //<S2SV> { //<S2SV> ( void ) CloseBlob ( image ) ; //<S2SV> return ( GetFirstImageInList ( image ) ) ; //<S2SV> } //<S2SV> status = SetImageExtent ( image , image -> columns , image -> rows ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> InheritException ( exception , & image -> exception ) ; //<S2SV> return ( DestroyImageList ( image ) ) ; //<S2SV> } //<S2SV> if ( ( decoder ) ( image , & dds_info , exception ) != MagickTrue ) //<S2SV> { //<S2SV> ( void ) CloseBlob ( image ) ; //<S2SV> return ( GetFirstImageInList ( image ) ) ; //<S2SV> } //<S2SV> } //<S2SV> ( void ) CloseBlob ( image ) ; //<S2SV> return ( GetFirstImageInList ( image ) ) ; //<S2SV> } //<S2SV> 