static Image * ExtractPostscript ( Image * image , const ImageInfo * image_info , //<S2SV> MagickOffsetType PS_Offset , ssize_t PS_Size , ExceptionInfo * exception ) //<S2SV> { //<S2SV> char //<S2SV> postscript_file [ MaxTextExtent ] ; //<S2SV> const MagicInfo //<S2SV> * magic_info ; //<S2SV> FILE //<S2SV> * ps_file ; //<S2SV> ImageInfo //<S2SV> * clone_info ; //<S2SV> Image //<S2SV> * image2 ; //<S2SV> unsigned char //<S2SV> magick [ 2 * MaxTextExtent ] ; //<S2SV> if ( ( clone_info = CloneImageInfo ( image_info ) ) == NULL ) //<S2SV> return ( image ) ; //<S2SV> clone_info -> blob = ( void * ) NULL ; //<S2SV> clone_info -> length = 0 ; //<S2SV> ( void ) AcquireUniqueFilename ( postscript_file ) ; //<S2SV> ps_file = fopen_utf8 ( postscript_file , "wb" ) ; //<S2SV> if ( ps_file == ( FILE * ) NULL ) //<S2SV> goto FINISH ; //<S2SV> ( void ) SeekBlob ( image , PS_Offset , SEEK_SET ) ; //<S2SV> ( void ) ReadBlob ( image , 2 * MaxTextExtent , magick ) ; //<S2SV> ( void ) SeekBlob ( image , PS_Offset , SEEK_SET ) ; //<S2SV> while ( PS_Size -- > 0 ) //<S2SV> { //<S2SV> ( void ) fputc ( ReadBlobByte ( image ) , ps_file ) ; //<S2SV> } //<S2SV> ( void ) fclose ( ps_file ) ; //<S2SV> magic_info = GetMagicInfo ( magick , 2 * MaxTextExtent , exception ) ; //<S2SV> if ( magic_info == ( const MagicInfo * ) NULL ) goto FINISH_UNL ; //<S2SV> if ( exception -> severity != UndefinedException ) goto FINISH_UNL ; //<S2SV> if ( magic_info -> name == ( char * ) NULL ) goto FINISH_UNL ; //<S2SV> ( void ) CopyMagickMemory ( clone_info -> magick , magic_info -> name , MaxTextExtent ) ; //<S2SV> FormatLocaleString ( clone_info -> filename , MaxTextExtent , "%s" , postscript_file ) ; //<S2SV> image2 = ReadImage ( clone_info , exception ) ; //<S2SV> if ( ! image2 ) //<S2SV> goto FINISH_UNL ; //<S2SV> ( void ) CopyMagickMemory ( image2 -> filename , image -> filename , MaxTextExtent ) ; //<S2SV> ( void ) CopyMagickMemory ( image2 -> magick_filename , image -> magick_filename , MaxTextExtent ) ; //<S2SV> ( void ) CopyMagickMemory ( image2 -> magick , image -> magick , MaxTextExtent ) ; //<S2SV> image2 -> depth = image -> depth ; //<S2SV> DestroyBlob ( image2 ) ; //<S2SV> image2 -> blob = ReferenceBlob ( image -> blob ) ; //<S2SV> if ( ( image -> rows == 0 ) || ( image -> columns == 0 ) ) //<S2SV> DeleteImageFromList ( & image ) ; //<S2SV> AppendImageToList ( & image , image2 ) ; //<S2SV> FINISH_UNL : //<S2SV> ( void ) RelinquishUniqueFileResource ( postscript_file ) ; //<S2SV> FINISH : //<S2SV> DestroyImageInfo ( clone_info ) ; //<S2SV> return ( image ) ; //<S2SV> } //<S2SV> 