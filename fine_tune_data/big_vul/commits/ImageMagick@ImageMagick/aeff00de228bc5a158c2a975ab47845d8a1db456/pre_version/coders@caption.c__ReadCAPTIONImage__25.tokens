static Image * ReadCAPTIONImage ( const ImageInfo * image_info , //<S2SV> ExceptionInfo * exception ) //<S2SV> { //<S2SV> char //<S2SV> * caption , //<S2SV> geometry [ MaxTextExtent ] , //<S2SV> * property , //<S2SV> * text ; //<S2SV> const char //<S2SV> * gravity , //<S2SV> * option ; //<S2SV> DrawInfo //<S2SV> * draw_info ; //<S2SV> Image //<S2SV> * image ; //<S2SV> MagickBooleanType //<S2SV> split , //<S2SV> status ; //<S2SV> register ssize_t //<S2SV> i ; //<S2SV> size_t //<S2SV> height , //<S2SV> width ; //<S2SV> TypeMetric //<S2SV> metrics ; //<S2SV> assert ( image_info != ( const ImageInfo * ) NULL ) ; //<S2SV> assert ( image_info -> signature == MagickSignature ) ; //<S2SV> if ( image_info -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( TraceEvent , GetMagickModule ( ) , "%s" , //<S2SV> image_info -> filename ) ; //<S2SV> assert ( exception != ( ExceptionInfo * ) NULL ) ; //<S2SV> assert ( exception -> signature == MagickSignature ) ; //<S2SV> image = AcquireImage ( image_info ) ; //<S2SV> ( void ) ResetImagePage ( image , "0x0+0+0" ) ; //<S2SV> option = GetImageOption ( image_info , "filename" ) ; //<S2SV> if ( option == ( const char * ) NULL ) //<S2SV> property = InterpretImageProperties ( image_info , image , image_info -> filename ) ; //<S2SV> else //<S2SV> if ( LocaleNCompare ( option , "caption:" , 8 ) == 0 ) //<S2SV> property = InterpretImageProperties ( image_info , image , option + 8 ) ; //<S2SV> else //<S2SV> property = InterpretImageProperties ( image_info , image , option ) ; //<S2SV> ( void ) SetImageProperty ( image , "caption" , property ) ; //<S2SV> property = DestroyString ( property ) ; //<S2SV> caption = ConstantString ( GetImageProperty ( image , "caption" ) ) ; //<S2SV> draw_info = CloneDrawInfo ( image_info , ( DrawInfo * ) NULL ) ; //<S2SV> ( void ) CloneString ( & draw_info -> text , caption ) ; //<S2SV> gravity = GetImageOption ( image_info , "gravity" ) ; //<S2SV> if ( gravity != ( char * ) NULL ) //<S2SV> draw_info -> gravity = ( GravityType ) ParseCommandOption ( MagickGravityOptions , //<S2SV> MagickFalse , gravity ) ; //<S2SV> split = MagickFalse ; //<S2SV> status = MagickTrue ; //<S2SV> if ( image -> columns == 0 ) //<S2SV> { //<S2SV> text = AcquireString ( caption ) ; //<S2SV> i = FormatMagickCaption ( image , draw_info , split , & metrics , & text ) ; //<S2SV> ( void ) CloneString ( & draw_info -> text , text ) ; //<S2SV> text = DestroyString ( text ) ; //<S2SV> ( void ) FormatLocaleString ( geometry , MaxTextExtent , "%+g%+g" , //<S2SV> - metrics . bounds . x1 , metrics . ascent ) ; //<S2SV> if ( draw_info -> gravity == UndefinedGravity ) //<S2SV> ( void ) CloneString ( & draw_info -> geometry , geometry ) ; //<S2SV> status = GetMultilineTypeMetrics ( image , draw_info , & metrics ) ; //<S2SV> width = ( size_t ) floor ( metrics . width + draw_info -> stroke_width + 0.5 ) ; //<S2SV> image -> columns = width ; //<S2SV> } //<S2SV> if ( image -> rows == 0 ) //<S2SV> { //<S2SV> split = MagickTrue ; //<S2SV> text = AcquireString ( caption ) ; //<S2SV> i = FormatMagickCaption ( image , draw_info , split , & metrics , & text ) ; //<S2SV> ( void ) CloneString ( & draw_info -> text , text ) ; //<S2SV> text = DestroyString ( text ) ; //<S2SV> ( void ) FormatLocaleString ( geometry , MaxTextExtent , "%+g%+g" , //<S2SV> - metrics . bounds . x1 , metrics . ascent ) ; //<S2SV> if ( draw_info -> gravity == UndefinedGravity ) //<S2SV> ( void ) CloneString ( & draw_info -> geometry , geometry ) ; //<S2SV> status = GetMultilineTypeMetrics ( image , draw_info , & metrics ) ; //<S2SV> image -> rows = ( size_t ) ( ( i + 1 ) * ( metrics . ascent - metrics . descent + //<S2SV> draw_info -> interline_spacing + draw_info -> stroke_width ) + 0.5 ) ; //<S2SV> } //<S2SV> if ( status != MagickFalse ) //<S2SV> status = SetImageExtent ( image , image -> columns , image -> rows ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> draw_info = DestroyDrawInfo ( draw_info ) ; //<S2SV> InheritException ( exception , & image -> exception ) ; //<S2SV> return ( DestroyImageList ( image ) ) ; //<S2SV> } //<S2SV> if ( SetImageBackgroundColor ( image ) == MagickFalse ) //<S2SV> { //<S2SV> draw_info = DestroyDrawInfo ( draw_info ) ; //<S2SV> InheritException ( exception , & image -> exception ) ; //<S2SV> image = DestroyImageList ( image ) ; //<S2SV> return ( ( Image * ) NULL ) ; //<S2SV> } //<S2SV> if ( ( fabs ( image_info -> pointsize ) < MagickEpsilon ) && ( strlen ( caption ) > 0 ) ) //<S2SV> { //<S2SV> double //<S2SV> high , //<S2SV> low ; //<S2SV> for ( ; ; draw_info -> pointsize *= 2.0 ) //<S2SV> { //<S2SV> text = AcquireString ( caption ) ; //<S2SV> i = FormatMagickCaption ( image , draw_info , split , & metrics , & text ) ; //<S2SV> ( void ) CloneString ( & draw_info -> text , text ) ; //<S2SV> text = DestroyString ( text ) ; //<S2SV> ( void ) FormatLocaleString ( geometry , MaxTextExtent , "%+g%+g" , //<S2SV> - metrics . bounds . x1 , metrics . ascent ) ; //<S2SV> if ( draw_info -> gravity == UndefinedGravity ) //<S2SV> ( void ) CloneString ( & draw_info -> geometry , geometry ) ; //<S2SV> status = GetMultilineTypeMetrics ( image , draw_info , & metrics ) ; //<S2SV> ( void ) status ; //<S2SV> width = ( size_t ) floor ( metrics . width + draw_info -> stroke_width + 0.5 ) ; //<S2SV> height = ( size_t ) floor ( metrics . height + draw_info -> stroke_width + 0.5 ) ; //<S2SV> if ( ( image -> columns != 0 ) && ( image -> rows != 0 ) ) //<S2SV> { //<S2SV> if ( ( width >= image -> columns ) && ( height >= image -> rows ) ) //<S2SV> break ; //<S2SV> } //<S2SV> else //<S2SV> if ( ( ( image -> columns != 0 ) && ( width >= image -> columns ) ) || //<S2SV> ( ( image -> rows != 0 ) && ( height >= image -> rows ) ) ) //<S2SV> break ; //<S2SV> } //<S2SV> high = draw_info -> pointsize ; //<S2SV> for ( low = 1.0 ; ( high - low ) > 0.5 ; ) //<S2SV> { //<S2SV> draw_info -> pointsize = ( low + high ) / 2.0 ; //<S2SV> text = AcquireString ( caption ) ; //<S2SV> i = FormatMagickCaption ( image , draw_info , split , & metrics , & text ) ; //<S2SV> ( void ) CloneString ( & draw_info -> text , text ) ; //<S2SV> text = DestroyString ( text ) ; //<S2SV> ( void ) FormatLocaleString ( geometry , MaxTextExtent , "%+g%+g" , //<S2SV> - metrics . bounds . x1 , metrics . ascent ) ; //<S2SV> if ( draw_info -> gravity == UndefinedGravity ) //<S2SV> ( void ) CloneString ( & draw_info -> geometry , geometry ) ; //<S2SV> ( void ) GetMultilineTypeMetrics ( image , draw_info , & metrics ) ; //<S2SV> width = ( size_t ) floor ( metrics . width + draw_info -> stroke_width + 0.5 ) ; //<S2SV> height = ( size_t ) floor ( metrics . height + draw_info -> stroke_width + 0.5 ) ; //<S2SV> if ( ( image -> columns != 0 ) && ( image -> rows != 0 ) ) //<S2SV> { //<S2SV> if ( ( width < image -> columns ) && ( height < image -> rows ) ) //<S2SV> low = draw_info -> pointsize + 0.5 ; //<S2SV> else //<S2SV> high = draw_info -> pointsize - 0.5 ; //<S2SV> } //<S2SV> else //<S2SV> if ( ( ( image -> columns != 0 ) && ( width < image -> columns ) ) || //<S2SV> ( ( image -> rows != 0 ) && ( height < image -> rows ) ) ) //<S2SV> low = draw_info -> pointsize + 0.5 ; //<S2SV> else //<S2SV> high = draw_info -> pointsize - 0.5 ; //<S2SV> } //<S2SV> draw_info -> pointsize = floor ( ( low + high ) / 2.0 - 0.5 ) ; //<S2SV> } //<S2SV> i = FormatMagickCaption ( image , draw_info , split , & metrics , & caption ) ; //<S2SV> ( void ) CloneString ( & draw_info -> text , caption ) ; //<S2SV> ( void ) FormatLocaleString ( geometry , MaxTextExtent , "%+g%+g" , MagickMax ( //<S2SV> draw_info -> direction == RightToLeftDirection ? image -> columns - //<S2SV> metrics . bounds . x2 : - metrics . bounds . x1 , 0.0 ) , draw_info -> gravity == //<S2SV> UndefinedGravity ? metrics . ascent : 0.0 ) ; //<S2SV> draw_info -> geometry = AcquireString ( geometry ) ; //<S2SV> status = AnnotateImage ( image , draw_info ) ; //<S2SV> if ( image_info -> pointsize == 0.0 ) //<S2SV> { //<S2SV> char //<S2SV> pointsize [ MaxTextExtent ] ; //<S2SV> ( void ) FormatLocaleString ( pointsize , MaxTextExtent , "%.20g" , //<S2SV> draw_info -> pointsize ) ; //<S2SV> ( void ) SetImageProperty ( image , "caption:pointsize" , pointsize ) ; //<S2SV> } //<S2SV> draw_info = DestroyDrawInfo ( draw_info ) ; //<S2SV> caption = DestroyString ( caption ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> image = DestroyImageList ( image ) ; //<S2SV> return ( ( Image * ) NULL ) ; //<S2SV> } //<S2SV> return ( GetFirstImageInList ( image ) ) ; //<S2SV> } //<S2SV> 