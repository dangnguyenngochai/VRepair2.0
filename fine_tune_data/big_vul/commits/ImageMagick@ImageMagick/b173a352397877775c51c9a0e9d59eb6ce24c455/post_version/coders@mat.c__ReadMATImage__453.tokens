static Image * ReadMATImage ( const ImageInfo * image_info , ExceptionInfo * exception ) //<S2SV> { //<S2SV> Image * image , * image2 = NULL , //<S2SV> * rotated_image ; //<S2SV> PixelPacket * q ; //<S2SV> unsigned int status ; //<S2SV> MATHeader MATLAB_HDR ; //<S2SV> size_t size ; //<S2SV> size_t CellType ; //<S2SV> QuantumInfo * quantum_info ; //<S2SV> ImageInfo * clone_info ; //<S2SV> int i ; //<S2SV> ssize_t ldblk ; //<S2SV> unsigned char * BImgBuff = NULL ; //<S2SV> double MinVal , MaxVal ; //<S2SV> size_t Unknown6 ; //<S2SV> unsigned z , z2 ; //<S2SV> unsigned Frames ; //<S2SV> int logging ; //<S2SV> int sample_size ; //<S2SV> MagickOffsetType filepos = 0x80 ; //<S2SV> BlobInfo * blob ; //<S2SV> size_t one ; //<S2SV> unsigned int ( * ReadBlobXXXLong ) ( Image * image ) ; //<S2SV> unsigned short ( * ReadBlobXXXShort ) ( Image * image ) ; //<S2SV> void ( * ReadBlobDoublesXXX ) ( Image * image , size_t len , double * data ) ; //<S2SV> void ( * ReadBlobFloatsXXX ) ( Image * image , size_t len , float * data ) ; //<S2SV> assert ( image_info != ( const ImageInfo * ) NULL ) ; //<S2SV> assert ( image_info -> signature == MagickSignature ) ; //<S2SV> assert ( exception != ( ExceptionInfo * ) NULL ) ; //<S2SV> assert ( exception -> signature == MagickSignature ) ; //<S2SV> logging = LogMagickEvent ( CoderEvent , GetMagickModule ( ) , "enter" ) ; //<S2SV> image = AcquireImage ( image_info ) ; //<S2SV> status = OpenBlob ( image_info , image , ReadBinaryBlobMode , exception ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> image = DestroyImageList ( image ) ; //<S2SV> return ( ( Image * ) NULL ) ; //<S2SV> } //<S2SV> clone_info = CloneImageInfo ( image_info ) ; //<S2SV> if ( ReadBlob ( image , 124 , ( unsigned char * ) & MATLAB_HDR . identific ) != 124 ) //<S2SV> ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; //<S2SV> MATLAB_HDR . Version = ReadBlobLSBShort ( image ) ; //<S2SV> if ( ReadBlob ( image , 2 , ( unsigned char * ) & MATLAB_HDR . EndianIndicator ) != 2 ) //<S2SV> ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; //<S2SV> if ( logging ) ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , "<S2SV_blank><S2SV_blank>Endian<S2SV_blank>%c%c" , //<S2SV> MATLAB_HDR . EndianIndicator [ 0 ] , MATLAB_HDR . EndianIndicator [ 1 ] ) ; //<S2SV> if ( ! strncmp ( MATLAB_HDR . EndianIndicator , "IM" , 2 ) ) //<S2SV> { //<S2SV> ReadBlobXXXLong = ReadBlobLSBLong ; //<S2SV> ReadBlobXXXShort = ReadBlobLSBShort ; //<S2SV> ReadBlobDoublesXXX = ReadBlobDoublesLSB ; //<S2SV> ReadBlobFloatsXXX = ReadBlobFloatsLSB ; //<S2SV> image -> endian = LSBEndian ; //<S2SV> } //<S2SV> else if ( ! strncmp ( MATLAB_HDR . EndianIndicator , "MI" , 2 ) ) //<S2SV> { //<S2SV> ReadBlobXXXLong = ReadBlobMSBLong ; //<S2SV> ReadBlobXXXShort = ReadBlobMSBShort ; //<S2SV> ReadBlobDoublesXXX = ReadBlobDoublesMSB ; //<S2SV> ReadBlobFloatsXXX = ReadBlobFloatsMSB ; //<S2SV> image -> endian = MSBEndian ; //<S2SV> } //<S2SV> else //<S2SV> goto MATLAB_KO ; //<S2SV> if ( strncmp ( MATLAB_HDR . identific , "MATLAB" , 6 ) ) //<S2SV> MATLAB_KO : ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; //<S2SV> filepos = TellBlob ( image ) ; //<S2SV> while ( ! EOFBlob ( image ) ) //<S2SV> { //<S2SV> Frames = 1 ; //<S2SV> ( void ) SeekBlob ( image , filepos , SEEK_SET ) ; //<S2SV> MATLAB_HDR . DataType = ReadBlobXXXLong ( image ) ; //<S2SV> if ( EOFBlob ( image ) ) break ; //<S2SV> MATLAB_HDR . ObjectSize = ReadBlobXXXLong ( image ) ; //<S2SV> if ( EOFBlob ( image ) ) break ; //<S2SV> filepos += MATLAB_HDR . ObjectSize + 4 + 4 ; //<S2SV> image2 = image ; //<S2SV> # if defined ( MAGICKCORE_ZLIB_DELEGATE ) //<S2SV> if ( MATLAB_HDR . DataType == miCOMPRESSED ) //<S2SV> { //<S2SV> image2 = DecompressBlock ( image , MATLAB_HDR . ObjectSize , clone_info , exception ) ; //<S2SV> if ( image2 == NULL ) continue ; //<S2SV> MATLAB_HDR . DataType = ReadBlobXXXLong ( image2 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( MATLAB_HDR . DataType != miMATRIX ) continue ; //<S2SV> MATLAB_HDR . unknown1 = ReadBlobXXXLong ( image2 ) ; //<S2SV> MATLAB_HDR . unknown2 = ReadBlobXXXLong ( image2 ) ; //<S2SV> MATLAB_HDR . unknown5 = ReadBlobXXXLong ( image2 ) ; //<S2SV> MATLAB_HDR . StructureClass = MATLAB_HDR . unknown5 & 0xFF ; //<S2SV> MATLAB_HDR . StructureFlag = ( MATLAB_HDR . unknown5 >> 8 ) & 0xFF ; //<S2SV> MATLAB_HDR . unknown3 = ReadBlobXXXLong ( image2 ) ; //<S2SV> if ( image != image2 ) //<S2SV> MATLAB_HDR . unknown4 = ReadBlobXXXLong ( image2 ) ; //<S2SV> MATLAB_HDR . unknown4 = ReadBlobXXXLong ( image2 ) ; //<S2SV> MATLAB_HDR . DimFlag = ReadBlobXXXLong ( image2 ) ; //<S2SV> MATLAB_HDR . SizeX = ReadBlobXXXLong ( image2 ) ; //<S2SV> MATLAB_HDR . SizeY = ReadBlobXXXLong ( image2 ) ; //<S2SV> switch ( MATLAB_HDR . DimFlag ) //<S2SV> { //<S2SV> case 8 : z2 = z = 1 ; break ; //<S2SV> case 12 : z2 = z = ReadBlobXXXLong ( image2 ) ; //<S2SV> Unknown6 = ReadBlobXXXLong ( image2 ) ; //<S2SV> ( void ) Unknown6 ; //<S2SV> if ( z != 3 ) ThrowReaderException ( CoderError , "MultidimensionalMatricesAreNotSupported" ) ; //<S2SV> break ; //<S2SV> case 16 : z2 = z = ReadBlobXXXLong ( image2 ) ; //<S2SV> if ( z != 3 && z != 1 ) //<S2SV> ThrowReaderException ( CoderError , "MultidimensionalMatricesAreNotSupported" ) ; //<S2SV> Frames = ReadBlobXXXLong ( image2 ) ; //<S2SV> break ; //<S2SV> default : ThrowReaderException ( CoderError , "MultidimensionalMatricesAreNotSupported" ) ; //<S2SV> } //<S2SV> MATLAB_HDR . Flag1 = ReadBlobXXXShort ( image2 ) ; //<S2SV> MATLAB_HDR . NameFlag = ReadBlobXXXShort ( image2 ) ; //<S2SV> if ( logging ) ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "MATLAB_HDR.StructureClass<S2SV_blank>%d" , MATLAB_HDR . StructureClass ) ; //<S2SV> if ( MATLAB_HDR . StructureClass != mxCHAR_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxSINGLE_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxDOUBLE_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxINT8_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxUINT8_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxINT16_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxUINT16_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxINT32_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxUINT32_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxINT64_CLASS && //<S2SV> MATLAB_HDR . StructureClass != mxUINT64_CLASS ) //<S2SV> ThrowReaderException ( CoderError , "UnsupportedCellTypeInTheMatrix" ) ; //<S2SV> switch ( MATLAB_HDR . NameFlag ) //<S2SV> { //<S2SV> case 0 : //<S2SV> size = ReadBlobXXXLong ( image2 ) ; //<S2SV> size = 4 * ( ssize_t ) ( ( size + 3 + 1 ) / 4 ) ; //<S2SV> ( void ) SeekBlob ( image2 , size , SEEK_CUR ) ; //<S2SV> break ; //<S2SV> case 1 : //<S2SV> case 2 : //<S2SV> case 3 : //<S2SV> case 4 : //<S2SV> ( void ) ReadBlob ( image2 , 4 , ( unsigned char * ) & size ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> goto MATLAB_KO ; //<S2SV> } //<S2SV> CellType = ReadBlobXXXLong ( image2 ) ; //<S2SV> if ( logging ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "MATLAB_HDR.CellType:<S2SV_blank>%.20g" , ( double ) CellType ) ; //<S2SV> ( void ) ReadBlob ( image2 , 4 , ( unsigned char * ) & size ) ; //<S2SV> NEXT_FRAME : //<S2SV> switch ( CellType ) //<S2SV> { //<S2SV> case miINT8 : //<S2SV> case miUINT8 : //<S2SV> sample_size = 8 ; //<S2SV> if ( MATLAB_HDR . StructureFlag & FLAG_LOGICAL ) //<S2SV> image -> depth = 1 ; //<S2SV> else //<S2SV> image -> depth = 8 ; //<S2SV> ldblk = ( ssize_t ) MATLAB_HDR . SizeX ; //<S2SV> break ; //<S2SV> case miINT16 : //<S2SV> case miUINT16 : //<S2SV> sample_size = 16 ; //<S2SV> image -> depth = 16 ; //<S2SV> ldblk = ( ssize_t ) ( 2 * MATLAB_HDR . SizeX ) ; //<S2SV> break ; //<S2SV> case miINT32 : //<S2SV> case miUINT32 : //<S2SV> sample_size = 32 ; //<S2SV> image -> depth = 32 ; //<S2SV> ldblk = ( ssize_t ) ( 4 * MATLAB_HDR . SizeX ) ; //<S2SV> break ; //<S2SV> case miINT64 : //<S2SV> case miUINT64 : //<S2SV> sample_size = 64 ; //<S2SV> image -> depth = 64 ; //<S2SV> ldblk = ( ssize_t ) ( 8 * MATLAB_HDR . SizeX ) ; //<S2SV> break ; //<S2SV> case miSINGLE : //<S2SV> sample_size = 32 ; //<S2SV> image -> depth = 32 ; //<S2SV> ( void ) SetImageOption ( clone_info , "quantum:format" , "floating-point" ) ; //<S2SV> if ( MATLAB_HDR . StructureFlag & FLAG_COMPLEX ) //<S2SV> { //<S2SV> } //<S2SV> ldblk = ( ssize_t ) ( 4 * MATLAB_HDR . SizeX ) ; //<S2SV> break ; //<S2SV> case miDOUBLE : //<S2SV> sample_size = 64 ; //<S2SV> image -> depth = 64 ; //<S2SV> ( void ) SetImageOption ( clone_info , "quantum:format" , "floating-point" ) ; //<S2SV> DisableMSCWarning ( 4127 ) //<S2SV> if ( sizeof ( double ) != 8 ) //<S2SV> RestoreMSCWarning //<S2SV> ThrowReaderException ( CoderError , "IncompatibleSizeOfDouble" ) ; //<S2SV> if ( MATLAB_HDR . StructureFlag & FLAG_COMPLEX ) //<S2SV> { //<S2SV> } //<S2SV> ldblk = ( ssize_t ) ( 8 * MATLAB_HDR . SizeX ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> ThrowReaderException ( CoderError , "UnsupportedCellTypeInTheMatrix" ) ; //<S2SV> } //<S2SV> ( void ) sample_size ; //<S2SV> image -> columns = MATLAB_HDR . SizeX ; //<S2SV> image -> rows = MATLAB_HDR . SizeY ; //<S2SV> quantum_info = AcquireQuantumInfo ( clone_info , image ) ; //<S2SV> if ( quantum_info == ( QuantumInfo * ) NULL ) //<S2SV> ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; //<S2SV> one = 1 ; //<S2SV> image -> colors = one << image -> depth ; //<S2SV> if ( image -> columns == 0 || image -> rows == 0 ) //<S2SV> goto MATLAB_KO ; //<S2SV> if ( ( MATLAB_HDR . DimFlag == 8 ) && //<S2SV> ( ( MATLAB_HDR . StructureFlag & FLAG_COMPLEX ) == 0 ) ) //<S2SV> { //<S2SV> SetImageColorspace ( image , GRAYColorspace ) ; //<S2SV> image -> type = GrayscaleType ; //<S2SV> } //<S2SV> if ( image_info -> ping ) //<S2SV> { //<S2SV> size_t temp = image -> columns ; //<S2SV> image -> columns = image -> rows ; //<S2SV> image -> rows = temp ; //<S2SV> goto done_reading ; //<S2SV> } //<S2SV> status = SetImageExtent ( image , image -> columns , image -> rows ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> InheritException ( exception , & image -> exception ) ; //<S2SV> return ( DestroyImageList ( image ) ) ; //<S2SV> } //<S2SV> BImgBuff = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) ( ldblk ) , sizeof ( double ) ) ; //<S2SV> if ( BImgBuff == NULL ) //<S2SV> ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; //<S2SV> MinVal = 0 ; //<S2SV> MaxVal = 0 ; //<S2SV> if ( CellType == miDOUBLE || CellType == miSINGLE ) //<S2SV> { //<S2SV> CalcMinMax ( image2 , image_info -> endian , MATLAB_HDR . SizeX , MATLAB_HDR . SizeY , CellType , ldblk , BImgBuff , & quantum_info -> minimum , & quantum_info -> maximum ) ; //<S2SV> } //<S2SV> if ( z == 1 ) z = 0 ; //<S2SV> do //<S2SV> { //<S2SV> for ( i = 0 ; i < ( ssize_t ) MATLAB_HDR . SizeY ; i ++ ) //<S2SV> { //<S2SV> q = GetAuthenticPixels ( image , 0 , MATLAB_HDR . SizeY - i - 1 , image -> columns , 1 , exception ) ; //<S2SV> if ( q == ( PixelPacket * ) NULL ) //<S2SV> { //<S2SV> if ( logging ) ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>MAT<S2SV_blank>set<S2SV_blank>image<S2SV_blank>pixels<S2SV_blank>returns<S2SV_blank>unexpected<S2SV_blank>NULL<S2SV_blank>on<S2SV_blank>a<S2SV_blank>row<S2SV_blank>%u." , ( unsigned ) ( MATLAB_HDR . SizeY - i - 1 ) ) ; //<S2SV> goto done_reading ; //<S2SV> } //<S2SV> if ( ReadBlob ( image2 , ldblk , ( unsigned char * ) BImgBuff ) != ( ssize_t ) ldblk ) //<S2SV> { //<S2SV> if ( logging ) ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>MAT<S2SV_blank>cannot<S2SV_blank>read<S2SV_blank>scanrow<S2SV_blank>%u<S2SV_blank>from<S2SV_blank>a<S2SV_blank>file." , ( unsigned ) ( MATLAB_HDR . SizeY - i - 1 ) ) ; //<S2SV> goto ExitLoop ; //<S2SV> } //<S2SV> if ( ( CellType == miINT8 || CellType == miUINT8 ) && ( MATLAB_HDR . StructureFlag & FLAG_LOGICAL ) ) //<S2SV> { //<S2SV> FixLogical ( ( unsigned char * ) BImgBuff , ldblk ) ; //<S2SV> if ( ImportQuantumPixels ( image , ( CacheView * ) NULL , quantum_info , z2qtype [ z ] , BImgBuff , exception ) <= 0 ) //<S2SV> { //<S2SV> ImportQuantumPixelsFailed : //<S2SV> if ( logging ) ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>MAT<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>ImportQuantumPixels<S2SV_blank>for<S2SV_blank>a<S2SV_blank>row<S2SV_blank>%u" , ( unsigned ) ( MATLAB_HDR . SizeY - i - 1 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ImportQuantumPixels ( image , ( CacheView * ) NULL , quantum_info , z2qtype [ z ] , BImgBuff , exception ) <= 0 ) //<S2SV> goto ImportQuantumPixelsFailed ; //<S2SV> if ( z <= 1 && //<S2SV> ( CellType == miINT8 || CellType == miINT16 || CellType == miINT32 || CellType == miINT64 ) ) //<S2SV> FixSignedValues ( q , MATLAB_HDR . SizeX ) ; //<S2SV> } //<S2SV> if ( ! SyncAuthenticPixels ( image , exception ) ) //<S2SV> { //<S2SV> if ( logging ) ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank>MAT<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>sync<S2SV_blank>image<S2SV_blank>pixels<S2SV_blank>for<S2SV_blank>a<S2SV_blank>row<S2SV_blank>%u" , ( unsigned ) ( MATLAB_HDR . SizeY - i - 1 ) ) ; //<S2SV> goto ExitLoop ; //<S2SV> } //<S2SV> } //<S2SV> } while ( z -- >= 2 ) ; //<S2SV> quantum_info = DestroyQuantumInfo ( quantum_info ) ; //<S2SV> ExitLoop : //<S2SV> if ( MATLAB_HDR . StructureFlag & FLAG_COMPLEX ) //<S2SV> { //<S2SV> CellType = ReadBlobXXXLong ( image2 ) ; //<S2SV> i = ReadBlobXXXLong ( image2 ) ; //<S2SV> if ( CellType == miDOUBLE || CellType == miSINGLE ) //<S2SV> { //<S2SV> CalcMinMax ( image2 , image_info -> endian , MATLAB_HDR . SizeX , MATLAB_HDR . SizeY , CellType , ldblk , BImgBuff , & MinVal , & MaxVal ) ; //<S2SV> } //<S2SV> if ( CellType == miDOUBLE ) //<S2SV> for ( i = 0 ; i < ( ssize_t ) MATLAB_HDR . SizeY ; i ++ ) //<S2SV> { //<S2SV> ReadBlobDoublesXXX ( image2 , ldblk , ( double * ) BImgBuff ) ; //<S2SV> InsertComplexDoubleRow ( ( double * ) BImgBuff , i , image , MinVal , MaxVal ) ; //<S2SV> } //<S2SV> if ( CellType == miSINGLE ) //<S2SV> for ( i = 0 ; i < ( ssize_t ) MATLAB_HDR . SizeY ; i ++ ) //<S2SV> { //<S2SV> ReadBlobFloatsXXX ( image2 , ldblk , ( float * ) BImgBuff ) ; //<S2SV> InsertComplexFloatRow ( ( float * ) BImgBuff , i , image , MinVal , MaxVal ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( MATLAB_HDR . DimFlag == 8 ) && //<S2SV> ( ( MATLAB_HDR . StructureFlag & FLAG_COMPLEX ) == 0 ) ) //<S2SV> image -> type = GrayscaleType ; //<S2SV> if ( image -> depth == 1 ) //<S2SV> image -> type = BilevelType ; //<S2SV> if ( image2 == image ) //<S2SV> image2 = NULL ; //<S2SV> rotated_image = RotateImage ( image , 90.0 , exception ) ; //<S2SV> if ( rotated_image != ( Image * ) NULL ) //<S2SV> { //<S2SV> rotated_image -> page . x = 0 ; //<S2SV> rotated_image -> page . y = 0 ; //<S2SV> blob = rotated_image -> blob ; //<S2SV> rotated_image -> blob = image -> blob ; //<S2SV> rotated_image -> colors = image -> colors ; //<S2SV> image -> blob = blob ; //<S2SV> AppendImageToList ( & image , rotated_image ) ; //<S2SV> DeleteImageFromList ( & image ) ; //<S2SV> } //<S2SV> done_reading : //<S2SV> if ( image2 != NULL ) //<S2SV> if ( image2 != image ) //<S2SV> { //<S2SV> DeleteImageFromList ( & image2 ) ; //<S2SV> if ( clone_info ) //<S2SV> { //<S2SV> if ( clone_info -> file ) //<S2SV> { //<S2SV> fclose ( clone_info -> file ) ; //<S2SV> clone_info -> file = NULL ; //<S2SV> ( void ) remove_utf8 ( clone_info -> filename ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> AcquireNextImage ( image_info , image ) ; //<S2SV> if ( image -> next == ( Image * ) NULL ) break ; //<S2SV> image = SyncNextImageInList ( image ) ; //<S2SV> image -> columns = image -> rows = 0 ; //<S2SV> image -> colors = 0 ; //<S2SV> RelinquishMagickMemory ( BImgBuff ) ; //<S2SV> BImgBuff = NULL ; //<S2SV> if ( -- Frames > 0 ) //<S2SV> { //<S2SV> z = z2 ; //<S2SV> if ( image2 == NULL ) image2 = image ; //<S2SV> goto NEXT_FRAME ; //<S2SV> } //<S2SV> if ( image2 != NULL ) //<S2SV> if ( image2 != image ) //<S2SV> { //<S2SV> DeleteImageFromList ( & image2 ) ; //<S2SV> if ( clone_info ) //<S2SV> { //<S2SV> if ( clone_info -> file ) //<S2SV> { //<S2SV> fclose ( clone_info -> file ) ; //<S2SV> clone_info -> file = NULL ; //<S2SV> ( void ) unlink ( clone_info -> filename ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> clone_info = DestroyImageInfo ( clone_info ) ; //<S2SV> RelinquishMagickMemory ( BImgBuff ) ; //<S2SV> CloseBlob ( image ) ; //<S2SV> { //<S2SV> Image * p ; //<S2SV> ssize_t scene = 0 ; //<S2SV> p = image ; //<S2SV> image = NULL ; //<S2SV> while ( p != ( Image * ) NULL ) //<S2SV> { //<S2SV> Image * tmp = p ; //<S2SV> if ( ( p -> rows == 0 ) || ( p -> columns == 0 ) ) { //<S2SV> p = p -> previous ; //<S2SV> DeleteImageFromList ( & tmp ) ; //<S2SV> } else { //<S2SV> image = p ; //<S2SV> p = p -> previous ; //<S2SV> } //<S2SV> } //<S2SV> for ( p = image ; p != ( Image * ) NULL ; p = p -> next ) //<S2SV> p -> scene = scene ++ ; //<S2SV> } //<S2SV> if ( clone_info != NULL ) //<S2SV> { //<S2SV> if ( clone_info -> file ) //<S2SV> { //<S2SV> fclose ( clone_info -> file ) ; //<S2SV> clone_info -> file = NULL ; //<S2SV> ( void ) remove_utf8 ( clone_info -> filename ) ; //<S2SV> } //<S2SV> DestroyImageInfo ( clone_info ) ; //<S2SV> clone_info = NULL ; //<S2SV> } //<S2SV> if ( logging ) ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , "return" ) ; //<S2SV> if ( image == NULL ) //<S2SV> ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; //<S2SV> return ( image ) ; //<S2SV> } //<S2SV> 