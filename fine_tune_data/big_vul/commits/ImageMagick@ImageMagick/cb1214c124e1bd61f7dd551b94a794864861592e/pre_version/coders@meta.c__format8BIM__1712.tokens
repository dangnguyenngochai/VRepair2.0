static int format8BIM ( Image * ifile , Image * ofile ) //<S2SV> { //<S2SV> char //<S2SV> temp [ MagickPathExtent ] ; //<S2SV> unsigned int //<S2SV> foundOSType ; //<S2SV> int //<S2SV> ID , //<S2SV> resCount , //<S2SV> i , //<S2SV> c ; //<S2SV> ssize_t //<S2SV> count ; //<S2SV> unsigned char //<S2SV> * PString , //<S2SV> * str ; //<S2SV> resCount = 0 ; //<S2SV> foundOSType = 0 ; //<S2SV> ( void ) foundOSType ; //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> while ( c != EOF ) //<S2SV> { //<S2SV> if ( c == '8' ) //<S2SV> { //<S2SV> unsigned char //<S2SV> buffer [ 5 ] ; //<S2SV> buffer [ 0 ] = ( unsigned char ) c ; //<S2SV> for ( i = 1 ; i < 4 ; i ++ ) //<S2SV> { //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> if ( c == EOF ) //<S2SV> return ( - 1 ) ; //<S2SV> buffer [ i ] = ( unsigned char ) c ; //<S2SV> } //<S2SV> buffer [ 4 ] = 0 ; //<S2SV> if ( strcmp ( ( const char * ) buffer , "8BIM" ) == 0 ) //<S2SV> foundOSType = 1 ; //<S2SV> else //<S2SV> continue ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> ID = ReadBlobMSBSignedShort ( ifile ) ; //<S2SV> if ( ID < 0 ) //<S2SV> return ( - 1 ) ; //<S2SV> { //<S2SV> unsigned char //<S2SV> plen ; //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> if ( c == EOF ) //<S2SV> return ( - 1 ) ; //<S2SV> plen = ( unsigned char ) c ; //<S2SV> PString = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) ( plen + //<S2SV> MagickPathExtent ) , sizeof ( * PString ) ) ; //<S2SV> if ( PString == ( unsigned char * ) NULL ) //<S2SV> return 0 ; //<S2SV> for ( i = 0 ; i < plen ; i ++ ) //<S2SV> { //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> if ( c == EOF ) //<S2SV> { //<S2SV> PString = ( unsigned char * ) RelinquishMagickMemory ( PString ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> PString [ i ] = ( unsigned char ) c ; //<S2SV> } //<S2SV> PString [ plen ] = 0 ; //<S2SV> if ( ( plen & 0x01 ) == 0 ) //<S2SV> { //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> if ( c == EOF ) //<S2SV> { //<S2SV> PString = ( unsigned char * ) RelinquishMagickMemory ( PString ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> count = ( ssize_t ) ReadBlobMSBSignedLong ( ifile ) ; //<S2SV> if ( ( count < 0 ) || ( count > GetBlobSize ( ifile ) ) ) //<S2SV> { //<S2SV> PString = ( unsigned char * ) RelinquishMagickMemory ( PString ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> str = ( unsigned char * ) AcquireQuantumMemory ( ( size_t ) count , sizeof ( * str ) ) ; //<S2SV> if ( str == ( unsigned char * ) NULL ) //<S2SV> { //<S2SV> PString = ( unsigned char * ) RelinquishMagickMemory ( PString ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < ( ssize_t ) count ; i ++ ) //<S2SV> { //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> if ( c == EOF ) //<S2SV> { //<S2SV> str = ( unsigned char * ) RelinquishMagickMemory ( str ) ; //<S2SV> PString = ( unsigned char * ) RelinquishMagickMemory ( PString ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> str [ i ] = ( unsigned char ) c ; //<S2SV> } //<S2SV> if ( ID != THUMBNAIL_ID ) //<S2SV> { //<S2SV> if ( strlen ( ( const char * ) PString ) > 0 ) //<S2SV> ( void ) FormatLocaleString ( temp , MagickPathExtent , "8BIM#%d#%s=" , ID , //<S2SV> PString ) ; //<S2SV> else //<S2SV> ( void ) FormatLocaleString ( temp , MagickPathExtent , "8BIM#%d=" , ID ) ; //<S2SV> ( void ) WriteBlobString ( ofile , temp ) ; //<S2SV> if ( ID == IPTC_ID ) //<S2SV> { //<S2SV> formatString ( ofile , "IPTC" , 4 ) ; //<S2SV> formatIPTCfromBuffer ( ofile , ( char * ) str , ( ssize_t ) count ) ; //<S2SV> } //<S2SV> else //<S2SV> formatString ( ofile , ( char * ) str , ( ssize_t ) count ) ; //<S2SV> } //<S2SV> str = ( unsigned char * ) RelinquishMagickMemory ( str ) ; //<S2SV> PString = ( unsigned char * ) RelinquishMagickMemory ( PString ) ; //<S2SV> resCount ++ ; //<S2SV> c = ReadBlobByte ( ifile ) ; //<S2SV> } //<S2SV> return resCount ; //<S2SV> } //<S2SV> 