MagickBooleanType sixel_decode ( unsigned char * p , //<S2SV> unsigned char * * pixels , //<S2SV> size_t * pwidth , //<S2SV> size_t * pheight , //<S2SV> unsigned char * * palette , //<S2SV> size_t * ncolors ) //<S2SV> { //<S2SV> int n , i , r , g , b , sixel_vertical_mask , c ; //<S2SV> int posision_x , posision_y ; //<S2SV> int max_x , max_y ; //<S2SV> int attributed_pan , attributed_pad ; //<S2SV> int attributed_ph , attributed_pv ; //<S2SV> int repeat_count , color_index , max_color_index = 2 , background_color_index ; //<S2SV> int param [ 10 ] ; //<S2SV> int sixel_palet [ SIXEL_PALETTE_MAX ] ; //<S2SV> unsigned char * imbuf , * dmbuf ; //<S2SV> int imsx , imsy ; //<S2SV> int dmsx , dmsy ; //<S2SV> int y ; //<S2SV> posision_x = posision_y = 0 ; //<S2SV> max_x = max_y = 0 ; //<S2SV> attributed_pan = 2 ; //<S2SV> attributed_pad = 1 ; //<S2SV> attributed_ph = attributed_pv = 0 ; //<S2SV> repeat_count = 1 ; //<S2SV> color_index = 0 ; //<S2SV> background_color_index = 0 ; //<S2SV> imsx = 2048 ; //<S2SV> imsy = 2048 ; //<S2SV> imbuf = ( unsigned char * ) AcquireQuantumMemory ( imsx * imsy , 1 ) ; //<S2SV> if ( imbuf == NULL ) { //<S2SV> return ( MagickFalse ) ; //<S2SV> } //<S2SV> for ( n = 0 ; n < 16 ; n ++ ) { //<S2SV> sixel_palet [ n ] = sixel_default_color_table [ n ] ; //<S2SV> } //<S2SV> for ( r = 0 ; r < 6 ; r ++ ) { //<S2SV> for ( g = 0 ; g < 6 ; g ++ ) { //<S2SV> for ( b = 0 ; b < 6 ; b ++ ) { //<S2SV> sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51 , g * 51 , b * 51 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < 24 ; i ++ ) { //<S2SV> sixel_palet [ n ++ ] = SIXEL_RGB ( i * 11 , i * 11 , i * 11 ) ; //<S2SV> } //<S2SV> for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { //<S2SV> sixel_palet [ n ] = SIXEL_RGB ( 255 , 255 , 255 ) ; //<S2SV> } //<S2SV> ( void ) ResetMagickMemory ( imbuf , background_color_index , imsx * imsy ) ; //<S2SV> while ( * p != '\\0' ) { //<S2SV> if ( ( p [ 0 ] == '\\033' && p [ 1 ] == 'P' ) || * p == 0x90 ) { //<S2SV> if ( * p == '\\033' ) { //<S2SV> p ++ ; //<S2SV> } //<S2SV> p = get_params ( ++ p , param , & n ) ; //<S2SV> if ( * p == 'q' ) { //<S2SV> p ++ ; //<S2SV> if ( n > 0 ) { //<S2SV> switch ( param [ 0 ] ) { //<S2SV> case 0 : //<S2SV> case 1 : //<S2SV> attributed_pad = 2 ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> attributed_pad = 5 ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> attributed_pad = 4 ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> attributed_pad = 4 ; //<S2SV> break ; //<S2SV> case 5 : //<S2SV> attributed_pad = 3 ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> attributed_pad = 3 ; //<S2SV> break ; //<S2SV> case 7 : //<S2SV> attributed_pad = 2 ; //<S2SV> break ; //<S2SV> case 8 : //<S2SV> attributed_pad = 2 ; //<S2SV> break ; //<S2SV> case 9 : //<S2SV> attributed_pad = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( n > 2 ) { //<S2SV> if ( param [ 2 ] == 0 ) { //<S2SV> param [ 2 ] = 10 ; //<S2SV> } //<S2SV> attributed_pan = attributed_pan * param [ 2 ] / 10 ; //<S2SV> attributed_pad = attributed_pad * param [ 2 ] / 10 ; //<S2SV> if ( attributed_pan <= 0 ) attributed_pan = 1 ; //<S2SV> if ( attributed_pad <= 0 ) attributed_pad = 1 ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( ( p [ 0 ] == '\\033' && p [ 1 ] == '\\\\' ) || * p == 0x9C ) { //<S2SV> break ; //<S2SV> } else if ( * p == \'"\' ) { //<S2SV> p = get_params ( ++ p , param , & n ) ; //<S2SV> if ( n > 0 ) attributed_pad = param [ 0 ] ; //<S2SV> if ( n > 1 ) attributed_pan = param [ 1 ] ; //<S2SV> if ( n > 2 && param [ 2 ] > 0 ) attributed_ph = param [ 2 ] ; //<S2SV> if ( n > 3 && param [ 3 ] > 0 ) attributed_pv = param [ 3 ] ; //<S2SV> if ( attributed_pan <= 0 ) attributed_pan = 1 ; //<S2SV> if ( attributed_pad <= 0 ) attributed_pad = 1 ; //<S2SV> if ( imsx < attributed_ph || imsy < attributed_pv ) { //<S2SV> dmsx = imsx > attributed_ph ? imsx : attributed_ph ; //<S2SV> dmsy = imsy > attributed_pv ? imsy : attributed_pv ; //<S2SV> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; //<S2SV> if ( dmbuf == ( unsigned char * ) NULL ) { //<S2SV> imbuf = ( unsigned char * ) RelinquishMagickMemory ( imbuf ) ; //<S2SV> return ( MagickFalse ) ; //<S2SV> } //<S2SV> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; //<S2SV> for ( y = 0 ; y < imsy ; ++ y ) { //<S2SV> ( void ) CopyMagickMemory ( dmbuf + dmsx * y , imbuf + imsx * y , imsx ) ; //<S2SV> } //<S2SV> imbuf = ( unsigned char * ) RelinquishMagickMemory ( imbuf ) ; //<S2SV> imsx = dmsx ; //<S2SV> imsy = dmsy ; //<S2SV> imbuf = dmbuf ; //<S2SV> } //<S2SV> } else if ( * p == '!' ) { //<S2SV> p = get_params ( ++ p , param , & n ) ; //<S2SV> if ( n > 0 ) { //<S2SV> repeat_count = param [ 0 ] ; //<S2SV> } //<S2SV> } else if ( * p == '#' ) { //<S2SV> p = get_params ( ++ p , param , & n ) ; //<S2SV> if ( n > 0 ) { //<S2SV> if ( ( color_index = param [ 0 ] ) < 0 ) { //<S2SV> color_index = 0 ; //<S2SV> } else if ( color_index >= SIXEL_PALETTE_MAX ) { //<S2SV> color_index = SIXEL_PALETTE_MAX - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( n > 4 ) { //<S2SV> if ( param [ 1 ] == 1 ) { //<S2SV> if ( param [ 2 ] > 360 ) param [ 2 ] = 360 ; //<S2SV> if ( param [ 3 ] > 100 ) param [ 3 ] = 100 ; //<S2SV> if ( param [ 4 ] > 100 ) param [ 4 ] = 100 ; //<S2SV> sixel_palet [ color_index ] = hls_to_rgb ( param [ 2 ] * 100 / 360 , param [ 3 ] , param [ 4 ] ) ; //<S2SV> } else if ( param [ 1 ] == 2 ) { //<S2SV> if ( param [ 2 ] > 100 ) param [ 2 ] = 100 ; //<S2SV> if ( param [ 3 ] > 100 ) param [ 3 ] = 100 ; //<S2SV> if ( param [ 4 ] > 100 ) param [ 4 ] = 100 ; //<S2SV> sixel_palet [ color_index ] = SIXEL_XRGB ( param [ 2 ] , param [ 3 ] , param [ 4 ] ) ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( * p == '$' ) { //<S2SV> p ++ ; //<S2SV> posision_x = 0 ; //<S2SV> repeat_count = 1 ; //<S2SV> } else if ( * p == '-' ) { //<S2SV> p ++ ; //<S2SV> posision_x = 0 ; //<S2SV> posision_y += 6 ; //<S2SV> repeat_count = 1 ; //<S2SV> } else if ( * p >= '?' && * p <= '\\177' ) { //<S2SV> if ( imsx < ( posision_x + repeat_count ) || imsy < ( posision_y + 6 ) ) { //<S2SV> int nx = imsx * 2 ; //<S2SV> int ny = imsy * 2 ; //<S2SV> while ( nx < ( posision_x + repeat_count ) || ny < ( posision_y + 6 ) ) { //<S2SV> nx *= 2 ; //<S2SV> ny *= 2 ; //<S2SV> } //<S2SV> dmsx = nx ; //<S2SV> dmsy = ny ; //<S2SV> dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ; //<S2SV> if ( dmbuf == ( unsigned char * ) NULL ) { //<S2SV> imbuf = ( unsigned char * ) RelinquishMagickMemory ( imbuf ) ; //<S2SV> return ( MagickFalse ) ; //<S2SV> } //<S2SV> ( void ) ResetMagickMemory ( dmbuf , background_color_index , dmsx * dmsy ) ; //<S2SV> for ( y = 0 ; y < imsy ; ++ y ) { //<S2SV> ( void ) CopyMagickMemory ( dmbuf + dmsx * y , imbuf + imsx * y , imsx ) ; //<S2SV> } //<S2SV> imbuf = ( unsigned char * ) RelinquishMagickMemory ( imbuf ) ; //<S2SV> imsx = dmsx ; //<S2SV> imsy = dmsy ; //<S2SV> imbuf = dmbuf ; //<S2SV> } //<S2SV> if ( color_index > max_color_index ) { //<S2SV> max_color_index = color_index ; //<S2SV> } //<S2SV> if ( ( b = * ( p ++ ) - '?' ) == 0 ) { //<S2SV> posision_x += repeat_count ; //<S2SV> } else { //<S2SV> sixel_vertical_mask = 0x01 ; //<S2SV> if ( repeat_count <= 1 ) { //<S2SV> for ( i = 0 ; i < 6 ; i ++ ) { //<S2SV> if ( ( b & sixel_vertical_mask ) != 0 ) { //<S2SV> imbuf [ imsx * ( posision_y + i ) + posision_x ] = color_index ; //<S2SV> if ( max_x < posision_x ) { //<S2SV> max_x = posision_x ; //<S2SV> } //<S2SV> if ( max_y < ( posision_y + i ) ) { //<S2SV> max_y = posision_y + i ; //<S2SV> } //<S2SV> } //<S2SV> sixel_vertical_mask <<= 1 ; //<S2SV> } //<S2SV> posision_x += 1 ; //<S2SV> } else { //<S2SV> for ( i = 0 ; i < 6 ; i ++ ) { //<S2SV> if ( ( b & sixel_vertical_mask ) != 0 ) { //<S2SV> c = sixel_vertical_mask << 1 ; //<S2SV> for ( n = 1 ; ( i + n ) < 6 ; n ++ ) { //<S2SV> if ( ( b & c ) == 0 ) { //<S2SV> break ; //<S2SV> } //<S2SV> c <<= 1 ; //<S2SV> } //<S2SV> for ( y = posision_y + i ; y < posision_y + i + n ; ++ y ) { //<S2SV> ( void ) ResetMagickMemory ( imbuf + imsx * y + posision_x , color_index , repeat_count ) ; //<S2SV> } //<S2SV> if ( max_x < ( posision_x + repeat_count - 1 ) ) { //<S2SV> max_x = posision_x + repeat_count - 1 ; //<S2SV> } //<S2SV> if ( max_y < ( posision_y + i + n - 1 ) ) { //<S2SV> max_y = posision_y + i + n - 1 ; //<S2SV> } //<S2SV> i += ( n - 1 ) ; //<S2SV> sixel_vertical_mask <<= ( n - 1 ) ; //<S2SV> } //<S2SV> sixel_vertical_mask <<= 1 ; //<S2SV> } //<S2SV> posision_x += repeat_count ; //<S2SV> } //<S2SV> } //<S2SV> repeat_count = 1 ; //<S2SV> } else { //<S2SV> p ++ ; //<S2SV> } //<S2SV> } //<S2SV> if ( ++ max_x < attributed_ph ) { //<S2SV> max_x = attributed_ph ; //<S2SV> } //<S2SV> if ( ++ max_y < attributed_pv ) { //<S2SV> max_y = attributed_pv ; //<S2SV> } //<S2SV> if ( imsx > max_x || imsy > max_y ) { //<S2SV> dmsx = max_x ; //<S2SV> dmsy = max_y ; //<S2SV> if ( ( dmbuf = ( unsigned char * ) AcquireQuantumMemory ( dmsx * dmsy , 1 ) ) == NULL ) { //<S2SV> imbuf = ( unsigned char * ) RelinquishMagickMemory ( imbuf ) ; //<S2SV> return ( MagickFalse ) ; //<S2SV> } //<S2SV> for ( y = 0 ; y < dmsy ; ++ y ) { //<S2SV> ( void ) CopyMagickMemory ( dmbuf + dmsx * y , imbuf + imsx * y , dmsx ) ; //<S2SV> } //<S2SV> imbuf = ( unsigned char * ) RelinquishMagickMemory ( imbuf ) ; //<S2SV> imsx = dmsx ; //<S2SV> imsy = dmsy ; //<S2SV> imbuf = dmbuf ; //<S2SV> } //<S2SV> * pixels = imbuf ; //<S2SV> * pwidth = imsx ; //<S2SV> * pheight = imsy ; //<S2SV> * ncolors = max_color_index + 1 ; //<S2SV> * palette = ( unsigned char * ) AcquireQuantumMemory ( * ncolors , 4 ) ; //<S2SV> for ( n = 0 ; n < ( ssize_t ) * ncolors ; ++ n ) { //<S2SV> ( * palette ) [ n * 4 + 0 ] = sixel_palet [ n ] >> 16 & 0xff ; //<S2SV> ( * palette ) [ n * 4 + 1 ] = sixel_palet [ n ] >> 8 & 0xff ; //<S2SV> ( * palette ) [ n * 4 + 2 ] = sixel_palet [ n ] & 0xff ; //<S2SV> ( * palette ) [ n * 4 + 3 ] = 0xff ; //<S2SV> } //<S2SV> return ( MagickTrue ) ; //<S2SV> } //<S2SV> 