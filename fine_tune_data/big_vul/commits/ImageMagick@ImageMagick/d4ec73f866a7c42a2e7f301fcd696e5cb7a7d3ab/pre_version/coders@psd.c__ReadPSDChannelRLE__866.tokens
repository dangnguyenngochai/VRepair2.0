static MagickBooleanType ReadPSDChannelRLE ( Image * image , const PSDInfo * psd_info , //<S2SV> const ssize_t type , MagickOffsetType * sizes , ExceptionInfo * exception ) //<S2SV> { //<S2SV> MagickBooleanType //<S2SV> status ; //<S2SV> size_t //<S2SV> length , //<S2SV> row_size ; //<S2SV> ssize_t //<S2SV> count , //<S2SV> y ; //<S2SV> unsigned char //<S2SV> * compact_pixels , //<S2SV> * pixels ; //<S2SV> if ( image -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( CoderEvent , GetMagickModule ( ) , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>layer<S2SV_blank>data<S2SV_blank>is<S2SV_blank>RLE<S2SV_blank>compressed" ) ; //<S2SV> row_size = GetPSDRowSize ( image ) ; //<S2SV> pixels = ( unsigned char * ) AcquireQuantumMemory ( row_size , sizeof ( * pixels ) ) ; //<S2SV> if ( pixels == ( unsigned char * ) NULL ) //<S2SV> ThrowBinaryException ( ResourceLimitError , "MemoryAllocationFailed" , //<S2SV> image -> filename ) ; //<S2SV> length = 0 ; //<S2SV> for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) //<S2SV> if ( ( MagickOffsetType ) length < sizes [ y ] ) //<S2SV> length = ( size_t ) sizes [ y ] ; //<S2SV> if ( length > row_size + 256 ) //<S2SV> { //<S2SV> pixels = ( unsigned char * ) RelinquishMagickMemory ( pixels ) ; //<S2SV> ThrowBinaryException ( ResourceLimitError , "InvalidLength" , //<S2SV> image -> filename ) ; //<S2SV> } //<S2SV> compact_pixels = ( unsigned char * ) AcquireQuantumMemory ( length , sizeof ( * pixels ) ) ; //<S2SV> if ( compact_pixels == ( unsigned char * ) NULL ) //<S2SV> { //<S2SV> pixels = ( unsigned char * ) RelinquishMagickMemory ( pixels ) ; //<S2SV> ThrowBinaryException ( ResourceLimitError , "MemoryAllocationFailed" , //<S2SV> image -> filename ) ; //<S2SV> } //<S2SV> ( void ) ResetMagickMemory ( compact_pixels , 0 , length * sizeof ( * compact_pixels ) ) ; //<S2SV> status = MagickTrue ; //<S2SV> for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) //<S2SV> { //<S2SV> status = MagickFalse ; //<S2SV> count = ReadBlob ( image , ( size_t ) sizes [ y ] , compact_pixels ) ; //<S2SV> if ( count != ( ssize_t ) sizes [ y ] ) //<S2SV> break ; //<S2SV> count = DecodePSDPixels ( ( size_t ) sizes [ y ] , compact_pixels , //<S2SV> ( ssize_t ) ( image -> depth == 1 ? 123456 : image -> depth ) , row_size , pixels ) ; //<S2SV> if ( count != ( ssize_t ) row_size ) //<S2SV> break ; //<S2SV> status = ReadPSDChannelPixels ( image , psd_info -> channels , y , type , pixels , //<S2SV> exception ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> break ; //<S2SV> } //<S2SV> compact_pixels = ( unsigned char * ) RelinquishMagickMemory ( compact_pixels ) ; //<S2SV> pixels = ( unsigned char * ) RelinquishMagickMemory ( pixels ) ; //<S2SV> return ( status ) ; //<S2SV> } //<S2SV> 