static MagickBooleanType GetEXIFProperty ( const Image * image , //<S2SV> const char * property , ExceptionInfo * exception ) //<S2SV> { //<S2SV> # define MaxDirectoryStack 16 //<S2SV> # define EXIF_DELIMITER "\\n" //<S2SV> # define EXIF_NUM_FORMATS 12 //<S2SV> # define EXIF_FMT_BYTE 1 //<S2SV> # define EXIF_FMT_STRING 2 //<S2SV> # define EXIF_FMT_USHORT 3 //<S2SV> # define EXIF_FMT_ULONG 4 //<S2SV> # define EXIF_FMT_URATIONAL 5 //<S2SV> # define EXIF_FMT_SBYTE 6 //<S2SV> # define EXIF_FMT_UNDEFINED 7 //<S2SV> # define EXIF_FMT_SSHORT 8 //<S2SV> # define EXIF_FMT_SLONG 9 //<S2SV> # define EXIF_FMT_SRATIONAL 10 //<S2SV> # define EXIF_FMT_SINGLE 11 //<S2SV> # define EXIF_FMT_DOUBLE 12 //<S2SV> # define TAG_EXIF_OFFSET 0x8769 //<S2SV> # define TAG_GPS_OFFSET 0x8825 //<S2SV> # define TAG_INTEROP_OFFSET 0xa005 //<S2SV> # define EXIFMultipleValues ( size , format , arg ) \\\n{ ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format ",<S2SV_blank>" , arg ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; \\\n} //<S2SV> # define EXIFMultipleFractions ( size , format , arg1 , arg2 ) \\\n{ ssize_t component ; size_t length ; unsigned char * p1 ; length = 0 ; p1 = p ; for ( component = 0 ; component < components ; component ++ ) { length += FormatLocaleString ( buffer + length , MagickPathExtent - length , format ",<S2SV_blank>" , ( arg1 ) , ( arg2 ) ) ; if ( length >= ( MagickPathExtent - 1 ) ) length = MagickPathExtent - 1 ; p1 += size ; } if ( length > 1 ) buffer [ length - 2 ] = '\\0' ; value = AcquireString ( buffer ) ; \\\n} //<S2SV> typedef struct _DirectoryInfo //<S2SV> { //<S2SV> const unsigned char //<S2SV> * directory ; //<S2SV> size_t //<S2SV> entry ; //<S2SV> ssize_t //<S2SV> offset ; //<S2SV> } DirectoryInfo ; //<S2SV> typedef struct _TagInfo //<S2SV> { //<S2SV> size_t //<S2SV> tag ; //<S2SV> const char //<S2SV> * description ; //<S2SV> } TagInfo ; //<S2SV> static TagInfo //<S2SV> EXIFTag [ ] = //<S2SV> { //<S2SV> { 0x001 , "exif:InteroperabilityIndex" } , //<S2SV> { 0x002 , "exif:InteroperabilityVersion" } , //<S2SV> { 0x100 , "exif:ImageWidth" } , //<S2SV> { 0x101 , "exif:ImageLength" } , //<S2SV> { 0x102 , "exif:BitsPerSample" } , //<S2SV> { 0x103 , "exif:Compression" } , //<S2SV> { 0x106 , "exif:PhotometricInterpretation" } , //<S2SV> { 0x10a , "exif:FillOrder" } , //<S2SV> { 0x10d , "exif:DocumentName" } , //<S2SV> { 0x10e , "exif:ImageDescription" } , //<S2SV> { 0x10f , "exif:Make" } , //<S2SV> { 0x110 , "exif:Model" } , //<S2SV> { 0x111 , "exif:StripOffsets" } , //<S2SV> { 0x112 , "exif:Orientation" } , //<S2SV> { 0x115 , "exif:SamplesPerPixel" } , //<S2SV> { 0x116 , "exif:RowsPerStrip" } , //<S2SV> { 0x117 , "exif:StripByteCounts" } , //<S2SV> { 0x11a , "exif:XResolution" } , //<S2SV> { 0x11b , "exif:YResolution" } , //<S2SV> { 0x11c , "exif:PlanarConfiguration" } , //<S2SV> { 0x11d , "exif:PageName" } , //<S2SV> { 0x11e , "exif:XPosition" } , //<S2SV> { 0x11f , "exif:YPosition" } , //<S2SV> { 0x118 , "exif:MinSampleValue" } , //<S2SV> { 0x119 , "exif:MaxSampleValue" } , //<S2SV> { 0x120 , "exif:FreeOffsets" } , //<S2SV> { 0x121 , "exif:FreeByteCounts" } , //<S2SV> { 0x122 , "exif:GrayResponseUnit" } , //<S2SV> { 0x123 , "exif:GrayResponseCurve" } , //<S2SV> { 0x124 , "exif:T4Options" } , //<S2SV> { 0x125 , "exif:T6Options" } , //<S2SV> { 0x128 , "exif:ResolutionUnit" } , //<S2SV> { 0x12d , "exif:TransferFunction" } , //<S2SV> { 0x131 , "exif:Software" } , //<S2SV> { 0x132 , "exif:DateTime" } , //<S2SV> { 0x13b , "exif:Artist" } , //<S2SV> { 0x13e , "exif:WhitePoint" } , //<S2SV> { 0x13f , "exif:PrimaryChromaticities" } , //<S2SV> { 0x140 , "exif:ColorMap" } , //<S2SV> { 0x141 , "exif:HalfToneHints" } , //<S2SV> { 0x142 , "exif:TileWidth" } , //<S2SV> { 0x143 , "exif:TileLength" } , //<S2SV> { 0x144 , "exif:TileOffsets" } , //<S2SV> { 0x145 , "exif:TileByteCounts" } , //<S2SV> { 0x14a , "exif:SubIFD" } , //<S2SV> { 0x14c , "exif:InkSet" } , //<S2SV> { 0x14d , "exif:InkNames" } , //<S2SV> { 0x14e , "exif:NumberOfInks" } , //<S2SV> { 0x150 , "exif:DotRange" } , //<S2SV> { 0x151 , "exif:TargetPrinter" } , //<S2SV> { 0x152 , "exif:ExtraSample" } , //<S2SV> { 0x153 , "exif:SampleFormat" } , //<S2SV> { 0x154 , "exif:SMinSampleValue" } , //<S2SV> { 0x155 , "exif:SMaxSampleValue" } , //<S2SV> { 0x156 , "exif:TransferRange" } , //<S2SV> { 0x157 , "exif:ClipPath" } , //<S2SV> { 0x158 , "exif:XClipPathUnits" } , //<S2SV> { 0x159 , "exif:YClipPathUnits" } , //<S2SV> { 0x15a , "exif:Indexed" } , //<S2SV> { 0x15b , "exif:JPEGTables" } , //<S2SV> { 0x15f , "exif:OPIProxy" } , //<S2SV> { 0x200 , "exif:JPEGProc" } , //<S2SV> { 0x201 , "exif:JPEGInterchangeFormat" } , //<S2SV> { 0x202 , "exif:JPEGInterchangeFormatLength" } , //<S2SV> { 0x203 , "exif:JPEGRestartInterval" } , //<S2SV> { 0x205 , "exif:JPEGLosslessPredictors" } , //<S2SV> { 0x206 , "exif:JPEGPointTransforms" } , //<S2SV> { 0x207 , "exif:JPEGQTables" } , //<S2SV> { 0x208 , "exif:JPEGDCTables" } , //<S2SV> { 0x209 , "exif:JPEGACTables" } , //<S2SV> { 0x211 , "exif:YCbCrCoefficients" } , //<S2SV> { 0x212 , "exif:YCbCrSubSampling" } , //<S2SV> { 0x213 , "exif:YCbCrPositioning" } , //<S2SV> { 0x214 , "exif:ReferenceBlackWhite" } , //<S2SV> { 0x2bc , "exif:ExtensibleMetadataPlatform" } , //<S2SV> { 0x301 , "exif:Gamma" } , //<S2SV> { 0x302 , "exif:ICCProfileDescriptor" } , //<S2SV> { 0x303 , "exif:SRGBRenderingIntent" } , //<S2SV> { 0x320 , "exif:ImageTitle" } , //<S2SV> { 0x5001 , "exif:ResolutionXUnit" } , //<S2SV> { 0x5002 , "exif:ResolutionYUnit" } , //<S2SV> { 0x5003 , "exif:ResolutionXLengthUnit" } , //<S2SV> { 0x5004 , "exif:ResolutionYLengthUnit" } , //<S2SV> { 0x5005 , "exif:PrintFlags" } , //<S2SV> { 0x5006 , "exif:PrintFlagsVersion" } , //<S2SV> { 0x5007 , "exif:PrintFlagsCrop" } , //<S2SV> { 0x5008 , "exif:PrintFlagsBleedWidth" } , //<S2SV> { 0x5009 , "exif:PrintFlagsBleedWidthScale" } , //<S2SV> { 0x500A , "exif:HalftoneLPI" } , //<S2SV> { 0x500B , "exif:HalftoneLPIUnit" } , //<S2SV> { 0x500C , "exif:HalftoneDegree" } , //<S2SV> { 0x500D , "exif:HalftoneShape" } , //<S2SV> { 0x500E , "exif:HalftoneMisc" } , //<S2SV> { 0x500F , "exif:HalftoneScreen" } , //<S2SV> { 0x5010 , "exif:JPEGQuality" } , //<S2SV> { 0x5011 , "exif:GridSize" } , //<S2SV> { 0x5012 , "exif:ThumbnailFormat" } , //<S2SV> { 0x5013 , "exif:ThumbnailWidth" } , //<S2SV> { 0x5014 , "exif:ThumbnailHeight" } , //<S2SV> { 0x5015 , "exif:ThumbnailColorDepth" } , //<S2SV> { 0x5016 , "exif:ThumbnailPlanes" } , //<S2SV> { 0x5017 , "exif:ThumbnailRawBytes" } , //<S2SV> { 0x5018 , "exif:ThumbnailSize" } , //<S2SV> { 0x5019 , "exif:ThumbnailCompressedSize" } , //<S2SV> { 0x501a , "exif:ColorTransferFunction" } , //<S2SV> { 0x501b , "exif:ThumbnailData" } , //<S2SV> { 0x5020 , "exif:ThumbnailImageWidth" } , //<S2SV> { 0x5021 , "exif:ThumbnailImageHeight" } , //<S2SV> { 0x5022 , "exif:ThumbnailBitsPerSample" } , //<S2SV> { 0x5023 , "exif:ThumbnailCompression" } , //<S2SV> { 0x5024 , "exif:ThumbnailPhotometricInterp" } , //<S2SV> { 0x5025 , "exif:ThumbnailImageDescription" } , //<S2SV> { 0x5026 , "exif:ThumbnailEquipMake" } , //<S2SV> { 0x5027 , "exif:ThumbnailEquipModel" } , //<S2SV> { 0x5028 , "exif:ThumbnailStripOffsets" } , //<S2SV> { 0x5029 , "exif:ThumbnailOrientation" } , //<S2SV> { 0x502a , "exif:ThumbnailSamplesPerPixel" } , //<S2SV> { 0x502b , "exif:ThumbnailRowsPerStrip" } , //<S2SV> { 0x502c , "exif:ThumbnailStripBytesCount" } , //<S2SV> { 0x502d , "exif:ThumbnailResolutionX" } , //<S2SV> { 0x502e , "exif:ThumbnailResolutionY" } , //<S2SV> { 0x502f , "exif:ThumbnailPlanarConfig" } , //<S2SV> { 0x5030 , "exif:ThumbnailResolutionUnit" } , //<S2SV> { 0x5031 , "exif:ThumbnailTransferFunction" } , //<S2SV> { 0x5032 , "exif:ThumbnailSoftwareUsed" } , //<S2SV> { 0x5033 , "exif:ThumbnailDateTime" } , //<S2SV> { 0x5034 , "exif:ThumbnailArtist" } , //<S2SV> { 0x5035 , "exif:ThumbnailWhitePoint" } , //<S2SV> { 0x5036 , "exif:ThumbnailPrimaryChromaticities" } , //<S2SV> { 0x5037 , "exif:ThumbnailYCbCrCoefficients" } , //<S2SV> { 0x5038 , "exif:ThumbnailYCbCrSubsampling" } , //<S2SV> { 0x5039 , "exif:ThumbnailYCbCrPositioning" } , //<S2SV> { 0x503A , "exif:ThumbnailRefBlackWhite" } , //<S2SV> { 0x503B , "exif:ThumbnailCopyRight" } , //<S2SV> { 0x5090 , "exif:LuminanceTable" } , //<S2SV> { 0x5091 , "exif:ChrominanceTable" } , //<S2SV> { 0x5100 , "exif:FrameDelay" } , //<S2SV> { 0x5101 , "exif:LoopCount" } , //<S2SV> { 0x5110 , "exif:PixelUnit" } , //<S2SV> { 0x5111 , "exif:PixelPerUnitX" } , //<S2SV> { 0x5112 , "exif:PixelPerUnitY" } , //<S2SV> { 0x5113 , "exif:PaletteHistogram" } , //<S2SV> { 0x1000 , "exif:RelatedImageFileFormat" } , //<S2SV> { 0x1001 , "exif:RelatedImageLength" } , //<S2SV> { 0x1002 , "exif:RelatedImageWidth" } , //<S2SV> { 0x800d , "exif:ImageID" } , //<S2SV> { 0x80e3 , "exif:Matteing" } , //<S2SV> { 0x80e4 , "exif:DataType" } , //<S2SV> { 0x80e5 , "exif:ImageDepth" } , //<S2SV> { 0x80e6 , "exif:TileDepth" } , //<S2SV> { 0x828d , "exif:CFARepeatPatternDim" } , //<S2SV> { 0x828e , "exif:CFAPattern2" } , //<S2SV> { 0x828f , "exif:BatteryLevel" } , //<S2SV> { 0x8298 , "exif:Copyright" } , //<S2SV> { 0x829a , "exif:ExposureTime" } , //<S2SV> { 0x829d , "exif:FNumber" } , //<S2SV> { 0x83bb , "exif:IPTC/NAA" } , //<S2SV> { 0x84e3 , "exif:IT8RasterPadding" } , //<S2SV> { 0x84e5 , "exif:IT8ColorTable" } , //<S2SV> { 0x8649 , "exif:ImageResourceInformation" } , //<S2SV> { 0x8769 , "exif:ExifOffset" } , //<S2SV> { 0x8773 , "exif:InterColorProfile" } , //<S2SV> { 0x8822 , "exif:ExposureProgram" } , //<S2SV> { 0x8824 , "exif:SpectralSensitivity" } , //<S2SV> { 0x8825 , "exif:GPSInfo" } , //<S2SV> { 0x8827 , "exif:ISOSpeedRatings" } , //<S2SV> { 0x8828 , "exif:OECF" } , //<S2SV> { 0x8829 , "exif:Interlace" } , //<S2SV> { 0x882a , "exif:TimeZoneOffset" } , //<S2SV> { 0x882b , "exif:SelfTimerMode" } , //<S2SV> { 0x9000 , "exif:ExifVersion" } , //<S2SV> { 0x9003 , "exif:DateTimeOriginal" } , //<S2SV> { 0x9004 , "exif:DateTimeDigitized" } , //<S2SV> { 0x9101 , "exif:ComponentsConfiguration" } , //<S2SV> { 0x9102 , "exif:CompressedBitsPerPixel" } , //<S2SV> { 0x9201 , "exif:ShutterSpeedValue" } , //<S2SV> { 0x9202 , "exif:ApertureValue" } , //<S2SV> { 0x9203 , "exif:BrightnessValue" } , //<S2SV> { 0x9204 , "exif:ExposureBiasValue" } , //<S2SV> { 0x9205 , "exif:MaxApertureValue" } , //<S2SV> { 0x9206 , "exif:SubjectDistance" } , //<S2SV> { 0x9207 , "exif:MeteringMode" } , //<S2SV> { 0x9208 , "exif:LightSource" } , //<S2SV> { 0x9209 , "exif:Flash" } , //<S2SV> { 0x920a , "exif:FocalLength" } , //<S2SV> { 0x920b , "exif:FlashEnergy" } , //<S2SV> { 0x920c , "exif:SpatialFrequencyResponse" } , //<S2SV> { 0x920d , "exif:Noise" } , //<S2SV> { 0x9211 , "exif:ImageNumber" } , //<S2SV> { 0x9212 , "exif:SecurityClassification" } , //<S2SV> { 0x9213 , "exif:ImageHistory" } , //<S2SV> { 0x9214 , "exif:SubjectArea" } , //<S2SV> { 0x9215 , "exif:ExposureIndex" } , //<S2SV> { 0x9216 , "exif:TIFF-EPStandardID" } , //<S2SV> { 0x927c , "exif:MakerNote" } , //<S2SV> { 0x9C9b , "exif:WinXP-Title" } , //<S2SV> { 0x9C9c , "exif:WinXP-Comments" } , //<S2SV> { 0x9C9d , "exif:WinXP-Author" } , //<S2SV> { 0x9C9e , "exif:WinXP-Keywords" } , //<S2SV> { 0x9C9f , "exif:WinXP-Subject" } , //<S2SV> { 0x9286 , "exif:UserComment" } , //<S2SV> { 0x9290 , "exif:SubSecTime" } , //<S2SV> { 0x9291 , "exif:SubSecTimeOriginal" } , //<S2SV> { 0x9292 , "exif:SubSecTimeDigitized" } , //<S2SV> { 0xa000 , "exif:FlashPixVersion" } , //<S2SV> { 0xa001 , "exif:ColorSpace" } , //<S2SV> { 0xa002 , "exif:ExifImageWidth" } , //<S2SV> { 0xa003 , "exif:ExifImageLength" } , //<S2SV> { 0xa004 , "exif:RelatedSoundFile" } , //<S2SV> { 0xa005 , "exif:InteroperabilityOffset" } , //<S2SV> { 0xa20b , "exif:FlashEnergy" } , //<S2SV> { 0xa20c , "exif:SpatialFrequencyResponse" } , //<S2SV> { 0xa20d , "exif:Noise" } , //<S2SV> { 0xa20e , "exif:FocalPlaneXResolution" } , //<S2SV> { 0xa20f , "exif:FocalPlaneYResolution" } , //<S2SV> { 0xa210 , "exif:FocalPlaneResolutionUnit" } , //<S2SV> { 0xa214 , "exif:SubjectLocation" } , //<S2SV> { 0xa215 , "exif:ExposureIndex" } , //<S2SV> { 0xa216 , "exif:TIFF/EPStandardID" } , //<S2SV> { 0xa217 , "exif:SensingMethod" } , //<S2SV> { 0xa300 , "exif:FileSource" } , //<S2SV> { 0xa301 , "exif:SceneType" } , //<S2SV> { 0xa302 , "exif:CFAPattern" } , //<S2SV> { 0xa401 , "exif:CustomRendered" } , //<S2SV> { 0xa402 , "exif:ExposureMode" } , //<S2SV> { 0xa403 , "exif:WhiteBalance" } , //<S2SV> { 0xa404 , "exif:DigitalZoomRatio" } , //<S2SV> { 0xa405 , "exif:FocalLengthIn35mmFilm" } , //<S2SV> { 0xa406 , "exif:SceneCaptureType" } , //<S2SV> { 0xa407 , "exif:GainControl" } , //<S2SV> { 0xa408 , "exif:Contrast" } , //<S2SV> { 0xa409 , "exif:Saturation" } , //<S2SV> { 0xa40a , "exif:Sharpness" } , //<S2SV> { 0xa40b , "exif:DeviceSettingDescription" } , //<S2SV> { 0xa40c , "exif:SubjectDistanceRange" } , //<S2SV> { 0xa420 , "exif:ImageUniqueID" } , //<S2SV> { 0xc4a5 , "exif:PrintImageMatching" } , //<S2SV> { 0xa500 , "exif:Gamma" } , //<S2SV> { 0xc640 , "exif:CR2Slice" } , //<S2SV> { 0x10000 , "exif:GPSVersionID" } , //<S2SV> { 0x10001 , "exif:GPSLatitudeRef" } , //<S2SV> { 0x10002 , "exif:GPSLatitude" } , //<S2SV> { 0x10003 , "exif:GPSLongitudeRef" } , //<S2SV> { 0x10004 , "exif:GPSLongitude" } , //<S2SV> { 0x10005 , "exif:GPSAltitudeRef" } , //<S2SV> { 0x10006 , "exif:GPSAltitude" } , //<S2SV> { 0x10007 , "exif:GPSTimeStamp" } , //<S2SV> { 0x10008 , "exif:GPSSatellites" } , //<S2SV> { 0x10009 , "exif:GPSStatus" } , //<S2SV> { 0x1000a , "exif:GPSMeasureMode" } , //<S2SV> { 0x1000b , "exif:GPSDop" } , //<S2SV> { 0x1000c , "exif:GPSSpeedRef" } , //<S2SV> { 0x1000d , "exif:GPSSpeed" } , //<S2SV> { 0x1000e , "exif:GPSTrackRef" } , //<S2SV> { 0x1000f , "exif:GPSTrack" } , //<S2SV> { 0x10010 , "exif:GPSImgDirectionRef" } , //<S2SV> { 0x10011 , "exif:GPSImgDirection" } , //<S2SV> { 0x10012 , "exif:GPSMapDatum" } , //<S2SV> { 0x10013 , "exif:GPSDestLatitudeRef" } , //<S2SV> { 0x10014 , "exif:GPSDestLatitude" } , //<S2SV> { 0x10015 , "exif:GPSDestLongitudeRef" } , //<S2SV> { 0x10016 , "exif:GPSDestLongitude" } , //<S2SV> { 0x10017 , "exif:GPSDestBearingRef" } , //<S2SV> { 0x10018 , "exif:GPSDestBearing" } , //<S2SV> { 0x10019 , "exif:GPSDestDistanceRef" } , //<S2SV> { 0x1001a , "exif:GPSDestDistance" } , //<S2SV> { 0x1001b , "exif:GPSProcessingMethod" } , //<S2SV> { 0x1001c , "exif:GPSAreaInformation" } , //<S2SV> { 0x1001d , "exif:GPSDateStamp" } , //<S2SV> { 0x1001e , "exif:GPSDifferential" } , //<S2SV> { 0x00000 , ( const char * ) NULL } //<S2SV> } ; //<S2SV> const StringInfo //<S2SV> * profile ; //<S2SV> const unsigned char //<S2SV> * directory , //<S2SV> * exif ; //<S2SV> DirectoryInfo //<S2SV> directory_stack [ MaxDirectoryStack ] ; //<S2SV> EndianType //<S2SV> endian ; //<S2SV> MagickBooleanType //<S2SV> status ; //<S2SV> register ssize_t //<S2SV> i ; //<S2SV> size_t //<S2SV> entry , //<S2SV> length , //<S2SV> number_entries , //<S2SV> tag , //<S2SV> tag_value ; //<S2SV> SplayTreeInfo //<S2SV> * exif_resources ; //<S2SV> ssize_t //<S2SV> all , //<S2SV> id , //<S2SV> level , //<S2SV> offset , //<S2SV> tag_offset ; //<S2SV> static int //<S2SV> tag_bytes [ ] = { 0 , 1 , 1 , 2 , 4 , 8 , 1 , 1 , 2 , 4 , 8 , 4 , 8 } ; //<S2SV> profile = GetImageProfile ( image , "exif" ) ; //<S2SV> if ( profile == ( const StringInfo * ) NULL ) //<S2SV> return ( MagickFalse ) ; //<S2SV> if ( ( property == ( const char * ) NULL ) || ( * property == '\\0' ) ) //<S2SV> return ( MagickFalse ) ; //<S2SV> while ( isspace ( ( int ) ( ( unsigned char ) * property ) ) != 0 ) //<S2SV> property ++ ; //<S2SV> if ( strlen ( property ) <= 5 ) //<S2SV> return ( MagickFalse ) ; //<S2SV> all = 0 ; //<S2SV> tag = ( ~ 0UL ) ; //<S2SV> switch ( * ( property + 5 ) ) //<S2SV> { //<S2SV> case '*' : //<S2SV> { //<S2SV> tag = 0 ; //<S2SV> all = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> case '!' : //<S2SV> { //<S2SV> tag = 0 ; //<S2SV> all = 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> case '#' : //<S2SV> case '@' : //<S2SV> { //<S2SV> int //<S2SV> c ; //<S2SV> size_t //<S2SV> n ; //<S2SV> tag = ( * ( property + 5 ) == '@' ) ? 1UL : 0UL ; //<S2SV> property += 6 ; //<S2SV> n = strlen ( property ) ; //<S2SV> if ( n != 4 ) //<S2SV> return ( MagickFalse ) ; //<S2SV> n /= 4 ; //<S2SV> do //<S2SV> { //<S2SV> for ( i = ( ssize_t ) n - 1L ; i >= 0 ; i -- ) //<S2SV> { //<S2SV> c = ( * property ++ ) ; //<S2SV> tag <<= 4 ; //<S2SV> if ( ( c >= '0' ) && ( c <= '9' ) ) //<S2SV> tag |= ( c - '0' ) ; //<S2SV> else //<S2SV> if ( ( c >= 'A' ) && ( c <= 'F' ) ) //<S2SV> tag |= ( c - ( 'A' - 10 ) ) ; //<S2SV> else //<S2SV> if ( ( c >= 'a' ) && ( c <= 'f' ) ) //<S2SV> tag |= ( c - ( 'a' - 10 ) ) ; //<S2SV> else //<S2SV> return ( MagickFalse ) ; //<S2SV> } //<S2SV> } while ( * property != '\\0' ) ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> { //<S2SV> for ( i = 0 ; ; i ++ ) //<S2SV> { //<S2SV> if ( EXIFTag [ i ] . tag == 0 ) //<S2SV> break ; //<S2SV> if ( LocaleCompare ( EXIFTag [ i ] . description , property ) == 0 ) //<S2SV> { //<S2SV> tag = ( size_t ) EXIFTag [ i ] . tag ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( tag == ( ~ 0UL ) ) //<S2SV> return ( MagickFalse ) ; //<S2SV> length = GetStringInfoLength ( profile ) ; //<S2SV> exif = GetStringInfoDatum ( profile ) ; //<S2SV> while ( length != 0 ) //<S2SV> { //<S2SV> if ( ReadPropertyByte ( & exif , & length ) != 0x45 ) //<S2SV> continue ; //<S2SV> if ( ReadPropertyByte ( & exif , & length ) != 0x78 ) //<S2SV> continue ; //<S2SV> if ( ReadPropertyByte ( & exif , & length ) != 0x69 ) //<S2SV> continue ; //<S2SV> if ( ReadPropertyByte ( & exif , & length ) != 0x66 ) //<S2SV> continue ; //<S2SV> if ( ReadPropertyByte ( & exif , & length ) != 0x00 ) //<S2SV> continue ; //<S2SV> if ( ReadPropertyByte ( & exif , & length ) != 0x00 ) //<S2SV> continue ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( length < 16 ) //<S2SV> return ( MagickFalse ) ; //<S2SV> id = ( ssize_t ) ReadPropertySignedShort ( LSBEndian , exif ) ; //<S2SV> endian = LSBEndian ; //<S2SV> if ( id == 0x4949 ) //<S2SV> endian = LSBEndian ; //<S2SV> else //<S2SV> if ( id == 0x4D4D ) //<S2SV> endian = MSBEndian ; //<S2SV> else //<S2SV> return ( MagickFalse ) ; //<S2SV> if ( ReadPropertyUnsignedShort ( endian , exif + 2 ) != 0x002a ) //<S2SV> return ( MagickFalse ) ; //<S2SV> offset = ( ssize_t ) ReadPropertySignedLong ( endian , exif + 4 ) ; //<S2SV> if ( ( offset < 0 ) || ( size_t ) offset >= length ) //<S2SV> return ( MagickFalse ) ; //<S2SV> status = MagickFalse ; //<S2SV> directory = exif + offset ; //<S2SV> level = 0 ; //<S2SV> entry = 0 ; //<S2SV> tag_offset = 0 ; //<S2SV> exif_resources = NewSplayTree ( ( int ( * ) ( const void * , const void * ) ) NULL , //<S2SV> ( void * ( * ) ( void * ) ) NULL , ( void * ( * ) ( void * ) ) NULL ) ; //<S2SV> do //<S2SV> { //<S2SV> if ( level > 0 ) //<S2SV> { //<S2SV> level -- ; //<S2SV> directory = directory_stack [ level ] . directory ; //<S2SV> entry = directory_stack [ level ] . entry ; //<S2SV> tag_offset = directory_stack [ level ] . offset ; //<S2SV> } //<S2SV> if ( ( directory < exif ) || ( directory > ( exif + length - 2 ) ) ) //<S2SV> break ; //<S2SV> number_entries = ( size_t ) ReadPropertyUnsignedShort ( endian , directory ) ; //<S2SV> for ( ; entry < number_entries ; entry ++ ) //<S2SV> { //<S2SV> register unsigned char //<S2SV> * p , //<S2SV> * q ; //<S2SV> size_t //<S2SV> format ; //<S2SV> ssize_t //<S2SV> number_bytes , //<S2SV> components ; //<S2SV> q = ( unsigned char * ) ( directory + ( 12 * entry ) + 2 ) ; //<S2SV> if ( q > ( exif + length - 12 ) ) //<S2SV> break ; //<S2SV> if ( GetValueFromSplayTree ( exif_resources , q ) == q ) //<S2SV> break ; //<S2SV> ( void ) AddValueToSplayTree ( exif_resources , q , q ) ; //<S2SV> tag_value = ( size_t ) ReadPropertyUnsignedShort ( endian , q ) + tag_offset ; //<S2SV> format = ( size_t ) ReadPropertyUnsignedShort ( endian , q + 2 ) ; //<S2SV> if ( format >= ( sizeof ( tag_bytes ) / sizeof ( * tag_bytes ) ) ) //<S2SV> break ; //<S2SV> components = ( ssize_t ) ReadPropertySignedLong ( endian , q + 4 ) ; //<S2SV> if ( components < 0 ) //<S2SV> break ; //<S2SV> number_bytes = ( size_t ) components * tag_bytes [ format ] ; //<S2SV> if ( number_bytes < components ) //<S2SV> break ; //<S2SV> if ( number_bytes <= 4 ) //<S2SV> p = q + 8 ; //<S2SV> else //<S2SV> { //<S2SV> ssize_t //<S2SV> offset ; //<S2SV> offset = ( ssize_t ) ReadPropertySignedLong ( endian , q + 8 ) ; //<S2SV> if ( ( offset < 0 ) || ( size_t ) offset >= length ) //<S2SV> continue ; //<S2SV> if ( ( ssize_t ) ( offset + number_bytes ) < offset ) //<S2SV> continue ; //<S2SV> if ( ( size_t ) ( offset + number_bytes ) > length ) //<S2SV> continue ; //<S2SV> p = ( unsigned char * ) ( exif + offset ) ; //<S2SV> } //<S2SV> if ( ( all != 0 ) || ( tag == ( size_t ) tag_value ) ) //<S2SV> { //<S2SV> char //<S2SV> buffer [ MagickPathExtent ] , //<S2SV> * value ; //<S2SV> value = ( char * ) NULL ; //<S2SV> * buffer = '\\0' ; //<S2SV> switch ( format ) //<S2SV> { //<S2SV> case EXIF_FMT_BYTE : //<S2SV> case EXIF_FMT_UNDEFINED : //<S2SV> { //<S2SV> EXIFMultipleValues ( 1 , "%.20g" , ( double ) ( * ( unsigned char * ) p1 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_SBYTE : //<S2SV> { //<S2SV> EXIFMultipleValues ( 1 , "%.20g" , ( double ) ( * ( signed char * ) p1 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_SSHORT : //<S2SV> { //<S2SV> EXIFMultipleValues ( 2 , "%hd" , ReadPropertySignedShort ( endian , p1 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_USHORT : //<S2SV> { //<S2SV> EXIFMultipleValues ( 2 , "%hu" , ReadPropertyUnsignedShort ( endian , p1 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_ULONG : //<S2SV> { //<S2SV> EXIFMultipleValues ( 4 , "%.20g" , ( double ) //<S2SV> ReadPropertyUnsignedLong ( endian , p1 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_SLONG : //<S2SV> { //<S2SV> EXIFMultipleValues ( 4 , "%.20g" , ( double ) //<S2SV> ReadPropertySignedLong ( endian , p1 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_URATIONAL : //<S2SV> { //<S2SV> EXIFMultipleFractions ( 8 , "%.20g/%.20g" , ( double ) //<S2SV> ReadPropertyUnsignedLong ( endian , p1 ) , ( double ) //<S2SV> ReadPropertyUnsignedLong ( endian , p1 + 4 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_SRATIONAL : //<S2SV> { //<S2SV> EXIFMultipleFractions ( 8 , "%.20g/%.20g" , ( double ) //<S2SV> ReadPropertySignedLong ( endian , p1 ) , ( double ) //<S2SV> ReadPropertySignedLong ( endian , p1 + 4 ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_SINGLE : //<S2SV> { //<S2SV> EXIFMultipleValues ( 4 , "%f" , ( double ) * ( float * ) p1 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case EXIF_FMT_DOUBLE : //<S2SV> { //<S2SV> EXIFMultipleValues ( 8 , "%f" , * ( double * ) p1 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> case EXIF_FMT_STRING : //<S2SV> { //<S2SV> value = ( char * ) NULL ; //<S2SV> if ( ~ ( ( size_t ) number_bytes ) >= 1 ) //<S2SV> value = ( char * ) AcquireQuantumMemory ( ( size_t ) number_bytes + 1UL , //<S2SV> sizeof ( * value ) ) ; //<S2SV> if ( value != ( char * ) NULL ) //<S2SV> { //<S2SV> register ssize_t //<S2SV> i ; //<S2SV> for ( i = 0 ; i < ( ssize_t ) number_bytes ; i ++ ) //<S2SV> { //<S2SV> value [ i ] = '.' ; //<S2SV> if ( ( isprint ( ( int ) p [ i ] ) != 0 ) || ( p [ i ] == '\\0' ) ) //<S2SV> value [ i ] = ( char ) p [ i ] ; //<S2SV> } //<S2SV> value [ i ] = '\\0' ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( value != ( char * ) NULL ) //<S2SV> { //<S2SV> char //<S2SV> * key ; //<S2SV> register const char //<S2SV> * p ; //<S2SV> key = AcquireString ( property ) ; //<S2SV> switch ( all ) //<S2SV> { //<S2SV> case 1 : //<S2SV> { //<S2SV> const char //<S2SV> * description ; //<S2SV> register ssize_t //<S2SV> i ; //<S2SV> description = "unknown" ; //<S2SV> for ( i = 0 ; ; i ++ ) //<S2SV> { //<S2SV> if ( EXIFTag [ i ] . tag == 0 ) //<S2SV> break ; //<S2SV> if ( EXIFTag [ i ] . tag == tag_value ) //<S2SV> { //<S2SV> description = EXIFTag [ i ] . description ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> ( void ) FormatLocaleString ( key , MagickPathExtent , "%s" , //<S2SV> description ) ; //<S2SV> if ( level == 2 ) //<S2SV> ( void ) SubstituteString ( & key , "exif:" , "exif:thumbnail:" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case 2 : //<S2SV> { //<S2SV> if ( tag_value < 0x10000 ) //<S2SV> ( void ) FormatLocaleString ( key , MagickPathExtent , "#%04lx" , //<S2SV> ( unsigned long ) tag_value ) ; //<S2SV> else //<S2SV> if ( tag_value < 0x20000 ) //<S2SV> ( void ) FormatLocaleString ( key , MagickPathExtent , "@%04lx" , //<S2SV> ( unsigned long ) ( tag_value & 0xffff ) ) ; //<S2SV> else //<S2SV> ( void ) FormatLocaleString ( key , MagickPathExtent , "unknown" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> { //<S2SV> if ( level == 2 ) //<S2SV> ( void ) SubstituteString ( & key , "exif:" , "exif:thumbnail:" ) ; //<S2SV> } //<S2SV> } //<S2SV> p = ( const char * ) NULL ; //<S2SV> if ( image -> properties != ( void * ) NULL ) //<S2SV> p = ( const char * ) GetValueFromSplayTree ( ( SplayTreeInfo * ) //<S2SV> image -> properties , key ) ; //<S2SV> if ( p == ( const char * ) NULL ) //<S2SV> ( void ) SetImageProperty ( ( Image * ) image , key , value , exception ) ; //<S2SV> value = DestroyString ( value ) ; //<S2SV> key = DestroyString ( key ) ; //<S2SV> status = MagickTrue ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( tag_value == TAG_EXIF_OFFSET ) || //<S2SV> ( tag_value == TAG_INTEROP_OFFSET ) || ( tag_value == TAG_GPS_OFFSET ) ) //<S2SV> { //<S2SV> ssize_t //<S2SV> offset ; //<S2SV> offset = ( ssize_t ) ReadPropertySignedLong ( endian , p ) ; //<S2SV> if ( ( ( size_t ) offset < length ) && ( level < ( MaxDirectoryStack - 2 ) ) ) //<S2SV> { //<S2SV> ssize_t //<S2SV> tag_offset1 ; //<S2SV> tag_offset1 = ( ssize_t ) ( ( tag_value == TAG_GPS_OFFSET ) ? 0x10000 : //<S2SV> 0 ) ; //<S2SV> directory_stack [ level ] . directory = directory ; //<S2SV> entry ++ ; //<S2SV> directory_stack [ level ] . entry = entry ; //<S2SV> directory_stack [ level ] . offset = tag_offset ; //<S2SV> level ++ ; //<S2SV> directory_stack [ level ] . directory = exif + offset ; //<S2SV> directory_stack [ level ] . offset = tag_offset1 ; //<S2SV> directory_stack [ level ] . entry = 0 ; //<S2SV> level ++ ; //<S2SV> if ( ( directory + 2 + ( 12 * number_entries ) ) > ( exif + length ) ) //<S2SV> break ; //<S2SV> offset = ( ssize_t ) ReadPropertySignedLong ( endian , directory + 2 + ( 12 * //<S2SV> number_entries ) ) ; //<S2SV> if ( ( offset != 0 ) && ( ( size_t ) offset < length ) && //<S2SV> ( level < ( MaxDirectoryStack - 2 ) ) ) //<S2SV> { //<S2SV> directory_stack [ level ] . directory = exif + offset ; //<S2SV> directory_stack [ level ] . entry = 0 ; //<S2SV> directory_stack [ level ] . offset = tag_offset1 ; //<S2SV> level ++ ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } while ( level > 0 ) ; //<S2SV> exif_resources = DestroySplayTree ( exif_resources ) ; //<S2SV> return ( status ) ; //<S2SV> } //<S2SV> 