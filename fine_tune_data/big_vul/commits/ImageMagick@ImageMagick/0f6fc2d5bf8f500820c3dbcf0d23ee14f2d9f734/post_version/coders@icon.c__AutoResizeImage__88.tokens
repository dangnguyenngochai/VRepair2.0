Image * AutoResizeImage ( const Image * image , const char * option , //<S2SV> MagickOffsetType * count , ExceptionInfo * exception ) //<S2SV> { //<S2SV> # define MAX_SIZES 16 //<S2SV> char //<S2SV> * q ; //<S2SV> const char //<S2SV> * p ; //<S2SV> Image //<S2SV> * resized , //<S2SV> * images ; //<S2SV> register ssize_t //<S2SV> i ; //<S2SV> size_t //<S2SV> sizes [ MAX_SIZES ] = { 256 , 192 , 128 , 96 , 64 , 48 , 40 , 32 , 24 , 16 } ; //<S2SV> images = NULL ; //<S2SV> * count = 0 ; //<S2SV> i = 0 ; //<S2SV> p = option ; //<S2SV> while ( * p != '\\0' && i < MAX_SIZES ) //<S2SV> { //<S2SV> size_t //<S2SV> size ; //<S2SV> while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) ) != 0 ) ) //<S2SV> p ++ ; //<S2SV> size = ( size_t ) strtol ( p , & q , 10 ) ; //<S2SV> if ( ( p == q ) || ( size < 16 ) || ( size > 256 ) ) //<S2SV> return ( ( Image * ) NULL ) ; //<S2SV> p = q ; //<S2SV> sizes [ i ++ ] = size ; //<S2SV> while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) ) != 0 ) || ( * p == ',' ) ) //<S2SV> p ++ ; //<S2SV> } //<S2SV> if ( i == 0 ) //<S2SV> i = 10 ; //<S2SV> * count = i ; //<S2SV> for ( i = 0 ; i < * count ; i ++ ) //<S2SV> { //<S2SV> resized = ResizeImage ( image , sizes [ i ] , sizes [ i ] , image -> filter , exception ) ; //<S2SV> if ( resized == ( Image * ) NULL ) //<S2SV> return ( DestroyImageList ( images ) ) ; //<S2SV> if ( images == ( Image * ) NULL ) //<S2SV> images = resized ; //<S2SV> else //<S2SV> AppendImageToList ( & images , resized ) ; //<S2SV> } //<S2SV> return ( images ) ; //<S2SV> } //<S2SV> 