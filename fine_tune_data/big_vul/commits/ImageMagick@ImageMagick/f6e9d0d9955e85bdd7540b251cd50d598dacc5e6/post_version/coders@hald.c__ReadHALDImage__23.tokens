static Image * ReadHALDImage ( const ImageInfo * image_info , //<S2SV> ExceptionInfo * exception ) //<S2SV> { //<S2SV> Image //<S2SV> * image ; //<S2SV> MagickBooleanType //<S2SV> status ; //<S2SV> size_t //<S2SV> cube_size , //<S2SV> level ; //<S2SV> ssize_t //<S2SV> y ; //<S2SV> assert ( image_info != ( const ImageInfo * ) NULL ) ; //<S2SV> assert ( image_info -> signature == MagickSignature ) ; //<S2SV> if ( image_info -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( TraceEvent , GetMagickModule ( ) , "%s" , //<S2SV> image_info -> filename ) ; //<S2SV> assert ( exception != ( ExceptionInfo * ) NULL ) ; //<S2SV> assert ( exception -> signature == MagickSignature ) ; //<S2SV> image = AcquireImage ( image_info ) ; //<S2SV> level = 0 ; //<S2SV> if ( * image_info -> filename != '\\0' ) //<S2SV> level = StringToUnsignedLong ( image_info -> filename ) ; //<S2SV> if ( level < 2 ) //<S2SV> level = 8 ; //<S2SV> status = MagickTrue ; //<S2SV> cube_size = level * level ; //<S2SV> image -> columns = ( size_t ) ( level * cube_size ) ; //<S2SV> image -> rows = ( size_t ) ( level * cube_size ) ; //<S2SV> status = SetImageExtent ( image , image -> columns , image -> rows ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> InheritException ( exception , & image -> exception ) ; //<S2SV> return ( DestroyImageList ( image ) ) ; //<S2SV> } //<S2SV> for ( y = 0 ; y < ( ssize_t ) image -> rows ; y += ( ssize_t ) level ) //<S2SV> { //<S2SV> ssize_t //<S2SV> blue , //<S2SV> green , //<S2SV> red ; //<S2SV> register PixelPacket //<S2SV> * restrict q ; //<S2SV> if ( status == MagickFalse ) //<S2SV> continue ; //<S2SV> q = QueueAuthenticPixels ( image , 0 , y , image -> columns , ( size_t ) level , exception ) ; //<S2SV> if ( q == ( PixelPacket * ) NULL ) //<S2SV> { //<S2SV> status = MagickFalse ; //<S2SV> continue ; //<S2SV> } //<S2SV> blue = y / ( ssize_t ) level ; //<S2SV> for ( green = 0 ; green < ( ssize_t ) cube_size ; green ++ ) //<S2SV> { //<S2SV> for ( red = 0 ; red < ( ssize_t ) cube_size ; red ++ ) //<S2SV> { //<S2SV> SetPixelRed ( q , ClampToQuantum ( ( MagickRealType ) //<S2SV> ( QuantumRange * red / ( cube_size - 1.0 ) ) ) ) ; //<S2SV> SetPixelGreen ( q , ClampToQuantum ( ( MagickRealType ) //<S2SV> ( QuantumRange * green / ( cube_size - 1.0 ) ) ) ) ; //<S2SV> SetPixelBlue ( q , ClampToQuantum ( ( MagickRealType ) //<S2SV> ( QuantumRange * blue / ( cube_size - 1.0 ) ) ) ) ; //<S2SV> SetPixelOpacity ( q , OpaqueOpacity ) ; //<S2SV> q ++ ; //<S2SV> } //<S2SV> } //<S2SV> if ( SyncAuthenticPixels ( image , exception ) == MagickFalse ) //<S2SV> status = MagickFalse ; //<S2SV> } //<S2SV> return ( GetFirstImageInList ( image ) ) ; //<S2SV> } //<S2SV> 