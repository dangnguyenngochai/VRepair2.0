static Image * ReadFAXImage ( const ImageInfo * image_info , ExceptionInfo * exception ) //<S2SV> { //<S2SV> Image //<S2SV> * image ; //<S2SV> MagickBooleanType //<S2SV> status ; //<S2SV> assert ( image_info != ( const ImageInfo * ) NULL ) ; //<S2SV> assert ( image_info -> signature == MagickSignature ) ; //<S2SV> if ( image_info -> debug != MagickFalse ) //<S2SV> ( void ) LogMagickEvent ( TraceEvent , GetMagickModule ( ) , "%s" , //<S2SV> image_info -> filename ) ; //<S2SV> assert ( exception != ( ExceptionInfo * ) NULL ) ; //<S2SV> assert ( exception -> signature == MagickSignature ) ; //<S2SV> image = AcquireImage ( image_info ) ; //<S2SV> status = OpenBlob ( image_info , image , ReadBinaryBlobMode , exception ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> { //<S2SV> image = DestroyImageList ( image ) ; //<S2SV> return ( ( Image * ) NULL ) ; //<S2SV> } //<S2SV> image -> storage_class = PseudoClass ; //<S2SV> if ( image -> columns == 0 ) //<S2SV> image -> columns = 2592 ; //<S2SV> if ( image -> rows == 0 ) //<S2SV> image -> rows = 3508 ; //<S2SV> image -> depth = 8 ; //<S2SV> if ( AcquireImageColormap ( image , 2 ) == MagickFalse ) //<S2SV> ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; //<S2SV> image -> colormap [ 0 ] . red = QuantumRange ; //<S2SV> image -> colormap [ 0 ] . green = QuantumRange ; //<S2SV> image -> colormap [ 0 ] . blue = QuantumRange ; //<S2SV> image -> colormap [ 1 ] . red = ( Quantum ) 0 ; //<S2SV> image -> colormap [ 1 ] . green = ( Quantum ) 0 ; //<S2SV> image -> colormap [ 1 ] . blue = ( Quantum ) 0 ; //<S2SV> if ( image_info -> ping != MagickFalse ) //<S2SV> { //<S2SV> ( void ) CloseBlob ( image ) ; //<S2SV> return ( GetFirstImageInList ( image ) ) ; //<S2SV> } //<S2SV> status = HuffmanDecodeImage ( image ) ; //<S2SV> if ( status == MagickFalse ) //<S2SV> ThrowReaderException ( CorruptImageError , "UnableToReadImageData" ) ; //<S2SV> if ( EOFBlob ( image ) != MagickFalse ) //<S2SV> ThrowFileException ( exception , CorruptImageError , "UnexpectedEndOfFile" , //<S2SV> image -> filename ) ; //<S2SV> ( void ) CloseBlob ( image ) ; //<S2SV> return ( GetFirstImageInList ( image ) ) ; //<S2SV> } //<S2SV> 