int res_unpack ( vorbis_info_residue * info , //<S2SV> vorbis_info * vi , oggpack_buffer * opb ) { //<S2SV> int j , k ; //<S2SV> codec_setup_info * ci = ( codec_setup_info * ) vi -> codec_setup ; //<S2SV> memset ( info , 0 , sizeof ( * info ) ) ; //<S2SV> info -> type = oggpack_read ( opb , 16 ) ; //<S2SV> if ( info -> type > 2 || info -> type < 0 ) goto errout ; //<S2SV> info -> begin = oggpack_read ( opb , 24 ) ; //<S2SV> info -> end = oggpack_read ( opb , 24 ) ; //<S2SV> info -> grouping = oggpack_read ( opb , 24 ) + 1 ; //<S2SV> info -> partitions = ( char ) ( oggpack_read ( opb , 6 ) + 1 ) ; //<S2SV> info -> groupbook = ( unsigned char ) oggpack_read ( opb , 8 ) ; //<S2SV> if ( info -> groupbook >= ci -> books ) goto errout ; //<S2SV> info -> stagemasks = _ogg_malloc ( info -> partitions * sizeof ( * info -> stagemasks ) ) ; //<S2SV> info -> stagebooks = _ogg_malloc ( info -> partitions * 8 * sizeof ( * info -> stagebooks ) ) ; //<S2SV> for ( j = 0 ; j < info -> partitions ; j ++ ) { //<S2SV> int cascade = oggpack_read ( opb , 3 ) ; //<S2SV> if ( oggpack_read ( opb , 1 ) ) //<S2SV> cascade |= ( oggpack_read ( opb , 5 ) << 3 ) ; //<S2SV> info -> stagemasks [ j ] = cascade ; //<S2SV> } //<S2SV> for ( j = 0 ; j < info -> partitions ; j ++ ) { //<S2SV> for ( k = 0 ; k < 8 ; k ++ ) { //<S2SV> if ( ( info -> stagemasks [ j ] >> k ) & 1 ) { //<S2SV> unsigned char book = ( unsigned char ) oggpack_read ( opb , 8 ) ; //<S2SV> if ( book >= ci -> books ) goto errout ; //<S2SV> info -> stagebooks [ j * 8 + k ] = book ; //<S2SV> if ( k + 1 > info -> stages ) info -> stages = k + 1 ; //<S2SV> } else //<S2SV> info -> stagebooks [ j * 8 + k ] = 0xff ; //<S2SV> } //<S2SV> } //<S2SV> if ( oggpack_eop ( opb ) ) goto errout ; //<S2SV> return 0 ; //<S2SV> errout : //<S2SV> res_clear_info ( info ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 