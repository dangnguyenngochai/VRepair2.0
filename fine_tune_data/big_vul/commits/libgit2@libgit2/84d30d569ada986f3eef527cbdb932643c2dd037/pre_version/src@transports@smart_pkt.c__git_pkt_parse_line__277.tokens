int git_pkt_parse_line ( //<S2SV> git_pkt * * head , const char * line , const char * * out , size_t bufflen ) //<S2SV> { //<S2SV> int ret ; //<S2SV> int32_t len ; //<S2SV> if ( bufflen > 0 && bufflen < PKT_LEN_SIZE ) //<S2SV> return GIT_EBUFS ; //<S2SV> len = parse_len ( line ) ; //<S2SV> if ( len < 0 ) { //<S2SV> if ( bufflen >= 4 && ! git__prefixcmp ( line , "PACK" ) ) { //<S2SV> giterr_clear ( ) ; //<S2SV> * out = line ; //<S2SV> return pack_pkt ( head ) ; //<S2SV> } //<S2SV> return ( int ) len ; //<S2SV> } //<S2SV> if ( bufflen > 0 && bufflen < ( size_t ) len ) //<S2SV> return GIT_EBUFS ; //<S2SV> if ( len != 0 && len < PKT_LEN_SIZE ) //<S2SV> return GIT_ERROR ; //<S2SV> line += PKT_LEN_SIZE ; //<S2SV> if ( len == PKT_LEN_SIZE ) { //<S2SV> * head = NULL ; //<S2SV> * out = line ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( len == 0 ) { //<S2SV> * out = line ; //<S2SV> return flush_pkt ( head ) ; //<S2SV> } //<S2SV> len -= PKT_LEN_SIZE ; //<S2SV> if ( * line == GIT_SIDE_BAND_DATA ) //<S2SV> ret = data_pkt ( head , line , len ) ; //<S2SV> else if ( * line == GIT_SIDE_BAND_PROGRESS ) //<S2SV> ret = sideband_progress_pkt ( head , line , len ) ; //<S2SV> else if ( * line == GIT_SIDE_BAND_ERROR ) //<S2SV> ret = sideband_error_pkt ( head , line , len ) ; //<S2SV> else if ( ! git__prefixcmp ( line , "ACK" ) ) //<S2SV> ret = ack_pkt ( head , line , len ) ; //<S2SV> else if ( ! git__prefixcmp ( line , "NAK" ) ) //<S2SV> ret = nak_pkt ( head ) ; //<S2SV> else if ( ! git__prefixcmp ( line , "ERR<S2SV_blank>" ) ) //<S2SV> ret = err_pkt ( head , line , len ) ; //<S2SV> else if ( * line == '#' ) //<S2SV> ret = comment_pkt ( head , line , len ) ; //<S2SV> else if ( ! git__prefixcmp ( line , "ok" ) ) //<S2SV> ret = ok_pkt ( head , line , len ) ; //<S2SV> else if ( ! git__prefixcmp ( line , "ng" ) ) //<S2SV> ret = ng_pkt ( head , line , len ) ; //<S2SV> else if ( ! git__prefixcmp ( line , "unpack" ) ) //<S2SV> ret = unpack_pkt ( head , line , len ) ; //<S2SV> else //<S2SV> ret = ref_pkt ( head , line , len ) ; //<S2SV> * out = line + len ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 