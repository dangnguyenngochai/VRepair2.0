static int parse_report ( transport_smart * transport , git_push * push ) //<S2SV> { //<S2SV> git_pkt * pkt = NULL ; //<S2SV> const char * line_end = NULL ; //<S2SV> gitno_buffer * buf = & transport -> buffer ; //<S2SV> int error , recvd ; //<S2SV> git_buf data_pkt_buf = GIT_BUF_INIT ; //<S2SV> for ( ; ; ) { //<S2SV> if ( buf -> offset > 0 ) //<S2SV> error = git_pkt_parse_line ( & pkt , buf -> data , //<S2SV> & line_end , buf -> offset ) ; //<S2SV> else //<S2SV> error = GIT_EBUFS ; //<S2SV> if ( error < 0 && error != GIT_EBUFS ) { //<S2SV> error = - 1 ; //<S2SV> goto done ; //<S2SV> } //<S2SV> if ( error == GIT_EBUFS ) { //<S2SV> if ( ( recvd = gitno_recv ( buf ) ) < 0 ) { //<S2SV> error = recvd ; //<S2SV> goto done ; //<S2SV> } //<S2SV> if ( recvd == 0 ) { //<S2SV> giterr_set ( GITERR_NET , "early<S2SV_blank>EOF" ) ; //<S2SV> error = GIT_EEOF ; //<S2SV> goto done ; //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> gitno_consume ( buf , line_end ) ; //<S2SV> error = 0 ; //<S2SV> switch ( pkt -> type ) { //<S2SV> case GIT_PKT_DATA : //<S2SV> error = add_push_report_sideband_pkt ( push , ( git_pkt_data * ) pkt , & data_pkt_buf ) ; //<S2SV> break ; //<S2SV> case GIT_PKT_ERR : //<S2SV> giterr_set ( GITERR_NET , "report-status:<S2SV_blank>Error<S2SV_blank>reported:<S2SV_blank>%s" , //<S2SV> ( ( git_pkt_err * ) pkt ) -> error ) ; //<S2SV> error = - 1 ; //<S2SV> break ; //<S2SV> case GIT_PKT_PROGRESS : //<S2SV> if ( transport -> progress_cb ) { //<S2SV> git_pkt_progress * p = ( git_pkt_progress * ) pkt ; //<S2SV> error = transport -> progress_cb ( p -> data , p -> len , transport -> message_cb_payload ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> error = add_push_report_pkt ( push , pkt ) ; //<S2SV> break ; //<S2SV> } //<S2SV> git_pkt_free ( pkt ) ; //<S2SV> if ( error == GIT_ITEROVER ) { //<S2SV> error = 0 ; //<S2SV> if ( data_pkt_buf . size > 0 ) { //<S2SV> giterr_set ( GITERR_NET , "Incomplete<S2SV_blank>pack<S2SV_blank>data<S2SV_blank>pkt-line" ) ; //<S2SV> error = GIT_ERROR ; //<S2SV> } //<S2SV> goto done ; //<S2SV> } //<S2SV> if ( error < 0 ) { //<S2SV> goto done ; //<S2SV> } //<S2SV> } //<S2SV> done : //<S2SV> git_buf_free ( & data_pkt_buf ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 