static int add_push_report_sideband_pkt ( git_push * push , git_pkt_data * data_pkt , git_buf * data_pkt_buf ) //<S2SV> { //<S2SV> git_pkt * pkt ; //<S2SV> const char * line , * line_end = NULL ; //<S2SV> size_t line_len ; //<S2SV> int error ; //<S2SV> int reading_from_buf = data_pkt_buf -> size > 0 ; //<S2SV> if ( reading_from_buf ) { //<S2SV> git_buf_put ( data_pkt_buf , data_pkt -> data , data_pkt -> len ) ; //<S2SV> line = data_pkt_buf -> ptr ; //<S2SV> line_len = data_pkt_buf -> size ; //<S2SV> } //<S2SV> else { //<S2SV> line = data_pkt -> data ; //<S2SV> line_len = data_pkt -> len ; //<S2SV> } //<S2SV> while ( line_len > 0 ) { //<S2SV> error = git_pkt_parse_line ( & pkt , line , & line_end , line_len ) ; //<S2SV> if ( error == GIT_EBUFS ) { //<S2SV> if ( ! reading_from_buf ) //<S2SV> git_buf_put ( data_pkt_buf , line , line_len ) ; //<S2SV> error = 0 ; //<S2SV> goto done ; //<S2SV> } //<S2SV> else if ( error < 0 ) //<S2SV> goto done ; //<S2SV> line_len -= ( line_end - line ) ; //<S2SV> line = line_end ; //<S2SV> if ( pkt == NULL ) //<S2SV> continue ; //<S2SV> error = add_push_report_pkt ( push , pkt ) ; //<S2SV> git_pkt_free ( pkt ) ; //<S2SV> if ( error < 0 && error != GIT_ITEROVER ) //<S2SV> goto done ; //<S2SV> } //<S2SV> error = 0 ; //<S2SV> done : //<S2SV> if ( reading_from_buf ) //<S2SV> git_buf_consume ( data_pkt_buf , line_end ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 