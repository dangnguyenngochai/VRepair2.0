static int ng_pkt ( git_pkt * * out , const char * line , size_t len ) //<S2SV> { //<S2SV> git_pkt_ng * pkt ; //<S2SV> const char * ptr ; //<S2SV> size_t alloclen ; //<S2SV> pkt = git__malloc ( sizeof ( * pkt ) ) ; //<S2SV> GITERR_CHECK_ALLOC ( pkt ) ; //<S2SV> pkt -> ref = NULL ; //<S2SV> pkt -> type = GIT_PKT_NG ; //<S2SV> line += 3 ; //<S2SV> if ( ! ( ptr = strchr ( line , '<S2SV_blank>' ) ) ) //<S2SV> goto out_err ; //<S2SV> len = ptr - line ; //<S2SV> GITERR_CHECK_ALLOC_ADD ( & alloclen , len , 1 ) ; //<S2SV> pkt -> ref = git__malloc ( alloclen ) ; //<S2SV> GITERR_CHECK_ALLOC ( pkt -> ref ) ; //<S2SV> memcpy ( pkt -> ref , line , len ) ; //<S2SV> pkt -> ref [ len ] = '\\0' ; //<S2SV> line = ptr + 1 ; //<S2SV> if ( ! ( ptr = strchr ( line , '\\n' ) ) ) //<S2SV> goto out_err ; //<S2SV> len = ptr - line ; //<S2SV> GITERR_CHECK_ALLOC_ADD ( & alloclen , len , 1 ) ; //<S2SV> pkt -> msg = git__malloc ( alloclen ) ; //<S2SV> GITERR_CHECK_ALLOC ( pkt -> msg ) ; //<S2SV> memcpy ( pkt -> msg , line , len ) ; //<S2SV> pkt -> msg [ len ] = '\\0' ; //<S2SV> * out = ( git_pkt * ) pkt ; //<S2SV> return 0 ; //<S2SV> out_err : //<S2SV> giterr_set ( GITERR_NET , "invalid<S2SV_blank>packet<S2SV_blank>line" ) ; //<S2SV> git__free ( pkt -> ref ) ; //<S2SV> git__free ( pkt ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 