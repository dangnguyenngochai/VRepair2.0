static int http_connect ( http_subtransport * t ) //<S2SV> { //<S2SV> int error ; //<S2SV> char * proxy_url ; //<S2SV> if ( t -> connected && //<S2SV> http_should_keep_alive ( & t -> parser ) && //<S2SV> t -> parse_finished ) //<S2SV> return 0 ; //<S2SV> if ( t -> io ) { //<S2SV> git_stream_close ( t -> io ) ; //<S2SV> git_stream_free ( t -> io ) ; //<S2SV> t -> io = NULL ; //<S2SV> t -> connected = 0 ; //<S2SV> } //<S2SV> if ( t -> connection_data . use_ssl ) { //<S2SV> error = git_tls_stream_new ( & t -> io , t -> connection_data . host , t -> connection_data . port ) ; //<S2SV> } else { //<S2SV> # ifdef GIT_CURL //<S2SV> error = git_curl_stream_new ( & t -> io , t -> connection_data . host , t -> connection_data . port ) ; //<S2SV> # else //<S2SV> error = git_socket_stream_new ( & t -> io , t -> connection_data . host , t -> connection_data . port ) ; //<S2SV> # endif //<S2SV> } //<S2SV> if ( error < 0 ) //<S2SV> return error ; //<S2SV> GITERR_CHECK_VERSION ( t -> io , GIT_STREAM_VERSION , "git_stream" ) ; //<S2SV> if ( git_stream_supports_proxy ( t -> io ) && //<S2SV> ! git_remote__get_http_proxy ( t -> owner -> owner , ! ! t -> connection_data . use_ssl , & proxy_url ) ) { //<S2SV> error = git_stream_set_proxy ( t -> io , proxy_url ) ; //<S2SV> git__free ( proxy_url ) ; //<S2SV> if ( error < 0 ) //<S2SV> return error ; //<S2SV> } //<S2SV> error = git_stream_connect ( t -> io ) ; //<S2SV> # if defined ( GIT_OPENSSL ) || defined ( GIT_SECURE_TRANSPORT ) || defined ( GIT_CURL ) //<S2SV> if ( ( ! error || error == GIT_ECERTIFICATE ) && t -> owner -> certificate_check_cb != NULL && //<S2SV> git_stream_is_encrypted ( t -> io ) ) { //<S2SV> git_cert * cert ; //<S2SV> int is_valid = ( error == GIT_OK ) ; //<S2SV> if ( ( error = git_stream_certificate ( & cert , t -> io ) ) < 0 ) //<S2SV> return error ; //<S2SV> giterr_clear ( ) ; //<S2SV> error = t -> owner -> certificate_check_cb ( cert , is_valid , t -> connection_data . host , t -> owner -> message_cb_payload ) ; //<S2SV> if ( error < 0 ) { //<S2SV> if ( ! giterr_last ( ) ) //<S2SV> giterr_set ( GITERR_NET , "user<S2SV_blank>cancelled<S2SV_blank>certificate<S2SV_blank>check" ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> if ( error < 0 ) //<S2SV> return error ; //<S2SV> t -> connected = 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 