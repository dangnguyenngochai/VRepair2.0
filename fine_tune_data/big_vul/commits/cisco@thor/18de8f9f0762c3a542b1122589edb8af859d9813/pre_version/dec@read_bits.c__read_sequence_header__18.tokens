void read_sequence_header ( decoder_info_t * decoder_info , stream_t * stream ) { //<S2SV> decoder_info -> width = get_flc ( 16 , stream ) ; //<S2SV> decoder_info -> height = get_flc ( 16 , stream ) ; //<S2SV> decoder_info -> log2_sb_size = get_flc ( 3 , stream ) ; //<S2SV> decoder_info -> pb_split = get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> tb_split_enable = get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> max_num_ref = get_flc ( 2 , stream ) + 1 ; //<S2SV> decoder_info -> interp_ref = get_flc ( 2 , stream ) ; //<S2SV> decoder_info -> max_delta_qp = get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> deblocking = get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> clpf = get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> use_block_contexts = get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> bipred = get_flc ( 2 , stream ) ; //<S2SV> decoder_info -> qmtx = get_flc ( 1 , stream ) ; //<S2SV> if ( decoder_info -> qmtx ) { //<S2SV> decoder_info -> qmtx_offset = get_flc ( 6 , stream ) - 32 ; //<S2SV> } //<S2SV> decoder_info -> subsample = get_flc ( 2 , stream ) ; //<S2SV> decoder_info -> subsample = //<S2SV> ( decoder_info -> subsample & 1 ) * 20 + ( decoder_info -> subsample & 2 ) * 22 + //<S2SV> ( ( decoder_info -> subsample & 3 ) == 3 ) * 2 + 400 ; //<S2SV> decoder_info -> num_reorder_pics = get_flc ( 4 , stream ) ; //<S2SV> if ( decoder_info -> subsample != 400 ) { //<S2SV> decoder_info -> cfl_intra = get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> cfl_inter = get_flc ( 1 , stream ) ; //<S2SV> } //<S2SV> decoder_info -> bitdepth = get_flc ( 1 , stream ) ? 10 : 8 ; //<S2SV> if ( decoder_info -> bitdepth == 10 ) //<S2SV> decoder_info -> bitdepth += 2 * get_flc ( 1 , stream ) ; //<S2SV> decoder_info -> input_bitdepth = get_flc ( 1 , stream ) ? 10 : 8 ; //<S2SV> if ( decoder_info -> input_bitdepth == 10 ) //<S2SV> decoder_info -> input_bitdepth += 2 * get_flc ( 1 , stream ) ; //<S2SV> } //<S2SV> 