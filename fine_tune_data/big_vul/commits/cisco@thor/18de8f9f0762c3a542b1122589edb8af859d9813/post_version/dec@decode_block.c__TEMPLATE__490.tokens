void TEMPLATE ( process_block_dec ) ( decoder_info_t * decoder_info , int size , int yposY , int xposY , int sub ) //<S2SV> { //<S2SV> int width = decoder_info -> width ; //<S2SV> int height = decoder_info -> height ; //<S2SV> stream_t * stream = decoder_info -> stream ; //<S2SV> frame_type_t frame_type = decoder_info -> frame_info . frame_type ; //<S2SV> int split_flag = 0 ; //<S2SV> if ( yposY >= height || xposY >= width ) //<S2SV> return ; //<S2SV> int decode_this_size = ( yposY + size <= height ) && ( xposY + size <= width ) ; //<S2SV> int decode_rectangular_size = ! decode_this_size && frame_type != I_FRAME ; //<S2SV> int bit_start = stream -> bitcnt ; //<S2SV> int mode = MODE_SKIP ; //<S2SV> block_context_t block_context ; //<S2SV> TEMPLATE ( find_block_contexts ) ( yposY , xposY , height , width , size , decoder_info -> deblock_data , & block_context , decoder_info -> use_block_contexts ) ; //<S2SV> decoder_info -> block_context = & block_context ; //<S2SV> split_flag = decode_super_mode ( decoder_info , size , decode_this_size ) ; //<S2SV> mode = decoder_info -> mode ; //<S2SV> if ( size == ( 1 << decoder_info -> log2_sb_size ) && ( split_flag || mode != MODE_SKIP ) && decoder_info -> max_delta_qp > 0 ) { //<S2SV> int delta_qp = read_delta_qp ( stream ) ; //<S2SV> int prev_qp ; //<S2SV> if ( yposY == 0 && xposY == 0 ) //<S2SV> prev_qp = decoder_info -> frame_info . qp ; //<S2SV> else //<S2SV> prev_qp = decoder_info -> frame_info . qpb ; //<S2SV> decoder_info -> frame_info . qpb = prev_qp + delta_qp ; //<S2SV> } //<S2SV> decoder_info -> bit_count . super_mode [ decoder_info -> bit_count . stat_frame_type ] += ( stream -> bitcnt - bit_start ) ; //<S2SV> if ( split_flag && size >= MIN_BLOCK_SIZE ) { //<S2SV> int new_size = size / 2 ; //<S2SV> TEMPLATE ( process_block_dec ) ( decoder_info , new_size , yposY + 0 * new_size , xposY + 0 * new_size , sub ) ; //<S2SV> TEMPLATE ( process_block_dec ) ( decoder_info , new_size , yposY + 1 * new_size , xposY + 0 * new_size , sub ) ; //<S2SV> TEMPLATE ( process_block_dec ) ( decoder_info , new_size , yposY + 0 * new_size , xposY + 1 * new_size , sub ) ; //<S2SV> TEMPLATE ( process_block_dec ) ( decoder_info , new_size , yposY + 1 * new_size , xposY + 1 * new_size , sub ) ; //<S2SV> } //<S2SV> else if ( decode_this_size || decode_rectangular_size ) { //<S2SV> decode_block ( decoder_info , size , yposY , xposY , sub ) ; //<S2SV> } //<S2SV> } //<S2SV> 