static NPError //<S2SV> g_NPN_GetValue ( NPP instance , NPNVariable variable , void * value ) //<S2SV> { //<S2SV> D ( bug ( "NPN_GetValue<S2SV_blank>instance=%p,<S2SV_blank>variable=%d<S2SV_blank>[%s]\\n" , instance , variable , string_of_NPNVariable ( variable ) ) ) ; //<S2SV> if ( ! thread_check ( ) ) { //<S2SV> npw_printf ( "WARNING:<S2SV_blank>NPN_GetValue<S2SV_blank>not<S2SV_blank>called<S2SV_blank>from<S2SV_blank>the<S2SV_blank>main<S2SV_blank>thread\\n" ) ; //<S2SV> return NPERR_INVALID_INSTANCE_ERROR ; //<S2SV> } //<S2SV> PluginInstance * plugin = NULL ; //<S2SV> if ( instance ) //<S2SV> plugin = PLUGIN_INSTANCE ( instance ) ; //<S2SV> switch ( variable ) { //<S2SV> case NPNVxDisplay : //<S2SV> * ( void * * ) value = x_display ; //<S2SV> break ; //<S2SV> case NPNVxtAppContext : //<S2SV> * ( void * * ) value = XtDisplayToApplicationContext ( x_display ) ; //<S2SV> break ; //<S2SV> case NPNVToolkit : //<S2SV> * ( NPNToolkitType * ) value = NPW_TOOLKIT ; //<S2SV> break ; //<S2SV> # if USE_XPCOM //<S2SV> case NPNVserviceManager : { //<S2SV> nsIServiceManager * sm ; //<S2SV> int ret = NS_GetServiceManager ( & sm ) ; //<S2SV> if ( NS_FAILED ( ret ) ) { //<S2SV> npw_printf ( "WARNING:<S2SV_blank>NS_GetServiceManager<S2SV_blank>failed\\n" ) ; //<S2SV> return NPERR_GENERIC_ERROR ; //<S2SV> } //<S2SV> * ( nsIServiceManager * * ) value = sm ; //<S2SV> break ; //<S2SV> } //<S2SV> case NPNVDOMWindow : //<S2SV> case NPNVDOMElement : //<S2SV> npw_printf ( "WARNING:<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>NPN_GetValue()\\n" , string_of_NPNVariable ( variable ) ) ; //<S2SV> return NPERR_INVALID_PARAM ; //<S2SV> # endif //<S2SV> case NPNVnetscapeWindow : //<S2SV> if ( plugin == NULL ) { //<S2SV> npw_printf ( "ERROR:<S2SV_blank>NPNVnetscapeWindow<S2SV_blank>requires<S2SV_blank>a<S2SV_blank>non<S2SV_blank>NULL<S2SV_blank>instance\\n" ) ; //<S2SV> return NPERR_INVALID_INSTANCE_ERROR ; //<S2SV> } //<S2SV> if ( plugin -> browser_toplevel == NULL ) { //<S2SV> GdkNativeWindow netscape_xid = None ; //<S2SV> NPError error = g_NPN_GetValue_real ( instance , variable , & netscape_xid ) ; //<S2SV> if ( error != NPERR_NO_ERROR ) //<S2SV> return error ; //<S2SV> if ( netscape_xid == None ) //<S2SV> return NPERR_GENERIC_ERROR ; //<S2SV> plugin -> browser_toplevel = gdk_window_foreign_new ( netscape_xid ) ; //<S2SV> if ( plugin -> browser_toplevel == NULL ) //<S2SV> return NPERR_GENERIC_ERROR ; //<S2SV> } //<S2SV> * ( ( GdkNativeWindow * ) value ) = GDK_WINDOW_XWINDOW ( plugin -> browser_toplevel ) ; //<S2SV> break ; //<S2SV> # if ALLOW_WINDOWLESS_PLUGINS //<S2SV> case NPNVSupportsWindowless : //<S2SV> # endif //<S2SV> case NPNVSupportsXEmbedBool : //<S2SV> case NPNVWindowNPObject : //<S2SV> case NPNVPluginElementNPObject : //<S2SV> return g_NPN_GetValue_real ( instance , variable , value ) ; //<S2SV> default : //<S2SV> switch ( variable & 0xff ) { //<S2SV> case 13 : //<S2SV> if ( NPW_TOOLKIT == NPNVGtk2 ) { //<S2SV> * ( NPNToolkitType * ) value = NPW_TOOLKIT ; //<S2SV> return NPERR_NO_ERROR ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> D ( bug ( "WARNING:<S2SV_blank>unhandled<S2SV_blank>variable<S2SV_blank>%d<S2SV_blank>(%s)<S2SV_blank>in<S2SV_blank>NPN_GetValue()\\n" , variable , string_of_NPNVariable ( variable ) ) ) ; //<S2SV> return NPERR_INVALID_PARAM ; //<S2SV> } //<S2SV> return NPERR_NO_ERROR ; //<S2SV> } //<S2SV> 