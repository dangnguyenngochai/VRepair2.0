const char * string_of_NPPVariable ( int variable ) //<S2SV> { //<S2SV> const char * str ; //<S2SV> switch ( variable ) { //<S2SV> # define _ ( VAL ) case VAL : str = # VAL ; break ; //<S2SV> _ ( NPPVpluginNameString ) ; //<S2SV> _ ( NPPVpluginDescriptionString ) ; //<S2SV> _ ( NPPVpluginWindowBool ) ; //<S2SV> _ ( NPPVpluginTransparentBool ) ; //<S2SV> _ ( NPPVjavaClass ) ; //<S2SV> _ ( NPPVpluginWindowSize ) ; //<S2SV> _ ( NPPVpluginTimerInterval ) ; //<S2SV> _ ( NPPVpluginScriptableInstance ) ; //<S2SV> _ ( NPPVpluginScriptableIID ) ; //<S2SV> _ ( NPPVjavascriptPushCallerBool ) ; //<S2SV> _ ( NPPVpluginKeepLibraryInMemory ) ; //<S2SV> _ ( NPPVpluginNeedsXEmbed ) ; //<S2SV> _ ( NPPVpluginScriptableNPObject ) ; //<S2SV> _ ( NPPVformValue ) ; //<S2SV> _ ( NPPVpluginUrlRequestsDisplayedBool ) ; //<S2SV> _ ( NPPVpluginWantsAllNetworkStreams ) ; //<S2SV> _ ( NPPVpluginNativeAccessibleAtkPlugId ) ; //<S2SV> _ ( NPPVpluginCancelSrcStream ) ; //<S2SV> _ ( NPPVSupportsAdvancedKeyHandling ) ; //<S2SV> # undef _ //<S2SV> default : //<S2SV> switch ( variable & 0xff ) { //<S2SV> # define _ ( VAL , VAR ) case VAL : str = # VAR ; break //<S2SV> _ ( 10 , NPPVpluginScriptableInstance ) ; //<S2SV> # undef _ //<S2SV> default : //<S2SV> str = "<unknown<S2SV_blank>variable>" ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> return str ; //<S2SV> } //<S2SV> 