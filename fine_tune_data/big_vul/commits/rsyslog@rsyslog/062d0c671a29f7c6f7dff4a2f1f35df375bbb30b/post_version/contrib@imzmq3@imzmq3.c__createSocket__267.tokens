static rsRetVal createSocket ( instanceConf_t * info , void * * sock ) { //<S2SV> int rv ; //<S2SV> sublist * sub ; //<S2SV> * sock = zsocket_new ( s_context , info -> type ) ; //<S2SV> if ( ! sock ) { //<S2SV> errmsg . LogError ( 0 , //<S2SV> RS_RET_INVALID_PARAMS , //<S2SV> "zsocket_new<S2SV_blank>failed:<S2SV_blank>%s,<S2SV_blank>for<S2SV_blank>type<S2SV_blank>%d" , //<S2SV> zmq_strerror ( errno ) , info -> type ) ; //<S2SV> return RS_RET_INVALID_PARAMS ; //<S2SV> } //<S2SV> DBGPRINTF ( "imzmq3:<S2SV_blank>socket<S2SV_blank>of<S2SV_blank>type<S2SV_blank>%d<S2SV_blank>created<S2SV_blank>successfully\\n" , info -> type ) //<S2SV> if ( info -> identity ) zsocket_set_identity ( * sock , info -> identity ) ; //<S2SV> if ( info -> sndBuf > - 1 ) zsocket_set_sndbuf ( * sock , info -> sndBuf ) ; //<S2SV> if ( info -> rcvBuf > - 1 ) zsocket_set_rcvbuf ( * sock , info -> rcvBuf ) ; //<S2SV> if ( info -> linger > - 1 ) zsocket_set_linger ( * sock , info -> linger ) ; //<S2SV> if ( info -> backlog > - 1 ) zsocket_set_backlog ( * sock , info -> backlog ) ; //<S2SV> if ( info -> sndTimeout > - 1 ) zsocket_set_sndtimeo ( * sock , info -> sndTimeout ) ; //<S2SV> if ( info -> rcvTimeout > - 1 ) zsocket_set_rcvtimeo ( * sock , info -> rcvTimeout ) ; //<S2SV> if ( info -> maxMsgSize > - 1 ) zsocket_set_maxmsgsize ( * sock , info -> maxMsgSize ) ; //<S2SV> if ( info -> rate > - 1 ) zsocket_set_rate ( * sock , info -> rate ) ; //<S2SV> if ( info -> recoveryIVL > - 1 ) zsocket_set_recovery_ivl ( * sock , info -> recoveryIVL ) ; //<S2SV> if ( info -> multicastHops > - 1 ) zsocket_set_multicast_hops ( * sock , info -> multicastHops ) ; //<S2SV> if ( info -> reconnectIVL > - 1 ) zsocket_set_reconnect_ivl ( * sock , info -> reconnectIVL ) ; //<S2SV> if ( info -> reconnectIVLMax > - 1 ) zsocket_set_reconnect_ivl_max ( * sock , info -> reconnectIVLMax ) ; //<S2SV> if ( info -> ipv4Only > - 1 ) zsocket_set_ipv4only ( * sock , info -> ipv4Only ) ; //<S2SV> if ( info -> affinity > - 1 ) zsocket_set_affinity ( * sock , info -> affinity ) ; //<S2SV> if ( info -> sndHWM > - 1 ) zsocket_set_sndhwm ( * sock , info -> sndHWM ) ; //<S2SV> if ( info -> rcvHWM > - 1 ) zsocket_set_rcvhwm ( * sock , info -> rcvHWM ) ; //<S2SV> if ( info -> type == ZMQ_SUB ) { //<S2SV> for ( sub = info -> subscriptions ; sub != NULL ; sub = sub -> next ) { //<S2SV> zsocket_set_subscribe ( * sock , sub -> subscribe ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( info -> action == ACTION_CONNECT ) { //<S2SV> rv = zsocket_connect ( * sock , "%s" , info -> description ) ; //<S2SV> if ( rv == - 1 ) { //<S2SV> errmsg . LogError ( 0 , //<S2SV> RS_RET_INVALID_PARAMS , //<S2SV> "zmq_connect<S2SV_blank>using<S2SV_blank>%s<S2SV_blank>failed:<S2SV_blank>%s" , //<S2SV> info -> description , zmq_strerror ( errno ) ) ; //<S2SV> return RS_RET_INVALID_PARAMS ; //<S2SV> } //<S2SV> DBGPRINTF ( "imzmq3:<S2SV_blank>connect<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>successful\\n" , info -> description ) ; //<S2SV> } else { //<S2SV> rv = zsocket_bind ( * sock , "%s" , info -> description ) ; //<S2SV> if ( rv == - 1 ) { //<S2SV> errmsg . LogError ( 0 , //<S2SV> RS_RET_INVALID_PARAMS , //<S2SV> "zmq_bind<S2SV_blank>using<S2SV_blank>%s<S2SV_blank>failed:<S2SV_blank>%s" , //<S2SV> info -> description , zmq_strerror ( errno ) ) ; //<S2SV> return RS_RET_INVALID_PARAMS ; //<S2SV> } //<S2SV> DBGPRINTF ( "imzmq3:<S2SV_blank>bind<S2SV_blank>for<S2SV_blank>%s<S2SV_blank>successful\\n" , info -> description ) ; //<S2SV> } //<S2SV> return RS_RET_OK ; //<S2SV> } //<S2SV> 