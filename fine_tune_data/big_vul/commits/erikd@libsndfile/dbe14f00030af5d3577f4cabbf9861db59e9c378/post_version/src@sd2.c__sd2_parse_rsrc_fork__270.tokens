static int //<S2SV> sd2_parse_rsrc_fork ( SF_PRIVATE * psf ) //<S2SV> { SD2_RSRC rsrc ; //<S2SV> int k , marker , error = 0 ; //<S2SV> psf_use_rsrc ( psf , SF_TRUE ) ; //<S2SV> memset ( & rsrc , 0 , sizeof ( rsrc ) ) ; //<S2SV> rsrc . rsrc_len = psf_get_filelen ( psf ) ; //<S2SV> psf_log_printf ( psf , "Resource<S2SV_blank>length<S2SV_blank>:<S2SV_blank>%d<S2SV_blank>(0x%04X)\\n" , rsrc . rsrc_len , rsrc . rsrc_len ) ; //<S2SV> if ( rsrc . rsrc_len > SIGNED_SIZEOF ( psf -> header ) ) //<S2SV> { rsrc . rsrc_data = calloc ( 1 , rsrc . rsrc_len ) ; //<S2SV> rsrc . need_to_free_rsrc_data = SF_TRUE ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> rsrc . rsrc_data = psf -> header ; //<S2SV> rsrc . need_to_free_rsrc_data = SF_FALSE ; //<S2SV> } ; //<S2SV> psf_fread ( rsrc . rsrc_data , rsrc . rsrc_len , 1 , psf ) ; //<S2SV> psf -> headindex = psf -> headend = rsrc . rsrc_len ; //<S2SV> rsrc . data_offset = read_rsrc_int ( & rsrc , 0 ) ; //<S2SV> rsrc . map_offset = read_rsrc_int ( & rsrc , 4 ) ; //<S2SV> rsrc . data_length = read_rsrc_int ( & rsrc , 8 ) ; //<S2SV> rsrc . map_length = read_rsrc_int ( & rsrc , 12 ) ; //<S2SV> if ( rsrc . data_offset == 0x51607 && rsrc . map_offset == 0x20000 ) //<S2SV> { psf_log_printf ( psf , "Trying<S2SV_blank>offset<S2SV_blank>of<S2SV_blank>0x52<S2SV_blank>bytes.\\n" ) ; //<S2SV> rsrc . data_offset = read_rsrc_int ( & rsrc , 0x52 + 0 ) + 0x52 ; //<S2SV> rsrc . map_offset = read_rsrc_int ( & rsrc , 0x52 + 4 ) + 0x52 ; //<S2SV> rsrc . data_length = read_rsrc_int ( & rsrc , 0x52 + 8 ) ; //<S2SV> rsrc . map_length = read_rsrc_int ( & rsrc , 0x52 + 12 ) ; //<S2SV> } ; //<S2SV> psf_log_printf ( psf , "<S2SV_blank><S2SV_blank>data<S2SV_blank>offset<S2SV_blank>:<S2SV_blank>0x%04X\\n<S2SV_blank><S2SV_blank>map<S2SV_blank><S2SV_blank>offset<S2SV_blank>:<S2SV_blank>0x%04X\\n" //<S2SV> "<S2SV_blank><S2SV_blank>data<S2SV_blank>length<S2SV_blank>:<S2SV_blank>0x%04X\\n<S2SV_blank><S2SV_blank>map<S2SV_blank><S2SV_blank>length<S2SV_blank>:<S2SV_blank>0x%04X\\n" , //<S2SV> rsrc . data_offset , rsrc . map_offset , rsrc . data_length , rsrc . map_length ) ; //<S2SV> if ( rsrc . data_offset > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Error<S2SV_blank>:<S2SV_blank>rsrc.data_offset<S2SV_blank>(%d,<S2SV_blank>0x%x)<S2SV_blank>><S2SV_blank>len\\n" , rsrc . data_offset , rsrc . data_offset ) ; //<S2SV> error = SFE_SD2_BAD_DATA_OFFSET ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> if ( rsrc . map_offset > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Error<S2SV_blank>:<S2SV_blank>rsrc.map_offset<S2SV_blank>><S2SV_blank>len\\n" ) ; //<S2SV> error = SFE_SD2_BAD_MAP_OFFSET ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> if ( rsrc . data_length > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Error<S2SV_blank>:<S2SV_blank>rsrc.data_length<S2SV_blank>><S2SV_blank>len\\n" ) ; //<S2SV> error = SFE_SD2_BAD_DATA_LENGTH ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> if ( rsrc . map_length > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Error<S2SV_blank>:<S2SV_blank>rsrc.map_length<S2SV_blank>><S2SV_blank>len\\n" ) ; //<S2SV> error = SFE_SD2_BAD_MAP_LENGTH ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> if ( rsrc . data_offset + rsrc . data_length != rsrc . map_offset || rsrc . map_offset + rsrc . map_length != rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Error<S2SV_blank>:<S2SV_blank>This<S2SV_blank>does<S2SV_blank>not<S2SV_blank>look<S2SV_blank>like<S2SV_blank>a<S2SV_blank>MacOSX<S2SV_blank>resource<S2SV_blank>fork.\\n" ) ; //<S2SV> error = SFE_SD2_BAD_RSRC ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> if ( rsrc . map_offset + 28 >= rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Bad<S2SV_blank>map<S2SV_blank>offset<S2SV_blank>(%d<S2SV_blank>+<S2SV_blank>28<S2SV_blank>><S2SV_blank>%d).\\n" , rsrc . map_offset , rsrc . rsrc_len ) ; //<S2SV> error = SFE_SD2_BAD_RSRC ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> rsrc . string_offset = rsrc . map_offset + read_rsrc_short ( & rsrc , rsrc . map_offset + 26 ) ; //<S2SV> if ( rsrc . string_offset > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Bad<S2SV_blank>string<S2SV_blank>offset<S2SV_blank>(%d).\\n" , rsrc . string_offset ) ; //<S2SV> error = SFE_SD2_BAD_RSRC ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> rsrc . type_offset = rsrc . map_offset + 30 ; //<S2SV> if ( rsrc . map_offset + 28 > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Bad<S2SV_blank>map<S2SV_blank>offset.\\n" ) ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> rsrc . type_count = read_rsrc_short ( & rsrc , rsrc . map_offset + 28 ) + 1 ; //<S2SV> if ( rsrc . type_count < 1 ) //<S2SV> { psf_log_printf ( psf , "Bad<S2SV_blank>type<S2SV_blank>count.\\n" ) ; //<S2SV> error = SFE_SD2_BAD_RSRC ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> rsrc . item_offset = rsrc . type_offset + rsrc . type_count * 8 ; //<S2SV> if ( rsrc . item_offset < 0 || rsrc . item_offset > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Bad<S2SV_blank>item<S2SV_blank>offset<S2SV_blank>(%d).\\n" , rsrc . item_offset ) ; //<S2SV> error = SFE_SD2_BAD_RSRC ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> rsrc . str_index = - 1 ; //<S2SV> for ( k = 0 ; k < rsrc . type_count ; k ++ ) //<S2SV> { if ( rsrc . type_offset + k * 8 > rsrc . rsrc_len ) //<S2SV> { psf_log_printf ( psf , "Bad<S2SV_blank>rsrc<S2SV_blank>marker.\\n" ) ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8 ) ; //<S2SV> if ( marker == STR_MARKER ) //<S2SV> { rsrc . str_index = k ; //<S2SV> rsrc . str_count = read_rsrc_short ( & rsrc , rsrc . type_offset + k * 8 + 4 ) + 1 ; //<S2SV> error = parse_str_rsrc ( psf , & rsrc ) ; //<S2SV> goto parse_rsrc_fork_cleanup ; //<S2SV> } ; //<S2SV> } ; //<S2SV> psf_log_printf ( psf , "No<S2SV_blank>\'STR<S2SV_blank>\'<S2SV_blank>resource.\\n" ) ; //<S2SV> error = SFE_SD2_BAD_RSRC ; //<S2SV> parse_rsrc_fork_cleanup : //<S2SV> psf_use_rsrc ( psf , SF_FALSE ) ; //<S2SV> if ( rsrc . need_to_free_rsrc_data ) //<S2SV> free ( rsrc . rsrc_data ) ; //<S2SV> return error ; //<S2SV> } //<S2SV> 