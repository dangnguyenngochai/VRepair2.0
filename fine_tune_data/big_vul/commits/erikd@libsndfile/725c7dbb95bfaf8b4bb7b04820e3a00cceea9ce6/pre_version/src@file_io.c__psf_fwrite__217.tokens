sf_count_t //<S2SV> psf_fwrite ( const void * ptr , sf_count_t bytes , sf_count_t items , SF_PRIVATE * psf ) //<S2SV> { sf_count_t total = 0 ; //<S2SV> ssize_t count ; //<S2SV> if ( psf -> virtual_io ) //<S2SV> return psf -> vio . write ( ptr , bytes * items , psf -> vio_user_data ) / bytes ; //<S2SV> items *= bytes ; //<S2SV> if ( items <= 0 ) //<S2SV> return 0 ; //<S2SV> while ( items > 0 ) //<S2SV> { //<S2SV> count = ( items > SENSIBLE_SIZE ) ? SENSIBLE_SIZE : items ; //<S2SV> count = write ( psf -> file . filedes , ( ( const char * ) ptr ) + total , count ) ; //<S2SV> if ( count == - 1 ) //<S2SV> { if ( errno == EINTR ) //<S2SV> continue ; //<S2SV> psf_log_syserr ( psf , errno ) ; //<S2SV> break ; //<S2SV> } ; //<S2SV> if ( count == 0 ) //<S2SV> break ; //<S2SV> total += count ; //<S2SV> items -= count ; //<S2SV> } ; //<S2SV> if ( psf -> is_pipe ) //<S2SV> psf -> pipeoffset += total ; //<S2SV> return total / bytes ; //<S2SV> } //<S2SV> 