void silk_NLSF_stabilize ( //<S2SV> opus_int16 * NLSF_Q15 , //<S2SV> const opus_int16 * NDeltaMin_Q15 , //<S2SV> const opus_int L //<S2SV> ) //<S2SV> { //<S2SV> opus_int i , I = 0 , k , loops ; //<S2SV> opus_int16 center_freq_Q15 ; //<S2SV> opus_int32 diff_Q15 , min_diff_Q15 , min_center_Q15 , max_center_Q15 ; //<S2SV> silk_assert ( NDeltaMin_Q15 [ L ] >= 1 ) ; //<S2SV> for ( loops = 0 ; loops < MAX_LOOPS ; loops ++ ) { //<S2SV> min_diff_Q15 = NLSF_Q15 [ 0 ] - NDeltaMin_Q15 [ 0 ] ; //<S2SV> I = 0 ; //<S2SV> for ( i = 1 ; i <= L - 1 ; i ++ ) { //<S2SV> diff_Q15 = NLSF_Q15 [ i ] - ( NLSF_Q15 [ i - 1 ] + NDeltaMin_Q15 [ i ] ) ; //<S2SV> if ( diff_Q15 < min_diff_Q15 ) { //<S2SV> min_diff_Q15 = diff_Q15 ; //<S2SV> I = i ; //<S2SV> } //<S2SV> } //<S2SV> diff_Q15 = ( 1 << 15 ) - ( NLSF_Q15 [ L - 1 ] + NDeltaMin_Q15 [ L ] ) ; //<S2SV> if ( diff_Q15 < min_diff_Q15 ) { //<S2SV> min_diff_Q15 = diff_Q15 ; //<S2SV> I = L ; //<S2SV> } //<S2SV> if ( min_diff_Q15 >= 0 ) { //<S2SV> return ; //<S2SV> } //<S2SV> if ( I == 0 ) { //<S2SV> NLSF_Q15 [ 0 ] = NDeltaMin_Q15 [ 0 ] ; //<S2SV> } else if ( I == L ) { //<S2SV> NLSF_Q15 [ L - 1 ] = ( 1 << 15 ) - NDeltaMin_Q15 [ L ] ; //<S2SV> } else { //<S2SV> min_center_Q15 = 0 ; //<S2SV> for ( k = 0 ; k < I ; k ++ ) { //<S2SV> min_center_Q15 += NDeltaMin_Q15 [ k ] ; //<S2SV> } //<S2SV> min_center_Q15 += silk_RSHIFT ( NDeltaMin_Q15 [ I ] , 1 ) ; //<S2SV> max_center_Q15 = 1 << 15 ; //<S2SV> for ( k = L ; k > I ; k -- ) { //<S2SV> max_center_Q15 -= NDeltaMin_Q15 [ k ] ; //<S2SV> } //<S2SV> max_center_Q15 -= silk_RSHIFT ( NDeltaMin_Q15 [ I ] , 1 ) ; //<S2SV> center_freq_Q15 = ( opus_int16 ) silk_LIMIT_32 ( silk_RSHIFT_ROUND ( ( opus_int32 ) NLSF_Q15 [ I - 1 ] + ( opus_int32 ) NLSF_Q15 [ I ] , 1 ) , //<S2SV> min_center_Q15 , max_center_Q15 ) ; //<S2SV> NLSF_Q15 [ I - 1 ] = center_freq_Q15 - silk_RSHIFT ( NDeltaMin_Q15 [ I ] , 1 ) ; //<S2SV> NLSF_Q15 [ I ] = NLSF_Q15 [ I - 1 ] + NDeltaMin_Q15 [ I ] ; //<S2SV> } //<S2SV> } //<S2SV> if ( loops == MAX_LOOPS ) //<S2SV> { //<S2SV> silk_insertion_sort_increasing_all_values_int16 ( & NLSF_Q15 [ 0 ] , L ) ; //<S2SV> NLSF_Q15 [ 0 ] = silk_max_int ( NLSF_Q15 [ 0 ] , NDeltaMin_Q15 [ 0 ] ) ; //<S2SV> for ( i = 1 ; i < L ; i ++ ) //<S2SV> NLSF_Q15 [ i ] = silk_max_int ( NLSF_Q15 [ i ] , silk_ADD_SAT16 ( NLSF_Q15 [ i - 1 ] , NDeltaMin_Q15 [ i ] ) ) ; //<S2SV> NLSF_Q15 [ L - 1 ] = silk_min_int ( NLSF_Q15 [ L - 1 ] , ( 1 << 15 ) - NDeltaMin_Q15 [ L ] ) ; //<S2SV> for ( i = L - 2 ; i >= 0 ; i -- ) //<S2SV> NLSF_Q15 [ i ] = silk_min_int ( NLSF_Q15 [ i ] , NLSF_Q15 [ i + 1 ] - NDeltaMin_Q15 [ i + 1 ] ) ; //<S2SV> } //<S2SV> } //<S2SV> 