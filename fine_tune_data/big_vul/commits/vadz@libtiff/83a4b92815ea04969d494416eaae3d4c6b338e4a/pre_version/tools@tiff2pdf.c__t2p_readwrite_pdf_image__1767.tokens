tsize_t t2p_readwrite_pdf_image ( T2P * t2p , TIFF * input , TIFF * output ) { //<S2SV> tsize_t written = 0 ; //<S2SV> unsigned char * buffer = NULL ; //<S2SV> unsigned char * samplebuffer = NULL ; //<S2SV> tsize_t bufferoffset = 0 ; //<S2SV> tsize_t samplebufferoffset = 0 ; //<S2SV> tsize_t read = 0 ; //<S2SV> tstrip_t i = 0 ; //<S2SV> tstrip_t j = 0 ; //<S2SV> tstrip_t stripcount = 0 ; //<S2SV> tsize_t stripsize = 0 ; //<S2SV> tsize_t sepstripcount = 0 ; //<S2SV> tsize_t sepstripsize = 0 ; //<S2SV> # ifdef OJPEG_SUPPORT //<S2SV> toff_t inputoffset = 0 ; //<S2SV> uint16 h_samp = 1 ; //<S2SV> uint16 v_samp = 1 ; //<S2SV> uint16 ri = 1 ; //<S2SV> uint32 rows = 0 ; //<S2SV> # endif //<S2SV> # ifdef JPEG_SUPPORT //<S2SV> unsigned char * jpt ; //<S2SV> float * xfloatp ; //<S2SV> uint64 * sbc ; //<S2SV> unsigned char * stripbuffer ; //<S2SV> tsize_t striplength = 0 ; //<S2SV> uint32 max_striplength = 0 ; //<S2SV> # endif //<S2SV> if ( t2p -> t2p_error != T2P_ERR_OK ) //<S2SV> return ( 0 ) ; //<S2SV> if ( t2p -> pdf_transcode == T2P_TRANSCODE_RAW ) { //<S2SV> # ifdef CCITT_SUPPORT //<S2SV> if ( t2p -> pdf_compression == T2P_COMPRESS_G4 ) { //<S2SV> buffer = ( unsigned char * ) //<S2SV> _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>" //<S2SV> "t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> if ( t2p -> tiff_fillorder == FILLORDER_LSB2MSB ) { //<S2SV> TIFFReverseBits ( buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> } //<S2SV> t2pWriteFile ( output , ( tdata_t ) buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( t2p -> tiff_datasize ) ; //<S2SV> } //<S2SV> # endif //<S2SV> # ifdef ZIP_SUPPORT //<S2SV> if ( t2p -> pdf_compression == T2P_COMPRESS_ZIP ) { //<S2SV> buffer = ( unsigned char * ) //<S2SV> _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> memset ( buffer , 0 , t2p -> tiff_datasize ) ; //<S2SV> TIFFReadRawStrip ( input , 0 , ( tdata_t ) buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> if ( t2p -> tiff_fillorder == FILLORDER_LSB2MSB ) { //<S2SV> TIFFReverseBits ( buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> } //<S2SV> t2pWriteFile ( output , ( tdata_t ) buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( t2p -> tiff_datasize ) ; //<S2SV> } //<S2SV> # endif //<S2SV> # ifdef OJPEG_SUPPORT //<S2SV> if ( t2p -> tiff_compression == COMPRESSION_OJPEG ) { //<S2SV> if ( t2p -> tiff_dataoffset != 0 ) { //<S2SV> buffer = ( unsigned char * ) //<S2SV> _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> memset ( buffer , 0 , t2p -> tiff_datasize ) ; //<S2SV> if ( t2p -> pdf_ojpegiflength == 0 ) { //<S2SV> inputoffset = t2pSeekFile ( input , 0 , //<S2SV> SEEK_CUR ) ; //<S2SV> t2pSeekFile ( input , //<S2SV> t2p -> tiff_dataoffset , //<S2SV> SEEK_SET ) ; //<S2SV> t2pReadFile ( input , ( tdata_t ) buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> t2pSeekFile ( input , inputoffset , //<S2SV> SEEK_SET ) ; //<S2SV> t2pWriteFile ( output , ( tdata_t ) buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( t2p -> tiff_datasize ) ; //<S2SV> } else { //<S2SV> inputoffset = t2pSeekFile ( input , 0 , //<S2SV> SEEK_CUR ) ; //<S2SV> t2pSeekFile ( input , //<S2SV> t2p -> tiff_dataoffset , //<S2SV> SEEK_SET ) ; //<S2SV> bufferoffset = t2pReadFile ( input , //<S2SV> ( tdata_t ) buffer , //<S2SV> t2p -> pdf_ojpegiflength ) ; //<S2SV> t2p -> pdf_ojpegiflength = 0 ; //<S2SV> t2pSeekFile ( input , inputoffset , //<S2SV> SEEK_SET ) ; //<S2SV> TIFFGetField ( input , //<S2SV> TIFFTAG_YCBCRSUBSAMPLING , //<S2SV> & h_samp , & v_samp ) ; //<S2SV> buffer [ bufferoffset ++ ] = 0xff ; //<S2SV> buffer [ bufferoffset ++ ] = 0xdd ; //<S2SV> buffer [ bufferoffset ++ ] = 0x00 ; //<S2SV> buffer [ bufferoffset ++ ] = 0x04 ; //<S2SV> h_samp *= 8 ; //<S2SV> v_samp *= 8 ; //<S2SV> ri = ( t2p -> tiff_width + h_samp - 1 ) / h_samp ; //<S2SV> TIFFGetField ( input , //<S2SV> TIFFTAG_ROWSPERSTRIP , //<S2SV> & rows ) ; //<S2SV> ri *= ( rows + v_samp - 1 ) / v_samp ; //<S2SV> buffer [ bufferoffset ++ ] = ( ri >> 8 ) & 0xff ; //<S2SV> buffer [ bufferoffset ++ ] = ri & 0xff ; //<S2SV> stripcount = TIFFNumberOfStrips ( input ) ; //<S2SV> for ( i = 0 ; i < stripcount ; i ++ ) { //<S2SV> if ( i != 0 ) { //<S2SV> buffer [ bufferoffset ++ ] = 0xff ; //<S2SV> buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) ) ; //<S2SV> } //<S2SV> bufferoffset += TIFFReadRawStrip ( input , //<S2SV> i , //<S2SV> ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , //<S2SV> - 1 ) ; //<S2SV> } //<S2SV> t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( bufferoffset ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( ! t2p -> pdf_ojpegdata ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "No<S2SV_blank>support<S2SV_blank>for<S2SV_blank>OJPEG<S2SV_blank>image<S2SV_blank>%s<S2SV_blank>with<S2SV_blank>bad<S2SV_blank>tables" , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> buffer = ( unsigned char * ) //<S2SV> _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> memset ( buffer , 0 , t2p -> tiff_datasize ) ; //<S2SV> _TIFFmemcpy ( buffer , t2p -> pdf_ojpegdata , t2p -> pdf_ojpegdatalength ) ; //<S2SV> bufferoffset = t2p -> pdf_ojpegdatalength ; //<S2SV> stripcount = TIFFNumberOfStrips ( input ) ; //<S2SV> for ( i = 0 ; i < stripcount ; i ++ ) { //<S2SV> if ( i != 0 ) { //<S2SV> buffer [ bufferoffset ++ ] = 0xff ; //<S2SV> buffer [ bufferoffset ++ ] = ( 0xd0 | ( ( i - 1 ) % 8 ) ) ; //<S2SV> } //<S2SV> bufferoffset += TIFFReadRawStrip ( input , //<S2SV> i , //<S2SV> ( tdata_t ) & ( ( ( unsigned char * ) buffer ) [ bufferoffset ] ) , //<S2SV> - 1 ) ; //<S2SV> } //<S2SV> if ( ! ( ( buffer [ bufferoffset - 1 ] == 0xd9 ) && ( buffer [ bufferoffset - 2 ] == 0xff ) ) ) { //<S2SV> buffer [ bufferoffset ++ ] = 0xff ; //<S2SV> buffer [ bufferoffset ++ ] = 0xd9 ; //<S2SV> } //<S2SV> t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( bufferoffset ) ; //<S2SV> # if 0 //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "No<S2SV_blank>support<S2SV_blank>for<S2SV_blank>OJPEG<S2SV_blank>image<S2SV_blank>%s<S2SV_blank>with<S2SV_blank>no<S2SV_blank>JPEG<S2SV_blank>File<S2SV_blank>Interchange<S2SV_blank>offset" , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # ifdef JPEG_SUPPORT //<S2SV> if ( t2p -> tiff_compression == COMPRESSION_JPEG ) { //<S2SV> uint32 count = 0 ; //<S2SV> buffer = ( unsigned char * ) //<S2SV> _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> memset ( buffer , 0 , t2p -> tiff_datasize ) ; //<S2SV> if ( TIFFGetField ( input , TIFFTAG_JPEGTABLES , & count , & jpt ) != 0 ) { //<S2SV> if ( count > 4 ) { //<S2SV> _TIFFmemcpy ( buffer , jpt , count ) ; //<S2SV> bufferoffset += count - 2 ; //<S2SV> } //<S2SV> } //<S2SV> stripcount = TIFFNumberOfStrips ( input ) ; //<S2SV> TIFFGetField ( input , TIFFTAG_STRIPBYTECOUNTS , & sbc ) ; //<S2SV> for ( i = 0 ; i < stripcount ; i ++ ) { //<S2SV> if ( sbc [ i ] > max_striplength ) max_striplength = sbc [ i ] ; //<S2SV> } //<S2SV> stripbuffer = ( unsigned char * ) //<S2SV> _TIFFmalloc ( max_striplength ) ; //<S2SV> if ( stripbuffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%u<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> max_striplength , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < stripcount ; i ++ ) { //<S2SV> striplength = TIFFReadRawStrip ( input , i , ( tdata_t ) stripbuffer , - 1 ) ; //<S2SV> if ( ! t2p_process_jpeg_strip ( //<S2SV> stripbuffer , //<S2SV> & striplength , //<S2SV> buffer , //<S2SV> & bufferoffset , //<S2SV> i , //<S2SV> t2p -> tiff_length ) ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>process<S2SV_blank>JPEG<S2SV_blank>data<S2SV_blank>in<S2SV_blank>input<S2SV_blank>file<S2SV_blank>%s" , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> _TIFFfree ( samplebuffer ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> buffer [ bufferoffset ++ ] = 0xff ; //<S2SV> buffer [ bufferoffset ++ ] = 0xd9 ; //<S2SV> t2pWriteFile ( output , ( tdata_t ) buffer , bufferoffset ) ; //<S2SV> _TIFFfree ( stripbuffer ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( bufferoffset ) ; //<S2SV> } //<S2SV> # endif //<S2SV> ( void ) 0 ; //<S2SV> } //<S2SV> if ( t2p -> pdf_sample == T2P_SAMPLE_NOTHING ) { //<S2SV> buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> memset ( buffer , 0 , t2p -> tiff_datasize ) ; //<S2SV> stripsize = TIFFStripSize ( input ) ; //<S2SV> stripcount = TIFFNumberOfStrips ( input ) ; //<S2SV> for ( i = 0 ; i < stripcount ; i ++ ) { //<S2SV> read = //<S2SV> TIFFReadEncodedStrip ( input , //<S2SV> i , //<S2SV> ( tdata_t ) & buffer [ bufferoffset ] , //<S2SV> TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) ) ; //<S2SV> if ( read == - 1 ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Error<S2SV_blank>on<S2SV_blank>decoding<S2SV_blank>strip<S2SV_blank>%u<S2SV_blank>of<S2SV_blank>%s" , //<S2SV> i , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> bufferoffset += read ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( t2p -> pdf_sample & T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG ) { //<S2SV> sepstripsize = TIFFStripSize ( input ) ; //<S2SV> sepstripcount = TIFFNumberOfStrips ( input ) ; //<S2SV> stripsize = sepstripsize * t2p -> tiff_samplesperpixel ; //<S2SV> stripcount = sepstripcount / t2p -> tiff_samplesperpixel ; //<S2SV> buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> memset ( buffer , 0 , t2p -> tiff_datasize ) ; //<S2SV> samplebuffer = ( unsigned char * ) _TIFFmalloc ( stripsize ) ; //<S2SV> if ( samplebuffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < stripcount ; i ++ ) { //<S2SV> samplebufferoffset = 0 ; //<S2SV> for ( j = 0 ; j < t2p -> tiff_samplesperpixel ; j ++ ) { //<S2SV> read = //<S2SV> TIFFReadEncodedStrip ( input , //<S2SV> i + j * stripcount , //<S2SV> ( tdata_t ) & ( samplebuffer [ samplebufferoffset ] ) , //<S2SV> TIFFmin ( sepstripsize , stripsize - samplebufferoffset ) ) ; //<S2SV> if ( read == - 1 ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Error<S2SV_blank>on<S2SV_blank>decoding<S2SV_blank>strip<S2SV_blank>%u<S2SV_blank>of<S2SV_blank>%s" , //<S2SV> i + j * stripcount , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> samplebufferoffset += read ; //<S2SV> } //<S2SV> t2p_sample_planar_separate_to_contig ( //<S2SV> t2p , //<S2SV> & ( buffer [ bufferoffset ] ) , //<S2SV> samplebuffer , //<S2SV> samplebufferoffset ) ; //<S2SV> bufferoffset += samplebufferoffset ; //<S2SV> } //<S2SV> _TIFFfree ( samplebuffer ) ; //<S2SV> goto dataready ; //<S2SV> } //<S2SV> buffer = ( unsigned char * ) _TIFFmalloc ( t2p -> tiff_datasize ) ; //<S2SV> if ( buffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> memset ( buffer , 0 , t2p -> tiff_datasize ) ; //<S2SV> stripsize = TIFFStripSize ( input ) ; //<S2SV> stripcount = TIFFNumberOfStrips ( input ) ; //<S2SV> for ( i = 0 ; i < stripcount ; i ++ ) { //<S2SV> read = //<S2SV> TIFFReadEncodedStrip ( input , //<S2SV> i , //<S2SV> ( tdata_t ) & buffer [ bufferoffset ] , //<S2SV> TIFFmin ( stripsize , t2p -> tiff_datasize - bufferoffset ) ) ; //<S2SV> if ( read == - 1 ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Error<S2SV_blank>on<S2SV_blank>decoding<S2SV_blank>strip<S2SV_blank>%u<S2SV_blank>of<S2SV_blank>%s" , //<S2SV> i , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> _TIFFfree ( samplebuffer ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> bufferoffset += read ; //<S2SV> } //<S2SV> if ( t2p -> pdf_sample & T2P_SAMPLE_REALIZE_PALETTE ) { //<S2SV> samplebuffer = ( unsigned char * ) _TIFFrealloc ( //<S2SV> ( tdata_t ) buffer , //<S2SV> t2p -> tiff_datasize * t2p -> tiff_samplesperpixel ) ; //<S2SV> if ( samplebuffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( 0 ) ; //<S2SV> } else { //<S2SV> buffer = samplebuffer ; //<S2SV> t2p -> tiff_datasize *= t2p -> tiff_samplesperpixel ; //<S2SV> } //<S2SV> t2p_sample_realize_palette ( t2p , buffer ) ; //<S2SV> } //<S2SV> if ( t2p -> pdf_sample & T2P_SAMPLE_RGBA_TO_RGB ) { //<S2SV> t2p -> tiff_datasize = t2p_sample_rgba_to_rgb ( //<S2SV> ( tdata_t ) buffer , //<S2SV> t2p -> tiff_width * t2p -> tiff_length ) ; //<S2SV> } //<S2SV> if ( t2p -> pdf_sample & T2P_SAMPLE_RGBAA_TO_RGB ) { //<S2SV> t2p -> tiff_datasize = t2p_sample_rgbaa_to_rgb ( //<S2SV> ( tdata_t ) buffer , //<S2SV> t2p -> tiff_width * t2p -> tiff_length ) ; //<S2SV> } //<S2SV> if ( t2p -> pdf_sample & T2P_SAMPLE_YCBCR_TO_RGB ) { //<S2SV> samplebuffer = ( unsigned char * ) _TIFFrealloc ( //<S2SV> ( tdata_t ) buffer , //<S2SV> t2p -> tiff_width * t2p -> tiff_length * 4 ) ; //<S2SV> if ( samplebuffer == NULL ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>t2p_readwrite_pdf_image,<S2SV_blank>%s" , //<S2SV> ( unsigned long ) t2p -> tiff_datasize , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> return ( 0 ) ; //<S2SV> } else { //<S2SV> buffer = samplebuffer ; //<S2SV> } //<S2SV> if ( ! TIFFReadRGBAImageOriented ( //<S2SV> input , //<S2SV> t2p -> tiff_width , //<S2SV> t2p -> tiff_length , //<S2SV> ( uint32 * ) buffer , //<S2SV> ORIENTATION_TOPLEFT , //<S2SV> 0 ) ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Can\'t<S2SV_blank>use<S2SV_blank>TIFFReadRGBAImageOriented<S2SV_blank>to<S2SV_blank>extract<S2SV_blank>RGB<S2SV_blank>image<S2SV_blank>from<S2SV_blank>%s" , //<S2SV> TIFFFileName ( input ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> t2p -> tiff_datasize = t2p_sample_abgr_to_rgb ( //<S2SV> ( tdata_t ) buffer , //<S2SV> t2p -> tiff_width * t2p -> tiff_length ) ; //<S2SV> } //<S2SV> if ( t2p -> pdf_sample & T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED ) { //<S2SV> t2p -> tiff_datasize = t2p_sample_lab_signed_to_unsigned ( //<S2SV> ( tdata_t ) buffer , //<S2SV> t2p -> tiff_width * t2p -> tiff_length ) ; //<S2SV> } //<S2SV> } //<S2SV> dataready : //<S2SV> t2p_disable ( output ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , t2p -> tiff_photometric ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_BITSPERSAMPLE , t2p -> tiff_bitspersample ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_SAMPLESPERPIXEL , t2p -> tiff_samplesperpixel ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_IMAGEWIDTH , t2p -> tiff_width ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_IMAGELENGTH , t2p -> tiff_length ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_ROWSPERSTRIP , t2p -> tiff_length ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_PLANARCONFIG , PLANARCONFIG_CONTIG ) ; //<S2SV> TIFFSetField ( output , TIFFTAG_FILLORDER , FILLORDER_MSB2LSB ) ; //<S2SV> switch ( t2p -> pdf_compression ) { //<S2SV> case T2P_COMPRESS_NONE : //<S2SV> TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_NONE ) ; //<S2SV> break ; //<S2SV> # ifdef CCITT_SUPPORT //<S2SV> case T2P_COMPRESS_G4 : //<S2SV> TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_CCITTFAX4 ) ; //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef JPEG_SUPPORT //<S2SV> case T2P_COMPRESS_JPEG : //<S2SV> if ( t2p -> tiff_photometric == PHOTOMETRIC_YCBCR ) { //<S2SV> uint16 hor = 0 , ver = 0 ; //<S2SV> if ( TIFFGetField ( input , TIFFTAG_YCBCRSUBSAMPLING , & hor , & ver ) != 0 ) { //<S2SV> if ( hor != 0 && ver != 0 ) { //<S2SV> TIFFSetField ( output , TIFFTAG_YCBCRSUBSAMPLING , hor , ver ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( TIFFGetField ( input , TIFFTAG_REFERENCEBLACKWHITE , & xfloatp ) != 0 ) { //<S2SV> TIFFSetField ( output , TIFFTAG_REFERENCEBLACKWHITE , xfloatp ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_JPEG ) == 0 ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Unable<S2SV_blank>to<S2SV_blank>use<S2SV_blank>JPEG<S2SV_blank>compression<S2SV_blank>for<S2SV_blank>input<S2SV_blank>%s<S2SV_blank>and<S2SV_blank>output<S2SV_blank>%s" , //<S2SV> TIFFFileName ( input ) , //<S2SV> TIFFFileName ( output ) ) ; //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> TIFFSetField ( output , TIFFTAG_JPEGTABLESMODE , 0 ) ; //<S2SV> if ( t2p -> pdf_colorspace & ( T2P_CS_RGB | T2P_CS_LAB ) ) { //<S2SV> TIFFSetField ( output , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ; //<S2SV> if ( t2p -> tiff_photometric != PHOTOMETRIC_YCBCR ) { //<S2SV> TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ; //<S2SV> } else { //<S2SV> TIFFSetField ( output , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RAW ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( t2p -> pdf_colorspace & T2P_CS_GRAY ) { //<S2SV> ( void ) 0 ; //<S2SV> } //<S2SV> if ( t2p -> pdf_colorspace & T2P_CS_CMYK ) { //<S2SV> ( void ) 0 ; //<S2SV> } //<S2SV> if ( t2p -> pdf_defaultcompressionquality != 0 ) { //<S2SV> TIFFSetField ( output , //<S2SV> TIFFTAG_JPEGQUALITY , //<S2SV> t2p -> pdf_defaultcompressionquality ) ; //<S2SV> } //<S2SV> break ; //<S2SV> # endif //<S2SV> # ifdef ZIP_SUPPORT //<S2SV> case T2P_COMPRESS_ZIP : //<S2SV> TIFFSetField ( output , TIFFTAG_COMPRESSION , COMPRESSION_DEFLATE ) ; //<S2SV> if ( t2p -> pdf_defaultcompressionquality % 100 != 0 ) { //<S2SV> TIFFSetField ( output , //<S2SV> TIFFTAG_PREDICTOR , //<S2SV> t2p -> pdf_defaultcompressionquality % 100 ) ; //<S2SV> } //<S2SV> if ( t2p -> pdf_defaultcompressionquality / 100 != 0 ) { //<S2SV> TIFFSetField ( output , //<S2SV> TIFFTAG_ZIPQUALITY , //<S2SV> ( t2p -> pdf_defaultcompressionquality / 100 ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> # endif //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> t2p_enable ( output ) ; //<S2SV> t2p -> outputwritten = 0 ; //<S2SV> # ifdef JPEG_SUPPORT //<S2SV> if ( t2p -> pdf_compression == T2P_COMPRESS_JPEG //<S2SV> && t2p -> tiff_photometric == PHOTOMETRIC_YCBCR ) { //<S2SV> bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , //<S2SV> buffer , //<S2SV> stripsize * stripcount ) ; //<S2SV> } else //<S2SV> # endif //<S2SV> { //<S2SV> bufferoffset = TIFFWriteEncodedStrip ( output , ( tstrip_t ) 0 , //<S2SV> buffer , //<S2SV> t2p -> tiff_datasize ) ; //<S2SV> } //<S2SV> if ( buffer != NULL ) { //<S2SV> _TIFFfree ( buffer ) ; //<S2SV> buffer = NULL ; //<S2SV> } //<S2SV> if ( bufferoffset == ( tsize_t ) - 1 ) { //<S2SV> TIFFError ( TIFF2PDF_MODULE , //<S2SV> "Error<S2SV_blank>writing<S2SV_blank>encoded<S2SV_blank>strip<S2SV_blank>to<S2SV_blank>output<S2SV_blank>PDF<S2SV_blank>%s" , //<S2SV> TIFFFileName ( output ) ) ; //<S2SV> t2p -> t2p_error = T2P_ERR_ERROR ; //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> written = t2p -> outputwritten ; //<S2SV> return ( written ) ; //<S2SV> } //<S2SV> 