static int //<S2SV> reverseSamplesBytes ( uint16 spp , uint16 bps , uint32 width , //<S2SV> uint8 * src , uint8 * dst ) //<S2SV> { //<S2SV> int i ; //<S2SV> uint32 col , bytes_per_pixel , col_offset ; //<S2SV> uint8 bytebuff1 ; //<S2SV> unsigned char swapbuff [ 32 ] ; //<S2SV> if ( ( src == NULL ) || ( dst == NULL ) ) //<S2SV> { //<S2SV> TIFFError ( "reverseSamplesBytes" , "Invalid<S2SV_blank>input<S2SV_blank>or<S2SV_blank>output<S2SV_blank>buffer" ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ; //<S2SV> switch ( bps / 8 ) //<S2SV> { //<S2SV> case 8 : //<S2SV> case 4 : //<S2SV> case 3 : //<S2SV> case 2 : for ( col = 0 ; col < ( width / 2 ) ; col ++ ) //<S2SV> { //<S2SV> col_offset = col * bytes_per_pixel ; //<S2SV> _TIFFmemcpy ( swapbuff , src + col_offset , bytes_per_pixel ) ; //<S2SV> _TIFFmemcpy ( src + col_offset , dst - col_offset - bytes_per_pixel , bytes_per_pixel ) ; //<S2SV> _TIFFmemcpy ( dst - col_offset - bytes_per_pixel , swapbuff , bytes_per_pixel ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 1 : //<S2SV> for ( col = 0 ; col < ( width / 2 ) ; col ++ ) //<S2SV> { //<S2SV> for ( i = 0 ; i < spp ; i ++ ) //<S2SV> { //<S2SV> bytebuff1 = * src ; //<S2SV> * src ++ = * ( dst - spp + i ) ; //<S2SV> * ( dst - spp + i ) = bytebuff1 ; //<S2SV> } //<S2SV> dst -= spp ; //<S2SV> } //<S2SV> break ; //<S2SV> default : TIFFError ( "reverseSamplesBytes" , "Unsupported<S2SV_blank>bit<S2SV_blank>depth<S2SV_blank>%d" , bps ) ; //<S2SV> return ( 1 ) ; //<S2SV> } //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> 