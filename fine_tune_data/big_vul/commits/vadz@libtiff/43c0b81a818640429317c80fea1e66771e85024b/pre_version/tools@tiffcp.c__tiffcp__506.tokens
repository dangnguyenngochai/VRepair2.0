static int //<S2SV> tiffcp ( TIFF * in , TIFF * out ) //<S2SV> { //<S2SV> uint16 bitspersample , samplesperpixel ; //<S2SV> uint16 input_compression , input_photometric ; //<S2SV> copyFunc cf ; //<S2SV> uint32 width , length ; //<S2SV> struct cpTag * p ; //<S2SV> CopyField ( TIFFTAG_IMAGEWIDTH , width ) ; //<S2SV> CopyField ( TIFFTAG_IMAGELENGTH , length ) ; //<S2SV> CopyField ( TIFFTAG_BITSPERSAMPLE , bitspersample ) ; //<S2SV> CopyField ( TIFFTAG_SAMPLESPERPIXEL , samplesperpixel ) ; //<S2SV> if ( compression != ( uint16 ) - 1 ) //<S2SV> TIFFSetField ( out , TIFFTAG_COMPRESSION , compression ) ; //<S2SV> else //<S2SV> CopyField ( TIFFTAG_COMPRESSION , compression ) ; //<S2SV> TIFFGetFieldDefaulted ( in , TIFFTAG_COMPRESSION , & input_compression ) ; //<S2SV> TIFFGetFieldDefaulted ( in , TIFFTAG_PHOTOMETRIC , & input_photometric ) ; //<S2SV> if ( input_compression == COMPRESSION_JPEG ) { //<S2SV> TIFFSetField ( in , TIFFTAG_JPEGCOLORMODE , JPEGCOLORMODE_RGB ) ; //<S2SV> } else if ( input_photometric == PHOTOMETRIC_YCBCR ) { //<S2SV> uint16 subsamplinghor , subsamplingver ; //<S2SV> TIFFGetFieldDefaulted ( in , TIFFTAG_YCBCRSUBSAMPLING , //<S2SV> & subsamplinghor , & subsamplingver ) ; //<S2SV> if ( subsamplinghor != 1 || subsamplingver != 1 ) { //<S2SV> fprintf ( stderr , "tiffcp:<S2SV_blank>%s:<S2SV_blank>Can\'t<S2SV_blank>copy/convert<S2SV_blank>subsampled<S2SV_blank>image.\\n" , //<S2SV> TIFFFileName ( in ) ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> } //<S2SV> if ( compression == COMPRESSION_JPEG ) { //<S2SV> if ( input_photometric == PHOTOMETRIC_RGB && //<S2SV> jpegcolormode == JPEGCOLORMODE_RGB ) //<S2SV> TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_YCBCR ) ; //<S2SV> else //<S2SV> TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , input_photometric ) ; //<S2SV> } //<S2SV> else if ( compression == COMPRESSION_SGILOG //<S2SV> || compression == COMPRESSION_SGILOG24 ) //<S2SV> TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , //<S2SV> samplesperpixel == 1 ? //<S2SV> PHOTOMETRIC_LOGL : PHOTOMETRIC_LOGLUV ) ; //<S2SV> else if ( input_compression == COMPRESSION_JPEG && //<S2SV> samplesperpixel == 3 ) { //<S2SV> TIFFSetField ( out , TIFFTAG_PHOTOMETRIC , PHOTOMETRIC_RGB ) ; //<S2SV> } //<S2SV> else //<S2SV> CopyTag ( TIFFTAG_PHOTOMETRIC , 1 , TIFF_SHORT ) ; //<S2SV> if ( fillorder != 0 ) //<S2SV> TIFFSetField ( out , TIFFTAG_FILLORDER , fillorder ) ; //<S2SV> else //<S2SV> CopyTag ( TIFFTAG_FILLORDER , 1 , TIFF_SHORT ) ; //<S2SV> TIFFGetFieldDefaulted ( in , TIFFTAG_ORIENTATION , & orientation ) ; //<S2SV> switch ( orientation ) { //<S2SV> case ORIENTATION_BOTRIGHT : //<S2SV> case ORIENTATION_RIGHTBOT : //<S2SV> TIFFWarning ( TIFFFileName ( in ) , "using<S2SV_blank>bottom-left<S2SV_blank>orientation" ) ; //<S2SV> orientation = ORIENTATION_BOTLEFT ; //<S2SV> case ORIENTATION_LEFTBOT : //<S2SV> case ORIENTATION_BOTLEFT : //<S2SV> break ; //<S2SV> case ORIENTATION_TOPRIGHT : //<S2SV> case ORIENTATION_RIGHTTOP : //<S2SV> default : //<S2SV> TIFFWarning ( TIFFFileName ( in ) , "using<S2SV_blank>top-left<S2SV_blank>orientation" ) ; //<S2SV> orientation = ORIENTATION_TOPLEFT ; //<S2SV> case ORIENTATION_LEFTTOP : //<S2SV> case ORIENTATION_TOPLEFT : //<S2SV> break ; //<S2SV> } //<S2SV> TIFFSetField ( out , TIFFTAG_ORIENTATION , orientation ) ; //<S2SV> if ( outtiled == - 1 ) //<S2SV> outtiled = TIFFIsTiled ( in ) ; //<S2SV> if ( outtiled ) { //<S2SV> if ( tilewidth == ( uint32 ) - 1 ) //<S2SV> TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tilewidth ) ; //<S2SV> if ( tilelength == ( uint32 ) - 1 ) //<S2SV> TIFFGetField ( in , TIFFTAG_TILELENGTH , & tilelength ) ; //<S2SV> TIFFDefaultTileSize ( out , & tilewidth , & tilelength ) ; //<S2SV> TIFFSetField ( out , TIFFTAG_TILEWIDTH , tilewidth ) ; //<S2SV> TIFFSetField ( out , TIFFTAG_TILELENGTH , tilelength ) ; //<S2SV> } else { //<S2SV> if ( rowsperstrip == ( uint32 ) 0 ) { //<S2SV> if ( ! TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , //<S2SV> & rowsperstrip ) ) { //<S2SV> rowsperstrip = //<S2SV> TIFFDefaultStripSize ( out , rowsperstrip ) ; //<S2SV> } //<S2SV> if ( rowsperstrip > length && rowsperstrip != ( uint32 ) - 1 ) //<S2SV> rowsperstrip = length ; //<S2SV> } //<S2SV> else if ( rowsperstrip == ( uint32 ) - 1 ) //<S2SV> rowsperstrip = length ; //<S2SV> TIFFSetField ( out , TIFFTAG_ROWSPERSTRIP , rowsperstrip ) ; //<S2SV> } //<S2SV> if ( config != ( uint16 ) - 1 ) //<S2SV> TIFFSetField ( out , TIFFTAG_PLANARCONFIG , config ) ; //<S2SV> else //<S2SV> CopyField ( TIFFTAG_PLANARCONFIG , config ) ; //<S2SV> if ( samplesperpixel <= 4 ) //<S2SV> CopyTag ( TIFFTAG_TRANSFERFUNCTION , 4 , TIFF_SHORT ) ; //<S2SV> CopyTag ( TIFFTAG_COLORMAP , 4 , TIFF_SHORT ) ; //<S2SV> switch ( compression ) { //<S2SV> case COMPRESSION_JPEG : //<S2SV> TIFFSetField ( out , TIFFTAG_JPEGQUALITY , quality ) ; //<S2SV> TIFFSetField ( out , TIFFTAG_JPEGCOLORMODE , jpegcolormode ) ; //<S2SV> break ; //<S2SV> case COMPRESSION_JBIG : //<S2SV> CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII ) ; //<S2SV> CopyTag ( TIFFTAG_FAXDCS , 1 , TIFF_ASCII ) ; //<S2SV> break ; //<S2SV> case COMPRESSION_LZW : //<S2SV> case COMPRESSION_ADOBE_DEFLATE : //<S2SV> case COMPRESSION_DEFLATE : //<S2SV> case COMPRESSION_LZMA : //<S2SV> if ( predictor != ( uint16 ) - 1 ) //<S2SV> TIFFSetField ( out , TIFFTAG_PREDICTOR , predictor ) ; //<S2SV> else //<S2SV> CopyField ( TIFFTAG_PREDICTOR , predictor ) ; //<S2SV> if ( preset != - 1 ) { //<S2SV> if ( compression == COMPRESSION_ADOBE_DEFLATE //<S2SV> || compression == COMPRESSION_DEFLATE ) //<S2SV> TIFFSetField ( out , TIFFTAG_ZIPQUALITY , preset ) ; //<S2SV> else if ( compression == COMPRESSION_LZMA ) //<S2SV> TIFFSetField ( out , TIFFTAG_LZMAPRESET , preset ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case COMPRESSION_CCITTFAX3 : //<S2SV> case COMPRESSION_CCITTFAX4 : //<S2SV> if ( compression == COMPRESSION_CCITTFAX3 ) { //<S2SV> if ( g3opts != ( uint32 ) - 1 ) //<S2SV> TIFFSetField ( out , TIFFTAG_GROUP3OPTIONS , //<S2SV> g3opts ) ; //<S2SV> else //<S2SV> CopyField ( TIFFTAG_GROUP3OPTIONS , g3opts ) ; //<S2SV> } else //<S2SV> CopyTag ( TIFFTAG_GROUP4OPTIONS , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_BADFAXLINES , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_CLEANFAXDATA , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_CONSECUTIVEBADFAXLINES , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_FAXRECVPARAMS , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_FAXRECVTIME , 1 , TIFF_LONG ) ; //<S2SV> CopyTag ( TIFFTAG_FAXSUBADDRESS , 1 , TIFF_ASCII ) ; //<S2SV> break ; //<S2SV> } //<S2SV> { //<S2SV> uint32 len32 ; //<S2SV> void * * data ; //<S2SV> if ( TIFFGetField ( in , TIFFTAG_ICCPROFILE , & len32 , & data ) ) //<S2SV> TIFFSetField ( out , TIFFTAG_ICCPROFILE , len32 , data ) ; //<S2SV> } //<S2SV> { //<S2SV> uint16 ninks ; //<S2SV> const char * inknames ; //<S2SV> if ( TIFFGetField ( in , TIFFTAG_NUMBEROFINKS , & ninks ) ) { //<S2SV> TIFFSetField ( out , TIFFTAG_NUMBEROFINKS , ninks ) ; //<S2SV> if ( TIFFGetField ( in , TIFFTAG_INKNAMES , & inknames ) ) { //<S2SV> int inknameslen = strlen ( inknames ) + 1 ; //<S2SV> const char * cp = inknames ; //<S2SV> while ( ninks > 1 ) { //<S2SV> cp = strchr ( cp , '\\0' ) ; //<S2SV> cp ++ ; //<S2SV> inknameslen += ( strlen ( cp ) + 1 ) ; //<S2SV> ninks -- ; //<S2SV> } //<S2SV> TIFFSetField ( out , TIFFTAG_INKNAMES , inknameslen , inknames ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> unsigned short pg0 , pg1 ; //<S2SV> if ( pageInSeq == 1 ) { //<S2SV> if ( pageNum < 0 ) { //<S2SV> if ( TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 ) ) //<S2SV> TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 ) ; //<S2SV> } else //<S2SV> TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 ) ; //<S2SV> } else { //<S2SV> if ( TIFFGetField ( in , TIFFTAG_PAGENUMBER , & pg0 , & pg1 ) ) { //<S2SV> if ( pageNum < 0 ) //<S2SV> TIFFSetField ( out , TIFFTAG_PAGENUMBER , pg0 , pg1 ) ; //<S2SV> else //<S2SV> TIFFSetField ( out , TIFFTAG_PAGENUMBER , pageNum ++ , 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( p = tags ; p < & tags [ NTAGS ] ; p ++ ) //<S2SV> CopyTag ( p -> tag , p -> count , p -> type ) ; //<S2SV> cf = pickCopyFunc ( in , out , bitspersample , samplesperpixel ) ; //<S2SV> return ( cf ? ( * cf ) ( in , out , length , width , samplesperpixel ) : FALSE ) ; //<S2SV> } //<S2SV> 