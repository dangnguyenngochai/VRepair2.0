static void //<S2SV> horDiff8 ( TIFF * tif , uint8 * cp0 , tmsize_t cc ) //<S2SV> { //<S2SV> TIFFPredictorState * sp = PredictorState ( tif ) ; //<S2SV> tmsize_t stride = sp -> stride ; //<S2SV> unsigned char * cp = ( unsigned char * ) cp0 ; //<S2SV> assert ( ( cc % stride ) == 0 ) ; //<S2SV> if ( cc > stride ) { //<S2SV> cc -= stride ; //<S2SV> if ( stride == 3 ) { //<S2SV> unsigned int r1 , g1 , b1 ; //<S2SV> unsigned int r2 = cp [ 0 ] ; //<S2SV> unsigned int g2 = cp [ 1 ] ; //<S2SV> unsigned int b2 = cp [ 2 ] ; //<S2SV> do { //<S2SV> r1 = cp [ 3 ] ; cp [ 3 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff ) ; r2 = r1 ; //<S2SV> g1 = cp [ 4 ] ; cp [ 4 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff ) ; g2 = g1 ; //<S2SV> b1 = cp [ 5 ] ; cp [ 5 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff ) ; b2 = b1 ; //<S2SV> cp += 3 ; //<S2SV> } while ( ( cc -= 3 ) > 0 ) ; //<S2SV> } else if ( stride == 4 ) { //<S2SV> unsigned int r1 , g1 , b1 , a1 ; //<S2SV> unsigned int r2 = cp [ 0 ] ; //<S2SV> unsigned int g2 = cp [ 1 ] ; //<S2SV> unsigned int b2 = cp [ 2 ] ; //<S2SV> unsigned int a2 = cp [ 3 ] ; //<S2SV> do { //<S2SV> r1 = cp [ 4 ] ; cp [ 4 ] = ( unsigned char ) ( ( r1 - r2 ) & 0xff ) ; r2 = r1 ; //<S2SV> g1 = cp [ 5 ] ; cp [ 5 ] = ( unsigned char ) ( ( g1 - g2 ) & 0xff ) ; g2 = g1 ; //<S2SV> b1 = cp [ 6 ] ; cp [ 6 ] = ( unsigned char ) ( ( b1 - b2 ) & 0xff ) ; b2 = b1 ; //<S2SV> a1 = cp [ 7 ] ; cp [ 7 ] = ( unsigned char ) ( ( a1 - a2 ) & 0xff ) ; a2 = a1 ; //<S2SV> cp += 4 ; //<S2SV> } while ( ( cc -= 4 ) > 0 ) ; //<S2SV> } else { //<S2SV> cp += cc - 1 ; //<S2SV> do { //<S2SV> REPEAT4 ( stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff ) ; cp -- ) //<S2SV> } while ( ( cc -= stride ) > 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 