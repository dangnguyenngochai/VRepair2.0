static void //<S2SV> horAcc8 ( TIFF * tif , uint8 * cp0 , tmsize_t cc ) //<S2SV> { //<S2SV> tmsize_t stride = PredictorState ( tif ) -> stride ; //<S2SV> unsigned char * cp = ( unsigned char * ) cp0 ; //<S2SV> assert ( ( cc % stride ) == 0 ) ; //<S2SV> if ( cc > stride ) { //<S2SV> if ( stride == 3 ) { //<S2SV> unsigned int cr = cp [ 0 ] ; //<S2SV> unsigned int cg = cp [ 1 ] ; //<S2SV> unsigned int cb = cp [ 2 ] ; //<S2SV> cc -= 3 ; //<S2SV> cp += 3 ; //<S2SV> while ( cc > 0 ) { //<S2SV> cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff ) ; //<S2SV> cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff ) ; //<S2SV> cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff ) ; //<S2SV> cc -= 3 ; //<S2SV> cp += 3 ; //<S2SV> } //<S2SV> } else if ( stride == 4 ) { //<S2SV> unsigned int cr = cp [ 0 ] ; //<S2SV> unsigned int cg = cp [ 1 ] ; //<S2SV> unsigned int cb = cp [ 2 ] ; //<S2SV> unsigned int ca = cp [ 3 ] ; //<S2SV> cc -= 4 ; //<S2SV> cp += 4 ; //<S2SV> while ( cc > 0 ) { //<S2SV> cp [ 0 ] = ( unsigned char ) ( ( cr += cp [ 0 ] ) & 0xff ) ; //<S2SV> cp [ 1 ] = ( unsigned char ) ( ( cg += cp [ 1 ] ) & 0xff ) ; //<S2SV> cp [ 2 ] = ( unsigned char ) ( ( cb += cp [ 2 ] ) & 0xff ) ; //<S2SV> cp [ 3 ] = ( unsigned char ) ( ( ca += cp [ 3 ] ) & 0xff ) ; //<S2SV> cc -= 4 ; //<S2SV> cp += 4 ; //<S2SV> } //<S2SV> } else { //<S2SV> cc -= stride ; //<S2SV> do { //<S2SV> REPEAT4 ( stride , cp [ stride ] = //<S2SV> ( unsigned char ) ( ( cp [ stride ] + * cp ) & 0xff ) ; cp ++ ) //<S2SV> cc -= stride ; //<S2SV> } while ( cc > 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 