static void //<S2SV> fpDiff ( TIFF * tif , uint8 * cp0 , tmsize_t cc ) //<S2SV> { //<S2SV> tmsize_t stride = PredictorState ( tif ) -> stride ; //<S2SV> uint32 bps = tif -> tif_dir . td_bitspersample / 8 ; //<S2SV> tmsize_t wc = cc / bps ; //<S2SV> tmsize_t count ; //<S2SV> uint8 * cp = ( uint8 * ) cp0 ; //<S2SV> uint8 * tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; //<S2SV> assert ( ( cc % ( bps * stride ) ) == 0 ) ; //<S2SV> if ( ! tmp ) //<S2SV> return ; //<S2SV> _TIFFmemcpy ( tmp , cp0 , cc ) ; //<S2SV> for ( count = 0 ; count < wc ; count ++ ) { //<S2SV> uint32 byte ; //<S2SV> for ( byte = 0 ; byte < bps ; byte ++ ) { //<S2SV> # if WORDS_BIGENDIAN //<S2SV> cp [ byte * wc + count ] = tmp [ bps * count + byte ] ; //<S2SV> # else //<S2SV> cp [ ( bps - byte - 1 ) * wc + count ] = //<S2SV> tmp [ bps * count + byte ] ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> _TIFFfree ( tmp ) ; //<S2SV> cp = ( uint8 * ) cp0 ; //<S2SV> cp += cc - stride - 1 ; //<S2SV> for ( count = cc ; count > stride ; count -= stride ) //<S2SV> REPEAT4 ( stride , cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] - cp [ 0 ] ) & 0xff ) ; cp -- ) //<S2SV> } //<S2SV> 