static copyFunc //<S2SV> pickCopyFunc ( TIFF * in , TIFF * out , uint16 bitspersample , uint16 samplesperpixel ) //<S2SV> { //<S2SV> uint16 shortv ; //<S2SV> uint32 w , l , tw , tl ; //<S2SV> int bychunk ; //<S2SV> ( void ) TIFFGetFieldDefaulted ( in , TIFFTAG_PLANARCONFIG , & shortv ) ; //<S2SV> if ( shortv != config && bitspersample != 8 && samplesperpixel > 1 ) { //<S2SV> fprintf ( stderr , //<S2SV> "%s:<S2SV_blank>Cannot<S2SV_blank>handle<S2SV_blank>different<S2SV_blank>planar<S2SV_blank>configuration<S2SV_blank>w/<S2SV_blank>bits/sample<S2SV_blank>!=<S2SV_blank>8\\n" , //<S2SV> TIFFFileName ( in ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> TIFFGetField ( in , TIFFTAG_IMAGEWIDTH , & w ) ; //<S2SV> TIFFGetField ( in , TIFFTAG_IMAGELENGTH , & l ) ; //<S2SV> if ( ! ( TIFFIsTiled ( out ) || TIFFIsTiled ( in ) ) ) { //<S2SV> uint32 irps = ( uint32 ) - 1L ; //<S2SV> TIFFGetField ( in , TIFFTAG_ROWSPERSTRIP , & irps ) ; //<S2SV> bychunk = ! bias && ( rowsperstrip == irps ) ; //<S2SV> } else { //<S2SV> if ( bias ) { //<S2SV> fprintf ( stderr , //<S2SV> "%s:<S2SV_blank>Cannot<S2SV_blank>handle<S2SV_blank>tiled<S2SV_blank>configuration<S2SV_blank>w/bias<S2SV_blank>image\\n" , //<S2SV> TIFFFileName ( in ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( TIFFIsTiled ( out ) ) { //<S2SV> if ( ! TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw ) ) //<S2SV> tw = w ; //<S2SV> if ( ! TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl ) ) //<S2SV> tl = l ; //<S2SV> bychunk = ( tw == tilewidth && tl == tilelength ) ; //<S2SV> } else { //<S2SV> TIFFGetField ( in , TIFFTAG_TILEWIDTH , & tw ) ; //<S2SV> TIFFGetField ( in , TIFFTAG_TILELENGTH , & tl ) ; //<S2SV> bychunk = ( tw == w && tl == rowsperstrip ) ; //<S2SV> } //<S2SV> } //<S2SV> # define T 1 //<S2SV> # define F 0 //<S2SV> # define pack ( a , b , c , d , e ) ( ( long ) ( ( ( a ) << 11 ) | ( ( b ) << 3 ) | ( ( c ) << 2 ) | ( ( d ) << 1 ) | ( e ) ) ) //<S2SV> switch ( pack ( shortv , config , TIFFIsTiled ( in ) , TIFFIsTiled ( out ) , bychunk ) ) { //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , F , T , F ) : //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , F , T , T ) : //<S2SV> return cpContigStrips2ContigTiles ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , F , T , F ) : //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , F , T , T ) : //<S2SV> return cpContigStrips2SeparateTiles ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , F , T , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , F , T , T ) : //<S2SV> return cpSeparateStrips2ContigTiles ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , F , T , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , F , T , T ) : //<S2SV> return cpSeparateStrips2SeparateTiles ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , T , T , F ) : //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , T , T , T ) : //<S2SV> return cpContigTiles2ContigTiles ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , T , T , F ) : //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , T , T , T ) : //<S2SV> return cpContigTiles2SeparateTiles ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , T , T , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , T , T , T ) : //<S2SV> return cpSeparateTiles2ContigTiles ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , T , T , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , T , T , T ) : //<S2SV> return cpSeparateTiles2SeparateTiles ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , T , F , F ) : //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , T , F , T ) : //<S2SV> return cpContigTiles2ContigStrips ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , T , F , F ) : //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , T , F , T ) : //<S2SV> return cpContigTiles2SeparateStrips ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , T , F , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , T , F , T ) : //<S2SV> return cpSeparateTiles2ContigStrips ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , T , F , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , T , F , T ) : //<S2SV> return cpSeparateTiles2SeparateStrips ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , F , F , F ) : //<S2SV> return bias ? cpBiasedContig2Contig : cpContig2ContigByRow ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_CONTIG , F , F , T ) : //<S2SV> return cpDecodedStrips ; //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , F , F , F ) : //<S2SV> case pack ( PLANARCONFIG_CONTIG , PLANARCONFIG_SEPARATE , F , F , T ) : //<S2SV> return cpContig2SeparateByRow ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , F , F , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_CONTIG , F , F , T ) : //<S2SV> return cpSeparate2ContigByRow ; //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , F , F , F ) : //<S2SV> case pack ( PLANARCONFIG_SEPARATE , PLANARCONFIG_SEPARATE , F , F , T ) : //<S2SV> return cpSeparate2SeparateByRow ; //<S2SV> } //<S2SV> # undef pack //<S2SV> # undef F //<S2SV> # undef T //<S2SV> fprintf ( stderr , "tiffcp:<S2SV_blank>%s:<S2SV_blank>Don\'t<S2SV_blank>know<S2SV_blank>how<S2SV_blank>to<S2SV_blank>copy/convert<S2SV_blank>image.\\n" , //<S2SV> TIFFFileName ( in ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> 