DECLAREcpFunc ( cpContig2SeparateByRow ) //<S2SV> { //<S2SV> tsize_t scanlinesizein = TIFFScanlineSize ( in ) ; //<S2SV> tsize_t scanlinesizeout = TIFFScanlineSize ( out ) ; //<S2SV> tdata_t inbuf ; //<S2SV> tdata_t outbuf ; //<S2SV> register uint8 * inp , * outp ; //<S2SV> register uint32 n ; //<S2SV> uint32 row ; //<S2SV> tsample_t s ; //<S2SV> uint16 bps = 0 ; //<S2SV> ( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ; //<S2SV> if ( bps != 8 ) //<S2SV> { //<S2SV> TIFFError ( TIFFFileName ( in ) , //<S2SV> "Error,<S2SV_blank>can<S2SV_blank>only<S2SV_blank>handle<S2SV_blank>BitsPerSample=8<S2SV_blank>in<S2SV_blank>%s" , //<S2SV> "cpContig2SeparateByRow" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> inbuf = _TIFFmalloc ( scanlinesizein ) ; //<S2SV> outbuf = _TIFFmalloc ( scanlinesizeout ) ; //<S2SV> if ( ! inbuf || ! outbuf ) //<S2SV> goto bad ; //<S2SV> _TIFFmemset ( inbuf , 0 , scanlinesizein ) ; //<S2SV> _TIFFmemset ( outbuf , 0 , scanlinesizeout ) ; //<S2SV> for ( s = 0 ; s < spp ; s ++ ) { //<S2SV> for ( row = 0 ; row < imagelength ; row ++ ) { //<S2SV> if ( TIFFReadScanline ( in , inbuf , row , 0 ) < 0 //<S2SV> && ! ignore ) { //<S2SV> TIFFError ( TIFFFileName ( in ) , //<S2SV> "Error,<S2SV_blank>can\'t<S2SV_blank>read<S2SV_blank>scanline<S2SV_blank>%lu" , //<S2SV> ( unsigned long ) row ) ; //<S2SV> goto bad ; //<S2SV> } //<S2SV> inp = ( ( uint8 * ) inbuf ) + s ; //<S2SV> outp = ( uint8 * ) outbuf ; //<S2SV> for ( n = imagewidth ; n -- > 0 ; ) { //<S2SV> * outp ++ = * inp ; //<S2SV> inp += spp ; //<S2SV> } //<S2SV> if ( TIFFWriteScanline ( out , outbuf , row , s ) < 0 ) { //<S2SV> TIFFError ( TIFFFileName ( out ) , //<S2SV> "Error,<S2SV_blank>can\'t<S2SV_blank>write<S2SV_blank>scanline<S2SV_blank>%lu" , //<S2SV> ( unsigned long ) row ) ; //<S2SV> goto bad ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( inbuf ) _TIFFfree ( inbuf ) ; //<S2SV> if ( outbuf ) _TIFFfree ( outbuf ) ; //<S2SV> return 1 ; //<S2SV> bad : //<S2SV> if ( inbuf ) _TIFFfree ( inbuf ) ; //<S2SV> if ( outbuf ) _TIFFfree ( outbuf ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 