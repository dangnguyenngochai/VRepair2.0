static int readContigTilesIntoBuffer ( TIFF * in , uint8 * buf , //<S2SV> uint32 imagelength , //<S2SV> uint32 imagewidth , //<S2SV> uint32 tw , uint32 tl , //<S2SV> tsample_t spp , uint16 bps ) //<S2SV> { //<S2SV> int status = 1 ; //<S2SV> tsample_t sample = 0 ; //<S2SV> tsample_t count = spp ; //<S2SV> uint32 row , col , trow ; //<S2SV> uint32 nrow , ncol ; //<S2SV> uint32 dst_rowsize , shift_width ; //<S2SV> uint32 bytes_per_sample , bytes_per_pixel ; //<S2SV> uint32 trailing_bits , prev_trailing_bits ; //<S2SV> uint32 tile_rowsize = TIFFTileRowSize ( in ) ; //<S2SV> uint32 src_offset , dst_offset ; //<S2SV> uint32 row_offset , col_offset ; //<S2SV> uint8 * bufp = ( uint8 * ) buf ; //<S2SV> unsigned char * src = NULL ; //<S2SV> unsigned char * dst = NULL ; //<S2SV> tsize_t tbytes = 0 , tile_buffsize = 0 ; //<S2SV> tsize_t tilesize = TIFFTileSize ( in ) ; //<S2SV> unsigned char * tilebuf = NULL ; //<S2SV> bytes_per_sample = ( bps + 7 ) / 8 ; //<S2SV> bytes_per_pixel = ( ( bps * spp ) + 7 ) / 8 ; //<S2SV> if ( ( bps % 8 ) == 0 ) //<S2SV> shift_width = 0 ; //<S2SV> else //<S2SV> { //<S2SV> if ( bytes_per_pixel < ( bytes_per_sample + 1 ) ) //<S2SV> shift_width = bytes_per_pixel ; //<S2SV> else //<S2SV> shift_width = bytes_per_sample + 1 ; //<S2SV> } //<S2SV> tile_buffsize = tilesize ; //<S2SV> if ( tilesize == 0 || tile_rowsize == 0 ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , "Tile<S2SV_blank>size<S2SV_blank>or<S2SV_blank>tile<S2SV_blank>rowsize<S2SV_blank>is<S2SV_blank>zero" ) ; //<S2SV> exit ( - 1 ) ; //<S2SV> } //<S2SV> if ( tilesize < ( tsize_t ) ( tl * tile_rowsize ) ) //<S2SV> { //<S2SV> # ifdef DEBUG2 //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , //<S2SV> "Tilesize<S2SV_blank>%lu<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small,<S2SV_blank>using<S2SV_blank>alternate<S2SV_blank>calculation<S2SV_blank>%u" , //<S2SV> tilesize , tl * tile_rowsize ) ; //<S2SV> # endif //<S2SV> tile_buffsize = tl * tile_rowsize ; //<S2SV> if ( tl != ( tile_buffsize / tile_rowsize ) ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , "Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>buffer<S2SV_blank>size." ) ; //<S2SV> exit ( - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( tile_buffsize > 0xFFFFFFFFU - 3 ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , "Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>buffer<S2SV_blank>size." ) ; //<S2SV> exit ( - 1 ) ; //<S2SV> } //<S2SV> tilebuf = _TIFFmalloc ( tile_buffsize + 3 ) ; //<S2SV> if ( tilebuf == 0 ) //<S2SV> return 0 ; //<S2SV> tilebuf [ tile_buffsize ] = 0 ; //<S2SV> tilebuf [ tile_buffsize + 1 ] = 0 ; //<S2SV> tilebuf [ tile_buffsize + 2 ] = 0 ; //<S2SV> dst_rowsize = ( ( imagewidth * bps * spp ) + 7 ) / 8 ; //<S2SV> for ( row = 0 ; row < imagelength ; row += tl ) //<S2SV> { //<S2SV> nrow = ( row + tl > imagelength ) ? imagelength - row : tl ; //<S2SV> for ( col = 0 ; col < imagewidth ; col += tw ) //<S2SV> { //<S2SV> tbytes = TIFFReadTile ( in , tilebuf , col , row , 0 , 0 ) ; //<S2SV> if ( tbytes < tilesize && ! ignore ) //<S2SV> { //<S2SV> TIFFError ( TIFFFileName ( in ) , //<S2SV> "Error,<S2SV_blank>can\'t<S2SV_blank>read<S2SV_blank>tile<S2SV_blank>at<S2SV_blank>row<S2SV_blank>%lu<S2SV_blank>col<S2SV_blank>%lu,<S2SV_blank>Read<S2SV_blank>%lu<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>%lu" , //<S2SV> ( unsigned long ) col , ( unsigned long ) row , ( unsigned long ) tbytes , //<S2SV> ( unsigned long ) tilesize ) ; //<S2SV> status = 0 ; //<S2SV> _TIFFfree ( tilebuf ) ; //<S2SV> return status ; //<S2SV> } //<S2SV> row_offset = row * dst_rowsize ; //<S2SV> col_offset = ( ( col * bps * spp ) + 7 ) / 8 ; //<S2SV> bufp = buf + row_offset + col_offset ; //<S2SV> if ( col + tw > imagewidth ) //<S2SV> ncol = imagewidth - col ; //<S2SV> else //<S2SV> ncol = tw ; //<S2SV> if ( ( ( bps % 8 ) == 0 ) && ( count == spp ) ) //<S2SV> { //<S2SV> for ( trow = 0 ; trow < nrow ; trow ++ ) //<S2SV> { //<S2SV> src_offset = trow * tile_rowsize ; //<S2SV> _TIFFmemcpy ( bufp , tilebuf + src_offset , ( ncol * spp * bps ) / 8 ) ; //<S2SV> bufp += ( imagewidth * bps * spp ) / 8 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> prev_trailing_bits = trailing_bits = 0 ; //<S2SV> trailing_bits = ( ncol * bps * spp ) % 8 ; //<S2SV> for ( trow = 0 ; trow < nrow ; trow ++ ) //<S2SV> { //<S2SV> src_offset = trow * tile_rowsize ; //<S2SV> src = tilebuf + src_offset ; //<S2SV> dst_offset = ( row + trow ) * dst_rowsize ; //<S2SV> dst = buf + dst_offset + col_offset ; //<S2SV> switch ( shift_width ) //<S2SV> { //<S2SV> case 0 : if ( extractContigSamplesBytes ( src , dst , ncol , sample , //<S2SV> spp , bps , count , 0 , ncol ) ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , //<S2SV> "Unable<S2SV_blank>to<S2SV_blank>extract<S2SV_blank>row<S2SV_blank>%d<S2SV_blank>from<S2SV_blank>tile<S2SV_blank>%lu" , //<S2SV> row , ( unsigned long ) TIFFCurrentTile ( in ) ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case 1 : if ( bps == 1 ) //<S2SV> { //<S2SV> if ( extractContigSamplesShifted8bits ( src , dst , ncol , //<S2SV> sample , spp , //<S2SV> bps , count , //<S2SV> 0 , ncol , //<S2SV> prev_trailing_bits ) ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , //<S2SV> "Unable<S2SV_blank>to<S2SV_blank>extract<S2SV_blank>row<S2SV_blank>%d<S2SV_blank>from<S2SV_blank>tile<S2SV_blank>%lu" , //<S2SV> row , ( unsigned long ) TIFFCurrentTile ( in ) ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> else //<S2SV> if ( extractContigSamplesShifted16bits ( src , dst , ncol , //<S2SV> sample , spp , //<S2SV> bps , count , //<S2SV> 0 , ncol , //<S2SV> prev_trailing_bits ) ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , //<S2SV> "Unable<S2SV_blank>to<S2SV_blank>extract<S2SV_blank>row<S2SV_blank>%d<S2SV_blank>from<S2SV_blank>tile<S2SV_blank>%lu" , //<S2SV> row , ( unsigned long ) TIFFCurrentTile ( in ) ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case 2 : if ( extractContigSamplesShifted24bits ( src , dst , ncol , //<S2SV> sample , spp , //<S2SV> bps , count , //<S2SV> 0 , ncol , //<S2SV> prev_trailing_bits ) ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , //<S2SV> "Unable<S2SV_blank>to<S2SV_blank>extract<S2SV_blank>row<S2SV_blank>%d<S2SV_blank>from<S2SV_blank>tile<S2SV_blank>%lu" , //<S2SV> row , ( unsigned long ) TIFFCurrentTile ( in ) ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> case 3 : //<S2SV> case 4 : //<S2SV> case 5 : if ( extractContigSamplesShifted32bits ( src , dst , ncol , //<S2SV> sample , spp , //<S2SV> bps , count , //<S2SV> 0 , ncol , //<S2SV> prev_trailing_bits ) ) //<S2SV> { //<S2SV> TIFFError ( "readContigTilesIntoBuffer" , //<S2SV> "Unable<S2SV_blank>to<S2SV_blank>extract<S2SV_blank>row<S2SV_blank>%d<S2SV_blank>from<S2SV_blank>tile<S2SV_blank>%lu" , //<S2SV> row , ( unsigned long ) TIFFCurrentTile ( in ) ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : TIFFError ( "readContigTilesIntoBuffer" , "Unsupported<S2SV_blank>bit<S2SV_blank>depth<S2SV_blank>%d" , bps ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> } //<S2SV> prev_trailing_bits += trailing_bits ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> _TIFFfree ( tilebuf ) ; //<S2SV> return status ; //<S2SV> } //<S2SV> 