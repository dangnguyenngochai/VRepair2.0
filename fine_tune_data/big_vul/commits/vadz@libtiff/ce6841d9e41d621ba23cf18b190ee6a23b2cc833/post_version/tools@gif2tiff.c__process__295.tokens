int //<S2SV> process ( register int code , unsigned char * * fill ) //<S2SV> { //<S2SV> int incode ; //<S2SV> static unsigned char firstchar ; //<S2SV> if ( code == clear ) { //<S2SV> codesize = datasize + 1 ; //<S2SV> codemask = ( 1 << codesize ) - 1 ; //<S2SV> avail = clear + 2 ; //<S2SV> oldcode = - 1 ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( oldcode == - 1 ) { //<S2SV> if ( code >= clear ) { //<S2SV> fprintf ( stderr , "bad<S2SV_blank>input:<S2SV_blank>code=%d<S2SV_blank>is<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>clear=%d\\n" , code , clear ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> * ( * fill ) ++ = suffix [ code ] ; //<S2SV> firstchar = oldcode = code ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( code > avail ) { //<S2SV> fprintf ( stderr , "code<S2SV_blank>%d<S2SV_blank>too<S2SV_blank>large<S2SV_blank>for<S2SV_blank>%d\\n" , code , avail ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> incode = code ; //<S2SV> if ( code == avail ) { //<S2SV> * stackp ++ = firstchar ; //<S2SV> code = oldcode ; //<S2SV> } //<S2SV> while ( code > clear ) { //<S2SV> * stackp ++ = suffix [ code ] ; //<S2SV> code = prefix [ code ] ; //<S2SV> } //<S2SV> * stackp ++ = firstchar = suffix [ code ] ; //<S2SV> prefix [ avail ] = oldcode ; //<S2SV> suffix [ avail ] = firstchar ; //<S2SV> avail ++ ; //<S2SV> if ( ( ( avail & codemask ) == 0 ) && ( avail < 4096 ) ) { //<S2SV> codesize ++ ; //<S2SV> codemask += avail ; //<S2SV> } //<S2SV> oldcode = incode ; //<S2SV> do { //<S2SV> * ( * fill ) ++ = * -- stackp ; //<S2SV> } while ( stackp > stack ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 