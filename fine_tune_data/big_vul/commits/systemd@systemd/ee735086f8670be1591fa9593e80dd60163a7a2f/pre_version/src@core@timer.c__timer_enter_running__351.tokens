static void timer_enter_running ( Timer * t ) { //<S2SV> _cleanup_bus_error_free_ sd_bus_error error = SD_BUS_ERROR_NULL ; //<S2SV> int r ; //<S2SV> assert ( t ) ; //<S2SV> if ( unit_stop_pending ( UNIT ( t ) ) ) //<S2SV> return ; //<S2SV> r = manager_add_job ( UNIT ( t ) -> manager , JOB_START , UNIT_TRIGGER ( UNIT ( t ) ) , //<S2SV> JOB_REPLACE , true , & error , NULL ) ; //<S2SV> if ( r < 0 ) //<S2SV> goto fail ; //<S2SV> dual_timestamp_get ( & t -> last_trigger ) ; //<S2SV> if ( t -> stamp_path ) //<S2SV> touch_file ( t -> stamp_path , true , t -> last_trigger . realtime , UID_INVALID , GID_INVALID , 0 ) ; //<S2SV> timer_set_state ( t , TIMER_RUNNING ) ; //<S2SV> return ; //<S2SV> fail : //<S2SV> log_unit_warning ( UNIT ( t ) , "Failed<S2SV_blank>to<S2SV_blank>queue<S2SV_blank>unit<S2SV_blank>startup<S2SV_blank>job:<S2SV_blank>%s" , bus_error_message ( & error , r ) ) ; //<S2SV> timer_enter_dead ( t , TIMER_FAILURE_RESOURCES ) ; //<S2SV> } //<S2SV> 