static int find_source_vc ( char * * ret_path , unsigned * ret_idx ) { //<S2SV> _cleanup_free_ char * path = NULL ; //<S2SV> int r , err = 0 ; //<S2SV> unsigned i ; //<S2SV> path = new ( char , sizeof ( "/dev/tty63" ) ) ; //<S2SV> if ( ! path ) //<S2SV> return log_oom ( ) ; //<S2SV> for ( i = 1 ; i <= 63 ; i ++ ) { //<S2SV> _cleanup_close_ int fd = - 1 ; //<S2SV> r = verify_vc_allocation ( i ) ; //<S2SV> if ( r < 0 ) { //<S2SV> if ( ! err ) //<S2SV> err = - r ; //<S2SV> continue ; //<S2SV> } //<S2SV> sprintf ( path , "/dev/tty%u" , i ) ; //<S2SV> fd = open_terminal ( path , O_RDWR | O_CLOEXEC | O_NOCTTY ) ; //<S2SV> if ( fd < 0 ) { //<S2SV> if ( ! err ) //<S2SV> err = - fd ; //<S2SV> continue ; //<S2SV> } //<S2SV> r = verify_vc_kbmode ( fd ) ; //<S2SV> if ( r < 0 ) { //<S2SV> if ( ! err ) //<S2SV> err = - r ; //<S2SV> continue ; //<S2SV> } //<S2SV> * ret_idx = i ; //<S2SV> * ret_path = TAKE_PTR ( path ) ; //<S2SV> return TAKE_FD ( fd ) ; //<S2SV> } //<S2SV> return log_error_errno ( err , "No<S2SV_blank>usable<S2SV_blank>source<S2SV_blank>console<S2SV_blank>found:<S2SV_blank>%m" ) ; //<S2SV> } //<S2SV> 