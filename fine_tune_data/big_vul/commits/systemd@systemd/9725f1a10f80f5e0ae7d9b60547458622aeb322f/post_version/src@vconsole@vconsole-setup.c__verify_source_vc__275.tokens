static int verify_source_vc ( char * * ret_path , const char * src_vc ) { //<S2SV> _cleanup_close_ int fd = - 1 ; //<S2SV> char * path ; //<S2SV> int r ; //<S2SV> fd = open_terminal ( src_vc , O_RDWR | O_CLOEXEC | O_NOCTTY ) ; //<S2SV> if ( fd < 0 ) //<S2SV> return log_error_errno ( fd , "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s:<S2SV_blank>%m" , src_vc ) ; //<S2SV> r = verify_vc_device ( fd ) ; //<S2SV> if ( r < 0 ) //<S2SV> return log_error_errno ( r , "Device<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>virtual<S2SV_blank>console:<S2SV_blank>%m" , src_vc ) ; //<S2SV> r = verify_vc_allocation_byfd ( fd ) ; //<S2SV> if ( r < 0 ) //<S2SV> return log_error_errno ( r , "Virtual<S2SV_blank>console<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>allocated:<S2SV_blank>%m" , src_vc ) ; //<S2SV> r = vt_verify_kbmode ( fd ) ; //<S2SV> if ( r < 0 ) //<S2SV> return log_error_errno ( r , "Virtual<S2SV_blank>console<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>in<S2SV_blank>K_XLATE<S2SV_blank>or<S2SV_blank>K_UNICODE:<S2SV_blank>%m" , src_vc ) ; //<S2SV> path = strdup ( src_vc ) ; //<S2SV> if ( ! path ) //<S2SV> return log_oom ( ) ; //<S2SV> * ret_path = path ; //<S2SV> return TAKE_FD ( fd ) ; //<S2SV> } //<S2SV> 