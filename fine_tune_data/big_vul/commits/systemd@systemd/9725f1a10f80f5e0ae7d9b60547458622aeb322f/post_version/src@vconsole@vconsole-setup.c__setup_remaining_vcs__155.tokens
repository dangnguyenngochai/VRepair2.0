static void setup_remaining_vcs ( int src_fd , unsigned src_idx , bool utf8 ) { //<S2SV> struct console_font_op cfo = { //<S2SV> . op = KD_FONT_OP_GET , //<S2SV> . width = UINT_MAX , . height = UINT_MAX , //<S2SV> . charcount = UINT_MAX , //<S2SV> } ; //<S2SV> struct unimapinit adv = { } ; //<S2SV> struct unimapdesc unimapd ; //<S2SV> _cleanup_free_ struct unipair * unipairs = NULL ; //<S2SV> _cleanup_free_ void * fontbuf = NULL ; //<S2SV> unsigned i ; //<S2SV> int r ; //<S2SV> unipairs = new ( struct unipair , USHRT_MAX ) ; //<S2SV> if ( ! unipairs ) { //<S2SV> log_oom ( ) ; //<S2SV> return ; //<S2SV> } //<S2SV> r = ioctl ( src_fd , KDFONTOP , & cfo ) ; //<S2SV> if ( r < 0 ) //<S2SV> log_warning_errno ( errno , "KD_FONT_OP_GET<S2SV_blank>failed<S2SV_blank>while<S2SV_blank>trying<S2SV_blank>to<S2SV_blank>get<S2SV_blank>the<S2SV_blank>font<S2SV_blank>metadata:<S2SV_blank>%m" ) ; //<S2SV> else { //<S2SV> if ( cfo . width > 32 || cfo . height > 32 || cfo . charcount > 512 ) //<S2SV> log_warning ( "Invalid<S2SV_blank>font<S2SV_blank>metadata<S2SV_blank>-<S2SV_blank>width:<S2SV_blank>%u<S2SV_blank>(max<S2SV_blank>32),<S2SV_blank>height:<S2SV_blank>%u<S2SV_blank>(max<S2SV_blank>32),<S2SV_blank>count:<S2SV_blank>%u<S2SV_blank>(max<S2SV_blank>512)" , //<S2SV> cfo . width , cfo . height , cfo . charcount ) ; //<S2SV> else { //<S2SV> fontbuf = malloc_multiply ( ( cfo . width + 7 ) / 8 * 32 , cfo . charcount ) ; //<S2SV> if ( ! fontbuf ) { //<S2SV> log_oom ( ) ; //<S2SV> return ; //<S2SV> } //<S2SV> cfo . data = fontbuf ; //<S2SV> r = ioctl ( src_fd , KDFONTOP , & cfo ) ; //<S2SV> if ( r < 0 ) //<S2SV> log_warning_errno ( errno , "KD_FONT_OP_GET<S2SV_blank>failed<S2SV_blank>while<S2SV_blank>trying<S2SV_blank>to<S2SV_blank>read<S2SV_blank>the<S2SV_blank>font<S2SV_blank>data:<S2SV_blank>%m" ) ; //<S2SV> else { //<S2SV> unimapd . entries = unipairs ; //<S2SV> unimapd . entry_ct = USHRT_MAX ; //<S2SV> r = ioctl ( src_fd , GIO_UNIMAP , & unimapd ) ; //<S2SV> if ( r < 0 ) //<S2SV> log_warning_errno ( errno , "GIO_UNIMAP<S2SV_blank>failed<S2SV_blank>while<S2SV_blank>trying<S2SV_blank>to<S2SV_blank>read<S2SV_blank>unicode<S2SV_blank>mappings:<S2SV_blank>%m" ) ; //<S2SV> else //<S2SV> cfo . op = KD_FONT_OP_SET ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( cfo . op != KD_FONT_OP_SET ) //<S2SV> log_warning ( "Fonts<S2SV_blank>will<S2SV_blank>not<S2SV_blank>be<S2SV_blank>copied<S2SV_blank>to<S2SV_blank>remaining<S2SV_blank>consoles" ) ; //<S2SV> for ( i = 1 ; i <= 63 ; i ++ ) { //<S2SV> char ttyname [ sizeof ( "/dev/tty63" ) ] ; //<S2SV> _cleanup_close_ int fd_d = - 1 ; //<S2SV> if ( i == src_idx || verify_vc_allocation ( i ) < 0 ) //<S2SV> continue ; //<S2SV> xsprintf ( ttyname , "/dev/tty%u" , i ) ; //<S2SV> fd_d = open_terminal ( ttyname , O_RDWR | O_CLOEXEC | O_NOCTTY ) ; //<S2SV> if ( fd_d < 0 ) { //<S2SV> log_warning_errno ( fd_d , "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>tty%u,<S2SV_blank>fonts<S2SV_blank>will<S2SV_blank>not<S2SV_blank>be<S2SV_blank>copied:<S2SV_blank>%m" , i ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( vt_verify_kbmode ( fd_d ) < 0 ) //<S2SV> continue ; //<S2SV> toggle_utf8 ( ttyname , fd_d , utf8 ) ; //<S2SV> if ( cfo . op != KD_FONT_OP_SET ) //<S2SV> continue ; //<S2SV> r = ioctl ( fd_d , KDFONTOP , & cfo ) ; //<S2SV> if ( r < 0 ) { //<S2SV> int last_errno , mode ; //<S2SV> last_errno = errno ; //<S2SV> if ( ioctl ( fd_d , KDGETMODE , & mode ) >= 0 && mode != KD_TEXT ) //<S2SV> log_debug ( "KD_FONT_OP_SET<S2SV_blank>skipped:<S2SV_blank>tty%u<S2SV_blank>is<S2SV_blank>not<S2SV_blank>in<S2SV_blank>text<S2SV_blank>mode" , i ) ; //<S2SV> else //<S2SV> log_warning_errno ( last_errno , "KD_FONT_OP_SET<S2SV_blank>failed,<S2SV_blank>fonts<S2SV_blank>will<S2SV_blank>not<S2SV_blank>be<S2SV_blank>copied<S2SV_blank>to<S2SV_blank>tty%u:<S2SV_blank>%m" , i ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> r = ioctl ( fd_d , PIO_UNIMAPCLR , & adv ) ; //<S2SV> if ( r < 0 ) { //<S2SV> log_warning_errno ( errno , "PIO_UNIMAPCLR<S2SV_blank>failed,<S2SV_blank>unimaps<S2SV_blank>might<S2SV_blank>be<S2SV_blank>incorrect<S2SV_blank>for<S2SV_blank>tty%u:<S2SV_blank>%m" , i ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> r = ioctl ( fd_d , PIO_UNIMAP , & unimapd ) ; //<S2SV> if ( r < 0 ) { //<S2SV> log_warning_errno ( errno , "PIO_UNIMAP<S2SV_blank>failed,<S2SV_blank>unimaps<S2SV_blank>might<S2SV_blank>be<S2SV_blank>incorrect<S2SV_blank>for<S2SV_blank>tty%u:<S2SV_blank>%m" , i ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> log_debug ( "Font<S2SV_blank>and<S2SV_blank>unimap<S2SV_blank>successfully<S2SV_blank>copied<S2SV_blank>to<S2SV_blank>%s" , ttyname ) ; //<S2SV> } //<S2SV> } //<S2SV> 