static xmlChar * //<S2SV> xmlParseAttValueComplex ( xmlParserCtxtPtr ctxt , int * attlen , int normalize ) { //<S2SV> xmlChar limit = 0 ; //<S2SV> xmlChar * buf = NULL ; //<S2SV> xmlChar * rep = NULL ; //<S2SV> int len = 0 ; //<S2SV> int buf_size = 0 ; //<S2SV> int c , l , in_space = 0 ; //<S2SV> xmlChar * current = NULL ; //<S2SV> xmlEntityPtr ent ; //<S2SV> if ( NXT ( 0 ) == \'"\' ) { //<S2SV> ctxt -> instate = XML_PARSER_ATTRIBUTE_VALUE ; //<S2SV> limit = \'"\' ; //<S2SV> NEXT ; //<S2SV> } else if ( NXT ( 0 ) == '\\'' ) { //<S2SV> limit = '\\'' ; //<S2SV> ctxt -> instate = XML_PARSER_ATTRIBUTE_VALUE ; //<S2SV> NEXT ; //<S2SV> } else { //<S2SV> xmlFatalErr ( ctxt , XML_ERR_ATTRIBUTE_NOT_STARTED , NULL ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> buf_size = XML_PARSER_BUFFER_SIZE ; //<S2SV> buf = ( xmlChar * ) xmlMallocAtomic ( buf_size * sizeof ( xmlChar ) ) ; //<S2SV> if ( buf == NULL ) goto mem_error ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> while ( ( NXT ( 0 ) != limit ) && //<S2SV> ( IS_CHAR ( c ) ) && ( c != '<' ) ) { //<S2SV> if ( c == 0 ) break ; //<S2SV> if ( c == '&' ) { //<S2SV> in_space = 0 ; //<S2SV> if ( NXT ( 1 ) == '#' ) { //<S2SV> int val = xmlParseCharRef ( ctxt ) ; //<S2SV> if ( val == '&' ) { //<S2SV> if ( ctxt -> replaceEntities ) { //<S2SV> if ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> buf [ len ++ ] = '&' ; //<S2SV> } else { //<S2SV> if ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> buf [ len ++ ] = '&' ; //<S2SV> buf [ len ++ ] = '#' ; //<S2SV> buf [ len ++ ] = '3' ; //<S2SV> buf [ len ++ ] = '8' ; //<S2SV> buf [ len ++ ] = ';' ; //<S2SV> } //<S2SV> } else if ( val != 0 ) { //<S2SV> if ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> len += xmlCopyChar ( 0 , & buf [ len ] , val ) ; //<S2SV> } //<S2SV> } else { //<S2SV> ent = xmlParseEntityRef ( ctxt ) ; //<S2SV> ctxt -> nbentities ++ ; //<S2SV> if ( ent != NULL ) //<S2SV> ctxt -> nbentities += ent -> owner ; //<S2SV> if ( ( ent != NULL ) && //<S2SV> ( ent -> etype == XML_INTERNAL_PREDEFINED_ENTITY ) ) { //<S2SV> if ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> if ( ( ctxt -> replaceEntities == 0 ) && //<S2SV> ( ent -> content [ 0 ] == '&' ) ) { //<S2SV> buf [ len ++ ] = '&' ; //<S2SV> buf [ len ++ ] = '#' ; //<S2SV> buf [ len ++ ] = '3' ; //<S2SV> buf [ len ++ ] = '8' ; //<S2SV> buf [ len ++ ] = ';' ; //<S2SV> } else { //<S2SV> buf [ len ++ ] = ent -> content [ 0 ] ; //<S2SV> } //<S2SV> } else if ( ( ent != NULL ) && //<S2SV> ( ctxt -> replaceEntities != 0 ) ) { //<S2SV> if ( ent -> etype != XML_INTERNAL_PREDEFINED_ENTITY ) { //<S2SV> rep = xmlStringDecodeEntities ( ctxt , ent -> content , //<S2SV> XML_SUBSTITUTE_REF , //<S2SV> 0 , 0 , 0 ) ; //<S2SV> if ( rep != NULL ) { //<S2SV> current = rep ; //<S2SV> while ( * current != 0 ) { //<S2SV> if ( ( * current == 0xD ) || ( * current == 0xA ) || //<S2SV> ( * current == 0x9 ) ) { //<S2SV> buf [ len ++ ] = 0x20 ; //<S2SV> current ++ ; //<S2SV> } else //<S2SV> buf [ len ++ ] = * current ++ ; //<S2SV> if ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> } //<S2SV> xmlFree ( rep ) ; //<S2SV> rep = NULL ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> if ( ent -> content != NULL ) //<S2SV> buf [ len ++ ] = ent -> content [ 0 ] ; //<S2SV> } //<S2SV> } else if ( ent != NULL ) { //<S2SV> int i = xmlStrlen ( ent -> name ) ; //<S2SV> const xmlChar * cur = ent -> name ; //<S2SV> if ( ( ent -> etype != XML_INTERNAL_PREDEFINED_ENTITY ) && //<S2SV> ( ent -> content != NULL ) ) { //<S2SV> rep = xmlStringDecodeEntities ( ctxt , ent -> content , //<S2SV> XML_SUBSTITUTE_REF , 0 , 0 , 0 ) ; //<S2SV> if ( rep != NULL ) { //<S2SV> xmlFree ( rep ) ; //<S2SV> rep = NULL ; //<S2SV> } //<S2SV> } //<S2SV> buf [ len ++ ] = '&' ; //<S2SV> while ( len > buf_size - i - 10 ) { //<S2SV> growBuffer ( buf , i + 10 ) ; //<S2SV> } //<S2SV> for ( ; i > 0 ; i -- ) //<S2SV> buf [ len ++ ] = * cur ++ ; //<S2SV> buf [ len ++ ] = ';' ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> if ( ( c == 0x20 ) || ( c == 0xD ) || ( c == 0xA ) || ( c == 0x9 ) ) { //<S2SV> if ( ( len != 0 ) || ( ! normalize ) ) { //<S2SV> if ( ( ! normalize ) || ( ! in_space ) ) { //<S2SV> COPY_BUF ( l , buf , len , 0x20 ) ; //<S2SV> while ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> } //<S2SV> in_space = 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> in_space = 0 ; //<S2SV> COPY_BUF ( l , buf , len , c ) ; //<S2SV> if ( len > buf_size - 10 ) { //<S2SV> growBuffer ( buf , 10 ) ; //<S2SV> } //<S2SV> } //<S2SV> NEXTL ( l ) ; //<S2SV> } //<S2SV> GROW ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> } //<S2SV> if ( ( in_space ) && ( normalize ) ) { //<S2SV> while ( buf [ len - 1 ] == 0x20 ) len -- ; //<S2SV> } //<S2SV> buf [ len ] = 0 ; //<S2SV> if ( RAW == '<' ) { //<S2SV> xmlFatalErr ( ctxt , XML_ERR_LT_IN_ATTRIBUTE , NULL ) ; //<S2SV> } else if ( RAW != limit ) { //<S2SV> if ( ( c != 0 ) && ( ! IS_CHAR ( c ) ) ) { //<S2SV> xmlFatalErrMsg ( ctxt , XML_ERR_INVALID_CHAR , //<S2SV> "invalid<S2SV_blank>character<S2SV_blank>in<S2SV_blank>attribute<S2SV_blank>value\\n" ) ; //<S2SV> } else { //<S2SV> xmlFatalErrMsg ( ctxt , XML_ERR_ATTRIBUTE_NOT_FINISHED , //<S2SV> "AttValue:<S2SV_blank>\'<S2SV_blank>expected\\n" ) ; //<S2SV> } //<S2SV> } else //<S2SV> NEXT ; //<S2SV> if ( attlen != NULL ) * attlen = len ; //<S2SV> return ( buf ) ; //<S2SV> mem_error : //<S2SV> xmlErrMemory ( ctxt , NULL ) ; //<S2SV> if ( buf != NULL ) //<S2SV> xmlFree ( buf ) ; //<S2SV> if ( rep != NULL ) //<S2SV> xmlFree ( rep ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> 