void //<S2SV> xmlParseElement ( xmlParserCtxtPtr ctxt ) { //<S2SV> const xmlChar * name ; //<S2SV> const xmlChar * prefix = NULL ; //<S2SV> const xmlChar * URI = NULL ; //<S2SV> xmlParserNodeInfo node_info ; //<S2SV> int line , tlen ; //<S2SV> xmlNodePtr ret ; //<S2SV> int nsNr = ctxt -> nsNr ; //<S2SV> if ( ( ( unsigned int ) ctxt -> nameNr > xmlParserMaxDepth ) && //<S2SV> ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) { //<S2SV> xmlFatalErrMsgInt ( ctxt , XML_ERR_INTERNAL_ERROR , //<S2SV> "Excessive<S2SV_blank>depth<S2SV_blank>in<S2SV_blank>document:<S2SV_blank>%d<S2SV_blank>use<S2SV_blank>XML_PARSE_HUGE<S2SV_blank>option\\n" , //<S2SV> xmlParserMaxDepth ) ; //<S2SV> ctxt -> instate = XML_PARSER_EOF ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ctxt -> record_info ) { //<S2SV> node_info . begin_pos = ctxt -> input -> consumed + //<S2SV> ( CUR_PTR - ctxt -> input -> base ) ; //<S2SV> node_info . begin_line = ctxt -> input -> line ; //<S2SV> } //<S2SV> if ( ctxt -> spaceNr == 0 ) //<S2SV> spacePush ( ctxt , - 1 ) ; //<S2SV> else if ( * ctxt -> space == - 2 ) //<S2SV> spacePush ( ctxt , - 1 ) ; //<S2SV> else //<S2SV> spacePush ( ctxt , * ctxt -> space ) ; //<S2SV> line = ctxt -> input -> line ; //<S2SV> # ifdef LIBXML_SAX1_ENABLED //<S2SV> if ( ctxt -> sax2 ) //<S2SV> # endif //<S2SV> name = xmlParseStartTag2 ( ctxt , & prefix , & URI , & tlen ) ; //<S2SV> # ifdef LIBXML_SAX1_ENABLED //<S2SV> else //<S2SV> name = xmlParseStartTag ( ctxt ) ; //<S2SV> # endif //<S2SV> if ( name == NULL ) { //<S2SV> spacePop ( ctxt ) ; //<S2SV> return ; //<S2SV> } //<S2SV> namePush ( ctxt , name ) ; //<S2SV> ret = ctxt -> node ; //<S2SV> # ifdef LIBXML_VALID_ENABLED //<S2SV> if ( ctxt -> validate && ctxt -> wellFormed && ctxt -> myDoc && //<S2SV> ctxt -> node && ( ctxt -> node == ctxt -> myDoc -> children ) ) //<S2SV> ctxt -> valid &= xmlValidateRoot ( & ctxt -> vctxt , ctxt -> myDoc ) ; //<S2SV> # endif //<S2SV> if ( ( RAW == '/' ) && ( NXT ( 1 ) == '>' ) ) { //<S2SV> SKIP ( 2 ) ; //<S2SV> if ( ctxt -> sax2 ) { //<S2SV> if ( ( ctxt -> sax != NULL ) && ( ctxt -> sax -> endElementNs != NULL ) && //<S2SV> ( ! ctxt -> disableSAX ) ) //<S2SV> ctxt -> sax -> endElementNs ( ctxt -> userData , name , prefix , URI ) ; //<S2SV> # ifdef LIBXML_SAX1_ENABLED //<S2SV> } else { //<S2SV> if ( ( ctxt -> sax != NULL ) && ( ctxt -> sax -> endElement != NULL ) && //<S2SV> ( ! ctxt -> disableSAX ) ) //<S2SV> ctxt -> sax -> endElement ( ctxt -> userData , name ) ; //<S2SV> # endif //<S2SV> } //<S2SV> namePop ( ctxt ) ; //<S2SV> spacePop ( ctxt ) ; //<S2SV> if ( nsNr != ctxt -> nsNr ) //<S2SV> nsPop ( ctxt , ctxt -> nsNr - nsNr ) ; //<S2SV> if ( ret != NULL && ctxt -> record_info ) { //<S2SV> node_info . end_pos = ctxt -> input -> consumed + //<S2SV> ( CUR_PTR - ctxt -> input -> base ) ; //<S2SV> node_info . end_line = ctxt -> input -> line ; //<S2SV> node_info . node = ret ; //<S2SV> xmlParserAddNodeInfo ( ctxt , & node_info ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> if ( RAW == '>' ) { //<S2SV> NEXT1 ; //<S2SV> } else { //<S2SV> xmlFatalErrMsgStrIntStr ( ctxt , XML_ERR_GT_REQUIRED , //<S2SV> "Couldn\'t<S2SV_blank>find<S2SV_blank>end<S2SV_blank>of<S2SV_blank>Start<S2SV_blank>Tag<S2SV_blank>%s<S2SV_blank>line<S2SV_blank>%d\\n" , //<S2SV> name , line , NULL ) ; //<S2SV> nodePop ( ctxt ) ; //<S2SV> namePop ( ctxt ) ; //<S2SV> spacePop ( ctxt ) ; //<S2SV> if ( nsNr != ctxt -> nsNr ) //<S2SV> nsPop ( ctxt , ctxt -> nsNr - nsNr ) ; //<S2SV> if ( ret != NULL && ctxt -> record_info ) { //<S2SV> node_info . end_pos = ctxt -> input -> consumed + //<S2SV> ( CUR_PTR - ctxt -> input -> base ) ; //<S2SV> node_info . end_line = ctxt -> input -> line ; //<S2SV> node_info . node = ret ; //<S2SV> xmlParserAddNodeInfo ( ctxt , & node_info ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> xmlParseContent ( ctxt ) ; //<S2SV> if ( ! IS_BYTE_CHAR ( RAW ) ) { //<S2SV> xmlFatalErrMsgStrIntStr ( ctxt , XML_ERR_TAG_NOT_FINISHED , //<S2SV> "Premature<S2SV_blank>end<S2SV_blank>of<S2SV_blank>data<S2SV_blank>in<S2SV_blank>tag<S2SV_blank>%s<S2SV_blank>line<S2SV_blank>%d\\n" , //<S2SV> name , line , NULL ) ; //<S2SV> nodePop ( ctxt ) ; //<S2SV> namePop ( ctxt ) ; //<S2SV> spacePop ( ctxt ) ; //<S2SV> if ( nsNr != ctxt -> nsNr ) //<S2SV> nsPop ( ctxt , ctxt -> nsNr - nsNr ) ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ctxt -> sax2 ) { //<S2SV> xmlParseEndTag2 ( ctxt , prefix , URI , line , ctxt -> nsNr - nsNr , tlen ) ; //<S2SV> namePop ( ctxt ) ; //<S2SV> } //<S2SV> # ifdef LIBXML_SAX1_ENABLED //<S2SV> else //<S2SV> xmlParseEndTag1 ( ctxt , line ) ; //<S2SV> # endif //<S2SV> if ( ret != NULL && ctxt -> record_info ) { //<S2SV> node_info . end_pos = ctxt -> input -> consumed + //<S2SV> ( CUR_PTR - ctxt -> input -> base ) ; //<S2SV> node_info . end_line = ctxt -> input -> line ; //<S2SV> node_info . node = ret ; //<S2SV> xmlParserAddNodeInfo ( ctxt , & node_info ) ; //<S2SV> } //<S2SV> } //<S2SV> 