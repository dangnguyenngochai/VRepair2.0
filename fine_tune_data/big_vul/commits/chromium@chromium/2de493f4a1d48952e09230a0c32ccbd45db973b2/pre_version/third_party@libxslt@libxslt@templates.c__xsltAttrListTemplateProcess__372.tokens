xmlAttrPtr //<S2SV> xsltAttrListTemplateProcess ( xsltTransformContextPtr ctxt , //<S2SV> xmlNodePtr target , xmlAttrPtr attrs ) //<S2SV> { //<S2SV> xmlAttrPtr attr , copy , last ; //<S2SV> xmlNodePtr oldInsert , text ; //<S2SV> xmlNsPtr origNs = NULL , copyNs = NULL ; //<S2SV> const xmlChar * value ; //<S2SV> xmlChar * valueAVT ; //<S2SV> if ( ( ctxt == NULL ) || ( target == NULL ) || ( attrs == NULL ) ) //<S2SV> return ( NULL ) ; //<S2SV> oldInsert = ctxt -> insert ; //<S2SV> ctxt -> insert = target ; //<S2SV> if ( target -> properties ) { //<S2SV> last = target -> properties ; //<S2SV> while ( last -> next != NULL ) //<S2SV> last = last -> next ; //<S2SV> } else { //<S2SV> last = NULL ; //<S2SV> } //<S2SV> attr = attrs ; //<S2SV> do { //<S2SV> # ifdef XSLT_REFACTORED //<S2SV> if ( attr -> psvi == xsltXSLTAttrMarker ) { //<S2SV> goto next_attribute ; //<S2SV> } //<S2SV> # else //<S2SV> if ( ( attr -> ns != NULL ) && //<S2SV> xmlStrEqual ( attr -> ns -> href , XSLT_NAMESPACE ) ) //<S2SV> { //<S2SV> goto next_attribute ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( attr -> children != NULL ) { //<S2SV> if ( ( attr -> children -> type != XML_TEXT_NODE ) || //<S2SV> ( attr -> children -> next != NULL ) ) //<S2SV> { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>The<S2SV_blank>children<S2SV_blank>of<S2SV_blank>an<S2SV_blank>attribute<S2SV_blank>node<S2SV_blank>of<S2SV_blank>a<S2SV_blank>" //<S2SV> "literal<S2SV_blank>result<S2SV_blank>element<S2SV_blank>are<S2SV_blank>not<S2SV_blank>in<S2SV_blank>the<S2SV_blank>expected<S2SV_blank>form.\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> value = attr -> children -> content ; //<S2SV> if ( value == NULL ) //<S2SV> value = xmlDictLookup ( ctxt -> dict , BAD_CAST "" , 0 ) ; //<S2SV> } else //<S2SV> value = xmlDictLookup ( ctxt -> dict , BAD_CAST "" , 0 ) ; //<S2SV> copy = xmlNewDocProp ( target -> doc , attr -> name , NULL ) ; //<S2SV> if ( copy == NULL ) { //<S2SV> if ( attr -> ns ) { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>attribute<S2SV_blank>\'{%s}%s\'.\\n" , //<S2SV> attr -> ns -> href , attr -> name ) ; //<S2SV> } else { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>attribute<S2SV_blank>\'%s\'.\\n" , //<S2SV> attr -> name ) ; //<S2SV> } //<S2SV> goto error ; //<S2SV> } //<S2SV> copy -> parent = target ; //<S2SV> if ( last == NULL ) { //<S2SV> target -> properties = copy ; //<S2SV> last = copy ; //<S2SV> } else { //<S2SV> last -> next = copy ; //<S2SV> copy -> prev = last ; //<S2SV> last = copy ; //<S2SV> } //<S2SV> if ( attr -> ns != origNs ) { //<S2SV> origNs = attr -> ns ; //<S2SV> if ( attr -> ns != NULL ) { //<S2SV> # ifdef XSLT_REFACTORED //<S2SV> copyNs = xsltGetSpecialNamespace ( ctxt , attr -> parent , //<S2SV> attr -> ns -> href , attr -> ns -> prefix , target ) ; //<S2SV> # else //<S2SV> copyNs = xsltGetNamespace ( ctxt , attr -> parent , //<S2SV> attr -> ns , target ) ; //<S2SV> # endif //<S2SV> if ( copyNs == NULL ) //<S2SV> goto error ; //<S2SV> } else //<S2SV> copyNs = NULL ; //<S2SV> } //<S2SV> copy -> ns = copyNs ; //<S2SV> text = xmlNewText ( NULL ) ; //<S2SV> if ( text != NULL ) { //<S2SV> copy -> last = copy -> children = text ; //<S2SV> text -> parent = ( xmlNodePtr ) copy ; //<S2SV> text -> doc = copy -> doc ; //<S2SV> if ( attr -> psvi != NULL ) { //<S2SV> valueAVT = xsltEvalAVT ( ctxt , attr -> psvi , attr -> parent ) ; //<S2SV> if ( valueAVT == NULL ) { //<S2SV> if ( attr -> ns ) { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>evaluate<S2SV_blank>the<S2SV_blank>AVT<S2SV_blank>" //<S2SV> "of<S2SV_blank>attribute<S2SV_blank>\'{%s}%s\'.\\n" , //<S2SV> attr -> ns -> href , attr -> name ) ; //<S2SV> } else { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>evaluate<S2SV_blank>the<S2SV_blank>AVT<S2SV_blank>" //<S2SV> "of<S2SV_blank>attribute<S2SV_blank>\'%s\'.\\n" , //<S2SV> attr -> name ) ; //<S2SV> } //<S2SV> text -> content = xmlStrdup ( BAD_CAST "" ) ; //<S2SV> goto error ; //<S2SV> } else { //<S2SV> text -> content = valueAVT ; //<S2SV> } //<S2SV> } else if ( ( ctxt -> internalized ) && //<S2SV> ( target -> doc != NULL ) && //<S2SV> ( target -> doc -> dict == ctxt -> dict ) ) //<S2SV> { //<S2SV> text -> content = ( xmlChar * ) value ; //<S2SV> } else { //<S2SV> text -> content = xmlStrdup ( value ) ; //<S2SV> } //<S2SV> if ( ( copy != NULL ) && ( text != NULL ) && //<S2SV> ( xmlIsID ( copy -> doc , copy -> parent , copy ) ) ) //<S2SV> xmlAddID ( NULL , copy -> doc , text -> content , copy ) ; //<S2SV> } //<S2SV> next_attribute : //<S2SV> attr = attr -> next ; //<S2SV> } while ( attr != NULL ) ; //<S2SV> attr = attrs ; //<S2SV> do { //<S2SV> # ifdef XSLT_REFACTORED //<S2SV> if ( ( attr -> psvi == xsltXSLTAttrMarker ) && //<S2SV> xmlStrEqual ( attr -> name , ( const xmlChar * ) "use-attribute-sets" ) ) //<S2SV> { //<S2SV> xsltApplyAttributeSet ( ctxt , ctxt -> node , ( xmlNodePtr ) attr , NULL ) ; //<S2SV> } //<S2SV> # else //<S2SV> if ( ( attr -> ns != NULL ) && //<S2SV> xmlStrEqual ( attr -> name , ( const xmlChar * ) "use-attribute-sets" ) && //<S2SV> xmlStrEqual ( attr -> ns -> href , XSLT_NAMESPACE ) ) //<S2SV> { //<S2SV> xsltApplyAttributeSet ( ctxt , ctxt -> node , ( xmlNodePtr ) attr , NULL ) ; //<S2SV> } //<S2SV> # endif //<S2SV> attr = attr -> next ; //<S2SV> } while ( attr != NULL ) ; //<S2SV> ctxt -> insert = oldInsert ; //<S2SV> return ( target -> properties ) ; //<S2SV> error : //<S2SV> ctxt -> insert = oldInsert ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> 