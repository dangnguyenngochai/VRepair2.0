xmlAttrPtr //<S2SV> xsltAttrTemplateProcess ( xsltTransformContextPtr ctxt , xmlNodePtr target , //<S2SV> xmlAttrPtr attr ) //<S2SV> { //<S2SV> const xmlChar * value ; //<S2SV> xmlAttrPtr ret ; //<S2SV> if ( ( ctxt == NULL ) || ( attr == NULL ) || ( target == NULL ) ) //<S2SV> return ( NULL ) ; //<S2SV> if ( attr -> type != XML_ATTRIBUTE_NODE ) //<S2SV> return ( NULL ) ; //<S2SV> # ifdef XSLT_REFACTORED //<S2SV> if ( attr -> psvi == xsltXSLTAttrMarker ) //<S2SV> return ( NULL ) ; //<S2SV> # else //<S2SV> if ( ( attr -> ns != NULL ) && xmlStrEqual ( attr -> ns -> href , XSLT_NAMESPACE ) ) //<S2SV> return ( NULL ) ; //<S2SV> # endif //<S2SV> if ( attr -> children != NULL ) { //<S2SV> if ( ( attr -> children -> type != XML_TEXT_NODE ) || //<S2SV> ( attr -> children -> next != NULL ) ) //<S2SV> { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>The<S2SV_blank>children<S2SV_blank>of<S2SV_blank>an<S2SV_blank>attribute<S2SV_blank>node<S2SV_blank>of<S2SV_blank>a<S2SV_blank>" //<S2SV> "literal<S2SV_blank>result<S2SV_blank>element<S2SV_blank>are<S2SV_blank>not<S2SV_blank>in<S2SV_blank>the<S2SV_blank>expected<S2SV_blank>form.\\n" ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> value = attr -> children -> content ; //<S2SV> if ( value == NULL ) //<S2SV> value = xmlDictLookup ( ctxt -> dict , BAD_CAST "" , 0 ) ; //<S2SV> } else //<S2SV> value = xmlDictLookup ( ctxt -> dict , BAD_CAST "" , 0 ) ; //<S2SV> ret = target -> properties ; //<S2SV> while ( ret != NULL ) { //<S2SV> if ( ( ( attr -> ns != NULL ) == ( ret -> ns != NULL ) ) && //<S2SV> xmlStrEqual ( ret -> name , attr -> name ) && //<S2SV> ( ( attr -> ns == NULL ) || xmlStrEqual ( ret -> ns -> href , attr -> ns -> href ) ) ) //<S2SV> { //<S2SV> break ; //<S2SV> } //<S2SV> ret = ret -> next ; //<S2SV> } //<S2SV> if ( ret != NULL ) { //<S2SV> xmlFreeNodeList ( ret -> children ) ; //<S2SV> ret -> children = ret -> last = NULL ; //<S2SV> if ( ( ret -> ns != NULL ) && //<S2SV> ( ! xmlStrEqual ( ret -> ns -> prefix , attr -> ns -> prefix ) ) ) //<S2SV> { //<S2SV> ret -> ns = xsltGetNamespace ( ctxt , attr -> parent , attr -> ns , target ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( attr -> ns != NULL ) //<S2SV> ret = xmlNewNsProp ( target , //<S2SV> xsltGetNamespace ( ctxt , attr -> parent , attr -> ns , target ) , //<S2SV> attr -> name , NULL ) ; //<S2SV> else //<S2SV> ret = xmlNewNsProp ( target , NULL , attr -> name , NULL ) ; //<S2SV> } //<S2SV> if ( ret != NULL ) { //<S2SV> xmlNodePtr text ; //<S2SV> text = xmlNewText ( NULL ) ; //<S2SV> if ( text != NULL ) { //<S2SV> ret -> last = ret -> children = text ; //<S2SV> text -> parent = ( xmlNodePtr ) ret ; //<S2SV> text -> doc = ret -> doc ; //<S2SV> if ( attr -> psvi != NULL ) { //<S2SV> xmlChar * val ; //<S2SV> val = xsltEvalAVT ( ctxt , attr -> psvi , attr -> parent ) ; //<S2SV> if ( val == NULL ) { //<S2SV> if ( attr -> ns ) { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>evaluate<S2SV_blank>the<S2SV_blank>AVT<S2SV_blank>" //<S2SV> "of<S2SV_blank>attribute<S2SV_blank>\'{%s}%s\'.\\n" , //<S2SV> attr -> ns -> href , attr -> name ) ; //<S2SV> } else { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>evaluate<S2SV_blank>the<S2SV_blank>AVT<S2SV_blank>" //<S2SV> "of<S2SV_blank>attribute<S2SV_blank>\'%s\'.\\n" , //<S2SV> attr -> name ) ; //<S2SV> } //<S2SV> text -> content = xmlStrdup ( BAD_CAST "" ) ; //<S2SV> } else { //<S2SV> text -> content = val ; //<S2SV> } //<S2SV> } else if ( ( ctxt -> internalized ) && ( target != NULL ) && //<S2SV> ( target -> doc != NULL ) && //<S2SV> ( target -> doc -> dict == ctxt -> dict ) ) { //<S2SV> text -> content = ( xmlChar * ) value ; //<S2SV> } else { //<S2SV> text -> content = xmlStrdup ( value ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> if ( attr -> ns ) { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>attribute<S2SV_blank>\'{%s}%s\'.\\n" , //<S2SV> attr -> ns -> href , attr -> name ) ; //<S2SV> } else { //<S2SV> xsltTransformError ( ctxt , NULL , attr -> parent , //<S2SV> "Internal<S2SV_blank>error:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>attribute<S2SV_blank>\'%s\'.\\n" , //<S2SV> attr -> name ) ; //<S2SV> } //<S2SV> } //<S2SV> return ( ret ) ; //<S2SV> } //<S2SV> 