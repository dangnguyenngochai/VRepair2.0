xmlChar * //<S2SV> xmlStringLenDecodeEntities ( xmlParserCtxtPtr ctxt , const xmlChar * str , int len , //<S2SV> int what , xmlChar end , xmlChar end2 , xmlChar end3 ) { //<S2SV> xmlChar * buffer = NULL ; //<S2SV> int buffer_size = 0 ; //<S2SV> xmlChar * current = NULL ; //<S2SV> xmlChar * rep = NULL ; //<S2SV> const xmlChar * last ; //<S2SV> xmlEntityPtr ent ; //<S2SV> int c , l ; //<S2SV> int nbchars = 0 ; //<S2SV> if ( ( ctxt == NULL ) || ( str == NULL ) || ( len < 0 ) ) //<S2SV> return ( NULL ) ; //<S2SV> last = str + len ; //<S2SV> if ( ( ( ctxt -> depth > 40 ) && //<S2SV> ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) || //<S2SV> ( ctxt -> depth > 1024 ) ) { //<S2SV> xmlFatalErr ( ctxt , XML_ERR_ENTITY_LOOP , NULL ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> buffer_size = XML_PARSER_BIG_BUFFER_SIZE ; //<S2SV> buffer = ( xmlChar * ) xmlMallocAtomic ( buffer_size * sizeof ( xmlChar ) ) ; //<S2SV> if ( buffer == NULL ) goto mem_error ; //<S2SV> if ( str < last ) //<S2SV> c = CUR_SCHAR ( str , l ) ; //<S2SV> else //<S2SV> c = 0 ; //<S2SV> while ( ( c != 0 ) && ( c != end ) && //<S2SV> ( c != end2 ) && ( c != end3 ) ) { //<S2SV> if ( c == 0 ) break ; //<S2SV> if ( ( c == '&' ) && ( str [ 1 ] == '#' ) ) { //<S2SV> int val = xmlParseStringCharRef ( ctxt , & str ) ; //<S2SV> if ( val != 0 ) { //<S2SV> COPY_BUF ( 0 , buffer , nbchars , val ) ; //<S2SV> } //<S2SV> if ( nbchars > buffer_size - XML_PARSER_BUFFER_SIZE ) { //<S2SV> growBuffer ( buffer , XML_PARSER_BUFFER_SIZE ) ; //<S2SV> } //<S2SV> } else if ( ( c == '&' ) && ( what & XML_SUBSTITUTE_REF ) ) { //<S2SV> if ( xmlParserDebugEntities ) //<S2SV> xmlGenericError ( xmlGenericErrorContext , //<S2SV> "String<S2SV_blank>decoding<S2SV_blank>Entity<S2SV_blank>Reference:<S2SV_blank>%.30s\\n" , //<S2SV> str ) ; //<S2SV> ent = xmlParseStringEntityRef ( ctxt , & str ) ; //<S2SV> if ( ( ctxt -> lastError . code == XML_ERR_ENTITY_LOOP ) || //<S2SV> ( ctxt -> lastError . code == XML_ERR_INTERNAL_ERROR ) ) //<S2SV> goto int_error ; //<S2SV> if ( ent != NULL ) //<S2SV> ctxt -> nbentities += ent -> checked ; //<S2SV> if ( ( ent != NULL ) && //<S2SV> ( ent -> etype == XML_INTERNAL_PREDEFINED_ENTITY ) ) { //<S2SV> if ( ent -> content != NULL ) { //<S2SV> COPY_BUF ( 0 , buffer , nbchars , ent -> content [ 0 ] ) ; //<S2SV> if ( nbchars > buffer_size - XML_PARSER_BUFFER_SIZE ) { //<S2SV> growBuffer ( buffer , XML_PARSER_BUFFER_SIZE ) ; //<S2SV> } //<S2SV> } else { //<S2SV> xmlFatalErrMsg ( ctxt , XML_ERR_INTERNAL_ERROR , //<S2SV> "predefined<S2SV_blank>entity<S2SV_blank>has<S2SV_blank>no<S2SV_blank>content\\n" ) ; //<S2SV> } //<S2SV> } else if ( ( ent != NULL ) && ( ent -> content != NULL ) ) { //<S2SV> ctxt -> depth ++ ; //<S2SV> rep = xmlStringDecodeEntities ( ctxt , ent -> content , what , //<S2SV> 0 , 0 , 0 ) ; //<S2SV> ctxt -> depth -- ; //<S2SV> if ( rep != NULL ) { //<S2SV> current = rep ; //<S2SV> while ( * current != 0 ) { //<S2SV> buffer [ nbchars ++ ] = * current ++ ; //<S2SV> if ( nbchars > //<S2SV> buffer_size - XML_PARSER_BUFFER_SIZE ) { //<S2SV> if ( xmlParserEntityCheck ( ctxt , nbchars , ent ) ) //<S2SV> goto int_error ; //<S2SV> growBuffer ( buffer , XML_PARSER_BUFFER_SIZE ) ; //<S2SV> } //<S2SV> } //<S2SV> xmlFree ( rep ) ; //<S2SV> rep = NULL ; //<S2SV> } //<S2SV> } else if ( ent != NULL ) { //<S2SV> int i = xmlStrlen ( ent -> name ) ; //<S2SV> const xmlChar * cur = ent -> name ; //<S2SV> buffer [ nbchars ++ ] = '&' ; //<S2SV> if ( nbchars > buffer_size - i - XML_PARSER_BUFFER_SIZE ) { //<S2SV> growBuffer ( buffer , i + XML_PARSER_BUFFER_SIZE ) ; //<S2SV> } //<S2SV> for ( ; i > 0 ; i -- ) //<S2SV> buffer [ nbchars ++ ] = * cur ++ ; //<S2SV> buffer [ nbchars ++ ] = ';' ; //<S2SV> } //<S2SV> } else if ( c == '%' && ( what & XML_SUBSTITUTE_PEREF ) ) { //<S2SV> if ( xmlParserDebugEntities ) //<S2SV> xmlGenericError ( xmlGenericErrorContext , //<S2SV> "String<S2SV_blank>decoding<S2SV_blank>PE<S2SV_blank>Reference:<S2SV_blank>%.30s\\n" , str ) ; //<S2SV> ent = xmlParseStringPEReference ( ctxt , & str ) ; //<S2SV> if ( ctxt -> lastError . code == XML_ERR_ENTITY_LOOP ) //<S2SV> goto int_error ; //<S2SV> if ( ent != NULL ) //<S2SV> ctxt -> nbentities += ent -> checked ; //<S2SV> if ( ent != NULL ) { //<S2SV> if ( ent -> content == NULL ) { //<S2SV> xmlLoadEntityContent ( ctxt , ent ) ; //<S2SV> } //<S2SV> ctxt -> depth ++ ; //<S2SV> rep = xmlStringDecodeEntities ( ctxt , ent -> content , what , //<S2SV> 0 , 0 , 0 ) ; //<S2SV> ctxt -> depth -- ; //<S2SV> if ( rep != NULL ) { //<S2SV> current = rep ; //<S2SV> while ( * current != 0 ) { //<S2SV> buffer [ nbchars ++ ] = * current ++ ; //<S2SV> if ( nbchars > //<S2SV> buffer_size - XML_PARSER_BUFFER_SIZE ) { //<S2SV> if ( xmlParserEntityCheck ( ctxt , nbchars , ent ) ) //<S2SV> goto int_error ; //<S2SV> growBuffer ( buffer , XML_PARSER_BUFFER_SIZE ) ; //<S2SV> } //<S2SV> } //<S2SV> xmlFree ( rep ) ; //<S2SV> rep = NULL ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> COPY_BUF ( l , buffer , nbchars , c ) ; //<S2SV> str += l ; //<S2SV> if ( nbchars > buffer_size - XML_PARSER_BUFFER_SIZE ) { //<S2SV> growBuffer ( buffer , XML_PARSER_BUFFER_SIZE ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( str < last ) //<S2SV> c = CUR_SCHAR ( str , l ) ; //<S2SV> else //<S2SV> c = 0 ; //<S2SV> } //<S2SV> buffer [ nbchars ] = 0 ; //<S2SV> return ( buffer ) ; //<S2SV> mem_error : //<S2SV> xmlErrMemory ( ctxt , NULL ) ; //<S2SV> int_error : //<S2SV> if ( rep != NULL ) //<S2SV> xmlFree ( rep ) ; //<S2SV> if ( buffer != NULL ) //<S2SV> xmlFree ( buffer ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> 