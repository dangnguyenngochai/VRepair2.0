static xsltCompMatchPtr //<S2SV> xsltCompilePatternInternal ( const xmlChar * pattern , xmlDocPtr doc , //<S2SV> xmlNodePtr node , xsltStylesheetPtr style , //<S2SV> xsltTransformContextPtr runtime , int novar ) { //<S2SV> xsltParserContextPtr ctxt = NULL ; //<S2SV> xsltCompMatchPtr element , first = NULL , previous = NULL ; //<S2SV> int current , start , end , level , j ; //<S2SV> if ( pattern == NULL ) { //<S2SV> xsltTransformError ( NULL , NULL , node , //<S2SV> "xsltCompilePattern<S2SV_blank>:<S2SV_blank>NULL<S2SV_blank>pattern\\n" ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> ctxt = xsltNewParserContext ( style , runtime ) ; //<S2SV> if ( ctxt == NULL ) //<S2SV> return ( NULL ) ; //<S2SV> ctxt -> doc = doc ; //<S2SV> ctxt -> elem = node ; //<S2SV> current = end = 0 ; //<S2SV> while ( pattern [ current ] != 0 ) { //<S2SV> start = current ; //<S2SV> while ( IS_BLANK_CH ( pattern [ current ] ) ) //<S2SV> current ++ ; //<S2SV> end = current ; //<S2SV> level = 0 ; //<S2SV> while ( ( pattern [ end ] != 0 ) && ( ( pattern [ end ] != '|' ) || ( level != 0 ) ) ) { //<S2SV> if ( pattern [ end ] == '[' ) //<S2SV> level ++ ; //<S2SV> else if ( pattern [ end ] == ']' ) //<S2SV> level -- ; //<S2SV> else if ( pattern [ end ] == '\\'' ) { //<S2SV> end ++ ; //<S2SV> while ( ( pattern [ end ] != 0 ) && ( pattern [ end ] != '\\'' ) ) //<S2SV> end ++ ; //<S2SV> } else if ( pattern [ end ] == \'"\' ) { //<S2SV> end ++ ; //<S2SV> while ( ( pattern [ end ] != 0 ) && ( pattern [ end ] != \'"\' ) ) //<S2SV> end ++ ; //<S2SV> } //<S2SV> end ++ ; //<S2SV> } //<S2SV> if ( current == end ) { //<S2SV> xsltTransformError ( NULL , NULL , node , //<S2SV> "xsltCompilePattern<S2SV_blank>:<S2SV_blank>NULL<S2SV_blank>pattern\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> element = xsltNewCompMatch ( ) ; //<S2SV> if ( element == NULL ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( first == NULL ) //<S2SV> first = element ; //<S2SV> else if ( previous != NULL ) //<S2SV> previous -> next = element ; //<S2SV> previous = element ; //<S2SV> ctxt -> comp = element ; //<S2SV> ctxt -> base = xmlStrndup ( & pattern [ start ] , end - start ) ; //<S2SV> if ( ctxt -> base == NULL ) //<S2SV> goto error ; //<S2SV> ctxt -> cur = & ( ctxt -> base ) [ current - start ] ; //<S2SV> element -> pattern = ctxt -> base ; //<S2SV> element -> nsList = xmlGetNsList ( doc , node ) ; //<S2SV> j = 0 ; //<S2SV> if ( element -> nsList != NULL ) { //<S2SV> while ( element -> nsList [ j ] != NULL ) //<S2SV> j ++ ; //<S2SV> } //<S2SV> element -> nsNr = j ; //<S2SV> # ifdef WITH_XSLT_DEBUG_PATTERN //<S2SV> xsltGenericDebug ( xsltGenericDebugContext , //<S2SV> "xsltCompilePattern<S2SV_blank>:<S2SV_blank>parsing<S2SV_blank>\'%s\'\\n" , //<S2SV> element -> pattern ) ; //<S2SV> # endif //<S2SV> element -> priority = 0 ; //<S2SV> xsltCompileLocationPathPattern ( ctxt , novar ) ; //<S2SV> if ( ctxt -> error ) { //<S2SV> xsltTransformError ( NULL , style , node , //<S2SV> "xsltCompilePattern<S2SV_blank>:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>compile<S2SV_blank>\'%s\'\\n" , //<S2SV> element -> pattern ) ; //<S2SV> if ( style != NULL ) style -> errors ++ ; //<S2SV> goto error ; //<S2SV> } //<S2SV> xsltReverseCompMatch ( ctxt , element ) ; //<S2SV> if ( element -> priority == 0 ) { //<S2SV> if ( ( ( element -> steps [ 0 ] . op == XSLT_OP_ELEM ) || //<S2SV> ( element -> steps [ 0 ] . op == XSLT_OP_ATTR ) || //<S2SV> ( element -> steps [ 0 ] . op == XSLT_OP_PI ) ) && //<S2SV> ( element -> steps [ 0 ] . value != NULL ) && //<S2SV> ( element -> steps [ 1 ] . op == XSLT_OP_END ) ) { //<S2SV> ; //<S2SV> } else if ( ( element -> steps [ 0 ] . op == XSLT_OP_ATTR ) && //<S2SV> ( element -> steps [ 0 ] . value2 != NULL ) && //<S2SV> ( element -> steps [ 1 ] . op == XSLT_OP_END ) ) { //<S2SV> element -> priority = - 0.25 ; //<S2SV> } else if ( ( element -> steps [ 0 ] . op == XSLT_OP_NS ) && //<S2SV> ( element -> steps [ 0 ] . value != NULL ) && //<S2SV> ( element -> steps [ 1 ] . op == XSLT_OP_END ) ) { //<S2SV> element -> priority = - 0.25 ; //<S2SV> } else if ( ( element -> steps [ 0 ] . op == XSLT_OP_ATTR ) && //<S2SV> ( element -> steps [ 0 ] . value == NULL ) && //<S2SV> ( element -> steps [ 0 ] . value2 == NULL ) && //<S2SV> ( element -> steps [ 1 ] . op == XSLT_OP_END ) ) { //<S2SV> element -> priority = - 0.5 ; //<S2SV> } else if ( ( ( element -> steps [ 0 ] . op == XSLT_OP_PI ) || //<S2SV> ( element -> steps [ 0 ] . op == XSLT_OP_TEXT ) || //<S2SV> ( element -> steps [ 0 ] . op == XSLT_OP_ALL ) || //<S2SV> ( element -> steps [ 0 ] . op == XSLT_OP_NODE ) || //<S2SV> ( element -> steps [ 0 ] . op == XSLT_OP_COMMENT ) ) && //<S2SV> ( element -> steps [ 1 ] . op == XSLT_OP_END ) ) { //<S2SV> element -> priority = - 0.5 ; //<S2SV> } else { //<S2SV> element -> priority = 0.5 ; //<S2SV> } //<S2SV> } //<S2SV> # ifdef WITH_XSLT_DEBUG_PATTERN //<S2SV> xsltGenericDebug ( xsltGenericDebugContext , //<S2SV> "xsltCompilePattern<S2SV_blank>:<S2SV_blank>parsed<S2SV_blank>%s,<S2SV_blank>default<S2SV_blank>priority<S2SV_blank>%f\\n" , //<S2SV> element -> pattern , element -> priority ) ; //<S2SV> # endif //<S2SV> if ( pattern [ end ] == '|' ) //<S2SV> end ++ ; //<S2SV> current = end ; //<S2SV> } //<S2SV> if ( end == 0 ) { //<S2SV> xsltTransformError ( NULL , style , node , //<S2SV> "xsltCompilePattern<S2SV_blank>:<S2SV_blank>NULL<S2SV_blank>pattern\\n" ) ; //<S2SV> if ( style != NULL ) style -> errors ++ ; //<S2SV> goto error ; //<S2SV> } //<S2SV> xsltFreeParserContext ( ctxt ) ; //<S2SV> return ( first ) ; //<S2SV> error : //<S2SV> if ( ctxt != NULL ) //<S2SV> xsltFreeParserContext ( ctxt ) ; //<S2SV> if ( first != NULL ) //<S2SV> xsltFreeCompMatchList ( first ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> 