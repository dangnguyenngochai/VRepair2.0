static int growOpArray ( Vdbe * v , int nOp ) { //<S2SV> VdbeOp * pNew ; //<S2SV> Parse * p = v -> pParse ; //<S2SV> # ifdef SQLITE_TEST_REALLOC_STRESS //<S2SV> sqlite3_int64 nNew = ( v -> nOpAlloc >= 512 ? 2 * ( sqlite3_int64 ) v -> nOpAlloc //<S2SV> : ( sqlite3_int64 ) v -> nOpAlloc + nOp ) ; //<S2SV> # else //<S2SV> sqlite3_int64 nNew = ( v -> nOpAlloc ? 2 * ( sqlite3_int64 ) v -> nOpAlloc //<S2SV> : ( sqlite3_int64 ) 1024 / sizeof ( Op ) ) ; //<S2SV> UNUSED_PARAMETER ( nOp ) ; //<S2SV> # endif //<S2SV> if ( nNew > p -> db -> aLimit [ SQLITE_LIMIT_VDBE_OP ] ) { //<S2SV> sqlite3OomFault ( p -> db ) ; //<S2SV> return SQLITE_NOMEM ; //<S2SV> } //<S2SV> assert ( nOp <= ( 1024 / sizeof ( Op ) ) ) ; //<S2SV> assert ( nNew >= ( v -> nOpAlloc + nOp ) ) ; //<S2SV> pNew = sqlite3DbRealloc ( p -> db , v -> aOp , nNew * sizeof ( Op ) ) ; //<S2SV> if ( pNew ) { //<S2SV> p -> szOpAlloc = sqlite3DbMallocSize ( p -> db , pNew ) ; //<S2SV> v -> nOpAlloc = p -> szOpAlloc / sizeof ( Op ) ; //<S2SV> v -> aOp = pNew ; //<S2SV> } //<S2SV> return ( pNew ? SQLITE_OK : SQLITE_NOMEM_BKPT ) ; //<S2SV> } //<S2SV> 