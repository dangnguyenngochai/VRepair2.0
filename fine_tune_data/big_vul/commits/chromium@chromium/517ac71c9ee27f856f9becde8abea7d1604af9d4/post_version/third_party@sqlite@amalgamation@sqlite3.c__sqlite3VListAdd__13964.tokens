SQLITE_PRIVATE VList * sqlite3VListAdd ( //<S2SV> sqlite3 * db , //<S2SV> VList * pIn , //<S2SV> const char * zName , //<S2SV> int nName , //<S2SV> int iVal //<S2SV> ) { //<S2SV> int nInt ; //<S2SV> char * z ; //<S2SV> int i ; //<S2SV> nInt = nName / 4 + 3 ; //<S2SV> assert ( pIn == 0 || pIn [ 0 ] >= 3 ) ; //<S2SV> if ( pIn == 0 || pIn [ 1 ] + nInt > pIn [ 0 ] ) { //<S2SV> sqlite3_int64 nAlloc = ( pIn ? 2 * ( sqlite3_int64 ) pIn [ 0 ] : 10 ) + nInt ; //<S2SV> VList * pOut = sqlite3DbRealloc ( db , pIn , nAlloc * sizeof ( int ) ) ; //<S2SV> if ( pOut == 0 ) return pIn ; //<S2SV> if ( pIn == 0 ) pOut [ 1 ] = 2 ; //<S2SV> pIn = pOut ; //<S2SV> pIn [ 0 ] = nAlloc ; //<S2SV> } //<S2SV> i = pIn [ 1 ] ; //<S2SV> pIn [ i ] = iVal ; //<S2SV> pIn [ i + 1 ] = nInt ; //<S2SV> z = ( char * ) & pIn [ i + 2 ] ; //<S2SV> pIn [ 1 ] = i + nInt ; //<S2SV> assert ( pIn [ 1 ] <= pIn [ 0 ] ) ; //<S2SV> memcpy ( z , zName , nName ) ; //<S2SV> z [ nName ] = 0 ; //<S2SV> return pIn ; //<S2SV> } //<S2SV> 