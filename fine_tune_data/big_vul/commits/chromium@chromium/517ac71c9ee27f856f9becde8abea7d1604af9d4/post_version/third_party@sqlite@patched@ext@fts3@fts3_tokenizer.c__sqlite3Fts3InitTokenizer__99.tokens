int sqlite3Fts3InitTokenizer ( //<S2SV> Fts3Hash * pHash , //<S2SV> const char * zArg , //<S2SV> sqlite3_tokenizer * * ppTok , //<S2SV> char * * pzErr //<S2SV> ) { //<S2SV> int rc ; //<S2SV> char * z = ( char * ) zArg ; //<S2SV> int n = 0 ; //<S2SV> char * zCopy ; //<S2SV> char * zEnd ; //<S2SV> sqlite3_tokenizer_module * m ; //<S2SV> zCopy = sqlite3_mprintf ( "%s" , zArg ) ; //<S2SV> if ( ! zCopy ) return SQLITE_NOMEM ; //<S2SV> zEnd = & zCopy [ strlen ( zCopy ) ] ; //<S2SV> z = ( char * ) sqlite3Fts3NextToken ( zCopy , & n ) ; //<S2SV> if ( z == 0 ) { //<S2SV> assert ( n == 0 ) ; //<S2SV> z = zCopy ; //<S2SV> } //<S2SV> z [ n ] = '\\0' ; //<S2SV> sqlite3Fts3Dequote ( z ) ; //<S2SV> m = ( sqlite3_tokenizer_module * ) sqlite3Fts3HashFind ( pHash , z , ( int ) strlen ( z ) + 1 ) ; //<S2SV> if ( ! m ) { //<S2SV> sqlite3Fts3ErrMsg ( pzErr , "unknown<S2SV_blank>tokenizer:<S2SV_blank>%s" , z ) ; //<S2SV> rc = SQLITE_ERROR ; //<S2SV> } else { //<S2SV> char const * * aArg = 0 ; //<S2SV> int iArg = 0 ; //<S2SV> z = & z [ n + 1 ] ; //<S2SV> while ( z < zEnd && ( NULL != ( z = ( char * ) sqlite3Fts3NextToken ( z , & n ) ) ) ) { //<S2SV> sqlite3_int64 nNew = sizeof ( char * ) * ( iArg + 1 ) ; //<S2SV> char const * * aNew = ( const char * * ) sqlite3_realloc64 ( ( void * ) aArg , nNew ) ; //<S2SV> if ( ! aNew ) { //<S2SV> sqlite3_free ( zCopy ) ; //<S2SV> sqlite3_free ( ( void * ) aArg ) ; //<S2SV> return SQLITE_NOMEM ; //<S2SV> } //<S2SV> aArg = aNew ; //<S2SV> aArg [ iArg ++ ] = z ; //<S2SV> z [ n ] = '\\0' ; //<S2SV> sqlite3Fts3Dequote ( z ) ; //<S2SV> z = & z [ n + 1 ] ; //<S2SV> } //<S2SV> rc = m -> xCreate ( iArg , aArg , ppTok ) ; //<S2SV> assert ( rc != SQLITE_OK || * ppTok ) ; //<S2SV> if ( rc != SQLITE_OK ) { //<S2SV> sqlite3Fts3ErrMsg ( pzErr , "unknown<S2SV_blank>tokenizer" ) ; //<S2SV> } else { //<S2SV> ( * ppTok ) -> pModule = m ; //<S2SV> } //<S2SV> sqlite3_free ( ( void * ) aArg ) ; //<S2SV> } //<S2SV> sqlite3_free ( zCopy ) ; //<S2SV> return rc ; //<S2SV> } //<S2SV> 