SQLITE_PRIVATE int sqlite3VtabEponymousTableInit ( Parse * pParse , Module * pMod ) { //<S2SV> const sqlite3_module * pModule = pMod -> pModule ; //<S2SV> Table * pTab ; //<S2SV> char * zErr = 0 ; //<S2SV> int rc ; //<S2SV> sqlite3 * db = pParse -> db ; //<S2SV> if ( pMod -> pEpoTab ) return 1 ; //<S2SV> if ( pModule -> xCreate != 0 && pModule -> xCreate != pModule -> xConnect ) return 0 ; //<S2SV> pTab = sqlite3DbMallocZero ( db , sizeof ( Table ) ) ; //<S2SV> if ( pTab == 0 ) return 0 ; //<S2SV> pTab -> zName = sqlite3DbStrDup ( db , pMod -> zName ) ; //<S2SV> if ( pTab -> zName == 0 ) { //<S2SV> sqlite3DbFree ( db , pTab ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> pMod -> pEpoTab = pTab ; //<S2SV> pTab -> nTabRef = 1 ; //<S2SV> pTab -> pSchema = db -> aDb [ 0 ] . pSchema ; //<S2SV> assert ( pTab -> nModuleArg == 0 ) ; //<S2SV> pTab -> iPKey = - 1 ; //<S2SV> addModuleArgument ( db , pTab , sqlite3DbStrDup ( db , pTab -> zName ) ) ; //<S2SV> addModuleArgument ( db , pTab , 0 ) ; //<S2SV> addModuleArgument ( db , pTab , sqlite3DbStrDup ( db , pTab -> zName ) ) ; //<S2SV> rc = vtabCallConstructor ( db , pTab , pMod , pModule -> xConnect , & zErr ) ; //<S2SV> if ( rc ) { //<S2SV> sqlite3ErrorMsg ( pParse , "%s" , zErr ) ; //<S2SV> sqlite3DbFree ( db , zErr ) ; //<S2SV> sqlite3VtabEponymousTableClear ( db , pMod ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 