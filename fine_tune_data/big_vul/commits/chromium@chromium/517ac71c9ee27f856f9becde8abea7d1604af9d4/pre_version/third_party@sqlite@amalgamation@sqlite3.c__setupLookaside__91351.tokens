static int setupLookaside ( sqlite3 * db , void * pBuf , int sz , int cnt ) { //<S2SV> # ifndef SQLITE_OMIT_LOOKASIDE //<S2SV> void * pStart ; //<S2SV> if ( sqlite3LookasideUsed ( db , 0 ) > 0 ) { //<S2SV> return SQLITE_BUSY ; //<S2SV> } //<S2SV> if ( db -> lookaside . bMalloced ) { //<S2SV> sqlite3_free ( db -> lookaside . pStart ) ; //<S2SV> } //<S2SV> sz = ROUNDDOWN8 ( sz ) ; //<S2SV> if ( sz <= ( int ) sizeof ( LookasideSlot * ) ) sz = 0 ; //<S2SV> if ( cnt < 0 ) cnt = 0 ; //<S2SV> if ( sz == 0 || cnt == 0 ) { //<S2SV> sz = 0 ; //<S2SV> pStart = 0 ; //<S2SV> } else if ( pBuf == 0 ) { //<S2SV> sqlite3BeginBenignMalloc ( ) ; //<S2SV> pStart = sqlite3Malloc ( sz * cnt ) ; //<S2SV> sqlite3EndBenignMalloc ( ) ; //<S2SV> if ( pStart ) cnt = sqlite3MallocSize ( pStart ) / sz ; //<S2SV> } else { //<S2SV> pStart = pBuf ; //<S2SV> } //<S2SV> db -> lookaside . pStart = pStart ; //<S2SV> db -> lookaside . pInit = 0 ; //<S2SV> db -> lookaside . pFree = 0 ; //<S2SV> db -> lookaside . sz = ( u16 ) sz ; //<S2SV> if ( pStart ) { //<S2SV> int i ; //<S2SV> LookasideSlot * p ; //<S2SV> assert ( sz > ( int ) sizeof ( LookasideSlot * ) ) ; //<S2SV> db -> lookaside . nSlot = cnt ; //<S2SV> p = ( LookasideSlot * ) pStart ; //<S2SV> for ( i = cnt - 1 ; i >= 0 ; i -- ) { //<S2SV> p -> pNext = db -> lookaside . pInit ; //<S2SV> db -> lookaside . pInit = p ; //<S2SV> p = ( LookasideSlot * ) & ( ( u8 * ) p ) [ sz ] ; //<S2SV> } //<S2SV> db -> lookaside . pEnd = p ; //<S2SV> db -> lookaside . bDisable = 0 ; //<S2SV> db -> lookaside . bMalloced = pBuf == 0 ? 1 : 0 ; //<S2SV> } else { //<S2SV> db -> lookaside . pStart = db ; //<S2SV> db -> lookaside . pEnd = db ; //<S2SV> db -> lookaside . bDisable = 1 ; //<S2SV> db -> lookaside . bMalloced = 0 ; //<S2SV> db -> lookaside . nSlot = 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> return SQLITE_OK ; //<S2SV> } //<S2SV> 