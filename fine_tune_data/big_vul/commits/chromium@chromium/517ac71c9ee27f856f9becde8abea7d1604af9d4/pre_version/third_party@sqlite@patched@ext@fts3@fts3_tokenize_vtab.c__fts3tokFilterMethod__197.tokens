static int fts3tokFilterMethod ( //<S2SV> sqlite3_vtab_cursor * pCursor , //<S2SV> int idxNum , //<S2SV> const char * idxStr , //<S2SV> int nVal , //<S2SV> sqlite3_value * * apVal //<S2SV> ) { //<S2SV> int rc = SQLITE_ERROR ; //<S2SV> Fts3tokCursor * pCsr = ( Fts3tokCursor * ) pCursor ; //<S2SV> Fts3tokTable * pTab = ( Fts3tokTable * ) ( pCursor -> pVtab ) ; //<S2SV> UNUSED_PARAMETER ( idxStr ) ; //<S2SV> UNUSED_PARAMETER ( nVal ) ; //<S2SV> fts3tokResetCursor ( pCsr ) ; //<S2SV> if ( idxNum == 1 ) { //<S2SV> const char * zByte = ( const char * ) sqlite3_value_text ( apVal [ 0 ] ) ; //<S2SV> int nByte = sqlite3_value_bytes ( apVal [ 0 ] ) ; //<S2SV> pCsr -> zInput = sqlite3_malloc ( nByte + 1 ) ; //<S2SV> if ( pCsr -> zInput == 0 ) { //<S2SV> rc = SQLITE_NOMEM ; //<S2SV> } else { //<S2SV> memcpy ( pCsr -> zInput , zByte , nByte ) ; //<S2SV> pCsr -> zInput [ nByte ] = 0 ; //<S2SV> rc = pTab -> pMod -> xOpen ( pTab -> pTok , pCsr -> zInput , nByte , & pCsr -> pCsr ) ; //<S2SV> if ( rc == SQLITE_OK ) { //<S2SV> pCsr -> pCsr -> pTokenizer = pTab -> pTok ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( rc != SQLITE_OK ) return rc ; //<S2SV> return fts3tokNextMethod ( pCursor ) ; //<S2SV> } //<S2SV> 