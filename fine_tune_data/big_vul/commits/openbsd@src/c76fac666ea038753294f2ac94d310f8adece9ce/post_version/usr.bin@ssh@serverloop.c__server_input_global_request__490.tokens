static int //<S2SV> server_input_global_request ( int type , u_int32_t seq , void * ctxt ) //<S2SV> { //<S2SV> char * rtype ; //<S2SV> int want_reply ; //<S2SV> int r , success = 0 , allocated_listen_port = 0 ; //<S2SV> struct sshbuf * resp = NULL ; //<S2SV> rtype = packet_get_string ( NULL ) ; //<S2SV> want_reply = packet_get_char ( ) ; //<S2SV> debug ( "server_input_global_request:<S2SV_blank>rtype<S2SV_blank>%s<S2SV_blank>want_reply<S2SV_blank>%d" , rtype , want_reply ) ; //<S2SV> if ( strcmp ( rtype , "tcpip-forward" ) == 0 ) { //<S2SV> struct passwd * pw ; //<S2SV> struct Forward fwd ; //<S2SV> pw = the_authctxt -> pw ; //<S2SV> if ( pw == NULL || ! the_authctxt -> valid ) //<S2SV> fatal ( "server_input_global_request:<S2SV_blank>no/invalid<S2SV_blank>user" ) ; //<S2SV> memset ( & fwd , 0 , sizeof ( fwd ) ) ; //<S2SV> fwd . listen_host = packet_get_string ( NULL ) ; //<S2SV> fwd . listen_port = ( u_short ) packet_get_int ( ) ; //<S2SV> debug ( "server_input_global_request:<S2SV_blank>tcpip-forward<S2SV_blank>listen<S2SV_blank>%s<S2SV_blank>port<S2SV_blank>%d" , //<S2SV> fwd . listen_host , fwd . listen_port ) ; //<S2SV> if ( ( options . allow_tcp_forwarding & FORWARD_REMOTE ) == 0 || //<S2SV> no_port_forwarding_flag || options . disable_forwarding || //<S2SV> ( ! want_reply && fwd . listen_port == 0 ) || //<S2SV> ( fwd . listen_port != 0 && //<S2SV> ! bind_permitted ( fwd . listen_port , pw -> pw_uid ) ) ) { //<S2SV> success = 0 ; //<S2SV> packet_send_debug ( "Server<S2SV_blank>has<S2SV_blank>disabled<S2SV_blank>port<S2SV_blank>forwarding." ) ; //<S2SV> } else { //<S2SV> success = channel_setup_remote_fwd_listener ( & fwd , //<S2SV> & allocated_listen_port , & options . fwd_opts ) ; //<S2SV> } //<S2SV> free ( fwd . listen_host ) ; //<S2SV> if ( ( resp = sshbuf_new ( ) ) == NULL ) //<S2SV> fatal ( "%s:<S2SV_blank>sshbuf_new" , __func__ ) ; //<S2SV> if ( allocated_listen_port != 0 && //<S2SV> ( r = sshbuf_put_u32 ( resp , allocated_listen_port ) ) != 0 ) //<S2SV> fatal ( "%s:<S2SV_blank>sshbuf_put_u32:<S2SV_blank>%s" , __func__ , ssh_err ( r ) ) ; //<S2SV> } else if ( strcmp ( rtype , "cancel-tcpip-forward" ) == 0 ) { //<S2SV> struct Forward fwd ; //<S2SV> memset ( & fwd , 0 , sizeof ( fwd ) ) ; //<S2SV> fwd . listen_host = packet_get_string ( NULL ) ; //<S2SV> fwd . listen_port = ( u_short ) packet_get_int ( ) ; //<S2SV> debug ( "%s:<S2SV_blank>cancel-tcpip-forward<S2SV_blank>addr<S2SV_blank>%s<S2SV_blank>port<S2SV_blank>%d" , __func__ , //<S2SV> fwd . listen_host , fwd . listen_port ) ; //<S2SV> success = channel_cancel_rport_listener ( & fwd ) ; //<S2SV> free ( fwd . listen_host ) ; //<S2SV> } else if ( strcmp ( rtype , "streamlocal-forward@openssh.com" ) == 0 ) { //<S2SV> struct Forward fwd ; //<S2SV> memset ( & fwd , 0 , sizeof ( fwd ) ) ; //<S2SV> fwd . listen_path = packet_get_string ( NULL ) ; //<S2SV> debug ( "server_input_global_request:<S2SV_blank>streamlocal-forward<S2SV_blank>listen<S2SV_blank>path<S2SV_blank>%s" , //<S2SV> fwd . listen_path ) ; //<S2SV> if ( ( options . allow_streamlocal_forwarding & FORWARD_REMOTE ) == 0 //<S2SV> || no_port_forwarding_flag || options . disable_forwarding || //<S2SV> ! use_privsep ) { //<S2SV> success = 0 ; //<S2SV> packet_send_debug ( "Server<S2SV_blank>has<S2SV_blank>disabled<S2SV_blank>port<S2SV_blank>forwarding." ) ; //<S2SV> } else { //<S2SV> success = channel_setup_remote_fwd_listener ( //<S2SV> & fwd , NULL , & options . fwd_opts ) ; //<S2SV> } //<S2SV> free ( fwd . listen_path ) ; //<S2SV> } else if ( strcmp ( rtype , "cancel-streamlocal-forward@openssh.com" ) == 0 ) { //<S2SV> struct Forward fwd ; //<S2SV> memset ( & fwd , 0 , sizeof ( fwd ) ) ; //<S2SV> fwd . listen_path = packet_get_string ( NULL ) ; //<S2SV> debug ( "%s:<S2SV_blank>cancel-streamlocal-forward<S2SV_blank>path<S2SV_blank>%s" , __func__ , //<S2SV> fwd . listen_path ) ; //<S2SV> success = channel_cancel_rport_listener ( & fwd ) ; //<S2SV> free ( fwd . listen_path ) ; //<S2SV> } else if ( strcmp ( rtype , "no-more-sessions@openssh.com" ) == 0 ) { //<S2SV> no_more_sessions = 1 ; //<S2SV> success = 1 ; //<S2SV> } else if ( strcmp ( rtype , "hostkeys-prove-00@openssh.com" ) == 0 ) { //<S2SV> success = server_input_hostkeys_prove ( & resp ) ; //<S2SV> } //<S2SV> if ( want_reply ) { //<S2SV> packet_start ( success ? //<S2SV> SSH2_MSG_REQUEST_SUCCESS : SSH2_MSG_REQUEST_FAILURE ) ; //<S2SV> if ( success && resp != NULL ) //<S2SV> ssh_packet_put_raw ( active_state , sshbuf_ptr ( resp ) , //<S2SV> sshbuf_len ( resp ) ) ; //<S2SV> packet_send ( ) ; //<S2SV> packet_write_wait ( ) ; //<S2SV> } //<S2SV> free ( rtype ) ; //<S2SV> sshbuf_free ( resp ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 