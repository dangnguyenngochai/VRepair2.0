int //<S2SV> server_partial_file_request ( struct httpd * env , struct client * clt , char * path , //<S2SV> struct stat * st , char * range_str ) //<S2SV> { //<S2SV> struct server_config * srv_conf = clt -> clt_srv_conf ; //<S2SV> struct http_descriptor * resp = clt -> clt_descresp ; //<S2SV> struct http_descriptor * desc = clt -> clt_descreq ; //<S2SV> struct media_type * media , multipart_media ; //<S2SV> struct range_data * r = & clt -> clt_ranges ; //<S2SV> struct range * range ; //<S2SV> size_t content_length = 0 ; //<S2SV> int code = 500 , fd = - 1 , i , nranges , ret ; //<S2SV> char content_range [ 64 ] ; //<S2SV> const char * errstr = NULL ; //<S2SV> if ( desc -> http_method != HTTP_METHOD_GET ) //<S2SV> return server_file_request ( env , clt , path , st ) ; //<S2SV> if ( ( nranges = parse_ranges ( clt , range_str , st -> st_size ) ) < 1 ) { //<S2SV> code = 416 ; //<S2SV> ( void ) snprintf ( content_range , sizeof ( content_range ) , //<S2SV> "bytes<S2SV_blank>*/%lld" , st -> st_size ) ; //<S2SV> errstr = content_range ; //<S2SV> goto abort ; //<S2SV> } //<S2SV> if ( ( fd = open ( path , O_RDONLY ) ) == - 1 ) //<S2SV> goto abort ; //<S2SV> media = media_find_config ( env , srv_conf , path ) ; //<S2SV> r -> range_media = media ; //<S2SV> if ( nranges == 1 ) { //<S2SV> range = & r -> range [ 0 ] ; //<S2SV> ( void ) snprintf ( content_range , sizeof ( content_range ) , //<S2SV> "bytes<S2SV_blank>%lld-%lld/%lld" , range -> start , range -> end , //<S2SV> st -> st_size ) ; //<S2SV> if ( kv_add ( & resp -> http_headers , "Content-Range" , //<S2SV> content_range ) == NULL ) //<S2SV> goto abort ; //<S2SV> range = & r -> range [ 0 ] ; //<S2SV> content_length += range -> end - range -> start + 1 ; //<S2SV> } else { //<S2SV> arc4random_buf ( & clt -> clt_boundary , sizeof ( clt -> clt_boundary ) ) ; //<S2SV> for ( i = 0 ; i < nranges ; i ++ ) { //<S2SV> range = & r -> range [ i ] ; //<S2SV> if ( ( ret = snprintf ( NULL , 0 , //<S2SV> "\\r\\n--%llu\\r\\n" //<S2SV> "Content-Type:<S2SV_blank>%s/%s\\r\\n" //<S2SV> "Content-Range:<S2SV_blank>bytes<S2SV_blank>%lld-%lld/%lld\\r\\n\\r\\n" , //<S2SV> clt -> clt_boundary , //<S2SV> media -> media_type , media -> media_subtype , //<S2SV> range -> start , range -> end , st -> st_size ) ) < 0 ) //<S2SV> goto abort ; //<S2SV> content_length += ret + range -> end - range -> start + 1 ; //<S2SV> } //<S2SV> if ( ( ret = snprintf ( NULL , 0 , "\\r\\n--%llu--\\r\\n" , //<S2SV> clt -> clt_boundary ) ) < 0 ) //<S2SV> goto abort ; //<S2SV> content_length += ret ; //<S2SV> ( void ) strlcpy ( multipart_media . media_type , "multipart" , //<S2SV> sizeof ( multipart_media . media_type ) ) ; //<S2SV> ( void ) snprintf ( multipart_media . media_subtype , //<S2SV> sizeof ( multipart_media . media_subtype ) , //<S2SV> "byteranges;<S2SV_blank>boundary=%llu" , clt -> clt_boundary ) ; //<S2SV> media = & multipart_media ; //<S2SV> } //<S2SV> r -> range_toread = TOREAD_HTTP_RANGE ; //<S2SV> ret = server_response_http ( clt , 206 , media , content_length , //<S2SV> MINIMUM ( time ( NULL ) , st -> st_mtim . tv_sec ) ) ; //<S2SV> switch ( ret ) { //<S2SV> case - 1 : //<S2SV> goto fail ; //<S2SV> case 0 : //<S2SV> close ( fd ) ; //<S2SV> goto done ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> clt -> clt_fd = fd ; //<S2SV> if ( clt -> clt_srvbev != NULL ) //<S2SV> bufferevent_free ( clt -> clt_srvbev ) ; //<S2SV> clt -> clt_srvbev_throttled = 0 ; //<S2SV> clt -> clt_srvbev = bufferevent_new ( clt -> clt_fd , server_read_httprange , //<S2SV> server_write , server_file_error , clt ) ; //<S2SV> if ( clt -> clt_srvbev == NULL ) { //<S2SV> errstr = "failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>file<S2SV_blank>buffer<S2SV_blank>event" ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> bufferevent_setwatermark ( clt -> clt_srvbev , EV_READ , 0 , //<S2SV> clt -> clt_sndbufsiz ) ; //<S2SV> bufferevent_settimeout ( clt -> clt_srvbev , //<S2SV> srv_conf -> timeout . tv_sec , srv_conf -> timeout . tv_sec ) ; //<S2SV> bufferevent_enable ( clt -> clt_srvbev , EV_READ ) ; //<S2SV> bufferevent_disable ( clt -> clt_bev , EV_READ ) ; //<S2SV> done : //<S2SV> server_reset_http ( clt ) ; //<S2SV> return ( 0 ) ; //<S2SV> fail : //<S2SV> bufferevent_disable ( clt -> clt_bev , EV_READ | EV_WRITE ) ; //<S2SV> bufferevent_free ( clt -> clt_bev ) ; //<S2SV> clt -> clt_bev = NULL ; //<S2SV> abort : //<S2SV> if ( fd != - 1 ) //<S2SV> close ( fd ) ; //<S2SV> if ( errstr == NULL ) //<S2SV> errstr = strerror ( errno ) ; //<S2SV> server_abort_http ( clt , code , errstr ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> 