void //<S2SV> monitor_apply_keystate ( struct monitor * pmonitor ) //<S2SV> { //<S2SV> struct ssh * ssh = active_state ; //<S2SV> struct kex * kex ; //<S2SV> int r ; //<S2SV> debug3 ( "%s:<S2SV_blank>packet_set_state" , __func__ ) ; //<S2SV> if ( ( r = ssh_packet_set_state ( ssh , child_state ) ) != 0 ) //<S2SV> fatal ( "%s:<S2SV_blank>packet_set_state:<S2SV_blank>%s" , __func__ , ssh_err ( r ) ) ; //<S2SV> sshbuf_free ( child_state ) ; //<S2SV> child_state = NULL ; //<S2SV> if ( ( kex = ssh -> kex ) != NULL ) { //<S2SV> # ifdef WITH_OPENSSL //<S2SV> kex -> kex [ KEX_DH_GRP1_SHA1 ] = kexdh_server ; //<S2SV> kex -> kex [ KEX_DH_GRP14_SHA1 ] = kexdh_server ; //<S2SV> kex -> kex [ KEX_DH_GRP14_SHA256 ] = kexdh_server ; //<S2SV> kex -> kex [ KEX_DH_GRP16_SHA512 ] = kexdh_server ; //<S2SV> kex -> kex [ KEX_DH_GRP18_SHA512 ] = kexdh_server ; //<S2SV> kex -> kex [ KEX_DH_GEX_SHA1 ] = kexgex_server ; //<S2SV> kex -> kex [ KEX_DH_GEX_SHA256 ] = kexgex_server ; //<S2SV> kex -> kex [ KEX_ECDH_SHA2 ] = kexecdh_server ; //<S2SV> # endif //<S2SV> kex -> kex [ KEX_C25519_SHA256 ] = kexc25519_server ; //<S2SV> kex -> load_host_public_key = & get_hostkey_public_by_type ; //<S2SV> kex -> load_host_private_key = & get_hostkey_private_by_type ; //<S2SV> kex -> host_key_index = & get_hostkey_index ; //<S2SV> kex -> sign = sshd_hostkey_sign ; //<S2SV> } //<S2SV> } //<S2SV> 