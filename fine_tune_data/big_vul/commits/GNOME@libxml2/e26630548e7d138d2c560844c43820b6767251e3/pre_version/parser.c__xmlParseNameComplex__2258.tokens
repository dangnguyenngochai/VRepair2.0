static const xmlChar * //<S2SV> xmlParseNameComplex ( xmlParserCtxtPtr ctxt ) { //<S2SV> int len = 0 , l ; //<S2SV> int c ; //<S2SV> int count = 0 ; //<S2SV> # ifdef DEBUG //<S2SV> nbParseNameComplex ++ ; //<S2SV> # endif //<S2SV> GROW ; //<S2SV> if ( ctxt -> instate == XML_PARSER_EOF ) //<S2SV> return ( NULL ) ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> if ( ( ctxt -> options & XML_PARSE_OLD10 ) == 0 ) { //<S2SV> if ( ( c == '<S2SV_blank>' ) || ( c == '>' ) || ( c == '/' ) || //<S2SV> ( ! ( ( ( c >= 'a' ) && ( c <= 'z' ) ) || //<S2SV> ( ( c >= 'A' ) && ( c <= 'Z' ) ) || //<S2SV> ( c == '_' ) || ( c == ':' ) || //<S2SV> ( ( c >= 0xC0 ) && ( c <= 0xD6 ) ) || //<S2SV> ( ( c >= 0xD8 ) && ( c <= 0xF6 ) ) || //<S2SV> ( ( c >= 0xF8 ) && ( c <= 0x2FF ) ) || //<S2SV> ( ( c >= 0x370 ) && ( c <= 0x37D ) ) || //<S2SV> ( ( c >= 0x37F ) && ( c <= 0x1FFF ) ) || //<S2SV> ( ( c >= 0x200C ) && ( c <= 0x200D ) ) || //<S2SV> ( ( c >= 0x2070 ) && ( c <= 0x218F ) ) || //<S2SV> ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || //<S2SV> ( ( c >= 0x3001 ) && ( c <= 0xD7FF ) ) || //<S2SV> ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || //<S2SV> ( ( c >= 0xFDF0 ) && ( c <= 0xFFFD ) ) || //<S2SV> ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) ) ) ) { //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> len += l ; //<S2SV> NEXTL ( l ) ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> while ( ( c != '<S2SV_blank>' ) && ( c != '>' ) && ( c != '/' ) && //<S2SV> ( ( ( c >= 'a' ) && ( c <= 'z' ) ) || //<S2SV> ( ( c >= 'A' ) && ( c <= 'Z' ) ) || //<S2SV> ( ( c >= '0' ) && ( c <= '9' ) ) || //<S2SV> ( c == '_' ) || ( c == ':' ) || //<S2SV> ( c == '-' ) || ( c == '.' ) || ( c == 0xB7 ) || //<S2SV> ( ( c >= 0xC0 ) && ( c <= 0xD6 ) ) || //<S2SV> ( ( c >= 0xD8 ) && ( c <= 0xF6 ) ) || //<S2SV> ( ( c >= 0xF8 ) && ( c <= 0x2FF ) ) || //<S2SV> ( ( c >= 0x300 ) && ( c <= 0x36F ) ) || //<S2SV> ( ( c >= 0x370 ) && ( c <= 0x37D ) ) || //<S2SV> ( ( c >= 0x37F ) && ( c <= 0x1FFF ) ) || //<S2SV> ( ( c >= 0x200C ) && ( c <= 0x200D ) ) || //<S2SV> ( ( c >= 0x203F ) && ( c <= 0x2040 ) ) || //<S2SV> ( ( c >= 0x2070 ) && ( c <= 0x218F ) ) || //<S2SV> ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || //<S2SV> ( ( c >= 0x3001 ) && ( c <= 0xD7FF ) ) || //<S2SV> ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || //<S2SV> ( ( c >= 0xFDF0 ) && ( c <= 0xFFFD ) ) || //<S2SV> ( ( c >= 0x10000 ) && ( c <= 0xEFFFF ) ) //<S2SV> ) ) { //<S2SV> if ( count ++ > XML_PARSER_CHUNK_SIZE ) { //<S2SV> count = 0 ; //<S2SV> GROW ; //<S2SV> if ( ctxt -> instate == XML_PARSER_EOF ) //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> len += l ; //<S2SV> NEXTL ( l ) ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( ( c == '<S2SV_blank>' ) || ( c == '>' ) || ( c == '/' ) || //<S2SV> ( ! IS_LETTER ( c ) && ( c != '_' ) && //<S2SV> ( c != ':' ) ) ) { //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> len += l ; //<S2SV> NEXTL ( l ) ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> while ( ( c != '<S2SV_blank>' ) && ( c != '>' ) && ( c != '/' ) && //<S2SV> ( ( IS_LETTER ( c ) ) || ( IS_DIGIT ( c ) ) || //<S2SV> ( c == '.' ) || ( c == '-' ) || //<S2SV> ( c == '_' ) || ( c == ':' ) || //<S2SV> ( IS_COMBINING ( c ) ) || //<S2SV> ( IS_EXTENDER ( c ) ) ) ) { //<S2SV> if ( count ++ > XML_PARSER_CHUNK_SIZE ) { //<S2SV> count = 0 ; //<S2SV> GROW ; //<S2SV> if ( ctxt -> instate == XML_PARSER_EOF ) //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> len += l ; //<S2SV> NEXTL ( l ) ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> if ( c == 0 ) { //<S2SV> count = 0 ; //<S2SV> GROW ; //<S2SV> if ( ctxt -> instate == XML_PARSER_EOF ) //<S2SV> return ( NULL ) ; //<S2SV> c = CUR_CHAR ( l ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ( len > XML_MAX_NAME_LENGTH ) && //<S2SV> ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) { //<S2SV> xmlFatalErr ( ctxt , XML_ERR_NAME_TOO_LONG , "Name" ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( ( * ctxt -> input -> cur == '\\n' ) && ( ctxt -> input -> cur [ - 1 ] == '\\r' ) ) //<S2SV> return ( xmlDictLookup ( ctxt -> dict , ctxt -> input -> cur - ( len + 1 ) , len ) ) ; //<S2SV> return ( xmlDictLookup ( ctxt -> dict , ctxt -> input -> cur - len , len ) ) ; //<S2SV> } //<S2SV> 