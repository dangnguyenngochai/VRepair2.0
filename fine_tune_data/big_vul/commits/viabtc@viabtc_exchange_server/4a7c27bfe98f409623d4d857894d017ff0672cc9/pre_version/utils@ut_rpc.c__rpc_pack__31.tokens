int rpc_pack ( rpc_pkg * pkg , void * * data , uint32_t * size ) //<S2SV> { //<S2SV> static void * send_buf ; //<S2SV> static size_t send_buf_size ; //<S2SV> uint32_t pkg_size = RPC_PKG_HEAD_SIZE + pkg -> ext_size + pkg -> body_size ; //<S2SV> if ( send_buf_size < pkg_size ) { //<S2SV> if ( send_buf ) //<S2SV> free ( send_buf ) ; //<S2SV> send_buf_size = pkg_size * 2 ; //<S2SV> send_buf = malloc ( send_buf_size ) ; //<S2SV> assert ( send_buf != NULL ) ; //<S2SV> } //<S2SV> memcpy ( send_buf , pkg , RPC_PKG_HEAD_SIZE ) ; //<S2SV> if ( pkg -> ext_size ) //<S2SV> memcpy ( send_buf + RPC_PKG_HEAD_SIZE , pkg -> ext , pkg -> ext_size ) ; //<S2SV> if ( pkg -> body_size ) //<S2SV> memcpy ( send_buf + RPC_PKG_HEAD_SIZE + pkg -> ext_size , pkg -> body , pkg -> body_size ) ; //<S2SV> pkg = send_buf ; //<S2SV> pkg -> magic = htole32 ( RPC_PKG_MAGIC ) ; //<S2SV> pkg -> command = htole32 ( pkg -> command ) ; //<S2SV> pkg -> pkg_type = htole16 ( pkg -> pkg_type ) ; //<S2SV> pkg -> result = htole32 ( pkg -> result ) ; //<S2SV> pkg -> sequence = htole32 ( pkg -> sequence ) ; //<S2SV> pkg -> req_id = htole64 ( pkg -> req_id ) ; //<S2SV> pkg -> body_size = htole32 ( pkg -> body_size ) ; //<S2SV> pkg -> ext_size = htole16 ( pkg -> ext_size ) ; //<S2SV> pkg -> crc32 = 0 ; //<S2SV> pkg -> crc32 = htole32 ( generate_crc32c ( send_buf , pkg_size ) ) ; //<S2SV> * data = send_buf ; //<S2SV> * size = pkg_size ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 