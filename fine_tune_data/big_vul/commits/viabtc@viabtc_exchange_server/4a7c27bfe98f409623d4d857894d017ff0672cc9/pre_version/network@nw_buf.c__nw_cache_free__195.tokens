void nw_cache_free ( nw_cache * cache , void * obj ) //<S2SV> { //<S2SV> if ( cache -> free < cache -> free_total ) { //<S2SV> cache -> free_arr [ cache -> free ++ ] = obj ; //<S2SV> } else { //<S2SV> uint32_t new_free_total = cache -> free_total * 2 ; //<S2SV> void * new_arr = realloc ( cache -> free_arr , new_free_total * sizeof ( void * ) ) ; //<S2SV> if ( new_arr ) { //<S2SV> cache -> free_total = new_free_total ; //<S2SV> cache -> free_arr = new_arr ; //<S2SV> cache -> free_arr [ cache -> free ++ ] = obj ; //<S2SV> } else { //<S2SV> free ( obj ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 