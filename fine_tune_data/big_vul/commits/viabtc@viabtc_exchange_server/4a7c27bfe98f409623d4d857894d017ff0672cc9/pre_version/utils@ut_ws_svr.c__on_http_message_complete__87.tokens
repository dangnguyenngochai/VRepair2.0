static int on_http_message_complete ( http_parser * parser ) //<S2SV> { //<S2SV> struct clt_info * info = parser -> data ; //<S2SV> ws_svr * svr = ws_svr_from_ses ( info -> ses ) ; //<S2SV> info -> request -> version_major = parser -> http_major ; //<S2SV> info -> request -> version_minor = parser -> http_minor ; //<S2SV> info -> request -> method = parser -> method ; //<S2SV> dict_entry * entry ; //<S2SV> dict_iterator * iter = dict_get_iterator ( info -> request -> headers ) ; //<S2SV> while ( ( entry = dict_next ( iter ) ) != NULL ) { //<S2SV> log_trace ( "Header:<S2SV_blank>%s:<S2SV_blank>%s" , ( char * ) entry -> key , ( char * ) entry -> val ) ; //<S2SV> } //<S2SV> dict_release_iterator ( iter ) ; //<S2SV> if ( info -> request -> method != HTTP_GET ) //<S2SV> goto error ; //<S2SV> if ( http_request_get_header ( info -> request , "Host" ) == NULL ) //<S2SV> goto error ; //<S2SV> double version = info -> request -> version_major + info -> request -> version_minor * 0.1 ; //<S2SV> if ( version < 1.1 ) //<S2SV> goto error ; //<S2SV> const char * upgrade = http_request_get_header ( info -> request , "Upgrade" ) ; //<S2SV> if ( upgrade == NULL || strcasecmp ( upgrade , "websocket" ) != 0 ) //<S2SV> goto error ; //<S2SV> const char * connection = http_request_get_header ( info -> request , "Connection" ) ; //<S2SV> if ( connection == NULL ) //<S2SV> goto error ; //<S2SV> else { //<S2SV> bool found_upgrade = false ; //<S2SV> int count ; //<S2SV> sds * tokens = sdssplitlen ( connection , strlen ( connection ) , "," , 1 , & count ) ; //<S2SV> if ( tokens == NULL ) //<S2SV> goto error ; //<S2SV> for ( int i = 0 ; i < count ; i ++ ) { //<S2SV> sds token = tokens [ i ] ; //<S2SV> sdstrim ( token , "<S2SV_blank>" ) ; //<S2SV> if ( strcasecmp ( token , "Upgrade" ) == 0 ) { //<S2SV> found_upgrade = true ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> sdsfreesplitres ( tokens , count ) ; //<S2SV> if ( ! found_upgrade ) //<S2SV> goto error ; //<S2SV> } //<S2SV> const char * ws_version = http_request_get_header ( info -> request , "Sec-WebSocket-Version" ) ; //<S2SV> if ( ws_version == NULL || strcmp ( ws_version , "13" ) != 0 ) //<S2SV> goto error ; //<S2SV> const char * ws_key = http_request_get_header ( info -> request , "Sec-WebSocket-Key" ) ; //<S2SV> if ( ws_key == NULL ) //<S2SV> goto error ; //<S2SV> const char * protocol_list = http_request_get_header ( info -> request , "Sec-WebSocket-Protocol" ) ; //<S2SV> if ( protocol_list && ! is_good_protocol ( protocol_list , svr -> protocol ) ) //<S2SV> goto error ; //<S2SV> if ( strlen ( svr -> origin ) > 0 ) { //<S2SV> const char * origin = http_request_get_header ( info -> request , "Origin" ) ; //<S2SV> if ( origin == NULL || ! is_good_origin ( origin , svr -> origin ) ) //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( svr -> type . on_privdata_alloc ) { //<S2SV> info -> privdata = svr -> type . on_privdata_alloc ( svr ) ; //<S2SV> if ( info -> privdata == NULL ) //<S2SV> goto error ; //<S2SV> } //<S2SV> info -> upgrade = true ; //<S2SV> info -> remote = sdsnew ( http_get_remote_ip ( info -> ses , info -> request ) ) ; //<S2SV> info -> url = sdsnew ( info -> request -> url ) ; //<S2SV> if ( svr -> type . on_upgrade ) { //<S2SV> svr -> type . on_upgrade ( info -> ses , info -> remote ) ; //<S2SV> } //<S2SV> if ( protocol_list ) { //<S2SV> send_hand_shake_reply ( info -> ses , svr -> protocol , ws_key ) ; //<S2SV> } else { //<S2SV> send_hand_shake_reply ( info -> ses , NULL , ws_key ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> error : //<S2SV> ws_svr_close_clt ( ws_svr_from_ses ( info -> ses ) , info -> ses ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 