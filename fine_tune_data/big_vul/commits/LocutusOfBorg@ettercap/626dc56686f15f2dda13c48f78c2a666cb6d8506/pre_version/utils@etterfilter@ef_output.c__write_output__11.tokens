int write_output ( void ) //<S2SV> { //<S2SV> int fd ; //<S2SV> struct filter_op * fop ; //<S2SV> struct filter_header fh ; //<S2SV> size_t ninst , i ; //<S2SV> u_char * data ; //<S2SV> ninst = compile_tree ( & fop ) ; //<S2SV> if ( fop == NULL ) //<S2SV> return - E_NOTHANDLED ; //<S2SV> fd = open ( EF_GBL_OPTIONS -> output_file , O_CREAT | O_RDWR | O_TRUNC | O_BINARY , 0644 ) ; //<S2SV> ON_ERROR ( fd , - 1 , "Can\'t<S2SV_blank>create<S2SV_blank>file<S2SV_blank>%s" , EF_GBL_OPTIONS -> output_file ) ; //<S2SV> fprintf ( stdout , "<S2SV_blank>Writing<S2SV_blank>output<S2SV_blank>to<S2SV_blank>\\\'%s\\\'<S2SV_blank>" , EF_GBL_OPTIONS -> output_file ) ; //<S2SV> fflush ( stdout ) ; //<S2SV> fh . magic = htons ( EC_FILTER_MAGIC ) ; //<S2SV> strncpy ( fh . version , EC_VERSION , sizeof ( fh . version ) ) ; //<S2SV> fh . data = sizeof ( fh ) ; //<S2SV> data = create_data_segment ( & fh , fop , ninst ) ; //<S2SV> write ( fd , & fh , sizeof ( struct filter_header ) ) ; //<S2SV> write ( fd , data , fh . code - fh . data ) ; //<S2SV> for ( i = 0 ; i <= ninst ; i ++ ) { //<S2SV> print_progress_bar ( & fop [ i ] ) ; //<S2SV> write ( fd , & fop [ i ] , sizeof ( struct filter_op ) ) ; //<S2SV> } //<S2SV> close ( fd ) ; //<S2SV> fprintf ( stdout , "<S2SV_blank>done.\\n\\n" ) ; //<S2SV> fprintf ( stdout , "<S2SV_blank>-><S2SV_blank>Script<S2SV_blank>encoded<S2SV_blank>into<S2SV_blank>%d<S2SV_blank>instructions.\\n\\n" , ( int ) ( i - 1 ) ) ; //<S2SV> return E_SUCCESS ; //<S2SV> } //<S2SV> 