static char * decode_text_string ( const char * str , size_t str_len ) //<S2SV> { //<S2SV> int idx , is_hex , is_utf16be , ascii_idx ; //<S2SV> char * ascii , hex_buf [ 5 ] = { 0 } ; //<S2SV> is_hex = is_utf16be = idx = ascii_idx = 0 ; //<S2SV> if ( str [ 0 ] == '(' ) //<S2SV> { //<S2SV> ascii = malloc ( strlen ( str ) + 1 ) ; //<S2SV> strncpy ( ascii , str , strlen ( str ) + 1 ) ; //<S2SV> return ascii ; //<S2SV> } //<S2SV> else if ( str [ 0 ] == '<' ) //<S2SV> { //<S2SV> is_hex = 1 ; //<S2SV> ++ idx ; //<S2SV> } //<S2SV> if ( is_hex && ( str_len > 5 ) && //<S2SV> ( str [ idx ] == 'F' ) && ( str [ idx + 1 ] == 'E' ) && //<S2SV> ( str [ idx + 2 ] == 'F' ) && ( str [ idx + 3 ] == 'F' ) ) //<S2SV> { //<S2SV> is_utf16be = 1 ; //<S2SV> idx += 4 ; //<S2SV> } //<S2SV> else //<S2SV> return NULL ; //<S2SV> ascii = malloc ( str_len ) ; //<S2SV> for ( ; idx < str_len ; ++ idx ) //<S2SV> { //<S2SV> hex_buf [ 0 ] = str [ idx ++ ] ; //<S2SV> hex_buf [ 1 ] = str [ idx ++ ] ; //<S2SV> hex_buf [ 2 ] = str [ idx ++ ] ; //<S2SV> hex_buf [ 3 ] = str [ idx ] ; //<S2SV> ascii [ ascii_idx ++ ] = strtol ( hex_buf , NULL , 16 ) ; //<S2SV> } //<S2SV> return ascii ; //<S2SV> } //<S2SV> 