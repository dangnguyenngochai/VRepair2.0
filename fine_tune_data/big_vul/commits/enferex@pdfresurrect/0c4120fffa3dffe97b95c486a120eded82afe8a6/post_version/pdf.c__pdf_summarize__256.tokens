void pdf_summarize ( //<S2SV> FILE * fp , //<S2SV> const pdf_t * pdf , //<S2SV> const char * name , //<S2SV> pdf_flag_t flags ) //<S2SV> { //<S2SV> int i , j , page , n_versions , n_entries ; //<S2SV> FILE * dst , * out ; //<S2SV> char * dst_name , * c ; //<S2SV> dst = NULL ; //<S2SV> dst_name = NULL ; //<S2SV> if ( name ) //<S2SV> { //<S2SV> dst_name = safe_calloc ( strlen ( name ) * 2 + 16 ) ; //<S2SV> sprintf ( dst_name , "%s/%s" , name , name ) ; //<S2SV> if ( ( c = strrchr ( dst_name , '.' ) ) && ( strncmp ( c , ".pdf" , 4 ) == 0 ) ) //<S2SV> * c = '\\0' ; //<S2SV> strcat ( dst_name , ".summary" ) ; //<S2SV> if ( ! ( dst = fopen ( dst_name , "w" ) ) ) //<S2SV> { //<S2SV> ERR ( "Could<S2SV_blank>not<S2SV_blank>open<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>for<S2SV_blank>writing\\n" , dst_name ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> out = ( dst ) ? dst : stdout ; //<S2SV> n_versions = pdf -> n_xrefs ; //<S2SV> if ( n_versions && pdf -> xrefs [ 0 ] . is_linear ) //<S2SV> -- n_versions ; //<S2SV> for ( i = 1 ; i < pdf -> n_xrefs ; ++ i ) //<S2SV> if ( pdf -> xrefs [ i ] . end == 0 ) //<S2SV> -- n_versions ; //<S2SV> if ( ! pdf -> n_xrefs || ( ! n_versions && pdf -> xrefs [ 0 ] . is_linear ) ) //<S2SV> n_versions = 1 ; //<S2SV> n_entries = 0 ; //<S2SV> for ( i = 0 ; ! ( const int ) pdf -> has_xref_streams && i < pdf -> n_xrefs ; i ++ ) //<S2SV> { //<S2SV> if ( flags & PDF_FLAG_QUIET ) //<S2SV> continue ; //<S2SV> for ( j = 0 ; j < pdf -> xrefs [ i ] . n_entries ; j ++ ) //<S2SV> { //<S2SV> ++ n_entries ; //<S2SV> fprintf ( out , //<S2SV> "%s:<S2SV_blank>--%c--<S2SV_blank>Version<S2SV_blank>%d<S2SV_blank>--<S2SV_blank>Object<S2SV_blank>%d<S2SV_blank>(%s)" , //<S2SV> pdf -> name , //<S2SV> pdf_get_object_status ( pdf , i , j ) , //<S2SV> pdf -> xrefs [ i ] . version , //<S2SV> pdf -> xrefs [ i ] . entries [ j ] . obj_id , //<S2SV> get_type ( fp , pdf -> xrefs [ i ] . entries [ j ] . obj_id , //<S2SV> & pdf -> xrefs [ i ] ) ) ; //<S2SV> if ( 0 ) //<S2SV> fprintf ( out , "<S2SV_blank>Page(%d)\\n" , page ) ; //<S2SV> else //<S2SV> fprintf ( out , "\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! ( flags & PDF_FLAG_QUIET ) ) //<S2SV> { //<S2SV> if ( pdf -> has_xref_streams || ! n_entries ) //<S2SV> fprintf ( out , //<S2SV> "%s:<S2SV_blank>This<S2SV_blank>PDF<S2SV_blank>contains<S2SV_blank>potential<S2SV_blank>cross<S2SV_blank>reference<S2SV_blank>streams.\\n" //<S2SV> "%s:<S2SV_blank>An<S2SV_blank>object<S2SV_blank>summary<S2SV_blank>is<S2SV_blank>not<S2SV_blank>available.\\n" , //<S2SV> pdf -> name , //<S2SV> pdf -> name ) ; //<S2SV> fprintf ( out , //<S2SV> "----------<S2SV_blank>%s<S2SV_blank>----------\\n" //<S2SV> "Versions:<S2SV_blank>%d\\n" , //<S2SV> pdf -> name , //<S2SV> n_versions ) ; //<S2SV> if ( ! pdf -> has_xref_streams ) //<S2SV> for ( i = 0 ; i < pdf -> n_xrefs ; i ++ ) //<S2SV> { //<S2SV> if ( pdf -> xrefs [ i ] . is_linear ) //<S2SV> continue ; //<S2SV> n_entries = pdf -> xrefs [ i ] . n_entries ; //<S2SV> if ( pdf -> xrefs [ 0 ] . is_linear ) //<S2SV> n_entries += pdf -> xrefs [ 0 ] . n_entries ; //<S2SV> if ( pdf -> xrefs [ i ] . version && n_entries ) //<S2SV> fprintf ( out , //<S2SV> "Version<S2SV_blank>%d<S2SV_blank>--<S2SV_blank>%d<S2SV_blank>objects\\n" , //<S2SV> pdf -> xrefs [ i ] . version , //<S2SV> n_entries ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> fprintf ( out , "%s:<S2SV_blank>%d\\n" , pdf -> name , n_versions ) ; //<S2SV> if ( dst ) //<S2SV> { //<S2SV> fclose ( dst ) ; //<S2SV> free ( dst_name ) ; //<S2SV> } //<S2SV> } //<S2SV> 