const char * WinPKIErrorString ( void ) //<S2SV> { //<S2SV> static char error_string [ 64 ] ; //<S2SV> DWORD error_code = GetLastError ( ) ; //<S2SV> if ( ( error_code >> 16 ) != 0x8009 ) //<S2SV> return WindowsErrorString ( ) ; //<S2SV> switch ( error_code ) { //<S2SV> case NTE_BAD_UID : //<S2SV> return "Bad<S2SV_blank>UID." ; //<S2SV> case CRYPT_E_MSG_ERROR : //<S2SV> return "An<S2SV_blank>error<S2SV_blank>occurred<S2SV_blank>while<S2SV_blank>performing<S2SV_blank>an<S2SV_blank>operation<S2SV_blank>on<S2SV_blank>a<S2SV_blank>cryptographic<S2SV_blank>message." ; //<S2SV> case CRYPT_E_UNKNOWN_ALGO : //<S2SV> return "Unknown<S2SV_blank>cryptographic<S2SV_blank>algorithm." ; //<S2SV> case CRYPT_E_INVALID_MSG_TYPE : //<S2SV> return "Invalid<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>type." ; //<S2SV> case CRYPT_E_HASH_VALUE : //<S2SV> return "The<S2SV_blank>hash<S2SV_blank>value<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correct" ; //<S2SV> case CRYPT_E_ISSUER_SERIALNUMBER : //<S2SV> return "Invalid<S2SV_blank>issuer<S2SV_blank>and/or<S2SV_blank>serial<S2SV_blank>number." ; //<S2SV> case CRYPT_E_BAD_LEN : //<S2SV> return "The<S2SV_blank>length<S2SV_blank>specified<S2SV_blank>for<S2SV_blank>the<S2SV_blank>output<S2SV_blank>data<S2SV_blank>was<S2SV_blank>insufficient." ; //<S2SV> case CRYPT_E_BAD_ENCODE : //<S2SV> return "An<S2SV_blank>error<S2SV_blank>occurred<S2SV_blank>during<S2SV_blank>encode<S2SV_blank>or<S2SV_blank>decode<S2SV_blank>operation." ; //<S2SV> case CRYPT_E_FILE_ERROR : //<S2SV> return "An<S2SV_blank>error<S2SV_blank>occurred<S2SV_blank>while<S2SV_blank>reading<S2SV_blank>or<S2SV_blank>writing<S2SV_blank>to<S2SV_blank>a<S2SV_blank>file." ; //<S2SV> case CRYPT_E_NOT_FOUND : //<S2SV> return "Cannot<S2SV_blank>find<S2SV_blank>object<S2SV_blank>or<S2SV_blank>property." ; //<S2SV> case CRYPT_E_EXISTS : //<S2SV> return "The<S2SV_blank>object<S2SV_blank>or<S2SV_blank>property<S2SV_blank>already<S2SV_blank>exists." ; //<S2SV> case CRYPT_E_NO_PROVIDER : //<S2SV> return "No<S2SV_blank>provider<S2SV_blank>was<S2SV_blank>specified<S2SV_blank>for<S2SV_blank>the<S2SV_blank>store<S2SV_blank>or<S2SV_blank>object." ; //<S2SV> case CRYPT_E_DELETED_PREV : //<S2SV> return "The<S2SV_blank>previous<S2SV_blank>certificate<S2SV_blank>or<S2SV_blank>CRL<S2SV_blank>context<S2SV_blank>was<S2SV_blank>deleted." ; //<S2SV> case CRYPT_E_NO_MATCH : //<S2SV> return "Cannot<S2SV_blank>find<S2SV_blank>the<S2SV_blank>requested<S2SV_blank>object." ; //<S2SV> case CRYPT_E_UNEXPECTED_MSG_TYPE : //<S2SV> case CRYPT_E_NO_KEY_PROPERTY : //<S2SV> case CRYPT_E_NO_DECRYPT_CERT : //<S2SV> return "Private<S2SV_blank>key<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>issue" ; //<S2SV> case CRYPT_E_BAD_MSG : //<S2SV> return "Not<S2SV_blank>a<S2SV_blank>cryptographic<S2SV_blank>message." ; //<S2SV> case CRYPT_E_NO_SIGNER : //<S2SV> return "The<S2SV_blank>signed<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>does<S2SV_blank>not<S2SV_blank>have<S2SV_blank>a<S2SV_blank>signer<S2SV_blank>for<S2SV_blank>the<S2SV_blank>specified<S2SV_blank>signer<S2SV_blank>index." ; //<S2SV> case CRYPT_E_REVOKED : //<S2SV> return "The<S2SV_blank>certificate<S2SV_blank>is<S2SV_blank>revoked." ; //<S2SV> case CRYPT_E_NO_REVOCATION_DLL : //<S2SV> case CRYPT_E_NO_REVOCATION_CHECK : //<S2SV> case CRYPT_E_REVOCATION_OFFLINE : //<S2SV> case CRYPT_E_NOT_IN_REVOCATION_DATABASE : //<S2SV> return "Cannot<S2SV_blank>check<S2SV_blank>certificate<S2SV_blank>revocation." ; //<S2SV> case CRYPT_E_INVALID_NUMERIC_STRING : //<S2SV> case CRYPT_E_INVALID_PRINTABLE_STRING : //<S2SV> case CRYPT_E_INVALID_IA5_STRING : //<S2SV> case CRYPT_E_INVALID_X500_STRING : //<S2SV> case CRYPT_E_NOT_CHAR_STRING : //<S2SV> return "Invalid<S2SV_blank>string." ; //<S2SV> case CRYPT_E_SECURITY_SETTINGS : //<S2SV> return "The<S2SV_blank>cryptographic<S2SV_blank>operation<S2SV_blank>failed<S2SV_blank>due<S2SV_blank>to<S2SV_blank>a<S2SV_blank>local<S2SV_blank>security<S2SV_blank>option<S2SV_blank>setting." ; //<S2SV> case CRYPT_E_NO_VERIFY_USAGE_CHECK : //<S2SV> case CRYPT_E_VERIFY_USAGE_OFFLINE : //<S2SV> return "Cannot<S2SV_blank>complete<S2SV_blank>usage<S2SV_blank>check." ; //<S2SV> case CRYPT_E_NO_TRUSTED_SIGNER : //<S2SV> return "None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted." ; //<S2SV> default : //<S2SV> static_sprintf ( error_string , "Unknown<S2SV_blank>PKI<S2SV_blank>error<S2SV_blank>0x%08lX" , error_code ) ; //<S2SV> return error_string ; //<S2SV> } //<S2SV> } //<S2SV> 