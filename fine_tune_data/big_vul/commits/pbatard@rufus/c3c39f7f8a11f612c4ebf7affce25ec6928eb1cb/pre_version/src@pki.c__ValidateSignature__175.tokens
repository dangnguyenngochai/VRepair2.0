LONG ValidateSignature ( HWND hDlg , const char * path ) //<S2SV> { //<S2SV> LONG r ; //<S2SV> WINTRUST_DATA trust_data = { 0 } ; //<S2SV> WINTRUST_FILE_INFO trust_file = { 0 } ; //<S2SV> GUID guid_generic_verify = //<S2SV> { 0xaac56b , 0xcd44 , 0x11d0 , { 0x8c , 0xc2 , 0x0 , 0xc0 , 0x4f , 0xc2 , 0x95 , 0xee } } ; //<S2SV> char * signature_name ; //<S2SV> size_t i , len ; //<S2SV> signature_name = GetSignatureName ( path ) ; //<S2SV> if ( signature_name == NULL ) { //<S2SV> uprintf ( "PKI:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>get<S2SV_blank>signature<S2SV_blank>name" ) ; //<S2SV> MessageBoxExU ( hDlg , lmprintf ( MSG_284 ) , lmprintf ( MSG_283 ) , MB_OK | MB_ICONERROR | MB_IS_RTL , selected_langid ) ; //<S2SV> return TRUST_E_NOSIGNATURE ; //<S2SV> } //<S2SV> for ( i = 0 ; i < ARRAYSIZE ( cert_name ) ; i ++ ) { //<S2SV> len = strlen ( cert_name [ i ] ) ; //<S2SV> if ( strncmp ( signature_name , cert_name [ i ] , len ) == 0 ) { //<S2SV> if ( ( len >= strlen ( signature_name ) ) || isspace ( signature_name [ len ] ) ) //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( i >= ARRAYSIZE ( cert_name ) ) { //<S2SV> uprintf ( "PKI:<S2SV_blank>Signature<S2SV_blank>\'%s\'<S2SV_blank>is<S2SV_blank>unexpected..." , signature_name ) ; //<S2SV> if ( MessageBoxExU ( hDlg , lmprintf ( MSG_285 , signature_name ) , lmprintf ( MSG_283 ) , //<S2SV> MB_YESNO | MB_ICONWARNING | MB_IS_RTL , selected_langid ) != IDYES ) //<S2SV> return TRUST_E_EXPLICIT_DISTRUST ; //<S2SV> } //<S2SV> trust_file . cbStruct = sizeof ( trust_file ) ; //<S2SV> trust_file . pcwszFilePath = utf8_to_wchar ( path ) ; //<S2SV> if ( trust_file . pcwszFilePath == NULL ) { //<S2SV> uprintf ( "PKI:<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>\'%s\'<S2SV_blank>to<S2SV_blank>UTF16" , path ) ; //<S2SV> return ERROR_SEVERITY_ERROR | FAC ( FACILITY_CERT ) | ERROR_NOT_ENOUGH_MEMORY ; //<S2SV> } //<S2SV> trust_data . cbStruct = sizeof ( trust_data ) ; //<S2SV> trust_data . dwUIChoice = WTD_UI_ALL ; //<S2SV> trust_data . fdwRevocationChecks = WTD_REVOKE_WHOLECHAIN ; //<S2SV> trust_data . dwProvFlags = WTD_REVOCATION_CHECK_CHAIN | 0x400 ; //<S2SV> trust_data . dwUnionChoice = WTD_CHOICE_FILE ; //<S2SV> trust_data . pFile = & trust_file ; //<S2SV> r = WinVerifyTrust ( NULL , & guid_generic_verify , & trust_data ) ; //<S2SV> safe_free ( trust_file . pcwszFilePath ) ; //<S2SV> return r ; //<S2SV> } //<S2SV> 