int yr_object_array_set_item ( //<S2SV> YR_OBJECT * object , //<S2SV> YR_OBJECT * item , //<S2SV> int index ) //<S2SV> { //<S2SV> YR_OBJECT_ARRAY * array ; //<S2SV> int i ; //<S2SV> int count ; //<S2SV> assert ( index >= 0 ) ; //<S2SV> assert ( object -> type == OBJECT_TYPE_ARRAY ) ; //<S2SV> array = object_as_array ( object ) ; //<S2SV> if ( array -> items == NULL ) //<S2SV> { //<S2SV> count = 64 ; //<S2SV> while ( count <= index ) //<S2SV> count *= 2 ; //<S2SV> array -> items = ( YR_ARRAY_ITEMS * ) yr_malloc ( //<S2SV> sizeof ( YR_ARRAY_ITEMS ) + count * sizeof ( YR_OBJECT * ) ) ; //<S2SV> if ( array -> items == NULL ) //<S2SV> return ERROR_INSUFFICIENT_MEMORY ; //<S2SV> memset ( array -> items -> objects , 0 , count * sizeof ( YR_OBJECT * ) ) ; //<S2SV> array -> items -> count = count ; //<S2SV> } //<S2SV> else if ( index >= array -> items -> count ) //<S2SV> { //<S2SV> count = array -> items -> count * 2 ; //<S2SV> while ( count <= index ) //<S2SV> count *= 2 ; //<S2SV> array -> items = ( YR_ARRAY_ITEMS * ) yr_realloc ( //<S2SV> array -> items , //<S2SV> sizeof ( YR_ARRAY_ITEMS ) + count * sizeof ( YR_OBJECT * ) ) ; //<S2SV> if ( array -> items == NULL ) //<S2SV> return ERROR_INSUFFICIENT_MEMORY ; //<S2SV> for ( i = array -> items -> count ; i < count ; i ++ ) //<S2SV> array -> items -> objects [ i ] = NULL ; //<S2SV> array -> items -> count = count ; //<S2SV> } //<S2SV> item -> parent = object ; //<S2SV> array -> items -> objects [ index ] = item ; //<S2SV> return ERROR_SUCCESS ; //<S2SV> } //<S2SV> 