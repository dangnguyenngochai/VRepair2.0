void test_re ( ) //<S2SV> { //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ssi/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ssi(s|p)/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ssim*/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ssa?/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/Miss/<S2SV_blank>nocase<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/(M|N)iss/<S2SV_blank>nocase<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/[M-N]iss/<S2SV_blank>nocase<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/(Mi|ssi)ssippi/<S2SV_blank>nocase<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ppi\\\\tmi/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ppi\\\\.mi/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/^mississippi/<S2SV_blank>fullword<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_true_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/mississippi.*mississippi$/s<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi\\tmississippi.mississippi\\nmississippi" ) ; //<S2SV> assert_false_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/^ssi/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi" ) ; //<S2SV> assert_false_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ssi$/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi" ) ; //<S2SV> assert_false_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/ssissi/<S2SV_blank>fullword<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi" ) ; //<S2SV> assert_false_rule ( //<S2SV> "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/^[isp]+/<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , //<S2SV> "mississippi" ) ; //<S2SV> assert_regexp_syntax_error ( ")" ) ; //<S2SV> assert_true_regexp ( "abc" , "abc" , "abc" ) ; //<S2SV> assert_false_regexp ( "abc" , "xbc" ) ; //<S2SV> assert_false_regexp ( "abc" , "axc" ) ; //<S2SV> assert_false_regexp ( "abc" , "abx" ) ; //<S2SV> assert_true_regexp ( "abc" , "xabcx" , "abc" ) ; //<S2SV> assert_true_regexp ( "abc" , "ababc" , "abc" ) ; //<S2SV> assert_true_regexp ( "a.c" , "abc" , "abc" ) ; //<S2SV> assert_false_regexp ( "a.b" , "a\\nb" ) ; //<S2SV> assert_false_regexp ( "a.*b" , "acc\\nccb" ) ; //<S2SV> assert_false_regexp ( "a.{4,5}b" , "acc\\nccb" ) ; //<S2SV> assert_true_regexp ( "a.b" , "a\\rb" , "a\\rb" ) ; //<S2SV> assert_true_regexp ( "ab*c" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "ab*c" , "ac" , "ac" ) ; //<S2SV> assert_true_regexp ( "ab*bc" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "ab*bc" , "abbc" , "abbc" ) ; //<S2SV> assert_true_regexp ( "a.*bb" , "abbbb" , "abbbb" ) ; //<S2SV> assert_true_regexp ( "a.*?bbb" , "abbbbbb" , "abbb" ) ; //<S2SV> assert_true_regexp ( "a.*c" , "ac" , "ac" ) ; //<S2SV> assert_true_regexp ( "a.*c" , "axyzc" , "axyzc" ) ; //<S2SV> assert_true_regexp ( "ab+c" , "abbc" , "abbc" ) ; //<S2SV> assert_false_regexp ( "ab+c" , "ac" ) ; //<S2SV> assert_true_regexp ( "ab+" , "abbbb" , "abbbb" ) ; //<S2SV> assert_true_regexp ( "ab+?" , "abbbb" , "ab" ) ; //<S2SV> assert_false_regexp ( "ab+bc" , "abc" ) ; //<S2SV> assert_false_regexp ( "ab+bc" , "abq" ) ; //<S2SV> assert_true_regexp ( "a+b+c" , "aabbabc" , "abc" ) ; //<S2SV> assert_false_regexp ( "ab?bc" , "abbbbc" ) ; //<S2SV> assert_true_regexp ( "ab?c" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "ab*?" , "abbb" , "a" ) ; //<S2SV> assert_true_regexp ( "ab?c" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "ab??" , "ab" , "a" ) ; //<S2SV> assert_true_regexp ( "a(b|x)c" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "a(b|x)c" , "axc" , "axc" ) ; //<S2SV> assert_true_regexp ( "a(b|.)c" , "axc" , "axc" ) ; //<S2SV> assert_true_regexp ( "a(b|x|y)c" , "ayc" , "ayc" ) ; //<S2SV> assert_true_regexp ( "(a+|b)*" , "ab" , "ab" ) ; //<S2SV> assert_true_regexp ( "a|b|c|d|e" , "e" , "e" ) ; //<S2SV> assert_true_regexp ( "(a|b|c|d|e)f" , "ef" , "ef" ) ; //<S2SV> assert_true_regexp ( ".b{2}" , "abb" , "abb" ) ; //<S2SV> assert_true_regexp ( "ab{1}c" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "ab{1,2}c" , "abbc" , "abbc" ) ; //<S2SV> assert_true_regexp ( "ab{1,}c" , "abbbc" , "abbbc" ) ; //<S2SV> assert_false_regexp ( "ab{1,}b" , "ab" ) ; //<S2SV> assert_false_regexp ( "ab{1}c" , "abbc" ) ; //<S2SV> assert_true_regexp ( "ab{0,}c" , "ac" , "ac" ) ; //<S2SV> assert_true_regexp ( "ab{0,}c" , "abbbc" , "abbbc" ) ; //<S2SV> assert_true_regexp ( "ab{,3}c" , "abbbc" , "abbbc" ) ; //<S2SV> assert_false_regexp ( "ab{,2}c" , "abbbc" ) ; //<S2SV> assert_false_regexp ( "ab{4,5}bc" , "abbbbc" ) ; //<S2SV> assert_true_regexp ( "ab{2,3}?" , "abbbbb" , "abb" ) ; //<S2SV> assert_true_regexp ( "ab{.*}" , "ab{c}" , "ab{c}" ) ; //<S2SV> assert_true_regexp ( ".(aa){1,2}" , "aaaaaaaaaa" , "aaaaa" ) ; //<S2SV> assert_true_regexp ( "a.(bc.){2}" , "aabcabca" , "aabcabca" ) ; //<S2SV> assert_true_regexp ( "(ab{1,2}c){1,3}" , "abbcabc" , "abbcabc" ) ; //<S2SV> assert_true_regexp ( "ab(c|cc){1,3}d" , "abccccccd" , "abccccccd" ) ; //<S2SV> assert_true_regexp ( "a[bx]c" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "a[bx]c" , "axc" , "axc" ) ; //<S2SV> assert_true_regexp ( "a[0-9]*b" , "ab" , "ab" ) ; //<S2SV> assert_true_regexp ( "a[0-9]*b" , "a0123456789b" , "a0123456789b" ) ; //<S2SV> assert_true_regexp ( "[0-9a-f]+" , "0123456789abcdef" , "0123456789abcdef" ) ; //<S2SV> assert_true_regexp ( "[0-9a-f]+" , "xyz0123456789xyz" , "0123456789" ) ; //<S2SV> assert_true_regexp ( "a[\\\\s\\\\S]b" , "a<S2SV_blank>b" , "a<S2SV_blank>b" ) ; //<S2SV> assert_true_regexp ( "a[\\\\d\\\\D]b" , "a1b" , "a1b" ) ; //<S2SV> assert_false_regexp ( "[x-z]+" , "abc" ) ; //<S2SV> assert_true_regexp ( "a[-]?c" , "ac" , "ac" ) ; //<S2SV> assert_true_regexp ( "a[-b]" , "a-" , "a-" ) ; //<S2SV> assert_true_regexp ( "a[-b]" , "ab" , "ab" ) ; //<S2SV> assert_true_regexp ( "a[b-]" , "a-" , "a-" ) ; //<S2SV> assert_true_regexp ( "a[b-]" , "ab" , "ab" ) ; //<S2SV> assert_true_regexp ( "[a-c-e]" , "b" , "b" ) ; //<S2SV> assert_true_regexp ( "[a-c-e]" , "-" , "-" ) ; //<S2SV> assert_false_regexp ( "[a-c-e]" , "d" ) ; //<S2SV> assert_regexp_syntax_error ( "[b-a]" ) ; //<S2SV> assert_regexp_syntax_error ( "(abc" ) ; //<S2SV> assert_regexp_syntax_error ( "abc)" ) ; //<S2SV> assert_regexp_syntax_error ( "a[]b" ) ; //<S2SV> assert_regexp_syntax_error ( "a\\\\" ) ; //<S2SV> assert_true_regexp ( "a[\\\\-b]" , "a-" , "a-" ) ; //<S2SV> assert_true_regexp ( "a[\\\\-b]" , "ab" , "ab" ) ; //<S2SV> assert_regexp_syntax_error ( "a[\\\\" ) ; //<S2SV> assert_true_regexp ( "a]" , "a]" , "a]" ) ; //<S2SV> assert_true_regexp ( "a[]]b" , "a]b" , "a]b" ) ; //<S2SV> assert_true_regexp ( "a[\\\\]]b" , "a]b" , "a]b" ) ; //<S2SV> assert_true_regexp ( "a[^bc]d" , "aed" , "aed" ) ; //<S2SV> assert_false_regexp ( "a[^bc]d" , "abd" ) ; //<S2SV> assert_true_regexp ( "a[^-b]c" , "adc" , "adc" ) ; //<S2SV> assert_false_regexp ( "a[^-b]c" , "a-c" ) ; //<S2SV> assert_false_regexp ( "a[^]b]c" , "a]c" ) ; //<S2SV> assert_true_regexp ( "a[^]b]c" , "adc" , "adc" ) ; //<S2SV> assert_true_regexp ( "[^ab]*" , "cde" , "cde" ) ; //<S2SV> assert_regexp_syntax_error ( ")(" ) ; //<S2SV> assert_true_regexp ( "a\\\\sb" , "a<S2SV_blank>b" , "a<S2SV_blank>b" ) ; //<S2SV> assert_true_regexp ( "a\\\\sb" , "a\\tb" , "a\\tb" ) ; //<S2SV> assert_true_regexp ( "a\\\\sb" , "a\\rb" , "a\\rb" ) ; //<S2SV> assert_true_regexp ( "a\\\\sb" , "a\\nb" , "a\\nb" ) ; //<S2SV> assert_true_regexp ( "a\\\\sb" , "a\\vb" , "a\\vb" ) ; //<S2SV> assert_true_regexp ( "a\\\\sb" , "a\\fb" , "a\\fb" ) ; //<S2SV> assert_false_regexp ( "a\\\\Sb" , "a<S2SV_blank>b" ) ; //<S2SV> assert_false_regexp ( "a\\\\Sb" , "a\\tb" ) ; //<S2SV> assert_false_regexp ( "a\\\\Sb" , "a\\rb" ) ; //<S2SV> assert_false_regexp ( "a\\\\Sb" , "a\\nb" ) ; //<S2SV> assert_false_regexp ( "a\\\\Sb" , "a\\vb" ) ; //<S2SV> assert_false_regexp ( "a\\\\Sb" , "a\\fb" ) ; //<S2SV> assert_true_regexp ( "\\\\n\\\\r\\\\t\\\\f\\\\a" , "\\n\\r\\t\\f\\a" , "\\n\\r\\t\\f\\a" ) ; //<S2SV> assert_true_regexp ( "[\\\\n][\\\\r][\\\\t][\\\\f][\\\\a]" , "\\n\\r\\t\\f\\a" , "\\n\\r\\t\\f\\a" ) ; //<S2SV> assert_true_regexp ( "\\\\x01\\\\x02\\\\x03" , "\\x01\\x02\\x03" , "\\x01\\x02\\x03" ) ; //<S2SV> assert_true_regexp ( "[\\\\x01-\\\\x03]+" , "\\x01\\x02\\x03" , "\\x01\\x02\\x03" ) ; //<S2SV> assert_false_regexp ( "[\\\\x00-\\\\x02]+" , "\\x03\\x04\\x05" ) ; //<S2SV> assert_true_regexp ( "[\\\\x5D]" , "]" , "]" ) ; //<S2SV> assert_true_regexp ( "[\\\\0x5A-\\\\x5D]" , "\\x5B" , "\\x5B" ) ; //<S2SV> assert_true_regexp ( "[\\\\x5D-\\\\x5F]" , "\\x5E" , "\\x5E" ) ; //<S2SV> assert_true_regexp ( "[\\\\x5C-\\\\x5F]" , "\\x5E" , "\\x5E" ) ; //<S2SV> assert_true_regexp ( "[\\\\x5D-\\\\x5F]" , "\\x5E" , "\\x5E" ) ; //<S2SV> assert_true_regexp ( "a\\\\wc" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "a\\\\wc" , "a_c" , "a_c" ) ; //<S2SV> assert_true_regexp ( "a\\\\wc" , "a0c" , "a0c" ) ; //<S2SV> assert_false_regexp ( "a\\\\wc" , "a*c" ) ; //<S2SV> assert_true_regexp ( "\\\\w+" , "--ab_cd0123--" , "ab_cd0123" ) ; //<S2SV> assert_true_regexp ( "[\\\\w]+" , "--ab_cd0123--" , "ab_cd0123" ) ; //<S2SV> assert_true_regexp ( "\\\\D+" , "1234abc5678" , "abc" ) ; //<S2SV> assert_true_regexp ( "[\\\\d]+" , "0123456789" , "0123456789" ) ; //<S2SV> assert_true_regexp ( "[\\\\D]+" , "1234abc5678" , "abc" ) ; //<S2SV> assert_true_regexp ( "[\\\\da-fA-F]+" , "123abc" , "123abc" ) ; //<S2SV> assert_false_regexp ( "^(ab|cd)e" , "abcde" ) ; //<S2SV> assert_true_regexp ( "(abc|)ef" , "abcdef" , "ef" ) ; //<S2SV> assert_true_regexp ( "(abc|)ef" , "abcef" , "abcef" ) ; //<S2SV> assert_true_regexp ( "\\\\babc" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "abc\\\\b" , "abc" , "abc" ) ; //<S2SV> assert_false_regexp ( "\\\\babc" , "1abc" ) ; //<S2SV> assert_false_regexp ( "abc\\\\b" , "abc1" ) ; //<S2SV> assert_true_regexp ( "abc\\\\s\\\\b" , "abc<S2SV_blank>x" , "abc<S2SV_blank>" ) ; //<S2SV> assert_false_regexp ( "abc\\\\s\\\\b" , "abc<S2SV_blank><S2SV_blank>" ) ; //<S2SV> assert_true_regexp ( "\\\\babc\\\\b" , "<S2SV_blank>abc<S2SV_blank>" , "abc" ) ; //<S2SV> assert_true_regexp ( "\\\\b\\\\w\\\\w\\\\w\\\\b" , "<S2SV_blank>abc<S2SV_blank>" , "abc" ) ; //<S2SV> assert_true_regexp ( "\\\\w\\\\w\\\\w\\\\b" , "abcd" , "bcd" ) ; //<S2SV> assert_true_regexp ( "\\\\b\\\\w\\\\w\\\\w" , "abcd" , "abc" ) ; //<S2SV> assert_false_regexp ( "\\\\b\\\\w\\\\w\\\\w\\\\b" , "abcd" ) ; //<S2SV> assert_false_regexp ( "\\\\Babc" , "abc" ) ; //<S2SV> assert_false_regexp ( "abc\\\\B" , "abc" ) ; //<S2SV> assert_true_regexp ( "\\\\Babc" , "1abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "abc\\\\B" , "abc1" , "abc" ) ; //<S2SV> assert_false_regexp ( "abc\\\\s\\\\B" , "abc<S2SV_blank>x" ) ; //<S2SV> assert_true_regexp ( "abc\\\\s\\\\B" , "abc<S2SV_blank><S2SV_blank>" , "abc<S2SV_blank>" ) ; //<S2SV> assert_true_regexp ( "\\\\w\\\\w\\\\w\\\\B" , "abcd" , "abc" ) ; //<S2SV> assert_true_regexp ( "\\\\B\\\\w\\\\w\\\\w" , "abcd" , "bcd" ) ; //<S2SV> assert_false_regexp ( "\\\\B\\\\w\\\\w\\\\w\\\\B" , "abcd" ) ; //<S2SV> assert_regexp_syntax_error ( "(|abc)ef" ) ; //<S2SV> assert_true_regexp ( "((a)(b)c)(d)" , "abcd" , "abcd" ) ; //<S2SV> assert_true_regexp ( "(a|b)c*d" , "abcd" , "bcd" ) ; //<S2SV> assert_true_regexp ( "(ab|ab*)bc" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "a([bc]*)c*" , "abc" , "abc" ) ; //<S2SV> assert_true_regexp ( "a([bc]*)c*" , "ac" , "ac" ) ; //<S2SV> assert_true_regexp ( "a([bc]*)c*" , "a" , "a" ) ; //<S2SV> assert_true_regexp ( "a([bc]*)(c*d)" , "abcd" , "abcd" ) ; //<S2SV> assert_true_regexp ( "a([bc]+)(c*d)" , "abcd" , "abcd" ) ; //<S2SV> assert_true_regexp ( "a([bc]*)(c+d)" , "abcd" , "abcd" ) ; //<S2SV> assert_true_regexp ( "a[bcd]*dcdcde" , "adcdcde" , "adcdcde" ) ; //<S2SV> assert_false_regexp ( "a[bcd]+dcdcde" , "adcdcde" ) ; //<S2SV> assert_true_regexp ( "\\\\((.*),<S2SV_blank>(.*)\\\\)" , "(a,<S2SV_blank>b)" , "(a,<S2SV_blank>b)" ) ; //<S2SV> assert_true_regexp ( "abc|123$" , "abcx" , "abc" ) ; //<S2SV> assert_false_regexp ( "abc|123$" , "123x" ) ; //<S2SV> assert_true_regexp ( "abc|^123" , "123" , "123" ) ; //<S2SV> assert_false_regexp ( "abc|^123" , "x123" ) ; //<S2SV> assert_true_regexp ( "^abc$" , "abc" , "abc" ) ; //<S2SV> assert_false_regexp ( "^abc$" , "abcc" ) ; //<S2SV> assert_true_regexp ( "^abc" , "abcc" , "abc" ) ; //<S2SV> assert_false_regexp ( "^abc$" , "aabc" ) ; //<S2SV> assert_true_regexp ( "abc$" , "aabc" , "abc" ) ; //<S2SV> assert_true_regexp ( "^a(bc+|b[eh])g|.h$" , "abhg" , "abhg" ) ; //<S2SV> assert_true_regexp ( "(bc+d$|ef*g.|h?i(j|k))" , "effgz" , "effgz" ) ; //<S2SV> assert_true_regexp ( "(bc+d$|ef*g.|h?i(j|k))" , "ij" , "ij" ) ; //<S2SV> assert_false_regexp ( "(bc+d$|ef*g.|h?i(j|k))" , "effg" ) ; //<S2SV> assert_false_regexp ( "(bc+d$|ef*g.|h?i(j|k))" , "bcdd" ) ; //<S2SV> assert_true_regexp ( "(bc+d$|ef*g.|h?i(j|k))" , "reffgz" , "effgz" ) ; //<S2SV> assert_true_regexp ( "whatever|<S2SV_blank><S2SV_blank><S2SV_blank>x.<S2SV_blank><S2SV_blank><S2SV_blank>x" , "<S2SV_blank><S2SV_blank><S2SV_blank>xy<S2SV_blank><S2SV_blank><S2SV_blank>x" , "<S2SV_blank><S2SV_blank><S2SV_blank>xy<S2SV_blank><S2SV_blank><S2SV_blank>x" ) ; //<S2SV> } //<S2SV> 