int yr_object_copy ( //<S2SV> YR_OBJECT * object , //<S2SV> YR_OBJECT * * object_copy ) //<S2SV> { //<S2SV> YR_OBJECT * copy ; //<S2SV> YR_OBJECT * o ; //<S2SV> YR_STRUCTURE_MEMBER * structure_member ; //<S2SV> YR_OBJECT_FUNCTION * func ; //<S2SV> YR_OBJECT_FUNCTION * func_copy ; //<S2SV> int i ; //<S2SV> * object_copy = NULL ; //<S2SV> FAIL_ON_ERROR ( yr_object_create ( //<S2SV> object -> type , //<S2SV> object -> identifier , //<S2SV> NULL , //<S2SV> & copy ) ) ; //<S2SV> switch ( object -> type ) //<S2SV> { //<S2SV> case OBJECT_TYPE_INTEGER : //<S2SV> ( ( YR_OBJECT_INTEGER * ) copy ) -> value = ( ( YR_OBJECT_INTEGER * ) object ) -> value ; //<S2SV> break ; //<S2SV> case OBJECT_TYPE_STRING : //<S2SV> if ( ( ( YR_OBJECT_STRING * ) object ) -> value != NULL ) //<S2SV> { //<S2SV> ( ( YR_OBJECT_STRING * ) copy ) -> value = sized_string_dup ( //<S2SV> ( ( YR_OBJECT_STRING * ) object ) -> value ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ( ( YR_OBJECT_STRING * ) copy ) -> value = NULL ; //<S2SV> } //<S2SV> break ; //<S2SV> case OBJECT_TYPE_FLOAT : //<S2SV> ( ( YR_OBJECT_DOUBLE * ) copy ) -> value = ( ( YR_OBJECT_DOUBLE * ) object ) -> value ; //<S2SV> break ; //<S2SV> case OBJECT_TYPE_FUNCTION : //<S2SV> func = ( YR_OBJECT_FUNCTION * ) object ; //<S2SV> func_copy = ( YR_OBJECT_FUNCTION * ) copy ; //<S2SV> FAIL_ON_ERROR_WITH_CLEANUP ( //<S2SV> yr_object_copy ( func -> return_obj , & func_copy -> return_obj ) , //<S2SV> yr_object_destroy ( copy ) ) ; //<S2SV> for ( i = 0 ; i < MAX_OVERLOADED_FUNCTIONS ; i ++ ) //<S2SV> func_copy -> prototypes [ i ] = func -> prototypes [ i ] ; //<S2SV> break ; //<S2SV> case OBJECT_TYPE_STRUCTURE : //<S2SV> structure_member = ( ( YR_OBJECT_STRUCTURE * ) object ) -> members ; //<S2SV> while ( structure_member != NULL ) //<S2SV> { //<S2SV> FAIL_ON_ERROR_WITH_CLEANUP ( //<S2SV> yr_object_copy ( structure_member -> object , & o ) , //<S2SV> yr_object_destroy ( copy ) ) ; //<S2SV> FAIL_ON_ERROR_WITH_CLEANUP ( //<S2SV> yr_object_structure_set_member ( copy , o ) , //<S2SV> yr_free ( o ) ; //<S2SV> yr_object_destroy ( copy ) ) ; //<S2SV> structure_member = structure_member -> next ; //<S2SV> } //<S2SV> break ; //<S2SV> case OBJECT_TYPE_ARRAY : //<S2SV> yr_object_copy ( //<S2SV> ( ( YR_OBJECT_ARRAY * ) object ) -> prototype_item , //<S2SV> & o ) ; //<S2SV> ( ( YR_OBJECT_ARRAY * ) copy ) -> prototype_item = o ; //<S2SV> break ; //<S2SV> case OBJECT_TYPE_DICTIONARY : //<S2SV> yr_object_copy ( //<S2SV> ( ( YR_OBJECT_DICTIONARY * ) object ) -> prototype_item , //<S2SV> & o ) ; //<S2SV> ( ( YR_OBJECT_DICTIONARY * ) copy ) -> prototype_item = o ; //<S2SV> break ; //<S2SV> default : //<S2SV> assert ( FALSE ) ; //<S2SV> } //<S2SV> * object_copy = copy ; //<S2SV> return ERROR_SUCCESS ; //<S2SV> } //<S2SV> 