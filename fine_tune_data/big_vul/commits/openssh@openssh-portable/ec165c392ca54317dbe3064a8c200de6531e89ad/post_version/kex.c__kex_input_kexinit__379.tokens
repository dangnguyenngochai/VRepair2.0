int //<S2SV> kex_input_kexinit ( int type , u_int32_t seq , void * ctxt ) //<S2SV> { //<S2SV> struct ssh * ssh = ctxt ; //<S2SV> struct kex * kex = ssh -> kex ; //<S2SV> const u_char * ptr ; //<S2SV> u_int i ; //<S2SV> size_t dlen ; //<S2SV> int r ; //<S2SV> debug ( "SSH2_MSG_KEXINIT<S2SV_blank>received" ) ; //<S2SV> if ( kex == NULL ) //<S2SV> return SSH_ERR_INVALID_ARGUMENT ; //<S2SV> ssh_dispatch_set ( ssh , SSH2_MSG_KEXINIT , NULL ) ; //<S2SV> ptr = sshpkt_ptr ( ssh , & dlen ) ; //<S2SV> if ( ( r = sshbuf_put ( kex -> peer , ptr , dlen ) ) != 0 ) //<S2SV> return r ; //<S2SV> for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) //<S2SV> if ( ( r = sshpkt_get_u8 ( ssh , NULL ) ) != 0 ) //<S2SV> return r ; //<S2SV> for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) //<S2SV> if ( ( r = sshpkt_get_string ( ssh , NULL , NULL ) ) != 0 ) //<S2SV> return r ; //<S2SV> if ( ( r = sshpkt_get_u8 ( ssh , NULL ) ) != 0 || //<S2SV> ( r = sshpkt_get_u32 ( ssh , NULL ) ) != 0 || //<S2SV> ( r = sshpkt_get_end ( ssh ) ) != 0 ) //<S2SV> return r ; //<S2SV> if ( ! ( kex -> flags & KEX_INIT_SENT ) ) //<S2SV> if ( ( r = kex_send_kexinit ( ssh ) ) != 0 ) //<S2SV> return r ; //<S2SV> if ( ( r = kex_choose_conf ( ssh ) ) != 0 ) //<S2SV> return r ; //<S2SV> if ( kex -> kex_type < KEX_MAX && kex -> kex [ kex -> kex_type ] != NULL ) //<S2SV> return ( kex -> kex [ kex -> kex_type ] ) ( ssh ) ; //<S2SV> return SSH_ERR_INTERNAL_ERROR ; //<S2SV> } //<S2SV> 