bool initiate_stratum ( struct pool * pool ) //<S2SV> { //<S2SV> bool ret = false , recvd = false , noresume = false , sockd = false ; //<S2SV> char s [ RBUFSIZE ] , * sret = NULL , * nonce1 , * sessionid ; //<S2SV> json_t * val = NULL , * res_val , * err_val ; //<S2SV> json_error_t err ; //<S2SV> int n2size ; //<S2SV> resend : //<S2SV> if ( ! setup_stratum_socket ( pool ) ) { //<S2SV> applog ( LOG_INFO , "setup_stratum_socket()<S2SV_blank>on<S2SV_blank>%s<S2SV_blank>failed" , get_pool_name ( pool ) ) ; //<S2SV> sockd = false ; //<S2SV> goto out ; //<S2SV> } //<S2SV> sockd = true ; //<S2SV> if ( recvd ) { //<S2SV> clear_sock ( pool ) ; //<S2SV> sprintf ( s , "{\\"id\\":<S2SV_blank>%d,<S2SV_blank>\\"method\\":<S2SV_blank>\\"mining.subscribe\\",<S2SV_blank>\\"params\\":<S2SV_blank>[]}" , swork_id ++ ) ; //<S2SV> } else { //<S2SV> if ( pool -> sessionid ) //<S2SV> sprintf ( s , "{\\"id\\":<S2SV_blank>%d,<S2SV_blank>\\"method\\":<S2SV_blank>\\"mining.subscribe\\",<S2SV_blank>\\"params\\":<S2SV_blank>[\\"" PACKAGE "/" VERSION "\\",<S2SV_blank>\\"%s\\"]}" , swork_id ++ , pool -> sessionid ) ; //<S2SV> else //<S2SV> sprintf ( s , "{\\"id\\":<S2SV_blank>%d,<S2SV_blank>\\"method\\":<S2SV_blank>\\"mining.subscribe\\",<S2SV_blank>\\"params\\":<S2SV_blank>[\\"" PACKAGE "/" VERSION "\\"]}" , swork_id ++ ) ; //<S2SV> } //<S2SV> if ( __stratum_send ( pool , s , strlen ( s ) ) != SEND_OK ) { //<S2SV> applog ( LOG_DEBUG , "Failed<S2SV_blank>to<S2SV_blank>send<S2SV_blank>s<S2SV_blank>in<S2SV_blank>initiate_stratum" ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( ! socket_full ( pool , DEFAULT_SOCKWAIT ) ) { //<S2SV> applog ( LOG_DEBUG , "Timed<S2SV_blank>out<S2SV_blank>waiting<S2SV_blank>for<S2SV_blank>response<S2SV_blank>in<S2SV_blank>initiate_stratum" ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> sret = recv_line ( pool ) ; //<S2SV> if ( ! sret ) //<S2SV> goto out ; //<S2SV> recvd = true ; //<S2SV> val = JSON_LOADS ( sret , & err ) ; //<S2SV> free ( sret ) ; //<S2SV> if ( ! val ) { //<S2SV> applog ( LOG_INFO , "JSON<S2SV_blank>decode<S2SV_blank>failed(%d):<S2SV_blank>%s" , err . line , err . text ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> res_val = json_object_get ( val , "result" ) ; //<S2SV> err_val = json_object_get ( val , "error" ) ; //<S2SV> if ( ! res_val || json_is_null ( res_val ) || //<S2SV> ( err_val && ! json_is_null ( err_val ) ) ) { //<S2SV> char * ss ; //<S2SV> if ( err_val ) //<S2SV> ss = json_dumps ( err_val , JSON_INDENT ( 3 ) ) ; //<S2SV> else //<S2SV> ss = strdup ( "(unknown<S2SV_blank>reason)" ) ; //<S2SV> applog ( LOG_INFO , "JSON-RPC<S2SV_blank>decode<S2SV_blank>failed:<S2SV_blank>%s" , ss ) ; //<S2SV> free ( ss ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> sessionid = get_sessionid ( res_val ) ; //<S2SV> if ( ! sessionid ) //<S2SV> applog ( LOG_DEBUG , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>sessionid<S2SV_blank>in<S2SV_blank>initiate_stratum" ) ; //<S2SV> nonce1 = json_array_string ( res_val , 1 ) ; //<S2SV> if ( ! nonce1 ) { //<S2SV> applog ( LOG_INFO , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>nonce1<S2SV_blank>in<S2SV_blank>initiate_stratum" ) ; //<S2SV> free ( sessionid ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> n2size = json_integer_value ( json_array_get ( res_val , 2 ) ) ; //<S2SV> if ( n2size < 1 ) //<S2SV> { //<S2SV> applog ( LOG_INFO , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>n2size<S2SV_blank>in<S2SV_blank>initiate_stratum" ) ; //<S2SV> free ( sessionid ) ; //<S2SV> free ( nonce1 ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> cg_wlock ( & pool -> data_lock ) ; //<S2SV> pool -> sessionid = sessionid ; //<S2SV> pool -> nonce1 = nonce1 ; //<S2SV> pool -> n1_len = strlen ( nonce1 ) / 2 ; //<S2SV> free ( pool -> nonce1bin ) ; //<S2SV> pool -> nonce1bin = ( unsigned char * ) calloc ( pool -> n1_len , 1 ) ; //<S2SV> if ( unlikely ( ! pool -> nonce1bin ) ) //<S2SV> quithere ( 1 , "Failed<S2SV_blank>to<S2SV_blank>calloc<S2SV_blank>pool->nonce1bin" ) ; //<S2SV> hex2bin ( pool -> nonce1bin , pool -> nonce1 , pool -> n1_len ) ; //<S2SV> pool -> n2size = n2size ; //<S2SV> cg_wunlock ( & pool -> data_lock ) ; //<S2SV> if ( sessionid ) //<S2SV> applog ( LOG_DEBUG , "%s<S2SV_blank>stratum<S2SV_blank>session<S2SV_blank>id:<S2SV_blank>%s" , get_pool_name ( pool ) , pool -> sessionid ) ; //<S2SV> ret = true ; //<S2SV> out : //<S2SV> if ( ret ) { //<S2SV> if ( ! pool -> stratum_url ) //<S2SV> pool -> stratum_url = pool -> sockaddr_url ; //<S2SV> pool -> stratum_active = true ; //<S2SV> pool -> swork . diff = 1 ; //<S2SV> if ( opt_protocol ) { //<S2SV> applog ( LOG_DEBUG , "%s<S2SV_blank>confirmed<S2SV_blank>mining.subscribe<S2SV_blank>with<S2SV_blank>extranonce1<S2SV_blank>%s<S2SV_blank>extran2size<S2SV_blank>%d" , //<S2SV> get_pool_name ( pool ) , pool -> nonce1 , pool -> n2size ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( recvd && ! noresume ) { //<S2SV> cg_wlock ( & pool -> data_lock ) ; //<S2SV> free ( pool -> sessionid ) ; //<S2SV> free ( pool -> nonce1 ) ; //<S2SV> pool -> sessionid = pool -> nonce1 = NULL ; //<S2SV> cg_wunlock ( & pool -> data_lock ) ; //<S2SV> applog ( LOG_DEBUG , "Failed<S2SV_blank>to<S2SV_blank>resume<S2SV_blank>stratum,<S2SV_blank>trying<S2SV_blank>afresh" ) ; //<S2SV> noresume = true ; //<S2SV> json_decref ( val ) ; //<S2SV> goto resend ; //<S2SV> } //<S2SV> applog ( LOG_DEBUG , "Initiating<S2SV_blank>stratum<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>%s" , get_pool_name ( pool ) ) ; //<S2SV> if ( sockd ) { //<S2SV> applog ( LOG_DEBUG , "Suspending<S2SV_blank>stratum<S2SV_blank>on<S2SV_blank>%s" , get_pool_name ( pool ) ) ; //<S2SV> suspend_stratum ( pool ) ; //<S2SV> } //<S2SV> } //<S2SV> json_decref ( val ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 