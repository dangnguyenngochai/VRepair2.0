int //<S2SV> ParseDateTime ( char * timestr , char * lowstr , //<S2SV> char * * field , int * ftype , int * numfields , char * * endstr ) //<S2SV> { //<S2SV> int nf = 0 ; //<S2SV> char * lp = lowstr ; //<S2SV> * endstr = timestr ; //<S2SV> while ( * ( * endstr ) != '\\0' ) //<S2SV> { //<S2SV> field [ nf ] = lp ; //<S2SV> if ( isdigit ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> { //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> while ( isdigit ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> if ( * ( * endstr ) == ':' ) //<S2SV> { //<S2SV> ftype [ nf ] = DTK_TIME ; //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> while ( isdigit ( ( unsigned char ) * ( * endstr ) ) || //<S2SV> ( * ( * endstr ) == ':' ) || ( * ( * endstr ) == '.' ) ) //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> } //<S2SV> else if ( * ( * endstr ) == '-' || * ( * endstr ) == '/' || * ( * endstr ) == '.' ) //<S2SV> { //<S2SV> char * dp = ( * endstr ) ; //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> if ( isdigit ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> { //<S2SV> ftype [ nf ] = ( * dp == '.' ) ? DTK_NUMBER : DTK_DATE ; //<S2SV> while ( isdigit ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> if ( * ( * endstr ) == * dp ) //<S2SV> { //<S2SV> ftype [ nf ] = DTK_DATE ; //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> while ( isdigit ( ( unsigned char ) * ( * endstr ) ) || ( * ( * endstr ) == * dp ) ) //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ftype [ nf ] = DTK_DATE ; //<S2SV> while ( isalnum ( ( unsigned char ) * ( * endstr ) ) || ( * ( * endstr ) == * dp ) ) //<S2SV> * lp ++ = pg_tolower ( ( unsigned char ) * ( * endstr ) ++ ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> ftype [ nf ] = DTK_NUMBER ; //<S2SV> } //<S2SV> else if ( * ( * endstr ) == '.' ) //<S2SV> { //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> while ( isdigit ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> ftype [ nf ] = DTK_NUMBER ; //<S2SV> } //<S2SV> else if ( isalpha ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> { //<S2SV> ftype [ nf ] = DTK_STRING ; //<S2SV> * lp ++ = pg_tolower ( ( unsigned char ) * ( * endstr ) ++ ) ; //<S2SV> while ( isalpha ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> * lp ++ = pg_tolower ( ( unsigned char ) * ( * endstr ) ++ ) ; //<S2SV> if ( * ( * endstr ) == '-' || * ( * endstr ) == '/' || * ( * endstr ) == '.' ) //<S2SV> { //<S2SV> char * dp = ( * endstr ) ; //<S2SV> ftype [ nf ] = DTK_DATE ; //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> while ( isdigit ( ( unsigned char ) * ( * endstr ) ) || * ( * endstr ) == * dp ) //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> } //<S2SV> } //<S2SV> else if ( isspace ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> { //<S2SV> ( * endstr ) ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> else if ( * ( * endstr ) == '+' || * ( * endstr ) == '-' ) //<S2SV> { //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> while ( isspace ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> ( * endstr ) ++ ; //<S2SV> if ( isdigit ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> { //<S2SV> ftype [ nf ] = DTK_TZ ; //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> while ( isdigit ( ( unsigned char ) * ( * endstr ) ) || //<S2SV> ( * ( * endstr ) == ':' ) || ( * ( * endstr ) == '.' ) ) //<S2SV> * lp ++ = * ( * endstr ) ++ ; //<S2SV> } //<S2SV> else if ( isalpha ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> { //<S2SV> ftype [ nf ] = DTK_SPECIAL ; //<S2SV> * lp ++ = pg_tolower ( ( unsigned char ) * ( * endstr ) ++ ) ; //<S2SV> while ( isalpha ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> * lp ++ = pg_tolower ( ( unsigned char ) * ( * endstr ) ++ ) ; //<S2SV> } //<S2SV> else //<S2SV> return - 1 ; //<S2SV> } //<S2SV> else if ( ispunct ( ( unsigned char ) * ( * endstr ) ) ) //<S2SV> { //<S2SV> ( * endstr ) ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> else //<S2SV> return - 1 ; //<S2SV> * lp ++ = '\\0' ; //<S2SV> nf ++ ; //<S2SV> if ( nf > MAXDATEFIELDS ) //<S2SV> return - 1 ; //<S2SV> } //<S2SV> * numfields = nf ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 