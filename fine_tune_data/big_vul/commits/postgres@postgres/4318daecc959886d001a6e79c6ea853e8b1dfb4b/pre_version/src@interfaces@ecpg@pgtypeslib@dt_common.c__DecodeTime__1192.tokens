int //<S2SV> DecodeTime ( char * str , int * tmask , struct tm * tm , fsec_t * fsec ) //<S2SV> { //<S2SV> char * cp ; //<S2SV> * tmask = DTK_TIME_M ; //<S2SV> tm -> tm_hour = strtol ( str , & cp , 10 ) ; //<S2SV> if ( * cp != ':' ) //<S2SV> return - 1 ; //<S2SV> str = cp + 1 ; //<S2SV> tm -> tm_min = strtol ( str , & cp , 10 ) ; //<S2SV> if ( * cp == '\\0' ) //<S2SV> { //<S2SV> tm -> tm_sec = 0 ; //<S2SV> * fsec = 0 ; //<S2SV> } //<S2SV> else if ( * cp != ':' ) //<S2SV> return - 1 ; //<S2SV> else //<S2SV> { //<S2SV> str = cp + 1 ; //<S2SV> tm -> tm_sec = strtol ( str , & cp , 10 ) ; //<S2SV> if ( * cp == '\\0' ) //<S2SV> * fsec = 0 ; //<S2SV> else if ( * cp == '.' ) //<S2SV> { //<S2SV> # ifdef HAVE_INT64_TIMESTAMP //<S2SV> char fstr [ MAXDATELEN + 1 ] ; //<S2SV> strncpy ( fstr , ( cp + 1 ) , 7 ) ; //<S2SV> strcpy ( fstr + strlen ( fstr ) , "000000" ) ; //<S2SV> * ( fstr + 6 ) = '\\0' ; //<S2SV> * fsec = strtol ( fstr , & cp , 10 ) ; //<S2SV> # else //<S2SV> str = cp ; //<S2SV> * fsec = strtod ( str , & cp ) ; //<S2SV> # endif //<S2SV> if ( * cp != '\\0' ) //<S2SV> return - 1 ; //<S2SV> } //<S2SV> else //<S2SV> return - 1 ; //<S2SV> } //<S2SV> # ifdef HAVE_INT64_TIMESTAMP //<S2SV> if ( tm -> tm_hour < 0 || tm -> tm_min < 0 || tm -> tm_min > 59 || //<S2SV> tm -> tm_sec < 0 || tm -> tm_sec > 59 || * fsec >= USECS_PER_SEC ) //<S2SV> return - 1 ; //<S2SV> # else //<S2SV> if ( tm -> tm_hour < 0 || tm -> tm_min < 0 || tm -> tm_min > 59 || //<S2SV> tm -> tm_sec < 0 || tm -> tm_sec > 59 || * fsec >= 1 ) //<S2SV> return - 1 ; //<S2SV> # endif //<S2SV> return 0 ; //<S2SV> } //<S2SV> 