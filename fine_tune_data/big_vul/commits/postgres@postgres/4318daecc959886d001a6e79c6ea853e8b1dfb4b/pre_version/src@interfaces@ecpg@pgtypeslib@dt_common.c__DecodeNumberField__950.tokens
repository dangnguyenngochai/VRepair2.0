static int //<S2SV> DecodeNumberField ( int len , char * str , int fmask , //<S2SV> int * tmask , struct tm * tm , fsec_t * fsec , int * is2digits ) //<S2SV> { //<S2SV> char * cp ; //<S2SV> if ( ( cp = strchr ( str , '.' ) ) != NULL ) //<S2SV> { //<S2SV> # ifdef HAVE_INT64_TIMESTAMP //<S2SV> char fstr [ MAXDATELEN + 1 ] ; //<S2SV> strcpy ( fstr , ( cp + 1 ) ) ; //<S2SV> strcpy ( fstr + strlen ( fstr ) , "000000" ) ; //<S2SV> * ( fstr + 6 ) = '\\0' ; //<S2SV> * fsec = strtol ( fstr , NULL , 10 ) ; //<S2SV> # else //<S2SV> * fsec = strtod ( cp , NULL ) ; //<S2SV> # endif //<S2SV> * cp = '\\0' ; //<S2SV> len = strlen ( str ) ; //<S2SV> } //<S2SV> else if ( ( fmask & DTK_DATE_M ) != DTK_DATE_M ) //<S2SV> { //<S2SV> if ( len == 8 ) //<S2SV> { //<S2SV> * tmask = DTK_DATE_M ; //<S2SV> tm -> tm_mday = atoi ( str + 6 ) ; //<S2SV> * ( str + 6 ) = '\\0' ; //<S2SV> tm -> tm_mon = atoi ( str + 4 ) ; //<S2SV> * ( str + 4 ) = '\\0' ; //<S2SV> tm -> tm_year = atoi ( str + 0 ) ; //<S2SV> return DTK_DATE ; //<S2SV> } //<S2SV> else if ( len == 6 ) //<S2SV> { //<S2SV> * tmask = DTK_DATE_M ; //<S2SV> tm -> tm_mday = atoi ( str + 4 ) ; //<S2SV> * ( str + 4 ) = '\\0' ; //<S2SV> tm -> tm_mon = atoi ( str + 2 ) ; //<S2SV> * ( str + 2 ) = '\\0' ; //<S2SV> tm -> tm_year = atoi ( str + 0 ) ; //<S2SV> * is2digits = TRUE ; //<S2SV> return DTK_DATE ; //<S2SV> } //<S2SV> else if ( len == 5 ) //<S2SV> { //<S2SV> * tmask = DTK_DATE_M ; //<S2SV> tm -> tm_mday = atoi ( str + 2 ) ; //<S2SV> * ( str + 2 ) = '\\0' ; //<S2SV> tm -> tm_mon = 1 ; //<S2SV> tm -> tm_year = atoi ( str + 0 ) ; //<S2SV> * is2digits = TRUE ; //<S2SV> return DTK_DATE ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( fmask & DTK_TIME_M ) != DTK_TIME_M ) //<S2SV> { //<S2SV> if ( len == 6 ) //<S2SV> { //<S2SV> * tmask = DTK_TIME_M ; //<S2SV> tm -> tm_sec = atoi ( str + 4 ) ; //<S2SV> * ( str + 4 ) = '\\0' ; //<S2SV> tm -> tm_min = atoi ( str + 2 ) ; //<S2SV> * ( str + 2 ) = '\\0' ; //<S2SV> tm -> tm_hour = atoi ( str + 0 ) ; //<S2SV> return DTK_TIME ; //<S2SV> } //<S2SV> else if ( len == 4 ) //<S2SV> { //<S2SV> * tmask = DTK_TIME_M ; //<S2SV> tm -> tm_sec = 0 ; //<S2SV> tm -> tm_min = atoi ( str + 2 ) ; //<S2SV> * ( str + 2 ) = '\\0' ; //<S2SV> tm -> tm_hour = atoi ( str + 0 ) ; //<S2SV> return DTK_TIME ; //<S2SV> } //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 