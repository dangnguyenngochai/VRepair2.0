int //<S2SV> main ( void ) //<S2SV> { //<S2SV> # line 62 "dt_test2.pgc" //<S2SV> date date1 ; //<S2SV> # line 63 "dt_test2.pgc" //<S2SV> timestamp ts1 , ts2 ; //<S2SV> # line 64 "dt_test2.pgc" //<S2SV> char * text ; //<S2SV> # line 65 "dt_test2.pgc" //<S2SV> interval * i1 ; //<S2SV> # line 66 "dt_test2.pgc" //<S2SV> date * dc ; //<S2SV> # line 67 "dt_test2.pgc" //<S2SV> int i , j ; //<S2SV> char * endptr ; //<S2SV> ECPGdebug ( 1 , stderr ) ; //<S2SV> ts1 = PGTYPEStimestamp_from_asc ( "2003-12-04<S2SV_blank>17:34:29" , NULL ) ; //<S2SV> text = PGTYPEStimestamp_to_asc ( ts1 ) ; //<S2SV> printf ( "timestamp:<S2SV_blank>%s\\n" , text ) ; //<S2SV> free ( text ) ; //<S2SV> date1 = PGTYPESdate_from_timestamp ( ts1 ) ; //<S2SV> dc = PGTYPESdate_new ( ) ; //<S2SV> * dc = date1 ; //<S2SV> text = PGTYPESdate_to_asc ( * dc ) ; //<S2SV> printf ( "Date<S2SV_blank>of<S2SV_blank>timestamp:<S2SV_blank>%s\\n" , text ) ; //<S2SV> free ( text ) ; //<S2SV> PGTYPESdate_free ( dc ) ; //<S2SV> for ( i = 0 ; dates [ i ] ; i ++ ) //<S2SV> { //<S2SV> bool err = false ; //<S2SV> date1 = PGTYPESdate_from_asc ( dates [ i ] , & endptr ) ; //<S2SV> if ( date1 == INT_MIN ) { //<S2SV> err = true ; //<S2SV> } //<S2SV> text = PGTYPESdate_to_asc ( date1 ) ; //<S2SV> printf ( "Date[%d]:<S2SV_blank>%s<S2SV_blank>(%c<S2SV_blank>-<S2SV_blank>%c)\\n" , //<S2SV> i , err ? "-" : text , //<S2SV> endptr ? 'N' : 'Y' , //<S2SV> err ? 'T' : 'F' ) ; //<S2SV> free ( text ) ; //<S2SV> if ( ! err ) //<S2SV> { //<S2SV> for ( j = 0 ; times [ j ] ; j ++ ) //<S2SV> { //<S2SV> int length = strlen ( dates [ i ] ) //<S2SV> + 1 //<S2SV> + strlen ( times [ j ] ) //<S2SV> + 1 ; //<S2SV> char * t = malloc ( length ) ; //<S2SV> sprintf ( t , "%s<S2SV_blank>%s" , dates [ i ] , times [ j ] ) ; //<S2SV> ts1 = PGTYPEStimestamp_from_asc ( t , NULL ) ; //<S2SV> text = PGTYPEStimestamp_to_asc ( ts1 ) ; //<S2SV> if ( i != 19 || j != 3 ) //<S2SV> printf ( "TS[%d,%d]:<S2SV_blank>%s\\n" , //<S2SV> i , j , errno ? "-" : text ) ; //<S2SV> free ( text ) ; //<S2SV> free ( t ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> ts1 = PGTYPEStimestamp_from_asc ( "2004-04-04<S2SV_blank>23:23:23" , NULL ) ; //<S2SV> for ( i = 0 ; intervals [ i ] ; i ++ ) //<S2SV> { //<S2SV> interval * ic ; //<S2SV> i1 = PGTYPESinterval_from_asc ( intervals [ i ] , & endptr ) ; //<S2SV> if ( * endptr ) //<S2SV> printf ( "endptr<S2SV_blank>set<S2SV_blank>to<S2SV_blank>%s\\n" , endptr ) ; //<S2SV> if ( ! i1 ) //<S2SV> { //<S2SV> printf ( "Error<S2SV_blank>parsing<S2SV_blank>interval<S2SV_blank>%d\\n" , i ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> j = PGTYPEStimestamp_add_interval ( & ts1 , i1 , & ts2 ) ; //<S2SV> if ( j < 0 ) //<S2SV> continue ; //<S2SV> text = PGTYPESinterval_to_asc ( i1 ) ; //<S2SV> printf ( "interval[%d]:<S2SV_blank>%s\\n" , i , text ? text : "-" ) ; //<S2SV> free ( text ) ; //<S2SV> ic = PGTYPESinterval_new ( ) ; //<S2SV> PGTYPESinterval_copy ( i1 , ic ) ; //<S2SV> text = PGTYPESinterval_to_asc ( i1 ) ; //<S2SV> printf ( "interval_copy[%d]:<S2SV_blank>%s\\n" , i , text ? text : "-" ) ; //<S2SV> free ( text ) ; //<S2SV> PGTYPESinterval_free ( ic ) ; //<S2SV> PGTYPESinterval_free ( i1 ) ; //<S2SV> } //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> 