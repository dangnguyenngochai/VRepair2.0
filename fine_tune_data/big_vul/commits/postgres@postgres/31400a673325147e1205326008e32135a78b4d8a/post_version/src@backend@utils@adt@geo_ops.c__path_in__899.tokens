Datum //<S2SV> path_in ( PG_FUNCTION_ARGS ) //<S2SV> { //<S2SV> char * str = PG_GETARG_CSTRING ( 0 ) ; //<S2SV> PATH * path ; //<S2SV> int isopen ; //<S2SV> char * s ; //<S2SV> int npts ; //<S2SV> int size ; //<S2SV> int base_size ; //<S2SV> int depth = 0 ; //<S2SV> if ( ( npts = pair_count ( str , ',' ) ) <= 0 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_INVALID_TEXT_REPRESENTATION ) , //<S2SV> errmsg ( "invalid<S2SV_blank>input<S2SV_blank>syntax<S2SV_blank>for<S2SV_blank>type<S2SV_blank>path:<S2SV_blank>\\"%s\\"" , str ) ) ) ; //<S2SV> s = str ; //<S2SV> while ( isspace ( ( unsigned char ) * s ) ) //<S2SV> s ++ ; //<S2SV> if ( ( * s == LDELIM ) && ( strrchr ( s , LDELIM ) == s ) ) //<S2SV> { //<S2SV> s ++ ; //<S2SV> depth ++ ; //<S2SV> } //<S2SV> base_size = sizeof ( path -> p [ 0 ] ) * npts ; //<S2SV> size = offsetof ( PATH , p [ 0 ] ) + base_size ; //<S2SV> if ( base_size / npts != sizeof ( path -> p [ 0 ] ) || size <= base_size ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , //<S2SV> errmsg ( "too<S2SV_blank>many<S2SV_blank>points<S2SV_blank>requested" ) ) ) ; //<S2SV> path = ( PATH * ) palloc ( size ) ; //<S2SV> SET_VARSIZE ( path , size ) ; //<S2SV> path -> npts = npts ; //<S2SV> if ( ( ! path_decode ( TRUE , npts , s , & isopen , & s , & ( path -> p [ 0 ] ) ) ) //<S2SV> && ( ! ( ( depth == 0 ) && ( * s == '\\0' ) ) ) && ! ( ( depth >= 1 ) && ( * s == RDELIM ) ) ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_INVALID_TEXT_REPRESENTATION ) , //<S2SV> errmsg ( "invalid<S2SV_blank>input<S2SV_blank>syntax<S2SV_blank>for<S2SV_blank>type<S2SV_blank>path:<S2SV_blank>\\"%s\\"" , str ) ) ) ; //<S2SV> path -> closed = ( ! isopen ) ; //<S2SV> path -> dummy = 0 ; //<S2SV> PG_RETURN_PATH_P ( path ) ; //<S2SV> } //<S2SV> 