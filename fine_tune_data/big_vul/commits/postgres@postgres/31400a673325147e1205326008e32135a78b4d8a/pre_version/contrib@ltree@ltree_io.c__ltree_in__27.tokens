Datum //<S2SV> ltree_in ( PG_FUNCTION_ARGS ) //<S2SV> { //<S2SV> char * buf = ( char * ) PG_GETARG_POINTER ( 0 ) ; //<S2SV> char * ptr ; //<S2SV> nodeitem * list , //<S2SV> * lptr ; //<S2SV> int num = 0 , //<S2SV> totallen = 0 ; //<S2SV> int state = LTPRS_WAITNAME ; //<S2SV> ltree * result ; //<S2SV> ltree_level * curlevel ; //<S2SV> int charlen ; //<S2SV> int pos = 0 ; //<S2SV> ptr = buf ; //<S2SV> while ( * ptr ) //<S2SV> { //<S2SV> charlen = pg_mblen ( ptr ) ; //<S2SV> if ( charlen == 1 && t_iseq ( ptr , '.' ) ) //<S2SV> num ++ ; //<S2SV> ptr += charlen ; //<S2SV> } //<S2SV> list = lptr = ( nodeitem * ) palloc ( sizeof ( nodeitem ) * ( num + 1 ) ) ; //<S2SV> ptr = buf ; //<S2SV> while ( * ptr ) //<S2SV> { //<S2SV> charlen = pg_mblen ( ptr ) ; //<S2SV> if ( state == LTPRS_WAITNAME ) //<S2SV> { //<S2SV> if ( ISALNUM ( ptr ) ) //<S2SV> { //<S2SV> lptr -> start = ptr ; //<S2SV> lptr -> wlen = 0 ; //<S2SV> state = LTPRS_WAITDELIM ; //<S2SV> } //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LTPRS_WAITDELIM ) //<S2SV> { //<S2SV> if ( charlen == 1 && t_iseq ( ptr , '.' ) ) //<S2SV> { //<S2SV> lptr -> len = ptr - lptr -> start ; //<S2SV> if ( lptr -> wlen > 255 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_NAME_TOO_LONG ) , //<S2SV> errmsg ( "name<S2SV_blank>of<S2SV_blank>level<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long" ) , //<S2SV> errdetail ( "Name<S2SV_blank>length<S2SV_blank>is<S2SV_blank>%d,<S2SV_blank>must<S2SV_blank>" //<S2SV> "be<S2SV_blank><<S2SV_blank>256,<S2SV_blank>in<S2SV_blank>position<S2SV_blank>%d." , //<S2SV> lptr -> wlen , pos ) ) ) ; //<S2SV> totallen += MAXALIGN ( lptr -> len + LEVEL_HDRSIZE ) ; //<S2SV> lptr ++ ; //<S2SV> state = LTPRS_WAITNAME ; //<S2SV> } //<S2SV> else if ( ! ISALNUM ( ptr ) ) //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else //<S2SV> elog ( ERROR , "internal<S2SV_blank>error<S2SV_blank>in<S2SV_blank>parser" ) ; //<S2SV> ptr += charlen ; //<S2SV> lptr -> wlen ++ ; //<S2SV> pos ++ ; //<S2SV> } //<S2SV> if ( state == LTPRS_WAITDELIM ) //<S2SV> { //<S2SV> lptr -> len = ptr - lptr -> start ; //<S2SV> if ( lptr -> wlen > 255 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_NAME_TOO_LONG ) , //<S2SV> errmsg ( "name<S2SV_blank>of<S2SV_blank>level<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long" ) , //<S2SV> errdetail ( "Name<S2SV_blank>length<S2SV_blank>is<S2SV_blank>%d,<S2SV_blank>must<S2SV_blank>" //<S2SV> "be<S2SV_blank><<S2SV_blank>256,<S2SV_blank>in<S2SV_blank>position<S2SV_blank>%d." , //<S2SV> lptr -> wlen , pos ) ) ) ; //<S2SV> totallen += MAXALIGN ( lptr -> len + LEVEL_HDRSIZE ) ; //<S2SV> lptr ++ ; //<S2SV> } //<S2SV> else if ( ! ( state == LTPRS_WAITNAME && lptr == list ) ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_SYNTAX_ERROR ) , //<S2SV> errmsg ( "syntax<S2SV_blank>error" ) , //<S2SV> errdetail ( "Unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>line." ) ) ) ; //<S2SV> result = ( ltree * ) palloc0 ( LTREE_HDRSIZE + totallen ) ; //<S2SV> SET_VARSIZE ( result , LTREE_HDRSIZE + totallen ) ; //<S2SV> result -> numlevel = lptr - list ; //<S2SV> curlevel = LTREE_FIRST ( result ) ; //<S2SV> lptr = list ; //<S2SV> while ( lptr - list < result -> numlevel ) //<S2SV> { //<S2SV> curlevel -> len = ( uint16 ) lptr -> len ; //<S2SV> memcpy ( curlevel -> name , lptr -> start , lptr -> len ) ; //<S2SV> curlevel = LEVEL_NEXT ( curlevel ) ; //<S2SV> lptr ++ ; //<S2SV> } //<S2SV> pfree ( list ) ; //<S2SV> PG_RETURN_POINTER ( result ) ; //<S2SV> } //<S2SV> 