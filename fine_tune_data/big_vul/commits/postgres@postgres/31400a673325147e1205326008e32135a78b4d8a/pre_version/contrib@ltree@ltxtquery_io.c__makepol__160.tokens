static int32 //<S2SV> makepol ( QPRS_STATE * state ) //<S2SV> { //<S2SV> int32 val = 0 , //<S2SV> type ; //<S2SV> int32 lenval = 0 ; //<S2SV> char * strval = NULL ; //<S2SV> int32 stack [ STACKDEPTH ] ; //<S2SV> int32 lenstack = 0 ; //<S2SV> uint16 flag = 0 ; //<S2SV> while ( ( type = gettoken_query ( state , & val , & lenval , & strval , & flag ) ) != END ) //<S2SV> { //<S2SV> switch ( type ) //<S2SV> { //<S2SV> case VAL : //<S2SV> pushval_asis ( state , VAL , strval , lenval , flag ) ; //<S2SV> while ( lenstack && ( stack [ lenstack - 1 ] == ( int32 ) '&' || //<S2SV> stack [ lenstack - 1 ] == ( int32 ) '!' ) ) //<S2SV> { //<S2SV> lenstack -- ; //<S2SV> pushquery ( state , OPR , stack [ lenstack ] , 0 , 0 , 0 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case OPR : //<S2SV> if ( lenstack && val == ( int32 ) '|' ) //<S2SV> pushquery ( state , OPR , val , 0 , 0 , 0 ) ; //<S2SV> else //<S2SV> { //<S2SV> if ( lenstack == STACKDEPTH ) //<S2SV> elog ( ERROR , "stack<S2SV_blank>too<S2SV_blank>short" ) ; //<S2SV> stack [ lenstack ] = val ; //<S2SV> lenstack ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case OPEN : //<S2SV> if ( makepol ( state ) == ERR ) //<S2SV> return ERR ; //<S2SV> while ( lenstack && ( stack [ lenstack - 1 ] == ( int32 ) '&' || //<S2SV> stack [ lenstack - 1 ] == ( int32 ) '!' ) ) //<S2SV> { //<S2SV> lenstack -- ; //<S2SV> pushquery ( state , OPR , stack [ lenstack ] , 0 , 0 , 0 ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case CLOSE : //<S2SV> while ( lenstack ) //<S2SV> { //<S2SV> lenstack -- ; //<S2SV> pushquery ( state , OPR , stack [ lenstack ] , 0 , 0 , 0 ) ; //<S2SV> } ; //<S2SV> return END ; //<S2SV> break ; //<S2SV> case ERR : //<S2SV> default : //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_SYNTAX_ERROR ) , //<S2SV> errmsg ( "syntax<S2SV_blank>error" ) ) ) ; //<S2SV> return ERR ; //<S2SV> } //<S2SV> } //<S2SV> while ( lenstack ) //<S2SV> { //<S2SV> lenstack -- ; //<S2SV> pushquery ( state , OPR , stack [ lenstack ] , 0 , 0 , 0 ) ; //<S2SV> } ; //<S2SV> return END ; //<S2SV> } //<S2SV> 