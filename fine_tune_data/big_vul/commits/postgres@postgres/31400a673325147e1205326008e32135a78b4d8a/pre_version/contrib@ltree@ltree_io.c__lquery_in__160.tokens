Datum //<S2SV> lquery_in ( PG_FUNCTION_ARGS ) //<S2SV> { //<S2SV> char * buf = ( char * ) PG_GETARG_POINTER ( 0 ) ; //<S2SV> char * ptr ; //<S2SV> int num = 0 , //<S2SV> totallen = 0 , //<S2SV> numOR = 0 ; //<S2SV> int state = LQPRS_WAITLEVEL ; //<S2SV> lquery * result ; //<S2SV> nodeitem * lptr = NULL ; //<S2SV> lquery_level * cur , //<S2SV> * curqlevel , //<S2SV> * tmpql ; //<S2SV> lquery_variant * lrptr = NULL ; //<S2SV> bool hasnot = false ; //<S2SV> bool wasbad = false ; //<S2SV> int charlen ; //<S2SV> int pos = 0 ; //<S2SV> ptr = buf ; //<S2SV> while ( * ptr ) //<S2SV> { //<S2SV> charlen = pg_mblen ( ptr ) ; //<S2SV> if ( charlen == 1 ) //<S2SV> { //<S2SV> if ( t_iseq ( ptr , '.' ) ) //<S2SV> num ++ ; //<S2SV> else if ( t_iseq ( ptr , '|' ) ) //<S2SV> numOR ++ ; //<S2SV> } //<S2SV> ptr += charlen ; //<S2SV> } //<S2SV> num ++ ; //<S2SV> curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; //<S2SV> ptr = buf ; //<S2SV> while ( * ptr ) //<S2SV> { //<S2SV> charlen = pg_mblen ( ptr ) ; //<S2SV> if ( state == LQPRS_WAITLEVEL ) //<S2SV> { //<S2SV> if ( ISALNUM ( ptr ) ) //<S2SV> { //<S2SV> GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; //<S2SV> lptr -> start = ptr ; //<S2SV> state = LQPRS_WAITDELIM ; //<S2SV> curqlevel -> numvar = 1 ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '!' ) ) //<S2SV> { //<S2SV> GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; //<S2SV> lptr -> start = ptr + 1 ; //<S2SV> state = LQPRS_WAITDELIM ; //<S2SV> curqlevel -> numvar = 1 ; //<S2SV> curqlevel -> flag |= LQL_NOT ; //<S2SV> hasnot = true ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '*' ) ) //<S2SV> state = LQPRS_WAITOPEN ; //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITVAR ) //<S2SV> { //<S2SV> if ( ISALNUM ( ptr ) ) //<S2SV> { //<S2SV> lptr ++ ; //<S2SV> lptr -> start = ptr ; //<S2SV> state = LQPRS_WAITDELIM ; //<S2SV> curqlevel -> numvar ++ ; //<S2SV> } //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITDELIM ) //<S2SV> { //<S2SV> if ( charlen == 1 && t_iseq ( ptr , '@' ) ) //<S2SV> { //<S2SV> if ( lptr -> start == ptr ) //<S2SV> UNCHAR ; //<S2SV> lptr -> flag |= LVAR_INCASE ; //<S2SV> curqlevel -> flag |= LVAR_INCASE ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '*' ) ) //<S2SV> { //<S2SV> if ( lptr -> start == ptr ) //<S2SV> UNCHAR ; //<S2SV> lptr -> flag |= LVAR_ANYEND ; //<S2SV> curqlevel -> flag |= LVAR_ANYEND ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '%' ) ) //<S2SV> { //<S2SV> if ( lptr -> start == ptr ) //<S2SV> UNCHAR ; //<S2SV> lptr -> flag |= LVAR_SUBLEXEME ; //<S2SV> curqlevel -> flag |= LVAR_SUBLEXEME ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '|' ) ) //<S2SV> { //<S2SV> lptr -> len = ptr - lptr -> start - //<S2SV> ( ( lptr -> flag & LVAR_SUBLEXEME ) ? 1 : 0 ) - //<S2SV> ( ( lptr -> flag & LVAR_INCASE ) ? 1 : 0 ) - //<S2SV> ( ( lptr -> flag & LVAR_ANYEND ) ? 1 : 0 ) ; //<S2SV> if ( lptr -> wlen > 255 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_NAME_TOO_LONG ) , //<S2SV> errmsg ( "name<S2SV_blank>of<S2SV_blank>level<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long" ) , //<S2SV> errdetail ( "Name<S2SV_blank>length<S2SV_blank>is<S2SV_blank>%d,<S2SV_blank>must<S2SV_blank>" //<S2SV> "be<S2SV_blank><<S2SV_blank>256,<S2SV_blank>in<S2SV_blank>position<S2SV_blank>%d." , //<S2SV> lptr -> wlen , pos ) ) ) ; //<S2SV> state = LQPRS_WAITVAR ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '.' ) ) //<S2SV> { //<S2SV> lptr -> len = ptr - lptr -> start - //<S2SV> ( ( lptr -> flag & LVAR_SUBLEXEME ) ? 1 : 0 ) - //<S2SV> ( ( lptr -> flag & LVAR_INCASE ) ? 1 : 0 ) - //<S2SV> ( ( lptr -> flag & LVAR_ANYEND ) ? 1 : 0 ) ; //<S2SV> if ( lptr -> wlen > 255 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_NAME_TOO_LONG ) , //<S2SV> errmsg ( "name<S2SV_blank>of<S2SV_blank>level<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long" ) , //<S2SV> errdetail ( "Name<S2SV_blank>length<S2SV_blank>is<S2SV_blank>%d,<S2SV_blank>must<S2SV_blank>" //<S2SV> "be<S2SV_blank><<S2SV_blank>256,<S2SV_blank>in<S2SV_blank>position<S2SV_blank>%d." , //<S2SV> lptr -> wlen , pos ) ) ) ; //<S2SV> state = LQPRS_WAITLEVEL ; //<S2SV> curqlevel = NEXTLEV ( curqlevel ) ; //<S2SV> } //<S2SV> else if ( ISALNUM ( ptr ) ) //<S2SV> { //<S2SV> if ( lptr -> flag ) //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITOPEN ) //<S2SV> { //<S2SV> if ( charlen == 1 && t_iseq ( ptr , '{' ) ) //<S2SV> state = LQPRS_WAITFNUM ; //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '.' ) ) //<S2SV> { //<S2SV> curqlevel -> low = 0 ; //<S2SV> curqlevel -> high = 0xffff ; //<S2SV> curqlevel = NEXTLEV ( curqlevel ) ; //<S2SV> state = LQPRS_WAITLEVEL ; //<S2SV> } //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITFNUM ) //<S2SV> { //<S2SV> if ( charlen == 1 && t_iseq ( ptr , ',' ) ) //<S2SV> state = LQPRS_WAITSNUM ; //<S2SV> else if ( t_isdigit ( ptr ) ) //<S2SV> { //<S2SV> curqlevel -> low = atoi ( ptr ) ; //<S2SV> state = LQPRS_WAITND ; //<S2SV> } //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITSNUM ) //<S2SV> { //<S2SV> if ( t_isdigit ( ptr ) ) //<S2SV> { //<S2SV> curqlevel -> high = atoi ( ptr ) ; //<S2SV> state = LQPRS_WAITCLOSE ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , '}' ) ) //<S2SV> { //<S2SV> curqlevel -> high = 0xffff ; //<S2SV> state = LQPRS_WAITEND ; //<S2SV> } //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITCLOSE ) //<S2SV> { //<S2SV> if ( charlen == 1 && t_iseq ( ptr , '}' ) ) //<S2SV> state = LQPRS_WAITEND ; //<S2SV> else if ( ! t_isdigit ( ptr ) ) //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITND ) //<S2SV> { //<S2SV> if ( charlen == 1 && t_iseq ( ptr , '}' ) ) //<S2SV> { //<S2SV> curqlevel -> high = curqlevel -> low ; //<S2SV> state = LQPRS_WAITEND ; //<S2SV> } //<S2SV> else if ( charlen == 1 && t_iseq ( ptr , ',' ) ) //<S2SV> state = LQPRS_WAITSNUM ; //<S2SV> else if ( ! t_isdigit ( ptr ) ) //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITEND ) //<S2SV> { //<S2SV> if ( charlen == 1 && t_iseq ( ptr , '.' ) ) //<S2SV> { //<S2SV> state = LQPRS_WAITLEVEL ; //<S2SV> curqlevel = NEXTLEV ( curqlevel ) ; //<S2SV> } //<S2SV> else //<S2SV> UNCHAR ; //<S2SV> } //<S2SV> else //<S2SV> elog ( ERROR , "internal<S2SV_blank>error<S2SV_blank>in<S2SV_blank>parser" ) ; //<S2SV> ptr += charlen ; //<S2SV> if ( state == LQPRS_WAITDELIM ) //<S2SV> lptr -> wlen ++ ; //<S2SV> pos ++ ; //<S2SV> } //<S2SV> if ( state == LQPRS_WAITDELIM ) //<S2SV> { //<S2SV> if ( lptr -> start == ptr ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_SYNTAX_ERROR ) , //<S2SV> errmsg ( "syntax<S2SV_blank>error" ) , //<S2SV> errdetail ( "Unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>line." ) ) ) ; //<S2SV> lptr -> len = ptr - lptr -> start - //<S2SV> ( ( lptr -> flag & LVAR_SUBLEXEME ) ? 1 : 0 ) - //<S2SV> ( ( lptr -> flag & LVAR_INCASE ) ? 1 : 0 ) - //<S2SV> ( ( lptr -> flag & LVAR_ANYEND ) ? 1 : 0 ) ; //<S2SV> if ( lptr -> len == 0 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_SYNTAX_ERROR ) , //<S2SV> errmsg ( "syntax<S2SV_blank>error" ) , //<S2SV> errdetail ( "Unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>line." ) ) ) ; //<S2SV> if ( lptr -> wlen > 255 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_NAME_TOO_LONG ) , //<S2SV> errmsg ( "name<S2SV_blank>of<S2SV_blank>level<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long" ) , //<S2SV> errdetail ( "Name<S2SV_blank>length<S2SV_blank>is<S2SV_blank>%d,<S2SV_blank>must<S2SV_blank>" //<S2SV> "be<S2SV_blank><<S2SV_blank>256,<S2SV_blank>in<S2SV_blank>position<S2SV_blank>%d." , //<S2SV> lptr -> wlen , pos ) ) ) ; //<S2SV> } //<S2SV> else if ( state == LQPRS_WAITOPEN ) //<S2SV> curqlevel -> high = 0xffff ; //<S2SV> else if ( state != LQPRS_WAITEND ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_SYNTAX_ERROR ) , //<S2SV> errmsg ( "syntax<S2SV_blank>error" ) , //<S2SV> errdetail ( "Unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>line." ) ) ) ; //<S2SV> curqlevel = tmpql ; //<S2SV> totallen = LQUERY_HDRSIZE ; //<S2SV> while ( ( char * ) curqlevel - ( char * ) tmpql < num * ITEMSIZE ) //<S2SV> { //<S2SV> totallen += LQL_HDRSIZE ; //<S2SV> if ( curqlevel -> numvar ) //<S2SV> { //<S2SV> lptr = GETVAR ( curqlevel ) ; //<S2SV> while ( lptr - GETVAR ( curqlevel ) < curqlevel -> numvar ) //<S2SV> { //<S2SV> totallen += MAXALIGN ( LVAR_HDRSIZE + lptr -> len ) ; //<S2SV> lptr ++ ; //<S2SV> } //<S2SV> } //<S2SV> else if ( curqlevel -> low > curqlevel -> high ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_SYNTAX_ERROR ) , //<S2SV> errmsg ( "syntax<S2SV_blank>error" ) , //<S2SV> errdetail ( "Low<S2SV_blank>limit(%d)<S2SV_blank>is<S2SV_blank>greater<S2SV_blank>than<S2SV_blank>upper(%d)." , //<S2SV> curqlevel -> low , curqlevel -> high ) ) ) ; //<S2SV> curqlevel = NEXTLEV ( curqlevel ) ; //<S2SV> } //<S2SV> result = ( lquery * ) palloc0 ( totallen ) ; //<S2SV> SET_VARSIZE ( result , totallen ) ; //<S2SV> result -> numlevel = num ; //<S2SV> result -> firstgood = 0 ; //<S2SV> result -> flag = 0 ; //<S2SV> if ( hasnot ) //<S2SV> result -> flag |= LQUERY_HASNOT ; //<S2SV> cur = LQUERY_FIRST ( result ) ; //<S2SV> curqlevel = tmpql ; //<S2SV> while ( ( char * ) curqlevel - ( char * ) tmpql < num * ITEMSIZE ) //<S2SV> { //<S2SV> memcpy ( cur , curqlevel , LQL_HDRSIZE ) ; //<S2SV> cur -> totallen = LQL_HDRSIZE ; //<S2SV> if ( curqlevel -> numvar ) //<S2SV> { //<S2SV> lrptr = LQL_FIRST ( cur ) ; //<S2SV> lptr = GETVAR ( curqlevel ) ; //<S2SV> while ( lptr - GETVAR ( curqlevel ) < curqlevel -> numvar ) //<S2SV> { //<S2SV> cur -> totallen += MAXALIGN ( LVAR_HDRSIZE + lptr -> len ) ; //<S2SV> lrptr -> len = lptr -> len ; //<S2SV> lrptr -> flag = lptr -> flag ; //<S2SV> lrptr -> val = ltree_crc32_sz ( lptr -> start , lptr -> len ) ; //<S2SV> memcpy ( lrptr -> name , lptr -> start , lptr -> len ) ; //<S2SV> lptr ++ ; //<S2SV> lrptr = LVAR_NEXT ( lrptr ) ; //<S2SV> } //<S2SV> pfree ( GETVAR ( curqlevel ) ) ; //<S2SV> if ( cur -> numvar > 1 || cur -> flag != 0 ) //<S2SV> wasbad = true ; //<S2SV> else if ( wasbad == false ) //<S2SV> ( result -> firstgood ) ++ ; //<S2SV> } //<S2SV> else //<S2SV> wasbad = true ; //<S2SV> curqlevel = NEXTLEV ( curqlevel ) ; //<S2SV> cur = LQL_NEXT ( cur ) ; //<S2SV> } //<S2SV> pfree ( tmpql ) ; //<S2SV> PG_RETURN_POINTER ( result ) ; //<S2SV> } //<S2SV> 