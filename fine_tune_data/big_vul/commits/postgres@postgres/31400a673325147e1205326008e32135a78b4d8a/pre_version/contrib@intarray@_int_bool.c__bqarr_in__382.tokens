Datum //<S2SV> bqarr_in ( PG_FUNCTION_ARGS ) //<S2SV> { //<S2SV> char * buf = ( char * ) PG_GETARG_POINTER ( 0 ) ; //<S2SV> WORKSTATE state ; //<S2SV> int32 i ; //<S2SV> QUERYTYPE * query ; //<S2SV> int32 commonlen ; //<S2SV> ITEM * ptr ; //<S2SV> NODE * tmp ; //<S2SV> int32 pos = 0 ; //<S2SV> # ifdef BS_DEBUG //<S2SV> StringInfoData pbuf ; //<S2SV> # endif //<S2SV> state . buf = buf ; //<S2SV> state . state = WAITOPERAND ; //<S2SV> state . count = 0 ; //<S2SV> state . num = 0 ; //<S2SV> state . str = NULL ; //<S2SV> makepol ( & state ) ; //<S2SV> if ( ! state . num ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_INVALID_PARAMETER_VALUE ) , //<S2SV> errmsg ( "empty<S2SV_blank>query" ) ) ) ; //<S2SV> commonlen = COMPUTESIZE ( state . num ) ; //<S2SV> query = ( QUERYTYPE * ) palloc ( commonlen ) ; //<S2SV> SET_VARSIZE ( query , commonlen ) ; //<S2SV> query -> size = state . num ; //<S2SV> ptr = GETQUERY ( query ) ; //<S2SV> for ( i = state . num - 1 ; i >= 0 ; i -- ) //<S2SV> { //<S2SV> ptr [ i ] . type = state . str -> type ; //<S2SV> ptr [ i ] . val = state . str -> val ; //<S2SV> tmp = state . str -> next ; //<S2SV> pfree ( state . str ) ; //<S2SV> state . str = tmp ; //<S2SV> } //<S2SV> pos = query -> size - 1 ; //<S2SV> findoprnd ( ptr , & pos ) ; //<S2SV> # ifdef BS_DEBUG //<S2SV> initStringInfo ( & pbuf ) ; //<S2SV> for ( i = 0 ; i < query -> size ; i ++ ) //<S2SV> { //<S2SV> if ( ptr [ i ] . type == OPR ) //<S2SV> appendStringInfo ( & pbuf , "%c(%d)<S2SV_blank>" , ptr [ i ] . val , ptr [ i ] . left ) ; //<S2SV> else //<S2SV> appendStringInfo ( & pbuf , "%d<S2SV_blank>" , ptr [ i ] . val ) ; //<S2SV> } //<S2SV> elog ( DEBUG3 , "POR:<S2SV_blank>%s" , pbuf . data ) ; //<S2SV> pfree ( pbuf . data ) ; //<S2SV> # endif //<S2SV> PG_RETURN_POINTER ( query ) ; //<S2SV> } //<S2SV> 