Datum //<S2SV> poly_in ( PG_FUNCTION_ARGS ) //<S2SV> { //<S2SV> char * str = PG_GETARG_CSTRING ( 0 ) ; //<S2SV> POLYGON * poly ; //<S2SV> int npts ; //<S2SV> int size ; //<S2SV> int isopen ; //<S2SV> char * s ; //<S2SV> if ( ( npts = pair_count ( str , ',' ) ) <= 0 ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_INVALID_TEXT_REPRESENTATION ) , //<S2SV> errmsg ( "invalid<S2SV_blank>input<S2SV_blank>syntax<S2SV_blank>for<S2SV_blank>type<S2SV_blank>polygon:<S2SV_blank>\\"%s\\"" , str ) ) ) ; //<S2SV> size = offsetof ( POLYGON , p [ 0 ] ) + sizeof ( poly -> p [ 0 ] ) * npts ; //<S2SV> poly = ( POLYGON * ) palloc0 ( size ) ; //<S2SV> SET_VARSIZE ( poly , size ) ; //<S2SV> poly -> npts = npts ; //<S2SV> if ( ( ! path_decode ( FALSE , npts , str , & isopen , & s , & ( poly -> p [ 0 ] ) ) ) //<S2SV> || ( * s != '\\0' ) ) //<S2SV> ereport ( ERROR , //<S2SV> ( errcode ( ERRCODE_INVALID_TEXT_REPRESENTATION ) , //<S2SV> errmsg ( "invalid<S2SV_blank>input<S2SV_blank>syntax<S2SV_blank>for<S2SV_blank>type<S2SV_blank>polygon:<S2SV_blank>\\"%s\\"" , str ) ) ) ; //<S2SV> make_bound_box ( poly ) ; //<S2SV> PG_RETURN_POLYGON_P ( poly ) ; //<S2SV> } //<S2SV> 