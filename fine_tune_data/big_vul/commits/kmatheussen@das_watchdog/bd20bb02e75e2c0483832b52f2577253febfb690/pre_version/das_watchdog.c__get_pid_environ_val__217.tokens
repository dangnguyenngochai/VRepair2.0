static char * get_pid_environ_val ( pid_t pid , char * val ) { //<S2SV> char temp [ 500 ] ; //<S2SV> int i = 0 ; //<S2SV> int foundit = 0 ; //<S2SV> FILE * fp ; //<S2SV> sprintf ( temp , "/proc/%d/environ" , pid ) ; //<S2SV> fp = fopen ( temp , "r" ) ; //<S2SV> if ( fp == NULL ) //<S2SV> return NULL ; //<S2SV> for ( ; ; ) { //<S2SV> temp [ i ] = fgetc ( fp ) ; //<S2SV> if ( foundit == 1 && ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) ) { //<S2SV> char * ret ; //<S2SV> temp [ i ] = 0 ; //<S2SV> ret = malloc ( strlen ( temp ) + 10 ) ; //<S2SV> sprintf ( ret , "%s" , temp ) ; //<S2SV> fclose ( fp ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> switch ( temp [ i ] ) { //<S2SV> case EOF : //<S2SV> fclose ( fp ) ; //<S2SV> return NULL ; //<S2SV> case '=' : //<S2SV> temp [ i ] = 0 ; //<S2SV> if ( ! strcmp ( temp , val ) ) { //<S2SV> foundit = 1 ; //<S2SV> } //<S2SV> i = 0 ; //<S2SV> break ; //<S2SV> case '\\0' : //<S2SV> i = 0 ; //<S2SV> break ; //<S2SV> default : //<S2SV> i ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 