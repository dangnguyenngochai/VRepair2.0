static const char * parse_string ( cJSON * item , const char * str , const char * * ep ) //<S2SV> { //<S2SV> const char * ptr = str + 1 , * end_ptr = str + 1 ; char * ptr2 ; char * out ; int len = 0 ; unsigned uc , uc2 ; //<S2SV> if ( * str != \'\\"\' ) { * ep = str ; return 0 ; } //<S2SV> while ( * end_ptr != \'\\"\' && * end_ptr && ++ len ) if ( * end_ptr ++ == '\\\\' ) end_ptr ++ ; //<S2SV> out = ( char * ) cJSON_malloc ( len + 1 ) ; //<S2SV> if ( ! out ) return 0 ; //<S2SV> item -> valuestring = out ; //<S2SV> item -> type = cJSON_String ; //<S2SV> ptr = str + 1 ; ptr2 = out ; //<S2SV> while ( ptr < end_ptr ) //<S2SV> { //<S2SV> if ( * ptr != '\\\\' ) * ptr2 ++ = * ptr ++ ; //<S2SV> else //<S2SV> { //<S2SV> ptr ++ ; //<S2SV> switch ( * ptr ) //<S2SV> { //<S2SV> case 'b' : * ptr2 ++ = '\\b' ; break ; //<S2SV> case 'f' : * ptr2 ++ = '\\f' ; break ; //<S2SV> case 'n' : * ptr2 ++ = '\\n' ; break ; //<S2SV> case 'r' : * ptr2 ++ = '\\r' ; break ; //<S2SV> case 't' : * ptr2 ++ = '\\t' ; break ; //<S2SV> case 'u' : //<S2SV> uc = parse_hex4 ( ptr + 1 ) ; ptr += 4 ; //<S2SV> if ( ptr >= end_ptr ) { * ep = str ; return 0 ; } //<S2SV> if ( ( uc >= 0xDC00 && uc <= 0xDFFF ) || uc == 0 ) { * ep = str ; return 0 ; } //<S2SV> if ( uc >= 0xD800 && uc <= 0xDBFF ) //<S2SV> { //<S2SV> if ( ptr + 6 > end_ptr ) { * ep = str ; return 0 ; } //<S2SV> if ( ptr [ 1 ] != '\\\\' || ptr [ 2 ] != 'u' ) { * ep = str ; return 0 ; } //<S2SV> uc2 = parse_hex4 ( ptr + 3 ) ; ptr += 6 ; //<S2SV> if ( uc2 < 0xDC00 || uc2 > 0xDFFF ) { * ep = str ; return 0 ; } //<S2SV> uc = 0x10000 + ( ( ( uc & 0x3FF ) << 10 ) | ( uc2 & 0x3FF ) ) ; //<S2SV> } //<S2SV> len = 4 ; if ( uc < 0x80 ) len = 1 ; else if ( uc < 0x800 ) len = 2 ; else if ( uc < 0x10000 ) len = 3 ; ptr2 += len ; //<S2SV> switch ( len ) { //<S2SV> case 4 : * -- ptr2 = ( ( uc | 0x80 ) & 0xBF ) ; uc >>= 6 ; //<S2SV> case 3 : * -- ptr2 = ( ( uc | 0x80 ) & 0xBF ) ; uc >>= 6 ; //<S2SV> case 2 : * -- ptr2 = ( ( uc | 0x80 ) & 0xBF ) ; uc >>= 6 ; //<S2SV> case 1 : * -- ptr2 = ( uc | firstByteMark [ len ] ) ; //<S2SV> } //<S2SV> ptr2 += len ; //<S2SV> break ; //<S2SV> default : * ptr2 ++ = * ptr ; break ; //<S2SV> } //<S2SV> ptr ++ ; //<S2SV> } //<S2SV> } //<S2SV> * ptr2 = 0 ; //<S2SV> if ( * ptr == \'\\"\' ) ptr ++ ; //<S2SV> return ptr ; //<S2SV> } //<S2SV> 