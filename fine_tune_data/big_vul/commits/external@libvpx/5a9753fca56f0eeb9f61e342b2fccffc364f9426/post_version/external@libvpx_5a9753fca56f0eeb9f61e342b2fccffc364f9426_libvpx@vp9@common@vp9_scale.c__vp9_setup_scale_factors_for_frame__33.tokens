void vp9_setup_scale_factors_for_frame ( struct scale_factors * sf , //<S2SV> int other_w , int other_h , //<S2SV> int this_w , int this_h ) { //<S2SV> # endif //<S2SV> if ( ! valid_ref_frame_size ( other_w , other_h , this_w , this_h ) ) { //<S2SV> sf -> x_scale_fp = REF_INVALID_SCALE ; //<S2SV> sf -> y_scale_fp = REF_INVALID_SCALE ; //<S2SV> return ; //<S2SV> } //<S2SV> sf -> x_scale_fp = get_fixed_point_scale_factor ( other_w , this_w ) ; //<S2SV> sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h , this_h ) ; //<S2SV> sf -> x_step_q4 = scaled_x ( 16 , sf ) ; //<S2SV> sf -> y_step_q4 = scaled_y ( 16 , sf ) ; //<S2SV> if ( vp9_is_scaled ( sf ) ) { //<S2SV> sf -> scale_value_x = scaled_x ; //<S2SV> sf -> scale_value_y = scaled_y ; //<S2SV> } else { //<S2SV> sf -> scale_value_x = unscaled_value ; //<S2SV> sf -> scale_value_y = unscaled_value ; //<S2SV> } //<S2SV> if ( sf -> x_step_q4 == 16 ) { //<S2SV> if ( sf -> y_step_q4 == 16 ) { //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vpx_convolve_copy ; //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_convolve_avg ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_convolve8_vert ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_convolve8_avg_vert ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_convolve8_horiz ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_convolve8_avg_horiz ; //<S2SV> } else { //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vpx_scaled_vert ; //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_vert ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_vert ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_vert ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_2d ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( sf -> y_step_q4 == 16 ) { //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vpx_scaled_horiz ; //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_horiz ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_horiz ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_horiz ; //<S2SV> } else { //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 0 ] = vpx_scaled_2d ; //<S2SV> sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; //<S2SV> sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_2d ; //<S2SV> sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( sf -> x_step_q4 != 16 ) || ( sf -> y_step_q4 != 16 ) ) { //<S2SV> sf -> predict [ 1 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; //<S2SV> sf -> predict [ 1 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; //<S2SV> } else { //<S2SV> sf -> predict [ 1 ] [ 1 ] [ 0 ] = vpx_convolve8 ; //<S2SV> sf -> predict [ 1 ] [ 1 ] [ 1 ] = vpx_convolve8_avg ; //<S2SV> } //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( use_highbd ) { //<S2SV> if ( sf -> x_step_q4 == 16 ) { //<S2SV> if ( sf -> y_step_q4 == 16 ) { //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve_copy ; //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve_avg ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8_vert ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; //<S2SV> } else { //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_vert ; //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8_vert ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( sf -> y_step_q4 == 16 ) { //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; //<S2SV> } else { //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; //<S2SV> sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; //<S2SV> sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; //<S2SV> sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; //<S2SV> } //<S2SV> } //<S2SV> sf -> highbd_predict [ 1 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; //<S2SV> sf -> highbd_predict [ 1 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> 