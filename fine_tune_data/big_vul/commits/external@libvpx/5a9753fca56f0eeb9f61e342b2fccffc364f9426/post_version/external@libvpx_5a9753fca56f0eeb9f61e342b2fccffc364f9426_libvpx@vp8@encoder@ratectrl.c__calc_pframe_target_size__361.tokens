static void calc_pframe_target_size ( VP8_COMP * cpi ) //<S2SV> { //<S2SV> int min_frame_target ; //<S2SV> int old_per_frame_bandwidth = cpi -> per_frame_bandwidth ; //<S2SV> if ( cpi -> current_layer > 0 ) //<S2SV> cpi -> per_frame_bandwidth = //<S2SV> cpi -> layer_context [ cpi -> current_layer ] . avg_frame_size_for_layer ; //<S2SV> min_frame_target = 0 ; //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> min_frame_target = cpi -> min_frame_bandwidth ; //<S2SV> if ( min_frame_target < ( cpi -> av_per_frame_bandwidth >> 5 ) ) //<S2SV> min_frame_target = cpi -> av_per_frame_bandwidth >> 5 ; //<S2SV> } //<S2SV> else if ( min_frame_target < cpi -> per_frame_bandwidth / 4 ) //<S2SV> min_frame_target = cpi -> per_frame_bandwidth / 4 ; //<S2SV> if ( ( cpi -> common . refresh_alt_ref_frame ) && ( cpi -> oxcf . number_of_layers == 1 ) ) //<S2SV> { //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> cpi -> per_frame_bandwidth = cpi -> twopass . gf_bits ; //<S2SV> cpi -> this_frame_target = cpi -> per_frame_bandwidth ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> cpi -> this_frame_target = cpi -> per_frame_bandwidth ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> int Adjustment ; //<S2SV> if ( cpi -> kf_overspend_bits > 0 ) //<S2SV> { //<S2SV> Adjustment = ( cpi -> kf_bitrate_adjustment <= cpi -> kf_overspend_bits ) ? cpi -> kf_bitrate_adjustment : cpi -> kf_overspend_bits ; //<S2SV> if ( Adjustment > ( cpi -> per_frame_bandwidth - min_frame_target ) ) //<S2SV> Adjustment = ( cpi -> per_frame_bandwidth - min_frame_target ) ; //<S2SV> cpi -> kf_overspend_bits -= Adjustment ; //<S2SV> cpi -> this_frame_target = cpi -> per_frame_bandwidth - Adjustment ; //<S2SV> if ( cpi -> this_frame_target < min_frame_target ) //<S2SV> cpi -> this_frame_target = min_frame_target ; //<S2SV> } //<S2SV> else //<S2SV> cpi -> this_frame_target = cpi -> per_frame_bandwidth ; //<S2SV> if ( ( cpi -> gf_overspend_bits > 0 ) && ( cpi -> this_frame_target > min_frame_target ) ) //<S2SV> { //<S2SV> Adjustment = ( cpi -> non_gf_bitrate_adjustment <= cpi -> gf_overspend_bits ) ? cpi -> non_gf_bitrate_adjustment : cpi -> gf_overspend_bits ; //<S2SV> if ( Adjustment > ( cpi -> this_frame_target - min_frame_target ) ) //<S2SV> Adjustment = ( cpi -> this_frame_target - min_frame_target ) ; //<S2SV> cpi -> gf_overspend_bits -= Adjustment ; //<S2SV> cpi -> this_frame_target -= Adjustment ; //<S2SV> } //<S2SV> if ( ( cpi -> last_boost > 150 ) && ( cpi -> frames_till_gf_update_due > 0 ) && //<S2SV> ( cpi -> current_gf_interval >= ( MIN_GF_INTERVAL << 1 ) ) ) //<S2SV> { //<S2SV> Adjustment = ( cpi -> last_boost - 100 ) >> 5 ; //<S2SV> if ( Adjustment < 1 ) //<S2SV> Adjustment = 1 ; //<S2SV> else if ( Adjustment > 10 ) //<S2SV> Adjustment = 10 ; //<S2SV> Adjustment = ( cpi -> this_frame_target * Adjustment ) / 100 ; //<S2SV> if ( Adjustment > ( cpi -> this_frame_target - min_frame_target ) ) //<S2SV> Adjustment = ( cpi -> this_frame_target - min_frame_target ) ; //<S2SV> if ( cpi -> frames_since_golden == ( cpi -> current_gf_interval >> 1 ) ) //<S2SV> { //<S2SV> Adjustment = ( cpi -> current_gf_interval - 1 ) * Adjustment ; //<S2SV> if ( Adjustment > ( 10 * cpi -> this_frame_target ) / 100 ) //<S2SV> Adjustment = ( 10 * cpi -> this_frame_target ) / 100 ; //<S2SV> cpi -> this_frame_target += Adjustment ; //<S2SV> } //<S2SV> else //<S2SV> cpi -> this_frame_target -= Adjustment ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> this_frame_target < min_frame_target ) //<S2SV> cpi -> this_frame_target = min_frame_target ; //<S2SV> if ( ! cpi -> common . refresh_alt_ref_frame ) //<S2SV> cpi -> inter_frame_target = cpi -> this_frame_target ; //<S2SV> if ( cpi -> pass == 0 ) //<S2SV> { //<S2SV> if ( cpi -> buffered_mode ) //<S2SV> { //<S2SV> int one_percent_bits = ( int ) //<S2SV> ( 1 + cpi -> oxcf . optimal_buffer_level / 100 ) ; //<S2SV> if ( ( cpi -> buffer_level < cpi -> oxcf . optimal_buffer_level ) || //<S2SV> ( cpi -> bits_off_target < cpi -> oxcf . optimal_buffer_level ) ) //<S2SV> { //<S2SV> int percent_low = 0 ; //<S2SV> if ( ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) && //<S2SV> ( cpi -> buffer_level < cpi -> oxcf . optimal_buffer_level ) ) //<S2SV> { //<S2SV> percent_low = ( int ) //<S2SV> ( ( cpi -> oxcf . optimal_buffer_level - cpi -> buffer_level ) / //<S2SV> one_percent_bits ) ; //<S2SV> } //<S2SV> else if ( cpi -> bits_off_target < 0 ) //<S2SV> { //<S2SV> percent_low = ( int ) ( 100 * - cpi -> bits_off_target / //<S2SV> ( cpi -> total_byte_count * 8 ) ) ; //<S2SV> } //<S2SV> if ( percent_low > cpi -> oxcf . under_shoot_pct ) //<S2SV> percent_low = cpi -> oxcf . under_shoot_pct ; //<S2SV> else if ( percent_low < 0 ) //<S2SV> percent_low = 0 ; //<S2SV> cpi -> this_frame_target -= //<S2SV> ( cpi -> this_frame_target * percent_low ) / 200 ; //<S2SV> if ( cpi -> auto_worst_q && cpi -> ni_frames > 150 ) //<S2SV> { //<S2SV> int64_t critical_buffer_level ; //<S2SV> if ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) //<S2SV> { //<S2SV> critical_buffer_level = //<S2SV> ( cpi -> buffer_level < cpi -> bits_off_target ) //<S2SV> ? cpi -> buffer_level : cpi -> bits_off_target ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> critical_buffer_level = cpi -> bits_off_target ; //<S2SV> } //<S2SV> if ( critical_buffer_level < cpi -> oxcf . optimal_buffer_level ) //<S2SV> { //<S2SV> if ( critical_buffer_level > //<S2SV> ( cpi -> oxcf . optimal_buffer_level >> 2 ) ) //<S2SV> { //<S2SV> int64_t qadjustment_range = //<S2SV> cpi -> worst_quality - cpi -> ni_av_qi ; //<S2SV> int64_t above_base = //<S2SV> ( critical_buffer_level - //<S2SV> ( cpi -> oxcf . optimal_buffer_level >> 2 ) ) ; //<S2SV> cpi -> active_worst_quality = //<S2SV> cpi -> worst_quality - //<S2SV> ( int ) ( ( qadjustment_range * above_base ) / //<S2SV> ( cpi -> oxcf . optimal_buffer_level * 3 >> 2 ) ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> worst_quality ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> ni_av_qi ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> worst_quality ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> int percent_high = 0 ; //<S2SV> if ( ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) //<S2SV> && ( cpi -> buffer_level > cpi -> oxcf . optimal_buffer_level ) ) //<S2SV> { //<S2SV> percent_high = ( int ) ( ( cpi -> buffer_level //<S2SV> - cpi -> oxcf . optimal_buffer_level ) //<S2SV> / one_percent_bits ) ; //<S2SV> } //<S2SV> else if ( cpi -> bits_off_target > cpi -> oxcf . optimal_buffer_level ) //<S2SV> { //<S2SV> percent_high = ( int ) ( ( 100 * cpi -> bits_off_target ) //<S2SV> / ( cpi -> total_byte_count * 8 ) ) ; //<S2SV> } //<S2SV> if ( percent_high > cpi -> oxcf . over_shoot_pct ) //<S2SV> percent_high = cpi -> oxcf . over_shoot_pct ; //<S2SV> else if ( percent_high < 0 ) //<S2SV> percent_high = 0 ; //<S2SV> cpi -> this_frame_target += ( cpi -> this_frame_target * //<S2SV> percent_high ) / 200 ; //<S2SV> if ( cpi -> auto_worst_q && cpi -> ni_frames > 150 ) //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> ni_av_qi ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> worst_quality ; //<S2SV> } //<S2SV> } //<S2SV> cpi -> active_best_quality = cpi -> best_quality ; //<S2SV> if ( cpi -> active_worst_quality <= cpi -> active_best_quality ) //<S2SV> cpi -> active_worst_quality = cpi -> active_best_quality + 1 ; //<S2SV> if ( cpi -> active_worst_quality > 127 ) //<S2SV> cpi -> active_worst_quality = 127 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> worst_quality ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . end_usage == USAGE_CONSTRAINED_QUALITY && //<S2SV> cpi -> active_worst_quality < cpi -> cq_target_quality ) //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> cq_target_quality ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> drop_frames_allowed && //<S2SV> ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) && //<S2SV> ( ( cpi -> common . frame_type != KEY_FRAME ) ) ) //<S2SV> { //<S2SV> if ( ( cpi -> buffer_level < 0 ) ) //<S2SV> { //<S2SV> # if 0 //<S2SV> FILE * f = fopen ( "dec.stt" , "a" ) ; //<S2SV> fprintf ( f , "%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>*****<S2SV_blank>BUFFER<S2SV_blank>EMPTY\\n" , //<S2SV> ( int ) cpi -> common . current_video_frame , //<S2SV> cpi -> decimation_factor , cpi -> common . horiz_scale , //<S2SV> ( cpi -> buffer_level * 100 ) / cpi -> oxcf . optimal_buffer_level ) ; //<S2SV> fclose ( f ) ; //<S2SV> # endif //<S2SV> cpi -> drop_frame = 1 ; //<S2SV> cpi -> bits_off_target += cpi -> av_per_frame_bandwidth ; //<S2SV> if ( cpi -> bits_off_target > cpi -> oxcf . maximum_buffer_size ) //<S2SV> cpi -> bits_off_target = ( int ) cpi -> oxcf . maximum_buffer_size ; //<S2SV> cpi -> buffer_level = cpi -> bits_off_target ; //<S2SV> if ( cpi -> oxcf . number_of_layers > 1 ) { //<S2SV> unsigned int i ; //<S2SV> for ( i = cpi -> current_layer + 1 ; i < cpi -> oxcf . number_of_layers ; //<S2SV> i ++ ) { //<S2SV> LAYER_CONTEXT * lc = & cpi -> layer_context [ i ] ; //<S2SV> lc -> bits_off_target += ( int ) ( lc -> target_bandwidth / //<S2SV> lc -> framerate ) ; //<S2SV> if ( lc -> bits_off_target > lc -> maximum_buffer_size ) //<S2SV> lc -> bits_off_target = lc -> maximum_buffer_size ; //<S2SV> lc -> buffer_level = lc -> bits_off_target ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> oxcf . error_resilient_mode == 0 && //<S2SV> ( cpi -> frames_till_gf_update_due == 0 ) && ! cpi -> drop_frame ) //<S2SV> { //<S2SV> int Q = ( cpi -> oxcf . fixed_q < 0 ) ? cpi -> last_q [ INTER_FRAME ] : cpi -> oxcf . fixed_q ; //<S2SV> int gf_frame_useage = 0 ; //<S2SV> int tot_mbs = cpi -> recent_ref_frame_usage [ INTRA_FRAME ] + //<S2SV> cpi -> recent_ref_frame_usage [ LAST_FRAME ] + //<S2SV> cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] + //<S2SV> cpi -> recent_ref_frame_usage [ ALTREF_FRAME ] ; //<S2SV> int pct_gf_active = ( 100 * cpi -> gf_active_count ) / ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ; //<S2SV> if ( tot_mbs ) //<S2SV> gf_frame_useage = ( cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] + cpi -> recent_ref_frame_usage [ ALTREF_FRAME ] ) * 100 / tot_mbs ; //<S2SV> if ( pct_gf_active > gf_frame_useage ) //<S2SV> gf_frame_useage = pct_gf_active ; //<S2SV> if ( cpi -> auto_gold ) //<S2SV> { //<S2SV> if ( ( cpi -> pass == 0 ) && ( cpi -> this_frame_percent_intra < 15 || gf_frame_useage >= 5 ) ) //<S2SV> cpi -> common . refresh_golden_frame = 1 ; //<S2SV> else if ( cpi -> pass == 2 ) //<S2SV> cpi -> common . refresh_golden_frame = 1 ; //<S2SV> } //<S2SV> # if 0 //<S2SV> if ( 0 ) //<S2SV> { //<S2SV> FILE * f ; //<S2SV> f = fopen ( "gf_useaget.stt" , "a" ) ; //<S2SV> fprintf ( f , "<S2SV_blank>%8ld<S2SV_blank>%10ld<S2SV_blank>%10ld<S2SV_blank>%10ld<S2SV_blank>%10ld\\n" , //<S2SV> cpi -> common . current_video_frame , cpi -> gfu_boost , GFQ_ADJUSTMENT , cpi -> gfu_boost , gf_frame_useage ) ; //<S2SV> fclose ( f ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( cpi -> common . refresh_golden_frame == 1 ) //<S2SV> { //<S2SV> # if 0 //<S2SV> if ( 0 ) //<S2SV> { //<S2SV> FILE * f ; //<S2SV> f = fopen ( "GFexit.stt" , "a" ) ; //<S2SV> fprintf ( f , "%8ld<S2SV_blank>GF<S2SV_blank>coded\\n" , cpi -> common . current_video_frame ) ; //<S2SV> fclose ( f ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( cpi -> auto_adjust_gold_quantizer ) //<S2SV> { //<S2SV> calc_gf_params ( cpi ) ; //<S2SV> } //<S2SV> if ( ! cpi -> source_alt_ref_active ) //<S2SV> { //<S2SV> if ( cpi -> oxcf . fixed_q < 0 ) //<S2SV> { //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> cpi -> this_frame_target = cpi -> per_frame_bandwidth ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> int Boost = cpi -> last_boost ; //<S2SV> int frames_in_section = cpi -> frames_till_gf_update_due + 1 ; //<S2SV> int allocation_chunks = ( frames_in_section * 100 ) + ( Boost - 100 ) ; //<S2SV> int bits_in_section = cpi -> inter_frame_target * frames_in_section ; //<S2SV> while ( Boost > 1000 ) //<S2SV> { //<S2SV> Boost /= 2 ; //<S2SV> allocation_chunks /= 2 ; //<S2SV> } //<S2SV> if ( ( bits_in_section >> 7 ) > allocation_chunks ) //<S2SV> cpi -> this_frame_target = Boost * ( bits_in_section / allocation_chunks ) ; //<S2SV> else //<S2SV> cpi -> this_frame_target = ( Boost * bits_in_section ) / allocation_chunks ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> cpi -> this_frame_target = //<S2SV> ( estimate_bits_at_q ( 1 , Q , cpi -> common . MBs , 1.0 ) //<S2SV> * cpi -> last_boost ) / 100 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> this_frame_target = 0 ; //<S2SV> } //<S2SV> cpi -> current_gf_interval = cpi -> frames_till_gf_update_due ; //<S2SV> } //<S2SV> } //<S2SV> cpi -> per_frame_bandwidth = old_per_frame_bandwidth ; //<S2SV> } //<S2SV> 