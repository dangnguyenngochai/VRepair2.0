static void fadst8 ( const tran_low_t * input , tran_low_t * output ) { //<S2SV> tran_high_t s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; //<S2SV> tran_high_t x0 = input [ 7 ] ; //<S2SV> tran_high_t x1 = input [ 0 ] ; //<S2SV> tran_high_t x2 = input [ 5 ] ; //<S2SV> tran_high_t x3 = input [ 2 ] ; //<S2SV> tran_high_t x4 = input [ 3 ] ; //<S2SV> tran_high_t x5 = input [ 4 ] ; //<S2SV> tran_high_t x6 = input [ 1 ] ; //<S2SV> tran_high_t x7 = input [ 6 ] ; //<S2SV> s0 = cospi_2_64 * x0 + cospi_30_64 * x1 ; //<S2SV> s1 = cospi_30_64 * x0 - cospi_2_64 * x1 ; //<S2SV> s2 = cospi_10_64 * x2 + cospi_22_64 * x3 ; //<S2SV> s3 = cospi_22_64 * x2 - cospi_10_64 * x3 ; //<S2SV> s4 = cospi_18_64 * x4 + cospi_14_64 * x5 ; //<S2SV> s5 = cospi_14_64 * x4 - cospi_18_64 * x5 ; //<S2SV> s6 = cospi_26_64 * x6 + cospi_6_64 * x7 ; //<S2SV> s7 = cospi_6_64 * x6 - cospi_26_64 * x7 ; //<S2SV> x0 = fdct_round_shift ( s0 + s4 ) ; //<S2SV> x1 = fdct_round_shift ( s1 + s5 ) ; //<S2SV> x2 = fdct_round_shift ( s2 + s6 ) ; //<S2SV> x3 = fdct_round_shift ( s3 + s7 ) ; //<S2SV> x4 = fdct_round_shift ( s0 - s4 ) ; //<S2SV> x5 = fdct_round_shift ( s1 - s5 ) ; //<S2SV> x6 = fdct_round_shift ( s2 - s6 ) ; //<S2SV> x7 = fdct_round_shift ( s3 - s7 ) ; //<S2SV> s0 = x0 ; //<S2SV> s1 = x1 ; //<S2SV> s2 = x2 ; //<S2SV> s3 = x3 ; //<S2SV> s4 = cospi_8_64 * x4 + cospi_24_64 * x5 ; //<S2SV> s5 = cospi_24_64 * x4 - cospi_8_64 * x5 ; //<S2SV> s6 = - cospi_24_64 * x6 + cospi_8_64 * x7 ; //<S2SV> s7 = cospi_8_64 * x6 + cospi_24_64 * x7 ; //<S2SV> x0 = s0 + s2 ; //<S2SV> x1 = s1 + s3 ; //<S2SV> x2 = s0 - s2 ; //<S2SV> x3 = s1 - s3 ; //<S2SV> x4 = fdct_round_shift ( s4 + s6 ) ; //<S2SV> x5 = fdct_round_shift ( s5 + s7 ) ; //<S2SV> x6 = fdct_round_shift ( s4 - s6 ) ; //<S2SV> x7 = fdct_round_shift ( s5 - s7 ) ; //<S2SV> s2 = cospi_16_64 * ( x2 + x3 ) ; //<S2SV> s3 = cospi_16_64 * ( x2 - x3 ) ; //<S2SV> s6 = cospi_16_64 * ( x6 + x7 ) ; //<S2SV> s7 = cospi_16_64 * ( x6 - x7 ) ; //<S2SV> x2 = fdct_round_shift ( s2 ) ; //<S2SV> x3 = fdct_round_shift ( s3 ) ; //<S2SV> x6 = fdct_round_shift ( s6 ) ; //<S2SV> x7 = fdct_round_shift ( s7 ) ; //<S2SV> output [ 0 ] = ( tran_low_t ) x0 ; //<S2SV> output [ 1 ] = ( tran_low_t ) - x4 ; //<S2SV> output [ 2 ] = ( tran_low_t ) x6 ; //<S2SV> output [ 3 ] = ( tran_low_t ) - x2 ; //<S2SV> output [ 4 ] = ( tran_low_t ) x3 ; //<S2SV> output [ 5 ] = ( tran_low_t ) - x7 ; //<S2SV> output [ 6 ] = ( tran_low_t ) x5 ; //<S2SV> output [ 7 ] = ( tran_low_t ) - x1 ; //<S2SV> } //<S2SV> 