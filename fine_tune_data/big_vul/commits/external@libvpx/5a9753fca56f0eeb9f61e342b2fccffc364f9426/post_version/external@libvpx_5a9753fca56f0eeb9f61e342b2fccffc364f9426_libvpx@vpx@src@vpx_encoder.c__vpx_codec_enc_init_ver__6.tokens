vpx_codec_err_t vpx_codec_enc_init_ver ( vpx_codec_ctx_t * ctx , //<S2SV> vpx_codec_iface_t * iface , //<S2SV> const vpx_codec_enc_cfg_t * cfg , //<S2SV> vpx_codec_flags_t flags , //<S2SV> int ver ) { //<S2SV> vpx_codec_err_t res ; //<S2SV> if ( ver != VPX_ENCODER_ABI_VERSION ) //<S2SV> res = VPX_CODEC_ABI_MISMATCH ; //<S2SV> else if ( ! ctx || ! iface || ! cfg ) //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> else if ( iface -> abi_version != VPX_CODEC_INTERNAL_ABI_VERSION ) //<S2SV> res = VPX_CODEC_ABI_MISMATCH ; //<S2SV> else if ( ! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) //<S2SV> res = VPX_CODEC_INCAPABLE ; //<S2SV> else if ( ( flags & VPX_CODEC_USE_PSNR ) //<S2SV> && ! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) //<S2SV> res = VPX_CODEC_INCAPABLE ; //<S2SV> else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) //<S2SV> && ! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) //<S2SV> res = VPX_CODEC_INCAPABLE ; //<S2SV> else { //<S2SV> ctx -> iface = iface ; //<S2SV> ctx -> name = iface -> name ; //<S2SV> ctx -> priv = NULL ; //<S2SV> ctx -> init_flags = flags ; //<S2SV> ctx -> config . enc = cfg ; //<S2SV> res = ctx -> iface -> init ( ctx , NULL ) ; //<S2SV> if ( res ) { //<S2SV> ctx -> err_detail = ctx -> priv ? ctx -> priv -> err_detail : NULL ; //<S2SV> vpx_codec_destroy ( ctx ) ; //<S2SV> } //<S2SV> } //<S2SV> return SAVE_STATUS ( ctx , res ) ; //<S2SV> } //<S2SV> 