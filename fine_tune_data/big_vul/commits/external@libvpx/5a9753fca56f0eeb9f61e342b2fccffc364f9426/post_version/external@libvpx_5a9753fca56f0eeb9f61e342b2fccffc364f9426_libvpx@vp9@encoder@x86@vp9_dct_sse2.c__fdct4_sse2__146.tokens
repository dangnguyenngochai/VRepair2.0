static void fdct4_sse2 ( __m128i * in ) { //<S2SV> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( ( int16_t ) cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_p16_m16 = pair_set_epi16 ( cospi_16_64 , - cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_p08_p24 = pair_set_epi16 ( cospi_8_64 , cospi_24_64 ) ; //<S2SV> const __m128i k__cospi_p24_m08 = pair_set_epi16 ( cospi_24_64 , - cospi_8_64 ) ; //<S2SV> const __m128i k__DCT_CONST_ROUNDING = _mm_set1_epi32 ( DCT_CONST_ROUNDING ) ; //<S2SV> __m128i u [ 4 ] , v [ 4 ] ; //<S2SV> u [ 0 ] = _mm_unpacklo_epi16 ( in [ 0 ] , in [ 1 ] ) ; //<S2SV> u [ 1 ] = _mm_unpacklo_epi16 ( in [ 3 ] , in [ 2 ] ) ; //<S2SV> v [ 0 ] = _mm_add_epi16 ( u [ 0 ] , u [ 1 ] ) ; //<S2SV> v [ 1 ] = _mm_sub_epi16 ( u [ 0 ] , u [ 1 ] ) ; //<S2SV> u [ 0 ] = _mm_madd_epi16 ( v [ 0 ] , k__cospi_p16_p16 ) ; //<S2SV> u [ 1 ] = _mm_madd_epi16 ( v [ 0 ] , k__cospi_p16_m16 ) ; //<S2SV> u [ 2 ] = _mm_madd_epi16 ( v [ 1 ] , k__cospi_p08_p24 ) ; //<S2SV> u [ 3 ] = _mm_madd_epi16 ( v [ 1 ] , k__cospi_p24_m08 ) ; //<S2SV> v [ 0 ] = _mm_add_epi32 ( u [ 0 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 1 ] = _mm_add_epi32 ( u [ 1 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 2 ] = _mm_add_epi32 ( u [ 2 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 3 ] = _mm_add_epi32 ( u [ 3 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 0 ] = _mm_srai_epi32 ( v [ 0 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 1 ] = _mm_srai_epi32 ( v [ 1 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 2 ] = _mm_srai_epi32 ( v [ 2 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 3 ] = _mm_srai_epi32 ( v [ 3 ] , DCT_CONST_BITS ) ; //<S2SV> in [ 0 ] = _mm_packs_epi32 ( u [ 0 ] , u [ 1 ] ) ; //<S2SV> in [ 1 ] = _mm_packs_epi32 ( u [ 2 ] , u [ 3 ] ) ; //<S2SV> transpose_4x4 ( in ) ; //<S2SV> } //<S2SV> 