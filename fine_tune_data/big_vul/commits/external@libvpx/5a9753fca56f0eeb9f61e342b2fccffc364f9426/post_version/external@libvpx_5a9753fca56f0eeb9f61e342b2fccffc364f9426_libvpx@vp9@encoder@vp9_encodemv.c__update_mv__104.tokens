static int update_mv ( vpx_writer * w , const unsigned int ct [ 2 ] , vpx_prob * cur_p , //<S2SV> vpx_prob upd_p ) { //<S2SV> const vpx_prob new_p = get_binary_prob ( ct [ 0 ] , ct [ 1 ] ) | 1 ; //<S2SV> const int update = cost_branch256 ( ct , * cur_p ) + vp9_cost_zero ( upd_p ) > //<S2SV> cost_branch256 ( ct , new_p ) + vp9_cost_one ( upd_p ) + 7 * 256 ; //<S2SV> vpx_write ( w , update , upd_p ) ; //<S2SV> if ( update ) { //<S2SV> * cur_p = new_p ; //<S2SV> vpx_write_literal ( w , new_p >> 1 , 7 ) ; //<S2SV> } //<S2SV> return update ; //<S2SV> } //<S2SV> 