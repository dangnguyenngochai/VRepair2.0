vpx_codec_err_t vpx_svc_init ( SvcContext * svc_ctx , vpx_codec_ctx_t * codec_ctx , //<S2SV> vpx_codec_iface_t * iface , //<S2SV> vpx_codec_enc_cfg_t * enc_cfg ) { //<S2SV> vpx_codec_err_t res ; //<S2SV> int i ; //<S2SV> SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; //<S2SV> if ( svc_ctx == NULL || codec_ctx == NULL || iface == NULL || //<S2SV> enc_cfg == NULL ) { //<S2SV> return VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> if ( si == NULL ) return VPX_CODEC_MEM_ERROR ; //<S2SV> si -> codec_ctx = codec_ctx ; //<S2SV> si -> width = enc_cfg -> g_w ; //<S2SV> si -> height = enc_cfg -> g_h ; //<S2SV> if ( enc_cfg -> kf_max_dist < 2 ) { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , "key<S2SV_blank>frame<S2SV_blank>distance<S2SV_blank>too<S2SV_blank>small:<S2SV_blank>%d\\n" , //<S2SV> enc_cfg -> kf_max_dist ) ; //<S2SV> return VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> si -> kf_dist = enc_cfg -> kf_max_dist ; //<S2SV> if ( svc_ctx -> spatial_layers == 0 ) //<S2SV> svc_ctx -> spatial_layers = VPX_SS_DEFAULT_LAYERS ; //<S2SV> if ( svc_ctx -> spatial_layers < 1 || //<S2SV> svc_ctx -> spatial_layers > VPX_SS_MAX_LAYERS ) { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , "spatial<S2SV_blank>layers:<S2SV_blank>invalid<S2SV_blank>value:<S2SV_blank>%d\\n" , //<S2SV> svc_ctx -> spatial_layers ) ; //<S2SV> return VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> if ( svc_ctx -> temporal_layering_mode == 3 ) { //<S2SV> svc_ctx -> temporal_layers = 3 ; //<S2SV> } else if ( svc_ctx -> temporal_layering_mode == 2 ) { //<S2SV> svc_ctx -> temporal_layers = 2 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < VPX_SS_MAX_LAYERS ; ++ i ) { //<S2SV> si -> svc_params . max_quantizers [ i ] = MAX_QUANTIZER ; //<S2SV> si -> svc_params . min_quantizers [ i ] = 0 ; //<S2SV> si -> svc_params . scaling_factor_num [ i ] = DEFAULT_SCALE_FACTORS_NUM [ i ] ; //<S2SV> si -> svc_params . scaling_factor_den [ i ] = DEFAULT_SCALE_FACTORS_DEN [ i ] ; //<S2SV> } //<S2SV> res = parse_options ( svc_ctx , si -> options ) ; //<S2SV> if ( res != VPX_CODEC_OK ) return res ; //<S2SV> if ( svc_ctx -> spatial_layers < 1 ) //<S2SV> svc_ctx -> spatial_layers = 1 ; //<S2SV> if ( svc_ctx -> spatial_layers > VPX_SS_MAX_LAYERS ) //<S2SV> svc_ctx -> spatial_layers = VPX_SS_MAX_LAYERS ; //<S2SV> if ( svc_ctx -> temporal_layers < 1 ) //<S2SV> svc_ctx -> temporal_layers = 1 ; //<S2SV> if ( svc_ctx -> temporal_layers > VPX_TS_MAX_LAYERS ) //<S2SV> svc_ctx -> temporal_layers = VPX_TS_MAX_LAYERS ; //<S2SV> if ( svc_ctx -> temporal_layers * svc_ctx -> spatial_layers > VPX_MAX_LAYERS ) { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , //<S2SV> "spatial<S2SV_blank>layers<S2SV_blank>*<S2SV_blank>temporal<S2SV_blank>layers<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>number<S2SV_blank>of<S2SV_blank>" //<S2SV> "allowed<S2SV_blank>layers<S2SV_blank>of<S2SV_blank>%d\\n" , //<S2SV> svc_ctx -> spatial_layers * svc_ctx -> temporal_layers , //<S2SV> ( int ) VPX_MAX_LAYERS ) ; //<S2SV> return VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> assign_layer_bitrates ( svc_ctx , enc_cfg ) ; //<S2SV> # if CONFIG_SPATIAL_SVC //<S2SV> for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) //<S2SV> enc_cfg -> ss_enable_auto_alt_ref [ i ] = si -> enable_auto_alt_ref [ i ] ; //<S2SV> # endif //<S2SV> if ( svc_ctx -> temporal_layers > 1 ) { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < svc_ctx -> temporal_layers ; ++ i ) { //<S2SV> enc_cfg -> ts_target_bitrate [ i ] = enc_cfg -> rc_target_bitrate / //<S2SV> svc_ctx -> temporal_layers ; //<S2SV> enc_cfg -> ts_rate_decimator [ i ] = 1 << ( svc_ctx -> temporal_layers - 1 - i ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( svc_ctx -> threads ) //<S2SV> enc_cfg -> g_threads = svc_ctx -> threads ; //<S2SV> enc_cfg -> ss_number_layers = svc_ctx -> spatial_layers ; //<S2SV> enc_cfg -> ts_number_layers = svc_ctx -> temporal_layers ; //<S2SV> if ( enc_cfg -> rc_end_usage == VPX_CBR ) { //<S2SV> enc_cfg -> rc_resize_allowed = 0 ; //<S2SV> enc_cfg -> rc_min_quantizer = 2 ; //<S2SV> enc_cfg -> rc_max_quantizer = 63 ; //<S2SV> enc_cfg -> rc_undershoot_pct = 50 ; //<S2SV> enc_cfg -> rc_overshoot_pct = 50 ; //<S2SV> enc_cfg -> rc_buf_initial_sz = 20 ; //<S2SV> enc_cfg -> rc_buf_optimal_sz = 600 ; //<S2SV> enc_cfg -> rc_buf_sz = 1000 ; //<S2SV> } //<S2SV> if ( enc_cfg -> g_error_resilient == 0 && si -> use_multiple_frame_contexts == 0 ) //<S2SV> enc_cfg -> g_error_resilient = 1 ; //<S2SV> res = vpx_codec_enc_init ( codec_ctx , iface , enc_cfg , VPX_CODEC_USE_PSNR ) ; //<S2SV> if ( res != VPX_CODEC_OK ) { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , "svc_enc_init<S2SV_blank>error\\n" ) ; //<S2SV> return res ; //<S2SV> } //<S2SV> vpx_codec_control ( codec_ctx , VP9E_SET_SVC , 1 ) ; //<S2SV> vpx_codec_control ( codec_ctx , VP9E_SET_SVC_PARAMETERS , & si -> svc_params ) ; //<S2SV> return VPX_CODEC_OK ; //<S2SV> } //<S2SV> 