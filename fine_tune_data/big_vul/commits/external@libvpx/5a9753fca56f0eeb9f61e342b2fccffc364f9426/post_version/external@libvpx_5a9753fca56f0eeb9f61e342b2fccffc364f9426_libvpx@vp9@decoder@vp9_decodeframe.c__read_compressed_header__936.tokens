static int read_compressed_header ( VP9Decoder * pbi , const uint8_t * data , //<S2SV> size_t partition_size ) { //<S2SV> VP9_COMMON * const cm = & pbi -> common ; //<S2SV> MACROBLOCKD * const xd = & pbi -> mb ; //<S2SV> FRAME_CONTEXT * const fc = cm -> fc ; //<S2SV> vpx_reader r ; //<S2SV> int k ; //<S2SV> if ( vpx_reader_init ( & r , data , partition_size , pbi -> decrypt_cb , //<S2SV> pbi -> decrypt_state ) ) //<S2SV> vpx_internal_error ( & cm -> error , VPX_CODEC_MEM_ERROR , //<S2SV> "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>bool<S2SV_blank>decoder<S2SV_blank>0" ) ; //<S2SV> cm -> tx_mode = xd -> lossless ? ONLY_4X4 : read_tx_mode ( & r ) ; //<S2SV> if ( cm -> tx_mode == TX_MODE_SELECT ) //<S2SV> read_tx_mode_probs ( & fc -> tx_probs , & r ) ; //<S2SV> read_coef_probs ( fc , cm -> tx_mode , & r ) ; //<S2SV> for ( k = 0 ; k < SKIP_CONTEXTS ; ++ k ) //<S2SV> vp9_diff_update_prob ( & r , & fc -> skip_probs [ k ] ) ; //<S2SV> if ( ! frame_is_intra_only ( cm ) ) { //<S2SV> nmv_context * const nmvc = & fc -> nmvc ; //<S2SV> int i , j ; //<S2SV> read_inter_mode_probs ( fc , & r ) ; //<S2SV> if ( cm -> interp_filter == SWITCHABLE ) //<S2SV> read_switchable_interp_probs ( fc , & r ) ; //<S2SV> for ( i = 0 ; i < INTRA_INTER_CONTEXTS ; i ++ ) //<S2SV> vp9_diff_update_prob ( & r , & fc -> intra_inter_prob [ i ] ) ; //<S2SV> cm -> reference_mode = read_frame_reference_mode ( cm , & r ) ; //<S2SV> if ( cm -> reference_mode != SINGLE_REFERENCE ) //<S2SV> setup_compound_reference_mode ( cm ) ; //<S2SV> read_frame_reference_mode_probs ( cm , & r ) ; //<S2SV> for ( j = 0 ; j < BLOCK_SIZE_GROUPS ; j ++ ) //<S2SV> for ( i = 0 ; i < INTRA_MODES - 1 ; ++ i ) //<S2SV> vp9_diff_update_prob ( & r , & fc -> y_mode_prob [ j ] [ i ] ) ; //<S2SV> for ( j = 0 ; j < PARTITION_CONTEXTS ; ++ j ) //<S2SV> for ( i = 0 ; i < PARTITION_TYPES - 1 ; ++ i ) //<S2SV> vp9_diff_update_prob ( & r , & fc -> partition_prob [ j ] [ i ] ) ; //<S2SV> read_mv_probs ( nmvc , cm -> allow_high_precision_mv , & r ) ; //<S2SV> } //<S2SV> return vpx_reader_has_error ( & r ) ; //<S2SV> } //<S2SV> 