static vpx_image_t * decoder_get_frame ( vpx_codec_alg_priv_t * ctx , //<S2SV> vpx_codec_iter_t * iter ) { //<S2SV> vpx_image_t * img = NULL ; //<S2SV> if ( ctx -> frame_parallel_decode && ctx -> available_threads > 0 && //<S2SV> ! ctx -> flushed ) { //<S2SV> return NULL ; //<S2SV> } //<S2SV> if ( ctx -> num_cache_frames > 0 ) { //<S2SV> release_last_output_frame ( ctx ) ; //<S2SV> ctx -> last_show_frame = ctx -> frame_cache [ ctx -> frame_cache_read ] . fb_idx ; //<S2SV> if ( ctx -> need_resync ) //<S2SV> return NULL ; //<S2SV> img = & ctx -> frame_cache [ ctx -> frame_cache_read ] . img ; //<S2SV> ctx -> frame_cache_read = ( ctx -> frame_cache_read + 1 ) % FRAME_CACHE_SIZE ; //<S2SV> -- ctx -> num_cache_frames ; //<S2SV> return img ; //<S2SV> } //<S2SV> if ( * iter == NULL && ctx -> frame_workers != NULL ) { //<S2SV> do { //<S2SV> YV12_BUFFER_CONFIG sd ; //<S2SV> vp9_ppflags_t flags = { 0 , 0 , 0 } ; //<S2SV> const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; //<S2SV> VPxWorker * const worker = //<S2SV> & ctx -> frame_workers [ ctx -> next_output_worker_id ] ; //<S2SV> FrameWorkerData * const frame_worker_data = //<S2SV> ( FrameWorkerData * ) worker -> data1 ; //<S2SV> ctx -> next_output_worker_id = //<S2SV> ( ctx -> next_output_worker_id + 1 ) % ctx -> num_frame_workers ; //<S2SV> if ( ctx -> base . init_flags & VPX_CODEC_USE_POSTPROC ) //<S2SV> set_ppflags ( ctx , & flags ) ; //<S2SV> if ( winterface -> sync ( worker ) ) { //<S2SV> if ( frame_worker_data -> received_frame == 1 ) { //<S2SV> ++ ctx -> available_threads ; //<S2SV> frame_worker_data -> received_frame = 0 ; //<S2SV> check_resync ( ctx , frame_worker_data -> pbi ) ; //<S2SV> } //<S2SV> if ( vp9_get_raw_frame ( frame_worker_data -> pbi , & sd , & flags ) == 0 ) { //<S2SV> VP9_COMMON * const cm = & frame_worker_data -> pbi -> common ; //<S2SV> RefCntBuffer * const frame_bufs = cm -> buffer_pool -> frame_bufs ; //<S2SV> release_last_output_frame ( ctx ) ; //<S2SV> ctx -> last_show_frame = frame_worker_data -> pbi -> common . new_fb_idx ; //<S2SV> if ( ctx -> need_resync ) //<S2SV> return NULL ; //<S2SV> yuvconfig2image ( & ctx -> img , & sd , frame_worker_data -> user_priv ) ; //<S2SV> ctx -> img . fb_priv = frame_bufs [ cm -> new_fb_idx ] . raw_frame_buffer . priv ; //<S2SV> img = & ctx -> img ; //<S2SV> return img ; //<S2SV> } //<S2SV> } else { //<S2SV> frame_worker_data -> received_frame = 0 ; //<S2SV> ++ ctx -> available_threads ; //<S2SV> ctx -> need_resync = 1 ; //<S2SV> if ( ctx -> flushed != 1 ) //<S2SV> return NULL ; //<S2SV> } //<S2SV> } while ( ctx -> next_output_worker_id != ctx -> next_submit_worker_id ) ; //<S2SV> } //<S2SV> return NULL ; //<S2SV> } //<S2SV> 