int stats_open_file ( stats_io_t * stats , const char * fpf , int pass ) { //<S2SV> int res ; //<S2SV> stats -> pass = pass ; //<S2SV> if ( pass == 0 ) { //<S2SV> stats -> file = fopen ( fpf , "wb" ) ; //<S2SV> stats -> buf . sz = 0 ; //<S2SV> stats -> buf . buf = NULL ; //<S2SV> res = ( stats -> file != NULL ) ; //<S2SV> } else { //<S2SV> # if USE_POSIX_MMAP //<S2SV> struct stat stat_buf ; //<S2SV> int fd ; //<S2SV> fd = open ( fpf , O_RDONLY ) ; //<S2SV> stats -> file = fdopen ( fd , "rb" ) ; //<S2SV> fstat ( fd , & stat_buf ) ; //<S2SV> stats -> buf . sz = stat_buf . st_size ; //<S2SV> stats -> buf . buf = mmap ( NULL , stats -> buf . sz , PROT_READ , MAP_PRIVATE , fd , 0 ) ; //<S2SV> res = ( stats -> buf . buf != NULL ) ; //<S2SV> # else //<S2SV> size_t nbytes ; //<S2SV> stats -> file = fopen ( fpf , "rb" ) ; //<S2SV> if ( stats -> file == NULL ) //<S2SV> fatal ( "First-pass<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist!" ) ; //<S2SV> if ( fseek ( stats -> file , 0 , SEEK_END ) ) //<S2SV> fatal ( "First-pass<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>must<S2SV_blank>be<S2SV_blank>seekable!" ) ; //<S2SV> stats -> buf . sz = stats -> buf_alloc_sz = ftell ( stats -> file ) ; //<S2SV> rewind ( stats -> file ) ; //<S2SV> stats -> buf . buf = malloc ( stats -> buf_alloc_sz ) ; //<S2SV> if ( ! stats -> buf . buf ) //<S2SV> fatal ( "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>first-pass<S2SV_blank>stats<S2SV_blank>buffer<S2SV_blank>(%lu<S2SV_blank>bytes)" , //<S2SV> ( unsigned int ) stats -> buf_alloc_sz ) ; //<S2SV> nbytes = fread ( stats -> buf . buf , 1 , stats -> buf . sz , stats -> file ) ; //<S2SV> res = ( nbytes == stats -> buf . sz ) ; //<S2SV> # endif //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 