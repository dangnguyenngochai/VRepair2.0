void vp8dx_bool_decoder_fill ( BOOL_DECODER * br ) //<S2SV> { //<S2SV> const unsigned char * bufptr = br -> user_buffer ; //<S2SV> VP8_BD_VALUE value = br -> value ; //<S2SV> int count = br -> count ; //<S2SV> int shift = VP8_BD_VALUE_SIZE - CHAR_BIT - ( count + CHAR_BIT ) ; //<S2SV> size_t bytes_left = br -> user_buffer_end - bufptr ; //<S2SV> size_t bits_left = bytes_left * CHAR_BIT ; //<S2SV> int x = ( int ) ( shift + CHAR_BIT - bits_left ) ; //<S2SV> int loop_end = 0 ; //<S2SV> unsigned char decrypted [ sizeof ( VP8_BD_VALUE ) + 1 ] ; //<S2SV> if ( br -> decrypt_cb ) { //<S2SV> size_t n = MIN ( sizeof ( decrypted ) , bytes_left ) ; //<S2SV> br -> decrypt_cb ( br -> decrypt_state , bufptr , decrypted , ( int ) n ) ; //<S2SV> bufptr = decrypted ; //<S2SV> } //<S2SV> if ( x >= 0 ) //<S2SV> { //<S2SV> count += VP8_LOTS_OF_BITS ; //<S2SV> loop_end = x ; //<S2SV> } //<S2SV> if ( x < 0 || bits_left ) //<S2SV> { //<S2SV> while ( shift >= loop_end ) //<S2SV> { //<S2SV> count += CHAR_BIT ; //<S2SV> value |= ( VP8_BD_VALUE ) * bufptr << shift ; //<S2SV> ++ bufptr ; //<S2SV> ++ br -> user_buffer ; //<S2SV> shift -= CHAR_BIT ; //<S2SV> } //<S2SV> } //<S2SV> br -> value = value ; //<S2SV> br -> count = count ; //<S2SV> } //<S2SV> 