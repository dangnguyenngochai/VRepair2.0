static void update_mbgraph_frame_stats ( VP9_COMP * cpi , //<S2SV> MBGRAPH_FRAME_STATS * stats , //<S2SV> YV12_BUFFER_CONFIG * buf , //<S2SV> YV12_BUFFER_CONFIG * golden_ref , //<S2SV> YV12_BUFFER_CONFIG * alt_ref ) { //<S2SV> MACROBLOCK * const x = & cpi -> td . mb ; //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> int mb_col , mb_row , offset = 0 ; //<S2SV> int mb_y_offset = 0 , arf_y_offset = 0 , gld_y_offset = 0 ; //<S2SV> MV gld_top_mv = { 0 , 0 } ; //<S2SV> MODE_INFO mi_local ; //<S2SV> vp9_zero ( mi_local ) ; //<S2SV> x -> mv_row_min = - BORDER_MV_PIXELS_B16 ; //<S2SV> x -> mv_row_max = ( cm -> mb_rows - 1 ) * 8 + BORDER_MV_PIXELS_B16 ; //<S2SV> xd -> up_available = 0 ; //<S2SV> xd -> plane [ 0 ] . dst . stride = buf -> y_stride ; //<S2SV> xd -> plane [ 0 ] . pre [ 0 ] . stride = buf -> y_stride ; //<S2SV> xd -> plane [ 1 ] . dst . stride = buf -> uv_stride ; //<S2SV> xd -> mi [ 0 ] = & mi_local ; //<S2SV> mi_local . mbmi . sb_type = BLOCK_16X16 ; //<S2SV> mi_local . mbmi . ref_frame [ 0 ] = LAST_FRAME ; //<S2SV> mi_local . mbmi . ref_frame [ 1 ] = NONE ; //<S2SV> for ( mb_row = 0 ; mb_row < cm -> mb_rows ; mb_row ++ ) { //<S2SV> MV gld_left_mv = gld_top_mv ; //<S2SV> int mb_y_in_offset = mb_y_offset ; //<S2SV> int arf_y_in_offset = arf_y_offset ; //<S2SV> int gld_y_in_offset = gld_y_offset ; //<S2SV> x -> mv_col_min = - BORDER_MV_PIXELS_B16 ; //<S2SV> x -> mv_col_max = ( cm -> mb_cols - 1 ) * 8 + BORDER_MV_PIXELS_B16 ; //<S2SV> xd -> left_available = 0 ; //<S2SV> for ( mb_col = 0 ; mb_col < cm -> mb_cols ; mb_col ++ ) { //<S2SV> MBGRAPH_MB_STATS * mb_stats = & stats -> mb_stats [ offset + mb_col ] ; //<S2SV> update_mbgraph_mb_stats ( cpi , mb_stats , buf , mb_y_in_offset , //<S2SV> golden_ref , & gld_left_mv , alt_ref , //<S2SV> mb_row , mb_col ) ; //<S2SV> gld_left_mv = mb_stats -> ref [ GOLDEN_FRAME ] . m . mv . as_mv ; //<S2SV> if ( mb_col == 0 ) { //<S2SV> gld_top_mv = gld_left_mv ; //<S2SV> } //<S2SV> xd -> left_available = 1 ; //<S2SV> mb_y_in_offset += 16 ; //<S2SV> gld_y_in_offset += 16 ; //<S2SV> arf_y_in_offset += 16 ; //<S2SV> x -> mv_col_min -= 16 ; //<S2SV> x -> mv_col_max -= 16 ; //<S2SV> } //<S2SV> xd -> up_available = 1 ; //<S2SV> mb_y_offset += buf -> y_stride * 16 ; //<S2SV> gld_y_offset += golden_ref -> y_stride * 16 ; //<S2SV> if ( alt_ref ) //<S2SV> arf_y_offset += alt_ref -> y_stride * 16 ; //<S2SV> x -> mv_row_min -= 16 ; //<S2SV> x -> mv_row_max -= 16 ; //<S2SV> offset += cm -> mb_cols ; //<S2SV> } //<S2SV> } //<S2SV> 