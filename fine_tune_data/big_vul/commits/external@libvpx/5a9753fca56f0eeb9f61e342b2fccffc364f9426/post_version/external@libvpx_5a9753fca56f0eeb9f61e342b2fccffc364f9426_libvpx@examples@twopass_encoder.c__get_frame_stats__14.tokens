static int get_frame_stats ( vpx_codec_ctx_t * ctx , //<S2SV> const vpx_image_t * img , //<S2SV> vpx_codec_pts_t pts , //<S2SV> unsigned int duration , //<S2SV> vpx_enc_frame_flags_t flags , //<S2SV> unsigned int deadline , //<S2SV> vpx_fixed_buf_t * stats ) { //<S2SV> int got_pkts = 0 ; //<S2SV> vpx_codec_iter_t iter = NULL ; //<S2SV> const vpx_codec_cx_pkt_t * pkt = NULL ; //<S2SV> const vpx_codec_err_t res = vpx_codec_encode ( ctx , img , pts , duration , flags , //<S2SV> deadline ) ; //<S2SV> if ( res != VPX_CODEC_OK ) //<S2SV> die_codec ( ctx , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>frame<S2SV_blank>stats." ) ; //<S2SV> while ( ( pkt = vpx_codec_get_cx_data ( ctx , & iter ) ) != NULL ) { //<S2SV> got_pkts = 1 ; //<S2SV> if ( pkt -> kind == VPX_CODEC_STATS_PKT ) { //<S2SV> const uint8_t * const pkt_buf = pkt -> data . twopass_stats . buf ; //<S2SV> const size_t pkt_size = pkt -> data . twopass_stats . sz ; //<S2SV> stats -> buf = realloc ( stats -> buf , stats -> sz + pkt_size ) ; //<S2SV> memcpy ( ( uint8_t * ) stats -> buf + stats -> sz , pkt_buf , pkt_size ) ; //<S2SV> stats -> sz += pkt_size ; //<S2SV> } //<S2SV> } //<S2SV> return got_pkts ; //<S2SV> } //<S2SV> 