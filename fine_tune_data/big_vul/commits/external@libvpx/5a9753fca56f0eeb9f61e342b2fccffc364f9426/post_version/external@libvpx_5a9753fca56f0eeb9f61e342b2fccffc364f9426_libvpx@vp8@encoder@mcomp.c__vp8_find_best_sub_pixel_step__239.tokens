int vp8_find_best_sub_pixel_step ( MACROBLOCK * x , BLOCK * b , BLOCKD * d , //<S2SV> int_mv * bestmv , int_mv * ref_mv , //<S2SV> int error_per_bit , //<S2SV> const vp8_variance_fn_ptr_t * vfp , //<S2SV> int * mvcost [ 2 ] , int * distortion , //<S2SV> unsigned int * sse1 ) //<S2SV> { //<S2SV> int bestmse = INT_MAX ; //<S2SV> int_mv startmv ; //<S2SV> int_mv this_mv ; //<S2SV> unsigned char * z = ( * ( b -> base_src ) + b -> src ) ; //<S2SV> int left , right , up , down , diag ; //<S2SV> unsigned int sse ; //<S2SV> int whichdir ; //<S2SV> int thismse ; //<S2SV> int y_stride ; //<S2SV> int pre_stride = x -> e_mbd . pre . y_stride ; //<S2SV> unsigned char * base_pre = x -> e_mbd . pre . y_buffer ; //<S2SV> # if ARCH_X86 || ARCH_X86_64 //<S2SV> MACROBLOCKD * xd = & x -> e_mbd ; //<S2SV> unsigned char * y_0 = base_pre + d -> offset + ( bestmv -> as_mv . row ) * pre_stride + bestmv -> as_mv . col ; //<S2SV> unsigned char * y ; //<S2SV> y_stride = 32 ; //<S2SV> vfp -> copymem ( y_0 - 1 - pre_stride , pre_stride , xd -> y_buf , y_stride , 18 ) ; //<S2SV> y = xd -> y_buf + y_stride + 1 ; //<S2SV> # else //<S2SV> unsigned char * y = base_pre + d -> offset + ( bestmv -> as_mv . row ) * pre_stride + bestmv -> as_mv . col ; //<S2SV> y_stride = pre_stride ; //<S2SV> # endif //<S2SV> bestmv -> as_mv . row *= 8 ; //<S2SV> bestmv -> as_mv . col *= 8 ; //<S2SV> startmv = * bestmv ; //<S2SV> bestmse = vfp -> vf ( y , y_stride , z , b -> src_stride , sse1 ) ; //<S2SV> * distortion = bestmse ; //<S2SV> bestmse += mv_err_cost ( bestmv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> this_mv . as_mv . row = startmv . as_mv . row ; //<S2SV> this_mv . as_mv . col = ( ( startmv . as_mv . col - 8 ) | 4 ) ; //<S2SV> thismse = vfp -> svf_halfpix_h ( y - 1 , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> left = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( left < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = left ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> this_mv . as_mv . col += 8 ; //<S2SV> thismse = vfp -> svf_halfpix_h ( y , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> right = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( right < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = right ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> this_mv . as_mv . col = startmv . as_mv . col ; //<S2SV> this_mv . as_mv . row = ( ( startmv . as_mv . row - 8 ) | 4 ) ; //<S2SV> thismse = vfp -> svf_halfpix_v ( y - y_stride , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> up = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( up < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = up ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> this_mv . as_mv . row += 8 ; //<S2SV> thismse = vfp -> svf_halfpix_v ( y , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> down = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( down < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = down ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> whichdir = ( left < right ? 0 : 1 ) + ( up < down ? 0 : 2 ) ; //<S2SV> this_mv = startmv ; //<S2SV> switch ( whichdir ) //<S2SV> { //<S2SV> case 0 : //<S2SV> this_mv . as_mv . col = ( this_mv . as_mv . col - 8 ) | 4 ; //<S2SV> this_mv . as_mv . row = ( this_mv . as_mv . row - 8 ) | 4 ; //<S2SV> thismse = vfp -> svf_halfpix_hv ( y - 1 - y_stride , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> break ; //<S2SV> case 1 : //<S2SV> this_mv . as_mv . col += 4 ; //<S2SV> this_mv . as_mv . row = ( this_mv . as_mv . row - 8 ) | 4 ; //<S2SV> thismse = vfp -> svf_halfpix_hv ( y - y_stride , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> this_mv . as_mv . col = ( this_mv . as_mv . col - 8 ) | 4 ; //<S2SV> this_mv . as_mv . row += 4 ; //<S2SV> thismse = vfp -> svf_halfpix_hv ( y - 1 , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> default : //<S2SV> this_mv . as_mv . col += 4 ; //<S2SV> this_mv . as_mv . row += 4 ; //<S2SV> thismse = vfp -> svf_halfpix_hv ( y , y_stride , z , b -> src_stride , & sse ) ; //<S2SV> break ; //<S2SV> } //<S2SV> diag = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( diag < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = diag ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> if ( bestmv -> as_mv . row < startmv . as_mv . row ) //<S2SV> y -= y_stride ; //<S2SV> if ( bestmv -> as_mv . col < startmv . as_mv . col ) //<S2SV> y -- ; //<S2SV> startmv = * bestmv ; //<S2SV> this_mv . as_mv . row = startmv . as_mv . row ; //<S2SV> if ( startmv . as_mv . col & 7 ) //<S2SV> { //<S2SV> this_mv . as_mv . col = startmv . as_mv . col - 2 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> this_mv . as_mv . col = ( startmv . as_mv . col - 8 ) | 6 ; //<S2SV> thismse = vfp -> svf ( y - 1 , y_stride , 6 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> left = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( left < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = left ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> this_mv . as_mv . col += 4 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> right = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( right < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = right ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> this_mv . as_mv . col = startmv . as_mv . col ; //<S2SV> if ( startmv . as_mv . row & 7 ) //<S2SV> { //<S2SV> this_mv . as_mv . row = startmv . as_mv . row - 2 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> this_mv . as_mv . row = ( startmv . as_mv . row - 8 ) | 6 ; //<S2SV> thismse = vfp -> svf ( y - y_stride , y_stride , this_mv . as_mv . col & 7 , 6 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> up = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( up < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = up ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> this_mv . as_mv . row += 4 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> down = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( down < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = down ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> whichdir = ( left < right ? 0 : 1 ) + ( up < down ? 0 : 2 ) ; //<S2SV> this_mv = startmv ; //<S2SV> switch ( whichdir ) //<S2SV> { //<S2SV> case 0 : //<S2SV> if ( startmv . as_mv . row & 7 ) //<S2SV> { //<S2SV> this_mv . as_mv . row -= 2 ; //<S2SV> if ( startmv . as_mv . col & 7 ) //<S2SV> { //<S2SV> this_mv . as_mv . col -= 2 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> this_mv . as_mv . col = ( startmv . as_mv . col - 8 ) | 6 ; //<S2SV> thismse = vfp -> svf ( y - 1 , y_stride , 6 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> this_mv . as_mv . row = ( startmv . as_mv . row - 8 ) | 6 ; //<S2SV> if ( startmv . as_mv . col & 7 ) //<S2SV> { //<S2SV> this_mv . as_mv . col -= 2 ; //<S2SV> thismse = vfp -> svf ( y - y_stride , y_stride , this_mv . as_mv . col & 7 , 6 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> this_mv . as_mv . col = ( startmv . as_mv . col - 8 ) | 6 ; //<S2SV> thismse = vfp -> svf ( y - y_stride - 1 , y_stride , 6 , 6 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 1 : //<S2SV> this_mv . as_mv . col += 2 ; //<S2SV> if ( startmv . as_mv . row & 7 ) //<S2SV> { //<S2SV> this_mv . as_mv . row -= 2 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> this_mv . as_mv . row = ( startmv . as_mv . row - 8 ) | 6 ; //<S2SV> thismse = vfp -> svf ( y - y_stride , y_stride , this_mv . as_mv . col & 7 , 6 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 2 : //<S2SV> this_mv . as_mv . row += 2 ; //<S2SV> if ( startmv . as_mv . col & 7 ) //<S2SV> { //<S2SV> this_mv . as_mv . col -= 2 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> this_mv . as_mv . col = ( startmv . as_mv . col - 8 ) | 6 ; //<S2SV> thismse = vfp -> svf ( y - 1 , y_stride , 6 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 3 : //<S2SV> this_mv . as_mv . col += 2 ; //<S2SV> this_mv . as_mv . row += 2 ; //<S2SV> thismse = vfp -> svf ( y , y_stride , this_mv . as_mv . col & 7 , this_mv . as_mv . row & 7 , z , b -> src_stride , & sse ) ; //<S2SV> break ; //<S2SV> } //<S2SV> diag = thismse + mv_err_cost ( & this_mv , ref_mv , mvcost , error_per_bit ) ; //<S2SV> if ( diag < bestmse ) //<S2SV> { //<S2SV> * bestmv = this_mv ; //<S2SV> bestmse = diag ; //<S2SV> * distortion = thismse ; //<S2SV> * sse1 = sse ; //<S2SV> } //<S2SV> return bestmse ; //<S2SV> } //<S2SV> 