static void pick_quickcompress_mode ( vpx_codec_alg_priv_t * ctx , //<S2SV> unsigned long duration , //<S2SV> unsigned long deadline ) { //<S2SV> MODE new_mode = BEST ; //<S2SV> switch ( ctx -> cfg . g_pass ) { //<S2SV> case VPX_RC_ONE_PASS : //<S2SV> if ( deadline > 0 ) { //<S2SV> const vpx_codec_enc_cfg_t * const cfg = & ctx -> cfg ; //<S2SV> const uint64_t duration_us = ( uint64_t ) duration * 1000000 * //<S2SV> ( uint64_t ) cfg -> g_timebase . num / ( uint64_t ) cfg -> g_timebase . den ; //<S2SV> new_mode = ( deadline > duration_us ) ? GOOD : REALTIME ; //<S2SV> } else { //<S2SV> new_mode = BEST ; //<S2SV> } //<S2SV> break ; //<S2SV> case VPX_RC_FIRST_PASS : //<S2SV> break ; //<S2SV> case VPX_RC_LAST_PASS : //<S2SV> new_mode = deadline > 0 ? GOOD : BEST ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ctx -> oxcf . mode != new_mode ) { //<S2SV> ctx -> oxcf . mode = new_mode ; //<S2SV> vp9_change_config ( ctx -> cpi , & ctx -> oxcf ) ; //<S2SV> } //<S2SV> } //<S2SV> 