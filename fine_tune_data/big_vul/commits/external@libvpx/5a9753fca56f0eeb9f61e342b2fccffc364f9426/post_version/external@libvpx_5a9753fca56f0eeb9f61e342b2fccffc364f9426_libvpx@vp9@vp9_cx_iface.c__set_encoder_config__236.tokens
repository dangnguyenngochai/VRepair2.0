static vpx_codec_err_t set_encoder_config ( //<S2SV> VP9EncoderConfig * oxcf , //<S2SV> const vpx_codec_enc_cfg_t * cfg , //<S2SV> const struct vp9_extracfg * extra_cfg ) { //<S2SV> const int is_vbr = cfg -> rc_end_usage == VPX_VBR ; //<S2SV> int sl , tl ; //<S2SV> oxcf -> profile = cfg -> g_profile ; //<S2SV> oxcf -> max_threads = ( int ) cfg -> g_threads ; //<S2SV> oxcf -> width = cfg -> g_w ; //<S2SV> oxcf -> height = cfg -> g_h ; //<S2SV> oxcf -> bit_depth = cfg -> g_bit_depth ; //<S2SV> oxcf -> input_bit_depth = cfg -> g_input_bit_depth ; //<S2SV> oxcf -> init_framerate = ( double ) cfg -> g_timebase . den / cfg -> g_timebase . num ; //<S2SV> if ( oxcf -> init_framerate > 180 ) //<S2SV> oxcf -> init_framerate = 30 ; //<S2SV> oxcf -> mode = GOOD ; //<S2SV> switch ( cfg -> g_pass ) { //<S2SV> case VPX_RC_ONE_PASS : //<S2SV> oxcf -> pass = 0 ; //<S2SV> break ; //<S2SV> case VPX_RC_FIRST_PASS : //<S2SV> oxcf -> pass = 1 ; //<S2SV> break ; //<S2SV> case VPX_RC_LAST_PASS : //<S2SV> oxcf -> pass = 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> oxcf -> lag_in_frames = cfg -> g_pass == VPX_RC_FIRST_PASS ? 0 //<S2SV> : cfg -> g_lag_in_frames ; //<S2SV> oxcf -> rc_mode = cfg -> rc_end_usage ; //<S2SV> oxcf -> target_bandwidth = 1000 * cfg -> rc_target_bitrate ; //<S2SV> oxcf -> rc_max_intra_bitrate_pct = extra_cfg -> rc_max_intra_bitrate_pct ; //<S2SV> oxcf -> rc_max_inter_bitrate_pct = extra_cfg -> rc_max_inter_bitrate_pct ; //<S2SV> oxcf -> gf_cbr_boost_pct = extra_cfg -> gf_cbr_boost_pct ; //<S2SV> oxcf -> best_allowed_q = //<S2SV> extra_cfg -> lossless ? 0 : vp9_quantizer_to_qindex ( cfg -> rc_min_quantizer ) ; //<S2SV> oxcf -> worst_allowed_q = //<S2SV> extra_cfg -> lossless ? 0 : vp9_quantizer_to_qindex ( cfg -> rc_max_quantizer ) ; //<S2SV> oxcf -> cq_level = vp9_quantizer_to_qindex ( extra_cfg -> cq_level ) ; //<S2SV> oxcf -> fixed_q = - 1 ; //<S2SV> oxcf -> under_shoot_pct = cfg -> rc_undershoot_pct ; //<S2SV> oxcf -> over_shoot_pct = cfg -> rc_overshoot_pct ; //<S2SV> oxcf -> scaled_frame_width = cfg -> rc_scaled_width ; //<S2SV> oxcf -> scaled_frame_height = cfg -> rc_scaled_height ; //<S2SV> if ( cfg -> rc_resize_allowed == 1 ) { //<S2SV> oxcf -> resize_mode = //<S2SV> ( oxcf -> scaled_frame_width == 0 || oxcf -> scaled_frame_height == 0 ) ? //<S2SV> RESIZE_DYNAMIC : RESIZE_FIXED ; //<S2SV> } else { //<S2SV> oxcf -> resize_mode = RESIZE_NONE ; //<S2SV> } //<S2SV> oxcf -> maximum_buffer_size_ms = is_vbr ? 240000 : cfg -> rc_buf_sz ; //<S2SV> oxcf -> starting_buffer_level_ms = is_vbr ? 60000 : cfg -> rc_buf_initial_sz ; //<S2SV> oxcf -> optimal_buffer_level_ms = is_vbr ? 60000 : cfg -> rc_buf_optimal_sz ; //<S2SV> oxcf -> drop_frames_water_mark = cfg -> rc_dropframe_thresh ; //<S2SV> oxcf -> two_pass_vbrbias = cfg -> rc_2pass_vbr_bias_pct ; //<S2SV> oxcf -> two_pass_vbrmin_section = cfg -> rc_2pass_vbr_minsection_pct ; //<S2SV> oxcf -> two_pass_vbrmax_section = cfg -> rc_2pass_vbr_maxsection_pct ; //<S2SV> oxcf -> auto_key = cfg -> kf_mode == VPX_KF_AUTO && //<S2SV> cfg -> kf_min_dist != cfg -> kf_max_dist ; //<S2SV> oxcf -> key_freq = cfg -> kf_max_dist ; //<S2SV> oxcf -> speed = abs ( extra_cfg -> cpu_used ) ; //<S2SV> oxcf -> encode_breakout = extra_cfg -> static_thresh ; //<S2SV> oxcf -> enable_auto_arf = extra_cfg -> enable_auto_alt_ref ; //<S2SV> oxcf -> noise_sensitivity = extra_cfg -> noise_sensitivity ; //<S2SV> oxcf -> sharpness = extra_cfg -> sharpness ; //<S2SV> oxcf -> two_pass_stats_in = cfg -> rc_twopass_stats_in ; //<S2SV> # if CONFIG_FP_MB_STATS //<S2SV> oxcf -> firstpass_mb_stats_in = cfg -> rc_firstpass_mb_stats_in ; //<S2SV> # endif //<S2SV> oxcf -> color_space = extra_cfg -> color_space ; //<S2SV> oxcf -> arnr_max_frames = extra_cfg -> arnr_max_frames ; //<S2SV> oxcf -> arnr_strength = extra_cfg -> arnr_strength ; //<S2SV> oxcf -> min_gf_interval = extra_cfg -> min_gf_interval ; //<S2SV> oxcf -> max_gf_interval = extra_cfg -> max_gf_interval ; //<S2SV> oxcf -> tuning = extra_cfg -> tuning ; //<S2SV> oxcf -> content = extra_cfg -> content ; //<S2SV> oxcf -> tile_columns = extra_cfg -> tile_columns ; //<S2SV> oxcf -> tile_rows = extra_cfg -> tile_rows ; //<S2SV> oxcf -> error_resilient_mode = cfg -> g_error_resilient ; //<S2SV> oxcf -> frame_parallel_decoding_mode = extra_cfg -> frame_parallel_decoding_mode ; //<S2SV> oxcf -> aq_mode = extra_cfg -> aq_mode ; //<S2SV> oxcf -> frame_periodic_boost = extra_cfg -> frame_periodic_boost ; //<S2SV> oxcf -> ss_number_layers = cfg -> ss_number_layers ; //<S2SV> oxcf -> ts_number_layers = cfg -> ts_number_layers ; //<S2SV> oxcf -> temporal_layering_mode = ( enum vp9e_temporal_layering_mode ) //<S2SV> cfg -> temporal_layering_mode ; //<S2SV> for ( sl = 0 ; sl < oxcf -> ss_number_layers ; ++ sl ) { //<S2SV> # if CONFIG_SPATIAL_SVC //<S2SV> oxcf -> ss_enable_auto_arf [ sl ] = cfg -> ss_enable_auto_alt_ref [ sl ] ; //<S2SV> # endif //<S2SV> for ( tl = 0 ; tl < oxcf -> ts_number_layers ; ++ tl ) { //<S2SV> oxcf -> layer_target_bitrate [ sl * oxcf -> ts_number_layers + tl ] = //<S2SV> 1000 * cfg -> layer_target_bitrate [ sl * oxcf -> ts_number_layers + tl ] ; //<S2SV> } //<S2SV> } //<S2SV> if ( oxcf -> ss_number_layers == 1 && oxcf -> pass != 0 ) { //<S2SV> oxcf -> ss_target_bitrate [ 0 ] = ( int ) oxcf -> target_bandwidth ; //<S2SV> # if CONFIG_SPATIAL_SVC //<S2SV> oxcf -> ss_enable_auto_arf [ 0 ] = extra_cfg -> enable_auto_alt_ref ; //<S2SV> # endif //<S2SV> } //<S2SV> if ( oxcf -> ts_number_layers > 1 ) { //<S2SV> for ( tl = 0 ; tl < VPX_TS_MAX_LAYERS ; ++ tl ) { //<S2SV> oxcf -> ts_rate_decimator [ tl ] = cfg -> ts_rate_decimator [ tl ] ? //<S2SV> cfg -> ts_rate_decimator [ tl ] : 1 ; //<S2SV> } //<S2SV> } else if ( oxcf -> ts_number_layers == 1 ) { //<S2SV> oxcf -> ts_rate_decimator [ 0 ] = 1 ; //<S2SV> } //<S2SV> return VPX_CODEC_OK ; //<S2SV> } //<S2SV> 