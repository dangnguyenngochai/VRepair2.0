void vp9_xform_quant ( MACROBLOCK * x , int plane , int block , //<S2SV> BLOCK_SIZE plane_bsize , TX_SIZE tx_size ) { //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> const struct macroblock_plane * const p = & x -> plane [ plane ] ; //<S2SV> const struct macroblockd_plane * const pd = & xd -> plane [ plane ] ; //<S2SV> const scan_order * const scan_order = & vp9_default_scan_orders [ tx_size ] ; //<S2SV> tran_low_t * const coeff = BLOCK_OFFSET ( p -> coeff , block ) ; //<S2SV> tran_low_t * const qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; //<S2SV> tran_low_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; //<S2SV> uint16_t * const eob = & p -> eobs [ block ] ; //<S2SV> const int diff_stride = 4 * num_4x4_blocks_wide_lookup [ plane_bsize ] ; //<S2SV> int i , j ; //<S2SV> const int16_t * src_diff ; //<S2SV> txfrm_block_to_raster_xy ( plane_bsize , tx_size , block , & i , & j ) ; //<S2SV> src_diff = & p -> src_diff [ 4 * ( j * diff_stride + i ) ] ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> switch ( tx_size ) { //<S2SV> case TX_32X32 : //<S2SV> highbd_fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; //<S2SV> vpx_highbd_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , //<S2SV> p -> round , p -> quant , p -> quant_shift , qcoeff , //<S2SV> dqcoeff , pd -> dequant , eob , //<S2SV> scan_order -> scan , scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> case TX_16X16 : //<S2SV> vpx_highbd_fdct16x16 ( src_diff , coeff , diff_stride ) ; //<S2SV> vpx_highbd_quantize_b ( coeff , 256 , x -> skip_block , p -> zbin , p -> round , //<S2SV> p -> quant , p -> quant_shift , qcoeff , dqcoeff , //<S2SV> pd -> dequant , eob , //<S2SV> scan_order -> scan , scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> case TX_8X8 : //<S2SV> vpx_highbd_fdct8x8 ( src_diff , coeff , diff_stride ) ; //<S2SV> vpx_highbd_quantize_b ( coeff , 64 , x -> skip_block , p -> zbin , p -> round , //<S2SV> p -> quant , p -> quant_shift , qcoeff , dqcoeff , //<S2SV> pd -> dequant , eob , //<S2SV> scan_order -> scan , scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> case TX_4X4 : //<S2SV> x -> fwd_txm4x4 ( src_diff , coeff , diff_stride ) ; //<S2SV> vpx_highbd_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , //<S2SV> p -> quant , p -> quant_shift , qcoeff , dqcoeff , //<S2SV> pd -> dequant , eob , //<S2SV> scan_order -> scan , scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> assert ( 0 ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> # endif //<S2SV> switch ( tx_size ) { //<S2SV> case TX_32X32 : //<S2SV> fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; //<S2SV> vpx_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , p -> round , //<S2SV> p -> quant , p -> quant_shift , qcoeff , dqcoeff , //<S2SV> pd -> dequant , eob , scan_order -> scan , //<S2SV> scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> case TX_16X16 : //<S2SV> vpx_fdct16x16 ( src_diff , coeff , diff_stride ) ; //<S2SV> vpx_quantize_b ( coeff , 256 , x -> skip_block , p -> zbin , p -> round , //<S2SV> p -> quant , p -> quant_shift , qcoeff , dqcoeff , //<S2SV> pd -> dequant , eob , //<S2SV> scan_order -> scan , scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> case TX_8X8 : //<S2SV> vpx_fdct8x8 ( src_diff , coeff , diff_stride ) ; //<S2SV> vpx_quantize_b ( coeff , 64 , x -> skip_block , p -> zbin , p -> round , //<S2SV> p -> quant , p -> quant_shift , qcoeff , dqcoeff , //<S2SV> pd -> dequant , eob , //<S2SV> scan_order -> scan , scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> case TX_4X4 : //<S2SV> x -> fwd_txm4x4 ( src_diff , coeff , diff_stride ) ; //<S2SV> vpx_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , //<S2SV> p -> quant , p -> quant_shift , qcoeff , dqcoeff , //<S2SV> pd -> dequant , eob , //<S2SV> scan_order -> scan , scan_order -> iscan ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> assert ( 0 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> 