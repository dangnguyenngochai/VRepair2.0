static int rc_pick_q_and_bounds_two_pass ( const VP9_COMP * cpi , //<S2SV> int * bottom_index , //<S2SV> int * top_index ) { //<S2SV> const VP9_COMMON * const cm = & cpi -> common ; //<S2SV> const RATE_CONTROL * const rc = & cpi -> rc ; //<S2SV> const VP9EncoderConfig * const oxcf = & cpi -> oxcf ; //<S2SV> const GF_GROUP * gf_group = & cpi -> twopass . gf_group ; //<S2SV> const int cq_level = get_active_cq_level ( rc , oxcf ) ; //<S2SV> int active_best_quality ; //<S2SV> int active_worst_quality = cpi -> twopass . active_worst_quality ; //<S2SV> int q ; //<S2SV> int * inter_minq ; //<S2SV> ASSIGN_MINQ_TABLE ( cm -> bit_depth , inter_minq ) ; //<S2SV> if ( frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) { //<S2SV> if ( rc -> this_key_frame_forced ) { //<S2SV> double last_boosted_q ; //<S2SV> int delta_qindex ; //<S2SV> int qindex ; //<S2SV> if ( cpi -> twopass . last_kfgroup_zeromotion_pct >= STATIC_MOTION_THRESH ) { //<S2SV> qindex = MIN ( rc -> last_kf_qindex , rc -> last_boosted_qindex ) ; //<S2SV> active_best_quality = qindex ; //<S2SV> last_boosted_q = vp9_convert_qindex_to_q ( qindex , cm -> bit_depth ) ; //<S2SV> delta_qindex = vp9_compute_qdelta ( rc , last_boosted_q , //<S2SV> last_boosted_q * 1.25 , //<S2SV> cm -> bit_depth ) ; //<S2SV> active_worst_quality = MIN ( qindex + delta_qindex , active_worst_quality ) ; //<S2SV> } else { //<S2SV> qindex = rc -> last_boosted_qindex ; //<S2SV> last_boosted_q = vp9_convert_qindex_to_q ( qindex , cm -> bit_depth ) ; //<S2SV> delta_qindex = vp9_compute_qdelta ( rc , last_boosted_q , //<S2SV> last_boosted_q * 0.75 , //<S2SV> cm -> bit_depth ) ; //<S2SV> active_best_quality = MAX ( qindex + delta_qindex , rc -> best_quality ) ; //<S2SV> } //<S2SV> } else { //<S2SV> double q_adj_factor = 1.0 ; //<S2SV> double q_val ; //<S2SV> active_best_quality = get_kf_active_quality ( rc , active_worst_quality , //<S2SV> cm -> bit_depth ) ; //<S2SV> if ( ( cm -> width * cm -> height ) <= ( 352 * 288 ) ) { //<S2SV> q_adj_factor -= 0.25 ; //<S2SV> } //<S2SV> q_adj_factor += 0.05 - ( 0.001 * ( double ) cpi -> twopass . kf_zeromotion_pct ) ; //<S2SV> q_val = vp9_convert_qindex_to_q ( active_best_quality , cm -> bit_depth ) ; //<S2SV> active_best_quality += vp9_compute_qdelta ( rc , q_val , //<S2SV> q_val * q_adj_factor , //<S2SV> cm -> bit_depth ) ; //<S2SV> } //<S2SV> } else if ( ! rc -> is_src_frame_alt_ref && //<S2SV> ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) ) { //<S2SV> if ( rc -> frames_since_key > 1 && //<S2SV> rc -> avg_frame_qindex [ INTER_FRAME ] < active_worst_quality ) { //<S2SV> q = rc -> avg_frame_qindex [ INTER_FRAME ] ; //<S2SV> } else { //<S2SV> q = active_worst_quality ; //<S2SV> } //<S2SV> if ( oxcf -> rc_mode == VPX_CQ ) { //<S2SV> if ( q < cq_level ) //<S2SV> q = cq_level ; //<S2SV> active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; //<S2SV> active_best_quality = active_best_quality * 15 / 16 ; //<S2SV> } else if ( oxcf -> rc_mode == VPX_Q ) { //<S2SV> if ( ! cpi -> refresh_alt_ref_frame ) { //<S2SV> active_best_quality = cq_level ; //<S2SV> } else { //<S2SV> active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; //<S2SV> if ( gf_group -> rf_level [ gf_group -> index ] == GF_ARF_LOW ) //<S2SV> active_best_quality = ( active_best_quality + cq_level + 1 ) / 2 ; //<S2SV> } //<S2SV> } else { //<S2SV> active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( oxcf -> rc_mode == VPX_Q ) { //<S2SV> active_best_quality = cq_level ; //<S2SV> } else { //<S2SV> active_best_quality = inter_minq [ active_worst_quality ] ; //<S2SV> if ( ( oxcf -> rc_mode == VPX_CQ ) && //<S2SV> ( active_best_quality < cq_level ) ) { //<S2SV> active_best_quality = cq_level ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ( cpi -> oxcf . rc_mode != VPX_Q ) && //<S2SV> ( cpi -> twopass . gf_zeromotion_pct < VLOW_MOTION_THRESHOLD ) ) { //<S2SV> if ( frame_is_intra_only ( cm ) || //<S2SV> ( ! rc -> is_src_frame_alt_ref && //<S2SV> ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) ) ) { //<S2SV> active_best_quality -= //<S2SV> ( cpi -> twopass . extend_minq + cpi -> twopass . extend_minq_fast ) ; //<S2SV> active_worst_quality += ( cpi -> twopass . extend_maxq / 2 ) ; //<S2SV> } else { //<S2SV> active_best_quality -= //<S2SV> ( cpi -> twopass . extend_minq + cpi -> twopass . extend_minq_fast ) / 2 ; //<S2SV> active_worst_quality += cpi -> twopass . extend_maxq ; //<S2SV> } //<S2SV> } //<S2SV> # if LIMIT_QRANGE_FOR_ALTREF_AND_KEY //<S2SV> vpx_clear_system_state ( ) ; //<S2SV> if ( ! ( ( frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) ) || //<S2SV> ! rc -> this_key_frame_forced || //<S2SV> ( cpi -> twopass . last_kfgroup_zeromotion_pct < STATIC_MOTION_THRESH ) ) { //<S2SV> int qdelta = vp9_frame_type_qdelta ( cpi , gf_group -> rf_level [ gf_group -> index ] , //<S2SV> active_worst_quality ) ; //<S2SV> active_worst_quality = MAX ( active_worst_quality + qdelta , //<S2SV> active_best_quality ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( rc -> frame_size_selector != UNSCALED && ! frame_is_kf_gf_arf ( cpi ) ) { //<S2SV> int qdelta = vp9_compute_qdelta_by_rate ( rc , cm -> frame_type , //<S2SV> active_best_quality , 2.0 , //<S2SV> cm -> bit_depth ) ; //<S2SV> active_best_quality = MAX ( active_best_quality + qdelta , rc -> best_quality ) ; //<S2SV> } //<S2SV> active_best_quality = clamp ( active_best_quality , //<S2SV> rc -> best_quality , rc -> worst_quality ) ; //<S2SV> active_worst_quality = clamp ( active_worst_quality , //<S2SV> active_best_quality , rc -> worst_quality ) ; //<S2SV> if ( oxcf -> rc_mode == VPX_Q ) { //<S2SV> q = active_best_quality ; //<S2SV> } else if ( ( frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) && //<S2SV> rc -> this_key_frame_forced ) { //<S2SV> if ( cpi -> twopass . last_kfgroup_zeromotion_pct >= STATIC_MOTION_THRESH ) { //<S2SV> q = MIN ( rc -> last_kf_qindex , rc -> last_boosted_qindex ) ; //<S2SV> } else { //<S2SV> q = rc -> last_boosted_qindex ; //<S2SV> } //<S2SV> } else { //<S2SV> q = vp9_rc_regulate_q ( cpi , rc -> this_frame_target , //<S2SV> active_best_quality , active_worst_quality ) ; //<S2SV> if ( q > active_worst_quality ) { //<S2SV> if ( rc -> this_frame_target >= rc -> max_frame_bandwidth ) //<S2SV> active_worst_quality = q ; //<S2SV> else //<S2SV> q = active_worst_quality ; //<S2SV> } //<S2SV> } //<S2SV> clamp ( q , active_best_quality , active_worst_quality ) ; //<S2SV> * top_index = active_worst_quality ; //<S2SV> * bottom_index = active_best_quality ; //<S2SV> assert ( * top_index <= rc -> worst_quality && //<S2SV> * top_index >= rc -> best_quality ) ; //<S2SV> assert ( * bottom_index <= rc -> worst_quality && //<S2SV> * bottom_index >= rc -> best_quality ) ; //<S2SV> assert ( q <= rc -> worst_quality && q >= rc -> best_quality ) ; //<S2SV> return q ; //<S2SV> } //<S2SV> 