vpx_codec_err_t vpx_svc_encode ( SvcContext * svc_ctx , //<S2SV> vpx_codec_ctx_t * codec_ctx , //<S2SV> struct vpx_image * rawimg , //<S2SV> vpx_codec_pts_t pts , //<S2SV> int64_t duration , int deadline ) { //<S2SV> vpx_codec_err_t res ; //<S2SV> vpx_codec_iter_t iter ; //<S2SV> const vpx_codec_cx_pkt_t * cx_pkt ; //<S2SV> SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; //<S2SV> if ( svc_ctx == NULL || codec_ctx == NULL || si == NULL ) { //<S2SV> return VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> svc_log_reset ( svc_ctx ) ; //<S2SV> res = vpx_codec_encode ( codec_ctx , rawimg , pts , ( uint32_t ) duration , 0 , //<S2SV> deadline ) ; //<S2SV> if ( res != VPX_CODEC_OK ) { //<S2SV> return res ; //<S2SV> } //<S2SV> iter = NULL ; //<S2SV> while ( ( cx_pkt = vpx_codec_get_cx_data ( codec_ctx , & iter ) ) ) { //<S2SV> switch ( cx_pkt -> kind ) { //<S2SV> # if VPX_ENCODER_ABI_VERSION > ( 5 + VPX_CODEC_ABI_VERSION ) //<S2SV> # if CONFIG_SPATIAL_SVC //<S2SV> case VPX_CODEC_SPATIAL_SVC_LAYER_PSNR : { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) { //<S2SV> int j ; //<S2SV> svc_log ( svc_ctx , SVC_LOG_DEBUG , //<S2SV> "SVC<S2SV_blank>frame:<S2SV_blank>%d,<S2SV_blank>layer:<S2SV_blank>%d,<S2SV_blank>PSNR(Total/Y/U/V):<S2SV_blank>" //<S2SV> "%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank>\\n" , //<S2SV> si -> psnr_pkt_received , i , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . psnr [ 0 ] , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . psnr [ 1 ] , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . psnr [ 2 ] , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . psnr [ 3 ] ) ; //<S2SV> svc_log ( svc_ctx , SVC_LOG_DEBUG , //<S2SV> "SVC<S2SV_blank>frame:<S2SV_blank>%d,<S2SV_blank>layer:<S2SV_blank>%d,<S2SV_blank>SSE(Total/Y/U/V):<S2SV_blank>" //<S2SV> "%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank>\\n" , //<S2SV> si -> psnr_pkt_received , i , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . sse [ 0 ] , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . sse [ 1 ] , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . sse [ 2 ] , //<S2SV> cx_pkt -> data . layer_psnr [ i ] . sse [ 3 ] ) ; //<S2SV> for ( j = 0 ; j < COMPONENTS ; ++ j ) { //<S2SV> si -> psnr_sum [ i ] [ j ] += //<S2SV> cx_pkt -> data . layer_psnr [ i ] . psnr [ j ] ; //<S2SV> si -> sse_sum [ i ] [ j ] += cx_pkt -> data . layer_psnr [ i ] . sse [ j ] ; //<S2SV> } //<S2SV> } //<S2SV> ++ si -> psnr_pkt_received ; //<S2SV> break ; //<S2SV> } //<S2SV> case VPX_CODEC_SPATIAL_SVC_LAYER_SIZES : { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) //<S2SV> si -> bytes_sum [ i ] += cx_pkt -> data . layer_sizes [ i ] ; //<S2SV> break ; //<S2SV> } //<S2SV> # endif //<S2SV> # endif //<S2SV> default : { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return VPX_CODEC_OK ; //<S2SV> } //<S2SV> 