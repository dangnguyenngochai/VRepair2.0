void vp9_fht16x16_sse2 ( const int16_t * input , tran_low_t * output , //<S2SV> int stride , int tx_type ) { //<S2SV> __m128i in0 [ 16 ] , in1 [ 16 ] ; //<S2SV> switch ( tx_type ) { //<S2SV> case DCT_DCT : //<S2SV> vpx_fdct16x16_sse2 ( input , output , stride ) ; //<S2SV> break ; //<S2SV> case ADST_DCT : //<S2SV> load_buffer_16x16 ( input , in0 , in1 , stride ) ; //<S2SV> fadst16_sse2 ( in0 , in1 ) ; //<S2SV> right_shift_16x16 ( in0 , in1 ) ; //<S2SV> fdct16_sse2 ( in0 , in1 ) ; //<S2SV> write_buffer_16x16 ( output , in0 , in1 , 16 ) ; //<S2SV> break ; //<S2SV> case DCT_ADST : //<S2SV> load_buffer_16x16 ( input , in0 , in1 , stride ) ; //<S2SV> fdct16_sse2 ( in0 , in1 ) ; //<S2SV> right_shift_16x16 ( in0 , in1 ) ; //<S2SV> fadst16_sse2 ( in0 , in1 ) ; //<S2SV> write_buffer_16x16 ( output , in0 , in1 , 16 ) ; //<S2SV> break ; //<S2SV> case ADST_ADST : //<S2SV> load_buffer_16x16 ( input , in0 , in1 , stride ) ; //<S2SV> fadst16_sse2 ( in0 , in1 ) ; //<S2SV> right_shift_16x16 ( in0 , in1 ) ; //<S2SV> fadst16_sse2 ( in0 , in1 ) ; //<S2SV> write_buffer_16x16 ( output , in0 , in1 , 16 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> assert ( 0 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> 