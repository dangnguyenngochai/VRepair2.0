static void update_layer_contexts ( VP8_COMP * cpi ) //<S2SV> { //<S2SV> VP8_CONFIG * oxcf = & cpi -> oxcf ; //<S2SV> if ( oxcf -> number_of_layers > 1 ) //<S2SV> { //<S2SV> unsigned int i ; //<S2SV> double prev_layer_framerate = 0 ; //<S2SV> assert ( oxcf -> number_of_layers <= VPX_TS_MAX_LAYERS ) ; //<S2SV> for ( i = 0 ; i < oxcf -> number_of_layers && i < VPX_TS_MAX_LAYERS ; ++ i ) //<S2SV> { //<S2SV> LAYER_CONTEXT * lc = & cpi -> layer_context [ i ] ; //<S2SV> lc -> framerate = //<S2SV> cpi -> ref_framerate / oxcf -> rate_decimator [ i ] ; //<S2SV> lc -> target_bandwidth = oxcf -> target_bitrate [ i ] * 1000 ; //<S2SV> lc -> starting_buffer_level = rescale ( //<S2SV> ( int ) oxcf -> starting_buffer_level_in_ms , //<S2SV> lc -> target_bandwidth , 1000 ) ; //<S2SV> if ( oxcf -> optimal_buffer_level == 0 ) //<S2SV> lc -> optimal_buffer_level = lc -> target_bandwidth / 8 ; //<S2SV> else //<S2SV> lc -> optimal_buffer_level = rescale ( //<S2SV> ( int ) oxcf -> optimal_buffer_level_in_ms , //<S2SV> lc -> target_bandwidth , 1000 ) ; //<S2SV> if ( oxcf -> maximum_buffer_size == 0 ) //<S2SV> lc -> maximum_buffer_size = lc -> target_bandwidth / 8 ; //<S2SV> else //<S2SV> lc -> maximum_buffer_size = rescale ( //<S2SV> ( int ) oxcf -> maximum_buffer_size_in_ms , //<S2SV> lc -> target_bandwidth , 1000 ) ; //<S2SV> if ( i > 0 ) //<S2SV> lc -> avg_frame_size_for_layer = //<S2SV> ( int ) ( ( oxcf -> target_bitrate [ i ] - //<S2SV> oxcf -> target_bitrate [ i - 1 ] ) * 1000 / //<S2SV> ( lc -> framerate - prev_layer_framerate ) ) ; //<S2SV> prev_layer_framerate = lc -> framerate ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 