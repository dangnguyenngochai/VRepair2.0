void vp8_de_noise ( VP8_COMMON * cm , //<S2SV> YV12_BUFFER_CONFIG * source , //<S2SV> YV12_BUFFER_CONFIG * post , //<S2SV> int q , //<S2SV> int low_var_thresh , //<S2SV> int flag , //<S2SV> int uvfilter ) //<S2SV> { //<S2SV> int mbr ; //<S2SV> double level = 6.0e-05 * q * q * q - .0067 * q * q + .306 * q + .0065 ; //<S2SV> int ppl = ( int ) ( level + .5 ) ; //<S2SV> int mb_rows = cm -> mb_rows ; //<S2SV> int mb_cols = cm -> mb_cols ; //<S2SV> unsigned char * limits = cm -> pp_limits_buffer ; ; //<S2SV> ( void ) post ; //<S2SV> ( void ) low_var_thresh ; //<S2SV> ( void ) flag ; //<S2SV> memset ( limits , ( unsigned char ) ppl , 16 * mb_cols ) ; //<S2SV> for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) //<S2SV> { //<S2SV> vp8_post_proc_down_and_across_mb_row ( //<S2SV> source -> y_buffer + 16 * mbr * source -> y_stride , //<S2SV> source -> y_buffer + 16 * mbr * source -> y_stride , //<S2SV> source -> y_stride , source -> y_stride , source -> y_width , limits , 16 ) ; //<S2SV> if ( uvfilter == 1 ) { //<S2SV> vp8_post_proc_down_and_across_mb_row ( //<S2SV> source -> u_buffer + 8 * mbr * source -> uv_stride , //<S2SV> source -> u_buffer + 8 * mbr * source -> uv_stride , //<S2SV> source -> uv_stride , source -> uv_stride , source -> uv_width , limits , //<S2SV> 8 ) ; //<S2SV> vp8_post_proc_down_and_across_mb_row ( //<S2SV> source -> v_buffer + 8 * mbr * source -> uv_stride , //<S2SV> source -> v_buffer + 8 * mbr * source -> uv_stride , //<S2SV> source -> uv_stride , source -> uv_stride , source -> uv_width , limits , //<S2SV> 8 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 