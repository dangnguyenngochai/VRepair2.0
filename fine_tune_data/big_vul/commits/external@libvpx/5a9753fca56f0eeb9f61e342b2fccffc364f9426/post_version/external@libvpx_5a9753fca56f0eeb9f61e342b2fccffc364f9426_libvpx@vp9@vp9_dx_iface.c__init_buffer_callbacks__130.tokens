static void init_buffer_callbacks ( vpx_codec_alg_priv_t * ctx ) { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { //<S2SV> VPxWorker * const worker = & ctx -> frame_workers [ i ] ; //<S2SV> FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; //<S2SV> VP9_COMMON * const cm = & frame_worker_data -> pbi -> common ; //<S2SV> BufferPool * const pool = cm -> buffer_pool ; //<S2SV> cm -> new_fb_idx = INVALID_IDX ; //<S2SV> cm -> byte_alignment = ctx -> byte_alignment ; //<S2SV> cm -> skip_loop_filter = ctx -> skip_loop_filter ; //<S2SV> if ( ctx -> get_ext_fb_cb != NULL && ctx -> release_ext_fb_cb != NULL ) { //<S2SV> pool -> get_fb_cb = ctx -> get_ext_fb_cb ; //<S2SV> pool -> release_fb_cb = ctx -> release_ext_fb_cb ; //<S2SV> pool -> cb_priv = ctx -> ext_priv ; //<S2SV> } else { //<S2SV> pool -> get_fb_cb = vp9_get_frame_buffer ; //<S2SV> pool -> release_fb_cb = vp9_release_frame_buffer ; //<S2SV> if ( vp9_alloc_internal_frame_buffers ( & pool -> int_frame_buffers ) ) //<S2SV> vpx_internal_error ( & cm -> error , VPX_CODEC_MEM_ERROR , //<S2SV> "Failed<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>internal<S2SV_blank>frame<S2SV_blank>buffers" ) ; //<S2SV> pool -> cb_priv = & pool -> int_frame_buffers ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 