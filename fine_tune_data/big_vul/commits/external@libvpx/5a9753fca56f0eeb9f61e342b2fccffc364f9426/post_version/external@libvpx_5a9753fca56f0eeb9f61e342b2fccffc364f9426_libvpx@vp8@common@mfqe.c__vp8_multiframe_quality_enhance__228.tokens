void vp8_multiframe_quality_enhance //<S2SV> ( //<S2SV> VP8_COMMON * cm //<S2SV> ) //<S2SV> { //<S2SV> YV12_BUFFER_CONFIG * show = cm -> frame_to_show ; //<S2SV> YV12_BUFFER_CONFIG * dest = & cm -> post_proc_buffer ; //<S2SV> FRAME_TYPE frame_type = cm -> frame_type ; //<S2SV> const MODE_INFO * mode_info_context = cm -> show_frame_mi ; //<S2SV> int mb_row ; //<S2SV> int mb_col ; //<S2SV> int totmap , map [ 4 ] ; //<S2SV> int qcurr = cm -> base_qindex ; //<S2SV> int qprev = cm -> postproc_state . last_base_qindex ; //<S2SV> unsigned char * y_ptr , * u_ptr , * v_ptr ; //<S2SV> unsigned char * yd_ptr , * ud_ptr , * vd_ptr ; //<S2SV> y_ptr = show -> y_buffer ; //<S2SV> u_ptr = show -> u_buffer ; //<S2SV> v_ptr = show -> v_buffer ; //<S2SV> yd_ptr = dest -> y_buffer ; //<S2SV> ud_ptr = dest -> u_buffer ; //<S2SV> vd_ptr = dest -> v_buffer ; //<S2SV> for ( mb_row = 0 ; mb_row < cm -> mb_rows ; mb_row ++ ) //<S2SV> { //<S2SV> for ( mb_col = 0 ; mb_col < cm -> mb_cols ; mb_col ++ ) //<S2SV> { //<S2SV> if ( frame_type == INTER_FRAME ) totmap = qualify_inter_mb ( mode_info_context , map ) ; //<S2SV> else totmap = ( frame_type == KEY_FRAME ? 4 : 0 ) ; //<S2SV> if ( totmap ) //<S2SV> { //<S2SV> if ( totmap < 4 ) //<S2SV> { //<S2SV> int i , j ; //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) //<S2SV> for ( j = 0 ; j < 2 ; ++ j ) //<S2SV> { //<S2SV> if ( map [ i * 2 + j ] ) //<S2SV> { //<S2SV> multiframe_quality_enhance_block ( 8 , qcurr , qprev , //<S2SV> y_ptr + 8 * ( i * show -> y_stride + j ) , //<S2SV> u_ptr + 4 * ( i * show -> uv_stride + j ) , //<S2SV> v_ptr + 4 * ( i * show -> uv_stride + j ) , //<S2SV> show -> y_stride , //<S2SV> show -> uv_stride , //<S2SV> yd_ptr + 8 * ( i * dest -> y_stride + j ) , //<S2SV> ud_ptr + 4 * ( i * dest -> uv_stride + j ) , //<S2SV> vd_ptr + 4 * ( i * dest -> uv_stride + j ) , //<S2SV> dest -> y_stride , //<S2SV> dest -> uv_stride ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> int k ; //<S2SV> unsigned char * up = u_ptr + 4 * ( i * show -> uv_stride + j ) ; //<S2SV> unsigned char * udp = ud_ptr + 4 * ( i * dest -> uv_stride + j ) ; //<S2SV> unsigned char * vp = v_ptr + 4 * ( i * show -> uv_stride + j ) ; //<S2SV> unsigned char * vdp = vd_ptr + 4 * ( i * dest -> uv_stride + j ) ; //<S2SV> vp8_copy_mem8x8 ( y_ptr + 8 * ( i * show -> y_stride + j ) , show -> y_stride , //<S2SV> yd_ptr + 8 * ( i * dest -> y_stride + j ) , dest -> y_stride ) ; //<S2SV> for ( k = 0 ; k < 4 ; ++ k , up += show -> uv_stride , udp += dest -> uv_stride , //<S2SV> vp += show -> uv_stride , vdp += dest -> uv_stride ) //<S2SV> { //<S2SV> memcpy ( udp , up , 4 ) ; //<S2SV> memcpy ( vdp , vp , 4 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> multiframe_quality_enhance_block ( 16 , qcurr , qprev , y_ptr , //<S2SV> u_ptr , v_ptr , //<S2SV> show -> y_stride , //<S2SV> show -> uv_stride , //<S2SV> yd_ptr , ud_ptr , vd_ptr , //<S2SV> dest -> y_stride , //<S2SV> dest -> uv_stride ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> vp8_copy_mem16x16 ( y_ptr , show -> y_stride , yd_ptr , dest -> y_stride ) ; //<S2SV> vp8_copy_mem8x8 ( u_ptr , show -> uv_stride , ud_ptr , dest -> uv_stride ) ; //<S2SV> vp8_copy_mem8x8 ( v_ptr , show -> uv_stride , vd_ptr , dest -> uv_stride ) ; //<S2SV> } //<S2SV> y_ptr += 16 ; //<S2SV> u_ptr += 8 ; //<S2SV> v_ptr += 8 ; //<S2SV> yd_ptr += 16 ; //<S2SV> ud_ptr += 8 ; //<S2SV> vd_ptr += 8 ; //<S2SV> mode_info_context ++ ; //<S2SV> } //<S2SV> y_ptr += show -> y_stride * 16 - 16 * cm -> mb_cols ; //<S2SV> u_ptr += show -> uv_stride * 8 - 8 * cm -> mb_cols ; //<S2SV> v_ptr += show -> uv_stride * 8 - 8 * cm -> mb_cols ; //<S2SV> yd_ptr += dest -> y_stride * 16 - 16 * cm -> mb_cols ; //<S2SV> ud_ptr += dest -> uv_stride * 8 - 8 * cm -> mb_cols ; //<S2SV> vd_ptr += dest -> uv_stride * 8 - 8 * cm -> mb_cols ; //<S2SV> mode_info_context ++ ; //<S2SV> } //<S2SV> } //<S2SV> 