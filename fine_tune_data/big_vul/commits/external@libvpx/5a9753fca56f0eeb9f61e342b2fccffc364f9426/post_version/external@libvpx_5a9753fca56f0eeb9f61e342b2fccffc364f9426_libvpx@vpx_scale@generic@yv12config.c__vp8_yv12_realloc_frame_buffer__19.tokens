int vp8_yv12_realloc_frame_buffer ( YV12_BUFFER_CONFIG * ybf , //<S2SV> int width , int height , int border ) { //<S2SV> if ( ybf ) { //<S2SV> int aligned_width = ( width + 15 ) & ~ 15 ; //<S2SV> int aligned_height = ( height + 15 ) & ~ 15 ; //<S2SV> int y_stride = ( ( aligned_width + 2 * border ) + 31 ) & ~ 31 ; //<S2SV> int yplane_size = ( aligned_height + 2 * border ) * y_stride ; //<S2SV> int uv_width = aligned_width >> 1 ; //<S2SV> int uv_height = aligned_height >> 1 ; //<S2SV> int uv_stride = y_stride >> 1 ; //<S2SV> int uvplane_size = ( uv_height + border ) * uv_stride ; //<S2SV> const int frame_size = yplane_size + 2 * uvplane_size ; //<S2SV> if ( ! ybf -> buffer_alloc ) { //<S2SV> ybf -> buffer_alloc = ( uint8_t * ) vpx_memalign ( 32 , frame_size ) ; //<S2SV> ybf -> buffer_alloc_sz = frame_size ; //<S2SV> } //<S2SV> if ( ! ybf -> buffer_alloc || ybf -> buffer_alloc_sz < frame_size ) //<S2SV> return - 1 ; //<S2SV> if ( border & 0x1f ) //<S2SV> return - 3 ; //<S2SV> ybf -> y_crop_width = width ; //<S2SV> ybf -> y_crop_height = height ; //<S2SV> ybf -> y_width = aligned_width ; //<S2SV> ybf -> y_height = aligned_height ; //<S2SV> ybf -> y_stride = y_stride ; //<S2SV> ybf -> uv_crop_width = ( width + 1 ) / 2 ; //<S2SV> ybf -> uv_crop_height = ( height + 1 ) / 2 ; //<S2SV> ybf -> uv_width = uv_width ; //<S2SV> ybf -> uv_height = uv_height ; //<S2SV> ybf -> uv_stride = uv_stride ; //<S2SV> ybf -> alpha_width = 0 ; //<S2SV> ybf -> alpha_height = 0 ; //<S2SV> ybf -> alpha_stride = 0 ; //<S2SV> ybf -> border = border ; //<S2SV> ybf -> frame_size = frame_size ; //<S2SV> ybf -> y_buffer = ybf -> buffer_alloc + ( border * y_stride ) + border ; //<S2SV> ybf -> u_buffer = ybf -> buffer_alloc + yplane_size + ( border / 2 * uv_stride ) + border / 2 ; //<S2SV> ybf -> v_buffer = ybf -> buffer_alloc + yplane_size + uvplane_size + ( border / 2 * uv_stride ) + border / 2 ; //<S2SV> ybf -> alpha_buffer = NULL ; //<S2SV> ybf -> corrupted = 0 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> return - 2 ; //<S2SV> } //<S2SV> 