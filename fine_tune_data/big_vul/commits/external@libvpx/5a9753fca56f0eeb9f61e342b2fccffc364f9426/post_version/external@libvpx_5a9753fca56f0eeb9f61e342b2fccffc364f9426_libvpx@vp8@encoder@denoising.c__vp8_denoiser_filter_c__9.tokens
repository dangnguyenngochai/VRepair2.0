int vp8_denoiser_filter_c ( unsigned char * mc_running_avg_y , int mc_avg_y_stride , //<S2SV> unsigned char * running_avg_y , int avg_y_stride , //<S2SV> unsigned char * sig , int sig_stride , //<S2SV> unsigned int motion_magnitude , //<S2SV> int increase_denoising ) //<S2SV> { //<S2SV> unsigned char * running_avg_y_start = running_avg_y ; //<S2SV> unsigned char * sig_start = sig ; //<S2SV> int sum_diff_thresh ; //<S2SV> int r , c ; //<S2SV> int sum_diff = 0 ; //<S2SV> int adj_val [ 3 ] = { 3 , 4 , 6 } ; //<S2SV> int shift_inc1 = 0 ; //<S2SV> int shift_inc2 = 1 ; //<S2SV> int col_sum [ 16 ] = { 0 , 0 , 0 , 0 , //<S2SV> 0 , 0 , 0 , 0 , //<S2SV> 0 , 0 , 0 , 0 , //<S2SV> 0 , 0 , 0 , 0 } ; //<S2SV> if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) //<S2SV> { //<S2SV> if ( increase_denoising ) { //<S2SV> shift_inc1 = 1 ; //<S2SV> shift_inc2 = 2 ; //<S2SV> } //<S2SV> adj_val [ 0 ] += shift_inc2 ; //<S2SV> adj_val [ 1 ] += shift_inc2 ; //<S2SV> adj_val [ 2 ] += shift_inc2 ; //<S2SV> } //<S2SV> for ( r = 0 ; r < 16 ; ++ r ) //<S2SV> { //<S2SV> for ( c = 0 ; c < 16 ; ++ c ) //<S2SV> { //<S2SV> int diff = 0 ; //<S2SV> int adjustment = 0 ; //<S2SV> int absdiff = 0 ; //<S2SV> diff = mc_running_avg_y [ c ] - sig [ c ] ; //<S2SV> absdiff = abs ( diff ) ; //<S2SV> if ( absdiff <= 3 + shift_inc1 ) //<S2SV> { //<S2SV> running_avg_y [ c ] = mc_running_avg_y [ c ] ; //<S2SV> col_sum [ c ] += diff ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( absdiff >= 4 + shift_inc1 && absdiff <= 7 ) //<S2SV> adjustment = adj_val [ 0 ] ; //<S2SV> else if ( absdiff >= 8 && absdiff <= 15 ) //<S2SV> adjustment = adj_val [ 1 ] ; //<S2SV> else //<S2SV> adjustment = adj_val [ 2 ] ; //<S2SV> if ( diff > 0 ) //<S2SV> { //<S2SV> if ( ( sig [ c ] + adjustment ) > 255 ) //<S2SV> running_avg_y [ c ] = 255 ; //<S2SV> else //<S2SV> running_avg_y [ c ] = sig [ c ] + adjustment ; //<S2SV> col_sum [ c ] += adjustment ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ( sig [ c ] - adjustment ) < 0 ) //<S2SV> running_avg_y [ c ] = 0 ; //<S2SV> else //<S2SV> running_avg_y [ c ] = sig [ c ] - adjustment ; //<S2SV> col_sum [ c ] -= adjustment ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> sig += sig_stride ; //<S2SV> mc_running_avg_y += mc_avg_y_stride ; //<S2SV> running_avg_y += avg_y_stride ; //<S2SV> } //<S2SV> for ( c = 0 ; c < 16 ; ++ c ) { //<S2SV> if ( col_sum [ c ] >= 128 ) { //<S2SV> col_sum [ c ] = 127 ; //<S2SV> } //<S2SV> sum_diff += col_sum [ c ] ; //<S2SV> } //<S2SV> sum_diff_thresh = SUM_DIFF_THRESHOLD ; //<S2SV> if ( increase_denoising ) sum_diff_thresh = SUM_DIFF_THRESHOLD_HIGH ; //<S2SV> if ( abs ( sum_diff ) > sum_diff_thresh ) { //<S2SV> int delta = ( ( abs ( sum_diff ) - sum_diff_thresh ) >> 8 ) + 1 ; //<S2SV> if ( delta < 4 ) { //<S2SV> sig -= sig_stride * 16 ; //<S2SV> mc_running_avg_y -= mc_avg_y_stride * 16 ; //<S2SV> running_avg_y -= avg_y_stride * 16 ; //<S2SV> for ( r = 0 ; r < 16 ; ++ r ) { //<S2SV> for ( c = 0 ; c < 16 ; ++ c ) { //<S2SV> int diff = mc_running_avg_y [ c ] - sig [ c ] ; //<S2SV> int adjustment = abs ( diff ) ; //<S2SV> if ( adjustment > delta ) //<S2SV> adjustment = delta ; //<S2SV> if ( diff > 0 ) { //<S2SV> if ( running_avg_y [ c ] - adjustment < 0 ) //<S2SV> running_avg_y [ c ] = 0 ; //<S2SV> else //<S2SV> running_avg_y [ c ] = running_avg_y [ c ] - adjustment ; //<S2SV> col_sum [ c ] -= adjustment ; //<S2SV> } else if ( diff < 0 ) { //<S2SV> if ( running_avg_y [ c ] + adjustment > 255 ) //<S2SV> running_avg_y [ c ] = 255 ; //<S2SV> else //<S2SV> running_avg_y [ c ] = running_avg_y [ c ] + adjustment ; //<S2SV> col_sum [ c ] += adjustment ; //<S2SV> } //<S2SV> } //<S2SV> sig += sig_stride ; //<S2SV> mc_running_avg_y += mc_avg_y_stride ; //<S2SV> running_avg_y += avg_y_stride ; //<S2SV> } //<S2SV> sum_diff = 0 ; //<S2SV> for ( c = 0 ; c < 16 ; ++ c ) { //<S2SV> if ( col_sum [ c ] >= 128 ) { //<S2SV> col_sum [ c ] = 127 ; //<S2SV> } //<S2SV> sum_diff += col_sum [ c ] ; //<S2SV> } //<S2SV> if ( abs ( sum_diff ) > sum_diff_thresh ) //<S2SV> return COPY_BLOCK ; //<S2SV> } else { //<S2SV> return COPY_BLOCK ; //<S2SV> } //<S2SV> } //<S2SV> vp8_copy_mem16x16 ( running_avg_y_start , avg_y_stride , sig_start , sig_stride ) ; //<S2SV> return FILTER_BLOCK ; //<S2SV> } //<S2SV> 