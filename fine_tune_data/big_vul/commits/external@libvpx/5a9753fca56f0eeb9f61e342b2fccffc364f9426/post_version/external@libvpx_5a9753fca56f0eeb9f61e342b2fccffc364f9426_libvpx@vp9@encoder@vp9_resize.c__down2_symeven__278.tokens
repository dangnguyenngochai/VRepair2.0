static void down2_symeven ( const uint8_t * const input , int length , //<S2SV> uint8_t * output ) { //<S2SV> const int16_t * filter = vp9_down2_symeven_half_filter ; //<S2SV> const int filter_len_half = sizeof ( vp9_down2_symeven_half_filter ) / 2 ; //<S2SV> int i , j ; //<S2SV> uint8_t * optr = output ; //<S2SV> int l1 = filter_len_half ; //<S2SV> int l2 = ( length - filter_len_half ) ; //<S2SV> l1 += ( l1 & 1 ) ; //<S2SV> l2 += ( l2 & 1 ) ; //<S2SV> if ( l1 > l2 ) { //<S2SV> for ( i = 0 ; i < length ; i += 2 ) { //<S2SV> int sum = ( 1 << ( FILTER_BITS - 1 ) ) ; //<S2SV> for ( j = 0 ; j < filter_len_half ; ++ j ) { //<S2SV> sum += ( input [ ( i - j < 0 ? 0 : i - j ) ] + //<S2SV> input [ ( i + 1 + j >= length ? length - 1 : i + 1 + j ) ] ) * //<S2SV> filter [ j ] ; //<S2SV> } //<S2SV> sum >>= FILTER_BITS ; //<S2SV> * optr ++ = clip_pixel ( sum ) ; //<S2SV> } //<S2SV> } else { //<S2SV> for ( i = 0 ; i < l1 ; i += 2 ) { //<S2SV> int sum = ( 1 << ( FILTER_BITS - 1 ) ) ; //<S2SV> for ( j = 0 ; j < filter_len_half ; ++ j ) { //<S2SV> sum += ( input [ ( i - j < 0 ? 0 : i - j ) ] + input [ i + 1 + j ] ) * filter [ j ] ; //<S2SV> } //<S2SV> sum >>= FILTER_BITS ; //<S2SV> * optr ++ = clip_pixel ( sum ) ; //<S2SV> } //<S2SV> for ( ; i < l2 ; i += 2 ) { //<S2SV> int sum = ( 1 << ( FILTER_BITS - 1 ) ) ; //<S2SV> for ( j = 0 ; j < filter_len_half ; ++ j ) { //<S2SV> sum += ( input [ i - j ] + input [ i + 1 + j ] ) * filter [ j ] ; //<S2SV> } //<S2SV> sum >>= FILTER_BITS ; //<S2SV> * optr ++ = clip_pixel ( sum ) ; //<S2SV> } //<S2SV> for ( ; i < length ; i += 2 ) { //<S2SV> int sum = ( 1 << ( FILTER_BITS - 1 ) ) ; //<S2SV> for ( j = 0 ; j < filter_len_half ; ++ j ) { //<S2SV> sum += ( input [ i - j ] + //<S2SV> input [ ( i + 1 + j >= length ? length - 1 : i + 1 + j ) ] ) * //<S2SV> filter [ j ] ; //<S2SV> } //<S2SV> sum >>= FILTER_BITS ; //<S2SV> * optr ++ = clip_pixel ( sum ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 