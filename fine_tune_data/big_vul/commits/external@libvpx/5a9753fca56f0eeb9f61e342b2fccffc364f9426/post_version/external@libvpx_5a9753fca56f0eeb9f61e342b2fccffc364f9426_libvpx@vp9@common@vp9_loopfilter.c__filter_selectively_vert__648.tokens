static void filter_selectively_vert ( uint8_t * s , int pitch , //<S2SV> unsigned int mask_16x16 , //<S2SV> unsigned int mask_8x8 , //<S2SV> unsigned int mask_4x4 , //<S2SV> unsigned int mask_4x4_int , //<S2SV> const loop_filter_info_n * lfi_n , //<S2SV> const uint8_t * lfl ) { //<S2SV> unsigned int mask ; //<S2SV> for ( mask = mask_16x16 | mask_8x8 | mask_4x4 | mask_4x4_int ; //<S2SV> mask ; mask >>= 1 ) { //<S2SV> const loop_filter_thresh * lfi = lfi_n -> lfthr + * lfl ; //<S2SV> if ( mask & 1 ) { //<S2SV> if ( mask_16x16 & 1 ) { //<S2SV> vpx_lpf_vertical_16 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr ) ; //<S2SV> } else if ( mask_8x8 & 1 ) { //<S2SV> vpx_lpf_vertical_8 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; //<S2SV> } else if ( mask_4x4 & 1 ) { //<S2SV> vpx_lpf_vertical_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( mask_4x4_int & 1 ) //<S2SV> vpx_lpf_vertical_4 ( s + 4 , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; //<S2SV> s += 8 ; //<S2SV> lfl += 1 ; //<S2SV> mask_16x16 >>= 1 ; //<S2SV> mask_8x8 >>= 1 ; //<S2SV> mask_4x4 >>= 1 ; //<S2SV> mask_4x4_int >>= 1 ; //<S2SV> } //<S2SV> } //<S2SV> 