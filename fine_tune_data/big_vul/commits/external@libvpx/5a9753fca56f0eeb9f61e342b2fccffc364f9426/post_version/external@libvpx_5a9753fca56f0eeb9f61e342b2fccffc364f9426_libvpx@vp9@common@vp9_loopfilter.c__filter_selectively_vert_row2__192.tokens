static void filter_selectively_vert_row2 ( int subsampling_factor , //<S2SV> uint8_t * s , int pitch , //<S2SV> unsigned int mask_16x16_l , //<S2SV> unsigned int mask_8x8_l , //<S2SV> unsigned int mask_4x4_l , //<S2SV> unsigned int mask_4x4_int_l , //<S2SV> const loop_filter_info_n * lfi_n , //<S2SV> const uint8_t * lfl ) { //<S2SV> const int mask_shift = subsampling_factor ? 4 : 8 ; //<S2SV> const int mask_cutoff = subsampling_factor ? 0xf : 0xff ; //<S2SV> const int lfl_forward = subsampling_factor ? 4 : 8 ; //<S2SV> unsigned int mask_16x16_0 = mask_16x16_l & mask_cutoff ; //<S2SV> unsigned int mask_8x8_0 = mask_8x8_l & mask_cutoff ; //<S2SV> unsigned int mask_4x4_0 = mask_4x4_l & mask_cutoff ; //<S2SV> unsigned int mask_4x4_int_0 = mask_4x4_int_l & mask_cutoff ; //<S2SV> unsigned int mask_16x16_1 = ( mask_16x16_l >> mask_shift ) & mask_cutoff ; //<S2SV> unsigned int mask_8x8_1 = ( mask_8x8_l >> mask_shift ) & mask_cutoff ; //<S2SV> unsigned int mask_4x4_1 = ( mask_4x4_l >> mask_shift ) & mask_cutoff ; //<S2SV> unsigned int mask_4x4_int_1 = ( mask_4x4_int_l >> mask_shift ) & mask_cutoff ; //<S2SV> unsigned int mask ; //<S2SV> for ( mask = mask_16x16_0 | mask_8x8_0 | mask_4x4_0 | mask_4x4_int_0 | //<S2SV> mask_16x16_1 | mask_8x8_1 | mask_4x4_1 | mask_4x4_int_1 ; //<S2SV> mask ; mask >>= 1 ) { //<S2SV> const loop_filter_thresh * lfi0 = lfi_n -> lfthr + * lfl ; //<S2SV> const loop_filter_thresh * lfi1 = lfi_n -> lfthr + * ( lfl + lfl_forward ) ; //<S2SV> if ( mask & 1 ) { //<S2SV> if ( ( mask_16x16_0 | mask_16x16_1 ) & 1 ) { //<S2SV> if ( ( mask_16x16_0 & mask_16x16_1 ) & 1 ) { //<S2SV> vpx_lpf_vertical_16_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , //<S2SV> lfi0 -> hev_thr ) ; //<S2SV> } else if ( mask_16x16_0 & 1 ) { //<S2SV> vpx_lpf_vertical_16 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , //<S2SV> lfi0 -> hev_thr ) ; //<S2SV> } else { //<S2SV> vpx_lpf_vertical_16 ( s + 8 * pitch , pitch , lfi1 -> mblim , //<S2SV> lfi1 -> lim , lfi1 -> hev_thr ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( mask_8x8_0 | mask_8x8_1 ) & 1 ) { //<S2SV> if ( ( mask_8x8_0 & mask_8x8_1 ) & 1 ) { //<S2SV> vpx_lpf_vertical_8_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , //<S2SV> lfi0 -> hev_thr , lfi1 -> mblim , lfi1 -> lim , //<S2SV> lfi1 -> hev_thr ) ; //<S2SV> } else if ( mask_8x8_0 & 1 ) { //<S2SV> vpx_lpf_vertical_8 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , lfi0 -> hev_thr , //<S2SV> 1 ) ; //<S2SV> } else { //<S2SV> vpx_lpf_vertical_8 ( s + 8 * pitch , pitch , lfi1 -> mblim , lfi1 -> lim , //<S2SV> lfi1 -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( mask_4x4_0 | mask_4x4_1 ) & 1 ) { //<S2SV> if ( ( mask_4x4_0 & mask_4x4_1 ) & 1 ) { //<S2SV> vpx_lpf_vertical_4_dual ( s , pitch , lfi0 -> mblim , lfi0 -> lim , //<S2SV> lfi0 -> hev_thr , lfi1 -> mblim , lfi1 -> lim , //<S2SV> lfi1 -> hev_thr ) ; //<S2SV> } else if ( mask_4x4_0 & 1 ) { //<S2SV> vpx_lpf_vertical_4 ( s , pitch , lfi0 -> mblim , lfi0 -> lim , lfi0 -> hev_thr , //<S2SV> 1 ) ; //<S2SV> } else { //<S2SV> vpx_lpf_vertical_4 ( s + 8 * pitch , pitch , lfi1 -> mblim , lfi1 -> lim , //<S2SV> lfi1 -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( mask_4x4_int_0 | mask_4x4_int_1 ) & 1 ) { //<S2SV> if ( ( mask_4x4_int_0 & mask_4x4_int_1 ) & 1 ) { //<S2SV> vpx_lpf_vertical_4_dual ( s + 4 , pitch , lfi0 -> mblim , lfi0 -> lim , //<S2SV> lfi0 -> hev_thr , lfi1 -> mblim , lfi1 -> lim , //<S2SV> lfi1 -> hev_thr ) ; //<S2SV> } else if ( mask_4x4_int_0 & 1 ) { //<S2SV> vpx_lpf_vertical_4 ( s + 4 , pitch , lfi0 -> mblim , lfi0 -> lim , //<S2SV> lfi0 -> hev_thr , 1 ) ; //<S2SV> } else { //<S2SV> vpx_lpf_vertical_4 ( s + 8 * pitch + 4 , pitch , lfi1 -> mblim , lfi1 -> lim , //<S2SV> lfi1 -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> s += 8 ; //<S2SV> lfl += 1 ; //<S2SV> mask_16x16_0 >>= 1 ; //<S2SV> mask_8x8_0 >>= 1 ; //<S2SV> mask_4x4_0 >>= 1 ; //<S2SV> mask_4x4_int_0 >>= 1 ; //<S2SV> mask_16x16_1 >>= 1 ; //<S2SV> mask_8x8_1 >>= 1 ; //<S2SV> mask_4x4_1 >>= 1 ; //<S2SV> mask_4x4_int_1 >>= 1 ; //<S2SV> } //<S2SV> } //<S2SV> 