void vp8_bilinear_predict8x4_neon ( //<S2SV> unsigned char * src_ptr , //<S2SV> int src_pixels_per_line , //<S2SV> int xoffset , //<S2SV> int yoffset , //<S2SV> unsigned char * dst_ptr , //<S2SV> int dst_pitch ) { //<S2SV> uint8x8_t d0u8 , d1u8 , d2u8 , d3u8 , d4u8 , d5u8 ; //<S2SV> uint8x8_t d7u8 , d9u8 , d11u8 , d22u8 , d23u8 , d24u8 , d25u8 , d26u8 ; //<S2SV> uint8x16_t q1u8 , q2u8 , q3u8 , q4u8 , q5u8 ; //<S2SV> uint16x8_t q1u16 , q2u16 , q3u16 , q4u16 ; //<S2SV> uint16x8_t q6u16 , q7u16 , q8u16 , q9u16 , q10u16 ; //<S2SV> if ( xoffset == 0 ) { //<S2SV> d22u8 = vld1_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> d23u8 = vld1_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> d24u8 = vld1_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> d25u8 = vld1_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> d26u8 = vld1_u8 ( src_ptr ) ; //<S2SV> } else { //<S2SV> q1u8 = vld1q_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> q2u8 = vld1q_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> q3u8 = vld1q_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> q4u8 = vld1q_u8 ( src_ptr ) ; src_ptr += src_pixels_per_line ; //<S2SV> q5u8 = vld1q_u8 ( src_ptr ) ; //<S2SV> d0u8 = vdup_n_u8 ( bifilter4_coeff [ xoffset ] [ 0 ] ) ; //<S2SV> d1u8 = vdup_n_u8 ( bifilter4_coeff [ xoffset ] [ 1 ] ) ; //<S2SV> q6u16 = vmull_u8 ( vget_low_u8 ( q1u8 ) , d0u8 ) ; //<S2SV> q7u16 = vmull_u8 ( vget_low_u8 ( q2u8 ) , d0u8 ) ; //<S2SV> q8u16 = vmull_u8 ( vget_low_u8 ( q3u8 ) , d0u8 ) ; //<S2SV> q9u16 = vmull_u8 ( vget_low_u8 ( q4u8 ) , d0u8 ) ; //<S2SV> q10u16 = vmull_u8 ( vget_low_u8 ( q5u8 ) , d0u8 ) ; //<S2SV> d3u8 = vext_u8 ( vget_low_u8 ( q1u8 ) , vget_high_u8 ( q1u8 ) , 1 ) ; //<S2SV> d5u8 = vext_u8 ( vget_low_u8 ( q2u8 ) , vget_high_u8 ( q2u8 ) , 1 ) ; //<S2SV> d7u8 = vext_u8 ( vget_low_u8 ( q3u8 ) , vget_high_u8 ( q3u8 ) , 1 ) ; //<S2SV> d9u8 = vext_u8 ( vget_low_u8 ( q4u8 ) , vget_high_u8 ( q4u8 ) , 1 ) ; //<S2SV> d11u8 = vext_u8 ( vget_low_u8 ( q5u8 ) , vget_high_u8 ( q5u8 ) , 1 ) ; //<S2SV> q6u16 = vmlal_u8 ( q6u16 , d3u8 , d1u8 ) ; //<S2SV> q7u16 = vmlal_u8 ( q7u16 , d5u8 , d1u8 ) ; //<S2SV> q8u16 = vmlal_u8 ( q8u16 , d7u8 , d1u8 ) ; //<S2SV> q9u16 = vmlal_u8 ( q9u16 , d9u8 , d1u8 ) ; //<S2SV> q10u16 = vmlal_u8 ( q10u16 , d11u8 , d1u8 ) ; //<S2SV> d22u8 = vqrshrn_n_u16 ( q6u16 , 7 ) ; //<S2SV> d23u8 = vqrshrn_n_u16 ( q7u16 , 7 ) ; //<S2SV> d24u8 = vqrshrn_n_u16 ( q8u16 , 7 ) ; //<S2SV> d25u8 = vqrshrn_n_u16 ( q9u16 , 7 ) ; //<S2SV> d26u8 = vqrshrn_n_u16 ( q10u16 , 7 ) ; //<S2SV> } //<S2SV> if ( yoffset == 0 ) { //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d22u8 ) ; dst_ptr += dst_pitch ; //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d23u8 ) ; dst_ptr += dst_pitch ; //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d24u8 ) ; dst_ptr += dst_pitch ; //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d25u8 ) ; //<S2SV> } else { //<S2SV> d0u8 = vdup_n_u8 ( bifilter4_coeff [ yoffset ] [ 0 ] ) ; //<S2SV> d1u8 = vdup_n_u8 ( bifilter4_coeff [ yoffset ] [ 1 ] ) ; //<S2SV> q1u16 = vmull_u8 ( d22u8 , d0u8 ) ; //<S2SV> q2u16 = vmull_u8 ( d23u8 , d0u8 ) ; //<S2SV> q3u16 = vmull_u8 ( d24u8 , d0u8 ) ; //<S2SV> q4u16 = vmull_u8 ( d25u8 , d0u8 ) ; //<S2SV> q1u16 = vmlal_u8 ( q1u16 , d23u8 , d1u8 ) ; //<S2SV> q2u16 = vmlal_u8 ( q2u16 , d24u8 , d1u8 ) ; //<S2SV> q3u16 = vmlal_u8 ( q3u16 , d25u8 , d1u8 ) ; //<S2SV> q4u16 = vmlal_u8 ( q4u16 , d26u8 , d1u8 ) ; //<S2SV> d2u8 = vqrshrn_n_u16 ( q1u16 , 7 ) ; //<S2SV> d3u8 = vqrshrn_n_u16 ( q2u16 , 7 ) ; //<S2SV> d4u8 = vqrshrn_n_u16 ( q3u16 , 7 ) ; //<S2SV> d5u8 = vqrshrn_n_u16 ( q4u16 , 7 ) ; //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d2u8 ) ; dst_ptr += dst_pitch ; //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d3u8 ) ; dst_ptr += dst_pitch ; //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d4u8 ) ; dst_ptr += dst_pitch ; //<S2SV> vst1_u8 ( ( uint8_t * ) dst_ptr , d5u8 ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> 