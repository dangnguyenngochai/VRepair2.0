static void initialize_encoder ( struct stream_state * stream , //<S2SV> struct VpxEncoderConfig * global ) { //<S2SV> int i ; //<S2SV> int flags = 0 ; //<S2SV> flags |= global -> show_psnr ? VPX_CODEC_USE_PSNR : 0 ; //<S2SV> flags |= global -> out_part ? VPX_CODEC_USE_OUTPUT_PARTITION : 0 ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> flags |= stream -> config . use_16bit_internal ? VPX_CODEC_USE_HIGHBITDEPTH : 0 ; //<S2SV> # endif //<S2SV> vpx_codec_enc_init ( & stream -> encoder , global -> codec -> codec_interface ( ) , //<S2SV> & stream -> config . cfg , flags ) ; //<S2SV> ctx_exit_on_error ( & stream -> encoder , "Failed<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>encoder" ) ; //<S2SV> for ( i = 0 ; i < stream -> config . arg_ctrl_cnt ; i ++ ) { //<S2SV> int ctrl = stream -> config . arg_ctrls [ i ] [ 0 ] ; //<S2SV> int value = stream -> config . arg_ctrls [ i ] [ 1 ] ; //<S2SV> if ( vpx_codec_control_ ( & stream -> encoder , ctrl , value ) ) //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>Tried<S2SV_blank>to<S2SV_blank>set<S2SV_blank>control<S2SV_blank>%d<S2SV_blank>=<S2SV_blank>%d\\n" , //<S2SV> ctrl , value ) ; //<S2SV> ctx_exit_on_error ( & stream -> encoder , "Failed<S2SV_blank>to<S2SV_blank>control<S2SV_blank>codec" ) ; //<S2SV> } //<S2SV> # if CONFIG_DECODERS //<S2SV> if ( global -> test_decode != TEST_DECODE_OFF ) { //<S2SV> const VpxInterface * decoder = get_vpx_decoder_by_name ( global -> codec -> name ) ; //<S2SV> vpx_codec_dec_init ( & stream -> decoder , decoder -> codec_interface ( ) , NULL , 0 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> 