static vpx_codec_err_t decoder_destroy ( vpx_codec_alg_priv_t * ctx ) { //<S2SV> if ( ctx -> frame_workers != NULL ) { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { //<S2SV> VPxWorker * const worker = & ctx -> frame_workers [ i ] ; //<S2SV> FrameWorkerData * const frame_worker_data = //<S2SV> ( FrameWorkerData * ) worker -> data1 ; //<S2SV> vpx_get_worker_interface ( ) -> end ( worker ) ; //<S2SV> vp9_remove_common ( & frame_worker_data -> pbi -> common ) ; //<S2SV> # if CONFIG_VP9_POSTPROC //<S2SV> vp9_free_postproc_buffers ( & frame_worker_data -> pbi -> common ) ; //<S2SV> # endif //<S2SV> vp9_decoder_remove ( frame_worker_data -> pbi ) ; //<S2SV> vpx_free ( frame_worker_data -> scratch_buffer ) ; //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> pthread_mutex_destroy ( & frame_worker_data -> stats_mutex ) ; //<S2SV> pthread_cond_destroy ( & frame_worker_data -> stats_cond ) ; //<S2SV> # endif //<S2SV> vpx_free ( frame_worker_data ) ; //<S2SV> } //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> pthread_mutex_destroy ( & ctx -> buffer_pool -> pool_mutex ) ; //<S2SV> # endif //<S2SV> } //<S2SV> if ( ctx -> buffer_pool ) { //<S2SV> vp9_free_ref_frame_buffers ( ctx -> buffer_pool ) ; //<S2SV> vp9_free_internal_frame_buffers ( & ctx -> buffer_pool -> int_frame_buffers ) ; //<S2SV> } //<S2SV> vpx_free ( ctx -> frame_workers ) ; //<S2SV> vpx_free ( ctx -> buffer_pool ) ; //<S2SV> vpx_free ( ctx ) ; //<S2SV> return VPX_CODEC_OK ; //<S2SV> } //<S2SV> 