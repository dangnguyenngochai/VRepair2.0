void vp9_temporal_filter_apply_c ( uint8_t * frame1 , //<S2SV> unsigned int stride , //<S2SV> uint8_t * frame2 , //<S2SV> unsigned int block_width , //<S2SV> unsigned int block_height , //<S2SV> int strength , //<S2SV> int filter_weight , //<S2SV> unsigned int * accumulator , //<S2SV> uint16_t * count ) { //<S2SV> unsigned int i , j , k ; //<S2SV> int modifier ; //<S2SV> int byte = 0 ; //<S2SV> const int rounding = strength > 0 ? 1 << ( strength - 1 ) : 0 ; //<S2SV> for ( i = 0 , k = 0 ; i < block_height ; i ++ ) { //<S2SV> for ( j = 0 ; j < block_width ; j ++ , k ++ ) { //<S2SV> int src_byte = frame1 [ byte ] ; //<S2SV> int pixel_value = * frame2 ++ ; //<S2SV> modifier = src_byte - pixel_value ; //<S2SV> modifier *= modifier ; //<S2SV> modifier *= 3 ; //<S2SV> modifier += rounding ; //<S2SV> modifier >>= strength ; //<S2SV> if ( modifier > 16 ) //<S2SV> modifier = 16 ; //<S2SV> modifier = 16 - modifier ; //<S2SV> modifier *= filter_weight ; //<S2SV> count [ k ] += modifier ; //<S2SV> accumulator [ k ] += modifier * pixel_value ; //<S2SV> byte ++ ; //<S2SV> } //<S2SV> byte += stride - block_width ; //<S2SV> } //<S2SV> } //<S2SV> 