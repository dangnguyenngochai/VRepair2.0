void vp8_mv_pred //<S2SV> ( //<S2SV> VP8_COMP * cpi , //<S2SV> MACROBLOCKD * xd , //<S2SV> const MODE_INFO * here , //<S2SV> int_mv * mvp , //<S2SV> int refframe , //<S2SV> int * ref_frame_sign_bias , //<S2SV> int * sr , //<S2SV> int near_sadidx [ ] //<S2SV> ) //<S2SV> { //<S2SV> const MODE_INFO * above = here - xd -> mode_info_stride ; //<S2SV> const MODE_INFO * left = here - 1 ; //<S2SV> const MODE_INFO * aboveleft = above - 1 ; //<S2SV> int_mv near_mvs [ 8 ] ; //<S2SV> int near_ref [ 8 ] ; //<S2SV> int_mv mv ; //<S2SV> int vcnt = 0 ; //<S2SV> int find = 0 ; //<S2SV> int mb_offset ; //<S2SV> int mvx [ 8 ] ; //<S2SV> int mvy [ 8 ] ; //<S2SV> int i ; //<S2SV> mv . as_int = 0 ; //<S2SV> if ( here -> mbmi . ref_frame != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ 0 ] . as_int = near_mvs [ 1 ] . as_int = near_mvs [ 2 ] . as_int = near_mvs [ 3 ] . as_int = near_mvs [ 4 ] . as_int = near_mvs [ 5 ] . as_int = near_mvs [ 6 ] . as_int = near_mvs [ 7 ] . as_int = 0 ; //<S2SV> near_ref [ 0 ] = near_ref [ 1 ] = near_ref [ 2 ] = near_ref [ 3 ] = near_ref [ 4 ] = near_ref [ 5 ] = near_ref [ 6 ] = near_ref [ 7 ] = 0 ; //<S2SV> if ( above -> mbmi . ref_frame != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = above -> mbmi . mv . as_int ; //<S2SV> mv_bias ( ref_frame_sign_bias [ above -> mbmi . ref_frame ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = above -> mbmi . ref_frame ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> if ( left -> mbmi . ref_frame != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = left -> mbmi . mv . as_int ; //<S2SV> mv_bias ( ref_frame_sign_bias [ left -> mbmi . ref_frame ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = left -> mbmi . ref_frame ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> if ( aboveleft -> mbmi . ref_frame != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = aboveleft -> mbmi . mv . as_int ; //<S2SV> mv_bias ( ref_frame_sign_bias [ aboveleft -> mbmi . ref_frame ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = aboveleft -> mbmi . ref_frame ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> if ( cpi -> common . last_frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> mb_offset = ( - xd -> mb_to_top_edge / 128 + 1 ) * ( xd -> mode_info_stride + 1 ) + ( - xd -> mb_to_left_edge / 128 + 1 ) ; //<S2SV> if ( cpi -> lf_ref_frame [ mb_offset ] != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = cpi -> lfmv [ mb_offset ] . as_int ; //<S2SV> mv_bias ( cpi -> lf_ref_frame_sign_bias [ mb_offset ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = cpi -> lf_ref_frame [ mb_offset ] ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> if ( cpi -> lf_ref_frame [ mb_offset - xd -> mode_info_stride - 1 ] != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = cpi -> lfmv [ mb_offset - xd -> mode_info_stride - 1 ] . as_int ; //<S2SV> mv_bias ( cpi -> lf_ref_frame_sign_bias [ mb_offset - xd -> mode_info_stride - 1 ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = cpi -> lf_ref_frame [ mb_offset - xd -> mode_info_stride - 1 ] ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> if ( cpi -> lf_ref_frame [ mb_offset - 1 ] != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = cpi -> lfmv [ mb_offset - 1 ] . as_int ; //<S2SV> mv_bias ( cpi -> lf_ref_frame_sign_bias [ mb_offset - 1 ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = cpi -> lf_ref_frame [ mb_offset - 1 ] ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> if ( cpi -> lf_ref_frame [ mb_offset + 1 ] != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = cpi -> lfmv [ mb_offset + 1 ] . as_int ; //<S2SV> mv_bias ( cpi -> lf_ref_frame_sign_bias [ mb_offset + 1 ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = cpi -> lf_ref_frame [ mb_offset + 1 ] ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> if ( cpi -> lf_ref_frame [ mb_offset + xd -> mode_info_stride + 1 ] != INTRA_FRAME ) //<S2SV> { //<S2SV> near_mvs [ vcnt ] . as_int = cpi -> lfmv [ mb_offset + xd -> mode_info_stride + 1 ] . as_int ; //<S2SV> mv_bias ( cpi -> lf_ref_frame_sign_bias [ mb_offset + xd -> mode_info_stride + 1 ] , refframe , & near_mvs [ vcnt ] , ref_frame_sign_bias ) ; //<S2SV> near_ref [ vcnt ] = cpi -> lf_ref_frame [ mb_offset + xd -> mode_info_stride + 1 ] ; //<S2SV> } //<S2SV> vcnt ++ ; //<S2SV> } //<S2SV> for ( i = 0 ; i < vcnt ; i ++ ) //<S2SV> { //<S2SV> if ( near_ref [ near_sadidx [ i ] ] != INTRA_FRAME ) //<S2SV> { //<S2SV> if ( here -> mbmi . ref_frame == near_ref [ near_sadidx [ i ] ] ) //<S2SV> { //<S2SV> mv . as_int = near_mvs [ near_sadidx [ i ] ] . as_int ; //<S2SV> find = 1 ; //<S2SV> if ( i < 3 ) //<S2SV> * sr = 3 ; //<S2SV> else //<S2SV> * sr = 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ! find ) //<S2SV> { //<S2SV> for ( i = 0 ; i < vcnt ; i ++ ) //<S2SV> { //<S2SV> mvx [ i ] = near_mvs [ i ] . as_mv . row ; //<S2SV> mvy [ i ] = near_mvs [ i ] . as_mv . col ; //<S2SV> } //<S2SV> insertsortmv ( mvx , vcnt ) ; //<S2SV> insertsortmv ( mvy , vcnt ) ; //<S2SV> mv . as_mv . row = mvx [ vcnt / 2 ] ; //<S2SV> mv . as_mv . col = mvy [ vcnt / 2 ] ; //<S2SV> * sr = 0 ; //<S2SV> } //<S2SV> } //<S2SV> mvp -> as_int = mv . as_int ; //<S2SV> vp8_clamp_mv2 ( mvp , xd ) ; //<S2SV> } //<S2SV> 