void vp9_iht4x4_16_add_c ( const tran_low_t * input , uint8_t * dest , int stride , //<S2SV> int tx_type ) { //<S2SV> const transform_2d IHT_4 [ ] = { //<S2SV> { idct4_c , idct4_c } , //<S2SV> { iadst4_c , idct4_c } , //<S2SV> { idct4_c , iadst4_c } , //<S2SV> { iadst4_c , iadst4_c } //<S2SV> } ; //<S2SV> int i , j ; //<S2SV> tran_low_t out [ 4 * 4 ] ; //<S2SV> tran_low_t * outptr = out ; //<S2SV> tran_low_t temp_in [ 4 ] , temp_out [ 4 ] ; //<S2SV> for ( i = 0 ; i < 4 ; ++ i ) { //<S2SV> IHT_4 [ tx_type ] . rows ( input , outptr ) ; //<S2SV> input += 4 ; //<S2SV> outptr += 4 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 4 ; ++ i ) { //<S2SV> for ( j = 0 ; j < 4 ; ++ j ) //<S2SV> temp_in [ j ] = out [ j * 4 + i ] ; //<S2SV> IHT_4 [ tx_type ] . cols ( temp_in , temp_out ) ; //<S2SV> for ( j = 0 ; j < 4 ; ++ j ) { //<S2SV> dest [ j * stride + i ] = clip_pixel_add ( dest [ j * stride + i ] , //<S2SV> ROUND_POWER_OF_TWO ( temp_out [ j ] , 4 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 