int main ( int argc , char * argv [ ] ) { //<S2SV> char * fin , * fout ; //<S2SV> FILE * fpin , * fpout ; //<S2SV> uint8_t * inbuf , * outbuf ; //<S2SV> uint8_t * inbuf_u , * outbuf_u ; //<S2SV> uint8_t * inbuf_v , * outbuf_v ; //<S2SV> int f , frames ; //<S2SV> int width , height , target_width , target_height ; //<S2SV> exec_name = argv [ 0 ] ; //<S2SV> if ( argc < 5 ) { //<S2SV> printf ( "Incorrect<S2SV_blank>parameters:\\n" ) ; //<S2SV> usage ( ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> fin = argv [ 1 ] ; //<S2SV> fout = argv [ 4 ] ; //<S2SV> if ( ! parse_dim ( argv [ 2 ] , & width , & height ) ) { //<S2SV> printf ( "Incorrect<S2SV_blank>parameters:<S2SV_blank>%s\\n" , argv [ 2 ] ) ; //<S2SV> usage ( ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( ! parse_dim ( argv [ 3 ] , & target_width , & target_height ) ) { //<S2SV> printf ( "Incorrect<S2SV_blank>parameters:<S2SV_blank>%s\\n" , argv [ 3 ] ) ; //<S2SV> usage ( ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> fpin = fopen ( fin , "rb" ) ; //<S2SV> if ( fpin == NULL ) { //<S2SV> printf ( "Can\'t<S2SV_blank>open<S2SV_blank>file<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>read\\n" , fin ) ; //<S2SV> usage ( ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> fpout = fopen ( fout , "wb" ) ; //<S2SV> if ( fpout == NULL ) { //<S2SV> printf ( "Can\'t<S2SV_blank>open<S2SV_blank>file<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>write\\n" , fout ) ; //<S2SV> usage ( ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( argc >= 6 ) //<S2SV> frames = atoi ( argv [ 5 ] ) ; //<S2SV> else //<S2SV> frames = INT_MAX ; //<S2SV> printf ( "Input<S2SV_blank>size:<S2SV_blank><S2SV_blank>%dx%d\\n" , //<S2SV> width , height ) ; //<S2SV> printf ( "Target<S2SV_blank>size:<S2SV_blank>%dx%d,<S2SV_blank>Frames:<S2SV_blank>" , //<S2SV> target_width , target_height ) ; //<S2SV> if ( frames == INT_MAX ) //<S2SV> printf ( "All\\n" ) ; //<S2SV> else //<S2SV> printf ( "%d\\n" , frames ) ; //<S2SV> inbuf = ( uint8_t * ) malloc ( width * height * 3 / 2 ) ; //<S2SV> outbuf = ( uint8_t * ) malloc ( target_width * target_height * 3 / 2 ) ; //<S2SV> inbuf_u = inbuf + width * height ; //<S2SV> inbuf_v = inbuf_u + width * height / 4 ; //<S2SV> outbuf_u = outbuf + target_width * target_height ; //<S2SV> outbuf_v = outbuf_u + target_width * target_height / 4 ; //<S2SV> f = 0 ; //<S2SV> while ( f < frames ) { //<S2SV> if ( fread ( inbuf , width * height * 3 / 2 , 1 , fpin ) != 1 ) //<S2SV> break ; //<S2SV> vp9_resize_frame420 ( inbuf , width , inbuf_u , inbuf_v , width / 2 , //<S2SV> height , width , //<S2SV> outbuf , target_width , outbuf_u , outbuf_v , //<S2SV> target_width / 2 , //<S2SV> target_height , target_width ) ; //<S2SV> fwrite ( outbuf , target_width * target_height * 3 / 2 , 1 , fpout ) ; //<S2SV> f ++ ; //<S2SV> } //<S2SV> printf ( "%d<S2SV_blank>frames<S2SV_blank>processed\\n" , f ) ; //<S2SV> fclose ( fpin ) ; //<S2SV> fclose ( fpout ) ; //<S2SV> free ( inbuf ) ; //<S2SV> free ( outbuf ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 