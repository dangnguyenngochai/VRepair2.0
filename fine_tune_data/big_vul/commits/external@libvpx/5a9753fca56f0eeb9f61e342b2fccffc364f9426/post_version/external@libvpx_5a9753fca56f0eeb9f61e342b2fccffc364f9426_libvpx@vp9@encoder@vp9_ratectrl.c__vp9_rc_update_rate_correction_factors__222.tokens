void vp9_rc_update_rate_correction_factors ( VP9_COMP * cpi ) { //<S2SV> const VP9_COMMON * const cm = & cpi -> common ; //<S2SV> int correction_factor = 100 ; //<S2SV> double rate_correction_factor = get_rate_correction_factor ( cpi ) ; //<S2SV> double adjustment_limit ; //<S2SV> int projected_size_based_on_q = 0 ; //<S2SV> if ( cpi -> rc . is_src_frame_alt_ref ) //<S2SV> return ; //<S2SV> vpx_clear_system_state ( ) ; //<S2SV> if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cpi -> common . seg . enabled ) { //<S2SV> projected_size_based_on_q = //<S2SV> vp9_cyclic_refresh_estimate_bits_at_q ( cpi , rate_correction_factor ) ; //<S2SV> } else { //<S2SV> projected_size_based_on_q = vp9_estimate_bits_at_q ( cpi -> common . frame_type , //<S2SV> cm -> base_qindex , //<S2SV> cm -> MBs , //<S2SV> rate_correction_factor , //<S2SV> cm -> bit_depth ) ; //<S2SV> } //<S2SV> if ( projected_size_based_on_q > FRAME_OVERHEAD_BITS ) //<S2SV> correction_factor = ( int ) ( ( 100 * ( int64_t ) cpi -> rc . projected_frame_size ) / //<S2SV> projected_size_based_on_q ) ; //<S2SV> adjustment_limit = 0.25 + //<S2SV> 0.5 * MIN ( 1 , fabs ( log10 ( 0.01 * correction_factor ) ) ) ; //<S2SV> cpi -> rc . q_2_frame = cpi -> rc . q_1_frame ; //<S2SV> cpi -> rc . q_1_frame = cm -> base_qindex ; //<S2SV> cpi -> rc . rc_2_frame = cpi -> rc . rc_1_frame ; //<S2SV> if ( correction_factor > 110 ) //<S2SV> cpi -> rc . rc_1_frame = - 1 ; //<S2SV> else if ( correction_factor < 90 ) //<S2SV> cpi -> rc . rc_1_frame = 1 ; //<S2SV> else //<S2SV> cpi -> rc . rc_1_frame = 0 ; //<S2SV> if ( correction_factor > 102 ) { //<S2SV> correction_factor = ( int ) ( 100 + ( ( correction_factor - 100 ) * //<S2SV> adjustment_limit ) ) ; //<S2SV> rate_correction_factor = ( rate_correction_factor * correction_factor ) / 100 ; //<S2SV> if ( rate_correction_factor > MAX_BPB_FACTOR ) //<S2SV> rate_correction_factor = MAX_BPB_FACTOR ; //<S2SV> } else if ( correction_factor < 99 ) { //<S2SV> correction_factor = ( int ) ( 100 - ( ( 100 - correction_factor ) * //<S2SV> adjustment_limit ) ) ; //<S2SV> rate_correction_factor = ( rate_correction_factor * correction_factor ) / 100 ; //<S2SV> if ( rate_correction_factor < MIN_BPB_FACTOR ) //<S2SV> rate_correction_factor = MIN_BPB_FACTOR ; //<S2SV> } //<S2SV> set_rate_correction_factor ( cpi , rate_correction_factor ) ; //<S2SV> } //<S2SV> 