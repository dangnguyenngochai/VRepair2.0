static vpx_codec_err_t vp8_init ( vpx_codec_ctx_t * ctx , //<S2SV> vpx_codec_priv_enc_mr_cfg_t * data ) //<S2SV> { //<S2SV> vpx_codec_err_t res = VPX_CODEC_OK ; //<S2SV> vpx_codec_alg_priv_t * priv = NULL ; //<S2SV> ( void ) data ; //<S2SV> vp8_rtcd ( ) ; //<S2SV> vpx_dsp_rtcd ( ) ; //<S2SV> vpx_scale_rtcd ( ) ; //<S2SV> if ( ! ctx -> priv ) { //<S2SV> vp8_init_ctx ( ctx ) ; //<S2SV> priv = ( vpx_codec_alg_priv_t * ) ctx -> priv ; //<S2SV> priv -> fragments . count = 0 ; //<S2SV> priv -> fragments . enabled = //<S2SV> ( priv -> base . init_flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) ; //<S2SV> } else { //<S2SV> priv = ( vpx_codec_alg_priv_t * ) ctx -> priv ; //<S2SV> } //<S2SV> priv -> yv12_frame_buffers . use_frame_threads = //<S2SV> ( ctx -> priv -> init_flags & VPX_CODEC_USE_FRAME_THREADING ) ; //<S2SV> priv -> yv12_frame_buffers . use_frame_threads = 0 ; //<S2SV> if ( priv -> yv12_frame_buffers . use_frame_threads && //<S2SV> ( ( ctx -> priv -> init_flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) || //<S2SV> ( ctx -> priv -> init_flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) ) ) { //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 