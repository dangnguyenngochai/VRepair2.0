static void fdct16 ( const tran_low_t in [ 16 ] , tran_low_t out [ 16 ] ) { //<S2SV> tran_high_t step1 [ 8 ] ; //<S2SV> tran_high_t step2 [ 8 ] ; //<S2SV> tran_high_t step3 [ 8 ] ; //<S2SV> tran_high_t input [ 8 ] ; //<S2SV> tran_high_t temp1 , temp2 ; //<S2SV> input [ 0 ] = in [ 0 ] + in [ 15 ] ; //<S2SV> input [ 1 ] = in [ 1 ] + in [ 14 ] ; //<S2SV> input [ 2 ] = in [ 2 ] + in [ 13 ] ; //<S2SV> input [ 3 ] = in [ 3 ] + in [ 12 ] ; //<S2SV> input [ 4 ] = in [ 4 ] + in [ 11 ] ; //<S2SV> input [ 5 ] = in [ 5 ] + in [ 10 ] ; //<S2SV> input [ 6 ] = in [ 6 ] + in [ 9 ] ; //<S2SV> input [ 7 ] = in [ 7 ] + in [ 8 ] ; //<S2SV> step1 [ 0 ] = in [ 7 ] - in [ 8 ] ; //<S2SV> step1 [ 1 ] = in [ 6 ] - in [ 9 ] ; //<S2SV> step1 [ 2 ] = in [ 5 ] - in [ 10 ] ; //<S2SV> step1 [ 3 ] = in [ 4 ] - in [ 11 ] ; //<S2SV> step1 [ 4 ] = in [ 3 ] - in [ 12 ] ; //<S2SV> step1 [ 5 ] = in [ 2 ] - in [ 13 ] ; //<S2SV> step1 [ 6 ] = in [ 1 ] - in [ 14 ] ; //<S2SV> step1 [ 7 ] = in [ 0 ] - in [ 15 ] ; //<S2SV> { //<S2SV> tran_high_t s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; //<S2SV> tran_high_t t0 , t1 , t2 , t3 ; //<S2SV> tran_high_t x0 , x1 , x2 , x3 ; //<S2SV> s0 = input [ 0 ] + input [ 7 ] ; //<S2SV> s1 = input [ 1 ] + input [ 6 ] ; //<S2SV> s2 = input [ 2 ] + input [ 5 ] ; //<S2SV> s3 = input [ 3 ] + input [ 4 ] ; //<S2SV> s4 = input [ 3 ] - input [ 4 ] ; //<S2SV> s5 = input [ 2 ] - input [ 5 ] ; //<S2SV> s6 = input [ 1 ] - input [ 6 ] ; //<S2SV> s7 = input [ 0 ] - input [ 7 ] ; //<S2SV> x0 = s0 + s3 ; //<S2SV> x1 = s1 + s2 ; //<S2SV> x2 = s1 - s2 ; //<S2SV> x3 = s0 - s3 ; //<S2SV> t0 = ( x0 + x1 ) * cospi_16_64 ; //<S2SV> t1 = ( x0 - x1 ) * cospi_16_64 ; //<S2SV> t2 = x3 * cospi_8_64 + x2 * cospi_24_64 ; //<S2SV> t3 = x3 * cospi_24_64 - x2 * cospi_8_64 ; //<S2SV> out [ 0 ] = ( tran_low_t ) fdct_round_shift ( t0 ) ; //<S2SV> out [ 4 ] = ( tran_low_t ) fdct_round_shift ( t2 ) ; //<S2SV> out [ 8 ] = ( tran_low_t ) fdct_round_shift ( t1 ) ; //<S2SV> out [ 12 ] = ( tran_low_t ) fdct_round_shift ( t3 ) ; //<S2SV> t0 = ( s6 - s5 ) * cospi_16_64 ; //<S2SV> t1 = ( s6 + s5 ) * cospi_16_64 ; //<S2SV> t2 = fdct_round_shift ( t0 ) ; //<S2SV> t3 = fdct_round_shift ( t1 ) ; //<S2SV> x0 = s4 + t2 ; //<S2SV> x1 = s4 - t2 ; //<S2SV> x2 = s7 - t3 ; //<S2SV> x3 = s7 + t3 ; //<S2SV> t0 = x0 * cospi_28_64 + x3 * cospi_4_64 ; //<S2SV> t1 = x1 * cospi_12_64 + x2 * cospi_20_64 ; //<S2SV> t2 = x2 * cospi_12_64 + x1 * - cospi_20_64 ; //<S2SV> t3 = x3 * cospi_28_64 + x0 * - cospi_4_64 ; //<S2SV> out [ 2 ] = ( tran_low_t ) fdct_round_shift ( t0 ) ; //<S2SV> out [ 6 ] = ( tran_low_t ) fdct_round_shift ( t2 ) ; //<S2SV> out [ 10 ] = ( tran_low_t ) fdct_round_shift ( t1 ) ; //<S2SV> out [ 14 ] = ( tran_low_t ) fdct_round_shift ( t3 ) ; //<S2SV> } //<S2SV> temp1 = ( step1 [ 5 ] - step1 [ 2 ] ) * cospi_16_64 ; //<S2SV> temp2 = ( step1 [ 4 ] - step1 [ 3 ] ) * cospi_16_64 ; //<S2SV> step2 [ 2 ] = fdct_round_shift ( temp1 ) ; //<S2SV> step2 [ 3 ] = fdct_round_shift ( temp2 ) ; //<S2SV> temp1 = ( step1 [ 4 ] + step1 [ 3 ] ) * cospi_16_64 ; //<S2SV> temp2 = ( step1 [ 5 ] + step1 [ 2 ] ) * cospi_16_64 ; //<S2SV> step2 [ 4 ] = fdct_round_shift ( temp1 ) ; //<S2SV> step2 [ 5 ] = fdct_round_shift ( temp2 ) ; //<S2SV> step3 [ 0 ] = step1 [ 0 ] + step2 [ 3 ] ; //<S2SV> step3 [ 1 ] = step1 [ 1 ] + step2 [ 2 ] ; //<S2SV> step3 [ 2 ] = step1 [ 1 ] - step2 [ 2 ] ; //<S2SV> step3 [ 3 ] = step1 [ 0 ] - step2 [ 3 ] ; //<S2SV> step3 [ 4 ] = step1 [ 7 ] - step2 [ 4 ] ; //<S2SV> step3 [ 5 ] = step1 [ 6 ] - step2 [ 5 ] ; //<S2SV> step3 [ 6 ] = step1 [ 6 ] + step2 [ 5 ] ; //<S2SV> step3 [ 7 ] = step1 [ 7 ] + step2 [ 4 ] ; //<S2SV> temp1 = step3 [ 1 ] * - cospi_8_64 + step3 [ 6 ] * cospi_24_64 ; //<S2SV> temp2 = step3 [ 2 ] * cospi_24_64 + step3 [ 5 ] * cospi_8_64 ; //<S2SV> step2 [ 1 ] = fdct_round_shift ( temp1 ) ; //<S2SV> step2 [ 2 ] = fdct_round_shift ( temp2 ) ; //<S2SV> temp1 = step3 [ 2 ] * cospi_8_64 - step3 [ 5 ] * cospi_24_64 ; //<S2SV> temp2 = step3 [ 1 ] * cospi_24_64 + step3 [ 6 ] * cospi_8_64 ; //<S2SV> step2 [ 5 ] = fdct_round_shift ( temp1 ) ; //<S2SV> step2 [ 6 ] = fdct_round_shift ( temp2 ) ; //<S2SV> step1 [ 0 ] = step3 [ 0 ] + step2 [ 1 ] ; //<S2SV> step1 [ 1 ] = step3 [ 0 ] - step2 [ 1 ] ; //<S2SV> step1 [ 2 ] = step3 [ 3 ] + step2 [ 2 ] ; //<S2SV> step1 [ 3 ] = step3 [ 3 ] - step2 [ 2 ] ; //<S2SV> step1 [ 4 ] = step3 [ 4 ] - step2 [ 5 ] ; //<S2SV> step1 [ 5 ] = step3 [ 4 ] + step2 [ 5 ] ; //<S2SV> step1 [ 6 ] = step3 [ 7 ] - step2 [ 6 ] ; //<S2SV> step1 [ 7 ] = step3 [ 7 ] + step2 [ 6 ] ; //<S2SV> temp1 = step1 [ 0 ] * cospi_30_64 + step1 [ 7 ] * cospi_2_64 ; //<S2SV> temp2 = step1 [ 1 ] * cospi_14_64 + step1 [ 6 ] * cospi_18_64 ; //<S2SV> out [ 1 ] = ( tran_low_t ) fdct_round_shift ( temp1 ) ; //<S2SV> out [ 9 ] = ( tran_low_t ) fdct_round_shift ( temp2 ) ; //<S2SV> temp1 = step1 [ 2 ] * cospi_22_64 + step1 [ 5 ] * cospi_10_64 ; //<S2SV> temp2 = step1 [ 3 ] * cospi_6_64 + step1 [ 4 ] * cospi_26_64 ; //<S2SV> out [ 5 ] = ( tran_low_t ) fdct_round_shift ( temp1 ) ; //<S2SV> out [ 13 ] = ( tran_low_t ) fdct_round_shift ( temp2 ) ; //<S2SV> temp1 = step1 [ 3 ] * - cospi_26_64 + step1 [ 4 ] * cospi_6_64 ; //<S2SV> temp2 = step1 [ 2 ] * - cospi_10_64 + step1 [ 5 ] * cospi_22_64 ; //<S2SV> out [ 3 ] = ( tran_low_t ) fdct_round_shift ( temp1 ) ; //<S2SV> out [ 11 ] = ( tran_low_t ) fdct_round_shift ( temp2 ) ; //<S2SV> temp1 = step1 [ 1 ] * - cospi_18_64 + step1 [ 6 ] * cospi_14_64 ; //<S2SV> temp2 = step1 [ 0 ] * - cospi_2_64 + step1 [ 7 ] * cospi_30_64 ; //<S2SV> out [ 7 ] = ( tran_low_t ) fdct_round_shift ( temp1 ) ; //<S2SV> out [ 15 ] = ( tran_low_t ) fdct_round_shift ( temp2 ) ; //<S2SV> } //<S2SV> 