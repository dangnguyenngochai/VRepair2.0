static void read_ref_frames ( VP9_COMMON * const cm , MACROBLOCKD * const xd , //<S2SV> vpx_reader * r , //<S2SV> int segment_id , MV_REFERENCE_FRAME ref_frame [ 2 ] ) { //<S2SV> FRAME_CONTEXT * const fc = cm -> fc ; //<S2SV> FRAME_COUNTS * counts = xd -> counts ; //<S2SV> if ( segfeature_active ( & cm -> seg , segment_id , SEG_LVL_REF_FRAME ) ) { //<S2SV> ref_frame [ 0 ] = ( MV_REFERENCE_FRAME ) get_segdata ( & cm -> seg , segment_id , //<S2SV> SEG_LVL_REF_FRAME ) ; //<S2SV> ref_frame [ 1 ] = NONE ; //<S2SV> } else { //<S2SV> const REFERENCE_MODE mode = read_block_reference_mode ( cm , xd , r ) ; //<S2SV> if ( mode == COMPOUND_REFERENCE ) { //<S2SV> const int idx = cm -> ref_frame_sign_bias [ cm -> comp_fixed_ref ] ; //<S2SV> const int ctx = vp9_get_pred_context_comp_ref_p ( cm , xd ) ; //<S2SV> const int bit = vpx_read ( r , fc -> comp_ref_prob [ ctx ] ) ; //<S2SV> if ( counts ) //<S2SV> ++ counts -> comp_ref [ ctx ] [ bit ] ; //<S2SV> ref_frame [ idx ] = cm -> comp_fixed_ref ; //<S2SV> ref_frame [ ! idx ] = cm -> comp_var_ref [ bit ] ; //<S2SV> } else if ( mode == SINGLE_REFERENCE ) { //<S2SV> const int ctx0 = vp9_get_pred_context_single_ref_p1 ( xd ) ; //<S2SV> const int bit0 = vpx_read ( r , fc -> single_ref_prob [ ctx0 ] [ 0 ] ) ; //<S2SV> if ( counts ) //<S2SV> ++ counts -> single_ref [ ctx0 ] [ 0 ] [ bit0 ] ; //<S2SV> if ( bit0 ) { //<S2SV> const int ctx1 = vp9_get_pred_context_single_ref_p2 ( xd ) ; //<S2SV> const int bit1 = vpx_read ( r , fc -> single_ref_prob [ ctx1 ] [ 1 ] ) ; //<S2SV> if ( counts ) //<S2SV> ++ counts -> single_ref [ ctx1 ] [ 1 ] [ bit1 ] ; //<S2SV> ref_frame [ 0 ] = bit1 ? ALTREF_FRAME : GOLDEN_FRAME ; //<S2SV> } else { //<S2SV> ref_frame [ 0 ] = LAST_FRAME ; //<S2SV> } //<S2SV> ref_frame [ 1 ] = NONE ; //<S2SV> } else { //<S2SV> assert ( 0 && "Invalid<S2SV_blank>prediction<S2SV_blank>mode." ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 