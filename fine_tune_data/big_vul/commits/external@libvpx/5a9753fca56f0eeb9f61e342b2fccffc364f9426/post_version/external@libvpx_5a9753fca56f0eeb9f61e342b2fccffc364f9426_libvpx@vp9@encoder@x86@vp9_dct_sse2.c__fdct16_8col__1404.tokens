static void fdct16_8col ( __m128i * in ) { //<S2SV> __m128i i [ 8 ] , s [ 8 ] , p [ 8 ] , t [ 8 ] , u [ 16 ] , v [ 16 ] ; //<S2SV> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( ( int16_t ) cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_p16_m16 = pair_set_epi16 ( cospi_16_64 , - cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_m16_p16 = pair_set_epi16 ( - cospi_16_64 , cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_p24_p08 = pair_set_epi16 ( cospi_24_64 , cospi_8_64 ) ; //<S2SV> const __m128i k__cospi_p08_m24 = pair_set_epi16 ( cospi_8_64 , - cospi_24_64 ) ; //<S2SV> const __m128i k__cospi_m08_p24 = pair_set_epi16 ( - cospi_8_64 , cospi_24_64 ) ; //<S2SV> const __m128i k__cospi_p28_p04 = pair_set_epi16 ( cospi_28_64 , cospi_4_64 ) ; //<S2SV> const __m128i k__cospi_m04_p28 = pair_set_epi16 ( - cospi_4_64 , cospi_28_64 ) ; //<S2SV> const __m128i k__cospi_p12_p20 = pair_set_epi16 ( cospi_12_64 , cospi_20_64 ) ; //<S2SV> const __m128i k__cospi_m20_p12 = pair_set_epi16 ( - cospi_20_64 , cospi_12_64 ) ; //<S2SV> const __m128i k__cospi_p30_p02 = pair_set_epi16 ( cospi_30_64 , cospi_2_64 ) ; //<S2SV> const __m128i k__cospi_p14_p18 = pair_set_epi16 ( cospi_14_64 , cospi_18_64 ) ; //<S2SV> const __m128i k__cospi_m02_p30 = pair_set_epi16 ( - cospi_2_64 , cospi_30_64 ) ; //<S2SV> const __m128i k__cospi_m18_p14 = pair_set_epi16 ( - cospi_18_64 , cospi_14_64 ) ; //<S2SV> const __m128i k__cospi_p22_p10 = pair_set_epi16 ( cospi_22_64 , cospi_10_64 ) ; //<S2SV> const __m128i k__cospi_p06_p26 = pair_set_epi16 ( cospi_6_64 , cospi_26_64 ) ; //<S2SV> const __m128i k__cospi_m10_p22 = pair_set_epi16 ( - cospi_10_64 , cospi_22_64 ) ; //<S2SV> const __m128i k__cospi_m26_p06 = pair_set_epi16 ( - cospi_26_64 , cospi_6_64 ) ; //<S2SV> const __m128i k__DCT_CONST_ROUNDING = _mm_set1_epi32 ( DCT_CONST_ROUNDING ) ; //<S2SV> i [ 0 ] = _mm_add_epi16 ( in [ 0 ] , in [ 15 ] ) ; //<S2SV> i [ 1 ] = _mm_add_epi16 ( in [ 1 ] , in [ 14 ] ) ; //<S2SV> i [ 2 ] = _mm_add_epi16 ( in [ 2 ] , in [ 13 ] ) ; //<S2SV> i [ 3 ] = _mm_add_epi16 ( in [ 3 ] , in [ 12 ] ) ; //<S2SV> i [ 4 ] = _mm_add_epi16 ( in [ 4 ] , in [ 11 ] ) ; //<S2SV> i [ 5 ] = _mm_add_epi16 ( in [ 5 ] , in [ 10 ] ) ; //<S2SV> i [ 6 ] = _mm_add_epi16 ( in [ 6 ] , in [ 9 ] ) ; //<S2SV> i [ 7 ] = _mm_add_epi16 ( in [ 7 ] , in [ 8 ] ) ; //<S2SV> s [ 0 ] = _mm_sub_epi16 ( in [ 7 ] , in [ 8 ] ) ; //<S2SV> s [ 1 ] = _mm_sub_epi16 ( in [ 6 ] , in [ 9 ] ) ; //<S2SV> s [ 2 ] = _mm_sub_epi16 ( in [ 5 ] , in [ 10 ] ) ; //<S2SV> s [ 3 ] = _mm_sub_epi16 ( in [ 4 ] , in [ 11 ] ) ; //<S2SV> s [ 4 ] = _mm_sub_epi16 ( in [ 3 ] , in [ 12 ] ) ; //<S2SV> s [ 5 ] = _mm_sub_epi16 ( in [ 2 ] , in [ 13 ] ) ; //<S2SV> s [ 6 ] = _mm_sub_epi16 ( in [ 1 ] , in [ 14 ] ) ; //<S2SV> s [ 7 ] = _mm_sub_epi16 ( in [ 0 ] , in [ 15 ] ) ; //<S2SV> p [ 0 ] = _mm_add_epi16 ( i [ 0 ] , i [ 7 ] ) ; //<S2SV> p [ 1 ] = _mm_add_epi16 ( i [ 1 ] , i [ 6 ] ) ; //<S2SV> p [ 2 ] = _mm_add_epi16 ( i [ 2 ] , i [ 5 ] ) ; //<S2SV> p [ 3 ] = _mm_add_epi16 ( i [ 3 ] , i [ 4 ] ) ; //<S2SV> p [ 4 ] = _mm_sub_epi16 ( i [ 3 ] , i [ 4 ] ) ; //<S2SV> p [ 5 ] = _mm_sub_epi16 ( i [ 2 ] , i [ 5 ] ) ; //<S2SV> p [ 6 ] = _mm_sub_epi16 ( i [ 1 ] , i [ 6 ] ) ; //<S2SV> p [ 7 ] = _mm_sub_epi16 ( i [ 0 ] , i [ 7 ] ) ; //<S2SV> u [ 0 ] = _mm_add_epi16 ( p [ 0 ] , p [ 3 ] ) ; //<S2SV> u [ 1 ] = _mm_add_epi16 ( p [ 1 ] , p [ 2 ] ) ; //<S2SV> u [ 2 ] = _mm_sub_epi16 ( p [ 1 ] , p [ 2 ] ) ; //<S2SV> u [ 3 ] = _mm_sub_epi16 ( p [ 0 ] , p [ 3 ] ) ; //<S2SV> v [ 0 ] = _mm_unpacklo_epi16 ( u [ 0 ] , u [ 1 ] ) ; //<S2SV> v [ 1 ] = _mm_unpackhi_epi16 ( u [ 0 ] , u [ 1 ] ) ; //<S2SV> v [ 2 ] = _mm_unpacklo_epi16 ( u [ 2 ] , u [ 3 ] ) ; //<S2SV> v [ 3 ] = _mm_unpackhi_epi16 ( u [ 2 ] , u [ 3 ] ) ; //<S2SV> u [ 0 ] = _mm_madd_epi16 ( v [ 0 ] , k__cospi_p16_p16 ) ; //<S2SV> u [ 1 ] = _mm_madd_epi16 ( v [ 1 ] , k__cospi_p16_p16 ) ; //<S2SV> u [ 2 ] = _mm_madd_epi16 ( v [ 0 ] , k__cospi_p16_m16 ) ; //<S2SV> u [ 3 ] = _mm_madd_epi16 ( v [ 1 ] , k__cospi_p16_m16 ) ; //<S2SV> u [ 4 ] = _mm_madd_epi16 ( v [ 2 ] , k__cospi_p24_p08 ) ; //<S2SV> u [ 5 ] = _mm_madd_epi16 ( v [ 3 ] , k__cospi_p24_p08 ) ; //<S2SV> u [ 6 ] = _mm_madd_epi16 ( v [ 2 ] , k__cospi_m08_p24 ) ; //<S2SV> u [ 7 ] = _mm_madd_epi16 ( v [ 3 ] , k__cospi_m08_p24 ) ; //<S2SV> v [ 0 ] = _mm_add_epi32 ( u [ 0 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 1 ] = _mm_add_epi32 ( u [ 1 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 2 ] = _mm_add_epi32 ( u [ 2 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 3 ] = _mm_add_epi32 ( u [ 3 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 4 ] = _mm_add_epi32 ( u [ 4 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 5 ] = _mm_add_epi32 ( u [ 5 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 6 ] = _mm_add_epi32 ( u [ 6 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 7 ] = _mm_add_epi32 ( u [ 7 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 0 ] = _mm_srai_epi32 ( v [ 0 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 1 ] = _mm_srai_epi32 ( v [ 1 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 2 ] = _mm_srai_epi32 ( v [ 2 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 3 ] = _mm_srai_epi32 ( v [ 3 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 4 ] = _mm_srai_epi32 ( v [ 4 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 5 ] = _mm_srai_epi32 ( v [ 5 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 6 ] = _mm_srai_epi32 ( v [ 6 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 7 ] = _mm_srai_epi32 ( v [ 7 ] , DCT_CONST_BITS ) ; //<S2SV> in [ 0 ] = _mm_packs_epi32 ( u [ 0 ] , u [ 1 ] ) ; //<S2SV> in [ 4 ] = _mm_packs_epi32 ( u [ 4 ] , u [ 5 ] ) ; //<S2SV> in [ 8 ] = _mm_packs_epi32 ( u [ 2 ] , u [ 3 ] ) ; //<S2SV> in [ 12 ] = _mm_packs_epi32 ( u [ 6 ] , u [ 7 ] ) ; //<S2SV> u [ 0 ] = _mm_unpacklo_epi16 ( p [ 5 ] , p [ 6 ] ) ; //<S2SV> u [ 1 ] = _mm_unpackhi_epi16 ( p [ 5 ] , p [ 6 ] ) ; //<S2SV> v [ 0 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_m16_p16 ) ; //<S2SV> v [ 1 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_m16_p16 ) ; //<S2SV> v [ 2 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_p16_p16 ) ; //<S2SV> v [ 3 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p16_p16 ) ; //<S2SV> u [ 0 ] = _mm_add_epi32 ( v [ 0 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 1 ] = _mm_add_epi32 ( v [ 1 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 2 ] = _mm_add_epi32 ( v [ 2 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 3 ] = _mm_add_epi32 ( v [ 3 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 0 ] = _mm_srai_epi32 ( u [ 0 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 1 ] = _mm_srai_epi32 ( u [ 1 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 2 ] = _mm_srai_epi32 ( u [ 2 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 3 ] = _mm_srai_epi32 ( u [ 3 ] , DCT_CONST_BITS ) ; //<S2SV> u [ 0 ] = _mm_packs_epi32 ( v [ 0 ] , v [ 1 ] ) ; //<S2SV> u [ 1 ] = _mm_packs_epi32 ( v [ 2 ] , v [ 3 ] ) ; //<S2SV> t [ 0 ] = _mm_add_epi16 ( p [ 4 ] , u [ 0 ] ) ; //<S2SV> t [ 1 ] = _mm_sub_epi16 ( p [ 4 ] , u [ 0 ] ) ; //<S2SV> t [ 2 ] = _mm_sub_epi16 ( p [ 7 ] , u [ 1 ] ) ; //<S2SV> t [ 3 ] = _mm_add_epi16 ( p [ 7 ] , u [ 1 ] ) ; //<S2SV> u [ 0 ] = _mm_unpacklo_epi16 ( t [ 0 ] , t [ 3 ] ) ; //<S2SV> u [ 1 ] = _mm_unpackhi_epi16 ( t [ 0 ] , t [ 3 ] ) ; //<S2SV> u [ 2 ] = _mm_unpacklo_epi16 ( t [ 1 ] , t [ 2 ] ) ; //<S2SV> u [ 3 ] = _mm_unpackhi_epi16 ( t [ 1 ] , t [ 2 ] ) ; //<S2SV> v [ 0 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_p28_p04 ) ; //<S2SV> v [ 1 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p28_p04 ) ; //<S2SV> v [ 2 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_p12_p20 ) ; //<S2SV> v [ 3 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_p12_p20 ) ; //<S2SV> v [ 4 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_m20_p12 ) ; //<S2SV> v [ 5 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_m20_p12 ) ; //<S2SV> v [ 6 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_m04_p28 ) ; //<S2SV> v [ 7 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_m04_p28 ) ; //<S2SV> u [ 0 ] = _mm_add_epi32 ( v [ 0 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 1 ] = _mm_add_epi32 ( v [ 1 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 2 ] = _mm_add_epi32 ( v [ 2 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 3 ] = _mm_add_epi32 ( v [ 3 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 4 ] = _mm_add_epi32 ( v [ 4 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 5 ] = _mm_add_epi32 ( v [ 5 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 6 ] = _mm_add_epi32 ( v [ 6 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 7 ] = _mm_add_epi32 ( v [ 7 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 0 ] = _mm_srai_epi32 ( u [ 0 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 1 ] = _mm_srai_epi32 ( u [ 1 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 2 ] = _mm_srai_epi32 ( u [ 2 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 3 ] = _mm_srai_epi32 ( u [ 3 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 4 ] = _mm_srai_epi32 ( u [ 4 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 5 ] = _mm_srai_epi32 ( u [ 5 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 6 ] = _mm_srai_epi32 ( u [ 6 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 7 ] = _mm_srai_epi32 ( u [ 7 ] , DCT_CONST_BITS ) ; //<S2SV> in [ 2 ] = _mm_packs_epi32 ( v [ 0 ] , v [ 1 ] ) ; //<S2SV> in [ 6 ] = _mm_packs_epi32 ( v [ 4 ] , v [ 5 ] ) ; //<S2SV> in [ 10 ] = _mm_packs_epi32 ( v [ 2 ] , v [ 3 ] ) ; //<S2SV> in [ 14 ] = _mm_packs_epi32 ( v [ 6 ] , v [ 7 ] ) ; //<S2SV> u [ 0 ] = _mm_unpacklo_epi16 ( s [ 2 ] , s [ 5 ] ) ; //<S2SV> u [ 1 ] = _mm_unpackhi_epi16 ( s [ 2 ] , s [ 5 ] ) ; //<S2SV> u [ 2 ] = _mm_unpacklo_epi16 ( s [ 3 ] , s [ 4 ] ) ; //<S2SV> u [ 3 ] = _mm_unpackhi_epi16 ( s [ 3 ] , s [ 4 ] ) ; //<S2SV> v [ 0 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_m16_p16 ) ; //<S2SV> v [ 1 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_m16_p16 ) ; //<S2SV> v [ 2 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_m16_p16 ) ; //<S2SV> v [ 3 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_m16_p16 ) ; //<S2SV> v [ 4 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_p16_p16 ) ; //<S2SV> v [ 5 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_p16_p16 ) ; //<S2SV> v [ 6 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_p16_p16 ) ; //<S2SV> v [ 7 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p16_p16 ) ; //<S2SV> u [ 0 ] = _mm_add_epi32 ( v [ 0 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 1 ] = _mm_add_epi32 ( v [ 1 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 2 ] = _mm_add_epi32 ( v [ 2 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 3 ] = _mm_add_epi32 ( v [ 3 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 4 ] = _mm_add_epi32 ( v [ 4 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 5 ] = _mm_add_epi32 ( v [ 5 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 6 ] = _mm_add_epi32 ( v [ 6 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 7 ] = _mm_add_epi32 ( v [ 7 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 0 ] = _mm_srai_epi32 ( u [ 0 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 1 ] = _mm_srai_epi32 ( u [ 1 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 2 ] = _mm_srai_epi32 ( u [ 2 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 3 ] = _mm_srai_epi32 ( u [ 3 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 4 ] = _mm_srai_epi32 ( u [ 4 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 5 ] = _mm_srai_epi32 ( u [ 5 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 6 ] = _mm_srai_epi32 ( u [ 6 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 7 ] = _mm_srai_epi32 ( u [ 7 ] , DCT_CONST_BITS ) ; //<S2SV> t [ 2 ] = _mm_packs_epi32 ( v [ 0 ] , v [ 1 ] ) ; //<S2SV> t [ 3 ] = _mm_packs_epi32 ( v [ 2 ] , v [ 3 ] ) ; //<S2SV> t [ 4 ] = _mm_packs_epi32 ( v [ 4 ] , v [ 5 ] ) ; //<S2SV> t [ 5 ] = _mm_packs_epi32 ( v [ 6 ] , v [ 7 ] ) ; //<S2SV> p [ 0 ] = _mm_add_epi16 ( s [ 0 ] , t [ 3 ] ) ; //<S2SV> p [ 1 ] = _mm_add_epi16 ( s [ 1 ] , t [ 2 ] ) ; //<S2SV> p [ 2 ] = _mm_sub_epi16 ( s [ 1 ] , t [ 2 ] ) ; //<S2SV> p [ 3 ] = _mm_sub_epi16 ( s [ 0 ] , t [ 3 ] ) ; //<S2SV> p [ 4 ] = _mm_sub_epi16 ( s [ 7 ] , t [ 4 ] ) ; //<S2SV> p [ 5 ] = _mm_sub_epi16 ( s [ 6 ] , t [ 5 ] ) ; //<S2SV> p [ 6 ] = _mm_add_epi16 ( s [ 6 ] , t [ 5 ] ) ; //<S2SV> p [ 7 ] = _mm_add_epi16 ( s [ 7 ] , t [ 4 ] ) ; //<S2SV> u [ 0 ] = _mm_unpacklo_epi16 ( p [ 1 ] , p [ 6 ] ) ; //<S2SV> u [ 1 ] = _mm_unpackhi_epi16 ( p [ 1 ] , p [ 6 ] ) ; //<S2SV> u [ 2 ] = _mm_unpacklo_epi16 ( p [ 2 ] , p [ 5 ] ) ; //<S2SV> u [ 3 ] = _mm_unpackhi_epi16 ( p [ 2 ] , p [ 5 ] ) ; //<S2SV> v [ 0 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_m08_p24 ) ; //<S2SV> v [ 1 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_m08_p24 ) ; //<S2SV> v [ 2 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_p24_p08 ) ; //<S2SV> v [ 3 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_p24_p08 ) ; //<S2SV> v [ 4 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_p08_m24 ) ; //<S2SV> v [ 5 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_p08_m24 ) ; //<S2SV> v [ 6 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_p24_p08 ) ; //<S2SV> v [ 7 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p24_p08 ) ; //<S2SV> u [ 0 ] = _mm_add_epi32 ( v [ 0 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 1 ] = _mm_add_epi32 ( v [ 1 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 2 ] = _mm_add_epi32 ( v [ 2 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 3 ] = _mm_add_epi32 ( v [ 3 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 4 ] = _mm_add_epi32 ( v [ 4 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 5 ] = _mm_add_epi32 ( v [ 5 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 6 ] = _mm_add_epi32 ( v [ 6 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 7 ] = _mm_add_epi32 ( v [ 7 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 0 ] = _mm_srai_epi32 ( u [ 0 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 1 ] = _mm_srai_epi32 ( u [ 1 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 2 ] = _mm_srai_epi32 ( u [ 2 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 3 ] = _mm_srai_epi32 ( u [ 3 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 4 ] = _mm_srai_epi32 ( u [ 4 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 5 ] = _mm_srai_epi32 ( u [ 5 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 6 ] = _mm_srai_epi32 ( u [ 6 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 7 ] = _mm_srai_epi32 ( u [ 7 ] , DCT_CONST_BITS ) ; //<S2SV> t [ 1 ] = _mm_packs_epi32 ( v [ 0 ] , v [ 1 ] ) ; //<S2SV> t [ 2 ] = _mm_packs_epi32 ( v [ 2 ] , v [ 3 ] ) ; //<S2SV> t [ 5 ] = _mm_packs_epi32 ( v [ 4 ] , v [ 5 ] ) ; //<S2SV> t [ 6 ] = _mm_packs_epi32 ( v [ 6 ] , v [ 7 ] ) ; //<S2SV> s [ 0 ] = _mm_add_epi16 ( p [ 0 ] , t [ 1 ] ) ; //<S2SV> s [ 1 ] = _mm_sub_epi16 ( p [ 0 ] , t [ 1 ] ) ; //<S2SV> s [ 2 ] = _mm_add_epi16 ( p [ 3 ] , t [ 2 ] ) ; //<S2SV> s [ 3 ] = _mm_sub_epi16 ( p [ 3 ] , t [ 2 ] ) ; //<S2SV> s [ 4 ] = _mm_sub_epi16 ( p [ 4 ] , t [ 5 ] ) ; //<S2SV> s [ 5 ] = _mm_add_epi16 ( p [ 4 ] , t [ 5 ] ) ; //<S2SV> s [ 6 ] = _mm_sub_epi16 ( p [ 7 ] , t [ 6 ] ) ; //<S2SV> s [ 7 ] = _mm_add_epi16 ( p [ 7 ] , t [ 6 ] ) ; //<S2SV> u [ 0 ] = _mm_unpacklo_epi16 ( s [ 0 ] , s [ 7 ] ) ; //<S2SV> u [ 1 ] = _mm_unpackhi_epi16 ( s [ 0 ] , s [ 7 ] ) ; //<S2SV> u [ 2 ] = _mm_unpacklo_epi16 ( s [ 1 ] , s [ 6 ] ) ; //<S2SV> u [ 3 ] = _mm_unpackhi_epi16 ( s [ 1 ] , s [ 6 ] ) ; //<S2SV> u [ 4 ] = _mm_unpacklo_epi16 ( s [ 2 ] , s [ 5 ] ) ; //<S2SV> u [ 5 ] = _mm_unpackhi_epi16 ( s [ 2 ] , s [ 5 ] ) ; //<S2SV> u [ 6 ] = _mm_unpacklo_epi16 ( s [ 3 ] , s [ 4 ] ) ; //<S2SV> u [ 7 ] = _mm_unpackhi_epi16 ( s [ 3 ] , s [ 4 ] ) ; //<S2SV> v [ 0 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_p30_p02 ) ; //<S2SV> v [ 1 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p30_p02 ) ; //<S2SV> v [ 2 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_p14_p18 ) ; //<S2SV> v [ 3 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_p14_p18 ) ; //<S2SV> v [ 4 ] = _mm_madd_epi16 ( u [ 4 ] , k__cospi_p22_p10 ) ; //<S2SV> v [ 5 ] = _mm_madd_epi16 ( u [ 5 ] , k__cospi_p22_p10 ) ; //<S2SV> v [ 6 ] = _mm_madd_epi16 ( u [ 6 ] , k__cospi_p06_p26 ) ; //<S2SV> v [ 7 ] = _mm_madd_epi16 ( u [ 7 ] , k__cospi_p06_p26 ) ; //<S2SV> v [ 8 ] = _mm_madd_epi16 ( u [ 6 ] , k__cospi_m26_p06 ) ; //<S2SV> v [ 9 ] = _mm_madd_epi16 ( u [ 7 ] , k__cospi_m26_p06 ) ; //<S2SV> v [ 10 ] = _mm_madd_epi16 ( u [ 4 ] , k__cospi_m10_p22 ) ; //<S2SV> v [ 11 ] = _mm_madd_epi16 ( u [ 5 ] , k__cospi_m10_p22 ) ; //<S2SV> v [ 12 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_m18_p14 ) ; //<S2SV> v [ 13 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_m18_p14 ) ; //<S2SV> v [ 14 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_m02_p30 ) ; //<S2SV> v [ 15 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_m02_p30 ) ; //<S2SV> u [ 0 ] = _mm_add_epi32 ( v [ 0 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 1 ] = _mm_add_epi32 ( v [ 1 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 2 ] = _mm_add_epi32 ( v [ 2 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 3 ] = _mm_add_epi32 ( v [ 3 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 4 ] = _mm_add_epi32 ( v [ 4 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 5 ] = _mm_add_epi32 ( v [ 5 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 6 ] = _mm_add_epi32 ( v [ 6 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 7 ] = _mm_add_epi32 ( v [ 7 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 8 ] = _mm_add_epi32 ( v [ 8 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 9 ] = _mm_add_epi32 ( v [ 9 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 10 ] = _mm_add_epi32 ( v [ 10 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 11 ] = _mm_add_epi32 ( v [ 11 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 12 ] = _mm_add_epi32 ( v [ 12 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 13 ] = _mm_add_epi32 ( v [ 13 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 14 ] = _mm_add_epi32 ( v [ 14 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> u [ 15 ] = _mm_add_epi32 ( v [ 15 ] , k__DCT_CONST_ROUNDING ) ; //<S2SV> v [ 0 ] = _mm_srai_epi32 ( u [ 0 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 1 ] = _mm_srai_epi32 ( u [ 1 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 2 ] = _mm_srai_epi32 ( u [ 2 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 3 ] = _mm_srai_epi32 ( u [ 3 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 4 ] = _mm_srai_epi32 ( u [ 4 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 5 ] = _mm_srai_epi32 ( u [ 5 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 6 ] = _mm_srai_epi32 ( u [ 6 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 7 ] = _mm_srai_epi32 ( u [ 7 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 8 ] = _mm_srai_epi32 ( u [ 8 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 9 ] = _mm_srai_epi32 ( u [ 9 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 10 ] = _mm_srai_epi32 ( u [ 10 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 11 ] = _mm_srai_epi32 ( u [ 11 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 12 ] = _mm_srai_epi32 ( u [ 12 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 13 ] = _mm_srai_epi32 ( u [ 13 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 14 ] = _mm_srai_epi32 ( u [ 14 ] , DCT_CONST_BITS ) ; //<S2SV> v [ 15 ] = _mm_srai_epi32 ( u [ 15 ] , DCT_CONST_BITS ) ; //<S2SV> in [ 1 ] = _mm_packs_epi32 ( v [ 0 ] , v [ 1 ] ) ; //<S2SV> in [ 9 ] = _mm_packs_epi32 ( v [ 2 ] , v [ 3 ] ) ; //<S2SV> in [ 5 ] = _mm_packs_epi32 ( v [ 4 ] , v [ 5 ] ) ; //<S2SV> in [ 13 ] = _mm_packs_epi32 ( v [ 6 ] , v [ 7 ] ) ; //<S2SV> in [ 3 ] = _mm_packs_epi32 ( v [ 8 ] , v [ 9 ] ) ; //<S2SV> in [ 11 ] = _mm_packs_epi32 ( v [ 10 ] , v [ 11 ] ) ; //<S2SV> in [ 7 ] = _mm_packs_epi32 ( v [ 12 ] , v [ 13 ] ) ; //<S2SV> in [ 15 ] = _mm_packs_epi32 ( v [ 14 ] , v [ 15 ] ) ; //<S2SV> } //<S2SV> 