static vpx_codec_err_t parse_options ( SvcContext * svc_ctx , const char * options ) { //<S2SV> char * input_string ; //<S2SV> char * option_name ; //<S2SV> char * option_value ; //<S2SV> char * input_ptr ; //<S2SV> SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; //<S2SV> vpx_codec_err_t res = VPX_CODEC_OK ; //<S2SV> int i , alt_ref_enabled = 0 ; //<S2SV> if ( options == NULL ) return VPX_CODEC_OK ; //<S2SV> input_string = strdup ( options ) ; //<S2SV> option_name = strtok_r ( input_string , "=" , & input_ptr ) ; //<S2SV> while ( option_name != NULL ) { //<S2SV> option_value = strtok_r ( NULL , "<S2SV_blank>" , & input_ptr ) ; //<S2SV> if ( option_value == NULL ) { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , "option<S2SV_blank>missing<S2SV_blank>value:<S2SV_blank>%s\\n" , //<S2SV> option_name ) ; //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( strcmp ( "spatial-layers" , option_name ) == 0 ) { //<S2SV> svc_ctx -> spatial_layers = atoi ( option_value ) ; //<S2SV> } else if ( strcmp ( "temporal-layers" , option_name ) == 0 ) { //<S2SV> svc_ctx -> temporal_layers = atoi ( option_value ) ; //<S2SV> } else if ( strcmp ( "scale-factors" , option_name ) == 0 ) { //<S2SV> res = parse_layer_options_from_string ( svc_ctx , SCALE_FACTOR , option_value , //<S2SV> si -> svc_params . scaling_factor_num , //<S2SV> si -> svc_params . scaling_factor_den ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> } else if ( strcmp ( "max-quantizers" , option_name ) == 0 ) { //<S2SV> res = parse_layer_options_from_string ( svc_ctx , QUANTIZER , option_value , //<S2SV> si -> svc_params . max_quantizers , //<S2SV> NULL ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> } else if ( strcmp ( "min-quantizers" , option_name ) == 0 ) { //<S2SV> res = parse_layer_options_from_string ( svc_ctx , QUANTIZER , option_value , //<S2SV> si -> svc_params . min_quantizers , //<S2SV> NULL ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> } else if ( strcmp ( "auto-alt-refs" , option_name ) == 0 ) { //<S2SV> res = parse_layer_options_from_string ( svc_ctx , AUTO_ALT_REF , option_value , //<S2SV> si -> enable_auto_alt_ref , NULL ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> } else if ( strcmp ( "bitrates" , option_name ) == 0 ) { //<S2SV> res = parse_layer_options_from_string ( svc_ctx , BITRATE , option_value , //<S2SV> si -> bitrates , NULL ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> } else if ( strcmp ( "multi-frame-contexts" , option_name ) == 0 ) { //<S2SV> si -> use_multiple_frame_contexts = atoi ( option_value ) ; //<S2SV> } else { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , "invalid<S2SV_blank>option:<S2SV_blank>%s\\n" , option_name ) ; //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> break ; //<S2SV> } //<S2SV> option_name = strtok_r ( NULL , "=" , & input_ptr ) ; //<S2SV> } //<S2SV> free ( input_string ) ; //<S2SV> for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) { //<S2SV> if ( si -> svc_params . max_quantizers [ i ] > MAX_QUANTIZER || //<S2SV> si -> svc_params . max_quantizers [ i ] < 0 || //<S2SV> si -> svc_params . min_quantizers [ i ] > si -> svc_params . max_quantizers [ i ] || //<S2SV> si -> svc_params . min_quantizers [ i ] < 0 ) //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> if ( si -> use_multiple_frame_contexts && //<S2SV> ( svc_ctx -> spatial_layers > 3 || //<S2SV> svc_ctx -> spatial_layers * svc_ctx -> temporal_layers > 4 ) ) //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) //<S2SV> alt_ref_enabled += si -> enable_auto_alt_ref [ i ] ; //<S2SV> if ( alt_ref_enabled > REF_FRAMES - svc_ctx -> spatial_layers ) { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , //<S2SV> "svc:<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>ref:<S2SV_blank>Maxinum<S2SV_blank>%d(REF_FRAMES<S2SV_blank>-<S2SV_blank>layers)<S2SV_blank>layers<S2SV_blank>could" //<S2SV> "enabled<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>reference<S2SV_blank>frame,<S2SV_blank>but<S2SV_blank>%<S2SV_blank>layers<S2SV_blank>are<S2SV_blank>enabled\\n" , //<S2SV> REF_FRAMES - svc_ctx -> spatial_layers , alt_ref_enabled ) ; //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 