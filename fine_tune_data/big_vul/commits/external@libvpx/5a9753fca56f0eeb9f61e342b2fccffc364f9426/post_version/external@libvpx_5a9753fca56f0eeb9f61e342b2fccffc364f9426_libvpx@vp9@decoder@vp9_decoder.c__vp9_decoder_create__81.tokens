VP9Decoder * vp9_decoder_create ( BufferPool * const pool ) { //<S2SV> VP9Decoder * volatile const pbi = vpx_memalign ( 32 , sizeof ( * pbi ) ) ; //<S2SV> VP9_COMMON * volatile const cm = pbi ? & pbi -> common : NULL ; //<S2SV> if ( ! cm ) //<S2SV> return NULL ; //<S2SV> vp9_zero ( * pbi ) ; //<S2SV> if ( setjmp ( cm -> error . jmp ) ) { //<S2SV> cm -> error . setjmp = 0 ; //<S2SV> vp9_decoder_remove ( pbi ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> cm -> error . setjmp = 1 ; //<S2SV> CHECK_MEM_ERROR ( cm , cm -> fc , //<S2SV> ( FRAME_CONTEXT * ) vpx_calloc ( 1 , sizeof ( * cm -> fc ) ) ) ; //<S2SV> CHECK_MEM_ERROR ( cm , cm -> frame_contexts , //<S2SV> ( FRAME_CONTEXT * ) vpx_calloc ( FRAME_CONTEXTS , //<S2SV> sizeof ( * cm -> frame_contexts ) ) ) ; //<S2SV> pbi -> need_resync = 1 ; //<S2SV> once ( initialize_dec ) ; //<S2SV> memset ( & cm -> ref_frame_map , - 1 , sizeof ( cm -> ref_frame_map ) ) ; //<S2SV> memset ( & cm -> next_ref_frame_map , - 1 , sizeof ( cm -> next_ref_frame_map ) ) ; //<S2SV> cm -> current_video_frame = 0 ; //<S2SV> pbi -> ready_for_new_data = 1 ; //<S2SV> pbi -> common . buffer_pool = pool ; //<S2SV> cm -> bit_depth = VPX_BITS_8 ; //<S2SV> cm -> dequant_bit_depth = VPX_BITS_8 ; //<S2SV> cm -> alloc_mi = vp9_dec_alloc_mi ; //<S2SV> cm -> free_mi = vp9_dec_free_mi ; //<S2SV> cm -> setup_mi = vp9_dec_setup_mi ; //<S2SV> vp9_loop_filter_init ( cm ) ; //<S2SV> cm -> error . setjmp = 0 ; //<S2SV> vpx_get_worker_interface ( ) -> init ( & pbi -> lf_worker ) ; //<S2SV> return pbi ; //<S2SV> } //<S2SV> 