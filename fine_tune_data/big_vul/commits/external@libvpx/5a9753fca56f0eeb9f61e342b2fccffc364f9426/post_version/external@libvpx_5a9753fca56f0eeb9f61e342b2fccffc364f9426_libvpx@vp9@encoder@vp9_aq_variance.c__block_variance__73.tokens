static unsigned int block_variance ( VP9_COMP * cpi , MACROBLOCK * x , //<S2SV> BLOCK_SIZE bs ) { //<S2SV> MACROBLOCKD * xd = & x -> e_mbd ; //<S2SV> unsigned int var , sse ; //<S2SV> int right_overflow = ( xd -> mb_to_right_edge < 0 ) ? //<S2SV> ( ( - xd -> mb_to_right_edge ) >> 3 ) : 0 ; //<S2SV> int bottom_overflow = ( xd -> mb_to_bottom_edge < 0 ) ? //<S2SV> ( ( - xd -> mb_to_bottom_edge ) >> 3 ) : 0 ; //<S2SV> if ( right_overflow || bottom_overflow ) { //<S2SV> const int bw = 8 * num_8x8_blocks_wide_lookup [ bs ] - right_overflow ; //<S2SV> const int bh = 8 * num_8x8_blocks_high_lookup [ bs ] - bottom_overflow ; //<S2SV> int avg ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> aq_highbd_8_variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , //<S2SV> CONVERT_TO_BYTEPTR ( vp9_highbd_64_zeros ) , 0 , bw , bh , //<S2SV> & sse , & avg ) ; //<S2SV> sse >>= 2 * ( xd -> bd - 8 ) ; //<S2SV> avg >>= ( xd -> bd - 8 ) ; //<S2SV> } else { //<S2SV> aq_variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , //<S2SV> vp9_64_zeros , 0 , bw , bh , & sse , & avg ) ; //<S2SV> } //<S2SV> # else //<S2SV> aq_variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , //<S2SV> vp9_64_zeros , 0 , bw , bh , & sse , & avg ) ; //<S2SV> # endif //<S2SV> var = sse - ( ( ( int64_t ) avg * avg ) / ( bw * bh ) ) ; //<S2SV> return ( 256 * var ) / ( bw * bh ) ; //<S2SV> } else { //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , //<S2SV> x -> plane [ 0 ] . src . stride , //<S2SV> CONVERT_TO_BYTEPTR ( vp9_highbd_64_zeros ) , //<S2SV> 0 , & sse ) ; //<S2SV> } else { //<S2SV> var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , //<S2SV> x -> plane [ 0 ] . src . stride , //<S2SV> vp9_64_zeros , 0 , & sse ) ; //<S2SV> } //<S2SV> # else //<S2SV> var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , //<S2SV> x -> plane [ 0 ] . src . stride , //<S2SV> vp9_64_zeros , 0 , & sse ) ; //<S2SV> # endif //<S2SV> return ( 256 * var ) >> num_pels_log2_lookup [ bs ] ; //<S2SV> } //<S2SV> } //<S2SV> 