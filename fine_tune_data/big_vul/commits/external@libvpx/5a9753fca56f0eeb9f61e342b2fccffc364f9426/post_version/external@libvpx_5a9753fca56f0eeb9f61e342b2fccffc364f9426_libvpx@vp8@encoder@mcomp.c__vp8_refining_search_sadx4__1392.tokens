int vp8_refining_search_sadx4 ( MACROBLOCK * x , BLOCK * b , BLOCKD * d , //<S2SV> int_mv * ref_mv , int error_per_bit , //<S2SV> int search_range , vp8_variance_fn_ptr_t * fn_ptr , //<S2SV> int * mvcost [ 2 ] , int_mv * center_mv ) //<S2SV> { //<S2SV> MV neighbors [ 4 ] = { { - 1 , 0 } , { 0 , - 1 } , { 0 , 1 } , { 1 , 0 } } ; //<S2SV> int i , j ; //<S2SV> short this_row_offset , this_col_offset ; //<S2SV> int what_stride = b -> src_stride ; //<S2SV> int pre_stride = x -> e_mbd . pre . y_stride ; //<S2SV> unsigned char * base_pre = x -> e_mbd . pre . y_buffer ; //<S2SV> int in_what_stride = pre_stride ; //<S2SV> unsigned char * what = ( * ( b -> base_src ) + b -> src ) ; //<S2SV> unsigned char * best_address = ( unsigned char * ) ( base_pre + d -> offset + //<S2SV> ( ref_mv -> as_mv . row * pre_stride ) + ref_mv -> as_mv . col ) ; //<S2SV> unsigned char * check_here ; //<S2SV> int_mv this_mv ; //<S2SV> unsigned int bestsad ; //<S2SV> unsigned int thissad ; //<S2SV> int * mvsadcost [ 2 ] ; //<S2SV> int_mv fcenter_mv ; //<S2SV> mvsadcost [ 0 ] = x -> mvsadcost [ 0 ] ; //<S2SV> mvsadcost [ 1 ] = x -> mvsadcost [ 1 ] ; //<S2SV> fcenter_mv . as_mv . row = center_mv -> as_mv . row >> 3 ; //<S2SV> fcenter_mv . as_mv . col = center_mv -> as_mv . col >> 3 ; //<S2SV> bestsad = fn_ptr -> sdf ( what , what_stride , best_address , in_what_stride ) //<S2SV> + mvsad_err_cost ( ref_mv , & fcenter_mv , mvsadcost , error_per_bit ) ; //<S2SV> for ( i = 0 ; i < search_range ; i ++ ) //<S2SV> { //<S2SV> int best_site = - 1 ; //<S2SV> int all_in = 1 ; //<S2SV> all_in &= ( ( ref_mv -> as_mv . row - 1 ) > x -> mv_row_min ) ; //<S2SV> all_in &= ( ( ref_mv -> as_mv . row + 1 ) < x -> mv_row_max ) ; //<S2SV> all_in &= ( ( ref_mv -> as_mv . col - 1 ) > x -> mv_col_min ) ; //<S2SV> all_in &= ( ( ref_mv -> as_mv . col + 1 ) < x -> mv_col_max ) ; //<S2SV> if ( all_in ) //<S2SV> { //<S2SV> unsigned int sad_array [ 4 ] ; //<S2SV> const unsigned char * block_offset [ 4 ] ; //<S2SV> block_offset [ 0 ] = best_address - in_what_stride ; //<S2SV> block_offset [ 1 ] = best_address - 1 ; //<S2SV> block_offset [ 2 ] = best_address + 1 ; //<S2SV> block_offset [ 3 ] = best_address + in_what_stride ; //<S2SV> fn_ptr -> sdx4df ( what , what_stride , block_offset , in_what_stride , sad_array ) ; //<S2SV> for ( j = 0 ; j < 4 ; j ++ ) //<S2SV> { //<S2SV> if ( sad_array [ j ] < bestsad ) //<S2SV> { //<S2SV> this_mv . as_mv . row = ref_mv -> as_mv . row + neighbors [ j ] . row ; //<S2SV> this_mv . as_mv . col = ref_mv -> as_mv . col + neighbors [ j ] . col ; //<S2SV> sad_array [ j ] += mvsad_err_cost ( & this_mv , & fcenter_mv , mvsadcost , error_per_bit ) ; //<S2SV> if ( sad_array [ j ] < bestsad ) //<S2SV> { //<S2SV> bestsad = sad_array [ j ] ; //<S2SV> best_site = j ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> for ( j = 0 ; j < 4 ; j ++ ) //<S2SV> { //<S2SV> this_row_offset = ref_mv -> as_mv . row + neighbors [ j ] . row ; //<S2SV> this_col_offset = ref_mv -> as_mv . col + neighbors [ j ] . col ; //<S2SV> if ( ( this_col_offset > x -> mv_col_min ) && ( this_col_offset < x -> mv_col_max ) && //<S2SV> ( this_row_offset > x -> mv_row_min ) && ( this_row_offset < x -> mv_row_max ) ) //<S2SV> { //<S2SV> check_here = ( neighbors [ j ] . row ) * in_what_stride + neighbors [ j ] . col + best_address ; //<S2SV> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> this_mv . as_mv . row = this_row_offset ; //<S2SV> this_mv . as_mv . col = this_col_offset ; //<S2SV> thissad += mvsad_err_cost ( & this_mv , & fcenter_mv , mvsadcost , error_per_bit ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> bestsad = thissad ; //<S2SV> best_site = j ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( best_site == - 1 ) //<S2SV> break ; //<S2SV> else //<S2SV> { //<S2SV> ref_mv -> as_mv . row += neighbors [ best_site ] . row ; //<S2SV> ref_mv -> as_mv . col += neighbors [ best_site ] . col ; //<S2SV> best_address += ( neighbors [ best_site ] . row ) * in_what_stride + neighbors [ best_site ] . col ; //<S2SV> } //<S2SV> } //<S2SV> this_mv . as_mv . row = ref_mv -> as_mv . row * 8 ; //<S2SV> this_mv . as_mv . col = ref_mv -> as_mv . col * 8 ; //<S2SV> return fn_ptr -> vf ( what , what_stride , best_address , in_what_stride , & thissad ) //<S2SV> + mv_err_cost ( & this_mv , center_mv , mvcost , x -> errorperbit ) ; //<S2SV> } //<S2SV> 