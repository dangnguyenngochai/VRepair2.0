static vpx_codec_err_t image2yuvconfig ( const vpx_image_t * img , //<S2SV> YV12_BUFFER_CONFIG * yv12 ) //<S2SV> { //<S2SV> const int y_w = img -> d_w ; //<S2SV> const int y_h = img -> d_h ; //<S2SV> const int uv_w = ( img -> d_w + 1 ) / 2 ; //<S2SV> const int uv_h = ( img -> d_h + 1 ) / 2 ; //<S2SV> vpx_codec_err_t res = VPX_CODEC_OK ; //<S2SV> yv12 -> y_buffer = img -> planes [ VPX_PLANE_Y ] ; //<S2SV> yv12 -> u_buffer = img -> planes [ VPX_PLANE_U ] ; //<S2SV> yv12 -> v_buffer = img -> planes [ VPX_PLANE_V ] ; //<S2SV> yv12 -> y_crop_width = y_w ; //<S2SV> yv12 -> y_crop_height = y_h ; //<S2SV> yv12 -> y_width = y_w ; //<S2SV> yv12 -> y_height = y_h ; //<S2SV> yv12 -> uv_crop_width = uv_w ; //<S2SV> yv12 -> uv_crop_height = uv_h ; //<S2SV> yv12 -> uv_width = uv_w ; //<S2SV> yv12 -> uv_height = uv_h ; //<S2SV> yv12 -> y_stride = img -> stride [ VPX_PLANE_Y ] ; //<S2SV> yv12 -> uv_stride = img -> stride [ VPX_PLANE_U ] ; //<S2SV> yv12 -> border = ( img -> stride [ VPX_PLANE_Y ] - img -> d_w ) / 2 ; //<S2SV> return res ; //<S2SV> } //<S2SV> 