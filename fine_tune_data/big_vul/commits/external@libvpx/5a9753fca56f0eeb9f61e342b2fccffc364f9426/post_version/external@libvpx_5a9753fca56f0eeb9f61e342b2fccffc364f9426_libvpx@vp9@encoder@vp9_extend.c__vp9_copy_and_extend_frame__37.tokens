void vp9_copy_and_extend_frame ( const YV12_BUFFER_CONFIG * src , //<S2SV> YV12_BUFFER_CONFIG * dst ) { //<S2SV> const int et_y = 16 ; //<S2SV> const int el_y = 16 ; //<S2SV> const int er_y = MAX ( src -> y_width + 16 , ALIGN_POWER_OF_TWO ( src -> y_width , 6 ) ) //<S2SV> - src -> y_crop_width ; //<S2SV> const int eb_y = MAX ( src -> y_height + 16 , ALIGN_POWER_OF_TWO ( src -> y_height , 6 ) ) //<S2SV> - src -> y_crop_height ; //<S2SV> const int uv_width_subsampling = ( src -> uv_width != src -> y_width ) ; //<S2SV> const int uv_height_subsampling = ( src -> uv_height != src -> y_height ) ; //<S2SV> const int et_uv = et_y >> uv_height_subsampling ; //<S2SV> const int el_uv = el_y >> uv_width_subsampling ; //<S2SV> const int eb_uv = eb_y >> uv_height_subsampling ; //<S2SV> const int er_uv = er_y >> uv_width_subsampling ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( src -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> highbd_copy_and_extend_plane ( src -> y_buffer , src -> y_stride , //<S2SV> dst -> y_buffer , dst -> y_stride , //<S2SV> src -> y_crop_width , src -> y_crop_height , //<S2SV> et_y , el_y , eb_y , er_y ) ; //<S2SV> highbd_copy_and_extend_plane ( src -> u_buffer , src -> uv_stride , //<S2SV> dst -> u_buffer , dst -> uv_stride , //<S2SV> src -> uv_crop_width , src -> uv_crop_height , //<S2SV> et_uv , el_uv , eb_uv , er_uv ) ; //<S2SV> highbd_copy_and_extend_plane ( src -> v_buffer , src -> uv_stride , //<S2SV> dst -> v_buffer , dst -> uv_stride , //<S2SV> src -> uv_crop_width , src -> uv_crop_height , //<S2SV> et_uv , el_uv , eb_uv , er_uv ) ; //<S2SV> return ; //<S2SV> } //<S2SV> # endif //<S2SV> copy_and_extend_plane ( src -> y_buffer , src -> y_stride , //<S2SV> dst -> y_buffer , dst -> y_stride , //<S2SV> src -> y_crop_width , src -> y_crop_height , //<S2SV> et_y , el_y , eb_y , er_y ) ; //<S2SV> copy_and_extend_plane ( src -> u_buffer , src -> uv_stride , //<S2SV> dst -> u_buffer , dst -> uv_stride , //<S2SV> src -> uv_crop_width , src -> uv_crop_height , //<S2SV> et_uv , el_uv , eb_uv , er_uv ) ; //<S2SV> copy_and_extend_plane ( src -> v_buffer , src -> uv_stride , //<S2SV> dst -> v_buffer , dst -> uv_stride , //<S2SV> src -> uv_crop_width , src -> uv_crop_height , //<S2SV> et_uv , el_uv , eb_uv , er_uv ) ; //<S2SV> } //<S2SV> 