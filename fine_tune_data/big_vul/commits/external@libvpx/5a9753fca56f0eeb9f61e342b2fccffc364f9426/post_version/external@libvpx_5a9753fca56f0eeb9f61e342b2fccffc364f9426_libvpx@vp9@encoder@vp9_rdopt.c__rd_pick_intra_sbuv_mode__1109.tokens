static int64_t rd_pick_intra_sbuv_mode ( VP9_COMP * cpi , MACROBLOCK * x , //<S2SV> PICK_MODE_CONTEXT * ctx , //<S2SV> int * rate , int * rate_tokenonly , //<S2SV> int64_t * distortion , int * skippable , //<S2SV> BLOCK_SIZE bsize , TX_SIZE max_tx_size ) { //<S2SV> MACROBLOCKD * xd = & x -> e_mbd ; //<S2SV> PREDICTION_MODE mode ; //<S2SV> PREDICTION_MODE mode_selected = DC_PRED ; //<S2SV> int64_t best_rd = INT64_MAX , this_rd ; //<S2SV> int this_rate_tokenonly , this_rate , s ; //<S2SV> int64_t this_distortion , this_sse ; //<S2SV> memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) ; //<S2SV> for ( mode = DC_PRED ; mode <= TM_PRED ; ++ mode ) { //<S2SV> if ( ! ( cpi -> sf . intra_uv_mode_mask [ max_tx_size ] & ( 1 << mode ) ) ) //<S2SV> continue ; //<S2SV> xd -> mi [ 0 ] -> mbmi . uv_mode = mode ; //<S2SV> if ( ! super_block_uvrd ( cpi , x , & this_rate_tokenonly , //<S2SV> & this_distortion , & s , & this_sse , bsize , best_rd ) ) //<S2SV> continue ; //<S2SV> this_rate = this_rate_tokenonly + //<S2SV> cpi -> intra_uv_mode_cost [ cpi -> common . frame_type ] [ mode ] ; //<S2SV> this_rd = RDCOST ( x -> rdmult , x -> rddiv , this_rate , this_distortion ) ; //<S2SV> if ( this_rd < best_rd ) { //<S2SV> mode_selected = mode ; //<S2SV> best_rd = this_rd ; //<S2SV> * rate = this_rate ; //<S2SV> * rate_tokenonly = this_rate_tokenonly ; //<S2SV> * distortion = this_distortion ; //<S2SV> * skippable = s ; //<S2SV> if ( ! x -> select_tx_size ) //<S2SV> swap_block_ptr ( x , ctx , 2 , 0 , 1 , MAX_MB_PLANE ) ; //<S2SV> } //<S2SV> } //<S2SV> xd -> mi [ 0 ] -> mbmi . uv_mode = mode_selected ; //<S2SV> return best_rd ; //<S2SV> } //<S2SV> 