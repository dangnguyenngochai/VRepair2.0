void vp9_fwht4x4_c ( const int16_t * input , tran_low_t * output , int stride ) { //<S2SV> int i ; //<S2SV> tran_high_t a1 , b1 , c1 , d1 , e1 ; //<S2SV> const int16_t * ip_pass0 = input ; //<S2SV> const tran_low_t * ip = NULL ; //<S2SV> tran_low_t * op = output ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) { //<S2SV> a1 = ip_pass0 [ 0 * stride ] ; //<S2SV> b1 = ip_pass0 [ 1 * stride ] ; //<S2SV> c1 = ip_pass0 [ 2 * stride ] ; //<S2SV> d1 = ip_pass0 [ 3 * stride ] ; //<S2SV> a1 += b1 ; //<S2SV> d1 = d1 - c1 ; //<S2SV> e1 = ( a1 - d1 ) >> 1 ; //<S2SV> b1 = e1 - b1 ; //<S2SV> c1 = e1 - c1 ; //<S2SV> a1 -= c1 ; //<S2SV> d1 += b1 ; //<S2SV> op [ 0 ] = ( tran_low_t ) a1 ; //<S2SV> op [ 4 ] = ( tran_low_t ) c1 ; //<S2SV> op [ 8 ] = ( tran_low_t ) d1 ; //<S2SV> op [ 12 ] = ( tran_low_t ) b1 ; //<S2SV> ip_pass0 ++ ; //<S2SV> op ++ ; //<S2SV> } //<S2SV> ip = output ; //<S2SV> op = output ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) { //<S2SV> a1 = ip [ 0 ] ; //<S2SV> b1 = ip [ 1 ] ; //<S2SV> c1 = ip [ 2 ] ; //<S2SV> d1 = ip [ 3 ] ; //<S2SV> a1 += b1 ; //<S2SV> d1 -= c1 ; //<S2SV> e1 = ( a1 - d1 ) >> 1 ; //<S2SV> b1 = e1 - b1 ; //<S2SV> c1 = e1 - c1 ; //<S2SV> a1 -= c1 ; //<S2SV> d1 += b1 ; //<S2SV> op [ 0 ] = ( tran_low_t ) ( a1 * UNIT_QUANT_FACTOR ) ; //<S2SV> op [ 1 ] = ( tran_low_t ) ( c1 * UNIT_QUANT_FACTOR ) ; //<S2SV> op [ 2 ] = ( tran_low_t ) ( d1 * UNIT_QUANT_FACTOR ) ; //<S2SV> op [ 3 ] = ( tran_low_t ) ( b1 * UNIT_QUANT_FACTOR ) ; //<S2SV> ip += 4 ; //<S2SV> op += 4 ; //<S2SV> } //<S2SV> } //<S2SV> 