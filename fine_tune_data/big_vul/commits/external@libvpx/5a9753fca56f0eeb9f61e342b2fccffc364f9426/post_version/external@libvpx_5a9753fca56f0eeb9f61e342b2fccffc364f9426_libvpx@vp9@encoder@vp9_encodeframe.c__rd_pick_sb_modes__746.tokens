static void rd_pick_sb_modes ( VP9_COMP * cpi , //<S2SV> TileDataEnc * tile_data , //<S2SV> MACROBLOCK * const x , //<S2SV> int mi_row , int mi_col , RD_COST * rd_cost , //<S2SV> BLOCK_SIZE bsize , PICK_MODE_CONTEXT * ctx , //<S2SV> int64_t best_rd ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> TileInfo * const tile_info = & tile_data -> tile_info ; //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> MB_MODE_INFO * mbmi ; //<S2SV> struct macroblock_plane * const p = x -> plane ; //<S2SV> struct macroblockd_plane * const pd = xd -> plane ; //<S2SV> const AQ_MODE aq_mode = cpi -> oxcf . aq_mode ; //<S2SV> int i , orig_rdmult ; //<S2SV> vpx_clear_system_state ( ) ; //<S2SV> x -> use_lp32x32fdct = 1 ; //<S2SV> set_offsets ( cpi , tile_info , x , mi_row , mi_col , bsize ) ; //<S2SV> mbmi = & xd -> mi [ 0 ] -> mbmi ; //<S2SV> mbmi -> sb_type = bsize ; //<S2SV> for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { //<S2SV> p [ i ] . coeff = ctx -> coeff_pbuf [ i ] [ 0 ] ; //<S2SV> p [ i ] . qcoeff = ctx -> qcoeff_pbuf [ i ] [ 0 ] ; //<S2SV> pd [ i ] . dqcoeff = ctx -> dqcoeff_pbuf [ i ] [ 0 ] ; //<S2SV> p [ i ] . eobs = ctx -> eobs_pbuf [ i ] [ 0 ] ; //<S2SV> } //<S2SV> ctx -> is_coded = 0 ; //<S2SV> ctx -> skippable = 0 ; //<S2SV> ctx -> pred_pixel_ready = 0 ; //<S2SV> x -> skip_recode = 0 ; //<S2SV> mbmi -> skip = 0 ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> x -> source_variance = //<S2SV> vp9_high_get_sby_perpixel_variance ( cpi , & x -> plane [ 0 ] . src , //<S2SV> bsize , xd -> bd ) ; //<S2SV> } else { //<S2SV> x -> source_variance = //<S2SV> vp9_get_sby_perpixel_variance ( cpi , & x -> plane [ 0 ] . src , bsize ) ; //<S2SV> } //<S2SV> # else //<S2SV> x -> source_variance = //<S2SV> vp9_get_sby_perpixel_variance ( cpi , & x -> plane [ 0 ] . src , bsize ) ; //<S2SV> # endif //<S2SV> orig_rdmult = x -> rdmult ; //<S2SV> if ( aq_mode == VARIANCE_AQ ) { //<S2SV> const int energy = bsize <= BLOCK_16X16 ? x -> mb_energy //<S2SV> : vp9_block_energy ( cpi , x , bsize ) ; //<S2SV> if ( cm -> frame_type == KEY_FRAME || //<S2SV> cpi -> refresh_alt_ref_frame || //<S2SV> ( cpi -> refresh_golden_frame && ! cpi -> rc . is_src_frame_alt_ref ) ) { //<S2SV> mbmi -> segment_id = vp9_vaq_segment_id ( energy ) ; //<S2SV> } else { //<S2SV> const uint8_t * const map = cm -> seg . update_map ? cpi -> segmentation_map //<S2SV> : cm -> last_frame_seg_map ; //<S2SV> mbmi -> segment_id = get_segment_id ( cm , map , bsize , mi_row , mi_col ) ; //<S2SV> } //<S2SV> x -> rdmult = set_segment_rdmult ( cpi , x , mbmi -> segment_id ) ; //<S2SV> } else if ( aq_mode == COMPLEXITY_AQ ) { //<S2SV> x -> rdmult = set_segment_rdmult ( cpi , x , mbmi -> segment_id ) ; //<S2SV> } else if ( aq_mode == CYCLIC_REFRESH_AQ ) { //<S2SV> const uint8_t * const map = cm -> seg . update_map ? cpi -> segmentation_map //<S2SV> : cm -> last_frame_seg_map ; //<S2SV> if ( cyclic_refresh_segment_id_boosted ( //<S2SV> get_segment_id ( cm , map , bsize , mi_row , mi_col ) ) ) //<S2SV> x -> rdmult = vp9_cyclic_refresh_get_rdmult ( cpi -> cyclic_refresh ) ; //<S2SV> } //<S2SV> if ( frame_is_intra_only ( cm ) ) { //<S2SV> vp9_rd_pick_intra_mode_sb ( cpi , x , rd_cost , bsize , ctx , best_rd ) ; //<S2SV> } else { //<S2SV> if ( bsize >= BLOCK_8X8 ) { //<S2SV> if ( segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) ) //<S2SV> vp9_rd_pick_inter_mode_sb_seg_skip ( cpi , tile_data , x , rd_cost , bsize , //<S2SV> ctx , best_rd ) ; //<S2SV> else //<S2SV> vp9_rd_pick_inter_mode_sb ( cpi , tile_data , x , mi_row , mi_col , //<S2SV> rd_cost , bsize , ctx , best_rd ) ; //<S2SV> } else { //<S2SV> vp9_rd_pick_inter_mode_sub8x8 ( cpi , tile_data , x , mi_row , mi_col , //<S2SV> rd_cost , bsize , ctx , best_rd ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( rd_cost -> rate != INT_MAX ) && //<S2SV> ( aq_mode == COMPLEXITY_AQ ) && ( bsize >= BLOCK_16X16 ) && //<S2SV> ( cm -> frame_type == KEY_FRAME || //<S2SV> cpi -> refresh_alt_ref_frame || //<S2SV> ( cpi -> refresh_golden_frame && ! cpi -> rc . is_src_frame_alt_ref ) ) ) { //<S2SV> vp9_caq_select_segment ( cpi , x , bsize , mi_row , mi_col , rd_cost -> rate ) ; //<S2SV> } //<S2SV> x -> rdmult = orig_rdmult ; //<S2SV> if ( rd_cost -> rate == INT_MAX ) //<S2SV> rd_cost -> rdcost = INT64_MAX ; //<S2SV> ctx -> rate = rd_cost -> rate ; //<S2SV> ctx -> dist = rd_cost -> dist ; //<S2SV> } //<S2SV> 