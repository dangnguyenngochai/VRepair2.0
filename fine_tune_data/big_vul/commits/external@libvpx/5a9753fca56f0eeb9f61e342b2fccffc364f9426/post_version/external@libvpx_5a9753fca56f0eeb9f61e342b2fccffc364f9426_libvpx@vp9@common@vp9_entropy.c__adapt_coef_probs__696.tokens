static void adapt_coef_probs ( VP9_COMMON * cm , TX_SIZE tx_size , //<S2SV> unsigned int count_sat , //<S2SV> unsigned int update_factor ) { //<S2SV> const FRAME_CONTEXT * pre_fc = & cm -> frame_contexts [ cm -> frame_context_idx ] ; //<S2SV> vp9_coeff_probs_model * const probs = cm -> fc -> coef_probs [ tx_size ] ; //<S2SV> const vp9_coeff_probs_model * const pre_probs = pre_fc -> coef_probs [ tx_size ] ; //<S2SV> vp9_coeff_count_model * counts = cm -> counts . coef [ tx_size ] ; //<S2SV> unsigned int ( * eob_counts ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = //<S2SV> cm -> counts . eob_branch [ tx_size ] ; //<S2SV> int i , j , k , l , m ; //<S2SV> for ( i = 0 ; i < PLANE_TYPES ; ++ i ) //<S2SV> for ( j = 0 ; j < REF_TYPES ; ++ j ) //<S2SV> for ( k = 0 ; k < COEF_BANDS ; ++ k ) //<S2SV> for ( l = 0 ; l < BAND_COEFF_CONTEXTS ( k ) ; ++ l ) { //<S2SV> const int n0 = counts [ i ] [ j ] [ k ] [ l ] [ ZERO_TOKEN ] ; //<S2SV> const int n1 = counts [ i ] [ j ] [ k ] [ l ] [ ONE_TOKEN ] ; //<S2SV> const int n2 = counts [ i ] [ j ] [ k ] [ l ] [ TWO_TOKEN ] ; //<S2SV> const int neob = counts [ i ] [ j ] [ k ] [ l ] [ EOB_MODEL_TOKEN ] ; //<S2SV> const unsigned int branch_ct [ UNCONSTRAINED_NODES ] [ 2 ] = { //<S2SV> { neob , eob_counts [ i ] [ j ] [ k ] [ l ] - neob } , //<S2SV> { n0 , n1 + n2 } , //<S2SV> { n1 , n2 } //<S2SV> } ; //<S2SV> for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) //<S2SV> probs [ i ] [ j ] [ k ] [ l ] [ m ] = merge_probs ( pre_probs [ i ] [ j ] [ k ] [ l ] [ m ] , //<S2SV> branch_ct [ m ] , //<S2SV> count_sat , update_factor ) ; //<S2SV> } //<S2SV> } //<S2SV> 