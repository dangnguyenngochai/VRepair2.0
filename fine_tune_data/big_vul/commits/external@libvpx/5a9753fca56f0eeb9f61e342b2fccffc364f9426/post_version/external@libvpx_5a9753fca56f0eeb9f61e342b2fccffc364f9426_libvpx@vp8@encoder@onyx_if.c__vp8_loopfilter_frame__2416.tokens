void vp8_loopfilter_frame ( VP8_COMP * cpi , VP8_COMMON * cm ) //<S2SV> { //<S2SV> const FRAME_TYPE frame_type = cm -> frame_type ; //<S2SV> int update_any_ref_buffers = 1 ; //<S2SV> if ( cpi -> common . refresh_last_frame == 0 && //<S2SV> cpi -> common . refresh_golden_frame == 0 && //<S2SV> cpi -> common . refresh_alt_ref_frame == 0 ) { //<S2SV> update_any_ref_buffers = 0 ; //<S2SV> } //<S2SV> if ( cm -> no_lpf ) //<S2SV> { //<S2SV> cm -> filter_level = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> struct vpx_usec_timer timer ; //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> vpx_usec_timer_start ( & timer ) ; //<S2SV> if ( cpi -> sf . auto_filter == 0 ) { //<S2SV> # if CONFIG_TEMPORAL_DENOISING //<S2SV> if ( cpi -> oxcf . noise_sensitivity && cm -> frame_type != KEY_FRAME ) { //<S2SV> vp8cx_pick_filter_level_fast ( //<S2SV> & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] , cpi ) ; //<S2SV> } else { //<S2SV> vp8cx_pick_filter_level_fast ( cpi -> Source , cpi ) ; //<S2SV> } //<S2SV> # else //<S2SV> vp8cx_pick_filter_level_fast ( cpi -> Source , cpi ) ; //<S2SV> # endif //<S2SV> } else { //<S2SV> # if CONFIG_TEMPORAL_DENOISING //<S2SV> if ( cpi -> oxcf . noise_sensitivity && cm -> frame_type != KEY_FRAME ) { //<S2SV> vp8cx_pick_filter_level ( //<S2SV> & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] , cpi ) ; //<S2SV> } else { //<S2SV> vp8cx_pick_filter_level ( cpi -> Source , cpi ) ; //<S2SV> } //<S2SV> # else //<S2SV> vp8cx_pick_filter_level ( cpi -> Source , cpi ) ; //<S2SV> # endif //<S2SV> } //<S2SV> if ( cm -> filter_level > 0 ) //<S2SV> { //<S2SV> vp8cx_set_alt_lf_level ( cpi , cm -> filter_level ) ; //<S2SV> } //<S2SV> vpx_usec_timer_mark ( & timer ) ; //<S2SV> cpi -> time_pick_lpf += vpx_usec_timer_elapsed ( & timer ) ; //<S2SV> } //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> if ( cpi -> b_multi_threaded ) //<S2SV> sem_post ( & cpi -> h_event_end_lpf ) ; //<S2SV> # endif //<S2SV> if ( cm -> filter_level > 0 && update_any_ref_buffers ) //<S2SV> { //<S2SV> vp8_loop_filter_frame ( cm , & cpi -> mb . e_mbd , frame_type ) ; //<S2SV> } //<S2SV> vp8_yv12_extend_frame_borders ( cm -> frame_to_show ) ; //<S2SV> } //<S2SV> 