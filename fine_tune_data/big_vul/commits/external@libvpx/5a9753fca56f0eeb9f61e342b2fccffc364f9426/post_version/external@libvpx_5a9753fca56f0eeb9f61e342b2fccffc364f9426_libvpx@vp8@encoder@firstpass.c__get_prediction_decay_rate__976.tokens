static double get_prediction_decay_rate ( VP8_COMP * cpi , FIRSTPASS_STATS * next_frame ) //<S2SV> { //<S2SV> double prediction_decay_rate ; //<S2SV> double motion_decay ; //<S2SV> double motion_pct = next_frame -> pcnt_motion ; //<S2SV> ( void ) cpi ; //<S2SV> prediction_decay_rate = next_frame -> pcnt_inter ; //<S2SV> motion_decay = ( 1.0 - ( motion_pct / 20.0 ) ) ; //<S2SV> if ( motion_decay < prediction_decay_rate ) //<S2SV> prediction_decay_rate = motion_decay ; //<S2SV> { //<S2SV> double this_mv_rabs ; //<S2SV> double this_mv_cabs ; //<S2SV> double distance_factor ; //<S2SV> this_mv_rabs = fabs ( next_frame -> mvr_abs * motion_pct ) ; //<S2SV> this_mv_cabs = fabs ( next_frame -> mvc_abs * motion_pct ) ; //<S2SV> distance_factor = sqrt ( ( this_mv_rabs * this_mv_rabs ) + //<S2SV> ( this_mv_cabs * this_mv_cabs ) ) / 250.0 ; //<S2SV> distance_factor = ( ( distance_factor > 1.0 ) //<S2SV> ? 0.0 : ( 1.0 - distance_factor ) ) ; //<S2SV> if ( distance_factor < prediction_decay_rate ) //<S2SV> prediction_decay_rate = distance_factor ; //<S2SV> } //<S2SV> return prediction_decay_rate ; //<S2SV> } //<S2SV> 