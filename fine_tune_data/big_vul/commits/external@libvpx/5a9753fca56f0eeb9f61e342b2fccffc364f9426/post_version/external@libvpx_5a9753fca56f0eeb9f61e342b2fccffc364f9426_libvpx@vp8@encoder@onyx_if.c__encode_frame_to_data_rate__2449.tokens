static void encode_frame_to_data_rate //<S2SV> ( //<S2SV> VP8_COMP * cpi , //<S2SV> unsigned long * size , //<S2SV> unsigned char * dest , //<S2SV> unsigned char * dest_end , //<S2SV> unsigned int * frame_flags //<S2SV> ) //<S2SV> { //<S2SV> int Q ; //<S2SV> int frame_over_shoot_limit ; //<S2SV> int frame_under_shoot_limit ; //<S2SV> int Loop = 0 ; //<S2SV> int loop_count ; //<S2SV> VP8_COMMON * cm = & cpi -> common ; //<S2SV> int active_worst_qchanged = 0 ; //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) //<S2SV> int q_low ; //<S2SV> int q_high ; //<S2SV> int zbin_oq_high ; //<S2SV> int zbin_oq_low = 0 ; //<S2SV> int top_index ; //<S2SV> int bottom_index ; //<S2SV> int overshoot_seen = 0 ; //<S2SV> int undershoot_seen = 0 ; //<S2SV> # endif //<S2SV> int drop_mark = ( int ) ( cpi -> oxcf . drop_frames_water_mark * //<S2SV> cpi -> oxcf . optimal_buffer_level / 100 ) ; //<S2SV> int drop_mark75 = drop_mark * 2 / 3 ; //<S2SV> int drop_mark50 = drop_mark / 4 ; //<S2SV> int drop_mark25 = drop_mark / 8 ; //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> if ( cpi -> b_lpf_running ) //<S2SV> { //<S2SV> sem_wait ( & cpi -> h_event_end_lpf ) ; //<S2SV> cpi -> b_lpf_running = 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( cpi -> force_next_frame_intra ) //<S2SV> { //<S2SV> cm -> frame_type = KEY_FRAME ; //<S2SV> cpi -> force_next_frame_intra = 0 ; //<S2SV> } //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> if ( cpi -> common . refresh_alt_ref_frame ) //<S2SV> { //<S2SV> cpi -> per_frame_bandwidth = cpi -> twopass . gf_bits ; //<S2SV> cpi -> target_bandwidth = ( int ) ( cpi -> twopass . gf_bits * //<S2SV> cpi -> output_framerate ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> cpi -> per_frame_bandwidth = ( int ) ( cpi -> target_bandwidth / cpi -> output_framerate ) ; //<S2SV> cm -> copy_buffer_to_gf = 0 ; //<S2SV> cm -> copy_buffer_to_arf = 0 ; //<S2SV> cpi -> mb . zbin_over_quant = 0 ; //<S2SV> cpi -> mb . zbin_mode_boost = 0 ; //<S2SV> cpi -> mb . zbin_mode_boost_enabled = 1 ; //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> if ( cpi -> gfu_boost <= 400 ) //<S2SV> { //<S2SV> cpi -> mb . zbin_mode_boost_enabled = 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> source_alt_ref_active ) //<S2SV> cpi -> common . ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; //<S2SV> else //<S2SV> cpi -> common . ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; //<S2SV> if ( ( cm -> current_video_frame == 0 ) || //<S2SV> ( cm -> frame_flags & FRAMEFLAGS_KEY ) || //<S2SV> ( cpi -> oxcf . auto_key && ( cpi -> frames_since_key % cpi -> key_frame_frequency == 0 ) ) ) //<S2SV> { //<S2SV> cm -> frame_type = KEY_FRAME ; //<S2SV> # if CONFIG_TEMPORAL_DENOISING //<S2SV> if ( cpi -> oxcf . noise_sensitivity == 4 ) { //<S2SV> vp8_denoiser_set_parameters ( & cpi -> denoiser , kDenoiserOnYUV ) ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> # if CONFIG_MULTI_RES_ENCODING //<S2SV> if ( cpi -> oxcf . mr_total_resolutions > 1 ) { //<S2SV> LOWER_RES_FRAME_INFO * low_res_frame_info //<S2SV> = ( LOWER_RES_FRAME_INFO * ) cpi -> oxcf . mr_low_res_mode_info ; //<S2SV> if ( cpi -> oxcf . mr_encoder_id ) { //<S2SV> cm -> frame_type = low_res_frame_info -> frame_type ; //<S2SV> if ( cm -> frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> cpi -> mr_low_res_mv_avail = 1 ; //<S2SV> cpi -> mr_low_res_mv_avail &= ! ( low_res_frame_info -> is_frame_dropped ) ; //<S2SV> if ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) //<S2SV> cpi -> mr_low_res_mv_avail &= ( cpi -> current_ref_frames [ LAST_FRAME ] //<S2SV> == low_res_frame_info -> low_res_ref_frames [ LAST_FRAME ] ) ; //<S2SV> if ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) //<S2SV> cpi -> mr_low_res_mv_avail &= ( cpi -> current_ref_frames [ GOLDEN_FRAME ] //<S2SV> == low_res_frame_info -> low_res_ref_frames [ GOLDEN_FRAME ] ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( cm -> frame_type == KEY_FRAME ) { //<S2SV> if ( cpi -> oxcf . mr_encoder_id ) { //<S2SV> if ( cpi -> common . current_video_frame == 0 && cpi -> buffer_level == 0 ) { //<S2SV> unsigned int i ; //<S2SV> cpi -> bits_off_target = cpi -> oxcf . starting_buffer_level ; //<S2SV> cpi -> buffer_level = cpi -> oxcf . starting_buffer_level ; //<S2SV> for ( i = 0 ; i < cpi -> oxcf . number_of_layers ; i ++ ) { //<S2SV> LAYER_CONTEXT * lc = & cpi -> layer_context [ i ] ; //<S2SV> lc -> bits_off_target = lc -> starting_buffer_level ; //<S2SV> lc -> buffer_level = lc -> starting_buffer_level ; //<S2SV> } //<S2SV> } //<S2SV> cpi -> common . current_video_frame = //<S2SV> low_res_frame_info -> key_frame_counter_value ; //<S2SV> } else { //<S2SV> low_res_frame_info -> key_frame_counter_value = //<S2SV> cpi -> common . current_video_frame ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> cpi -> closest_reference_frame = LAST_FRAME ; //<S2SV> if ( cm -> frame_type != KEY_FRAME ) { //<S2SV> int i ; //<S2SV> MV_REFERENCE_FRAME closest_ref = INTRA_FRAME ; //<S2SV> if ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) { //<S2SV> closest_ref = LAST_FRAME ; //<S2SV> } else if ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) { //<S2SV> closest_ref = GOLDEN_FRAME ; //<S2SV> } else if ( cpi -> ref_frame_flags & VP8_ALTR_FRAME ) { //<S2SV> closest_ref = ALTREF_FRAME ; //<S2SV> } //<S2SV> for ( i = 1 ; i <= 3 ; i ++ ) { //<S2SV> vpx_ref_frame_type_t ref_frame_type = ( vpx_ref_frame_type_t ) //<S2SV> ( ( i == 3 ) ? 4 : i ) ; //<S2SV> if ( cpi -> ref_frame_flags & ref_frame_type ) { //<S2SV> if ( ( cm -> current_video_frame - cpi -> current_ref_frames [ i ] ) < //<S2SV> ( cm -> current_video_frame - cpi -> current_ref_frames [ closest_ref ] ) ) { //<S2SV> closest_ref = i ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> cpi -> closest_reference_frame = closest_ref ; //<S2SV> } //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> int i ; //<S2SV> setup_features ( cpi ) ; //<S2SV> cpi -> source_alt_ref_active = 0 ; //<S2SV> for ( i = 0 ; i < MAX_MODES ; i ++ ) //<S2SV> { //<S2SV> cpi -> mb . rd_thresh_mult [ i ] = 128 ; //<S2SV> } //<S2SV> memset ( cpi -> consec_zero_last , 0 , cm -> mb_rows * cm -> mb_cols ) ; //<S2SV> memset ( cpi -> consec_zero_last_mvbias , 0 , //<S2SV> ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ) ; //<S2SV> } //<S2SV> # if 0 //<S2SV> { //<S2SV> cpi -> one_pass_frame_index = cm -> current_video_frame % MAX_LAG_BUFFERS ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frames_so_far = 0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_intra_error = 0.0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_coded_error = 0.0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_pcnt_inter = 0.0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_pcnt_motion = 0.0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_mvr = 0.0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_mvr_abs = 0.0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_mvc = 0.0 ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_mvc_abs = 0.0 ; //<S2SV> } //<S2SV> # endif //<S2SV> update_rd_ref_frame_probs ( cpi ) ; //<S2SV> if ( cpi -> drop_frames_allowed ) //<S2SV> { //<S2SV> if ( ( cpi -> buffer_level > drop_mark ) && ( cpi -> decimation_factor > 0 ) ) //<S2SV> cpi -> decimation_factor -- ; //<S2SV> if ( cpi -> buffer_level > drop_mark75 && cpi -> decimation_factor > 0 ) //<S2SV> cpi -> decimation_factor = 1 ; //<S2SV> else if ( cpi -> buffer_level < drop_mark25 && ( cpi -> decimation_factor == 2 || cpi -> decimation_factor == 3 ) ) //<S2SV> { //<S2SV> cpi -> decimation_factor = 3 ; //<S2SV> } //<S2SV> else if ( cpi -> buffer_level < drop_mark50 && ( cpi -> decimation_factor == 1 || cpi -> decimation_factor == 2 ) ) //<S2SV> { //<S2SV> cpi -> decimation_factor = 2 ; //<S2SV> } //<S2SV> else if ( cpi -> buffer_level < drop_mark75 && ( cpi -> decimation_factor == 0 || cpi -> decimation_factor == 1 ) ) //<S2SV> { //<S2SV> cpi -> decimation_factor = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> decimation_factor > 0 ) //<S2SV> { //<S2SV> switch ( cpi -> decimation_factor ) //<S2SV> { //<S2SV> case 1 : //<S2SV> cpi -> per_frame_bandwidth = cpi -> per_frame_bandwidth * 3 / 2 ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> cpi -> per_frame_bandwidth = cpi -> per_frame_bandwidth * 5 / 4 ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> cpi -> per_frame_bandwidth = cpi -> per_frame_bandwidth * 5 / 4 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> cpi -> decimation_count = cpi -> decimation_factor ; //<S2SV> } //<S2SV> else if ( cpi -> decimation_count > 0 ) //<S2SV> { //<S2SV> cpi -> decimation_count -- ; //<S2SV> cpi -> bits_off_target += cpi -> av_per_frame_bandwidth ; //<S2SV> if ( cpi -> bits_off_target > cpi -> oxcf . maximum_buffer_size ) //<S2SV> cpi -> bits_off_target = cpi -> oxcf . maximum_buffer_size ; //<S2SV> # if CONFIG_MULTI_RES_ENCODING //<S2SV> vp8_store_drop_frame_info ( cpi ) ; //<S2SV> # endif //<S2SV> cm -> current_video_frame ++ ; //<S2SV> cpi -> frames_since_key ++ ; //<S2SV> cpi -> temporal_pattern_counter ++ ; //<S2SV> # if CONFIG_INTERNAL_STATS //<S2SV> cpi -> count ++ ; //<S2SV> # endif //<S2SV> cpi -> buffer_level = cpi -> bits_off_target ; //<S2SV> if ( cpi -> oxcf . number_of_layers > 1 ) //<S2SV> { //<S2SV> unsigned int i ; //<S2SV> for ( i = cpi -> current_layer + 1 ; i < cpi -> oxcf . number_of_layers ; i ++ ) //<S2SV> { //<S2SV> LAYER_CONTEXT * lc = & cpi -> layer_context [ i ] ; //<S2SV> lc -> bits_off_target += ( int ) ( lc -> target_bandwidth / //<S2SV> lc -> framerate ) ; //<S2SV> if ( lc -> bits_off_target > lc -> maximum_buffer_size ) //<S2SV> lc -> bits_off_target = lc -> maximum_buffer_size ; //<S2SV> lc -> buffer_level = lc -> bits_off_target ; //<S2SV> } //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> else //<S2SV> cpi -> decimation_count = cpi -> decimation_factor ; //<S2SV> } //<S2SV> else //<S2SV> cpi -> decimation_count = 0 ; //<S2SV> if ( ! vp8_pick_frame_size ( cpi ) ) //<S2SV> { //<S2SV> # if CONFIG_MULTI_RES_ENCODING //<S2SV> vp8_store_drop_frame_info ( cpi ) ; //<S2SV> # endif //<S2SV> cm -> current_video_frame ++ ; //<S2SV> cpi -> frames_since_key ++ ; //<S2SV> cpi -> temporal_pattern_counter ++ ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) && //<S2SV> ( cpi -> buffer_level >= cpi -> oxcf . optimal_buffer_level ) && cpi -> buffered_mode ) //<S2SV> { //<S2SV> int Adjustment = cpi -> active_worst_quality / 4 ; //<S2SV> if ( Adjustment ) //<S2SV> { //<S2SV> int buff_lvl_step ; //<S2SV> if ( cpi -> buffer_level < cpi -> oxcf . maximum_buffer_size ) //<S2SV> { //<S2SV> buff_lvl_step = ( int ) //<S2SV> ( ( cpi -> oxcf . maximum_buffer_size - //<S2SV> cpi -> oxcf . optimal_buffer_level ) / //<S2SV> Adjustment ) ; //<S2SV> if ( buff_lvl_step ) //<S2SV> Adjustment = ( int ) //<S2SV> ( ( cpi -> buffer_level - //<S2SV> cpi -> oxcf . optimal_buffer_level ) / //<S2SV> buff_lvl_step ) ; //<S2SV> else //<S2SV> Adjustment = 0 ; //<S2SV> } //<S2SV> cpi -> active_worst_quality -= Adjustment ; //<S2SV> if ( cpi -> active_worst_quality < cpi -> active_best_quality ) //<S2SV> cpi -> active_worst_quality = cpi -> active_best_quality ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( cpi -> pass == 2 ) || ( cpi -> ni_frames > 150 ) ) //<S2SV> { //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> Q = cpi -> active_worst_quality ; //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> if ( cpi -> gfu_boost > 600 ) //<S2SV> cpi -> active_best_quality = kf_low_motion_minq [ Q ] ; //<S2SV> else //<S2SV> cpi -> active_best_quality = kf_high_motion_minq [ Q ] ; //<S2SV> if ( cpi -> this_key_frame_forced ) //<S2SV> { //<S2SV> if ( cpi -> active_best_quality > cpi -> avg_frame_qindex * 7 / 8 ) //<S2SV> cpi -> active_best_quality = cpi -> avg_frame_qindex * 7 / 8 ; //<S2SV> else if ( cpi -> active_best_quality < cpi -> avg_frame_qindex >> 2 ) //<S2SV> cpi -> active_best_quality = cpi -> avg_frame_qindex >> 2 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> cpi -> active_best_quality = kf_high_motion_minq [ Q ] ; //<S2SV> } //<S2SV> else if ( cpi -> oxcf . number_of_layers == 1 && //<S2SV> ( cm -> refresh_golden_frame || cpi -> common . refresh_alt_ref_frame ) ) //<S2SV> { //<S2SV> if ( ( cpi -> frames_since_key > 1 ) && //<S2SV> ( cpi -> avg_frame_qindex < cpi -> active_worst_quality ) ) //<S2SV> { //<S2SV> Q = cpi -> avg_frame_qindex ; //<S2SV> } //<S2SV> if ( ( cpi -> oxcf . end_usage == USAGE_CONSTRAINED_QUALITY ) && //<S2SV> ( Q < cpi -> cq_target_quality ) ) //<S2SV> { //<S2SV> Q = cpi -> cq_target_quality ; //<S2SV> } //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> if ( cpi -> gfu_boost > 1000 ) //<S2SV> cpi -> active_best_quality = gf_low_motion_minq [ Q ] ; //<S2SV> else if ( cpi -> gfu_boost < 400 ) //<S2SV> cpi -> active_best_quality = gf_high_motion_minq [ Q ] ; //<S2SV> else //<S2SV> cpi -> active_best_quality = gf_mid_motion_minq [ Q ] ; //<S2SV> if ( cpi -> oxcf . end_usage == USAGE_CONSTRAINED_QUALITY ) //<S2SV> { //<S2SV> cpi -> active_best_quality = //<S2SV> cpi -> active_best_quality * 15 / 16 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> cpi -> active_best_quality = gf_high_motion_minq [ Q ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> active_best_quality = inter_minq [ Q ] ; //<S2SV> if ( ( cpi -> oxcf . end_usage == USAGE_CONSTRAINED_QUALITY ) && //<S2SV> ( cpi -> active_best_quality < cpi -> cq_target_quality ) ) //<S2SV> { //<S2SV> if ( cpi -> rolling_actual_bits < cpi -> min_frame_bandwidth ) //<S2SV> cpi -> active_best_quality = cpi -> oxcf . cq_level ; //<S2SV> else //<S2SV> cpi -> active_best_quality = cpi -> cq_target_quality ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) //<S2SV> { //<S2SV> if ( cpi -> buffer_level >= cpi -> oxcf . maximum_buffer_size ) //<S2SV> cpi -> active_best_quality = cpi -> best_quality ; //<S2SV> else if ( cpi -> buffer_level > cpi -> oxcf . optimal_buffer_level ) //<S2SV> { //<S2SV> int Fraction = ( int ) //<S2SV> ( ( ( cpi -> buffer_level - cpi -> oxcf . optimal_buffer_level ) * 128 ) //<S2SV> / ( cpi -> oxcf . maximum_buffer_size - //<S2SV> cpi -> oxcf . optimal_buffer_level ) ) ; //<S2SV> int min_qadjustment = ( ( cpi -> active_best_quality - //<S2SV> cpi -> best_quality ) * Fraction ) / 128 ; //<S2SV> cpi -> active_best_quality -= min_qadjustment ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else if ( cpi -> oxcf . end_usage == USAGE_CONSTRAINED_QUALITY ) //<S2SV> { //<S2SV> if ( ( cm -> frame_type == KEY_FRAME ) || //<S2SV> cm -> refresh_golden_frame || cpi -> common . refresh_alt_ref_frame ) //<S2SV> { //<S2SV> cpi -> active_best_quality = cpi -> best_quality ; //<S2SV> } //<S2SV> else if ( cpi -> active_best_quality < cpi -> cq_target_quality ) //<S2SV> { //<S2SV> cpi -> active_best_quality = cpi -> cq_target_quality ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> active_worst_quality > cpi -> worst_quality ) //<S2SV> cpi -> active_worst_quality = cpi -> worst_quality ; //<S2SV> if ( cpi -> active_best_quality < cpi -> best_quality ) //<S2SV> cpi -> active_best_quality = cpi -> best_quality ; //<S2SV> if ( cpi -> active_worst_quality < cpi -> active_best_quality ) //<S2SV> cpi -> active_worst_quality = cpi -> active_best_quality ; //<S2SV> Q = vp8_regulate_q ( cpi , cpi -> this_frame_target ) ; //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> zbin_oq_high = 0 ; //<S2SV> else if ( ( cpi -> oxcf . number_of_layers == 1 ) && ( ( cm -> refresh_alt_ref_frame || //<S2SV> ( cm -> refresh_golden_frame && ! cpi -> source_alt_ref_active ) ) ) ) //<S2SV> { //<S2SV> zbin_oq_high = 16 ; //<S2SV> } //<S2SV> else //<S2SV> zbin_oq_high = ZBIN_OQ_MAX ; //<S2SV> # endif //<S2SV> if ( cpi -> cyclic_refresh_mode_enabled ) //<S2SV> { //<S2SV> int disable_cr_gf = ( cpi -> oxcf . screen_content_mode == 2 && //<S2SV> cm -> refresh_golden_frame ) ; //<S2SV> if ( cpi -> current_layer == 0 && cpi -> force_maxqp == 0 && ! disable_cr_gf ) //<S2SV> cyclic_background_refresh ( cpi , Q , 0 ) ; //<S2SV> else //<S2SV> disable_segmentation ( cpi ) ; //<S2SV> } //<S2SV> vp8_compute_frame_size_bounds ( cpi , & frame_under_shoot_limit , & frame_over_shoot_limit ) ; //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) //<S2SV> bottom_index = cpi -> active_best_quality ; //<S2SV> top_index = cpi -> active_worst_quality ; //<S2SV> q_low = cpi -> active_best_quality ; //<S2SV> q_high = cpi -> active_worst_quality ; //<S2SV> # endif //<S2SV> vp8_save_coding_context ( cpi ) ; //<S2SV> loop_count = 0 ; //<S2SV> scale_and_extend_source ( cpi -> un_scaled_source , cpi ) ; //<S2SV> # if CONFIG_TEMPORAL_DENOISING && CONFIG_POSTPROC //<S2SV> if ( cpi -> oxcf . noise_sensitivity >= 3 ) { //<S2SV> if ( cpi -> denoiser . denoise_pars . spatial_blur != 0 ) { //<S2SV> vp8_de_noise ( cm , cpi -> Source , cpi -> Source , //<S2SV> cpi -> denoiser . denoise_pars . spatial_blur , 1 , 0 , 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) && CONFIG_POSTPROC && ! ( CONFIG_TEMPORAL_DENOISING ) //<S2SV> if ( cpi -> oxcf . noise_sensitivity > 0 ) //<S2SV> { //<S2SV> unsigned char * src ; //<S2SV> int l = 0 ; //<S2SV> switch ( cpi -> oxcf . noise_sensitivity ) //<S2SV> { //<S2SV> case 1 : //<S2SV> l = 20 ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> l = 40 ; //<S2SV> break ; //<S2SV> case 3 : //<S2SV> l = 60 ; //<S2SV> break ; //<S2SV> case 4 : //<S2SV> l = 80 ; //<S2SV> break ; //<S2SV> case 5 : //<S2SV> l = 100 ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> l = 150 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> vp8_de_noise ( cm , cpi -> Source , cpi -> Source , l , 1 , 0 , 1 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> vp8_de_noise ( cm , cpi -> Source , cpi -> Source , l , 1 , 0 , 1 ) ; //<S2SV> src = cpi -> Source -> y_buffer ; //<S2SV> if ( cpi -> Source -> y_stride < 0 ) //<S2SV> { //<S2SV> src += cpi -> Source -> y_stride * ( cpi -> Source -> y_height - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # ifdef OUTPUT_YUV_SRC //<S2SV> vp8_write_yuv_frame ( yuv_file , cpi -> Source ) ; //<S2SV> # endif //<S2SV> do //<S2SV> { //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> vp8_set_quantizer ( cpi , Q ) ; //<S2SV> if ( cpi -> common . mb_no_coeff_skip ) //<S2SV> { //<S2SV> cpi -> prob_skip_false = cpi -> base_skip_false_prob [ Q ] ; //<S2SV> if ( cm -> frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> if ( cpi -> common . refresh_alt_ref_frame ) //<S2SV> { //<S2SV> if ( cpi -> last_skip_false_probs [ 2 ] != 0 ) //<S2SV> cpi -> prob_skip_false = cpi -> last_skip_false_probs [ 2 ] ; //<S2SV> } //<S2SV> else if ( cpi -> common . refresh_golden_frame ) //<S2SV> { //<S2SV> if ( cpi -> last_skip_false_probs [ 1 ] != 0 ) //<S2SV> cpi -> prob_skip_false = cpi -> last_skip_false_probs [ 1 ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( cpi -> last_skip_false_probs [ 0 ] != 0 ) //<S2SV> cpi -> prob_skip_false = cpi -> last_skip_false_probs [ 0 ] ; //<S2SV> } //<S2SV> if ( cpi -> prob_skip_false < 5 ) //<S2SV> cpi -> prob_skip_false = 5 ; //<S2SV> if ( cpi -> prob_skip_false > 250 ) //<S2SV> cpi -> prob_skip_false = 250 ; //<S2SV> if ( cpi -> oxcf . number_of_layers == 1 && cpi -> is_src_frame_alt_ref ) //<S2SV> cpi -> prob_skip_false = 1 ; //<S2SV> } //<S2SV> # if 0 //<S2SV> if ( cpi -> pass != 1 ) //<S2SV> { //<S2SV> FILE * f = fopen ( "skip.stt" , "a" ) ; //<S2SV> fprintf ( f , "%d,<S2SV_blank>%d,<S2SV_blank>%4d<S2SV_blank>" , cpi -> common . refresh_golden_frame , cpi -> common . refresh_alt_ref_frame , cpi -> prob_skip_false ) ; //<S2SV> fclose ( f ) ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> if ( resize_key_frame ( cpi ) ) //<S2SV> { //<S2SV> Q = vp8_regulate_q ( cpi , cpi -> this_frame_target ) ; //<S2SV> if ( cpi -> cyclic_refresh_mode_enabled ) //<S2SV> { //<S2SV> if ( cpi -> current_layer == 0 ) //<S2SV> cyclic_background_refresh ( cpi , Q , 0 ) ; //<S2SV> else //<S2SV> disable_segmentation ( cpi ) ; //<S2SV> } //<S2SV> memset ( cpi -> consec_zero_last , 0 , cm -> mb_rows * cm -> mb_cols ) ; //<S2SV> memset ( cpi -> consec_zero_last_mvbias , 0 , //<S2SV> ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ) ; //<S2SV> vp8_set_quantizer ( cpi , Q ) ; //<S2SV> } //<S2SV> vp8_setup_key_frame ( cpi ) ; //<S2SV> } //<S2SV> # if CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING //<S2SV> { //<S2SV> if ( cpi -> oxcf . error_resilient_mode ) //<S2SV> cm -> refresh_entropy_probs = 0 ; //<S2SV> if ( cpi -> oxcf . error_resilient_mode & VPX_ERROR_RESILIENT_PARTITIONS ) //<S2SV> { //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> cm -> refresh_entropy_probs = 1 ; //<S2SV> } //<S2SV> if ( cm -> refresh_entropy_probs == 0 ) //<S2SV> { //<S2SV> memcpy ( & cm -> lfc , & cm -> fc , sizeof ( cm -> fc ) ) ; //<S2SV> } //<S2SV> vp8_update_coef_context ( cpi ) ; //<S2SV> vp8_update_coef_probs ( cpi ) ; //<S2SV> vp8_encode_frame ( cpi ) ; //<S2SV> } //<S2SV> # else //<S2SV> vp8_encode_frame ( cpi ) ; //<S2SV> if ( cpi -> oxcf . screen_content_mode == 2 ) { //<S2SV> if ( vp8_drop_encodedframe_overshoot ( cpi , Q ) ) //<S2SV> return ; //<S2SV> } //<S2SV> cpi -> projected_frame_size -= vp8_estimate_entropy_savings ( cpi ) ; //<S2SV> cpi -> projected_frame_size = ( cpi -> projected_frame_size > 0 ) ? cpi -> projected_frame_size : 0 ; //<S2SV> # endif //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> if ( cpi -> pass != 2 && cpi -> oxcf . auto_key && cm -> frame_type != KEY_FRAME //<S2SV> && cpi -> compressor_speed != 2 ) //<S2SV> { //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) //<S2SV> if ( decide_key_frame ( cpi ) ) //<S2SV> { //<S2SV> cm -> frame_type = KEY_FRAME ; //<S2SV> vp8_pick_frame_size ( cpi ) ; //<S2SV> cpi -> source_alt_ref_active = 0 ; //<S2SV> setup_features ( cpi ) ; //<S2SV> vp8_restore_coding_context ( cpi ) ; //<S2SV> Q = vp8_regulate_q ( cpi , cpi -> this_frame_target ) ; //<S2SV> vp8_compute_frame_size_bounds ( cpi , & frame_under_shoot_limit , & frame_over_shoot_limit ) ; //<S2SV> bottom_index = cpi -> active_best_quality ; //<S2SV> top_index = cpi -> active_worst_quality ; //<S2SV> q_low = cpi -> active_best_quality ; //<S2SV> q_high = cpi -> active_worst_quality ; //<S2SV> loop_count ++ ; //<S2SV> Loop = 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> if ( frame_over_shoot_limit == 0 ) //<S2SV> frame_over_shoot_limit = 1 ; //<S2SV> if ( ( ( cpi -> pass != 2 ) || ( cpi -> oxcf . end_usage == USAGE_STREAM_FROM_SERVER ) ) && //<S2SV> ( Q == cpi -> active_worst_quality ) && //<S2SV> ( cpi -> active_worst_quality < cpi -> worst_quality ) && //<S2SV> ( cpi -> projected_frame_size > frame_over_shoot_limit ) ) //<S2SV> { //<S2SV> int over_size_percent = ( ( cpi -> projected_frame_size - frame_over_shoot_limit ) * 100 ) / frame_over_shoot_limit ; //<S2SV> while ( ( cpi -> active_worst_quality < cpi -> worst_quality ) && ( over_size_percent > 0 ) ) //<S2SV> { //<S2SV> cpi -> active_worst_quality ++ ; //<S2SV> over_size_percent = ( int ) ( over_size_percent * 0.96 ) ; //<S2SV> } //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) //<S2SV> top_index = cpi -> active_worst_quality ; //<S2SV> # endif //<S2SV> active_worst_qchanged = 1 ; //<S2SV> } //<S2SV> else //<S2SV> active_worst_qchanged = 0 ; //<S2SV> # if ! ( CONFIG_REALTIME_ONLY ) //<S2SV> if ( ( cm -> frame_type == KEY_FRAME ) && cpi -> this_key_frame_forced ) //<S2SV> { //<S2SV> int last_q = Q ; //<S2SV> int kf_err = vp8_calc_ss_err ( cpi -> Source , //<S2SV> & cm -> yv12_fb [ cm -> new_fb_idx ] ) ; //<S2SV> if ( kf_err > ( ( cpi -> ambient_err * 7 ) >> 3 ) ) //<S2SV> { //<S2SV> q_high = ( Q > q_low ) ? ( Q - 1 ) : q_low ; //<S2SV> Q = ( q_high + q_low ) >> 1 ; //<S2SV> } //<S2SV> else if ( kf_err < ( cpi -> ambient_err >> 1 ) ) //<S2SV> { //<S2SV> q_low = ( Q < q_high ) ? ( Q + 1 ) : q_high ; //<S2SV> Q = ( q_high + q_low + 1 ) >> 1 ; //<S2SV> } //<S2SV> if ( Q > q_high ) //<S2SV> Q = q_high ; //<S2SV> else if ( Q < q_low ) //<S2SV> Q = q_low ; //<S2SV> Loop = Q != last_q ; //<S2SV> } //<S2SV> else if ( recode_loop_test ( cpi , //<S2SV> frame_over_shoot_limit , frame_under_shoot_limit , //<S2SV> Q , top_index , bottom_index ) ) //<S2SV> { //<S2SV> int last_q = Q ; //<S2SV> int Retries = 0 ; //<S2SV> if ( cpi -> projected_frame_size > cpi -> this_frame_target ) //<S2SV> { //<S2SV> q_low = ( Q < q_high ) ? ( Q + 1 ) : q_high ; //<S2SV> if ( cpi -> mb . zbin_over_quant > 0 ) //<S2SV> zbin_oq_low = ( cpi -> mb . zbin_over_quant < zbin_oq_high ) ? //<S2SV> ( cpi -> mb . zbin_over_quant + 1 ) : zbin_oq_high ; //<S2SV> if ( undershoot_seen ) //<S2SV> { //<S2SV> if ( ! active_worst_qchanged ) //<S2SV> vp8_update_rate_correction_factors ( cpi , 1 ) ; //<S2SV> Q = ( q_high + q_low + 1 ) / 2 ; //<S2SV> if ( Q < MAXQ ) //<S2SV> cpi -> mb . zbin_over_quant = 0 ; //<S2SV> else //<S2SV> { //<S2SV> zbin_oq_low = ( cpi -> mb . zbin_over_quant < zbin_oq_high ) ? //<S2SV> ( cpi -> mb . zbin_over_quant + 1 ) : zbin_oq_high ; //<S2SV> cpi -> mb . zbin_over_quant = //<S2SV> ( zbin_oq_high + zbin_oq_low ) / 2 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ! active_worst_qchanged ) //<S2SV> vp8_update_rate_correction_factors ( cpi , 0 ) ; //<S2SV> Q = vp8_regulate_q ( cpi , cpi -> this_frame_target ) ; //<S2SV> while ( ( ( Q < q_low ) || //<S2SV> ( cpi -> mb . zbin_over_quant < zbin_oq_low ) ) && //<S2SV> ( Retries < 10 ) ) //<S2SV> { //<S2SV> vp8_update_rate_correction_factors ( cpi , 0 ) ; //<S2SV> Q = vp8_regulate_q ( cpi , cpi -> this_frame_target ) ; //<S2SV> Retries ++ ; //<S2SV> } //<S2SV> } //<S2SV> overshoot_seen = 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( cpi -> mb . zbin_over_quant == 0 ) //<S2SV> q_high = ( Q > q_low ) ? ( Q - 1 ) : q_low ; //<S2SV> else //<S2SV> zbin_oq_high = ( cpi -> mb . zbin_over_quant > zbin_oq_low ) ? //<S2SV> ( cpi -> mb . zbin_over_quant - 1 ) : zbin_oq_low ; //<S2SV> if ( overshoot_seen ) //<S2SV> { //<S2SV> if ( ! active_worst_qchanged ) //<S2SV> vp8_update_rate_correction_factors ( cpi , 1 ) ; //<S2SV> Q = ( q_high + q_low ) / 2 ; //<S2SV> if ( Q < MAXQ ) //<S2SV> cpi -> mb . zbin_over_quant = 0 ; //<S2SV> else //<S2SV> cpi -> mb . zbin_over_quant = //<S2SV> ( zbin_oq_high + zbin_oq_low ) / 2 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ! active_worst_qchanged ) //<S2SV> vp8_update_rate_correction_factors ( cpi , 0 ) ; //<S2SV> Q = vp8_regulate_q ( cpi , cpi -> this_frame_target ) ; //<S2SV> if ( ( cpi -> oxcf . end_usage == USAGE_CONSTRAINED_QUALITY ) && //<S2SV> ( Q < q_low ) ) //<S2SV> { //<S2SV> q_low = Q ; //<S2SV> } //<S2SV> while ( ( ( Q > q_high ) || //<S2SV> ( cpi -> mb . zbin_over_quant > zbin_oq_high ) ) && //<S2SV> ( Retries < 10 ) ) //<S2SV> { //<S2SV> vp8_update_rate_correction_factors ( cpi , 0 ) ; //<S2SV> Q = vp8_regulate_q ( cpi , cpi -> this_frame_target ) ; //<S2SV> Retries ++ ; //<S2SV> } //<S2SV> } //<S2SV> undershoot_seen = 1 ; //<S2SV> } //<S2SV> if ( Q > q_high ) //<S2SV> Q = q_high ; //<S2SV> else if ( Q < q_low ) //<S2SV> Q = q_low ; //<S2SV> cpi -> mb . zbin_over_quant = ( cpi -> mb . zbin_over_quant < zbin_oq_low ) ? //<S2SV> zbin_oq_low : ( cpi -> mb . zbin_over_quant > zbin_oq_high ) ? //<S2SV> zbin_oq_high : cpi -> mb . zbin_over_quant ; //<S2SV> Loop = Q != last_q ; //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> Loop = 0 ; //<S2SV> if ( cpi -> is_src_frame_alt_ref ) //<S2SV> Loop = 0 ; //<S2SV> if ( Loop == 1 ) //<S2SV> { //<S2SV> vp8_restore_coding_context ( cpi ) ; //<S2SV> loop_count ++ ; //<S2SV> # if CONFIG_INTERNAL_STATS //<S2SV> cpi -> tot_recode_hits ++ ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> while ( Loop == 1 ) ; //<S2SV> # if 0 //<S2SV> { //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_coded_error = ( double ) cpi -> prediction_error ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_intra_error = ( double ) cpi -> intra_error ; //<S2SV> cpi -> one_pass_frame_stats [ cpi -> one_pass_frame_index ] . frame_pcnt_inter = ( double ) ( 100 - cpi -> this_frame_percent_intra ) / 100.0 ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( cpi -> next_key_frame_forced && ( cpi -> twopass . frames_to_key == 0 ) ) //<S2SV> { //<S2SV> cpi -> ambient_err = vp8_calc_ss_err ( cpi -> Source , //<S2SV> & cm -> yv12_fb [ cm -> new_fb_idx ] ) ; //<S2SV> } //<S2SV> # if CONFIG_MULTI_RES_ENCODING //<S2SV> if ( ! cpi -> oxcf . mr_encoder_id && cm -> show_frame ) //<S2SV> # else //<S2SV> if ( cm -> show_frame ) //<S2SV> # endif //<S2SV> { //<S2SV> int mb_row ; //<S2SV> int mb_col ; //<S2SV> MODE_INFO * tmp = cm -> mip ; //<S2SV> if ( cm -> frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> for ( mb_row = 0 ; mb_row < cm -> mb_rows + 1 ; mb_row ++ ) //<S2SV> { //<S2SV> for ( mb_col = 0 ; mb_col < cm -> mb_cols + 1 ; mb_col ++ ) //<S2SV> { //<S2SV> if ( tmp -> mbmi . ref_frame != INTRA_FRAME ) //<S2SV> cpi -> lfmv [ mb_col + mb_row * ( cm -> mode_info_stride + 1 ) ] . as_int = tmp -> mbmi . mv . as_int ; //<S2SV> cpi -> lf_ref_frame_sign_bias [ mb_col + mb_row * ( cm -> mode_info_stride + 1 ) ] = cm -> ref_frame_sign_bias [ tmp -> mbmi . ref_frame ] ; //<S2SV> cpi -> lf_ref_frame [ mb_col + mb_row * ( cm -> mode_info_stride + 1 ) ] = tmp -> mbmi . ref_frame ; //<S2SV> tmp ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> int mb_row ; //<S2SV> int mb_col ; //<S2SV> MODE_INFO * tmp = cm -> mi ; //<S2SV> cpi -> zeromv_count = 0 ; //<S2SV> if ( cm -> frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> for ( mb_row = 0 ; mb_row < cm -> mb_rows ; mb_row ++ ) //<S2SV> { //<S2SV> for ( mb_col = 0 ; mb_col < cm -> mb_cols ; mb_col ++ ) //<S2SV> { //<S2SV> if ( tmp -> mbmi . mode == ZEROMV && //<S2SV> tmp -> mbmi . ref_frame == LAST_FRAME ) //<S2SV> cpi -> zeromv_count ++ ; //<S2SV> tmp ++ ; //<S2SV> } //<S2SV> tmp ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # if CONFIG_MULTI_RES_ENCODING //<S2SV> vp8_cal_dissimilarity ( cpi ) ; //<S2SV> # endif //<S2SV> if ( cpi -> oxcf . number_of_layers == 1 ) //<S2SV> vp8_update_gf_useage_maps ( cpi , cm , & cpi -> mb ) ; //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> cm -> refresh_last_frame = 1 ; //<S2SV> # if 0 //<S2SV> { //<S2SV> FILE * f = fopen ( "gfactive.stt" , "a" ) ; //<S2SV> fprintf ( f , "%8d<S2SV_blank>%8d<S2SV_blank>%8d<S2SV_blank>%8d<S2SV_blank>%8d\\n" , cm -> current_video_frame , ( 100 * cpi -> gf_active_count ) / ( cpi -> common . mb_rows * cpi -> common . mb_cols ) , cpi -> this_iiratio , cpi -> next_iiratio , cm -> refresh_golden_frame ) ; //<S2SV> fclose ( f ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ! cpi -> oxcf . error_resilient_mode && cm -> refresh_golden_frame ) //<S2SV> cm -> copy_buffer_to_arf = 2 ; //<S2SV> else //<S2SV> cm -> copy_buffer_to_arf = 0 ; //<S2SV> cm -> frame_to_show = & cm -> yv12_fb [ cm -> new_fb_idx ] ; //<S2SV> # if CONFIG_TEMPORAL_DENOISING //<S2SV> if ( cpi -> oxcf . noise_sensitivity > 0 && //<S2SV> cpi -> oxcf . noise_sensitivity < 4 && //<S2SV> ! cpi -> oxcf . screen_content_mode && //<S2SV> cpi -> frames_since_key % 8 == 0 && //<S2SV> cm -> frame_type != KEY_FRAME ) { //<S2SV> cpi -> mse_source_denoised = measure_square_diff_partial ( //<S2SV> & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] , cpi -> Source , cpi ) ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . noise_sensitivity == 4 && //<S2SV> ! cpi -> oxcf . screen_content_mode && //<S2SV> cpi -> frames_since_key % 8 == 0 && //<S2SV> cm -> frame_type != KEY_FRAME ) { //<S2SV> process_denoiser_mode_change ( cpi ) ; //<S2SV> } //<S2SV> # endif //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> if ( cpi -> b_multi_threaded ) //<S2SV> { //<S2SV> sem_post ( & cpi -> h_event_start_lpf ) ; //<S2SV> cpi -> b_lpf_running = 1 ; //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> { //<S2SV> vp8_loopfilter_frame ( cpi , cm ) ; //<S2SV> } //<S2SV> update_reference_frames ( cpi ) ; //<S2SV> # ifdef OUTPUT_YUV_DENOISED //<S2SV> vp8_write_yuv_frame ( yuv_denoised_file , //<S2SV> & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] ) ; //<S2SV> # endif //<S2SV> # if ! ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) //<S2SV> if ( cpi -> oxcf . error_resilient_mode ) //<S2SV> { //<S2SV> cm -> refresh_entropy_probs = 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> if ( cpi -> b_multi_threaded ) //<S2SV> sem_wait ( & cpi -> h_event_end_lpf ) ; //<S2SV> # endif //<S2SV> vp8_pack_bitstream ( cpi , dest , dest_end , size ) ; //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> if ( cpi -> b_lpf_running && cpi -> b_calculate_psnr ) //<S2SV> { //<S2SV> sem_wait ( & cpi -> h_event_end_lpf ) ; //<S2SV> cpi -> b_lpf_running = 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> cm -> last_frame_type = cm -> frame_type ; //<S2SV> cpi -> total_byte_count += ( * size ) ; //<S2SV> cpi -> projected_frame_size = ( * size ) << 3 ; //<S2SV> if ( cpi -> oxcf . number_of_layers > 1 ) //<S2SV> { //<S2SV> unsigned int i ; //<S2SV> for ( i = cpi -> current_layer + 1 ; i < cpi -> oxcf . number_of_layers ; i ++ ) //<S2SV> cpi -> layer_context [ i ] . total_byte_count += ( * size ) ; //<S2SV> } //<S2SV> if ( ! active_worst_qchanged ) //<S2SV> vp8_update_rate_correction_factors ( cpi , 2 ) ; //<S2SV> cpi -> last_q [ cm -> frame_type ] = cm -> base_qindex ; //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> vp8_adjust_key_frame_context ( cpi ) ; //<S2SV> } //<S2SV> if ( cm -> frame_type != KEY_FRAME ) //<S2SV> cpi -> avg_frame_qindex = ( 2 + 3 * cpi -> avg_frame_qindex + cm -> base_qindex ) >> 2 ; //<S2SV> if ( ( cm -> frame_type != KEY_FRAME ) && ( ( cpi -> oxcf . number_of_layers > 1 ) || //<S2SV> ( ! cm -> refresh_golden_frame && ! cm -> refresh_alt_ref_frame ) ) ) //<S2SV> { //<S2SV> cpi -> ni_frames ++ ; //<S2SV> if ( cpi -> pass == 2 ) //<S2SV> { //<S2SV> cpi -> ni_tot_qi += Q ; //<S2SV> cpi -> ni_av_qi = ( cpi -> ni_tot_qi / cpi -> ni_frames ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( cpi -> ni_frames > 150 ) //<S2SV> { //<S2SV> cpi -> ni_tot_qi += Q ; //<S2SV> cpi -> ni_av_qi = ( cpi -> ni_tot_qi / cpi -> ni_frames ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> ni_tot_qi += Q ; //<S2SV> cpi -> ni_av_qi = ( ( cpi -> ni_tot_qi / cpi -> ni_frames ) + cpi -> worst_quality + 1 ) / 2 ; //<S2SV> } //<S2SV> if ( Q > cpi -> ni_av_qi ) //<S2SV> cpi -> ni_av_qi = Q - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! cm -> show_frame ) //<S2SV> cpi -> bits_off_target -= cpi -> projected_frame_size ; //<S2SV> else //<S2SV> cpi -> bits_off_target += cpi -> av_per_frame_bandwidth - cpi -> projected_frame_size ; //<S2SV> if ( cpi -> bits_off_target > cpi -> oxcf . maximum_buffer_size ) //<S2SV> cpi -> bits_off_target = cpi -> oxcf . maximum_buffer_size ; //<S2SV> if ( cpi -> drop_frames_allowed == 0 && cpi -> oxcf . screen_content_mode && //<S2SV> cpi -> bits_off_target < - cpi -> oxcf . maximum_buffer_size ) //<S2SV> cpi -> bits_off_target = - cpi -> oxcf . maximum_buffer_size ; //<S2SV> cpi -> rolling_target_bits = ( ( cpi -> rolling_target_bits * 3 ) + cpi -> this_frame_target + 2 ) / 4 ; //<S2SV> cpi -> rolling_actual_bits = ( ( cpi -> rolling_actual_bits * 3 ) + cpi -> projected_frame_size + 2 ) / 4 ; //<S2SV> cpi -> long_rolling_target_bits = ( ( cpi -> long_rolling_target_bits * 31 ) + cpi -> this_frame_target + 16 ) / 32 ; //<S2SV> cpi -> long_rolling_actual_bits = ( ( cpi -> long_rolling_actual_bits * 31 ) + cpi -> projected_frame_size + 16 ) / 32 ; //<S2SV> cpi -> total_actual_bits += cpi -> projected_frame_size ; //<S2SV> cpi -> total_target_vs_actual += ( cpi -> this_frame_target - cpi -> projected_frame_size ) ; //<S2SV> cpi -> buffer_level = cpi -> bits_off_target ; //<S2SV> if ( cpi -> oxcf . number_of_layers > 1 ) //<S2SV> { //<S2SV> unsigned int i ; //<S2SV> for ( i = cpi -> current_layer + 1 ; i < cpi -> oxcf . number_of_layers ; i ++ ) //<S2SV> { //<S2SV> LAYER_CONTEXT * lc = & cpi -> layer_context [ i ] ; //<S2SV> int bits_off_for_this_layer = //<S2SV> ( int ) ( lc -> target_bandwidth / lc -> framerate - //<S2SV> cpi -> projected_frame_size ) ; //<S2SV> lc -> bits_off_target += bits_off_for_this_layer ; //<S2SV> if ( lc -> bits_off_target > lc -> maximum_buffer_size ) //<S2SV> lc -> bits_off_target = lc -> maximum_buffer_size ; //<S2SV> lc -> total_actual_bits += cpi -> projected_frame_size ; //<S2SV> lc -> total_target_vs_actual += bits_off_for_this_layer ; //<S2SV> lc -> buffer_level = lc -> bits_off_target ; //<S2SV> } //<S2SV> } //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> cpi -> twopass . kf_group_bits += cpi -> this_frame_target - cpi -> projected_frame_size ; //<S2SV> if ( cpi -> twopass . kf_group_bits < 0 ) //<S2SV> cpi -> twopass . kf_group_bits = 0 ; //<S2SV> } //<S2SV> else if ( cm -> refresh_golden_frame || cm -> refresh_alt_ref_frame ) //<S2SV> { //<S2SV> cpi -> twopass . gf_group_bits += cpi -> this_frame_target - cpi -> projected_frame_size ; //<S2SV> if ( cpi -> twopass . gf_group_bits < 0 ) //<S2SV> cpi -> twopass . gf_group_bits = 0 ; //<S2SV> } //<S2SV> if ( cm -> frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> if ( cpi -> common . refresh_alt_ref_frame ) //<S2SV> { //<S2SV> cpi -> last_skip_false_probs [ 2 ] = cpi -> prob_skip_false ; //<S2SV> cpi -> last_skip_probs_q [ 2 ] = cm -> base_qindex ; //<S2SV> } //<S2SV> else if ( cpi -> common . refresh_golden_frame ) //<S2SV> { //<S2SV> cpi -> last_skip_false_probs [ 1 ] = cpi -> prob_skip_false ; //<S2SV> cpi -> last_skip_probs_q [ 1 ] = cm -> base_qindex ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> cpi -> last_skip_false_probs [ 0 ] = cpi -> prob_skip_false ; //<S2SV> cpi -> last_skip_probs_q [ 0 ] = cm -> base_qindex ; //<S2SV> cpi -> base_skip_false_prob [ cm -> base_qindex ] = cpi -> prob_skip_false ; //<S2SV> } //<S2SV> } //<S2SV> # if 0 && CONFIG_INTERNAL_STATS //<S2SV> { //<S2SV> FILE * f = fopen ( "tmp.stt" , "a" ) ; //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> if ( cpi -> twopass . total_left_stats . coded_error != 0.0 ) //<S2SV> fprintf ( f , "%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10" PRId64 "<S2SV_blank>%10" PRId64 //<S2SV> "%10" PRId64 "<S2SV_blank>%10d<S2SV_blank>%6d<S2SV_blank>%6d<S2SV_blank>%6d<S2SV_blank>%6d<S2SV_blank>%5d<S2SV_blank>%5d<S2SV_blank>%5d<S2SV_blank>%8d<S2SV_blank>" //<S2SV> "%8.2lf<S2SV_blank>%" PRId64 "<S2SV_blank>%10.3lf<S2SV_blank>%10" PRId64 "<S2SV_blank>%8d\\n" , //<S2SV> cpi -> common . current_video_frame , cpi -> this_frame_target , //<S2SV> cpi -> projected_frame_size , //<S2SV> ( cpi -> projected_frame_size - cpi -> this_frame_target ) , //<S2SV> cpi -> total_target_vs_actual , //<S2SV> cpi -> buffer_level , //<S2SV> ( cpi -> oxcf . starting_buffer_level - cpi -> bits_off_target ) , //<S2SV> cpi -> total_actual_bits , cm -> base_qindex , //<S2SV> cpi -> active_best_quality , cpi -> active_worst_quality , //<S2SV> cpi -> ni_av_qi , cpi -> cq_target_quality , //<S2SV> cm -> refresh_golden_frame , cm -> refresh_alt_ref_frame , //<S2SV> cm -> frame_type , cpi -> gfu_boost , //<S2SV> cpi -> twopass . est_max_qcorrection_factor , //<S2SV> cpi -> twopass . bits_left , //<S2SV> cpi -> twopass . total_left_stats . coded_error , //<S2SV> ( double ) cpi -> twopass . bits_left / //<S2SV> cpi -> twopass . total_left_stats . coded_error , //<S2SV> cpi -> tot_recode_hits ) ; //<S2SV> else //<S2SV> fprintf ( f , "%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10" PRId64 "<S2SV_blank>%10" PRId64 //<S2SV> "%10" PRId64 "<S2SV_blank>%10d<S2SV_blank>%6d<S2SV_blank>%6d<S2SV_blank>%6d<S2SV_blank>%6d<S2SV_blank>%5d<S2SV_blank>%5d<S2SV_blank>%5d<S2SV_blank>%8d<S2SV_blank>" //<S2SV> "%8.2lf<S2SV_blank>%" PRId64 "<S2SV_blank>%10.3lf<S2SV_blank>%8d\\n" , //<S2SV> cpi -> common . current_video_frame , cpi -> this_frame_target , //<S2SV> cpi -> projected_frame_size , //<S2SV> ( cpi -> projected_frame_size - cpi -> this_frame_target ) , //<S2SV> cpi -> total_target_vs_actual , //<S2SV> cpi -> buffer_level , //<S2SV> ( cpi -> oxcf . starting_buffer_level - cpi -> bits_off_target ) , //<S2SV> cpi -> total_actual_bits , cm -> base_qindex , //<S2SV> cpi -> active_best_quality , cpi -> active_worst_quality , //<S2SV> cpi -> ni_av_qi , cpi -> cq_target_quality , //<S2SV> cm -> refresh_golden_frame , cm -> refresh_alt_ref_frame , //<S2SV> cm -> frame_type , cpi -> gfu_boost , //<S2SV> cpi -> twopass . est_max_qcorrection_factor , //<S2SV> cpi -> twopass . bits_left , //<S2SV> cpi -> twopass . total_left_stats . coded_error , //<S2SV> cpi -> tot_recode_hits ) ; //<S2SV> fclose ( f ) ; //<S2SV> { //<S2SV> FILE * fmodes = fopen ( "Modes.stt" , "a" ) ; //<S2SV> fprintf ( fmodes , "%6d:%1d:%1d:%1d<S2SV_blank>" , //<S2SV> cpi -> common . current_video_frame , //<S2SV> cm -> frame_type , cm -> refresh_golden_frame , //<S2SV> cm -> refresh_alt_ref_frame ) ; //<S2SV> fprintf ( fmodes , "\\n" ) ; //<S2SV> fclose ( fmodes ) ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> if ( cm -> refresh_golden_frame == 1 ) //<S2SV> cm -> frame_flags = cm -> frame_flags | FRAMEFLAGS_GOLDEN ; //<S2SV> else //<S2SV> cm -> frame_flags = cm -> frame_flags & ~ FRAMEFLAGS_GOLDEN ; //<S2SV> if ( cm -> refresh_alt_ref_frame == 1 ) //<S2SV> cm -> frame_flags = cm -> frame_flags | FRAMEFLAGS_ALTREF ; //<S2SV> else //<S2SV> cm -> frame_flags = cm -> frame_flags & ~ FRAMEFLAGS_ALTREF ; //<S2SV> if ( cm -> refresh_last_frame & cm -> refresh_golden_frame ) //<S2SV> cpi -> gold_is_last = 1 ; //<S2SV> else if ( cm -> refresh_last_frame ^ cm -> refresh_golden_frame ) //<S2SV> cpi -> gold_is_last = 0 ; //<S2SV> if ( cm -> refresh_last_frame & cm -> refresh_alt_ref_frame ) //<S2SV> cpi -> alt_is_last = 1 ; //<S2SV> else if ( cm -> refresh_last_frame ^ cm -> refresh_alt_ref_frame ) //<S2SV> cpi -> alt_is_last = 0 ; //<S2SV> if ( cm -> refresh_alt_ref_frame & cm -> refresh_golden_frame ) //<S2SV> cpi -> gold_is_alt = 1 ; //<S2SV> else if ( cm -> refresh_alt_ref_frame ^ cm -> refresh_golden_frame ) //<S2SV> cpi -> gold_is_alt = 0 ; //<S2SV> cpi -> ref_frame_flags = VP8_ALTR_FRAME | VP8_GOLD_FRAME | VP8_LAST_FRAME ; //<S2SV> if ( cpi -> gold_is_last ) //<S2SV> cpi -> ref_frame_flags &= ~ VP8_GOLD_FRAME ; //<S2SV> if ( cpi -> alt_is_last ) //<S2SV> cpi -> ref_frame_flags &= ~ VP8_ALTR_FRAME ; //<S2SV> if ( cpi -> gold_is_alt ) //<S2SV> cpi -> ref_frame_flags &= ~ VP8_ALTR_FRAME ; //<S2SV> if ( ! cpi -> oxcf . error_resilient_mode ) //<S2SV> { //<S2SV> if ( cpi -> oxcf . play_alternate && cm -> refresh_alt_ref_frame && ( cm -> frame_type != KEY_FRAME ) ) //<S2SV> update_alt_ref_frame_stats ( cpi ) ; //<S2SV> else //<S2SV> update_golden_frame_stats ( cpi ) ; //<S2SV> } //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> * frame_flags = cm -> frame_flags | FRAMEFLAGS_KEY ; //<S2SV> cm -> frame_type = INTER_FRAME ; //<S2SV> cpi -> last_frame_percent_intra = 100 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * frame_flags = cm -> frame_flags & ~ FRAMEFLAGS_KEY ; //<S2SV> cpi -> last_frame_percent_intra = cpi -> this_frame_percent_intra ; //<S2SV> } //<S2SV> cpi -> mb . e_mbd . update_mb_segmentation_map = 0 ; //<S2SV> cpi -> mb . e_mbd . update_mb_segmentation_data = 0 ; //<S2SV> cpi -> mb . e_mbd . mode_ref_lf_delta_update = 0 ; //<S2SV> if ( cm -> show_frame ) //<S2SV> { //<S2SV> cm -> current_video_frame ++ ; //<S2SV> cpi -> frames_since_key ++ ; //<S2SV> cpi -> temporal_pattern_counter ++ ; //<S2SV> } //<S2SV> # if 0 //<S2SV> { //<S2SV> char filename [ 512 ] ; //<S2SV> FILE * recon_file ; //<S2SV> sprintf ( filename , "enc%04d.yuv" , ( int ) cm -> current_video_frame ) ; //<S2SV> recon_file = fopen ( filename , "wb" ) ; //<S2SV> fwrite ( cm -> yv12_fb [ cm -> lst_fb_idx ] . buffer_alloc , //<S2SV> cm -> yv12_fb [ cm -> lst_fb_idx ] . frame_size , 1 , recon_file ) ; //<S2SV> fclose ( recon_file ) ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> 