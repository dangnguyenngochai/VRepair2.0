static vpx_codec_err_t ctrl_get_reference ( vpx_codec_alg_priv_t * ctx , //<S2SV> va_list args ) { //<S2SV> vp9_ref_frame_t * data = va_arg ( args , vp9_ref_frame_t * ) ; //<S2SV> if ( ctx -> frame_parallel_decode ) { //<S2SV> set_error_detail ( ctx , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; //<S2SV> return VPX_CODEC_INCAPABLE ; //<S2SV> } //<S2SV> if ( data ) { //<S2SV> YV12_BUFFER_CONFIG * fb ; //<S2SV> VPxWorker * const worker = ctx -> frame_workers ; //<S2SV> FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; //<S2SV> fb = get_ref_frame ( & frame_worker_data -> pbi -> common , data -> idx ) ; //<S2SV> if ( fb == NULL ) return VPX_CODEC_ERROR ; //<S2SV> yuvconfig2image ( & data -> img , fb , NULL ) ; //<S2SV> return VPX_CODEC_OK ; //<S2SV> } else { //<S2SV> return VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> } //<S2SV> 