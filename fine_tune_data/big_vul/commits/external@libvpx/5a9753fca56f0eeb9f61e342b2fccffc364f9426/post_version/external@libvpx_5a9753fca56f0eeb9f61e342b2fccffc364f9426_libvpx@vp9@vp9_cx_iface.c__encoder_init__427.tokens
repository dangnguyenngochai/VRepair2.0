static vpx_codec_err_t encoder_init ( vpx_codec_ctx_t * ctx , //<S2SV> vpx_codec_priv_enc_mr_cfg_t * data ) { //<S2SV> vpx_codec_err_t res = VPX_CODEC_OK ; //<S2SV> ( void ) data ; //<S2SV> if ( ctx -> priv == NULL ) { //<S2SV> vpx_codec_alg_priv_t * const priv = vpx_calloc ( 1 , sizeof ( * priv ) ) ; //<S2SV> if ( priv == NULL ) //<S2SV> return VPX_CODEC_MEM_ERROR ; //<S2SV> ctx -> priv = ( vpx_codec_priv_t * ) priv ; //<S2SV> ctx -> priv -> init_flags = ctx -> init_flags ; //<S2SV> ctx -> priv -> enc . total_encoders = 1 ; //<S2SV> priv -> buffer_pool = //<S2SV> ( BufferPool * ) vpx_calloc ( 1 , sizeof ( BufferPool ) ) ; //<S2SV> if ( priv -> buffer_pool == NULL ) //<S2SV> return VPX_CODEC_MEM_ERROR ; //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> if ( pthread_mutex_init ( & priv -> buffer_pool -> pool_mutex , NULL ) ) { //<S2SV> return VPX_CODEC_MEM_ERROR ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ctx -> config . enc ) { //<S2SV> priv -> cfg = * ctx -> config . enc ; //<S2SV> ctx -> config . enc = & priv -> cfg ; //<S2SV> } //<S2SV> priv -> extra_cfg = default_extra_cfg ; //<S2SV> once ( vp9_initialize_enc ) ; //<S2SV> res = validate_config ( priv , & priv -> cfg , & priv -> extra_cfg ) ; //<S2SV> if ( res == VPX_CODEC_OK ) { //<S2SV> set_encoder_config ( & priv -> oxcf , & priv -> cfg , & priv -> extra_cfg ) ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> priv -> oxcf . use_highbitdepth = //<S2SV> ( ctx -> init_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ? 1 : 0 ; //<S2SV> # endif //<S2SV> priv -> cpi = vp9_create_compressor ( & priv -> oxcf , priv -> buffer_pool ) ; //<S2SV> if ( priv -> cpi == NULL ) //<S2SV> res = VPX_CODEC_MEM_ERROR ; //<S2SV> else //<S2SV> priv -> cpi -> output_pkt_list = & priv -> pkt_list . head ; //<S2SV> } //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 