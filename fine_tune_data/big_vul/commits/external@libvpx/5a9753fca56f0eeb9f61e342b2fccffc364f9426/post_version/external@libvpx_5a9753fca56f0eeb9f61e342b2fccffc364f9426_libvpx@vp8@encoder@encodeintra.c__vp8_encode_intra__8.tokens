int vp8_encode_intra ( VP8_COMP * cpi , MACROBLOCK * x , int use_dc_pred ) //<S2SV> { //<S2SV> int i ; //<S2SV> int intra_pred_var = 0 ; //<S2SV> ( void ) cpi ; //<S2SV> if ( use_dc_pred ) //<S2SV> { //<S2SV> x -> e_mbd . mode_info_context -> mbmi . mode = DC_PRED ; //<S2SV> x -> e_mbd . mode_info_context -> mbmi . uv_mode = DC_PRED ; //<S2SV> x -> e_mbd . mode_info_context -> mbmi . ref_frame = INTRA_FRAME ; //<S2SV> vp8_encode_intra16x16mby ( x ) ; //<S2SV> vp8_inverse_transform_mby ( & x -> e_mbd ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> for ( i = 0 ; i < 16 ; i ++ ) //<S2SV> { //<S2SV> x -> e_mbd . block [ i ] . bmi . as_mode = B_DC_PRED ; //<S2SV> vp8_encode_intra4x4block ( x , i ) ; //<S2SV> } //<S2SV> } //<S2SV> intra_pred_var = vpx_get_mb_ss ( x -> src_diff ) ; //<S2SV> return intra_pred_var ; //<S2SV> } //<S2SV> 