static int compare_img ( const vpx_image_t * const img1 , //<S2SV> const vpx_image_t * const img2 ) { //<S2SV> uint32_t l_w = img1 -> d_w ; //<S2SV> uint32_t c_w = //<S2SV> ( img1 -> d_w + img1 -> x_chroma_shift ) >> img1 -> x_chroma_shift ; //<S2SV> const uint32_t c_h = //<S2SV> ( img1 -> d_h + img1 -> y_chroma_shift ) >> img1 -> y_chroma_shift ; //<S2SV> uint32_t i ; //<S2SV> int match = 1 ; //<S2SV> match &= ( img1 -> fmt == img2 -> fmt ) ; //<S2SV> match &= ( img1 -> d_w == img2 -> d_w ) ; //<S2SV> match &= ( img1 -> d_h == img2 -> d_h ) ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( img1 -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) { //<S2SV> l_w *= 2 ; //<S2SV> c_w *= 2 ; //<S2SV> } //<S2SV> # endif //<S2SV> for ( i = 0 ; i < img1 -> d_h ; ++ i ) //<S2SV> match &= ( memcmp ( img1 -> planes [ VPX_PLANE_Y ] + i * img1 -> stride [ VPX_PLANE_Y ] , //<S2SV> img2 -> planes [ VPX_PLANE_Y ] + i * img2 -> stride [ VPX_PLANE_Y ] , //<S2SV> l_w ) == 0 ) ; //<S2SV> for ( i = 0 ; i < c_h ; ++ i ) //<S2SV> match &= ( memcmp ( img1 -> planes [ VPX_PLANE_U ] + i * img1 -> stride [ VPX_PLANE_U ] , //<S2SV> img2 -> planes [ VPX_PLANE_U ] + i * img2 -> stride [ VPX_PLANE_U ] , //<S2SV> c_w ) == 0 ) ; //<S2SV> for ( i = 0 ; i < c_h ; ++ i ) //<S2SV> match &= ( memcmp ( img1 -> planes [ VPX_PLANE_V ] + i * img1 -> stride [ VPX_PLANE_V ] , //<S2SV> img2 -> planes [ VPX_PLANE_V ] + i * img2 -> stride [ VPX_PLANE_V ] , //<S2SV> c_w ) == 0 ) ; //<S2SV> return match ; //<S2SV> } //<S2SV> 