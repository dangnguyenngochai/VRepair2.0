static void model_rd_for_sb ( VP9_COMP * cpi , BLOCK_SIZE bsize , //<S2SV> MACROBLOCK * x , MACROBLOCKD * xd , //<S2SV> int * out_rate_sum , int64_t * out_dist_sum , //<S2SV> int * skip_txfm_sb , int64_t * skip_sse_sb ) { //<S2SV> int i ; //<S2SV> int64_t rate_sum = 0 ; //<S2SV> int64_t dist_sum = 0 ; //<S2SV> const int ref = xd -> mi [ 0 ] -> mbmi . ref_frame [ 0 ] ; //<S2SV> unsigned int sse ; //<S2SV> unsigned int var = 0 ; //<S2SV> unsigned int sum_sse = 0 ; //<S2SV> int64_t total_sse = 0 ; //<S2SV> int skip_flag = 1 ; //<S2SV> const int shift = 6 ; //<S2SV> int rate ; //<S2SV> int64_t dist ; //<S2SV> const int dequant_shift = //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ? //<S2SV> xd -> bd - 5 : //<S2SV> # endif //<S2SV> 3 ; //<S2SV> x -> pred_sse [ ref ] = 0 ; //<S2SV> for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { //<S2SV> struct macroblock_plane * const p = & x -> plane [ i ] ; //<S2SV> struct macroblockd_plane * const pd = & xd -> plane [ i ] ; //<S2SV> const BLOCK_SIZE bs = get_plane_block_size ( bsize , pd ) ; //<S2SV> const TX_SIZE max_tx_size = max_txsize_lookup [ bs ] ; //<S2SV> const BLOCK_SIZE unit_size = txsize_to_bsize [ max_tx_size ] ; //<S2SV> const int64_t dc_thr = p -> quant_thred [ 0 ] >> shift ; //<S2SV> const int64_t ac_thr = p -> quant_thred [ 1 ] >> shift ; //<S2SV> const int64_t low_dc_thr = MIN ( 50 , dc_thr >> 2 ) ; //<S2SV> const int64_t low_ac_thr = MIN ( 80 , ac_thr >> 2 ) ; //<S2SV> int bw = 1 << ( b_width_log2_lookup [ bs ] - b_width_log2_lookup [ unit_size ] ) ; //<S2SV> int bh = 1 << ( b_height_log2_lookup [ bs ] - b_width_log2_lookup [ unit_size ] ) ; //<S2SV> int idx , idy ; //<S2SV> int lw = b_width_log2_lookup [ unit_size ] + 2 ; //<S2SV> int lh = b_height_log2_lookup [ unit_size ] + 2 ; //<S2SV> sum_sse = 0 ; //<S2SV> for ( idy = 0 ; idy < bh ; ++ idy ) { //<S2SV> for ( idx = 0 ; idx < bw ; ++ idx ) { //<S2SV> uint8_t * src = p -> src . buf + ( idy * p -> src . stride << lh ) + ( idx << lw ) ; //<S2SV> uint8_t * dst = pd -> dst . buf + ( idy * pd -> dst . stride << lh ) + ( idx << lh ) ; //<S2SV> int block_idx = ( idy << 1 ) + idx ; //<S2SV> int low_err_skip = 0 ; //<S2SV> var = cpi -> fn_ptr [ unit_size ] . vf ( src , p -> src . stride , //<S2SV> dst , pd -> dst . stride , & sse ) ; //<S2SV> x -> bsse [ ( i << 2 ) + block_idx ] = sse ; //<S2SV> sum_sse += sse ; //<S2SV> x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_NONE ; //<S2SV> if ( ! x -> select_tx_size ) { //<S2SV> if ( var < ac_thr || var == 0 ) { //<S2SV> x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_AC_ONLY ; //<S2SV> if ( sse - var < dc_thr || sse == var ) { //<S2SV> x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_AC_DC ; //<S2SV> if ( ! sse || ( var < low_ac_thr && sse - var < low_dc_thr ) ) //<S2SV> low_err_skip = 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( skip_flag && ! low_err_skip ) //<S2SV> skip_flag = 0 ; //<S2SV> if ( i == 0 ) //<S2SV> x -> pred_sse [ ref ] += sse ; //<S2SV> } //<S2SV> } //<S2SV> total_sse += sum_sse ; //<S2SV> if ( cpi -> sf . simple_model_rd_from_var ) { //<S2SV> int64_t rate ; //<S2SV> const int64_t square_error = sum_sse ; //<S2SV> int quantizer = ( pd -> dequant [ 1 ] >> dequant_shift ) ; //<S2SV> if ( quantizer < 120 ) //<S2SV> rate = ( square_error * ( 280 - quantizer ) ) >> 8 ; //<S2SV> else //<S2SV> rate = 0 ; //<S2SV> dist = ( square_error * quantizer ) >> 8 ; //<S2SV> rate_sum += rate ; //<S2SV> dist_sum += dist ; //<S2SV> } else { //<S2SV> vp9_model_rd_from_var_lapndz ( sum_sse , num_pels_log2_lookup [ bs ] , //<S2SV> pd -> dequant [ 1 ] >> dequant_shift , //<S2SV> & rate , & dist ) ; //<S2SV> rate_sum += rate ; //<S2SV> dist_sum += dist ; //<S2SV> } //<S2SV> } //<S2SV> * skip_txfm_sb = skip_flag ; //<S2SV> * skip_sse_sb = total_sse << 4 ; //<S2SV> * out_rate_sum = ( int ) rate_sum ; //<S2SV> * out_dist_sum = dist_sum << 4 ; //<S2SV> } //<S2SV> 