static void parse_global_config ( struct VpxEncoderConfig * global , char * * argv ) { //<S2SV> char * * argi , * * argj ; //<S2SV> struct arg arg ; //<S2SV> const int num_encoder = get_vpx_encoder_count ( ) ; //<S2SV> if ( num_encoder < 1 ) //<S2SV> die ( "Error:<S2SV_blank>no<S2SV_blank>valid<S2SV_blank>encoder<S2SV_blank>available\\n" ) ; //<S2SV> memset ( global , 0 , sizeof ( * global ) ) ; //<S2SV> global -> codec = get_vpx_encoder_by_index ( num_encoder - 1 ) ; //<S2SV> global -> passes = 0 ; //<S2SV> global -> color_type = I420 ; //<S2SV> global -> deadline = VPX_DL_GOOD_QUALITY ; //<S2SV> for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg . argv_step ) { //<S2SV> arg . argv_step = 1 ; //<S2SV> if ( arg_match ( & arg , & codecarg , argi ) ) { //<S2SV> global -> codec = get_vpx_encoder_by_name ( arg . val ) ; //<S2SV> if ( ! global -> codec ) //<S2SV> die ( "Error:<S2SV_blank>Unrecognized<S2SV_blank>argument<S2SV_blank>(%s)<S2SV_blank>to<S2SV_blank>--codec\\n" , arg . val ) ; //<S2SV> } else if ( arg_match ( & arg , & passes , argi ) ) { //<S2SV> global -> passes = arg_parse_uint ( & arg ) ; //<S2SV> if ( global -> passes < 1 || global -> passes > 2 ) //<S2SV> die ( "Error:<S2SV_blank>Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>passes<S2SV_blank>(%d)\\n" , global -> passes ) ; //<S2SV> } else if ( arg_match ( & arg , & pass_arg , argi ) ) { //<S2SV> global -> pass = arg_parse_uint ( & arg ) ; //<S2SV> if ( global -> pass < 1 || global -> pass > 2 ) //<S2SV> die ( "Error:<S2SV_blank>Invalid<S2SV_blank>pass<S2SV_blank>selected<S2SV_blank>(%d)\\n" , //<S2SV> global -> pass ) ; //<S2SV> } else if ( arg_match ( & arg , & usage , argi ) ) //<S2SV> global -> usage = arg_parse_uint ( & arg ) ; //<S2SV> else if ( arg_match ( & arg , & deadline , argi ) ) //<S2SV> global -> deadline = arg_parse_uint ( & arg ) ; //<S2SV> else if ( arg_match ( & arg , & best_dl , argi ) ) //<S2SV> global -> deadline = VPX_DL_BEST_QUALITY ; //<S2SV> else if ( arg_match ( & arg , & good_dl , argi ) ) //<S2SV> global -> deadline = VPX_DL_GOOD_QUALITY ; //<S2SV> else if ( arg_match ( & arg , & rt_dl , argi ) ) //<S2SV> global -> deadline = VPX_DL_REALTIME ; //<S2SV> else if ( arg_match ( & arg , & use_yv12 , argi ) ) //<S2SV> global -> color_type = YV12 ; //<S2SV> else if ( arg_match ( & arg , & use_i420 , argi ) ) //<S2SV> global -> color_type = I420 ; //<S2SV> else if ( arg_match ( & arg , & use_i422 , argi ) ) //<S2SV> global -> color_type = I422 ; //<S2SV> else if ( arg_match ( & arg , & use_i444 , argi ) ) //<S2SV> global -> color_type = I444 ; //<S2SV> else if ( arg_match ( & arg , & use_i440 , argi ) ) //<S2SV> global -> color_type = I440 ; //<S2SV> else if ( arg_match ( & arg , & quietarg , argi ) ) //<S2SV> global -> quiet = 1 ; //<S2SV> else if ( arg_match ( & arg , & verbosearg , argi ) ) //<S2SV> global -> verbose = 1 ; //<S2SV> else if ( arg_match ( & arg , & limit , argi ) ) //<S2SV> global -> limit = arg_parse_uint ( & arg ) ; //<S2SV> else if ( arg_match ( & arg , & skip , argi ) ) //<S2SV> global -> skip_frames = arg_parse_uint ( & arg ) ; //<S2SV> else if ( arg_match ( & arg , & psnrarg , argi ) ) //<S2SV> global -> show_psnr = 1 ; //<S2SV> else if ( arg_match ( & arg , & recontest , argi ) ) //<S2SV> global -> test_decode = arg_parse_enum_or_int ( & arg ) ; //<S2SV> else if ( arg_match ( & arg , & framerate , argi ) ) { //<S2SV> global -> framerate = arg_parse_rational ( & arg ) ; //<S2SV> validate_positive_rational ( arg . name , & global -> framerate ) ; //<S2SV> global -> have_framerate = 1 ; //<S2SV> } else if ( arg_match ( & arg , & out_part , argi ) ) //<S2SV> global -> out_part = 1 ; //<S2SV> else if ( arg_match ( & arg , & debugmode , argi ) ) //<S2SV> global -> debug = 1 ; //<S2SV> else if ( arg_match ( & arg , & q_hist_n , argi ) ) //<S2SV> global -> show_q_hist_buckets = arg_parse_uint ( & arg ) ; //<S2SV> else if ( arg_match ( & arg , & rate_hist_n , argi ) ) //<S2SV> global -> show_rate_hist_buckets = arg_parse_uint ( & arg ) ; //<S2SV> else if ( arg_match ( & arg , & disable_warnings , argi ) ) //<S2SV> global -> disable_warnings = 1 ; //<S2SV> else if ( arg_match ( & arg , & disable_warning_prompt , argi ) ) //<S2SV> global -> disable_warning_prompt = 1 ; //<S2SV> else //<S2SV> argj ++ ; //<S2SV> } //<S2SV> if ( global -> pass ) { //<S2SV> if ( global -> pass > global -> passes ) { //<S2SV> warn ( "Assuming<S2SV_blank>--pass=%d<S2SV_blank>implies<S2SV_blank>--passes=%d\\n" , //<S2SV> global -> pass , global -> pass ) ; //<S2SV> global -> passes = global -> pass ; //<S2SV> } //<S2SV> } //<S2SV> if ( global -> passes == 0 ) { //<S2SV> # if CONFIG_VP9_ENCODER || CONFIG_VP10_ENCODER //<S2SV> if ( global -> codec != NULL && global -> codec -> name != NULL ) //<S2SV> global -> passes = ( strcmp ( global -> codec -> name , "vp9" ) == 0 && //<S2SV> global -> deadline != VPX_DL_REALTIME ) ? 2 : 1 ; //<S2SV> # else //<S2SV> global -> passes = 1 ; //<S2SV> # endif //<S2SV> } //<S2SV> if ( global -> deadline == VPX_DL_REALTIME && //<S2SV> global -> passes > 1 ) { //<S2SV> warn ( "Enforcing<S2SV_blank>one-pass<S2SV_blank>encoding<S2SV_blank>in<S2SV_blank>realtime<S2SV_blank>mode\\n" ) ; //<S2SV> global -> passes = 1 ; //<S2SV> } //<S2SV> } //<S2SV> 