static void encode_mv_component ( vpx_writer * w , int comp , //<S2SV> const nmv_component * mvcomp , int usehp ) { //<S2SV> int offset ; //<S2SV> const int sign = comp < 0 ; //<S2SV> const int mag = sign ? - comp : comp ; //<S2SV> const int mv_class = vp9_get_mv_class ( mag - 1 , & offset ) ; //<S2SV> const int d = offset >> 3 ; //<S2SV> const int fr = ( offset >> 1 ) & 3 ; //<S2SV> const int hp = offset & 1 ; //<S2SV> assert ( comp != 0 ) ; //<S2SV> vpx_write ( w , sign , mvcomp -> sign ) ; //<S2SV> vp9_write_token ( w , vp9_mv_class_tree , mvcomp -> classes , //<S2SV> & mv_class_encodings [ mv_class ] ) ; //<S2SV> if ( mv_class == MV_CLASS_0 ) { //<S2SV> vp9_write_token ( w , vp9_mv_class0_tree , mvcomp -> class0 , //<S2SV> & mv_class0_encodings [ d ] ) ; //<S2SV> } else { //<S2SV> int i ; //<S2SV> const int n = mv_class + CLASS0_BITS - 1 ; //<S2SV> for ( i = 0 ; i < n ; ++ i ) //<S2SV> vpx_write ( w , ( d >> i ) & 1 , mvcomp -> bits [ i ] ) ; //<S2SV> } //<S2SV> vp9_write_token ( w , vp9_mv_fp_tree , //<S2SV> mv_class == MV_CLASS_0 ? mvcomp -> class0_fp [ d ] : mvcomp -> fp , //<S2SV> & mv_fp_encodings [ fr ] ) ; //<S2SV> if ( usehp ) //<S2SV> vpx_write ( w , hp , //<S2SV> mv_class == MV_CLASS_0 ? mvcomp -> class0_hp : mvcomp -> hp ) ; //<S2SV> } //<S2SV> 