static void resize_multistep ( const uint8_t * const input , //<S2SV> int length , //<S2SV> uint8_t * output , //<S2SV> int olength , //<S2SV> uint8_t * buf ) { //<S2SV> int steps ; //<S2SV> if ( length == olength ) { //<S2SV> memcpy ( output , input , sizeof ( output [ 0 ] ) * length ) ; //<S2SV> return ; //<S2SV> } //<S2SV> steps = get_down2_steps ( length , olength ) ; //<S2SV> if ( steps > 0 ) { //<S2SV> int s ; //<S2SV> uint8_t * out = NULL ; //<S2SV> uint8_t * tmpbuf = NULL ; //<S2SV> uint8_t * otmp , * otmp2 ; //<S2SV> int filteredlength = length ; //<S2SV> if ( ! tmpbuf ) { //<S2SV> tmpbuf = ( uint8_t * ) malloc ( sizeof ( uint8_t ) * length ) ; //<S2SV> otmp = tmpbuf ; //<S2SV> } else { //<S2SV> otmp = buf ; //<S2SV> } //<S2SV> otmp2 = otmp + get_down2_length ( length , 1 ) ; //<S2SV> for ( s = 0 ; s < steps ; ++ s ) { //<S2SV> const int proj_filteredlength = get_down2_length ( filteredlength , 1 ) ; //<S2SV> const uint8_t * const in = ( s == 0 ? input : out ) ; //<S2SV> if ( s == steps - 1 && proj_filteredlength == olength ) //<S2SV> out = output ; //<S2SV> else //<S2SV> out = ( s & 1 ? otmp2 : otmp ) ; //<S2SV> if ( filteredlength & 1 ) //<S2SV> down2_symodd ( in , filteredlength , out ) ; //<S2SV> else //<S2SV> down2_symeven ( in , filteredlength , out ) ; //<S2SV> filteredlength = proj_filteredlength ; //<S2SV> } //<S2SV> if ( filteredlength != olength ) { //<S2SV> interpolate ( out , filteredlength , output , olength ) ; //<S2SV> } //<S2SV> if ( tmpbuf ) //<S2SV> free ( tmpbuf ) ; //<S2SV> } else { //<S2SV> interpolate ( input , length , output , olength ) ; //<S2SV> } //<S2SV> } //<S2SV> 