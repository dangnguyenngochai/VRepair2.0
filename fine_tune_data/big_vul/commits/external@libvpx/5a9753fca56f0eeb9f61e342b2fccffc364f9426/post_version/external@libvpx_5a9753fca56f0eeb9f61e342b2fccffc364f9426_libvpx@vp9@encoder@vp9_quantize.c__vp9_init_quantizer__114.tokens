void vp9_init_quantizer ( VP9_COMP * cpi ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> QUANTS * const quants = & cpi -> quants ; //<S2SV> int i , q , quant ; //<S2SV> for ( q = 0 ; q < QINDEX_RANGE ; q ++ ) { //<S2SV> const int qzbin_factor = get_qzbin_factor ( q , cm -> bit_depth ) ; //<S2SV> const int qrounding_factor = q == 0 ? 64 : 48 ; //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> int qrounding_factor_fp = i == 0 ? 48 : 42 ; //<S2SV> if ( q == 0 ) //<S2SV> qrounding_factor_fp = 64 ; //<S2SV> quant = i == 0 ? vp9_dc_quant ( q , cm -> y_dc_delta_q , cm -> bit_depth ) //<S2SV> : vp9_ac_quant ( q , 0 , cm -> bit_depth ) ; //<S2SV> invert_quant ( & quants -> y_quant [ q ] [ i ] , & quants -> y_quant_shift [ q ] [ i ] , quant ) ; //<S2SV> quants -> y_quant_fp [ q ] [ i ] = ( 1 << 16 ) / quant ; //<S2SV> quants -> y_round_fp [ q ] [ i ] = ( qrounding_factor_fp * quant ) >> 7 ; //<S2SV> quants -> y_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; //<S2SV> quants -> y_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; //<S2SV> cpi -> y_dequant [ q ] [ i ] = quant ; //<S2SV> quant = i == 0 ? vp9_dc_quant ( q , cm -> uv_dc_delta_q , cm -> bit_depth ) //<S2SV> : vp9_ac_quant ( q , cm -> uv_ac_delta_q , cm -> bit_depth ) ; //<S2SV> invert_quant ( & quants -> uv_quant [ q ] [ i ] , //<S2SV> & quants -> uv_quant_shift [ q ] [ i ] , quant ) ; //<S2SV> quants -> uv_quant_fp [ q ] [ i ] = ( 1 << 16 ) / quant ; //<S2SV> quants -> uv_round_fp [ q ] [ i ] = ( qrounding_factor_fp * quant ) >> 7 ; //<S2SV> quants -> uv_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; //<S2SV> quants -> uv_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; //<S2SV> cpi -> uv_dequant [ q ] [ i ] = quant ; //<S2SV> } //<S2SV> for ( i = 2 ; i < 8 ; i ++ ) { //<S2SV> quants -> y_quant [ q ] [ i ] = quants -> y_quant [ q ] [ 1 ] ; //<S2SV> quants -> y_quant_fp [ q ] [ i ] = quants -> y_quant_fp [ q ] [ 1 ] ; //<S2SV> quants -> y_round_fp [ q ] [ i ] = quants -> y_round_fp [ q ] [ 1 ] ; //<S2SV> quants -> y_quant_shift [ q ] [ i ] = quants -> y_quant_shift [ q ] [ 1 ] ; //<S2SV> quants -> y_zbin [ q ] [ i ] = quants -> y_zbin [ q ] [ 1 ] ; //<S2SV> quants -> y_round [ q ] [ i ] = quants -> y_round [ q ] [ 1 ] ; //<S2SV> cpi -> y_dequant [ q ] [ i ] = cpi -> y_dequant [ q ] [ 1 ] ; //<S2SV> quants -> uv_quant [ q ] [ i ] = quants -> uv_quant [ q ] [ 1 ] ; //<S2SV> quants -> uv_quant_fp [ q ] [ i ] = quants -> uv_quant_fp [ q ] [ 1 ] ; //<S2SV> quants -> uv_round_fp [ q ] [ i ] = quants -> uv_round_fp [ q ] [ 1 ] ; //<S2SV> quants -> uv_quant_shift [ q ] [ i ] = quants -> uv_quant_shift [ q ] [ 1 ] ; //<S2SV> quants -> uv_zbin [ q ] [ i ] = quants -> uv_zbin [ q ] [ 1 ] ; //<S2SV> quants -> uv_round [ q ] [ i ] = quants -> uv_round [ q ] [ 1 ] ; //<S2SV> cpi -> uv_dequant [ q ] [ i ] = cpi -> uv_dequant [ q ] [ 1 ] ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 