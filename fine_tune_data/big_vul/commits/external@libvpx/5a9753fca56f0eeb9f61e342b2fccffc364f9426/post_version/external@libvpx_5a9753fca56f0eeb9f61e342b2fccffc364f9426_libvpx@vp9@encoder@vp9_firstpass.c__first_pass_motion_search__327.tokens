static void first_pass_motion_search ( VP9_COMP * cpi , MACROBLOCK * x , //<S2SV> const MV * ref_mv , MV * best_mv , //<S2SV> int * best_motion_err ) { //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> MV tmp_mv = { 0 , 0 } ; //<S2SV> MV ref_mv_full = { ref_mv -> row >> 3 , ref_mv -> col >> 3 } ; //<S2SV> int num00 , tmp_err , n ; //<S2SV> const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi . sb_type ; //<S2SV> vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; //<S2SV> const int new_mv_mode_penalty = NEW_MV_MODE_PENALTY ; //<S2SV> int step_param = 3 ; //<S2SV> int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; //<S2SV> const int sr = get_search_range ( cpi ) ; //<S2SV> step_param += sr ; //<S2SV> further_steps -= sr ; //<S2SV> v_fn_ptr . vf = get_block_variance_fn ( bsize ) ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> v_fn_ptr . vf = highbd_get_block_variance_fn ( bsize , xd -> bd ) ; //<S2SV> } //<S2SV> # endif //<S2SV> tmp_err = cpi -> diamond_search_sad ( x , & cpi -> ss_cfg , & ref_mv_full , & tmp_mv , //<S2SV> step_param , //<S2SV> x -> sadperbit16 , & num00 , & v_fn_ptr , ref_mv ) ; //<S2SV> if ( tmp_err < INT_MAX ) //<S2SV> tmp_err = vp9_get_mvpred_var ( x , & tmp_mv , ref_mv , & v_fn_ptr , 1 ) ; //<S2SV> if ( tmp_err < INT_MAX - new_mv_mode_penalty ) //<S2SV> tmp_err += new_mv_mode_penalty ; //<S2SV> if ( tmp_err < * best_motion_err ) { //<S2SV> * best_motion_err = tmp_err ; //<S2SV> * best_mv = tmp_mv ; //<S2SV> } //<S2SV> n = num00 ; //<S2SV> num00 = 0 ; //<S2SV> while ( n < further_steps ) { //<S2SV> ++ n ; //<S2SV> if ( num00 ) { //<S2SV> -- num00 ; //<S2SV> } else { //<S2SV> tmp_err = cpi -> diamond_search_sad ( x , & cpi -> ss_cfg , & ref_mv_full , & tmp_mv , //<S2SV> step_param + n , x -> sadperbit16 , //<S2SV> & num00 , & v_fn_ptr , ref_mv ) ; //<S2SV> if ( tmp_err < INT_MAX ) //<S2SV> tmp_err = vp9_get_mvpred_var ( x , & tmp_mv , ref_mv , & v_fn_ptr , 1 ) ; //<S2SV> if ( tmp_err < INT_MAX - new_mv_mode_penalty ) //<S2SV> tmp_err += new_mv_mode_penalty ; //<S2SV> if ( tmp_err < * best_motion_err ) { //<S2SV> * best_motion_err = tmp_err ; //<S2SV> * best_mv = tmp_mv ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 