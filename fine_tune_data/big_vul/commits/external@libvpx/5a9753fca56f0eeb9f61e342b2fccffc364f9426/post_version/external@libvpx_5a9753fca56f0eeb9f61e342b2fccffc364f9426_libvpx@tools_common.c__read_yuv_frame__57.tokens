int read_yuv_frame ( struct VpxInputContext * input_ctx , vpx_image_t * yuv_frame ) { //<S2SV> FILE * f = input_ctx -> file ; //<S2SV> struct FileTypeDetectionBuffer * detect = & input_ctx -> detect ; //<S2SV> int plane = 0 ; //<S2SV> int shortread = 0 ; //<S2SV> const int bytespp = ( yuv_frame -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ; //<S2SV> for ( plane = 0 ; plane < 3 ; ++ plane ) { //<S2SV> uint8_t * ptr ; //<S2SV> const int w = vpx_img_plane_width ( yuv_frame , plane ) ; //<S2SV> const int h = vpx_img_plane_height ( yuv_frame , plane ) ; //<S2SV> int r ; //<S2SV> switch ( plane ) { //<S2SV> case 1 : //<S2SV> ptr = yuv_frame -> planes [ //<S2SV> yuv_frame -> fmt == VPX_IMG_FMT_YV12 ? VPX_PLANE_V : VPX_PLANE_U ] ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> ptr = yuv_frame -> planes [ //<S2SV> yuv_frame -> fmt == VPX_IMG_FMT_YV12 ? VPX_PLANE_U : VPX_PLANE_V ] ; //<S2SV> break ; //<S2SV> default : //<S2SV> ptr = yuv_frame -> planes [ plane ] ; //<S2SV> } //<S2SV> for ( r = 0 ; r < h ; ++ r ) { //<S2SV> size_t needed = w * bytespp ; //<S2SV> size_t buf_position = 0 ; //<S2SV> const size_t left = detect -> buf_read - detect -> position ; //<S2SV> if ( left > 0 ) { //<S2SV> const size_t more = ( left < needed ) ? left : needed ; //<S2SV> memcpy ( ptr , detect -> buf + detect -> position , more ) ; //<S2SV> buf_position = more ; //<S2SV> needed -= more ; //<S2SV> detect -> position += more ; //<S2SV> } //<S2SV> if ( needed > 0 ) { //<S2SV> shortread |= ( fread ( ptr + buf_position , 1 , needed , f ) < needed ) ; //<S2SV> } //<S2SV> ptr += yuv_frame -> stride [ plane ] ; //<S2SV> } //<S2SV> } //<S2SV> return shortread ; //<S2SV> } //<S2SV> 