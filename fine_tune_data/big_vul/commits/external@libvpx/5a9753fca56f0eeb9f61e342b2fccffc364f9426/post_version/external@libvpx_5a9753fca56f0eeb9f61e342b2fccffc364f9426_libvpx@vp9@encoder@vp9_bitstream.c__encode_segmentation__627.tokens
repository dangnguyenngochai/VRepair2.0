static void encode_segmentation ( VP9_COMMON * cm , MACROBLOCKD * xd , //<S2SV> struct vpx_write_bit_buffer * wb ) { //<S2SV> int i , j ; //<S2SV> const struct segmentation * seg = & cm -> seg ; //<S2SV> vpx_wb_write_bit ( wb , seg -> enabled ) ; //<S2SV> if ( ! seg -> enabled ) //<S2SV> return ; //<S2SV> vpx_wb_write_bit ( wb , seg -> update_map ) ; //<S2SV> if ( seg -> update_map ) { //<S2SV> vp9_choose_segmap_coding_method ( cm , xd ) ; //<S2SV> for ( i = 0 ; i < SEG_TREE_PROBS ; i ++ ) { //<S2SV> const int prob = seg -> tree_probs [ i ] ; //<S2SV> const int update = prob != MAX_PROB ; //<S2SV> vpx_wb_write_bit ( wb , update ) ; //<S2SV> if ( update ) //<S2SV> vpx_wb_write_literal ( wb , prob , 8 ) ; //<S2SV> } //<S2SV> vpx_wb_write_bit ( wb , seg -> temporal_update ) ; //<S2SV> if ( seg -> temporal_update ) { //<S2SV> for ( i = 0 ; i < PREDICTION_PROBS ; i ++ ) { //<S2SV> const int prob = seg -> pred_probs [ i ] ; //<S2SV> const int update = prob != MAX_PROB ; //<S2SV> vpx_wb_write_bit ( wb , update ) ; //<S2SV> if ( update ) //<S2SV> vpx_wb_write_literal ( wb , prob , 8 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> vpx_wb_write_bit ( wb , seg -> update_data ) ; //<S2SV> if ( seg -> update_data ) { //<S2SV> vpx_wb_write_bit ( wb , seg -> abs_delta ) ; //<S2SV> for ( i = 0 ; i < MAX_SEGMENTS ; i ++ ) { //<S2SV> for ( j = 0 ; j < SEG_LVL_MAX ; j ++ ) { //<S2SV> const int active = segfeature_active ( seg , i , j ) ; //<S2SV> vpx_wb_write_bit ( wb , active ) ; //<S2SV> if ( active ) { //<S2SV> const int data = get_segdata ( seg , i , j ) ; //<S2SV> const int data_max = vp9_seg_feature_data_max ( j ) ; //<S2SV> if ( vp9_is_segfeature_signed ( j ) ) { //<S2SV> encode_unsigned_max ( wb , abs ( data ) , data_max ) ; //<S2SV> vpx_wb_write_bit ( wb , data < 0 ) ; //<S2SV> } else { //<S2SV> encode_unsigned_max ( wb , data , data_max ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 