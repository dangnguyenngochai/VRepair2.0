static void set_source_var_based_partition ( VP9_COMP * cpi , //<S2SV> const TileInfo * const tile , //<S2SV> MACROBLOCK * const x , //<S2SV> MODE_INFO * * mi_8x8 , //<S2SV> int mi_row , int mi_col ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> const int mis = cm -> mi_stride ; //<S2SV> const int row8x8_remaining = tile -> mi_row_end - mi_row ; //<S2SV> const int col8x8_remaining = tile -> mi_col_end - mi_col ; //<S2SV> MODE_INFO * mi_upper_left = cm -> mi + mi_row * mis + mi_col ; //<S2SV> vp9_setup_src_planes ( x , cpi -> Source , mi_row , mi_col ) ; //<S2SV> assert ( ( row8x8_remaining > 0 ) && ( col8x8_remaining > 0 ) ) ; //<S2SV> if ( ( col8x8_remaining >= MI_BLOCK_SIZE ) && //<S2SV> ( row8x8_remaining >= MI_BLOCK_SIZE ) ) { //<S2SV> int i , j ; //<S2SV> int index ; //<S2SV> diff d32 [ 4 ] ; //<S2SV> const int offset = ( mi_row >> 1 ) * cm -> mb_cols + ( mi_col >> 1 ) ; //<S2SV> int is_larger_better = 0 ; //<S2SV> int use32x32 = 0 ; //<S2SV> unsigned int thr = cpi -> source_var_thresh ; //<S2SV> memset ( d32 , 0 , 4 * sizeof ( diff ) ) ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) { //<S2SV> diff * d16 [ 4 ] ; //<S2SV> for ( j = 0 ; j < 4 ; j ++ ) { //<S2SV> int b_mi_row = coord_lookup [ i * 4 + j ] . row ; //<S2SV> int b_mi_col = coord_lookup [ i * 4 + j ] . col ; //<S2SV> int boffset = b_mi_row / 2 * cm -> mb_cols + //<S2SV> b_mi_col / 2 ; //<S2SV> d16 [ j ] = cpi -> source_diff_var + offset + boffset ; //<S2SV> index = b_mi_row * mis + b_mi_col ; //<S2SV> mi_8x8 [ index ] = mi_upper_left + index ; //<S2SV> mi_8x8 [ index ] -> mbmi . sb_type = BLOCK_16X16 ; //<S2SV> } //<S2SV> is_larger_better = ( d16 [ 0 ] -> var < thr ) && ( d16 [ 1 ] -> var < thr ) && //<S2SV> ( d16 [ 2 ] -> var < thr ) && ( d16 [ 3 ] -> var < thr ) ; //<S2SV> if ( is_larger_better ) { //<S2SV> use32x32 += 1 ; //<S2SV> for ( j = 0 ; j < 4 ; j ++ ) { //<S2SV> d32 [ i ] . sse += d16 [ j ] -> sse ; //<S2SV> d32 [ i ] . sum += d16 [ j ] -> sum ; //<S2SV> } //<S2SV> d32 [ i ] . var = d32 [ i ] . sse - ( ( ( int64_t ) d32 [ i ] . sum * d32 [ i ] . sum ) >> 10 ) ; //<S2SV> index = coord_lookup [ i * 4 ] . row * mis + coord_lookup [ i * 4 ] . col ; //<S2SV> mi_8x8 [ index ] = mi_upper_left + index ; //<S2SV> mi_8x8 [ index ] -> mbmi . sb_type = BLOCK_32X32 ; //<S2SV> } //<S2SV> } //<S2SV> if ( use32x32 == 4 ) { //<S2SV> thr <<= 1 ; //<S2SV> is_larger_better = ( d32 [ 0 ] . var < thr ) && ( d32 [ 1 ] . var < thr ) && //<S2SV> ( d32 [ 2 ] . var < thr ) && ( d32 [ 3 ] . var < thr ) ; //<S2SV> if ( is_larger_better ) { //<S2SV> mi_8x8 [ 0 ] = mi_upper_left ; //<S2SV> mi_8x8 [ 0 ] -> mbmi . sb_type = BLOCK_64X64 ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> int bh = num_8x8_blocks_high_lookup [ BLOCK_16X16 ] ; //<S2SV> int bw = num_8x8_blocks_wide_lookup [ BLOCK_16X16 ] ; //<S2SV> set_partial_b64x64_partition ( mi_upper_left , mis , bh , bw , //<S2SV> row8x8_remaining , col8x8_remaining , BLOCK_16X16 , mi_8x8 ) ; //<S2SV> } //<S2SV> } //<S2SV> 