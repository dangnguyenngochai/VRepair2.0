static void update_state_rt ( VP9_COMP * cpi , ThreadData * td , //<S2SV> PICK_MODE_CONTEXT * ctx , //<S2SV> int mi_row , int mi_col , int bsize ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> MACROBLOCK * const x = & td -> mb ; //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> MODE_INFO * const mi = xd -> mi [ 0 ] ; //<S2SV> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; //<S2SV> const struct segmentation * const seg = & cm -> seg ; //<S2SV> const int bw = num_8x8_blocks_wide_lookup [ mi -> mbmi . sb_type ] ; //<S2SV> const int bh = num_8x8_blocks_high_lookup [ mi -> mbmi . sb_type ] ; //<S2SV> const int x_mis = MIN ( bw , cm -> mi_cols - mi_col ) ; //<S2SV> const int y_mis = MIN ( bh , cm -> mi_rows - mi_row ) ; //<S2SV> * ( xd -> mi [ 0 ] ) = ctx -> mic ; //<S2SV> * ( x -> mbmi_ext ) = ctx -> mbmi_ext ; //<S2SV> if ( seg -> enabled && cpi -> oxcf . aq_mode ) { //<S2SV> if ( cpi -> oxcf . aq_mode == COMPLEXITY_AQ || //<S2SV> cpi -> oxcf . aq_mode == VARIANCE_AQ ) { //<S2SV> const uint8_t * const map = seg -> update_map ? cpi -> segmentation_map //<S2SV> : cm -> last_frame_seg_map ; //<S2SV> mbmi -> segment_id = get_segment_id ( cm , map , bsize , mi_row , mi_col ) ; //<S2SV> } else { //<S2SV> vp9_cyclic_refresh_update_segment ( cpi , mbmi , mi_row , mi_col , bsize , //<S2SV> ctx -> rate , ctx -> dist , x -> skip ) ; //<S2SV> } //<S2SV> vp9_init_plane_quantizers ( cpi , x ) ; //<S2SV> } //<S2SV> if ( is_inter_block ( mbmi ) ) { //<S2SV> vp9_update_mv_count ( td ) ; //<S2SV> if ( cm -> interp_filter == SWITCHABLE ) { //<S2SV> const int pred_ctx = vp9_get_pred_context_switchable_interp ( xd ) ; //<S2SV> ++ td -> counts -> switchable_interp [ pred_ctx ] [ mbmi -> interp_filter ] ; //<S2SV> } //<S2SV> if ( mbmi -> sb_type < BLOCK_8X8 ) { //<S2SV> mbmi -> mv [ 0 ] . as_int = mi -> bmi [ 3 ] . as_mv [ 0 ] . as_int ; //<S2SV> mbmi -> mv [ 1 ] . as_int = mi -> bmi [ 3 ] . as_mv [ 1 ] . as_int ; //<S2SV> } //<S2SV> } //<S2SV> if ( cm -> use_prev_frame_mvs ) { //<S2SV> MV_REF * const frame_mvs = //<S2SV> cm -> cur_frame -> mvs + mi_row * cm -> mi_cols + mi_col ; //<S2SV> int w , h ; //<S2SV> for ( h = 0 ; h < y_mis ; ++ h ) { //<S2SV> MV_REF * const frame_mv = frame_mvs + h * cm -> mi_cols ; //<S2SV> for ( w = 0 ; w < x_mis ; ++ w ) { //<S2SV> MV_REF * const mv = frame_mv + w ; //<S2SV> mv -> ref_frame [ 0 ] = mi -> mbmi . ref_frame [ 0 ] ; //<S2SV> mv -> ref_frame [ 1 ] = mi -> mbmi . ref_frame [ 1 ] ; //<S2SV> mv -> mv [ 0 ] . as_int = mi -> mbmi . mv [ 0 ] . as_int ; //<S2SV> mv -> mv [ 1 ] . as_int = mi -> mbmi . mv [ 1 ] . as_int ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> x -> skip = ctx -> skip ; //<S2SV> x -> skip_txfm [ 0 ] = mbmi -> segment_id ? 0 : ctx -> skip_txfm [ 0 ] ; //<S2SV> } //<S2SV> 