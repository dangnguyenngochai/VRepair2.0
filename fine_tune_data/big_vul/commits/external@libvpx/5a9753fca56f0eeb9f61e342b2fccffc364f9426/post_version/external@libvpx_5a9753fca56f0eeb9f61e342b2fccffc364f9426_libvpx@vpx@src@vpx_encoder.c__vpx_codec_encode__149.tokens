vpx_codec_err_t vpx_codec_encode ( vpx_codec_ctx_t * ctx , //<S2SV> const vpx_image_t * img , //<S2SV> vpx_codec_pts_t pts , //<S2SV> unsigned long duration , //<S2SV> vpx_enc_frame_flags_t flags , //<S2SV> unsigned long deadline ) { //<S2SV> vpx_codec_err_t res = VPX_CODEC_OK ; //<S2SV> if ( ! ctx || ( img && ! duration ) ) //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> else if ( ! ctx -> iface || ! ctx -> priv ) //<S2SV> res = VPX_CODEC_ERROR ; //<S2SV> else if ( ! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) //<S2SV> res = VPX_CODEC_INCAPABLE ; //<S2SV> else { //<S2SV> unsigned int num_enc = ctx -> priv -> enc . total_encoders ; //<S2SV> FLOATING_POINT_INIT ( ) ; //<S2SV> if ( num_enc == 1 ) //<S2SV> res = ctx -> iface -> enc . encode ( get_alg_priv ( ctx ) , img , pts , //<S2SV> duration , flags , deadline ) ; //<S2SV> else { //<S2SV> int i ; //<S2SV> ctx += num_enc - 1 ; //<S2SV> if ( img ) img += num_enc - 1 ; //<S2SV> for ( i = num_enc - 1 ; i >= 0 ; i -- ) { //<S2SV> if ( ( res = ctx -> iface -> enc . encode ( get_alg_priv ( ctx ) , img , pts , //<S2SV> duration , flags , deadline ) ) ) //<S2SV> break ; //<S2SV> ctx -- ; //<S2SV> if ( img ) img -- ; //<S2SV> } //<S2SV> ctx ++ ; //<S2SV> } //<S2SV> FLOATING_POINT_RESTORE ( ) ; //<S2SV> } //<S2SV> return SAVE_STATUS ( ctx , res ) ; //<S2SV> } //<S2SV> 