static int rd_pick_intra4x4mby_modes ( MACROBLOCK * mb , int * Rate , //<S2SV> int * rate_y , int * Distortion , int best_rd ) //<S2SV> { //<S2SV> MACROBLOCKD * const xd = & mb -> e_mbd ; //<S2SV> int i ; //<S2SV> int cost = mb -> mbmode_cost [ xd -> frame_type ] [ B_PRED ] ; //<S2SV> int distortion = 0 ; //<S2SV> int tot_rate_y = 0 ; //<S2SV> int64_t total_rd = 0 ; //<S2SV> ENTROPY_CONTEXT_PLANES t_above , t_left ; //<S2SV> ENTROPY_CONTEXT * ta ; //<S2SV> ENTROPY_CONTEXT * tl ; //<S2SV> const int * bmode_costs ; //<S2SV> memcpy ( & t_above , mb -> e_mbd . above_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; //<S2SV> memcpy ( & t_left , mb -> e_mbd . left_context , sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; //<S2SV> ta = ( ENTROPY_CONTEXT * ) & t_above ; //<S2SV> tl = ( ENTROPY_CONTEXT * ) & t_left ; //<S2SV> intra_prediction_down_copy ( xd , xd -> dst . y_buffer - xd -> dst . y_stride + 16 ) ; //<S2SV> bmode_costs = mb -> inter_bmode_costs ; //<S2SV> for ( i = 0 ; i < 16 ; i ++ ) //<S2SV> { //<S2SV> MODE_INFO * const mic = xd -> mode_info_context ; //<S2SV> const int mis = xd -> mode_info_stride ; //<S2SV> B_PREDICTION_MODE UNINITIALIZED_IS_SAFE ( best_mode ) ; //<S2SV> int UNINITIALIZED_IS_SAFE ( r ) , UNINITIALIZED_IS_SAFE ( ry ) , UNINITIALIZED_IS_SAFE ( d ) ; //<S2SV> if ( mb -> e_mbd . frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> const B_PREDICTION_MODE A = above_block_mode ( mic , i , mis ) ; //<S2SV> const B_PREDICTION_MODE L = left_block_mode ( mic , i ) ; //<S2SV> bmode_costs = mb -> bmode_costs [ A ] [ L ] ; //<S2SV> } //<S2SV> total_rd += rd_pick_intra4x4block ( //<S2SV> mb , mb -> block + i , xd -> block + i , & best_mode , bmode_costs , //<S2SV> ta + vp8_block2above [ i ] , //<S2SV> tl + vp8_block2left [ i ] , & r , & ry , & d ) ; //<S2SV> cost += r ; //<S2SV> distortion += d ; //<S2SV> tot_rate_y += ry ; //<S2SV> mic -> bmi [ i ] . as_mode = best_mode ; //<S2SV> if ( total_rd >= ( int64_t ) best_rd ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( total_rd >= ( int64_t ) best_rd ) //<S2SV> return INT_MAX ; //<S2SV> * Rate = cost ; //<S2SV> * rate_y = tot_rate_y ; //<S2SV> * Distortion = distortion ; //<S2SV> return RDCOST ( mb -> rdmult , mb -> rddiv , cost , distortion ) ; //<S2SV> } //<S2SV> 