void vp9_init_layer_context ( VP9_COMP * const cpi ) { //<S2SV> SVC * const svc = & cpi -> svc ; //<S2SV> const VP9EncoderConfig * const oxcf = & cpi -> oxcf ; //<S2SV> int sl , tl ; //<S2SV> int alt_ref_idx = svc -> number_spatial_layers ; //<S2SV> svc -> spatial_layer_id = 0 ; //<S2SV> svc -> temporal_layer_id = 0 ; //<S2SV> if ( cpi -> oxcf . error_resilient_mode == 0 && cpi -> oxcf . pass == 2 ) { //<S2SV> if ( vpx_realloc_frame_buffer ( & cpi -> svc . empty_frame . img , //<S2SV> SMALL_FRAME_WIDTH , SMALL_FRAME_HEIGHT , //<S2SV> cpi -> common . subsampling_x , //<S2SV> cpi -> common . subsampling_y , //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> cpi -> common . use_highbitdepth , //<S2SV> # endif //<S2SV> VP9_ENC_BORDER_IN_PIXELS , //<S2SV> cpi -> common . byte_alignment , //<S2SV> NULL , NULL , NULL ) ) //<S2SV> vpx_internal_error ( & cpi -> common . error , VPX_CODEC_MEM_ERROR , //<S2SV> "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>empty<S2SV_blank>frame<S2SV_blank>for<S2SV_blank>multiple<S2SV_blank>frame<S2SV_blank>" //<S2SV> "contexts" ) ; //<S2SV> memset ( cpi -> svc . empty_frame . img . buffer_alloc , 0x80 , //<S2SV> cpi -> svc . empty_frame . img . buffer_alloc_sz ) ; //<S2SV> } //<S2SV> for ( sl = 0 ; sl < oxcf -> ss_number_layers ; ++ sl ) { //<S2SV> for ( tl = 0 ; tl < oxcf -> ts_number_layers ; ++ tl ) { //<S2SV> int layer = LAYER_IDS_TO_IDX ( sl , tl , oxcf -> ts_number_layers ) ; //<S2SV> LAYER_CONTEXT * const lc = & svc -> layer_context [ layer ] ; //<S2SV> RATE_CONTROL * const lrc = & lc -> rc ; //<S2SV> int i ; //<S2SV> lc -> current_video_frame_in_layer = 0 ; //<S2SV> lc -> layer_size = 0 ; //<S2SV> lc -> frames_from_key_frame = 0 ; //<S2SV> lc -> last_frame_type = FRAME_TYPES ; //<S2SV> lrc -> ni_av_qi = oxcf -> worst_allowed_q ; //<S2SV> lrc -> total_actual_bits = 0 ; //<S2SV> lrc -> total_target_vs_actual = 0 ; //<S2SV> lrc -> ni_tot_qi = 0 ; //<S2SV> lrc -> tot_q = 0.0 ; //<S2SV> lrc -> avg_q = 0.0 ; //<S2SV> lrc -> ni_frames = 0 ; //<S2SV> lrc -> decimation_count = 0 ; //<S2SV> lrc -> decimation_factor = 0 ; //<S2SV> for ( i = 0 ; i < RATE_FACTOR_LEVELS ; ++ i ) { //<S2SV> lrc -> rate_correction_factors [ i ] = 1.0 ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . rc_mode == VPX_CBR ) { //<S2SV> lc -> target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; //<S2SV> lrc -> last_q [ INTER_FRAME ] = oxcf -> worst_allowed_q ; //<S2SV> lrc -> avg_frame_qindex [ INTER_FRAME ] = oxcf -> worst_allowed_q ; //<S2SV> lrc -> avg_frame_qindex [ KEY_FRAME ] = oxcf -> worst_allowed_q ; //<S2SV> } else { //<S2SV> lc -> target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; //<S2SV> lrc -> last_q [ KEY_FRAME ] = oxcf -> best_allowed_q ; //<S2SV> lrc -> last_q [ INTER_FRAME ] = oxcf -> best_allowed_q ; //<S2SV> lrc -> avg_frame_qindex [ KEY_FRAME ] = ( oxcf -> worst_allowed_q + //<S2SV> oxcf -> best_allowed_q ) / 2 ; //<S2SV> lrc -> avg_frame_qindex [ INTER_FRAME ] = ( oxcf -> worst_allowed_q + //<S2SV> oxcf -> best_allowed_q ) / 2 ; //<S2SV> if ( oxcf -> ss_enable_auto_arf [ sl ] ) //<S2SV> lc -> alt_ref_idx = alt_ref_idx ++ ; //<S2SV> else //<S2SV> lc -> alt_ref_idx = INVALID_IDX ; //<S2SV> lc -> gold_ref_idx = INVALID_IDX ; //<S2SV> } //<S2SV> lrc -> buffer_level = oxcf -> starting_buffer_level_ms * //<S2SV> lc -> target_bandwidth / 1000 ; //<S2SV> lrc -> bits_off_target = lrc -> buffer_level ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! ( svc -> number_temporal_layers > 1 && cpi -> oxcf . rc_mode == VPX_CBR ) //<S2SV> && alt_ref_idx < REF_FRAMES ) //<S2SV> svc -> layer_context [ 0 ] . gold_ref_idx = alt_ref_idx ; //<S2SV> } //<S2SV> 