static void show_stream_config ( struct stream_state * stream , //<S2SV> struct VpxEncoderConfig * global , //<S2SV> struct VpxInputContext * input ) { //<S2SV> # define SHOW ( field ) fprintf ( stderr , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-28s<S2SV_blank>=<S2SV_blank>%d\\n" , # field , stream -> config . cfg . field ) //<S2SV> if ( stream -> index == 0 ) { //<S2SV> fprintf ( stderr , "Codec:<S2SV_blank>%s\\n" , //<S2SV> vpx_codec_iface_name ( global -> codec -> codec_interface ( ) ) ) ; //<S2SV> fprintf ( stderr , "Source<S2SV_blank>file:<S2SV_blank>%s<S2SV_blank>File<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>Format:<S2SV_blank>%s\\n" , //<S2SV> input -> filename , //<S2SV> file_type_to_string ( input -> file_type ) , //<S2SV> image_format_to_string ( input -> fmt ) ) ; //<S2SV> } //<S2SV> if ( stream -> next || stream -> index ) //<S2SV> fprintf ( stderr , "\\nStream<S2SV_blank>Index:<S2SV_blank>%d\\n" , stream -> index ) ; //<S2SV> fprintf ( stderr , "Destination<S2SV_blank>file:<S2SV_blank>%s\\n" , stream -> config . out_fn ) ; //<S2SV> fprintf ( stderr , "Encoder<S2SV_blank>parameters:\\n" ) ; //<S2SV> SHOW ( g_usage ) ; //<S2SV> SHOW ( g_threads ) ; //<S2SV> SHOW ( g_profile ) ; //<S2SV> SHOW ( g_w ) ; //<S2SV> SHOW ( g_h ) ; //<S2SV> SHOW ( g_bit_depth ) ; //<S2SV> SHOW ( g_input_bit_depth ) ; //<S2SV> SHOW ( g_timebase . num ) ; //<S2SV> SHOW ( g_timebase . den ) ; //<S2SV> SHOW ( g_error_resilient ) ; //<S2SV> SHOW ( g_pass ) ; //<S2SV> SHOW ( g_lag_in_frames ) ; //<S2SV> SHOW ( rc_dropframe_thresh ) ; //<S2SV> SHOW ( rc_resize_allowed ) ; //<S2SV> SHOW ( rc_scaled_width ) ; //<S2SV> SHOW ( rc_scaled_height ) ; //<S2SV> SHOW ( rc_resize_up_thresh ) ; //<S2SV> SHOW ( rc_resize_down_thresh ) ; //<S2SV> SHOW ( rc_end_usage ) ; //<S2SV> SHOW ( rc_target_bitrate ) ; //<S2SV> SHOW ( rc_min_quantizer ) ; //<S2SV> SHOW ( rc_max_quantizer ) ; //<S2SV> SHOW ( rc_undershoot_pct ) ; //<S2SV> SHOW ( rc_overshoot_pct ) ; //<S2SV> SHOW ( rc_buf_sz ) ; //<S2SV> SHOW ( rc_buf_initial_sz ) ; //<S2SV> SHOW ( rc_buf_optimal_sz ) ; //<S2SV> SHOW ( rc_2pass_vbr_bias_pct ) ; //<S2SV> SHOW ( rc_2pass_vbr_minsection_pct ) ; //<S2SV> SHOW ( rc_2pass_vbr_maxsection_pct ) ; //<S2SV> SHOW ( kf_mode ) ; //<S2SV> SHOW ( kf_min_dist ) ; //<S2SV> SHOW ( kf_max_dist ) ; //<S2SV> } //<S2SV> 