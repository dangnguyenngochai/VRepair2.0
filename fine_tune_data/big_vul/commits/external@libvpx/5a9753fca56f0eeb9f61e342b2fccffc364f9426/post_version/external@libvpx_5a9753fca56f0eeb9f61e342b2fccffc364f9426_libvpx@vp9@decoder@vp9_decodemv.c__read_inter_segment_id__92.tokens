static int read_inter_segment_id ( VP9_COMMON * const cm , MACROBLOCKD * const xd , //<S2SV> int mi_row , int mi_col , vpx_reader * r ) { //<S2SV> struct segmentation * const seg = & cm -> seg ; //<S2SV> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; //<S2SV> int predicted_segment_id , segment_id ; //<S2SV> const int mi_offset = mi_row * cm -> mi_cols + mi_col ; //<S2SV> const int bw = xd -> plane [ 0 ] . n4_w >> 1 ; //<S2SV> const int bh = xd -> plane [ 0 ] . n4_h >> 1 ; //<S2SV> const int x_mis = MIN ( cm -> mi_cols - mi_col , bw ) ; //<S2SV> const int y_mis = MIN ( cm -> mi_rows - mi_row , bh ) ; //<S2SV> if ( ! seg -> enabled ) //<S2SV> return 0 ; //<S2SV> predicted_segment_id = cm -> last_frame_seg_map ? //<S2SV> dec_get_segment_id ( cm , cm -> last_frame_seg_map , mi_offset , x_mis , y_mis ) : //<S2SV> 0 ; //<S2SV> if ( ! seg -> update_map ) { //<S2SV> copy_segment_id ( cm , cm -> last_frame_seg_map , cm -> current_frame_seg_map , //<S2SV> mi_offset , x_mis , y_mis ) ; //<S2SV> return predicted_segment_id ; //<S2SV> } //<S2SV> if ( seg -> temporal_update ) { //<S2SV> const vpx_prob pred_prob = vp9_get_pred_prob_seg_id ( seg , xd ) ; //<S2SV> mbmi -> seg_id_predicted = vpx_read ( r , pred_prob ) ; //<S2SV> segment_id = mbmi -> seg_id_predicted ? predicted_segment_id //<S2SV> : read_segment_id ( r , seg ) ; //<S2SV> } else { //<S2SV> segment_id = read_segment_id ( r , seg ) ; //<S2SV> } //<S2SV> set_segment_id ( cm , mi_offset , x_mis , y_mis , segment_id ) ; //<S2SV> return segment_id ; //<S2SV> } //<S2SV> 