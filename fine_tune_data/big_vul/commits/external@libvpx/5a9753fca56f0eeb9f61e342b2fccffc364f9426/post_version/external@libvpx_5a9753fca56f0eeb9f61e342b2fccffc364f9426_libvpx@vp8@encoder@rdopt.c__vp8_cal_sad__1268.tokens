void vp8_cal_sad ( VP8_COMP * cpi , MACROBLOCKD * xd , MACROBLOCK * x , int recon_yoffset , int near_sadidx [ ] ) //<S2SV> { //<S2SV> int near_sad [ 8 ] = { 0 } ; //<S2SV> BLOCK * b = & x -> block [ 0 ] ; //<S2SV> unsigned char * src_y_ptr = * ( b -> base_src ) ; //<S2SV> if ( xd -> mb_to_top_edge == 0 && xd -> mb_to_left_edge == 0 ) //<S2SV> { //<S2SV> near_sad [ 0 ] = near_sad [ 1 ] = near_sad [ 2 ] = INT_MAX ; //<S2SV> } else if ( xd -> mb_to_top_edge == 0 ) //<S2SV> { //<S2SV> near_sad [ 0 ] = near_sad [ 2 ] = INT_MAX ; //<S2SV> near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - 16 , xd -> dst . y_stride ) ; //<S2SV> } else if ( xd -> mb_to_left_edge == 0 ) //<S2SV> { //<S2SV> near_sad [ 1 ] = near_sad [ 2 ] = INT_MAX ; //<S2SV> near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride ) ; //<S2SV> } else //<S2SV> { //<S2SV> near_sad [ 0 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 , xd -> dst . y_stride ) ; //<S2SV> near_sad [ 1 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - 16 , xd -> dst . y_stride ) ; //<S2SV> near_sad [ 2 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , xd -> dst . y_buffer - xd -> dst . y_stride * 16 - 16 , xd -> dst . y_stride ) ; //<S2SV> } //<S2SV> if ( cpi -> common . last_frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> unsigned char * pre_y_buffer = cpi -> common . yv12_fb [ cpi -> common . lst_fb_idx ] . y_buffer + recon_yoffset ; //<S2SV> int pre_y_stride = cpi -> common . yv12_fb [ cpi -> common . lst_fb_idx ] . y_stride ; //<S2SV> if ( xd -> mb_to_top_edge == 0 ) near_sad [ 4 ] = INT_MAX ; //<S2SV> if ( xd -> mb_to_left_edge == 0 ) near_sad [ 5 ] = INT_MAX ; //<S2SV> if ( xd -> mb_to_right_edge == 0 ) near_sad [ 6 ] = INT_MAX ; //<S2SV> if ( xd -> mb_to_bottom_edge == 0 ) near_sad [ 7 ] = INT_MAX ; //<S2SV> if ( near_sad [ 4 ] != INT_MAX ) //<S2SV> near_sad [ 4 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer - pre_y_stride * 16 , pre_y_stride ) ; //<S2SV> if ( near_sad [ 5 ] != INT_MAX ) //<S2SV> near_sad [ 5 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer - 16 , pre_y_stride ) ; //<S2SV> near_sad [ 3 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer , pre_y_stride ) ; //<S2SV> if ( near_sad [ 6 ] != INT_MAX ) //<S2SV> near_sad [ 6 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer + 16 , pre_y_stride ) ; //<S2SV> if ( near_sad [ 7 ] != INT_MAX ) //<S2SV> near_sad [ 7 ] = cpi -> fn_ptr [ BLOCK_16X16 ] . sdf ( src_y_ptr , b -> src_stride , pre_y_buffer + pre_y_stride * 16 , pre_y_stride ) ; //<S2SV> } //<S2SV> if ( cpi -> common . last_frame_type != KEY_FRAME ) //<S2SV> { //<S2SV> insertsortsad ( near_sad , near_sadidx , 8 ) ; //<S2SV> } else //<S2SV> { //<S2SV> insertsortsad ( near_sad , near_sadidx , 3 ) ; //<S2SV> } //<S2SV> } //<S2SV> 