static void model_rd_for_sb_y ( VP9_COMP * cpi , BLOCK_SIZE bsize , //<S2SV> MACROBLOCK * x , MACROBLOCKD * xd , //<S2SV> int * out_rate_sum , int64_t * out_dist_sum , //<S2SV> unsigned int * var_y , unsigned int * sse_y ) { //<S2SV> unsigned int sse ; //<S2SV> int rate ; //<S2SV> int64_t dist ; //<S2SV> struct macroblock_plane * const p = & x -> plane [ 0 ] ; //<S2SV> struct macroblockd_plane * const pd = & xd -> plane [ 0 ] ; //<S2SV> const int64_t dc_thr = p -> quant_thred [ 0 ] >> 6 ; //<S2SV> const int64_t ac_thr = p -> quant_thred [ 1 ] >> 6 ; //<S2SV> const uint32_t dc_quant = pd -> dequant [ 0 ] ; //<S2SV> const uint32_t ac_quant = pd -> dequant [ 1 ] ; //<S2SV> unsigned int var = cpi -> fn_ptr [ bsize ] . vf ( p -> src . buf , p -> src . stride , //<S2SV> pd -> dst . buf , pd -> dst . stride , & sse ) ; //<S2SV> int skip_dc = 0 ; //<S2SV> * var_y = var ; //<S2SV> * sse_y = sse ; //<S2SV> if ( cpi -> common . tx_mode == TX_MODE_SELECT ) { //<S2SV> if ( sse > ( var << 2 ) ) //<S2SV> xd -> mi [ 0 ] -> mbmi . tx_size = //<S2SV> MIN ( max_txsize_lookup [ bsize ] , //<S2SV> tx_mode_to_biggest_tx_size [ cpi -> common . tx_mode ] ) ; //<S2SV> else //<S2SV> xd -> mi [ 0 ] -> mbmi . tx_size = TX_8X8 ; //<S2SV> if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && //<S2SV> cyclic_refresh_segment_id_boosted ( xd -> mi [ 0 ] -> mbmi . segment_id ) ) //<S2SV> xd -> mi [ 0 ] -> mbmi . tx_size = TX_8X8 ; //<S2SV> else if ( xd -> mi [ 0 ] -> mbmi . tx_size > TX_16X16 ) //<S2SV> xd -> mi [ 0 ] -> mbmi . tx_size = TX_16X16 ; //<S2SV> } else { //<S2SV> xd -> mi [ 0 ] -> mbmi . tx_size = //<S2SV> MIN ( max_txsize_lookup [ bsize ] , //<S2SV> tx_mode_to_biggest_tx_size [ cpi -> common . tx_mode ] ) ; //<S2SV> } //<S2SV> { //<S2SV> const BLOCK_SIZE unit_size = //<S2SV> txsize_to_bsize [ xd -> mi [ 0 ] -> mbmi . tx_size ] ; //<S2SV> const unsigned int num_blk_log2 = //<S2SV> ( b_width_log2_lookup [ bsize ] - b_width_log2_lookup [ unit_size ] ) + //<S2SV> ( b_height_log2_lookup [ bsize ] - b_height_log2_lookup [ unit_size ] ) ; //<S2SV> const unsigned int sse_tx = sse >> num_blk_log2 ; //<S2SV> const unsigned int var_tx = var >> num_blk_log2 ; //<S2SV> x -> skip_txfm [ 0 ] = SKIP_TXFM_NONE ; //<S2SV> if ( var_tx < ac_thr || var == 0 ) { //<S2SV> x -> skip_txfm [ 0 ] = SKIP_TXFM_AC_ONLY ; //<S2SV> if ( sse_tx - var_tx < dc_thr || sse == var ) //<S2SV> x -> skip_txfm [ 0 ] = SKIP_TXFM_AC_DC ; //<S2SV> } else { //<S2SV> if ( sse_tx - var_tx < dc_thr || sse == var ) //<S2SV> skip_dc = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( x -> skip_txfm [ 0 ] == SKIP_TXFM_AC_DC ) { //<S2SV> * out_rate_sum = 0 ; //<S2SV> * out_dist_sum = sse << 4 ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! skip_dc ) { //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , //<S2SV> dc_quant >> ( xd -> bd - 5 ) , & rate , & dist ) ; //<S2SV> } else { //<S2SV> vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , //<S2SV> dc_quant >> 3 , & rate , & dist ) ; //<S2SV> } //<S2SV> # else //<S2SV> vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , //<S2SV> dc_quant >> 3 , & rate , & dist ) ; //<S2SV> # endif //<S2SV> } //<S2SV> if ( ! skip_dc ) { //<S2SV> * out_rate_sum = rate >> 1 ; //<S2SV> * out_dist_sum = dist << 3 ; //<S2SV> } else { //<S2SV> * out_rate_sum = 0 ; //<S2SV> * out_dist_sum = ( sse - var ) << 4 ; //<S2SV> } //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , //<S2SV> ac_quant >> ( xd -> bd - 5 ) , & rate , & dist ) ; //<S2SV> } else { //<S2SV> vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , //<S2SV> ac_quant >> 3 , & rate , & dist ) ; //<S2SV> } //<S2SV> # else //<S2SV> vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , //<S2SV> ac_quant >> 3 , & rate , & dist ) ; //<S2SV> # endif //<S2SV> * out_rate_sum += rate ; //<S2SV> * out_dist_sum += dist << 4 ; //<S2SV> } //<S2SV> 