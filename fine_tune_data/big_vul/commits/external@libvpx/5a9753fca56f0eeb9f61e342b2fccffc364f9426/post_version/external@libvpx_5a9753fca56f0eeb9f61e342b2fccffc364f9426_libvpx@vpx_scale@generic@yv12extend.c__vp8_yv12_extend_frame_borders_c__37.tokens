void vp8_yv12_extend_frame_borders_c ( YV12_BUFFER_CONFIG * ybf ) { //<S2SV> const int uv_border = ybf -> border / 2 ; //<S2SV> assert ( ybf -> border % 2 == 0 ) ; //<S2SV> assert ( ybf -> y_height - ybf -> y_crop_height < 16 ) ; //<S2SV> assert ( ybf -> y_width - ybf -> y_crop_width < 16 ) ; //<S2SV> assert ( ybf -> y_height - ybf -> y_crop_height >= 0 ) ; //<S2SV> assert ( ybf -> y_width - ybf -> y_crop_width >= 0 ) ; //<S2SV> # if CONFIG_VP9_HIGHBITDEPTH //<S2SV> if ( ybf -> flags & YV12_FLAG_HIGHBITDEPTH ) { //<S2SV> extend_plane_high ( //<S2SV> ybf -> y_buffer , ybf -> y_stride , //<S2SV> ybf -> y_crop_width , ybf -> y_crop_height , //<S2SV> ybf -> border , ybf -> border , //<S2SV> ybf -> border + ybf -> y_height - ybf -> y_crop_height , //<S2SV> ybf -> border + ybf -> y_width - ybf -> y_crop_width ) ; //<S2SV> extend_plane_high ( //<S2SV> ybf -> u_buffer , ybf -> uv_stride , //<S2SV> ybf -> uv_crop_width , ybf -> uv_crop_height , //<S2SV> uv_border , uv_border , //<S2SV> uv_border + ybf -> uv_height - ybf -> uv_crop_height , //<S2SV> uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; //<S2SV> extend_plane_high ( //<S2SV> ybf -> v_buffer , ybf -> uv_stride , //<S2SV> ybf -> uv_crop_width , ybf -> uv_crop_height , //<S2SV> uv_border , uv_border , //<S2SV> uv_border + ybf -> uv_height - ybf -> uv_crop_height , //<S2SV> uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; //<S2SV> return ; //<S2SV> } //<S2SV> # endif //<S2SV> extend_plane ( ybf -> y_buffer , ybf -> y_stride , //<S2SV> ybf -> y_crop_width , ybf -> y_crop_height , //<S2SV> ybf -> border , ybf -> border , //<S2SV> ybf -> border + ybf -> y_height - ybf -> y_crop_height , //<S2SV> ybf -> border + ybf -> y_width - ybf -> y_crop_width ) ; //<S2SV> extend_plane ( ybf -> u_buffer , ybf -> uv_stride , //<S2SV> ybf -> uv_crop_width , ybf -> uv_crop_height , //<S2SV> uv_border , uv_border , //<S2SV> uv_border + ybf -> uv_height - ybf -> uv_crop_height , //<S2SV> uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; //<S2SV> extend_plane ( ybf -> v_buffer , ybf -> uv_stride , //<S2SV> ybf -> uv_crop_width , ybf -> uv_crop_height , //<S2SV> uv_border , uv_border , //<S2SV> uv_border + ybf -> uv_height - ybf -> uv_crop_height , //<S2SV> uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; //<S2SV> } //<S2SV> 