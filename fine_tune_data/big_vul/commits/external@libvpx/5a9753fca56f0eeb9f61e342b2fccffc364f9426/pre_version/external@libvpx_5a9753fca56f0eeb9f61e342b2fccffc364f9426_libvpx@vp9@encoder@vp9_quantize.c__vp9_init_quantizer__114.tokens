void vp9_init_quantizer ( VP9_COMP * cpi ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> QUANTS * const quants = & cpi -> quants ; //<S2SV> int i , q , quant ; //<S2SV> for ( q = 0 ; q < QINDEX_RANGE ; q ++ ) { //<S2SV> const int qzbin_factor = q == 0 ? 64 : ( vp9_dc_quant ( q , 0 ) < 148 ? 84 : 80 ) ; //<S2SV> const int qrounding_factor = q == 0 ? 64 : 48 ; //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> quant = i == 0 ? vp9_dc_quant ( q , cm -> y_dc_delta_q ) //<S2SV> : vp9_ac_quant ( q , 0 ) ; //<S2SV> invert_quant ( & quants -> y_quant [ q ] [ i ] , & quants -> y_quant_shift [ q ] [ i ] , quant ) ; //<S2SV> quants -> y_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; //<S2SV> quants -> y_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; //<S2SV> cm -> y_dequant [ q ] [ i ] = quant ; //<S2SV> quant = i == 0 ? vp9_dc_quant ( q , cm -> uv_dc_delta_q ) //<S2SV> : vp9_ac_quant ( q , cm -> uv_ac_delta_q ) ; //<S2SV> invert_quant ( & quants -> uv_quant [ q ] [ i ] , //<S2SV> & quants -> uv_quant_shift [ q ] [ i ] , quant ) ; //<S2SV> quants -> uv_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; //<S2SV> quants -> uv_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; //<S2SV> cm -> uv_dequant [ q ] [ i ] = quant ; //<S2SV> # if CONFIG_ALPHA //<S2SV> quant = i == 0 ? vp9_dc_quant ( q , cm -> a_dc_delta_q ) //<S2SV> : vp9_ac_quant ( q , cm -> a_ac_delta_q ) ; //<S2SV> invert_quant ( & quants -> a_quant [ q ] [ i ] , & quants -> a_quant_shift [ q ] [ i ] , quant ) ; //<S2SV> quants -> a_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; //<S2SV> quants -> a_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; //<S2SV> cm -> a_dequant [ q ] [ i ] = quant ; //<S2SV> # endif //<S2SV> } //<S2SV> for ( i = 2 ; i < 8 ; i ++ ) { //<S2SV> quants -> y_quant [ q ] [ i ] = quants -> y_quant [ q ] [ 1 ] ; //<S2SV> quants -> y_quant_shift [ q ] [ i ] = quants -> y_quant_shift [ q ] [ 1 ] ; //<S2SV> quants -> y_zbin [ q ] [ i ] = quants -> y_zbin [ q ] [ 1 ] ; //<S2SV> quants -> y_round [ q ] [ i ] = quants -> y_round [ q ] [ 1 ] ; //<S2SV> cm -> y_dequant [ q ] [ i ] = cm -> y_dequant [ q ] [ 1 ] ; //<S2SV> quants -> uv_quant [ q ] [ i ] = quants -> uv_quant [ q ] [ 1 ] ; //<S2SV> quants -> uv_quant_shift [ q ] [ i ] = quants -> uv_quant_shift [ q ] [ 1 ] ; //<S2SV> quants -> uv_zbin [ q ] [ i ] = quants -> uv_zbin [ q ] [ 1 ] ; //<S2SV> quants -> uv_round [ q ] [ i ] = quants -> uv_round [ q ] [ 1 ] ; //<S2SV> cm -> uv_dequant [ q ] [ i ] = cm -> uv_dequant [ q ] [ 1 ] ; //<S2SV> # if CONFIG_ALPHA //<S2SV> quants -> a_quant [ q ] [ i ] = quants -> a_quant [ q ] [ 1 ] ; //<S2SV> quants -> a_quant_shift [ q ] [ i ] = quants -> a_quant_shift [ q ] [ 1 ] ; //<S2SV> quants -> a_zbin [ q ] [ i ] = quants -> a_zbin [ q ] [ 1 ] ; //<S2SV> quants -> a_round [ q ] [ i ] = quants -> a_round [ q ] [ 1 ] ; //<S2SV> cm -> a_dequant [ q ] [ i ] = cm -> a_dequant [ q ] [ 1 ] ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 