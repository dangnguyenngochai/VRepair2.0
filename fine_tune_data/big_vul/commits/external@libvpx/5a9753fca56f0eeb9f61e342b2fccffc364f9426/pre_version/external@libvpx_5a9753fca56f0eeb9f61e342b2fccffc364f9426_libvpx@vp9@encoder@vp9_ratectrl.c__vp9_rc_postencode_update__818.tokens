void vp9_rc_postencode_update ( VP9_COMP * cpi , uint64_t bytes_used ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; //<S2SV> RATE_CONTROL * const rc = & cpi -> rc ; //<S2SV> cm -> last_frame_type = cm -> frame_type ; //<S2SV> rc -> projected_frame_size = ( int ) ( bytes_used << 3 ) ; //<S2SV> vp9_rc_update_rate_correction_factors ( //<S2SV> cpi , ( cpi -> sf . recode_loop >= ALLOW_RECODE_KFARFGF || //<S2SV> oxcf -> end_usage == USAGE_STREAM_FROM_SERVER ) ? 2 : 0 ) ; //<S2SV> if ( cm -> frame_type == KEY_FRAME ) { //<S2SV> rc -> last_q [ KEY_FRAME ] = cm -> base_qindex ; //<S2SV> rc -> avg_frame_qindex [ KEY_FRAME ] = ROUND_POWER_OF_TWO ( //<S2SV> 3 * rc -> avg_frame_qindex [ KEY_FRAME ] + cm -> base_qindex , 2 ) ; //<S2SV> } else if ( ! rc -> is_src_frame_alt_ref && //<S2SV> ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) && //<S2SV> ! ( cpi -> use_svc && oxcf -> end_usage == USAGE_STREAM_FROM_SERVER ) ) { //<S2SV> rc -> last_q [ 2 ] = cm -> base_qindex ; //<S2SV> rc -> avg_frame_qindex [ 2 ] = ROUND_POWER_OF_TWO ( //<S2SV> 3 * rc -> avg_frame_qindex [ 2 ] + cm -> base_qindex , 2 ) ; //<S2SV> } else { //<S2SV> rc -> last_q [ INTER_FRAME ] = cm -> base_qindex ; //<S2SV> rc -> avg_frame_qindex [ INTER_FRAME ] = ROUND_POWER_OF_TWO ( //<S2SV> 3 * rc -> avg_frame_qindex [ INTER_FRAME ] + cm -> base_qindex , 2 ) ; //<S2SV> rc -> ni_frames ++ ; //<S2SV> rc -> tot_q += vp9_convert_qindex_to_q ( cm -> base_qindex ) ; //<S2SV> rc -> avg_q = rc -> tot_q / ( double ) rc -> ni_frames ; //<S2SV> rc -> ni_tot_qi += cm -> base_qindex ; //<S2SV> rc -> ni_av_qi = rc -> ni_tot_qi / rc -> ni_frames ; //<S2SV> } //<S2SV> if ( ( cm -> base_qindex < rc -> last_boosted_qindex ) || //<S2SV> ( ( cpi -> static_mb_pct < 100 ) && //<S2SV> ( ( cm -> frame_type == KEY_FRAME ) || cpi -> refresh_alt_ref_frame || //<S2SV> ( cpi -> refresh_golden_frame && ! rc -> is_src_frame_alt_ref ) ) ) ) { //<S2SV> rc -> last_boosted_qindex = cm -> base_qindex ; //<S2SV> } //<S2SV> update_buffer_level ( cpi , rc -> projected_frame_size ) ; //<S2SV> if ( cm -> frame_type != KEY_FRAME ) { //<S2SV> rc -> rolling_target_bits = ROUND_POWER_OF_TWO ( //<S2SV> rc -> rolling_target_bits * 3 + rc -> this_frame_target , 2 ) ; //<S2SV> rc -> rolling_actual_bits = ROUND_POWER_OF_TWO ( //<S2SV> rc -> rolling_actual_bits * 3 + rc -> projected_frame_size , 2 ) ; //<S2SV> rc -> long_rolling_target_bits = ROUND_POWER_OF_TWO ( //<S2SV> rc -> long_rolling_target_bits * 31 + rc -> this_frame_target , 5 ) ; //<S2SV> rc -> long_rolling_actual_bits = ROUND_POWER_OF_TWO ( //<S2SV> rc -> long_rolling_actual_bits * 31 + rc -> projected_frame_size , 5 ) ; //<S2SV> } //<S2SV> rc -> total_actual_bits += rc -> projected_frame_size ; //<S2SV> rc -> total_target_bits += ( cm -> show_frame ? rc -> av_per_frame_bandwidth : 0 ) ; //<S2SV> rc -> total_target_vs_actual = rc -> total_actual_bits - rc -> total_target_bits ; //<S2SV> if ( oxcf -> play_alternate && cpi -> refresh_alt_ref_frame && //<S2SV> ( cm -> frame_type != KEY_FRAME ) ) //<S2SV> update_alt_ref_frame_stats ( cpi ) ; //<S2SV> else //<S2SV> update_golden_frame_stats ( cpi ) ; //<S2SV> if ( cm -> frame_type == KEY_FRAME ) //<S2SV> rc -> frames_since_key = 0 ; //<S2SV> if ( cm -> show_frame ) { //<S2SV> rc -> frames_since_key ++ ; //<S2SV> rc -> frames_to_key -- ; //<S2SV> } //<S2SV> } //<S2SV> 