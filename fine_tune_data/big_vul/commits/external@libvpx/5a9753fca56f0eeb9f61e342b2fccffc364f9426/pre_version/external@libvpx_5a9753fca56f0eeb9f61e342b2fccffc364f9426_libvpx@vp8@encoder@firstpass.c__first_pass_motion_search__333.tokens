static void first_pass_motion_search ( VP8_COMP * cpi , MACROBLOCK * x , //<S2SV> int_mv * ref_mv , MV * best_mv , //<S2SV> YV12_BUFFER_CONFIG * recon_buffer , //<S2SV> int * best_motion_err , int recon_yoffset ) //<S2SV> { //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> BLOCK * b = & x -> block [ 0 ] ; //<S2SV> BLOCKD * d = & x -> e_mbd . block [ 0 ] ; //<S2SV> int num00 ; //<S2SV> int_mv tmp_mv ; //<S2SV> int_mv ref_mv_full ; //<S2SV> int tmp_err ; //<S2SV> int step_param = 3 ; //<S2SV> int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; //<S2SV> int n ; //<S2SV> vp8_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ BLOCK_16X16 ] ; //<S2SV> int new_mv_mode_penalty = 256 ; //<S2SV> v_fn_ptr . vf = vp8_mse16x16 ; //<S2SV> xd -> pre . y_buffer = recon_buffer -> y_buffer + recon_yoffset ; //<S2SV> tmp_mv . as_int = 0 ; //<S2SV> ref_mv_full . as_mv . col = ref_mv -> as_mv . col >> 3 ; //<S2SV> ref_mv_full . as_mv . row = ref_mv -> as_mv . row >> 3 ; //<S2SV> tmp_err = cpi -> diamond_search_sad ( x , b , d , & ref_mv_full , & tmp_mv , step_param , //<S2SV> x -> sadperbit16 , & num00 , & v_fn_ptr , //<S2SV> x -> mvcost , ref_mv ) ; //<S2SV> if ( tmp_err < INT_MAX - new_mv_mode_penalty ) //<S2SV> tmp_err += new_mv_mode_penalty ; //<S2SV> if ( tmp_err < * best_motion_err ) //<S2SV> { //<S2SV> * best_motion_err = tmp_err ; //<S2SV> best_mv -> row = tmp_mv . as_mv . row ; //<S2SV> best_mv -> col = tmp_mv . as_mv . col ; //<S2SV> } //<S2SV> n = num00 ; //<S2SV> num00 = 0 ; //<S2SV> while ( n < further_steps ) //<S2SV> { //<S2SV> n ++ ; //<S2SV> if ( num00 ) //<S2SV> num00 -- ; //<S2SV> else //<S2SV> { //<S2SV> tmp_err = cpi -> diamond_search_sad ( x , b , d , & ref_mv_full , & tmp_mv , //<S2SV> step_param + n , x -> sadperbit16 , //<S2SV> & num00 , & v_fn_ptr , x -> mvcost , //<S2SV> ref_mv ) ; //<S2SV> if ( tmp_err < INT_MAX - new_mv_mode_penalty ) //<S2SV> tmp_err += new_mv_mode_penalty ; //<S2SV> if ( tmp_err < * best_motion_err ) //<S2SV> { //<S2SV> * best_motion_err = tmp_err ; //<S2SV> best_mv -> row = tmp_mv . as_mv . row ; //<S2SV> best_mv -> col = tmp_mv . as_mv . col ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 