void update_rate_histogram ( struct rate_hist * hist , //<S2SV> const vpx_codec_enc_cfg_t * cfg , //<S2SV> const vpx_codec_cx_pkt_t * pkt ) { //<S2SV> int i ; //<S2SV> int64_t then = 0 ; //<S2SV> int64_t avg_bitrate = 0 ; //<S2SV> int64_t sum_sz = 0 ; //<S2SV> const int64_t now = pkt -> data . frame . pts * 1000 * //<S2SV> ( uint64_t ) cfg -> g_timebase . num / //<S2SV> ( uint64_t ) cfg -> g_timebase . den ; //<S2SV> int idx = hist -> frames ++ % hist -> samples ; //<S2SV> hist -> pts [ idx ] = now ; //<S2SV> hist -> sz [ idx ] = ( int ) pkt -> data . frame . sz ; //<S2SV> if ( now < cfg -> rc_buf_initial_sz ) //<S2SV> return ; //<S2SV> then = now ; //<S2SV> for ( i = hist -> frames ; i > 0 && hist -> frames - i < hist -> samples ; i -- ) { //<S2SV> const int i_idx = ( i - 1 ) % hist -> samples ; //<S2SV> then = hist -> pts [ i_idx ] ; //<S2SV> if ( now - then > cfg -> rc_buf_sz ) //<S2SV> break ; //<S2SV> sum_sz += hist -> sz [ i_idx ] ; //<S2SV> } //<S2SV> if ( now == then ) //<S2SV> return ; //<S2SV> avg_bitrate = sum_sz * 8 * 1000 / ( now - then ) ; //<S2SV> idx = ( int ) ( avg_bitrate * ( RATE_BINS / 2 ) / ( cfg -> rc_target_bitrate * 1000 ) ) ; //<S2SV> if ( idx < 0 ) //<S2SV> idx = 0 ; //<S2SV> if ( idx > RATE_BINS - 1 ) //<S2SV> idx = RATE_BINS - 1 ; //<S2SV> if ( hist -> bucket [ idx ] . low > avg_bitrate ) //<S2SV> hist -> bucket [ idx ] . low = ( int ) avg_bitrate ; //<S2SV> if ( hist -> bucket [ idx ] . high < avg_bitrate ) //<S2SV> hist -> bucket [ idx ] . high = ( int ) avg_bitrate ; //<S2SV> hist -> bucket [ idx ] . count ++ ; //<S2SV> hist -> total ++ ; //<S2SV> } //<S2SV> 