void generate_filename ( const char * pattern , char * out , size_t q_len , //<S2SV> unsigned int d_w , unsigned int d_h , //<S2SV> unsigned int frame_in ) { //<S2SV> const char * p = pattern ; //<S2SV> char * q = out ; //<S2SV> do { //<S2SV> char * next_pat = strchr ( p , '%' ) ; //<S2SV> if ( p == next_pat ) { //<S2SV> size_t pat_len ; //<S2SV> q [ q_len - 1 ] = '\\0' ; //<S2SV> switch ( p [ 1 ] ) { //<S2SV> case 'w' : //<S2SV> snprintf ( q , q_len - 1 , "%d" , d_w ) ; //<S2SV> break ; //<S2SV> case 'h' : //<S2SV> snprintf ( q , q_len - 1 , "%d" , d_h ) ; //<S2SV> break ; //<S2SV> case '1' : //<S2SV> snprintf ( q , q_len - 1 , "%d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '2' : //<S2SV> snprintf ( q , q_len - 1 , "%02d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '3' : //<S2SV> snprintf ( q , q_len - 1 , "%03d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '4' : //<S2SV> snprintf ( q , q_len - 1 , "%04d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '5' : //<S2SV> snprintf ( q , q_len - 1 , "%05d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '6' : //<S2SV> snprintf ( q , q_len - 1 , "%06d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '7' : //<S2SV> snprintf ( q , q_len - 1 , "%07d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '8' : //<S2SV> snprintf ( q , q_len - 1 , "%08d" , frame_in ) ; //<S2SV> break ; //<S2SV> case '9' : //<S2SV> snprintf ( q , q_len - 1 , "%09d" , frame_in ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> die ( "Unrecognized<S2SV_blank>pattern<S2SV_blank>%%%c\\n" , p [ 1 ] ) ; //<S2SV> } //<S2SV> pat_len = strlen ( q ) ; //<S2SV> if ( pat_len >= q_len - 1 ) //<S2SV> die ( "Output<S2SV_blank>filename<S2SV_blank>too<S2SV_blank>long.\\n" ) ; //<S2SV> q += pat_len ; //<S2SV> p += 2 ; //<S2SV> q_len -= pat_len ; //<S2SV> } else { //<S2SV> size_t copy_len ; //<S2SV> if ( ! next_pat ) //<S2SV> copy_len = strlen ( p ) ; //<S2SV> else //<S2SV> copy_len = next_pat - p ; //<S2SV> if ( copy_len >= q_len - 1 ) //<S2SV> die ( "Output<S2SV_blank>filename<S2SV_blank>too<S2SV_blank>long.\\n" ) ; //<S2SV> memcpy ( q , p , copy_len ) ; //<S2SV> q [ copy_len ] = '\\0' ; //<S2SV> q += copy_len ; //<S2SV> p += copy_len ; //<S2SV> q_len -= copy_len ; //<S2SV> } //<S2SV> } while ( * p ) ; //<S2SV> } //<S2SV> 