void usage_exit ( ) { //<S2SV> int i ; //<S2SV> fprintf ( stderr , "Usage:<S2SV_blank>%s<S2SV_blank><options><S2SV_blank>-o<S2SV_blank>dst_filename<S2SV_blank>src_filename<S2SV_blank>\\n" , //<S2SV> exec_name ) ; //<S2SV> fprintf ( stderr , "\\nOptions:\\n" ) ; //<S2SV> arg_show_usage ( stderr , main_args ) ; //<S2SV> fprintf ( stderr , "\\nEncoder<S2SV_blank>Global<S2SV_blank>Options:\\n" ) ; //<S2SV> arg_show_usage ( stderr , global_args ) ; //<S2SV> fprintf ( stderr , "\\nRate<S2SV_blank>Control<S2SV_blank>Options:\\n" ) ; //<S2SV> arg_show_usage ( stderr , rc_args ) ; //<S2SV> fprintf ( stderr , "\\nTwopass<S2SV_blank>Rate<S2SV_blank>Control<S2SV_blank>Options:\\n" ) ; //<S2SV> arg_show_usage ( stderr , rc_twopass_args ) ; //<S2SV> fprintf ( stderr , "\\nKeyframe<S2SV_blank>Placement<S2SV_blank>Options:\\n" ) ; //<S2SV> arg_show_usage ( stderr , kf_args ) ; //<S2SV> # if CONFIG_VP8_ENCODER //<S2SV> fprintf ( stderr , "\\nVP8<S2SV_blank>Specific<S2SV_blank>Options:\\n" ) ; //<S2SV> arg_show_usage ( stderr , vp8_args ) ; //<S2SV> # endif //<S2SV> # if CONFIG_VP9_ENCODER //<S2SV> fprintf ( stderr , "\\nVP9<S2SV_blank>Specific<S2SV_blank>Options:\\n" ) ; //<S2SV> arg_show_usage ( stderr , vp9_args ) ; //<S2SV> # endif //<S2SV> fprintf ( stderr , "\\nStream<S2SV_blank>timebase<S2SV_blank>(--timebase):\\n" //<S2SV> "<S2SV_blank><S2SV_blank>The<S2SV_blank>desired<S2SV_blank>precision<S2SV_blank>of<S2SV_blank>timestamps<S2SV_blank>in<S2SV_blank>the<S2SV_blank>output,<S2SV_blank>expressed\\n" //<S2SV> "<S2SV_blank><S2SV_blank>in<S2SV_blank>fractional<S2SV_blank>seconds.<S2SV_blank>Default<S2SV_blank>is<S2SV_blank>1/1000.\\n" ) ; //<S2SV> fprintf ( stderr , "\\nIncluded<S2SV_blank>encoders:\\n\\n" ) ; //<S2SV> for ( i = 0 ; i < get_vpx_encoder_count ( ) ; ++ i ) { //<S2SV> const VpxInterface * const encoder = get_vpx_encoder_by_index ( i ) ; //<S2SV> fprintf ( stderr , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-6s<S2SV_blank>-<S2SV_blank>%s\\n" , //<S2SV> encoder -> name , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; //<S2SV> } //<S2SV> exit ( EXIT_FAILURE ) ; //<S2SV> } //<S2SV> 