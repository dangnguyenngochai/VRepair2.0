static int calc_pframe_target_size_one_pass_cbr ( const VP9_COMP * cpi ) { //<S2SV> const VP9_CONFIG * oxcf = & cpi -> oxcf ; //<S2SV> const RATE_CONTROL * rc = & cpi -> rc ; //<S2SV> const SVC * const svc = & cpi -> svc ; //<S2SV> const int64_t diff = oxcf -> optimal_buffer_level - rc -> buffer_level ; //<S2SV> const int64_t one_pct_bits = 1 + oxcf -> optimal_buffer_level / 100 ; //<S2SV> int min_frame_target = MAX ( rc -> av_per_frame_bandwidth >> 4 , //<S2SV> FRAME_OVERHEAD_BITS ) ; //<S2SV> int target = rc -> av_per_frame_bandwidth ; //<S2SV> if ( svc -> number_temporal_layers > 1 && //<S2SV> oxcf -> end_usage == USAGE_STREAM_FROM_SERVER ) { //<S2SV> int current_temporal_layer = svc -> temporal_layer_id ; //<S2SV> const LAYER_CONTEXT * lc = & svc -> layer_context [ current_temporal_layer ] ; //<S2SV> target = lc -> avg_frame_size ; //<S2SV> min_frame_target = MAX ( lc -> avg_frame_size >> 4 , FRAME_OVERHEAD_BITS ) ; //<S2SV> } //<S2SV> if ( diff > 0 ) { //<S2SV> const int pct_low = ( int ) MIN ( diff / one_pct_bits , oxcf -> under_shoot_pct ) ; //<S2SV> target -= ( target * pct_low ) / 200 ; //<S2SV> } else if ( diff < 0 ) { //<S2SV> const int pct_high = ( int ) MIN ( - diff / one_pct_bits , oxcf -> over_shoot_pct ) ; //<S2SV> target += ( target * pct_high ) / 200 ; //<S2SV> } //<S2SV> return MAX ( min_frame_target , target ) ; //<S2SV> } //<S2SV> 