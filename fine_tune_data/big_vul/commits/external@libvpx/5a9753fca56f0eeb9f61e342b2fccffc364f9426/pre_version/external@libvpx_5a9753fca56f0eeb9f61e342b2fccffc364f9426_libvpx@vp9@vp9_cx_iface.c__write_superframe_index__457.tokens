static int write_superframe_index ( vpx_codec_alg_priv_t * ctx ) { //<S2SV> uint8_t marker = 0xc0 ; //<S2SV> unsigned int mask ; //<S2SV> int mag , index_sz ; //<S2SV> assert ( ctx -> pending_frame_count ) ; //<S2SV> assert ( ctx -> pending_frame_count <= 8 ) ; //<S2SV> marker |= ctx -> pending_frame_count - 1 ; //<S2SV> for ( mag = 0 , mask = 0xff ; mag < 4 ; mag ++ ) { //<S2SV> if ( ctx -> pending_frame_magnitude < mask ) //<S2SV> break ; //<S2SV> mask <<= 8 ; //<S2SV> mask |= 0xff ; //<S2SV> } //<S2SV> marker |= mag << 3 ; //<S2SV> index_sz = 2 + ( mag + 1 ) * ctx -> pending_frame_count ; //<S2SV> if ( ctx -> pending_cx_data_sz + index_sz < ctx -> cx_data_sz ) { //<S2SV> uint8_t * x = ctx -> pending_cx_data + ctx -> pending_cx_data_sz ; //<S2SV> int i , j ; //<S2SV> * x ++ = marker ; //<S2SV> for ( i = 0 ; i < ctx -> pending_frame_count ; i ++ ) { //<S2SV> unsigned int this_sz = ( unsigned int ) ctx -> pending_frame_sizes [ i ] ; //<S2SV> for ( j = 0 ; j <= mag ; j ++ ) { //<S2SV> * x ++ = this_sz & 0xff ; //<S2SV> this_sz >>= 8 ; //<S2SV> } //<S2SV> } //<S2SV> * x ++ = marker ; //<S2SV> ctx -> pending_cx_data_sz += index_sz ; //<S2SV> } //<S2SV> return index_sz ; //<S2SV> } //<S2SV> 