int vp9_receive_compressed_data ( VP9Decoder * pbi , //<S2SV> size_t size , const uint8_t * * psource , //<S2SV> int64_t time_stamp ) { //<S2SV> VP9_COMMON * const cm = & pbi -> common ; //<S2SV> const uint8_t * source = * psource ; //<S2SV> int retcode = 0 ; //<S2SV> cm -> error . error_code = VPX_CODEC_OK ; //<S2SV> if ( size == 0 ) { //<S2SV> if ( cm -> frame_refs [ 0 ] . idx != INT_MAX ) //<S2SV> cm -> frame_refs [ 0 ] . buf -> corrupted = 1 ; //<S2SV> } //<S2SV> if ( cm -> new_fb_idx >= 0 && cm -> frame_bufs [ cm -> new_fb_idx ] . ref_count == 0 ) //<S2SV> cm -> release_fb_cb ( cm -> cb_priv , //<S2SV> & cm -> frame_bufs [ cm -> new_fb_idx ] . raw_frame_buffer ) ; //<S2SV> cm -> new_fb_idx = get_free_fb ( cm ) ; //<S2SV> if ( setjmp ( cm -> error . jmp ) ) { //<S2SV> cm -> error . setjmp = 0 ; //<S2SV> if ( cm -> frame_refs [ 0 ] . idx != INT_MAX ) //<S2SV> cm -> frame_refs [ 0 ] . buf -> corrupted = 1 ; //<S2SV> if ( cm -> frame_bufs [ cm -> new_fb_idx ] . ref_count > 0 ) //<S2SV> cm -> frame_bufs [ cm -> new_fb_idx ] . ref_count -- ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> cm -> error . setjmp = 1 ; //<S2SV> retcode = vp9_decode_frame ( pbi , source , source + size , psource ) ; //<S2SV> if ( retcode < 0 ) { //<S2SV> cm -> error . error_code = VPX_CODEC_ERROR ; //<S2SV> cm -> error . setjmp = 0 ; //<S2SV> if ( cm -> frame_bufs [ cm -> new_fb_idx ] . ref_count > 0 ) //<S2SV> cm -> frame_bufs [ cm -> new_fb_idx ] . ref_count -- ; //<S2SV> return retcode ; //<S2SV> } //<S2SV> swap_frame_buffers ( pbi ) ; //<S2SV> # if WRITE_RECON_BUFFER == 2 //<S2SV> if ( cm -> show_frame ) //<S2SV> write_dx_frame_to_file ( cm -> frame_to_show , //<S2SV> cm -> current_video_frame ) ; //<S2SV> else //<S2SV> write_dx_frame_to_file ( cm -> frame_to_show , //<S2SV> cm -> current_video_frame + 1000 ) ; //<S2SV> # endif //<S2SV> if ( ! pbi -> do_loopfilter_inline ) { //<S2SV> if ( pbi -> num_tile_workers ) { //<S2SV> vp9_loop_filter_frame_mt ( pbi , cm , & pbi -> mb , cm -> lf . filter_level , 0 , 0 ) ; //<S2SV> } else { //<S2SV> vp9_loop_filter_frame ( cm , & pbi -> mb , cm -> lf . filter_level , 0 , 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> # if WRITE_RECON_BUFFER == 2 //<S2SV> if ( cm -> show_frame ) //<S2SV> write_dx_frame_to_file ( cm -> frame_to_show , //<S2SV> cm -> current_video_frame + 2000 ) ; //<S2SV> else //<S2SV> write_dx_frame_to_file ( cm -> frame_to_show , //<S2SV> cm -> current_video_frame + 3000 ) ; //<S2SV> # endif //<S2SV> # if WRITE_RECON_BUFFER == 1 //<S2SV> if ( cm -> show_frame ) //<S2SV> recon_write_yuv_frame ( "recon.yuv" , cm -> frame_to_show , //<S2SV> cm -> width , cm -> height ) ; //<S2SV> # endif //<S2SV> vp9_clear_system_state ( ) ; //<S2SV> cm -> last_width = cm -> width ; //<S2SV> cm -> last_height = cm -> height ; //<S2SV> if ( ! cm -> show_existing_frame ) //<S2SV> cm -> last_show_frame = cm -> show_frame ; //<S2SV> if ( cm -> show_frame ) { //<S2SV> if ( ! cm -> show_existing_frame ) //<S2SV> vp9_swap_mi_and_prev_mi ( cm ) ; //<S2SV> cm -> current_video_frame ++ ; //<S2SV> } //<S2SV> pbi -> ready_for_new_data = 0 ; //<S2SV> pbi -> last_time_stamp = time_stamp ; //<S2SV> cm -> error . setjmp = 0 ; //<S2SV> return retcode ; //<S2SV> } //<S2SV> 