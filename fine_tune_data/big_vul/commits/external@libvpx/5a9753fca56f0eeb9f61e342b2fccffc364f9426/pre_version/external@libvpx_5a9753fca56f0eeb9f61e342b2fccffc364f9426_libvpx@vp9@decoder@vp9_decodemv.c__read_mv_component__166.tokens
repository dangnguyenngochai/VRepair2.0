static int read_mv_component ( vp9_reader * r , //<S2SV> const nmv_component * mvcomp , int usehp ) { //<S2SV> int mag , d , fr , hp ; //<S2SV> const int sign = vp9_read ( r , mvcomp -> sign ) ; //<S2SV> const int mv_class = vp9_read_tree ( r , vp9_mv_class_tree , mvcomp -> classes ) ; //<S2SV> const int class0 = mv_class == MV_CLASS_0 ; //<S2SV> if ( class0 ) { //<S2SV> d = vp9_read_tree ( r , vp9_mv_class0_tree , mvcomp -> class0 ) ; //<S2SV> } else { //<S2SV> int i ; //<S2SV> const int n = mv_class + CLASS0_BITS - 1 ; //<S2SV> d = 0 ; //<S2SV> for ( i = 0 ; i < n ; ++ i ) //<S2SV> d |= vp9_read ( r , mvcomp -> bits [ i ] ) << i ; //<S2SV> } //<S2SV> fr = vp9_read_tree ( r , vp9_mv_fp_tree , class0 ? mvcomp -> class0_fp [ d ] //<S2SV> : mvcomp -> fp ) ; //<S2SV> hp = usehp ? vp9_read ( r , class0 ? mvcomp -> class0_hp : mvcomp -> hp ) //<S2SV> : 1 ; //<S2SV> mag = vp9_get_mv_mag ( mv_class , ( d << 3 ) | ( fr << 1 ) | hp ) + 1 ; //<S2SV> return sign ? - mag : mag ; //<S2SV> } //<S2SV> 