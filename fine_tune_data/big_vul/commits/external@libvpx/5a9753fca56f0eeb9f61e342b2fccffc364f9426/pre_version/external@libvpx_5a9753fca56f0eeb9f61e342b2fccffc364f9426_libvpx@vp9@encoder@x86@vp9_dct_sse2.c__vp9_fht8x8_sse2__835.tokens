void vp9_fht8x8_sse2 ( const int16_t * input , int16_t * output , //<S2SV> int stride , int tx_type ) { //<S2SV> __m128i in [ 8 ] ; //<S2SV> switch ( tx_type ) { //<S2SV> case DCT_DCT : //<S2SV> vp9_fdct8x8_sse2 ( input , output , stride ) ; //<S2SV> break ; //<S2SV> case ADST_DCT : //<S2SV> load_buffer_8x8 ( input , in , stride ) ; //<S2SV> fadst8_sse2 ( in ) ; //<S2SV> fdct8_sse2 ( in ) ; //<S2SV> right_shift_8x8 ( in , 1 ) ; //<S2SV> write_buffer_8x8 ( output , in , 8 ) ; //<S2SV> break ; //<S2SV> case DCT_ADST : //<S2SV> load_buffer_8x8 ( input , in , stride ) ; //<S2SV> fdct8_sse2 ( in ) ; //<S2SV> fadst8_sse2 ( in ) ; //<S2SV> right_shift_8x8 ( in , 1 ) ; //<S2SV> write_buffer_8x8 ( output , in , 8 ) ; //<S2SV> break ; //<S2SV> case ADST_ADST : //<S2SV> load_buffer_8x8 ( input , in , stride ) ; //<S2SV> fadst8_sse2 ( in ) ; //<S2SV> fadst8_sse2 ( in ) ; //<S2SV> right_shift_8x8 ( in , 1 ) ; //<S2SV> write_buffer_8x8 ( output , in , 8 ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> assert ( 0 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> 