int y4m_input_fetch_frame ( y4m_input * _y4m , FILE * _fin , vpx_image_t * _img ) { //<S2SV> char frame [ 6 ] ; //<S2SV> int pic_sz ; //<S2SV> int c_w ; //<S2SV> int c_h ; //<S2SV> int c_sz ; //<S2SV> if ( ! file_read ( frame , 6 , _fin ) ) return 0 ; //<S2SV> if ( memcmp ( frame , "FRAME" , 5 ) ) { //<S2SV> fprintf ( stderr , "Loss<S2SV_blank>of<S2SV_blank>framing<S2SV_blank>in<S2SV_blank>Y4M<S2SV_blank>input<S2SV_blank>data\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( frame [ 5 ] != '\\n' ) { //<S2SV> char c ; //<S2SV> int j ; //<S2SV> for ( j = 0 ; j < 79 && file_read ( & c , 1 , _fin ) && c != '\\n' ; j ++ ) { } //<S2SV> if ( j == 79 ) { //<S2SV> fprintf ( stderr , "Error<S2SV_blank>parsing<S2SV_blank>Y4M<S2SV_blank>frame<S2SV_blank>header\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! file_read ( _y4m -> dst_buf , _y4m -> dst_buf_read_sz , _fin ) ) { //<S2SV> fprintf ( stderr , "Error<S2SV_blank>reading<S2SV_blank>Y4M<S2SV_blank>frame<S2SV_blank>data.\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! file_read ( _y4m -> aux_buf , _y4m -> aux_buf_read_sz , _fin ) ) { //<S2SV> fprintf ( stderr , "Error<S2SV_blank>reading<S2SV_blank>Y4M<S2SV_blank>frame<S2SV_blank>data.\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ( * _y4m -> convert ) ( _y4m , _y4m -> dst_buf , _y4m -> aux_buf ) ; //<S2SV> memset ( _img , 0 , sizeof ( * _img ) ) ; //<S2SV> _img -> fmt = _y4m -> vpx_fmt ; //<S2SV> _img -> w = _img -> d_w = _y4m -> pic_w ; //<S2SV> _img -> h = _img -> d_h = _y4m -> pic_h ; //<S2SV> _img -> x_chroma_shift = _y4m -> dst_c_dec_h >> 1 ; //<S2SV> _img -> y_chroma_shift = _y4m -> dst_c_dec_v >> 1 ; //<S2SV> _img -> bps = _y4m -> vpx_bps ; //<S2SV> pic_sz = _y4m -> pic_w * _y4m -> pic_h ; //<S2SV> c_w = ( _y4m -> pic_w + _y4m -> dst_c_dec_h - 1 ) / _y4m -> dst_c_dec_h ; //<S2SV> c_h = ( _y4m -> pic_h + _y4m -> dst_c_dec_v - 1 ) / _y4m -> dst_c_dec_v ; //<S2SV> c_sz = c_w * c_h ; //<S2SV> _img -> stride [ PLANE_Y ] = _img -> stride [ PLANE_ALPHA ] = _y4m -> pic_w ; //<S2SV> _img -> stride [ PLANE_U ] = _img -> stride [ PLANE_V ] = c_w ; //<S2SV> _img -> planes [ PLANE_Y ] = _y4m -> dst_buf ; //<S2SV> _img -> planes [ PLANE_U ] = _y4m -> dst_buf + pic_sz ; //<S2SV> _img -> planes [ PLANE_V ] = _y4m -> dst_buf + pic_sz + c_sz ; //<S2SV> _img -> planes [ PLANE_ALPHA ] = _y4m -> dst_buf + pic_sz + 2 * c_sz ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 