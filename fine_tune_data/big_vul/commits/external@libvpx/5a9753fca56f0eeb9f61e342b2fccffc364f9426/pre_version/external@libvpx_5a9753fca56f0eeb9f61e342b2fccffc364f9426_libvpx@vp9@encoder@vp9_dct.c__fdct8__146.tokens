static void fdct8 ( const int16_t * input , int16_t * output ) { //<S2SV> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; //<S2SV> int t0 , t1 , t2 , t3 ; //<S2SV> int x0 , x1 , x2 , x3 ; //<S2SV> s0 = input [ 0 ] + input [ 7 ] ; //<S2SV> s1 = input [ 1 ] + input [ 6 ] ; //<S2SV> s2 = input [ 2 ] + input [ 5 ] ; //<S2SV> s3 = input [ 3 ] + input [ 4 ] ; //<S2SV> s4 = input [ 3 ] - input [ 4 ] ; //<S2SV> s5 = input [ 2 ] - input [ 5 ] ; //<S2SV> s6 = input [ 1 ] - input [ 6 ] ; //<S2SV> s7 = input [ 0 ] - input [ 7 ] ; //<S2SV> x0 = s0 + s3 ; //<S2SV> x1 = s1 + s2 ; //<S2SV> x2 = s1 - s2 ; //<S2SV> x3 = s0 - s3 ; //<S2SV> t0 = ( x0 + x1 ) * cospi_16_64 ; //<S2SV> t1 = ( x0 - x1 ) * cospi_16_64 ; //<S2SV> t2 = x2 * cospi_24_64 + x3 * cospi_8_64 ; //<S2SV> t3 = - x2 * cospi_8_64 + x3 * cospi_24_64 ; //<S2SV> output [ 0 ] = fdct_round_shift ( t0 ) ; //<S2SV> output [ 2 ] = fdct_round_shift ( t2 ) ; //<S2SV> output [ 4 ] = fdct_round_shift ( t1 ) ; //<S2SV> output [ 6 ] = fdct_round_shift ( t3 ) ; //<S2SV> t0 = ( s6 - s5 ) * cospi_16_64 ; //<S2SV> t1 = ( s6 + s5 ) * cospi_16_64 ; //<S2SV> t2 = fdct_round_shift ( t0 ) ; //<S2SV> t3 = fdct_round_shift ( t1 ) ; //<S2SV> x0 = s4 + t2 ; //<S2SV> x1 = s4 - t2 ; //<S2SV> x2 = s7 - t3 ; //<S2SV> x3 = s7 + t3 ; //<S2SV> t0 = x0 * cospi_28_64 + x3 * cospi_4_64 ; //<S2SV> t1 = x1 * cospi_12_64 + x2 * cospi_20_64 ; //<S2SV> t2 = x2 * cospi_12_64 + x1 * - cospi_20_64 ; //<S2SV> t3 = x3 * cospi_28_64 + x0 * - cospi_4_64 ; //<S2SV> output [ 1 ] = fdct_round_shift ( t0 ) ; //<S2SV> output [ 3 ] = fdct_round_shift ( t2 ) ; //<S2SV> output [ 5 ] = fdct_round_shift ( t1 ) ; //<S2SV> output [ 7 ] = fdct_round_shift ( t3 ) ; //<S2SV> } //<S2SV> 