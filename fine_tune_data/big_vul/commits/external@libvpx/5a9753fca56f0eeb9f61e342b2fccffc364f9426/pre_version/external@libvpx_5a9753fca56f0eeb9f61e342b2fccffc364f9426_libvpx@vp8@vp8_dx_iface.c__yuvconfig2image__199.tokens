static void yuvconfig2image ( vpx_image_t * img , //<S2SV> const YV12_BUFFER_CONFIG * yv12 , //<S2SV> void * user_priv ) //<S2SV> { //<S2SV> img -> fmt = VPX_IMG_FMT_I420 ; //<S2SV> img -> w = yv12 -> y_stride ; //<S2SV> img -> h = ( yv12 -> y_height + 2 * VP8BORDERINPIXELS + 15 ) & ~ 15 ; //<S2SV> img -> d_w = yv12 -> y_width ; //<S2SV> img -> d_h = yv12 -> y_height ; //<S2SV> img -> x_chroma_shift = 1 ; //<S2SV> img -> y_chroma_shift = 1 ; //<S2SV> img -> planes [ VPX_PLANE_Y ] = yv12 -> y_buffer ; //<S2SV> img -> planes [ VPX_PLANE_U ] = yv12 -> u_buffer ; //<S2SV> img -> planes [ VPX_PLANE_V ] = yv12 -> v_buffer ; //<S2SV> img -> planes [ VPX_PLANE_ALPHA ] = NULL ; //<S2SV> img -> stride [ VPX_PLANE_Y ] = yv12 -> y_stride ; //<S2SV> img -> stride [ VPX_PLANE_U ] = yv12 -> uv_stride ; //<S2SV> img -> stride [ VPX_PLANE_V ] = yv12 -> uv_stride ; //<S2SV> img -> stride [ VPX_PLANE_ALPHA ] = yv12 -> y_stride ; //<S2SV> img -> bps = 12 ; //<S2SV> img -> user_priv = user_priv ; //<S2SV> img -> img_data = yv12 -> buffer_alloc ; //<S2SV> img -> img_data_owner = 0 ; //<S2SV> img -> self_allocd = 0 ; //<S2SV> } //<S2SV> 