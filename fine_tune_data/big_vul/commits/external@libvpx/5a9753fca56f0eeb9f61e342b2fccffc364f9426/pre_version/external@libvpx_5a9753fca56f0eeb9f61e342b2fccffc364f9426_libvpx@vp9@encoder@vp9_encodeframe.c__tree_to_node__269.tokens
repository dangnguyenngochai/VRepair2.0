static void tree_to_node ( void * data , BLOCK_SIZE bsize , variance_node * node ) { //<S2SV> int i ; //<S2SV> switch ( bsize ) { //<S2SV> case BLOCK_64X64 : { //<S2SV> v64x64 * vt = ( v64x64 * ) data ; //<S2SV> node -> part_variances = & vt -> part_variances ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> node -> split [ i ] = & vt -> split [ i ] . part_variances . none ; //<S2SV> break ; //<S2SV> } //<S2SV> case BLOCK_32X32 : { //<S2SV> v32x32 * vt = ( v32x32 * ) data ; //<S2SV> node -> part_variances = & vt -> part_variances ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> node -> split [ i ] = & vt -> split [ i ] . part_variances . none ; //<S2SV> break ; //<S2SV> } //<S2SV> case BLOCK_16X16 : { //<S2SV> v16x16 * vt = ( v16x16 * ) data ; //<S2SV> node -> part_variances = & vt -> part_variances ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> node -> split [ i ] = & vt -> split [ i ] . part_variances . none ; //<S2SV> break ; //<S2SV> } //<S2SV> case BLOCK_8X8 : { //<S2SV> v8x8 * vt = ( v8x8 * ) data ; //<S2SV> node -> part_variances = & vt -> part_variances ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> node -> split [ i ] = & vt -> split [ i ] ; //<S2SV> break ; //<S2SV> } //<S2SV> default : { //<S2SV> assert ( 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 