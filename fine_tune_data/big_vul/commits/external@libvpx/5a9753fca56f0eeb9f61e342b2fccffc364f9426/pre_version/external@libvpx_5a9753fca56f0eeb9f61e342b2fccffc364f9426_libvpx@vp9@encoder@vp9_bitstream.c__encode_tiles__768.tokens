static size_t encode_tiles ( VP9_COMP * cpi , uint8_t * data_ptr ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> vp9_writer residual_bc ; //<S2SV> int tile_row , tile_col ; //<S2SV> TOKENEXTRA * tok [ 4 ] [ 1 << 6 ] , * tok_end ; //<S2SV> size_t total_size = 0 ; //<S2SV> const int tile_cols = 1 << cm -> log2_tile_cols ; //<S2SV> const int tile_rows = 1 << cm -> log2_tile_rows ; //<S2SV> vpx_memset ( cm -> above_seg_context , 0 , sizeof ( * cm -> above_seg_context ) * //<S2SV> mi_cols_aligned_to_sb ( cm -> mi_cols ) ) ; //<S2SV> tok [ 0 ] [ 0 ] = cpi -> tok ; //<S2SV> for ( tile_row = 0 ; tile_row < tile_rows ; tile_row ++ ) { //<S2SV> if ( tile_row ) //<S2SV> tok [ tile_row ] [ 0 ] = tok [ tile_row - 1 ] [ tile_cols - 1 ] + //<S2SV> cpi -> tok_count [ tile_row - 1 ] [ tile_cols - 1 ] ; //<S2SV> for ( tile_col = 1 ; tile_col < tile_cols ; tile_col ++ ) //<S2SV> tok [ tile_row ] [ tile_col ] = tok [ tile_row ] [ tile_col - 1 ] + //<S2SV> cpi -> tok_count [ tile_row ] [ tile_col - 1 ] ; //<S2SV> } //<S2SV> for ( tile_row = 0 ; tile_row < tile_rows ; tile_row ++ ) { //<S2SV> for ( tile_col = 0 ; tile_col < tile_cols ; tile_col ++ ) { //<S2SV> TileInfo tile ; //<S2SV> vp9_tile_init ( & tile , cm , tile_row , tile_col ) ; //<S2SV> tok_end = tok [ tile_row ] [ tile_col ] + cpi -> tok_count [ tile_row ] [ tile_col ] ; //<S2SV> if ( tile_col < tile_cols - 1 || tile_row < tile_rows - 1 ) //<S2SV> vp9_start_encode ( & residual_bc , data_ptr + total_size + 4 ) ; //<S2SV> else //<S2SV> vp9_start_encode ( & residual_bc , data_ptr + total_size ) ; //<S2SV> write_modes ( cpi , & tile , & residual_bc , & tok [ tile_row ] [ tile_col ] , tok_end ) ; //<S2SV> assert ( tok [ tile_row ] [ tile_col ] == tok_end ) ; //<S2SV> vp9_stop_encode ( & residual_bc ) ; //<S2SV> if ( tile_col < tile_cols - 1 || tile_row < tile_rows - 1 ) { //<S2SV> mem_put_be32 ( data_ptr + total_size , residual_bc . pos ) ; //<S2SV> total_size += 4 ; //<S2SV> } //<S2SV> total_size += residual_bc . pos ; //<S2SV> } //<S2SV> } //<S2SV> return total_size ; //<S2SV> } //<S2SV> 