void fadst8_sse2 ( __m128i * in ) { //<S2SV> const __m128i k__cospi_p02_p30 = pair_set_epi16 ( cospi_2_64 , cospi_30_64 ) ; //<S2SV> const __m128i k__cospi_p30_m02 = pair_set_epi16 ( cospi_30_64 , - cospi_2_64 ) ; //<S2SV> const __m128i k__cospi_p10_p22 = pair_set_epi16 ( cospi_10_64 , cospi_22_64 ) ; //<S2SV> const __m128i k__cospi_p22_m10 = pair_set_epi16 ( cospi_22_64 , - cospi_10_64 ) ; //<S2SV> const __m128i k__cospi_p18_p14 = pair_set_epi16 ( cospi_18_64 , cospi_14_64 ) ; //<S2SV> const __m128i k__cospi_p14_m18 = pair_set_epi16 ( cospi_14_64 , - cospi_18_64 ) ; //<S2SV> const __m128i k__cospi_p26_p06 = pair_set_epi16 ( cospi_26_64 , cospi_6_64 ) ; //<S2SV> const __m128i k__cospi_p06_m26 = pair_set_epi16 ( cospi_6_64 , - cospi_26_64 ) ; //<S2SV> const __m128i k__cospi_p08_p24 = pair_set_epi16 ( cospi_8_64 , cospi_24_64 ) ; //<S2SV> const __m128i k__cospi_p24_m08 = pair_set_epi16 ( cospi_24_64 , - cospi_8_64 ) ; //<S2SV> const __m128i k__cospi_m24_p08 = pair_set_epi16 ( - cospi_24_64 , cospi_8_64 ) ; //<S2SV> const __m128i k__cospi_p16_m16 = pair_set_epi16 ( cospi_16_64 , - cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; //<S2SV> const __m128i k__const_0 = _mm_set1_epi16 ( 0 ) ; //<S2SV> const __m128i k__DCT_CONST_ROUNDING = _mm_set1_epi32 ( DCT_CONST_ROUNDING ) ; //<S2SV> __m128i u0 , u1 , u2 , u3 , u4 , u5 , u6 , u7 , u8 , u9 , u10 , u11 , u12 , u13 , u14 , u15 ; //<S2SV> __m128i v0 , v1 , v2 , v3 , v4 , v5 , v6 , v7 , v8 , v9 , v10 , v11 , v12 , v13 , v14 , v15 ; //<S2SV> __m128i w0 , w1 , w2 , w3 , w4 , w5 , w6 , w7 , w8 , w9 , w10 , w11 , w12 , w13 , w14 , w15 ; //<S2SV> __m128i s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; //<S2SV> __m128i in0 , in1 , in2 , in3 , in4 , in5 , in6 , in7 ; //<S2SV> in0 = in [ 7 ] ; //<S2SV> in1 = in [ 0 ] ; //<S2SV> in2 = in [ 5 ] ; //<S2SV> in3 = in [ 2 ] ; //<S2SV> in4 = in [ 3 ] ; //<S2SV> in5 = in [ 4 ] ; //<S2SV> in6 = in [ 1 ] ; //<S2SV> in7 = in [ 6 ] ; //<S2SV> s0 = _mm_unpacklo_epi16 ( in0 , in1 ) ; //<S2SV> s1 = _mm_unpackhi_epi16 ( in0 , in1 ) ; //<S2SV> s2 = _mm_unpacklo_epi16 ( in2 , in3 ) ; //<S2SV> s3 = _mm_unpackhi_epi16 ( in2 , in3 ) ; //<S2SV> s4 = _mm_unpacklo_epi16 ( in4 , in5 ) ; //<S2SV> s5 = _mm_unpackhi_epi16 ( in4 , in5 ) ; //<S2SV> s6 = _mm_unpacklo_epi16 ( in6 , in7 ) ; //<S2SV> s7 = _mm_unpackhi_epi16 ( in6 , in7 ) ; //<S2SV> u0 = _mm_madd_epi16 ( s0 , k__cospi_p02_p30 ) ; //<S2SV> u1 = _mm_madd_epi16 ( s1 , k__cospi_p02_p30 ) ; //<S2SV> u2 = _mm_madd_epi16 ( s0 , k__cospi_p30_m02 ) ; //<S2SV> u3 = _mm_madd_epi16 ( s1 , k__cospi_p30_m02 ) ; //<S2SV> u4 = _mm_madd_epi16 ( s2 , k__cospi_p10_p22 ) ; //<S2SV> u5 = _mm_madd_epi16 ( s3 , k__cospi_p10_p22 ) ; //<S2SV> u6 = _mm_madd_epi16 ( s2 , k__cospi_p22_m10 ) ; //<S2SV> u7 = _mm_madd_epi16 ( s3 , k__cospi_p22_m10 ) ; //<S2SV> u8 = _mm_madd_epi16 ( s4 , k__cospi_p18_p14 ) ; //<S2SV> u9 = _mm_madd_epi16 ( s5 , k__cospi_p18_p14 ) ; //<S2SV> u10 = _mm_madd_epi16 ( s4 , k__cospi_p14_m18 ) ; //<S2SV> u11 = _mm_madd_epi16 ( s5 , k__cospi_p14_m18 ) ; //<S2SV> u12 = _mm_madd_epi16 ( s6 , k__cospi_p26_p06 ) ; //<S2SV> u13 = _mm_madd_epi16 ( s7 , k__cospi_p26_p06 ) ; //<S2SV> u14 = _mm_madd_epi16 ( s6 , k__cospi_p06_m26 ) ; //<S2SV> u15 = _mm_madd_epi16 ( s7 , k__cospi_p06_m26 ) ; //<S2SV> w0 = _mm_add_epi32 ( u0 , u8 ) ; //<S2SV> w1 = _mm_add_epi32 ( u1 , u9 ) ; //<S2SV> w2 = _mm_add_epi32 ( u2 , u10 ) ; //<S2SV> w3 = _mm_add_epi32 ( u3 , u11 ) ; //<S2SV> w4 = _mm_add_epi32 ( u4 , u12 ) ; //<S2SV> w5 = _mm_add_epi32 ( u5 , u13 ) ; //<S2SV> w6 = _mm_add_epi32 ( u6 , u14 ) ; //<S2SV> w7 = _mm_add_epi32 ( u7 , u15 ) ; //<S2SV> w8 = _mm_sub_epi32 ( u0 , u8 ) ; //<S2SV> w9 = _mm_sub_epi32 ( u1 , u9 ) ; //<S2SV> w10 = _mm_sub_epi32 ( u2 , u10 ) ; //<S2SV> w11 = _mm_sub_epi32 ( u3 , u11 ) ; //<S2SV> w12 = _mm_sub_epi32 ( u4 , u12 ) ; //<S2SV> w13 = _mm_sub_epi32 ( u5 , u13 ) ; //<S2SV> w14 = _mm_sub_epi32 ( u6 , u14 ) ; //<S2SV> w15 = _mm_sub_epi32 ( u7 , u15 ) ; //<S2SV> v0 = _mm_add_epi32 ( w0 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v1 = _mm_add_epi32 ( w1 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v2 = _mm_add_epi32 ( w2 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v3 = _mm_add_epi32 ( w3 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v4 = _mm_add_epi32 ( w4 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v5 = _mm_add_epi32 ( w5 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v6 = _mm_add_epi32 ( w6 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v7 = _mm_add_epi32 ( w7 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v8 = _mm_add_epi32 ( w8 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v9 = _mm_add_epi32 ( w9 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v10 = _mm_add_epi32 ( w10 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v11 = _mm_add_epi32 ( w11 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v12 = _mm_add_epi32 ( w12 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v13 = _mm_add_epi32 ( w13 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v14 = _mm_add_epi32 ( w14 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v15 = _mm_add_epi32 ( w15 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u0 = _mm_srai_epi32 ( v0 , DCT_CONST_BITS ) ; //<S2SV> u1 = _mm_srai_epi32 ( v1 , DCT_CONST_BITS ) ; //<S2SV> u2 = _mm_srai_epi32 ( v2 , DCT_CONST_BITS ) ; //<S2SV> u3 = _mm_srai_epi32 ( v3 , DCT_CONST_BITS ) ; //<S2SV> u4 = _mm_srai_epi32 ( v4 , DCT_CONST_BITS ) ; //<S2SV> u5 = _mm_srai_epi32 ( v5 , DCT_CONST_BITS ) ; //<S2SV> u6 = _mm_srai_epi32 ( v6 , DCT_CONST_BITS ) ; //<S2SV> u7 = _mm_srai_epi32 ( v7 , DCT_CONST_BITS ) ; //<S2SV> u8 = _mm_srai_epi32 ( v8 , DCT_CONST_BITS ) ; //<S2SV> u9 = _mm_srai_epi32 ( v9 , DCT_CONST_BITS ) ; //<S2SV> u10 = _mm_srai_epi32 ( v10 , DCT_CONST_BITS ) ; //<S2SV> u11 = _mm_srai_epi32 ( v11 , DCT_CONST_BITS ) ; //<S2SV> u12 = _mm_srai_epi32 ( v12 , DCT_CONST_BITS ) ; //<S2SV> u13 = _mm_srai_epi32 ( v13 , DCT_CONST_BITS ) ; //<S2SV> u14 = _mm_srai_epi32 ( v14 , DCT_CONST_BITS ) ; //<S2SV> u15 = _mm_srai_epi32 ( v15 , DCT_CONST_BITS ) ; //<S2SV> in [ 0 ] = _mm_packs_epi32 ( u0 , u1 ) ; //<S2SV> in [ 1 ] = _mm_packs_epi32 ( u2 , u3 ) ; //<S2SV> in [ 2 ] = _mm_packs_epi32 ( u4 , u5 ) ; //<S2SV> in [ 3 ] = _mm_packs_epi32 ( u6 , u7 ) ; //<S2SV> in [ 4 ] = _mm_packs_epi32 ( u8 , u9 ) ; //<S2SV> in [ 5 ] = _mm_packs_epi32 ( u10 , u11 ) ; //<S2SV> in [ 6 ] = _mm_packs_epi32 ( u12 , u13 ) ; //<S2SV> in [ 7 ] = _mm_packs_epi32 ( u14 , u15 ) ; //<S2SV> s0 = _mm_add_epi16 ( in [ 0 ] , in [ 2 ] ) ; //<S2SV> s1 = _mm_add_epi16 ( in [ 1 ] , in [ 3 ] ) ; //<S2SV> s2 = _mm_sub_epi16 ( in [ 0 ] , in [ 2 ] ) ; //<S2SV> s3 = _mm_sub_epi16 ( in [ 1 ] , in [ 3 ] ) ; //<S2SV> u0 = _mm_unpacklo_epi16 ( in [ 4 ] , in [ 5 ] ) ; //<S2SV> u1 = _mm_unpackhi_epi16 ( in [ 4 ] , in [ 5 ] ) ; //<S2SV> u2 = _mm_unpacklo_epi16 ( in [ 6 ] , in [ 7 ] ) ; //<S2SV> u3 = _mm_unpackhi_epi16 ( in [ 6 ] , in [ 7 ] ) ; //<S2SV> v0 = _mm_madd_epi16 ( u0 , k__cospi_p08_p24 ) ; //<S2SV> v1 = _mm_madd_epi16 ( u1 , k__cospi_p08_p24 ) ; //<S2SV> v2 = _mm_madd_epi16 ( u0 , k__cospi_p24_m08 ) ; //<S2SV> v3 = _mm_madd_epi16 ( u1 , k__cospi_p24_m08 ) ; //<S2SV> v4 = _mm_madd_epi16 ( u2 , k__cospi_m24_p08 ) ; //<S2SV> v5 = _mm_madd_epi16 ( u3 , k__cospi_m24_p08 ) ; //<S2SV> v6 = _mm_madd_epi16 ( u2 , k__cospi_p08_p24 ) ; //<S2SV> v7 = _mm_madd_epi16 ( u3 , k__cospi_p08_p24 ) ; //<S2SV> w0 = _mm_add_epi32 ( v0 , v4 ) ; //<S2SV> w1 = _mm_add_epi32 ( v1 , v5 ) ; //<S2SV> w2 = _mm_add_epi32 ( v2 , v6 ) ; //<S2SV> w3 = _mm_add_epi32 ( v3 , v7 ) ; //<S2SV> w4 = _mm_sub_epi32 ( v0 , v4 ) ; //<S2SV> w5 = _mm_sub_epi32 ( v1 , v5 ) ; //<S2SV> w6 = _mm_sub_epi32 ( v2 , v6 ) ; //<S2SV> w7 = _mm_sub_epi32 ( v3 , v7 ) ; //<S2SV> v0 = _mm_add_epi32 ( w0 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v1 = _mm_add_epi32 ( w1 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v2 = _mm_add_epi32 ( w2 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v3 = _mm_add_epi32 ( w3 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v4 = _mm_add_epi32 ( w4 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v5 = _mm_add_epi32 ( w5 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v6 = _mm_add_epi32 ( w6 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v7 = _mm_add_epi32 ( w7 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u0 = _mm_srai_epi32 ( v0 , DCT_CONST_BITS ) ; //<S2SV> u1 = _mm_srai_epi32 ( v1 , DCT_CONST_BITS ) ; //<S2SV> u2 = _mm_srai_epi32 ( v2 , DCT_CONST_BITS ) ; //<S2SV> u3 = _mm_srai_epi32 ( v3 , DCT_CONST_BITS ) ; //<S2SV> u4 = _mm_srai_epi32 ( v4 , DCT_CONST_BITS ) ; //<S2SV> u5 = _mm_srai_epi32 ( v5 , DCT_CONST_BITS ) ; //<S2SV> u6 = _mm_srai_epi32 ( v6 , DCT_CONST_BITS ) ; //<S2SV> u7 = _mm_srai_epi32 ( v7 , DCT_CONST_BITS ) ; //<S2SV> s4 = _mm_packs_epi32 ( u0 , u1 ) ; //<S2SV> s5 = _mm_packs_epi32 ( u2 , u3 ) ; //<S2SV> s6 = _mm_packs_epi32 ( u4 , u5 ) ; //<S2SV> s7 = _mm_packs_epi32 ( u6 , u7 ) ; //<S2SV> u0 = _mm_unpacklo_epi16 ( s2 , s3 ) ; //<S2SV> u1 = _mm_unpackhi_epi16 ( s2 , s3 ) ; //<S2SV> u2 = _mm_unpacklo_epi16 ( s6 , s7 ) ; //<S2SV> u3 = _mm_unpackhi_epi16 ( s6 , s7 ) ; //<S2SV> v0 = _mm_madd_epi16 ( u0 , k__cospi_p16_p16 ) ; //<S2SV> v1 = _mm_madd_epi16 ( u1 , k__cospi_p16_p16 ) ; //<S2SV> v2 = _mm_madd_epi16 ( u0 , k__cospi_p16_m16 ) ; //<S2SV> v3 = _mm_madd_epi16 ( u1 , k__cospi_p16_m16 ) ; //<S2SV> v4 = _mm_madd_epi16 ( u2 , k__cospi_p16_p16 ) ; //<S2SV> v5 = _mm_madd_epi16 ( u3 , k__cospi_p16_p16 ) ; //<S2SV> v6 = _mm_madd_epi16 ( u2 , k__cospi_p16_m16 ) ; //<S2SV> v7 = _mm_madd_epi16 ( u3 , k__cospi_p16_m16 ) ; //<S2SV> u0 = _mm_add_epi32 ( v0 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u1 = _mm_add_epi32 ( v1 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u2 = _mm_add_epi32 ( v2 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u3 = _mm_add_epi32 ( v3 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u4 = _mm_add_epi32 ( v4 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u5 = _mm_add_epi32 ( v5 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u6 = _mm_add_epi32 ( v6 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u7 = _mm_add_epi32 ( v7 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v0 = _mm_srai_epi32 ( u0 , DCT_CONST_BITS ) ; //<S2SV> v1 = _mm_srai_epi32 ( u1 , DCT_CONST_BITS ) ; //<S2SV> v2 = _mm_srai_epi32 ( u2 , DCT_CONST_BITS ) ; //<S2SV> v3 = _mm_srai_epi32 ( u3 , DCT_CONST_BITS ) ; //<S2SV> v4 = _mm_srai_epi32 ( u4 , DCT_CONST_BITS ) ; //<S2SV> v5 = _mm_srai_epi32 ( u5 , DCT_CONST_BITS ) ; //<S2SV> v6 = _mm_srai_epi32 ( u6 , DCT_CONST_BITS ) ; //<S2SV> v7 = _mm_srai_epi32 ( u7 , DCT_CONST_BITS ) ; //<S2SV> s2 = _mm_packs_epi32 ( v0 , v1 ) ; //<S2SV> s3 = _mm_packs_epi32 ( v2 , v3 ) ; //<S2SV> s6 = _mm_packs_epi32 ( v4 , v5 ) ; //<S2SV> s7 = _mm_packs_epi32 ( v6 , v7 ) ; //<S2SV> in [ 0 ] = s0 ; //<S2SV> in [ 1 ] = _mm_sub_epi16 ( k__const_0 , s4 ) ; //<S2SV> in [ 2 ] = s6 ; //<S2SV> in [ 3 ] = _mm_sub_epi16 ( k__const_0 , s2 ) ; //<S2SV> in [ 4 ] = s3 ; //<S2SV> in [ 5 ] = _mm_sub_epi16 ( k__const_0 , s7 ) ; //<S2SV> in [ 6 ] = s5 ; //<S2SV> in [ 7 ] = _mm_sub_epi16 ( k__const_0 , s1 ) ; //<S2SV> array_transpose_8x8 ( in , in ) ; //<S2SV> } //<S2SV> 