void vp9_vaq_frame_setup ( VP9_COMP * cpi ) { //<S2SV> VP9_COMMON * cm = & cpi -> common ; //<S2SV> struct segmentation * seg = & cm -> seg ; //<S2SV> const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; //<S2SV> const int base_rdmult = vp9_compute_rd_mult ( cpi , cm -> base_qindex + //<S2SV> cm -> y_dc_delta_q ) ; //<S2SV> int i ; //<S2SV> if ( cm -> frame_type == KEY_FRAME || //<S2SV> cpi -> refresh_alt_ref_frame || //<S2SV> ( cpi -> refresh_golden_frame && ! cpi -> rc . is_src_frame_alt_ref ) ) { //<S2SV> vp9_enable_segmentation ( seg ) ; //<S2SV> vp9_clearall_segfeatures ( seg ) ; //<S2SV> seg -> abs_delta = SEGMENT_DELTADATA ; //<S2SV> vp9_clear_system_state ( ) ; //<S2SV> for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { //<S2SV> int qindex_delta , segment_rdmult ; //<S2SV> if ( Q_RATIO ( i ) == 1 ) { //<S2SV> RDMULT_RATIO ( i ) = 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> qindex_delta = vp9_compute_qdelta ( & cpi -> rc , base_q , base_q * Q_RATIO ( i ) ) ; //<S2SV> vp9_set_segdata ( seg , SEGMENT_ID ( i ) , SEG_LVL_ALT_Q , qindex_delta ) ; //<S2SV> vp9_enable_segfeature ( seg , SEGMENT_ID ( i ) , SEG_LVL_ALT_Q ) ; //<S2SV> segment_rdmult = vp9_compute_rd_mult ( cpi , cm -> base_qindex + qindex_delta + //<S2SV> cm -> y_dc_delta_q ) ; //<S2SV> RDMULT_RATIO ( i ) = ( double ) segment_rdmult / base_rdmult ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 