static int read_inter_segment_id ( VP9_COMMON * const cm , MACROBLOCKD * const xd , //<S2SV> int mi_row , int mi_col , vp9_reader * r ) { //<S2SV> struct segmentation * const seg = & cm -> seg ; //<S2SV> MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; //<S2SV> const BLOCK_SIZE bsize = mbmi -> sb_type ; //<S2SV> int predicted_segment_id , segment_id ; //<S2SV> if ( ! seg -> enabled ) //<S2SV> return 0 ; //<S2SV> predicted_segment_id = vp9_get_segment_id ( cm , cm -> last_frame_seg_map , //<S2SV> bsize , mi_row , mi_col ) ; //<S2SV> if ( ! seg -> update_map ) //<S2SV> return predicted_segment_id ; //<S2SV> if ( seg -> temporal_update ) { //<S2SV> const vp9_prob pred_prob = vp9_get_pred_prob_seg_id ( seg , xd ) ; //<S2SV> mbmi -> seg_id_predicted = vp9_read ( r , pred_prob ) ; //<S2SV> segment_id = mbmi -> seg_id_predicted ? predicted_segment_id //<S2SV> : read_segment_id ( r , seg ) ; //<S2SV> } else { //<S2SV> segment_id = read_segment_id ( r , seg ) ; //<S2SV> } //<S2SV> set_segment_id ( cm , bsize , mi_row , mi_col , segment_id ) ; //<S2SV> return segment_id ; //<S2SV> } //<S2SV> 