static void model_rd_for_sb ( VP9_COMP * cpi , BLOCK_SIZE bsize , //<S2SV> MACROBLOCK * x , MACROBLOCKD * xd , //<S2SV> int * out_rate_sum , int64_t * out_dist_sum ) { //<S2SV> int i ; //<S2SV> int64_t rate_sum = 0 ; //<S2SV> int64_t dist_sum = 0 ; //<S2SV> const int ref = xd -> mi [ 0 ] -> mbmi . ref_frame [ 0 ] ; //<S2SV> unsigned int sse ; //<S2SV> for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { //<S2SV> struct macroblock_plane * const p = & x -> plane [ i ] ; //<S2SV> struct macroblockd_plane * const pd = & xd -> plane [ i ] ; //<S2SV> const BLOCK_SIZE bs = get_plane_block_size ( bsize , pd ) ; //<S2SV> ( void ) cpi -> fn_ptr [ bs ] . vf ( p -> src . buf , p -> src . stride , //<S2SV> pd -> dst . buf , pd -> dst . stride , & sse ) ; //<S2SV> if ( i == 0 ) //<S2SV> x -> pred_sse [ ref ] = sse ; //<S2SV> if ( cpi -> speed > 4 ) { //<S2SV> int64_t rate ; //<S2SV> int64_t dist ; //<S2SV> int64_t square_error = sse ; //<S2SV> int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; //<S2SV> if ( quantizer < 120 ) //<S2SV> rate = ( square_error * ( 280 - quantizer ) ) >> 8 ; //<S2SV> else //<S2SV> rate = 0 ; //<S2SV> dist = ( square_error * quantizer ) >> 8 ; //<S2SV> rate_sum += rate ; //<S2SV> dist_sum += dist ; //<S2SV> } else { //<S2SV> int rate ; //<S2SV> int64_t dist ; //<S2SV> vp9_model_rd_from_var_lapndz ( sse , 1 << num_pels_log2_lookup [ bs ] , //<S2SV> pd -> dequant [ 1 ] >> 3 , & rate , & dist ) ; //<S2SV> rate_sum += rate ; //<S2SV> dist_sum += dist ; //<S2SV> } //<S2SV> } //<S2SV> * out_rate_sum = ( int ) rate_sum ; //<S2SV> * out_dist_sum = dist_sum << 4 ; //<S2SV> } //<S2SV> 