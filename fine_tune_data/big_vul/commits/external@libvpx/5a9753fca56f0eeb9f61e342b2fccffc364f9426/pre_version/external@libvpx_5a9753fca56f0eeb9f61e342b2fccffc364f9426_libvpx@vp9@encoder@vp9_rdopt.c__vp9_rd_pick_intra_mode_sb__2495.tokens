void vp9_rd_pick_intra_mode_sb ( VP9_COMP * cpi , MACROBLOCK * x , //<S2SV> int * returnrate , int64_t * returndist , //<S2SV> BLOCK_SIZE bsize , //<S2SV> PICK_MODE_CONTEXT * ctx , int64_t best_rd ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> int rate_y = 0 , rate_uv = 0 , rate_y_tokenonly = 0 , rate_uv_tokenonly = 0 ; //<S2SV> int y_skip = 0 , uv_skip = 0 ; //<S2SV> int64_t dist_y = 0 , dist_uv = 0 , tx_cache [ TX_MODES ] = { 0 } ; //<S2SV> TX_SIZE max_uv_tx_size ; //<S2SV> x -> skip_encode = 0 ; //<S2SV> ctx -> skip = 0 ; //<S2SV> xd -> mi [ 0 ] -> mbmi . ref_frame [ 0 ] = INTRA_FRAME ; //<S2SV> if ( bsize >= BLOCK_8X8 ) { //<S2SV> if ( rd_pick_intra_sby_mode ( cpi , x , & rate_y , & rate_y_tokenonly , //<S2SV> & dist_y , & y_skip , bsize , tx_cache , //<S2SV> best_rd ) >= best_rd ) { //<S2SV> * returnrate = INT_MAX ; //<S2SV> return ; //<S2SV> } //<S2SV> max_uv_tx_size = get_uv_tx_size_impl ( xd -> mi [ 0 ] -> mbmi . tx_size , bsize ) ; //<S2SV> rd_pick_intra_sbuv_mode ( cpi , x , ctx , & rate_uv , & rate_uv_tokenonly , //<S2SV> & dist_uv , & uv_skip , bsize , max_uv_tx_size ) ; //<S2SV> } else { //<S2SV> y_skip = 0 ; //<S2SV> if ( rd_pick_intra_sub_8x8_y_mode ( cpi , x , & rate_y , & rate_y_tokenonly , //<S2SV> & dist_y , best_rd ) >= best_rd ) { //<S2SV> * returnrate = INT_MAX ; //<S2SV> return ; //<S2SV> } //<S2SV> max_uv_tx_size = get_uv_tx_size_impl ( xd -> mi [ 0 ] -> mbmi . tx_size , bsize ) ; //<S2SV> rd_pick_intra_sbuv_mode ( cpi , x , ctx , & rate_uv , & rate_uv_tokenonly , //<S2SV> & dist_uv , & uv_skip , BLOCK_8X8 , max_uv_tx_size ) ; //<S2SV> } //<S2SV> if ( y_skip && uv_skip ) { //<S2SV> * returnrate = rate_y + rate_uv - rate_y_tokenonly - rate_uv_tokenonly + //<S2SV> vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 1 ) ; //<S2SV> * returndist = dist_y + dist_uv ; //<S2SV> vp9_zero ( ctx -> tx_rd_diff ) ; //<S2SV> } else { //<S2SV> int i ; //<S2SV> * returnrate = rate_y + rate_uv + vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 0 ) ; //<S2SV> * returndist = dist_y + dist_uv ; //<S2SV> if ( cpi -> sf . tx_size_search_method == USE_FULL_RD ) //<S2SV> for ( i = 0 ; i < TX_MODES ; i ++ ) { //<S2SV> if ( tx_cache [ i ] < INT64_MAX && tx_cache [ cm -> tx_mode ] < INT64_MAX ) //<S2SV> ctx -> tx_rd_diff [ i ] = tx_cache [ i ] - tx_cache [ cm -> tx_mode ] ; //<S2SV> else //<S2SV> ctx -> tx_rd_diff [ i ] = 0 ; //<S2SV> } //<S2SV> } //<S2SV> ctx -> mic = * xd -> mi [ 0 ] ; //<S2SV> } //<S2SV> 