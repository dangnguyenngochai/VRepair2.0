void vp9_encode_frame ( VP9_COMP * cpi ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> if ( ! frame_is_intra_only ( cm ) ) { //<S2SV> if ( ( cm -> ref_frame_sign_bias [ ALTREF_FRAME ] == //<S2SV> cm -> ref_frame_sign_bias [ GOLDEN_FRAME ] ) || //<S2SV> ( cm -> ref_frame_sign_bias [ ALTREF_FRAME ] == //<S2SV> cm -> ref_frame_sign_bias [ LAST_FRAME ] ) ) { //<S2SV> cm -> allow_comp_inter_inter = 0 ; //<S2SV> } else { //<S2SV> cm -> allow_comp_inter_inter = 1 ; //<S2SV> cm -> comp_fixed_ref = ALTREF_FRAME ; //<S2SV> cm -> comp_var_ref [ 0 ] = LAST_FRAME ; //<S2SV> cm -> comp_var_ref [ 1 ] = GOLDEN_FRAME ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> sf . frame_parameter_update ) { //<S2SV> int i ; //<S2SV> const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; //<S2SV> const int64_t * mode_thresh = cpi -> rd_prediction_type_threshes [ frame_type ] ; //<S2SV> const int64_t * filter_thresh = cpi -> rd_filter_threshes [ frame_type ] ; //<S2SV> if ( frame_type == ALTREF_FRAME || ! cm -> allow_comp_inter_inter ) //<S2SV> cm -> reference_mode = SINGLE_REFERENCE ; //<S2SV> else if ( mode_thresh [ COMPOUND_REFERENCE ] > mode_thresh [ SINGLE_REFERENCE ] && //<S2SV> mode_thresh [ COMPOUND_REFERENCE ] > //<S2SV> mode_thresh [ REFERENCE_MODE_SELECT ] && //<S2SV> check_dual_ref_flags ( cpi ) && //<S2SV> cpi -> static_mb_pct == 100 ) //<S2SV> cm -> reference_mode = COMPOUND_REFERENCE ; //<S2SV> else if ( mode_thresh [ SINGLE_REFERENCE ] > mode_thresh [ REFERENCE_MODE_SELECT ] ) //<S2SV> cm -> reference_mode = SINGLE_REFERENCE ; //<S2SV> else //<S2SV> cm -> reference_mode = REFERENCE_MODE_SELECT ; //<S2SV> if ( cm -> interp_filter == SWITCHABLE ) { //<S2SV> if ( frame_type != ALTREF_FRAME && //<S2SV> filter_thresh [ EIGHTTAP_SMOOTH ] > filter_thresh [ EIGHTTAP ] && //<S2SV> filter_thresh [ EIGHTTAP_SMOOTH ] > filter_thresh [ EIGHTTAP_SHARP ] && //<S2SV> filter_thresh [ EIGHTTAP_SMOOTH ] > filter_thresh [ SWITCHABLE - 1 ] ) { //<S2SV> cm -> interp_filter = EIGHTTAP_SMOOTH ; //<S2SV> } else if ( filter_thresh [ EIGHTTAP_SHARP ] > filter_thresh [ EIGHTTAP ] && //<S2SV> filter_thresh [ EIGHTTAP_SHARP ] > filter_thresh [ SWITCHABLE - 1 ] ) { //<S2SV> cm -> interp_filter = EIGHTTAP_SHARP ; //<S2SV> } else if ( filter_thresh [ EIGHTTAP ] > filter_thresh [ SWITCHABLE - 1 ] ) { //<S2SV> cm -> interp_filter = EIGHTTAP ; //<S2SV> } //<S2SV> } //<S2SV> encode_frame_internal ( cpi ) ; //<S2SV> for ( i = 0 ; i < REFERENCE_MODES ; ++ i ) { //<S2SV> const int diff = ( int ) ( cpi -> rd_comp_pred_diff [ i ] / cm -> MBs ) ; //<S2SV> cpi -> rd_prediction_type_threshes [ frame_type ] [ i ] += diff ; //<S2SV> cpi -> rd_prediction_type_threshes [ frame_type ] [ i ] >>= 1 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; i ++ ) { //<S2SV> const int64_t diff = cpi -> rd_filter_diff [ i ] / cm -> MBs ; //<S2SV> cpi -> rd_filter_threshes [ frame_type ] [ i ] = //<S2SV> ( cpi -> rd_filter_threshes [ frame_type ] [ i ] + diff ) / 2 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < TX_MODES ; ++ i ) { //<S2SV> int64_t pd = cpi -> rd_tx_select_diff [ i ] ; //<S2SV> int diff ; //<S2SV> if ( i == TX_MODE_SELECT ) //<S2SV> pd -= RDCOST ( cpi -> mb . rdmult , cpi -> mb . rddiv , 2048 * ( TX_SIZES - 1 ) , 0 ) ; //<S2SV> diff = ( int ) ( pd / cm -> MBs ) ; //<S2SV> cpi -> rd_tx_select_threshes [ frame_type ] [ i ] += diff ; //<S2SV> cpi -> rd_tx_select_threshes [ frame_type ] [ i ] /= 2 ; //<S2SV> } //<S2SV> if ( cm -> reference_mode == REFERENCE_MODE_SELECT ) { //<S2SV> int single_count_zero = 0 ; //<S2SV> int comp_count_zero = 0 ; //<S2SV> for ( i = 0 ; i < COMP_INTER_CONTEXTS ; i ++ ) { //<S2SV> single_count_zero += cm -> counts . comp_inter [ i ] [ 0 ] ; //<S2SV> comp_count_zero += cm -> counts . comp_inter [ i ] [ 1 ] ; //<S2SV> } //<S2SV> if ( comp_count_zero == 0 ) { //<S2SV> cm -> reference_mode = SINGLE_REFERENCE ; //<S2SV> vp9_zero ( cm -> counts . comp_inter ) ; //<S2SV> } else if ( single_count_zero == 0 ) { //<S2SV> cm -> reference_mode = COMPOUND_REFERENCE ; //<S2SV> vp9_zero ( cm -> counts . comp_inter ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( cm -> tx_mode == TX_MODE_SELECT ) { //<S2SV> int count4x4 = 0 ; //<S2SV> int count8x8_lp = 0 , count8x8_8x8p = 0 ; //<S2SV> int count16x16_16x16p = 0 , count16x16_lp = 0 ; //<S2SV> int count32x32 = 0 ; //<S2SV> for ( i = 0 ; i < TX_SIZE_CONTEXTS ; ++ i ) { //<S2SV> count4x4 += cm -> counts . tx . p32x32 [ i ] [ TX_4X4 ] ; //<S2SV> count4x4 += cm -> counts . tx . p16x16 [ i ] [ TX_4X4 ] ; //<S2SV> count4x4 += cm -> counts . tx . p8x8 [ i ] [ TX_4X4 ] ; //<S2SV> count8x8_lp += cm -> counts . tx . p32x32 [ i ] [ TX_8X8 ] ; //<S2SV> count8x8_lp += cm -> counts . tx . p16x16 [ i ] [ TX_8X8 ] ; //<S2SV> count8x8_8x8p += cm -> counts . tx . p8x8 [ i ] [ TX_8X8 ] ; //<S2SV> count16x16_16x16p += cm -> counts . tx . p16x16 [ i ] [ TX_16X16 ] ; //<S2SV> count16x16_lp += cm -> counts . tx . p32x32 [ i ] [ TX_16X16 ] ; //<S2SV> count32x32 += cm -> counts . tx . p32x32 [ i ] [ TX_32X32 ] ; //<S2SV> } //<S2SV> if ( count4x4 == 0 && count16x16_lp == 0 && count16x16_16x16p == 0 && //<S2SV> count32x32 == 0 ) { //<S2SV> cm -> tx_mode = ALLOW_8X8 ; //<S2SV> reset_skip_txfm_size ( cm , TX_8X8 ) ; //<S2SV> } else if ( count8x8_8x8p == 0 && count16x16_16x16p == 0 && //<S2SV> count8x8_lp == 0 && count16x16_lp == 0 && count32x32 == 0 ) { //<S2SV> cm -> tx_mode = ONLY_4X4 ; //<S2SV> reset_skip_txfm_size ( cm , TX_4X4 ) ; //<S2SV> } else if ( count8x8_lp == 0 && count16x16_lp == 0 && count4x4 == 0 ) { //<S2SV> cm -> tx_mode = ALLOW_32X32 ; //<S2SV> } else if ( count32x32 == 0 && count8x8_lp == 0 && count4x4 == 0 ) { //<S2SV> cm -> tx_mode = ALLOW_16X16 ; //<S2SV> reset_skip_txfm_size ( cm , TX_16X16 ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> cm -> reference_mode = SINGLE_REFERENCE ; //<S2SV> cm -> interp_filter = SWITCHABLE ; //<S2SV> encode_frame_internal ( cpi ) ; //<S2SV> } //<S2SV> } //<S2SV> 