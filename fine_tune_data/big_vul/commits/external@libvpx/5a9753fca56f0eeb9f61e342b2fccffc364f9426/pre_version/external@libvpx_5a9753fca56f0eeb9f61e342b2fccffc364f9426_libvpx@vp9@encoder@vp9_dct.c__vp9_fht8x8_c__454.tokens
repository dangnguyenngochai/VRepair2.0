void vp9_fht8x8_c ( const int16_t * input , int16_t * output , //<S2SV> int stride , int tx_type ) { //<S2SV> if ( tx_type == DCT_DCT ) { //<S2SV> vp9_fdct8x8_c ( input , output , stride ) ; //<S2SV> } else { //<S2SV> int16_t out [ 64 ] ; //<S2SV> int16_t * outptr = & out [ 0 ] ; //<S2SV> int i , j ; //<S2SV> int16_t temp_in [ 8 ] , temp_out [ 8 ] ; //<S2SV> const transform_2d ht = FHT_8 [ tx_type ] ; //<S2SV> for ( i = 0 ; i < 8 ; ++ i ) { //<S2SV> for ( j = 0 ; j < 8 ; ++ j ) //<S2SV> temp_in [ j ] = input [ j * stride + i ] * 4 ; //<S2SV> ht . cols ( temp_in , temp_out ) ; //<S2SV> for ( j = 0 ; j < 8 ; ++ j ) //<S2SV> outptr [ j * 8 + i ] = temp_out [ j ] ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 8 ; ++ i ) { //<S2SV> for ( j = 0 ; j < 8 ; ++ j ) //<S2SV> temp_in [ j ] = out [ j + i * 8 ] ; //<S2SV> ht . rows ( temp_in , temp_out ) ; //<S2SV> for ( j = 0 ; j < 8 ; ++ j ) //<S2SV> output [ j + i * 8 ] = ( temp_out [ j ] + ( temp_out [ j ] < 0 ) ) >> 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 