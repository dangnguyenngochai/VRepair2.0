void vp8_mbpost_proc_across_ip_c ( unsigned char * src , int pitch , int rows , int cols , int flimit ) //<S2SV> { //<S2SV> int r , c , i ; //<S2SV> unsigned char * s = src ; //<S2SV> unsigned char d [ 16 ] ; //<S2SV> for ( r = 0 ; r < rows ; r ++ ) //<S2SV> { //<S2SV> int sumsq = 0 ; //<S2SV> int sum = 0 ; //<S2SV> for ( i = - 8 ; i < 0 ; i ++ ) //<S2SV> s [ i ] = s [ 0 ] ; //<S2SV> for ( i = cols ; i < cols + 17 ; i ++ ) //<S2SV> s [ i ] = s [ cols - 1 ] ; //<S2SV> for ( i = - 8 ; i <= 6 ; i ++ ) //<S2SV> { //<S2SV> sumsq += s [ i ] * s [ i ] ; //<S2SV> sum += s [ i ] ; //<S2SV> d [ i + 8 ] = 0 ; //<S2SV> } //<S2SV> for ( c = 0 ; c < cols + 8 ; c ++ ) //<S2SV> { //<S2SV> int x = s [ c + 7 ] - s [ c - 8 ] ; //<S2SV> int y = s [ c + 7 ] + s [ c - 8 ] ; //<S2SV> sum += x ; //<S2SV> sumsq += x * y ; //<S2SV> d [ c & 15 ] = s [ c ] ; //<S2SV> if ( sumsq * 15 - sum * sum < flimit ) //<S2SV> { //<S2SV> d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; //<S2SV> } //<S2SV> s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; //<S2SV> } //<S2SV> s += pitch ; //<S2SV> } //<S2SV> } //<S2SV> 