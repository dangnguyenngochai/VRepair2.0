static void read_mv_probs ( nmv_context * ctx , int allow_hp , vp9_reader * r ) { //<S2SV> int i , j ; //<S2SV> update_mv_probs ( ctx -> joints , MV_JOINTS - 1 , r ) ; //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> nmv_component * const comp_ctx = & ctx -> comps [ i ] ; //<S2SV> update_mv_probs ( & comp_ctx -> sign , 1 , r ) ; //<S2SV> update_mv_probs ( comp_ctx -> classes , MV_CLASSES - 1 , r ) ; //<S2SV> update_mv_probs ( comp_ctx -> class0 , CLASS0_SIZE - 1 , r ) ; //<S2SV> update_mv_probs ( comp_ctx -> bits , MV_OFFSET_BITS , r ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> nmv_component * const comp_ctx = & ctx -> comps [ i ] ; //<S2SV> for ( j = 0 ; j < CLASS0_SIZE ; ++ j ) //<S2SV> update_mv_probs ( comp_ctx -> class0_fp [ j ] , MV_FP_SIZE - 1 , r ) ; //<S2SV> update_mv_probs ( comp_ctx -> fp , 3 , r ) ; //<S2SV> } //<S2SV> if ( allow_hp ) { //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> nmv_component * const comp_ctx = & ctx -> comps [ i ] ; //<S2SV> update_mv_probs ( & comp_ctx -> class0_hp , 1 , r ) ; //<S2SV> update_mv_probs ( & comp_ctx -> hp , 1 , r ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 