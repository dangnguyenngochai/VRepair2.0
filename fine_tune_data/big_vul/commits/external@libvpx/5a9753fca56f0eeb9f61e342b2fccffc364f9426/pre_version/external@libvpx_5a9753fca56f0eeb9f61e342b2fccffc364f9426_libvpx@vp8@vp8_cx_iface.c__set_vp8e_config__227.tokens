static vpx_codec_err_t set_vp8e_config ( VP8_CONFIG * oxcf , //<S2SV> vpx_codec_enc_cfg_t cfg , //<S2SV> struct vp8_extracfg vp8_cfg , //<S2SV> vpx_codec_priv_enc_mr_cfg_t * mr_cfg ) //<S2SV> { //<S2SV> oxcf -> multi_threaded = cfg . g_threads ; //<S2SV> oxcf -> Version = cfg . g_profile ; //<S2SV> oxcf -> Width = cfg . g_w ; //<S2SV> oxcf -> Height = cfg . g_h ; //<S2SV> oxcf -> timebase = cfg . g_timebase ; //<S2SV> oxcf -> error_resilient_mode = cfg . g_error_resilient ; //<S2SV> switch ( cfg . g_pass ) //<S2SV> { //<S2SV> case VPX_RC_ONE_PASS : //<S2SV> oxcf -> Mode = MODE_BESTQUALITY ; //<S2SV> break ; //<S2SV> case VPX_RC_FIRST_PASS : //<S2SV> oxcf -> Mode = MODE_FIRSTPASS ; //<S2SV> break ; //<S2SV> case VPX_RC_LAST_PASS : //<S2SV> oxcf -> Mode = MODE_SECONDPASS_BEST ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( cfg . g_pass == VPX_RC_FIRST_PASS || cfg . g_pass == VPX_RC_ONE_PASS ) //<S2SV> { //<S2SV> oxcf -> allow_lag = 0 ; //<S2SV> oxcf -> lag_in_frames = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> oxcf -> allow_lag = ( cfg . g_lag_in_frames ) > 0 ; //<S2SV> oxcf -> lag_in_frames = cfg . g_lag_in_frames ; //<S2SV> } //<S2SV> oxcf -> allow_df = ( cfg . rc_dropframe_thresh > 0 ) ; //<S2SV> oxcf -> drop_frames_water_mark = cfg . rc_dropframe_thresh ; //<S2SV> oxcf -> allow_spatial_resampling = cfg . rc_resize_allowed ; //<S2SV> oxcf -> resample_up_water_mark = cfg . rc_resize_up_thresh ; //<S2SV> oxcf -> resample_down_water_mark = cfg . rc_resize_down_thresh ; //<S2SV> if ( cfg . rc_end_usage == VPX_VBR ) { //<S2SV> oxcf -> end_usage = USAGE_LOCAL_FILE_PLAYBACK ; //<S2SV> } else if ( cfg . rc_end_usage == VPX_CBR ) { //<S2SV> oxcf -> end_usage = USAGE_STREAM_FROM_SERVER ; //<S2SV> } else if ( cfg . rc_end_usage == VPX_CQ ) { //<S2SV> oxcf -> end_usage = USAGE_CONSTRAINED_QUALITY ; //<S2SV> } else if ( cfg . rc_end_usage == VPX_Q ) { //<S2SV> oxcf -> end_usage = USAGE_CONSTANT_QUALITY ; //<S2SV> } //<S2SV> oxcf -> target_bandwidth = cfg . rc_target_bitrate ; //<S2SV> oxcf -> rc_max_intra_bitrate_pct = vp8_cfg . rc_max_intra_bitrate_pct ; //<S2SV> oxcf -> best_allowed_q = cfg . rc_min_quantizer ; //<S2SV> oxcf -> worst_allowed_q = cfg . rc_max_quantizer ; //<S2SV> oxcf -> cq_level = vp8_cfg . cq_level ; //<S2SV> oxcf -> fixed_q = - 1 ; //<S2SV> oxcf -> under_shoot_pct = cfg . rc_undershoot_pct ; //<S2SV> oxcf -> over_shoot_pct = cfg . rc_overshoot_pct ; //<S2SV> oxcf -> maximum_buffer_size_in_ms = cfg . rc_buf_sz ; //<S2SV> oxcf -> starting_buffer_level_in_ms = cfg . rc_buf_initial_sz ; //<S2SV> oxcf -> optimal_buffer_level_in_ms = cfg . rc_buf_optimal_sz ; //<S2SV> oxcf -> maximum_buffer_size = cfg . rc_buf_sz ; //<S2SV> oxcf -> starting_buffer_level = cfg . rc_buf_initial_sz ; //<S2SV> oxcf -> optimal_buffer_level = cfg . rc_buf_optimal_sz ; //<S2SV> oxcf -> two_pass_vbrbias = cfg . rc_2pass_vbr_bias_pct ; //<S2SV> oxcf -> two_pass_vbrmin_section = cfg . rc_2pass_vbr_minsection_pct ; //<S2SV> oxcf -> two_pass_vbrmax_section = cfg . rc_2pass_vbr_maxsection_pct ; //<S2SV> oxcf -> auto_key = cfg . kf_mode == VPX_KF_AUTO //<S2SV> && cfg . kf_min_dist != cfg . kf_max_dist ; //<S2SV> oxcf -> key_freq = cfg . kf_max_dist ; //<S2SV> oxcf -> number_of_layers = cfg . ts_number_layers ; //<S2SV> oxcf -> periodicity = cfg . ts_periodicity ; //<S2SV> if ( oxcf -> number_of_layers > 1 ) //<S2SV> { //<S2SV> memcpy ( oxcf -> target_bitrate , cfg . ts_target_bitrate , //<S2SV> sizeof ( cfg . ts_target_bitrate ) ) ; //<S2SV> memcpy ( oxcf -> rate_decimator , cfg . ts_rate_decimator , //<S2SV> sizeof ( cfg . ts_rate_decimator ) ) ; //<S2SV> memcpy ( oxcf -> layer_id , cfg . ts_layer_id , sizeof ( cfg . ts_layer_id ) ) ; //<S2SV> } //<S2SV> # if CONFIG_MULTI_RES_ENCODING //<S2SV> if ( mr_cfg ) //<S2SV> { //<S2SV> oxcf -> mr_total_resolutions = mr_cfg -> mr_total_resolutions ; //<S2SV> oxcf -> mr_encoder_id = mr_cfg -> mr_encoder_id ; //<S2SV> oxcf -> mr_down_sampling_factor . num = mr_cfg -> mr_down_sampling_factor . num ; //<S2SV> oxcf -> mr_down_sampling_factor . den = mr_cfg -> mr_down_sampling_factor . den ; //<S2SV> oxcf -> mr_low_res_mode_info = mr_cfg -> mr_low_res_mode_info ; //<S2SV> } //<S2SV> # endif //<S2SV> oxcf -> cpu_used = vp8_cfg . cpu_used ; //<S2SV> oxcf -> encode_breakout = vp8_cfg . static_thresh ; //<S2SV> oxcf -> play_alternate = vp8_cfg . enable_auto_alt_ref ; //<S2SV> oxcf -> noise_sensitivity = vp8_cfg . noise_sensitivity ; //<S2SV> oxcf -> Sharpness = vp8_cfg . Sharpness ; //<S2SV> oxcf -> token_partitions = vp8_cfg . token_partitions ; //<S2SV> oxcf -> two_pass_stats_in = cfg . rc_twopass_stats_in ; //<S2SV> oxcf -> output_pkt_list = vp8_cfg . pkt_list ; //<S2SV> oxcf -> arnr_max_frames = vp8_cfg . arnr_max_frames ; //<S2SV> oxcf -> arnr_strength = vp8_cfg . arnr_strength ; //<S2SV> oxcf -> arnr_type = vp8_cfg . arnr_type ; //<S2SV> oxcf -> tuning = vp8_cfg . tuning ; //<S2SV> return VPX_CODEC_OK ; //<S2SV> } //<S2SV> 