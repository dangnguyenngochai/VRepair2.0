static //<S2SV> void Scale2D //<S2SV> ( //<S2SV> unsigned char * source , //<S2SV> int source_pitch , //<S2SV> unsigned int source_width , //<S2SV> unsigned int source_height , //<S2SV> unsigned char * dest , //<S2SV> int dest_pitch , //<S2SV> unsigned int dest_width , //<S2SV> unsigned int dest_height , //<S2SV> unsigned char * temp_area , //<S2SV> unsigned char temp_area_height , //<S2SV> unsigned int hscale , //<S2SV> unsigned int hratio , //<S2SV> unsigned int vscale , //<S2SV> unsigned int vratio , //<S2SV> unsigned int interlaced //<S2SV> ) { //<S2SV> int i , j , k ; //<S2SV> int bands ; //<S2SV> int dest_band_height ; //<S2SV> int source_band_height ; //<S2SV> typedef void ( * Scale1D ) ( const unsigned char * source , int source_step , unsigned int source_scale , unsigned int source_length , //<S2SV> unsigned char * dest , int dest_step , unsigned int dest_scale , unsigned int dest_length ) ; //<S2SV> Scale1D Scale1Dv = scale1d_c ; //<S2SV> Scale1D Scale1Dh = scale1d_c ; //<S2SV> void ( * horiz_line_scale ) ( const unsigned char * , unsigned int , unsigned char * , unsigned int ) = NULL ; //<S2SV> void ( * vert_band_scale ) ( unsigned char * , unsigned int , unsigned char * , unsigned int , unsigned int ) = NULL ; //<S2SV> int ratio_scalable = 1 ; //<S2SV> int interpolation = 0 ; //<S2SV> unsigned char * source_base ; //<S2SV> unsigned char * line_src ; //<S2SV> source_base = ( unsigned char * ) source ; //<S2SV> if ( source_pitch < 0 ) { //<S2SV> int offset ; //<S2SV> offset = ( source_height - 1 ) ; //<S2SV> offset *= source_pitch ; //<S2SV> source_base += offset ; //<S2SV> } //<S2SV> switch ( hratio * 10 / hscale ) { //<S2SV> case 8 : //<S2SV> horiz_line_scale = vp8_horizontal_line_5_4_scale ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> horiz_line_scale = vp8_horizontal_line_5_3_scale ; //<S2SV> break ; //<S2SV> case 5 : //<S2SV> horiz_line_scale = vp8_horizontal_line_2_1_scale ; //<S2SV> break ; //<S2SV> default : //<S2SV> ratio_scalable = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> switch ( vratio * 10 / vscale ) { //<S2SV> case 8 : //<S2SV> vert_band_scale = vp8_vertical_band_5_4_scale ; //<S2SV> source_band_height = 5 ; //<S2SV> dest_band_height = 4 ; //<S2SV> break ; //<S2SV> case 6 : //<S2SV> vert_band_scale = vp8_vertical_band_5_3_scale ; //<S2SV> source_band_height = 5 ; //<S2SV> dest_band_height = 3 ; //<S2SV> break ; //<S2SV> case 5 : //<S2SV> if ( interlaced ) { //<S2SV> vert_band_scale = vp8_vertical_band_2_1_scale ; //<S2SV> } else { //<S2SV> interpolation = 1 ; //<S2SV> vert_band_scale = vp8_vertical_band_2_1_scale_i ; //<S2SV> } //<S2SV> source_band_height = 2 ; //<S2SV> dest_band_height = 1 ; //<S2SV> break ; //<S2SV> default : //<S2SV> ratio_scalable = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ratio_scalable ) { //<S2SV> if ( source_height == dest_height ) { //<S2SV> for ( k = 0 ; k < ( int ) dest_height ; k ++ ) { //<S2SV> horiz_line_scale ( source , source_width , dest , dest_width ) ; //<S2SV> source += source_pitch ; //<S2SV> dest += dest_pitch ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> if ( interpolation ) { //<S2SV> if ( source < source_base ) //<S2SV> source = source_base ; //<S2SV> horiz_line_scale ( source , source_width , temp_area , dest_width ) ; //<S2SV> } //<S2SV> for ( k = 0 ; k < ( int ) ( dest_height + dest_band_height - 1 ) / dest_band_height ; k ++ ) { //<S2SV> for ( i = 0 ; i < source_band_height ; i ++ ) { //<S2SV> line_src = ( unsigned char * ) source + i * source_pitch ; //<S2SV> if ( line_src < source_base ) //<S2SV> line_src = source_base ; //<S2SV> horiz_line_scale ( line_src , source_width , //<S2SV> temp_area + ( i + 1 ) * dest_pitch , dest_width ) ; //<S2SV> } //<S2SV> vert_band_scale ( temp_area + dest_pitch , dest_pitch , dest , dest_pitch , dest_width ) ; //<S2SV> if ( interpolation ) //<S2SV> vpx_memcpy ( temp_area , temp_area + source_band_height * dest_pitch , dest_width ) ; //<S2SV> source += ( unsigned long ) source_band_height * source_pitch ; //<S2SV> dest += ( unsigned long ) dest_band_height * dest_pitch ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> if ( hscale == 2 && hratio == 1 ) //<S2SV> Scale1Dh = scale1d_2t1_ps ; //<S2SV> if ( vscale == 2 && vratio == 1 ) { //<S2SV> if ( interlaced ) //<S2SV> Scale1Dv = scale1d_2t1_ps ; //<S2SV> else //<S2SV> Scale1Dv = scale1d_2t1_i ; //<S2SV> } //<S2SV> if ( source_height == dest_height ) { //<S2SV> for ( k = 0 ; k < ( int ) dest_height ; k ++ ) { //<S2SV> Scale1Dh ( source , 1 , hscale , source_width + 1 , dest , 1 , hratio , dest_width ) ; //<S2SV> source += source_pitch ; //<S2SV> dest += dest_pitch ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> if ( dest_height > source_height ) { //<S2SV> dest_band_height = temp_area_height - 1 ; //<S2SV> source_band_height = dest_band_height * source_height / dest_height ; //<S2SV> } else { //<S2SV> source_band_height = temp_area_height - 1 ; //<S2SV> dest_band_height = source_band_height * vratio / vscale ; //<S2SV> } //<S2SV> Scale1Dh ( source , 1 , hscale , source_width + 1 , temp_area , 1 , hratio , dest_width ) ; //<S2SV> bands = ( dest_height + dest_band_height - 1 ) / dest_band_height ; //<S2SV> for ( k = 0 ; k < bands ; k ++ ) { //<S2SV> for ( i = 1 ; i < source_band_height + 1 ; i ++ ) { //<S2SV> if ( k * source_band_height + i < ( int ) source_height ) { //<S2SV> Scale1Dh ( source + i * source_pitch , 1 , hscale , source_width + 1 , //<S2SV> temp_area + i * dest_pitch , 1 , hratio , dest_width ) ; //<S2SV> } else { //<S2SV> vpx_memcpy ( temp_area + i * dest_pitch , temp_area + ( i - 1 ) * dest_pitch , dest_pitch ) ; //<S2SV> } //<S2SV> } //<S2SV> for ( j = 0 ; j < ( int ) dest_width ; j ++ ) { //<S2SV> Scale1Dv ( & temp_area [ j ] , dest_pitch , vscale , source_band_height + 1 , //<S2SV> & dest [ j ] , dest_pitch , vratio , dest_band_height ) ; //<S2SV> } //<S2SV> vpx_memcpy ( temp_area , temp_area + source_band_height * dest_pitch , dest_pitch ) ; //<S2SV> source += source_band_height * source_pitch ; //<S2SV> dest += dest_band_height * dest_pitch ; //<S2SV> } //<S2SV> } //<S2SV> 