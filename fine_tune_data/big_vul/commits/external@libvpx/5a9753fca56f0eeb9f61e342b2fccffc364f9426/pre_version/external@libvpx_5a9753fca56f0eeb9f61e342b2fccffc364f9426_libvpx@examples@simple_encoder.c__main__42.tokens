int main ( int argc , char * * argv ) { //<S2SV> FILE * infile = NULL ; //<S2SV> vpx_codec_ctx_t codec ; //<S2SV> vpx_codec_enc_cfg_t cfg ; //<S2SV> int frame_count = 0 ; //<S2SV> vpx_image_t raw ; //<S2SV> vpx_codec_err_t res ; //<S2SV> VpxVideoInfo info = { 0 } ; //<S2SV> VpxVideoWriter * writer = NULL ; //<S2SV> const VpxInterface * encoder = NULL ; //<S2SV> const int fps = 30 ; //<S2SV> const int bitrate = 200 ; //<S2SV> int keyframe_interval = 0 ; //<S2SV> const char * codec_arg = NULL ; //<S2SV> const char * width_arg = NULL ; //<S2SV> const char * height_arg = NULL ; //<S2SV> const char * infile_arg = NULL ; //<S2SV> const char * outfile_arg = NULL ; //<S2SV> const char * keyframe_interval_arg = NULL ; //<S2SV> exec_name = argv [ 0 ] ; //<S2SV> if ( argc < 7 ) //<S2SV> die ( "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>arguments" ) ; //<S2SV> codec_arg = argv [ 1 ] ; //<S2SV> width_arg = argv [ 2 ] ; //<S2SV> height_arg = argv [ 3 ] ; //<S2SV> infile_arg = argv [ 4 ] ; //<S2SV> outfile_arg = argv [ 5 ] ; //<S2SV> keyframe_interval_arg = argv [ 6 ] ; //<S2SV> encoder = get_vpx_encoder_by_name ( codec_arg ) ; //<S2SV> if ( ! encoder ) //<S2SV> die ( "Unsupported<S2SV_blank>codec." ) ; //<S2SV> info . codec_fourcc = encoder -> fourcc ; //<S2SV> info . frame_width = strtol ( width_arg , NULL , 0 ) ; //<S2SV> info . frame_height = strtol ( height_arg , NULL , 0 ) ; //<S2SV> info . time_base . numerator = 1 ; //<S2SV> info . time_base . denominator = fps ; //<S2SV> if ( info . frame_width <= 0 || //<S2SV> info . frame_height <= 0 || //<S2SV> ( info . frame_width % 2 ) != 0 || //<S2SV> ( info . frame_height % 2 ) != 0 ) { //<S2SV> die ( "Invalid<S2SV_blank>frame<S2SV_blank>size:<S2SV_blank>%dx%d" , info . frame_width , info . frame_height ) ; //<S2SV> } //<S2SV> if ( ! vpx_img_alloc ( & raw , VPX_IMG_FMT_I420 , info . frame_width , //<S2SV> info . frame_height , 1 ) ) { //<S2SV> die ( "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>image." ) ; //<S2SV> } //<S2SV> keyframe_interval = strtol ( keyframe_interval_arg , NULL , 0 ) ; //<S2SV> if ( keyframe_interval < 0 ) //<S2SV> die ( "Invalid<S2SV_blank>keyframe<S2SV_blank>interval<S2SV_blank>value." ) ; //<S2SV> printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; //<S2SV> res = vpx_codec_enc_config_default ( encoder -> interface ( ) , & cfg , 0 ) ; //<S2SV> if ( res ) //<S2SV> die_codec ( & codec , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>default<S2SV_blank>codec<S2SV_blank>config." ) ; //<S2SV> cfg . g_w = info . frame_width ; //<S2SV> cfg . g_h = info . frame_height ; //<S2SV> cfg . g_timebase . num = info . time_base . numerator ; //<S2SV> cfg . g_timebase . den = info . time_base . denominator ; //<S2SV> cfg . rc_target_bitrate = bitrate ; //<S2SV> cfg . g_error_resilient = argc > 7 ? strtol ( argv [ 7 ] , NULL , 0 ) : 0 ; //<S2SV> writer = vpx_video_writer_open ( outfile_arg , kContainerIVF , & info ) ; //<S2SV> if ( ! writer ) //<S2SV> die ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>writing." , outfile_arg ) ; //<S2SV> if ( ! ( infile = fopen ( infile_arg , "rb" ) ) ) //<S2SV> die ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading." , infile_arg ) ; //<S2SV> if ( vpx_codec_enc_init ( & codec , encoder -> interface ( ) , & cfg , 0 ) ) //<S2SV> die_codec ( & codec , "Failed<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>encoder" ) ; //<S2SV> while ( vpx_img_read ( & raw , infile ) ) { //<S2SV> int flags = 0 ; //<S2SV> if ( keyframe_interval > 0 && frame_count % keyframe_interval == 0 ) //<S2SV> flags |= VPX_EFLAG_FORCE_KF ; //<S2SV> encode_frame ( & codec , & raw , frame_count ++ , flags , writer ) ; //<S2SV> } //<S2SV> encode_frame ( & codec , NULL , - 1 , 0 , writer ) ; //<S2SV> printf ( "\\n" ) ; //<S2SV> fclose ( infile ) ; //<S2SV> printf ( "Processed<S2SV_blank>%d<S2SV_blank>frames.\\n" , frame_count ) ; //<S2SV> vpx_img_free ( & raw ) ; //<S2SV> if ( vpx_codec_destroy ( & codec ) ) //<S2SV> die_codec ( & codec , "Failed<S2SV_blank>to<S2SV_blank>destroy<S2SV_blank>codec." ) ; //<S2SV> vpx_video_writer_close ( writer ) ; //<S2SV> return EXIT_SUCCESS ; //<S2SV> } //<S2SV> 