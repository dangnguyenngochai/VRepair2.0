static void set_rt_speed_feature ( VP9_COMMON * cm , SPEED_FEATURES * sf , //<S2SV> int speed ) { //<S2SV> sf -> static_segmentation = 0 ; //<S2SV> sf -> adaptive_rd_thresh = 1 ; //<S2SV> sf -> encode_breakout_thresh = 1 ; //<S2SV> sf -> use_fast_coef_costing = 1 ; //<S2SV> if ( speed == 1 ) { //<S2SV> sf -> use_square_partition_only = ! frame_is_intra_only ( cm ) ; //<S2SV> sf -> less_rectangular_check = 1 ; //<S2SV> sf -> tx_size_search_method = frame_is_intra_only ( cm ) ? USE_FULL_RD //<S2SV> : USE_LARGESTALL ; //<S2SV> if ( MIN ( cm -> width , cm -> height ) >= 720 ) //<S2SV> sf -> disable_split_mask = cm -> show_frame ? DISABLE_ALL_SPLIT //<S2SV> : DISABLE_ALL_INTER_SPLIT ; //<S2SV> else //<S2SV> sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; //<S2SV> sf -> use_rd_breakout = 1 ; //<S2SV> sf -> adaptive_motion_search = 1 ; //<S2SV> sf -> adaptive_pred_interp_filter = 1 ; //<S2SV> sf -> auto_mv_step_size = 1 ; //<S2SV> sf -> adaptive_rd_thresh = 2 ; //<S2SV> sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; //<S2SV> sf -> intra_uv_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; //<S2SV> sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; //<S2SV> sf -> encode_breakout_thresh = 8 ; //<S2SV> } //<S2SV> if ( speed >= 2 ) { //<S2SV> sf -> use_square_partition_only = ! frame_is_intra_only ( cm ) ; //<S2SV> sf -> less_rectangular_check = 1 ; //<S2SV> sf -> tx_size_search_method = frame_is_intra_only ( cm ) ? USE_FULL_RD //<S2SV> : USE_LARGESTALL ; //<S2SV> if ( MIN ( cm -> width , cm -> height ) >= 720 ) //<S2SV> sf -> disable_split_mask = cm -> show_frame ? //<S2SV> DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; //<S2SV> else //<S2SV> sf -> disable_split_mask = LAST_AND_INTRA_SPLIT_ONLY ; //<S2SV> sf -> mode_search_skip_flags = FLAG_SKIP_INTRA_DIRMISMATCH | //<S2SV> FLAG_SKIP_INTRA_BESTINTER | //<S2SV> FLAG_SKIP_COMP_BESTINTRA | //<S2SV> FLAG_SKIP_INTRA_LOWVAR ; //<S2SV> sf -> use_rd_breakout = 1 ; //<S2SV> sf -> adaptive_motion_search = 1 ; //<S2SV> sf -> adaptive_pred_interp_filter = 2 ; //<S2SV> sf -> auto_mv_step_size = 1 ; //<S2SV> sf -> reference_masking = 1 ; //<S2SV> sf -> disable_filter_search_var_thresh = 50 ; //<S2SV> sf -> comp_inter_joint_search_thresh = BLOCK_SIZES ; //<S2SV> sf -> auto_min_max_partition_size = RELAXED_NEIGHBORING_MIN_MAX ; //<S2SV> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_LOW_MOTION ; //<S2SV> sf -> adjust_partitioning_from_last_frame = 1 ; //<S2SV> sf -> last_partitioning_redo_frequency = 3 ; //<S2SV> sf -> adaptive_rd_thresh = 2 ; //<S2SV> sf -> use_lp32x32fdct = 1 ; //<S2SV> sf -> mode_skip_start = 11 ; //<S2SV> sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; //<S2SV> sf -> intra_y_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; //<S2SV> sf -> intra_uv_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; //<S2SV> sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; //<S2SV> sf -> encode_breakout_thresh = 200 ; //<S2SV> } //<S2SV> if ( speed >= 3 ) { //<S2SV> sf -> use_square_partition_only = 1 ; //<S2SV> sf -> disable_filter_search_var_thresh = 100 ; //<S2SV> sf -> use_lastframe_partitioning = LAST_FRAME_PARTITION_ALL ; //<S2SV> sf -> constrain_copy_partition = 1 ; //<S2SV> sf -> use_uv_intra_rd_estimate = 1 ; //<S2SV> sf -> skip_encode_sb = 1 ; //<S2SV> sf -> subpel_iters_per_step = 1 ; //<S2SV> sf -> use_fast_coef_updates = ONE_LOOP_REDUCED ; //<S2SV> sf -> adaptive_rd_thresh = 4 ; //<S2SV> sf -> mode_skip_start = 6 ; //<S2SV> sf -> allow_skip_recode = 0 ; //<S2SV> sf -> optimize_coefficients = 0 ; //<S2SV> sf -> disable_split_mask = DISABLE_ALL_SPLIT ; //<S2SV> sf -> lpf_pick = LPF_PICK_FROM_Q ; //<S2SV> sf -> encode_breakout_thresh = 700 ; //<S2SV> } //<S2SV> if ( speed >= 4 ) { //<S2SV> int i ; //<S2SV> sf -> last_partitioning_redo_frequency = 4 ; //<S2SV> sf -> adaptive_rd_thresh = 5 ; //<S2SV> sf -> use_fast_coef_costing = 0 ; //<S2SV> sf -> auto_min_max_partition_size = STRICT_NEIGHBORING_MIN_MAX ; //<S2SV> sf -> adjust_partitioning_from_last_frame = //<S2SV> cm -> last_frame_type != cm -> frame_type || ( 0 == //<S2SV> ( cm -> current_video_frame + 1 ) % sf -> last_partitioning_redo_frequency ) ; //<S2SV> sf -> subpel_force_stop = 1 ; //<S2SV> for ( i = 0 ; i < TX_SIZES ; i ++ ) { //<S2SV> sf -> intra_y_mode_mask [ i ] = INTRA_DC_H_V ; //<S2SV> sf -> intra_uv_mode_mask [ i ] = INTRA_DC_ONLY ; //<S2SV> } //<S2SV> sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_ONLY ; //<S2SV> sf -> frame_parameter_update = 0 ; //<S2SV> sf -> encode_breakout_thresh = 1000 ; //<S2SV> sf -> search_method = FAST_HEX ; //<S2SV> sf -> disable_inter_mode_mask [ BLOCK_32X32 ] = 1 << INTER_OFFSET ( ZEROMV ) ; //<S2SV> sf -> disable_inter_mode_mask [ BLOCK_32X64 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; //<S2SV> sf -> disable_inter_mode_mask [ BLOCK_64X32 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; //<S2SV> sf -> disable_inter_mode_mask [ BLOCK_64X64 ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; //<S2SV> sf -> max_intra_bsize = BLOCK_32X32 ; //<S2SV> sf -> allow_skip_recode = 1 ; //<S2SV> } //<S2SV> if ( speed >= 5 ) { //<S2SV> sf -> max_partition_size = BLOCK_32X32 ; //<S2SV> sf -> min_partition_size = BLOCK_8X8 ; //<S2SV> sf -> partition_check = //<S2SV> ( cm -> current_video_frame % sf -> last_partitioning_redo_frequency == 1 ) ; //<S2SV> sf -> force_frame_boost = cm -> frame_type == KEY_FRAME || //<S2SV> ( cm -> current_video_frame % //<S2SV> ( sf -> last_partitioning_redo_frequency << 1 ) == 1 ) ; //<S2SV> sf -> max_delta_qindex = ( cm -> frame_type == KEY_FRAME ) ? 20 : 15 ; //<S2SV> sf -> partition_search_type = REFERENCE_PARTITION ; //<S2SV> sf -> use_nonrd_pick_mode = 1 ; //<S2SV> sf -> search_method = FAST_DIAMOND ; //<S2SV> sf -> allow_skip_recode = 0 ; //<S2SV> } //<S2SV> if ( speed >= 6 ) { //<S2SV> sf -> partition_search_type = SOURCE_VAR_BASED_PARTITION ; //<S2SV> sf -> search_type_check_frequency = 50 ; //<S2SV> sf -> source_var_thresh = 360 ; //<S2SV> sf -> use_nonrd_pick_mode = 1 ; //<S2SV> sf -> search_method = FAST_DIAMOND ; //<S2SV> } //<S2SV> if ( speed >= 7 ) { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < BLOCK_SIZES ; ++ i ) //<S2SV> sf -> disable_inter_mode_mask [ i ] = ~ ( 1 << INTER_OFFSET ( NEARESTMV ) ) ; //<S2SV> } //<S2SV> } //<S2SV> 