static void write_partition ( VP9_COMMON * cm , MACROBLOCKD * xd , //<S2SV> int hbs , int mi_row , int mi_col , //<S2SV> PARTITION_TYPE p , BLOCK_SIZE bsize , vp9_writer * w ) { //<S2SV> const int ctx = partition_plane_context ( xd , mi_row , mi_col , bsize ) ; //<S2SV> const vp9_prob * const probs = get_partition_probs ( cm , ctx ) ; //<S2SV> const int has_rows = ( mi_row + hbs ) < cm -> mi_rows ; //<S2SV> const int has_cols = ( mi_col + hbs ) < cm -> mi_cols ; //<S2SV> if ( has_rows && has_cols ) { //<S2SV> vp9_write_token ( w , vp9_partition_tree , probs , & partition_encodings [ p ] ) ; //<S2SV> } else if ( ! has_rows && has_cols ) { //<S2SV> assert ( p == PARTITION_SPLIT || p == PARTITION_HORZ ) ; //<S2SV> vp9_write ( w , p == PARTITION_SPLIT , probs [ 1 ] ) ; //<S2SV> } else if ( has_rows && ! has_cols ) { //<S2SV> assert ( p == PARTITION_SPLIT || p == PARTITION_VERT ) ; //<S2SV> vp9_write ( w , p == PARTITION_SPLIT , probs [ 2 ] ) ; //<S2SV> } else { //<S2SV> assert ( p == PARTITION_SPLIT ) ; //<S2SV> } //<S2SV> } //<S2SV> 