static int evaluate_inter_mode_rd ( int mdcounts [ 4 ] , //<S2SV> RATE_DISTORTION * rd , //<S2SV> int * disable_skip , //<S2SV> VP8_COMP * cpi , MACROBLOCK * x ) //<S2SV> { //<S2SV> MB_PREDICTION_MODE this_mode = x -> e_mbd . mode_info_context -> mbmi . mode ; //<S2SV> BLOCK * b = & x -> block [ 0 ] ; //<S2SV> MACROBLOCKD * xd = & x -> e_mbd ; //<S2SV> int distortion ; //<S2SV> vp8_build_inter16x16_predictors_mby ( & x -> e_mbd , x -> e_mbd . predictor , 16 ) ; //<S2SV> if ( cpi -> active_map_enabled && x -> active_ptr [ 0 ] == 0 ) { //<S2SV> x -> skip = 1 ; //<S2SV> } //<S2SV> else if ( x -> encode_breakout ) //<S2SV> { //<S2SV> unsigned int sse ; //<S2SV> unsigned int var ; //<S2SV> unsigned int threshold = ( xd -> block [ 0 ] . dequant [ 1 ] //<S2SV> * xd -> block [ 0 ] . dequant [ 1 ] >> 4 ) ; //<S2SV> if ( threshold < x -> encode_breakout ) //<S2SV> threshold = x -> encode_breakout ; //<S2SV> var = vp8_variance16x16 //<S2SV> ( * ( b -> base_src ) , b -> src_stride , //<S2SV> x -> e_mbd . predictor , 16 , & sse ) ; //<S2SV> if ( sse < threshold ) //<S2SV> { //<S2SV> unsigned int q2dc = xd -> block [ 24 ] . dequant [ 0 ] ; //<S2SV> if ( ( sse - var < q2dc * q2dc >> 4 ) || //<S2SV> ( sse / 2 > var && sse - var < 64 ) ) //<S2SV> { //<S2SV> unsigned int sse2 = VP8_UVSSE ( x ) ; //<S2SV> if ( sse2 * 2 < threshold ) //<S2SV> { //<S2SV> x -> skip = 1 ; //<S2SV> rd -> distortion2 = sse + sse2 ; //<S2SV> rd -> rate2 = 500 ; //<S2SV> rd -> rate_uv = 0 ; //<S2SV> rd -> distortion_uv = sse2 ; //<S2SV> * disable_skip = 1 ; //<S2SV> return RDCOST ( x -> rdmult , x -> rddiv , rd -> rate2 , //<S2SV> rd -> distortion2 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> rd -> rate2 += vp8_cost_mv_ref ( this_mode , mdcounts ) ; //<S2SV> macro_block_yrd ( x , & rd -> rate_y , & distortion ) ; //<S2SV> rd -> rate2 += rd -> rate_y ; //<S2SV> rd -> distortion2 += distortion ; //<S2SV> rd_inter16x16_uv ( cpi , x , & rd -> rate_uv , & rd -> distortion_uv , //<S2SV> cpi -> common . full_pixel ) ; //<S2SV> rd -> rate2 += rd -> rate_uv ; //<S2SV> rd -> distortion2 += rd -> distortion_uv ; //<S2SV> return INT_MAX ; //<S2SV> } //<S2SV> 