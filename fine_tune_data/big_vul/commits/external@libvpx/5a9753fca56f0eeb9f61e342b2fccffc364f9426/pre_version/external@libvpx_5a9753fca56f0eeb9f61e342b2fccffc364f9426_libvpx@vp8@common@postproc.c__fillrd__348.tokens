static void fillrd ( struct postproc_state * state , int q , int a ) //<S2SV> { //<S2SV> char char_dist [ 300 ] ; //<S2SV> double sigma ; //<S2SV> int i ; //<S2SV> vp8_clear_system_state ( ) ; //<S2SV> sigma = a + .5 + .6 * ( 63 - q ) / 63.0 ; //<S2SV> { //<S2SV> int next , j ; //<S2SV> next = 0 ; //<S2SV> for ( i = - 32 ; i < 32 ; i ++ ) //<S2SV> { //<S2SV> const int v = ( int ) ( .5 + 256 * vp8_gaussian ( sigma , 0 , i ) ) ; //<S2SV> if ( v ) //<S2SV> { //<S2SV> for ( j = 0 ; j < v ; j ++ ) //<S2SV> { //<S2SV> char_dist [ next + j ] = ( char ) i ; //<S2SV> } //<S2SV> next = next + j ; //<S2SV> } //<S2SV> } //<S2SV> for ( ; next < 256 ; next ++ ) //<S2SV> char_dist [ next ] = 0 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 3072 ; i ++ ) //<S2SV> { //<S2SV> state -> noise [ i ] = char_dist [ rand ( ) & 0xff ] ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 16 ; i ++ ) //<S2SV> { //<S2SV> state -> blackclamp [ i ] = - char_dist [ 0 ] ; //<S2SV> state -> whiteclamp [ i ] = - char_dist [ 0 ] ; //<S2SV> state -> bothclamp [ i ] = - 2 * char_dist [ 0 ] ; //<S2SV> } //<S2SV> state -> last_q = q ; //<S2SV> state -> last_noise = a ; //<S2SV> } //<S2SV> 