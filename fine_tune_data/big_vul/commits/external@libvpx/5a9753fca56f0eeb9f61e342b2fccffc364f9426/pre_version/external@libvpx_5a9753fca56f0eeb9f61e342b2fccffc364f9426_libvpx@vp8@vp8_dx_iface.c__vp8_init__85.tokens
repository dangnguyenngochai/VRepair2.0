static vpx_codec_err_t vp8_init ( vpx_codec_ctx_t * ctx , //<S2SV> vpx_codec_priv_enc_mr_cfg_t * data ) //<S2SV> { //<S2SV> vpx_codec_err_t res = VPX_CODEC_OK ; //<S2SV> ( void ) data ; //<S2SV> vp8_rtcd ( ) ; //<S2SV> if ( ! ctx -> priv ) //<S2SV> { //<S2SV> vpx_codec_mmap_t mmap ; //<S2SV> mmap . id = vp8_mem_req_segs [ 0 ] . id ; //<S2SV> mmap . sz = sizeof ( vpx_codec_alg_priv_t ) ; //<S2SV> mmap . align = vp8_mem_req_segs [ 0 ] . align ; //<S2SV> mmap . flags = vp8_mem_req_segs [ 0 ] . flags ; //<S2SV> res = vpx_mmap_alloc ( & mmap ) ; //<S2SV> if ( res != VPX_CODEC_OK ) return res ; //<S2SV> vp8_init_ctx ( ctx , & mmap ) ; //<S2SV> ctx -> priv -> alg_priv -> fragments . count = 0 ; //<S2SV> ctx -> priv -> alg_priv -> fragments . enabled = //<S2SV> ( ctx -> priv -> alg_priv -> base . init_flags & //<S2SV> VPX_CODEC_USE_INPUT_FRAGMENTS ) ; //<S2SV> ctx -> priv -> alg_priv -> defer_alloc = 1 ; //<S2SV> } //<S2SV> ctx -> priv -> alg_priv -> yv12_frame_buffers . use_frame_threads = //<S2SV> ( ctx -> priv -> alg_priv -> base . init_flags & //<S2SV> VPX_CODEC_USE_FRAME_THREADING ) ; //<S2SV> ctx -> priv -> alg_priv -> yv12_frame_buffers . use_frame_threads = 0 ; //<S2SV> if ( ctx -> priv -> alg_priv -> yv12_frame_buffers . use_frame_threads && //<S2SV> ( ( ctx -> priv -> alg_priv -> base . init_flags & //<S2SV> VPX_CODEC_USE_ERROR_CONCEALMENT ) //<S2SV> || ( ctx -> priv -> alg_priv -> base . init_flags & //<S2SV> VPX_CODEC_USE_INPUT_FRAGMENTS ) ) ) //<S2SV> { //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 