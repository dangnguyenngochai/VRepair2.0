static void fadst16 ( const int16_t * input , int16_t * output ) { //<S2SV> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 , s8 , s9 , s10 , s11 , s12 , s13 , s14 , s15 ; //<S2SV> int x0 = input [ 15 ] ; //<S2SV> int x1 = input [ 0 ] ; //<S2SV> int x2 = input [ 13 ] ; //<S2SV> int x3 = input [ 2 ] ; //<S2SV> int x4 = input [ 11 ] ; //<S2SV> int x5 = input [ 4 ] ; //<S2SV> int x6 = input [ 9 ] ; //<S2SV> int x7 = input [ 6 ] ; //<S2SV> int x8 = input [ 7 ] ; //<S2SV> int x9 = input [ 8 ] ; //<S2SV> int x10 = input [ 5 ] ; //<S2SV> int x11 = input [ 10 ] ; //<S2SV> int x12 = input [ 3 ] ; //<S2SV> int x13 = input [ 12 ] ; //<S2SV> int x14 = input [ 1 ] ; //<S2SV> int x15 = input [ 14 ] ; //<S2SV> s0 = x0 * cospi_1_64 + x1 * cospi_31_64 ; //<S2SV> s1 = x0 * cospi_31_64 - x1 * cospi_1_64 ; //<S2SV> s2 = x2 * cospi_5_64 + x3 * cospi_27_64 ; //<S2SV> s3 = x2 * cospi_27_64 - x3 * cospi_5_64 ; //<S2SV> s4 = x4 * cospi_9_64 + x5 * cospi_23_64 ; //<S2SV> s5 = x4 * cospi_23_64 - x5 * cospi_9_64 ; //<S2SV> s6 = x6 * cospi_13_64 + x7 * cospi_19_64 ; //<S2SV> s7 = x6 * cospi_19_64 - x7 * cospi_13_64 ; //<S2SV> s8 = x8 * cospi_17_64 + x9 * cospi_15_64 ; //<S2SV> s9 = x8 * cospi_15_64 - x9 * cospi_17_64 ; //<S2SV> s10 = x10 * cospi_21_64 + x11 * cospi_11_64 ; //<S2SV> s11 = x10 * cospi_11_64 - x11 * cospi_21_64 ; //<S2SV> s12 = x12 * cospi_25_64 + x13 * cospi_7_64 ; //<S2SV> s13 = x12 * cospi_7_64 - x13 * cospi_25_64 ; //<S2SV> s14 = x14 * cospi_29_64 + x15 * cospi_3_64 ; //<S2SV> s15 = x14 * cospi_3_64 - x15 * cospi_29_64 ; //<S2SV> x0 = fdct_round_shift ( s0 + s8 ) ; //<S2SV> x1 = fdct_round_shift ( s1 + s9 ) ; //<S2SV> x2 = fdct_round_shift ( s2 + s10 ) ; //<S2SV> x3 = fdct_round_shift ( s3 + s11 ) ; //<S2SV> x4 = fdct_round_shift ( s4 + s12 ) ; //<S2SV> x5 = fdct_round_shift ( s5 + s13 ) ; //<S2SV> x6 = fdct_round_shift ( s6 + s14 ) ; //<S2SV> x7 = fdct_round_shift ( s7 + s15 ) ; //<S2SV> x8 = fdct_round_shift ( s0 - s8 ) ; //<S2SV> x9 = fdct_round_shift ( s1 - s9 ) ; //<S2SV> x10 = fdct_round_shift ( s2 - s10 ) ; //<S2SV> x11 = fdct_round_shift ( s3 - s11 ) ; //<S2SV> x12 = fdct_round_shift ( s4 - s12 ) ; //<S2SV> x13 = fdct_round_shift ( s5 - s13 ) ; //<S2SV> x14 = fdct_round_shift ( s6 - s14 ) ; //<S2SV> x15 = fdct_round_shift ( s7 - s15 ) ; //<S2SV> s0 = x0 ; //<S2SV> s1 = x1 ; //<S2SV> s2 = x2 ; //<S2SV> s3 = x3 ; //<S2SV> s4 = x4 ; //<S2SV> s5 = x5 ; //<S2SV> s6 = x6 ; //<S2SV> s7 = x7 ; //<S2SV> s8 = x8 * cospi_4_64 + x9 * cospi_28_64 ; //<S2SV> s9 = x8 * cospi_28_64 - x9 * cospi_4_64 ; //<S2SV> s10 = x10 * cospi_20_64 + x11 * cospi_12_64 ; //<S2SV> s11 = x10 * cospi_12_64 - x11 * cospi_20_64 ; //<S2SV> s12 = - x12 * cospi_28_64 + x13 * cospi_4_64 ; //<S2SV> s13 = x12 * cospi_4_64 + x13 * cospi_28_64 ; //<S2SV> s14 = - x14 * cospi_12_64 + x15 * cospi_20_64 ; //<S2SV> s15 = x14 * cospi_20_64 + x15 * cospi_12_64 ; //<S2SV> x0 = s0 + s4 ; //<S2SV> x1 = s1 + s5 ; //<S2SV> x2 = s2 + s6 ; //<S2SV> x3 = s3 + s7 ; //<S2SV> x4 = s0 - s4 ; //<S2SV> x5 = s1 - s5 ; //<S2SV> x6 = s2 - s6 ; //<S2SV> x7 = s3 - s7 ; //<S2SV> x8 = fdct_round_shift ( s8 + s12 ) ; //<S2SV> x9 = fdct_round_shift ( s9 + s13 ) ; //<S2SV> x10 = fdct_round_shift ( s10 + s14 ) ; //<S2SV> x11 = fdct_round_shift ( s11 + s15 ) ; //<S2SV> x12 = fdct_round_shift ( s8 - s12 ) ; //<S2SV> x13 = fdct_round_shift ( s9 - s13 ) ; //<S2SV> x14 = fdct_round_shift ( s10 - s14 ) ; //<S2SV> x15 = fdct_round_shift ( s11 - s15 ) ; //<S2SV> s0 = x0 ; //<S2SV> s1 = x1 ; //<S2SV> s2 = x2 ; //<S2SV> s3 = x3 ; //<S2SV> s4 = x4 * cospi_8_64 + x5 * cospi_24_64 ; //<S2SV> s5 = x4 * cospi_24_64 - x5 * cospi_8_64 ; //<S2SV> s6 = - x6 * cospi_24_64 + x7 * cospi_8_64 ; //<S2SV> s7 = x6 * cospi_8_64 + x7 * cospi_24_64 ; //<S2SV> s8 = x8 ; //<S2SV> s9 = x9 ; //<S2SV> s10 = x10 ; //<S2SV> s11 = x11 ; //<S2SV> s12 = x12 * cospi_8_64 + x13 * cospi_24_64 ; //<S2SV> s13 = x12 * cospi_24_64 - x13 * cospi_8_64 ; //<S2SV> s14 = - x14 * cospi_24_64 + x15 * cospi_8_64 ; //<S2SV> s15 = x14 * cospi_8_64 + x15 * cospi_24_64 ; //<S2SV> x0 = s0 + s2 ; //<S2SV> x1 = s1 + s3 ; //<S2SV> x2 = s0 - s2 ; //<S2SV> x3 = s1 - s3 ; //<S2SV> x4 = fdct_round_shift ( s4 + s6 ) ; //<S2SV> x5 = fdct_round_shift ( s5 + s7 ) ; //<S2SV> x6 = fdct_round_shift ( s4 - s6 ) ; //<S2SV> x7 = fdct_round_shift ( s5 - s7 ) ; //<S2SV> x8 = s8 + s10 ; //<S2SV> x9 = s9 + s11 ; //<S2SV> x10 = s8 - s10 ; //<S2SV> x11 = s9 - s11 ; //<S2SV> x12 = fdct_round_shift ( s12 + s14 ) ; //<S2SV> x13 = fdct_round_shift ( s13 + s15 ) ; //<S2SV> x14 = fdct_round_shift ( s12 - s14 ) ; //<S2SV> x15 = fdct_round_shift ( s13 - s15 ) ; //<S2SV> s2 = ( - cospi_16_64 ) * ( x2 + x3 ) ; //<S2SV> s3 = cospi_16_64 * ( x2 - x3 ) ; //<S2SV> s6 = cospi_16_64 * ( x6 + x7 ) ; //<S2SV> s7 = cospi_16_64 * ( - x6 + x7 ) ; //<S2SV> s10 = cospi_16_64 * ( x10 + x11 ) ; //<S2SV> s11 = cospi_16_64 * ( - x10 + x11 ) ; //<S2SV> s14 = ( - cospi_16_64 ) * ( x14 + x15 ) ; //<S2SV> s15 = cospi_16_64 * ( x14 - x15 ) ; //<S2SV> x2 = fdct_round_shift ( s2 ) ; //<S2SV> x3 = fdct_round_shift ( s3 ) ; //<S2SV> x6 = fdct_round_shift ( s6 ) ; //<S2SV> x7 = fdct_round_shift ( s7 ) ; //<S2SV> x10 = fdct_round_shift ( s10 ) ; //<S2SV> x11 = fdct_round_shift ( s11 ) ; //<S2SV> x14 = fdct_round_shift ( s14 ) ; //<S2SV> x15 = fdct_round_shift ( s15 ) ; //<S2SV> output [ 0 ] = x0 ; //<S2SV> output [ 1 ] = - x8 ; //<S2SV> output [ 2 ] = x12 ; //<S2SV> output [ 3 ] = - x4 ; //<S2SV> output [ 4 ] = x6 ; //<S2SV> output [ 5 ] = x14 ; //<S2SV> output [ 6 ] = x10 ; //<S2SV> output [ 7 ] = x2 ; //<S2SV> output [ 8 ] = x3 ; //<S2SV> output [ 9 ] = x11 ; //<S2SV> output [ 10 ] = x15 ; //<S2SV> output [ 11 ] = x7 ; //<S2SV> output [ 12 ] = x5 ; //<S2SV> output [ 13 ] = - x13 ; //<S2SV> output [ 14 ] = x9 ; //<S2SV> output [ 15 ] = - x1 ; //<S2SV> } //<S2SV> 