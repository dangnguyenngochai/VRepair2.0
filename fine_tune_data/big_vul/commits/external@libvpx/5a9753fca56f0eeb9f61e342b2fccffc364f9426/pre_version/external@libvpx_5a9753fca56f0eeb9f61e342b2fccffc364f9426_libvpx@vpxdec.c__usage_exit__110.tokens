void usage_exit ( ) { //<S2SV> int i ; //<S2SV> fprintf ( stderr , "Usage:<S2SV_blank>%s<S2SV_blank><options><S2SV_blank>filename\\n\\n" //<S2SV> "Options:\\n" , exec_name ) ; //<S2SV> arg_show_usage ( stderr , all_args ) ; //<S2SV> # if CONFIG_VP8_DECODER //<S2SV> fprintf ( stderr , "\\nVP8<S2SV_blank>Postprocessing<S2SV_blank>Options:\\n" ) ; //<S2SV> arg_show_usage ( stderr , vp8_pp_args ) ; //<S2SV> # endif //<S2SV> fprintf ( stderr , //<S2SV> "\\nOutput<S2SV_blank>File<S2SV_blank>Patterns:\\n\\n" //<S2SV> "<S2SV_blank><S2SV_blank>The<S2SV_blank>-o<S2SV_blank>argument<S2SV_blank>specifies<S2SV_blank>the<S2SV_blank>name<S2SV_blank>of<S2SV_blank>the<S2SV_blank>file(s)<S2SV_blank>to<S2SV_blank>" //<S2SV> "write<S2SV_blank>to.<S2SV_blank>If<S2SV_blank>the\\n<S2SV_blank><S2SV_blank>argument<S2SV_blank>does<S2SV_blank>not<S2SV_blank>include<S2SV_blank>any<S2SV_blank>escape<S2SV_blank>" //<S2SV> "characters,<S2SV_blank>the<S2SV_blank>output<S2SV_blank>will<S2SV_blank>be\\n<S2SV_blank><S2SV_blank>written<S2SV_blank>to<S2SV_blank>a<S2SV_blank>single<S2SV_blank>file.<S2SV_blank>" //<S2SV> "Otherwise,<S2SV_blank>the<S2SV_blank>filename<S2SV_blank>will<S2SV_blank>be<S2SV_blank>calculated<S2SV_blank>by\\n<S2SV_blank><S2SV_blank>expanding<S2SV_blank>" //<S2SV> "the<S2SV_blank>following<S2SV_blank>escape<S2SV_blank>characters:\\n" ) ; //<S2SV> fprintf ( stderr , //<S2SV> "\\n\\t%%w<S2SV_blank><S2SV_blank><S2SV_blank>-<S2SV_blank>Frame<S2SV_blank>width" //<S2SV> "\\n\\t%%h<S2SV_blank><S2SV_blank><S2SV_blank>-<S2SV_blank>Frame<S2SV_blank>height" //<S2SV> "\\n\\t%%<n><S2SV_blank>-<S2SV_blank>Frame<S2SV_blank>number,<S2SV_blank>zero<S2SV_blank>padded<S2SV_blank>to<S2SV_blank><n><S2SV_blank>places<S2SV_blank>(1..9)" //<S2SV> "\\n\\n<S2SV_blank><S2SV_blank>Pattern<S2SV_blank>arguments<S2SV_blank>are<S2SV_blank>only<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>conjunction<S2SV_blank>" //<S2SV> "with<S2SV_blank>the<S2SV_blank>--yv12<S2SV_blank>and\\n<S2SV_blank><S2SV_blank>--i420<S2SV_blank>options.<S2SV_blank>If<S2SV_blank>the<S2SV_blank>-o<S2SV_blank>option<S2SV_blank>is<S2SV_blank>" //<S2SV> "not<S2SV_blank>specified,<S2SV_blank>the<S2SV_blank>output<S2SV_blank>will<S2SV_blank>be\\n<S2SV_blank><S2SV_blank>directed<S2SV_blank>to<S2SV_blank>stdout.\\n" //<S2SV> ) ; //<S2SV> fprintf ( stderr , "\\nIncluded<S2SV_blank>decoders:\\n\\n" ) ; //<S2SV> for ( i = 0 ; i < get_vpx_decoder_count ( ) ; ++ i ) { //<S2SV> const VpxInterface * const decoder = get_vpx_decoder_by_index ( i ) ; //<S2SV> fprintf ( stderr , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-6s<S2SV_blank>-<S2SV_blank>%s\\n" , //<S2SV> decoder -> name , vpx_codec_iface_name ( decoder -> interface ( ) ) ) ; //<S2SV> } //<S2SV> exit ( EXIT_FAILURE ) ; //<S2SV> } //<S2SV> 