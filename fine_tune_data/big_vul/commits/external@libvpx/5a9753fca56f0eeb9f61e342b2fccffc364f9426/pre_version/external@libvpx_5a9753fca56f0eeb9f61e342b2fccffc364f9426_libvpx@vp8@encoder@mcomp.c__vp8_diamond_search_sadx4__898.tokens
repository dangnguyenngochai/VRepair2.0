int vp8_diamond_search_sadx4 //<S2SV> ( //<S2SV> MACROBLOCK * x , //<S2SV> BLOCK * b , //<S2SV> BLOCKD * d , //<S2SV> int_mv * ref_mv , //<S2SV> int_mv * best_mv , //<S2SV> int search_param , //<S2SV> int sad_per_bit , //<S2SV> int * num00 , //<S2SV> vp8_variance_fn_ptr_t * fn_ptr , //<S2SV> int * mvcost [ 2 ] , //<S2SV> int_mv * center_mv //<S2SV> ) //<S2SV> { //<S2SV> int i , j , step ; //<S2SV> unsigned char * what = ( * ( b -> base_src ) + b -> src ) ; //<S2SV> int what_stride = b -> src_stride ; //<S2SV> unsigned char * in_what ; //<S2SV> int pre_stride = x -> e_mbd . pre . y_stride ; //<S2SV> unsigned char * base_pre = x -> e_mbd . pre . y_buffer ; //<S2SV> int in_what_stride = pre_stride ; //<S2SV> unsigned char * best_address ; //<S2SV> int tot_steps ; //<S2SV> int_mv this_mv ; //<S2SV> unsigned int bestsad ; //<S2SV> unsigned int thissad ; //<S2SV> int best_site = 0 ; //<S2SV> int last_site = 0 ; //<S2SV> int ref_row ; //<S2SV> int ref_col ; //<S2SV> int this_row_offset ; //<S2SV> int this_col_offset ; //<S2SV> search_site * ss ; //<S2SV> unsigned char * check_here ; //<S2SV> int * mvsadcost [ 2 ] ; //<S2SV> int_mv fcenter_mv ; //<S2SV> mvsadcost [ 0 ] = x -> mvsadcost [ 0 ] ; //<S2SV> mvsadcost [ 1 ] = x -> mvsadcost [ 1 ] ; //<S2SV> fcenter_mv . as_mv . row = center_mv -> as_mv . row >> 3 ; //<S2SV> fcenter_mv . as_mv . col = center_mv -> as_mv . col >> 3 ; //<S2SV> vp8_clamp_mv ( ref_mv , x -> mv_col_min , x -> mv_col_max , x -> mv_row_min , x -> mv_row_max ) ; //<S2SV> ref_row = ref_mv -> as_mv . row ; //<S2SV> ref_col = ref_mv -> as_mv . col ; //<S2SV> * num00 = 0 ; //<S2SV> best_mv -> as_mv . row = ref_row ; //<S2SV> best_mv -> as_mv . col = ref_col ; //<S2SV> in_what = ( unsigned char * ) ( base_pre + d -> offset + ( ref_row * pre_stride ) + ref_col ) ; //<S2SV> best_address = in_what ; //<S2SV> bestsad = fn_ptr -> sdf ( what , what_stride , in_what , in_what_stride , UINT_MAX ) //<S2SV> + mvsad_err_cost ( best_mv , & fcenter_mv , mvsadcost , sad_per_bit ) ; //<S2SV> ss = & x -> ss [ search_param * x -> searches_per_step ] ; //<S2SV> tot_steps = ( x -> ss_count / x -> searches_per_step ) - search_param ; //<S2SV> i = 1 ; //<S2SV> for ( step = 0 ; step < tot_steps ; step ++ ) //<S2SV> { //<S2SV> int all_in = 1 , t ; //<S2SV> all_in &= ( ( best_mv -> as_mv . row + ss [ i ] . mv . row ) > x -> mv_row_min ) ; //<S2SV> all_in &= ( ( best_mv -> as_mv . row + ss [ i + 1 ] . mv . row ) < x -> mv_row_max ) ; //<S2SV> all_in &= ( ( best_mv -> as_mv . col + ss [ i + 2 ] . mv . col ) > x -> mv_col_min ) ; //<S2SV> all_in &= ( ( best_mv -> as_mv . col + ss [ i + 3 ] . mv . col ) < x -> mv_col_max ) ; //<S2SV> if ( all_in ) //<S2SV> { //<S2SV> unsigned int sad_array [ 4 ] ; //<S2SV> for ( j = 0 ; j < x -> searches_per_step ; j += 4 ) //<S2SV> { //<S2SV> const unsigned char * block_offset [ 4 ] ; //<S2SV> for ( t = 0 ; t < 4 ; t ++ ) //<S2SV> block_offset [ t ] = ss [ i + t ] . offset + best_address ; //<S2SV> fn_ptr -> sdx4df ( what , what_stride , block_offset , in_what_stride , sad_array ) ; //<S2SV> for ( t = 0 ; t < 4 ; t ++ , i ++ ) //<S2SV> { //<S2SV> if ( sad_array [ t ] < bestsad ) //<S2SV> { //<S2SV> this_mv . as_mv . row = best_mv -> as_mv . row + ss [ i ] . mv . row ; //<S2SV> this_mv . as_mv . col = best_mv -> as_mv . col + ss [ i ] . mv . col ; //<S2SV> sad_array [ t ] += mvsad_err_cost ( & this_mv , & fcenter_mv , //<S2SV> mvsadcost , sad_per_bit ) ; //<S2SV> if ( sad_array [ t ] < bestsad ) //<S2SV> { //<S2SV> bestsad = sad_array [ t ] ; //<S2SV> best_site = i ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> for ( j = 0 ; j < x -> searches_per_step ; j ++ ) //<S2SV> { //<S2SV> this_row_offset = best_mv -> as_mv . row + ss [ i ] . mv . row ; //<S2SV> this_col_offset = best_mv -> as_mv . col + ss [ i ] . mv . col ; //<S2SV> if ( ( this_col_offset > x -> mv_col_min ) && ( this_col_offset < x -> mv_col_max ) && //<S2SV> ( this_row_offset > x -> mv_row_min ) && ( this_row_offset < x -> mv_row_max ) ) //<S2SV> { //<S2SV> check_here = ss [ i ] . offset + best_address ; //<S2SV> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> this_mv . as_mv . row = this_row_offset ; //<S2SV> this_mv . as_mv . col = this_col_offset ; //<S2SV> thissad += mvsad_err_cost ( & this_mv , & fcenter_mv , //<S2SV> mvsadcost , sad_per_bit ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> bestsad = thissad ; //<S2SV> best_site = i ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> i ++ ; //<S2SV> } //<S2SV> } //<S2SV> if ( best_site != last_site ) //<S2SV> { //<S2SV> best_mv -> as_mv . row += ss [ best_site ] . mv . row ; //<S2SV> best_mv -> as_mv . col += ss [ best_site ] . mv . col ; //<S2SV> best_address += ss [ best_site ] . offset ; //<S2SV> last_site = best_site ; //<S2SV> } //<S2SV> else if ( best_address == in_what ) //<S2SV> ( * num00 ) ++ ; //<S2SV> } //<S2SV> this_mv . as_mv . row = best_mv -> as_mv . row * 8 ; //<S2SV> this_mv . as_mv . col = best_mv -> as_mv . col * 8 ; //<S2SV> return fn_ptr -> vf ( what , what_stride , best_address , in_what_stride , & thissad ) //<S2SV> + mv_err_cost ( & this_mv , center_mv , mvcost , x -> errorperbit ) ; //<S2SV> } //<S2SV> 