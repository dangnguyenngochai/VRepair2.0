static void fadst4 ( const int16_t * input , int16_t * output ) { //<S2SV> int x0 , x1 , x2 , x3 ; //<S2SV> int s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; //<S2SV> x0 = input [ 0 ] ; //<S2SV> x1 = input [ 1 ] ; //<S2SV> x2 = input [ 2 ] ; //<S2SV> x3 = input [ 3 ] ; //<S2SV> if ( ! ( x0 | x1 | x2 | x3 ) ) { //<S2SV> output [ 0 ] = output [ 1 ] = output [ 2 ] = output [ 3 ] = 0 ; //<S2SV> return ; //<S2SV> } //<S2SV> s0 = sinpi_1_9 * x0 ; //<S2SV> s1 = sinpi_4_9 * x0 ; //<S2SV> s2 = sinpi_2_9 * x1 ; //<S2SV> s3 = sinpi_1_9 * x1 ; //<S2SV> s4 = sinpi_3_9 * x2 ; //<S2SV> s5 = sinpi_4_9 * x3 ; //<S2SV> s6 = sinpi_2_9 * x3 ; //<S2SV> s7 = x0 + x1 - x3 ; //<S2SV> x0 = s0 + s2 + s5 ; //<S2SV> x1 = sinpi_3_9 * s7 ; //<S2SV> x2 = s1 - s3 + s6 ; //<S2SV> x3 = s4 ; //<S2SV> s0 = x0 + x3 ; //<S2SV> s1 = x1 ; //<S2SV> s2 = x2 - x3 ; //<S2SV> s3 = x2 - x0 + x3 ; //<S2SV> output [ 0 ] = fdct_round_shift ( s0 ) ; //<S2SV> output [ 1 ] = fdct_round_shift ( s1 ) ; //<S2SV> output [ 2 ] = fdct_round_shift ( s2 ) ; //<S2SV> output [ 3 ] = fdct_round_shift ( s3 ) ; //<S2SV> } //<S2SV> 