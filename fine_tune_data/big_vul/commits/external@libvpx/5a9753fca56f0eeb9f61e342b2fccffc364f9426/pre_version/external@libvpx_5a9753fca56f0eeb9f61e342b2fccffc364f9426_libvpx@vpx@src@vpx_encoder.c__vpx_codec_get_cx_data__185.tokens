const vpx_codec_cx_pkt_t * vpx_codec_get_cx_data ( vpx_codec_ctx_t * ctx , //<S2SV> vpx_codec_iter_t * iter ) { //<S2SV> const vpx_codec_cx_pkt_t * pkt = NULL ; //<S2SV> if ( ctx ) { //<S2SV> if ( ! iter ) //<S2SV> ctx -> err = VPX_CODEC_INVALID_PARAM ; //<S2SV> else if ( ! ctx -> iface || ! ctx -> priv ) //<S2SV> ctx -> err = VPX_CODEC_ERROR ; //<S2SV> else if ( ! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) //<S2SV> ctx -> err = VPX_CODEC_INCAPABLE ; //<S2SV> else //<S2SV> pkt = ctx -> iface -> enc . get_cx_data ( ctx -> priv -> alg_priv , iter ) ; //<S2SV> } //<S2SV> if ( pkt && pkt -> kind == VPX_CODEC_CX_FRAME_PKT ) { //<S2SV> vpx_codec_priv_t * const priv = ctx -> priv ; //<S2SV> char * const dst_buf = ( char * ) priv -> enc . cx_data_dst_buf . buf ; //<S2SV> if ( dst_buf && //<S2SV> pkt -> data . raw . buf != dst_buf && //<S2SV> pkt -> data . raw . sz + priv -> enc . cx_data_pad_before + //<S2SV> priv -> enc . cx_data_pad_after <= priv -> enc . cx_data_dst_buf . sz ) { //<S2SV> vpx_codec_cx_pkt_t * modified_pkt = & priv -> enc . cx_data_pkt ; //<S2SV> memcpy ( dst_buf + priv -> enc . cx_data_pad_before , pkt -> data . raw . buf , //<S2SV> pkt -> data . raw . sz ) ; //<S2SV> * modified_pkt = * pkt ; //<S2SV> modified_pkt -> data . raw . buf = dst_buf ; //<S2SV> modified_pkt -> data . raw . sz += priv -> enc . cx_data_pad_before + //<S2SV> priv -> enc . cx_data_pad_after ; //<S2SV> pkt = modified_pkt ; //<S2SV> } //<S2SV> if ( dst_buf == pkt -> data . raw . buf ) { //<S2SV> priv -> enc . cx_data_dst_buf . buf = dst_buf + pkt -> data . raw . sz ; //<S2SV> priv -> enc . cx_data_dst_buf . sz -= pkt -> data . raw . sz ; //<S2SV> } //<S2SV> } //<S2SV> return pkt ; //<S2SV> } //<S2SV> 