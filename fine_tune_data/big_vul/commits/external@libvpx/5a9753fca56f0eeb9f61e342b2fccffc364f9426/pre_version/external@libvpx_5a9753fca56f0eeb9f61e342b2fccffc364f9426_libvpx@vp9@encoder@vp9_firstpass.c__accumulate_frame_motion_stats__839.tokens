static void accumulate_frame_motion_stats ( //<S2SV> FIRSTPASS_STATS * this_frame , //<S2SV> double * this_frame_mv_in_out , //<S2SV> double * mv_in_out_accumulator , //<S2SV> double * abs_mv_in_out_accumulator , //<S2SV> double * mv_ratio_accumulator ) { //<S2SV> double motion_pct ; //<S2SV> motion_pct = this_frame -> pcnt_motion ; //<S2SV> * this_frame_mv_in_out = this_frame -> mv_in_out_count * motion_pct ; //<S2SV> * mv_in_out_accumulator += this_frame -> mv_in_out_count * motion_pct ; //<S2SV> * abs_mv_in_out_accumulator += fabs ( this_frame -> mv_in_out_count * motion_pct ) ; //<S2SV> if ( motion_pct > 0.05 ) { //<S2SV> const double this_frame_mvr_ratio = fabs ( this_frame -> mvr_abs ) / //<S2SV> DOUBLE_DIVIDE_CHECK ( fabs ( this_frame -> MVr ) ) ; //<S2SV> const double this_frame_mvc_ratio = fabs ( this_frame -> mvc_abs ) / //<S2SV> DOUBLE_DIVIDE_CHECK ( fabs ( this_frame -> MVc ) ) ; //<S2SV> * mv_ratio_accumulator += ( this_frame_mvr_ratio < this_frame -> mvr_abs ) //<S2SV> ? ( this_frame_mvr_ratio * motion_pct ) //<S2SV> : this_frame -> mvr_abs * motion_pct ; //<S2SV> * mv_ratio_accumulator += ( this_frame_mvc_ratio < this_frame -> mvc_abs ) //<S2SV> ? ( this_frame_mvc_ratio * motion_pct ) //<S2SV> : this_frame -> mvc_abs * motion_pct ; //<S2SV> } //<S2SV> } //<S2SV> 