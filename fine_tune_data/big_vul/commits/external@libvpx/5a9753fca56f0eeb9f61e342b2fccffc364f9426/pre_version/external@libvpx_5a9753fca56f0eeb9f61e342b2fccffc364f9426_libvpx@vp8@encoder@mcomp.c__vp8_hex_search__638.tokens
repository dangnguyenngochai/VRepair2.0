int vp8_hex_search //<S2SV> ( //<S2SV> MACROBLOCK * x , //<S2SV> BLOCK * b , //<S2SV> BLOCKD * d , //<S2SV> int_mv * ref_mv , //<S2SV> int_mv * best_mv , //<S2SV> int search_param , //<S2SV> int sad_per_bit , //<S2SV> const vp8_variance_fn_ptr_t * vfp , //<S2SV> int * mvsadcost [ 2 ] , //<S2SV> int * mvcost [ 2 ] , //<S2SV> int_mv * center_mv //<S2SV> ) //<S2SV> { //<S2SV> MV hex [ 6 ] = { { - 1 , - 2 } , { 1 , - 2 } , { 2 , 0 } , { 1 , 2 } , { - 1 , 2 } , { - 2 , 0 } } ; //<S2SV> MV neighbors [ 4 ] = { { 0 , - 1 } , { - 1 , 0 } , { 1 , 0 } , { 0 , 1 } } ; //<S2SV> int i , j ; //<S2SV> unsigned char * what = ( * ( b -> base_src ) + b -> src ) ; //<S2SV> int what_stride = b -> src_stride ; //<S2SV> int pre_stride = x -> e_mbd . pre . y_stride ; //<S2SV> unsigned char * base_pre = x -> e_mbd . pre . y_buffer ; //<S2SV> int in_what_stride = pre_stride ; //<S2SV> int br , bc ; //<S2SV> int_mv this_mv ; //<S2SV> unsigned int bestsad ; //<S2SV> unsigned int thissad ; //<S2SV> unsigned char * base_offset ; //<S2SV> unsigned char * this_offset ; //<S2SV> int k = - 1 ; //<S2SV> int all_in ; //<S2SV> int best_site = - 1 ; //<S2SV> int hex_range = 127 ; //<S2SV> int dia_range = 8 ; //<S2SV> int_mv fcenter_mv ; //<S2SV> fcenter_mv . as_mv . row = center_mv -> as_mv . row >> 3 ; //<S2SV> fcenter_mv . as_mv . col = center_mv -> as_mv . col >> 3 ; //<S2SV> vp8_clamp_mv ( ref_mv , x -> mv_col_min , x -> mv_col_max , x -> mv_row_min , x -> mv_row_max ) ; //<S2SV> br = ref_mv -> as_mv . row ; //<S2SV> bc = ref_mv -> as_mv . col ; //<S2SV> base_offset = ( unsigned char * ) ( base_pre + d -> offset ) ; //<S2SV> this_offset = base_offset + ( br * ( pre_stride ) ) + bc ; //<S2SV> this_mv . as_mv . row = br ; //<S2SV> this_mv . as_mv . col = bc ; //<S2SV> bestsad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , UINT_MAX ) //<S2SV> + mvsad_err_cost ( & this_mv , & fcenter_mv , mvsadcost , sad_per_bit ) ; //<S2SV> # if CONFIG_MULTI_RES_ENCODING //<S2SV> if ( search_param >= 6 ) goto cal_neighbors ; //<S2SV> else if ( search_param >= 5 ) hex_range = 4 ; //<S2SV> else if ( search_param >= 4 ) hex_range = 6 ; //<S2SV> else if ( search_param >= 3 ) hex_range = 15 ; //<S2SV> else if ( search_param >= 2 ) hex_range = 31 ; //<S2SV> else if ( search_param >= 1 ) hex_range = 63 ; //<S2SV> dia_range = 8 ; //<S2SV> # endif //<S2SV> CHECK_BOUNDS ( 2 ) //<S2SV> if ( all_in ) //<S2SV> { //<S2SV> for ( i = 0 ; i < 6 ; i ++ ) //<S2SV> { //<S2SV> this_mv . as_mv . row = br + hex [ i ] . row ; //<S2SV> this_mv . as_mv . col = bc + hex [ i ] . col ; //<S2SV> this_offset = base_offset + ( this_mv . as_mv . row * in_what_stride ) + this_mv . as_mv . col ; //<S2SV> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; //<S2SV> CHECK_BETTER //<S2SV> } //<S2SV> } else //<S2SV> { //<S2SV> for ( i = 0 ; i < 6 ; i ++ ) //<S2SV> { //<S2SV> this_mv . as_mv . row = br + hex [ i ] . row ; //<S2SV> this_mv . as_mv . col = bc + hex [ i ] . col ; //<S2SV> CHECK_POINT //<S2SV> this_offset = base_offset + ( this_mv . as_mv . row * in_what_stride ) + this_mv . as_mv . col ; //<S2SV> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; //<S2SV> CHECK_BETTER //<S2SV> } //<S2SV> } //<S2SV> if ( best_site == - 1 ) //<S2SV> goto cal_neighbors ; //<S2SV> else //<S2SV> { //<S2SV> br += hex [ best_site ] . row ; //<S2SV> bc += hex [ best_site ] . col ; //<S2SV> k = best_site ; //<S2SV> } //<S2SV> for ( j = 1 ; j < hex_range ; j ++ ) //<S2SV> { //<S2SV> best_site = - 1 ; //<S2SV> CHECK_BOUNDS ( 2 ) //<S2SV> if ( all_in ) //<S2SV> { //<S2SV> for ( i = 0 ; i < 3 ; i ++ ) //<S2SV> { //<S2SV> this_mv . as_mv . row = br + next_chkpts [ k ] [ i ] . row ; //<S2SV> this_mv . as_mv . col = bc + next_chkpts [ k ] [ i ] . col ; //<S2SV> this_offset = base_offset + ( this_mv . as_mv . row * ( in_what_stride ) ) + this_mv . as_mv . col ; //<S2SV> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; //<S2SV> CHECK_BETTER //<S2SV> } //<S2SV> } else //<S2SV> { //<S2SV> for ( i = 0 ; i < 3 ; i ++ ) //<S2SV> { //<S2SV> this_mv . as_mv . row = br + next_chkpts [ k ] [ i ] . row ; //<S2SV> this_mv . as_mv . col = bc + next_chkpts [ k ] [ i ] . col ; //<S2SV> CHECK_POINT //<S2SV> this_offset = base_offset + ( this_mv . as_mv . row * ( in_what_stride ) ) + this_mv . as_mv . col ; //<S2SV> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; //<S2SV> CHECK_BETTER //<S2SV> } //<S2SV> } //<S2SV> if ( best_site == - 1 ) //<S2SV> break ; //<S2SV> else //<S2SV> { //<S2SV> br += next_chkpts [ k ] [ best_site ] . row ; //<S2SV> bc += next_chkpts [ k ] [ best_site ] . col ; //<S2SV> k += 5 + best_site ; //<S2SV> if ( k >= 12 ) k -= 12 ; //<S2SV> else if ( k >= 6 ) k -= 6 ; //<S2SV> } //<S2SV> } //<S2SV> cal_neighbors : //<S2SV> for ( j = 0 ; j < dia_range ; j ++ ) //<S2SV> { //<S2SV> best_site = - 1 ; //<S2SV> CHECK_BOUNDS ( 1 ) //<S2SV> if ( all_in ) //<S2SV> { //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> { //<S2SV> this_mv . as_mv . row = br + neighbors [ i ] . row ; //<S2SV> this_mv . as_mv . col = bc + neighbors [ i ] . col ; //<S2SV> this_offset = base_offset + ( this_mv . as_mv . row * ( in_what_stride ) ) + this_mv . as_mv . col ; //<S2SV> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; //<S2SV> CHECK_BETTER //<S2SV> } //<S2SV> } else //<S2SV> { //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> { //<S2SV> this_mv . as_mv . row = br + neighbors [ i ] . row ; //<S2SV> this_mv . as_mv . col = bc + neighbors [ i ] . col ; //<S2SV> CHECK_POINT //<S2SV> this_offset = base_offset + ( this_mv . as_mv . row * ( in_what_stride ) ) + this_mv . as_mv . col ; //<S2SV> thissad = vfp -> sdf ( what , what_stride , this_offset , in_what_stride , bestsad ) ; //<S2SV> CHECK_BETTER //<S2SV> } //<S2SV> } //<S2SV> if ( best_site == - 1 ) //<S2SV> break ; //<S2SV> else //<S2SV> { //<S2SV> br += neighbors [ best_site ] . row ; //<S2SV> bc += neighbors [ best_site ] . col ; //<S2SV> } //<S2SV> } //<S2SV> best_mv -> as_mv . row = br ; //<S2SV> best_mv -> as_mv . col = bc ; //<S2SV> return bestsad ; //<S2SV> } //<S2SV> 