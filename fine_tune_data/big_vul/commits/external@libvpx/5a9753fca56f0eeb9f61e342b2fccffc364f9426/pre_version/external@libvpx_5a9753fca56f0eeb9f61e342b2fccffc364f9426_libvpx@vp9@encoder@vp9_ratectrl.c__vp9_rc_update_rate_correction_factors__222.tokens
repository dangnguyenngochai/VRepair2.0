void vp9_rc_update_rate_correction_factors ( VP9_COMP * cpi , int damp_var ) { //<S2SV> const VP9_COMMON * const cm = & cpi -> common ; //<S2SV> int correction_factor = 100 ; //<S2SV> double rate_correction_factor = get_rate_correction_factor ( cpi ) ; //<S2SV> double adjustment_limit ; //<S2SV> int projected_size_based_on_q = 0 ; //<S2SV> vp9_clear_system_state ( ) ; //<S2SV> projected_size_based_on_q = estimate_bits_at_q ( cm -> frame_type , //<S2SV> cm -> base_qindex , cm -> MBs , //<S2SV> rate_correction_factor ) ; //<S2SV> if ( projected_size_based_on_q > 0 ) //<S2SV> correction_factor = ( 100 * cpi -> rc . projected_frame_size ) / //<S2SV> projected_size_based_on_q ; //<S2SV> switch ( damp_var ) { //<S2SV> case 0 : //<S2SV> adjustment_limit = 0.75 ; //<S2SV> break ; //<S2SV> case 1 : //<S2SV> adjustment_limit = 0.375 ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> default : //<S2SV> adjustment_limit = 0.25 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( correction_factor > 102 ) { //<S2SV> correction_factor = ( int ) ( 100 + ( ( correction_factor - 100 ) * //<S2SV> adjustment_limit ) ) ; //<S2SV> rate_correction_factor = ( rate_correction_factor * correction_factor ) / 100 ; //<S2SV> if ( rate_correction_factor > MAX_BPB_FACTOR ) //<S2SV> rate_correction_factor = MAX_BPB_FACTOR ; //<S2SV> } else if ( correction_factor < 99 ) { //<S2SV> correction_factor = ( int ) ( 100 - ( ( 100 - correction_factor ) * //<S2SV> adjustment_limit ) ) ; //<S2SV> rate_correction_factor = ( rate_correction_factor * correction_factor ) / 100 ; //<S2SV> if ( rate_correction_factor < MIN_BPB_FACTOR ) //<S2SV> rate_correction_factor = MIN_BPB_FACTOR ; //<S2SV> } //<S2SV> set_rate_correction_factor ( cpi , rate_correction_factor ) ; //<S2SV> } //<S2SV> 