void vp8_copy_mem16x16_c ( //<S2SV> unsigned char * src , //<S2SV> int src_stride , //<S2SV> unsigned char * dst , //<S2SV> int dst_stride ) //<S2SV> { //<S2SV> int r ; //<S2SV> for ( r = 0 ; r < 16 ; r ++ ) //<S2SV> { //<S2SV> # if ! ( CONFIG_FAST_UNALIGNED ) //<S2SV> dst [ 0 ] = src [ 0 ] ; //<S2SV> dst [ 1 ] = src [ 1 ] ; //<S2SV> dst [ 2 ] = src [ 2 ] ; //<S2SV> dst [ 3 ] = src [ 3 ] ; //<S2SV> dst [ 4 ] = src [ 4 ] ; //<S2SV> dst [ 5 ] = src [ 5 ] ; //<S2SV> dst [ 6 ] = src [ 6 ] ; //<S2SV> dst [ 7 ] = src [ 7 ] ; //<S2SV> dst [ 8 ] = src [ 8 ] ; //<S2SV> dst [ 9 ] = src [ 9 ] ; //<S2SV> dst [ 10 ] = src [ 10 ] ; //<S2SV> dst [ 11 ] = src [ 11 ] ; //<S2SV> dst [ 12 ] = src [ 12 ] ; //<S2SV> dst [ 13 ] = src [ 13 ] ; //<S2SV> dst [ 14 ] = src [ 14 ] ; //<S2SV> dst [ 15 ] = src [ 15 ] ; //<S2SV> # else //<S2SV> ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; //<S2SV> ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; //<S2SV> ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; //<S2SV> ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32_t * ) src ) [ 3 ] ; //<S2SV> # endif //<S2SV> src += src_stride ; //<S2SV> dst += dst_stride ; //<S2SV> } //<S2SV> } //<S2SV> 