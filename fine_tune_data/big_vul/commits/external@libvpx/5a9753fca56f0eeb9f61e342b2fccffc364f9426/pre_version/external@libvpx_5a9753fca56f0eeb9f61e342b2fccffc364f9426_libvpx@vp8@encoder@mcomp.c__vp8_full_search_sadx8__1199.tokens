int vp8_full_search_sadx8 ( MACROBLOCK * x , BLOCK * b , BLOCKD * d , int_mv * ref_mv , //<S2SV> int sad_per_bit , int distance , //<S2SV> vp8_variance_fn_ptr_t * fn_ptr , int * mvcost [ 2 ] , //<S2SV> int_mv * center_mv ) //<S2SV> { //<S2SV> unsigned char * what = ( * ( b -> base_src ) + b -> src ) ; //<S2SV> int what_stride = b -> src_stride ; //<S2SV> int pre_stride = x -> e_mbd . pre . y_stride ; //<S2SV> unsigned char * base_pre = x -> e_mbd . pre . y_buffer ; //<S2SV> unsigned char * in_what ; //<S2SV> int in_what_stride = pre_stride ; //<S2SV> int mv_stride = pre_stride ; //<S2SV> unsigned char * bestaddress ; //<S2SV> int_mv * best_mv = & d -> bmi . mv ; //<S2SV> int_mv this_mv ; //<S2SV> unsigned int bestsad ; //<S2SV> unsigned int thissad ; //<S2SV> int r , c ; //<S2SV> unsigned char * check_here ; //<S2SV> int ref_row = ref_mv -> as_mv . row ; //<S2SV> int ref_col = ref_mv -> as_mv . col ; //<S2SV> int row_min = ref_row - distance ; //<S2SV> int row_max = ref_row + distance ; //<S2SV> int col_min = ref_col - distance ; //<S2SV> int col_max = ref_col + distance ; //<S2SV> DECLARE_ALIGNED_ARRAY ( 16 , unsigned short , sad_array8 , 8 ) ; //<S2SV> unsigned int sad_array [ 3 ] ; //<S2SV> int * mvsadcost [ 2 ] ; //<S2SV> int_mv fcenter_mv ; //<S2SV> mvsadcost [ 0 ] = x -> mvsadcost [ 0 ] ; //<S2SV> mvsadcost [ 1 ] = x -> mvsadcost [ 1 ] ; //<S2SV> fcenter_mv . as_mv . row = center_mv -> as_mv . row >> 3 ; //<S2SV> fcenter_mv . as_mv . col = center_mv -> as_mv . col >> 3 ; //<S2SV> in_what = base_pre + d -> offset ; //<S2SV> bestaddress = in_what + ( ref_row * pre_stride ) + ref_col ; //<S2SV> best_mv -> as_mv . row = ref_row ; //<S2SV> best_mv -> as_mv . col = ref_col ; //<S2SV> bestsad = fn_ptr -> sdf ( what , what_stride , //<S2SV> bestaddress , in_what_stride , UINT_MAX ) //<S2SV> + mvsad_err_cost ( best_mv , & fcenter_mv , mvsadcost , sad_per_bit ) ; //<S2SV> if ( col_min < x -> mv_col_min ) //<S2SV> col_min = x -> mv_col_min ; //<S2SV> if ( col_max > x -> mv_col_max ) //<S2SV> col_max = x -> mv_col_max ; //<S2SV> if ( row_min < x -> mv_row_min ) //<S2SV> row_min = x -> mv_row_min ; //<S2SV> if ( row_max > x -> mv_row_max ) //<S2SV> row_max = x -> mv_row_max ; //<S2SV> for ( r = row_min ; r < row_max ; r ++ ) //<S2SV> { //<S2SV> this_mv . as_mv . row = r ; //<S2SV> check_here = r * mv_stride + in_what + col_min ; //<S2SV> c = col_min ; //<S2SV> while ( ( c + 7 ) < col_max ) //<S2SV> { //<S2SV> int i ; //<S2SV> fn_ptr -> sdx8f ( what , what_stride , check_here , in_what_stride , sad_array8 ) ; //<S2SV> for ( i = 0 ; i < 8 ; i ++ ) //<S2SV> { //<S2SV> thissad = sad_array8 [ i ] ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> this_mv . as_mv . col = c ; //<S2SV> thissad += mvsad_err_cost ( & this_mv , & fcenter_mv , //<S2SV> mvsadcost , sad_per_bit ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> bestsad = thissad ; //<S2SV> best_mv -> as_mv . row = r ; //<S2SV> best_mv -> as_mv . col = c ; //<S2SV> bestaddress = check_here ; //<S2SV> } //<S2SV> } //<S2SV> check_here ++ ; //<S2SV> c ++ ; //<S2SV> } //<S2SV> } //<S2SV> while ( ( c + 2 ) < col_max ) //<S2SV> { //<S2SV> int i ; //<S2SV> fn_ptr -> sdx3f ( what , what_stride , check_here , in_what_stride , sad_array ) ; //<S2SV> for ( i = 0 ; i < 3 ; i ++ ) //<S2SV> { //<S2SV> thissad = sad_array [ i ] ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> this_mv . as_mv . col = c ; //<S2SV> thissad += mvsad_err_cost ( & this_mv , & fcenter_mv , //<S2SV> mvsadcost , sad_per_bit ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> bestsad = thissad ; //<S2SV> best_mv -> as_mv . row = r ; //<S2SV> best_mv -> as_mv . col = c ; //<S2SV> bestaddress = check_here ; //<S2SV> } //<S2SV> } //<S2SV> check_here ++ ; //<S2SV> c ++ ; //<S2SV> } //<S2SV> } //<S2SV> while ( c < col_max ) //<S2SV> { //<S2SV> thissad = fn_ptr -> sdf ( what , what_stride , check_here , in_what_stride , bestsad ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> this_mv . as_mv . col = c ; //<S2SV> thissad += mvsad_err_cost ( & this_mv , & fcenter_mv , //<S2SV> mvsadcost , sad_per_bit ) ; //<S2SV> if ( thissad < bestsad ) //<S2SV> { //<S2SV> bestsad = thissad ; //<S2SV> best_mv -> as_mv . row = r ; //<S2SV> best_mv -> as_mv . col = c ; //<S2SV> bestaddress = check_here ; //<S2SV> } //<S2SV> } //<S2SV> check_here ++ ; //<S2SV> c ++ ; //<S2SV> } //<S2SV> } //<S2SV> this_mv . as_mv . row = best_mv -> as_mv . row * 8 ; //<S2SV> this_mv . as_mv . col = best_mv -> as_mv . col * 8 ; //<S2SV> return fn_ptr -> vf ( what , what_stride , bestaddress , in_what_stride , & thissad ) //<S2SV> + mv_err_cost ( & this_mv , center_mv , mvcost , x -> errorperbit ) ; //<S2SV> } //<S2SV> 