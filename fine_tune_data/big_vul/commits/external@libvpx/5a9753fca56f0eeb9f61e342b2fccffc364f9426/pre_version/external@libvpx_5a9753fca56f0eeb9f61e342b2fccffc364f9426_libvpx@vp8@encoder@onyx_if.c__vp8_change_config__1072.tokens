void vp8_change_config ( VP8_COMP * cpi , VP8_CONFIG * oxcf ) //<S2SV> { //<S2SV> VP8_COMMON * cm = & cpi -> common ; //<S2SV> int last_w , last_h , prev_number_of_layers ; //<S2SV> if ( ! cpi ) //<S2SV> return ; //<S2SV> if ( ! oxcf ) //<S2SV> return ; //<S2SV> # if CONFIG_MULTITHREAD //<S2SV> if ( cpi -> b_lpf_running ) //<S2SV> { //<S2SV> sem_wait ( & cpi -> h_event_end_lpf ) ; //<S2SV> cpi -> b_lpf_running = 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( cm -> version != oxcf -> Version ) //<S2SV> { //<S2SV> cm -> version = oxcf -> Version ; //<S2SV> vp8_setup_version ( cm ) ; //<S2SV> } //<S2SV> last_w = cpi -> oxcf . Width ; //<S2SV> last_h = cpi -> oxcf . Height ; //<S2SV> prev_number_of_layers = cpi -> oxcf . number_of_layers ; //<S2SV> cpi -> oxcf = * oxcf ; //<S2SV> switch ( cpi -> oxcf . Mode ) //<S2SV> { //<S2SV> case MODE_REALTIME : //<S2SV> cpi -> pass = 0 ; //<S2SV> cpi -> compressor_speed = 2 ; //<S2SV> if ( cpi -> oxcf . cpu_used < - 16 ) //<S2SV> { //<S2SV> cpi -> oxcf . cpu_used = - 16 ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . cpu_used > 16 ) //<S2SV> cpi -> oxcf . cpu_used = 16 ; //<S2SV> break ; //<S2SV> case MODE_GOODQUALITY : //<S2SV> cpi -> pass = 0 ; //<S2SV> cpi -> compressor_speed = 1 ; //<S2SV> if ( cpi -> oxcf . cpu_used < - 5 ) //<S2SV> { //<S2SV> cpi -> oxcf . cpu_used = - 5 ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . cpu_used > 5 ) //<S2SV> cpi -> oxcf . cpu_used = 5 ; //<S2SV> break ; //<S2SV> case MODE_BESTQUALITY : //<S2SV> cpi -> pass = 0 ; //<S2SV> cpi -> compressor_speed = 0 ; //<S2SV> break ; //<S2SV> case MODE_FIRSTPASS : //<S2SV> cpi -> pass = 1 ; //<S2SV> cpi -> compressor_speed = 1 ; //<S2SV> break ; //<S2SV> case MODE_SECONDPASS : //<S2SV> cpi -> pass = 2 ; //<S2SV> cpi -> compressor_speed = 1 ; //<S2SV> if ( cpi -> oxcf . cpu_used < - 5 ) //<S2SV> { //<S2SV> cpi -> oxcf . cpu_used = - 5 ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . cpu_used > 5 ) //<S2SV> cpi -> oxcf . cpu_used = 5 ; //<S2SV> break ; //<S2SV> case MODE_SECONDPASS_BEST : //<S2SV> cpi -> pass = 2 ; //<S2SV> cpi -> compressor_speed = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( cpi -> pass == 0 ) //<S2SV> cpi -> auto_worst_q = 1 ; //<S2SV> cpi -> oxcf . worst_allowed_q = q_trans [ oxcf -> worst_allowed_q ] ; //<S2SV> cpi -> oxcf . best_allowed_q = q_trans [ oxcf -> best_allowed_q ] ; //<S2SV> cpi -> oxcf . cq_level = q_trans [ cpi -> oxcf . cq_level ] ; //<S2SV> if ( oxcf -> fixed_q >= 0 ) //<S2SV> { //<S2SV> if ( oxcf -> worst_allowed_q < 0 ) //<S2SV> cpi -> oxcf . fixed_q = q_trans [ 0 ] ; //<S2SV> else //<S2SV> cpi -> oxcf . fixed_q = q_trans [ oxcf -> worst_allowed_q ] ; //<S2SV> if ( oxcf -> alt_q < 0 ) //<S2SV> cpi -> oxcf . alt_q = q_trans [ 0 ] ; //<S2SV> else //<S2SV> cpi -> oxcf . alt_q = q_trans [ oxcf -> alt_q ] ; //<S2SV> if ( oxcf -> key_q < 0 ) //<S2SV> cpi -> oxcf . key_q = q_trans [ 0 ] ; //<S2SV> else //<S2SV> cpi -> oxcf . key_q = q_trans [ oxcf -> key_q ] ; //<S2SV> if ( oxcf -> gold_q < 0 ) //<S2SV> cpi -> oxcf . gold_q = q_trans [ 0 ] ; //<S2SV> else //<S2SV> cpi -> oxcf . gold_q = q_trans [ oxcf -> gold_q ] ; //<S2SV> } //<S2SV> cpi -> baseline_gf_interval = //<S2SV> cpi -> oxcf . alt_freq ? cpi -> oxcf . alt_freq : DEFAULT_GF_INTERVAL ; //<S2SV> cpi -> ref_frame_flags = VP8_ALTR_FRAME | VP8_GOLD_FRAME | VP8_LAST_FRAME ; //<S2SV> cm -> refresh_golden_frame = 0 ; //<S2SV> cm -> refresh_last_frame = 1 ; //<S2SV> cm -> refresh_entropy_probs = 1 ; //<S2SV> # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) //<S2SV> cpi -> oxcf . token_partitions = 3 ; //<S2SV> # endif //<S2SV> if ( cpi -> oxcf . token_partitions >= 0 && cpi -> oxcf . token_partitions <= 3 ) //<S2SV> cm -> multi_token_partition = //<S2SV> ( TOKEN_PARTITION ) cpi -> oxcf . token_partitions ; //<S2SV> setup_features ( cpi ) ; //<S2SV> { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < MAX_MB_SEGMENTS ; i ++ ) //<S2SV> cpi -> segment_encode_breakout [ i ] = cpi -> oxcf . encode_breakout ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . fixed_q > MAXQ ) //<S2SV> cpi -> oxcf . fixed_q = MAXQ ; //<S2SV> if ( cpi -> oxcf . end_usage == USAGE_LOCAL_FILE_PLAYBACK ) //<S2SV> { //<S2SV> cpi -> oxcf . starting_buffer_level = 60000 ; //<S2SV> cpi -> oxcf . optimal_buffer_level = 60000 ; //<S2SV> cpi -> oxcf . maximum_buffer_size = 240000 ; //<S2SV> cpi -> oxcf . starting_buffer_level_in_ms = 60000 ; //<S2SV> cpi -> oxcf . optimal_buffer_level_in_ms = 60000 ; //<S2SV> cpi -> oxcf . maximum_buffer_size_in_ms = 240000 ; //<S2SV> } //<S2SV> cpi -> oxcf . target_bandwidth *= 1000 ; //<S2SV> cpi -> oxcf . starting_buffer_level = //<S2SV> rescale ( ( int ) cpi -> oxcf . starting_buffer_level , //<S2SV> cpi -> oxcf . target_bandwidth , 1000 ) ; //<S2SV> if ( cpi -> oxcf . optimal_buffer_level == 0 ) //<S2SV> cpi -> oxcf . optimal_buffer_level = cpi -> oxcf . target_bandwidth / 8 ; //<S2SV> else //<S2SV> cpi -> oxcf . optimal_buffer_level = //<S2SV> rescale ( ( int ) cpi -> oxcf . optimal_buffer_level , //<S2SV> cpi -> oxcf . target_bandwidth , 1000 ) ; //<S2SV> if ( cpi -> oxcf . maximum_buffer_size == 0 ) //<S2SV> cpi -> oxcf . maximum_buffer_size = cpi -> oxcf . target_bandwidth / 8 ; //<S2SV> else //<S2SV> cpi -> oxcf . maximum_buffer_size = //<S2SV> rescale ( ( int ) cpi -> oxcf . maximum_buffer_size , //<S2SV> cpi -> oxcf . target_bandwidth , 1000 ) ; //<S2SV> if ( cpi -> bits_off_target > cpi -> oxcf . maximum_buffer_size ) { //<S2SV> cpi -> bits_off_target = cpi -> oxcf . maximum_buffer_size ; //<S2SV> cpi -> buffer_level = cpi -> bits_off_target ; //<S2SV> } //<S2SV> vp8_new_framerate ( cpi , cpi -> framerate ) ; //<S2SV> cpi -> worst_quality = cpi -> oxcf . worst_allowed_q ; //<S2SV> cpi -> best_quality = cpi -> oxcf . best_allowed_q ; //<S2SV> if ( cpi -> active_worst_quality > cpi -> oxcf . worst_allowed_q ) //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> oxcf . worst_allowed_q ; //<S2SV> } //<S2SV> else if ( cpi -> active_worst_quality < cpi -> oxcf . best_allowed_q ) //<S2SV> { //<S2SV> cpi -> active_worst_quality = cpi -> oxcf . best_allowed_q ; //<S2SV> } //<S2SV> if ( cpi -> active_best_quality < cpi -> oxcf . best_allowed_q ) //<S2SV> { //<S2SV> cpi -> active_best_quality = cpi -> oxcf . best_allowed_q ; //<S2SV> } //<S2SV> else if ( cpi -> active_best_quality > cpi -> oxcf . worst_allowed_q ) //<S2SV> { //<S2SV> cpi -> active_best_quality = cpi -> oxcf . worst_allowed_q ; //<S2SV> } //<S2SV> cpi -> buffered_mode = cpi -> oxcf . optimal_buffer_level > 0 ; //<S2SV> cpi -> cq_target_quality = cpi -> oxcf . cq_level ; //<S2SV> cpi -> drop_frames_allowed = cpi -> oxcf . allow_df && cpi -> buffered_mode ; //<S2SV> cpi -> target_bandwidth = cpi -> oxcf . target_bandwidth ; //<S2SV> if ( cpi -> oxcf . number_of_layers != prev_number_of_layers ) //<S2SV> { //<S2SV> cpi -> temporal_pattern_counter = 0 ; //<S2SV> reset_temporal_layer_change ( cpi , oxcf , prev_number_of_layers ) ; //<S2SV> } //<S2SV> cm -> Width = cpi -> oxcf . Width ; //<S2SV> cm -> Height = cpi -> oxcf . Height ; //<S2SV> if ( cpi -> oxcf . Sharpness > 7 ) //<S2SV> cpi -> oxcf . Sharpness = 7 ; //<S2SV> cm -> sharpness_level = cpi -> oxcf . Sharpness ; //<S2SV> if ( cm -> horiz_scale != NORMAL || cm -> vert_scale != NORMAL ) //<S2SV> { //<S2SV> int UNINITIALIZED_IS_SAFE ( hr ) , UNINITIALIZED_IS_SAFE ( hs ) ; //<S2SV> int UNINITIALIZED_IS_SAFE ( vr ) , UNINITIALIZED_IS_SAFE ( vs ) ; //<S2SV> Scale2Ratio ( cm -> horiz_scale , & hr , & hs ) ; //<S2SV> Scale2Ratio ( cm -> vert_scale , & vr , & vs ) ; //<S2SV> cm -> Width = ( hs - 1 + cpi -> oxcf . Width * hr ) / hs ; //<S2SV> cm -> Height = ( vs - 1 + cpi -> oxcf . Height * vr ) / vs ; //<S2SV> } //<S2SV> if ( last_w != cpi -> oxcf . Width || last_h != cpi -> oxcf . Height ) //<S2SV> cpi -> force_next_frame_intra = 1 ; //<S2SV> if ( ( ( cm -> Width + 15 ) & 0xfffffff0 ) != //<S2SV> cm -> yv12_fb [ cm -> lst_fb_idx ] . y_width || //<S2SV> ( ( cm -> Height + 15 ) & 0xfffffff0 ) != //<S2SV> cm -> yv12_fb [ cm -> lst_fb_idx ] . y_height || //<S2SV> cm -> yv12_fb [ cm -> lst_fb_idx ] . y_width == 0 ) //<S2SV> { //<S2SV> dealloc_raw_frame_buffers ( cpi ) ; //<S2SV> alloc_raw_frame_buffers ( cpi ) ; //<S2SV> vp8_alloc_compressor_data ( cpi ) ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . fixed_q >= 0 ) //<S2SV> { //<S2SV> cpi -> last_q [ 0 ] = cpi -> oxcf . fixed_q ; //<S2SV> cpi -> last_q [ 1 ] = cpi -> oxcf . fixed_q ; //<S2SV> } //<S2SV> cpi -> Speed = cpi -> oxcf . cpu_used ; //<S2SV> if ( cpi -> oxcf . lag_in_frames == 0 ) //<S2SV> { //<S2SV> cpi -> oxcf . allow_lag = 0 ; //<S2SV> } //<S2SV> else if ( cpi -> oxcf . lag_in_frames > MAX_LAG_BUFFERS ) //<S2SV> cpi -> oxcf . lag_in_frames = MAX_LAG_BUFFERS ; //<S2SV> cpi -> alt_ref_source = NULL ; //<S2SV> cpi -> is_src_frame_alt_ref = 0 ; //<S2SV> # if CONFIG_TEMPORAL_DENOISING //<S2SV> if ( cpi -> oxcf . noise_sensitivity ) //<S2SV> { //<S2SV> if ( ! cpi -> denoiser . yv12_mc_running_avg . buffer_alloc ) //<S2SV> { //<S2SV> int width = ( cpi -> oxcf . Width + 15 ) & ~ 15 ; //<S2SV> int height = ( cpi -> oxcf . Height + 15 ) & ~ 15 ; //<S2SV> vp8_denoiser_allocate ( & cpi -> denoiser , width , height ) ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> # if 0 //<S2SV> cpi -> frame_distortion = 0 ; //<S2SV> cpi -> last_frame_distortion = 0 ; //<S2SV> # endif //<S2SV> } //<S2SV> 