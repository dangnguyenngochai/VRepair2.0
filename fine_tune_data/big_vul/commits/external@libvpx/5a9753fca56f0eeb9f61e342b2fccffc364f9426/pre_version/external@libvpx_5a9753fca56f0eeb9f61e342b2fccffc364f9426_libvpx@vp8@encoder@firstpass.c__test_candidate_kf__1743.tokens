static int test_candidate_kf ( VP8_COMP * cpi , FIRSTPASS_STATS * last_frame , FIRSTPASS_STATS * this_frame , FIRSTPASS_STATS * next_frame ) //<S2SV> { //<S2SV> int is_viable_kf = 0 ; //<S2SV> if ( ( this_frame -> pcnt_second_ref < 0.10 ) && //<S2SV> ( next_frame -> pcnt_second_ref < 0.10 ) && //<S2SV> ( ( this_frame -> pcnt_inter < 0.05 ) || //<S2SV> ( //<S2SV> ( ( this_frame -> pcnt_inter - this_frame -> pcnt_neutral ) < .25 ) && //<S2SV> ( ( this_frame -> intra_error / DOUBLE_DIVIDE_CHECK ( this_frame -> coded_error ) ) < 2.5 ) && //<S2SV> ( ( fabs ( last_frame -> coded_error - this_frame -> coded_error ) / DOUBLE_DIVIDE_CHECK ( this_frame -> coded_error ) > .40 ) || //<S2SV> ( fabs ( last_frame -> intra_error - this_frame -> intra_error ) / DOUBLE_DIVIDE_CHECK ( this_frame -> intra_error ) > .40 ) || //<S2SV> ( ( next_frame -> intra_error / DOUBLE_DIVIDE_CHECK ( next_frame -> coded_error ) ) > 3.5 ) //<S2SV> ) //<S2SV> ) //<S2SV> ) //<S2SV> ) //<S2SV> { //<S2SV> int i ; //<S2SV> FIRSTPASS_STATS * start_pos ; //<S2SV> FIRSTPASS_STATS local_next_frame ; //<S2SV> double boost_score = 0.0 ; //<S2SV> double old_boost_score = 0.0 ; //<S2SV> double decay_accumulator = 1.0 ; //<S2SV> double next_iiratio ; //<S2SV> vpx_memcpy ( & local_next_frame , next_frame , sizeof ( * next_frame ) ) ; //<S2SV> start_pos = cpi -> twopass . stats_in ; //<S2SV> for ( i = 0 ; i < 16 ; i ++ ) //<S2SV> { //<S2SV> next_iiratio = ( IIKFACTOR1 * local_next_frame . intra_error / DOUBLE_DIVIDE_CHECK ( local_next_frame . coded_error ) ) ; //<S2SV> if ( next_iiratio > RMAX ) //<S2SV> next_iiratio = RMAX ; //<S2SV> if ( local_next_frame . pcnt_inter > 0.85 ) //<S2SV> decay_accumulator = decay_accumulator * local_next_frame . pcnt_inter ; //<S2SV> else //<S2SV> decay_accumulator = decay_accumulator * ( ( 0.85 + local_next_frame . pcnt_inter ) / 2.0 ) ; //<S2SV> boost_score += ( decay_accumulator * next_iiratio ) ; //<S2SV> if ( ( local_next_frame . pcnt_inter < 0.05 ) || //<S2SV> ( next_iiratio < 1.5 ) || //<S2SV> ( ( ( local_next_frame . pcnt_inter - //<S2SV> local_next_frame . pcnt_neutral ) < 0.20 ) && //<S2SV> ( next_iiratio < 3.0 ) ) || //<S2SV> ( ( boost_score - old_boost_score ) < 0.5 ) || //<S2SV> ( local_next_frame . intra_error < 200 ) //<S2SV> ) //<S2SV> { //<S2SV> break ; //<S2SV> } //<S2SV> old_boost_score = boost_score ; //<S2SV> if ( EOF == input_stats ( cpi , & local_next_frame ) ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( boost_score > 5.0 && ( i > 3 ) ) //<S2SV> is_viable_kf = 1 ; //<S2SV> else //<S2SV> { //<S2SV> reset_fpf_position ( cpi , start_pos ) ; //<S2SV> is_viable_kf = 0 ; //<S2SV> } //<S2SV> } //<S2SV> return is_viable_kf ; //<S2SV> } //<S2SV> 