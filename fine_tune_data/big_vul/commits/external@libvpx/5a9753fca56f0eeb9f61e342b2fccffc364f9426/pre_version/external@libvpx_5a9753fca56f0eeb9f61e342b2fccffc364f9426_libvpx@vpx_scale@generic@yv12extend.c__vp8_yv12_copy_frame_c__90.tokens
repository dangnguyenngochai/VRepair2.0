void vp8_yv12_copy_frame_c ( const YV12_BUFFER_CONFIG * src_ybc , //<S2SV> YV12_BUFFER_CONFIG * dst_ybc ) { //<S2SV> int row ; //<S2SV> const uint8_t * src = src_ybc -> y_buffer ; //<S2SV> uint8_t * dst = dst_ybc -> y_buffer ; //<S2SV> # if 0 //<S2SV> assert ( src_ybc -> y_width == dst_ybc -> y_width ) ; //<S2SV> assert ( src_ybc -> y_height == dst_ybc -> y_height ) ; //<S2SV> # endif //<S2SV> for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { //<S2SV> vpx_memcpy ( dst , src , src_ybc -> y_width ) ; //<S2SV> src += src_ybc -> y_stride ; //<S2SV> dst += dst_ybc -> y_stride ; //<S2SV> } //<S2SV> src = src_ybc -> u_buffer ; //<S2SV> dst = dst_ybc -> u_buffer ; //<S2SV> for ( row = 0 ; row < src_ybc -> uv_height ; ++ row ) { //<S2SV> vpx_memcpy ( dst , src , src_ybc -> uv_width ) ; //<S2SV> src += src_ybc -> uv_stride ; //<S2SV> dst += dst_ybc -> uv_stride ; //<S2SV> } //<S2SV> src = src_ybc -> v_buffer ; //<S2SV> dst = dst_ybc -> v_buffer ; //<S2SV> for ( row = 0 ; row < src_ybc -> uv_height ; ++ row ) { //<S2SV> vpx_memcpy ( dst , src , src_ybc -> uv_width ) ; //<S2SV> src += src_ybc -> uv_stride ; //<S2SV> dst += dst_ybc -> uv_stride ; //<S2SV> } //<S2SV> vp8_yv12_extend_frame_borders_c ( dst_ybc ) ; //<S2SV> } //<S2SV> 