static void encode_sb ( VP9_COMP * cpi , const TileInfo * const tile , //<S2SV> TOKENEXTRA * * tp , int mi_row , int mi_col , //<S2SV> int output_enabled , BLOCK_SIZE bsize ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> MACROBLOCK * const x = & cpi -> mb ; //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> const int bsl = b_width_log2 ( bsize ) , hbs = ( 1 << bsl ) / 4 ; //<S2SV> int ctx ; //<S2SV> PARTITION_TYPE partition ; //<S2SV> BLOCK_SIZE subsize ; //<S2SV> if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) //<S2SV> return ; //<S2SV> if ( bsize >= BLOCK_8X8 ) { //<S2SV> ctx = partition_plane_context ( xd , mi_row , mi_col , bsize ) ; //<S2SV> subsize = * get_sb_partitioning ( x , bsize ) ; //<S2SV> } else { //<S2SV> ctx = 0 ; //<S2SV> subsize = BLOCK_4X4 ; //<S2SV> } //<S2SV> partition = partition_lookup [ bsl ] [ subsize ] ; //<S2SV> switch ( partition ) { //<S2SV> case PARTITION_NONE : //<S2SV> if ( output_enabled && bsize >= BLOCK_8X8 ) //<S2SV> cm -> counts . partition [ ctx ] [ PARTITION_NONE ] ++ ; //<S2SV> encode_b ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; //<S2SV> break ; //<S2SV> case PARTITION_VERT : //<S2SV> if ( output_enabled ) //<S2SV> cm -> counts . partition [ ctx ] [ PARTITION_VERT ] ++ ; //<S2SV> * get_sb_index ( x , subsize ) = 0 ; //<S2SV> encode_b ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; //<S2SV> if ( mi_col + hbs < cm -> mi_cols ) { //<S2SV> * get_sb_index ( x , subsize ) = 1 ; //<S2SV> encode_b ( cpi , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case PARTITION_HORZ : //<S2SV> if ( output_enabled ) //<S2SV> cm -> counts . partition [ ctx ] [ PARTITION_HORZ ] ++ ; //<S2SV> * get_sb_index ( x , subsize ) = 0 ; //<S2SV> encode_b ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; //<S2SV> if ( mi_row + hbs < cm -> mi_rows ) { //<S2SV> * get_sb_index ( x , subsize ) = 1 ; //<S2SV> encode_b ( cpi , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case PARTITION_SPLIT : //<S2SV> subsize = get_subsize ( bsize , PARTITION_SPLIT ) ; //<S2SV> if ( output_enabled ) //<S2SV> cm -> counts . partition [ ctx ] [ PARTITION_SPLIT ] ++ ; //<S2SV> * get_sb_index ( x , subsize ) = 0 ; //<S2SV> encode_sb ( cpi , tile , tp , mi_row , mi_col , output_enabled , subsize ) ; //<S2SV> * get_sb_index ( x , subsize ) = 1 ; //<S2SV> encode_sb ( cpi , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize ) ; //<S2SV> * get_sb_index ( x , subsize ) = 2 ; //<S2SV> encode_sb ( cpi , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize ) ; //<S2SV> * get_sb_index ( x , subsize ) = 3 ; //<S2SV> encode_sb ( cpi , tile , tp , mi_row + hbs , mi_col + hbs , output_enabled , //<S2SV> subsize ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> assert ( "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; //<S2SV> } //<S2SV> if ( partition != PARTITION_SPLIT || bsize == BLOCK_8X8 ) //<S2SV> update_partition_context ( xd , mi_row , mi_col , subsize , bsize ) ; //<S2SV> } //<S2SV> 