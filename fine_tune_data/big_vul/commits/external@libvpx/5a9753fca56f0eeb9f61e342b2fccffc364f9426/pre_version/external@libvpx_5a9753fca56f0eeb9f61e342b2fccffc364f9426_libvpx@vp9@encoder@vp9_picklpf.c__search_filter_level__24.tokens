static void search_filter_level ( const YV12_BUFFER_CONFIG * sd , VP9_COMP * cpi , //<S2SV> int partial_frame ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> struct loopfilter * const lf = & cm -> lf ; //<S2SV> const int min_filter_level = 0 ; //<S2SV> const int max_filter_level = get_max_filter_level ( cpi ) ; //<S2SV> int best_err ; //<S2SV> int filt_best ; //<S2SV> int filt_direction = 0 ; //<S2SV> int filt_mid = clamp ( lf -> filter_level , min_filter_level , max_filter_level ) ; //<S2SV> int filter_step = filt_mid < 16 ? 4 : filt_mid / 4 ; //<S2SV> int ss_err [ MAX_LOOP_FILTER + 1 ] ; //<S2SV> vpx_memset ( ss_err , 0xFF , sizeof ( ss_err ) ) ; //<S2SV> vpx_yv12_copy_y ( cm -> frame_to_show , & cpi -> last_frame_uf ) ; //<S2SV> best_err = try_filter_frame ( sd , cpi , filt_mid , partial_frame ) ; //<S2SV> filt_best = filt_mid ; //<S2SV> ss_err [ filt_mid ] = best_err ; //<S2SV> while ( filter_step > 0 ) { //<S2SV> const int filt_high = MIN ( filt_mid + filter_step , max_filter_level ) ; //<S2SV> const int filt_low = MAX ( filt_mid - filter_step , min_filter_level ) ; //<S2SV> int filt_err ; //<S2SV> int bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; //<S2SV> if ( cpi -> twopass . section_intra_rating < 20 ) //<S2SV> bias = bias * cpi -> twopass . section_intra_rating / 20 ; //<S2SV> if ( cm -> tx_mode != ONLY_4X4 ) //<S2SV> bias >>= 1 ; //<S2SV> if ( filt_direction <= 0 && filt_low != filt_mid ) { //<S2SV> if ( ss_err [ filt_low ] < 0 ) { //<S2SV> filt_err = try_filter_frame ( sd , cpi , filt_low , partial_frame ) ; //<S2SV> ss_err [ filt_low ] = filt_err ; //<S2SV> } else { //<S2SV> filt_err = ss_err [ filt_low ] ; //<S2SV> } //<S2SV> if ( ( filt_err - bias ) < best_err ) { //<S2SV> if ( filt_err < best_err ) //<S2SV> best_err = filt_err ; //<S2SV> filt_best = filt_low ; //<S2SV> } //<S2SV> } //<S2SV> if ( filt_direction >= 0 && filt_high != filt_mid ) { //<S2SV> if ( ss_err [ filt_high ] < 0 ) { //<S2SV> filt_err = try_filter_frame ( sd , cpi , filt_high , partial_frame ) ; //<S2SV> ss_err [ filt_high ] = filt_err ; //<S2SV> } else { //<S2SV> filt_err = ss_err [ filt_high ] ; //<S2SV> } //<S2SV> if ( filt_err < ( best_err - bias ) ) { //<S2SV> best_err = filt_err ; //<S2SV> filt_best = filt_high ; //<S2SV> } //<S2SV> } //<S2SV> if ( filt_best == filt_mid ) { //<S2SV> filter_step /= 2 ; //<S2SV> filt_direction = 0 ; //<S2SV> } else { //<S2SV> filt_direction = ( filt_best < filt_mid ) ? - 1 : 1 ; //<S2SV> filt_mid = filt_best ; //<S2SV> } //<S2SV> } //<S2SV> lf -> filter_level = filt_best ; //<S2SV> } //<S2SV> 