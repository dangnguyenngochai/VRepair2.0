void vp8_print_modes_and_motion_vectors ( MODE_INFO * mi , int rows , int cols , int frame ) //<S2SV> { //<S2SV> int mb_row ; //<S2SV> int mb_col ; //<S2SV> int mb_index = 0 ; //<S2SV> FILE * mvs = fopen ( "mvs.stt" , "a" ) ; //<S2SV> mb_index = 0 ; //<S2SV> fprintf ( mvs , "Mb<S2SV_blank>Modes<S2SV_blank>for<S2SV_blank>Frame<S2SV_blank>%d\\n" , frame ) ; //<S2SV> for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) //<S2SV> { //<S2SV> for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) //<S2SV> { //<S2SV> fprintf ( mvs , "%2d<S2SV_blank>" , mi [ mb_index ] . mbmi . mode ) ; //<S2SV> mb_index ++ ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> mb_index ++ ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> mb_index = 0 ; //<S2SV> fprintf ( mvs , "Mb<S2SV_blank>mv<S2SV_blank>ref<S2SV_blank>for<S2SV_blank>Frame<S2SV_blank>%d\\n" , frame ) ; //<S2SV> for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) //<S2SV> { //<S2SV> for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) //<S2SV> { //<S2SV> fprintf ( mvs , "%2d<S2SV_blank>" , mi [ mb_index ] . mbmi . ref_frame ) ; //<S2SV> mb_index ++ ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> mb_index ++ ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> mb_index = 0 ; //<S2SV> fprintf ( mvs , "UV<S2SV_blank>Modes<S2SV_blank>for<S2SV_blank>Frame<S2SV_blank>%d\\n" , frame ) ; //<S2SV> for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) //<S2SV> { //<S2SV> for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) //<S2SV> { //<S2SV> fprintf ( mvs , "%2d<S2SV_blank>" , mi [ mb_index ] . mbmi . uv_mode ) ; //<S2SV> mb_index ++ ; //<S2SV> } //<S2SV> mb_index ++ ; //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> mb_index = 0 ; //<S2SV> fprintf ( mvs , "Mbs<S2SV_blank>for<S2SV_blank>Frame<S2SV_blank>%d\\n" , frame ) ; //<S2SV> { //<S2SV> int b_row ; //<S2SV> for ( b_row = 0 ; b_row < 4 * rows ; b_row ++ ) //<S2SV> { //<S2SV> int b_col ; //<S2SV> int bindex ; //<S2SV> for ( b_col = 0 ; b_col < 4 * cols ; b_col ++ ) //<S2SV> { //<S2SV> mb_index = ( b_row >> 2 ) * ( cols + 1 ) + ( b_col >> 2 ) ; //<S2SV> bindex = ( b_row & 3 ) * 4 + ( b_col & 3 ) ; //<S2SV> if ( mi [ mb_index ] . mbmi . mode == B_PRED ) //<S2SV> fprintf ( mvs , "%2d<S2SV_blank>" , mi [ mb_index ] . bmi [ bindex ] . as_mode ) ; //<S2SV> else //<S2SV> fprintf ( mvs , "xx<S2SV_blank>" ) ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> mb_index = 0 ; //<S2SV> fprintf ( mvs , "MVs<S2SV_blank>for<S2SV_blank>Frame<S2SV_blank>%d\\n" , frame ) ; //<S2SV> for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) //<S2SV> { //<S2SV> for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) //<S2SV> { //<S2SV> fprintf ( mvs , "%5d:%-5d" , mi [ mb_index ] . mbmi . mv . as_mv . row / 2 , mi [ mb_index ] . mbmi . mv . as_mv . col / 2 ) ; //<S2SV> mb_index ++ ; //<S2SV> } //<S2SV> mb_index ++ ; //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> mb_index = 0 ; //<S2SV> fprintf ( mvs , "MVs<S2SV_blank>for<S2SV_blank>Frame<S2SV_blank>%d\\n" , frame ) ; //<S2SV> { //<S2SV> int b_row ; //<S2SV> for ( b_row = 0 ; b_row < 4 * rows ; b_row ++ ) //<S2SV> { //<S2SV> int b_col ; //<S2SV> int bindex ; //<S2SV> for ( b_col = 0 ; b_col < 4 * cols ; b_col ++ ) //<S2SV> { //<S2SV> mb_index = ( b_row >> 2 ) * ( cols + 1 ) + ( b_col >> 2 ) ; //<S2SV> bindex = ( b_row & 3 ) * 4 + ( b_col & 3 ) ; //<S2SV> fprintf ( mvs , "%3d:%-3d<S2SV_blank>" , mi [ mb_index ] . bmi [ bindex ] . mv . as_mv . row , mi [ mb_index ] . bmi [ bindex ] . mv . as_mv . col ) ; //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> fprintf ( mvs , "\\n" ) ; //<S2SV> fclose ( mvs ) ; //<S2SV> } //<S2SV> 