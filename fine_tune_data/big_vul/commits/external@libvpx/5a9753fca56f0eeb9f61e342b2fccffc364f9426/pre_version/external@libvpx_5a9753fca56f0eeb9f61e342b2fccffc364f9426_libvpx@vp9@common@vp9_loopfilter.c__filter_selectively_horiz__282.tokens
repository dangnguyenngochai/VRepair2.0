static void filter_selectively_horiz ( uint8_t * s , int pitch , //<S2SV> unsigned int mask_16x16 , //<S2SV> unsigned int mask_8x8 , //<S2SV> unsigned int mask_4x4 , //<S2SV> unsigned int mask_4x4_int , //<S2SV> const loop_filter_info_n * lfi_n , //<S2SV> const uint8_t * lfl ) { //<S2SV> unsigned int mask ; //<S2SV> int count ; //<S2SV> for ( mask = mask_16x16 | mask_8x8 | mask_4x4 | mask_4x4_int ; //<S2SV> mask ; mask >>= count ) { //<S2SV> const loop_filter_thresh * lfi = lfi_n -> lfthr + * lfl ; //<S2SV> count = 1 ; //<S2SV> if ( mask & 1 ) { //<S2SV> if ( mask_16x16 & 1 ) { //<S2SV> if ( ( mask_16x16 & 3 ) == 3 ) { //<S2SV> vp9_lpf_horizontal_16 ( s , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , 2 ) ; //<S2SV> count = 2 ; //<S2SV> } else { //<S2SV> vp9_lpf_horizontal_16 ( s , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } else if ( mask_8x8 & 1 ) { //<S2SV> if ( ( mask_8x8 & 3 ) == 3 ) { //<S2SV> const loop_filter_thresh * lfin = lfi_n -> lfthr + * ( lfl + 1 ) ; //<S2SV> vp9_lpf_horizontal_8_dual ( s , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , lfin -> mblim , lfin -> lim , //<S2SV> lfin -> hev_thr ) ; //<S2SV> if ( ( mask_4x4_int & 3 ) == 3 ) { //<S2SV> vp9_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , //<S2SV> lfi -> lim , lfi -> hev_thr , lfin -> mblim , //<S2SV> lfin -> lim , lfin -> hev_thr ) ; //<S2SV> } else { //<S2SV> if ( mask_4x4_int & 1 ) //<S2SV> vp9_lpf_horizontal_4 ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , 1 ) ; //<S2SV> else if ( mask_4x4_int & 2 ) //<S2SV> vp9_lpf_horizontal_4 ( s + 8 + 4 * pitch , pitch , lfin -> mblim , //<S2SV> lfin -> lim , lfin -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> count = 2 ; //<S2SV> } else { //<S2SV> vp9_lpf_horizontal_8 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; //<S2SV> if ( mask_4x4_int & 1 ) //<S2SV> vp9_lpf_horizontal_4 ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } else if ( mask_4x4 & 1 ) { //<S2SV> if ( ( mask_4x4 & 3 ) == 3 ) { //<S2SV> const loop_filter_thresh * lfin = lfi_n -> lfthr + * ( lfl + 1 ) ; //<S2SV> vp9_lpf_horizontal_4_dual ( s , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , lfin -> mblim , lfin -> lim , //<S2SV> lfin -> hev_thr ) ; //<S2SV> if ( ( mask_4x4_int & 3 ) == 3 ) { //<S2SV> vp9_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , //<S2SV> lfi -> lim , lfi -> hev_thr , lfin -> mblim , //<S2SV> lfin -> lim , lfin -> hev_thr ) ; //<S2SV> } else { //<S2SV> if ( mask_4x4_int & 1 ) //<S2SV> vp9_lpf_horizontal_4 ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , 1 ) ; //<S2SV> else if ( mask_4x4_int & 2 ) //<S2SV> vp9_lpf_horizontal_4 ( s + 8 + 4 * pitch , pitch , lfin -> mblim , //<S2SV> lfin -> lim , lfin -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> count = 2 ; //<S2SV> } else { //<S2SV> vp9_lpf_horizontal_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; //<S2SV> if ( mask_4x4_int & 1 ) //<S2SV> vp9_lpf_horizontal_4 ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } else if ( mask_4x4_int & 1 ) { //<S2SV> vp9_lpf_horizontal_4 ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , //<S2SV> lfi -> hev_thr , 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> s += 8 * count ; //<S2SV> lfl += count ; //<S2SV> mask_16x16 >>= count ; //<S2SV> mask_8x8 >>= count ; //<S2SV> mask_4x4 >>= count ; //<S2SV> mask_4x4_int >>= count ; //<S2SV> } //<S2SV> } //<S2SV> 