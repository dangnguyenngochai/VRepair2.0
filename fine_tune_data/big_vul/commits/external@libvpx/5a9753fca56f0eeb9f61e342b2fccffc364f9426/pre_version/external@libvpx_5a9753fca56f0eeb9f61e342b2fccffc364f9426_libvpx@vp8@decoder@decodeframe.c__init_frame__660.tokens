static void init_frame ( VP8D_COMP * pbi ) //<S2SV> { //<S2SV> VP8_COMMON * const pc = & pbi -> common ; //<S2SV> MACROBLOCKD * const xd = & pbi -> mb ; //<S2SV> if ( pc -> frame_type == KEY_FRAME ) //<S2SV> { //<S2SV> vpx_memcpy ( pc -> fc . mvc , vp8_default_mv_context , sizeof ( vp8_default_mv_context ) ) ; //<S2SV> vp8_init_mbmode_probs ( pc ) ; //<S2SV> vp8_default_coef_probs ( pc ) ; //<S2SV> vpx_memset ( xd -> segment_feature_data , 0 , sizeof ( xd -> segment_feature_data ) ) ; //<S2SV> xd -> mb_segement_abs_delta = SEGMENT_DELTADATA ; //<S2SV> vpx_memset ( xd -> ref_lf_deltas , 0 , sizeof ( xd -> ref_lf_deltas ) ) ; //<S2SV> vpx_memset ( xd -> mode_lf_deltas , 0 , sizeof ( xd -> mode_lf_deltas ) ) ; //<S2SV> pc -> refresh_golden_frame = 1 ; //<S2SV> pc -> refresh_alt_ref_frame = 1 ; //<S2SV> pc -> copy_buffer_to_gf = 0 ; //<S2SV> pc -> copy_buffer_to_arf = 0 ; //<S2SV> pc -> ref_frame_sign_bias [ GOLDEN_FRAME ] = 0 ; //<S2SV> pc -> ref_frame_sign_bias [ ALTREF_FRAME ] = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ! pc -> use_bilinear_mc_filter ) //<S2SV> { //<S2SV> xd -> subpixel_predict = vp8_sixtap_predict4x4 ; //<S2SV> xd -> subpixel_predict8x4 = vp8_sixtap_predict8x4 ; //<S2SV> xd -> subpixel_predict8x8 = vp8_sixtap_predict8x8 ; //<S2SV> xd -> subpixel_predict16x16 = vp8_sixtap_predict16x16 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> xd -> subpixel_predict = vp8_bilinear_predict4x4 ; //<S2SV> xd -> subpixel_predict8x4 = vp8_bilinear_predict8x4 ; //<S2SV> xd -> subpixel_predict8x8 = vp8_bilinear_predict8x8 ; //<S2SV> xd -> subpixel_predict16x16 = vp8_bilinear_predict16x16 ; //<S2SV> } //<S2SV> if ( pbi -> decoded_key_frame && pbi -> ec_enabled && ! pbi -> ec_active ) //<S2SV> pbi -> ec_active = 1 ; //<S2SV> } //<S2SV> xd -> left_context = & pc -> left_context ; //<S2SV> xd -> mode_info_context = pc -> mi ; //<S2SV> xd -> frame_type = pc -> frame_type ; //<S2SV> xd -> mode_info_context -> mbmi . mode = DC_PRED ; //<S2SV> xd -> mode_info_stride = pc -> mode_info_stride ; //<S2SV> xd -> corrupted = 0 ; //<S2SV> xd -> fullpixel_mask = 0xffffffff ; //<S2SV> if ( pc -> full_pixel ) //<S2SV> xd -> fullpixel_mask = 0xfffffff8 ; //<S2SV> } //<S2SV> 