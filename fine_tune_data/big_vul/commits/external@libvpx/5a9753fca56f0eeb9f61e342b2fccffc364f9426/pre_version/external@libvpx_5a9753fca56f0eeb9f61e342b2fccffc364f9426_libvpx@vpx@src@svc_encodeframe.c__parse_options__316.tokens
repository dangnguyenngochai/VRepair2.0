static vpx_codec_err_t parse_options ( SvcContext * svc_ctx , const char * options ) { //<S2SV> char * input_string ; //<S2SV> char * option_name ; //<S2SV> char * option_value ; //<S2SV> char * input_ptr ; //<S2SV> int is_keyframe_qaunt_set = 0 ; //<S2SV> vpx_codec_err_t res = VPX_CODEC_OK ; //<S2SV> if ( options == NULL ) return VPX_CODEC_OK ; //<S2SV> input_string = strdup ( options ) ; //<S2SV> option_name = strtok_r ( input_string , "=" , & input_ptr ) ; //<S2SV> while ( option_name != NULL ) { //<S2SV> option_value = strtok_r ( NULL , "<S2SV_blank>" , & input_ptr ) ; //<S2SV> if ( option_value == NULL ) { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , "option<S2SV_blank>missing<S2SV_blank>value:<S2SV_blank>%s\\n" , //<S2SV> option_name ) ; //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( strcmp ( "encoding-mode" , option_name ) == 0 ) { //<S2SV> res = set_option_encoding_mode ( svc_ctx , option_value ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> } else if ( strcmp ( "layers" , option_name ) == 0 ) { //<S2SV> svc_ctx -> spatial_layers = atoi ( option_value ) ; //<S2SV> } else if ( strcmp ( "scale-factors" , option_name ) == 0 ) { //<S2SV> res = parse_scale_factors ( svc_ctx , option_value ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> } else if ( strcmp ( "quantizers" , option_name ) == 0 ) { //<S2SV> res = parse_quantizer_values ( svc_ctx , option_value , 0 ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> if ( ! is_keyframe_qaunt_set ) { //<S2SV> SvcInternal * const si = get_svc_internal ( svc_ctx ) ; //<S2SV> memcpy ( get_svc_internal ( svc_ctx ) -> quantizer_keyframe , si -> quantizer , //<S2SV> sizeof ( si -> quantizer ) ) ; //<S2SV> } //<S2SV> } else if ( strcmp ( "quantizers-keyframe" , option_name ) == 0 ) { //<S2SV> res = parse_quantizer_values ( svc_ctx , option_value , 1 ) ; //<S2SV> if ( res != VPX_CODEC_OK ) break ; //<S2SV> is_keyframe_qaunt_set = 1 ; //<S2SV> } else { //<S2SV> svc_log ( svc_ctx , SVC_LOG_ERROR , "invalid<S2SV_blank>option:<S2SV_blank>%s\\n" , option_name ) ; //<S2SV> res = VPX_CODEC_INVALID_PARAM ; //<S2SV> break ; //<S2SV> } //<S2SV> option_name = strtok_r ( NULL , "=" , & input_ptr ) ; //<S2SV> } //<S2SV> free ( input_string ) ; //<S2SV> return res ; //<S2SV> } //<S2SV> 