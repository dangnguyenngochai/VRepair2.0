static void temporal_filter_predictors_mb_c ( MACROBLOCKD * xd , //<S2SV> uint8_t * y_mb_ptr , //<S2SV> uint8_t * u_mb_ptr , //<S2SV> uint8_t * v_mb_ptr , //<S2SV> int stride , //<S2SV> int uv_block_size , //<S2SV> int mv_row , //<S2SV> int mv_col , //<S2SV> uint8_t * pred , //<S2SV> struct scale_factors * scale , //<S2SV> int x , int y ) { //<S2SV> const int which_mv = 0 ; //<S2SV> const MV mv = { mv_row , mv_col } ; //<S2SV> const InterpKernel * const kernel = //<S2SV> vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi . interp_filter ) ; //<S2SV> enum mv_precision mv_precision_uv ; //<S2SV> int uv_stride ; //<S2SV> if ( uv_block_size == 8 ) { //<S2SV> uv_stride = ( stride + 1 ) >> 1 ; //<S2SV> mv_precision_uv = MV_PRECISION_Q4 ; //<S2SV> } else { //<S2SV> uv_stride = stride ; //<S2SV> mv_precision_uv = MV_PRECISION_Q3 ; //<S2SV> } //<S2SV> vp9_build_inter_predictor ( y_mb_ptr , stride , //<S2SV> & pred [ 0 ] , 16 , //<S2SV> & mv , //<S2SV> scale , //<S2SV> 16 , 16 , //<S2SV> which_mv , //<S2SV> kernel , MV_PRECISION_Q3 , x , y ) ; //<S2SV> vp9_build_inter_predictor ( u_mb_ptr , uv_stride , //<S2SV> & pred [ 256 ] , uv_block_size , //<S2SV> & mv , //<S2SV> scale , //<S2SV> uv_block_size , uv_block_size , //<S2SV> which_mv , //<S2SV> kernel , mv_precision_uv , x , y ) ; //<S2SV> vp9_build_inter_predictor ( v_mb_ptr , uv_stride , //<S2SV> & pred [ 512 ] , uv_block_size , //<S2SV> & mv , //<S2SV> scale , //<S2SV> uv_block_size , uv_block_size , //<S2SV> which_mv , //<S2SV> kernel , mv_precision_uv , x , y ) ; //<S2SV> } //<S2SV> 