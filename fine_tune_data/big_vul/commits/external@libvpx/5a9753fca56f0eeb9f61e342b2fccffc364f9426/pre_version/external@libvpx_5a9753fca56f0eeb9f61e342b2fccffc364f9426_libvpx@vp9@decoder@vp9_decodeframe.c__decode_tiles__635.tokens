static const uint8_t * decode_tiles ( VP9Decoder * pbi , //<S2SV> const uint8_t * data , //<S2SV> const uint8_t * data_end ) { //<S2SV> VP9_COMMON * const cm = & pbi -> common ; //<S2SV> const int aligned_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; //<S2SV> const int tile_cols = 1 << cm -> log2_tile_cols ; //<S2SV> const int tile_rows = 1 << cm -> log2_tile_rows ; //<S2SV> TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; //<S2SV> int tile_row , tile_col ; //<S2SV> const uint8_t * end = NULL ; //<S2SV> vp9_reader r ; //<S2SV> assert ( tile_rows <= 4 ) ; //<S2SV> assert ( tile_cols <= ( 1 << 6 ) ) ; //<S2SV> vpx_memset ( cm -> above_context , 0 , //<S2SV> sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; //<S2SV> vpx_memset ( cm -> above_seg_context , 0 , //<S2SV> sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; //<S2SV> for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { //<S2SV> for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { //<S2SV> const int last_tile = tile_row == tile_rows - 1 && //<S2SV> tile_col == tile_cols - 1 ; //<S2SV> const size_t size = get_tile ( data_end , last_tile , & cm -> error , & data ) ; //<S2SV> TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; //<S2SV> buf -> data = data ; //<S2SV> buf -> size = size ; //<S2SV> data += size ; //<S2SV> } //<S2SV> } //<S2SV> for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { //<S2SV> for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { //<S2SV> const int col = pbi -> oxcf . inv_tile_order ? tile_cols - tile_col - 1 //<S2SV> : tile_col ; //<S2SV> const int last_tile = tile_row == tile_rows - 1 && //<S2SV> col == tile_cols - 1 ; //<S2SV> const TileBuffer * const buf = & tile_buffers [ tile_row ] [ col ] ; //<S2SV> TileInfo tile ; //<S2SV> vp9_tile_init ( & tile , cm , tile_row , col ) ; //<S2SV> setup_token_decoder ( buf -> data , data_end , buf -> size , & cm -> error , & r ) ; //<S2SV> decode_tile ( pbi , & tile , & r ) ; //<S2SV> if ( last_tile ) //<S2SV> end = vp9_reader_find_end ( & r ) ; //<S2SV> } //<S2SV> } //<S2SV> return end ; //<S2SV> } //<S2SV> 