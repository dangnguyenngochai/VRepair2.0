void fdct8_sse2 ( __m128i * in ) { //<S2SV> const __m128i k__cospi_p16_p16 = _mm_set1_epi16 ( cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_p16_m16 = pair_set_epi16 ( cospi_16_64 , - cospi_16_64 ) ; //<S2SV> const __m128i k__cospi_p24_p08 = pair_set_epi16 ( cospi_24_64 , cospi_8_64 ) ; //<S2SV> const __m128i k__cospi_m08_p24 = pair_set_epi16 ( - cospi_8_64 , cospi_24_64 ) ; //<S2SV> const __m128i k__cospi_p28_p04 = pair_set_epi16 ( cospi_28_64 , cospi_4_64 ) ; //<S2SV> const __m128i k__cospi_m04_p28 = pair_set_epi16 ( - cospi_4_64 , cospi_28_64 ) ; //<S2SV> const __m128i k__cospi_p12_p20 = pair_set_epi16 ( cospi_12_64 , cospi_20_64 ) ; //<S2SV> const __m128i k__cospi_m20_p12 = pair_set_epi16 ( - cospi_20_64 , cospi_12_64 ) ; //<S2SV> const __m128i k__DCT_CONST_ROUNDING = _mm_set1_epi32 ( DCT_CONST_ROUNDING ) ; //<S2SV> __m128i u0 , u1 , u2 , u3 , u4 , u5 , u6 , u7 ; //<S2SV> __m128i v0 , v1 , v2 , v3 , v4 , v5 , v6 , v7 ; //<S2SV> __m128i s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; //<S2SV> s0 = _mm_add_epi16 ( in [ 0 ] , in [ 7 ] ) ; //<S2SV> s1 = _mm_add_epi16 ( in [ 1 ] , in [ 6 ] ) ; //<S2SV> s2 = _mm_add_epi16 ( in [ 2 ] , in [ 5 ] ) ; //<S2SV> s3 = _mm_add_epi16 ( in [ 3 ] , in [ 4 ] ) ; //<S2SV> s4 = _mm_sub_epi16 ( in [ 3 ] , in [ 4 ] ) ; //<S2SV> s5 = _mm_sub_epi16 ( in [ 2 ] , in [ 5 ] ) ; //<S2SV> s6 = _mm_sub_epi16 ( in [ 1 ] , in [ 6 ] ) ; //<S2SV> s7 = _mm_sub_epi16 ( in [ 0 ] , in [ 7 ] ) ; //<S2SV> u0 = _mm_add_epi16 ( s0 , s3 ) ; //<S2SV> u1 = _mm_add_epi16 ( s1 , s2 ) ; //<S2SV> u2 = _mm_sub_epi16 ( s1 , s2 ) ; //<S2SV> u3 = _mm_sub_epi16 ( s0 , s3 ) ; //<S2SV> v0 = _mm_unpacklo_epi16 ( u0 , u1 ) ; //<S2SV> v1 = _mm_unpackhi_epi16 ( u0 , u1 ) ; //<S2SV> v2 = _mm_unpacklo_epi16 ( u2 , u3 ) ; //<S2SV> v3 = _mm_unpackhi_epi16 ( u2 , u3 ) ; //<S2SV> u0 = _mm_madd_epi16 ( v0 , k__cospi_p16_p16 ) ; //<S2SV> u1 = _mm_madd_epi16 ( v1 , k__cospi_p16_p16 ) ; //<S2SV> u2 = _mm_madd_epi16 ( v0 , k__cospi_p16_m16 ) ; //<S2SV> u3 = _mm_madd_epi16 ( v1 , k__cospi_p16_m16 ) ; //<S2SV> u4 = _mm_madd_epi16 ( v2 , k__cospi_p24_p08 ) ; //<S2SV> u5 = _mm_madd_epi16 ( v3 , k__cospi_p24_p08 ) ; //<S2SV> u6 = _mm_madd_epi16 ( v2 , k__cospi_m08_p24 ) ; //<S2SV> u7 = _mm_madd_epi16 ( v3 , k__cospi_m08_p24 ) ; //<S2SV> v0 = _mm_add_epi32 ( u0 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v1 = _mm_add_epi32 ( u1 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v2 = _mm_add_epi32 ( u2 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v3 = _mm_add_epi32 ( u3 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v4 = _mm_add_epi32 ( u4 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v5 = _mm_add_epi32 ( u5 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v6 = _mm_add_epi32 ( u6 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v7 = _mm_add_epi32 ( u7 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u0 = _mm_srai_epi32 ( v0 , DCT_CONST_BITS ) ; //<S2SV> u1 = _mm_srai_epi32 ( v1 , DCT_CONST_BITS ) ; //<S2SV> u2 = _mm_srai_epi32 ( v2 , DCT_CONST_BITS ) ; //<S2SV> u3 = _mm_srai_epi32 ( v3 , DCT_CONST_BITS ) ; //<S2SV> u4 = _mm_srai_epi32 ( v4 , DCT_CONST_BITS ) ; //<S2SV> u5 = _mm_srai_epi32 ( v5 , DCT_CONST_BITS ) ; //<S2SV> u6 = _mm_srai_epi32 ( v6 , DCT_CONST_BITS ) ; //<S2SV> u7 = _mm_srai_epi32 ( v7 , DCT_CONST_BITS ) ; //<S2SV> in [ 0 ] = _mm_packs_epi32 ( u0 , u1 ) ; //<S2SV> in [ 2 ] = _mm_packs_epi32 ( u4 , u5 ) ; //<S2SV> in [ 4 ] = _mm_packs_epi32 ( u2 , u3 ) ; //<S2SV> in [ 6 ] = _mm_packs_epi32 ( u6 , u7 ) ; //<S2SV> u0 = _mm_unpacklo_epi16 ( s6 , s5 ) ; //<S2SV> u1 = _mm_unpackhi_epi16 ( s6 , s5 ) ; //<S2SV> v0 = _mm_madd_epi16 ( u0 , k__cospi_p16_m16 ) ; //<S2SV> v1 = _mm_madd_epi16 ( u1 , k__cospi_p16_m16 ) ; //<S2SV> v2 = _mm_madd_epi16 ( u0 , k__cospi_p16_p16 ) ; //<S2SV> v3 = _mm_madd_epi16 ( u1 , k__cospi_p16_p16 ) ; //<S2SV> u0 = _mm_add_epi32 ( v0 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u1 = _mm_add_epi32 ( v1 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u2 = _mm_add_epi32 ( v2 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u3 = _mm_add_epi32 ( v3 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v0 = _mm_srai_epi32 ( u0 , DCT_CONST_BITS ) ; //<S2SV> v1 = _mm_srai_epi32 ( u1 , DCT_CONST_BITS ) ; //<S2SV> v2 = _mm_srai_epi32 ( u2 , DCT_CONST_BITS ) ; //<S2SV> v3 = _mm_srai_epi32 ( u3 , DCT_CONST_BITS ) ; //<S2SV> u0 = _mm_packs_epi32 ( v0 , v1 ) ; //<S2SV> u1 = _mm_packs_epi32 ( v2 , v3 ) ; //<S2SV> s0 = _mm_add_epi16 ( s4 , u0 ) ; //<S2SV> s1 = _mm_sub_epi16 ( s4 , u0 ) ; //<S2SV> s2 = _mm_sub_epi16 ( s7 , u1 ) ; //<S2SV> s3 = _mm_add_epi16 ( s7 , u1 ) ; //<S2SV> u0 = _mm_unpacklo_epi16 ( s0 , s3 ) ; //<S2SV> u1 = _mm_unpackhi_epi16 ( s0 , s3 ) ; //<S2SV> u2 = _mm_unpacklo_epi16 ( s1 , s2 ) ; //<S2SV> u3 = _mm_unpackhi_epi16 ( s1 , s2 ) ; //<S2SV> v0 = _mm_madd_epi16 ( u0 , k__cospi_p28_p04 ) ; //<S2SV> v1 = _mm_madd_epi16 ( u1 , k__cospi_p28_p04 ) ; //<S2SV> v2 = _mm_madd_epi16 ( u2 , k__cospi_p12_p20 ) ; //<S2SV> v3 = _mm_madd_epi16 ( u3 , k__cospi_p12_p20 ) ; //<S2SV> v4 = _mm_madd_epi16 ( u2 , k__cospi_m20_p12 ) ; //<S2SV> v5 = _mm_madd_epi16 ( u3 , k__cospi_m20_p12 ) ; //<S2SV> v6 = _mm_madd_epi16 ( u0 , k__cospi_m04_p28 ) ; //<S2SV> v7 = _mm_madd_epi16 ( u1 , k__cospi_m04_p28 ) ; //<S2SV> u0 = _mm_add_epi32 ( v0 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u1 = _mm_add_epi32 ( v1 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u2 = _mm_add_epi32 ( v2 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u3 = _mm_add_epi32 ( v3 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u4 = _mm_add_epi32 ( v4 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u5 = _mm_add_epi32 ( v5 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u6 = _mm_add_epi32 ( v6 , k__DCT_CONST_ROUNDING ) ; //<S2SV> u7 = _mm_add_epi32 ( v7 , k__DCT_CONST_ROUNDING ) ; //<S2SV> v0 = _mm_srai_epi32 ( u0 , DCT_CONST_BITS ) ; //<S2SV> v1 = _mm_srai_epi32 ( u1 , DCT_CONST_BITS ) ; //<S2SV> v2 = _mm_srai_epi32 ( u2 , DCT_CONST_BITS ) ; //<S2SV> v3 = _mm_srai_epi32 ( u3 , DCT_CONST_BITS ) ; //<S2SV> v4 = _mm_srai_epi32 ( u4 , DCT_CONST_BITS ) ; //<S2SV> v5 = _mm_srai_epi32 ( u5 , DCT_CONST_BITS ) ; //<S2SV> v6 = _mm_srai_epi32 ( u6 , DCT_CONST_BITS ) ; //<S2SV> v7 = _mm_srai_epi32 ( u7 , DCT_CONST_BITS ) ; //<S2SV> in [ 1 ] = _mm_packs_epi32 ( v0 , v1 ) ; //<S2SV> in [ 3 ] = _mm_packs_epi32 ( v4 , v5 ) ; //<S2SV> in [ 5 ] = _mm_packs_epi32 ( v2 , v3 ) ; //<S2SV> in [ 7 ] = _mm_packs_epi32 ( v6 , v7 ) ; //<S2SV> array_transpose_8x8 ( in , in ) ; //<S2SV> } //<S2SV> 