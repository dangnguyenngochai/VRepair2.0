void vp8_mbpost_proc_down_c ( unsigned char * dst , int pitch , int rows , int cols , int flimit ) //<S2SV> { //<S2SV> int r , c , i ; //<S2SV> const short * rv3 = & vp8_rv [ 63 & rand ( ) ] ; //<S2SV> for ( c = 0 ; c < cols ; c ++ ) //<S2SV> { //<S2SV> unsigned char * s = & dst [ c ] ; //<S2SV> int sumsq = 0 ; //<S2SV> int sum = 0 ; //<S2SV> unsigned char d [ 16 ] ; //<S2SV> const short * rv2 = rv3 + ( ( c * 17 ) & 127 ) ; //<S2SV> for ( i = - 8 ; i < 0 ; i ++ ) //<S2SV> s [ i * pitch ] = s [ 0 ] ; //<S2SV> for ( i = rows ; i < rows + 17 ; i ++ ) //<S2SV> s [ i * pitch ] = s [ ( rows - 1 ) * pitch ] ; //<S2SV> for ( i = - 8 ; i <= 6 ; i ++ ) //<S2SV> { //<S2SV> sumsq += s [ i * pitch ] * s [ i * pitch ] ; //<S2SV> sum += s [ i * pitch ] ; //<S2SV> } //<S2SV> for ( r = 0 ; r < rows + 8 ; r ++ ) //<S2SV> { //<S2SV> sumsq += s [ 7 * pitch ] * s [ 7 * pitch ] - s [ - 8 * pitch ] * s [ - 8 * pitch ] ; //<S2SV> sum += s [ 7 * pitch ] - s [ - 8 * pitch ] ; //<S2SV> d [ r & 15 ] = s [ 0 ] ; //<S2SV> if ( sumsq * 15 - sum * sum < flimit ) //<S2SV> { //<S2SV> d [ r & 15 ] = ( rv2 [ r & 127 ] + sum + s [ 0 ] ) >> 4 ; //<S2SV> } //<S2SV> if ( r >= 8 ) //<S2SV> s [ - 8 * pitch ] = d [ ( r - 8 ) & 15 ] ; //<S2SV> s += pitch ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 