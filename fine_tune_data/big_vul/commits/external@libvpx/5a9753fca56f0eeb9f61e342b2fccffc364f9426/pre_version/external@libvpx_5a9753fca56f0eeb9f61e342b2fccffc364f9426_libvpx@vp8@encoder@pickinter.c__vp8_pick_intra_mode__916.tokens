void vp8_pick_intra_mode ( MACROBLOCK * x , int * rate_ ) //<S2SV> { //<S2SV> int error4x4 , error16x16 = INT_MAX ; //<S2SV> int rate , best_rate = 0 , distortion , best_sse ; //<S2SV> MB_PREDICTION_MODE mode , best_mode = DC_PRED ; //<S2SV> int this_rd ; //<S2SV> unsigned int sse ; //<S2SV> BLOCK * b = & x -> block [ 0 ] ; //<S2SV> MACROBLOCKD * xd = & x -> e_mbd ; //<S2SV> xd -> mode_info_context -> mbmi . ref_frame = INTRA_FRAME ; //<S2SV> pick_intra_mbuv_mode ( x ) ; //<S2SV> for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) //<S2SV> { //<S2SV> xd -> mode_info_context -> mbmi . mode = mode ; //<S2SV> vp8_build_intra_predictors_mby_s ( xd , //<S2SV> xd -> dst . y_buffer - xd -> dst . y_stride , //<S2SV> xd -> dst . y_buffer - 1 , //<S2SV> xd -> dst . y_stride , //<S2SV> xd -> predictor , //<S2SV> 16 ) ; //<S2SV> distortion = vp8_variance16x16 //<S2SV> ( * ( b -> base_src ) , b -> src_stride , xd -> predictor , 16 , & sse ) ; //<S2SV> rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; //<S2SV> this_rd = RDCOST ( x -> rdmult , x -> rddiv , rate , distortion ) ; //<S2SV> if ( error16x16 > this_rd ) //<S2SV> { //<S2SV> error16x16 = this_rd ; //<S2SV> best_mode = mode ; //<S2SV> best_sse = sse ; //<S2SV> best_rate = rate ; //<S2SV> } //<S2SV> } //<S2SV> xd -> mode_info_context -> mbmi . mode = best_mode ; //<S2SV> error4x4 = pick_intra4x4mby_modes ( x , & rate , //<S2SV> & best_sse ) ; //<S2SV> if ( error4x4 < error16x16 ) //<S2SV> { //<S2SV> xd -> mode_info_context -> mbmi . mode = B_PRED ; //<S2SV> best_rate = rate ; //<S2SV> } //<S2SV> * rate_ = best_rate ; //<S2SV> } //<S2SV> 