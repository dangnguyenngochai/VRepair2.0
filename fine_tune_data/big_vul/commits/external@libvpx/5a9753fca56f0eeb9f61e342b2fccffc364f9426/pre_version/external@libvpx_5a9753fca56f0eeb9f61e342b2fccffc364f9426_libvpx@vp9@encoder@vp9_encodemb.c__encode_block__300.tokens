static void encode_block ( int plane , int block , BLOCK_SIZE plane_bsize , //<S2SV> TX_SIZE tx_size , void * arg ) { //<S2SV> struct encode_b_args * const args = arg ; //<S2SV> MACROBLOCK * const x = args -> x ; //<S2SV> MACROBLOCKD * const xd = & x -> e_mbd ; //<S2SV> struct optimize_ctx * const ctx = args -> ctx ; //<S2SV> struct macroblock_plane * const p = & x -> plane [ plane ] ; //<S2SV> struct macroblockd_plane * const pd = & xd -> plane [ plane ] ; //<S2SV> int16_t * const dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; //<S2SV> int i , j ; //<S2SV> uint8_t * dst ; //<S2SV> ENTROPY_CONTEXT * a , * l ; //<S2SV> txfrm_block_to_raster_xy ( plane_bsize , tx_size , block , & i , & j ) ; //<S2SV> dst = & pd -> dst . buf [ 4 * j * pd -> dst . stride + 4 * i ] ; //<S2SV> a = & ctx -> ta [ plane ] [ i ] ; //<S2SV> l = & ctx -> tl [ plane ] [ j ] ; //<S2SV> if ( x -> zcoeff_blk [ tx_size ] [ block ] && plane == 0 ) { //<S2SV> p -> eobs [ block ] = 0 ; //<S2SV> * a = * l = 0 ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( ! x -> skip_recode ) //<S2SV> vp9_xform_quant ( x , plane , block , plane_bsize , tx_size ) ; //<S2SV> if ( x -> optimize && ( ! x -> skip_recode || ! x -> skip_optimize ) ) { //<S2SV> optimize_b ( plane , block , plane_bsize , tx_size , x , a , l ) ; //<S2SV> } else { //<S2SV> * a = * l = p -> eobs [ block ] > 0 ; //<S2SV> } //<S2SV> if ( p -> eobs [ block ] ) //<S2SV> * ( args -> skip ) = 0 ; //<S2SV> if ( x -> skip_encode || p -> eobs [ block ] == 0 ) //<S2SV> return ; //<S2SV> switch ( tx_size ) { //<S2SV> case TX_32X32 : //<S2SV> vp9_idct32x32_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; //<S2SV> break ; //<S2SV> case TX_16X16 : //<S2SV> vp9_idct16x16_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; //<S2SV> break ; //<S2SV> case TX_8X8 : //<S2SV> vp9_idct8x8_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; //<S2SV> break ; //<S2SV> case TX_4X4 : //<S2SV> xd -> itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> assert ( 0 && "Invalid<S2SV_blank>transform<S2SV_blank>size" ) ; //<S2SV> } //<S2SV> } //<S2SV> 