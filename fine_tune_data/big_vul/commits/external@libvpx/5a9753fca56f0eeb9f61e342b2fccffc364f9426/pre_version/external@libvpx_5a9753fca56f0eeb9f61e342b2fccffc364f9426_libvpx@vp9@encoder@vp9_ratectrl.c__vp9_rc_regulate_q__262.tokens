int vp9_rc_regulate_q ( const VP9_COMP * cpi , int target_bits_per_frame , //<S2SV> int active_best_quality , int active_worst_quality ) { //<S2SV> const VP9_COMMON * const cm = & cpi -> common ; //<S2SV> int q = active_worst_quality ; //<S2SV> int last_error = INT_MAX ; //<S2SV> int i , target_bits_per_mb ; //<S2SV> const double correction_factor = get_rate_correction_factor ( cpi ) ; //<S2SV> target_bits_per_mb = //<S2SV> ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; //<S2SV> i = active_best_quality ; //<S2SV> do { //<S2SV> const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type , i , //<S2SV> correction_factor ) ; //<S2SV> if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { //<S2SV> if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) //<S2SV> q = i ; //<S2SV> else //<S2SV> q = i - 1 ; //<S2SV> break ; //<S2SV> } else { //<S2SV> last_error = bits_per_mb_at_this_q - target_bits_per_mb ; //<S2SV> } //<S2SV> } while ( ++ i <= active_worst_quality ) ; //<S2SV> return q ; //<S2SV> } //<S2SV> 