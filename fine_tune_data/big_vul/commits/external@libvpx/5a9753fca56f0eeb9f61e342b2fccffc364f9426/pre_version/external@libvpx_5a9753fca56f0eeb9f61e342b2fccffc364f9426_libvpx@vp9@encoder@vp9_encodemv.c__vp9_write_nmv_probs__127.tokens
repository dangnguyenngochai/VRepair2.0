void vp9_write_nmv_probs ( VP9_COMMON * cm , int usehp , vp9_writer * w ) { //<S2SV> int i , j ; //<S2SV> nmv_context * const mvc = & cm -> fc . nmvc ; //<S2SV> nmv_context_counts * const counts = & cm -> counts . mv ; //<S2SV> write_mv_update ( vp9_mv_joint_tree , mvc -> joints , counts -> joints , MV_JOINTS , w ) ; //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> nmv_component * comp = & mvc -> comps [ i ] ; //<S2SV> nmv_component_counts * comp_counts = & counts -> comps [ i ] ; //<S2SV> update_mv ( w , comp_counts -> sign , & comp -> sign , MV_UPDATE_PROB ) ; //<S2SV> write_mv_update ( vp9_mv_class_tree , comp -> classes , comp_counts -> classes , //<S2SV> MV_CLASSES , w ) ; //<S2SV> write_mv_update ( vp9_mv_class0_tree , comp -> class0 , comp_counts -> class0 , //<S2SV> CLASS0_SIZE , w ) ; //<S2SV> for ( j = 0 ; j < MV_OFFSET_BITS ; ++ j ) //<S2SV> update_mv ( w , comp_counts -> bits [ j ] , & comp -> bits [ j ] , MV_UPDATE_PROB ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> for ( j = 0 ; j < CLASS0_SIZE ; ++ j ) //<S2SV> write_mv_update ( vp9_mv_fp_tree , mvc -> comps [ i ] . class0_fp [ j ] , //<S2SV> counts -> comps [ i ] . class0_fp [ j ] , MV_FP_SIZE , w ) ; //<S2SV> write_mv_update ( vp9_mv_fp_tree , mvc -> comps [ i ] . fp , counts -> comps [ i ] . fp , //<S2SV> MV_FP_SIZE , w ) ; //<S2SV> } //<S2SV> if ( usehp ) { //<S2SV> for ( i = 0 ; i < 2 ; ++ i ) { //<S2SV> update_mv ( w , counts -> comps [ i ] . class0_hp , & mvc -> comps [ i ] . class0_hp , //<S2SV> MV_UPDATE_PROB ) ; //<S2SV> update_mv ( w , counts -> comps [ i ] . hp , & mvc -> comps [ i ] . hp , MV_UPDATE_PROB ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 