void vp9_update_layer_context_change_config ( VP9_COMP * const cpi , //<S2SV> const int target_bandwidth ) { //<S2SV> SVC * const svc = & cpi -> svc ; //<S2SV> const VP9_CONFIG * const oxcf = & cpi -> oxcf ; //<S2SV> const RATE_CONTROL * const rc = & cpi -> rc ; //<S2SV> int layer ; //<S2SV> int layer_end ; //<S2SV> float bitrate_alloc = 1.0 ; //<S2SV> if ( svc -> number_temporal_layers > 1 ) { //<S2SV> layer_end = svc -> number_temporal_layers ; //<S2SV> } else { //<S2SV> layer_end = svc -> number_spatial_layers ; //<S2SV> } //<S2SV> for ( layer = 0 ; layer < layer_end ; ++ layer ) { //<S2SV> LAYER_CONTEXT * const lc = & svc -> layer_context [ layer ] ; //<S2SV> RATE_CONTROL * const lrc = & lc -> rc ; //<S2SV> if ( svc -> number_temporal_layers > 1 ) { //<S2SV> lc -> target_bandwidth = oxcf -> ts_target_bitrate [ layer ] * 1000 ; //<S2SV> } else { //<S2SV> lc -> target_bandwidth = oxcf -> ss_target_bitrate [ layer ] * 1000 ; //<S2SV> } //<S2SV> bitrate_alloc = ( float ) lc -> target_bandwidth / target_bandwidth ; //<S2SV> lc -> starting_buffer_level = //<S2SV> ( int64_t ) ( oxcf -> starting_buffer_level * bitrate_alloc ) ; //<S2SV> lc -> optimal_buffer_level = //<S2SV> ( int64_t ) ( oxcf -> optimal_buffer_level * bitrate_alloc ) ; //<S2SV> lc -> maximum_buffer_size = //<S2SV> ( int64_t ) ( oxcf -> maximum_buffer_size * bitrate_alloc ) ; //<S2SV> lrc -> bits_off_target = MIN ( lrc -> bits_off_target , lc -> maximum_buffer_size ) ; //<S2SV> lrc -> buffer_level = MIN ( lrc -> buffer_level , lc -> maximum_buffer_size ) ; //<S2SV> if ( svc -> number_temporal_layers > 1 ) { //<S2SV> lc -> framerate = oxcf -> framerate / oxcf -> ts_rate_decimator [ layer ] ; //<S2SV> } else { //<S2SV> lc -> framerate = oxcf -> framerate ; //<S2SV> } //<S2SV> lrc -> av_per_frame_bandwidth = ( int ) ( lc -> target_bandwidth / lc -> framerate ) ; //<S2SV> lrc -> max_frame_bandwidth = rc -> max_frame_bandwidth ; //<S2SV> lrc -> worst_quality = rc -> worst_quality ; //<S2SV> lrc -> best_quality = rc -> best_quality ; //<S2SV> } //<S2SV> } //<S2SV> 