void vp9_rc_get_second_pass_params ( VP9_COMP * cpi ) { //<S2SV> VP9_COMMON * const cm = & cpi -> common ; //<S2SV> RATE_CONTROL * const rc = & cpi -> rc ; //<S2SV> struct twopass_rc * const twopass = & cpi -> twopass ; //<S2SV> int frames_left ; //<S2SV> FIRSTPASS_STATS this_frame ; //<S2SV> FIRSTPASS_STATS this_frame_copy ; //<S2SV> double this_frame_intra_error ; //<S2SV> double this_frame_coded_error ; //<S2SV> int target ; //<S2SV> LAYER_CONTEXT * lc = NULL ; //<S2SV> int is_spatial_svc = ( cpi -> use_svc && cpi -> svc . number_temporal_layers == 1 ) ; //<S2SV> if ( is_spatial_svc ) { //<S2SV> lc = & cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id ] ; //<S2SV> frames_left = ( int ) ( twopass -> total_stats . count - //<S2SV> lc -> current_video_frame_in_layer ) ; //<S2SV> } else { //<S2SV> frames_left = ( int ) ( twopass -> total_stats . count - //<S2SV> cm -> current_video_frame ) ; //<S2SV> } //<S2SV> if ( ! twopass -> stats_in ) //<S2SV> return ; //<S2SV> if ( cpi -> refresh_alt_ref_frame ) { //<S2SV> cm -> frame_type = INTER_FRAME ; //<S2SV> vp9_rc_set_frame_target ( cpi , twopass -> gf_bits ) ; //<S2SV> return ; //<S2SV> } //<S2SV> vp9_clear_system_state ( ) ; //<S2SV> if ( is_spatial_svc && twopass -> kf_intra_err_min == 0 ) { //<S2SV> twopass -> kf_intra_err_min = KF_MB_INTRA_MIN * cpi -> common . MBs ; //<S2SV> twopass -> gf_intra_err_min = GF_MB_INTRA_MIN * cpi -> common . MBs ; //<S2SV> } //<S2SV> if ( cpi -> oxcf . end_usage == USAGE_CONSTANT_QUALITY ) { //<S2SV> twopass -> active_worst_quality = cpi -> oxcf . cq_level ; //<S2SV> } else if ( cm -> current_video_frame == 0 || //<S2SV> ( is_spatial_svc && lc -> current_video_frame_in_layer == 0 ) ) { //<S2SV> const int section_target_bandwidth = ( int ) ( twopass -> bits_left / //<S2SV> frames_left ) ; //<S2SV> const int tmp_q = vp9_twopass_worst_quality ( cpi , & twopass -> total_left_stats , //<S2SV> section_target_bandwidth ) ; //<S2SV> twopass -> active_worst_quality = tmp_q ; //<S2SV> rc -> ni_av_qi = tmp_q ; //<S2SV> rc -> avg_q = vp9_convert_qindex_to_q ( tmp_q ) ; //<S2SV> } //<S2SV> vp9_zero ( this_frame ) ; //<S2SV> if ( EOF == input_stats ( twopass , & this_frame ) ) //<S2SV> return ; //<S2SV> this_frame_intra_error = this_frame . intra_error ; //<S2SV> this_frame_coded_error = this_frame . coded_error ; //<S2SV> if ( rc -> frames_to_key == 0 || //<S2SV> ( cm -> frame_flags & FRAMEFLAGS_KEY ) ) { //<S2SV> this_frame_copy = this_frame ; //<S2SV> find_next_key_frame ( cpi , & this_frame_copy ) ; //<S2SV> if ( cpi -> use_svc && cpi -> svc . number_temporal_layers == 1 && //<S2SV> cpi -> svc . spatial_layer_id > 0 ) { //<S2SV> cm -> frame_type = INTER_FRAME ; //<S2SV> } //<S2SV> } else { //<S2SV> cm -> frame_type = INTER_FRAME ; //<S2SV> } //<S2SV> if ( rc -> frames_till_gf_update_due == 0 ) { //<S2SV> this_frame_copy = this_frame ; //<S2SV> # if CONFIG_MULTIPLE_ARF //<S2SV> if ( cpi -> multi_arf_enabled ) { //<S2SV> define_fixed_arf_period ( cpi ) ; //<S2SV> } else { //<S2SV> # endif //<S2SV> define_gf_group ( cpi , & this_frame_copy ) ; //<S2SV> # if CONFIG_MULTIPLE_ARF //<S2SV> } //<S2SV> # endif //<S2SV> if ( twopass -> gf_zeromotion_pct > 995 ) { //<S2SV> if ( ! cm -> show_frame ) //<S2SV> cpi -> allow_encode_breakout = ENCODE_BREAKOUT_DISABLED ; //<S2SV> else //<S2SV> cpi -> allow_encode_breakout = ENCODE_BREAKOUT_LIMITED ; //<S2SV> } //<S2SV> rc -> frames_till_gf_update_due = rc -> baseline_gf_interval ; //<S2SV> cpi -> refresh_golden_frame = 1 ; //<S2SV> } else { //<S2SV> this_frame_copy = this_frame ; //<S2SV> assign_std_frame_bits ( cpi , & this_frame_copy ) ; //<S2SV> } //<S2SV> twopass -> this_iiratio = ( int ) ( this_frame_intra_error / //<S2SV> DOUBLE_DIVIDE_CHECK ( this_frame_coded_error ) ) ; //<S2SV> { //<S2SV> FIRSTPASS_STATS next_frame ; //<S2SV> if ( lookup_next_frame_stats ( twopass , & next_frame ) != EOF ) { //<S2SV> twopass -> next_iiratio = ( int ) ( next_frame . intra_error / //<S2SV> DOUBLE_DIVIDE_CHECK ( next_frame . coded_error ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpi -> common . frame_type == KEY_FRAME ) //<S2SV> target = vp9_rc_clamp_iframe_target_size ( cpi , rc -> this_frame_target ) ; //<S2SV> else //<S2SV> target = vp9_rc_clamp_pframe_target_size ( cpi , rc -> this_frame_target ) ; //<S2SV> vp9_rc_set_frame_target ( cpi , target ) ; //<S2SV> subtract_stats ( & twopass -> total_left_stats , & this_frame ) ; //<S2SV> } //<S2SV> 