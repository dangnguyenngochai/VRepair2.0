static void calc_av_activity ( VP8_COMP * cpi , int64_t activity_sum ) //<S2SV> { //<S2SV> # if ACT_MEDIAN //<S2SV> { //<S2SV> unsigned int median ; //<S2SV> unsigned int i , j ; //<S2SV> unsigned int * sortlist ; //<S2SV> unsigned int tmp ; //<S2SV> CHECK_MEM_ERROR ( sortlist , //<S2SV> vpx_calloc ( sizeof ( unsigned int ) , //<S2SV> cpi -> common . MBs ) ) ; //<S2SV> vpx_memcpy ( sortlist , cpi -> mb_activity_map , //<S2SV> sizeof ( unsigned int ) * cpi -> common . MBs ) ; //<S2SV> for ( i = 1 ; i < cpi -> common . MBs ; i ++ ) //<S2SV> { //<S2SV> for ( j = i ; j > 0 ; j -- ) //<S2SV> { //<S2SV> if ( sortlist [ j ] < sortlist [ j - 1 ] ) //<S2SV> { //<S2SV> tmp = sortlist [ j - 1 ] ; //<S2SV> sortlist [ j - 1 ] = sortlist [ j ] ; //<S2SV> sortlist [ j ] = tmp ; //<S2SV> } //<S2SV> else //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> median = ( 1 + sortlist [ cpi -> common . MBs >> 1 ] + //<S2SV> sortlist [ ( cpi -> common . MBs >> 1 ) + 1 ] ) >> 1 ; //<S2SV> cpi -> activity_avg = median ; //<S2SV> vpx_free ( sortlist ) ; //<S2SV> } //<S2SV> # else //<S2SV> cpi -> activity_avg = ( unsigned int ) ( activity_sum / cpi -> common . MBs ) ; //<S2SV> # endif //<S2SV> if ( cpi -> activity_avg < VP8_ACTIVITY_AVG_MIN ) //<S2SV> cpi -> activity_avg = VP8_ACTIVITY_AVG_MIN ; //<S2SV> if ( ALT_ACT_MEASURE ) //<S2SV> cpi -> activity_avg = 100000 ; //<S2SV> } //<S2SV> 