void vp8_decoder_remove_threads ( VP8D_COMP * pbi ) //<S2SV> { //<S2SV> if ( pbi -> b_multithreaded_rd ) //<S2SV> { //<S2SV> int i ; //<S2SV> pbi -> b_multithreaded_rd = 0 ; //<S2SV> for ( i = 0 ; i < pbi -> allocated_decoding_thread_count ; i ++ ) //<S2SV> { //<S2SV> sem_post ( & pbi -> h_event_start_decoding [ i ] ) ; //<S2SV> pthread_join ( pbi -> h_decoding_thread [ i ] , NULL ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < pbi -> allocated_decoding_thread_count ; i ++ ) //<S2SV> { //<S2SV> sem_destroy ( & pbi -> h_event_start_decoding [ i ] ) ; //<S2SV> } //<S2SV> sem_destroy ( & pbi -> h_event_end_decoding ) ; //<S2SV> vpx_free ( pbi -> h_decoding_thread ) ; //<S2SV> pbi -> h_decoding_thread = NULL ; //<S2SV> vpx_free ( pbi -> h_event_start_decoding ) ; //<S2SV> pbi -> h_event_start_decoding = NULL ; //<S2SV> vpx_free ( pbi -> mb_row_di ) ; //<S2SV> pbi -> mb_row_di = NULL ; //<S2SV> vpx_free ( pbi -> de_thread_data ) ; //<S2SV> pbi -> de_thread_data = NULL ; //<S2SV> } //<S2SV> } //<S2SV> 