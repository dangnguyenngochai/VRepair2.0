static void scsi_write_data ( SCSIRequest * req ) //<S2SV> { //<S2SV> SCSIDiskReq * r = DO_UPCAST ( SCSIDiskReq , req , req ) ; //<S2SV> SCSIDiskState * s = DO_UPCAST ( SCSIDiskState , qdev , r -> req . dev ) ; //<S2SV> uint32_t n ; //<S2SV> assert ( r -> req . aiocb == NULL ) ; //<S2SV> if ( r -> req . cmd . mode != SCSI_XFER_TO_DEV ) { //<S2SV> DPRINTF ( "Data<S2SV_blank>transfer<S2SV_blank>direction<S2SV_blank>invalid\\n" ) ; //<S2SV> scsi_write_complete ( r , - EINVAL ) ; //<S2SV> return ; //<S2SV> } //<S2SV> n = r -> qiov . size / 512 ; //<S2SV> if ( n ) { //<S2SV> if ( s -> tray_open ) { //<S2SV> scsi_write_complete ( r , - ENOMEDIUM ) ; //<S2SV> } //<S2SV> bdrv_acct_start ( s -> bs , & r -> acct , n * BDRV_SECTOR_SIZE , BDRV_ACCT_WRITE ) ; //<S2SV> r -> req . aiocb = bdrv_aio_writev ( s -> bs , r -> sector , & r -> qiov , n , //<S2SV> scsi_write_complete , r ) ; //<S2SV> if ( r -> req . aiocb == NULL ) { //<S2SV> scsi_write_complete ( r , - ENOMEM ) ; //<S2SV> } //<S2SV> } else { //<S2SV> scsi_write_complete ( r , 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> 