protected int //<S2SV> file_trycdf ( struct magic_set * ms , int fd , const unsigned char * buf , //<S2SV> size_t nbytes ) //<S2SV> { //<S2SV> cdf_info_t info ; //<S2SV> cdf_header_t h ; //<S2SV> cdf_sat_t sat , ssat ; //<S2SV> cdf_stream_t sst , scn ; //<S2SV> cdf_dir_t dir ; //<S2SV> int i ; //<S2SV> const char * expn = "" ; //<S2SV> const char * corrupt = "corrupt:<S2SV_blank>" ; //<S2SV> info . i_fd = fd ; //<S2SV> info . i_buf = buf ; //<S2SV> info . i_len = nbytes ; //<S2SV> if ( ms -> flags & MAGIC_APPLE ) //<S2SV> return 0 ; //<S2SV> if ( cdf_read_header ( & info , & h ) == - 1 ) //<S2SV> return 0 ; //<S2SV> # ifdef CDF_DEBUG //<S2SV> cdf_dump_header ( & h ) ; //<S2SV> # endif //<S2SV> if ( ( i = cdf_read_sat ( & info , & h , & sat ) ) == - 1 ) { //<S2SV> expn = "Can\'t<S2SV_blank>read<S2SV_blank>SAT" ; //<S2SV> goto out0 ; //<S2SV> } //<S2SV> # ifdef CDF_DEBUG //<S2SV> cdf_dump_sat ( "SAT" , & sat , CDF_SEC_SIZE ( & h ) ) ; //<S2SV> # endif //<S2SV> if ( ( i = cdf_read_ssat ( & info , & h , & sat , & ssat ) ) == - 1 ) { //<S2SV> expn = "Can\'t<S2SV_blank>read<S2SV_blank>SSAT" ; //<S2SV> goto out1 ; //<S2SV> } //<S2SV> # ifdef CDF_DEBUG //<S2SV> cdf_dump_sat ( "SSAT" , & ssat , CDF_SHORT_SEC_SIZE ( & h ) ) ; //<S2SV> # endif //<S2SV> if ( ( i = cdf_read_dir ( & info , & h , & sat , & dir ) ) == - 1 ) { //<S2SV> expn = "Can\'t<S2SV_blank>read<S2SV_blank>directory" ; //<S2SV> goto out2 ; //<S2SV> } //<S2SV> const cdf_directory_t * root_storage ; //<S2SV> if ( ( i = cdf_read_short_stream ( & info , & h , & sat , & dir , & sst , //<S2SV> & root_storage ) ) == - 1 ) { //<S2SV> expn = "Cannot<S2SV_blank>read<S2SV_blank>short<S2SV_blank>stream" ; //<S2SV> goto out3 ; //<S2SV> } //<S2SV> # ifdef CDF_DEBUG //<S2SV> cdf_dump_dir ( & info , & h , & sat , & ssat , & sst , & dir ) ; //<S2SV> # endif //<S2SV> # ifdef notdef //<S2SV> if ( root_storage ) { //<S2SV> if ( NOTMIME ( ms ) ) { //<S2SV> char clsbuf [ 128 ] ; //<S2SV> if ( file_printf ( ms , "CLSID<S2SV_blank>%s,<S2SV_blank>" , //<S2SV> format_clsid ( clsbuf , sizeof ( clsbuf ) , //<S2SV> root_storage -> d_storage_uuid ) ) == - 1 ) //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> if ( ( i = cdf_read_summary_info ( & info , & h , & sat , & ssat , & sst , & dir , //<S2SV> & scn ) ) == - 1 ) { //<S2SV> if ( errno == ESRCH ) { //<S2SV> corrupt = expn ; //<S2SV> expn = "No<S2SV_blank>summary<S2SV_blank>info" ; //<S2SV> } else { //<S2SV> expn = "Cannot<S2SV_blank>read<S2SV_blank>summary<S2SV_blank>info" ; //<S2SV> } //<S2SV> goto out4 ; //<S2SV> } //<S2SV> # ifdef CDF_DEBUG //<S2SV> cdf_dump_summary_info ( & h , & scn ) ; //<S2SV> # endif //<S2SV> if ( ( i = cdf_file_summary_info ( ms , & h , & scn , root_storage ) ) < 0 ) //<S2SV> expn = "Can\'t<S2SV_blank>expand<S2SV_blank>summary_info" ; //<S2SV> if ( i == 0 ) { //<S2SV> const char * str = NULL ; //<S2SV> cdf_directory_t * d ; //<S2SV> char name [ __arraycount ( d -> d_name ) ] ; //<S2SV> size_t j , k ; //<S2SV> for ( j = 0 ; str == NULL && j < dir . dir_len ; j ++ ) { //<S2SV> d = & dir . dir_tab [ j ] ; //<S2SV> for ( k = 0 ; k < sizeof ( name ) ; k ++ ) //<S2SV> name [ k ] = ( char ) cdf_tole2 ( d -> d_name [ k ] ) ; //<S2SV> str = cdf_app_to_mime ( name , //<S2SV> NOTMIME ( ms ) ? name2desc : name2mime ) ; //<S2SV> } //<S2SV> if ( NOTMIME ( ms ) ) { //<S2SV> if ( str != NULL ) { //<S2SV> if ( file_printf ( ms , "%s" , str ) == - 1 ) //<S2SV> return - 1 ; //<S2SV> i = 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> if ( str == NULL ) //<S2SV> str = "vnd.ms-office" ; //<S2SV> if ( file_printf ( ms , "application/%s" , str ) == - 1 ) //<S2SV> return - 1 ; //<S2SV> i = 1 ; //<S2SV> } //<S2SV> } //<S2SV> free ( scn . sst_tab ) ; //<S2SV> out4 : //<S2SV> free ( sst . sst_tab ) ; //<S2SV> out3 : //<S2SV> free ( dir . dir_tab ) ; //<S2SV> out2 : //<S2SV> free ( ssat . sat_tab ) ; //<S2SV> out1 : //<S2SV> free ( sat . sat_tab ) ; //<S2SV> out0 : //<S2SV> if ( i == - 1 ) { //<S2SV> if ( NOTMIME ( ms ) ) { //<S2SV> if ( file_printf ( ms , //<S2SV> "Composite<S2SV_blank>Document<S2SV_blank>File<S2SV_blank>V2<S2SV_blank>Document" ) == - 1 ) //<S2SV> return - 1 ; //<S2SV> if ( * expn ) //<S2SV> if ( file_printf ( ms , ",<S2SV_blank>%s%s" , corrupt , expn ) == - 1 ) //<S2SV> return - 1 ; //<S2SV> } else { //<S2SV> if ( file_printf ( ms , "application/CDFV2-corrupt" ) == - 1 ) //<S2SV> return - 1 ; //<S2SV> } //<S2SV> i = 1 ; //<S2SV> } //<S2SV> return i ; //<S2SV> } //<S2SV> 