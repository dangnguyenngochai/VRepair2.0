private int //<S2SV> cdf_file_summary_info ( struct magic_set * ms , const cdf_header_t * h , //<S2SV> const cdf_stream_t * sst , const cdf_directory_t * root_storage ) //<S2SV> { //<S2SV> cdf_summary_info_header_t si ; //<S2SV> cdf_property_info_t * info ; //<S2SV> size_t count ; //<S2SV> int m ; //<S2SV> if ( cdf_unpack_summary_info ( sst , h , & si , & info , & count ) == - 1 ) //<S2SV> return - 1 ; //<S2SV> if ( NOTMIME ( ms ) ) { //<S2SV> const char * str ; //<S2SV> if ( file_printf ( ms , "Composite<S2SV_blank>Document<S2SV_blank>File<S2SV_blank>V2<S2SV_blank>Document" ) //<S2SV> == - 1 ) //<S2SV> return - 1 ; //<S2SV> if ( file_printf ( ms , ",<S2SV_blank>%s<S2SV_blank>Endian" , //<S2SV> si . si_byte_order == 0xfffe ? "Little" : "Big" ) == - 1 ) //<S2SV> return - 2 ; //<S2SV> switch ( si . si_os ) { //<S2SV> case 2 : //<S2SV> if ( file_printf ( ms , ",<S2SV_blank>Os:<S2SV_blank>Windows,<S2SV_blank>Version<S2SV_blank>%d.%d" , //<S2SV> si . si_os_version & 0xff , //<S2SV> ( uint32_t ) si . si_os_version >> 8 ) == - 1 ) //<S2SV> return - 2 ; //<S2SV> break ; //<S2SV> case 1 : //<S2SV> if ( file_printf ( ms , ",<S2SV_blank>Os:<S2SV_blank>MacOS,<S2SV_blank>Version<S2SV_blank>%d.%d" , //<S2SV> ( uint32_t ) si . si_os_version >> 8 , //<S2SV> si . si_os_version & 0xff ) == - 1 ) //<S2SV> return - 2 ; //<S2SV> break ; //<S2SV> default : //<S2SV> if ( file_printf ( ms , ",<S2SV_blank>Os<S2SV_blank>%d,<S2SV_blank>Version:<S2SV_blank>%d.%d" , si . si_os , //<S2SV> si . si_os_version & 0xff , //<S2SV> ( uint32_t ) si . si_os_version >> 8 ) == - 1 ) //<S2SV> return - 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( root_storage ) { //<S2SV> str = cdf_clsid_to_mime ( root_storage -> d_storage_uuid , clsid2desc ) ; //<S2SV> if ( str ) //<S2SV> if ( file_printf ( ms , ",<S2SV_blank>%s" , str ) == - 1 ) //<S2SV> return - 2 ; //<S2SV> } //<S2SV> } //<S2SV> m = cdf_file_property_info ( ms , info , count , root_storage ) ; //<S2SV> free ( info ) ; //<S2SV> return m == - 1 ? - 2 : m ; //<S2SV> } //<S2SV> 