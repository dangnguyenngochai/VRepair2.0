static krb5_error_code //<S2SV> krb5_ldap_get_password_policy_from_dn ( krb5_context context , char * pol_name , //<S2SV> char * pol_dn , osa_policy_ent_t * policy ) //<S2SV> { //<S2SV> krb5_error_code st = 0 , tempst = 0 ; //<S2SV> LDAP * ld = NULL ; //<S2SV> LDAPMessage * result = NULL , * ent = NULL ; //<S2SV> kdb5_dal_handle * dal_handle = NULL ; //<S2SV> krb5_ldap_context * ldap_context = NULL ; //<S2SV> krb5_ldap_server_handle * ldap_server_handle = NULL ; //<S2SV> krb5_clear_error_message ( context ) ; //<S2SV> if ( pol_dn == NULL ) //<S2SV> return EINVAL ; //<S2SV> * policy = NULL ; //<S2SV> SETUP_CONTEXT ( ) ; //<S2SV> GET_HANDLE ( ) ; //<S2SV> * ( policy ) = ( osa_policy_ent_t ) malloc ( sizeof ( osa_policy_ent_rec ) ) ; //<S2SV> if ( * policy == NULL ) { //<S2SV> st = ENOMEM ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> memset ( * policy , 0 , sizeof ( osa_policy_ent_rec ) ) ; //<S2SV> LDAP_SEARCH ( pol_dn , LDAP_SCOPE_BASE , "(objectclass=krbPwdPolicy)" , password_policy_attributes ) ; //<S2SV> ent = ldap_first_entry ( ld , result ) ; //<S2SV> if ( ent != NULL ) { //<S2SV> if ( ( st = populate_policy ( context , ld , ent , pol_name , * policy ) ) != 0 ) //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> cleanup : //<S2SV> ldap_msgfree ( result ) ; //<S2SV> if ( st != 0 ) { //<S2SV> if ( * policy != NULL ) { //<S2SV> krb5_ldap_free_password_policy ( context , * policy ) ; //<S2SV> * policy = NULL ; //<S2SV> } //<S2SV> } //<S2SV> krb5_ldap_put_handle_to_pool ( ldap_context , ldap_server_handle ) ; //<S2SV> return st ; //<S2SV> } //<S2SV> 