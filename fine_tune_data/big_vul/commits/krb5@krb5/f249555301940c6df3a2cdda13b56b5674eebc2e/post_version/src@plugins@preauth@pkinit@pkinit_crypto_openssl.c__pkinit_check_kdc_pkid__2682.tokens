krb5_error_code //<S2SV> pkinit_check_kdc_pkid ( krb5_context context , //<S2SV> pkinit_plg_crypto_context plg_cryptoctx , //<S2SV> pkinit_req_crypto_context req_cryptoctx , //<S2SV> pkinit_identity_crypto_context id_cryptoctx , //<S2SV> unsigned char * pdid_buf , //<S2SV> unsigned int pkid_len , //<S2SV> int * valid_kdcPkId ) //<S2SV> { //<S2SV> krb5_error_code retval = KRB5KDC_ERR_PREAUTH_FAILED ; //<S2SV> PKCS7_ISSUER_AND_SERIAL * is = NULL ; //<S2SV> const unsigned char * p = pdid_buf ; //<S2SV> int status = 1 ; //<S2SV> X509 * kdc_cert = sk_X509_value ( id_cryptoctx -> my_certs , id_cryptoctx -> cert_index ) ; //<S2SV> * valid_kdcPkId = 0 ; //<S2SV> pkiDebug ( "found<S2SV_blank>kdcPkId<S2SV_blank>in<S2SV_blank>AS<S2SV_blank>REQ\\n" ) ; //<S2SV> is = d2i_PKCS7_ISSUER_AND_SERIAL ( NULL , & p , ( int ) pkid_len ) ; //<S2SV> if ( is == NULL ) //<S2SV> return retval ; //<S2SV> status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ) , is -> issuer ) ; //<S2SV> if ( ! status ) { //<S2SV> status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ) , is -> serial ) ; //<S2SV> if ( ! status ) //<S2SV> * valid_kdcPkId = 1 ; //<S2SV> } //<S2SV> retval = 0 ; //<S2SV> X509_NAME_free ( is -> issuer ) ; //<S2SV> ASN1_INTEGER_free ( is -> serial ) ; //<S2SV> free ( is ) ; //<S2SV> return retval ; //<S2SV> } //<S2SV> 