kadm5_ret_t //<S2SV> kadm5_randkey_principal_3 ( void * server_handle , //<S2SV> krb5_principal principal , //<S2SV> krb5_boolean keepold , //<S2SV> int n_ks_tuple , krb5_key_salt_tuple * ks_tuple , //<S2SV> krb5_keyblock * * keyblocks , //<S2SV> int * n_keys ) //<S2SV> { //<S2SV> krb5_db_entry * kdb ; //<S2SV> osa_princ_ent_rec adb ; //<S2SV> krb5_int32 now ; //<S2SV> kadm5_policy_ent_rec pol ; //<S2SV> int ret , last_pwd ; //<S2SV> krb5_boolean have_pol = FALSE ; //<S2SV> kadm5_server_handle_t handle = server_handle ; //<S2SV> krb5_keyblock * act_mkey ; //<S2SV> krb5_kvno act_kvno ; //<S2SV> int new_n_ks_tuple = 0 ; //<S2SV> krb5_key_salt_tuple * new_ks_tuple = NULL ; //<S2SV> if ( keyblocks ) //<S2SV> * keyblocks = NULL ; //<S2SV> CHECK_HANDLE ( server_handle ) ; //<S2SV> krb5_clear_error_message ( handle -> context ) ; //<S2SV> if ( principal == NULL ) //<S2SV> return EINVAL ; //<S2SV> if ( ( ret = kdb_get_entry ( handle , principal , & kdb , & adb ) ) ) //<S2SV> return ( ret ) ; //<S2SV> ret = apply_keysalt_policy ( handle , adb . policy , n_ks_tuple , ks_tuple , //<S2SV> & new_n_ks_tuple , & new_ks_tuple ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> if ( krb5_principal_compare ( handle -> context , principal , hist_princ ) ) { //<S2SV> if ( keepold ) //<S2SV> return KADM5_PROTECT_PRINCIPAL ; //<S2SV> new_n_ks_tuple = 1 ; //<S2SV> } //<S2SV> ret = kdb_get_active_mkey ( handle , & act_kvno , & act_mkey ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> ret = krb5_dbe_crk ( handle -> context , act_mkey , new_ks_tuple , new_n_ks_tuple , //<S2SV> keepold , kdb ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> ret = krb5_dbe_update_mkvno ( handle -> context , kdb , act_kvno ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> kdb -> attributes &= ~ KRB5_KDB_REQUIRES_PWCHANGE ; //<S2SV> ret = krb5_timeofday ( handle -> context , & now ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> if ( ( adb . aux_attributes & KADM5_POLICY ) ) { //<S2SV> ret = get_policy ( handle , adb . policy , & pol , & have_pol ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> } //<S2SV> if ( have_pol ) { //<S2SV> ret = krb5_dbe_lookup_last_pwd_change ( handle -> context , kdb , & last_pwd ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> # if 0 //<S2SV> if ( ( now - last_pwd ) < pol . pw_min_life && //<S2SV> ! ( kdb -> attributes & KRB5_KDB_REQUIRES_PWCHANGE ) ) { //<S2SV> ret = KADM5_PASS_TOOSOON ; //<S2SV> goto done ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( pol . pw_max_life ) //<S2SV> kdb -> pw_expiration = now + pol . pw_max_life ; //<S2SV> else //<S2SV> kdb -> pw_expiration = 0 ; //<S2SV> } else { //<S2SV> kdb -> pw_expiration = 0 ; //<S2SV> } //<S2SV> ret = krb5_dbe_update_last_pwd_change ( handle -> context , kdb , now ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> kdb -> fail_auth_count = 0 ; //<S2SV> if ( keyblocks ) { //<S2SV> ret = decrypt_key_data ( handle -> context , //<S2SV> kdb -> n_key_data , kdb -> key_data , //<S2SV> keyblocks , n_keys ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> } //<S2SV> kdb -> mask = KADM5_KEY_DATA | KADM5_FAIL_AUTH_COUNT ; //<S2SV> ; //<S2SV> ret = k5_kadm5_hook_chpass ( handle -> context , handle -> hook_handles , //<S2SV> KADM5_HOOK_STAGE_PRECOMMIT , principal , keepold , //<S2SV> new_n_ks_tuple , new_ks_tuple , NULL ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> if ( ( ret = kdb_put_entry ( handle , kdb , & adb ) ) ) //<S2SV> goto done ; //<S2SV> ( void ) k5_kadm5_hook_chpass ( handle -> context , handle -> hook_handles , //<S2SV> KADM5_HOOK_STAGE_POSTCOMMIT , principal , //<S2SV> keepold , new_n_ks_tuple , new_ks_tuple , NULL ) ; //<S2SV> ret = KADM5_OK ; //<S2SV> done : //<S2SV> free ( new_ks_tuple ) ; //<S2SV> kdb_free_entry ( handle , kdb , & adb ) ; //<S2SV> if ( have_pol ) //<S2SV> kadm5_free_policy_ent ( handle -> lhandle , & pol ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 