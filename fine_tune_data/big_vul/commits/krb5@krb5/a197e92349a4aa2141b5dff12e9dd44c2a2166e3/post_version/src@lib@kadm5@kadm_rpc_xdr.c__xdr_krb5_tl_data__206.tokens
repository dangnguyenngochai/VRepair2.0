bool_t xdr_krb5_tl_data ( XDR * xdrs , krb5_tl_data * * tl_data_head ) //<S2SV> { //<S2SV> krb5_tl_data * tl , * tl2 ; //<S2SV> bool_t more ; //<S2SV> unsigned int len ; //<S2SV> switch ( xdrs -> x_op ) { //<S2SV> case XDR_FREE : //<S2SV> tl = tl2 = * tl_data_head ; //<S2SV> while ( tl ) { //<S2SV> tl2 = tl -> tl_data_next ; //<S2SV> free ( tl -> tl_data_contents ) ; //<S2SV> free ( tl ) ; //<S2SV> tl = tl2 ; //<S2SV> } //<S2SV> * tl_data_head = NULL ; //<S2SV> break ; //<S2SV> case XDR_ENCODE : //<S2SV> tl = * tl_data_head ; //<S2SV> while ( 1 ) { //<S2SV> more = ( tl != NULL ) ; //<S2SV> if ( ! xdr_bool ( xdrs , & more ) ) //<S2SV> return FALSE ; //<S2SV> if ( tl == NULL ) //<S2SV> break ; //<S2SV> if ( ! xdr_krb5_int16 ( xdrs , & tl -> tl_data_type ) ) //<S2SV> return FALSE ; //<S2SV> len = tl -> tl_data_length ; //<S2SV> if ( ! xdr_bytes ( xdrs , ( char * * ) & tl -> tl_data_contents , & len , ~ 0 ) ) //<S2SV> return FALSE ; //<S2SV> tl = tl -> tl_data_next ; //<S2SV> } //<S2SV> break ; //<S2SV> case XDR_DECODE : //<S2SV> tl = NULL ; //<S2SV> while ( 1 ) { //<S2SV> if ( ! xdr_bool ( xdrs , & more ) ) //<S2SV> return FALSE ; //<S2SV> if ( more == FALSE ) //<S2SV> break ; //<S2SV> tl2 = ( krb5_tl_data * ) malloc ( sizeof ( krb5_tl_data ) ) ; //<S2SV> if ( tl2 == NULL ) //<S2SV> return FALSE ; //<S2SV> memset ( tl2 , 0 , sizeof ( krb5_tl_data ) ) ; //<S2SV> if ( ! xdr_krb5_int16 ( xdrs , & tl2 -> tl_data_type ) ) //<S2SV> return FALSE ; //<S2SV> if ( ! xdr_bytes ( xdrs , ( char * * ) & tl2 -> tl_data_contents , & len , ~ 0 ) ) //<S2SV> return FALSE ; //<S2SV> tl2 -> tl_data_length = len ; //<S2SV> tl2 -> tl_data_next = tl ; //<S2SV> tl = tl2 ; //<S2SV> } //<S2SV> * tl_data_head = tl ; //<S2SV> break ; //<S2SV> } //<S2SV> return TRUE ; //<S2SV> } //<S2SV> 