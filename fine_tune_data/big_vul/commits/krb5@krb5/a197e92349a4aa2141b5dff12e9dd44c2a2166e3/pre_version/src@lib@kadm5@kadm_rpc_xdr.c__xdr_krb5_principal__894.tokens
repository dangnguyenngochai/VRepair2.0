bool_t //<S2SV> xdr_krb5_principal ( XDR * xdrs , krb5_principal * objp ) //<S2SV> { //<S2SV> int ret ; //<S2SV> char * p = NULL ; //<S2SV> krb5_principal pr = NULL ; //<S2SV> static krb5_context context = NULL ; //<S2SV> if ( ! context && //<S2SV> kadm5_init_krb5_context ( & context ) ) //<S2SV> return ( FALSE ) ; //<S2SV> switch ( xdrs -> x_op ) { //<S2SV> case XDR_ENCODE : //<S2SV> if ( * objp ) { //<S2SV> if ( ( ret = krb5_unparse_name ( context , * objp , & p ) ) != 0 ) //<S2SV> return FALSE ; //<S2SV> } //<S2SV> if ( ! xdr_nullstring ( xdrs , & p ) ) //<S2SV> return FALSE ; //<S2SV> if ( p ) free ( p ) ; //<S2SV> break ; //<S2SV> case XDR_DECODE : //<S2SV> if ( ! xdr_nullstring ( xdrs , & p ) ) //<S2SV> return FALSE ; //<S2SV> if ( p ) { //<S2SV> ret = krb5_parse_name ( context , p , & pr ) ; //<S2SV> if ( ret != 0 ) //<S2SV> return FALSE ; //<S2SV> * objp = pr ; //<S2SV> free ( p ) ; //<S2SV> } else //<S2SV> * objp = NULL ; //<S2SV> break ; //<S2SV> case XDR_FREE : //<S2SV> if ( * objp != NULL ) //<S2SV> krb5_free_principal ( context , * objp ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return TRUE ; //<S2SV> } //<S2SV> 