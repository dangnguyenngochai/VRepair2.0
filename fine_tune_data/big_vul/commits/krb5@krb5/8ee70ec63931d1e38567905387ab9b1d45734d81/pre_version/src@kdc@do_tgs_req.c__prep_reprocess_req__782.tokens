static krb5_int32 //<S2SV> prep_reprocess_req ( krb5_kdc_req * request , krb5_principal * krbtgt_princ ) //<S2SV> { //<S2SV> krb5_error_code retval = KRB5KRB_AP_ERR_BADMATCH ; //<S2SV> char * * realms , * * cpp , * temp_buf = NULL ; //<S2SV> krb5_data * comp1 = NULL , * comp2 = NULL ; //<S2SV> char * comp1_str = NULL ; //<S2SV> if ( isflagset ( request -> kdc_options , KDC_OPT_CANONICALIZE ) && //<S2SV> ! isflagset ( request -> kdc_options , KDC_OPT_ENC_TKT_IN_SKEY ) && //<S2SV> krb5_princ_size ( kdc_context , request -> server ) == 2 ) { //<S2SV> comp1 = krb5_princ_component ( kdc_context , request -> server , 0 ) ; //<S2SV> comp2 = krb5_princ_component ( kdc_context , request -> server , 1 ) ; //<S2SV> comp1_str = calloc ( 1 , comp1 -> length + 1 ) ; //<S2SV> if ( ! comp1_str ) { //<S2SV> retval = ENOMEM ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> strlcpy ( comp1_str , comp1 -> data , comp1 -> length + 1 ) ; //<S2SV> if ( ( krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_SRV_HST || //<S2SV> krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_SRV_INST || //<S2SV> ( krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_UNKNOWN && //<S2SV> kdc_active_realm -> realm_host_based_services != NULL && //<S2SV> ( krb5_match_config_pattern ( kdc_active_realm -> realm_host_based_services , //<S2SV> comp1_str ) == TRUE || //<S2SV> krb5_match_config_pattern ( kdc_active_realm -> realm_host_based_services , //<S2SV> KRB5_CONF_ASTERISK ) == TRUE ) ) ) && //<S2SV> ( kdc_active_realm -> realm_no_host_referral == NULL || //<S2SV> ( krb5_match_config_pattern ( kdc_active_realm -> realm_no_host_referral , //<S2SV> KRB5_CONF_ASTERISK ) == FALSE && //<S2SV> krb5_match_config_pattern ( kdc_active_realm -> realm_no_host_referral , //<S2SV> comp1_str ) == FALSE ) ) ) { //<S2SV> if ( memchr ( comp2 -> data , '.' , comp2 -> length ) == NULL ) //<S2SV> goto cleanup ; //<S2SV> temp_buf = calloc ( 1 , comp2 -> length + 1 ) ; //<S2SV> if ( ! temp_buf ) { //<S2SV> retval = ENOMEM ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> strlcpy ( temp_buf , comp2 -> data , comp2 -> length + 1 ) ; //<S2SV> retval = krb5int_get_domain_realm_mapping ( kdc_context , temp_buf , & realms ) ; //<S2SV> free ( temp_buf ) ; //<S2SV> if ( retval ) { //<S2SV> kdc_err ( kdc_context , retval , "unable<S2SV_blank>to<S2SV_blank>find<S2SV_blank>realm<S2SV_blank>of<S2SV_blank>host" ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( realms == 0 ) { //<S2SV> retval = KRB5KRB_AP_ERR_BADMATCH ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( realms [ 0 ] == 0 || //<S2SV> data_eq_string ( request -> server -> realm , realms [ 0 ] ) ) { //<S2SV> free ( realms [ 0 ] ) ; //<S2SV> free ( realms ) ; //<S2SV> retval = KRB5KRB_AP_ERR_BADMATCH ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> retval = krb5_build_principal ( kdc_context , krbtgt_princ , //<S2SV> ( * request -> server ) . realm . length , //<S2SV> ( * request -> server ) . realm . data , //<S2SV> "krbtgt" , realms [ 0 ] , ( char * ) 0 ) ; //<S2SV> for ( cpp = realms ; * cpp ; cpp ++ ) //<S2SV> free ( * cpp ) ; //<S2SV> } //<S2SV> } //<S2SV> cleanup : //<S2SV> free ( comp1_str ) ; //<S2SV> return retval ; //<S2SV> } //<S2SV> 