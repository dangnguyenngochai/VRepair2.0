bool_t xdr_nullstring ( XDR * xdrs , char * * objp ) //<S2SV> { //<S2SV> u_int size ; //<S2SV> if ( xdrs -> x_op == XDR_ENCODE ) { //<S2SV> if ( * objp == NULL ) //<S2SV> size = 0 ; //<S2SV> else //<S2SV> size = strlen ( * objp ) + 1 ; //<S2SV> } //<S2SV> if ( ! xdr_u_int ( xdrs , & size ) ) { //<S2SV> return FALSE ; //<S2SV> } //<S2SV> switch ( xdrs -> x_op ) { //<S2SV> case XDR_DECODE : //<S2SV> if ( size == 0 ) { //<S2SV> * objp = NULL ; //<S2SV> return TRUE ; //<S2SV> } else if ( * objp == NULL ) { //<S2SV> * objp = ( char * ) mem_alloc ( size ) ; //<S2SV> if ( * objp == NULL ) { //<S2SV> errno = ENOMEM ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> } //<S2SV> return ( xdr_opaque ( xdrs , * objp , size ) ) ; //<S2SV> case XDR_ENCODE : //<S2SV> if ( size != 0 ) //<S2SV> return ( xdr_opaque ( xdrs , * objp , size ) ) ; //<S2SV> return TRUE ; //<S2SV> case XDR_FREE : //<S2SV> if ( * objp != NULL ) //<S2SV> mem_free ( * objp , size ) ; //<S2SV> * objp = NULL ; //<S2SV> return TRUE ; //<S2SV> } //<S2SV> return FALSE ; //<S2SV> } //<S2SV> 