static krb5_error_code //<S2SV> kdc_process_s4u_x509_user ( krb5_context context , //<S2SV> krb5_kdc_req * request , //<S2SV> krb5_pa_data * pa_data , //<S2SV> krb5_keyblock * tgs_subkey , //<S2SV> krb5_keyblock * tgs_session , //<S2SV> krb5_pa_s4u_x509_user * * s4u_x509_user , //<S2SV> const char * * status ) //<S2SV> { //<S2SV> krb5_error_code code ; //<S2SV> krb5_data req_data ; //<S2SV> req_data . length = pa_data -> length ; //<S2SV> req_data . data = ( char * ) pa_data -> contents ; //<S2SV> code = decode_krb5_pa_s4u_x509_user ( & req_data , s4u_x509_user ) ; //<S2SV> if ( code ) //<S2SV> return code ; //<S2SV> code = verify_s4u_x509_user_checksum ( context , //<S2SV> tgs_subkey ? tgs_subkey : //<S2SV> tgs_session , //<S2SV> & req_data , //<S2SV> request -> nonce , * s4u_x509_user ) ; //<S2SV> if ( code ) { //<S2SV> * status = "INVALID_S4U2SELF_CHECKSUM" ; //<S2SV> krb5_free_pa_s4u_x509_user ( context , * s4u_x509_user ) ; //<S2SV> * s4u_x509_user = NULL ; //<S2SV> return code ; //<S2SV> } //<S2SV> if ( krb5_princ_size ( context , ( * s4u_x509_user ) -> user_id . user ) == 0 || //<S2SV> ( * s4u_x509_user ) -> user_id . subject_cert . length != 0 ) { //<S2SV> * status = "INVALID_S4U2SELF_REQUEST" ; //<S2SV> krb5_free_pa_s4u_x509_user ( context , * s4u_x509_user ) ; //<S2SV> * s4u_x509_user = NULL ; //<S2SV> return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 