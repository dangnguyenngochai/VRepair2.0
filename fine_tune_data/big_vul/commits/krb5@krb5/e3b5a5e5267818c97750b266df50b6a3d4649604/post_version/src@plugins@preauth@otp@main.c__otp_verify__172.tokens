static void //<S2SV> otp_verify ( krb5_context context , krb5_data * req_pkt , krb5_kdc_req * request , //<S2SV> krb5_enc_tkt_part * enc_tkt_reply , krb5_pa_data * pa , //<S2SV> krb5_kdcpreauth_callbacks cb , krb5_kdcpreauth_rock rock , //<S2SV> krb5_kdcpreauth_moddata moddata , //<S2SV> krb5_kdcpreauth_verify_respond_fn respond , void * arg ) //<S2SV> { //<S2SV> krb5_keyblock * armor_key = NULL ; //<S2SV> krb5_pa_otp_req * req = NULL ; //<S2SV> struct request_state * rs ; //<S2SV> krb5_error_code retval ; //<S2SV> krb5_data d , plaintext ; //<S2SV> char * config ; //<S2SV> armor_key = cb -> fast_armor ( context , rock ) ; //<S2SV> if ( armor_key == NULL ) { //<S2SV> retval = KRB5KDC_ERR_PREAUTH_FAILED ; //<S2SV> com_err ( "otp" , retval , "No<S2SV_blank>armor<S2SV_blank>key<S2SV_blank>found<S2SV_blank>when<S2SV_blank>verifying<S2SV_blank>padata" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> d = make_data ( pa -> contents , pa -> length ) ; //<S2SV> retval = decode_krb5_pa_otp_req ( & d , & req ) ; //<S2SV> if ( retval != 0 ) { //<S2SV> com_err ( "otp" , retval , "Unable<S2SV_blank>to<S2SV_blank>decode<S2SV_blank>OTP<S2SV_blank>request" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> retval = decrypt_encdata ( context , armor_key , req , & plaintext ) ; //<S2SV> if ( retval != 0 ) { //<S2SV> com_err ( "otp" , retval , "Unable<S2SV_blank>to<S2SV_blank>decrypt<S2SV_blank>nonce" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> retval = nonce_verify ( context , armor_key , & plaintext ) ; //<S2SV> if ( retval != 0 ) //<S2SV> retval = timestamp_verify ( context , & plaintext ) ; //<S2SV> krb5_free_data_contents ( context , & plaintext ) ; //<S2SV> if ( retval != 0 ) { //<S2SV> com_err ( "otp" , retval , "Unable<S2SV_blank>to<S2SV_blank>verify<S2SV_blank>nonce<S2SV_blank>or<S2SV_blank>timestamp" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> rs = k5alloc ( sizeof ( struct request_state ) , & retval ) ; //<S2SV> if ( rs == NULL ) //<S2SV> goto error ; //<S2SV> rs -> arg = arg ; //<S2SV> rs -> respond = respond ; //<S2SV> rs -> enc_tkt_reply = enc_tkt_reply ; //<S2SV> retval = cb -> get_string ( context , rock , "otp" , & config ) ; //<S2SV> if ( retval == 0 && config == NULL ) //<S2SV> retval = KRB5_PREAUTH_FAILED ; //<S2SV> if ( retval != 0 ) { //<S2SV> free ( rs ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> otp_state_verify ( ( otp_state * ) moddata , cb -> event_context ( context , rock ) , //<S2SV> request -> client , config , req , on_response , rs ) ; //<S2SV> cb -> free_string ( context , rock , config ) ; //<S2SV> k5_free_pa_otp_req ( context , req ) ; //<S2SV> return ; //<S2SV> error : //<S2SV> k5_free_pa_otp_req ( context , req ) ; //<S2SV> ( * respond ) ( arg , retval , NULL , NULL , NULL ) ; //<S2SV> } //<S2SV> 