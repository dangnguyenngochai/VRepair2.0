kadm5_ret_t //<S2SV> kadm5_modify_principal ( void * server_handle , //<S2SV> kadm5_principal_ent_t entry , long mask ) //<S2SV> { //<S2SV> int ret , ret2 , i ; //<S2SV> kadm5_policy_ent_rec pol ; //<S2SV> krb5_boolean have_pol = FALSE ; //<S2SV> krb5_db_entry * kdb ; //<S2SV> krb5_tl_data * tl_data_orig ; //<S2SV> osa_princ_ent_rec adb ; //<S2SV> kadm5_server_handle_t handle = server_handle ; //<S2SV> CHECK_HANDLE ( server_handle ) ; //<S2SV> krb5_clear_error_message ( handle -> context ) ; //<S2SV> if ( entry == NULL ) //<S2SV> return EINVAL ; //<S2SV> if ( ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || //<S2SV> ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || //<S2SV> ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || //<S2SV> ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || //<S2SV> ( mask & KADM5_LAST_FAILED ) ) //<S2SV> return KADM5_BAD_MASK ; //<S2SV> if ( ( mask & ~ ALL_PRINC_MASK ) ) //<S2SV> return KADM5_BAD_MASK ; //<S2SV> if ( ( mask & KADM5_POLICY ) && entry -> policy == NULL ) //<S2SV> return KADM5_BAD_MASK ; //<S2SV> if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) //<S2SV> return KADM5_BAD_MASK ; //<S2SV> if ( mask & KADM5_TL_DATA ) { //<S2SV> tl_data_orig = entry -> tl_data ; //<S2SV> while ( tl_data_orig ) { //<S2SV> if ( tl_data_orig -> tl_data_type < 256 ) //<S2SV> return KADM5_BAD_TL_TYPE ; //<S2SV> tl_data_orig = tl_data_orig -> tl_data_next ; //<S2SV> } //<S2SV> } //<S2SV> ret = kdb_get_entry ( handle , entry -> principal , & kdb , & adb ) ; //<S2SV> if ( ret ) //<S2SV> return ( ret ) ; //<S2SV> if ( ( mask & KADM5_POLICY ) ) { //<S2SV> ret = get_policy ( handle , entry -> policy , & pol , & have_pol ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> adb . aux_attributes |= KADM5_POLICY ; //<S2SV> if ( adb . policy ) //<S2SV> free ( adb . policy ) ; //<S2SV> adb . policy = strdup ( entry -> policy ) ; //<S2SV> } //<S2SV> if ( have_pol ) { //<S2SV> if ( pol . pw_max_life ) { //<S2SV> ret = krb5_dbe_lookup_last_pwd_change ( handle -> context , kdb , //<S2SV> & ( kdb -> pw_expiration ) ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> kdb -> pw_expiration += pol . pw_max_life ; //<S2SV> } else { //<S2SV> kdb -> pw_expiration = 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( mask & KADM5_POLICY_CLR ) && ( adb . aux_attributes & KADM5_POLICY ) ) { //<S2SV> free ( adb . policy ) ; //<S2SV> adb . policy = NULL ; //<S2SV> adb . aux_attributes &= ~ KADM5_POLICY ; //<S2SV> kdb -> pw_expiration = 0 ; //<S2SV> } //<S2SV> if ( ( mask & KADM5_ATTRIBUTES ) ) //<S2SV> kdb -> attributes = entry -> attributes ; //<S2SV> if ( ( mask & KADM5_MAX_LIFE ) ) //<S2SV> kdb -> max_life = entry -> max_life ; //<S2SV> if ( ( mask & KADM5_PRINC_EXPIRE_TIME ) ) //<S2SV> kdb -> expiration = entry -> princ_expire_time ; //<S2SV> if ( mask & KADM5_PW_EXPIRATION ) //<S2SV> kdb -> pw_expiration = entry -> pw_expiration ; //<S2SV> if ( mask & KADM5_MAX_RLIFE ) //<S2SV> kdb -> max_renewable_life = entry -> max_renewable_life ; //<S2SV> if ( ( mask & KADM5_KVNO ) ) { //<S2SV> for ( i = 0 ; i < kdb -> n_key_data ; i ++ ) //<S2SV> kdb -> key_data [ i ] . key_data_kvno = entry -> kvno ; //<S2SV> } //<S2SV> if ( mask & KADM5_TL_DATA ) { //<S2SV> krb5_tl_data * tl ; //<S2SV> for ( tl = entry -> tl_data ; tl ; //<S2SV> tl = tl -> tl_data_next ) //<S2SV> { //<S2SV> ret = krb5_dbe_update_tl_data ( handle -> context , kdb , tl ) ; //<S2SV> if ( ret ) //<S2SV> { //<S2SV> goto done ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( mask & KADM5_FAIL_AUTH_COUNT ) { //<S2SV> if ( entry -> fail_auth_count != 0 ) { //<S2SV> ret = KADM5_BAD_SERVER_PARAMS ; //<S2SV> goto done ; //<S2SV> } //<S2SV> kdb -> fail_auth_count = 0 ; //<S2SV> } //<S2SV> kdb -> mask = mask ; //<S2SV> ret = k5_kadm5_hook_modify ( handle -> context , handle -> hook_handles , //<S2SV> KADM5_HOOK_STAGE_PRECOMMIT , entry , mask ) ; //<S2SV> if ( ret ) //<S2SV> goto done ; //<S2SV> ret = kdb_put_entry ( handle , kdb , & adb ) ; //<S2SV> if ( ret ) goto done ; //<S2SV> ( void ) k5_kadm5_hook_modify ( handle -> context , handle -> hook_handles , //<S2SV> KADM5_HOOK_STAGE_POSTCOMMIT , entry , mask ) ; //<S2SV> ret = KADM5_OK ; //<S2SV> done : //<S2SV> if ( have_pol ) { //<S2SV> ret2 = kadm5_free_policy_ent ( handle -> lhandle , & pol ) ; //<S2SV> ret = ret ? ret : ret2 ; //<S2SV> } //<S2SV> kdb_free_entry ( handle , kdb , & adb ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 