static OM_uint32 //<S2SV> kg_unseal_v1_iov ( krb5_context context , //<S2SV> OM_uint32 * minor_status , //<S2SV> krb5_gss_ctx_id_rec * ctx , //<S2SV> gss_iov_buffer_desc * iov , //<S2SV> int iov_count , //<S2SV> size_t token_wrapper_len , //<S2SV> int * conf_state , //<S2SV> gss_qop_t * qop_state , //<S2SV> int toktype ) //<S2SV> { //<S2SV> OM_uint32 code ; //<S2SV> gss_iov_buffer_t header ; //<S2SV> gss_iov_buffer_t trailer ; //<S2SV> unsigned char * ptr ; //<S2SV> int sealalg ; //<S2SV> int signalg ; //<S2SV> krb5_checksum cksum ; //<S2SV> krb5_checksum md5cksum ; //<S2SV> size_t cksum_len = 0 ; //<S2SV> size_t conflen = 0 ; //<S2SV> int direction ; //<S2SV> krb5_ui_4 seqnum ; //<S2SV> OM_uint32 retval ; //<S2SV> size_t sumlen ; //<S2SV> krb5_keyusage sign_usage = KG_USAGE_SIGN ; //<S2SV> md5cksum . length = cksum . length = 0 ; //<S2SV> md5cksum . contents = cksum . contents = NULL ; //<S2SV> header = kg_locate_header_iov ( iov , iov_count , toktype ) ; //<S2SV> assert ( header != NULL ) ; //<S2SV> trailer = kg_locate_iov ( iov , iov_count , GSS_IOV_BUFFER_TYPE_TRAILER ) ; //<S2SV> if ( trailer != NULL && trailer -> buffer . length != 0 ) { //<S2SV> * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; //<S2SV> return GSS_S_DEFECTIVE_TOKEN ; //<S2SV> } //<S2SV> if ( header -> buffer . length < token_wrapper_len + 14 ) { //<S2SV> * minor_status = 0 ; //<S2SV> return GSS_S_DEFECTIVE_TOKEN ; //<S2SV> } //<S2SV> ptr = ( unsigned char * ) header -> buffer . value + token_wrapper_len ; //<S2SV> signalg = ptr [ 0 ] ; //<S2SV> signalg |= ptr [ 1 ] << 8 ; //<S2SV> sealalg = ptr [ 2 ] ; //<S2SV> sealalg |= ptr [ 3 ] << 8 ; //<S2SV> if ( ptr [ 4 ] != 0xFF || ptr [ 5 ] != 0xFF ) { //<S2SV> * minor_status = 0 ; //<S2SV> return GSS_S_DEFECTIVE_TOKEN ; //<S2SV> } //<S2SV> if ( toktype != KG_TOK_WRAP_MSG && sealalg != 0xFFFF ) { //<S2SV> * minor_status = 0 ; //<S2SV> return GSS_S_DEFECTIVE_TOKEN ; //<S2SV> } //<S2SV> if ( toktype == KG_TOK_WRAP_MSG && //<S2SV> ! ( sealalg == 0xFFFF || sealalg == ctx -> sealalg ) ) { //<S2SV> * minor_status = 0 ; //<S2SV> return GSS_S_DEFECTIVE_TOKEN ; //<S2SV> } //<S2SV> if ( ( ctx -> sealalg == SEAL_ALG_NONE && signalg > 1 ) || //<S2SV> ( ctx -> sealalg == SEAL_ALG_1 && signalg != SGN_ALG_3 ) || //<S2SV> ( ctx -> sealalg == SEAL_ALG_DES3KD && //<S2SV> signalg != SGN_ALG_HMAC_SHA1_DES3_KD ) || //<S2SV> ( ctx -> sealalg == SEAL_ALG_MICROSOFT_RC4 && //<S2SV> signalg != SGN_ALG_HMAC_MD5 ) ) { //<S2SV> * minor_status = 0 ; //<S2SV> return GSS_S_DEFECTIVE_TOKEN ; //<S2SV> } //<S2SV> switch ( signalg ) { //<S2SV> case SGN_ALG_DES_MAC_MD5 : //<S2SV> case SGN_ALG_MD2_5 : //<S2SV> case SGN_ALG_HMAC_MD5 : //<S2SV> cksum_len = 8 ; //<S2SV> if ( toktype != KG_TOK_WRAP_MSG ) //<S2SV> sign_usage = 15 ; //<S2SV> break ; //<S2SV> case SGN_ALG_3 : //<S2SV> cksum_len = 16 ; //<S2SV> break ; //<S2SV> case SGN_ALG_HMAC_SHA1_DES3_KD : //<S2SV> cksum_len = 20 ; //<S2SV> break ; //<S2SV> default : //<S2SV> * minor_status = 0 ; //<S2SV> return GSS_S_DEFECTIVE_TOKEN ; //<S2SV> } //<S2SV> code = kg_get_seq_num ( context , ctx -> seq , ptr + 14 , ptr + 6 , & direction , //<S2SV> & seqnum ) ; //<S2SV> if ( code != 0 ) { //<S2SV> * minor_status = code ; //<S2SV> return GSS_S_BAD_SIG ; //<S2SV> } //<S2SV> if ( toktype == KG_TOK_WRAP_MSG ) { //<S2SV> if ( sealalg != 0xFFFF ) { //<S2SV> if ( ctx -> sealalg == SEAL_ALG_MICROSOFT_RC4 ) { //<S2SV> unsigned char bigend_seqnum [ 4 ] ; //<S2SV> krb5_keyblock * enc_key ; //<S2SV> size_t i ; //<S2SV> store_32_be ( seqnum , bigend_seqnum ) ; //<S2SV> code = krb5_k_key_keyblock ( context , ctx -> enc , & enc_key ) ; //<S2SV> if ( code != 0 ) { //<S2SV> retval = GSS_S_FAILURE ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> assert ( enc_key -> length == 16 ) ; //<S2SV> for ( i = 0 ; i < enc_key -> length ; i ++ ) //<S2SV> ( ( char * ) enc_key -> contents ) [ i ] ^= 0xF0 ; //<S2SV> code = kg_arcfour_docrypt_iov ( context , enc_key , 0 , //<S2SV> & bigend_seqnum [ 0 ] , 4 , //<S2SV> iov , iov_count ) ; //<S2SV> krb5_free_keyblock ( context , enc_key ) ; //<S2SV> } else { //<S2SV> code = kg_decrypt_iov ( context , 0 , //<S2SV> ( ( ctx -> gss_flags & GSS_C_DCE_STYLE ) != 0 ) , //<S2SV> 0 , 0 , //<S2SV> ctx -> enc , KG_USAGE_SEAL , NULL , //<S2SV> iov , iov_count ) ; //<S2SV> } //<S2SV> if ( code != 0 ) { //<S2SV> retval = GSS_S_FAILURE ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> } //<S2SV> conflen = kg_confounder_size ( context , ctx -> enc -> keyblock . enctype ) ; //<S2SV> } //<S2SV> if ( header -> buffer . length != token_wrapper_len + 14 + cksum_len + conflen ) { //<S2SV> retval = GSS_S_DEFECTIVE_TOKEN ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> switch ( signalg ) { //<S2SV> case SGN_ALG_DES_MAC_MD5 : //<S2SV> case SGN_ALG_MD2_5 : //<S2SV> case SGN_ALG_DES_MAC : //<S2SV> case SGN_ALG_3 : //<S2SV> md5cksum . checksum_type = CKSUMTYPE_RSA_MD5 ; //<S2SV> break ; //<S2SV> case SGN_ALG_HMAC_MD5 : //<S2SV> md5cksum . checksum_type = CKSUMTYPE_HMAC_MD5_ARCFOUR ; //<S2SV> break ; //<S2SV> case SGN_ALG_HMAC_SHA1_DES3_KD : //<S2SV> md5cksum . checksum_type = CKSUMTYPE_HMAC_SHA1_DES3 ; //<S2SV> break ; //<S2SV> default : //<S2SV> abort ( ) ; //<S2SV> } //<S2SV> code = krb5_c_checksum_length ( context , md5cksum . checksum_type , & sumlen ) ; //<S2SV> if ( code != 0 ) { //<S2SV> retval = GSS_S_FAILURE ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> md5cksum . length = sumlen ; //<S2SV> code = kg_make_checksum_iov_v1 ( context , md5cksum . checksum_type , //<S2SV> cksum_len , ctx -> seq , ctx -> enc , //<S2SV> sign_usage , iov , iov_count , toktype , //<S2SV> & md5cksum ) ; //<S2SV> if ( code != 0 ) { //<S2SV> retval = GSS_S_FAILURE ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> switch ( signalg ) { //<S2SV> case SGN_ALG_DES_MAC_MD5 : //<S2SV> case SGN_ALG_3 : //<S2SV> code = kg_encrypt_inplace ( context , ctx -> seq , KG_USAGE_SEAL , //<S2SV> ( g_OID_equal ( ctx -> mech_used , //<S2SV> gss_mech_krb5_old ) ? //<S2SV> ctx -> seq -> keyblock . contents : NULL ) , //<S2SV> md5cksum . contents , 16 ) ; //<S2SV> if ( code != 0 ) { //<S2SV> retval = GSS_S_FAILURE ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> cksum . length = cksum_len ; //<S2SV> cksum . contents = md5cksum . contents + 16 - cksum . length ; //<S2SV> code = k5_bcmp ( cksum . contents , ptr + 14 , cksum . length ) ; //<S2SV> break ; //<S2SV> case SGN_ALG_HMAC_SHA1_DES3_KD : //<S2SV> case SGN_ALG_HMAC_MD5 : //<S2SV> code = k5_bcmp ( md5cksum . contents , ptr + 14 , cksum_len ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> code = 0 ; //<S2SV> retval = GSS_S_DEFECTIVE_TOKEN ; //<S2SV> goto cleanup ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( code != 0 ) { //<S2SV> code = 0 ; //<S2SV> retval = GSS_S_BAD_SIG ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( toktype == KG_TOK_WRAP_MSG && //<S2SV> ( ctx -> gss_flags & GSS_C_DCE_STYLE ) == 0 ) { //<S2SV> retval = kg_fixup_padding_iov ( & code , iov , iov_count ) ; //<S2SV> if ( retval != GSS_S_COMPLETE ) //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( conf_state != NULL ) //<S2SV> * conf_state = ( sealalg != 0xFFFF ) ; //<S2SV> if ( qop_state != NULL ) //<S2SV> * qop_state = GSS_C_QOP_DEFAULT ; //<S2SV> if ( ( ctx -> initiate && direction != 0xff ) || //<S2SV> ( ! ctx -> initiate && direction != 0 ) ) { //<S2SV> * minor_status = ( OM_uint32 ) G_BAD_DIRECTION ; //<S2SV> retval = GSS_S_BAD_SIG ; //<S2SV> } //<S2SV> code = 0 ; //<S2SV> retval = g_order_check ( & ctx -> seqstate , ( gssint_uint64 ) seqnum ) ; //<S2SV> cleanup : //<S2SV> krb5_free_checksum_contents ( context , & md5cksum ) ; //<S2SV> * minor_status = code ; //<S2SV> return retval ; //<S2SV> } //<S2SV> 