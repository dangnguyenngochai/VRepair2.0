static krb5_error_code //<S2SV> get_matching_data ( krb5_context context , //<S2SV> pkinit_plg_crypto_context plg_cryptoctx , //<S2SV> pkinit_req_crypto_context req_cryptoctx , X509 * cert , //<S2SV> pkinit_cert_matching_data * * md_out ) //<S2SV> { //<S2SV> krb5_error_code ret = ENOMEM ; //<S2SV> pkinit_cert_matching_data * md = NULL ; //<S2SV> krb5_principal * pkinit_sans = NULL , * upn_sans = NULL ; //<S2SV> size_t i , j ; //<S2SV> * md_out = NULL ; //<S2SV> md = calloc ( 1 , sizeof ( * md ) ) ; //<S2SV> if ( md == NULL ) //<S2SV> goto cleanup ; //<S2SV> ret = rfc2253_name ( X509_get_subject_name ( cert ) , & md -> subject_dn ) ; //<S2SV> if ( ret ) //<S2SV> goto cleanup ; //<S2SV> ret = rfc2253_name ( X509_get_issuer_name ( cert ) , & md -> issuer_dn ) ; //<S2SV> if ( ret ) //<S2SV> goto cleanup ; //<S2SV> ret = crypto_retrieve_X509_sans ( context , plg_cryptoctx , req_cryptoctx , //<S2SV> cert , & pkinit_sans , & upn_sans , NULL ) ; //<S2SV> if ( ret ) //<S2SV> goto cleanup ; //<S2SV> j = 0 ; //<S2SV> if ( pkinit_sans != NULL ) { //<S2SV> for ( i = 0 ; pkinit_sans [ i ] != NULL ; i ++ ) //<S2SV> j ++ ; //<S2SV> } //<S2SV> if ( upn_sans != NULL ) { //<S2SV> for ( i = 0 ; upn_sans [ i ] != NULL ; i ++ ) //<S2SV> j ++ ; //<S2SV> } //<S2SV> if ( j != 0 ) { //<S2SV> md -> sans = calloc ( ( size_t ) j + 1 , sizeof ( * md -> sans ) ) ; //<S2SV> if ( md -> sans == NULL ) { //<S2SV> ret = ENOMEM ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> j = 0 ; //<S2SV> if ( pkinit_sans != NULL ) { //<S2SV> for ( i = 0 ; pkinit_sans [ i ] != NULL ; i ++ ) //<S2SV> md -> sans [ j ++ ] = pkinit_sans [ i ] ; //<S2SV> free ( pkinit_sans ) ; //<S2SV> } //<S2SV> if ( upn_sans != NULL ) { //<S2SV> for ( i = 0 ; upn_sans [ i ] != NULL ; i ++ ) //<S2SV> md -> sans [ j ++ ] = upn_sans [ i ] ; //<S2SV> free ( upn_sans ) ; //<S2SV> } //<S2SV> md -> sans [ j ] = NULL ; //<S2SV> } else //<S2SV> md -> sans = NULL ; //<S2SV> ret = crypto_retrieve_X509_key_usage ( context , plg_cryptoctx , //<S2SV> req_cryptoctx , cert , & md -> ku_bits , //<S2SV> & md -> eku_bits ) ; //<S2SV> if ( ret ) //<S2SV> goto cleanup ; //<S2SV> * md_out = md ; //<S2SV> md = NULL ; //<S2SV> cleanup : //<S2SV> crypto_cert_free_matching_data ( context , md ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 