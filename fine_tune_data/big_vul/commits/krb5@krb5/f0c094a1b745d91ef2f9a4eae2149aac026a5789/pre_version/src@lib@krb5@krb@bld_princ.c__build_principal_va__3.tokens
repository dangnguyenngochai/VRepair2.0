static krb5_error_code //<S2SV> build_principal_va ( krb5_context context , krb5_principal princ , //<S2SV> unsigned int rlen , const char * realm , va_list ap ) //<S2SV> { //<S2SV> krb5_error_code retval = 0 ; //<S2SV> char * r = NULL ; //<S2SV> krb5_data * data = NULL ; //<S2SV> krb5_int32 count = 0 ; //<S2SV> krb5_int32 size = 2 ; //<S2SV> char * component = NULL ; //<S2SV> data = malloc ( size * sizeof ( krb5_data ) ) ; //<S2SV> if ( ! data ) { retval = ENOMEM ; } //<S2SV> if ( ! retval ) { //<S2SV> r = strdup ( realm ) ; //<S2SV> if ( ! r ) { retval = ENOMEM ; } //<S2SV> } //<S2SV> while ( ! retval && ( component = va_arg ( ap , char * ) ) ) { //<S2SV> if ( count == size ) { //<S2SV> krb5_data * new_data = NULL ; //<S2SV> size *= 2 ; //<S2SV> new_data = realloc ( data , size * sizeof ( krb5_data ) ) ; //<S2SV> if ( new_data ) { //<S2SV> data = new_data ; //<S2SV> } else { //<S2SV> retval = ENOMEM ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! retval ) { //<S2SV> data [ count ] . length = strlen ( component ) ; //<S2SV> data [ count ] . data = strdup ( component ) ; //<S2SV> if ( ! data [ count ] . data ) { retval = ENOMEM ; } //<S2SV> count ++ ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! retval ) { //<S2SV> princ -> type = KRB5_NT_UNKNOWN ; //<S2SV> princ -> magic = KV5M_PRINCIPAL ; //<S2SV> princ -> realm = make_data ( r , rlen ) ; //<S2SV> princ -> data = data ; //<S2SV> princ -> length = count ; //<S2SV> r = NULL ; //<S2SV> data = NULL ; //<S2SV> } //<S2SV> if ( data ) { //<S2SV> while ( -- count >= 0 ) { //<S2SV> free ( data [ count ] . data ) ; //<S2SV> } //<S2SV> free ( data ) ; //<S2SV> } //<S2SV> free ( r ) ; //<S2SV> return retval ; //<S2SV> } //<S2SV> 