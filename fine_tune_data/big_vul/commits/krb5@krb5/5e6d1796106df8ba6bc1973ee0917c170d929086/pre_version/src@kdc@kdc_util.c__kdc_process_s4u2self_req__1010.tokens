krb5_error_code //<S2SV> kdc_process_s4u2self_req ( kdc_realm_t * kdc_active_realm , //<S2SV> krb5_kdc_req * request , //<S2SV> krb5_const_principal client_princ , //<S2SV> krb5_const_principal header_srv_princ , //<S2SV> krb5_boolean issuing_referral , //<S2SV> const krb5_db_entry * server , //<S2SV> krb5_keyblock * tgs_subkey , //<S2SV> krb5_keyblock * tgs_session , //<S2SV> krb5_timestamp kdc_time , //<S2SV> krb5_pa_s4u_x509_user * * s4u_x509_user , //<S2SV> krb5_db_entry * * princ_ptr , //<S2SV> const char * * status ) //<S2SV> { //<S2SV> krb5_error_code code ; //<S2SV> krb5_boolean is_local_tgt ; //<S2SV> krb5_pa_data * pa_data ; //<S2SV> int flags ; //<S2SV> krb5_db_entry * princ ; //<S2SV> * princ_ptr = NULL ; //<S2SV> pa_data = krb5int_find_pa_data ( kdc_context , //<S2SV> request -> padata , KRB5_PADATA_S4U_X509_USER ) ; //<S2SV> if ( pa_data != NULL ) { //<S2SV> code = kdc_process_s4u_x509_user ( kdc_context , //<S2SV> request , //<S2SV> pa_data , //<S2SV> tgs_subkey , //<S2SV> tgs_session , //<S2SV> s4u_x509_user , //<S2SV> status ) ; //<S2SV> if ( code != 0 ) //<S2SV> return code ; //<S2SV> } else { //<S2SV> pa_data = krb5int_find_pa_data ( kdc_context , //<S2SV> request -> padata , KRB5_PADATA_FOR_USER ) ; //<S2SV> if ( pa_data != NULL ) { //<S2SV> code = kdc_process_for_user ( kdc_active_realm , //<S2SV> pa_data , //<S2SV> tgs_session , //<S2SV> s4u_x509_user , //<S2SV> status ) ; //<S2SV> if ( code != 0 ) //<S2SV> return code ; //<S2SV> } else //<S2SV> return 0 ; //<S2SV> } //<S2SV> flags = 0 ; //<S2SV> switch ( krb5_princ_type ( kdc_context , request -> server ) ) { //<S2SV> case KRB5_NT_SRV_HST : //<S2SV> if ( krb5_princ_size ( kdc_context , request -> server ) == 2 ) //<S2SV> flags |= KRB5_PRINCIPAL_COMPARE_IGNORE_REALM ; //<S2SV> break ; //<S2SV> case KRB5_NT_ENTERPRISE_PRINCIPAL : //<S2SV> flags |= KRB5_PRINCIPAL_COMPARE_ENTERPRISE ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! krb5_principal_compare_flags ( kdc_context , //<S2SV> request -> server , //<S2SV> client_princ , //<S2SV> flags ) ) { //<S2SV> * status = "INVALID_S4U2SELF_REQUEST" ; //<S2SV> return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; //<S2SV> } //<S2SV> if ( request -> kdc_options & AS_INVALID_OPTIONS ) { //<S2SV> * status = "INVALID<S2SV_blank>AS<S2SV_blank>OPTIONS" ; //<S2SV> return KRB5KDC_ERR_BADOPTION ; //<S2SV> } //<S2SV> is_local_tgt = ! is_cross_tgs_principal ( header_srv_princ ) ; //<S2SV> if ( is_local_tgt && issuing_referral ) { //<S2SV> * status = "LOOKING_UP_SERVER" ; //<S2SV> return KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN ; //<S2SV> } //<S2SV> if ( is_local_principal ( kdc_active_realm , //<S2SV> ( * s4u_x509_user ) -> user_id . user ) ) { //<S2SV> krb5_db_entry no_server ; //<S2SV> krb5_pa_data * * e_data = NULL ; //<S2SV> if ( ! is_local_tgt && ! issuing_referral ) { //<S2SV> * status = "NOT_CROSS_REALM_REQUEST" ; //<S2SV> return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; //<S2SV> } //<S2SV> code = krb5_db_get_principal ( kdc_context , //<S2SV> ( * s4u_x509_user ) -> user_id . user , //<S2SV> KRB5_KDB_FLAG_INCLUDE_PAC , & princ ) ; //<S2SV> if ( code == KRB5_KDB_NOENTRY ) { //<S2SV> * status = "UNKNOWN_S4U2SELF_PRINCIPAL" ; //<S2SV> return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; //<S2SV> } else if ( code ) { //<S2SV> * status = "LOOKING_UP_S4U2SELF_PRINCIPAL" ; //<S2SV> return code ; //<S2SV> } //<S2SV> memset ( & no_server , 0 , sizeof ( no_server ) ) ; //<S2SV> code = validate_as_request ( kdc_active_realm , request , * princ , //<S2SV> no_server , kdc_time , status , & e_data ) ; //<S2SV> if ( code ) { //<S2SV> krb5_db_free_principal ( kdc_context , princ ) ; //<S2SV> krb5_free_pa_data ( kdc_context , e_data ) ; //<S2SV> return code ; //<S2SV> } //<S2SV> * princ_ptr = princ ; //<S2SV> } else if ( is_local_tgt ) { //<S2SV> * status = "S4U2SELF_CLIENT_NOT_OURS" ; //<S2SV> return KRB5KDC_ERR_POLICY ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 