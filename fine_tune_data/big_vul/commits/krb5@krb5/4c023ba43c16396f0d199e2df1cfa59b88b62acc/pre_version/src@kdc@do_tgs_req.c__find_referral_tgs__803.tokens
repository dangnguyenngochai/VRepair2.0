static krb5_int32 //<S2SV> find_referral_tgs ( kdc_realm_t * kdc_active_realm , krb5_kdc_req * request , //<S2SV> krb5_principal * krbtgt_princ ) //<S2SV> { //<S2SV> krb5_error_code retval = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN ; //<S2SV> char * * realms = NULL , * hostname = NULL ; //<S2SV> krb5_data srealm = request -> server -> realm ; //<S2SV> if ( ! is_referral_req ( kdc_active_realm , request ) ) //<S2SV> goto cleanup ; //<S2SV> hostname = data2string ( krb5_princ_component ( kdc_context , //<S2SV> request -> server , 1 ) ) ; //<S2SV> if ( hostname == NULL ) { //<S2SV> retval = ENOMEM ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( strchr ( hostname , '.' ) == NULL ) //<S2SV> goto cleanup ; //<S2SV> retval = krb5_get_host_realm ( kdc_context , hostname , & realms ) ; //<S2SV> if ( retval ) { //<S2SV> kdc_err ( kdc_context , retval , "unable<S2SV_blank>to<S2SV_blank>find<S2SV_blank>realm<S2SV_blank>of<S2SV_blank>host" ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( realms == NULL || realms [ 0 ] == '\\0' || //<S2SV> data_eq_string ( srealm , realms [ 0 ] ) ) { //<S2SV> retval = KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> retval = krb5_build_principal ( kdc_context , krbtgt_princ , //<S2SV> srealm . length , srealm . data , //<S2SV> "krbtgt" , realms [ 0 ] , ( char * ) 0 ) ; //<S2SV> cleanup : //<S2SV> krb5_free_host_realm ( kdc_context , realms ) ; //<S2SV> free ( hostname ) ; //<S2SV> return retval ; //<S2SV> } //<S2SV> 