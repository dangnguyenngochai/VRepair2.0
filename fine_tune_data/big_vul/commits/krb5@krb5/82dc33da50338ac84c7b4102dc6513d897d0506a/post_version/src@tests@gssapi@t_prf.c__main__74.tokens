int //<S2SV> main ( int argc , char * argv [ ] ) //<S2SV> { //<S2SV> OM_uint32 minor , major ; //<S2SV> gss_ctx_id_t context ; //<S2SV> gss_union_ctx_id_desc uctx ; //<S2SV> krb5_gss_ctx_id_rec kgctx ; //<S2SV> krb5_key k1 , k2 ; //<S2SV> krb5_keyblock kb1 , kb2 ; //<S2SV> gss_buffer_desc in , out ; //<S2SV> unsigned char k1buf [ 32 ] , k2buf [ 32 ] , outbuf [ 44 ] ; //<S2SV> size_t i ; //<S2SV> context = ( gss_ctx_id_t ) & uctx ; //<S2SV> uctx . mech_type = & mech_krb5 ; //<S2SV> uctx . internal_ctx_id = ( gss_ctx_id_t ) & kgctx ; //<S2SV> kgctx . k5_context = NULL ; //<S2SV> kgctx . established = 1 ; //<S2SV> kgctx . have_acceptor_subkey = 1 ; //<S2SV> kb1 . contents = k1buf ; //<S2SV> kb2 . contents = k2buf ; //<S2SV> for ( i = 0 ; i < sizeof ( tests ) / sizeof ( * tests ) ; i ++ ) { //<S2SV> kb1 . enctype = tests [ i ] . enctype ; //<S2SV> kb1 . length = fromhex ( tests [ i ] . key1 , k1buf ) ; //<S2SV> check_k5err ( NULL , "create_key" , krb5_k_create_key ( NULL , & kb1 , & k1 ) ) ; //<S2SV> kgctx . subkey = k1 ; //<S2SV> kb2 . enctype = tests [ i ] . enctype ; //<S2SV> kb2 . length = fromhex ( tests [ i ] . key2 , k2buf ) ; //<S2SV> check_k5err ( NULL , "create_key" , krb5_k_create_key ( NULL , & kb2 , & k2 ) ) ; //<S2SV> kgctx . acceptor_subkey = k2 ; //<S2SV> in . length = 0 ; //<S2SV> in . value = NULL ; //<S2SV> major = gss_pseudo_random ( & minor , context , GSS_C_PRF_KEY_PARTIAL , & in , //<S2SV> 44 , & out ) ; //<S2SV> check_gsserr ( "gss_pseudo_random" , major , minor ) ; //<S2SV> ( void ) fromhex ( tests [ i ] . out1 , outbuf ) ; //<S2SV> assert ( out . length == 44 && memcmp ( out . value , outbuf , 44 ) == 0 ) ; //<S2SV> ( void ) gss_release_buffer ( & minor , & out ) ; //<S2SV> in . length = strlen ( inputstr ) ; //<S2SV> in . value = ( char * ) inputstr ; //<S2SV> major = gss_pseudo_random ( & minor , context , GSS_C_PRF_KEY_FULL , & in , 44 , //<S2SV> & out ) ; //<S2SV> check_gsserr ( "gss_pseudo_random" , major , minor ) ; //<S2SV> ( void ) fromhex ( tests [ i ] . out2 , outbuf ) ; //<S2SV> assert ( out . length == 44 && memcmp ( out . value , outbuf , 44 ) == 0 ) ; //<S2SV> ( void ) gss_release_buffer ( & minor , & out ) ; //<S2SV> major = gss_pseudo_random ( & minor , context , GSS_C_PRF_KEY_FULL , & in , 0 , //<S2SV> & out ) ; //<S2SV> check_gsserr ( "gss_pseudo_random" , major , minor ) ; //<S2SV> assert ( out . length == 0 ) ; //<S2SV> ( void ) gss_release_buffer ( & minor , & out ) ; //<S2SV> krb5_k_free_key ( NULL , k1 ) ; //<S2SV> krb5_k_free_key ( NULL , k2 ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 