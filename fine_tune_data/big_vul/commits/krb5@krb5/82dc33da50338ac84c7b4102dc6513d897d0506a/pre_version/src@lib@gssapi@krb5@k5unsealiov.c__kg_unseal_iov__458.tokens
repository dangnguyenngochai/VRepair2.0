OM_uint32 //<S2SV> kg_unseal_iov ( OM_uint32 * minor_status , //<S2SV> gss_ctx_id_t context_handle , //<S2SV> int * conf_state , //<S2SV> gss_qop_t * qop_state , //<S2SV> gss_iov_buffer_desc * iov , //<S2SV> int iov_count , //<S2SV> int toktype ) //<S2SV> { //<S2SV> krb5_gss_ctx_id_rec * ctx ; //<S2SV> OM_uint32 code ; //<S2SV> ctx = ( krb5_gss_ctx_id_rec * ) context_handle ; //<S2SV> if ( ! ctx -> established ) { //<S2SV> * minor_status = KG_CTX_INCOMPLETE ; //<S2SV> return GSS_S_NO_CONTEXT ; //<S2SV> } //<S2SV> if ( kg_locate_iov ( iov , iov_count , GSS_IOV_BUFFER_TYPE_STREAM ) != NULL ) { //<S2SV> code = kg_unseal_stream_iov ( minor_status , ctx , conf_state , qop_state , //<S2SV> iov , iov_count , toktype ) ; //<S2SV> } else { //<S2SV> code = kg_unseal_iov_token ( minor_status , ctx , conf_state , qop_state , //<S2SV> iov , iov_count , toktype ) ; //<S2SV> } //<S2SV> return code ; //<S2SV> } //<S2SV> 