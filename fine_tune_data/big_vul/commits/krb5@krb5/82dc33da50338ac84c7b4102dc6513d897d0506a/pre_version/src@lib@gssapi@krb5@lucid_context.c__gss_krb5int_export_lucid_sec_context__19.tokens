OM_uint32 //<S2SV> gss_krb5int_export_lucid_sec_context ( //<S2SV> OM_uint32 * minor_status , //<S2SV> const gss_ctx_id_t context_handle , //<S2SV> const gss_OID desired_object , //<S2SV> gss_buffer_set_t * data_set ) //<S2SV> { //<S2SV> krb5_error_code kret = 0 ; //<S2SV> OM_uint32 retval ; //<S2SV> krb5_gss_ctx_id_t ctx = ( krb5_gss_ctx_id_t ) context_handle ; //<S2SV> void * lctx = NULL ; //<S2SV> int version = 0 ; //<S2SV> gss_buffer_desc rep ; //<S2SV> retval = GSS_S_FAILURE ; //<S2SV> * minor_status = 0 ; //<S2SV> * data_set = GSS_C_NO_BUFFER_SET ; //<S2SV> retval = generic_gss_oid_decompose ( minor_status , //<S2SV> GSS_KRB5_EXPORT_LUCID_SEC_CONTEXT_OID , //<S2SV> GSS_KRB5_EXPORT_LUCID_SEC_CONTEXT_OID_LENGTH , //<S2SV> desired_object , //<S2SV> & version ) ; //<S2SV> if ( GSS_ERROR ( retval ) ) //<S2SV> return retval ; //<S2SV> switch ( version ) { //<S2SV> case 1 : //<S2SV> kret = make_external_lucid_ctx_v1 ( ( krb5_pointer ) ctx , //<S2SV> version , & lctx ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> kret = ( OM_uint32 ) KG_LUCID_VERSION ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( kret ) //<S2SV> goto error_out ; //<S2SV> rep . value = & lctx ; //<S2SV> rep . length = sizeof ( lctx ) ; //<S2SV> retval = generic_gss_add_buffer_set_member ( minor_status , & rep , data_set ) ; //<S2SV> if ( GSS_ERROR ( retval ) ) //<S2SV> goto error_out ; //<S2SV> error_out : //<S2SV> if ( * minor_status == 0 ) //<S2SV> * minor_status = ( OM_uint32 ) kret ; //<S2SV> return ( retval ) ; //<S2SV> } //<S2SV> 