int sfgets ( void ) //<S2SV> { //<S2SV> struct pollfd pfd ; //<S2SV> int pollret ; //<S2SV> ssize_t readnb ; //<S2SV> signed char seen_r = 0 ; //<S2SV> static size_t scanned ; //<S2SV> static size_t readnbd ; //<S2SV> if ( scanned > ( size_t ) 0U ) { //<S2SV> readnbd -= scanned ; //<S2SV> memmove ( cmd , cmd + scanned , readnbd ) ; //<S2SV> scanned = ( size_t ) 0U ; //<S2SV> } //<S2SV> pfd . fd = clientfd ; //<S2SV> # ifdef __APPLE_CC__ //<S2SV> pfd . events = POLLIN | POLLERR | POLLHUP ; //<S2SV> # else //<S2SV> pfd . events = POLLIN | POLLPRI | POLLERR | POLLHUP ; //<S2SV> # endif //<S2SV> while ( scanned < cmdsize ) { //<S2SV> if ( scanned >= readnbd ) { //<S2SV> pfd . revents = 0 ; //<S2SV> while ( ( pollret = poll ( & pfd , 1U , idletime * 1000UL ) ) < 0 && //<S2SV> errno == EINTR ) ; //<S2SV> if ( pollret == 0 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( pollret <= 0 || //<S2SV> ( pfd . revents & ( POLLERR | POLLHUP | POLLNVAL ) ) != 0 ) { //<S2SV> return - 2 ; //<S2SV> } //<S2SV> if ( ( pfd . revents & ( POLLIN | POLLPRI ) ) == 0 ) { //<S2SV> continue ; //<S2SV> } //<S2SV> if ( readnbd >= cmdsize ) { //<S2SV> break ; //<S2SV> } //<S2SV> # ifdef WITH_TLS //<S2SV> if ( tls_cnx != NULL ) { //<S2SV> while ( ( readnb = SSL_read //<S2SV> ( tls_cnx , cmd + readnbd , cmdsize - readnbd ) ) //<S2SV> < ( ssize_t ) 0 && errno == EINTR ) ; //<S2SV> } else //<S2SV> # endif //<S2SV> { //<S2SV> while ( ( readnb = read ( clientfd , cmd + readnbd , //<S2SV> cmdsize - readnbd ) ) < ( ssize_t ) 0 && //<S2SV> errno == EINTR ) ; //<S2SV> } //<S2SV> if ( readnb <= ( ssize_t ) 0 ) { //<S2SV> return - 2 ; //<S2SV> } //<S2SV> readnbd += readnb ; //<S2SV> if ( readnbd > cmdsize ) { //<S2SV> return - 2 ; //<S2SV> } //<S2SV> } //<S2SV> # ifdef RFC_CONFORMANT_LINES //<S2SV> if ( seen_r != 0 ) { //<S2SV> # endif //<S2SV> if ( cmd [ scanned ] == '\\n' ) { //<S2SV> # ifndef RFC_CONFORMANT_LINES //<S2SV> if ( seen_r != 0 ) { //<S2SV> # endif //<S2SV> cmd [ scanned - 1U ] = 0 ; //<S2SV> # ifndef RFC_CONFORMANT_LINES //<S2SV> } else { //<S2SV> cmd [ scanned ] = 0 ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ++ scanned >= readnbd ) { //<S2SV> scanned = readnbd = ( size_t ) 0U ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> seen_r = 0 ; //<S2SV> # ifdef RFC_CONFORMANT_LINES //<S2SV> } //<S2SV> # endif //<S2SV> if ( ISCTRLCODE ( cmd [ scanned ] ) ) { //<S2SV> if ( cmd [ scanned ] == '\\r' ) { //<S2SV> seen_r = 1 ; //<S2SV> } //<S2SV> # ifdef RFC_CONFORMANT_PARSER //<S2SV> else if ( cmd [ scanned ] == 0 ) { //<S2SV> cmd [ scanned ] = '\\n' ; //<S2SV> } //<S2SV> # else //<S2SV> cmd [ scanned ] = '_' ; //<S2SV> # endif //<S2SV> } //<S2SV> scanned ++ ; //<S2SV> } //<S2SV> die ( 421 , LOG_WARNING , MSG_LINE_TOO_LONG ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 