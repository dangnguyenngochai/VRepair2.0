static VALUE //<S2SV> ossl_cipher_pkcs5_keyivgen ( int argc , VALUE * argv , VALUE self ) //<S2SV> { //<S2SV> EVP_CIPHER_CTX * ctx ; //<S2SV> const EVP_MD * digest ; //<S2SV> VALUE vpass , vsalt , viter , vdigest ; //<S2SV> unsigned char key [ EVP_MAX_KEY_LENGTH ] , iv [ EVP_MAX_IV_LENGTH ] , * salt = NULL ; //<S2SV> int iter ; //<S2SV> rb_scan_args ( argc , argv , "13" , & vpass , & vsalt , & viter , & vdigest ) ; //<S2SV> StringValue ( vpass ) ; //<S2SV> if ( ! NIL_P ( vsalt ) ) { //<S2SV> StringValue ( vsalt ) ; //<S2SV> if ( RSTRING_LEN ( vsalt ) != PKCS5_SALT_LEN ) //<S2SV> ossl_raise ( eCipherError , "salt<S2SV_blank>must<S2SV_blank>be<S2SV_blank>an<S2SV_blank>8-octet<S2SV_blank>string" ) ; //<S2SV> salt = ( unsigned char * ) RSTRING_PTR ( vsalt ) ; //<S2SV> } //<S2SV> iter = NIL_P ( viter ) ? 2048 : NUM2INT ( viter ) ; //<S2SV> digest = NIL_P ( vdigest ) ? EVP_md5 ( ) : GetDigestPtr ( vdigest ) ; //<S2SV> GetCipher ( self , ctx ) ; //<S2SV> EVP_BytesToKey ( EVP_CIPHER_CTX_cipher ( ctx ) , digest , salt , //<S2SV> ( unsigned char * ) RSTRING_PTR ( vpass ) , RSTRING_LENINT ( vpass ) , iter , key , iv ) ; //<S2SV> if ( EVP_CipherInit_ex ( ctx , NULL , NULL , key , iv , - 1 ) != 1 ) //<S2SV> ossl_raise ( eCipherError , NULL ) ; //<S2SV> OPENSSL_cleanse ( key , sizeof key ) ; //<S2SV> OPENSSL_cleanse ( iv , sizeof iv ) ; //<S2SV> return Qnil ; //<S2SV> } //<S2SV> 