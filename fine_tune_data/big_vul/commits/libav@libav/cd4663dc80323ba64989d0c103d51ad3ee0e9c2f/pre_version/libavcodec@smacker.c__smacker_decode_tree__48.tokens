static int smacker_decode_tree ( BitstreamContext * bc , HuffContext * hc , //<S2SV> uint32_t prefix , int length ) //<S2SV> { //<S2SV> if ( ! bitstream_read_bit ( bc ) ) { //<S2SV> if ( hc -> current >= 256 ) { //<S2SV> av_log ( NULL , AV_LOG_ERROR , "Tree<S2SV_blank>size<S2SV_blank>exceeded!\\n" ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> if ( length ) { //<S2SV> hc -> bits [ hc -> current ] = prefix ; //<S2SV> hc -> lengths [ hc -> current ] = length ; //<S2SV> } else { //<S2SV> hc -> bits [ hc -> current ] = 0 ; //<S2SV> hc -> lengths [ hc -> current ] = 0 ; //<S2SV> } //<S2SV> hc -> values [ hc -> current ] = bitstream_read ( bc , 8 ) ; //<S2SV> hc -> current ++ ; //<S2SV> if ( hc -> maxlength < length ) //<S2SV> hc -> maxlength = length ; //<S2SV> return 0 ; //<S2SV> } else { //<S2SV> int r ; //<S2SV> length ++ ; //<S2SV> r = smacker_decode_tree ( bc , hc , prefix , length ) ; //<S2SV> if ( r ) //<S2SV> return r ; //<S2SV> return smacker_decode_tree ( bc , hc , prefix | ( 1 << ( length - 1 ) ) , length ) ; //<S2SV> } //<S2SV> } //<S2SV> 