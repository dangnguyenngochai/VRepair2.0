int saa7164_bus_get ( struct saa7164_dev * dev , struct tmComResInfo * msg , //<S2SV> void * buf , int peekonly ) //<S2SV> { //<S2SV> struct tmComResBusInfo * bus = & dev -> bus ; //<S2SV> u32 bytes_to_read , write_distance , curr_grp , curr_gwp , //<S2SV> new_grp , buf_size , space_rem ; //<S2SV> struct tmComResInfo msg_tmp ; //<S2SV> int ret = SAA_ERR_BAD_PARAMETER ; //<S2SV> saa7164_bus_verify ( dev ) ; //<S2SV> if ( msg == NULL ) //<S2SV> return ret ; //<S2SV> if ( msg -> size > dev -> bus . m_wMaxReqSize ) { //<S2SV> printk ( KERN_ERR "%s()<S2SV_blank>Exceeded<S2SV_blank>dev->bus.m_wMaxReqSize\\n" , //<S2SV> __func__ ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> if ( ( peekonly == 0 ) && ( msg -> size > 0 ) && ( buf == NULL ) ) { //<S2SV> printk ( KERN_ERR //<S2SV> "%s()<S2SV_blank>Missing<S2SV_blank>msg<S2SV_blank>buf,<S2SV_blank>size<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%d<S2SV_blank>bytes\\n" , //<S2SV> __func__ , msg -> size ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> mutex_lock ( & bus -> lock ) ; //<S2SV> curr_gwp = saa7164_readl ( bus -> m_dwGetWritePos ) ; //<S2SV> curr_grp = saa7164_readl ( bus -> m_dwGetReadPos ) ; //<S2SV> if ( curr_gwp == curr_grp ) { //<S2SV> ret = SAA_ERR_EMPTY ; //<S2SV> goto out ; //<S2SV> } //<S2SV> bytes_to_read = sizeof ( * msg ) ; //<S2SV> write_distance = 0 ; //<S2SV> if ( curr_gwp >= curr_grp ) //<S2SV> write_distance = curr_gwp - curr_grp ; //<S2SV> else //<S2SV> write_distance = curr_gwp + bus -> m_dwSizeGetRing - curr_grp ; //<S2SV> if ( bytes_to_read > write_distance ) { //<S2SV> printk ( KERN_ERR "%s()<S2SV_blank>No<S2SV_blank>message/response<S2SV_blank>found\\n" , __func__ ) ; //<S2SV> ret = SAA_ERR_INVALID_COMMAND ; //<S2SV> goto out ; //<S2SV> } //<S2SV> new_grp = curr_grp + bytes_to_read ; //<S2SV> if ( new_grp > bus -> m_dwSizeGetRing ) { //<S2SV> new_grp -= bus -> m_dwSizeGetRing ; //<S2SV> space_rem = bus -> m_dwSizeGetRing - curr_grp ; //<S2SV> memcpy_fromio ( & msg_tmp , bus -> m_pdwGetRing + curr_grp , space_rem ) ; //<S2SV> memcpy_fromio ( ( u8 * ) & msg_tmp + space_rem , bus -> m_pdwGetRing , //<S2SV> bytes_to_read - space_rem ) ; //<S2SV> } else { //<S2SV> memcpy_fromio ( & msg_tmp , bus -> m_pdwGetRing + curr_grp , bytes_to_read ) ; //<S2SV> } //<S2SV> msg_tmp . size = le16_to_cpu ( ( __force __le16 ) msg_tmp . size ) ; //<S2SV> msg_tmp . command = le32_to_cpu ( ( __force __le32 ) msg_tmp . command ) ; //<S2SV> msg_tmp . controlselector = le16_to_cpu ( ( __force __le16 ) msg_tmp . controlselector ) ; //<S2SV> if ( peekonly ) { //<S2SV> memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; //<S2SV> goto peekout ; //<S2SV> } //<S2SV> if ( ( msg_tmp . id != msg -> id ) || ( msg_tmp . command != msg -> command ) || //<S2SV> ( msg_tmp . controlselector != msg -> controlselector ) || //<S2SV> ( msg_tmp . seqno != msg -> seqno ) || ( msg_tmp . size != msg -> size ) ) { //<S2SV> printk ( KERN_ERR "%s()<S2SV_blank>Unexpected<S2SV_blank>msg<S2SV_blank>miss-match\\n" , __func__ ) ; //<S2SV> saa7164_bus_dumpmsg ( dev , msg , buf ) ; //<S2SV> saa7164_bus_dumpmsg ( dev , & msg_tmp , NULL ) ; //<S2SV> ret = SAA_ERR_INVALID_COMMAND ; //<S2SV> goto out ; //<S2SV> } //<S2SV> buf_size = msg -> size ; //<S2SV> bytes_to_read = sizeof ( * msg ) + msg -> size ; //<S2SV> write_distance = 0 ; //<S2SV> if ( curr_gwp >= curr_grp ) //<S2SV> write_distance = curr_gwp - curr_grp ; //<S2SV> else //<S2SV> write_distance = curr_gwp + bus -> m_dwSizeGetRing - curr_grp ; //<S2SV> if ( bytes_to_read > write_distance ) { //<S2SV> printk ( KERN_ERR "%s()<S2SV_blank>Invalid<S2SV_blank>bus<S2SV_blank>state,<S2SV_blank>missing<S2SV_blank>msg<S2SV_blank>or<S2SV_blank>mangled<S2SV_blank>ring,<S2SV_blank>faulty<S2SV_blank>H/W<S2SV_blank>/<S2SV_blank>bad<S2SV_blank>code?\\n" , //<S2SV> __func__ ) ; //<S2SV> ret = SAA_ERR_INVALID_COMMAND ; //<S2SV> goto out ; //<S2SV> } //<S2SV> new_grp = curr_grp + bytes_to_read ; //<S2SV> if ( new_grp > bus -> m_dwSizeGetRing ) { //<S2SV> new_grp -= bus -> m_dwSizeGetRing ; //<S2SV> space_rem = bus -> m_dwSizeGetRing - curr_grp ; //<S2SV> if ( space_rem < sizeof ( * msg ) ) { //<S2SV> memcpy_fromio ( msg , bus -> m_pdwGetRing + curr_grp , space_rem ) ; //<S2SV> memcpy_fromio ( ( u8 * ) msg + space_rem , bus -> m_pdwGetRing , //<S2SV> sizeof ( * msg ) - space_rem ) ; //<S2SV> if ( buf ) //<S2SV> memcpy_fromio ( buf , bus -> m_pdwGetRing + sizeof ( * msg ) - //<S2SV> space_rem , buf_size ) ; //<S2SV> } else if ( space_rem == sizeof ( * msg ) ) { //<S2SV> memcpy_fromio ( msg , bus -> m_pdwGetRing + curr_grp , sizeof ( * msg ) ) ; //<S2SV> if ( buf ) //<S2SV> memcpy_fromio ( buf , bus -> m_pdwGetRing , buf_size ) ; //<S2SV> } else { //<S2SV> memcpy_fromio ( msg , bus -> m_pdwGetRing + curr_grp , sizeof ( * msg ) ) ; //<S2SV> if ( buf ) { //<S2SV> memcpy_fromio ( buf , bus -> m_pdwGetRing + curr_grp + //<S2SV> sizeof ( * msg ) , space_rem - sizeof ( * msg ) ) ; //<S2SV> memcpy_fromio ( buf + space_rem - sizeof ( * msg ) , //<S2SV> bus -> m_pdwGetRing , bytes_to_read - //<S2SV> space_rem ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> memcpy_fromio ( msg , bus -> m_pdwGetRing + curr_grp , sizeof ( * msg ) ) ; //<S2SV> if ( buf ) //<S2SV> memcpy_fromio ( buf , bus -> m_pdwGetRing + curr_grp + sizeof ( * msg ) , //<S2SV> buf_size ) ; //<S2SV> } //<S2SV> msg -> size = le16_to_cpu ( ( __force __le16 ) msg -> size ) ; //<S2SV> msg -> command = le32_to_cpu ( ( __force __le32 ) msg -> command ) ; //<S2SV> msg -> controlselector = le16_to_cpu ( ( __force __le16 ) msg -> controlselector ) ; //<S2SV> saa7164_writel ( bus -> m_dwGetReadPos , new_grp ) ; //<S2SV> peekout : //<S2SV> ret = SAA_OK ; //<S2SV> out : //<S2SV> mutex_unlock ( & bus -> lock ) ; //<S2SV> saa7164_bus_verify ( dev ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 