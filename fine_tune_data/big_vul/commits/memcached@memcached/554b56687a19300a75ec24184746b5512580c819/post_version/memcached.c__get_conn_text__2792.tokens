static inline void get_conn_text ( const conn * c , const int af , //<S2SV> char * addr , struct sockaddr * sock_addr ) { //<S2SV> char addr_text [ MAXPATHLEN ] ; //<S2SV> addr_text [ 0 ] = '\\0' ; //<S2SV> const char * protoname = "?" ; //<S2SV> unsigned short port = 0 ; //<S2SV> size_t pathlen = 0 ; //<S2SV> switch ( af ) { //<S2SV> case AF_INET : //<S2SV> ( void ) inet_ntop ( af , //<S2SV> & ( ( struct sockaddr_in * ) sock_addr ) -> sin_addr , //<S2SV> addr_text , //<S2SV> sizeof ( addr_text ) - 1 ) ; //<S2SV> port = ntohs ( ( ( struct sockaddr_in * ) sock_addr ) -> sin_port ) ; //<S2SV> protoname = IS_UDP ( c -> transport ) ? "udp" : "tcp" ; //<S2SV> break ; //<S2SV> case AF_INET6 : //<S2SV> addr_text [ 0 ] = '[' ; //<S2SV> addr_text [ 1 ] = '\\0' ; //<S2SV> if ( inet_ntop ( af , //<S2SV> & ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_addr , //<S2SV> addr_text + 1 , //<S2SV> sizeof ( addr_text ) - 2 ) ) { //<S2SV> strcat ( addr_text , "]" ) ; //<S2SV> } //<S2SV> port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; //<S2SV> protoname = IS_UDP ( c -> transport ) ? "udp6" : "tcp6" ; //<S2SV> break ; //<S2SV> case AF_UNIX : //<S2SV> pathlen = sizeof ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_path ) ; //<S2SV> if ( MAXPATHLEN <= pathlen ) { //<S2SV> pathlen = MAXPATHLEN - 1 ; //<S2SV> } //<S2SV> strncpy ( addr_text , //<S2SV> ( ( struct sockaddr_un * ) sock_addr ) -> sun_path , //<S2SV> pathlen ) ; //<S2SV> addr_text [ pathlen ] = '\\0' ; //<S2SV> protoname = "unix" ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( strlen ( addr_text ) < 2 ) { //<S2SV> sprintf ( addr_text , "<AF<S2SV_blank>%d>" , af ) ; //<S2SV> } //<S2SV> if ( port ) { //<S2SV> sprintf ( addr , "%s:%s:%u" , protoname , addr_text , port ) ; //<S2SV> } else { //<S2SV> sprintf ( addr , "%s:%s" , protoname , addr_text ) ; //<S2SV> } //<S2SV> } //<S2SV> 