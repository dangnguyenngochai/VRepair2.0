static inline void process_get_command ( conn * c , token_t * tokens , size_t ntokens , bool return_cas ) { //<S2SV> char * key ; //<S2SV> size_t nkey ; //<S2SV> int i = 0 ; //<S2SV> item * it ; //<S2SV> token_t * key_token = & tokens [ KEY_TOKEN ] ; //<S2SV> char * suffix ; //<S2SV> assert ( c != NULL ) ; //<S2SV> do { //<S2SV> while ( key_token -> length != 0 ) { //<S2SV> key = key_token -> value ; //<S2SV> nkey = key_token -> length ; //<S2SV> if ( nkey > KEY_MAX_LENGTH ) { //<S2SV> out_string ( c , "CLIENT_ERROR<S2SV_blank>bad<S2SV_blank>command<S2SV_blank>line<S2SV_blank>format" ) ; //<S2SV> while ( i -- > 0 ) { //<S2SV> item_remove ( * ( c -> ilist + i ) ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> it = limited_get ( key , nkey , c ) ; //<S2SV> if ( settings . detail_enabled ) { //<S2SV> stats_prefix_record_get ( key , nkey , NULL != it ) ; //<S2SV> } //<S2SV> if ( it ) { //<S2SV> if ( i >= c -> isize ) { //<S2SV> item * * new_list = realloc ( c -> ilist , sizeof ( item * ) * c -> isize * 2 ) ; //<S2SV> if ( new_list ) { //<S2SV> c -> isize *= 2 ; //<S2SV> c -> ilist = new_list ; //<S2SV> } else { //<S2SV> STATS_LOCK ( ) ; //<S2SV> stats . malloc_fails ++ ; //<S2SV> STATS_UNLOCK ( ) ; //<S2SV> item_remove ( it ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( return_cas || ! settings . inline_ascii_response ) //<S2SV> { //<S2SV> MEMCACHED_COMMAND_GET ( c -> sfd , ITEM_key ( it ) , it -> nkey , //<S2SV> it -> nbytes , ITEM_get_cas ( it ) ) ; //<S2SV> if ( i >= c -> suffixsize ) { //<S2SV> char * * new_suffix_list = realloc ( c -> suffixlist , //<S2SV> sizeof ( char * ) * c -> suffixsize * 2 ) ; //<S2SV> if ( new_suffix_list ) { //<S2SV> c -> suffixsize *= 2 ; //<S2SV> c -> suffixlist = new_suffix_list ; //<S2SV> } else { //<S2SV> STATS_LOCK ( ) ; //<S2SV> stats . malloc_fails ++ ; //<S2SV> STATS_UNLOCK ( ) ; //<S2SV> item_remove ( it ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> suffix = do_cache_alloc ( c -> thread -> suffix_cache ) ; //<S2SV> if ( suffix == NULL ) { //<S2SV> STATS_LOCK ( ) ; //<S2SV> stats . malloc_fails ++ ; //<S2SV> STATS_UNLOCK ( ) ; //<S2SV> out_of_memory ( c , "SERVER_ERROR<S2SV_blank>out<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>making<S2SV_blank>CAS<S2SV_blank>suffix" ) ; //<S2SV> item_remove ( it ) ; //<S2SV> while ( i -- > 0 ) { //<S2SV> item_remove ( * ( c -> ilist + i ) ) ; //<S2SV> } //<S2SV> return ; //<S2SV> } //<S2SV> * ( c -> suffixlist + i ) = suffix ; //<S2SV> int suffix_len = make_ascii_get_suffix ( suffix , it , return_cas ) ; //<S2SV> if ( add_iov ( c , "VALUE<S2SV_blank>" , 6 ) != 0 || //<S2SV> add_iov ( c , ITEM_key ( it ) , it -> nkey ) != 0 || //<S2SV> ( settings . inline_ascii_response && add_iov ( c , ITEM_suffix ( it ) , it -> nsuffix - 2 ) != 0 ) || //<S2SV> add_iov ( c , suffix , suffix_len ) != 0 ) //<S2SV> { //<S2SV> item_remove ( it ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ( it -> it_flags & ITEM_CHUNKED ) == 0 ) { //<S2SV> add_iov ( c , ITEM_data ( it ) , it -> nbytes ) ; //<S2SV> } else if ( add_chunked_item_iovs ( c , it , it -> nbytes ) != 0 ) { //<S2SV> item_remove ( it ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> MEMCACHED_COMMAND_GET ( c -> sfd , ITEM_key ( it ) , it -> nkey , //<S2SV> it -> nbytes , ITEM_get_cas ( it ) ) ; //<S2SV> if ( add_iov ( c , "VALUE<S2SV_blank>" , 6 ) != 0 || //<S2SV> add_iov ( c , ITEM_key ( it ) , it -> nkey ) != 0 ) //<S2SV> { //<S2SV> item_remove ( it ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ( it -> it_flags & ITEM_CHUNKED ) == 0 ) //<S2SV> { //<S2SV> if ( add_iov ( c , ITEM_suffix ( it ) , it -> nsuffix + it -> nbytes ) != 0 ) //<S2SV> { //<S2SV> item_remove ( it ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } else if ( add_iov ( c , ITEM_suffix ( it ) , it -> nsuffix ) != 0 || //<S2SV> add_chunked_item_iovs ( c , it , it -> nbytes ) != 0 ) { //<S2SV> item_remove ( it ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( settings . verbose > 1 ) { //<S2SV> int ii ; //<S2SV> fprintf ( stderr , ">%d<S2SV_blank>sending<S2SV_blank>key<S2SV_blank>" , c -> sfd ) ; //<S2SV> for ( ii = 0 ; ii < it -> nkey ; ++ ii ) { //<S2SV> fprintf ( stderr , "%c" , key [ ii ] ) ; //<S2SV> } //<S2SV> fprintf ( stderr , "\\n" ) ; //<S2SV> } //<S2SV> pthread_mutex_lock ( & c -> thread -> stats . mutex ) ; //<S2SV> c -> thread -> stats . slab_stats [ ITEM_clsid ( it ) ] . get_hits ++ ; //<S2SV> c -> thread -> stats . get_cmds ++ ; //<S2SV> pthread_mutex_unlock ( & c -> thread -> stats . mutex ) ; //<S2SV> * ( c -> ilist + i ) = it ; //<S2SV> i ++ ; //<S2SV> } else { //<S2SV> pthread_mutex_lock ( & c -> thread -> stats . mutex ) ; //<S2SV> c -> thread -> stats . get_misses ++ ; //<S2SV> c -> thread -> stats . get_cmds ++ ; //<S2SV> pthread_mutex_unlock ( & c -> thread -> stats . mutex ) ; //<S2SV> MEMCACHED_COMMAND_GET ( c -> sfd , key , nkey , - 1 , 0 ) ; //<S2SV> } //<S2SV> key_token ++ ; //<S2SV> } //<S2SV> if ( key_token -> value != NULL ) { //<S2SV> ntokens = tokenize_command ( key_token -> value , tokens , MAX_TOKENS ) ; //<S2SV> key_token = tokens ; //<S2SV> } //<S2SV> } while ( key_token -> value != NULL ) ; //<S2SV> c -> icurr = c -> ilist ; //<S2SV> c -> ileft = i ; //<S2SV> if ( return_cas || ! settings . inline_ascii_response ) { //<S2SV> c -> suffixcurr = c -> suffixlist ; //<S2SV> c -> suffixleft = i ; //<S2SV> } //<S2SV> if ( settings . verbose > 1 ) //<S2SV> fprintf ( stderr , ">%d<S2SV_blank>END\\n" , c -> sfd ) ; //<S2SV> if ( key_token -> value != NULL || add_iov ( c , "END\\r\\n" , 5 ) != 0 //<S2SV> || ( IS_UDP ( c -> transport ) && build_udp_headers ( c ) != 0 ) ) { //<S2SV> out_of_memory ( c , "SERVER_ERROR<S2SV_blank>out<S2SV_blank>of<S2SV_blank>memory<S2SV_blank>writing<S2SV_blank>get<S2SV_blank>response" ) ; //<S2SV> } //<S2SV> else { //<S2SV> conn_set_state ( c , conn_mwrite ) ; //<S2SV> c -> msgcurr = 0 ; //<S2SV> } //<S2SV> } //<S2SV> 