static void process_lru_command ( conn * c , token_t * tokens , const size_t ntokens ) { //<S2SV> uint32_t pct_hot ; //<S2SV> uint32_t pct_warm ; //<S2SV> double hot_factor ; //<S2SV> int32_t ttl ; //<S2SV> double factor ; //<S2SV> set_noreply_maybe ( c , tokens , ntokens ) ; //<S2SV> if ( strcmp ( tokens [ 1 ] . value , "tune" ) == 0 && ntokens >= 7 ) { //<S2SV> if ( ! safe_strtoul ( tokens [ 2 ] . value , & pct_hot ) || //<S2SV> ! safe_strtoul ( tokens [ 3 ] . value , & pct_warm ) || //<S2SV> ! safe_strtod ( tokens [ 4 ] . value , & hot_factor ) || //<S2SV> ! safe_strtod ( tokens [ 5 ] . value , & factor ) ) { //<S2SV> out_string ( c , "ERROR" ) ; //<S2SV> } else { //<S2SV> if ( pct_hot + pct_warm > 80 ) { //<S2SV> out_string ( c , "ERROR<S2SV_blank>hot<S2SV_blank>and<S2SV_blank>warm<S2SV_blank>pcts<S2SV_blank>must<S2SV_blank>not<S2SV_blank>exceed<S2SV_blank>80" ) ; //<S2SV> } else if ( factor <= 0 || hot_factor <= 0 ) { //<S2SV> out_string ( c , "ERROR<S2SV_blank>hot/warm<S2SV_blank>age<S2SV_blank>factors<S2SV_blank>must<S2SV_blank>be<S2SV_blank>greater<S2SV_blank>than<S2SV_blank>0" ) ; //<S2SV> } else { //<S2SV> settings . hot_lru_pct = pct_hot ; //<S2SV> settings . warm_lru_pct = pct_warm ; //<S2SV> settings . hot_max_factor = hot_factor ; //<S2SV> settings . warm_max_factor = factor ; //<S2SV> out_string ( c , "OK" ) ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( strcmp ( tokens [ 1 ] . value , "mode" ) == 0 && ntokens >= 4 && //<S2SV> settings . lru_maintainer_thread ) { //<S2SV> if ( strcmp ( tokens [ 2 ] . value , "flat" ) == 0 ) { //<S2SV> settings . lru_segmented = false ; //<S2SV> out_string ( c , "OK" ) ; //<S2SV> } else if ( strcmp ( tokens [ 2 ] . value , "segmented" ) == 0 ) { //<S2SV> settings . lru_segmented = true ; //<S2SV> out_string ( c , "OK" ) ; //<S2SV> } else { //<S2SV> out_string ( c , "ERROR" ) ; //<S2SV> } //<S2SV> } else if ( strcmp ( tokens [ 1 ] . value , "temp_ttl" ) == 0 && ntokens >= 4 && //<S2SV> settings . lru_maintainer_thread ) { //<S2SV> if ( ! safe_strtol ( tokens [ 2 ] . value , & ttl ) ) { //<S2SV> out_string ( c , "ERROR" ) ; //<S2SV> } else { //<S2SV> if ( ttl < 0 ) { //<S2SV> settings . temp_lru = false ; //<S2SV> } else { //<S2SV> settings . temp_lru = true ; //<S2SV> settings . temporary_ttl = ttl ; //<S2SV> } //<S2SV> out_string ( c , "OK" ) ; //<S2SV> } //<S2SV> } else { //<S2SV> out_string ( c , "ERROR" ) ; //<S2SV> } //<S2SV> } //<S2SV> 