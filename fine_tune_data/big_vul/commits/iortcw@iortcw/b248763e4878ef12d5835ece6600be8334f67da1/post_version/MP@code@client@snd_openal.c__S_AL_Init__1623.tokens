qboolean S_AL_Init ( soundInterface_t * si ) //<S2SV> { //<S2SV> # ifdef USE_OPENAL //<S2SV> const char * device = NULL ; //<S2SV> const char * inputdevice = NULL ; //<S2SV> int i ; //<S2SV> if ( ! si ) { //<S2SV> return qfalse ; //<S2SV> } //<S2SV> for ( i = 0 ; i < MAX_RAW_STREAMS ; i ++ ) { //<S2SV> streamSourceHandles [ i ] = - 1 ; //<S2SV> streamPlaying [ i ] = qfalse ; //<S2SV> streamSources [ i ] = 0 ; //<S2SV> streamNumBuffers [ i ] = 0 ; //<S2SV> streamBufIndex [ i ] = 0 ; //<S2SV> } //<S2SV> s_alPrecache = Cvar_Get ( "s_alPrecache" , "1" , CVAR_ARCHIVE ) ; //<S2SV> s_alGain = Cvar_Get ( "s_alGain" , "1.0" , CVAR_ARCHIVE ) ; //<S2SV> s_alSources = Cvar_Get ( "s_alSources" , "128" , CVAR_ARCHIVE ) ; //<S2SV> s_alDopplerFactor = Cvar_Get ( "s_alDopplerFactor" , "1.0" , CVAR_ARCHIVE ) ; //<S2SV> s_alDopplerSpeed = Cvar_Get ( "s_alDopplerSpeed" , "9000" , CVAR_ARCHIVE ) ; //<S2SV> s_alMinDistance = Cvar_Get ( "s_alMinDistance" , "120" , CVAR_CHEAT ) ; //<S2SV> s_alMaxDistance = Cvar_Get ( "s_alMaxDistance" , "1024" , CVAR_CHEAT ) ; //<S2SV> s_alRolloff = Cvar_Get ( "s_alRolloff" , "2" , CVAR_CHEAT ) ; //<S2SV> s_alGraceDistance = Cvar_Get ( "s_alGraceDistance" , "512" , CVAR_CHEAT ) ; //<S2SV> s_alDriver = Cvar_Get ( "s_alDriver" , ALDRIVER_DEFAULT , CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED ) ; //<S2SV> s_alInputDevice = Cvar_Get ( "s_alInputDevice" , "" , CVAR_ARCHIVE | CVAR_LATCH ) ; //<S2SV> s_alDevice = Cvar_Get ( "s_alDevice" , "" , CVAR_ARCHIVE | CVAR_LATCH ) ; //<S2SV> if ( COM_CompareExtension ( s_alDriver -> string , ".pk3" ) ) //<S2SV> { //<S2SV> Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , s_alDriver -> string ) ; //<S2SV> return qfalse ; //<S2SV> } //<S2SV> if ( ! QAL_Init ( s_alDriver -> string ) ) //<S2SV> { //<S2SV> # if defined ( _WIN32 ) //<S2SV> if ( ! Q_stricmp ( s_alDriver -> string , ALDRIVER_DEFAULT ) && ! QAL_Init ( "OpenAL64.dll" ) ) { //<S2SV> # elif defined ( __APPLE__ ) //<S2SV> if ( ! Q_stricmp ( s_alDriver -> string , ALDRIVER_DEFAULT ) && ! QAL_Init ( "/System/Library/Frameworks/OpenAL.framework/OpenAL" ) ) { //<S2SV> # else //<S2SV> if ( ! Q_stricmp ( s_alDriver -> string , ALDRIVER_DEFAULT ) || ! QAL_Init ( ALDRIVER_DEFAULT ) ) { //<S2SV> # endif //<S2SV> return qfalse ; //<S2SV> } //<S2SV> } //<S2SV> device = s_alDevice -> string ; //<S2SV> if ( device && ! * device ) //<S2SV> device = NULL ; //<S2SV> inputdevice = s_alInputDevice -> string ; //<S2SV> if ( inputdevice && ! * inputdevice ) //<S2SV> inputdevice = NULL ; //<S2SV> enumeration_all_ext = qalcIsExtensionPresent ( NULL , "ALC_ENUMERATE_ALL_EXT" ) ; //<S2SV> enumeration_ext = qalcIsExtensionPresent ( NULL , "ALC_ENUMERATION_EXT" ) ; //<S2SV> if ( enumeration_ext || enumeration_all_ext ) //<S2SV> { //<S2SV> char devicenames [ 16384 ] = "" ; //<S2SV> const char * devicelist ; //<S2SV> # ifdef _WIN32 //<S2SV> const char * defaultdevice ; //<S2SV> # endif //<S2SV> int curlen ; //<S2SV> if ( enumeration_all_ext ) //<S2SV> { //<S2SV> devicelist = qalcGetString ( NULL , ALC_ALL_DEVICES_SPECIFIER ) ; //<S2SV> # ifdef _WIN32 //<S2SV> defaultdevice = qalcGetString ( NULL , ALC_DEFAULT_ALL_DEVICES_SPECIFIER ) ; //<S2SV> # endif //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> devicelist = qalcGetString ( NULL , ALC_DEVICE_SPECIFIER ) ; //<S2SV> # ifdef _WIN32 //<S2SV> defaultdevice = qalcGetString ( NULL , ALC_DEFAULT_DEVICE_SPECIFIER ) ; //<S2SV> # endif //<S2SV> enumeration_ext = qtrue ; //<S2SV> } //<S2SV> # ifdef _WIN32 //<S2SV> if ( ! device && defaultdevice && ! strcmp ( defaultdevice , "Generic<S2SV_blank>Hardware" ) ) //<S2SV> device = "Generic<S2SV_blank>Software" ; //<S2SV> # endif //<S2SV> if ( devicelist ) //<S2SV> { //<S2SV> while ( ( curlen = strlen ( devicelist ) ) ) //<S2SV> { //<S2SV> Q_strcat ( devicenames , sizeof ( devicenames ) , devicelist ) ; //<S2SV> Q_strcat ( devicenames , sizeof ( devicenames ) , "\\n" ) ; //<S2SV> devicelist += curlen + 1 ; //<S2SV> } //<S2SV> } //<S2SV> s_alAvailableDevices = Cvar_Get ( "s_alAvailableDevices" , devicenames , CVAR_ROM | CVAR_NORESTART ) ; //<S2SV> } //<S2SV> alDevice = qalcOpenDevice ( device ) ; //<S2SV> if ( ! alDevice && device ) //<S2SV> { //<S2SV> Com_Printf ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>OpenAL<S2SV_blank>device<S2SV_blank>\'%s\',<S2SV_blank>trying<S2SV_blank>default.\\n" , device ) ; //<S2SV> alDevice = qalcOpenDevice ( NULL ) ; //<S2SV> } //<S2SV> if ( ! alDevice ) //<S2SV> { //<S2SV> QAL_Shutdown ( ) ; //<S2SV> Com_Printf ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>OpenAL<S2SV_blank>device.\\n" ) ; //<S2SV> return qfalse ; //<S2SV> } //<S2SV> alContext = qalcCreateContext ( alDevice , NULL ) ; //<S2SV> if ( ! alContext ) //<S2SV> { //<S2SV> QAL_Shutdown ( ) ; //<S2SV> qalcCloseDevice ( alDevice ) ; //<S2SV> Com_Printf ( "Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>OpenAL<S2SV_blank>context.\\n" ) ; //<S2SV> return qfalse ; //<S2SV> } //<S2SV> qalcMakeContextCurrent ( alContext ) ; //<S2SV> S_AL_BufferInit ( ) ; //<S2SV> S_AL_SrcInit ( ) ; //<S2SV> Com_Printf ( "Allocated<S2SV_blank>%d<S2SV_blank>sources.\\n" , srcCount ) ; //<S2SV> qalDistanceModel ( AL_INVERSE_DISTANCE_CLAMPED ) ; //<S2SV> qalDopplerFactor ( s_alDopplerFactor -> value ) ; //<S2SV> qalSpeedOfSound ( s_alDopplerSpeed -> value ) ; //<S2SV> # ifdef USE_VOIP //<S2SV> s_alCapture = Cvar_Get ( "s_alCapture" , "1" , CVAR_ARCHIVE | CVAR_LATCH ) ; //<S2SV> if ( ! s_alCapture -> integer ) //<S2SV> { //<S2SV> Com_Printf ( "OpenAL<S2SV_blank>capture<S2SV_blank>support<S2SV_blank>disabled<S2SV_blank>by<S2SV_blank>user<S2SV_blank>(\'+set<S2SV_blank>s_alCapture<S2SV_blank>1\'<S2SV_blank>to<S2SV_blank>enable)\\n" ) ; //<S2SV> } //<S2SV> # if USE_MUMBLE //<S2SV> else if ( cl_useMumble -> integer ) //<S2SV> { //<S2SV> Com_Printf ( "OpenAL<S2SV_blank>capture<S2SV_blank>support<S2SV_blank>disabled<S2SV_blank>for<S2SV_blank>Mumble<S2SV_blank>support\\n" ) ; //<S2SV> } //<S2SV> # endif //<S2SV> else //<S2SV> { //<S2SV> # ifdef __APPLE__ //<S2SV> if ( qalcCaptureOpenDevice == NULL ) //<S2SV> # else //<S2SV> if ( ! qalcIsExtensionPresent ( NULL , "ALC_EXT_capture" ) ) //<S2SV> # endif //<S2SV> { //<S2SV> Com_Printf ( "No<S2SV_blank>ALC_EXT_capture<S2SV_blank>support,<S2SV_blank>can\'t<S2SV_blank>record<S2SV_blank>audio.\\n" ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> char inputdevicenames [ 16384 ] = "" ; //<S2SV> const char * inputdevicelist ; //<S2SV> const char * defaultinputdevice ; //<S2SV> int curlen ; //<S2SV> capture_ext = qtrue ; //<S2SV> inputdevicelist = qalcGetString ( NULL , ALC_CAPTURE_DEVICE_SPECIFIER ) ; //<S2SV> defaultinputdevice = qalcGetString ( NULL , ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER ) ; //<S2SV> if ( inputdevicelist ) //<S2SV> { //<S2SV> while ( ( curlen = strlen ( inputdevicelist ) ) ) //<S2SV> { //<S2SV> Q_strcat ( inputdevicenames , sizeof ( inputdevicenames ) , inputdevicelist ) ; //<S2SV> Q_strcat ( inputdevicenames , sizeof ( inputdevicenames ) , "\\n" ) ; //<S2SV> inputdevicelist += curlen + 1 ; //<S2SV> } //<S2SV> } //<S2SV> s_alAvailableInputDevices = Cvar_Get ( "s_alAvailableInputDevices" , inputdevicenames , CVAR_ROM | CVAR_NORESTART ) ; //<S2SV> Com_Printf ( "OpenAL<S2SV_blank>default<S2SV_blank>capture<S2SV_blank>device<S2SV_blank>is<S2SV_blank>\'%s\'\\n" , defaultinputdevice ? defaultinputdevice : "none" ) ; //<S2SV> alCaptureDevice = qalcCaptureOpenDevice ( inputdevice , 48000 , AL_FORMAT_MONO16 , VOIP_MAX_PACKET_SAMPLES * 4 ) ; //<S2SV> if ( ! alCaptureDevice && inputdevice ) //<S2SV> { //<S2SV> Com_Printf ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>OpenAL<S2SV_blank>Input<S2SV_blank>device<S2SV_blank>\'%s\',<S2SV_blank>trying<S2SV_blank>default.\\n" , inputdevice ) ; //<S2SV> alCaptureDevice = qalcCaptureOpenDevice ( NULL , 48000 , AL_FORMAT_MONO16 , VOIP_MAX_PACKET_SAMPLES * 4 ) ; //<S2SV> } //<S2SV> Com_Printf ( "OpenAL<S2SV_blank>capture<S2SV_blank>device<S2SV_blank>%s.\\n" , //<S2SV> ( alCaptureDevice == NULL ) ? "failed<S2SV_blank>to<S2SV_blank>open" : "opened" ) ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> si -> Shutdown = S_AL_Shutdown ; //<S2SV> si -> StartSound = S_AL_StartSound ; //<S2SV> si -> StartSoundEx = S_AL_StartSoundEx ; //<S2SV> si -> StartLocalSound = S_AL_StartLocalSound ; //<S2SV> si -> StartBackgroundTrack = S_AL_StartBackgroundTrack ; //<S2SV> si -> StopBackgroundTrack = S_AL_StopBackgroundTrack ; //<S2SV> si -> StartStreamingSound = S_AL_StartStreamingSound ; //<S2SV> si -> GetVoiceAmplitude = S_AL_GetVoiceAmplitude ; //<S2SV> si -> RawSamples = S_AL_RawSamples ; //<S2SV> si -> StopAllSounds = S_AL_StopAllSounds ; //<S2SV> si -> ClearLoopingSounds = S_AL_ClearLoopingSounds ; //<S2SV> si -> AddLoopingSound = S_AL_AddLoopingSound ; //<S2SV> si -> AddRealLoopingSound = S_AL_AddRealLoopingSound ; //<S2SV> si -> StopLoopingSound = S_AL_StopLoopingSound ; //<S2SV> si -> Respatialize = S_AL_Respatialize ; //<S2SV> si -> UpdateEntityPosition = S_AL_UpdateEntityPosition ; //<S2SV> si -> Update = S_AL_Update ; //<S2SV> si -> DisableSounds = S_AL_DisableSounds ; //<S2SV> si -> BeginRegistration = S_AL_BeginRegistration ; //<S2SV> si -> RegisterSound = S_AL_RegisterSound ; //<S2SV> si -> ClearSoundBuffer = S_AL_ClearSoundBuffer ; //<S2SV> si -> SoundInfo = S_AL_SoundInfo ; //<S2SV> si -> SoundList = S_AL_SoundList ; //<S2SV> # ifdef USE_VOIP //<S2SV> si -> StartCapture = S_AL_StartCapture ; //<S2SV> si -> AvailableCaptureSamples = S_AL_AvailableCaptureSamples ; //<S2SV> si -> Capture = S_AL_Capture ; //<S2SV> si -> StopCapture = S_AL_StopCapture ; //<S2SV> si -> MasterGain = S_AL_MasterGain ; //<S2SV> # endif //<S2SV> return qtrue ; //<S2SV> # else //<S2SV> return qfalse ; //<S2SV> # endif //<S2SV> } //<S2SV> 