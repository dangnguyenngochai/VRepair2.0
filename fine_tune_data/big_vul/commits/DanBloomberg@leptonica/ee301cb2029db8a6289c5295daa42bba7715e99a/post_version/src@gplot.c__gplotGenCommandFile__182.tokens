l_int32 //<S2SV> gplotGenCommandFile ( GPLOT * gplot ) //<S2SV> { //<S2SV> char buf [ L_BUFSIZE ] ; //<S2SV> char * cmdstr , * plottitle , * dataname ; //<S2SV> l_int32 i , plotstyle , nplots ; //<S2SV> FILE * fp ; //<S2SV> PROCNAME ( "gplotGenCommandFile" ) ; //<S2SV> if ( ! gplot ) //<S2SV> return ERROR_INT ( "gplot<S2SV_blank>not<S2SV_blank>defined" , procName , 1 ) ; //<S2SV> sarrayClear ( gplot -> cmddata ) ; //<S2SV> if ( gplot -> title ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>title<S2SV_blank>\'%s\'" , gplot -> title ) ; //<S2SV> sarrayAddString ( gplot -> cmddata , buf , L_COPY ) ; //<S2SV> } //<S2SV> if ( gplot -> xlabel ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>xlabel<S2SV_blank>\'%s\'" , gplot -> xlabel ) ; //<S2SV> sarrayAddString ( gplot -> cmddata , buf , L_COPY ) ; //<S2SV> } //<S2SV> if ( gplot -> ylabel ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>ylabel<S2SV_blank>\'%s\'" , gplot -> ylabel ) ; //<S2SV> sarrayAddString ( gplot -> cmddata , buf , L_COPY ) ; //<S2SV> } //<S2SV> if ( gplot -> outformat == GPLOT_PNG ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , //<S2SV> gplot -> outname ) ; //<S2SV> } else if ( gplot -> outformat == GPLOT_PS ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , //<S2SV> gplot -> outname ) ; //<S2SV> } else if ( gplot -> outformat == GPLOT_EPS ) { //<S2SV> snprintf ( buf , L_BUFSIZE , //<S2SV> "set<S2SV_blank>terminal<S2SV_blank>postscript<S2SV_blank>eps;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , //<S2SV> gplot -> outname ) ; //<S2SV> } else if ( gplot -> outformat == GPLOT_LATEX ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , //<S2SV> gplot -> outname ) ; //<S2SV> } //<S2SV> sarrayAddString ( gplot -> cmddata , buf , L_COPY ) ; //<S2SV> if ( gplot -> scaling == GPLOT_LOG_SCALE_X || //<S2SV> gplot -> scaling == GPLOT_LOG_SCALE_X_Y ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>logscale<S2SV_blank>x" ) ; //<S2SV> sarrayAddString ( gplot -> cmddata , buf , L_COPY ) ; //<S2SV> } //<S2SV> if ( gplot -> scaling == GPLOT_LOG_SCALE_Y || //<S2SV> gplot -> scaling == GPLOT_LOG_SCALE_X_Y ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "set<S2SV_blank>logscale<S2SV_blank>y" ) ; //<S2SV> sarrayAddString ( gplot -> cmddata , buf , L_COPY ) ; //<S2SV> } //<S2SV> nplots = sarrayGetCount ( gplot -> datanames ) ; //<S2SV> for ( i = 0 ; i < nplots ; i ++ ) { //<S2SV> plottitle = sarrayGetString ( gplot -> plottitles , i , L_NOCOPY ) ; //<S2SV> dataname = sarrayGetString ( gplot -> datanames , i , L_NOCOPY ) ; //<S2SV> numaGetIValue ( gplot -> plotstyles , i , & plotstyle ) ; //<S2SV> if ( nplots == 1 ) { //<S2SV> snprintf ( buf , L_BUFSIZE , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , //<S2SV> dataname , plottitle , gplotstylenames [ plotstyle ] ) ; //<S2SV> } else { //<S2SV> if ( i == 0 ) //<S2SV> snprintf ( buf , L_BUFSIZE , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , //<S2SV> dataname , plottitle , gplotstylenames [ plotstyle ] ) ; //<S2SV> else if ( i < nplots - 1 ) //<S2SV> snprintf ( buf , L_BUFSIZE , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , //<S2SV> dataname , plottitle , gplotstylenames [ plotstyle ] ) ; //<S2SV> else //<S2SV> snprintf ( buf , L_BUFSIZE , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , //<S2SV> dataname , plottitle , gplotstylenames [ plotstyle ] ) ; //<S2SV> } //<S2SV> sarrayAddString ( gplot -> cmddata , buf , L_COPY ) ; //<S2SV> } //<S2SV> cmdstr = sarrayToString ( gplot -> cmddata , 1 ) ; //<S2SV> if ( ( fp = fopenWriteStream ( gplot -> cmdname , "w" ) ) == NULL ) { //<S2SV> LEPT_FREE ( cmdstr ) ; //<S2SV> return ERROR_INT ( "cmd<S2SV_blank>stream<S2SV_blank>not<S2SV_blank>opened" , procName , 1 ) ; //<S2SV> } //<S2SV> fwrite ( cmdstr , 1 , strlen ( cmdstr ) , fp ) ; //<S2SV> fclose ( fp ) ; //<S2SV> LEPT_FREE ( cmdstr ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 