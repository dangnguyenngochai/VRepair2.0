static l_int32 //<S2SV> pixHtmlViewer ( const char * dirin , //<S2SV> const char * dirout , //<S2SV> const char * rootname , //<S2SV> l_int32 thumbwidth , //<S2SV> l_int32 viewwidth ) //<S2SV> { //<S2SV> char * fname , * fullname , * outname ; //<S2SV> char * mainname , * linkname , * linknameshort ; //<S2SV> char * viewfile , * thumbfile ; //<S2SV> char * shtml , * slink ; //<S2SV> char charbuf [ 512 ] ; //<S2SV> char htmlstring [ ] = "<html>" ; //<S2SV> char framestring [ ] = "</frameset></html>" ; //<S2SV> l_int32 i , nfiles , index , w , d , nimages , ret ; //<S2SV> l_float32 factor ; //<S2SV> PIX * pix , * pixthumb , * pixview ; //<S2SV> SARRAY * safiles , * sathumbs , * saviews , * sahtml , * salink ; //<S2SV> PROCNAME ( "pixHtmlViewer" ) ; //<S2SV> if ( ! dirin ) //<S2SV> return ERROR_INT ( "dirin<S2SV_blank>not<S2SV_blank>defined" , procName , 1 ) ; //<S2SV> if ( ! dirout ) //<S2SV> return ERROR_INT ( "dirout<S2SV_blank>not<S2SV_blank>defined" , procName , 1 ) ; //<S2SV> if ( ! rootname ) //<S2SV> return ERROR_INT ( "rootname<S2SV_blank>not<S2SV_blank>defined" , procName , 1 ) ; //<S2SV> if ( thumbwidth == 0 ) //<S2SV> thumbwidth = DEFAULT_THUMB_WIDTH ; //<S2SV> if ( thumbwidth < MIN_THUMB_WIDTH ) { //<S2SV> L_WARNING ( "thumbwidth<S2SV_blank>too<S2SV_blank>small;<S2SV_blank>using<S2SV_blank>min<S2SV_blank>value\\n" , procName ) ; //<S2SV> thumbwidth = MIN_THUMB_WIDTH ; //<S2SV> } //<S2SV> if ( viewwidth == 0 ) //<S2SV> viewwidth = DEFAULT_VIEW_WIDTH ; //<S2SV> if ( viewwidth < MIN_VIEW_WIDTH ) { //<S2SV> L_WARNING ( "viewwidth<S2SV_blank>too<S2SV_blank>small;<S2SV_blank>using<S2SV_blank>min<S2SV_blank>value\\n" , procName ) ; //<S2SV> viewwidth = MIN_VIEW_WIDTH ; //<S2SV> } //<S2SV> # ifndef _WIN32 //<S2SV> snprintf ( charbuf , sizeof ( charbuf ) , "mkdir<S2SV_blank>-p<S2SV_blank>%s" , dirout ) ; //<S2SV> ret = system ( charbuf ) ; //<S2SV> # else //<S2SV> ret = CreateDirectory ( dirout , NULL ) ? 0 : 1 ; //<S2SV> # endif //<S2SV> if ( ret ) { //<S2SV> L_ERROR ( "output<S2SV_blank>directory<S2SV_blank>%s<S2SV_blank>not<S2SV_blank>made\\n" , procName , dirout ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( ( safiles = getFilenamesInDirectory ( dirin ) ) == NULL ) //<S2SV> return ERROR_INT ( "safiles<S2SV_blank>not<S2SV_blank>made" , procName , 1 ) ; //<S2SV> snprintf ( charbuf , sizeof ( charbuf ) , "%s/%s.html" , dirout , rootname ) ; //<S2SV> mainname = stringNew ( charbuf ) ; //<S2SV> snprintf ( charbuf , sizeof ( charbuf ) , "%s/%s-links.html" , dirout , rootname ) ; //<S2SV> linkname = stringNew ( charbuf ) ; //<S2SV> linknameshort = stringJoin ( rootname , "-links.html" ) ; //<S2SV> sathumbs = sarrayCreate ( 0 ) ; //<S2SV> saviews = sarrayCreate ( 0 ) ; //<S2SV> nfiles = sarrayGetCount ( safiles ) ; //<S2SV> index = 0 ; //<S2SV> for ( i = 0 ; i < nfiles ; i ++ ) { //<S2SV> fname = sarrayGetString ( safiles , i , L_NOCOPY ) ; //<S2SV> fullname = genPathname ( dirin , fname ) ; //<S2SV> fprintf ( stderr , "name:<S2SV_blank>%s\\n" , fullname ) ; //<S2SV> if ( ( pix = pixRead ( fullname ) ) == NULL ) { //<S2SV> fprintf ( stderr , "file<S2SV_blank>%s<S2SV_blank>not<S2SV_blank>a<S2SV_blank>readable<S2SV_blank>image\\n" , fullname ) ; //<S2SV> lept_free ( fullname ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> lept_free ( fullname ) ; //<S2SV> pixGetDimensions ( pix , & w , NULL , & d ) ; //<S2SV> factor = ( l_float32 ) thumbwidth / ( l_float32 ) w ; //<S2SV> pixthumb = pixScale ( pix , factor , factor ) ; //<S2SV> snprintf ( charbuf , sizeof ( charbuf ) , "%s_thumb_%03d" , rootname , index ) ; //<S2SV> sarrayAddString ( sathumbs , charbuf , L_COPY ) ; //<S2SV> outname = genPathname ( dirout , charbuf ) ; //<S2SV> WriteFormattedPix ( outname , pixthumb ) ; //<S2SV> lept_free ( outname ) ; //<S2SV> pixDestroy ( & pixthumb ) ; //<S2SV> factor = ( l_float32 ) viewwidth / ( l_float32 ) w ; //<S2SV> if ( factor >= 1.0 ) //<S2SV> pixview = pixClone ( pix ) ; //<S2SV> else //<S2SV> pixview = pixScale ( pix , factor , factor ) ; //<S2SV> snprintf ( charbuf , sizeof ( charbuf ) , "%s_view_%03d" , rootname , index ) ; //<S2SV> sarrayAddString ( saviews , charbuf , L_COPY ) ; //<S2SV> outname = genPathname ( dirout , charbuf ) ; //<S2SV> WriteFormattedPix ( outname , pixview ) ; //<S2SV> lept_free ( outname ) ; //<S2SV> pixDestroy ( & pixview ) ; //<S2SV> pixDestroy ( & pix ) ; //<S2SV> index ++ ; //<S2SV> } //<S2SV> sahtml = sarrayCreate ( 0 ) ; //<S2SV> sarrayAddString ( sahtml , htmlstring , L_COPY ) ; //<S2SV> sprintf ( charbuf , "<frameset<S2SV_blank>cols=\\"%d,<S2SV_blank>*\\">" , thumbwidth + 30 ) ; //<S2SV> sarrayAddString ( sahtml , charbuf , L_COPY ) ; //<S2SV> sprintf ( charbuf , "<frame<S2SV_blank>name=\\"thumbs\\"<S2SV_blank>src=\\"%s\\">" , linknameshort ) ; //<S2SV> sarrayAddString ( sahtml , charbuf , L_COPY ) ; //<S2SV> sprintf ( charbuf , "<frame<S2SV_blank>name=\\"views\\"<S2SV_blank>src=\\"%s\\">" , //<S2SV> sarrayGetString ( saviews , 0 , L_NOCOPY ) ) ; //<S2SV> sarrayAddString ( sahtml , charbuf , L_COPY ) ; //<S2SV> sarrayAddString ( sahtml , framestring , L_COPY ) ; //<S2SV> shtml = sarrayToString ( sahtml , 1 ) ; //<S2SV> l_binaryWrite ( mainname , "w" , shtml , strlen ( shtml ) ) ; //<S2SV> fprintf ( stderr , "******************************************\\n" //<S2SV> "Writing<S2SV_blank>html<S2SV_blank>file:<S2SV_blank>%s\\n" //<S2SV> "******************************************\\n" , mainname ) ; //<S2SV> lept_free ( shtml ) ; //<S2SV> lept_free ( mainname ) ; //<S2SV> nimages = sarrayGetCount ( saviews ) ; //<S2SV> fprintf ( stderr , "num.<S2SV_blank>images<S2SV_blank>=<S2SV_blank>%d\\n" , nimages ) ; //<S2SV> salink = sarrayCreate ( 0 ) ; //<S2SV> for ( i = 0 ; i < nimages ; i ++ ) { //<S2SV> viewfile = sarrayGetString ( saviews , i , L_NOCOPY ) ; //<S2SV> thumbfile = sarrayGetString ( sathumbs , i , L_NOCOPY ) ; //<S2SV> sprintf ( charbuf , "<a<S2SV_blank>href=\\"%s\\"<S2SV_blank>TARGET=views><img<S2SV_blank>src=\\"%s\\"></a>" , //<S2SV> viewfile , thumbfile ) ; //<S2SV> sarrayAddString ( salink , charbuf , L_COPY ) ; //<S2SV> } //<S2SV> slink = sarrayToString ( salink , 1 ) ; //<S2SV> l_binaryWrite ( linkname , "w" , slink , strlen ( slink ) ) ; //<S2SV> lept_free ( slink ) ; //<S2SV> lept_free ( linkname ) ; //<S2SV> lept_free ( linknameshort ) ; //<S2SV> sarrayDestroy ( & safiles ) ; //<S2SV> sarrayDestroy ( & sathumbs ) ; //<S2SV> sarrayDestroy ( & saviews ) ; //<S2SV> sarrayDestroy ( & sahtml ) ; //<S2SV> sarrayDestroy ( & salink ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 