static int //<S2SV> cleanup_pathname ( struct archive_write_disk * a ) //<S2SV> { //<S2SV> char * dest , * src ; //<S2SV> char separator = '\\0' ; //<S2SV> dest = src = a -> name ; //<S2SV> if ( * src == '\\0' ) { //<S2SV> archive_set_error ( & a -> archive , ARCHIVE_ERRNO_MISC , //<S2SV> "Invalid<S2SV_blank>empty<S2SV_blank>pathname" ) ; //<S2SV> return ( ARCHIVE_FAILED ) ; //<S2SV> } //<S2SV> # if defined ( __CYGWIN__ ) //<S2SV> cleanup_pathname_win ( a ) ; //<S2SV> # endif //<S2SV> if ( * src == '/' ) //<S2SV> separator = * src ++ ; //<S2SV> for ( ; ; ) { //<S2SV> if ( src [ 0 ] == '\\0' ) { //<S2SV> break ; //<S2SV> } else if ( src [ 0 ] == '/' ) { //<S2SV> src ++ ; //<S2SV> continue ; //<S2SV> } else if ( src [ 0 ] == '.' ) { //<S2SV> if ( src [ 1 ] == '\\0' ) { //<S2SV> break ; //<S2SV> } else if ( src [ 1 ] == '/' ) { //<S2SV> src += 2 ; //<S2SV> continue ; //<S2SV> } else if ( src [ 1 ] == '.' ) { //<S2SV> if ( src [ 2 ] == '/' || src [ 2 ] == '\\0' ) { //<S2SV> if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { //<S2SV> archive_set_error ( & a -> archive , //<S2SV> ARCHIVE_ERRNO_MISC , //<S2SV> "Path<S2SV_blank>contains<S2SV_blank>\'..\'" ) ; //<S2SV> return ( ARCHIVE_FAILED ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( separator ) //<S2SV> * dest ++ = '/' ; //<S2SV> while ( * src != '\\0' && * src != '/' ) { //<S2SV> * dest ++ = * src ++ ; //<S2SV> } //<S2SV> if ( * src == '\\0' ) //<S2SV> break ; //<S2SV> separator = * src ++ ; //<S2SV> } //<S2SV> if ( dest == a -> name ) { //<S2SV> if ( separator ) //<S2SV> * dest ++ = '/' ; //<S2SV> else //<S2SV> * dest ++ = '.' ; //<S2SV> } //<S2SV> * dest = '\\0' ; //<S2SV> return ( ARCHIVE_OK ) ; //<S2SV> } //<S2SV> 