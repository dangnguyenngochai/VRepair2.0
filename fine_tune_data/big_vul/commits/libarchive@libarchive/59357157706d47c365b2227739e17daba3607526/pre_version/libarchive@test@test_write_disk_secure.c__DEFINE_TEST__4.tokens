DEFINE_TEST ( test_write_disk_secure ) //<S2SV> { //<S2SV> # if defined ( _WIN32 ) && ! defined ( __CYGWIN__ ) //<S2SV> skipping ( "archive_write_disk<S2SV_blank>security<S2SV_blank>checks<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>on<S2SV_blank>Windows" ) ; //<S2SV> # else //<S2SV> struct archive * a ; //<S2SV> struct archive_entry * ae ; //<S2SV> struct stat st ; //<S2SV> assertUmask ( UMASK ) ; //<S2SV> assert ( ( a = archive_write_disk_new ( ) ) != NULL ) ; //<S2SV> assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "dir" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFDIR | 0777 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> archive_entry_free ( ae ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFLNK | 0777 ) ; //<S2SV> archive_entry_set_symlink ( ae , "dir" ) ; //<S2SV> archive_write_disk_set_options ( a , 0 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( archive_entry_clear ( ae ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir/filea" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( archive_entry_clear ( ae ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir/fileb" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; //<S2SV> archive_write_disk_set_options ( a , ARCHIVE_EXTRACT_SECURE_SYMLINKS ) ; //<S2SV> failure ( "Extracting<S2SV_blank>a<S2SV_blank>file<S2SV_blank>through<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>should<S2SV_blank>fail<S2SV_blank>here." ) ; //<S2SV> assertEqualInt ( ARCHIVE_FAILED , archive_write_header ( a , ae ) ) ; //<S2SV> archive_entry_free ( ae ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir2" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFLNK | 0777 ) ; //<S2SV> archive_entry_set_symlink ( ae , "dir" ) ; //<S2SV> archive_write_disk_set_options ( a , 0 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( archive_entry_clear ( ae ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir2/filec" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; //<S2SV> archive_write_disk_set_options ( a , ARCHIVE_EXTRACT_SECURE_SYMLINKS | ARCHIVE_EXTRACT_UNLINK ) ; //<S2SV> assertEqualIntA ( a , ARCHIVE_OK , archive_write_header ( a , ae ) ) ; //<S2SV> archive_entry_free ( ae ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir3" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFLNK | 0777 ) ; //<S2SV> archive_entry_set_symlink ( ae , "dir" ) ; //<S2SV> archive_write_disk_set_options ( a , 0 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( archive_entry_clear ( ae ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir3" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFDIR | 0777 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assertEqualInt ( 0 , lstat ( "link_to_dir3" , & st ) ) ; //<S2SV> assert ( S_ISLNK ( st . st_mode ) ) ; //<S2SV> archive_entry_free ( ae ) ; //<S2SV> assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir4" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFLNK | 0777 ) ; //<S2SV> archive_entry_set_symlink ( ae , "nonexistent_dir" ) ; //<S2SV> archive_write_disk_set_options ( a , 0 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( archive_entry_clear ( ae ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir4" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFDIR | 0777 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assertEqualInt ( 0 , lstat ( "link_to_dir4" , & st ) ) ; //<S2SV> assert ( S_ISDIR ( st . st_mode ) ) ; //<S2SV> archive_entry_free ( ae ) ; //<S2SV> assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "non_dir" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; //<S2SV> archive_write_disk_set_options ( a , 0 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir5" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFLNK | 0777 ) ; //<S2SV> archive_entry_set_symlink ( ae , "non_dir" ) ; //<S2SV> archive_write_disk_set_options ( a , 0 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assert ( archive_entry_clear ( ae ) != NULL ) ; //<S2SV> archive_entry_copy_pathname ( ae , "link_to_dir5" ) ; //<S2SV> archive_entry_set_mode ( ae , S_IFDIR | 0777 ) ; //<S2SV> assert ( 0 == archive_write_header ( a , ae ) ) ; //<S2SV> assert ( 0 == archive_write_finish_entry ( a ) ) ; //<S2SV> assertEqualInt ( 0 , lstat ( "link_to_dir5" , & st ) ) ; //<S2SV> assert ( S_ISDIR ( st . st_mode ) ) ; //<S2SV> archive_entry_free ( ae ) ; //<S2SV> assertEqualInt ( ARCHIVE_OK , archive_write_free ( a ) ) ; //<S2SV> assert ( 0 == lstat ( "dir" , & st ) ) ; //<S2SV> failure ( "dir:<S2SV_blank>st.st_mode=%o" , st . st_mode ) ; //<S2SV> assert ( ( st . st_mode & 0777 ) == 0755 ) ; //<S2SV> assert ( 0 == lstat ( "link_to_dir" , & st ) ) ; //<S2SV> failure ( "link_to_dir:<S2SV_blank>st.st_mode=%o" , st . st_mode ) ; //<S2SV> assert ( S_ISLNK ( st . st_mode ) ) ; //<S2SV> # if HAVE_LCHMOD //<S2SV> failure ( "link_to_dir:<S2SV_blank>st.st_mode=%o" , st . st_mode ) ; //<S2SV> assert ( ( st . st_mode & 07777 ) == 0755 ) ; //<S2SV> # endif //<S2SV> assert ( 0 == lstat ( "dir/filea" , & st ) ) ; //<S2SV> failure ( "dir/filea:<S2SV_blank>st.st_mode=%o" , st . st_mode ) ; //<S2SV> assert ( ( st . st_mode & 07777 ) == 0755 ) ; //<S2SV> failure ( "dir/fileb:<S2SV_blank>This<S2SV_blank>file<S2SV_blank>should<S2SV_blank>not<S2SV_blank>have<S2SV_blank>been<S2SV_blank>created" ) ; //<S2SV> assert ( 0 != lstat ( "dir/fileb" , & st ) ) ; //<S2SV> assert ( 0 == lstat ( "link_to_dir2" , & st ) ) ; //<S2SV> failure ( "link_to_dir2<S2SV_blank>should<S2SV_blank>have<S2SV_blank>been<S2SV_blank>re-created<S2SV_blank>as<S2SV_blank>a<S2SV_blank>true<S2SV_blank>dir" ) ; //<S2SV> assert ( S_ISDIR ( st . st_mode ) ) ; //<S2SV> failure ( "link_to_dir2:<S2SV_blank>Implicit<S2SV_blank>dir<S2SV_blank>creation<S2SV_blank>should<S2SV_blank>obey<S2SV_blank>umask,<S2SV_blank>but<S2SV_blank>st.st_mode=%o" , st . st_mode ) ; //<S2SV> assert ( ( st . st_mode & 0777 ) == 0755 ) ; //<S2SV> assert ( 0 == lstat ( "link_to_dir2/filec" , & st ) ) ; //<S2SV> assert ( S_ISREG ( st . st_mode ) ) ; //<S2SV> failure ( "link_to_dir2/filec:<S2SV_blank>st.st_mode=%o" , st . st_mode ) ; //<S2SV> assert ( ( st . st_mode & 07777 ) == 0755 ) ; //<S2SV> # endif //<S2SV> } //<S2SV> 