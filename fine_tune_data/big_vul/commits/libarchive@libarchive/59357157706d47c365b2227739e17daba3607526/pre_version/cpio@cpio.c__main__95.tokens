int //<S2SV> main ( int argc , char * argv [ ] ) //<S2SV> { //<S2SV> static char buff [ 16384 ] ; //<S2SV> struct cpio _cpio ; //<S2SV> struct cpio * cpio ; //<S2SV> const char * errmsg ; //<S2SV> int uid , gid ; //<S2SV> int opt ; //<S2SV> cpio = & _cpio ; //<S2SV> memset ( cpio , 0 , sizeof ( * cpio ) ) ; //<S2SV> cpio -> buff = buff ; //<S2SV> cpio -> buff_size = sizeof ( buff ) ; //<S2SV> # if defined ( HAVE_SIGACTION ) && defined ( SIGPIPE ) //<S2SV> { //<S2SV> struct sigaction sa ; //<S2SV> sigemptyset ( & sa . sa_mask ) ; //<S2SV> sa . sa_flags = 0 ; //<S2SV> sa . sa_handler = SIG_IGN ; //<S2SV> sigaction ( SIGPIPE , & sa , NULL ) ; //<S2SV> } //<S2SV> # endif //<S2SV> lafe_setprogname ( * argv , "bsdcpio" ) ; //<S2SV> # if HAVE_SETLOCALE //<S2SV> if ( setlocale ( LC_ALL , "" ) == NULL ) //<S2SV> lafe_warnc ( 0 , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>default<S2SV_blank>locale" ) ; //<S2SV> # endif //<S2SV> cpio -> uid_override = - 1 ; //<S2SV> cpio -> gid_override = - 1 ; //<S2SV> cpio -> argv = argv ; //<S2SV> cpio -> argc = argc ; //<S2SV> cpio -> mode = '\\0' ; //<S2SV> cpio -> verbose = 0 ; //<S2SV> cpio -> compress = '\\0' ; //<S2SV> cpio -> extract_flags = ARCHIVE_EXTRACT_NO_AUTODIR ; //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER ; //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_SECURE_SYMLINKS ; //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_SECURE_NODOTDOT ; //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_PERM ; //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_FFLAGS ; //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_ACL ; //<S2SV> # if ! defined ( _WIN32 ) && ! defined ( __CYGWIN__ ) //<S2SV> if ( geteuid ( ) == 0 ) //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_OWNER ; //<S2SV> # endif //<S2SV> cpio -> bytes_per_block = 512 ; //<S2SV> cpio -> filename = NULL ; //<S2SV> cpio -> matching = archive_match_new ( ) ; //<S2SV> if ( cpio -> matching == NULL ) //<S2SV> lafe_errc ( 1 , 0 , "Out<S2SV_blank>of<S2SV_blank>memory" ) ; //<S2SV> while ( ( opt = cpio_getopt ( cpio ) ) != - 1 ) { //<S2SV> switch ( opt ) { //<S2SV> case '0' : //<S2SV> cpio -> option_null = 1 ; //<S2SV> break ; //<S2SV> case 'A' : //<S2SV> cpio -> option_append = 1 ; //<S2SV> break ; //<S2SV> case 'a' : //<S2SV> cpio -> option_atime_restore = 1 ; //<S2SV> break ; //<S2SV> case 'B' : //<S2SV> cpio -> bytes_per_block = 5120 ; //<S2SV> break ; //<S2SV> case OPTION_B64ENCODE : //<S2SV> cpio -> add_filter = opt ; //<S2SV> break ; //<S2SV> case 'C' : //<S2SV> cpio -> bytes_per_block = atoi ( cpio -> argument ) ; //<S2SV> if ( cpio -> bytes_per_block <= 0 ) //<S2SV> lafe_errc ( 1 , 0 , "Invalid<S2SV_blank>blocksize<S2SV_blank>%s" , cpio -> argument ) ; //<S2SV> break ; //<S2SV> case 'c' : //<S2SV> cpio -> format = "odc" ; //<S2SV> break ; //<S2SV> case 'd' : //<S2SV> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_NO_AUTODIR ; //<S2SV> break ; //<S2SV> case 'E' : //<S2SV> if ( archive_match_include_pattern_from_file ( //<S2SV> cpio -> matching , cpio -> argument , //<S2SV> cpio -> option_null ) != ARCHIVE_OK ) //<S2SV> lafe_errc ( 1 , 0 , "Error<S2SV_blank>:<S2SV_blank>%s" , //<S2SV> archive_error_string ( cpio -> matching ) ) ; //<S2SV> break ; //<S2SV> case 'F' : //<S2SV> cpio -> filename = cpio -> argument ; //<S2SV> break ; //<S2SV> case 'f' : //<S2SV> if ( archive_match_exclude_pattern ( cpio -> matching , //<S2SV> cpio -> argument ) != ARCHIVE_OK ) //<S2SV> lafe_errc ( 1 , 0 , "Error<S2SV_blank>:<S2SV_blank>%s" , //<S2SV> archive_error_string ( cpio -> matching ) ) ; //<S2SV> break ; //<S2SV> case OPTION_GRZIP : //<S2SV> cpio -> compress = opt ; //<S2SV> break ; //<S2SV> case 'H' : //<S2SV> cpio -> format = cpio -> argument ; //<S2SV> break ; //<S2SV> case 'h' : //<S2SV> long_help ( ) ; //<S2SV> break ; //<S2SV> case 'I' : //<S2SV> cpio -> filename = cpio -> argument ; //<S2SV> break ; //<S2SV> case 'i' : //<S2SV> if ( cpio -> mode != '\\0' ) //<S2SV> lafe_errc ( 1 , 0 , //<S2SV> "Cannot<S2SV_blank>use<S2SV_blank>both<S2SV_blank>-i<S2SV_blank>and<S2SV_blank>-%c" , cpio -> mode ) ; //<S2SV> cpio -> mode = opt ; //<S2SV> break ; //<S2SV> case 'J' : //<S2SV> cpio -> compress = opt ; //<S2SV> break ; //<S2SV> case 'j' : //<S2SV> cpio -> compress = opt ; //<S2SV> break ; //<S2SV> case OPTION_INSECURE : //<S2SV> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_SYMLINKS ; //<S2SV> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NODOTDOT ; //<S2SV> break ; //<S2SV> case 'L' : //<S2SV> cpio -> option_follow_links = 1 ; //<S2SV> break ; //<S2SV> case 'l' : //<S2SV> cpio -> option_link = 1 ; //<S2SV> break ; //<S2SV> case OPTION_LRZIP : //<S2SV> case OPTION_LZ4 : //<S2SV> case OPTION_LZMA : //<S2SV> case OPTION_LZOP : //<S2SV> cpio -> compress = opt ; //<S2SV> break ; //<S2SV> case 'm' : //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_TIME ; //<S2SV> break ; //<S2SV> case 'n' : //<S2SV> cpio -> option_numeric_uid_gid = 1 ; //<S2SV> break ; //<S2SV> case OPTION_NO_PRESERVE_OWNER : //<S2SV> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_OWNER ; //<S2SV> break ; //<S2SV> case 'O' : //<S2SV> cpio -> filename = cpio -> argument ; //<S2SV> break ; //<S2SV> case 'o' : //<S2SV> if ( cpio -> mode != '\\0' ) //<S2SV> lafe_errc ( 1 , 0 , //<S2SV> "Cannot<S2SV_blank>use<S2SV_blank>both<S2SV_blank>-o<S2SV_blank>and<S2SV_blank>-%c" , cpio -> mode ) ; //<S2SV> cpio -> mode = opt ; //<S2SV> break ; //<S2SV> case 'p' : //<S2SV> if ( cpio -> mode != '\\0' ) //<S2SV> lafe_errc ( 1 , 0 , //<S2SV> "Cannot<S2SV_blank>use<S2SV_blank>both<S2SV_blank>-p<S2SV_blank>and<S2SV_blank>-%c" , cpio -> mode ) ; //<S2SV> cpio -> mode = opt ; //<S2SV> cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NODOTDOT ; //<S2SV> break ; //<S2SV> case OPTION_PASSPHRASE : //<S2SV> cpio -> passphrase = cpio -> argument ; //<S2SV> break ; //<S2SV> case OPTION_PRESERVE_OWNER : //<S2SV> cpio -> extract_flags |= ARCHIVE_EXTRACT_OWNER ; //<S2SV> break ; //<S2SV> case OPTION_QUIET : //<S2SV> cpio -> quiet = 1 ; //<S2SV> break ; //<S2SV> case 'R' : //<S2SV> errmsg = owner_parse ( cpio -> argument , & uid , & gid ) ; //<S2SV> if ( errmsg ) { //<S2SV> lafe_warnc ( - 1 , "%s" , errmsg ) ; //<S2SV> usage ( ) ; //<S2SV> } //<S2SV> if ( uid != - 1 ) { //<S2SV> cpio -> uid_override = uid ; //<S2SV> cpio -> uname_override = NULL ; //<S2SV> } //<S2SV> if ( gid != - 1 ) { //<S2SV> cpio -> gid_override = gid ; //<S2SV> cpio -> gname_override = NULL ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'r' : //<S2SV> cpio -> option_rename = 1 ; //<S2SV> break ; //<S2SV> case 't' : //<S2SV> cpio -> option_list = 1 ; //<S2SV> break ; //<S2SV> case 'u' : //<S2SV> cpio -> extract_flags //<S2SV> &= ~ ARCHIVE_EXTRACT_NO_OVERWRITE_NEWER ; //<S2SV> break ; //<S2SV> case OPTION_UUENCODE : //<S2SV> cpio -> add_filter = opt ; //<S2SV> break ; //<S2SV> case 'v' : //<S2SV> cpio -> verbose ++ ; //<S2SV> break ; //<S2SV> case 'V' : //<S2SV> cpio -> dot ++ ; //<S2SV> break ; //<S2SV> case OPTION_VERSION : //<S2SV> version ( ) ; //<S2SV> break ; //<S2SV> # if 0 //<S2SV> case 'W' : //<S2SV> break ; //<S2SV> # endif //<S2SV> case 'y' : //<S2SV> cpio -> compress = opt ; //<S2SV> break ; //<S2SV> case 'Z' : //<S2SV> cpio -> compress = opt ; //<S2SV> break ; //<S2SV> case 'z' : //<S2SV> cpio -> compress = opt ; //<S2SV> break ; //<S2SV> default : //<S2SV> usage ( ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( cpio -> option_list && cpio -> mode == '\\0' ) //<S2SV> cpio -> mode = 'i' ; //<S2SV> if ( cpio -> option_list && cpio -> mode != 'i' ) //<S2SV> lafe_errc ( 1 , 0 , "Option<S2SV_blank>-t<S2SV_blank>requires<S2SV_blank>-i" ) ; //<S2SV> if ( cpio -> option_numeric_uid_gid && ! cpio -> option_list ) //<S2SV> lafe_errc ( 1 , 0 , "Option<S2SV_blank>-n<S2SV_blank>requires<S2SV_blank>-it" ) ; //<S2SV> if ( cpio -> format != NULL && cpio -> mode != 'o' ) //<S2SV> lafe_errc ( 1 , 0 , "Option<S2SV_blank>--format<S2SV_blank>requires<S2SV_blank>-o" ) ; //<S2SV> if ( cpio -> option_link && cpio -> mode != 'p' ) //<S2SV> lafe_errc ( 1 , 0 , "Option<S2SV_blank>-l<S2SV_blank>requires<S2SV_blank>-p" ) ; //<S2SV> if ( cpio -> dot && cpio -> verbose ) //<S2SV> cpio -> dot = 0 ; //<S2SV> switch ( cpio -> mode ) { //<S2SV> case 'o' : //<S2SV> if ( cpio -> format == NULL ) //<S2SV> cpio -> format = "odc" ; //<S2SV> mode_out ( cpio ) ; //<S2SV> break ; //<S2SV> case 'i' : //<S2SV> while ( * cpio -> argv != NULL ) { //<S2SV> if ( archive_match_include_pattern ( cpio -> matching , //<S2SV> * cpio -> argv ) != ARCHIVE_OK ) //<S2SV> lafe_errc ( 1 , 0 , "Error<S2SV_blank>:<S2SV_blank>%s" , //<S2SV> archive_error_string ( cpio -> matching ) ) ; //<S2SV> -- cpio -> argc ; //<S2SV> ++ cpio -> argv ; //<S2SV> } //<S2SV> if ( cpio -> option_list ) //<S2SV> mode_list ( cpio ) ; //<S2SV> else //<S2SV> mode_in ( cpio ) ; //<S2SV> break ; //<S2SV> case 'p' : //<S2SV> if ( * cpio -> argv == NULL || * * cpio -> argv == '\\0' ) //<S2SV> lafe_errc ( 1 , 0 , //<S2SV> "-p<S2SV_blank>mode<S2SV_blank>requires<S2SV_blank>a<S2SV_blank>target<S2SV_blank>directory" ) ; //<S2SV> mode_pass ( cpio , * cpio -> argv ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> lafe_errc ( 1 , 0 , //<S2SV> "Must<S2SV_blank>specify<S2SV_blank>at<S2SV_blank>least<S2SV_blank>one<S2SV_blank>of<S2SV_blank>-i,<S2SV_blank>-o,<S2SV_blank>or<S2SV_blank>-p" ) ; //<S2SV> } //<S2SV> archive_match_free ( cpio -> matching ) ; //<S2SV> free_cache ( cpio -> gname_cache ) ; //<S2SV> free_cache ( cpio -> uname_cache ) ; //<S2SV> free ( cpio -> destdir ) ; //<S2SV> passphrase_free ( cpio -> ppbuff ) ; //<S2SV> return ( cpio -> return_value ) ; //<S2SV> } //<S2SV> 