void //<S2SV> safe_fprintf ( FILE * f , const char * fmt , ... ) //<S2SV> { //<S2SV> char fmtbuff_stack [ 256 ] ; //<S2SV> char outbuff [ 256 ] ; //<S2SV> char * fmtbuff_heap ; //<S2SV> char * fmtbuff ; //<S2SV> int fmtbuff_length ; //<S2SV> int length , n ; //<S2SV> va_list ap ; //<S2SV> const char * p ; //<S2SV> unsigned i ; //<S2SV> wchar_t wc ; //<S2SV> char try_wc ; //<S2SV> fmtbuff_heap = NULL ; //<S2SV> fmtbuff_length = sizeof ( fmtbuff_stack ) ; //<S2SV> fmtbuff = fmtbuff_stack ; //<S2SV> va_start ( ap , fmt ) ; //<S2SV> length = vsnprintf ( fmtbuff , fmtbuff_length , fmt , ap ) ; //<S2SV> va_end ( ap ) ; //<S2SV> while ( length < 0 || length >= fmtbuff_length ) { //<S2SV> if ( length >= fmtbuff_length ) //<S2SV> fmtbuff_length = length + 1 ; //<S2SV> else if ( fmtbuff_length < 8192 ) //<S2SV> fmtbuff_length *= 2 ; //<S2SV> else if ( fmtbuff_length < 1000000 ) //<S2SV> fmtbuff_length += fmtbuff_length / 4 ; //<S2SV> else { //<S2SV> length = fmtbuff_length ; //<S2SV> fmtbuff_heap [ length - 1 ] = '\\0' ; //<S2SV> break ; //<S2SV> } //<S2SV> free ( fmtbuff_heap ) ; //<S2SV> fmtbuff_heap = malloc ( fmtbuff_length ) ; //<S2SV> if ( fmtbuff_heap != NULL ) { //<S2SV> fmtbuff = fmtbuff_heap ; //<S2SV> va_start ( ap , fmt ) ; //<S2SV> length = vsnprintf ( fmtbuff , fmtbuff_length , fmt , ap ) ; //<S2SV> va_end ( ap ) ; //<S2SV> } else { //<S2SV> length = sizeof ( fmtbuff_stack ) - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( mbtowc ( NULL , NULL , 1 ) == - 1 ) { //<S2SV> free ( fmtbuff_heap ) ; //<S2SV> return ; //<S2SV> } //<S2SV> p = fmtbuff ; //<S2SV> i = 0 ; //<S2SV> try_wc = 1 ; //<S2SV> while ( * p != '\\0' ) { //<S2SV> if ( try_wc && ( n = mbtowc ( & wc , p , length ) ) != - 1 ) { //<S2SV> length -= n ; //<S2SV> if ( iswprint ( wc ) && wc != L'\\\\' ) { //<S2SV> while ( n -- > 0 ) //<S2SV> outbuff [ i ++ ] = * p ++ ; //<S2SV> } else { //<S2SV> while ( n -- > 0 ) //<S2SV> i += ( unsigned ) bsdtar_expand_char ( //<S2SV> outbuff , i , * p ++ ) ; //<S2SV> } //<S2SV> } else { //<S2SV> i += ( unsigned ) bsdtar_expand_char ( outbuff , i , * p ++ ) ; //<S2SV> try_wc = 0 ; //<S2SV> } //<S2SV> if ( i > ( sizeof ( outbuff ) - 128 ) ) { //<S2SV> outbuff [ i ] = '\\0' ; //<S2SV> fprintf ( f , "%s" , outbuff ) ; //<S2SV> i = 0 ; //<S2SV> } //<S2SV> } //<S2SV> outbuff [ i ] = '\\0' ; //<S2SV> fprintf ( f , "%s" , outbuff ) ; //<S2SV> free ( fmtbuff_heap ) ; //<S2SV> } //<S2SV> 