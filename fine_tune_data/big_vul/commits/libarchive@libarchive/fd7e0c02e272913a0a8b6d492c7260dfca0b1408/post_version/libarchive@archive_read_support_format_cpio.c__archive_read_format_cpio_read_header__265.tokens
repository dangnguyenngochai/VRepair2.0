static int //<S2SV> archive_read_format_cpio_read_header ( struct archive_read * a , //<S2SV> struct archive_entry * entry ) //<S2SV> { //<S2SV> struct cpio * cpio ; //<S2SV> const void * h ; //<S2SV> struct archive_string_conv * sconv ; //<S2SV> size_t namelength ; //<S2SV> size_t name_pad ; //<S2SV> int r ; //<S2SV> cpio = ( struct cpio * ) ( a -> format -> data ) ; //<S2SV> sconv = cpio -> opt_sconv ; //<S2SV> if ( sconv == NULL ) { //<S2SV> if ( ! cpio -> init_default_conversion ) { //<S2SV> cpio -> sconv_default = //<S2SV> archive_string_default_conversion_for_read ( //<S2SV> & ( a -> archive ) ) ; //<S2SV> cpio -> init_default_conversion = 1 ; //<S2SV> } //<S2SV> sconv = cpio -> sconv_default ; //<S2SV> } //<S2SV> r = ( cpio -> read_header ( a , cpio , entry , & namelength , & name_pad ) ) ; //<S2SV> if ( r < ARCHIVE_WARN ) //<S2SV> return ( r ) ; //<S2SV> h = __archive_read_ahead ( a , namelength + name_pad , NULL ) ; //<S2SV> if ( h == NULL ) //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> if ( archive_entry_copy_pathname_l ( entry , //<S2SV> ( const char * ) h , namelength , sconv ) != 0 ) { //<S2SV> if ( errno == ENOMEM ) { //<S2SV> archive_set_error ( & a -> archive , ENOMEM , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>Pathname" ) ; //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> } //<S2SV> archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , //<S2SV> "Pathname<S2SV_blank>can\'t<S2SV_blank>be<S2SV_blank>converted<S2SV_blank>from<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>current<S2SV_blank>locale." , //<S2SV> archive_string_conversion_charset_name ( sconv ) ) ; //<S2SV> r = ARCHIVE_WARN ; //<S2SV> } //<S2SV> cpio -> entry_offset = 0 ; //<S2SV> __archive_read_consume ( a , namelength + name_pad ) ; //<S2SV> if ( archive_entry_filetype ( entry ) == AE_IFLNK ) { //<S2SV> if ( cpio -> entry_bytes_remaining > 1024 * 1024 ) { //<S2SV> archive_set_error ( & a -> archive , ENOMEM , //<S2SV> "Rejecting<S2SV_blank>malformed<S2SV_blank>cpio<S2SV_blank>archive:<S2SV_blank>symlink<S2SV_blank>contents<S2SV_blank>exceed<S2SV_blank>1<S2SV_blank>megabyte" ) ; //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> } //<S2SV> h = __archive_read_ahead ( a , //<S2SV> ( size_t ) cpio -> entry_bytes_remaining , NULL ) ; //<S2SV> if ( h == NULL ) //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> if ( archive_entry_copy_symlink_l ( entry , ( const char * ) h , //<S2SV> ( size_t ) cpio -> entry_bytes_remaining , sconv ) != 0 ) { //<S2SV> if ( errno == ENOMEM ) { //<S2SV> archive_set_error ( & a -> archive , ENOMEM , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>Linkname" ) ; //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> } //<S2SV> archive_set_error ( & a -> archive , //<S2SV> ARCHIVE_ERRNO_FILE_FORMAT , //<S2SV> "Linkname<S2SV_blank>can\'t<S2SV_blank>be<S2SV_blank>converted<S2SV_blank>from<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>" //<S2SV> "current<S2SV_blank>locale." , //<S2SV> archive_string_conversion_charset_name ( sconv ) ) ; //<S2SV> r = ARCHIVE_WARN ; //<S2SV> } //<S2SV> __archive_read_consume ( a , cpio -> entry_bytes_remaining ) ; //<S2SV> cpio -> entry_bytes_remaining = 0 ; //<S2SV> } //<S2SV> if ( namelength == 11 && strcmp ( ( const char * ) h , "TRAILER!!!" ) == 0 ) { //<S2SV> archive_clear_error ( & a -> archive ) ; //<S2SV> return ( ARCHIVE_EOF ) ; //<S2SV> } //<S2SV> if ( record_hardlink ( a , cpio , entry ) != ARCHIVE_OK ) { //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> } //<S2SV> return ( r ) ; //<S2SV> } //<S2SV> 