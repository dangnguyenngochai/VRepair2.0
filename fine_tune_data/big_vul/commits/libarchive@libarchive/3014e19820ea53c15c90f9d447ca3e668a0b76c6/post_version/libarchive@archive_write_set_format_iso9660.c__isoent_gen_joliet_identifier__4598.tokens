static int //<S2SV> isoent_gen_joliet_identifier ( struct archive_write * a , struct isoent * isoent , //<S2SV> struct idr * idr ) //<S2SV> { //<S2SV> struct iso9660 * iso9660 ; //<S2SV> struct isoent * np ; //<S2SV> unsigned char * p ; //<S2SV> size_t l ; //<S2SV> int r ; //<S2SV> size_t ffmax , parent_len ; //<S2SV> static const struct archive_rb_tree_ops rb_ops = { //<S2SV> isoent_cmp_node_joliet , isoent_cmp_key_joliet //<S2SV> } ; //<S2SV> if ( isoent -> children . cnt == 0 ) //<S2SV> return ( 0 ) ; //<S2SV> iso9660 = a -> format_data ; //<S2SV> if ( iso9660 -> opt . joliet == OPT_JOLIET_LONGNAME ) //<S2SV> ffmax = 206 ; //<S2SV> else //<S2SV> ffmax = 128 ; //<S2SV> r = idr_start ( a , idr , isoent -> children . cnt , ( int ) ffmax , 6 , 2 , & rb_ops ) ; //<S2SV> if ( r < 0 ) //<S2SV> return ( r ) ; //<S2SV> parent_len = 1 ; //<S2SV> for ( np = isoent ; np -> parent != np ; np = np -> parent ) //<S2SV> parent_len += np -> mb_len + 1 ; //<S2SV> for ( np = isoent -> children . first ; np != NULL ; np = np -> chnext ) { //<S2SV> unsigned char * dot ; //<S2SV> int ext_off , noff , weight ; //<S2SV> size_t lt ; //<S2SV> if ( ( l = np -> file -> basename_utf16 . length ) > ffmax ) //<S2SV> l = ffmax ; //<S2SV> p = malloc ( ( l + 1 ) * 2 ) ; //<S2SV> if ( p == NULL ) { //<S2SV> archive_set_error ( & a -> archive , ENOMEM , //<S2SV> "Can\'t<S2SV_blank>allocate<S2SV_blank>memory" ) ; //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> } //<S2SV> memcpy ( p , np -> file -> basename_utf16 . s , l ) ; //<S2SV> p [ l ] = 0 ; //<S2SV> p [ l + 1 ] = 0 ; //<S2SV> np -> identifier = ( char * ) p ; //<S2SV> lt = l ; //<S2SV> dot = p + l ; //<S2SV> weight = 0 ; //<S2SV> while ( lt > 0 ) { //<S2SV> if ( ! joliet_allowed_char ( p [ 0 ] , p [ 1 ] ) ) //<S2SV> archive_be16enc ( p , 0x005F ) ; //<S2SV> else if ( p [ 0 ] == 0 && p [ 1 ] == 0x2E ) //<S2SV> dot = p ; //<S2SV> p += 2 ; //<S2SV> lt -= 2 ; //<S2SV> } //<S2SV> ext_off = ( int ) ( dot - ( unsigned char * ) np -> identifier ) ; //<S2SV> np -> ext_off = ext_off ; //<S2SV> np -> ext_len = ( int ) l - ext_off ; //<S2SV> np -> id_len = ( int ) l ; //<S2SV> if ( np -> file -> basename_utf16 . length > ffmax ) { //<S2SV> if ( archive_strncpy_l ( & iso9660 -> mbs , //<S2SV> ( const char * ) np -> identifier , l , //<S2SV> iso9660 -> sconv_from_utf16be ) != 0 && //<S2SV> errno == ENOMEM ) { //<S2SV> archive_set_error ( & a -> archive , errno , //<S2SV> "No<S2SV_blank>memory" ) ; //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> } //<S2SV> np -> mb_len = ( int ) iso9660 -> mbs . length ; //<S2SV> if ( np -> mb_len != ( int ) np -> file -> basename . length ) //<S2SV> weight = np -> mb_len ; //<S2SV> } else //<S2SV> np -> mb_len = ( int ) np -> file -> basename . length ; //<S2SV> if ( parent_len > 240 //<S2SV> || np -> mb_len > 240 //<S2SV> || parent_len + np -> mb_len > 240 ) { //<S2SV> archive_set_error ( & a -> archive , ARCHIVE_ERRNO_MISC , //<S2SV> "The<S2SV_blank>regulation<S2SV_blank>of<S2SV_blank>Joliet<S2SV_blank>extensions;" //<S2SV> "<S2SV_blank>A<S2SV_blank>length<S2SV_blank>of<S2SV_blank>a<S2SV_blank>full-pathname<S2SV_blank>of<S2SV_blank>`%s\'<S2SV_blank>is<S2SV_blank>" //<S2SV> "longer<S2SV_blank>than<S2SV_blank>240<S2SV_blank>bytes,<S2SV_blank>(p=%d,<S2SV_blank>b=%d)" , //<S2SV> archive_entry_pathname ( np -> file -> entry ) , //<S2SV> ( int ) parent_len , ( int ) np -> mb_len ) ; //<S2SV> return ( ARCHIVE_FATAL ) ; //<S2SV> } //<S2SV> if ( l == ffmax ) //<S2SV> noff = ext_off - 6 ; //<S2SV> else if ( l == ffmax - 2 ) //<S2SV> noff = ext_off - 4 ; //<S2SV> else if ( l == ffmax - 4 ) //<S2SV> noff = ext_off - 2 ; //<S2SV> else //<S2SV> noff = ext_off ; //<S2SV> idr_register ( idr , np , weight , noff ) ; //<S2SV> } //<S2SV> idr_resolve ( idr , idr_set_num_beutf16 ) ; //<S2SV> return ( ARCHIVE_OK ) ; //<S2SV> } //<S2SV> 