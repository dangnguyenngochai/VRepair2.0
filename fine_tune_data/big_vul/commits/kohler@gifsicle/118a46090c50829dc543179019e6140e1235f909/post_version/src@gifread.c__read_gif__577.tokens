static Gif_Stream * //<S2SV> read_gif ( Gif_Reader * grr , int read_flags , //<S2SV> const char * landmark , Gif_ReadErrorHandler handler ) //<S2SV> { //<S2SV> Gif_Stream * gfs ; //<S2SV> Gif_Image * gfi ; //<S2SV> Gif_Context gfc ; //<S2SV> int unknown_block_type = 0 ; //<S2SV> if ( gifgetc ( grr ) != 'G' || //<S2SV> gifgetc ( grr ) != 'I' || //<S2SV> gifgetc ( grr ) != 'F' ) //<S2SV> return 0 ; //<S2SV> ( void ) gifgetc ( grr ) ; //<S2SV> ( void ) gifgetc ( grr ) ; //<S2SV> ( void ) gifgetc ( grr ) ; //<S2SV> gfs = Gif_NewStream ( ) ; //<S2SV> gfi = Gif_NewImage ( ) ; //<S2SV> gfc . stream = gfs ; //<S2SV> gfc . prefix = Gif_NewArray ( Gif_Code , GIF_MAX_CODE ) ; //<S2SV> gfc . suffix = Gif_NewArray ( uint8_t , GIF_MAX_CODE ) ; //<S2SV> gfc . length = Gif_NewArray ( uint16_t , GIF_MAX_CODE ) ; //<S2SV> gfc . handler = handler ; //<S2SV> gfc . gfi = gfi ; //<S2SV> gfc . errors [ 0 ] = gfc . errors [ 1 ] = 0 ; //<S2SV> if ( ! gfs || ! gfi || ! gfc . prefix || ! gfc . suffix || ! gfc . length ) //<S2SV> goto done ; //<S2SV> gfs -> landmark = landmark ; //<S2SV> GIF_DEBUG ( ( "\\nGIF<S2SV_blank>" ) ) ; //<S2SV> if ( ! read_logical_screen_descriptor ( gfs , grr ) ) //<S2SV> goto done ; //<S2SV> GIF_DEBUG ( ( "logscrdesc<S2SV_blank>" ) ) ; //<S2SV> while ( ! gifeof ( grr ) ) { //<S2SV> uint8_t block = gifgetbyte ( grr ) ; //<S2SV> switch ( block ) { //<S2SV> case ',' : //<S2SV> GIF_DEBUG ( ( "imageread<S2SV_blank>%d<S2SV_blank>" , gfs -> nimages ) ) ; //<S2SV> gfi -> identifier = last_name ; //<S2SV> last_name = 0 ; //<S2SV> if ( ! Gif_AddImage ( gfs , gfi ) ) //<S2SV> goto done ; //<S2SV> else if ( ! read_image ( grr , & gfc , gfi , read_flags ) ) { //<S2SV> Gif_RemoveImage ( gfs , gfs -> nimages - 1 ) ; //<S2SV> gfi = 0 ; //<S2SV> goto done ; //<S2SV> } //<S2SV> gfc . gfi = gfi = Gif_NewImage ( ) ; //<S2SV> if ( ! gfi ) //<S2SV> goto done ; //<S2SV> break ; //<S2SV> case ';' : //<S2SV> GIF_DEBUG ( ( "term\\n" ) ) ; //<S2SV> goto done ; //<S2SV> case '!' : //<S2SV> block = gifgetbyte ( grr ) ; //<S2SV> GIF_DEBUG ( ( "ext(0x%02X)<S2SV_blank>" , block ) ) ; //<S2SV> switch ( block ) { //<S2SV> case 0xF9 : //<S2SV> read_graphic_control_extension ( & gfc , gfi , grr ) ; //<S2SV> break ; //<S2SV> case 0xCE : //<S2SV> last_name = suck_data ( last_name , 0 , grr ) ; //<S2SV> break ; //<S2SV> case 0xFE : //<S2SV> if ( ! read_comment_extension ( gfi , grr ) ) goto done ; //<S2SV> break ; //<S2SV> case 0xFF : //<S2SV> read_application_extension ( & gfc , grr ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> read_unknown_extension ( & gfc , grr , block , 0 , 0 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> if ( ! unknown_block_type ) { //<S2SV> char buf [ 256 ] ; //<S2SV> sprintf ( buf , "unknown<S2SV_blank>block<S2SV_blank>type<S2SV_blank>%d<S2SV_blank>at<S2SV_blank>file<S2SV_blank>offset<S2SV_blank>%u" , block , grr -> pos - 1 ) ; //<S2SV> gif_read_error ( & gfc , 1 , buf ) ; //<S2SV> unknown_block_type = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> done : //<S2SV> if ( gfs && gfi ) { //<S2SV> Gif_Extension * gfex ; //<S2SV> gfs -> end_comment = gfi -> comment ; //<S2SV> gfi -> comment = 0 ; //<S2SV> gfs -> end_extension_list = gfi -> extension_list ; //<S2SV> gfi -> extension_list = 0 ; //<S2SV> for ( gfex = gfs -> end_extension_list ; gfex ; gfex = gfex -> next ) //<S2SV> gfex -> image = NULL ; //<S2SV> } //<S2SV> Gif_DeleteImage ( gfi ) ; //<S2SV> Gif_DeleteArray ( last_name ) ; //<S2SV> Gif_DeleteArray ( gfc . prefix ) ; //<S2SV> Gif_DeleteArray ( gfc . suffix ) ; //<S2SV> Gif_DeleteArray ( gfc . length ) ; //<S2SV> gfc . gfi = 0 ; //<S2SV> last_name = 0 ; //<S2SV> if ( gfs ) //<S2SV> gfs -> errors = gfc . errors [ 1 ] ; //<S2SV> if ( gfs && gfc . errors [ 1 ] == 0 //<S2SV> && ! ( read_flags & GIF_READ_TRAILING_GARBAGE_OK ) //<S2SV> && ! grr -> eofer ( grr ) ) //<S2SV> gif_read_error ( & gfc , 0 , "trailing<S2SV_blank>garbage<S2SV_blank>after<S2SV_blank>GIF<S2SV_blank>ignored" ) ; //<S2SV> gif_read_error ( & gfc , - 1 , 0 ) ; //<S2SV> return gfs ; //<S2SV> } //<S2SV> 