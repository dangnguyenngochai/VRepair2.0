LPSTR tr_esc_str ( LPCSTR arg , bool format ) //<S2SV> { //<S2SV> LPSTR tmp = NULL ; //<S2SV> size_t cs = 0 , x , ds , len ; //<S2SV> size_t s ; //<S2SV> if ( NULL == arg ) //<S2SV> return NULL ; //<S2SV> s = strlen ( arg ) ; //<S2SV> while ( ( s > 0 ) && isspace ( arg [ s - 1 ] ) ) //<S2SV> s -- ; //<S2SV> ds = s + 1 ; //<S2SV> if ( s ) //<S2SV> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; //<S2SV> if ( NULL == tmp ) //<S2SV> { //<S2SV> fprintf ( stderr , "Could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>string<S2SV_blank>buffer.\\n" ) ; //<S2SV> exit ( - 2 ) ; //<S2SV> } //<S2SV> memset ( tmp , 0 , ds * sizeof ( CHAR ) ) ; //<S2SV> for ( x = 0 ; x < s ; x ++ ) //<S2SV> { //<S2SV> switch ( arg [ x ] ) //<S2SV> { //<S2SV> case '<' : //<S2SV> len = format ? 13 : 4 ; //<S2SV> ds += len - 1 ; //<S2SV> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; //<S2SV> if ( NULL == tmp ) //<S2SV> { //<S2SV> fprintf ( stderr , "Could<S2SV_blank>not<S2SV_blank>reallocate<S2SV_blank>string<S2SV_blank>buffer.\\n" ) ; //<S2SV> exit ( - 3 ) ; //<S2SV> } //<S2SV> if ( format ) //<S2SV> strncpy ( & tmp [ cs ] , "<replaceable>" , len ) ; //<S2SV> else //<S2SV> strncpy ( & tmp [ cs ] , "&lt;" , len ) ; //<S2SV> cs += len ; //<S2SV> break ; //<S2SV> case '>' : //<S2SV> len = format ? 14 : 4 ; //<S2SV> ds += len - 1 ; //<S2SV> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; //<S2SV> if ( NULL == tmp ) //<S2SV> { //<S2SV> fprintf ( stderr , "Could<S2SV_blank>not<S2SV_blank>reallocate<S2SV_blank>string<S2SV_blank>buffer.\\n" ) ; //<S2SV> exit ( - 4 ) ; //<S2SV> } //<S2SV> if ( format ) //<S2SV> strncpy ( & tmp [ cs ] , "</replaceable>" , len ) ; //<S2SV> else //<S2SV> strncpy ( & tmp [ cs ] , "&lt;" , len ) ; //<S2SV> cs += len ; //<S2SV> break ; //<S2SV> case '\\'' : //<S2SV> ds += 5 ; //<S2SV> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; //<S2SV> if ( NULL == tmp ) //<S2SV> { //<S2SV> fprintf ( stderr , "Could<S2SV_blank>not<S2SV_blank>reallocate<S2SV_blank>string<S2SV_blank>buffer.\\n" ) ; //<S2SV> exit ( - 5 ) ; //<S2SV> } //<S2SV> tmp [ cs ++ ] = '&' ; //<S2SV> tmp [ cs ++ ] = 'a' ; //<S2SV> tmp [ cs ++ ] = 'p' ; //<S2SV> tmp [ cs ++ ] = 'o' ; //<S2SV> tmp [ cs ++ ] = 's' ; //<S2SV> tmp [ cs ++ ] = ';' ; //<S2SV> break ; //<S2SV> case \'"\' : //<S2SV> ds += 5 ; //<S2SV> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; //<S2SV> if ( NULL == tmp ) //<S2SV> { //<S2SV> fprintf ( stderr , "Could<S2SV_blank>not<S2SV_blank>reallocate<S2SV_blank>string<S2SV_blank>buffer.\\n" ) ; //<S2SV> exit ( - 6 ) ; //<S2SV> } //<S2SV> tmp [ cs ++ ] = '&' ; //<S2SV> tmp [ cs ++ ] = 'q' ; //<S2SV> tmp [ cs ++ ] = 'u' ; //<S2SV> tmp [ cs ++ ] = 'o' ; //<S2SV> tmp [ cs ++ ] = 't' ; //<S2SV> tmp [ cs ++ ] = ';' ; //<S2SV> break ; //<S2SV> case '&' : //<S2SV> ds += 4 ; //<S2SV> tmp = ( LPSTR ) realloc ( tmp , ds * sizeof ( CHAR ) ) ; //<S2SV> if ( NULL == tmp ) //<S2SV> { //<S2SV> fprintf ( stderr , "Could<S2SV_blank>not<S2SV_blank>reallocate<S2SV_blank>string<S2SV_blank>buffer.\\n" ) ; //<S2SV> exit ( - 7 ) ; //<S2SV> } //<S2SV> tmp [ cs ++ ] = '&' ; //<S2SV> tmp [ cs ++ ] = 'a' ; //<S2SV> tmp [ cs ++ ] = 'm' ; //<S2SV> tmp [ cs ++ ] = 'p' ; //<S2SV> tmp [ cs ++ ] = ';' ; //<S2SV> break ; //<S2SV> default : //<S2SV> tmp [ cs ++ ] = arg [ x ] ; //<S2SV> break ; //<S2SV> } //<S2SV> tmp [ ds - 1 ] = '\\0' ; //<S2SV> } //<S2SV> return tmp ; //<S2SV> } //<S2SV> 