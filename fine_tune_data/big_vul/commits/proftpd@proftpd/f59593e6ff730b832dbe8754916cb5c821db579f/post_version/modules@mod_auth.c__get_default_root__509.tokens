static int get_default_root ( pool * p , int allow_symlinks , const char * * root ) { //<S2SV> config_rec * c = NULL ; //<S2SV> const char * dir = NULL ; //<S2SV> int res ; //<S2SV> c = find_config ( main_server -> conf , CONF_PARAM , "DefaultRoot" , FALSE ) ; //<S2SV> while ( c != NULL ) { //<S2SV> pr_signals_handle ( ) ; //<S2SV> if ( c -> argc < 2 ) { //<S2SV> dir = c -> argv [ 0 ] ; //<S2SV> break ; //<S2SV> } //<S2SV> res = pr_expr_eval_group_and ( ( ( char * * ) c -> argv ) + 1 ) ; //<S2SV> if ( res ) { //<S2SV> dir = c -> argv [ 0 ] ; //<S2SV> break ; //<S2SV> } //<S2SV> c = find_config_next ( c , c -> next , CONF_PARAM , "DefaultRoot" , FALSE ) ; //<S2SV> } //<S2SV> if ( dir != NULL ) { //<S2SV> const char * new_dir ; //<S2SV> new_dir = path_subst_uservar ( p , & dir ) ; //<S2SV> if ( new_dir != NULL ) { //<S2SV> dir = new_dir ; //<S2SV> } //<S2SV> if ( strncmp ( dir , "/" , 2 ) == 0 ) { //<S2SV> dir = NULL ; //<S2SV> } else { //<S2SV> char * realdir ; //<S2SV> int xerrno = 0 ; //<S2SV> if ( allow_symlinks == FALSE ) { //<S2SV> char * path , target_path [ PR_TUNABLE_PATH_MAX + 1 ] ; //<S2SV> size_t pathlen ; //<S2SV> path = pstrdup ( p , dir ) ; //<S2SV> if ( * path != '/' ) { //<S2SV> if ( * path == '~' ) { //<S2SV> if ( pr_fs_interpolate ( dir , target_path , //<S2SV> sizeof ( target_path ) - 1 ) < 0 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> path = target_path ; //<S2SV> } //<S2SV> } //<S2SV> pathlen = strlen ( path ) ; //<S2SV> if ( pathlen > 1 && //<S2SV> path [ pathlen - 1 ] == '/' ) { //<S2SV> path [ pathlen - 1 ] = '\\0' ; //<S2SV> } //<S2SV> res = is_symlink_path ( p , path , pathlen ) ; //<S2SV> if ( res < 0 ) { //<S2SV> if ( errno == EPERM ) { //<S2SV> pr_log_pri ( PR_LOG_WARNING , "error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>" //<S2SV> "(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)" , path ) ; //<S2SV> } //<S2SV> errno = EPERM ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> pr_fs_clear_cache2 ( dir ) ; //<S2SV> PRIVS_USER //<S2SV> realdir = dir_realpath ( p , dir ) ; //<S2SV> xerrno = errno ; //<S2SV> PRIVS_RELINQUISH //<S2SV> if ( realdir ) { //<S2SV> dir = realdir ; //<S2SV> } else { //<S2SV> char interp_dir [ PR_TUNABLE_PATH_MAX + 1 ] ; //<S2SV> memset ( interp_dir , '\\0' , sizeof ( interp_dir ) ) ; //<S2SV> ( void ) pr_fs_interpolate ( dir , interp_dir , sizeof ( interp_dir ) - 1 ) ; //<S2SV> pr_log_pri ( PR_LOG_NOTICE , //<S2SV> "notice:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>use<S2SV_blank>DefaultRoot<S2SV_blank>\'%s\'<S2SV_blank>[resolved<S2SV_blank>to<S2SV_blank>\'%s\']:<S2SV_blank>%s" , //<S2SV> dir , interp_dir , strerror ( xerrno ) ) ; //<S2SV> errno = xerrno ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> * root = dir ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 