static cupsd_job_t * //<S2SV> add_job ( cupsd_client_t * con , //<S2SV> cupsd_printer_t * printer , //<S2SV> mime_type_t * filetype ) //<S2SV> { //<S2SV> http_status_t status ; //<S2SV> ipp_attribute_t * attr , //<S2SV> * auth_info ; //<S2SV> const char * mandatory ; //<S2SV> const char * val ; //<S2SV> int priority ; //<S2SV> cupsd_job_t * job ; //<S2SV> char job_uri [ HTTP_MAX_URI ] ; //<S2SV> int kbytes ; //<S2SV> int i ; //<S2SV> int lowerpagerange ; //<S2SV> int exact ; //<S2SV> ipp_attribute_t * media_col , //<S2SV> * media_margin ; //<S2SV> ipp_t * unsup_col ; //<S2SV> static const char * const readonly [ ] = //<S2SV> { //<S2SV> "date-time-at-completed" , //<S2SV> "date-time-at-creation" , //<S2SV> "date-time-at-processing" , //<S2SV> "job-detailed-status-messages" , //<S2SV> "job-document-access-errors" , //<S2SV> "job-id" , //<S2SV> "job-impressions-completed" , //<S2SV> "job-k-octets-completed" , //<S2SV> "job-media-sheets-completed" , //<S2SV> "job-pages-completed" , //<S2SV> "job-printer-up-time" , //<S2SV> "job-printer-uri" , //<S2SV> "job-state" , //<S2SV> "job-state-message" , //<S2SV> "job-state-reasons" , //<S2SV> "job-uri" , //<S2SV> "number-of-documents" , //<S2SV> "number-of-intervening-jobs" , //<S2SV> "output-device-assigned" , //<S2SV> "time-at-completed" , //<S2SV> "time-at-creation" , //<S2SV> "time-at-processing" //<S2SV> } ; //<S2SV> cupsdLogMessage ( CUPSD_LOG_DEBUG2 , "add_job(%p[%d],<S2SV_blank>%p(%s),<S2SV_blank>%p(%s/%s))" , //<S2SV> con , con -> number , printer , printer -> name , //<S2SV> filetype , filetype ? filetype -> super : "none" , //<S2SV> filetype ? filetype -> type : "none" ) ; //<S2SV> if ( ! printer -> shared && //<S2SV> _cups_strcasecmp ( con -> http -> hostname , "localhost" ) && //<S2SV> _cups_strcasecmp ( con -> http -> hostname , ServerName ) ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_NOT_AUTHORIZED , //<S2SV> _ ( "The<S2SV_blank>printer<S2SV_blank>or<S2SV_blank>class<S2SV_blank>is<S2SV_blank>not<S2SV_blank>shared." ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> auth_info = ippFindAttribute ( con -> request , "auth-info" , IPP_TAG_TEXT ) ; //<S2SV> if ( ( status = cupsdCheckPolicy ( printer -> op_policy_ptr , con , NULL ) ) != HTTP_OK ) //<S2SV> { //<S2SV> send_http_error ( con , status , printer ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> else if ( printer -> num_auth_info_required == 1 && //<S2SV> ! strcmp ( printer -> auth_info_required [ 0 ] , "negotiate" ) && //<S2SV> ! con -> username [ 0 ] ) //<S2SV> { //<S2SV> send_http_error ( con , HTTP_UNAUTHORIZED , printer ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> # ifdef HAVE_SSL //<S2SV> else if ( auth_info && ! con -> http -> tls && //<S2SV> ! httpAddrLocalhost ( con -> http -> hostaddr ) ) //<S2SV> { //<S2SV> send_http_error ( con , HTTP_UPGRADE_REQUIRED , printer ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ! printer -> accepting ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_NOT_ACCEPTING , //<S2SV> _ ( "Destination<S2SV_blank>\\"%s\\"<S2SV_blank>is<S2SV_blank>not<S2SV_blank>accepting<S2SV_blank>jobs." ) , //<S2SV> printer -> name ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < ( int ) ( sizeof ( readonly ) / sizeof ( readonly [ 0 ] ) ) ; i ++ ) //<S2SV> { //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , readonly [ i ] , IPP_TAG_ZERO ) ) != NULL ) //<S2SV> { //<S2SV> ippDeleteAttribute ( con -> request , attr ) ; //<S2SV> if ( StrictConformance ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_BAD_REQUEST , _ ( "The<S2SV_blank>\'%s\'<S2SV_blank>Job<S2SV_blank>Status<S2SV_blank>attribute<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>supplied<S2SV_blank>in<S2SV_blank>a<S2SV_blank>job<S2SV_blank>creation<S2SV_blank>request." ) , readonly [ i ] ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> cupsdLogMessage ( CUPSD_LOG_INFO , "Unexpected<S2SV_blank>\'%s\'<S2SV_blank>Job<S2SV_blank>Status<S2SV_blank>attribute<S2SV_blank>in<S2SV_blank>a<S2SV_blank>job<S2SV_blank>creation<S2SV_blank>request." , readonly [ i ] ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( printer -> pc ) //<S2SV> { //<S2SV> for ( mandatory = ( char * ) cupsArrayFirst ( printer -> pc -> mandatory ) ; //<S2SV> mandatory ; //<S2SV> mandatory = ( char * ) cupsArrayNext ( printer -> pc -> mandatory ) ) //<S2SV> { //<S2SV> if ( ! ippFindAttribute ( con -> request , mandatory , IPP_TAG_ZERO ) ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_CONFLICT , //<S2SV> _ ( "The<S2SV_blank>\\"%s\\"<S2SV_blank>attribute<S2SV_blank>is<S2SV_blank>required<S2SV_blank>for<S2SV_blank>print<S2SV_blank>jobs." ) , //<S2SV> mandatory ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( filetype && printer -> filetypes && //<S2SV> ! cupsArrayFind ( printer -> filetypes , filetype ) ) //<S2SV> { //<S2SV> char mimetype [ MIME_MAX_SUPER + MIME_MAX_TYPE + 2 ] ; //<S2SV> snprintf ( mimetype , sizeof ( mimetype ) , "%s/%s" , filetype -> super , //<S2SV> filetype -> type ) ; //<S2SV> send_ipp_status ( con , IPP_DOCUMENT_FORMAT , //<S2SV> _ ( "Unsupported<S2SV_blank>format<S2SV_blank>\\"%s\\"." ) , mimetype ) ; //<S2SV> ippAddString ( con -> response , IPP_TAG_UNSUPPORTED_GROUP , IPP_TAG_MIMETYPE , //<S2SV> "document-format" , NULL , mimetype ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , "copies" , //<S2SV> IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> { //<S2SV> if ( attr -> values [ 0 ] . integer < 1 || attr -> values [ 0 ] . integer > MaxCopies ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_ATTRIBUTES , _ ( "Bad<S2SV_blank>copies<S2SV_blank>value<S2SV_blank>%d." ) , //<S2SV> attr -> values [ 0 ] . integer ) ; //<S2SV> ippAddInteger ( con -> response , IPP_TAG_UNSUPPORTED_GROUP , IPP_TAG_INTEGER , //<S2SV> "copies" , attr -> values [ 0 ] . integer ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , "job-sheets" , //<S2SV> IPP_TAG_ZERO ) ) != NULL ) //<S2SV> { //<S2SV> if ( attr -> value_tag != IPP_TAG_KEYWORD && //<S2SV> attr -> value_tag != IPP_TAG_NAME ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_BAD_REQUEST , _ ( "Bad<S2SV_blank>job-sheets<S2SV_blank>value<S2SV_blank>type." ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( attr -> num_values > 2 ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_BAD_REQUEST , //<S2SV> _ ( "Too<S2SV_blank>many<S2SV_blank>job-sheets<S2SV_blank>values<S2SV_blank>(%d<S2SV_blank>><S2SV_blank>2)." ) , //<S2SV> attr -> num_values ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < attr -> num_values ; i ++ ) //<S2SV> if ( strcmp ( attr -> values [ i ] . string . text , "none" ) && //<S2SV> ! cupsdFindBanner ( attr -> values [ i ] . string . text ) ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_BAD_REQUEST , _ ( "Bad<S2SV_blank>job-sheets<S2SV_blank>value<S2SV_blank>\\"%s\\"." ) , //<S2SV> attr -> values [ i ] . string . text ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , "number-up" , //<S2SV> IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> { //<S2SV> if ( attr -> values [ 0 ] . integer != 1 && //<S2SV> attr -> values [ 0 ] . integer != 2 && //<S2SV> attr -> values [ 0 ] . integer != 4 && //<S2SV> attr -> values [ 0 ] . integer != 6 && //<S2SV> attr -> values [ 0 ] . integer != 9 && //<S2SV> attr -> values [ 0 ] . integer != 16 ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_ATTRIBUTES , _ ( "Bad<S2SV_blank>number-up<S2SV_blank>value<S2SV_blank>%d." ) , //<S2SV> attr -> values [ 0 ] . integer ) ; //<S2SV> ippAddInteger ( con -> response , IPP_TAG_UNSUPPORTED_GROUP , IPP_TAG_INTEGER , //<S2SV> "number-up" , attr -> values [ 0 ] . integer ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , "page-ranges" , //<S2SV> IPP_TAG_RANGE ) ) != NULL ) //<S2SV> { //<S2SV> for ( i = 0 , lowerpagerange = 1 ; i < attr -> num_values ; i ++ ) //<S2SV> { //<S2SV> if ( attr -> values [ i ] . range . lower < lowerpagerange || //<S2SV> attr -> values [ i ] . range . lower > attr -> values [ i ] . range . upper ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_BAD_REQUEST , //<S2SV> _ ( "Bad<S2SV_blank>page-ranges<S2SV_blank>values<S2SV_blank>%d-%d." ) , //<S2SV> attr -> values [ i ] . range . lower , //<S2SV> attr -> values [ i ] . range . upper ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> lowerpagerange = attr -> values [ i ] . range . upper + 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! ippFindAttribute ( con -> request , "PageRegion" , IPP_TAG_ZERO ) && //<S2SV> ! ippFindAttribute ( con -> request , "PageSize" , IPP_TAG_ZERO ) && //<S2SV> _ppdCacheGetPageSize ( printer -> pc , con -> request , NULL , & exact ) ) //<S2SV> { //<S2SV> if ( ! exact && //<S2SV> ( media_col = ippFindAttribute ( con -> request , "media-col" , //<S2SV> IPP_TAG_BEGIN_COLLECTION ) ) != NULL ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_OK_SUBST , _ ( "Unsupported<S2SV_blank>margins." ) ) ; //<S2SV> unsup_col = ippNew ( ) ; //<S2SV> if ( ( media_margin = ippFindAttribute ( media_col -> values [ 0 ] . collection , //<S2SV> "media-bottom-margin" , //<S2SV> IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> ippAddInteger ( unsup_col , IPP_TAG_ZERO , IPP_TAG_INTEGER , //<S2SV> "media-bottom-margin" , media_margin -> values [ 0 ] . integer ) ; //<S2SV> if ( ( media_margin = ippFindAttribute ( media_col -> values [ 0 ] . collection , //<S2SV> "media-left-margin" , //<S2SV> IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> ippAddInteger ( unsup_col , IPP_TAG_ZERO , IPP_TAG_INTEGER , //<S2SV> "media-left-margin" , media_margin -> values [ 0 ] . integer ) ; //<S2SV> if ( ( media_margin = ippFindAttribute ( media_col -> values [ 0 ] . collection , //<S2SV> "media-right-margin" , //<S2SV> IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> ippAddInteger ( unsup_col , IPP_TAG_ZERO , IPP_TAG_INTEGER , //<S2SV> "media-right-margin" , media_margin -> values [ 0 ] . integer ) ; //<S2SV> if ( ( media_margin = ippFindAttribute ( media_col -> values [ 0 ] . collection , //<S2SV> "media-top-margin" , //<S2SV> IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> ippAddInteger ( unsup_col , IPP_TAG_ZERO , IPP_TAG_INTEGER , //<S2SV> "media-top-margin" , media_margin -> values [ 0 ] . integer ) ; //<S2SV> ippAddCollection ( con -> response , IPP_TAG_UNSUPPORTED_GROUP , "media-col" , //<S2SV> unsup_col ) ; //<S2SV> ippDelete ( unsup_col ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( MaxJobs && cupsArrayCount ( Jobs ) >= MaxJobs ) //<S2SV> cupsdCleanJobs ( ) ; //<S2SV> if ( MaxJobs && cupsArrayCount ( Jobs ) >= MaxJobs ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_NOT_POSSIBLE , _ ( "Too<S2SV_blank>many<S2SV_blank>active<S2SV_blank>jobs." ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( ( i = check_quotas ( con , printer ) ) < 0 ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_NOT_POSSIBLE , _ ( "Quota<S2SV_blank>limit<S2SV_blank>reached." ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> else if ( i == 0 ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_NOT_AUTHORIZED , _ ( "Not<S2SV_blank>allowed<S2SV_blank>to<S2SV_blank>print." ) ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , "job-priority" , //<S2SV> IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> priority = attr -> values [ 0 ] . integer ; //<S2SV> else //<S2SV> { //<S2SV> if ( ( val = cupsGetOption ( "job-priority" , printer -> num_options , //<S2SV> printer -> options ) ) != NULL ) //<S2SV> priority = atoi ( val ) ; //<S2SV> else //<S2SV> priority = 50 ; //<S2SV> ippAddInteger ( con -> request , IPP_TAG_JOB , IPP_TAG_INTEGER , "job-priority" , //<S2SV> priority ) ; //<S2SV> } //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , "job-name" , IPP_TAG_ZERO ) ) == NULL ) //<S2SV> ippAddString ( con -> request , IPP_TAG_JOB , IPP_TAG_NAME , "job-name" , NULL , "Untitled" ) ; //<S2SV> else if ( ( attr -> value_tag != IPP_TAG_NAME && //<S2SV> attr -> value_tag != IPP_TAG_NAMELANG ) || //<S2SV> attr -> num_values != 1 ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_ATTRIBUTES , //<S2SV> _ ( "Bad<S2SV_blank>job-name<S2SV_blank>value:<S2SV_blank>Wrong<S2SV_blank>type<S2SV_blank>or<S2SV_blank>count." ) ) ; //<S2SV> if ( ( attr = ippCopyAttribute ( con -> response , attr , 0 ) ) != NULL ) //<S2SV> attr -> group_tag = IPP_TAG_UNSUPPORTED_GROUP ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> else if ( ! ippValidateAttribute ( attr ) ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_ATTRIBUTES , _ ( "Bad<S2SV_blank>job-name<S2SV_blank>value:<S2SV_blank>%s" ) , //<S2SV> cupsLastErrorString ( ) ) ; //<S2SV> if ( ( attr = ippCopyAttribute ( con -> response , attr , 0 ) ) != NULL ) //<S2SV> attr -> group_tag = IPP_TAG_UNSUPPORTED_GROUP ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> attr = ippFindAttribute ( con -> request , "requesting-user-name" , IPP_TAG_NAME ) ; //<S2SV> if ( attr && ! ippValidateAttribute ( attr ) ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_ATTRIBUTES , _ ( "Bad<S2SV_blank>requesting-user-name<S2SV_blank>value:<S2SV_blank>%s" ) , cupsLastErrorString ( ) ) ; //<S2SV> if ( ( attr = ippCopyAttribute ( con -> response , attr , 0 ) ) != NULL ) //<S2SV> attr -> group_tag = IPP_TAG_UNSUPPORTED_GROUP ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> if ( ( job = cupsdAddJob ( priority , printer -> name ) ) == NULL ) //<S2SV> { //<S2SV> send_ipp_status ( con , IPP_INTERNAL_ERROR , //<S2SV> _ ( "Unable<S2SV_blank>to<S2SV_blank>add<S2SV_blank>job<S2SV_blank>for<S2SV_blank>destination<S2SV_blank>\\"%s\\"." ) , //<S2SV> printer -> name ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> job -> dtype = printer -> type & ( CUPS_PRINTER_CLASS | CUPS_PRINTER_REMOTE ) ; //<S2SV> job -> attrs = con -> request ; //<S2SV> job -> dirty = 1 ; //<S2SV> con -> request = ippNewRequest ( job -> attrs -> request . op . operation_id ) ; //<S2SV> cupsdMarkDirty ( CUPSD_DIRTY_JOBS ) ; //<S2SV> add_job_uuid ( job ) ; //<S2SV> apply_printer_defaults ( printer , job ) ; //<S2SV> if ( con -> username [ 0 ] ) //<S2SV> { //<S2SV> cupsdSetString ( & job -> username , con -> username ) ; //<S2SV> if ( attr ) //<S2SV> ippSetString ( job -> attrs , & attr , 0 , con -> username ) ; //<S2SV> } //<S2SV> else if ( attr ) //<S2SV> { //<S2SV> cupsdLogMessage ( CUPSD_LOG_DEBUG , //<S2SV> "add_job:<S2SV_blank>requesting-user-name=\\"%s\\"" , //<S2SV> attr -> values [ 0 ] . string . text ) ; //<S2SV> cupsdSetString ( & job -> username , attr -> values [ 0 ] . string . text ) ; //<S2SV> } //<S2SV> else //<S2SV> cupsdSetString ( & job -> username , "anonymous" ) ; //<S2SV> if ( ! attr ) //<S2SV> ippAddString ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NAME , //<S2SV> "job-originating-user-name" , NULL , job -> username ) ; //<S2SV> else //<S2SV> { //<S2SV> ippSetGroupTag ( job -> attrs , & attr , IPP_TAG_JOB ) ; //<S2SV> ippSetName ( job -> attrs , & attr , "job-originating-user-name" ) ; //<S2SV> } //<S2SV> if ( con -> username [ 0 ] || auth_info ) //<S2SV> { //<S2SV> save_auth_info ( con , job , auth_info ) ; //<S2SV> if ( auth_info ) //<S2SV> ippDeleteAttribute ( job -> attrs , auth_info ) ; //<S2SV> } //<S2SV> if ( ( attr = ippFindAttribute ( con -> request , "job-name" , IPP_TAG_NAME ) ) != NULL ) //<S2SV> cupsdSetString ( & ( job -> name ) , attr -> values [ 0 ] . string . text ) ; //<S2SV> if ( ( attr = ippFindAttribute ( job -> attrs , "job-originating-host-name" , //<S2SV> IPP_TAG_ZERO ) ) != NULL ) //<S2SV> { //<S2SV> if ( attr -> value_tag != IPP_TAG_NAME || //<S2SV> attr -> num_values != 1 || //<S2SV> strcmp ( con -> http -> hostname , "localhost" ) ) //<S2SV> { //<S2SV> ippDeleteAttribute ( job -> attrs , attr ) ; //<S2SV> ippAddString ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NAME , "job-originating-host-name" , NULL , con -> http -> hostname ) ; //<S2SV> } //<S2SV> else //<S2SV> ippSetGroupTag ( job -> attrs , & attr , IPP_TAG_JOB ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ippAddString ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NAME , //<S2SV> "job-originating-host-name" , NULL , con -> http -> hostname ) ; //<S2SV> } //<S2SV> ippAddOutOfBand ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NOVALUE , "date-time-at-completed" ) ; //<S2SV> ippAddDate ( job -> attrs , IPP_TAG_JOB , "date-time-at-creation" , ippTimeToDate ( time ( NULL ) ) ) ; //<S2SV> ippAddOutOfBand ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NOVALUE , "date-time-at-processing" ) ; //<S2SV> ippAddOutOfBand ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NOVALUE , "time-at-completed" ) ; //<S2SV> ippAddInteger ( job -> attrs , IPP_TAG_JOB , IPP_TAG_INTEGER , "time-at-creation" , time ( NULL ) ) ; //<S2SV> ippAddOutOfBand ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NOVALUE , "time-at-processing" ) ; //<S2SV> ippAddInteger ( job -> attrs , IPP_TAG_JOB , IPP_TAG_INTEGER , "job-id" , job -> id ) ; //<S2SV> job -> state = ippAddInteger ( job -> attrs , IPP_TAG_JOB , IPP_TAG_ENUM , //<S2SV> "job-state" , IPP_JOB_STOPPED ) ; //<S2SV> job -> state_value = ( ipp_jstate_t ) job -> state -> values [ 0 ] . integer ; //<S2SV> job -> reasons = ippAddString ( job -> attrs , IPP_TAG_JOB , IPP_TAG_KEYWORD , //<S2SV> "job-state-reasons" , NULL , "job-incoming" ) ; //<S2SV> job -> impressions = ippAddInteger ( job -> attrs , IPP_TAG_JOB , IPP_TAG_INTEGER , "job-impressions-completed" , 0 ) ; //<S2SV> job -> sheets = ippAddInteger ( job -> attrs , IPP_TAG_JOB , IPP_TAG_INTEGER , //<S2SV> "job-media-sheets-completed" , 0 ) ; //<S2SV> ippAddString ( job -> attrs , IPP_TAG_JOB , IPP_TAG_URI , "job-printer-uri" , NULL , //<S2SV> printer -> uri ) ; //<S2SV> if ( ( attr = ippFindAttribute ( job -> attrs , "job-k-octets" , IPP_TAG_INTEGER ) ) != NULL ) //<S2SV> attr -> values [ 0 ] . integer = 0 ; //<S2SV> else //<S2SV> ippAddInteger ( job -> attrs , IPP_TAG_JOB , IPP_TAG_INTEGER , "job-k-octets" , 0 ) ; //<S2SV> if ( ( attr = ippFindAttribute ( job -> attrs , "job-hold-until" , //<S2SV> IPP_TAG_KEYWORD ) ) == NULL ) //<S2SV> attr = ippFindAttribute ( job -> attrs , "job-hold-until" , IPP_TAG_NAME ) ; //<S2SV> if ( ! attr ) //<S2SV> { //<S2SV> if ( ( val = cupsGetOption ( "job-hold-until" , printer -> num_options , //<S2SV> printer -> options ) ) == NULL ) //<S2SV> val = "no-hold" ; //<S2SV> attr = ippAddString ( job -> attrs , IPP_TAG_JOB , IPP_TAG_KEYWORD , //<S2SV> "job-hold-until" , NULL , val ) ; //<S2SV> } //<S2SV> if ( printer -> holding_new_jobs ) //<S2SV> { //<S2SV> if ( attr && strcmp ( attr -> values [ 0 ] . string . text , "no-hold" ) ) //<S2SV> cupsdSetJobHoldUntil ( job , ippGetString ( attr , 0 , NULL ) , 0 ) ; //<S2SV> else //<S2SV> cupsdSetJobHoldUntil ( job , "indefinite" , 0 ) ; //<S2SV> job -> state -> values [ 0 ] . integer = IPP_JOB_HELD ; //<S2SV> job -> state_value = IPP_JOB_HELD ; //<S2SV> ippSetString ( job -> attrs , & job -> reasons , 0 , "job-held-on-create" ) ; //<S2SV> } //<S2SV> else if ( attr && strcmp ( attr -> values [ 0 ] . string . text , "no-hold" ) ) //<S2SV> { //<S2SV> cupsdSetJobHoldUntil ( job , attr -> values [ 0 ] . string . text , 0 ) ; //<S2SV> job -> state -> values [ 0 ] . integer = IPP_JOB_HELD ; //<S2SV> job -> state_value = IPP_JOB_HELD ; //<S2SV> ippSetString ( job -> attrs , & job -> reasons , 0 , "job-hold-until-specified" ) ; //<S2SV> } //<S2SV> else if ( job -> attrs -> request . op . operation_id == IPP_CREATE_JOB ) //<S2SV> { //<S2SV> job -> hold_until = time ( NULL ) + MultipleOperationTimeout ; //<S2SV> job -> state -> values [ 0 ] . integer = IPP_JOB_HELD ; //<S2SV> job -> state_value = IPP_JOB_HELD ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> job -> state -> values [ 0 ] . integer = IPP_JOB_PENDING ; //<S2SV> job -> state_value = IPP_JOB_PENDING ; //<S2SV> ippSetString ( job -> attrs , & job -> reasons , 0 , "none" ) ; //<S2SV> } //<S2SV> if ( ! ( printer -> type & CUPS_PRINTER_REMOTE ) || Classification ) //<S2SV> { //<S2SV> if ( ( attr = ippFindAttribute ( job -> attrs , "job-sheets" , //<S2SV> IPP_TAG_ZERO ) ) == NULL ) //<S2SV> { //<S2SV> cupsdLogMessage ( CUPSD_LOG_DEBUG , //<S2SV> "Adding<S2SV_blank>default<S2SV_blank>job-sheets<S2SV_blank>values<S2SV_blank>\\"%s,%s\\"..." , //<S2SV> printer -> job_sheets [ 0 ] , printer -> job_sheets [ 1 ] ) ; //<S2SV> attr = ippAddStrings ( job -> attrs , IPP_TAG_JOB , IPP_TAG_NAME , "job-sheets" , //<S2SV> 2 , NULL , NULL ) ; //<S2SV> ippSetString ( job -> attrs , & attr , 0 , printer -> job_sheets [ 0 ] ) ; //<S2SV> ippSetString ( job -> attrs , & attr , 1 , printer -> job_sheets [ 1 ] ) ; //<S2SV> } //<S2SV> job -> job_sheets = attr ; //<S2SV> if ( Classification ) //<S2SV> { //<S2SV> cupsdLogMessage ( CUPSD_LOG_INFO , //<S2SV> "Classification=\\"%s\\",<S2SV_blank>ClassifyOverride=%d" , //<S2SV> Classification ? Classification : "(null)" , //<S2SV> ClassifyOverride ) ; //<S2SV> if ( ClassifyOverride ) //<S2SV> { //<S2SV> if ( ! strcmp ( attr -> values [ 0 ] . string . text , "none" ) && //<S2SV> ( attr -> num_values == 1 || //<S2SV> ! strcmp ( attr -> values [ 1 ] . string . text , "none" ) ) ) //<S2SV> { //<S2SV> ippSetString ( job -> attrs , & attr , 0 , Classification ) ; //<S2SV> cupsdLogJob ( job , CUPSD_LOG_NOTICE , "CLASSIFICATION<S2SV_blank>FORCED<S2SV_blank>" //<S2SV> "job-sheets=\\"%s,none\\",<S2SV_blank>" //<S2SV> "job-originating-user-name=\\"%s\\"" , //<S2SV> Classification , job -> username ) ; //<S2SV> } //<S2SV> else if ( attr -> num_values == 2 && //<S2SV> strcmp ( attr -> values [ 0 ] . string . text , //<S2SV> attr -> values [ 1 ] . string . text ) && //<S2SV> strcmp ( attr -> values [ 0 ] . string . text , "none" ) && //<S2SV> strcmp ( attr -> values [ 1 ] . string . text , "none" ) ) //<S2SV> { //<S2SV> ippSetString ( job -> attrs , & attr , 1 , attr -> values [ 0 ] . string . text ) ; //<S2SV> cupsdLogJob ( job , CUPSD_LOG_NOTICE , "CLASSIFICATION<S2SV_blank>FORCED<S2SV_blank>" //<S2SV> "job-sheets=\\"%s,%s\\",<S2SV_blank>" //<S2SV> "job-originating-user-name=\\"%s\\"" , //<S2SV> attr -> values [ 0 ] . string . text , //<S2SV> attr -> values [ 1 ] . string . text , job -> username ) ; //<S2SV> } //<S2SV> else if ( strcmp ( attr -> values [ 0 ] . string . text , Classification ) && //<S2SV> strcmp ( attr -> values [ 0 ] . string . text , "none" ) && //<S2SV> ( attr -> num_values == 1 || //<S2SV> ( strcmp ( attr -> values [ 1 ] . string . text , Classification ) && //<S2SV> strcmp ( attr -> values [ 1 ] . string . text , "none" ) ) ) ) //<S2SV> { //<S2SV> if ( attr -> num_values == 1 ) //<S2SV> cupsdLogJob ( job , CUPSD_LOG_NOTICE , //<S2SV> "CLASSIFICATION<S2SV_blank>OVERRIDDEN<S2SV_blank>" //<S2SV> "job-sheets=\\"%s\\",<S2SV_blank>" //<S2SV> "job-originating-user-name=\\"%s\\"" , //<S2SV> attr -> values [ 0 ] . string . text , job -> username ) ; //<S2SV> else //<S2SV> cupsdLogJob ( job , CUPSD_LOG_NOTICE , //<S2SV> "CLASSIFICATION<S2SV_blank>OVERRIDDEN<S2SV_blank>" //<S2SV> "job-sheets=\\"%s,%s\\",fffff<S2SV_blank>" //<S2SV> "job-originating-user-name=\\"%s\\"" , //<S2SV> attr -> values [ 0 ] . string . text , //<S2SV> attr -> values [ 1 ] . string . text , job -> username ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( strcmp ( attr -> values [ 0 ] . string . text , Classification ) && //<S2SV> ( attr -> num_values == 1 || //<S2SV> strcmp ( attr -> values [ 1 ] . string . text , Classification ) ) ) //<S2SV> { //<S2SV> if ( attr -> num_values > 1 && //<S2SV> ! strcmp ( attr -> values [ 0 ] . string . text , attr -> values [ 1 ] . string . text ) ) //<S2SV> { //<S2SV> ippSetString ( job -> attrs , & attr , 0 , Classification ) ; //<S2SV> ippSetString ( job -> attrs , & attr , 1 , Classification ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( attr -> num_values == 1 || //<S2SV> strcmp ( attr -> values [ 0 ] . string . text , "none" ) ) //<S2SV> ippSetString ( job -> attrs , & attr , 0 , Classification ) ; //<S2SV> if ( attr -> num_values > 1 && //<S2SV> strcmp ( attr -> values [ 1 ] . string . text , "none" ) ) //<S2SV> ippSetString ( job -> attrs , & attr , 1 , Classification ) ; //<S2SV> } //<S2SV> if ( attr -> num_values > 1 ) //<S2SV> cupsdLogJob ( job , CUPSD_LOG_NOTICE , //<S2SV> "CLASSIFICATION<S2SV_blank>FORCED<S2SV_blank>" //<S2SV> "job-sheets=\\"%s,%s\\",<S2SV_blank>" //<S2SV> "job-originating-user-name=\\"%s\\"" , //<S2SV> attr -> values [ 0 ] . string . text , //<S2SV> attr -> values [ 1 ] . string . text , job -> username ) ; //<S2SV> else //<S2SV> cupsdLogJob ( job , CUPSD_LOG_NOTICE , //<S2SV> "CLASSIFICATION<S2SV_blank>FORCED<S2SV_blank>" //<S2SV> "job-sheets=\\"%s\\",<S2SV_blank>" //<S2SV> "job-originating-user-name=\\"%s\\"" , //<S2SV> Classification , job -> username ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! ( printer -> type & CUPS_PRINTER_REMOTE ) ) //<S2SV> { //<S2SV> cupsdLogJob ( job , CUPSD_LOG_INFO , "Adding<S2SV_blank>start<S2SV_blank>banner<S2SV_blank>page<S2SV_blank>\\"%s\\"." , //<S2SV> attr -> values [ 0 ] . string . text ) ; //<S2SV> if ( ( kbytes = copy_banner ( con , job , attr -> values [ 0 ] . string . text ) ) < 0 ) //<S2SV> { //<S2SV> cupsdSetJobState ( job , IPP_JOB_ABORTED , CUPSD_JOB_PURGE , //<S2SV> "Aborting<S2SV_blank>job<S2SV_blank>because<S2SV_blank>the<S2SV_blank>start<S2SV_blank>banner<S2SV_blank>could<S2SV_blank>not<S2SV_blank>be<S2SV_blank>" //<S2SV> "copied." ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> cupsdUpdateQuota ( printer , job -> username , 0 , kbytes ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ( attr = ippFindAttribute ( job -> attrs , "job-sheets" , //<S2SV> IPP_TAG_ZERO ) ) != NULL ) //<S2SV> job -> job_sheets = attr ; //<S2SV> httpAssembleURIf ( HTTP_URI_CODING_ALL , job_uri , sizeof ( job_uri ) , "ipp" , NULL , //<S2SV> con -> clientname , con -> clientport , "/jobs/%d" , job -> id ) ; //<S2SV> ippAddString ( con -> response , IPP_TAG_JOB , IPP_TAG_URI , "job-uri" , NULL , //<S2SV> job_uri ) ; //<S2SV> ippAddInteger ( con -> response , IPP_TAG_JOB , IPP_TAG_INTEGER , "job-id" , job -> id ) ; //<S2SV> ippAddInteger ( con -> response , IPP_TAG_JOB , IPP_TAG_ENUM , "job-state" , //<S2SV> job -> state_value ) ; //<S2SV> ippAddString ( con -> response , IPP_TAG_JOB , IPP_TAG_TEXT , "job-state-message" , NULL , "" ) ; //<S2SV> ippAddString ( con -> response , IPP_TAG_JOB , IPP_TAG_KEYWORD , "job-state-reasons" , //<S2SV> NULL , job -> reasons -> values [ 0 ] . string . text ) ; //<S2SV> con -> response -> request . status . status_code = IPP_OK ; //<S2SV> add_job_subscriptions ( con , job ) ; //<S2SV> for ( attr = job -> attrs -> attrs -> next -> next ; attr ; attr = attr -> next ) //<S2SV> attr -> group_tag = IPP_TAG_JOB ; //<S2SV> cupsdAddEvent ( CUPSD_EVENT_JOB_CREATED , printer , job , "Job<S2SV_blank>created." ) ; //<S2SV> return ( job ) ; //<S2SV> } //<S2SV> 