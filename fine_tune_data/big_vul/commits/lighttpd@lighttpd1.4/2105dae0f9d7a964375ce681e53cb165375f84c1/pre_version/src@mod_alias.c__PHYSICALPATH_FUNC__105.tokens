PHYSICALPATH_FUNC ( mod_alias_physical_handler ) { //<S2SV> plugin_data * p = p_d ; //<S2SV> int uri_len , basedir_len ; //<S2SV> char * uri_ptr ; //<S2SV> size_t k ; //<S2SV> if ( buffer_is_empty ( con -> physical . path ) ) return HANDLER_GO_ON ; //<S2SV> mod_alias_patch_connection ( srv , con , p ) ; //<S2SV> basedir_len = buffer_string_length ( con -> physical . basedir ) ; //<S2SV> if ( '/' == con -> physical . basedir -> ptr [ basedir_len - 1 ] ) -- basedir_len ; //<S2SV> uri_len = buffer_string_length ( con -> physical . path ) - basedir_len ; //<S2SV> uri_ptr = con -> physical . path -> ptr + basedir_len ; //<S2SV> for ( k = 0 ; k < p -> conf . alias -> used ; k ++ ) { //<S2SV> data_string * ds = ( data_string * ) p -> conf . alias -> data [ k ] ; //<S2SV> int alias_len = buffer_string_length ( ds -> key ) ; //<S2SV> if ( alias_len > uri_len ) continue ; //<S2SV> if ( buffer_is_empty ( ds -> key ) ) continue ; //<S2SV> if ( 0 == ( con -> conf . force_lowercase_filenames ? //<S2SV> strncasecmp ( uri_ptr , ds -> key -> ptr , alias_len ) : //<S2SV> strncmp ( uri_ptr , ds -> key -> ptr , alias_len ) ) ) { //<S2SV> buffer_copy_buffer ( con -> physical . basedir , ds -> value ) ; //<S2SV> buffer_copy_buffer ( srv -> tmp_buf , ds -> value ) ; //<S2SV> buffer_append_string ( srv -> tmp_buf , uri_ptr + alias_len ) ; //<S2SV> buffer_copy_buffer ( con -> physical . path , srv -> tmp_buf ) ; //<S2SV> return HANDLER_GO_ON ; //<S2SV> } //<S2SV> } //<S2SV> return HANDLER_GO_ON ; //<S2SV> } //<S2SV> 