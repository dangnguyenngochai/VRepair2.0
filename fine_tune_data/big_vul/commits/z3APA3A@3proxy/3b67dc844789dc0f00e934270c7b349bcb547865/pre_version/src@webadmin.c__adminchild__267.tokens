void * adminchild ( struct clientparam * param ) { //<S2SV> int i , res ; //<S2SV> char * buf ; //<S2SV> char username [ 256 ] ; //<S2SV> char * sb ; //<S2SV> char * req = NULL ; //<S2SV> struct printparam pp ; //<S2SV> int contentlen = 0 ; //<S2SV> int isform = 0 ; //<S2SV> pp . inbuf = 0 ; //<S2SV> pp . cp = param ; //<S2SV> buf = myalloc ( LINESIZE ) ; //<S2SV> if ( ! buf ) { RETURN ( 555 ) ; } //<S2SV> i = sockgetlinebuf ( param , CLIENT , ( unsigned char * ) buf , LINESIZE - 1 , '\\n' , conf . timeouts [ STRING_S ] ) ; //<S2SV> if ( i < 5 || ( ( buf [ 0 ] != 'G' || buf [ 1 ] != 'E' || buf [ 2 ] != 'T' || buf [ 3 ] != '<S2SV_blank>' || buf [ 4 ] != '/' ) && //<S2SV> ( buf [ 0 ] != 'P' || buf [ 1 ] != 'O' || buf [ 2 ] != 'S' || buf [ 3 ] != 'T' || buf [ 4 ] != '<S2SV_blank>' || buf [ 5 ] != '/' ) ) ) //<S2SV> { //<S2SV> RETURN ( 701 ) ; //<S2SV> } //<S2SV> buf [ i ] = 0 ; //<S2SV> sb = strchr ( buf + 5 , '<S2SV_blank>' ) ; //<S2SV> if ( ! sb ) { //<S2SV> RETURN ( 702 ) ; //<S2SV> } //<S2SV> * sb = 0 ; //<S2SV> req = mystrdup ( buf + ( ( * buf == 'P' ) ? 6 : 5 ) ) ; //<S2SV> while ( ( i = sockgetlinebuf ( param , CLIENT , ( unsigned char * ) buf , LINESIZE - 1 , '\\n' , conf . timeouts [ STRING_S ] ) ) > 2 ) { //<S2SV> buf [ i ] = 0 ; //<S2SV> if ( i > 19 && ( ! strncasecmp ( buf , "authorization" , 13 ) ) ) { //<S2SV> sb = strchr ( buf , ':' ) ; //<S2SV> if ( ! sb ) continue ; //<S2SV> ++ sb ; //<S2SV> while ( isspace ( * sb ) ) sb ++ ; //<S2SV> if ( ! * sb || strncasecmp ( sb , "basic" , 5 ) ) { //<S2SV> continue ; //<S2SV> } //<S2SV> sb += 5 ; //<S2SV> while ( isspace ( * sb ) ) sb ++ ; //<S2SV> i = de64 ( ( unsigned char * ) sb , ( unsigned char * ) username , 255 ) ; //<S2SV> if ( i <= 0 ) continue ; //<S2SV> username [ i ] = 0 ; //<S2SV> sb = strchr ( ( char * ) username , ':' ) ; //<S2SV> if ( sb ) { //<S2SV> * sb = 0 ; //<S2SV> if ( param -> password ) myfree ( param -> password ) ; //<S2SV> param -> password = ( unsigned char * ) mystrdup ( sb + 1 ) ; //<S2SV> } //<S2SV> if ( param -> username ) myfree ( param -> username ) ; //<S2SV> param -> username = ( unsigned char * ) mystrdup ( username ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> else if ( i > 15 && ( ! strncasecmp ( buf , "content-length:" , 15 ) ) ) { //<S2SV> sb = buf + 15 ; //<S2SV> while ( isspace ( * sb ) ) sb ++ ; //<S2SV> contentlen = atoi ( sb ) ; //<S2SV> } //<S2SV> else if ( i > 13 && ( ! strncasecmp ( buf , "content-type:" , 13 ) ) ) { //<S2SV> sb = buf + 13 ; //<S2SV> while ( isspace ( * sb ) ) sb ++ ; //<S2SV> if ( ! strncasecmp ( sb , "x-www-form-urlencoded" , 21 ) ) isform = 1 ; //<S2SV> } //<S2SV> } //<S2SV> param -> operation = ADMIN ; //<S2SV> if ( isform && contentlen ) { //<S2SV> printstr ( & pp , "HTTP/1.0<S2SV_blank>100<S2SV_blank>Continue\\r\\n\\r\\n" ) ; //<S2SV> stdpr ( & pp , NULL , 0 ) ; //<S2SV> } //<S2SV> res = ( * param -> srv -> authfunc ) ( param ) ; //<S2SV> if ( res && res != 10 ) { //<S2SV> printstr ( & pp , authreq ) ; //<S2SV> RETURN ( res ) ; //<S2SV> } //<S2SV> if ( param -> srv -> singlepacket || param -> redirected ) { //<S2SV> if ( * req == 'C' ) req [ 1 ] = 0 ; //<S2SV> else * req = 0 ; //<S2SV> } //<S2SV> sprintf ( buf , ok , conf . stringtable ? ( char * ) conf . stringtable [ 2 ] : "3proxy" , conf . stringtable ? ( char * ) conf . stringtable [ 2 ] : "3[APA3A]<S2SV_blank>tiny<S2SV_blank>proxy" , conf . stringtable ? ( char * ) conf . stringtable [ 3 ] : "" ) ; //<S2SV> if ( * req != 'S' ) printstr ( & pp , buf ) ; //<S2SV> switch ( * req ) { //<S2SV> case 'C' : //<S2SV> printstr ( & pp , counters ) ; //<S2SV> { //<S2SV> struct trafcount * cp ; //<S2SV> int num = 0 ; //<S2SV> for ( cp = conf . trafcounter ; cp ; cp = cp -> next , num ++ ) { //<S2SV> int inbuf = 0 ; //<S2SV> if ( cp -> ace && ( param -> srv -> singlepacket || param -> redirected ) ) { //<S2SV> if ( ! ACLmatches ( cp -> ace , param ) ) continue ; //<S2SV> } //<S2SV> if ( req [ 1 ] == 'S' && atoi ( req + 2 ) == num ) cp -> disabled = 0 ; //<S2SV> if ( req [ 1 ] == 'D' && atoi ( req + 2 ) == num ) cp -> disabled = 1 ; //<S2SV> inbuf += sprintf ( buf , "<tr>" //<S2SV> "<td>%s</td><td><A<S2SV_blank>HREF=\\\'/C%c%d\\\'>%s</A></td><td>" , //<S2SV> ( cp -> comment ) ? cp -> comment : "&nbsp;" , //<S2SV> ( cp -> disabled ) ? 'S' : 'D' , //<S2SV> num , //<S2SV> ( cp -> disabled ) ? "NO" : "YES" //<S2SV> ) ; //<S2SV> if ( ! cp -> ace || ! cp -> ace -> users ) { //<S2SV> inbuf += sprintf ( buf + inbuf , "<center>ANY</center>" ) ; //<S2SV> } //<S2SV> else { //<S2SV> inbuf += printuserlist ( buf + inbuf , LINESIZE - 800 , cp -> ace -> users , ",<br<S2SV_blank>/>\\r\\n" ) ; //<S2SV> } //<S2SV> inbuf += sprintf ( buf + inbuf , "</td><td>" ) ; //<S2SV> if ( ! cp -> ace || ! cp -> ace -> src ) { //<S2SV> inbuf += sprintf ( buf + inbuf , "<center>ANY</center>" ) ; //<S2SV> } //<S2SV> else { //<S2SV> inbuf += printiplist ( buf + inbuf , LINESIZE - 512 , cp -> ace -> src , ",<br<S2SV_blank>/>\\r\\n" ) ; //<S2SV> } //<S2SV> inbuf += sprintf ( buf + inbuf , "</td><td>" ) ; //<S2SV> if ( ! cp -> ace || ! cp -> ace -> dst ) { //<S2SV> inbuf += sprintf ( buf + inbuf , "<center>ANY</center>" ) ; //<S2SV> } //<S2SV> else { //<S2SV> inbuf += printiplist ( buf + inbuf , LINESIZE - 512 , cp -> ace -> dst , ",<br<S2SV_blank>/>\\r\\n" ) ; //<S2SV> } //<S2SV> inbuf += sprintf ( buf + inbuf , "</td><td>" ) ; //<S2SV> if ( ! cp -> ace || ! cp -> ace -> ports ) { //<S2SV> inbuf += sprintf ( buf + inbuf , "<center>ANY</center>" ) ; //<S2SV> } //<S2SV> else { //<S2SV> inbuf += printportlist ( buf + inbuf , LINESIZE - 128 , cp -> ace -> ports , ",<br<S2SV_blank>/>\\r\\n" ) ; //<S2SV> } //<S2SV> if ( cp -> type == NONE ) { //<S2SV> inbuf += sprintf ( buf + inbuf , //<S2SV> "</td><td<S2SV_blank>colspan=\\\'6\\\'<S2SV_blank>align=\\\'center\\\'>exclude<S2SV_blank>from<S2SV_blank>limitation</td></tr>\\r\\n" //<S2SV> ) ; //<S2SV> } //<S2SV> else { //<S2SV> inbuf += sprintf ( buf + inbuf , //<S2SV> "</td><td>%" PRINTF_INT64_MODIFIER "u</td>" //<S2SV> "<td>MB%s</td>" //<S2SV> "<td>%" PRINTF_INT64_MODIFIER "u</td>" //<S2SV> "<td>%s</td>" , //<S2SV> cp -> traflim64 / ( 1024 * 1024 ) , //<S2SV> rotations [ cp -> type ] , //<S2SV> cp -> traf64 , //<S2SV> cp -> cleared ? ctime ( & cp -> cleared ) : "never" //<S2SV> ) ; //<S2SV> inbuf += sprintf ( buf + inbuf , //<S2SV> "<td>%s</td>" //<S2SV> "<td>%i</td>" //<S2SV> "</tr>\\r\\n" , //<S2SV> cp -> updated ? ctime ( & cp -> updated ) : "never" , //<S2SV> cp -> number //<S2SV> ) ; //<S2SV> } //<S2SV> printstr ( & pp , buf ) ; //<S2SV> } //<S2SV> } //<S2SV> printstr ( & pp , counterstail ) ; //<S2SV> break ; //<S2SV> case 'R' : //<S2SV> conf . needreload = 1 ; //<S2SV> printstr ( & pp , "<h3>Reload<S2SV_blank>scheduled</h3>" ) ; //<S2SV> break ; //<S2SV> case 'S' : //<S2SV> { //<S2SV> if ( req [ 1 ] == 'X' ) { //<S2SV> printstr ( & pp , style ) ; //<S2SV> break ; //<S2SV> } //<S2SV> printstr ( & pp , xml ) ; //<S2SV> printval ( conf . services , TYPE_SERVER , 0 , & pp ) ; //<S2SV> printstr ( & pp , postxml ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'F' : //<S2SV> { //<S2SV> FILE * fp ; //<S2SV> char buf [ 256 ] ; //<S2SV> fp = confopen ( ) ; //<S2SV> if ( ! fp ) { //<S2SV> printstr ( & pp , "<h3><font<S2SV_blank>color=\\"red\\">Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>config<S2SV_blank>file</font></h3>" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> printstr ( & pp , "<h3>Please<S2SV_blank>be<S2SV_blank>careful<S2SV_blank>editing<S2SV_blank>config<S2SV_blank>file<S2SV_blank>remotely</h3>" ) ; //<S2SV> printstr ( & pp , "<form<S2SV_blank>method=\\"POST\\"<S2SV_blank>action=\\"/U\\"><textarea<S2SV_blank>cols=\\"80\\"<S2SV_blank>rows=\\"30\\"<S2SV_blank>name=\\"conffile\\">" ) ; //<S2SV> while ( fgets ( buf , 256 , fp ) ) { //<S2SV> printstr ( & pp , buf ) ; //<S2SV> } //<S2SV> if ( ! writable ) fclose ( fp ) ; //<S2SV> printstr ( & pp , "</textarea><br><input<S2SV_blank>type=\\"Submit\\"></form>" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case 'U' : //<S2SV> { //<S2SV> int l = 0 ; //<S2SV> int error = 0 ; //<S2SV> if ( ! writable || fseek ( writable , 0 , 0 ) ) { //<S2SV> error = 1 ; //<S2SV> } //<S2SV> while ( ( i = sockgetlinebuf ( param , CLIENT , ( unsigned char * ) buf , LINESIZE - 1 , '+' , conf . timeouts [ STRING_S ] ) ) > 0 ) { //<S2SV> if ( i > ( contentlen - l ) ) i = ( contentlen - l ) ; //<S2SV> buf [ i ] = 0 ; //<S2SV> if ( ! l ) { //<S2SV> if ( strncasecmp ( buf , "conffile=" , 9 ) ) error = 1 ; //<S2SV> } //<S2SV> if ( ! error ) { //<S2SV> decodeurl ( ( unsigned char * ) buf , 1 ) ; //<S2SV> fprintf ( writable , "%s" , l ? buf : buf + 9 ) ; //<S2SV> } //<S2SV> l += i ; //<S2SV> if ( l >= contentlen ) break ; //<S2SV> } //<S2SV> if ( writable && ! error ) { //<S2SV> fflush ( writable ) ; //<S2SV> # ifndef _WINCE //<S2SV> ftruncate ( fileno ( writable ) , ftell ( writable ) ) ; //<S2SV> # endif //<S2SV> } //<S2SV> printstr ( & pp , error ? "<h3><font<S2SV_blank>color=\\"red\\">Config<S2SV_blank>file<S2SV_blank>is<S2SV_blank>not<S2SV_blank>writable</font></h3>Make<S2SV_blank>sure<S2SV_blank>you<S2SV_blank>have<S2SV_blank>\\"writable\\"<S2SV_blank>command<S2SV_blank>in<S2SV_blank>configuration<S2SV_blank>file" : //<S2SV> "<h3>Configuration<S2SV_blank>updated</h3>" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> printstr ( & pp , ( char * ) conf . stringtable [ WEBBANNERS ] ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( * req != 'S' ) printstr ( & pp , tail ) ; //<S2SV> CLEANRET : //<S2SV> printstr ( & pp , NULL ) ; //<S2SV> if ( buf ) myfree ( buf ) ; //<S2SV> ( * param -> srv -> logfunc ) ( param , ( unsigned char * ) req ) ; //<S2SV> if ( req ) myfree ( req ) ; //<S2SV> freeparam ( param ) ; //<S2SV> return ( NULL ) ; //<S2SV> } //<S2SV> 