static void send_auth ( char * username , char * password ) { //<S2SV> struct mt_packet data ; //<S2SV> unsigned short width = 0 ; //<S2SV> unsigned short height = 0 ; //<S2SV> char * terminal = getenv ( "TERM" ) ; //<S2SV> char md5data [ 100 ] ; //<S2SV> unsigned char md5sum [ 17 ] ; //<S2SV> int plen , act_pass_len ; //<S2SV> md5_state_t state ; //<S2SV> # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) //<S2SV> mlock ( md5data , sizeof ( md5data ) ) ; //<S2SV> mlock ( md5sum , sizeof ( md5data ) ) ; //<S2SV> # endif //<S2SV> act_pass_len = strnlen ( password , 82 ) ; //<S2SV> md5data [ 0 ] = 0 ; //<S2SV> memcpy ( md5data + 1 , password , act_pass_len ) ; //<S2SV> memcpy ( md5data + 1 + act_pass_len , pass_salt , 16 ) ; //<S2SV> md5_init ( & state ) ; //<S2SV> md5_append ( & state , ( const md5_byte_t * ) md5data , 1 + act_pass_len + 16 ) ; //<S2SV> md5_finish ( & state , ( md5_byte_t * ) md5sum + 1 ) ; //<S2SV> md5sum [ 0 ] = 0 ; //<S2SV> init_packet ( & data , MT_PTYPE_DATA , srcmac , dstmac , sessionkey , outcounter ) ; //<S2SV> plen = add_control_packet ( & data , MT_CPTYPE_PASSWORD , md5sum , 17 ) ; //<S2SV> plen += add_control_packet ( & data , MT_CPTYPE_USERNAME , username , strlen ( username ) ) ; //<S2SV> plen += add_control_packet ( & data , MT_CPTYPE_TERM_TYPE , terminal , strlen ( terminal ) ) ; //<S2SV> if ( is_a_tty && get_terminal_size ( & width , & height ) != - 1 ) { //<S2SV> width = htole16 ( width ) ; //<S2SV> height = htole16 ( height ) ; //<S2SV> plen += add_control_packet ( & data , MT_CPTYPE_TERM_WIDTH , & width , 2 ) ; //<S2SV> plen += add_control_packet ( & data , MT_CPTYPE_TERM_HEIGHT , & height , 2 ) ; //<S2SV> } //<S2SV> outcounter += plen ; //<S2SV> send_udp ( & data , 1 ) ; //<S2SV> } //<S2SV> 