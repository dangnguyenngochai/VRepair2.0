static int handle_packet ( unsigned char * data , int data_len ) { //<S2SV> struct mt_mactelnet_hdr pkthdr ; //<S2SV> if ( data_len < MT_HEADER_LEN ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> parse_packet ( data , & pkthdr ) ; //<S2SV> if ( pkthdr . seskey != sessionkey ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( pkthdr . ptype == MT_PTYPE_DATA ) { //<S2SV> struct mt_packet odata ; //<S2SV> struct mt_mactelnet_control_hdr cpkt ; //<S2SV> int success = 0 ; //<S2SV> init_packet ( & odata , MT_PTYPE_ACK , srcmac , dstmac , sessionkey , pkthdr . counter + ( data_len - MT_HEADER_LEN ) ) ; //<S2SV> send_udp ( & odata , 0 ) ; //<S2SV> if ( pkthdr . counter > incounter || ( incounter - pkthdr . counter ) > 65535 ) { //<S2SV> incounter = pkthdr . counter ; //<S2SV> } else { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> success = parse_control_packet ( data + MT_HEADER_LEN , data_len - MT_HEADER_LEN , & cpkt ) ; //<S2SV> while ( success ) { //<S2SV> if ( cpkt . cptype == MT_CPTYPE_PASSSALT ) { //<S2SV> memcpy ( pass_salt , cpkt . data , cpkt . length ) ; //<S2SV> send_auth ( username , password ) ; //<S2SV> } //<S2SV> else if ( cpkt . cptype == MT_CPTYPE_PLAINDATA ) { //<S2SV> fwrite ( ( const void * ) cpkt . data , 1 , cpkt . length , stdout ) ; //<S2SV> } //<S2SV> else if ( cpkt . cptype == MT_CPTYPE_END_AUTH ) { //<S2SV> terminal_mode = 1 ; //<S2SV> if ( is_a_tty ) { //<S2SV> raw_term ( ) ; //<S2SV> setvbuf ( stdin , ( char * ) NULL , _IONBF , 0 ) ; //<S2SV> signal ( SIGWINCH , sig_winch ) ; //<S2SV> } //<S2SV> } //<S2SV> success = parse_control_packet ( NULL , 0 , & cpkt ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( pkthdr . ptype == MT_PTYPE_ACK ) { //<S2SV> } //<S2SV> else if ( pkthdr . ptype == MT_PTYPE_END ) { //<S2SV> struct mt_packet odata ; //<S2SV> init_packet ( & odata , MT_PTYPE_END , srcmac , dstmac , pkthdr . seskey , 0 ) ; //<S2SV> send_udp ( & odata , 0 ) ; //<S2SV> if ( ! quiet_mode ) { //<S2SV> fprintf ( stderr , _ ( "Connection<S2SV_blank>closed.\\n" ) ) ; //<S2SV> } //<S2SV> running = 0 ; //<S2SV> } else { //<S2SV> fprintf ( stderr , _ ( "Unhandeled<S2SV_blank>packet<S2SV_blank>type:<S2SV_blank>%d<S2SV_blank>received<S2SV_blank>from<S2SV_blank>server<S2SV_blank>%s\\n" ) , pkthdr . ptype , ether_ntoa ( ( struct ether_addr * ) dstmac ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> return pkthdr . ptype ; //<S2SV> } //<S2SV> 