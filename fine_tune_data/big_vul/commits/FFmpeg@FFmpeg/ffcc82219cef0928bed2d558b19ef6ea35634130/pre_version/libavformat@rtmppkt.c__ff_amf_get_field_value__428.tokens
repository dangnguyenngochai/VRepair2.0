int ff_amf_get_field_value ( const uint8_t * data , const uint8_t * data_end , //<S2SV> const uint8_t * name , uint8_t * dst , int dst_size ) //<S2SV> { //<S2SV> int namelen = strlen ( name ) ; //<S2SV> int len ; //<S2SV> while ( * data != AMF_DATA_TYPE_OBJECT && data < data_end ) { //<S2SV> len = ff_amf_tag_size ( data , data_end ) ; //<S2SV> if ( len < 0 ) //<S2SV> len = data_end - data ; //<S2SV> data += len ; //<S2SV> } //<S2SV> if ( data_end - data < 3 ) //<S2SV> return - 1 ; //<S2SV> data ++ ; //<S2SV> for ( ; ; ) { //<S2SV> int size = bytestream_get_be16 ( & data ) ; //<S2SV> if ( ! size ) //<S2SV> break ; //<S2SV> if ( size < 0 || size >= data_end - data ) //<S2SV> return - 1 ; //<S2SV> data += size ; //<S2SV> if ( size == namelen && ! memcmp ( data - size , name , namelen ) ) { //<S2SV> switch ( * data ++ ) { //<S2SV> case AMF_DATA_TYPE_NUMBER : //<S2SV> snprintf ( dst , dst_size , "%g" , av_int2double ( AV_RB64 ( data ) ) ) ; //<S2SV> break ; //<S2SV> case AMF_DATA_TYPE_BOOL : //<S2SV> snprintf ( dst , dst_size , "%s" , * data ? "true" : "false" ) ; //<S2SV> break ; //<S2SV> case AMF_DATA_TYPE_STRING : //<S2SV> len = bytestream_get_be16 ( & data ) ; //<S2SV> av_strlcpy ( dst , data , FFMIN ( len + 1 , dst_size ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> return - 1 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> len = ff_amf_tag_size ( data , data_end ) ; //<S2SV> if ( len < 0 || len >= data_end - data ) //<S2SV> return - 1 ; //<S2SV> data += len ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 