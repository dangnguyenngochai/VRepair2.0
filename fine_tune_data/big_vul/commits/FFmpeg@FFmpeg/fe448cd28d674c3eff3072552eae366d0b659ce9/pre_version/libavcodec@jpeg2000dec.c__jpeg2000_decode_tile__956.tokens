static int jpeg2000_decode_tile ( Jpeg2000DecoderContext * s , Jpeg2000Tile * tile , //<S2SV> AVFrame * picture ) //<S2SV> { //<S2SV> int compno , reslevelno , bandno ; //<S2SV> int x , y ; //<S2SV> uint8_t * line ; //<S2SV> Jpeg2000T1Context t1 ; //<S2SV> for ( compno = 0 ; compno < s -> ncomponents ; compno ++ ) { //<S2SV> Jpeg2000Component * comp = tile -> comp + compno ; //<S2SV> Jpeg2000CodingStyle * codsty = tile -> codsty + compno ; //<S2SV> for ( reslevelno = 0 ; reslevelno < codsty -> nreslevels2decode ; reslevelno ++ ) { //<S2SV> Jpeg2000ResLevel * rlevel = comp -> reslevel + reslevelno ; //<S2SV> for ( bandno = 0 ; bandno < rlevel -> nbands ; bandno ++ ) { //<S2SV> int nb_precincts , precno ; //<S2SV> Jpeg2000Band * band = rlevel -> band + bandno ; //<S2SV> int cblkno = 0 , bandpos ; //<S2SV> bandpos = bandno + ( reslevelno > 0 ) ; //<S2SV> if ( band -> coord [ 0 ] [ 0 ] == band -> coord [ 0 ] [ 1 ] || //<S2SV> band -> coord [ 1 ] [ 0 ] == band -> coord [ 1 ] [ 1 ] ) //<S2SV> continue ; //<S2SV> nb_precincts = rlevel -> num_precincts_x * rlevel -> num_precincts_y ; //<S2SV> for ( precno = 0 ; precno < nb_precincts ; precno ++ ) { //<S2SV> Jpeg2000Prec * prec = band -> prec + precno ; //<S2SV> for ( cblkno = 0 ; cblkno < prec -> nb_codeblocks_width * prec -> nb_codeblocks_height ; cblkno ++ ) { //<S2SV> int x , y ; //<S2SV> Jpeg2000Cblk * cblk = prec -> cblk + cblkno ; //<S2SV> decode_cblk ( s , codsty , & t1 , cblk , //<S2SV> cblk -> coord [ 0 ] [ 1 ] - cblk -> coord [ 0 ] [ 0 ] , //<S2SV> cblk -> coord [ 1 ] [ 1 ] - cblk -> coord [ 1 ] [ 0 ] , //<S2SV> bandpos ) ; //<S2SV> x = cblk -> coord [ 0 ] [ 0 ] ; //<S2SV> y = cblk -> coord [ 1 ] [ 0 ] ; //<S2SV> if ( codsty -> transform == FF_DWT97 ) //<S2SV> dequantization_float ( x , y , cblk , comp , & t1 , band ) ; //<S2SV> else //<S2SV> dequantization_int ( x , y , cblk , comp , & t1 , band ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> ff_dwt_decode ( & comp -> dwt , codsty -> transform == FF_DWT97 ? ( void * ) comp -> f_data : ( void * ) comp -> i_data ) ; //<S2SV> } //<S2SV> if ( tile -> codsty [ 0 ] . mct ) //<S2SV> mct_decode ( s , tile ) ; //<S2SV> if ( s -> cdef [ 0 ] < 0 ) { //<S2SV> for ( x = 0 ; x < s -> ncomponents ; x ++ ) //<S2SV> s -> cdef [ x ] = x + 1 ; //<S2SV> if ( ( s -> ncomponents & 1 ) == 0 ) //<S2SV> s -> cdef [ s -> ncomponents - 1 ] = 0 ; //<S2SV> } //<S2SV> if ( s -> precision <= 8 ) { //<S2SV> for ( compno = 0 ; compno < s -> ncomponents ; compno ++ ) { //<S2SV> Jpeg2000Component * comp = tile -> comp + compno ; //<S2SV> Jpeg2000CodingStyle * codsty = tile -> codsty + compno ; //<S2SV> float * datap = comp -> f_data ; //<S2SV> int32_t * i_datap = comp -> i_data ; //<S2SV> int cbps = s -> cbps [ compno ] ; //<S2SV> int w = tile -> comp [ compno ] . coord [ 0 ] [ 1 ] - s -> image_offset_x ; //<S2SV> int planar = ! ! picture -> data [ 2 ] ; //<S2SV> int pixelsize = planar ? 1 : s -> ncomponents ; //<S2SV> int plane = 0 ; //<S2SV> if ( planar ) //<S2SV> plane = s -> cdef [ compno ] ? s -> cdef [ compno ] - 1 : ( s -> ncomponents - 1 ) ; //<S2SV> y = tile -> comp [ compno ] . coord [ 1 ] [ 0 ] - s -> image_offset_y ; //<S2SV> line = picture -> data [ plane ] + y * picture -> linesize [ plane ] ; //<S2SV> for ( ; y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y ; y += s -> cdy [ compno ] ) { //<S2SV> uint8_t * dst ; //<S2SV> x = tile -> comp [ compno ] . coord [ 0 ] [ 0 ] - s -> image_offset_x ; //<S2SV> dst = line + x * pixelsize + compno * ! planar ; //<S2SV> if ( codsty -> transform == FF_DWT97 ) { //<S2SV> for ( ; x < w ; x += s -> cdx [ compno ] ) { //<S2SV> int val = lrintf ( * datap ) + ( 1 << ( cbps - 1 ) ) ; //<S2SV> val = av_clip ( val , 0 , ( 1 << cbps ) - 1 ) ; //<S2SV> * dst = val << ( 8 - cbps ) ; //<S2SV> datap ++ ; //<S2SV> dst += pixelsize ; //<S2SV> } //<S2SV> } else { //<S2SV> for ( ; x < w ; x += s -> cdx [ compno ] ) { //<S2SV> int val = * i_datap + ( 1 << ( cbps - 1 ) ) ; //<S2SV> val = av_clip ( val , 0 , ( 1 << cbps ) - 1 ) ; //<S2SV> * dst = val << ( 8 - cbps ) ; //<S2SV> i_datap ++ ; //<S2SV> dst += pixelsize ; //<S2SV> } //<S2SV> } //<S2SV> line += picture -> linesize [ plane ] ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> for ( compno = 0 ; compno < s -> ncomponents ; compno ++ ) { //<S2SV> Jpeg2000Component * comp = tile -> comp + compno ; //<S2SV> Jpeg2000CodingStyle * codsty = tile -> codsty + compno ; //<S2SV> float * datap = comp -> f_data ; //<S2SV> int32_t * i_datap = comp -> i_data ; //<S2SV> uint16_t * linel ; //<S2SV> int cbps = s -> cbps [ compno ] ; //<S2SV> int w = tile -> comp [ compno ] . coord [ 0 ] [ 1 ] - s -> image_offset_x ; //<S2SV> int planar = ! ! picture -> data [ 2 ] ; //<S2SV> int pixelsize = planar ? 1 : s -> ncomponents ; //<S2SV> int plane = 0 ; //<S2SV> if ( planar ) //<S2SV> plane = s -> cdef [ compno ] ? s -> cdef [ compno ] - 1 : ( s -> ncomponents - 1 ) ; //<S2SV> y = tile -> comp [ compno ] . coord [ 1 ] [ 0 ] - s -> image_offset_y ; //<S2SV> linel = ( uint16_t * ) picture -> data [ plane ] + y * ( picture -> linesize [ plane ] >> 1 ) ; //<S2SV> for ( ; y < tile -> comp [ compno ] . coord [ 1 ] [ 1 ] - s -> image_offset_y ; y += s -> cdy [ compno ] ) { //<S2SV> uint16_t * dst ; //<S2SV> x = tile -> comp [ compno ] . coord [ 0 ] [ 0 ] - s -> image_offset_x ; //<S2SV> dst = linel + ( x * pixelsize + compno * ! planar ) ; //<S2SV> if ( codsty -> transform == FF_DWT97 ) { //<S2SV> for ( ; x < w ; x += s -> cdx [ compno ] ) { //<S2SV> int val = lrintf ( * datap ) + ( 1 << ( cbps - 1 ) ) ; //<S2SV> val = av_clip ( val , 0 , ( 1 << cbps ) - 1 ) ; //<S2SV> * dst = val << ( 16 - cbps ) ; //<S2SV> datap ++ ; //<S2SV> dst += pixelsize ; //<S2SV> } //<S2SV> } else { //<S2SV> for ( ; x < w ; x += s -> cdx [ compno ] ) { //<S2SV> int val = * i_datap + ( 1 << ( cbps - 1 ) ) ; //<S2SV> val = av_clip ( val , 0 , ( 1 << cbps ) - 1 ) ; //<S2SV> * dst = val << ( 16 - cbps ) ; //<S2SV> i_datap ++ ; //<S2SV> dst += pixelsize ; //<S2SV> } //<S2SV> } //<S2SV> linel += picture -> linesize [ plane ] >> 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 