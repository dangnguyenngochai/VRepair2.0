void avcodec_align_dimensions2 ( AVCodecContext * s , int * width , int * height , //<S2SV> int linesize_align [ AV_NUM_DATA_POINTERS ] ) //<S2SV> { //<S2SV> int i ; //<S2SV> int w_align = 1 ; //<S2SV> int h_align = 1 ; //<S2SV> AVPixFmtDescriptor const * desc = av_pix_fmt_desc_get ( s -> pix_fmt ) ; //<S2SV> if ( desc ) { //<S2SV> w_align = 1 << desc -> log2_chroma_w ; //<S2SV> h_align = 1 << desc -> log2_chroma_h ; //<S2SV> } //<S2SV> switch ( s -> pix_fmt ) { //<S2SV> case AV_PIX_FMT_YUV420P : //<S2SV> case AV_PIX_FMT_YUYV422 : //<S2SV> case AV_PIX_FMT_YVYU422 : //<S2SV> case AV_PIX_FMT_UYVY422 : //<S2SV> case AV_PIX_FMT_YUV422P : //<S2SV> case AV_PIX_FMT_YUV440P : //<S2SV> case AV_PIX_FMT_YUV444P : //<S2SV> case AV_PIX_FMT_GBRP : //<S2SV> case AV_PIX_FMT_GBRAP : //<S2SV> case AV_PIX_FMT_GRAY8 : //<S2SV> case AV_PIX_FMT_GRAY16BE : //<S2SV> case AV_PIX_FMT_GRAY16LE : //<S2SV> case AV_PIX_FMT_YUVJ420P : //<S2SV> case AV_PIX_FMT_YUVJ422P : //<S2SV> case AV_PIX_FMT_YUVJ440P : //<S2SV> case AV_PIX_FMT_YUVJ444P : //<S2SV> case AV_PIX_FMT_YUVA420P : //<S2SV> case AV_PIX_FMT_YUVA422P : //<S2SV> case AV_PIX_FMT_YUVA444P : //<S2SV> case AV_PIX_FMT_YUV420P9LE : //<S2SV> case AV_PIX_FMT_YUV420P9BE : //<S2SV> case AV_PIX_FMT_YUV420P10LE : //<S2SV> case AV_PIX_FMT_YUV420P10BE : //<S2SV> case AV_PIX_FMT_YUV420P12LE : //<S2SV> case AV_PIX_FMT_YUV420P12BE : //<S2SV> case AV_PIX_FMT_YUV420P14LE : //<S2SV> case AV_PIX_FMT_YUV420P14BE : //<S2SV> case AV_PIX_FMT_YUV420P16LE : //<S2SV> case AV_PIX_FMT_YUV420P16BE : //<S2SV> case AV_PIX_FMT_YUVA420P9LE : //<S2SV> case AV_PIX_FMT_YUVA420P9BE : //<S2SV> case AV_PIX_FMT_YUVA420P10LE : //<S2SV> case AV_PIX_FMT_YUVA420P10BE : //<S2SV> case AV_PIX_FMT_YUVA420P16LE : //<S2SV> case AV_PIX_FMT_YUVA420P16BE : //<S2SV> case AV_PIX_FMT_YUV422P9LE : //<S2SV> case AV_PIX_FMT_YUV422P9BE : //<S2SV> case AV_PIX_FMT_YUV422P10LE : //<S2SV> case AV_PIX_FMT_YUV422P10BE : //<S2SV> case AV_PIX_FMT_YUV422P12LE : //<S2SV> case AV_PIX_FMT_YUV422P12BE : //<S2SV> case AV_PIX_FMT_YUV422P14LE : //<S2SV> case AV_PIX_FMT_YUV422P14BE : //<S2SV> case AV_PIX_FMT_YUV422P16LE : //<S2SV> case AV_PIX_FMT_YUV422P16BE : //<S2SV> case AV_PIX_FMT_YUVA422P9LE : //<S2SV> case AV_PIX_FMT_YUVA422P9BE : //<S2SV> case AV_PIX_FMT_YUVA422P10LE : //<S2SV> case AV_PIX_FMT_YUVA422P10BE : //<S2SV> case AV_PIX_FMT_YUVA422P16LE : //<S2SV> case AV_PIX_FMT_YUVA422P16BE : //<S2SV> case AV_PIX_FMT_YUV440P10LE : //<S2SV> case AV_PIX_FMT_YUV440P10BE : //<S2SV> case AV_PIX_FMT_YUV440P12LE : //<S2SV> case AV_PIX_FMT_YUV440P12BE : //<S2SV> case AV_PIX_FMT_YUV444P9LE : //<S2SV> case AV_PIX_FMT_YUV444P9BE : //<S2SV> case AV_PIX_FMT_YUV444P10LE : //<S2SV> case AV_PIX_FMT_YUV444P10BE : //<S2SV> case AV_PIX_FMT_YUV444P12LE : //<S2SV> case AV_PIX_FMT_YUV444P12BE : //<S2SV> case AV_PIX_FMT_YUV444P14LE : //<S2SV> case AV_PIX_FMT_YUV444P14BE : //<S2SV> case AV_PIX_FMT_YUV444P16LE : //<S2SV> case AV_PIX_FMT_YUV444P16BE : //<S2SV> case AV_PIX_FMT_YUVA444P9LE : //<S2SV> case AV_PIX_FMT_YUVA444P9BE : //<S2SV> case AV_PIX_FMT_YUVA444P10LE : //<S2SV> case AV_PIX_FMT_YUVA444P10BE : //<S2SV> case AV_PIX_FMT_YUVA444P16LE : //<S2SV> case AV_PIX_FMT_YUVA444P16BE : //<S2SV> case AV_PIX_FMT_GBRP9LE : //<S2SV> case AV_PIX_FMT_GBRP9BE : //<S2SV> case AV_PIX_FMT_GBRP10LE : //<S2SV> case AV_PIX_FMT_GBRP10BE : //<S2SV> case AV_PIX_FMT_GBRP12LE : //<S2SV> case AV_PIX_FMT_GBRP12BE : //<S2SV> case AV_PIX_FMT_GBRP14LE : //<S2SV> case AV_PIX_FMT_GBRP14BE : //<S2SV> case AV_PIX_FMT_GBRP16LE : //<S2SV> case AV_PIX_FMT_GBRP16BE : //<S2SV> case AV_PIX_FMT_GBRAP12LE : //<S2SV> case AV_PIX_FMT_GBRAP12BE : //<S2SV> case AV_PIX_FMT_GBRAP16LE : //<S2SV> case AV_PIX_FMT_GBRAP16BE : //<S2SV> w_align = 16 ; //<S2SV> h_align = 16 * 2 ; //<S2SV> break ; //<S2SV> case AV_PIX_FMT_YUV411P : //<S2SV> case AV_PIX_FMT_YUVJ411P : //<S2SV> case AV_PIX_FMT_UYYVYY411 : //<S2SV> w_align = 32 ; //<S2SV> h_align = 16 * 2 ; //<S2SV> break ; //<S2SV> case AV_PIX_FMT_YUV410P : //<S2SV> if ( s -> codec_id == AV_CODEC_ID_SVQ1 ) { //<S2SV> w_align = 64 ; //<S2SV> h_align = 64 ; //<S2SV> } //<S2SV> break ; //<S2SV> case AV_PIX_FMT_RGB555 : //<S2SV> if ( s -> codec_id == AV_CODEC_ID_RPZA ) { //<S2SV> w_align = 4 ; //<S2SV> h_align = 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case AV_PIX_FMT_PAL8 : //<S2SV> case AV_PIX_FMT_BGR8 : //<S2SV> case AV_PIX_FMT_RGB8 : //<S2SV> if ( s -> codec_id == AV_CODEC_ID_SMC || //<S2SV> s -> codec_id == AV_CODEC_ID_CINEPAK ) { //<S2SV> w_align = 4 ; //<S2SV> h_align = 4 ; //<S2SV> } //<S2SV> if ( s -> codec_id == AV_CODEC_ID_JV ) { //<S2SV> w_align = 8 ; //<S2SV> h_align = 8 ; //<S2SV> } //<S2SV> break ; //<S2SV> case AV_PIX_FMT_BGR24 : //<S2SV> if ( ( s -> codec_id == AV_CODEC_ID_MSZH ) || //<S2SV> ( s -> codec_id == AV_CODEC_ID_ZLIB ) ) { //<S2SV> w_align = 4 ; //<S2SV> h_align = 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> case AV_PIX_FMT_RGB24 : //<S2SV> if ( s -> codec_id == AV_CODEC_ID_CINEPAK ) { //<S2SV> w_align = 4 ; //<S2SV> h_align = 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> if ( s -> codec_id == AV_CODEC_ID_IFF_ILBM ) { //<S2SV> w_align = FFMAX ( w_align , 8 ) ; //<S2SV> } //<S2SV> * width = FFALIGN ( * width , w_align ) ; //<S2SV> * height = FFALIGN ( * height , h_align ) ; //<S2SV> if ( s -> codec_id == AV_CODEC_ID_H264 || s -> lowres ) { //<S2SV> * height += 2 ; //<S2SV> * width = FFMAX ( * width , 32 ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> linesize_align [ i ] = STRIDE_ALIGN ; //<S2SV> } //<S2SV> 