static int dnxhd_find_frame_end ( DNXHDParserContext * dctx , //<S2SV> const uint8_t * buf , int buf_size ) //<S2SV> { //<S2SV> ParseContext * pc = & dctx -> pc ; //<S2SV> uint64_t state = pc -> state64 ; //<S2SV> int pic_found = pc -> frame_start_found ; //<S2SV> int i = 0 ; //<S2SV> if ( ! pic_found ) { //<S2SV> for ( i = 0 ; i < buf_size ; i ++ ) { //<S2SV> state = ( state << 8 ) | buf [ i ] ; //<S2SV> if ( ff_dnxhd_check_header_prefix ( state & 0xffffffffff00LL ) != 0 ) { //<S2SV> i ++ ; //<S2SV> pic_found = 1 ; //<S2SV> dctx -> cur_byte = 0 ; //<S2SV> dctx -> remaining = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( pic_found && ! dctx -> remaining ) { //<S2SV> if ( ! buf_size ) //<S2SV> return 0 ; //<S2SV> for ( ; i < buf_size ; i ++ ) { //<S2SV> dctx -> cur_byte ++ ; //<S2SV> state = ( state << 8 ) | buf [ i ] ; //<S2SV> if ( dctx -> cur_byte == 24 ) { //<S2SV> dctx -> h = ( state >> 32 ) & 0xFFFF ; //<S2SV> } else if ( dctx -> cur_byte == 26 ) { //<S2SV> dctx -> w = ( state >> 32 ) & 0xFFFF ; //<S2SV> } else if ( dctx -> cur_byte == 42 ) { //<S2SV> int cid = ( state >> 32 ) & 0xFFFFFFFF ; //<S2SV> int remaining ; //<S2SV> if ( cid <= 0 ) //<S2SV> continue ; //<S2SV> remaining = avpriv_dnxhd_get_frame_size ( cid ) ; //<S2SV> if ( remaining <= 0 ) { //<S2SV> remaining = ff_dnxhd_get_hr_frame_size ( cid , dctx -> w , dctx -> h ) ; //<S2SV> if ( remaining <= 0 ) //<S2SV> continue ; //<S2SV> } //<S2SV> dctx -> remaining = remaining ; //<S2SV> if ( buf_size - i + 47 >= dctx -> remaining ) { //<S2SV> int remaining = dctx -> remaining ; //<S2SV> pc -> frame_start_found = 0 ; //<S2SV> pc -> state64 = - 1 ; //<S2SV> dctx -> cur_byte = 0 ; //<S2SV> dctx -> remaining = 0 ; //<S2SV> return remaining ; //<S2SV> } else { //<S2SV> dctx -> remaining -= buf_size ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } else if ( pic_found ) { //<S2SV> if ( dctx -> remaining > buf_size ) { //<S2SV> dctx -> remaining -= buf_size ; //<S2SV> } else { //<S2SV> int remaining = dctx -> remaining ; //<S2SV> pc -> frame_start_found = 0 ; //<S2SV> pc -> state64 = - 1 ; //<S2SV> dctx -> cur_byte = 0 ; //<S2SV> dctx -> remaining = 0 ; //<S2SV> return remaining ; //<S2SV> } //<S2SV> } //<S2SV> pc -> frame_start_found = pic_found ; //<S2SV> pc -> state64 = state ; //<S2SV> return END_NOT_FOUND ; //<S2SV> } //<S2SV> 