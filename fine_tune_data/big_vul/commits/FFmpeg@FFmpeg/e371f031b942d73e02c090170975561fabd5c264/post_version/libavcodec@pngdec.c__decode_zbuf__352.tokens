static int decode_zbuf ( AVBPrint * bp , const uint8_t * data , //<S2SV> const uint8_t * data_end ) //<S2SV> { //<S2SV> z_stream zstream ; //<S2SV> unsigned char * buf ; //<S2SV> unsigned buf_size ; //<S2SV> int ret ; //<S2SV> zstream . zalloc = ff_png_zalloc ; //<S2SV> zstream . zfree = ff_png_zfree ; //<S2SV> zstream . opaque = NULL ; //<S2SV> if ( inflateInit ( & zstream ) != Z_OK ) //<S2SV> return AVERROR_EXTERNAL ; //<S2SV> zstream . next_in = ( unsigned char * ) data ; //<S2SV> zstream . avail_in = data_end - data ; //<S2SV> av_bprint_init ( bp , 0 , - 1 ) ; //<S2SV> while ( zstream . avail_in > 0 ) { //<S2SV> av_bprint_get_buffer ( bp , 2 , & buf , & buf_size ) ; //<S2SV> if ( buf_size < 2 ) { //<S2SV> ret = AVERROR ( ENOMEM ) ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> zstream . next_out = buf ; //<S2SV> zstream . avail_out = buf_size - 1 ; //<S2SV> ret = inflate ( & zstream , Z_PARTIAL_FLUSH ) ; //<S2SV> if ( ret != Z_OK && ret != Z_STREAM_END ) { //<S2SV> ret = AVERROR_EXTERNAL ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> bp -> len += zstream . next_out - buf ; //<S2SV> if ( ret == Z_STREAM_END ) //<S2SV> break ; //<S2SV> } //<S2SV> inflateEnd ( & zstream ) ; //<S2SV> bp -> str [ bp -> len ] = 0 ; //<S2SV> return 0 ; //<S2SV> fail : //<S2SV> inflateEnd ( & zstream ) ; //<S2SV> av_bprint_finalize ( bp , NULL ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 