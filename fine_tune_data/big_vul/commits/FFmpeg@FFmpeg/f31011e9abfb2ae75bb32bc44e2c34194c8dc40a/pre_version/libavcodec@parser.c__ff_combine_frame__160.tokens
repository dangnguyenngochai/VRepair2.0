int ff_combine_frame ( ParseContext * pc , int next , const uint8_t * * buf , int * buf_size ) //<S2SV> { //<S2SV> if ( pc -> overread ) { //<S2SV> av_dlog ( NULL , "overread<S2SV_blank>%d,<S2SV_blank>state:%X<S2SV_blank>next:%d<S2SV_blank>index:%d<S2SV_blank>o_index:%d\\n" , //<S2SV> pc -> overread , pc -> state , next , pc -> index , pc -> overread_index ) ; //<S2SV> av_dlog ( NULL , "%X<S2SV_blank>%X<S2SV_blank>%X<S2SV_blank>%X\\n" , ( * buf ) [ 0 ] , ( * buf ) [ 1 ] , ( * buf ) [ 2 ] , ( * buf ) [ 3 ] ) ; //<S2SV> } //<S2SV> for ( ; pc -> overread > 0 ; pc -> overread -- ) { //<S2SV> pc -> buffer [ pc -> index ++ ] = pc -> buffer [ pc -> overread_index ++ ] ; //<S2SV> } //<S2SV> if ( ! * buf_size && next == END_NOT_FOUND ) { //<S2SV> next = 0 ; //<S2SV> } //<S2SV> pc -> last_index = pc -> index ; //<S2SV> if ( next == END_NOT_FOUND ) { //<S2SV> void * new_buffer = av_fast_realloc ( pc -> buffer , & pc -> buffer_size , ( * buf_size ) + pc -> index + FF_INPUT_BUFFER_PADDING_SIZE ) ; //<S2SV> if ( ! new_buffer ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> pc -> buffer = new_buffer ; //<S2SV> memcpy ( & pc -> buffer [ pc -> index ] , * buf , * buf_size ) ; //<S2SV> pc -> index += * buf_size ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> * buf_size = //<S2SV> pc -> overread_index = pc -> index + next ; //<S2SV> if ( pc -> index ) { //<S2SV> void * new_buffer = av_fast_realloc ( pc -> buffer , & pc -> buffer_size , next + pc -> index + FF_INPUT_BUFFER_PADDING_SIZE ) ; //<S2SV> if ( ! new_buffer ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> pc -> buffer = new_buffer ; //<S2SV> if ( next > - FF_INPUT_BUFFER_PADDING_SIZE ) //<S2SV> memcpy ( & pc -> buffer [ pc -> index ] , * buf , //<S2SV> next + FF_INPUT_BUFFER_PADDING_SIZE ) ; //<S2SV> pc -> index = 0 ; //<S2SV> * buf = pc -> buffer ; //<S2SV> } //<S2SV> for ( ; next < 0 ; next ++ ) { //<S2SV> pc -> state = ( pc -> state << 8 ) | pc -> buffer [ pc -> last_index + next ] ; //<S2SV> pc -> state64 = ( pc -> state64 << 8 ) | pc -> buffer [ pc -> last_index + next ] ; //<S2SV> pc -> overread ++ ; //<S2SV> } //<S2SV> if ( pc -> overread ) { //<S2SV> av_dlog ( NULL , "overread<S2SV_blank>%d,<S2SV_blank>state:%X<S2SV_blank>next:%d<S2SV_blank>index:%d<S2SV_blank>o_index:%d\\n" , //<S2SV> pc -> overread , pc -> state , next , pc -> index , pc -> overread_index ) ; //<S2SV> av_dlog ( NULL , "%X<S2SV_blank>%X<S2SV_blank>%X<S2SV_blank>%X\\n" , ( * buf ) [ 0 ] , ( * buf ) [ 1 ] , ( * buf ) [ 2 ] , ( * buf ) [ 3 ] ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 