static int get_cox ( Jpeg2000DecoderContext * s , Jpeg2000CodingStyle * c ) //<S2SV> { //<S2SV> uint8_t byte ; //<S2SV> if ( bytestream2_get_bytes_left ( & s -> g ) < 5 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> c -> nreslevels = bytestream2_get_byteu ( & s -> g ) + 1 ; //<S2SV> if ( c -> nreslevels >= JPEG2000_MAX_RESLEVELS ) { //<S2SV> av_log ( s -> avctx , AV_LOG_ERROR , "nreslevels<S2SV_blank>%d<S2SV_blank>is<S2SV_blank>invalid\\n" , c -> nreslevels ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> if ( c -> nreslevels < s -> reduction_factor ) //<S2SV> c -> nreslevels2decode = 1 ; //<S2SV> else //<S2SV> c -> nreslevels2decode = c -> nreslevels - s -> reduction_factor ; //<S2SV> c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; //<S2SV> c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; //<S2SV> if ( c -> log2_cblk_width > 10 || c -> log2_cblk_height > 10 || //<S2SV> c -> log2_cblk_width + c -> log2_cblk_height > 12 ) { //<S2SV> av_log ( s -> avctx , AV_LOG_ERROR , "cblk<S2SV_blank>size<S2SV_blank>invalid\\n" ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { //<S2SV> avpriv_request_sample ( s -> avctx , "cblk<S2SV_blank>size<S2SV_blank>><S2SV_blank>64" ) ; //<S2SV> return AVERROR_PATCHWELCOME ; //<S2SV> } //<S2SV> c -> cblk_style = bytestream2_get_byteu ( & s -> g ) ; //<S2SV> if ( c -> cblk_style != 0 ) { //<S2SV> av_log ( s -> avctx , AV_LOG_WARNING , "extra<S2SV_blank>cblk<S2SV_blank>styles<S2SV_blank>%X\\n" , c -> cblk_style ) ; //<S2SV> } //<S2SV> c -> transform = bytestream2_get_byteu ( & s -> g ) ; //<S2SV> if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) //<S2SV> c -> transform = FF_DWT97_INT ; //<S2SV> if ( c -> csty & JPEG2000_CSTY_PREC ) { //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < c -> nreslevels ; i ++ ) { //<S2SV> byte = bytestream2_get_byte ( & s -> g ) ; //<S2SV> c -> log2_prec_widths [ i ] = byte & 0x0F ; //<S2SV> c -> log2_prec_heights [ i ] = ( byte >> 4 ) & 0x0F ; //<S2SV> } //<S2SV> } else { //<S2SV> memset ( c -> log2_prec_widths , 15 , sizeof ( c -> log2_prec_widths ) ) ; //<S2SV> memset ( c -> log2_prec_heights , 15 , sizeof ( c -> log2_prec_heights ) ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 