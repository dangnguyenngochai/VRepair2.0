static uint32_t color_string_to_rgba ( const char * p , int len ) //<S2SV> { //<S2SV> uint32_t ret = 0xFF000000 ; //<S2SV> const ColorEntry * entry ; //<S2SV> char color_name [ 100 ] ; //<S2SV> len = FFMIN ( FFMAX ( len , 0 ) , sizeof ( color_name ) - 1 ) ; //<S2SV> if ( * p == '#' ) { //<S2SV> p ++ ; //<S2SV> len -- ; //<S2SV> if ( len == 3 ) { //<S2SV> ret |= ( hex_char_to_number ( p [ 2 ] ) << 4 ) | //<S2SV> ( hex_char_to_number ( p [ 1 ] ) << 12 ) | //<S2SV> ( hex_char_to_number ( p [ 0 ] ) << 20 ) ; //<S2SV> } else if ( len == 4 ) { //<S2SV> ret = ( hex_char_to_number ( p [ 3 ] ) << 4 ) | //<S2SV> ( hex_char_to_number ( p [ 2 ] ) << 12 ) | //<S2SV> ( hex_char_to_number ( p [ 1 ] ) << 20 ) | //<S2SV> ( hex_char_to_number ( p [ 0 ] ) << 28 ) ; //<S2SV> } else if ( len == 6 ) { //<S2SV> ret |= hex_char_to_number ( p [ 5 ] ) | //<S2SV> ( hex_char_to_number ( p [ 4 ] ) << 4 ) | //<S2SV> ( hex_char_to_number ( p [ 3 ] ) << 8 ) | //<S2SV> ( hex_char_to_number ( p [ 2 ] ) << 12 ) | //<S2SV> ( hex_char_to_number ( p [ 1 ] ) << 16 ) | //<S2SV> ( hex_char_to_number ( p [ 0 ] ) << 20 ) ; //<S2SV> } else if ( len == 8 ) { //<S2SV> ret = hex_char_to_number ( p [ 7 ] ) | //<S2SV> ( hex_char_to_number ( p [ 6 ] ) << 4 ) | //<S2SV> ( hex_char_to_number ( p [ 5 ] ) << 8 ) | //<S2SV> ( hex_char_to_number ( p [ 4 ] ) << 12 ) | //<S2SV> ( hex_char_to_number ( p [ 3 ] ) << 16 ) | //<S2SV> ( hex_char_to_number ( p [ 2 ] ) << 20 ) | //<S2SV> ( hex_char_to_number ( p [ 1 ] ) << 24 ) | //<S2SV> ( hex_char_to_number ( p [ 0 ] ) << 28 ) ; //<S2SV> } //<S2SV> } else { //<S2SV> strncpy ( color_name , p , len ) ; //<S2SV> color_name [ len ] = '\\0' ; //<S2SV> entry = bsearch ( color_name , //<S2SV> color_table , //<S2SV> FF_ARRAY_ELEMS ( color_table ) , //<S2SV> sizeof ( ColorEntry ) , //<S2SV> color_table_compare ) ; //<S2SV> if ( ! entry ) //<S2SV> return ret ; //<S2SV> ret = entry -> rgb_color ; //<S2SV> } //<S2SV> return ret ; //<S2SV> } //<S2SV> 