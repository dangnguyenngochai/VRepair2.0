static int xpm_decode_frame ( AVCodecContext * avctx , void * data , //<S2SV> int * got_frame , AVPacket * avpkt ) //<S2SV> { //<S2SV> XPMDecContext * x = avctx -> priv_data ; //<S2SV> AVFrame * p = data ; //<S2SV> const uint8_t * end , * ptr = avpkt -> data ; //<S2SV> int ncolors , cpp , ret , i , j ; //<S2SV> int64_t size ; //<S2SV> uint32_t * dst ; //<S2SV> avctx -> pix_fmt = AV_PIX_FMT_BGRA ; //<S2SV> end = avpkt -> data + avpkt -> size ; //<S2SV> while ( memcmp ( ptr , "/*<S2SV_blank>XPM<S2SV_blank>*/" , 9 ) && ptr < end - 9 ) //<S2SV> ptr ++ ; //<S2SV> if ( ptr >= end ) { //<S2SV> av_log ( avctx , AV_LOG_ERROR , "missing<S2SV_blank>signature\\n" ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> ptr += mod_strcspn ( ptr , "\\"" ) ; //<S2SV> if ( sscanf ( ptr , "\\"%u<S2SV_blank>%u<S2SV_blank>%u<S2SV_blank>%u\\"," , //<S2SV> & avctx -> width , & avctx -> height , & ncolors , & cpp ) != 4 ) { //<S2SV> av_log ( avctx , AV_LOG_ERROR , "missing<S2SV_blank>image<S2SV_blank>parameters\\n" ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> if ( ( ret = ff_set_dimensions ( avctx , avctx -> width , avctx -> height ) ) < 0 ) //<S2SV> return ret ; //<S2SV> if ( ( ret = ff_get_buffer ( avctx , p , 0 ) ) < 0 ) //<S2SV> return ret ; //<S2SV> if ( cpp <= 0 || cpp >= 5 ) { //<S2SV> av_log ( avctx , AV_LOG_ERROR , "unsupported/invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>chars<S2SV_blank>per<S2SV_blank>pixel:<S2SV_blank>%d\\n" , cpp ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> size = 1 ; //<S2SV> for ( i = 0 ; i < cpp ; i ++ ) //<S2SV> size *= 94 ; //<S2SV> if ( ncolors <= 0 || ncolors > size ) { //<S2SV> av_log ( avctx , AV_LOG_ERROR , "invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>colors:<S2SV_blank>%d\\n" , ncolors ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> size *= 4 ; //<S2SV> av_fast_padded_malloc ( & x -> pixels , & x -> pixels_size , size ) ; //<S2SV> if ( ! x -> pixels ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> ptr += mod_strcspn ( ptr , "," ) + 1 ; //<S2SV> for ( i = 0 ; i < ncolors ; i ++ ) { //<S2SV> const uint8_t * index ; //<S2SV> int len ; //<S2SV> ptr += mod_strcspn ( ptr , "\\"" ) + 1 ; //<S2SV> if ( ptr + cpp > end ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> index = ptr ; //<S2SV> ptr += cpp ; //<S2SV> ptr = strstr ( ptr , "c<S2SV_blank>" ) ; //<S2SV> if ( ptr ) { //<S2SV> ptr += 2 ; //<S2SV> } else { //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> len = strcspn ( ptr , "\\"<S2SV_blank>" ) ; //<S2SV> if ( ( ret = ascii2index ( index , cpp ) ) < 0 ) //<S2SV> return ret ; //<S2SV> x -> pixels [ ret ] = color_string_to_rgba ( ptr , len ) ; //<S2SV> ptr += mod_strcspn ( ptr , "," ) + 1 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < avctx -> height ; i ++ ) { //<S2SV> dst = ( uint32_t * ) ( p -> data [ 0 ] + i * p -> linesize [ 0 ] ) ; //<S2SV> ptr += mod_strcspn ( ptr , "\\"" ) + 1 ; //<S2SV> for ( j = 0 ; j < avctx -> width ; j ++ ) { //<S2SV> if ( ptr + cpp > end ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( ( ret = ascii2index ( ptr , cpp ) ) < 0 ) //<S2SV> return ret ; //<S2SV> * dst ++ = x -> pixels [ ret ] ; //<S2SV> ptr += cpp ; //<S2SV> } //<S2SV> ptr += mod_strcspn ( ptr , "," ) + 1 ; //<S2SV> } //<S2SV> p -> key_frame = 1 ; //<S2SV> p -> pict_type = AV_PICTURE_TYPE_I ; //<S2SV> * got_frame = 1 ; //<S2SV> return avpkt -> size ; //<S2SV> } //<S2SV> 