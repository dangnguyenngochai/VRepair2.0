static int decode_dds1 ( GetByteContext * gb , uint8_t * frame , int width , int height ) //<S2SV> { //<S2SV> const uint8_t * frame_start = frame ; //<S2SV> const uint8_t * frame_end = frame + width * height ; //<S2SV> int mask = 0x10000 , bitbuf = 0 ; //<S2SV> int i , v , offset , count , segments ; //<S2SV> segments = bytestream2_get_le16 ( gb ) ; //<S2SV> while ( segments -- ) { //<S2SV> if ( bytestream2_get_bytes_left ( gb ) < 2 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( mask == 0x10000 ) { //<S2SV> bitbuf = bytestream2_get_le16u ( gb ) ; //<S2SV> mask = 1 ; //<S2SV> } //<S2SV> if ( bitbuf & mask ) { //<S2SV> v = bytestream2_get_le16 ( gb ) ; //<S2SV> offset = ( v & 0x1FFF ) << 2 ; //<S2SV> count = ( ( v >> 13 ) + 2 ) << 1 ; //<S2SV> if ( frame - frame_start < offset || frame_end - frame < count * 2 + width ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> for ( i = 0 ; i < count ; i ++ ) { //<S2SV> frame [ 0 ] = frame [ 1 ] = //<S2SV> frame [ width ] = frame [ width + 1 ] = frame [ - offset ] ; //<S2SV> frame += 2 ; //<S2SV> } //<S2SV> } else if ( bitbuf & ( mask << 1 ) ) { //<S2SV> v = bytestream2_get_le16 ( gb ) * 2 ; //<S2SV> if ( frame - frame_end < v ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> frame += v ; //<S2SV> } else { //<S2SV> if ( frame_end - frame < width + 4 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> frame [ 0 ] = frame [ 1 ] = //<S2SV> frame [ width ] = frame [ width + 1 ] = bytestream2_get_byte ( gb ) ; //<S2SV> frame += 2 ; //<S2SV> frame [ 0 ] = frame [ 1 ] = //<S2SV> frame [ width ] = frame [ width + 1 ] = bytestream2_get_byte ( gb ) ; //<S2SV> frame += 2 ; //<S2SV> } //<S2SV> mask <<= 2 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 