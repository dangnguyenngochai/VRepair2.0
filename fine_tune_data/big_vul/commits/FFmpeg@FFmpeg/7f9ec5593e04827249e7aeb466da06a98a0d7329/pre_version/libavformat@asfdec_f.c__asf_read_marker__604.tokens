static int asf_read_marker ( AVFormatContext * s , int64_t size ) //<S2SV> { //<S2SV> AVIOContext * pb = s -> pb ; //<S2SV> ASFContext * asf = s -> priv_data ; //<S2SV> int i , count , name_len , ret ; //<S2SV> char name [ 1024 ] ; //<S2SV> avio_rl64 ( pb ) ; //<S2SV> avio_rl64 ( pb ) ; //<S2SV> count = avio_rl32 ( pb ) ; //<S2SV> avio_rl16 ( pb ) ; //<S2SV> name_len = avio_rl16 ( pb ) ; //<S2SV> for ( i = 0 ; i < name_len ; i ++ ) //<S2SV> avio_r8 ( pb ) ; //<S2SV> for ( i = 0 ; i < count ; i ++ ) { //<S2SV> int64_t pres_time ; //<S2SV> int name_len ; //<S2SV> avio_rl64 ( pb ) ; //<S2SV> pres_time = avio_rl64 ( pb ) ; //<S2SV> pres_time -= asf -> hdr . preroll * 10000 ; //<S2SV> avio_rl16 ( pb ) ; //<S2SV> avio_rl32 ( pb ) ; //<S2SV> avio_rl32 ( pb ) ; //<S2SV> name_len = avio_rl32 ( pb ) ; //<S2SV> if ( ( ret = avio_get_str16le ( pb , name_len * 2 , name , //<S2SV> sizeof ( name ) ) ) < name_len ) //<S2SV> avio_skip ( pb , name_len - ret ) ; //<S2SV> avpriv_new_chapter ( s , i , ( AVRational ) { 1 , 10000000 } , pres_time , //<S2SV> AV_NOPTS_VALUE , name ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 