static int decompress_i ( AVCodecContext * avctx , uint32_t * dst , int linesize ) //<S2SV> { //<S2SV> SCPRContext * s = avctx -> priv_data ; //<S2SV> GetByteContext * gb = & s -> gb ; //<S2SV> int cx = 0 , cx1 = 0 , k = 0 , clr = 0 ; //<S2SV> int run , r , g , b , off , y = 0 , x = 0 , z , ret ; //<S2SV> unsigned backstep = linesize - avctx -> width ; //<S2SV> const int cxshift = s -> cxshift ; //<S2SV> unsigned lx , ly , ptype ; //<S2SV> reinit_tables ( s ) ; //<S2SV> bytestream2_skip ( gb , 2 ) ; //<S2SV> init_rangecoder ( & s -> rc , gb ) ; //<S2SV> while ( k < avctx -> width + 1 ) { //<S2SV> ret = decode_unit ( s , & s -> pixel_model [ 0 ] [ cx + cx1 ] , 400 , & r ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> cx1 = ( cx << 6 ) & 0xFC0 ; //<S2SV> cx = r >> cxshift ; //<S2SV> ret = decode_unit ( s , & s -> pixel_model [ 1 ] [ cx + cx1 ] , 400 , & g ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> cx1 = ( cx << 6 ) & 0xFC0 ; //<S2SV> cx = g >> cxshift ; //<S2SV> ret = decode_unit ( s , & s -> pixel_model [ 2 ] [ cx + cx1 ] , 400 , & b ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> cx1 = ( cx << 6 ) & 0xFC0 ; //<S2SV> cx = b >> cxshift ; //<S2SV> ret = decode_value ( s , s -> run_model [ 0 ] , 256 , 400 , & run ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> clr = ( b << 16 ) + ( g << 8 ) + r ; //<S2SV> k += run ; //<S2SV> while ( run -- > 0 ) { //<S2SV> dst [ y * linesize + x ] = clr ; //<S2SV> lx = x ; //<S2SV> ly = y ; //<S2SV> x ++ ; //<S2SV> if ( x >= avctx -> width ) { //<S2SV> x = 0 ; //<S2SV> y ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> off = - linesize - 1 ; //<S2SV> ptype = 0 ; //<S2SV> while ( x < avctx -> width && y < avctx -> height ) { //<S2SV> ret = decode_value ( s , s -> op_model [ ptype ] , 6 , 1000 , & ptype ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> if ( ptype == 0 ) { //<S2SV> ret = decode_unit ( s , & s -> pixel_model [ 0 ] [ cx + cx1 ] , 400 , & r ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> cx1 = ( cx << 6 ) & 0xFC0 ; //<S2SV> cx = r >> cxshift ; //<S2SV> ret = decode_unit ( s , & s -> pixel_model [ 1 ] [ cx + cx1 ] , 400 , & g ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> cx1 = ( cx << 6 ) & 0xFC0 ; //<S2SV> cx = g >> cxshift ; //<S2SV> ret = decode_unit ( s , & s -> pixel_model [ 2 ] [ cx + cx1 ] , 400 , & b ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> clr = ( b << 16 ) + ( g << 8 ) + r ; //<S2SV> } //<S2SV> if ( ptype > 5 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> ret = decode_value ( s , s -> run_model [ ptype ] , 256 , 400 , & run ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> switch ( ptype ) { //<S2SV> case 0 : //<S2SV> while ( run -- > 0 ) { //<S2SV> if ( y >= avctx -> height ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> dst [ y * linesize + x ] = clr ; //<S2SV> lx = x ; //<S2SV> ly = y ; //<S2SV> x ++ ; //<S2SV> if ( x >= avctx -> width ) { //<S2SV> x = 0 ; //<S2SV> y ++ ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 1 : //<S2SV> while ( run -- > 0 ) { //<S2SV> if ( y >= avctx -> height ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> dst [ y * linesize + x ] = dst [ ly * linesize + lx ] ; //<S2SV> lx = x ; //<S2SV> ly = y ; //<S2SV> x ++ ; //<S2SV> if ( x >= avctx -> width ) { //<S2SV> x = 0 ; //<S2SV> y ++ ; //<S2SV> } //<S2SV> } //<S2SV> clr = dst [ ly * linesize + lx ] ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> while ( run -- > 0 ) { //<S2SV> if ( y < 1 || y >= avctx -> height ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> clr = dst [ y * linesize + x + off + 1 ] ; //<S2SV> dst [ y * linesize + x ] = clr ; //<S2SV> lx = x ; //<S2SV> ly = y ; //<S2SV> x ++ ; //<S2SV> if ( x >= avctx -> width ) { //<S2SV> x = 0 ; //<S2SV> y ++ ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 4 : //<S2SV> while ( run -- > 0 ) { //<S2SV> uint8_t * odst = ( uint8_t * ) dst ; //<S2SV> if ( y < 1 || y >= avctx -> height || //<S2SV> ( y == 1 && x == 0 ) ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( x == 0 ) { //<S2SV> z = backstep ; //<S2SV> } else { //<S2SV> z = 0 ; //<S2SV> } //<S2SV> r = odst [ ( ly * linesize + lx ) * 4 ] + //<S2SV> odst [ ( ( y * linesize + x ) + off - z ) * 4 + 4 ] - //<S2SV> odst [ ( ( y * linesize + x ) + off - z ) * 4 ] ; //<S2SV> g = odst [ ( ly * linesize + lx ) * 4 + 1 ] + //<S2SV> odst [ ( ( y * linesize + x ) + off - z ) * 4 + 5 ] - //<S2SV> odst [ ( ( y * linesize + x ) + off - z ) * 4 + 1 ] ; //<S2SV> b = odst [ ( ly * linesize + lx ) * 4 + 2 ] + //<S2SV> odst [ ( ( y * linesize + x ) + off - z ) * 4 + 6 ] - //<S2SV> odst [ ( ( y * linesize + x ) + off - z ) * 4 + 2 ] ; //<S2SV> clr = ( ( b & 0xFF ) << 16 ) + ( ( g & 0xFF ) << 8 ) + ( r & 0xFF ) ; //<S2SV> dst [ y * linesize + x ] = clr ; //<S2SV> lx = x ; //<S2SV> ly = y ; //<S2SV> x ++ ; //<S2SV> if ( x >= avctx -> width ) { //<S2SV> x = 0 ; //<S2SV> y ++ ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 5 : //<S2SV> while ( run -- > 0 ) { //<S2SV> if ( y < 1 || y >= avctx -> height || //<S2SV> ( y == 1 && x == 0 ) ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( x == 0 ) { //<S2SV> z = backstep ; //<S2SV> } else { //<S2SV> z = 0 ; //<S2SV> } //<S2SV> clr = dst [ y * linesize + x + off - z ] ; //<S2SV> dst [ y * linesize + x ] = clr ; //<S2SV> lx = x ; //<S2SV> ly = y ; //<S2SV> x ++ ; //<S2SV> if ( x >= avctx -> width ) { //<S2SV> x = 0 ; //<S2SV> y ++ ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> if ( avctx -> bits_per_coded_sample == 16 ) { //<S2SV> cx1 = ( clr & 0x3F00 ) >> 2 ; //<S2SV> cx = ( clr & 0xFFFFFF ) >> 16 ; //<S2SV> } else { //<S2SV> cx1 = ( clr & 0xFC00 ) >> 4 ; //<S2SV> cx = ( clr & 0xFFFFFF ) >> 18 ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 