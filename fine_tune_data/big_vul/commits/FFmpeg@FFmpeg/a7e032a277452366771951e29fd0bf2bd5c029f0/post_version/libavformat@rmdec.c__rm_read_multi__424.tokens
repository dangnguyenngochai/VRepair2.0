static int rm_read_multi ( AVFormatContext * s , AVIOContext * pb , //<S2SV> AVStream * st , char * mime ) //<S2SV> { //<S2SV> int number_of_streams = avio_rb16 ( pb ) ; //<S2SV> int number_of_mdpr ; //<S2SV> int i , ret ; //<S2SV> unsigned size2 ; //<S2SV> for ( i = 0 ; i < number_of_streams ; i ++ ) //<S2SV> avio_rb16 ( pb ) ; //<S2SV> number_of_mdpr = avio_rb16 ( pb ) ; //<S2SV> if ( number_of_mdpr != 1 ) { //<S2SV> avpriv_request_sample ( s , "MLTI<S2SV_blank>with<S2SV_blank>multiple<S2SV_blank>(%d)<S2SV_blank>MDPR" , number_of_mdpr ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < number_of_mdpr ; i ++ ) { //<S2SV> AVStream * st2 ; //<S2SV> if ( i > 0 ) { //<S2SV> st2 = avformat_new_stream ( s , NULL ) ; //<S2SV> if ( ! st2 ) { //<S2SV> ret = AVERROR ( ENOMEM ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> st2 -> id = st -> id + ( i << 16 ) ; //<S2SV> st2 -> codecpar -> bit_rate = st -> codecpar -> bit_rate ; //<S2SV> st2 -> start_time = st -> start_time ; //<S2SV> st2 -> duration = st -> duration ; //<S2SV> st2 -> codecpar -> codec_type = AVMEDIA_TYPE_DATA ; //<S2SV> st2 -> priv_data = ff_rm_alloc_rmstream ( ) ; //<S2SV> if ( ! st2 -> priv_data ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } else //<S2SV> st2 = st ; //<S2SV> size2 = avio_rb32 ( pb ) ; //<S2SV> ret = ff_rm_read_mdpr_codecdata ( s , s -> pb , st2 , st2 -> priv_data , //<S2SV> size2 , NULL ) ; //<S2SV> if ( ret < 0 ) //<S2SV> return ret ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 