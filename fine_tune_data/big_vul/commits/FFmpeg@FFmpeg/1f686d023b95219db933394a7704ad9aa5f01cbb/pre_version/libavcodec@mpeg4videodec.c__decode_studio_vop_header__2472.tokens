static int decode_studio_vop_header ( Mpeg4DecContext * ctx , GetBitContext * gb ) //<S2SV> { //<S2SV> MpegEncContext * s = & ctx -> m ; //<S2SV> if ( get_bits_left ( gb ) <= 32 ) //<S2SV> return 0 ; //<S2SV> s -> partitioned_frame = 0 ; //<S2SV> s -> decode_mb = mpeg4_decode_studio_mb ; //<S2SV> decode_smpte_tc ( ctx , gb ) ; //<S2SV> skip_bits ( gb , 10 ) ; //<S2SV> skip_bits ( gb , 2 ) ; //<S2SV> s -> pict_type = get_bits ( gb , 2 ) + AV_PICTURE_TYPE_I ; //<S2SV> if ( get_bits1 ( gb ) ) { //<S2SV> skip_bits1 ( gb ) ; //<S2SV> skip_bits1 ( gb ) ; //<S2SV> s -> progressive_frame = get_bits1 ( gb ) ^ 1 ; //<S2SV> } //<S2SV> if ( s -> pict_type == AV_PICTURE_TYPE_I ) { //<S2SV> if ( get_bits1 ( gb ) ) //<S2SV> reset_studio_dc_predictors ( s ) ; //<S2SV> } //<S2SV> if ( ctx -> shape != BIN_ONLY_SHAPE ) { //<S2SV> s -> alternate_scan = get_bits1 ( gb ) ; //<S2SV> s -> frame_pred_frame_dct = get_bits1 ( gb ) ; //<S2SV> s -> dct_precision = get_bits ( gb , 2 ) ; //<S2SV> s -> intra_dc_precision = get_bits ( gb , 2 ) ; //<S2SV> s -> q_scale_type = get_bits1 ( gb ) ; //<S2SV> } //<S2SV> if ( s -> alternate_scan ) { //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> inter_scantable , ff_alternate_vertical_scan ) ; //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> intra_scantable , ff_alternate_vertical_scan ) ; //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> intra_h_scantable , ff_alternate_vertical_scan ) ; //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> intra_v_scantable , ff_alternate_vertical_scan ) ; //<S2SV> } else { //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> inter_scantable , ff_zigzag_direct ) ; //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> intra_scantable , ff_zigzag_direct ) ; //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> intra_h_scantable , ff_alternate_horizontal_scan ) ; //<S2SV> ff_init_scantable ( s -> idsp . idct_permutation , & s -> intra_v_scantable , ff_alternate_vertical_scan ) ; //<S2SV> } //<S2SV> mpeg4_load_default_matrices ( s ) ; //<S2SV> next_start_code_studio ( gb ) ; //<S2SV> extension_and_user_data ( s , gb , 4 ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 