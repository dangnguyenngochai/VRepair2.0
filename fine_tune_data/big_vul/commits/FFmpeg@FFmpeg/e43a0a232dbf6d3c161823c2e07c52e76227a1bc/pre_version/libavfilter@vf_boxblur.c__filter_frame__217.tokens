static int filter_frame ( AVFilterLink * inlink , AVFrame * in ) //<S2SV> { //<S2SV> AVFilterContext * ctx = inlink -> dst ; //<S2SV> BoxBlurContext * s = ctx -> priv ; //<S2SV> AVFilterLink * outlink = inlink -> dst -> outputs [ 0 ] ; //<S2SV> AVFrame * out ; //<S2SV> int plane ; //<S2SV> int cw = FF_CEIL_RSHIFT ( inlink -> w , s -> hsub ) , ch = FF_CEIL_RSHIFT ( in -> height , s -> vsub ) ; //<S2SV> int w [ 4 ] = { inlink -> w , cw , cw , inlink -> w } ; //<S2SV> int h [ 4 ] = { in -> height , ch , ch , in -> height } ; //<S2SV> out = ff_get_video_buffer ( outlink , outlink -> w , outlink -> h ) ; //<S2SV> if ( ! out ) { //<S2SV> av_frame_free ( & in ) ; //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } //<S2SV> av_frame_copy_props ( out , in ) ; //<S2SV> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) //<S2SV> hblur ( out -> data [ plane ] , out -> linesize [ plane ] , //<S2SV> in -> data [ plane ] , in -> linesize [ plane ] , //<S2SV> w [ plane ] , h [ plane ] , s -> radius [ plane ] , s -> power [ plane ] , //<S2SV> s -> temp ) ; //<S2SV> for ( plane = 0 ; in -> data [ plane ] && plane < 4 ; plane ++ ) //<S2SV> vblur ( out -> data [ plane ] , out -> linesize [ plane ] , //<S2SV> out -> data [ plane ] , out -> linesize [ plane ] , //<S2SV> w [ plane ] , h [ plane ] , s -> radius [ plane ] , s -> power [ plane ] , //<S2SV> s -> temp ) ; //<S2SV> av_frame_free ( & in ) ; //<S2SV> return ff_filter_frame ( outlink , out ) ; //<S2SV> } //<S2SV> 