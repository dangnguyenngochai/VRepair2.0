static int filter_frame ( AVFilterLink * inlink , AVFrame * frame ) //<S2SV> { //<S2SV> AVFilterContext * ctx = inlink -> dst ; //<S2SV> const AVPixFmtDescriptor * desc = av_pix_fmt_desc_get ( inlink -> format ) ; //<S2SV> uint32_t plane_checksum [ 4 ] = { 0 } , checksum = 0 ; //<S2SV> int i , plane , vsub = desc -> log2_chroma_h ; //<S2SV> for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { //<S2SV> int64_t linesize = av_image_get_linesize ( frame -> format , frame -> width , plane ) ; //<S2SV> uint8_t * data = frame -> data [ plane ] ; //<S2SV> int h = plane == 1 || plane == 2 ? FF_CEIL_RSHIFT ( inlink -> h , vsub ) : inlink -> h ; //<S2SV> if ( linesize < 0 ) //<S2SV> return linesize ; //<S2SV> for ( i = 0 ; i < h ; i ++ ) { //<S2SV> plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ] , data , linesize ) ; //<S2SV> checksum = av_adler32_update ( checksum , data , linesize ) ; //<S2SV> data += frame -> linesize [ plane ] ; //<S2SV> } //<S2SV> } //<S2SV> av_log ( ctx , AV_LOG_INFO , //<S2SV> "n:%" PRId64 "<S2SV_blank>pts:%s<S2SV_blank>pts_time:%s<S2SV_blank>pos:%" PRId64 "<S2SV_blank>" //<S2SV> "fmt:%s<S2SV_blank>sar:%d/%d<S2SV_blank>s:%dx%d<S2SV_blank>i:%c<S2SV_blank>iskey:%d<S2SV_blank>type:%c<S2SV_blank>" //<S2SV> "checksum:%08X<S2SV_blank>plane_checksum:[%08X" , //<S2SV> inlink -> frame_count , //<S2SV> av_ts2str ( frame -> pts ) , av_ts2timestr ( frame -> pts , & inlink -> time_base ) , av_frame_get_pkt_pos ( frame ) , //<S2SV> desc -> name , //<S2SV> frame -> sample_aspect_ratio . num , frame -> sample_aspect_ratio . den , //<S2SV> frame -> width , frame -> height , //<S2SV> ! frame -> interlaced_frame ? 'P' : //<S2SV> frame -> top_field_first ? 'T' : 'B' , //<S2SV> frame -> key_frame , //<S2SV> av_get_picture_type_char ( frame -> pict_type ) , //<S2SV> checksum , plane_checksum [ 0 ] ) ; //<S2SV> for ( plane = 1 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) //<S2SV> av_log ( ctx , AV_LOG_INFO , "<S2SV_blank>%08X" , plane_checksum [ plane ] ) ; //<S2SV> av_log ( ctx , AV_LOG_INFO , "]\\n" ) ; //<S2SV> return ff_filter_frame ( inlink -> dst -> outputs [ 0 ] , frame ) ; //<S2SV> } //<S2SV> 