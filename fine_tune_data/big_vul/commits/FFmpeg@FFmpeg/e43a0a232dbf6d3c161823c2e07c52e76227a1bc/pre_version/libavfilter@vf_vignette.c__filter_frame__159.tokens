static int filter_frame ( AVFilterLink * inlink , AVFrame * in ) //<S2SV> { //<S2SV> unsigned x , y ; //<S2SV> AVFilterContext * ctx = inlink -> dst ; //<S2SV> VignetteContext * s = ctx -> priv ; //<S2SV> AVFilterLink * outlink = inlink -> dst -> outputs [ 0 ] ; //<S2SV> AVFrame * out ; //<S2SV> out = ff_get_video_buffer ( outlink , outlink -> w , outlink -> h ) ; //<S2SV> if ( ! out ) { //<S2SV> av_frame_free ( & in ) ; //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } //<S2SV> av_frame_copy_props ( out , in ) ; //<S2SV> if ( s -> eval_mode == EVAL_MODE_FRAME ) //<S2SV> update_context ( s , inlink , in ) ; //<S2SV> if ( s -> desc -> flags & AV_PIX_FMT_FLAG_RGB ) { //<S2SV> uint8_t * dst = out -> data [ 0 ] ; //<S2SV> const uint8_t * src = in -> data [ 0 ] ; //<S2SV> const float * fmap = s -> fmap ; //<S2SV> const int dst_linesize = out -> linesize [ 0 ] ; //<S2SV> const int src_linesize = in -> linesize [ 0 ] ; //<S2SV> const int fmap_linesize = s -> fmap_linesize ; //<S2SV> for ( y = 0 ; y < inlink -> h ; y ++ ) { //<S2SV> uint8_t * dstp = dst ; //<S2SV> const uint8_t * srcp = src ; //<S2SV> for ( x = 0 ; x < inlink -> w ; x ++ , dstp += 3 , srcp += 3 ) { //<S2SV> const float f = fmap [ x ] ; //<S2SV> dstp [ 0 ] = av_clip_uint8 ( srcp [ 0 ] * f + get_dither_value ( s ) ) ; //<S2SV> dstp [ 1 ] = av_clip_uint8 ( srcp [ 1 ] * f + get_dither_value ( s ) ) ; //<S2SV> dstp [ 2 ] = av_clip_uint8 ( srcp [ 2 ] * f + get_dither_value ( s ) ) ; //<S2SV> } //<S2SV> dst += dst_linesize ; //<S2SV> src += src_linesize ; //<S2SV> fmap += fmap_linesize ; //<S2SV> } //<S2SV> } else { //<S2SV> int plane ; //<S2SV> for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { //<S2SV> uint8_t * dst = out -> data [ plane ] ; //<S2SV> const uint8_t * src = in -> data [ plane ] ; //<S2SV> const float * fmap = s -> fmap ; //<S2SV> const int dst_linesize = out -> linesize [ plane ] ; //<S2SV> const int src_linesize = in -> linesize [ plane ] ; //<S2SV> const int fmap_linesize = s -> fmap_linesize ; //<S2SV> const int chroma = plane == 1 || plane == 2 ; //<S2SV> const int hsub = chroma ? s -> desc -> log2_chroma_w : 0 ; //<S2SV> const int vsub = chroma ? s -> desc -> log2_chroma_h : 0 ; //<S2SV> const int w = FF_CEIL_RSHIFT ( inlink -> w , hsub ) ; //<S2SV> const int h = FF_CEIL_RSHIFT ( inlink -> h , vsub ) ; //<S2SV> for ( y = 0 ; y < h ; y ++ ) { //<S2SV> uint8_t * dstp = dst ; //<S2SV> const uint8_t * srcp = src ; //<S2SV> for ( x = 0 ; x < w ; x ++ ) { //<S2SV> const double dv = get_dither_value ( s ) ; //<S2SV> if ( chroma ) * dstp ++ = av_clip_uint8 ( fmap [ x << hsub ] * ( * srcp ++ - 127 ) + 127 + dv ) ; //<S2SV> else * dstp ++ = av_clip_uint8 ( fmap [ x ] * * srcp ++ + dv ) ; //<S2SV> } //<S2SV> dst += dst_linesize ; //<S2SV> src += src_linesize ; //<S2SV> fmap += fmap_linesize << vsub ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return ff_filter_frame ( outlink , out ) ; //<S2SV> } //<S2SV> 