static int filter_frame ( AVFilterLink * inlink , AVFrame * in ) //<S2SV> { //<S2SV> PadContext * s = inlink -> dst -> priv ; //<S2SV> AVFrame * out ; //<S2SV> int needs_copy = frame_needs_copy ( s , in ) ; //<S2SV> if ( needs_copy ) { //<S2SV> av_log ( inlink -> dst , AV_LOG_DEBUG , "Direct<S2SV_blank>padding<S2SV_blank>impossible<S2SV_blank>allocating<S2SV_blank>new<S2SV_blank>frame\\n" ) ; //<S2SV> out = ff_get_video_buffer ( inlink -> dst -> outputs [ 0 ] , //<S2SV> FFMAX ( inlink -> w , s -> w ) , //<S2SV> FFMAX ( inlink -> h , s -> h ) ) ; //<S2SV> if ( ! out ) { //<S2SV> av_frame_free ( & in ) ; //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } //<S2SV> av_frame_copy_props ( out , in ) ; //<S2SV> } else { //<S2SV> int i ; //<S2SV> out = in ; //<S2SV> for ( i = 0 ; i < 4 && out -> data [ i ] ; i ++ ) { //<S2SV> int hsub = s -> draw . hsub [ i ] ; //<S2SV> int vsub = s -> draw . vsub [ i ] ; //<S2SV> out -> data [ i ] -= ( s -> x >> hsub ) * s -> draw . pixelstep [ i ] + //<S2SV> ( s -> y >> vsub ) * out -> linesize [ i ] ; //<S2SV> } //<S2SV> } //<S2SV> if ( s -> y ) { //<S2SV> ff_fill_rectangle ( & s -> draw , & s -> color , //<S2SV> out -> data , out -> linesize , //<S2SV> 0 , 0 , s -> w , s -> y ) ; //<S2SV> } //<S2SV> if ( s -> h > s -> y + s -> in_h ) { //<S2SV> ff_fill_rectangle ( & s -> draw , & s -> color , //<S2SV> out -> data , out -> linesize , //<S2SV> 0 , s -> y + s -> in_h , s -> w , s -> h - s -> y - s -> in_h ) ; //<S2SV> } //<S2SV> ff_fill_rectangle ( & s -> draw , & s -> color , out -> data , out -> linesize , //<S2SV> 0 , s -> y , s -> x , in -> height ) ; //<S2SV> if ( needs_copy ) { //<S2SV> ff_copy_rectangle2 ( & s -> draw , //<S2SV> out -> data , out -> linesize , in -> data , in -> linesize , //<S2SV> s -> x , s -> y , 0 , 0 , in -> width , in -> height ) ; //<S2SV> } //<S2SV> ff_fill_rectangle ( & s -> draw , & s -> color , out -> data , out -> linesize , //<S2SV> s -> x + s -> in_w , s -> y , s -> w - s -> x - s -> in_w , //<S2SV> in -> height ) ; //<S2SV> out -> width = s -> w ; //<S2SV> out -> height = s -> h ; //<S2SV> if ( in != out ) //<S2SV> av_frame_free ( & in ) ; //<S2SV> return ff_filter_frame ( inlink -> dst -> outputs [ 0 ] , out ) ; //<S2SV> } //<S2SV> 