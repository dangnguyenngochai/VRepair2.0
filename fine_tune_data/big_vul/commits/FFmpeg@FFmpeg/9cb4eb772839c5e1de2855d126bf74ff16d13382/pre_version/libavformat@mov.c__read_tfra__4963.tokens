static int read_tfra ( MOVContext * mov , AVIOContext * f ) //<S2SV> { //<S2SV> MOVFragmentIndex * index = NULL ; //<S2SV> int version , fieldlength , i , j ; //<S2SV> int64_t pos = avio_tell ( f ) ; //<S2SV> uint32_t size = avio_rb32 ( f ) ; //<S2SV> void * tmp ; //<S2SV> if ( avio_rb32 ( f ) != MKBETAG ( 't' , 'f' , 'r' , 'a' ) ) { //<S2SV> return 1 ; //<S2SV> } //<S2SV> av_log ( mov -> fc , AV_LOG_VERBOSE , "found<S2SV_blank>tfra\\n" ) ; //<S2SV> index = av_mallocz ( sizeof ( MOVFragmentIndex ) ) ; //<S2SV> if ( ! index ) { //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } //<S2SV> tmp = av_realloc_array ( mov -> fragment_index_data , //<S2SV> mov -> fragment_index_count + 1 , //<S2SV> sizeof ( MOVFragmentIndex * ) ) ; //<S2SV> if ( ! tmp ) { //<S2SV> av_freep ( & index ) ; //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } //<S2SV> mov -> fragment_index_data = tmp ; //<S2SV> mov -> fragment_index_data [ mov -> fragment_index_count ++ ] = index ; //<S2SV> version = avio_r8 ( f ) ; //<S2SV> avio_rb24 ( f ) ; //<S2SV> index -> track_id = avio_rb32 ( f ) ; //<S2SV> fieldlength = avio_rb32 ( f ) ; //<S2SV> index -> item_count = avio_rb32 ( f ) ; //<S2SV> index -> items = av_mallocz_array ( //<S2SV> index -> item_count , sizeof ( MOVFragmentIndexItem ) ) ; //<S2SV> if ( ! index -> items ) { //<S2SV> index -> item_count = 0 ; //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < index -> item_count ; i ++ ) { //<S2SV> int64_t time , offset ; //<S2SV> if ( version == 1 ) { //<S2SV> time = avio_rb64 ( f ) ; //<S2SV> offset = avio_rb64 ( f ) ; //<S2SV> } else { //<S2SV> time = avio_rb32 ( f ) ; //<S2SV> offset = avio_rb32 ( f ) ; //<S2SV> } //<S2SV> index -> items [ i ] . time = time ; //<S2SV> index -> items [ i ] . moof_offset = offset ; //<S2SV> for ( j = 0 ; j < ( ( fieldlength >> 4 ) & 3 ) + 1 ; j ++ ) //<S2SV> avio_r8 ( f ) ; //<S2SV> for ( j = 0 ; j < ( ( fieldlength >> 2 ) & 3 ) + 1 ; j ++ ) //<S2SV> avio_r8 ( f ) ; //<S2SV> for ( j = 0 ; j < ( ( fieldlength >> 0 ) & 3 ) + 1 ; j ++ ) //<S2SV> avio_r8 ( f ) ; //<S2SV> } //<S2SV> avio_seek ( f , pos + size , SEEK_SET ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 