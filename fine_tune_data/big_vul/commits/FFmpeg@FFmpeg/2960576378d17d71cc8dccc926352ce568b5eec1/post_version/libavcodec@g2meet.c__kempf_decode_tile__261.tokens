static int kempf_decode_tile ( G2MContext * c , int tile_x , int tile_y , //<S2SV> const uint8_t * src , int src_size ) //<S2SV> { //<S2SV> int width , height ; //<S2SV> int hdr , zsize , npal , tidx = - 1 , ret ; //<S2SV> int i , j ; //<S2SV> const uint8_t * src_end = src + src_size ; //<S2SV> uint8_t pal [ 768 ] , transp [ 3 ] ; //<S2SV> uLongf dlen = ( c -> tile_width + 1 ) * c -> tile_height ; //<S2SV> int sub_type ; //<S2SV> int nblocks , cblocks , bstride ; //<S2SV> int bits , bitbuf , coded ; //<S2SV> uint8_t * dst = c -> framebuf + tile_x * c -> tile_width * 3 + //<S2SV> tile_y * c -> tile_height * c -> framebuf_stride ; //<S2SV> if ( src_size < 2 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> width = FFMIN ( c -> width - tile_x * c -> tile_width , c -> tile_width ) ; //<S2SV> height = FFMIN ( c -> height - tile_y * c -> tile_height , c -> tile_height ) ; //<S2SV> hdr = * src ++ ; //<S2SV> sub_type = hdr >> 5 ; //<S2SV> if ( sub_type == 0 ) { //<S2SV> int j ; //<S2SV> memcpy ( transp , src , 3 ) ; //<S2SV> src += 3 ; //<S2SV> for ( j = 0 ; j < height ; j ++ , dst += c -> framebuf_stride ) //<S2SV> for ( i = 0 ; i < width ; i ++ ) //<S2SV> memcpy ( dst + i * 3 , transp , 3 ) ; //<S2SV> return 0 ; //<S2SV> } else if ( sub_type == 1 ) { //<S2SV> return jpg_decode_data ( & c -> jc , width , height , src , src_end - src , //<S2SV> dst , c -> framebuf_stride , NULL , 0 , 0 , 0 ) ; //<S2SV> } //<S2SV> if ( sub_type != 2 ) { //<S2SV> memcpy ( transp , src , 3 ) ; //<S2SV> src += 3 ; //<S2SV> } //<S2SV> npal = * src ++ + 1 ; //<S2SV> memcpy ( pal , src , npal * 3 ) ; src += npal * 3 ; //<S2SV> if ( sub_type != 2 ) { //<S2SV> for ( i = 0 ; i < npal ; i ++ ) { //<S2SV> if ( ! memcmp ( pal + i * 3 , transp , 3 ) ) { //<S2SV> tidx = i ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( src_end - src < 2 ) //<S2SV> return 0 ; //<S2SV> zsize = ( src [ 0 ] << 8 ) | src [ 1 ] ; src += 2 ; //<S2SV> if ( src_end - src < zsize + ( sub_type != 2 ) ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> ret = uncompress ( c -> kempf_buf , & dlen , src , zsize ) ; //<S2SV> if ( ret ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> src += zsize ; //<S2SV> if ( sub_type == 2 ) { //<S2SV> kempf_restore_buf ( c -> kempf_buf , dlen , dst , c -> framebuf_stride , //<S2SV> NULL , 0 , width , height , pal , npal , tidx ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> nblocks = * src ++ + 1 ; //<S2SV> cblocks = 0 ; //<S2SV> bstride = FFALIGN ( width , 16 ) >> 4 ; //<S2SV> bits = 0 ; //<S2SV> for ( i = 0 ; i < ( FFALIGN ( height , 16 ) >> 4 ) ; i ++ ) { //<S2SV> for ( j = 0 ; j < ( FFALIGN ( width , 16 ) >> 4 ) ; j ++ ) { //<S2SV> if ( ! bits ) { //<S2SV> if ( src >= src_end ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> bitbuf = * src ++ ; //<S2SV> bits = 8 ; //<S2SV> } //<S2SV> coded = bitbuf & 1 ; //<S2SV> bits -- ; //<S2SV> bitbuf >>= 1 ; //<S2SV> cblocks += coded ; //<S2SV> if ( cblocks > nblocks ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> c -> kempf_flags [ j + i * bstride ] = coded ; //<S2SV> } //<S2SV> } //<S2SV> memset ( c -> jpeg_tile , 0 , c -> tile_stride * height ) ; //<S2SV> jpg_decode_data ( & c -> jc , width , height , src , src_end - src , //<S2SV> c -> jpeg_tile , c -> tile_stride , //<S2SV> c -> kempf_flags , bstride , nblocks , 0 ) ; //<S2SV> kempf_restore_buf ( c -> kempf_buf , dlen , dst , c -> framebuf_stride , //<S2SV> c -> jpeg_tile , c -> tile_stride , //<S2SV> width , height , pal , npal , tidx ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 