static int process_line ( URLContext * h , char * line , int line_count , //<S2SV> int * new_location ) //<S2SV> { //<S2SV> HTTPContext * s = h -> priv_data ; //<S2SV> const char * auto_method = h -> flags & AVIO_FLAG_READ ? "POST" : "GET" ; //<S2SV> char * tag , * p , * end , * method , * resource , * version ; //<S2SV> int ret ; //<S2SV> if ( line [ 0 ] == '\\0' ) { //<S2SV> s -> end_header = 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> p = line ; //<S2SV> if ( line_count == 0 ) { //<S2SV> if ( s -> is_connected_server ) { //<S2SV> method = p ; //<S2SV> while ( * p && ! av_isspace ( * p ) ) //<S2SV> p ++ ; //<S2SV> * ( p ++ ) = '\\0' ; //<S2SV> av_log ( h , AV_LOG_TRACE , "Received<S2SV_blank>method:<S2SV_blank>%s\\n" , method ) ; //<S2SV> if ( s -> method ) { //<S2SV> if ( av_strcasecmp ( s -> method , method ) ) { //<S2SV> av_log ( h , AV_LOG_ERROR , "Received<S2SV_blank>and<S2SV_blank>expected<S2SV_blank>HTTP<S2SV_blank>method<S2SV_blank>do<S2SV_blank>not<S2SV_blank>match.<S2SV_blank>(%s<S2SV_blank>expected,<S2SV_blank>%s<S2SV_blank>received)\\n" , //<S2SV> s -> method , method ) ; //<S2SV> return ff_http_averror ( 400 , AVERROR ( EIO ) ) ; //<S2SV> } //<S2SV> } else { //<S2SV> av_log ( h , AV_LOG_TRACE , "Autodetected<S2SV_blank>%s<S2SV_blank>HTTP<S2SV_blank>method\\n" , auto_method ) ; //<S2SV> if ( av_strcasecmp ( auto_method , method ) ) { //<S2SV> av_log ( h , AV_LOG_ERROR , "Received<S2SV_blank>and<S2SV_blank>autodetected<S2SV_blank>HTTP<S2SV_blank>method<S2SV_blank>did<S2SV_blank>not<S2SV_blank>match<S2SV_blank>" //<S2SV> "(%s<S2SV_blank>autodetected<S2SV_blank>%s<S2SV_blank>received)\\n" , auto_method , method ) ; //<S2SV> return ff_http_averror ( 400 , AVERROR ( EIO ) ) ; //<S2SV> } //<S2SV> if ( ! ( s -> method = av_strdup ( method ) ) ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> } //<S2SV> while ( av_isspace ( * p ) ) //<S2SV> p ++ ; //<S2SV> resource = p ; //<S2SV> while ( ! av_isspace ( * p ) ) //<S2SV> p ++ ; //<S2SV> * ( p ++ ) = '\\0' ; //<S2SV> av_log ( h , AV_LOG_TRACE , "Requested<S2SV_blank>resource:<S2SV_blank>%s\\n" , resource ) ; //<S2SV> if ( ! ( s -> resource = av_strdup ( resource ) ) ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> while ( av_isspace ( * p ) ) //<S2SV> p ++ ; //<S2SV> version = p ; //<S2SV> while ( * p && ! av_isspace ( * p ) ) //<S2SV> p ++ ; //<S2SV> * p = '\\0' ; //<S2SV> if ( av_strncasecmp ( version , "HTTP/" , 5 ) ) { //<S2SV> av_log ( h , AV_LOG_ERROR , "Malformed<S2SV_blank>HTTP<S2SV_blank>version<S2SV_blank>string.\\n" ) ; //<S2SV> return ff_http_averror ( 400 , AVERROR ( EIO ) ) ; //<S2SV> } //<S2SV> av_log ( h , AV_LOG_TRACE , "HTTP<S2SV_blank>version<S2SV_blank>string:<S2SV_blank>%s\\n" , version ) ; //<S2SV> } else { //<S2SV> while ( ! av_isspace ( * p ) && * p != '\\0' ) //<S2SV> p ++ ; //<S2SV> while ( av_isspace ( * p ) ) //<S2SV> p ++ ; //<S2SV> s -> http_code = strtol ( p , & end , 10 ) ; //<S2SV> av_log ( h , AV_LOG_TRACE , "http_code=%d\\n" , s -> http_code ) ; //<S2SV> if ( ( ret = check_http_code ( h , s -> http_code , end ) ) < 0 ) //<S2SV> return ret ; //<S2SV> } //<S2SV> } else { //<S2SV> while ( * p != '\\0' && * p != ':' ) //<S2SV> p ++ ; //<S2SV> if ( * p != ':' ) //<S2SV> return 1 ; //<S2SV> * p = '\\0' ; //<S2SV> tag = line ; //<S2SV> p ++ ; //<S2SV> while ( av_isspace ( * p ) ) //<S2SV> p ++ ; //<S2SV> if ( ! av_strcasecmp ( tag , "Location" ) ) { //<S2SV> if ( ( ret = parse_location ( s , p ) ) < 0 ) //<S2SV> return ret ; //<S2SV> * new_location = 1 ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Content-Length" ) && s -> filesize == - 1 ) { //<S2SV> s -> filesize = strtoll ( p , NULL , 10 ) ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Content-Range" ) ) { //<S2SV> parse_content_range ( h , p ) ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Accept-Ranges" ) && //<S2SV> ! strncmp ( p , "bytes" , 5 ) && //<S2SV> s -> seekable == - 1 ) { //<S2SV> h -> is_streamed = 0 ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Transfer-Encoding" ) && //<S2SV> ! av_strncasecmp ( p , "chunked" , 7 ) ) { //<S2SV> s -> filesize = - 1 ; //<S2SV> s -> chunksize = 0 ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "WWW-Authenticate" ) ) { //<S2SV> ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Authentication-Info" ) ) { //<S2SV> ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Proxy-Authenticate" ) ) { //<S2SV> ff_http_auth_handle_header ( & s -> proxy_auth_state , tag , p ) ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Connection" ) ) { //<S2SV> if ( ! strcmp ( p , "close" ) ) //<S2SV> s -> willclose = 1 ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Server" ) ) { //<S2SV> if ( ! av_strcasecmp ( p , "AkamaiGHost" ) ) { //<S2SV> s -> is_akamai = 1 ; //<S2SV> } else if ( ! av_strncasecmp ( p , "MediaGateway" , 12 ) ) { //<S2SV> s -> is_mediagateway = 1 ; //<S2SV> } //<S2SV> } else if ( ! av_strcasecmp ( tag , "Content-Type" ) ) { //<S2SV> av_free ( s -> mime_type ) ; //<S2SV> s -> mime_type = av_strdup ( p ) ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Set-Cookie" ) ) { //<S2SV> if ( parse_cookie ( s , p , & s -> cookie_dict ) ) //<S2SV> av_log ( h , AV_LOG_WARNING , "Unable<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>\'%s\'\\n" , p ) ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Icy-MetaInt" ) ) { //<S2SV> s -> icy_metaint = strtoll ( p , NULL , 10 ) ; //<S2SV> } else if ( ! av_strncasecmp ( tag , "Icy-" , 4 ) ) { //<S2SV> if ( ( ret = parse_icy ( s , tag , p ) ) < 0 ) //<S2SV> return ret ; //<S2SV> } else if ( ! av_strcasecmp ( tag , "Content-Encoding" ) ) { //<S2SV> if ( ( ret = parse_content_encoding ( h , p ) ) < 0 ) //<S2SV> return ret ; //<S2SV> } //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 