static int http_buf_read ( URLContext * h , uint8_t * buf , int size ) //<S2SV> { //<S2SV> HTTPContext * s = h -> priv_data ; //<S2SV> int len ; //<S2SV> len = s -> buf_end - s -> buf_ptr ; //<S2SV> if ( len > 0 ) { //<S2SV> if ( len > size ) //<S2SV> len = size ; //<S2SV> memcpy ( buf , s -> buf_ptr , len ) ; //<S2SV> s -> buf_ptr += len ; //<S2SV> } else { //<S2SV> int64_t target_end = s -> end_off ? s -> end_off : s -> filesize ; //<S2SV> if ( ( ! s -> willclose || s -> chunksize < 0 ) && //<S2SV> target_end >= 0 && s -> off >= target_end ) //<S2SV> return AVERROR_EOF ; //<S2SV> len = ffurl_read ( s -> hd , buf , size ) ; //<S2SV> if ( ! len && ( ! s -> willclose || s -> chunksize < 0 ) && //<S2SV> target_end >= 0 && s -> off < target_end ) { //<S2SV> av_log ( h , AV_LOG_ERROR , //<S2SV> "Stream<S2SV_blank>ends<S2SV_blank>prematurely<S2SV_blank>at<S2SV_blank>%" PRId64 ",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%" PRId64 "\\n" , //<S2SV> s -> off , target_end //<S2SV> ) ; //<S2SV> return AVERROR ( EIO ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( len > 0 ) { //<S2SV> s -> off += len ; //<S2SV> if ( s -> chunksize > 0 ) //<S2SV> s -> chunksize -= len ; //<S2SV> } //<S2SV> return len ; //<S2SV> } //<S2SV> 