static int64_t http_seek_internal ( URLContext * h , int64_t off , int whence , int force_reconnect ) //<S2SV> { //<S2SV> HTTPContext * s = h -> priv_data ; //<S2SV> URLContext * old_hd = s -> hd ; //<S2SV> int64_t old_off = s -> off ; //<S2SV> uint8_t old_buf [ BUFFER_SIZE ] ; //<S2SV> int old_buf_size , ret ; //<S2SV> AVDictionary * options = NULL ; //<S2SV> if ( whence == AVSEEK_SIZE ) //<S2SV> return s -> filesize ; //<S2SV> else if ( ! force_reconnect && //<S2SV> ( ( whence == SEEK_CUR && off == 0 ) || //<S2SV> ( whence == SEEK_SET && off == s -> off ) ) ) //<S2SV> return s -> off ; //<S2SV> else if ( ( s -> filesize == - 1 && whence == SEEK_END ) ) //<S2SV> return AVERROR ( ENOSYS ) ; //<S2SV> if ( whence == SEEK_CUR ) //<S2SV> off += s -> off ; //<S2SV> else if ( whence == SEEK_END ) //<S2SV> off += s -> filesize ; //<S2SV> else if ( whence != SEEK_SET ) //<S2SV> return AVERROR ( EINVAL ) ; //<S2SV> if ( off < 0 ) //<S2SV> return AVERROR ( EINVAL ) ; //<S2SV> s -> off = off ; //<S2SV> if ( s -> off && h -> is_streamed ) //<S2SV> return AVERROR ( ENOSYS ) ; //<S2SV> old_buf_size = s -> buf_end - s -> buf_ptr ; //<S2SV> memcpy ( old_buf , s -> buf_ptr , old_buf_size ) ; //<S2SV> s -> hd = NULL ; //<S2SV> if ( ( ret = http_open_cnx ( h , & options ) ) < 0 ) { //<S2SV> av_dict_free ( & options ) ; //<S2SV> memcpy ( s -> buffer , old_buf , old_buf_size ) ; //<S2SV> s -> buf_ptr = s -> buffer ; //<S2SV> s -> buf_end = s -> buffer + old_buf_size ; //<S2SV> s -> hd = old_hd ; //<S2SV> s -> off = old_off ; //<S2SV> return ret ; //<S2SV> } //<S2SV> av_dict_free ( & options ) ; //<S2SV> ffurl_close ( old_hd ) ; //<S2SV> return off ; //<S2SV> } //<S2SV> 