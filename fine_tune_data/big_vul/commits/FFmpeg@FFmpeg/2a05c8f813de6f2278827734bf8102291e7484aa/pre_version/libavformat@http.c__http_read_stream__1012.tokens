static int http_read_stream ( URLContext * h , uint8_t * buf , int size ) //<S2SV> { //<S2SV> HTTPContext * s = h -> priv_data ; //<S2SV> int err , new_location , read_ret ; //<S2SV> int64_t seek_ret ; //<S2SV> if ( ! s -> hd ) //<S2SV> return AVERROR_EOF ; //<S2SV> if ( s -> end_chunked_post && ! s -> end_header ) { //<S2SV> err = http_read_header ( h , & new_location ) ; //<S2SV> if ( err < 0 ) //<S2SV> return err ; //<S2SV> } //<S2SV> if ( s -> chunksize >= 0 ) { //<S2SV> if ( ! s -> chunksize ) { //<S2SV> char line [ 32 ] ; //<S2SV> do { //<S2SV> if ( ( err = http_get_line ( s , line , sizeof ( line ) ) ) < 0 ) //<S2SV> return err ; //<S2SV> } while ( ! * line ) ; //<S2SV> s -> chunksize = strtoll ( line , NULL , 16 ) ; //<S2SV> av_log ( NULL , AV_LOG_TRACE , "Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%" PRId64 "\'\\n" , //<S2SV> s -> chunksize ) ; //<S2SV> if ( ! s -> chunksize ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> size = FFMIN ( size , s -> chunksize ) ; //<S2SV> } //<S2SV> # if CONFIG_ZLIB //<S2SV> if ( s -> compressed ) //<S2SV> return http_buf_read_compressed ( h , buf , size ) ; //<S2SV> # endif //<S2SV> read_ret = http_buf_read ( h , buf , size ) ; //<S2SV> if ( ( read_ret < 0 && s -> reconnect && ( ! h -> is_streamed || s -> reconnect_streamed ) && s -> filesize > 0 && s -> off < s -> filesize ) //<S2SV> || ( read_ret == 0 && s -> reconnect_at_eof && ( ! h -> is_streamed || s -> reconnect_streamed ) ) ) { //<S2SV> int64_t target = h -> is_streamed ? 0 : s -> off ; //<S2SV> if ( s -> reconnect_delay > s -> reconnect_delay_max ) //<S2SV> return AVERROR ( EIO ) ; //<S2SV> av_log ( h , AV_LOG_INFO , "Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRId64 "<S2SV_blank>error=%s.\\n" , s -> off , av_err2str ( read_ret ) ) ; //<S2SV> av_usleep ( 1000U * 1000 * s -> reconnect_delay ) ; //<S2SV> s -> reconnect_delay = 1 + 2 * s -> reconnect_delay ; //<S2SV> seek_ret = http_seek_internal ( h , target , SEEK_SET , 1 ) ; //<S2SV> if ( seek_ret != target ) { //<S2SV> av_log ( h , AV_LOG_ERROR , "Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRId64 ".\\n" , target ) ; //<S2SV> return read_ret ; //<S2SV> } //<S2SV> read_ret = http_buf_read ( h , buf , size ) ; //<S2SV> } else //<S2SV> s -> reconnect_delay = 0 ; //<S2SV> return read_ret ; //<S2SV> } //<S2SV> 