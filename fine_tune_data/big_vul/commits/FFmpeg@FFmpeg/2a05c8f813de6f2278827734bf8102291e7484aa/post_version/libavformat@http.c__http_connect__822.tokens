static int http_connect ( URLContext * h , const char * path , const char * local_path , //<S2SV> const char * hoststr , const char * auth , //<S2SV> const char * proxyauth , int * new_location ) //<S2SV> { //<S2SV> HTTPContext * s = h -> priv_data ; //<S2SV> int post , err ; //<S2SV> char headers [ HTTP_HEADERS_SIZE ] = "" ; //<S2SV> char * authstr = NULL , * proxyauthstr = NULL ; //<S2SV> uint64_t off = s -> off ; //<S2SV> int len = 0 ; //<S2SV> const char * method ; //<S2SV> int send_expect_100 = 0 ; //<S2SV> post = h -> flags & AVIO_FLAG_WRITE ; //<S2SV> if ( s -> post_data ) { //<S2SV> post = 1 ; //<S2SV> s -> chunked_post = 0 ; //<S2SV> } //<S2SV> if ( s -> method ) //<S2SV> method = s -> method ; //<S2SV> else //<S2SV> method = post ? "POST" : "GET" ; //<S2SV> authstr = ff_http_auth_create_response ( & s -> auth_state , auth , //<S2SV> local_path , method ) ; //<S2SV> proxyauthstr = ff_http_auth_create_response ( & s -> proxy_auth_state , proxyauth , //<S2SV> local_path , method ) ; //<S2SV> if ( post && ! s -> post_data ) { //<S2SV> send_expect_100 = s -> send_expect_100 ; //<S2SV> if ( auth && * auth && //<S2SV> s -> auth_state . auth_type == HTTP_AUTH_NONE && //<S2SV> s -> http_code != 401 ) //<S2SV> send_expect_100 = 1 ; //<S2SV> } //<S2SV> # if FF_API_HTTP_USER_AGENT //<S2SV> if ( strcmp ( s -> user_agent_deprecated , DEFAULT_USER_AGENT ) ) { //<S2SV> av_log ( s , AV_LOG_WARNING , "the<S2SV_blank>user-agent<S2SV_blank>option<S2SV_blank>is<S2SV_blank>deprecated,<S2SV_blank>please<S2SV_blank>use<S2SV_blank>user_agent<S2SV_blank>option\\n" ) ; //<S2SV> s -> user_agent = av_strdup ( s -> user_agent_deprecated ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nUser-Agent:<S2SV_blank>" ) ) //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "User-Agent:<S2SV_blank>%s\\r\\n" , s -> user_agent ) ; //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nAccept:<S2SV_blank>" ) ) //<S2SV> len += av_strlcpy ( headers + len , "Accept:<S2SV_blank>*/*\\r\\n" , //<S2SV> sizeof ( headers ) - len ) ; //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nRange:<S2SV_blank>" ) && ! post && ( s -> off > 0 || s -> end_off || s -> seekable == - 1 ) ) { //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "Range:<S2SV_blank>bytes=%" PRIu64 "-" , s -> off ) ; //<S2SV> if ( s -> end_off ) //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "%" PRId64 , s -> end_off - 1 ) ; //<S2SV> len += av_strlcpy ( headers + len , "\\r\\n" , //<S2SV> sizeof ( headers ) - len ) ; //<S2SV> } //<S2SV> if ( send_expect_100 && ! has_header ( s -> headers , "\\r\\nExpect:<S2SV_blank>" ) ) //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "Expect:<S2SV_blank>100-continue\\r\\n" ) ; //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nConnection:<S2SV_blank>" ) ) { //<S2SV> if ( s -> multiple_requests ) //<S2SV> len += av_strlcpy ( headers + len , "Connection:<S2SV_blank>keep-alive\\r\\n" , //<S2SV> sizeof ( headers ) - len ) ; //<S2SV> else //<S2SV> len += av_strlcpy ( headers + len , "Connection:<S2SV_blank>close\\r\\n" , //<S2SV> sizeof ( headers ) - len ) ; //<S2SV> } //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nHost:<S2SV_blank>" ) ) //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "Host:<S2SV_blank>%s\\r\\n" , hoststr ) ; //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nContent-Length:<S2SV_blank>" ) && s -> post_data ) //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "Content-Length:<S2SV_blank>%d\\r\\n" , s -> post_datalen ) ; //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nContent-Type:<S2SV_blank>" ) && s -> content_type ) //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "Content-Type:<S2SV_blank>%s\\r\\n" , s -> content_type ) ; //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nCookie:<S2SV_blank>" ) && s -> cookies ) { //<S2SV> char * cookies = NULL ; //<S2SV> if ( ! get_cookies ( s , & cookies , path , hoststr ) && cookies ) { //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "Cookie:<S2SV_blank>%s\\r\\n" , cookies ) ; //<S2SV> av_free ( cookies ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! has_header ( s -> headers , "\\r\\nIcy-MetaData:<S2SV_blank>" ) && s -> icy ) //<S2SV> len += av_strlcatf ( headers + len , sizeof ( headers ) - len , //<S2SV> "Icy-MetaData:<S2SV_blank>%d\\r\\n" , 1 ) ; //<S2SV> if ( s -> headers ) //<S2SV> av_strlcpy ( headers + len , s -> headers , sizeof ( headers ) - len ) ; //<S2SV> snprintf ( s -> buffer , sizeof ( s -> buffer ) , //<S2SV> "%s<S2SV_blank>%s<S2SV_blank>HTTP/1.1\\r\\n" //<S2SV> "%s" //<S2SV> "%s" //<S2SV> "%s" //<S2SV> "%s%s" //<S2SV> "\\r\\n" , //<S2SV> method , //<S2SV> path , //<S2SV> post && s -> chunked_post ? "Transfer-Encoding:<S2SV_blank>chunked\\r\\n" : "" , //<S2SV> headers , //<S2SV> authstr ? authstr : "" , //<S2SV> proxyauthstr ? "Proxy-" : "" , proxyauthstr ? proxyauthstr : "" ) ; //<S2SV> av_log ( h , AV_LOG_DEBUG , "request:<S2SV_blank>%s\\n" , s -> buffer ) ; //<S2SV> if ( ( err = ffurl_write ( s -> hd , s -> buffer , strlen ( s -> buffer ) ) ) < 0 ) //<S2SV> goto done ; //<S2SV> if ( s -> post_data ) //<S2SV> if ( ( err = ffurl_write ( s -> hd , s -> post_data , s -> post_datalen ) ) < 0 ) //<S2SV> goto done ; //<S2SV> s -> buf_ptr = s -> buffer ; //<S2SV> s -> buf_end = s -> buffer ; //<S2SV> s -> line_count = 0 ; //<S2SV> s -> off = 0 ; //<S2SV> s -> icy_data_read = 0 ; //<S2SV> s -> filesize = UINT64_MAX ; //<S2SV> s -> willclose = 0 ; //<S2SV> s -> end_chunked_post = 0 ; //<S2SV> s -> end_header = 0 ; //<S2SV> if ( post && ! s -> post_data && ! send_expect_100 ) { //<S2SV> s -> http_code = 200 ; //<S2SV> err = 0 ; //<S2SV> goto done ; //<S2SV> } //<S2SV> err = http_read_header ( h , new_location ) ; //<S2SV> if ( err < 0 ) //<S2SV> goto done ; //<S2SV> if ( * new_location ) //<S2SV> s -> off = off ; //<S2SV> err = ( off == s -> off ) ? 0 : - 1 ; //<S2SV> done : //<S2SV> av_freep ( & authstr ) ; //<S2SV> av_freep ( & proxyauthstr ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 