static int cdxl_decode_frame ( AVCodecContext * avctx , void * data , //<S2SV> int * got_frame , AVPacket * pkt ) //<S2SV> { //<S2SV> CDXLVideoContext * c = avctx -> priv_data ; //<S2SV> AVFrame * const p = data ; //<S2SV> int ret , w , h , encoding , aligned_width , buf_size = pkt -> size ; //<S2SV> const uint8_t * buf = pkt -> data ; //<S2SV> if ( buf_size < 32 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> encoding = buf [ 1 ] & 7 ; //<S2SV> c -> format = buf [ 1 ] & 0xE0 ; //<S2SV> w = AV_RB16 ( & buf [ 14 ] ) ; //<S2SV> h = AV_RB16 ( & buf [ 16 ] ) ; //<S2SV> c -> bpp = buf [ 19 ] ; //<S2SV> c -> palette_size = AV_RB16 ( & buf [ 20 ] ) ; //<S2SV> c -> palette = buf + 32 ; //<S2SV> c -> video = c -> palette + c -> palette_size ; //<S2SV> c -> video_size = buf_size - c -> palette_size - 32 ; //<S2SV> if ( c -> palette_size > 512 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( buf_size < c -> palette_size + 32 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( c -> bpp < 1 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( c -> format != BIT_PLANAR && c -> format != BIT_LINE && c -> format != CHUNKY ) { //<S2SV> avpriv_request_sample ( avctx , "Pixel<S2SV_blank>format<S2SV_blank>0x%0x" , c -> format ) ; //<S2SV> return AVERROR_PATCHWELCOME ; //<S2SV> } //<S2SV> if ( ( ret = ff_set_dimensions ( avctx , w , h ) ) < 0 ) //<S2SV> return ret ; //<S2SV> if ( c -> format == CHUNKY ) //<S2SV> aligned_width = avctx -> width ; //<S2SV> else //<S2SV> aligned_width = FFALIGN ( c -> avctx -> width , 16 ) ; //<S2SV> c -> padded_bits = aligned_width - c -> avctx -> width ; //<S2SV> if ( c -> video_size < aligned_width * avctx -> height * ( int64_t ) c -> bpp / 8 ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> if ( ! encoding && c -> palette_size && c -> bpp <= 8 ) { //<S2SV> avctx -> pix_fmt = AV_PIX_FMT_PAL8 ; //<S2SV> } else if ( encoding == 1 && ( c -> bpp == 6 || c -> bpp == 8 ) ) { //<S2SV> if ( c -> palette_size != ( 1 << ( c -> bpp - 1 ) ) ) //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> avctx -> pix_fmt = AV_PIX_FMT_BGR24 ; //<S2SV> } else if ( ! encoding && c -> bpp == 24 && c -> format == CHUNKY && //<S2SV> ! c -> palette_size ) { //<S2SV> avctx -> pix_fmt = AV_PIX_FMT_RGB24 ; //<S2SV> } else { //<S2SV> avpriv_request_sample ( avctx , "Encoding<S2SV_blank>%d,<S2SV_blank>bpp<S2SV_blank>%d<S2SV_blank>and<S2SV_blank>format<S2SV_blank>0x%x" , //<S2SV> encoding , c -> bpp , c -> format ) ; //<S2SV> return AVERROR_PATCHWELCOME ; //<S2SV> } //<S2SV> if ( ( ret = ff_get_buffer ( avctx , p , 0 ) ) < 0 ) //<S2SV> return ret ; //<S2SV> p -> pict_type = AV_PICTURE_TYPE_I ; //<S2SV> if ( encoding ) { //<S2SV> av_fast_padded_malloc ( & c -> new_video , & c -> new_video_size , //<S2SV> h * w + AV_INPUT_BUFFER_PADDING_SIZE ) ; //<S2SV> if ( ! c -> new_video ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> if ( c -> bpp == 8 ) //<S2SV> cdxl_decode_ham8 ( c , p ) ; //<S2SV> else //<S2SV> cdxl_decode_ham6 ( c , p ) ; //<S2SV> } else if ( avctx -> pix_fmt == AV_PIX_FMT_PAL8 ) { //<S2SV> cdxl_decode_rgb ( c , p ) ; //<S2SV> } else { //<S2SV> cdxl_decode_raw ( c , p ) ; //<S2SV> } //<S2SV> * got_frame = 1 ; //<S2SV> return buf_size ; //<S2SV> } //<S2SV> 