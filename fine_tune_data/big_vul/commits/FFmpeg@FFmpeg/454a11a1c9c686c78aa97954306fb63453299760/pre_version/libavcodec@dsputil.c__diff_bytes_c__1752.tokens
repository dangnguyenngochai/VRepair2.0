static void diff_bytes_c ( uint8_t * dst , const uint8_t * src1 , const uint8_t * src2 , int w ) { //<S2SV> long i ; //<S2SV> # if ! HAVE_FAST_UNALIGNED //<S2SV> if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { //<S2SV> for ( i = 0 ; i + 7 < w ; i += 8 ) { //<S2SV> dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; //<S2SV> dst [ i + 1 ] = src1 [ i + 1 ] - src2 [ i + 1 ] ; //<S2SV> dst [ i + 2 ] = src1 [ i + 2 ] - src2 [ i + 2 ] ; //<S2SV> dst [ i + 3 ] = src1 [ i + 3 ] - src2 [ i + 3 ] ; //<S2SV> dst [ i + 4 ] = src1 [ i + 4 ] - src2 [ i + 4 ] ; //<S2SV> dst [ i + 5 ] = src1 [ i + 5 ] - src2 [ i + 5 ] ; //<S2SV> dst [ i + 6 ] = src1 [ i + 6 ] - src2 [ i + 6 ] ; //<S2SV> dst [ i + 7 ] = src1 [ i + 7 ] - src2 [ i + 7 ] ; //<S2SV> } //<S2SV> } else //<S2SV> # endif //<S2SV> for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { //<S2SV> long a = * ( long * ) ( src1 + i ) ; //<S2SV> long b = * ( long * ) ( src2 + i ) ; //<S2SV> * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_7f ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ) ; //<S2SV> } //<S2SV> for ( ; i < w ; i ++ ) //<S2SV> dst [ i + 0 ] = src1 [ i + 0 ] - src2 [ i + 0 ] ; //<S2SV> } //<S2SV> 