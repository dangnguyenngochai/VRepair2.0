static int asf_build_simple_index ( AVFormatContext * s , int stream_index ) //<S2SV> { //<S2SV> ff_asf_guid g ; //<S2SV> ASFContext * asf = s -> priv_data ; //<S2SV> int64_t current_pos = avio_tell ( s -> pb ) ; //<S2SV> int64_t ret ; //<S2SV> if ( ( ret = avio_seek ( s -> pb , asf -> data_object_offset + asf -> data_object_size , SEEK_SET ) ) < 0 ) { //<S2SV> return ret ; //<S2SV> } //<S2SV> if ( ( ret = ff_get_guid ( s -> pb , & g ) ) < 0 ) //<S2SV> goto end ; //<S2SV> while ( ff_guidcmp ( & g , & ff_asf_simple_index_header ) ) { //<S2SV> int64_t gsize = avio_rl64 ( s -> pb ) ; //<S2SV> if ( gsize < 24 || avio_feof ( s -> pb ) ) { //<S2SV> goto end ; //<S2SV> } //<S2SV> avio_skip ( s -> pb , gsize - 24 ) ; //<S2SV> if ( ( ret = ff_get_guid ( s -> pb , & g ) ) < 0 ) //<S2SV> goto end ; //<S2SV> } //<S2SV> { //<S2SV> int64_t itime , last_pos = - 1 ; //<S2SV> int pct , ict ; //<S2SV> int i ; //<S2SV> int64_t av_unused gsize = avio_rl64 ( s -> pb ) ; //<S2SV> if ( ( ret = ff_get_guid ( s -> pb , & g ) ) < 0 ) //<S2SV> goto end ; //<S2SV> itime = avio_rl64 ( s -> pb ) ; //<S2SV> pct = avio_rl32 ( s -> pb ) ; //<S2SV> ict = avio_rl32 ( s -> pb ) ; //<S2SV> av_log ( s , AV_LOG_DEBUG , //<S2SV> "itime:0x%" PRIx64 ",<S2SV_blank>pct:%d,<S2SV_blank>ict:%d\\n" , itime , pct , ict ) ; //<S2SV> for ( i = 0 ; i < ict ; i ++ ) { //<S2SV> int pktnum = avio_rl32 ( s -> pb ) ; //<S2SV> int pktct = avio_rl16 ( s -> pb ) ; //<S2SV> int64_t pos = s -> internal -> data_offset + s -> packet_size * ( int64_t ) pktnum ; //<S2SV> int64_t index_pts = FFMAX ( av_rescale ( itime , i , 10000 ) - asf -> hdr . preroll , 0 ) ; //<S2SV> if ( avio_feof ( s -> pb ) ) { //<S2SV> ret = AVERROR_INVALIDDATA ; //<S2SV> goto end ; //<S2SV> } //<S2SV> if ( pos != last_pos ) { //<S2SV> av_log ( s , AV_LOG_DEBUG , "pktnum:%d,<S2SV_blank>pktct:%d<S2SV_blank><S2SV_blank>pts:<S2SV_blank>%" PRId64 "\\n" , //<S2SV> pktnum , pktct , index_pts ) ; //<S2SV> av_add_index_entry ( s -> streams [ stream_index ] , pos , index_pts , //<S2SV> s -> packet_size , 0 , AVINDEX_KEYFRAME ) ; //<S2SV> last_pos = pos ; //<S2SV> } //<S2SV> } //<S2SV> asf -> index_read = ict > 1 ; //<S2SV> } //<S2SV> end : //<S2SV> avio_seek ( s -> pb , current_pos , SEEK_SET ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 