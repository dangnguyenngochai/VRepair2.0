static void mpeg4_encode_gop_header ( MpegEncContext * s ) //<S2SV> { //<S2SV> int hours , minutes , seconds ; //<S2SV> int64_t time ; //<S2SV> put_bits ( & s -> pb , 16 , 0 ) ; //<S2SV> put_bits ( & s -> pb , 16 , GOP_STARTCODE ) ; //<S2SV> time = s -> current_picture_ptr -> f -> pts ; //<S2SV> if ( s -> reordered_input_picture [ 1 ] ) //<S2SV> time = FFMIN ( time , s -> reordered_input_picture [ 1 ] -> f -> pts ) ; //<S2SV> time = time * s -> avctx -> time_base . num ; //<S2SV> s -> last_time_base = FFUDIV ( time , s -> avctx -> time_base . den ) ; //<S2SV> seconds = FFUDIV ( time , s -> avctx -> time_base . den ) ; //<S2SV> minutes = FFUDIV ( seconds , 60 ) ; seconds = FFUMOD ( seconds , 60 ) ; //<S2SV> hours = FFUDIV ( minutes , 60 ) ; minutes = FFUMOD ( minutes , 60 ) ; //<S2SV> hours = FFUMOD ( hours , 24 ) ; //<S2SV> put_bits ( & s -> pb , 5 , hours ) ; //<S2SV> put_bits ( & s -> pb , 6 , minutes ) ; //<S2SV> put_bits ( & s -> pb , 1 , 1 ) ; //<S2SV> put_bits ( & s -> pb , 6 , seconds ) ; //<S2SV> put_bits ( & s -> pb , 1 , ! ! ( s -> avctx -> flags & AV_CODEC_FLAG_CLOSED_GOP ) ) ; //<S2SV> put_bits ( & s -> pb , 1 , 0 ) ; //<S2SV> ff_mpeg4_stuffing ( & s -> pb ) ; //<S2SV> } //<S2SV> 