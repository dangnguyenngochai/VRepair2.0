static int mxf_read_primer_pack ( void * arg , AVIOContext * pb , int tag , int size , UID uid , int64_t klv_offset ) //<S2SV> { //<S2SV> MXFContext * mxf = arg ; //<S2SV> int item_num = avio_rb32 ( pb ) ; //<S2SV> int item_len = avio_rb32 ( pb ) ; //<S2SV> if ( item_len != 18 ) { //<S2SV> avpriv_request_sample ( pb , "Primer<S2SV_blank>pack<S2SV_blank>item<S2SV_blank>length<S2SV_blank>%d" , item_len ) ; //<S2SV> return AVERROR_PATCHWELCOME ; //<S2SV> } //<S2SV> if ( item_num > 65536 ) { //<S2SV> av_log ( mxf -> fc , AV_LOG_ERROR , "item_num<S2SV_blank>%d<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large\\n" , item_num ) ; //<S2SV> return AVERROR_INVALIDDATA ; //<S2SV> } //<S2SV> if ( mxf -> local_tags ) //<S2SV> av_log ( mxf -> fc , AV_LOG_VERBOSE , "Multiple<S2SV_blank>primer<S2SV_blank>packs\\n" ) ; //<S2SV> av_free ( mxf -> local_tags ) ; //<S2SV> mxf -> local_tags_count = 0 ; //<S2SV> mxf -> local_tags = av_calloc ( item_num , item_len ) ; //<S2SV> if ( ! mxf -> local_tags ) //<S2SV> return AVERROR ( ENOMEM ) ; //<S2SV> mxf -> local_tags_count = item_num ; //<S2SV> avio_read ( pb , mxf -> local_tags , item_num * item_len ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 