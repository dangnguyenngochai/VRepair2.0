static int ndp_sock_recv ( struct ndp * ndp ) //<S2SV> { //<S2SV> struct ndp_msg * msg ; //<S2SV> enum ndp_msg_type msg_type ; //<S2SV> size_t len ; //<S2SV> int err ; //<S2SV> msg = ndp_msg_alloc ( ) ; //<S2SV> if ( ! msg ) //<S2SV> return - ENOMEM ; //<S2SV> len = ndp_msg_payload_maxlen ( msg ) ; //<S2SV> err = myrecvfrom6 ( ndp -> sock , msg -> buf , & len , 0 , //<S2SV> & msg -> addrto , & msg -> ifindex , & msg -> hoplimit ) ; //<S2SV> if ( err ) { //<S2SV> err ( ndp , "Failed<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>message" ) ; //<S2SV> goto free_msg ; //<S2SV> } //<S2SV> dbg ( ndp , "rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u,<S2SV_blank>hoplimit:<S2SV_blank>%d" , //<S2SV> str_in6_addr ( & msg -> addrto ) , msg -> ifindex , msg -> hoplimit ) ; //<S2SV> if ( msg -> hoplimit != 255 ) { //<S2SV> warn ( ndp , "ignoring<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>bad<S2SV_blank>hop<S2SV_blank>limit<S2SV_blank>(%d)" , msg -> hoplimit ) ; //<S2SV> err = 0 ; //<S2SV> goto free_msg ; //<S2SV> } //<S2SV> if ( len < sizeof ( * msg -> icmp6_hdr ) ) { //<S2SV> warn ( ndp , "rcvd<S2SV_blank>icmp6<S2SV_blank>packet<S2SV_blank>too<S2SV_blank>short<S2SV_blank>(%luB)" , len ) ; //<S2SV> err = 0 ; //<S2SV> goto free_msg ; //<S2SV> } //<S2SV> err = ndp_msg_type_by_raw_type ( & msg_type , msg -> icmp6_hdr -> icmp6_type ) ; //<S2SV> if ( err ) { //<S2SV> err = 0 ; //<S2SV> goto free_msg ; //<S2SV> } //<S2SV> ndp_msg_init ( msg , msg_type ) ; //<S2SV> ndp_msg_payload_len_set ( msg , len ) ; //<S2SV> if ( ! ndp_msg_check_valid ( msg ) ) { //<S2SV> warn ( ndp , "rcvd<S2SV_blank>invalid<S2SV_blank>ND<S2SV_blank>message" ) ; //<S2SV> err = 0 ; //<S2SV> goto free_msg ; //<S2SV> } //<S2SV> dbg ( ndp , "rcvd<S2SV_blank>%s,<S2SV_blank>len:<S2SV_blank>%zuB" , //<S2SV> ndp_msg_type_info ( msg_type ) -> strabbr , len ) ; //<S2SV> if ( ! ndp_msg_check_opts ( msg ) ) { //<S2SV> err = 0 ; //<S2SV> goto free_msg ; //<S2SV> } //<S2SV> err = ndp_call_handlers ( ndp , msg ) ; ; //<S2SV> free_msg : //<S2SV> ndp_msg_destroy ( msg ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 