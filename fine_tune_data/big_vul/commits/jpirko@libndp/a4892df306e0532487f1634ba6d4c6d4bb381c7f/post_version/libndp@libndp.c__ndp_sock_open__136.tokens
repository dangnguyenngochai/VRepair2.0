static int ndp_sock_open ( struct ndp * ndp ) //<S2SV> { //<S2SV> int sock ; //<S2SV> int ret ; //<S2SV> int err ; //<S2SV> int val ; //<S2SV> sock = socket ( PF_INET6 , SOCK_RAW , IPPROTO_ICMPV6 ) ; //<S2SV> if ( sock == - 1 ) { //<S2SV> err ( ndp , "Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>ICMP6<S2SV_blank>socket." ) ; //<S2SV> return - errno ; //<S2SV> } //<S2SV> val = 1 ; //<S2SV> ret = setsockopt ( sock , IPPROTO_IPV6 , IPV6_RECVPKTINFO , //<S2SV> & val , sizeof ( val ) ) ; //<S2SV> if ( ret == - 1 ) { //<S2SV> err ( ndp , "Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_RECVPKTINFO." ) ; //<S2SV> err = - errno ; //<S2SV> goto close_sock ; //<S2SV> } //<S2SV> val = 255 ; //<S2SV> ret = setsockopt ( sock , IPPROTO_IPV6 , IPV6_MULTICAST_HOPS , //<S2SV> & val , sizeof ( val ) ) ; //<S2SV> if ( ret == - 1 ) { //<S2SV> err ( ndp , "Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_MULTICAST_HOPS." ) ; //<S2SV> err = - errno ; //<S2SV> goto close_sock ; //<S2SV> } //<S2SV> val = 1 ; //<S2SV> ret = setsockopt ( sock , IPPROTO_IPV6 , IPV6_RECVHOPLIMIT , //<S2SV> & val , sizeof ( val ) ) ; //<S2SV> if ( ret == - 1 ) { //<S2SV> err ( ndp , "Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_RECVHOPLIMIT,." ) ; //<S2SV> err = - errno ; //<S2SV> goto close_sock ; //<S2SV> } //<S2SV> ndp -> sock = sock ; //<S2SV> return 0 ; //<S2SV> close_sock : //<S2SV> close ( sock ) ; //<S2SV> return err ; //<S2SV> } //<S2SV> 