int libevt_record_values_read_event ( //<S2SV> libevt_record_values_t * record_values , //<S2SV> uint8_t * record_data , //<S2SV> size_t record_data_size , //<S2SV> uint8_t strict_mode , //<S2SV> libcerror_error_t * * error ) //<S2SV> { //<S2SV> static char * function = "libevt_record_values_read_event" ; //<S2SV> size_t record_data_offset = 0 ; //<S2SV> size_t strings_data_offset = 0 ; //<S2SV> ssize_t value_data_size = 0 ; //<S2SV> uint32_t data_offset = 0 ; //<S2SV> uint32_t data_size = 0 ; //<S2SV> uint32_t members_data_size = 0 ; //<S2SV> uint32_t size = 0 ; //<S2SV> uint32_t size_copy = 0 ; //<S2SV> uint32_t strings_offset = 0 ; //<S2SV> uint32_t strings_size = 0 ; //<S2SV> uint32_t user_sid_offset = 0 ; //<S2SV> uint32_t user_sid_size = 0 ; //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> uint32_t value_32bit = 0 ; //<S2SV> uint16_t value_16bit = 0 ; //<S2SV> # endif //<S2SV> if ( record_values == NULL ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_ARGUMENTS , //<S2SV> LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE , //<S2SV> "%s:<S2SV_blank>invalid<S2SV_blank>record<S2SV_blank>values." , //<S2SV> function ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> if ( record_data == NULL ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_ARGUMENTS , //<S2SV> LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE , //<S2SV> "%s:<S2SV_blank>invalid<S2SV_blank>record<S2SV_blank>data." , //<S2SV> function ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> if ( record_data_size > ( size_t ) SSIZE_MAX ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_ARGUMENTS , //<S2SV> LIBCERROR_ARGUMENT_ERROR_VALUE_EXCEEDS_MAXIMUM , //<S2SV> "%s:<S2SV_blank>invalid<S2SV_blank>record<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>exceeds<S2SV_blank>maximum." , //<S2SV> function ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> if ( record_data_size < ( sizeof ( evt_record_event_header_t ) + 4 ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>record<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> size , //<S2SV> size ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> record_number , //<S2SV> record_values -> number ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> creation_time , //<S2SV> record_values -> creation_time ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> written_time , //<S2SV> record_values -> written_time ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> event_identifier , //<S2SV> record_values -> event_identifier ) ; //<S2SV> byte_stream_copy_to_uint16_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> event_type , //<S2SV> record_values -> event_type ) ; //<S2SV> byte_stream_copy_to_uint16_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> event_category , //<S2SV> record_values -> event_category ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> strings_offset , //<S2SV> strings_offset ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> user_sid_size , //<S2SV> user_sid_size ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> user_sid_offset , //<S2SV> user_sid_offset ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> data_size , //<S2SV> data_size ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> data_offset , //<S2SV> data_offset ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> & ( record_data [ record_data_size - 4 ] ) , //<S2SV> size_copy ) ; //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>size\\t\\t\\t\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> size ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>signature\\t\\t\\t\\t:<S2SV_blank>%c%c%c%c\\n" , //<S2SV> function , //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> signature [ 0 ] , //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> signature [ 1 ] , //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> signature [ 2 ] , //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> signature [ 3 ] ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>record<S2SV_blank>number\\t\\t\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> record_values -> number ) ; //<S2SV> if ( libevt_debug_print_posix_time_value ( //<S2SV> function , //<S2SV> "creation<S2SV_blank>time\\t\\t\\t\\t" , //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> creation_time , //<S2SV> 4 , //<S2SV> LIBFDATETIME_ENDIAN_LITTLE , //<S2SV> LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED , //<S2SV> LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_PRINT_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>print<S2SV_blank>POSIX<S2SV_blank>time<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( libevt_debug_print_posix_time_value ( //<S2SV> function , //<S2SV> "written<S2SV_blank>time\\t\\t\\t\\t" , //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> written_time , //<S2SV> 4 , //<S2SV> LIBFDATETIME_ENDIAN_LITTLE , //<S2SV> LIBFDATETIME_POSIX_TIME_VALUE_TYPE_SECONDS_32BIT_SIGNED , //<S2SV> LIBFDATETIME_STRING_FORMAT_TYPE_CTIME | LIBFDATETIME_STRING_FORMAT_FLAG_DATE_TIME , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_PRINT_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>print<S2SV_blank>POSIX<S2SV_blank>time<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>identifier\\t\\t\\t:<S2SV_blank>0x%08" PRIx32 "\\n" , //<S2SV> function , //<S2SV> record_values -> event_identifier ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>identifier:<S2SV_blank>code\\t\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> record_values -> event_identifier & 0x0000ffffUL ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>identifier:<S2SV_blank>facility\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> ( record_values -> event_identifier & 0x0fff0000UL ) >> 16 ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>identifier:<S2SV_blank>reserved\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> ( record_values -> event_identifier & 0x10000000UL ) >> 28 ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>identifier:<S2SV_blank>customer<S2SV_blank>flags\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> ( record_values -> event_identifier & 0x20000000UL ) >> 29 ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>identifier:<S2SV_blank>severity\\t\\t:<S2SV_blank>%" PRIu32 "<S2SV_blank>(" , //<S2SV> function , //<S2SV> ( record_values -> event_identifier & 0xc0000000UL ) >> 30 ) ; //<S2SV> libevt_debug_print_event_identifier_severity ( //<S2SV> record_values -> event_identifier ) ; //<S2SV> libcnotify_printf ( //<S2SV> ")\\n" ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>type\\t\\t\\t\\t:<S2SV_blank>%" PRIu16 "<S2SV_blank>(" , //<S2SV> function , //<S2SV> record_values -> event_type ) ; //<S2SV> libevt_debug_print_event_type ( //<S2SV> record_values -> event_type ) ; //<S2SV> libcnotify_printf ( //<S2SV> ")\\n" ) ; //<S2SV> byte_stream_copy_to_uint16_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> number_of_strings , //<S2SV> value_16bit ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>number<S2SV_blank>of<S2SV_blank>strings\\t\\t\\t:<S2SV_blank>%" PRIu16 "\\n" , //<S2SV> function , //<S2SV> value_16bit ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>category\\t\\t\\t\\t:<S2SV_blank>%" PRIu16 "\\n" , //<S2SV> function , //<S2SV> record_values -> event_category ) ; //<S2SV> byte_stream_copy_to_uint16_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> event_flags , //<S2SV> value_16bit ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>event<S2SV_blank>flags\\t\\t\\t\\t:<S2SV_blank>0x%04" PRIx16 "\\n" , //<S2SV> function , //<S2SV> value_16bit ) ; //<S2SV> byte_stream_copy_to_uint32_little_endian ( //<S2SV> ( ( evt_record_event_header_t * ) record_data ) -> closing_record_number , //<S2SV> value_32bit ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>closing<S2SV_blank>record<S2SV_blank>values<S2SV_blank>number\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> value_32bit ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>strings<S2SV_blank>offset\\t\\t\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> strings_offset ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>user<S2SV_blank>security<S2SV_blank>identifier<S2SV_blank>(SID)<S2SV_blank>size\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> user_sid_size ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>user<S2SV_blank>security<S2SV_blank>identifier<S2SV_blank>(SID)<S2SV_blank>offset\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> user_sid_offset ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>data<S2SV_blank>size\\t\\t\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> data_size ) ; //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>data<S2SV_blank>offset\\t\\t\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> data_offset ) ; //<S2SV> } //<S2SV> # endif //<S2SV> record_data_offset = sizeof ( evt_record_event_header_t ) ; //<S2SV> if ( ( user_sid_offset == 0 ) //<S2SV> && ( user_sid_size != 0 ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>offset<S2SV_blank>or<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( user_sid_offset != 0 ) //<S2SV> { //<S2SV> if ( ( ( size_t ) user_sid_offset < record_data_offset ) //<S2SV> || ( ( size_t ) user_sid_offset >= ( record_data_size - 4 ) ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>offset<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( user_sid_size != 0 ) //<S2SV> { //<S2SV> if ( ( size_t ) ( user_sid_offset + user_sid_size ) > ( record_data_size - 4 ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ( ( size_t ) strings_offset < user_sid_offset ) //<S2SV> || ( ( size_t ) strings_offset >= ( record_data_size - 4 ) ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>strings<S2SV_blank>offset<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( ( ( size_t ) data_offset < strings_offset ) //<S2SV> || ( ( size_t ) data_offset >= ( record_data_size - 4 ) ) ) //<S2SV> { //<S2SV> if ( data_size != 0 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>data<S2SV_blank>offset<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> data_offset = ( uint32_t ) record_data_size - 4 ; //<S2SV> } //<S2SV> if ( ( ( size_t ) strings_offset >= ( record_data_size - 4 ) ) //<S2SV> && ( strings_offset != data_offset ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>strings<S2SV_blank>offset<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( strings_offset != 0 ) //<S2SV> { //<S2SV> if ( strings_offset < record_data_offset ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>strings<S2SV_blank>offset<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> } //<S2SV> if ( user_sid_offset != 0 ) //<S2SV> { //<S2SV> members_data_size = user_sid_offset - ( uint32_t ) record_data_offset ; //<S2SV> } //<S2SV> else if ( strings_offset != 0 ) //<S2SV> { //<S2SV> members_data_size = strings_offset - ( uint32_t ) record_data_offset ; //<S2SV> } //<S2SV> if ( strings_offset != 0 ) //<S2SV> { //<S2SV> strings_size = data_offset - strings_offset ; //<S2SV> } //<S2SV> if ( data_size != 0 ) //<S2SV> { //<S2SV> if ( ( size_t ) ( data_offset + data_size ) > ( record_data_size - 4 ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> } //<S2SV> if ( members_data_size != 0 ) //<S2SV> { //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>members<S2SV_blank>data:\\n" , //<S2SV> function ) ; //<S2SV> libcnotify_print_data ( //<S2SV> & ( record_data [ record_data_offset ] ) , //<S2SV> members_data_size , //<S2SV> LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( libfvalue_value_type_initialize ( //<S2SV> & ( record_values -> source_name ) , //<S2SV> LIBFVALUE_VALUE_TYPE_STRING_UTF16 , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>create<S2SV_blank>source<S2SV_blank>name<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> value_data_size = libfvalue_value_type_set_data_string ( //<S2SV> record_values -> source_name , //<S2SV> & ( record_data [ record_data_offset ] ) , //<S2SV> members_data_size , //<S2SV> LIBFVALUE_CODEPAGE_UTF16_LITTLE_ENDIAN , //<S2SV> LIBFVALUE_VALUE_DATA_FLAG_MANAGED , //<S2SV> error ) ; //<S2SV> if ( value_data_size == - 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_SET_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>data<S2SV_blank>of<S2SV_blank>source<S2SV_blank>name<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>source<S2SV_blank>name\\t\\t\\t\\t:<S2SV_blank>" , //<S2SV> function ) ; //<S2SV> if ( libfvalue_value_print ( //<S2SV> record_values -> source_name , //<S2SV> 0 , //<S2SV> 0 , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_PRINT_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>print<S2SV_blank>source<S2SV_blank>name<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> libcnotify_printf ( //<S2SV> "\\n" ) ; //<S2SV> } //<S2SV> # endif //<S2SV> record_data_offset += value_data_size ; //<S2SV> members_data_size -= ( uint32_t ) value_data_size ; //<S2SV> if ( libfvalue_value_type_initialize ( //<S2SV> & ( record_values -> computer_name ) , //<S2SV> LIBFVALUE_VALUE_TYPE_STRING_UTF16 , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>create<S2SV_blank>computer<S2SV_blank>name<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> value_data_size = libfvalue_value_type_set_data_string ( //<S2SV> record_values -> computer_name , //<S2SV> & ( record_data [ record_data_offset ] ) , //<S2SV> members_data_size , //<S2SV> LIBFVALUE_CODEPAGE_UTF16_LITTLE_ENDIAN , //<S2SV> LIBFVALUE_VALUE_DATA_FLAG_MANAGED , //<S2SV> error ) ; //<S2SV> if ( value_data_size == - 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_SET_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>data<S2SV_blank>of<S2SV_blank>computer<S2SV_blank>name<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>computer<S2SV_blank>name\\t\\t\\t\\t:<S2SV_blank>" , //<S2SV> function ) ; //<S2SV> if ( libfvalue_value_print ( //<S2SV> record_values -> computer_name , //<S2SV> 0 , //<S2SV> 0 , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_PRINT_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>print<S2SV_blank>computer<S2SV_blank>name<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> libcnotify_printf ( //<S2SV> "\\n" ) ; //<S2SV> } //<S2SV> # endif //<S2SV> record_data_offset += value_data_size ; //<S2SV> members_data_size -= ( uint32_t ) value_data_size ; //<S2SV> if ( members_data_size > 0 ) //<S2SV> { //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>members<S2SV_blank>trailing<S2SV_blank>data:\\n" , //<S2SV> function ) ; //<S2SV> libcnotify_print_data ( //<S2SV> & ( record_data [ record_data_offset ] ) , //<S2SV> members_data_size , //<S2SV> LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA ) ; //<S2SV> } //<S2SV> # endif //<S2SV> record_data_offset += members_data_size ; //<S2SV> } //<S2SV> } //<S2SV> if ( user_sid_size != 0 ) //<S2SV> { //<S2SV> if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( libfvalue_value_type_initialize ( //<S2SV> & ( record_values -> user_security_identifier ) , //<S2SV> LIBFVALUE_VALUE_TYPE_NT_SECURITY_IDENTIFIER , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>create<S2SV_blank>user<S2SV_blank>security<S2SV_blank>identifier<S2SV_blank>(SID)<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( libfvalue_value_set_data ( //<S2SV> record_values -> user_security_identifier , //<S2SV> & ( record_data [ user_sid_offset ] ) , //<S2SV> ( size_t ) user_sid_size , //<S2SV> LIBFVALUE_ENDIAN_LITTLE , //<S2SV> LIBFVALUE_VALUE_DATA_FLAG_MANAGED , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_SET_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>data<S2SV_blank>of<S2SV_blank>user<S2SV_blank>security<S2SV_blank>identifier<S2SV_blank>(SID)<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>user<S2SV_blank>security<S2SV_blank>identifier<S2SV_blank>(SID)\\t\\t:<S2SV_blank>" , //<S2SV> function ) ; //<S2SV> if ( libfvalue_value_print ( //<S2SV> record_values -> user_security_identifier , //<S2SV> 0 , //<S2SV> 0 , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_PRINT_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>print<S2SV_blank>user<S2SV_blank>security<S2SV_blank>identifier<S2SV_blank>(SID)<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> libcnotify_printf ( //<S2SV> "\\n" ) ; //<S2SV> } //<S2SV> # endif //<S2SV> record_data_offset += user_sid_size ; //<S2SV> } //<S2SV> if ( strings_size != 0 ) //<S2SV> { //<S2SV> if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>strings<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>strings<S2SV_blank>data:\\n" , //<S2SV> function ) ; //<S2SV> libcnotify_print_data ( //<S2SV> & ( record_data [ strings_offset ] ) , //<S2SV> strings_size , //<S2SV> LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( size_copy == 0 ) //<S2SV> { //<S2SV> strings_data_offset = strings_offset + strings_size - 2 ; //<S2SV> while ( strings_data_offset > strings_offset ) //<S2SV> { //<S2SV> if ( ( record_data [ strings_data_offset ] != 0 ) //<S2SV> || ( record_data [ strings_data_offset + 1 ] != 0 ) ) //<S2SV> { //<S2SV> strings_size += 2 ; //<S2SV> break ; //<S2SV> } //<S2SV> strings_data_offset -= 2 ; //<S2SV> strings_size -= 2 ; //<S2SV> } //<S2SV> } //<S2SV> if ( libfvalue_value_type_initialize ( //<S2SV> & ( record_values -> strings ) , //<S2SV> LIBFVALUE_VALUE_TYPE_STRING_UTF16 , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>create<S2SV_blank>strings<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> value_data_size = libfvalue_value_type_set_data_strings_array ( //<S2SV> record_values -> strings , //<S2SV> & ( record_data [ strings_offset ] ) , //<S2SV> strings_size , //<S2SV> LIBFVALUE_CODEPAGE_UTF16_LITTLE_ENDIAN , //<S2SV> error ) ; //<S2SV> if ( value_data_size == - 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_SET_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>data<S2SV_blank>of<S2SV_blank>strings<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> record_data_offset += strings_size ; //<S2SV> } //<S2SV> if ( data_size != 0 ) //<S2SV> { //<S2SV> if ( data_size > ( ( record_data_size - 4 ) - data_offset ) ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , //<S2SV> "%s:<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>data:\\n" , //<S2SV> function ) ; //<S2SV> libcnotify_print_data ( //<S2SV> & ( record_data [ record_data_offset ] ) , //<S2SV> ( size_t ) data_size , //<S2SV> LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( libfvalue_value_type_initialize ( //<S2SV> & ( record_values -> data ) , //<S2SV> LIBFVALUE_VALUE_TYPE_BINARY_DATA , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_INITIALIZE_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>create<S2SV_blank>data<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( libfvalue_value_set_data ( //<S2SV> record_values -> data , //<S2SV> & ( record_data [ record_data_offset ] ) , //<S2SV> ( size_t ) data_size , //<S2SV> LIBFVALUE_ENDIAN_LITTLE , //<S2SV> LIBFVALUE_VALUE_DATA_FLAG_MANAGED , //<S2SV> error ) != 1 ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_RUNTIME , //<S2SV> LIBCERROR_RUNTIME_ERROR_SET_FAILED , //<S2SV> "%s:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>data<S2SV_blank>of<S2SV_blank>data<S2SV_blank>value." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> record_data_offset += data_size ; //<S2SV> # endif //<S2SV> } //<S2SV> # if defined ( HAVE_DEBUG_OUTPUT ) //<S2SV> if ( libcnotify_verbose != 0 ) //<S2SV> { //<S2SV> if ( record_data_offset < ( record_data_size - 4 ) ) //<S2SV> { //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>padding:\\n" , //<S2SV> function ) ; //<S2SV> libcnotify_print_data ( //<S2SV> & ( record_data [ record_data_offset ] ) , //<S2SV> ( size_t ) record_data_size - record_data_offset - 4 , //<S2SV> LIBCNOTIFY_PRINT_DATA_FLAG_GROUP_DATA ) ; //<S2SV> } //<S2SV> libcnotify_printf ( //<S2SV> "%s:<S2SV_blank>size<S2SV_blank>copy\\t\\t\\t\\t:<S2SV_blank>%" PRIu32 "\\n" , //<S2SV> function , //<S2SV> size_copy ) ; //<S2SV> libcnotify_printf ( //<S2SV> "\\n" ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ( strict_mode == 0 ) //<S2SV> && ( size_copy == 0 ) ) //<S2SV> { //<S2SV> size_copy = size ; //<S2SV> } //<S2SV> if ( size != size_copy ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_INPUT , //<S2SV> LIBCERROR_INPUT_ERROR_VALUE_MISMATCH , //<S2SV> "%s:<S2SV_blank>value<S2SV_blank>mismatch<S2SV_blank>for<S2SV_blank>size<S2SV_blank>and<S2SV_blank>size<S2SV_blank>copy." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> if ( record_data_size != ( size_t ) size ) //<S2SV> { //<S2SV> libcerror_error_set ( //<S2SV> error , //<S2SV> LIBCERROR_ERROR_DOMAIN_INPUT , //<S2SV> LIBCERROR_INPUT_ERROR_VALUE_MISMATCH , //<S2SV> "%s:<S2SV_blank>value<S2SV_blank>mismatch<S2SV_blank>for<S2SV_blank>record_values<S2SV_blank>data<S2SV_blank>size<S2SV_blank>and<S2SV_blank>size." , //<S2SV> function ) ; //<S2SV> goto on_error ; //<S2SV> } //<S2SV> return ( 1 ) ; //<S2SV> on_error : //<S2SV> if ( record_values -> data != NULL ) //<S2SV> { //<S2SV> libfvalue_value_free ( //<S2SV> & ( record_values -> data ) , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> if ( record_values -> strings != NULL ) //<S2SV> { //<S2SV> libfvalue_value_free ( //<S2SV> & ( record_values -> strings ) , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> if ( record_values -> user_security_identifier != NULL ) //<S2SV> { //<S2SV> libfvalue_value_free ( //<S2SV> & ( record_values -> user_security_identifier ) , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> if ( record_values -> computer_name != NULL ) //<S2SV> { //<S2SV> libfvalue_value_free ( //<S2SV> & ( record_values -> computer_name ) , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> if ( record_values -> source_name != NULL ) //<S2SV> { //<S2SV> libfvalue_value_free ( //<S2SV> & ( record_values -> source_name ) , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> return ( - 1 ) ; //<S2SV> } //<S2SV> 