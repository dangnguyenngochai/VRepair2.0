int oidc_oauth_check_userid ( request_rec * r , oidc_cfg * c ) { //<S2SV> if ( ! ap_is_initial_req ( r ) ) { //<S2SV> if ( r -> main != NULL ) //<S2SV> r -> user = r -> main -> user ; //<S2SV> else if ( r -> prev != NULL ) //<S2SV> r -> user = r -> prev -> user ; //<S2SV> if ( r -> user != NULL ) { //<S2SV> oidc_debug ( r , //<S2SV> "recycling<S2SV_blank>user<S2SV_blank>\'%s\'<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>request<S2SV_blank>for<S2SV_blank>sub-request" , //<S2SV> r -> user ) ; //<S2SV> return OK ; //<S2SV> } //<S2SV> } else if ( ( c -> redirect_uri != NULL ) //<S2SV> && ( oidc_util_request_matches_url ( r , c -> redirect_uri ) ) ) { //<S2SV> if ( oidc_util_request_has_parameter ( r , "jwks" ) ) { //<S2SV> return oidc_handle_jwks ( r , c ) ; //<S2SV> } //<S2SV> } //<S2SV> const char * access_token = NULL ; //<S2SV> if ( oidc_oauth_get_bearer_token ( r , & access_token ) == FALSE ) //<S2SV> return oidc_oauth_return_www_authenticate ( r , "invalid_request" , //<S2SV> "No<S2SV_blank>bearer<S2SV_blank>token<S2SV_blank>found<S2SV_blank>in<S2SV_blank>the<S2SV_blank>request" ) ; //<S2SV> json_t * token = NULL ; //<S2SV> char * s_token = NULL ; //<S2SV> if ( c -> oauth . introspection_endpoint_url != NULL ) { //<S2SV> if ( oidc_oauth_resolve_access_token ( r , c , access_token , & token , //<S2SV> & s_token ) == FALSE ) //<S2SV> return oidc_oauth_return_www_authenticate ( r , "invalid_token" , //<S2SV> "Reference<S2SV_blank>token<S2SV_blank>could<S2SV_blank>not<S2SV_blank>be<S2SV_blank>introspected" ) ; //<S2SV> } else { //<S2SV> if ( oidc_oauth_validate_jwt_access_token ( r , c , access_token , & token , //<S2SV> & s_token ) == FALSE ) //<S2SV> return oidc_oauth_return_www_authenticate ( r , "invalid_token" , //<S2SV> "JWT<S2SV_blank>token<S2SV_blank>could<S2SV_blank>not<S2SV_blank>be<S2SV_blank>validated" ) ; //<S2SV> } //<S2SV> if ( token == NULL ) { //<S2SV> oidc_error ( r , "could<S2SV_blank>not<S2SV_blank>resolve<S2SV_blank>claims<S2SV_blank>(token<S2SV_blank>==<S2SV_blank>NULL)" ) ; //<S2SV> return oidc_oauth_return_www_authenticate ( r , "invalid_token" , //<S2SV> "No<S2SV_blank>claims<S2SV_blank>could<S2SV_blank>be<S2SV_blank>parsed<S2SV_blank>from<S2SV_blank>the<S2SV_blank>token" ) ; //<S2SV> } //<S2SV> oidc_request_state_set ( r , OIDC_CLAIMS_SESSION_KEY , ( const char * ) s_token ) ; //<S2SV> if ( oidc_oauth_set_remote_user ( r , c , token ) == FALSE ) { //<S2SV> oidc_error ( r , //<S2SV> "remote<S2SV_blank>user<S2SV_blank>could<S2SV_blank>not<S2SV_blank>be<S2SV_blank>set,<S2SV_blank>aborting<S2SV_blank>with<S2SV_blank>HTTP_UNAUTHORIZED" ) ; //<S2SV> return oidc_oauth_return_www_authenticate ( r , "invalid_token" , //<S2SV> "Could<S2SV_blank>not<S2SV_blank>set<S2SV_blank>remote<S2SV_blank>user" ) ; //<S2SV> } //<S2SV> char * authn_header = oidc_cfg_dir_authn_header ( r ) ; //<S2SV> int pass_headers = oidc_cfg_dir_pass_info_in_headers ( r ) ; //<S2SV> int pass_envvars = oidc_cfg_dir_pass_info_in_envvars ( r ) ; //<S2SV> if ( ( r -> user != NULL ) && ( authn_header != NULL ) ) { //<S2SV> oidc_debug ( r , "setting<S2SV_blank>authn<S2SV_blank>header<S2SV_blank>(%s)<S2SV_blank>to:<S2SV_blank>%s" , authn_header , //<S2SV> r -> user ) ; //<S2SV> apr_table_set ( r -> headers_in , authn_header , r -> user ) ; //<S2SV> } //<S2SV> oidc_util_set_app_infos ( r , token , c -> claim_prefix , c -> claim_delimiter , //<S2SV> pass_headers , pass_envvars ) ; //<S2SV> if ( access_token != NULL ) { //<S2SV> oidc_util_set_app_info ( r , "access_token" , access_token , //<S2SV> OIDC_DEFAULT_HEADER_PREFIX , pass_headers , pass_envvars ) ; //<S2SV> } //<S2SV> json_decref ( token ) ; //<S2SV> return OK ; //<S2SV> } //<S2SV> 