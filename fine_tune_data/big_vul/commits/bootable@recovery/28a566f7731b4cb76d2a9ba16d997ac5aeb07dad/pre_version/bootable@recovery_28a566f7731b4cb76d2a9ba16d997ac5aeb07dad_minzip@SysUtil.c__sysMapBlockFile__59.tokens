static int sysMapBlockFile ( FILE * mapf , MemMapping * pMap ) //<S2SV> { //<S2SV> char block_dev [ PATH_MAX + 1 ] ; //<S2SV> size_t size ; //<S2SV> unsigned int blksize ; //<S2SV> unsigned int blocks ; //<S2SV> unsigned int range_count ; //<S2SV> unsigned int i ; //<S2SV> if ( fgets ( block_dev , sizeof ( block_dev ) , mapf ) == NULL ) { //<S2SV> LOGW ( "failed<S2SV_blank>to<S2SV_blank>read<S2SV_blank>block<S2SV_blank>device<S2SV_blank>from<S2SV_blank>header\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < sizeof ( block_dev ) ; ++ i ) { //<S2SV> if ( block_dev [ i ] == '\\n' ) { //<S2SV> block_dev [ i ] = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( fscanf ( mapf , "%zu<S2SV_blank>%u\\n%u\\n" , & size , & blksize , & range_count ) != 3 ) { //<S2SV> LOGW ( "failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>block<S2SV_blank>map<S2SV_blank>header\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> blocks = ( ( size - 1 ) / blksize ) + 1 ; //<S2SV> pMap -> range_count = range_count ; //<S2SV> pMap -> ranges = malloc ( range_count * sizeof ( MappedRange ) ) ; //<S2SV> memset ( pMap -> ranges , 0 , range_count * sizeof ( MappedRange ) ) ; //<S2SV> unsigned char * reserve ; //<S2SV> reserve = mmap64 ( NULL , blocks * blksize , PROT_NONE , MAP_PRIVATE | MAP_ANON , - 1 , 0 ) ; //<S2SV> if ( reserve == MAP_FAILED ) { //<S2SV> LOGW ( "failed<S2SV_blank>to<S2SV_blank>reserve<S2SV_blank>address<S2SV_blank>space:<S2SV_blank>%s\\n" , strerror ( errno ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> pMap -> ranges [ range_count - 1 ] . addr = reserve ; //<S2SV> pMap -> ranges [ range_count - 1 ] . length = blocks * blksize ; //<S2SV> int fd = open ( block_dev , O_RDONLY ) ; //<S2SV> if ( fd < 0 ) { //<S2SV> LOGW ( "failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>block<S2SV_blank>device<S2SV_blank>%s:<S2SV_blank>%s\\n" , block_dev , strerror ( errno ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> unsigned char * next = reserve ; //<S2SV> for ( i = 0 ; i < range_count ; ++ i ) { //<S2SV> int start , end ; //<S2SV> if ( fscanf ( mapf , "%d<S2SV_blank>%d\\n" , & start , & end ) != 2 ) { //<S2SV> LOGW ( "failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>range<S2SV_blank>%d<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map\\n" , i ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> void * addr = mmap64 ( next , ( end - start ) * blksize , PROT_READ , MAP_PRIVATE | MAP_FIXED , fd , ( ( off64_t ) start ) * blksize ) ; //<S2SV> if ( addr == MAP_FAILED ) { //<S2SV> LOGW ( "failed<S2SV_blank>to<S2SV_blank>map<S2SV_blank>block<S2SV_blank>%d:<S2SV_blank>%s\\n" , i , strerror ( errno ) ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> pMap -> ranges [ i ] . addr = addr ; //<S2SV> pMap -> ranges [ i ] . length = ( end - start ) * blksize ; //<S2SV> next += pMap -> ranges [ i ] . length ; //<S2SV> } //<S2SV> pMap -> addr = reserve ; //<S2SV> pMap -> length = size ; //<S2SV> LOGI ( "mmapped<S2SV_blank>%d<S2SV_blank>ranges\\n" , range_count ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 