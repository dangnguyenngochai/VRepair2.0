int main ( int argc , char * argv [ ] ) //<S2SV> { //<S2SV> int ret ; //<S2SV> struct lxc_lock * lock ; //<S2SV> lock = lxc_newlock ( NULL , NULL ) ; //<S2SV> if ( ! lock ) { //<S2SV> fprintf ( stderr , "%d:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>unnamed<S2SV_blank>lock\\n" , __LINE__ ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> ret = lxclock ( lock , 0 ) ; //<S2SV> if ( ret ) { //<S2SV> fprintf ( stderr , "%d:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>take<S2SV_blank>unnamed<S2SV_blank>lock<S2SV_blank>(%d)\\n" , __LINE__ , ret ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> ret = lxcunlock ( lock ) ; //<S2SV> if ( ret ) { //<S2SV> fprintf ( stderr , "%d:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>put<S2SV_blank>unnamed<S2SV_blank>lock<S2SV_blank>(%d)\\n" , __LINE__ , ret ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> lxc_putlock ( lock ) ; //<S2SV> lock = lxc_newlock ( "/var/lib/lxc" , mycontainername ) ; //<S2SV> if ( ! lock ) { //<S2SV> fprintf ( stderr , "%d:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>lock\\n" , __LINE__ ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> struct stat sb ; //<S2SV> char * pathname = RUNTIME_PATH "/lock/lxc/var/lib/lxc/" ; //<S2SV> ret = stat ( pathname , & sb ) ; //<S2SV> if ( ret != 0 ) { //<S2SV> fprintf ( stderr , "%d:<S2SV_blank>filename<S2SV_blank>%s<S2SV_blank>not<S2SV_blank>created\\n" , __LINE__ , //<S2SV> pathname ) ; //<S2SV> exit ( 1 ) ; //<S2SV> } //<S2SV> lxc_putlock ( lock ) ; //<S2SV> test_two_locks ( ) ; //<S2SV> fprintf ( stderr , "all<S2SV_blank>tests<S2SV_blank>passed\\n" ) ; //<S2SV> exit ( ret ) ; //<S2SV> } //<S2SV> 