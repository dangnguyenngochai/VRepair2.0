static int rename_in_ns ( int pid , char * oldname , char * * newnamep ) //<S2SV> { //<S2SV> uid_t ruid , suid , euid ; //<S2SV> int fret = - 1 ; //<S2SV> int fd = - 1 , ifindex = - 1 , ofd = - 1 , ret ; //<S2SV> bool grab_newname = false ; //<S2SV> ofd = lxc_preserve_ns ( getpid ( ) , "net" ) ; //<S2SV> if ( ofd < 0 ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , getpid ( ) ) ; //<S2SV> return fret ; //<S2SV> } //<S2SV> fd = lxc_preserve_ns ( pid , "net" ) ; //<S2SV> if ( fd < 0 ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , pid ) ; //<S2SV> goto do_partial_cleanup ; //<S2SV> } //<S2SV> ret = getresuid ( & ruid , & euid , & suid ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>retrieve<S2SV_blank>real,<S2SV_blank>effective,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>" //<S2SV> "user<S2SV_blank>IDs:<S2SV_blank>%s\\n" , //<S2SV> strerror ( errno ) ) ; //<S2SV> goto do_partial_cleanup ; //<S2SV> } //<S2SV> ret = setns ( fd , CLONE_NEWNET ) ; //<S2SV> close ( fd ) ; //<S2SV> fd = - 1 ; //<S2SV> if ( ret < 0 ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>the<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>of<S2SV_blank>" //<S2SV> "the<S2SV_blank>container<S2SV_blank>with<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , //<S2SV> pid , strerror ( errno ) ) ; //<S2SV> goto do_partial_cleanup ; //<S2SV> } //<S2SV> ret = setresuid ( ruid , ruid , 0 ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>drop<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" //<S2SV> "user<S2SV_blank>id<S2SV_blank>and<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" //<S2SV> "ID<S2SV_blank>to<S2SV_blank>0:<S2SV_blank>%s.\\n" , //<S2SV> ruid , strerror ( errno ) ) ; //<S2SV> goto do_full_cleanup ; //<S2SV> } //<S2SV> if ( ! * newnamep ) { //<S2SV> grab_newname = true ; //<S2SV> * newnamep = VETH_DEF_NAME ; //<S2SV> ifindex = if_nametoindex ( oldname ) ; //<S2SV> if ( ! ifindex ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>netdev<S2SV_blank>index:<S2SV_blank>%s.\\n" , strerror ( errno ) ) ; //<S2SV> goto do_full_cleanup ; //<S2SV> } //<S2SV> } //<S2SV> ret = lxc_netdev_rename_by_name ( oldname , * newnamep ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> usernic_error ( "Error<S2SV_blank>%d<S2SV_blank>renaming<S2SV_blank>netdev<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>in<S2SV_blank>container.\\n" , ret , oldname , * newnamep ) ; //<S2SV> goto do_full_cleanup ; //<S2SV> } //<S2SV> if ( grab_newname ) { //<S2SV> char ifname [ IFNAMSIZ ] ; //<S2SV> char * namep = ifname ; //<S2SV> if ( ! if_indextoname ( ifindex , namep ) ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>new<S2SV_blank>netdev<S2SV_blank>name:<S2SV_blank>%s.\\n" , strerror ( errno ) ) ; //<S2SV> goto do_full_cleanup ; //<S2SV> } //<S2SV> * newnamep = strdup ( namep ) ; //<S2SV> if ( ! * newnamep ) //<S2SV> goto do_full_cleanup ; //<S2SV> } //<S2SV> fret = 0 ; //<S2SV> do_full_cleanup : //<S2SV> ret = setresuid ( ruid , euid , suid ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>restore<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" //<S2SV> "user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" //<S2SV> "ID<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>%s.\\n" , //<S2SV> ruid , euid , suid , strerror ( errno ) ) ; //<S2SV> fret = - 1 ; //<S2SV> } //<S2SV> ret = setns ( ofd , CLONE_NEWNET ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>original<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>" //<S2SV> "of<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , //<S2SV> ofd , strerror ( errno ) ) ; //<S2SV> fret = - 1 ; //<S2SV> } //<S2SV> do_partial_cleanup : //<S2SV> if ( fd >= 0 ) //<S2SV> close ( fd ) ; //<S2SV> close ( ofd ) ; //<S2SV> return fret ; //<S2SV> } //<S2SV> 