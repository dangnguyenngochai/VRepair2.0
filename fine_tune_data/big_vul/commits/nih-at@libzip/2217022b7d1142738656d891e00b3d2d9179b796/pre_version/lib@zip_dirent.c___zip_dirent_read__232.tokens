zip_int64_t //<S2SV> _zip_dirent_read ( zip_dirent_t * zde , zip_source_t * src , zip_buffer_t * buffer , bool local , zip_error_t * error ) //<S2SV> { //<S2SV> zip_uint8_t buf [ CDENTRYSIZE ] ; //<S2SV> zip_uint16_t dostime , dosdate ; //<S2SV> zip_uint32_t size , variable_size ; //<S2SV> zip_uint16_t filename_len , comment_len , ef_len ; //<S2SV> bool from_buffer = ( buffer != NULL ) ; //<S2SV> size = local ? LENTRYSIZE : CDENTRYSIZE ; //<S2SV> if ( buffer ) { //<S2SV> if ( _zip_buffer_left ( buffer ) < size ) { //<S2SV> zip_error_set ( error , ZIP_ER_NOZIP , 0 ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> else { //<S2SV> if ( ( buffer = _zip_buffer_new_from_source ( src , size , buf , error ) ) == NULL ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( memcmp ( _zip_buffer_get ( buffer , 4 ) , ( local ? LOCAL_MAGIC : CENTRAL_MAGIC ) , 4 ) != 0 ) { //<S2SV> zip_error_set ( error , ZIP_ER_NOZIP , 0 ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> _zip_dirent_init ( zde ) ; //<S2SV> if ( ! local ) //<S2SV> zde -> version_madeby = _zip_buffer_get_16 ( buffer ) ; //<S2SV> else //<S2SV> zde -> version_madeby = 0 ; //<S2SV> zde -> version_needed = _zip_buffer_get_16 ( buffer ) ; //<S2SV> zde -> bitflags = _zip_buffer_get_16 ( buffer ) ; //<S2SV> zde -> comp_method = _zip_buffer_get_16 ( buffer ) ; //<S2SV> dostime = _zip_buffer_get_16 ( buffer ) ; //<S2SV> dosdate = _zip_buffer_get_16 ( buffer ) ; //<S2SV> zde -> last_mod = _zip_d2u_time ( dostime , dosdate ) ; //<S2SV> zde -> crc = _zip_buffer_get_32 ( buffer ) ; //<S2SV> zde -> comp_size = _zip_buffer_get_32 ( buffer ) ; //<S2SV> zde -> uncomp_size = _zip_buffer_get_32 ( buffer ) ; //<S2SV> filename_len = _zip_buffer_get_16 ( buffer ) ; //<S2SV> ef_len = _zip_buffer_get_16 ( buffer ) ; //<S2SV> if ( local ) { //<S2SV> comment_len = 0 ; //<S2SV> zde -> disk_number = 0 ; //<S2SV> zde -> int_attrib = 0 ; //<S2SV> zde -> ext_attrib = 0 ; //<S2SV> zde -> offset = 0 ; //<S2SV> } else { //<S2SV> comment_len = _zip_buffer_get_16 ( buffer ) ; //<S2SV> zde -> disk_number = _zip_buffer_get_16 ( buffer ) ; //<S2SV> zde -> int_attrib = _zip_buffer_get_16 ( buffer ) ; //<S2SV> zde -> ext_attrib = _zip_buffer_get_32 ( buffer ) ; //<S2SV> zde -> offset = _zip_buffer_get_32 ( buffer ) ; //<S2SV> } //<S2SV> if ( ! _zip_buffer_ok ( buffer ) ) { //<S2SV> zip_error_set ( error , ZIP_ER_INTERNAL , 0 ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( zde -> bitflags & ZIP_GPBF_ENCRYPTED ) { //<S2SV> if ( zde -> bitflags & ZIP_GPBF_STRONG_ENCRYPTION ) { //<S2SV> zde -> encryption_method = ZIP_EM_UNKNOWN ; //<S2SV> } //<S2SV> else { //<S2SV> zde -> encryption_method = ZIP_EM_TRAD_PKWARE ; //<S2SV> } //<S2SV> } //<S2SV> else { //<S2SV> zde -> encryption_method = ZIP_EM_NONE ; //<S2SV> } //<S2SV> zde -> filename = NULL ; //<S2SV> zde -> extra_fields = NULL ; //<S2SV> zde -> comment = NULL ; //<S2SV> variable_size = ( zip_uint32_t ) filename_len + ( zip_uint32_t ) ef_len + ( zip_uint32_t ) comment_len ; //<S2SV> if ( from_buffer ) { //<S2SV> if ( _zip_buffer_left ( buffer ) < variable_size ) { //<S2SV> zip_error_set ( error , ZIP_ER_INCONS , 0 ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> else { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> if ( ( buffer = _zip_buffer_new_from_source ( src , variable_size , NULL , error ) ) == NULL ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( filename_len ) { //<S2SV> zde -> filename = _zip_read_string ( buffer , src , filename_len , 1 , error ) ; //<S2SV> if ( ! zde -> filename ) { //<S2SV> if ( zip_error_code_zip ( error ) == ZIP_ER_EOF ) { //<S2SV> zip_error_set ( error , ZIP_ER_INCONS , 0 ) ; //<S2SV> } //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( zde -> bitflags & ZIP_GPBF_ENCODING_UTF_8 ) { //<S2SV> if ( _zip_guess_encoding ( zde -> filename , ZIP_ENCODING_UTF8_KNOWN ) == ZIP_ENCODING_ERROR ) { //<S2SV> zip_error_set ( error , ZIP_ER_INCONS , 0 ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ef_len ) { //<S2SV> zip_uint8_t * ef = _zip_read_data ( buffer , src , ef_len , 0 , error ) ; //<S2SV> if ( ef == NULL ) { //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! _zip_ef_parse ( ef , ef_len , local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL , & zde -> extra_fields , error ) ) { //<S2SV> free ( ef ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> free ( ef ) ; //<S2SV> if ( local ) //<S2SV> zde -> local_extra_fields_read = 1 ; //<S2SV> } //<S2SV> if ( comment_len ) { //<S2SV> zde -> comment = _zip_read_string ( buffer , src , comment_len , 0 , error ) ; //<S2SV> if ( ! zde -> comment ) { //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( zde -> bitflags & ZIP_GPBF_ENCODING_UTF_8 ) { //<S2SV> if ( _zip_guess_encoding ( zde -> comment , ZIP_ENCODING_UTF8_KNOWN ) == ZIP_ENCODING_ERROR ) { //<S2SV> zip_error_set ( error , ZIP_ER_INCONS , 0 ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> zde -> filename = _zip_dirent_process_ef_utf_8 ( zde , ZIP_EF_UTF_8_NAME , zde -> filename ) ; //<S2SV> zde -> comment = _zip_dirent_process_ef_utf_8 ( zde , ZIP_EF_UTF_8_COMMENT , zde -> comment ) ; //<S2SV> if ( zde -> uncomp_size == ZIP_UINT32_MAX || zde -> comp_size == ZIP_UINT32_MAX || zde -> offset == ZIP_UINT32_MAX ) { //<S2SV> zip_uint16_t got_len ; //<S2SV> zip_buffer_t * ef_buffer ; //<S2SV> const zip_uint8_t * ef = _zip_ef_get_by_id ( zde -> extra_fields , & got_len , ZIP_EF_ZIP64 , 0 , local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL , error ) ; //<S2SV> if ( ef == NULL ) { //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ( ef_buffer = _zip_buffer_new ( ( zip_uint8_t * ) ef , got_len ) ) == NULL ) { //<S2SV> zip_error_set ( error , ZIP_ER_MEMORY , 0 ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( zde -> uncomp_size == ZIP_UINT32_MAX ) //<S2SV> zde -> uncomp_size = _zip_buffer_get_64 ( ef_buffer ) ; //<S2SV> else if ( local ) { //<S2SV> ( void ) _zip_buffer_skip ( ef_buffer , 8 ) ; //<S2SV> } //<S2SV> if ( zde -> comp_size == ZIP_UINT32_MAX ) //<S2SV> zde -> comp_size = _zip_buffer_get_64 ( ef_buffer ) ; //<S2SV> if ( ! local ) { //<S2SV> if ( zde -> offset == ZIP_UINT32_MAX ) //<S2SV> zde -> offset = _zip_buffer_get_64 ( ef_buffer ) ; //<S2SV> if ( zde -> disk_number == ZIP_UINT16_MAX ) //<S2SV> zde -> disk_number = _zip_buffer_get_32 ( buffer ) ; //<S2SV> } //<S2SV> if ( ! _zip_buffer_eof ( ef_buffer ) ) { //<S2SV> zip_error_set ( error , ZIP_ER_INCONS , 0 ) ; //<S2SV> _zip_buffer_free ( ef_buffer ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> _zip_buffer_free ( ef_buffer ) ; //<S2SV> } //<S2SV> if ( ! _zip_buffer_ok ( buffer ) ) { //<S2SV> zip_error_set ( error , ZIP_ER_INTERNAL , 0 ) ; //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> if ( zde -> offset > ZIP_INT64_MAX ) { //<S2SV> zip_error_set ( error , ZIP_ER_SEEK , EFBIG ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! _zip_dirent_process_winzip_aes ( zde , error ) ) { //<S2SV> if ( ! from_buffer ) { //<S2SV> _zip_buffer_free ( buffer ) ; //<S2SV> } //<S2SV> return - 1 ; //<S2SV> } //<S2SV> zde -> extra_fields = _zip_ef_remove_internal ( zde -> extra_fields ) ; //<S2SV> return ( zip_int64_t ) ( size + variable_size ) ; //<S2SV> } //<S2SV> 