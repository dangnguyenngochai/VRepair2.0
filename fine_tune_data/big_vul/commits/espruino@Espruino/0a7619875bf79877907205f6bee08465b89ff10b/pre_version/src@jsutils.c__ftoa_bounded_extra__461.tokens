void ftoa_bounded_extra ( JsVarFloat val , char * str , size_t len , int radix , int fractionalDigits ) { //<S2SV> const JsVarFloat stopAtError = 0.0000001 ; //<S2SV> if ( isnan ( val ) ) strncpy ( str , "NaN" , len ) ; //<S2SV> else if ( ! isfinite ( val ) ) { //<S2SV> if ( val < 0 ) strncpy ( str , "-Infinity" , len ) ; //<S2SV> else strncpy ( str , "Infinity" , len ) ; //<S2SV> } else { //<S2SV> if ( val < 0 ) { //<S2SV> if ( -- len <= 0 ) { * str = 0 ; return ; } //<S2SV> * ( str ++ ) = '-' ; //<S2SV> val = - val ; //<S2SV> } //<S2SV> if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) //<S2SV> val = ( JsVarFloat ) ( 1 + ( JsVarInt ) val ) ; //<S2SV> JsVarFloat d = 1 ; //<S2SV> while ( d * radix <= val ) d *= radix ; //<S2SV> while ( d >= 1 ) { //<S2SV> int v = ( int ) ( val / d ) ; //<S2SV> val -= v * d ; //<S2SV> if ( -- len <= 0 ) { * str = 0 ; return ; } //<S2SV> * ( str ++ ) = itoch ( v ) ; //<S2SV> d /= radix ; //<S2SV> } //<S2SV> # ifndef USE_NO_FLOATS //<S2SV> if ( ( ( fractionalDigits < 0 ) && val > 0 ) || fractionalDigits > 0 ) { //<S2SV> bool hasPt = false ; //<S2SV> val *= radix ; //<S2SV> while ( ( ( fractionalDigits < 0 ) && ( fractionalDigits > - 12 ) && ( val > stopAtError ) ) || ( fractionalDigits > 0 ) ) { //<S2SV> int v = ( int ) ( val + ( ( fractionalDigits == 1 ) ? 0.4 : 0.00000001 ) ) ; //<S2SV> val = ( val - v ) * radix ; //<S2SV> if ( v == radix ) v = radix - 1 ; //<S2SV> if ( ! hasPt ) { //<S2SV> hasPt = true ; //<S2SV> if ( -- len <= 0 ) { * str = 0 ; return ; } //<S2SV> * ( str ++ ) = '.' ; //<S2SV> } //<S2SV> if ( -- len <= 0 ) { * str = 0 ; return ; } //<S2SV> * ( str ++ ) = itoch ( v ) ; //<S2SV> fractionalDigits -- ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> * ( str ++ ) = 0 ; //<S2SV> } //<S2SV> } //<S2SV> 