ret_t //<S2SV> cherokee_validator_ldap_check ( cherokee_validator_ldap_t * ldap , //<S2SV> cherokee_connection_t * conn ) //<S2SV> { //<S2SV> int re ; //<S2SV> ret_t ret ; //<S2SV> size_t size ; //<S2SV> char * dn ; //<S2SV> LDAPMessage * message ; //<S2SV> LDAPMessage * first ; //<S2SV> char * attrs [ ] = { LDAP_NO_ATTRS , NULL } ; //<S2SV> cherokee_validator_ldap_props_t * props = VAL_LDAP_PROP ( ldap ) ; //<S2SV> if ( ( conn -> validator == NULL ) || //<S2SV> cherokee_buffer_is_empty ( & conn -> validator -> user ) || //<S2SV> cherokee_buffer_is_empty ( & conn -> validator -> passwd ) ) //<S2SV> return ret_error ; //<S2SV> size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user , 0 , "*()" ) ; //<S2SV> if ( size != conn -> validator -> user . len ) //<S2SV> return ret_error ; //<S2SV> ret = init_filter ( ldap , props , conn ) ; //<S2SV> if ( ret != ret_ok ) //<S2SV> return ret ; //<S2SV> re = ldap_search_s ( ldap -> conn , props -> basedn . buf , LDAP_SCOPE_SUBTREE , ldap -> filter . buf , attrs , 0 , & message ) ; //<S2SV> if ( re != LDAP_SUCCESS ) { //<S2SV> LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH , //<S2SV> props -> filter . buf ? props -> filter . buf : "" ) ; //<S2SV> return ret_error ; //<S2SV> } //<S2SV> TRACE ( ENTRIES , "subtree<S2SV_blank>search<S2SV_blank>(%s):<S2SV_blank>done\\n" , ldap -> filter . buf ? ldap -> filter . buf : "" ) ; //<S2SV> re = ldap_count_entries ( ldap -> conn , message ) ; //<S2SV> if ( re != 1 ) { //<S2SV> ldap_msgfree ( message ) ; //<S2SV> return ret_not_found ; //<S2SV> } //<S2SV> first = ldap_first_entry ( ldap -> conn , message ) ; //<S2SV> if ( first == NULL ) { //<S2SV> ldap_msgfree ( message ) ; //<S2SV> return ret_not_found ; //<S2SV> } //<S2SV> dn = ldap_get_dn ( ldap -> conn , first ) ; //<S2SV> if ( dn == NULL ) { //<S2SV> ldap_msgfree ( message ) ; //<S2SV> return ret_error ; //<S2SV> } //<S2SV> ldap_msgfree ( message ) ; //<S2SV> ret = validate_dn ( props , dn , conn -> validator -> passwd . buf ) ; //<S2SV> if ( ret != ret_ok ) //<S2SV> return ret ; //<S2SV> re = ldap_unbind_s ( ldap -> conn ) ; //<S2SV> if ( re != LDAP_SUCCESS ) //<S2SV> return ret_error ; //<S2SV> TRACE ( ENTRIES , "Access<S2SV_blank>to<S2SV_blank>use<S2SV_blank>%s<S2SV_blank>has<S2SV_blank>been<S2SV_blank>granted\\n" , conn -> validator -> user . buf ) ; //<S2SV> return ret_ok ; //<S2SV> } //<S2SV> 