void ourWriteOut ( CURL * curl , struct OutStruct * outs , const char * writeinfo ) //<S2SV> { //<S2SV> FILE * stream = stdout ; //<S2SV> const char * ptr = writeinfo ; //<S2SV> char * stringp = NULL ; //<S2SV> long longinfo ; //<S2SV> double doubleinfo ; //<S2SV> while ( ptr && * ptr ) { //<S2SV> if ( '%' == * ptr && ptr [ 1 ] ) { //<S2SV> if ( '%' == ptr [ 1 ] ) { //<S2SV> fputc ( '%' , stream ) ; //<S2SV> ptr += 2 ; //<S2SV> } //<S2SV> else { //<S2SV> char * end ; //<S2SV> char keepit ; //<S2SV> int i ; //<S2SV> if ( '{' == ptr [ 1 ] ) { //<S2SV> bool match = FALSE ; //<S2SV> end = strchr ( ptr , '}' ) ; //<S2SV> ptr += 2 ; //<S2SV> if ( ! end ) { //<S2SV> fputs ( "%{" , stream ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> keepit = * end ; //<S2SV> * end = 0 ; //<S2SV> for ( i = 0 ; replacements [ i ] . name ; i ++ ) { //<S2SV> if ( curl_strequal ( ptr , replacements [ i ] . name ) ) { //<S2SV> match = TRUE ; //<S2SV> switch ( replacements [ i ] . id ) { //<S2SV> case VAR_EFFECTIVE_URL : //<S2SV> if ( ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_EFFECTIVE_URL , & stringp ) ) //<S2SV> && stringp ) //<S2SV> fputs ( stringp , stream ) ; //<S2SV> break ; //<S2SV> case VAR_HTTP_CODE : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_RESPONSE_CODE , & longinfo ) ) //<S2SV> fprintf ( stream , "%03ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_HTTP_CODE_PROXY : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_HTTP_CONNECTCODE , //<S2SV> & longinfo ) ) //<S2SV> fprintf ( stream , "%03ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_HEADER_SIZE : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_HEADER_SIZE , & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_REQUEST_SIZE : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_REQUEST_SIZE , & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_NUM_CONNECTS : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_NUM_CONNECTS , & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_REDIRECT_COUNT : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_REDIRECT_COUNT , & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_REDIRECT_TIME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_REDIRECT_TIME , //<S2SV> & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.6f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_TOTAL_TIME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_TOTAL_TIME , & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.6f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_NAMELOOKUP_TIME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_NAMELOOKUP_TIME , //<S2SV> & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.6f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_CONNECT_TIME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_CONNECT_TIME , & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.6f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_APPCONNECT_TIME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_APPCONNECT_TIME , //<S2SV> & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.6f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_PRETRANSFER_TIME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_PRETRANSFER_TIME , //<S2SV> & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.6f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_STARTTRANSFER_TIME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_STARTTRANSFER_TIME , //<S2SV> & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.6f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_SIZE_UPLOAD : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_SIZE_UPLOAD , & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.0f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_SIZE_DOWNLOAD : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_SIZE_DOWNLOAD , //<S2SV> & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.0f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_SPEED_DOWNLOAD : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_SPEED_DOWNLOAD , //<S2SV> & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.3f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_SPEED_UPLOAD : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_SPEED_UPLOAD , & doubleinfo ) ) //<S2SV> fprintf ( stream , "%.3f" , doubleinfo ) ; //<S2SV> break ; //<S2SV> case VAR_CONTENT_TYPE : //<S2SV> if ( ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_CONTENT_TYPE , & stringp ) ) //<S2SV> && stringp ) //<S2SV> fputs ( stringp , stream ) ; //<S2SV> break ; //<S2SV> case VAR_FTP_ENTRY_PATH : //<S2SV> if ( ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_FTP_ENTRY_PATH , & stringp ) ) //<S2SV> && stringp ) //<S2SV> fputs ( stringp , stream ) ; //<S2SV> break ; //<S2SV> case VAR_REDIRECT_URL : //<S2SV> if ( ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_REDIRECT_URL , & stringp ) ) //<S2SV> && stringp ) //<S2SV> fputs ( stringp , stream ) ; //<S2SV> break ; //<S2SV> case VAR_SSL_VERIFY_RESULT : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_SSL_VERIFYRESULT , //<S2SV> & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_PROXY_SSL_VERIFY_RESULT : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_PROXY_SSL_VERIFYRESULT , //<S2SV> & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_EFFECTIVE_FILENAME : //<S2SV> if ( outs -> filename ) //<S2SV> fprintf ( stream , "%s" , outs -> filename ) ; //<S2SV> break ; //<S2SV> case VAR_PRIMARY_IP : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_PRIMARY_IP , //<S2SV> & stringp ) ) //<S2SV> fprintf ( stream , "%s" , stringp ) ; //<S2SV> break ; //<S2SV> case VAR_PRIMARY_PORT : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_PRIMARY_PORT , //<S2SV> & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_LOCAL_IP : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_LOCAL_IP , //<S2SV> & stringp ) ) //<S2SV> fprintf ( stream , "%s" , stringp ) ; //<S2SV> break ; //<S2SV> case VAR_LOCAL_PORT : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_LOCAL_PORT , //<S2SV> & longinfo ) ) //<S2SV> fprintf ( stream , "%ld" , longinfo ) ; //<S2SV> break ; //<S2SV> case VAR_HTTP_VERSION : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_HTTP_VERSION , //<S2SV> & longinfo ) ) { //<S2SV> const char * version = "0" ; //<S2SV> switch ( longinfo ) { //<S2SV> case CURL_HTTP_VERSION_1_0 : //<S2SV> version = "1.0" ; //<S2SV> break ; //<S2SV> case CURL_HTTP_VERSION_1_1 : //<S2SV> version = "1.1" ; //<S2SV> break ; //<S2SV> case CURL_HTTP_VERSION_2_0 : //<S2SV> version = "2" ; //<S2SV> break ; //<S2SV> } //<S2SV> fprintf ( stream , version ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case VAR_SCHEME : //<S2SV> if ( CURLE_OK == //<S2SV> curl_easy_getinfo ( curl , CURLINFO_SCHEME , //<S2SV> & stringp ) ) //<S2SV> fprintf ( stream , "%s" , stringp ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! match ) { //<S2SV> fprintf ( stderr , "curl:<S2SV_blank>unknown<S2SV_blank>--write-out<S2SV_blank>variable:<S2SV_blank>\'%s\'\\n" , ptr ) ; //<S2SV> } //<S2SV> ptr = end + 1 ; //<S2SV> * end = keepit ; //<S2SV> } //<S2SV> else { //<S2SV> fputc ( '%' , stream ) ; //<S2SV> fputc ( ptr [ 1 ] , stream ) ; //<S2SV> ptr += 2 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else if ( '\\\\' == * ptr ) { //<S2SV> switch ( ptr [ 1 ] ) { //<S2SV> case 'r' : //<S2SV> fputc ( '\\r' , stream ) ; //<S2SV> break ; //<S2SV> case 'n' : //<S2SV> fputc ( '\\n' , stream ) ; //<S2SV> break ; //<S2SV> case 't' : //<S2SV> fputc ( '\\t' , stream ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> fputc ( * ptr , stream ) ; //<S2SV> fputc ( ptr [ 1 ] , stream ) ; //<S2SV> break ; //<S2SV> } //<S2SV> ptr += 2 ; //<S2SV> } //<S2SV> else { //<S2SV> fputc ( * ptr , stream ) ; //<S2SV> ptr ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 