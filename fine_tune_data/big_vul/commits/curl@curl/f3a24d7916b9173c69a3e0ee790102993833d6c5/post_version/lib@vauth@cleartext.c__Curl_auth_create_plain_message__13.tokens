CURLcode Curl_auth_create_plain_message ( struct Curl_easy * data , //<S2SV> const char * userp , //<S2SV> const char * passwdp , //<S2SV> char * * outptr , size_t * outlen ) //<S2SV> { //<S2SV> CURLcode result ; //<S2SV> char * plainauth ; //<S2SV> size_t ulen ; //<S2SV> size_t plen ; //<S2SV> size_t plainlen ; //<S2SV> * outlen = 0 ; //<S2SV> * outptr = NULL ; //<S2SV> ulen = strlen ( userp ) ; //<S2SV> plen = strlen ( passwdp ) ; //<S2SV> if ( ( ulen > SIZE_T_MAX / 4 ) || ( plen > ( SIZE_T_MAX / 2 - 2 ) ) ) //<S2SV> return CURLE_OUT_OF_MEMORY ; //<S2SV> plainlen = 2 * ulen + plen + 2 ; //<S2SV> plainauth = malloc ( plainlen ) ; //<S2SV> if ( ! plainauth ) //<S2SV> return CURLE_OUT_OF_MEMORY ; //<S2SV> memcpy ( plainauth , userp , ulen ) ; //<S2SV> plainauth [ ulen ] = '\\0' ; //<S2SV> memcpy ( plainauth + ulen + 1 , userp , ulen ) ; //<S2SV> plainauth [ 2 * ulen + 1 ] = '\\0' ; //<S2SV> memcpy ( plainauth + 2 * ulen + 2 , passwdp , plen ) ; //<S2SV> result = Curl_base64_encode ( data , plainauth , plainlen , outptr , outlen ) ; //<S2SV> free ( plainauth ) ; //<S2SV> return result ; //<S2SV> } //<S2SV> 