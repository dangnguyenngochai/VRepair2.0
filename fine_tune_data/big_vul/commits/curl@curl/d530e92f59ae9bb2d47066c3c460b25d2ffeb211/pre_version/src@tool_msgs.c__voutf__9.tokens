static void voutf ( struct GlobalConfig * config , //<S2SV> const char * prefix , //<S2SV> const char * fmt , //<S2SV> va_list ap ) //<S2SV> { //<S2SV> size_t width = ( 79 - strlen ( prefix ) ) ; //<S2SV> if ( ! config -> mute ) { //<S2SV> size_t len ; //<S2SV> char * ptr ; //<S2SV> char * print_buffer ; //<S2SV> print_buffer = curlx_mvaprintf ( fmt , ap ) ; //<S2SV> if ( ! print_buffer ) //<S2SV> return ; //<S2SV> len = strlen ( print_buffer ) ; //<S2SV> ptr = print_buffer ; //<S2SV> while ( len > 0 ) { //<S2SV> fputs ( prefix , config -> errors ) ; //<S2SV> if ( len > width ) { //<S2SV> size_t cut = width - 1 ; //<S2SV> while ( ! ISSPACE ( ptr [ cut ] ) && cut ) { //<S2SV> cut -- ; //<S2SV> } //<S2SV> if ( 0 == cut ) //<S2SV> cut = width - 1 ; //<S2SV> ( void ) fwrite ( ptr , cut + 1 , 1 , config -> errors ) ; //<S2SV> fputs ( "\\n" , config -> errors ) ; //<S2SV> ptr += cut + 1 ; //<S2SV> len -= cut ; //<S2SV> } //<S2SV> else { //<S2SV> fputs ( ptr , config -> errors ) ; //<S2SV> len = 0 ; //<S2SV> } //<S2SV> } //<S2SV> curl_free ( print_buffer ) ; //<S2SV> } //<S2SV> } //<S2SV> 