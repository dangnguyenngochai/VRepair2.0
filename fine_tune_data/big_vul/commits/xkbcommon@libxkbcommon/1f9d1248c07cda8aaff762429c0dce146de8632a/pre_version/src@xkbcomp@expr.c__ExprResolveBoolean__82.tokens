bool //<S2SV> ExprResolveBoolean ( struct xkb_context * ctx , const ExprDef * expr , //<S2SV> bool * set_rtrn ) //<S2SV> { //<S2SV> bool ok = false ; //<S2SV> const char * ident ; //<S2SV> switch ( expr -> expr . op ) { //<S2SV> case EXPR_VALUE : //<S2SV> if ( expr -> expr . value_type != EXPR_TYPE_BOOLEAN ) { //<S2SV> log_err ( ctx , //<S2SV> "Found<S2SV_blank>constant<S2SV_blank>of<S2SV_blank>type<S2SV_blank>%s<S2SV_blank>where<S2SV_blank>boolean<S2SV_blank>was<S2SV_blank>expected\\n" , //<S2SV> expr_value_type_to_string ( expr -> expr . value_type ) ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> * set_rtrn = expr -> boolean . set ; //<S2SV> return true ; //<S2SV> case EXPR_IDENT : //<S2SV> ident = xkb_atom_text ( ctx , expr -> ident . ident ) ; //<S2SV> if ( ident ) { //<S2SV> if ( istreq ( ident , "true" ) || //<S2SV> istreq ( ident , "yes" ) || //<S2SV> istreq ( ident , "on" ) ) { //<S2SV> * set_rtrn = true ; //<S2SV> return true ; //<S2SV> } //<S2SV> else if ( istreq ( ident , "false" ) || //<S2SV> istreq ( ident , "no" ) || //<S2SV> istreq ( ident , "off" ) ) { //<S2SV> * set_rtrn = false ; //<S2SV> return true ; //<S2SV> } //<S2SV> } //<S2SV> log_err ( ctx , "Identifier<S2SV_blank>\\"%s\\"<S2SV_blank>of<S2SV_blank>type<S2SV_blank>boolean<S2SV_blank>is<S2SV_blank>unknown\\n" , ident ) ; //<S2SV> return false ; //<S2SV> case EXPR_FIELD_REF : //<S2SV> log_err ( ctx , "Default<S2SV_blank>\\"%s.%s\\"<S2SV_blank>of<S2SV_blank>type<S2SV_blank>boolean<S2SV_blank>is<S2SV_blank>unknown\\n" , //<S2SV> xkb_atom_text ( ctx , expr -> field_ref . element ) , //<S2SV> xkb_atom_text ( ctx , expr -> field_ref . field ) ) ; //<S2SV> return false ; //<S2SV> case EXPR_INVERT : //<S2SV> case EXPR_NOT : //<S2SV> ok = ExprResolveBoolean ( ctx , expr , set_rtrn ) ; //<S2SV> if ( ok ) //<S2SV> * set_rtrn = ! * set_rtrn ; //<S2SV> return ok ; //<S2SV> case EXPR_ADD : //<S2SV> case EXPR_SUBTRACT : //<S2SV> case EXPR_MULTIPLY : //<S2SV> case EXPR_DIVIDE : //<S2SV> case EXPR_ASSIGN : //<S2SV> case EXPR_NEGATE : //<S2SV> case EXPR_UNARY_PLUS : //<S2SV> log_err ( ctx , "%s<S2SV_blank>of<S2SV_blank>boolean<S2SV_blank>values<S2SV_blank>not<S2SV_blank>permitted\\n" , //<S2SV> expr_op_type_to_string ( expr -> expr . op ) ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> log_wsgo ( ctx , "Unknown<S2SV_blank>operator<S2SV_blank>%d<S2SV_blank>in<S2SV_blank>ResolveBoolean\\n" , //<S2SV> expr -> expr . op ) ; //<S2SV> break ; //<S2SV> } //<S2SV> return false ; //<S2SV> } //<S2SV> 