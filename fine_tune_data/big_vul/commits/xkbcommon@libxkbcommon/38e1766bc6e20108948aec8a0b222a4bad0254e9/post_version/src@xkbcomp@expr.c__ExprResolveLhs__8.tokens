bool //<S2SV> ExprResolveLhs ( struct xkb_context * ctx , const ExprDef * expr , //<S2SV> const char * * elem_rtrn , const char * * field_rtrn , //<S2SV> ExprDef * * index_rtrn ) //<S2SV> { //<S2SV> switch ( expr -> expr . op ) { //<S2SV> case EXPR_IDENT : //<S2SV> * elem_rtrn = NULL ; //<S2SV> * field_rtrn = xkb_atom_text ( ctx , expr -> ident . ident ) ; //<S2SV> * index_rtrn = NULL ; //<S2SV> return ( * field_rtrn != NULL ) ; //<S2SV> case EXPR_FIELD_REF : //<S2SV> * elem_rtrn = xkb_atom_text ( ctx , expr -> field_ref . element ) ; //<S2SV> * field_rtrn = xkb_atom_text ( ctx , expr -> field_ref . field ) ; //<S2SV> * index_rtrn = NULL ; //<S2SV> return true ; //<S2SV> case EXPR_ARRAY_REF : //<S2SV> * elem_rtrn = xkb_atom_text ( ctx , expr -> array_ref . element ) ; //<S2SV> * field_rtrn = xkb_atom_text ( ctx , expr -> array_ref . field ) ; //<S2SV> * index_rtrn = expr -> array_ref . entry ; //<S2SV> return true ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> log_wsgo ( ctx , "Unexpected<S2SV_blank>operator<S2SV_blank>%d<S2SV_blank>in<S2SV_blank>ResolveLhs\\n" , expr -> expr . op ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> 