static bool //<S2SV> CopyKeyAliasesToKeymap ( struct xkb_keymap * keymap , KeyNamesInfo * info ) //<S2SV> { //<S2SV> AliasInfo * alias ; //<S2SV> unsigned i , num_key_aliases ; //<S2SV> struct xkb_key_alias * key_aliases ; //<S2SV> num_key_aliases = 0 ; //<S2SV> darray_foreach ( alias , info -> aliases ) { //<S2SV> if ( ! XkbKeyByName ( keymap , alias -> real , false ) ) { //<S2SV> log_vrb ( info -> ctx , 5 , //<S2SV> "Attempt<S2SV_blank>to<S2SV_blank>alias<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>non-existent<S2SV_blank>key<S2SV_blank>%s;<S2SV_blank>Ignored\\n" , //<S2SV> KeyNameText ( info -> ctx , alias -> alias ) , //<S2SV> KeyNameText ( info -> ctx , alias -> real ) ) ; //<S2SV> alias -> real = XKB_ATOM_NONE ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( XkbKeyByName ( keymap , alias -> alias , false ) ) { //<S2SV> log_vrb ( info -> ctx , 5 , //<S2SV> "Attempt<S2SV_blank>to<S2SV_blank>create<S2SV_blank>alias<S2SV_blank>with<S2SV_blank>the<S2SV_blank>name<S2SV_blank>of<S2SV_blank>a<S2SV_blank>real<S2SV_blank>key;<S2SV_blank>" //<S2SV> "Alias<S2SV_blank>\\"%s<S2SV_blank>=<S2SV_blank>%s\\"<S2SV_blank>ignored\\n" , //<S2SV> KeyNameText ( info -> ctx , alias -> alias ) , //<S2SV> KeyNameText ( info -> ctx , alias -> real ) ) ; //<S2SV> alias -> real = XKB_ATOM_NONE ; //<S2SV> continue ; //<S2SV> } //<S2SV> num_key_aliases ++ ; //<S2SV> } //<S2SV> key_aliases = NULL ; //<S2SV> if ( num_key_aliases > 0 ) { //<S2SV> key_aliases = calloc ( num_key_aliases , sizeof ( * key_aliases ) ) ; //<S2SV> if ( ! key_aliases ) //<S2SV> return false ; //<S2SV> i = 0 ; //<S2SV> darray_foreach ( alias , info -> aliases ) { //<S2SV> if ( alias -> real != XKB_ATOM_NONE ) { //<S2SV> key_aliases [ i ] . alias = alias -> alias ; //<S2SV> key_aliases [ i ] . real = alias -> real ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> keymap -> num_key_aliases = num_key_aliases ; //<S2SV> keymap -> key_aliases = key_aliases ; //<S2SV> return true ; //<S2SV> } //<S2SV> 