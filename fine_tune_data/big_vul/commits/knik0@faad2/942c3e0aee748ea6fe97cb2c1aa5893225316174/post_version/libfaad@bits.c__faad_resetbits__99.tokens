void faad_resetbits ( bitfile * ld , int bits ) //<S2SV> { //<S2SV> uint32_t tmp ; //<S2SV> int words = bits >> 5 ; //<S2SV> int remainder = bits & 0x1F ; //<S2SV> if ( ld -> buffer_size < words * 4 ) //<S2SV> ld -> bytes_left = 0 ; //<S2SV> else //<S2SV> ld -> bytes_left = ld -> buffer_size - words * 4 ; //<S2SV> if ( ld -> bytes_left >= 4 ) //<S2SV> { //<S2SV> tmp = getdword ( & ld -> start [ words ] ) ; //<S2SV> ld -> bytes_left -= 4 ; //<S2SV> } else { //<S2SV> tmp = getdword_n ( & ld -> start [ words ] , ld -> bytes_left ) ; //<S2SV> ld -> bytes_left = 0 ; //<S2SV> } //<S2SV> ld -> bufa = tmp ; //<S2SV> if ( ld -> bytes_left >= 4 ) //<S2SV> { //<S2SV> tmp = getdword ( & ld -> start [ words + 1 ] ) ; //<S2SV> ld -> bytes_left -= 4 ; //<S2SV> } else { //<S2SV> tmp = getdword_n ( & ld -> start [ words + 1 ] , ld -> bytes_left ) ; //<S2SV> ld -> bytes_left = 0 ; //<S2SV> } //<S2SV> ld -> bufb = tmp ; //<S2SV> ld -> bits_left = 32 - remainder ; //<S2SV> ld -> tail = & ld -> start [ words + 2 ] ; //<S2SV> ld -> error = 0 ; //<S2SV> } //<S2SV> 