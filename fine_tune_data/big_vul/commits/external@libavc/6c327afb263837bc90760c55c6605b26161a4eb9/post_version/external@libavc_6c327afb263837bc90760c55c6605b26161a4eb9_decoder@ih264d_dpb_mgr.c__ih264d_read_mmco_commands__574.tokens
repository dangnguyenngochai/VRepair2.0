WORD32 ih264d_read_mmco_commands ( struct _DecStruct * ps_dec ) //<S2SV> { //<S2SV> dec_bit_stream_t * ps_bitstrm = ps_dec -> ps_bitstrm ; //<S2SV> dpb_commands_t * ps_dpb_cmds = & ( ps_dec -> s_dpb_cmds_scratch ) ; //<S2SV> dec_slice_params_t * ps_slice = ps_dec -> ps_cur_slice ; //<S2SV> WORD32 j ; //<S2SV> UWORD8 u1_buf_mode ; //<S2SV> struct MMCParams * ps_mmc_params ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_dec -> ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> u4_ofst ; //<S2SV> UWORD32 u4_bit_ofst = ps_dec -> ps_bitstrm -> u4_ofst ; //<S2SV> ps_slice -> u1_mmco_equalto5 = 0 ; //<S2SV> { //<S2SV> if ( ps_dec -> u1_nal_unit_type == IDR_SLICE_NAL ) //<S2SV> { //<S2SV> ps_slice -> u1_no_output_of_prior_pics_flag = //<S2SV> ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>no_output_of_prior_pics_flag" , //<S2SV> ps_slice -> u1_no_output_of_prior_pics_flag ) ; //<S2SV> ps_slice -> u1_long_term_reference_flag = ih264d_get_bit_h264 ( //<S2SV> ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>long_term_reference_flag" , //<S2SV> ps_slice -> u1_long_term_reference_flag ) ; //<S2SV> ps_dpb_cmds -> u1_idr_pic = 1 ; //<S2SV> ps_dpb_cmds -> u1_no_output_of_prior_pics_flag = //<S2SV> ps_slice -> u1_no_output_of_prior_pics_flag ; //<S2SV> ps_dpb_cmds -> u1_long_term_reference_flag = //<S2SV> ps_slice -> u1_long_term_reference_flag ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> u1_buf_mode = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>adaptive_ref_pic_buffering_flag" , u1_buf_mode ) ; //<S2SV> ps_dpb_cmds -> u1_buf_mode = u1_buf_mode ; //<S2SV> j = 0 ; //<S2SV> if ( u1_buf_mode == 1 ) //<S2SV> { //<S2SV> UWORD32 u4_mmco ; //<S2SV> UWORD32 u4_diff_pic_num ; //<S2SV> UWORD32 u4_lt_idx , u4_max_lt_idx ; //<S2SV> u4_mmco = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> while ( u4_mmco != END_OF_MMCO ) //<S2SV> { //<S2SV> if ( j >= MAX_REF_BUFS ) //<S2SV> { //<S2SV> # ifdef __ANDROID__ //<S2SV> ALOGE ( "b/25818142" ) ; //<S2SV> android_errorWriteLog ( 0x534e4554 , "25818142" ) ; //<S2SV> # endif //<S2SV> ps_dpb_cmds -> u1_num_of_commands = 0 ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ps_mmc_params = & ps_dpb_cmds -> as_mmc_params [ j ] ; //<S2SV> ps_mmc_params -> u4_mmco = u4_mmco ; //<S2SV> switch ( u4_mmco ) //<S2SV> { //<S2SV> case MARK_ST_PICNUM_AS_NONREF : //<S2SV> u4_diff_pic_num = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> ps_mmc_params -> u4_diff_pic_num = u4_diff_pic_num ; //<S2SV> break ; //<S2SV> case MARK_LT_INDEX_AS_NONREF : //<S2SV> u4_lt_idx = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> ps_mmc_params -> u4_lt_idx = u4_lt_idx ; //<S2SV> break ; //<S2SV> case MARK_ST_PICNUM_AS_LT_INDEX : //<S2SV> u4_diff_pic_num = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> ps_mmc_params -> u4_diff_pic_num = u4_diff_pic_num ; //<S2SV> u4_lt_idx = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> ps_mmc_params -> u4_lt_idx = u4_lt_idx ; //<S2SV> break ; //<S2SV> case SET_MAX_LT_INDEX : //<S2SV> { //<S2SV> u4_max_lt_idx = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> ps_mmc_params -> u4_max_lt_idx_plus1 = u4_max_lt_idx ; //<S2SV> break ; //<S2SV> } //<S2SV> case RESET_REF_PICTURES : //<S2SV> { //<S2SV> ps_slice -> u1_mmco_equalto5 = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> case SET_LT_INDEX : //<S2SV> u4_lt_idx = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> ps_mmc_params -> u4_lt_idx = u4_lt_idx ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> u4_mmco = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> j ++ ; //<S2SV> } //<S2SV> ps_dpb_cmds -> u1_num_of_commands = j ; //<S2SV> } //<S2SV> } //<S2SV> ps_dpb_cmds -> u1_dpb_commands_read = 1 ; //<S2SV> ps_dpb_cmds -> u1_dpb_commands_read_slc = 1 ; //<S2SV> } //<S2SV> u4_bit_ofst = ps_dec -> ps_bitstrm -> u4_ofst - u4_bit_ofst ; //<S2SV> return u4_bit_ofst ; //<S2SV> } //<S2SV> 