WORD32 ih264d_parse_decode_slice ( UWORD8 u1_is_idr_slice , //<S2SV> UWORD8 u1_nal_ref_idc , //<S2SV> dec_struct_t * ps_dec //<S2SV> ) //<S2SV> { //<S2SV> dec_bit_stream_t * ps_bitstrm = ps_dec -> ps_bitstrm ; //<S2SV> dec_pic_params_t * ps_pps ; //<S2SV> dec_seq_params_t * ps_seq ; //<S2SV> dec_slice_params_t * ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> pocstruct_t s_tmp_poc ; //<S2SV> WORD32 i_delta_poc [ 2 ] ; //<S2SV> WORD32 i4_poc = 0 ; //<S2SV> UWORD16 u2_first_mb_in_slice , u2_frame_num ; //<S2SV> UWORD8 u1_field_pic_flag , u1_redundant_pic_cnt = 0 , u1_slice_type ; //<S2SV> UWORD32 u4_idr_pic_id = 0 ; //<S2SV> UWORD8 u1_bottom_field_flag , u1_pic_order_cnt_type ; //<S2SV> UWORD8 u1_nal_unit_type ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> u4_ofst ; //<S2SV> WORD8 i1_is_end_of_poc ; //<S2SV> WORD32 ret , end_of_frame ; //<S2SV> WORD32 prev_slice_err , num_mb_skipped ; //<S2SV> UWORD8 u1_mbaff ; //<S2SV> pocstruct_t * ps_cur_poc ; //<S2SV> UWORD32 u4_temp ; //<S2SV> WORD32 i_temp ; //<S2SV> UWORD32 u4_call_end_of_pic = 0 ; //<S2SV> ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read_slc = 0 ; //<S2SV> u2_first_mb_in_slice = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> if ( u2_first_mb_in_slice //<S2SV> > ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) ) //<S2SV> { //<S2SV> return ERROR_CORRUPTED_SLICE ; //<S2SV> } //<S2SV> if ( ( ( u2_first_mb_in_slice << ps_cur_slice -> u1_mbaff_frame_flag ) //<S2SV> <= ps_dec -> u2_cur_mb_addr ) && ( ps_dec -> u4_first_slice_in_pic == 0 ) ) //<S2SV> { //<S2SV> return ERROR_CORRUPTED_SLICE ; //<S2SV> } //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>first_mb_in_slice" , u2_first_mb_in_slice ) ; //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > 9 ) //<S2SV> return ERROR_INV_SLC_TYPE_T ; //<S2SV> u1_slice_type = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>slice_type" , ( u1_slice_type ) ) ; //<S2SV> ps_dec -> u1_sl_typ_5_9 = 0 ; //<S2SV> if ( u1_slice_type > 4 ) //<S2SV> { //<S2SV> u1_slice_type -= 5 ; //<S2SV> ps_dec -> u1_sl_typ_5_9 = 1 ; //<S2SV> } //<S2SV> { //<S2SV> UWORD32 skip ; //<S2SV> if ( ( ps_dec -> i4_app_skip_mode == IVD_SKIP_PB ) //<S2SV> || ( ps_dec -> i4_dec_skip_mode == IVD_SKIP_PB ) ) //<S2SV> { //<S2SV> UWORD32 u4_bit_stream_offset = 0 ; //<S2SV> if ( ps_dec -> u1_nal_unit_type == IDR_SLICE_NAL ) //<S2SV> { //<S2SV> skip = 0 ; //<S2SV> ps_dec -> i4_dec_skip_mode = IVD_SKIP_NONE ; //<S2SV> } //<S2SV> else if ( ( I_SLICE == u1_slice_type ) //<S2SV> && ( 1 >= ps_dec -> ps_cur_sps -> u1_num_ref_frames ) ) //<S2SV> { //<S2SV> skip = 0 ; //<S2SV> ps_dec -> i4_dec_skip_mode = IVD_SKIP_NONE ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> skip = 1 ; //<S2SV> } //<S2SV> if ( ( 0 == u2_first_mb_in_slice ) && ( 1 == ps_dec -> u4_prev_nal_skipped ) ) //<S2SV> { //<S2SV> skip = 0 ; //<S2SV> } //<S2SV> if ( skip ) //<S2SV> { //<S2SV> ps_dec -> u4_prev_nal_skipped = 1 ; //<S2SV> ps_dec -> i4_dec_skip_mode = IVD_SKIP_PB ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( 1 == ps_dec -> u4_prev_nal_skipped ) //<S2SV> { //<S2SV> ps_dec -> u4_return_to_app = 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp & MASK_ERR_PIC_SET_ID ) //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>pic_parameter_set_id" , u4_temp ) ; //<S2SV> ps_pps = & ps_dec -> ps_pps [ u4_temp ] ; //<S2SV> if ( FALSE == ps_pps -> u1_is_valid ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> ps_seq = ps_pps -> ps_sps ; //<S2SV> if ( ! ps_seq ) //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> if ( FALSE == ps_seq -> u1_is_valid ) //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> u2_frame_num = ih264d_get_bits_h264 ( ps_bitstrm , //<S2SV> ps_seq -> u1_bits_in_frm_num ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>frame_num" , u2_frame_num ) ; //<S2SV> if ( ! ps_seq -> u1_frame_mbs_only_flag ) //<S2SV> { //<S2SV> u1_field_pic_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>field_pic_flag" , u1_field_pic_flag ) ; //<S2SV> u1_bottom_field_flag = 0 ; //<S2SV> if ( u1_field_pic_flag ) //<S2SV> { //<S2SV> ps_dec -> pu1_inv_scan = ( UWORD8 * ) gau1_ih264d_inv_scan_fld ; //<S2SV> u1_bottom_field_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>bottom_field_flag" , u1_bottom_field_flag ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> pu1_inv_scan = ( UWORD8 * ) gau1_ih264d_inv_scan ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> u1_field_pic_flag = 0 ; //<S2SV> u1_bottom_field_flag = 0 ; //<S2SV> ps_dec -> pu1_inv_scan = ( UWORD8 * ) gau1_ih264d_inv_scan ; //<S2SV> } //<S2SV> u1_nal_unit_type = SLICE_NAL ; //<S2SV> if ( u1_is_idr_slice ) //<S2SV> { //<S2SV> if ( 0 == u1_field_pic_flag ) //<S2SV> { //<S2SV> ps_dec -> u1_top_bottom_decoded = TOP_FIELD_ONLY | BOT_FIELD_ONLY ; //<S2SV> } //<S2SV> u1_nal_unit_type = IDR_SLICE_NAL ; //<S2SV> u4_idr_pic_id = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> if ( u4_idr_pic_id > 65535 ) //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank><S2SV_blank>" , u4_idr_pic_id ) ; //<S2SV> } //<S2SV> i_delta_poc [ 0 ] = i_delta_poc [ 1 ] = 0 ; //<S2SV> s_tmp_poc . i4_pic_order_cnt_lsb = 0 ; //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt_bottom = 0 ; //<S2SV> u1_pic_order_cnt_type = ps_seq -> u1_pic_order_cnt_type ; //<S2SV> if ( u1_pic_order_cnt_type == 0 ) //<S2SV> { //<S2SV> i_temp = ih264d_get_bits_h264 ( //<S2SV> ps_bitstrm , //<S2SV> ps_seq -> u1_log2_max_pic_order_cnt_lsb_minus ) ; //<S2SV> if ( i_temp < 0 || i_temp >= ps_seq -> i4_max_pic_order_cntLsb ) //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> s_tmp_poc . i4_pic_order_cnt_lsb = i_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>pic_order_cnt_lsb" , s_tmp_poc . i4_pic_order_cnt_lsb ) ; //<S2SV> if ( ( ps_pps -> u1_pic_order_present_flag == 1 ) && ( ! u1_field_pic_flag ) ) //<S2SV> { //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt_bottom = ih264d_sev ( //<S2SV> pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>delta_pic_order_cnt_bottom" , //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt_bottom ) ; //<S2SV> } //<S2SV> } //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 0 ] = 0 ; //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 1 ] = 0 ; //<S2SV> if ( u1_pic_order_cnt_type == 1 //<S2SV> && ( ! ps_seq -> u1_delta_pic_order_always_zero_flag ) ) //<S2SV> { //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 0 ] = ih264d_sev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>delta_pic_order_cnt[0]" , //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 0 ] ) ; //<S2SV> if ( ps_pps -> u1_pic_order_present_flag && ! u1_field_pic_flag ) //<S2SV> { //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 1 ] = ih264d_sev ( //<S2SV> pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>delta_pic_order_cnt[1]" , //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 1 ] ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_pps -> u1_redundant_pic_cnt_present_flag ) //<S2SV> { //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > MAX_REDUNDANT_PIC_CNT ) //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> u1_redundant_pic_cnt = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>redundant_pic_cnt" , u1_redundant_pic_cnt ) ; //<S2SV> } //<S2SV> i1_is_end_of_poc = 1 ; //<S2SV> ps_dec -> ps_dec_err_status -> u1_err_flag &= MASK_REJECT_CUR_PIC ; //<S2SV> if ( ps_dec -> u4_first_slice_in_pic != 2 ) //<S2SV> { //<S2SV> i1_is_end_of_poc = ih264d_is_end_of_pic ( u2_frame_num , u1_nal_ref_idc , //<S2SV> & s_tmp_poc , & ps_dec -> s_cur_pic_poc , //<S2SV> ps_cur_slice , u1_pic_order_cnt_type , //<S2SV> u1_nal_unit_type , u4_idr_pic_id , //<S2SV> u1_field_pic_flag , //<S2SV> u1_bottom_field_flag ) ; //<S2SV> } //<S2SV> u1_mbaff = ps_seq -> u1_mb_aff_flag && ( ! u1_field_pic_flag ) ; //<S2SV> prev_slice_err = 0 ; //<S2SV> if ( i1_is_end_of_poc || ps_dec -> u1_first_slice_in_stream ) //<S2SV> { //<S2SV> if ( u2_frame_num != ps_dec -> u2_prv_frame_num //<S2SV> && ps_dec -> u1_top_bottom_decoded != 0 //<S2SV> && ps_dec -> u1_top_bottom_decoded //<S2SV> != ( TOP_FIELD_ONLY | BOT_FIELD_ONLY ) ) //<S2SV> { //<S2SV> ps_dec -> u1_dangling_field = 1 ; //<S2SV> if ( ps_dec -> u4_first_slice_in_pic ) //<S2SV> { //<S2SV> prev_slice_err = 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> prev_slice_err = 2 ; //<S2SV> } //<S2SV> if ( ps_dec -> u1_top_bottom_decoded == TOP_FIELD_ONLY ) //<S2SV> ps_cur_slice -> u1_bottom_field_flag = 1 ; //<S2SV> else //<S2SV> ps_cur_slice -> u1_bottom_field_flag = 0 ; //<S2SV> num_mb_skipped = ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) //<S2SV> - ps_dec -> u2_total_mbs_coded ; //<S2SV> ps_cur_poc = & ps_dec -> s_cur_pic_poc ; //<S2SV> u1_is_idr_slice = ps_cur_slice -> u1_nal_unit_type == IDR_SLICE_NAL ; //<S2SV> } //<S2SV> else if ( ps_dec -> u4_first_slice_in_pic == 2 ) //<S2SV> { //<S2SV> if ( u2_first_mb_in_slice > 0 ) //<S2SV> { //<S2SV> prev_slice_err = 1 ; //<S2SV> num_mb_skipped = u2_first_mb_in_slice << u1_mbaff ; //<S2SV> ps_cur_poc = & s_tmp_poc ; //<S2SV> ps_cur_slice -> u4_idr_pic_id = u4_idr_pic_id ; //<S2SV> ps_cur_slice -> u1_field_pic_flag = u1_field_pic_flag ; //<S2SV> ps_cur_slice -> u1_bottom_field_flag = u1_bottom_field_flag ; //<S2SV> ps_cur_slice -> i4_pic_order_cnt_lsb = //<S2SV> s_tmp_poc . i4_pic_order_cnt_lsb ; //<S2SV> ps_cur_slice -> u1_nal_unit_type = u1_nal_unit_type ; //<S2SV> ps_cur_slice -> u1_redundant_pic_cnt = u1_redundant_pic_cnt ; //<S2SV> ps_cur_slice -> u1_nal_ref_idc = u1_nal_ref_idc ; //<S2SV> ps_cur_slice -> u1_pic_order_cnt_type = u1_pic_order_cnt_type ; //<S2SV> ps_cur_slice -> u1_mbaff_frame_flag = ps_seq -> u1_mb_aff_flag //<S2SV> && ( ! u1_field_pic_flag ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ps_dec -> u4_first_slice_in_pic ) //<S2SV> { //<S2SV> prev_slice_err = 1 ; //<S2SV> num_mb_skipped = u2_first_mb_in_slice << u1_mbaff ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> prev_slice_err = 2 ; //<S2SV> num_mb_skipped = ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) //<S2SV> - ps_dec -> u2_total_mbs_coded ; //<S2SV> } //<S2SV> ps_cur_poc = & s_tmp_poc ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ( u2_first_mb_in_slice << u1_mbaff ) > ps_dec -> u2_total_mbs_coded ) //<S2SV> { //<S2SV> prev_slice_err = 2 ; //<S2SV> num_mb_skipped = ( u2_first_mb_in_slice << u1_mbaff ) //<S2SV> - ps_dec -> u2_total_mbs_coded ; //<S2SV> ps_cur_poc = & s_tmp_poc ; //<S2SV> } //<S2SV> else if ( ( u2_first_mb_in_slice << u1_mbaff ) < ps_dec -> u2_total_mbs_coded ) //<S2SV> { //<S2SV> return ERROR_CORRUPTED_SLICE ; //<S2SV> } //<S2SV> } //<S2SV> if ( prev_slice_err ) //<S2SV> { //<S2SV> ret = ih264d_mark_err_slice_skip ( ps_dec , num_mb_skipped , u1_is_idr_slice , u2_frame_num , ps_cur_poc , prev_slice_err ) ; //<S2SV> if ( ps_dec -> u1_dangling_field == 1 ) //<S2SV> { //<S2SV> ps_dec -> u1_second_field = 1 - ps_dec -> u1_second_field ; //<S2SV> ps_cur_slice -> u1_bottom_field_flag = u1_bottom_field_flag ; //<S2SV> ps_dec -> u2_prv_frame_num = u2_frame_num ; //<S2SV> ps_dec -> u1_first_slice_in_stream = 0 ; //<S2SV> return ERROR_DANGLING_FIELD_IN_PIC ; //<S2SV> } //<S2SV> if ( prev_slice_err == 2 ) //<S2SV> { //<S2SV> ps_dec -> u1_first_slice_in_stream = 0 ; //<S2SV> return ERROR_INCOMPLETE_FRAME ; //<S2SV> } //<S2SV> if ( ps_dec -> u2_total_mbs_coded //<S2SV> >= ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) //<S2SV> { //<S2SV> ps_dec -> u1_first_slice_in_stream = 0 ; //<S2SV> return ERROR_IN_LAST_SLICE_OF_PIC ; //<S2SV> } //<S2SV> if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) //<S2SV> { //<S2SV> ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; //<S2SV> return ERROR_NEW_FRAME_EXPECTED ; //<S2SV> } //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> i1_is_end_of_poc = 0 ; //<S2SV> } //<S2SV> if ( ps_dec -> u4_first_slice_in_pic == 0 ) //<S2SV> { //<S2SV> ps_dec -> ps_parse_cur_slice ++ ; //<S2SV> ps_dec -> u2_cur_slice_num ++ ; //<S2SV> } //<S2SV> if ( ( ps_dec -> u1_separate_parse == 0 ) && ( ps_dec -> u4_first_slice_in_pic == 0 ) ) //<S2SV> { //<S2SV> ps_dec -> ps_decode_cur_slice ++ ; //<S2SV> } //<S2SV> ps_dec -> u1_slice_header_done = 0 ; //<S2SV> if ( ! ps_dec -> u1_first_slice_in_stream ) //<S2SV> { //<S2SV> UWORD8 uc_mbs_exceed = 0 ; //<S2SV> if ( ps_dec -> u2_total_mbs_coded //<S2SV> == ( ps_dec -> ps_cur_sps -> u2_max_mb_addr + 1 ) ) //<S2SV> { //<S2SV> if ( ps_dec -> u4_first_slice_in_pic == 0 ) //<S2SV> uc_mbs_exceed = 1 ; //<S2SV> } //<S2SV> if ( i1_is_end_of_poc || uc_mbs_exceed ) //<S2SV> { //<S2SV> if ( 1 == ps_dec -> u1_last_pic_not_decoded ) //<S2SV> { //<S2SV> ret = ih264d_end_of_pic_dispbuf_mgr ( ps_dec ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ret = ih264d_end_of_pic ( ps_dec , u1_is_idr_slice , u2_frame_num ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> # if WIN32 //<S2SV> H264_DEC_DEBUG_PRINT ( "<S2SV_blank>------<S2SV_blank>PIC<S2SV_blank>SKIPPED<S2SV_blank>------\\n" ) ; //<S2SV> # endif //<S2SV> return RET_LAST_SKIP ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ret = ih264d_end_of_pic ( ps_dec , u1_is_idr_slice , u2_frame_num ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( u1_field_pic_flag ) //<S2SV> { //<S2SV> ps_dec -> u2_prv_frame_num = u2_frame_num ; //<S2SV> } //<S2SV> if ( ps_cur_slice -> u1_mmco_equalto5 ) //<S2SV> { //<S2SV> WORD32 i4_temp_poc ; //<S2SV> WORD32 i4_top_field_order_poc , i4_bot_field_order_poc ; //<S2SV> if ( ! ps_cur_slice -> u1_field_pic_flag ) //<S2SV> { //<S2SV> i4_top_field_order_poc = ps_dec -> ps_cur_pic -> i4_top_field_order_cnt ; //<S2SV> i4_bot_field_order_poc = //<S2SV> ps_dec -> ps_cur_pic -> i4_bottom_field_order_cnt ; //<S2SV> i4_temp_poc = MIN ( i4_top_field_order_poc , //<S2SV> i4_bot_field_order_poc ) ; //<S2SV> } //<S2SV> else if ( ! ps_cur_slice -> u1_bottom_field_flag ) //<S2SV> i4_temp_poc = ps_dec -> ps_cur_pic -> i4_top_field_order_cnt ; //<S2SV> else //<S2SV> i4_temp_poc = ps_dec -> ps_cur_pic -> i4_bottom_field_order_cnt ; //<S2SV> ps_dec -> ps_cur_pic -> i4_top_field_order_cnt = i4_temp_poc //<S2SV> - ps_dec -> ps_cur_pic -> i4_top_field_order_cnt ; //<S2SV> ps_dec -> ps_cur_pic -> i4_bottom_field_order_cnt = i4_temp_poc //<S2SV> - ps_dec -> ps_cur_pic -> i4_bottom_field_order_cnt ; //<S2SV> ps_dec -> ps_cur_pic -> i4_poc = i4_temp_poc ; //<S2SV> ps_dec -> ps_cur_pic -> i4_avg_poc = i4_temp_poc ; //<S2SV> } //<S2SV> if ( ps_dec -> u4_first_slice_in_pic == 2 ) //<S2SV> { //<S2SV> ret = ih264d_decode_pic_order_cnt ( u1_is_idr_slice , u2_frame_num , //<S2SV> & ps_dec -> s_prev_pic_poc , //<S2SV> & s_tmp_poc , ps_cur_slice , ps_pps , //<S2SV> u1_nal_ref_idc , //<S2SV> u1_bottom_field_flag , //<S2SV> u1_field_pic_flag , & i4_poc ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> if ( i4_poc >= ps_dec -> i4_max_poc ) //<S2SV> ps_dec -> i4_max_poc = i4_poc ; //<S2SV> if ( i4_poc == 0 ) //<S2SV> { //<S2SV> ps_dec -> i4_prev_max_display_seq = ps_dec -> i4_prev_max_display_seq //<S2SV> + ps_dec -> i4_max_poc //<S2SV> + ps_dec -> u1_max_dec_frame_buffering + 1 ; //<S2SV> ps_dec -> i4_max_poc = 0 ; //<S2SV> } //<S2SV> } //<S2SV> ps_cur_slice -> i4_delta_pic_order_cnt [ 0 ] = i_delta_poc [ 0 ] ; //<S2SV> ps_cur_slice -> i4_delta_pic_order_cnt [ 1 ] = i_delta_poc [ 1 ] ; //<S2SV> ps_cur_slice -> u4_idr_pic_id = u4_idr_pic_id ; //<S2SV> ps_cur_slice -> u2_first_mb_in_slice = u2_first_mb_in_slice ; //<S2SV> ps_cur_slice -> u1_field_pic_flag = u1_field_pic_flag ; //<S2SV> ps_cur_slice -> u1_bottom_field_flag = u1_bottom_field_flag ; //<S2SV> ps_cur_slice -> u1_slice_type = u1_slice_type ; //<S2SV> ps_cur_slice -> i4_pic_order_cnt_lsb = s_tmp_poc . i4_pic_order_cnt_lsb ; //<S2SV> ps_cur_slice -> u1_nal_unit_type = u1_nal_unit_type ; //<S2SV> ps_cur_slice -> u1_redundant_pic_cnt = u1_redundant_pic_cnt ; //<S2SV> ps_cur_slice -> u1_nal_ref_idc = u1_nal_ref_idc ; //<S2SV> ps_cur_slice -> u1_pic_order_cnt_type = u1_pic_order_cnt_type ; //<S2SV> if ( ps_seq -> u1_frame_mbs_only_flag ) //<S2SV> ps_cur_slice -> u1_direct_8x8_inference_flag = //<S2SV> ps_seq -> u1_direct_8x8_inference_flag ; //<S2SV> else //<S2SV> ps_cur_slice -> u1_direct_8x8_inference_flag = 1 ; //<S2SV> if ( u1_slice_type == B_SLICE ) //<S2SV> { //<S2SV> ps_cur_slice -> u1_direct_spatial_mv_pred_flag = ih264d_get_bit_h264 ( //<S2SV> ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>direct_spatial_mv_pred_flag" , //<S2SV> ps_cur_slice -> u1_direct_spatial_mv_pred_flag ) ; //<S2SV> if ( ps_cur_slice -> u1_direct_spatial_mv_pred_flag ) //<S2SV> ps_cur_slice -> pf_decodeDirect = ih264d_decode_spatial_direct ; //<S2SV> else //<S2SV> ps_cur_slice -> pf_decodeDirect = ih264d_decode_temporal_direct ; //<S2SV> if ( ! ( ( ps_pps -> ps_sps -> u1_mb_aff_flag ) && ( ! u1_field_pic_flag ) ) ) //<S2SV> ps_dec -> pf_mvpred = ih264d_mvpred_nonmbaffB ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ! ( ( ps_pps -> ps_sps -> u1_mb_aff_flag ) && ( ! u1_field_pic_flag ) ) ) //<S2SV> ps_dec -> pf_mvpred = ih264d_mvpred_nonmbaff ; //<S2SV> } //<S2SV> if ( ps_dec -> u4_first_slice_in_pic == 2 ) //<S2SV> { //<S2SV> if ( u2_first_mb_in_slice == 0 ) //<S2SV> { //<S2SV> ret = ih264d_start_of_pic ( ps_dec , i4_poc , & s_tmp_poc , u2_frame_num , ps_pps ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> } //<S2SV> ps_dec -> u4_output_present = 0 ; //<S2SV> { //<S2SV> ih264d_get_next_display_field ( ps_dec , //<S2SV> ps_dec -> ps_out_buffer , //<S2SV> & ( ps_dec -> s_disp_op ) ) ; //<S2SV> if ( 0 != ps_dec -> s_disp_op . u4_error_code ) //<S2SV> { //<S2SV> ps_dec -> u4_fmt_conv_cur_row = ps_dec -> s_disp_frame_info . u4_y_ht ; //<S2SV> } //<S2SV> else //<S2SV> ps_dec -> u4_output_present = 1 ; //<S2SV> } //<S2SV> if ( ps_dec -> u1_separate_parse == 1 ) //<S2SV> { //<S2SV> if ( ps_dec -> u4_dec_thread_created == 0 ) //<S2SV> { //<S2SV> ithread_create ( ps_dec -> pv_dec_thread_handle , NULL , //<S2SV> ( void * ) ih264d_decode_picture_thread , //<S2SV> ( void * ) ps_dec ) ; //<S2SV> ps_dec -> u4_dec_thread_created = 1 ; //<S2SV> } //<S2SV> if ( ( ps_dec -> u4_num_cores == 3 ) && //<S2SV> ( ( ps_dec -> u4_app_disable_deblk_frm == 0 ) || ps_dec -> i1_recon_in_thread3_flag ) //<S2SV> && ( ps_dec -> u4_bs_deblk_thread_created == 0 ) ) //<S2SV> { //<S2SV> ps_dec -> u4_start_recon_deblk = 0 ; //<S2SV> ithread_create ( ps_dec -> pv_bs_deblk_thread_handle , NULL , //<S2SV> ( void * ) ih264d_recon_deblk_thread , //<S2SV> ( void * ) ps_dec ) ; //<S2SV> ps_dec -> u4_bs_deblk_thread_created = 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> UWORD8 uc_nofield_nombaff ; //<S2SV> uc_nofield_nombaff = ( ( ps_dec -> ps_cur_slice -> u1_field_pic_flag == 0 ) //<S2SV> && ( ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag == 0 ) //<S2SV> && ( u1_slice_type != B_SLICE ) //<S2SV> && ( ps_dec -> ps_cur_pps -> u1_wted_pred_flag == 0 ) ) ; //<S2SV> if ( uc_nofield_nombaff ) //<S2SV> { //<S2SV> ps_dec -> p_form_mb_part_info = ih264d_form_mb_part_info_bp ; //<S2SV> ps_dec -> p_motion_compensate = ih264d_motion_compensate_bp ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> p_form_mb_part_info = ih264d_form_mb_part_info_mp ; //<S2SV> ps_dec -> p_motion_compensate = ih264d_motion_compensate_mp ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> dec_err_status_t * ps_err = ps_dec -> ps_dec_err_status ; //<S2SV> if ( ps_err -> u4_frm_sei_sync == u2_frame_num ) //<S2SV> { //<S2SV> ps_err -> u1_err_flag = ACCEPT_ALL_PICS ; //<S2SV> ps_err -> u4_frm_sei_sync = SYNC_FRM_DEFAULT ; //<S2SV> } //<S2SV> ps_err -> u4_cur_frm = u2_frame_num ; //<S2SV> } //<S2SV> { //<S2SV> WORD32 i4_skip_b_pic , i4_skip_p_pic ; //<S2SV> i4_skip_b_pic = ( ps_dec -> u4_skip_frm_mask & B_SLC_BIT ) //<S2SV> && ( B_SLICE == u1_slice_type ) && ( 0 == u1_nal_ref_idc ) ; //<S2SV> i4_skip_p_pic = ( ps_dec -> u4_skip_frm_mask & P_SLC_BIT ) //<S2SV> && ( P_SLICE == u1_slice_type ) && ( 0 == u1_nal_ref_idc ) ; //<S2SV> if ( i4_skip_b_pic ) //<S2SV> { //<S2SV> ps_dec -> ps_cur_pic -> u4_pack_slc_typ |= B_SLC_BIT ; //<S2SV> ps_dec -> u1_last_pic_not_decoded = 1 ; //<S2SV> return OK ; //<S2SV> } //<S2SV> if ( i4_skip_p_pic ) //<S2SV> { //<S2SV> ps_dec -> ps_cur_pic -> u4_pack_slc_typ |= P_SLC_BIT ; //<S2SV> ps_dec -> u1_last_pic_not_decoded = 1 ; //<S2SV> return OK ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> UWORD16 u2_mb_x , u2_mb_y ; //<S2SV> ps_dec -> i4_submb_ofst = ( ( u2_first_mb_in_slice //<S2SV> << ps_cur_slice -> u1_mbaff_frame_flag ) * SUB_BLK_SIZE ) //<S2SV> - SUB_BLK_SIZE ; //<S2SV> if ( u2_first_mb_in_slice ) //<S2SV> { //<S2SV> UWORD8 u1_mb_aff ; //<S2SV> UWORD8 u1_field_pic ; //<S2SV> UWORD16 u2_frm_wd_in_mbs ; //<S2SV> u2_frm_wd_in_mbs = ps_seq -> u2_frm_wd_in_mbs ; //<S2SV> u1_mb_aff = ps_cur_slice -> u1_mbaff_frame_flag ; //<S2SV> u1_field_pic = ps_cur_slice -> u1_field_pic_flag ; //<S2SV> { //<S2SV> UWORD32 x_offset ; //<S2SV> UWORD32 y_offset ; //<S2SV> UWORD32 u4_frame_stride ; //<S2SV> tfr_ctxt_t * ps_trns_addr ; //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ps_trns_addr = & ps_dec -> s_tran_addrecon_parse ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_trns_addr = & ps_dec -> s_tran_addrecon ; //<S2SV> } //<S2SV> u2_mb_x = MOD ( u2_first_mb_in_slice , u2_frm_wd_in_mbs ) ; //<S2SV> u2_mb_y = DIV ( u2_first_mb_in_slice , u2_frm_wd_in_mbs ) ; //<S2SV> u2_mb_y <<= u1_mb_aff ; //<S2SV> if ( ( u2_mb_x > u2_frm_wd_in_mbs - 1 ) //<S2SV> || ( u2_mb_y > ps_dec -> u2_frm_ht_in_mbs - 1 ) ) //<S2SV> { //<S2SV> return ERROR_CORRUPTED_SLICE ; //<S2SV> } //<S2SV> u4_frame_stride = ps_dec -> u2_frm_wd_y << u1_field_pic ; //<S2SV> x_offset = u2_mb_x << 4 ; //<S2SV> y_offset = ( u2_mb_y * u4_frame_stride ) << 4 ; //<S2SV> ps_trns_addr -> pu1_dest_y = ps_dec -> s_cur_pic . pu1_buf1 + x_offset //<S2SV> + y_offset ; //<S2SV> u4_frame_stride = ps_dec -> u2_frm_wd_uv << u1_field_pic ; //<S2SV> x_offset >>= 1 ; //<S2SV> y_offset = ( u2_mb_y * u4_frame_stride ) << 3 ; //<S2SV> x_offset *= YUV420SP_FACTOR ; //<S2SV> ps_trns_addr -> pu1_dest_u = ps_dec -> s_cur_pic . pu1_buf2 + x_offset //<S2SV> + y_offset ; //<S2SV> ps_trns_addr -> pu1_dest_v = ps_dec -> s_cur_pic . pu1_buf3 + x_offset //<S2SV> + y_offset ; //<S2SV> ps_trns_addr -> pu1_mb_y = ps_trns_addr -> pu1_dest_y ; //<S2SV> ps_trns_addr -> pu1_mb_u = ps_trns_addr -> pu1_dest_u ; //<S2SV> ps_trns_addr -> pu1_mb_v = ps_trns_addr -> pu1_dest_v ; //<S2SV> if ( ps_dec -> u1_separate_parse == 1 ) //<S2SV> { //<S2SV> ps_dec -> ps_deblk_mbn = ps_dec -> ps_deblk_pic //<S2SV> + ( u2_first_mb_in_slice << u1_mb_aff ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> ps_deblk_mbn = ps_dec -> ps_deblk_pic //<S2SV> + ( u2_first_mb_in_slice << u1_mb_aff ) ; //<S2SV> } //<S2SV> ps_dec -> u2_cur_mb_addr = ( u2_first_mb_in_slice << u1_mb_aff ) ; //<S2SV> ps_dec -> ps_mv_cur = ps_dec -> s_cur_pic . ps_mv //<S2SV> + ( ( u2_first_mb_in_slice << u1_mb_aff ) << 4 ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> tfr_ctxt_t * ps_trns_addr ; //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ps_trns_addr = & ps_dec -> s_tran_addrecon_parse ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_trns_addr = & ps_dec -> s_tran_addrecon ; //<S2SV> } //<S2SV> u2_mb_x = 0xffff ; //<S2SV> u2_mb_y = 0 ; //<S2SV> ps_dec -> u2_cur_mb_addr = 0 ; //<S2SV> ps_dec -> ps_deblk_mbn = ps_dec -> ps_deblk_pic ; //<S2SV> ps_dec -> ps_mv_cur = ps_dec -> s_cur_pic . ps_mv ; //<S2SV> ps_trns_addr -> pu1_dest_y = ps_dec -> s_cur_pic . pu1_buf1 ; //<S2SV> ps_trns_addr -> pu1_dest_u = ps_dec -> s_cur_pic . pu1_buf2 ; //<S2SV> ps_trns_addr -> pu1_dest_v = ps_dec -> s_cur_pic . pu1_buf3 ; //<S2SV> ps_trns_addr -> pu1_mb_y = ps_trns_addr -> pu1_dest_y ; //<S2SV> ps_trns_addr -> pu1_mb_u = ps_trns_addr -> pu1_dest_u ; //<S2SV> ps_trns_addr -> pu1_mb_v = ps_trns_addr -> pu1_dest_v ; //<S2SV> } //<S2SV> ps_dec -> ps_part = ps_dec -> ps_parse_part_params ; //<S2SV> ps_dec -> u2_mbx = //<S2SV> ( MOD ( u2_first_mb_in_slice - 1 , ps_seq -> u2_frm_wd_in_mbs ) ) ; //<S2SV> ps_dec -> u2_mby = //<S2SV> ( DIV ( u2_first_mb_in_slice - 1 , ps_seq -> u2_frm_wd_in_mbs ) ) ; //<S2SV> ps_dec -> u2_mby <<= ps_cur_slice -> u1_mbaff_frame_flag ; //<S2SV> ps_dec -> i2_prev_slice_mbx = ps_dec -> u2_mbx ; //<S2SV> ps_dec -> i2_prev_slice_mby = ps_dec -> u2_mby ; //<S2SV> } //<S2SV> ps_bitstrm -> u4_max_ofst += ps_dec -> ps_cur_pps -> u1_entropy_coding_mode ; //<S2SV> ps_dec -> u1_B = ( u1_slice_type == B_SLICE ) ; //<S2SV> ps_dec -> u4_next_mb_skip = 0 ; //<S2SV> ps_dec -> ps_parse_cur_slice -> u4_first_mb_in_slice = //<S2SV> ps_dec -> ps_cur_slice -> u2_first_mb_in_slice ; //<S2SV> ps_dec -> ps_parse_cur_slice -> slice_type = //<S2SV> ps_dec -> ps_cur_slice -> u1_slice_type ; //<S2SV> ps_dec -> u4_start_recon_deblk = 1 ; //<S2SV> { //<S2SV> WORD32 num_entries ; //<S2SV> WORD32 size ; //<S2SV> UWORD8 * pu1_buf ; //<S2SV> num_entries = MIN ( MAX_FRAMES , ps_dec -> u4_num_ref_frames_at_init ) ; //<S2SV> num_entries = 2 * ( ( 2 * num_entries ) + 1 ) ; //<S2SV> size = num_entries * sizeof ( void * ) ; //<S2SV> size += PAD_MAP_IDX_POC * sizeof ( void * ) ; //<S2SV> pu1_buf = ( UWORD8 * ) ps_dec -> pv_map_ref_idx_to_poc_buf ; //<S2SV> pu1_buf += size * ps_dec -> u2_cur_slice_num ; //<S2SV> ps_dec -> ps_parse_cur_slice -> ppv_map_ref_idx_to_poc = ( void * ) pu1_buf ; //<S2SV> } //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ps_dec -> ps_parse_cur_slice -> pv_tu_coeff_data_start = ps_dec -> pv_parse_tu_coeff_data ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> pv_proc_tu_coeff_data = ps_dec -> pv_parse_tu_coeff_data ; //<S2SV> } //<S2SV> if ( u1_slice_type == I_SLICE ) //<S2SV> { //<S2SV> ps_dec -> ps_cur_pic -> u4_pack_slc_typ |= I_SLC_BIT ; //<S2SV> ret = ih264d_parse_islice ( ps_dec , u2_first_mb_in_slice ) ; //<S2SV> if ( ps_dec -> i4_pic_type != B_SLICE && ps_dec -> i4_pic_type != P_SLICE ) //<S2SV> ps_dec -> i4_pic_type = I_SLICE ; //<S2SV> } //<S2SV> else if ( u1_slice_type == P_SLICE ) //<S2SV> { //<S2SV> ps_dec -> ps_cur_pic -> u4_pack_slc_typ |= P_SLC_BIT ; //<S2SV> ret = ih264d_parse_pslice ( ps_dec , u2_first_mb_in_slice ) ; //<S2SV> ps_dec -> u1_pr_sl_type = u1_slice_type ; //<S2SV> if ( ps_dec -> i4_pic_type != B_SLICE ) //<S2SV> ps_dec -> i4_pic_type = P_SLICE ; //<S2SV> } //<S2SV> else if ( u1_slice_type == B_SLICE ) //<S2SV> { //<S2SV> ps_dec -> ps_cur_pic -> u4_pack_slc_typ |= B_SLC_BIT ; //<S2SV> ret = ih264d_parse_bslice ( ps_dec , u2_first_mb_in_slice ) ; //<S2SV> ps_dec -> u1_pr_sl_type = u1_slice_type ; //<S2SV> ps_dec -> i4_pic_type = B_SLICE ; //<S2SV> } //<S2SV> else //<S2SV> return ERROR_INV_SLC_TYPE_T ; //<S2SV> if ( ps_dec -> u1_slice_header_done ) //<S2SV> { //<S2SV> ps_dec -> u4_first_slice_in_pic = 0 ; //<S2SV> ps_dec -> u1_first_slice_in_stream = 0 ; //<S2SV> } //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ps_dec -> i2_prev_slice_mbx = ps_dec -> u2_mbx ; //<S2SV> ps_dec -> i2_prev_slice_mby = ps_dec -> u2_mby ; //<S2SV> if ( ps_dec -> u2_total_mbs_coded >= ( ps_seq -> u2_max_mb_addr + 1 ) ) //<S2SV> { //<S2SV> ps_dec -> u1_pic_decode_done = 1 ; //<S2SV> } //<S2SV> { //<S2SV> dec_err_status_t * ps_err = ps_dec -> ps_dec_err_status ; //<S2SV> if ( ( ps_err -> u1_err_flag & REJECT_PB_PICS ) //<S2SV> && ( ps_err -> u1_cur_pic_type == PIC_TYPE_I ) ) //<S2SV> { //<S2SV> ps_err -> u1_err_flag = ACCEPT_ALL_PICS ; //<S2SV> } //<S2SV> } //<S2SV> PRINT_BIN_BIT_RATIO ( ps_dec ) //<S2SV> return ret ; //<S2SV> } //<S2SV> 