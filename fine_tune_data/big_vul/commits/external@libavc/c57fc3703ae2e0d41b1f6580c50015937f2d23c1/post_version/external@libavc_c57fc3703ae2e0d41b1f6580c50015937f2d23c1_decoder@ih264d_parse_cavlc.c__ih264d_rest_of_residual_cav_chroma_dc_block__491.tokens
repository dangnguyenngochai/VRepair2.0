void ih264d_rest_of_residual_cav_chroma_dc_block ( UWORD32 u4_total_coeff_trail_one , //<S2SV> dec_bit_stream_t * ps_bitstrm ) //<S2SV> { //<S2SV> UWORD32 u4_total_zeroes ; //<S2SV> WORD16 i ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD32 u4_bitstream_offset = ps_bitstrm -> u4_ofst ; //<S2SV> UWORD32 u4_trailing_ones = u4_total_coeff_trail_one & 0xFFFF ; //<S2SV> UWORD32 u4_total_coeff = u4_total_coeff_trail_one >> 16 ; //<S2SV> WORD16 ai2_level_arr [ 7 ] ; //<S2SV> WORD16 * i2_level_arr = & ai2_level_arr [ 3 ] ; //<S2SV> tu_sblk4x4_coeff_data_t * ps_tu_4x4 ; //<S2SV> WORD16 * pi2_coeff_data ; //<S2SV> dec_struct_t * ps_dec = ( dec_struct_t * ) ps_bitstrm -> pv_codec_handle ; //<S2SV> ps_tu_4x4 = ( tu_sblk4x4_coeff_data_t * ) ps_dec -> pv_parse_tu_coeff_data ; //<S2SV> ps_tu_4x4 -> u2_sig_coeff_map = 0 ; //<S2SV> pi2_coeff_data = & ps_tu_4x4 -> ai2_level [ 0 ] ; //<S2SV> i = u4_total_coeff - 1 ; //<S2SV> if ( u4_trailing_ones ) //<S2SV> { //<S2SV> UWORD32 u4_signs , u4_cnt = u4_trailing_ones ; //<S2SV> WORD16 ( * ppi2_trlone_lkup ) [ 3 ] = //<S2SV> ( WORD16 ( * ) [ 3 ] ) gai2_ih264d_trailing_one_level ; //<S2SV> WORD16 * pi2_trlone_lkup ; //<S2SV> GETBITS ( u4_signs , u4_bitstream_offset , pu4_bitstrm_buf , u4_cnt ) ; //<S2SV> pi2_trlone_lkup = ppi2_trlone_lkup [ ( 1 << u4_cnt ) - 2 + u4_signs ] ; //<S2SV> while ( u4_cnt -- ) //<S2SV> i2_level_arr [ i -- ] = * pi2_trlone_lkup ++ ; //<S2SV> } //<S2SV> if ( i >= 0 ) //<S2SV> { //<S2SV> UWORD32 u4_lev_suffix , u4_suffix_len , u4_lev_suffix_size ; //<S2SV> UWORD16 u2_lev_code , u2_abs_value ; //<S2SV> UWORD32 u4_lev_prefix ; //<S2SV> FIND_ONE_IN_STREAM_32 ( u4_lev_prefix , u4_bitstream_offset , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> u2_lev_code = MIN ( 15 , u4_lev_prefix ) ; //<S2SV> u2_lev_code += ( 3 == u4_trailing_ones ) ? 0 : ( 2 ) ; //<S2SV> if ( 14 == u4_lev_prefix ) //<S2SV> u4_lev_suffix_size = 4 ; //<S2SV> else if ( 15 <= u4_lev_prefix ) //<S2SV> { //<S2SV> u2_lev_code += 15 ; //<S2SV> u4_lev_suffix_size = u4_lev_prefix - 3 ; //<S2SV> } //<S2SV> else //<S2SV> u4_lev_suffix_size = 0 ; //<S2SV> if ( 16 <= u4_lev_prefix ) //<S2SV> { //<S2SV> u2_lev_code += ( ( 1 << ( u4_lev_prefix - 3 ) ) - 4096 ) ; //<S2SV> } //<S2SV> if ( u4_lev_suffix_size ) //<S2SV> { //<S2SV> GETBITS ( u4_lev_suffix , u4_bitstream_offset , pu4_bitstrm_buf , //<S2SV> u4_lev_suffix_size ) ; //<S2SV> u2_lev_code += u4_lev_suffix ; //<S2SV> } //<S2SV> u2_abs_value = ( u2_lev_code + 2 ) >> 1 ; //<S2SV> i2_level_arr [ i -- ] = ( u2_lev_code & 1 ) ? - u2_abs_value : u2_abs_value ; //<S2SV> u4_suffix_len = ( u2_abs_value > 3 ) ? 2 : 1 ; //<S2SV> while ( i >= 0 ) //<S2SV> { //<S2SV> FIND_ONE_IN_STREAM_32 ( u4_lev_prefix , u4_bitstream_offset , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> u4_lev_suffix_size = //<S2SV> ( 15 <= u4_lev_prefix ) ? //<S2SV> ( u4_lev_prefix - 3 ) : u4_suffix_len ; //<S2SV> GETBITS ( u4_lev_suffix , u4_bitstream_offset , pu4_bitstrm_buf , //<S2SV> u4_lev_suffix_size ) ; //<S2SV> u2_lev_code = ( MIN ( u4_lev_prefix , 15 ) << u4_suffix_len ) //<S2SV> + u4_lev_suffix ; //<S2SV> if ( 16 <= u4_lev_prefix ) //<S2SV> { //<S2SV> u2_lev_code += ( ( 1 << ( u4_lev_prefix - 3 ) ) - 4096 ) ; //<S2SV> } //<S2SV> u2_abs_value = ( u2_lev_code + 2 ) >> 1 ; //<S2SV> i2_level_arr [ i -- ] = //<S2SV> ( u2_lev_code & 1 ) ? - u2_abs_value : u2_abs_value ; //<S2SV> u4_suffix_len += ( u2_abs_value > ( 3 << ( u4_suffix_len - 1 ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( u4_total_coeff < 4 ) //<S2SV> { //<S2SV> UWORD32 u4_max_ldz = ( 4 - u4_total_coeff ) ; //<S2SV> FIND_ONE_IN_STREAM_LEN ( u4_total_zeroes , u4_bitstream_offset , //<S2SV> pu4_bitstrm_buf , u4_max_ldz ) ; //<S2SV> } //<S2SV> else //<S2SV> u4_total_zeroes = 0 ; //<S2SV> { //<S2SV> const UWORD8 * pu1_table_runbefore ; //<S2SV> UWORD32 u4_run ; //<S2SV> UWORD32 u4_scan_pos = ( u4_total_coeff + u4_total_zeroes - 1 ) ; //<S2SV> UWORD32 u4_zeroes_left = u4_total_zeroes ; //<S2SV> i = u4_total_coeff - 1 ; //<S2SV> pu1_table_runbefore = ( UWORD8 * ) gau1_ih264d_table_run_before ; //<S2SV> while ( u4_zeroes_left && i ) //<S2SV> { //<S2SV> UWORD32 u4_code ; //<S2SV> NEXTBITS ( u4_code , u4_bitstream_offset , pu4_bitstrm_buf , 3 ) ; //<S2SV> u4_code = pu1_table_runbefore [ u4_code + ( u4_zeroes_left << 3 ) ] ; //<S2SV> u4_run = u4_code >> 2 ; //<S2SV> FLUSHBITS ( u4_bitstream_offset , ( u4_code & 0x03 ) ) ; //<S2SV> SET_BIT ( ps_tu_4x4 -> u2_sig_coeff_map , u4_scan_pos ) ; //<S2SV> * pi2_coeff_data ++ = i2_level_arr [ i -- ] ; //<S2SV> u4_zeroes_left -= u4_run ; //<S2SV> u4_scan_pos -= ( u4_run + 1 ) ; //<S2SV> } //<S2SV> while ( i >= 0 ) //<S2SV> { //<S2SV> SET_BIT ( ps_tu_4x4 -> u2_sig_coeff_map , u4_scan_pos ) ; //<S2SV> * pi2_coeff_data ++ = i2_level_arr [ i -- ] ; //<S2SV> u4_scan_pos -- ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> WORD32 offset ; //<S2SV> offset = ( UWORD8 * ) pi2_coeff_data - ( UWORD8 * ) ps_tu_4x4 ; //<S2SV> offset = ALIGN4 ( offset ) ; //<S2SV> ps_dec -> pv_parse_tu_coeff_data = ( void * ) ( ( UWORD8 * ) ps_dec -> pv_parse_tu_coeff_data + offset ) ; //<S2SV> } //<S2SV> ps_bitstrm -> u4_ofst = u4_bitstream_offset ; //<S2SV> } //<S2SV> 