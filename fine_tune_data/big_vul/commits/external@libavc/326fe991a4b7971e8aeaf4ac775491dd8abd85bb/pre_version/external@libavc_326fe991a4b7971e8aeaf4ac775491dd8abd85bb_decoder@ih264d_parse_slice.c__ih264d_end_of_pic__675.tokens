WORD32 ih264d_end_of_pic ( dec_struct_t * ps_dec , //<S2SV> UWORD8 u1_is_idr_slice , //<S2SV> UWORD16 u2_frame_num ) //<S2SV> { //<S2SV> dec_slice_params_t * ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> WORD32 ret ; //<S2SV> ps_dec -> u1_first_pb_nal_in_pic = 1 ; //<S2SV> ps_dec -> u2_mbx = 0xffff ; //<S2SV> ps_dec -> u2_mby = 0 ; //<S2SV> { //<S2SV> dec_err_status_t * ps_err = ps_dec -> ps_dec_err_status ; //<S2SV> if ( ps_err -> u1_err_flag & REJECT_CUR_PIC ) //<S2SV> { //<S2SV> ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; //<S2SV> return ERROR_NEW_FRAME_EXPECTED ; //<S2SV> } //<S2SV> } //<S2SV> H264_MUTEX_LOCK ( & ps_dec -> process_disp_mutex ) ; //<S2SV> ret = ih264d_end_of_pic_processing ( ps_dec ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ps_dec -> u2_total_mbs_coded = 0 ; //<S2SV> { //<S2SV> pocstruct_t * ps_prev_poc = & ps_dec -> s_prev_pic_poc ; //<S2SV> pocstruct_t * ps_cur_poc = & ps_dec -> s_cur_pic_poc ; //<S2SV> if ( ( 0 == u1_is_idr_slice ) && ps_cur_slice -> u1_nal_ref_idc ) //<S2SV> ps_dec -> u2_prev_ref_frame_num = ps_cur_slice -> u2_frame_num ; //<S2SV> if ( u1_is_idr_slice || ps_cur_slice -> u1_mmco_equalto5 ) //<S2SV> ps_dec -> u2_prev_ref_frame_num = 0 ; //<S2SV> if ( ps_dec -> ps_cur_sps -> u1_gaps_in_frame_num_value_allowed_flag ) //<S2SV> { //<S2SV> ret = ih264d_decode_gaps_in_frame_num ( ps_dec , u2_frame_num ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> } //<S2SV> ps_prev_poc -> i4_prev_frame_num_ofst = ps_cur_poc -> i4_prev_frame_num_ofst ; //<S2SV> ps_prev_poc -> u2_frame_num = ps_cur_poc -> u2_frame_num ; //<S2SV> ps_prev_poc -> u1_mmco_equalto5 = ps_cur_slice -> u1_mmco_equalto5 ; //<S2SV> if ( ps_cur_slice -> u1_nal_ref_idc ) //<S2SV> { //<S2SV> ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; //<S2SV> ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt_bottom = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt_bottom ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt [ 0 ] = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt [ 1 ] = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] ; //<S2SV> ps_prev_poc -> u1_bot_field = ps_cur_poc -> u1_bot_field ; //<S2SV> } //<S2SV> } //<S2SV> H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; //<S2SV> return OK ; //<S2SV> } //<S2SV> 