WORD32 ih264d_parse_islice_data_cavlc ( dec_struct_t * ps_dec , //<S2SV> dec_slice_params_t * ps_slice , //<S2SV> UWORD16 u2_first_mb_in_slice ) //<S2SV> { //<S2SV> UWORD8 uc_more_data_flag ; //<S2SV> UWORD8 u1_num_mbs , u1_mb_idx ; //<S2SV> dec_mb_info_t * ps_cur_mb_info ; //<S2SV> deblk_mb_t * ps_cur_deblk_mb ; //<S2SV> dec_bit_stream_t * const ps_bitstrm = ps_dec -> ps_bitstrm ; //<S2SV> UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> u4_ofst ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD16 i2_pic_wdin_mbs = ps_dec -> u2_frm_wd_in_mbs ; //<S2SV> WORD16 i2_cur_mb_addr ; //<S2SV> UWORD8 u1_mbaff ; //<S2SV> UWORD8 u1_num_mbs_next , u1_end_of_row , u1_tfr_n_mb ; //<S2SV> WORD32 ret = OK ; //<S2SV> ps_dec -> u1_qp = ps_slice -> u1_slice_qp ; //<S2SV> ih264d_update_qp ( ps_dec , 0 ) ; //<S2SV> u1_mbaff = ps_slice -> u1_mbaff_frame_flag ; //<S2SV> u1_mb_idx = ps_dec -> u1_mb_idx ; //<S2SV> u1_num_mbs = u1_mb_idx ; //<S2SV> uc_more_data_flag = 1 ; //<S2SV> i2_cur_mb_addr = u2_first_mb_in_slice << u1_mbaff ; //<S2SV> do //<S2SV> { //<S2SV> UWORD8 u1_mb_type ; //<S2SV> ps_dec -> pv_prev_mb_parse_tu_coeff_data = ps_dec -> pv_parse_tu_coeff_data ; //<S2SV> if ( i2_cur_mb_addr > ps_dec -> ps_cur_sps -> u2_max_mb_addr ) //<S2SV> { //<S2SV> ret = ERROR_MB_ADDRESS_T ; //<S2SV> break ; //<S2SV> } //<S2SV> ps_cur_mb_info = ps_dec -> ps_nmb_info + u1_num_mbs ; //<S2SV> ps_dec -> u4_num_mbs_cur_nmb = u1_num_mbs ; //<S2SV> ps_dec -> u4_num_pmbair = ( u1_num_mbs >> u1_mbaff ) ; //<S2SV> ps_cur_mb_info -> u1_end_of_slice = 0 ; //<S2SV> ps_dec -> pf_get_mb_info ( ps_dec , i2_cur_mb_addr , ps_cur_mb_info , 0 ) ; //<S2SV> ps_cur_deblk_mb = ps_dec -> ps_deblk_mbn + u1_num_mbs ; //<S2SV> if ( ps_dec -> u4_app_disable_deblk_frm == 0 ) //<S2SV> ih264d_set_deblocking_parameters ( ps_cur_deblk_mb , ps_slice , //<S2SV> ps_dec -> u1_mb_ngbr_availablity , //<S2SV> ps_dec -> u1_cur_mb_fld_dec_flag ) ; //<S2SV> ps_cur_deblk_mb -> u1_mb_type = ps_cur_deblk_mb -> u1_mb_type | D_INTRA_MB ; //<S2SV> { //<S2SV> UWORD32 u4_bitstream_offset = * pu4_bitstrm_ofst ; //<S2SV> UWORD32 u4_word , u4_ldz , u4_temp ; //<S2SV> NEXTBITS_32 ( u4_word , u4_bitstream_offset , pu4_bitstrm_buf ) ; //<S2SV> u4_ldz = CLZ ( u4_word ) ; //<S2SV> u4_bitstream_offset += ( u4_ldz + 1 ) ; //<S2SV> u4_word = 0 ; //<S2SV> if ( u4_ldz ) //<S2SV> GETBITS ( u4_word , u4_bitstream_offset , pu4_bitstrm_buf , //<S2SV> u4_ldz ) ; //<S2SV> * pu4_bitstrm_ofst = u4_bitstream_offset ; //<S2SV> u4_temp = ( ( 1 << u4_ldz ) + u4_word - 1 ) ; //<S2SV> if ( u4_temp > 25 ) //<S2SV> return ERROR_MB_TYPE ; //<S2SV> u1_mb_type = u4_temp ; //<S2SV> } //<S2SV> ps_cur_mb_info -> u1_mb_type = u1_mb_type ; //<S2SV> COPYTHECONTEXT ( "u1_mb_type" , u1_mb_type ) ; //<S2SV> if ( 25 == u1_mb_type ) //<S2SV> { //<S2SV> ps_cur_mb_info -> ps_curmb -> u1_mb_type = I_PCM_MB ; //<S2SV> ret = ih264d_parse_ipcm_mb ( ps_dec , ps_cur_mb_info , u1_num_mbs ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ps_cur_deblk_mb -> u1_mb_qp = 0 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ret = ih264d_parse_imb_cavlc ( ps_dec , ps_cur_mb_info , u1_num_mbs , u1_mb_type ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ps_cur_deblk_mb -> u1_mb_qp = ps_dec -> u1_qp ; //<S2SV> } //<S2SV> if ( u1_mbaff ) //<S2SV> { //<S2SV> ih264d_update_mbaff_left_nnz ( ps_dec , ps_cur_mb_info ) ; //<S2SV> } //<S2SV> i2_cur_mb_addr ++ ; //<S2SV> uc_more_data_flag = MORE_RBSP_DATA ( ps_bitstrm ) ; //<S2SV> { //<S2SV> mv_pred_t * ps_mv_nmb_start = ps_dec -> ps_mv_cur + ( u1_num_mbs << 4 ) ; //<S2SV> mv_pred_t s_mvPred = //<S2SV> { //<S2SV> { 0 , 0 , 0 , 0 } , //<S2SV> { - 1 , - 1 } , 0 , 0 } ; //<S2SV> ih264d_rep_mv_colz ( ps_dec , & s_mvPred , ps_mv_nmb_start , 0 , //<S2SV> ( UWORD8 ) ( ps_dec -> u1_cur_mb_fld_dec_flag << 1 ) , 4 , //<S2SV> 4 ) ; //<S2SV> } //<S2SV> if ( ps_dec -> u4_num_cores < 3 ) //<S2SV> { //<S2SV> if ( ps_dec -> u4_app_disable_deblk_frm == 0 ) //<S2SV> ps_dec -> pf_compute_bs ( ps_dec , ps_cur_mb_info , //<S2SV> ( UWORD16 ) ( u1_num_mbs >> u1_mbaff ) ) ; //<S2SV> } //<S2SV> u1_num_mbs ++ ; //<S2SV> u1_num_mbs_next = i2_pic_wdin_mbs - ps_dec -> u2_mbx - 1 ; //<S2SV> u1_end_of_row = ( ! u1_num_mbs_next ) && ( ! ( u1_mbaff && ( u1_num_mbs & 0x01 ) ) ) ; //<S2SV> u1_tfr_n_mb = ( u1_num_mbs == ps_dec -> u1_recon_mb_grp ) || u1_end_of_row //<S2SV> || ( ! uc_more_data_flag ) ; //<S2SV> ps_cur_mb_info -> u1_end_of_slice = ( ! uc_more_data_flag ) ; //<S2SV> if ( u1_tfr_n_mb || ( ! uc_more_data_flag ) ) //<S2SV> { //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ih264d_parse_tfr_nmb ( ps_dec , u1_mb_idx , u1_num_mbs , //<S2SV> u1_num_mbs_next , u1_tfr_n_mb , u1_end_of_row ) ; //<S2SV> ps_dec -> ps_nmb_info += u1_num_mbs ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ih264d_decode_recon_tfr_nmb ( ps_dec , u1_mb_idx , u1_num_mbs , //<S2SV> u1_num_mbs_next , u1_tfr_n_mb , //<S2SV> u1_end_of_row ) ; //<S2SV> } //<S2SV> ps_dec -> u2_total_mbs_coded += u1_num_mbs ; //<S2SV> if ( u1_tfr_n_mb ) //<S2SV> u1_num_mbs = 0 ; //<S2SV> u1_mb_idx = u1_num_mbs ; //<S2SV> ps_dec -> u1_mb_idx = u1_num_mbs ; //<S2SV> } //<S2SV> } //<S2SV> while ( uc_more_data_flag ) ; //<S2SV> ps_dec -> u4_num_mbs_cur_nmb = 0 ; //<S2SV> ps_dec -> ps_cur_slice -> u4_mbs_in_slice = i2_cur_mb_addr //<S2SV> - ( u2_first_mb_in_slice << u1_mbaff ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 