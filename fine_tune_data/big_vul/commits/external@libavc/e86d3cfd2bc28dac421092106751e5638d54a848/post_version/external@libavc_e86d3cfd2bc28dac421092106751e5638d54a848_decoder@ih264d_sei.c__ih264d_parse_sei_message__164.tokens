WORD32 ih264d_parse_sei_message ( dec_struct_t * ps_dec , //<S2SV> dec_bit_stream_t * ps_bitstrm ) //<S2SV> { //<S2SV> UWORD32 ui4_payload_type , ui4_payload_size ; //<S2SV> UWORD32 u4_bits ; //<S2SV> WORD32 i4_status = 0 ; //<S2SV> do //<S2SV> { //<S2SV> ui4_payload_type = 0 ; //<S2SV> u4_bits = ih264d_get_bits_h264 ( ps_bitstrm , 8 ) ; //<S2SV> while ( 0xff == u4_bits && ! EXCEED_OFFSET ( ps_bitstrm ) ) //<S2SV> { //<S2SV> u4_bits = ih264d_get_bits_h264 ( ps_bitstrm , 8 ) ; //<S2SV> ui4_payload_type += 255 ; //<S2SV> } //<S2SV> ui4_payload_type += u4_bits ; //<S2SV> ui4_payload_size = 0 ; //<S2SV> u4_bits = ih264d_get_bits_h264 ( ps_bitstrm , 8 ) ; //<S2SV> while ( 0xff == u4_bits && ! EXCEED_OFFSET ( ps_bitstrm ) ) //<S2SV> { //<S2SV> u4_bits = ih264d_get_bits_h264 ( ps_bitstrm , 8 ) ; //<S2SV> ui4_payload_size += 255 ; //<S2SV> } //<S2SV> ui4_payload_size += u4_bits ; //<S2SV> i4_status = ih264d_parse_sei_payload ( ps_bitstrm , ui4_payload_type , //<S2SV> ui4_payload_size , ps_dec ) ; //<S2SV> if ( i4_status == - 1 ) //<S2SV> { //<S2SV> i4_status = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( i4_status != OK ) //<S2SV> return i4_status ; //<S2SV> if ( ih264d_check_byte_aligned ( ps_bitstrm ) == 0 ) //<S2SV> { //<S2SV> u4_bits = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> if ( 0 == u4_bits ) //<S2SV> { //<S2SV> H264_DEC_DEBUG_PRINT ( "\\nError<S2SV_blank>in<S2SV_blank>parsing<S2SV_blank>SEI<S2SV_blank>message" ) ; //<S2SV> } //<S2SV> while ( 0 == ih264d_check_byte_aligned ( ps_bitstrm ) //<S2SV> && ! EXCEED_OFFSET ( ps_bitstrm ) ) //<S2SV> { //<S2SV> u4_bits = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> if ( u4_bits ) //<S2SV> { //<S2SV> H264_DEC_DEBUG_PRINT ( "\\nError<S2SV_blank>in<S2SV_blank>parsing<S2SV_blank>SEI<S2SV_blank>message" ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> while ( ps_bitstrm -> u4_ofst < ps_bitstrm -> u4_max_ofst ) ; //<S2SV> return ( i4_status ) ; //<S2SV> } //<S2SV> 