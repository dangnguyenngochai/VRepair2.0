WORD32 ih264d_process_intra_mb ( dec_struct_t * ps_dec , //<S2SV> dec_mb_info_t * ps_cur_mb_info , //<S2SV> UWORD8 u1_mb_num ) //<S2SV> { //<S2SV> UWORD8 u1_mb_type = ps_cur_mb_info -> u1_mb_type ; //<S2SV> UWORD8 uc_temp = ps_cur_mb_info -> u1_mb_ngbr_availablity ; //<S2SV> UWORD8 u1_top_available = BOOLEAN ( uc_temp & TOP_MB_AVAILABLE_MASK ) ; //<S2SV> UWORD8 u1_left_available = BOOLEAN ( uc_temp & LEFT_MB_AVAILABLE_MASK ) ; //<S2SV> UWORD8 u1_use_top_right_mb = BOOLEAN ( uc_temp & TOP_RIGHT_MB_AVAILABLE_MASK ) ; //<S2SV> UWORD8 u1_use_top_left_mb = BOOLEAN ( uc_temp & TOP_LEFT_MB_AVAILABLE_MASK ) ; //<S2SV> UWORD8 uc_useTopMB = u1_top_available ; //<S2SV> UWORD16 u2_use_left_mb = u1_left_available ; //<S2SV> UWORD16 u2_use_left_mb_pack ; //<S2SV> UWORD8 * pu1_luma_pred_buffer ; //<S2SV> UWORD8 * pu1_luma_rec_buffer ; //<S2SV> UWORD8 * puc_top ; //<S2SV> mb_neigbour_params_t * ps_left_mb ; //<S2SV> mb_neigbour_params_t * ps_top_mb ; //<S2SV> mb_neigbour_params_t * ps_top_right_mb ; //<S2SV> mb_neigbour_params_t * ps_curmb ; //<S2SV> UWORD16 u2_mbx = ps_cur_mb_info -> u2_mbx ; //<S2SV> UWORD32 ui_pred_width , ui_rec_width ; //<S2SV> WORD16 * pi2_y_coeff ; //<S2SV> UWORD8 u1_mbaff , u1_topmb , u1_mb_field_decoding_flag ; //<S2SV> UWORD32 u4_num_pmbair ; //<S2SV> UWORD16 ui2_luma_csbp = ps_cur_mb_info -> u2_luma_csbp ; //<S2SV> UWORD8 * pu1_yleft , * pu1_ytop_left ; //<S2SV> UWORD8 * pu1_top_u ; //<S2SV> UWORD8 * pu1_uleft ; //<S2SV> UWORD8 * pu1_u_top_left ; //<S2SV> UWORD8 * pu1_mb_cb_rei1_buffer , * pu1_mb_cr_rei1_buffer ; //<S2SV> UWORD32 u4_recwidth_cr ; //<S2SV> tfr_ctxt_t * ps_frame_buf = ps_dec -> ps_frame_buf_ip_recon ; //<S2SV> UWORD32 u4_luma_dc_only_csbp = 0 ; //<S2SV> UWORD32 u4_luma_dc_only_cbp = 0 ; //<S2SV> UWORD8 * pu1_prev_intra4x4_pred_mode_data = ( UWORD8 * ) ps_dec -> pv_proc_tu_coeff_data ; //<S2SV> u1_mbaff = ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag ; //<S2SV> u1_topmb = ps_cur_mb_info -> u1_topmb ; //<S2SV> u4_num_pmbair = ( u1_mb_num >> u1_mbaff ) ; //<S2SV> u1_mb_field_decoding_flag = ps_cur_mb_info -> u1_mb_field_decodingflag ; //<S2SV> ps_curmb = ps_cur_mb_info -> ps_curmb ; //<S2SV> ps_top_mb = ps_cur_mb_info -> ps_top_mb ; //<S2SV> ps_left_mb = ps_cur_mb_info -> ps_left_mb ; //<S2SV> ps_top_right_mb = ps_cur_mb_info -> ps_top_right_mb ; //<S2SV> u2_use_left_mb_pack = ( u2_use_left_mb << 8 ) + u2_use_left_mb ; //<S2SV> if ( ps_dec -> ps_cur_pps -> u1_constrained_intra_pred_flag ) //<S2SV> { //<S2SV> UWORD8 u1_left = ( UWORD8 ) u2_use_left_mb ; //<S2SV> uc_useTopMB = uc_useTopMB //<S2SV> && ( ( ps_top_mb -> u1_mb_type != P_MB ) //<S2SV> && ( ps_top_mb -> u1_mb_type != B_MB ) ) ; //<S2SV> u2_use_left_mb = u2_use_left_mb //<S2SV> && ( ( ps_left_mb -> u1_mb_type != P_MB ) //<S2SV> && ( ps_left_mb -> u1_mb_type != B_MB ) ) ; //<S2SV> u2_use_left_mb_pack = ( u2_use_left_mb << 8 ) + u2_use_left_mb ; //<S2SV> if ( u1_mbaff ) //<S2SV> { //<S2SV> if ( u1_mb_field_decoding_flag ^ ps_left_mb -> u1_mb_fld ) //<S2SV> { //<S2SV> u1_left = u1_left //<S2SV> && ( ( ( ps_left_mb + 1 ) -> u1_mb_type != P_MB ) //<S2SV> && ( ( ps_left_mb + 1 ) -> u1_mb_type //<S2SV> != B_MB ) ) ; //<S2SV> u2_use_left_mb = u2_use_left_mb && u1_left ; //<S2SV> if ( u1_mb_field_decoding_flag ) //<S2SV> u2_use_left_mb_pack = ( u1_left << 8 ) //<S2SV> + ( u2_use_left_mb_pack & 0xff ) ; //<S2SV> else //<S2SV> u2_use_left_mb_pack = ( u2_use_left_mb << 8 ) //<S2SV> + ( u2_use_left_mb ) ; //<S2SV> } //<S2SV> } //<S2SV> u1_use_top_right_mb = //<S2SV> u1_use_top_right_mb //<S2SV> && ( ( ps_top_right_mb -> u1_mb_type != P_MB ) //<S2SV> && ( ps_top_right_mb -> u1_mb_type //<S2SV> != B_MB ) ) ; //<S2SV> u1_use_top_left_mb = //<S2SV> u1_use_top_left_mb //<S2SV> && ( ( ps_cur_mb_info -> u1_topleft_mbtype != P_MB ) //<S2SV> && ( ps_cur_mb_info -> u1_topleft_mbtype //<S2SV> != B_MB ) ) ; //<S2SV> } //<S2SV> pu1_luma_pred_buffer = ps_dec -> pu1_y ; //<S2SV> pu1_luma_rec_buffer = ps_frame_buf -> pu1_dest_y + ( u4_num_pmbair << 4 ) ; //<S2SV> pu1_mb_cb_rei1_buffer = ps_frame_buf -> pu1_dest_u //<S2SV> + ( u4_num_pmbair << 3 ) * YUV420SP_FACTOR ; //<S2SV> pu1_mb_cr_rei1_buffer = ps_frame_buf -> pu1_dest_v + ( u4_num_pmbair << 3 ) ; //<S2SV> ui_pred_width = MB_SIZE ; //<S2SV> ui_rec_width = ps_dec -> u2_frm_wd_y << u1_mb_field_decoding_flag ; //<S2SV> u4_recwidth_cr = ps_dec -> u2_frm_wd_uv << u1_mb_field_decoding_flag ; //<S2SV> if ( u1_mbaff ) //<S2SV> { //<S2SV> if ( u1_topmb == 0 ) //<S2SV> { //<S2SV> pu1_luma_rec_buffer += ( //<S2SV> u1_mb_field_decoding_flag ? //<S2SV> ( ui_rec_width >> 1 ) : //<S2SV> ( ui_rec_width << 4 ) ) ; //<S2SV> pu1_mb_cb_rei1_buffer += ( //<S2SV> u1_mb_field_decoding_flag ? //<S2SV> ( u4_recwidth_cr >> 1 ) : //<S2SV> ( u4_recwidth_cr << 3 ) ) ; //<S2SV> pu1_mb_cr_rei1_buffer += ( //<S2SV> u1_mb_field_decoding_flag ? //<S2SV> ( u4_recwidth_cr >> 1 ) : //<S2SV> ( u4_recwidth_cr << 3 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec -> u4_use_intrapred_line_copy == 1 ) //<S2SV> { //<S2SV> puc_top = ps_dec -> pu1_prev_y_intra_pred_line + ( ps_cur_mb_info -> u2_mbx << 4 ) ; //<S2SV> pu1_top_u = ps_dec -> pu1_prev_u_intra_pred_line //<S2SV> + ( ps_cur_mb_info -> u2_mbx << 3 ) * YUV420SP_FACTOR ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> puc_top = pu1_luma_rec_buffer - ui_rec_width ; //<S2SV> pu1_top_u = pu1_mb_cb_rei1_buffer - u4_recwidth_cr ; //<S2SV> } //<S2SV> pu1_yleft = pu1_luma_rec_buffer - 1 ; //<S2SV> pu1_uleft = pu1_mb_cb_rei1_buffer - 1 * YUV420SP_FACTOR ; //<S2SV> pu1_ytop_left = puc_top - 1 ; //<S2SV> pu1_u_top_left = pu1_top_u - 1 * YUV420SP_FACTOR ; //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> { //<S2SV> pu1_prev_intra4x4_pred_mode_data = ( UWORD8 * ) ps_dec -> pv_proc_tu_coeff_data ; //<S2SV> if ( u1_mb_type == I_4x4_MB && ps_cur_mb_info -> u1_tran_form8x8 == 0 ) //<S2SV> { //<S2SV> ps_dec -> pv_proc_tu_coeff_data = ( void * ) ( ( UWORD8 * ) ps_dec -> pv_proc_tu_coeff_data + 32 ) ; //<S2SV> } //<S2SV> else if ( u1_mb_type == I_4x4_MB && ps_cur_mb_info -> u1_tran_form8x8 == 1 ) //<S2SV> { //<S2SV> ps_dec -> pv_proc_tu_coeff_data = ( void * ) ( ( UWORD8 * ) ps_dec -> pv_proc_tu_coeff_data + 8 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! ps_cur_mb_info -> u1_tran_form8x8 ) //<S2SV> { //<S2SV> u4_luma_dc_only_csbp = ih264d_unpack_luma_coeff4x4_mb ( ps_dec , //<S2SV> ps_cur_mb_info , //<S2SV> 1 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ! ps_dec -> ps_cur_pps -> u1_entropy_coding_mode ) //<S2SV> { //<S2SV> u4_luma_dc_only_cbp = ih264d_unpack_luma_coeff4x4_mb ( ps_dec , //<S2SV> ps_cur_mb_info , //<S2SV> 1 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> u4_luma_dc_only_cbp = ih264d_unpack_luma_coeff8x8_mb ( ps_dec , //<S2SV> ps_cur_mb_info ) ; //<S2SV> } //<S2SV> } //<S2SV> pi2_y_coeff = ps_dec -> pi2_coeff_data ; //<S2SV> if ( u1_mb_type != I_4x4_MB ) //<S2SV> { //<S2SV> UWORD8 u1_intrapred_mode = MB_TYPE_TO_INTRA_16x16_MODE ( u1_mb_type ) ; //<S2SV> { //<S2SV> UWORD8 u1_packed_modes = ( u1_top_available << 1 ) //<S2SV> + u1_left_available ; //<S2SV> UWORD8 u1_err_code = //<S2SV> ( u1_intrapred_mode & 1 ) ? //<S2SV> u1_intrapred_mode : //<S2SV> ( u1_intrapred_mode ^ 2 ) ; //<S2SV> if ( ( u1_err_code & u1_packed_modes ) ^ u1_err_code ) //<S2SV> { //<S2SV> u1_intrapred_mode = 0 ; //<S2SV> ps_dec -> i4_error_code = ERROR_INTRAPRED ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> UWORD8 au1_ngbr_pels [ 33 ] ; //<S2SV> if ( u2_use_left_mb ) //<S2SV> { //<S2SV> WORD32 i ; //<S2SV> for ( i = 0 ; i < 16 ; i ++ ) //<S2SV> au1_ngbr_pels [ 16 - 1 - i ] = pu1_yleft [ i * ui_rec_width ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au1_ngbr_pels , 0 , 16 ) ; //<S2SV> } //<S2SV> au1_ngbr_pels [ 16 ] = * pu1_ytop_left ; //<S2SV> if ( uc_useTopMB ) //<S2SV> { //<S2SV> memcpy ( au1_ngbr_pels + 16 + 1 , puc_top , 16 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au1_ngbr_pels + 16 + 1 , 0 , 16 ) ; //<S2SV> } //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> ps_dec -> apf_intra_pred_luma_16x16 [ u1_intrapred_mode ] ( //<S2SV> au1_ngbr_pels , pu1_luma_rec_buffer , 1 , ui_rec_width , //<S2SV> ( ( uc_useTopMB << 2 ) | u2_use_left_mb ) ) ; //<S2SV> } //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> WORD16 ai2_tmp [ 16 ] ; //<S2SV> for ( i = 0 ; i < 16 ; i ++ ) //<S2SV> { //<S2SV> WORD16 * pi2_level = pi2_y_coeff + ( i << 4 ) ; //<S2SV> UWORD8 * pu1_pred_sblk = pu1_luma_rec_buffer //<S2SV> + ( ( i & 0x3 ) * BLK_SIZE ) //<S2SV> + ( i >> 2 ) * ( ui_rec_width << 2 ) ; //<S2SV> PROFILE_DISABLE_IQ_IT_RECON ( ) //<S2SV> { //<S2SV> if ( CHECKBIT ( ps_cur_mb_info -> u2_luma_csbp , i ) ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_luma_4x4 ( //<S2SV> pi2_level , //<S2SV> pu1_pred_sblk , //<S2SV> pu1_pred_sblk , //<S2SV> ui_rec_width , //<S2SV> ui_rec_width , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qp_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 0 ] , //<S2SV> ps_cur_mb_info -> u1_qp_div6 , ai2_tmp , 1 , //<S2SV> pi2_level ) ; //<S2SV> } //<S2SV> else if ( ( CHECKBIT ( u4_luma_dc_only_csbp , i ) ) && pi2_level [ 0 ] != 0 ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_luma_4x4_dc ( //<S2SV> pi2_level , //<S2SV> pu1_pred_sblk , //<S2SV> pu1_pred_sblk , //<S2SV> ui_rec_width , //<S2SV> ui_rec_width , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qp_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 0 ] , //<S2SV> ps_cur_mb_info -> u1_qp_div6 , ai2_tmp , 1 , //<S2SV> pi2_level ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else if ( ! ps_cur_mb_info -> u1_tran_form8x8 ) //<S2SV> { //<S2SV> UWORD8 u1_is_left_sub_block , u1_is_top_sub_block = uc_useTopMB ; //<S2SV> UWORD8 u1_sub_blk_x , u1_sub_blk_y , u1_sub_mb_num ; //<S2SV> WORD8 i1_top_pred_mode ; //<S2SV> WORD8 i1_left_pred_mode ; //<S2SV> UWORD8 * pu1_top , * pu1_left , * pu1_top_left , * pu1_top_right ; //<S2SV> WORD8 * pi1_cur_pred_mode , * pi1_left_pred_mode , * pc_topPredMode ; //<S2SV> UWORD16 ui2_left_pred_buf_width = 0xffff ; //<S2SV> WORD8 i1_intra_pred ; //<S2SV> UWORD8 * pu1_prev_intra4x4_pred_mode_flag = pu1_prev_intra4x4_pred_mode_data ; //<S2SV> UWORD8 * pu1_rem_intra4x4_pred_mode = pu1_prev_intra4x4_pred_mode_data + 16 ; //<S2SV> WORD16 * pi2_y_coeff1 ; //<S2SV> UWORD8 u1_cur_sub_block ; //<S2SV> UWORD16 ui2_top_rt_mask ; //<S2SV> pu1_top = puc_top ; //<S2SV> ui2_top_rt_mask = ( u1_use_top_right_mb << 3 ) | ( 0x5750 ) ; //<S2SV> if ( uc_useTopMB ) //<S2SV> ui2_top_rt_mask |= 0x7 ; //<S2SV> pi1_cur_pred_mode = ps_cur_mb_info -> ps_curmb -> pi1_intrapredmodes ; //<S2SV> pc_topPredMode = ps_cur_mb_info -> ps_top_mb -> pi1_intrapredmodes ; //<S2SV> if ( u1_top_available ) //<S2SV> { //<S2SV> if ( ps_top_mb -> u1_mb_type == I_4x4_MB ) //<S2SV> * ( WORD32 * ) pi1_cur_pred_mode = * ( WORD32 * ) pc_topPredMode ; //<S2SV> else //<S2SV> * ( WORD32 * ) pi1_cur_pred_mode = //<S2SV> ( uc_useTopMB ) ? DC_DC_DC_DC : NOT_VALID ; //<S2SV> } //<S2SV> else //<S2SV> * ( WORD32 * ) pi1_cur_pred_mode = NOT_VALID ; //<S2SV> pi1_left_pred_mode = ps_dec -> pi1_left_pred_mode ; //<S2SV> if ( ! u1_mbaff ) //<S2SV> { //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ps_left_mb -> u1_mb_type != I_4x4_MB ) //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = //<S2SV> ( u2_use_left_mb_pack ) ? //<S2SV> DC_DC_DC_DC : //<S2SV> NOT_VALID ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> UWORD8 u1_curMbfld = ps_cur_mb_info -> u1_mb_field_decodingflag ; //<S2SV> UWORD8 u1_leftMbfld = ps_left_mb -> u1_mb_fld ; //<S2SV> if ( u1_curMbfld ^ u1_leftMbfld ) //<S2SV> { //<S2SV> if ( u1_topmb //<S2SV> | ( ( u1_topmb == 0 ) //<S2SV> && ( ( ps_curmb - 1 ) -> u1_mb_type //<S2SV> != I_4x4_MB ) ) ) //<S2SV> { //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ps_left_mb -> u1_mb_type != I_4x4_MB ) //<S2SV> { //<S2SV> if ( CHECKBIT ( u2_use_left_mb_pack , 0 ) == 0 ) //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> else //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = DC_DC_DC_DC ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> if ( u1_curMbfld ) //<S2SV> { //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ( ps_left_mb + 1 ) -> u1_mb_type != I_4x4_MB ) //<S2SV> { //<S2SV> if ( u2_use_left_mb_pack >> 8 ) //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = //<S2SV> DC_DC_DC_DC ; //<S2SV> else //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = //<S2SV> NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = NOT_VALID ; //<S2SV> pi1_left_pred_mode [ 1 ] = pi1_left_pred_mode [ 2 ] ; //<S2SV> pi1_left_pred_mode [ 2 ] = pi1_left_pred_mode [ 4 ] ; //<S2SV> pi1_left_pred_mode [ 3 ] = pi1_left_pred_mode [ 6 ] ; //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = //<S2SV> * ( WORD32 * ) pi1_left_pred_mode ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pi1_left_pred_mode [ 7 ] = pi1_left_pred_mode [ 3 ] ; //<S2SV> pi1_left_pred_mode [ 6 ] = pi1_left_pred_mode [ 3 ] ; //<S2SV> pi1_left_pred_mode [ 5 ] = pi1_left_pred_mode [ 2 ] ; //<S2SV> pi1_left_pred_mode [ 4 ] = pi1_left_pred_mode [ 2 ] ; //<S2SV> pi1_left_pred_mode [ 3 ] = pi1_left_pred_mode [ 1 ] ; //<S2SV> pi1_left_pred_mode [ 2 ] = pi1_left_pred_mode [ 1 ] ; //<S2SV> pi1_left_pred_mode [ 1 ] = pi1_left_pred_mode [ 0 ] ; //<S2SV> } //<S2SV> } //<S2SV> pi1_left_pred_mode += ( u1_topmb ) ? 0 : 4 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pi1_left_pred_mode += ( u1_topmb ) ? 0 : 4 ; //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ps_left_mb -> u1_mb_type != I_4x4_MB ) //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = //<S2SV> ( u2_use_left_mb_pack ) ? //<S2SV> DC_DC_DC_DC : //<S2SV> NOT_VALID ; //<S2SV> } //<S2SV> else //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> pi2_y_coeff1 = pi2_y_coeff ; //<S2SV> pu1_top_left = pu1_ytop_left ; //<S2SV> for ( u1_sub_mb_num = 0 ; u1_sub_mb_num < 16 ; u1_sub_mb_num ++ ) //<S2SV> { //<S2SV> UWORD8 au1_ngbr_pels [ 13 ] ; //<S2SV> u1_sub_blk_x = u1_sub_mb_num & 0x3 ; //<S2SV> u1_sub_blk_y = u1_sub_mb_num >> 2 ; //<S2SV> i1_top_pred_mode = pi1_cur_pred_mode [ u1_sub_blk_x ] ; //<S2SV> i1_left_pred_mode = pi1_left_pred_mode [ u1_sub_blk_y ] ; //<S2SV> u1_use_top_right_mb = ( ! ! CHECKBIT ( ui2_top_rt_mask , u1_sub_mb_num ) ) ; //<S2SV> if ( u1_sub_blk_x ) //<S2SV> u1_is_left_sub_block = 1 ; //<S2SV> else //<S2SV> u1_is_left_sub_block = //<S2SV> ( u1_sub_blk_y < 2 ) ? //<S2SV> ( CHECKBIT ( u2_use_left_mb_pack , //<S2SV> 0 ) ) : //<S2SV> ( u2_use_left_mb_pack >> 8 ) ; //<S2SV> if ( u1_sub_blk_y ) //<S2SV> u1_is_top_sub_block = 1 ; //<S2SV> if ( ps_dec -> u4_use_intrapred_line_copy == 1 ) //<S2SV> { //<S2SV> if ( u1_sub_blk_y ) //<S2SV> pu1_top = pu1_luma_rec_buffer - ui_rec_width ; //<S2SV> else //<S2SV> pu1_top = puc_top + ( u1_sub_blk_x << 2 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_top = pu1_luma_rec_buffer - ui_rec_width ; //<S2SV> } //<S2SV> pu1_top_right = pu1_top + 4 ; //<S2SV> pu1_top_left = pu1_top - 1 ; //<S2SV> pu1_left = pu1_luma_rec_buffer - 1 ; //<S2SV> i1_intra_pred = ( ( i1_left_pred_mode < 0 ) | ( i1_top_pred_mode < 0 ) ) ? //<S2SV> DC : MIN ( i1_left_pred_mode , i1_top_pred_mode ) ; //<S2SV> { //<S2SV> UWORD8 u1_packed_modes = ( u1_is_top_sub_block << 1 ) //<S2SV> + u1_is_left_sub_block ; //<S2SV> UWORD8 * pu1_intra_err_codes = //<S2SV> ( UWORD8 * ) gau1_ih264d_intra_pred_err_code ; //<S2SV> UWORD8 uc_b2b0 = ( ( u1_sub_mb_num & 4 ) >> 1 ) | ( u1_sub_mb_num & 1 ) ; //<S2SV> UWORD8 uc_b3b1 = ( ( u1_sub_mb_num & 8 ) >> 2 ) //<S2SV> | ( ( u1_sub_mb_num & 2 ) >> 1 ) ; //<S2SV> u1_cur_sub_block = ( uc_b3b1 << 2 ) + uc_b2b0 ; //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> if ( ! pu1_prev_intra4x4_pred_mode_flag [ u1_cur_sub_block ] ) //<S2SV> { //<S2SV> i1_intra_pred = //<S2SV> pu1_rem_intra4x4_pred_mode [ u1_cur_sub_block ] //<S2SV> + ( pu1_rem_intra4x4_pred_mode [ u1_cur_sub_block ] //<S2SV> >= i1_intra_pred ) ; //<S2SV> } //<S2SV> i1_intra_pred = CLIP3 ( 0 , 8 , i1_intra_pred ) ; //<S2SV> { //<S2SV> UWORD8 u1_err_code = pu1_intra_err_codes [ i1_intra_pred ] ; //<S2SV> if ( ( u1_err_code & u1_packed_modes ) ^ u1_err_code ) //<S2SV> { //<S2SV> i1_intra_pred = 0 ; //<S2SV> ps_dec -> i4_error_code = ERROR_INTRAPRED ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> if ( u1_is_left_sub_block ) //<S2SV> { //<S2SV> WORD32 i ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> au1_ngbr_pels [ 4 - 1 - i ] = pu1_left [ i * ui_rec_width ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au1_ngbr_pels , 0 , 4 ) ; //<S2SV> } //<S2SV> au1_ngbr_pels [ 4 ] = * pu1_top_left ; //<S2SV> if ( u1_is_top_sub_block ) //<S2SV> { //<S2SV> memcpy ( au1_ngbr_pels + 4 + 1 , pu1_top , 4 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au1_ngbr_pels + 4 + 1 , 0 , 4 ) ; //<S2SV> } //<S2SV> if ( u1_use_top_right_mb ) //<S2SV> { //<S2SV> memcpy ( au1_ngbr_pels + 4 * 2 + 1 , pu1_top_right , 4 ) ; //<S2SV> } //<S2SV> else if ( u1_is_top_sub_block ) //<S2SV> { //<S2SV> memset ( au1_ngbr_pels + 4 * 2 + 1 , au1_ngbr_pels [ 4 * 2 ] , 4 ) ; //<S2SV> } //<S2SV> } //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> ps_dec -> apf_intra_pred_luma_4x4 [ i1_intra_pred ] ( //<S2SV> au1_ngbr_pels , pu1_luma_rec_buffer , 1 , //<S2SV> ui_rec_width , //<S2SV> ( ( u1_is_top_sub_block << 2 ) | u1_is_left_sub_block ) ) ; //<S2SV> if ( CHECKBIT ( ui2_luma_csbp , u1_sub_mb_num ) ) //<S2SV> { //<S2SV> WORD16 ai2_tmp [ 16 ] ; //<S2SV> PROFILE_DISABLE_IQ_IT_RECON ( ) //<S2SV> { //<S2SV> if ( CHECKBIT ( u4_luma_dc_only_csbp , u1_sub_mb_num ) ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_luma_4x4_dc ( //<S2SV> pi2_y_coeff1 , //<S2SV> pu1_luma_rec_buffer , //<S2SV> pu1_luma_rec_buffer , //<S2SV> ui_rec_width , //<S2SV> ui_rec_width , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qp_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 0 ] , //<S2SV> ps_cur_mb_info -> u1_qp_div6 , ai2_tmp , 0 , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_luma_4x4 ( //<S2SV> pi2_y_coeff1 , //<S2SV> pu1_luma_rec_buffer , //<S2SV> pu1_luma_rec_buffer , //<S2SV> ui_rec_width , //<S2SV> ui_rec_width , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qp_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 0 ] , //<S2SV> ps_cur_mb_info -> u1_qp_div6 , ai2_tmp , 0 , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> pi2_y_coeff1 += 16 ; //<S2SV> pu1_luma_rec_buffer += //<S2SV> ( u1_sub_blk_x == 3 ) ? ( ui_rec_width << 2 ) - 12 : 4 ; //<S2SV> pu1_luma_pred_buffer += //<S2SV> ( u1_sub_blk_x == 3 ) ? ( ui_pred_width << 2 ) - 12 : 4 ; //<S2SV> pi1_cur_pred_mode [ u1_sub_blk_x ] = i1_intra_pred ; //<S2SV> pi1_left_pred_mode [ u1_sub_blk_y ] = i1_intra_pred ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ( u1_mb_type == I_4x4_MB ) && ( ps_cur_mb_info -> u1_tran_form8x8 == 1 ) ) //<S2SV> { //<S2SV> UWORD8 u1_is_left_sub_block , u1_is_top_sub_block = uc_useTopMB ; //<S2SV> UWORD8 u1_sub_blk_x , u1_sub_blk_y , u1_sub_mb_num ; //<S2SV> WORD8 i1_top_pred_mode ; //<S2SV> WORD8 i1_left_pred_mode ; //<S2SV> UWORD8 * pu1_top , * pu1_left , * pu1_top_left ; //<S2SV> WORD8 * pi1_cur_pred_mode , * pi1_left_pred_mode , * pc_topPredMode ; //<S2SV> UWORD16 ui2_left_pred_buf_width = 0xffff ; //<S2SV> WORD8 i1_intra_pred ; //<S2SV> UWORD8 * pu1_prev_intra4x4_pred_mode_flag = pu1_prev_intra4x4_pred_mode_data ; //<S2SV> UWORD8 * pu1_rem_intra4x4_pred_mode = pu1_prev_intra4x4_pred_mode_data + 4 ; //<S2SV> WORD16 * pi2_y_coeff1 ; //<S2SV> UWORD16 ui2_top_rt_mask ; //<S2SV> UWORD32 u4_4x4_left_offset = 0 ; //<S2SV> ui2_top_rt_mask = ( u1_use_top_right_mb << 1 ) | ( 0x4 ) ; //<S2SV> if ( uc_useTopMB ) //<S2SV> { //<S2SV> ui2_top_rt_mask |= 0x1 ; //<S2SV> } //<S2SV> pi1_cur_pred_mode = ps_cur_mb_info -> ps_curmb -> pi1_intrapredmodes ; //<S2SV> pc_topPredMode = ps_cur_mb_info -> ps_top_mb -> pi1_intrapredmodes ; //<S2SV> if ( u1_top_available ) //<S2SV> { //<S2SV> if ( ps_top_mb -> u1_mb_type == I_4x4_MB ) //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_cur_pred_mode = * ( WORD32 * ) pc_topPredMode ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_cur_pred_mode = //<S2SV> ( uc_useTopMB ) ? DC_DC_DC_DC : NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_cur_pred_mode = NOT_VALID ; //<S2SV> } //<S2SV> pu1_top = puc_top - 8 ; //<S2SV> pi1_left_pred_mode = ps_dec -> pi1_left_pred_mode ; //<S2SV> if ( ! u1_mbaff ) //<S2SV> { //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ps_left_mb -> u1_mb_type != I_4x4_MB ) //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = //<S2SV> ( u2_use_left_mb_pack ) ? //<S2SV> DC_DC_DC_DC : //<S2SV> NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> UWORD8 u1_curMbfld = ps_cur_mb_info -> u1_mb_field_decodingflag ; //<S2SV> UWORD8 u1_leftMbfld = ps_left_mb -> u1_mb_fld ; //<S2SV> if ( ( ! u1_curMbfld ) && ( u1_leftMbfld ) ) //<S2SV> { //<S2SV> u4_4x4_left_offset = 1 ; //<S2SV> } //<S2SV> if ( u1_curMbfld ^ u1_leftMbfld ) //<S2SV> { //<S2SV> if ( u1_topmb //<S2SV> | ( ( u1_topmb == 0 ) //<S2SV> && ( ( ps_curmb - 1 ) -> u1_mb_type //<S2SV> != I_4x4_MB ) ) ) //<S2SV> { //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ps_left_mb -> u1_mb_type != I_4x4_MB ) //<S2SV> { //<S2SV> if ( CHECKBIT ( u2_use_left_mb_pack , 0 ) == 0 ) //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = DC_DC_DC_DC ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> } //<S2SV> if ( u1_curMbfld ) //<S2SV> { //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ( ps_left_mb + 1 ) -> u1_mb_type != I_4x4_MB ) //<S2SV> { //<S2SV> if ( u2_use_left_mb_pack >> 8 ) //<S2SV> { //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = //<S2SV> DC_DC_DC_DC ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = //<S2SV> NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = NOT_VALID ; //<S2SV> } //<S2SV> pi1_left_pred_mode [ 1 ] = pi1_left_pred_mode [ 2 ] ; //<S2SV> pi1_left_pred_mode [ 2 ] = pi1_left_pred_mode [ 4 ] ; //<S2SV> pi1_left_pred_mode [ 3 ] = pi1_left_pred_mode [ 6 ] ; //<S2SV> * ( WORD32 * ) ( pi1_left_pred_mode + 4 ) = //<S2SV> * ( WORD32 * ) pi1_left_pred_mode ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pi1_left_pred_mode [ 7 ] = pi1_left_pred_mode [ 3 ] ; //<S2SV> pi1_left_pred_mode [ 6 ] = pi1_left_pred_mode [ 3 ] ; //<S2SV> pi1_left_pred_mode [ 5 ] = pi1_left_pred_mode [ 2 ] ; //<S2SV> pi1_left_pred_mode [ 4 ] = pi1_left_pred_mode [ 2 ] ; //<S2SV> pi1_left_pred_mode [ 3 ] = pi1_left_pred_mode [ 1 ] ; //<S2SV> pi1_left_pred_mode [ 2 ] = pi1_left_pred_mode [ 1 ] ; //<S2SV> pi1_left_pred_mode [ 1 ] = pi1_left_pred_mode [ 0 ] ; //<S2SV> } //<S2SV> } //<S2SV> pi1_left_pred_mode += ( u1_topmb ) ? 0 : 4 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pi1_left_pred_mode += ( u1_topmb ) ? 0 : 4 ; //<S2SV> if ( u1_left_available ) //<S2SV> { //<S2SV> if ( ps_left_mb -> u1_mb_type != I_4x4_MB ) //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = //<S2SV> ( u2_use_left_mb_pack ) ? //<S2SV> DC_DC_DC_DC : //<S2SV> NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> * ( WORD32 * ) pi1_left_pred_mode = NOT_VALID ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> pi2_y_coeff1 = pi2_y_coeff ; //<S2SV> if ( u1_use_top_left_mb ) //<S2SV> { //<S2SV> pu1_top_left = pu1_ytop_left ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_top_left = NULL ; //<S2SV> } //<S2SV> for ( u1_sub_mb_num = 0 ; u1_sub_mb_num < 4 ; u1_sub_mb_num ++ ) //<S2SV> { //<S2SV> u1_sub_blk_x = ( u1_sub_mb_num & 0x1 ) ; //<S2SV> u1_sub_blk_y = ( u1_sub_mb_num >> 1 ) ; //<S2SV> i1_top_pred_mode = pi1_cur_pred_mode [ u1_sub_blk_x << 1 ] ; //<S2SV> i1_left_pred_mode = pi1_left_pred_mode [ u1_sub_blk_y << 1 ] ; //<S2SV> if ( 2 == u1_sub_mb_num ) //<S2SV> { //<S2SV> i1_left_pred_mode = pi1_left_pred_mode [ ( u1_sub_blk_y << 1 ) //<S2SV> + u4_4x4_left_offset ] ; //<S2SV> } //<S2SV> u1_use_top_right_mb = ( ! ! CHECKBIT ( ui2_top_rt_mask , u1_sub_mb_num ) ) ; //<S2SV> if ( u1_sub_blk_x ) //<S2SV> { //<S2SV> u1_is_left_sub_block = 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> u1_is_left_sub_block = //<S2SV> ( u1_sub_blk_y < 1 ) ? //<S2SV> ( CHECKBIT ( u2_use_left_mb_pack , //<S2SV> 0 ) ) : //<S2SV> ( u2_use_left_mb_pack >> 8 ) ; //<S2SV> } //<S2SV> if ( u1_sub_blk_y ) //<S2SV> { //<S2SV> u1_is_top_sub_block = 1 ; //<S2SV> pu1_top = pu1_luma_rec_buffer - ui_rec_width ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_top += 8 ; //<S2SV> } //<S2SV> if ( ( u1_sub_blk_x ) | ( u4_num_pmbair != 0 ) ) //<S2SV> { //<S2SV> pu1_left = pu1_luma_rec_buffer - 1 ; //<S2SV> ui2_left_pred_buf_width = ui_rec_width ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_left = pu1_yleft ; //<S2SV> pu1_yleft += ( ui_rec_width << 3 ) ; //<S2SV> ui2_left_pred_buf_width = ui_rec_width ; //<S2SV> } //<S2SV> if ( u1_sub_mb_num ) //<S2SV> { //<S2SV> pu1_top_left = ( u1_sub_blk_x ) ? //<S2SV> pu1_top - 1 : pu1_left - ui_rec_width ; //<S2SV> if ( ( u1_sub_blk_x && ( ! u1_is_top_sub_block ) ) //<S2SV> || ( ( ! u1_sub_blk_x ) && ( ! u1_is_left_sub_block ) ) ) //<S2SV> { //<S2SV> pu1_top_left = NULL ; //<S2SV> } //<S2SV> } //<S2SV> i1_intra_pred = ( ( i1_left_pred_mode < 0 ) | ( i1_top_pred_mode < 0 ) ) ? //<S2SV> DC : MIN ( i1_left_pred_mode , i1_top_pred_mode ) ; //<S2SV> { //<S2SV> UWORD8 u1_packed_modes = ( u1_is_top_sub_block << 1 ) //<S2SV> + u1_is_left_sub_block ; //<S2SV> UWORD8 * pu1_intra_err_codes = //<S2SV> ( UWORD8 * ) gau1_ih264d_intra_pred_err_code ; //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> if ( ! pu1_prev_intra4x4_pred_mode_flag [ u1_sub_mb_num ] ) //<S2SV> { //<S2SV> i1_intra_pred = pu1_rem_intra4x4_pred_mode [ u1_sub_mb_num ] //<S2SV> + ( pu1_rem_intra4x4_pred_mode [ u1_sub_mb_num ] //<S2SV> >= i1_intra_pred ) ; //<S2SV> } //<S2SV> i1_intra_pred = CLIP3 ( 0 , 8 , i1_intra_pred ) ; //<S2SV> { //<S2SV> UWORD8 u1_err_code = pu1_intra_err_codes [ i1_intra_pred ] ; //<S2SV> if ( ( u1_err_code & u1_packed_modes ) ^ u1_err_code ) //<S2SV> { //<S2SV> i1_intra_pred = 0 ; //<S2SV> ps_dec -> i4_error_code = ERROR_INTRAPRED ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> UWORD8 au1_ngbr_pels [ 25 ] ; //<S2SV> WORD32 ngbr_avail ; //<S2SV> ngbr_avail = u1_is_left_sub_block << 0 ; //<S2SV> ngbr_avail |= u1_is_top_sub_block << 2 ; //<S2SV> if ( pu1_top_left ) //<S2SV> ngbr_avail |= 1 << 1 ; //<S2SV> ngbr_avail |= u1_use_top_right_mb << 3 ; //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> { //<S2SV> ps_dec -> pf_intra_pred_ref_filtering ( pu1_left , pu1_top_left , //<S2SV> pu1_top , au1_ngbr_pels , //<S2SV> ui2_left_pred_buf_width , //<S2SV> ngbr_avail ) ; //<S2SV> ps_dec -> apf_intra_pred_luma_8x8 [ i1_intra_pred ] ( //<S2SV> au1_ngbr_pels , pu1_luma_rec_buffer , 1 , //<S2SV> ui_rec_width , //<S2SV> ( ( u1_is_top_sub_block << 2 ) | u1_is_left_sub_block ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( CHECKBIT ( ps_cur_mb_info -> u1_cbp , u1_sub_mb_num ) ) //<S2SV> { //<S2SV> WORD16 * pi2_scale_matrix_ptr ; //<S2SV> WORD16 ai2_tmp [ 64 ] ; //<S2SV> pi2_scale_matrix_ptr = //<S2SV> ps_dec -> s_high_profile . i2_scalinglist8x8 [ 0 ] ; //<S2SV> PROFILE_DISABLE_IQ_IT_RECON ( ) //<S2SV> { //<S2SV> if ( CHECKBIT ( u4_luma_dc_only_cbp , u1_sub_mb_num ) ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_luma_8x8_dc ( //<S2SV> pi2_y_coeff1 , //<S2SV> pu1_luma_rec_buffer , //<S2SV> pu1_luma_rec_buffer , //<S2SV> ui_rec_width , //<S2SV> ui_rec_width , //<S2SV> gau1_ih264d_dequant8x8_cavlc [ ps_cur_mb_info -> u1_qp_rem6 ] , //<S2SV> ( UWORD16 * ) pi2_scale_matrix_ptr , //<S2SV> ps_cur_mb_info -> u1_qp_div6 , ai2_tmp , 0 , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_luma_8x8 ( //<S2SV> pi2_y_coeff1 , //<S2SV> pu1_luma_rec_buffer , //<S2SV> pu1_luma_rec_buffer , //<S2SV> ui_rec_width , //<S2SV> ui_rec_width , //<S2SV> gau1_ih264d_dequant8x8_cavlc [ ps_cur_mb_info -> u1_qp_rem6 ] , //<S2SV> ( UWORD16 * ) pi2_scale_matrix_ptr , //<S2SV> ps_cur_mb_info -> u1_qp_div6 , ai2_tmp , 0 , //<S2SV> NULL ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> pi2_y_coeff1 += 64 ; //<S2SV> pu1_luma_rec_buffer += //<S2SV> ( u1_sub_blk_x == 1 ) ? //<S2SV> ( ui_rec_width << 3 ) - ( 8 * 1 ) : 8 ; //<S2SV> pi1_cur_pred_mode [ u1_sub_blk_x << 1 ] = i1_intra_pred ; //<S2SV> pi1_cur_pred_mode [ ( u1_sub_blk_x << 1 ) + 1 ] = i1_intra_pred ; //<S2SV> pi1_left_pred_mode [ u1_sub_blk_y << 1 ] = i1_intra_pred ; //<S2SV> pi1_left_pred_mode [ ( u1_sub_blk_y << 1 ) + 1 ] = i1_intra_pred ; //<S2SV> } //<S2SV> } //<S2SV> ih264d_unpack_chroma_coeff4x4_mb ( ps_dec , //<S2SV> ps_cur_mb_info ) ; //<S2SV> { //<S2SV> UWORD8 u1_intra_chrom_pred_mode ; //<S2SV> UWORD8 u1_chroma_cbp = ( UWORD8 ) ( ps_cur_mb_info -> u1_cbp >> 4 ) ; //<S2SV> u1_intra_chrom_pred_mode = CHROMA_TO_LUMA_INTRA_MODE ( //<S2SV> ps_cur_mb_info -> u1_chroma_pred_mode ) ; //<S2SV> { //<S2SV> UWORD8 u1_packed_modes = ( u1_top_available << 1 ) //<S2SV> + u1_left_available ; //<S2SV> UWORD8 u1_err_code = //<S2SV> ( u1_intra_chrom_pred_mode & 1 ) ? //<S2SV> u1_intra_chrom_pred_mode : //<S2SV> ( u1_intra_chrom_pred_mode ^ 2 ) ; //<S2SV> if ( ( u1_err_code & u1_packed_modes ) ^ u1_err_code ) //<S2SV> { //<S2SV> u1_intra_chrom_pred_mode = 0 ; //<S2SV> ps_dec -> i4_error_code = ERROR_INTRAPRED ; //<S2SV> } //<S2SV> } //<S2SV> if ( u1_chroma_cbp != CBPC_ALLZERO ) //<S2SV> { //<S2SV> UWORD16 u2_chroma_csbp = //<S2SV> ( u1_chroma_cbp == CBPC_ACZERO ) ? //<S2SV> 0 : ps_cur_mb_info -> u2_chroma_csbp ; //<S2SV> UWORD32 u4_scale_u ; //<S2SV> UWORD32 u4_scale_v ; //<S2SV> { //<S2SV> UWORD16 au2_ngbr_pels [ 33 ] ; //<S2SV> UWORD8 * pu1_ngbr_pels = ( UWORD8 * ) au2_ngbr_pels ; //<S2SV> UWORD16 * pu2_left_uv ; //<S2SV> UWORD16 * pu2_topleft_uv ; //<S2SV> WORD32 use_left1 = ( u2_use_left_mb_pack & 0x0ff ) ; //<S2SV> WORD32 use_left2 = ( u2_use_left_mb_pack & 0xff00 ) >> 8 ; //<S2SV> pu2_left_uv = ( UWORD16 * ) pu1_uleft ; //<S2SV> pu2_topleft_uv = ( UWORD16 * ) pu1_u_top_left ; //<S2SV> if ( u2_use_left_mb_pack ) //<S2SV> { //<S2SV> WORD32 i ; //<S2SV> if ( use_left1 ) //<S2SV> { //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> au2_ngbr_pels [ 8 - 1 - i ] = pu2_left_uv [ i //<S2SV> * u4_recwidth_cr / YUV420SP_FACTOR ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels + 4 , 0 , 4 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> if ( use_left2 ) //<S2SV> { //<S2SV> for ( i = 4 ; i < 8 ; i ++ ) //<S2SV> au2_ngbr_pels [ 8 - 1 - i ] = pu2_left_uv [ i //<S2SV> * u4_recwidth_cr / YUV420SP_FACTOR ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels , 0 , 4 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels , 0 , 8 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> au2_ngbr_pels [ 8 ] = * pu2_topleft_uv ; //<S2SV> if ( uc_useTopMB ) //<S2SV> { //<S2SV> memcpy ( au2_ngbr_pels + 8 + 1 , pu1_top_u , //<S2SV> 8 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels + 8 + 1 , 0 , 8 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> ps_dec -> apf_intra_pred_chroma [ u1_intra_chrom_pred_mode ] ( //<S2SV> pu1_ngbr_pels , //<S2SV> pu1_mb_cb_rei1_buffer , //<S2SV> 1 , //<S2SV> u4_recwidth_cr , //<S2SV> ( ( uc_useTopMB << 2 ) | ( use_left2 << 4 ) //<S2SV> | use_left1 ) ) ; //<S2SV> } //<S2SV> u4_scale_u = ps_cur_mb_info -> u1_qpc_div6 ; //<S2SV> u4_scale_v = ps_cur_mb_info -> u1_qpcr_div6 ; //<S2SV> pi2_y_coeff = ps_dec -> pi2_coeff_data ; //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> WORD16 ai2_tmp [ 16 ] ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> { //<S2SV> WORD16 * pi2_level = pi2_y_coeff + ( i << 4 ) ; //<S2SV> UWORD8 * pu1_pred_sblk = pu1_mb_cb_rei1_buffer //<S2SV> + ( ( i & 0x1 ) * BLK_SIZE * YUV420SP_FACTOR ) //<S2SV> + ( i >> 1 ) * ( u4_recwidth_cr << 2 ) ; //<S2SV> PROFILE_DISABLE_IQ_IT_RECON ( ) //<S2SV> { //<S2SV> if ( CHECKBIT ( u2_chroma_csbp , i ) ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_chroma_4x4 ( //<S2SV> pi2_level , //<S2SV> pu1_pred_sblk , //<S2SV> pu1_pred_sblk , //<S2SV> u4_recwidth_cr , //<S2SV> u4_recwidth_cr , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qpc_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 1 ] , //<S2SV> u4_scale_u , ai2_tmp , pi2_level ) ; //<S2SV> } //<S2SV> else if ( pi2_level [ 0 ] != 0 ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_chroma_4x4_dc ( //<S2SV> pi2_level , //<S2SV> pu1_pred_sblk , //<S2SV> pu1_pred_sblk , //<S2SV> u4_recwidth_cr , //<S2SV> u4_recwidth_cr , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qpc_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 1 ] , //<S2SV> u4_scale_u , ai2_tmp , pi2_level ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> pi2_y_coeff += MB_CHROM_SIZE ; //<S2SV> u2_chroma_csbp = u2_chroma_csbp >> 4 ; //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> WORD16 ai2_tmp [ 16 ] ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> { //<S2SV> WORD16 * pi2_level = pi2_y_coeff + ( i << 4 ) ; //<S2SV> UWORD8 * pu1_pred_sblk = pu1_mb_cb_rei1_buffer + 1 //<S2SV> + ( ( i & 0x1 ) * BLK_SIZE * YUV420SP_FACTOR ) //<S2SV> + ( i >> 1 ) * ( u4_recwidth_cr << 2 ) ; //<S2SV> PROFILE_DISABLE_IQ_IT_RECON ( ) //<S2SV> { //<S2SV> if ( CHECKBIT ( u2_chroma_csbp , i ) ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_chroma_4x4 ( //<S2SV> pi2_level , //<S2SV> pu1_pred_sblk , //<S2SV> pu1_pred_sblk , //<S2SV> u4_recwidth_cr , //<S2SV> u4_recwidth_cr , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qpcr_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 2 ] , //<S2SV> u4_scale_v , ai2_tmp , pi2_level ) ; //<S2SV> } //<S2SV> else if ( pi2_level [ 0 ] != 0 ) //<S2SV> { //<S2SV> ps_dec -> pf_iquant_itrans_recon_chroma_4x4_dc ( //<S2SV> pi2_level , //<S2SV> pu1_pred_sblk , //<S2SV> pu1_pred_sblk , //<S2SV> u4_recwidth_cr , //<S2SV> u4_recwidth_cr , //<S2SV> gau2_ih264_iquant_scale_4x4 [ ps_cur_mb_info -> u1_qpcr_rem6 ] , //<S2SV> ( UWORD16 * ) ps_dec -> s_high_profile . i2_scalinglist4x4 [ 2 ] , //<S2SV> u4_scale_v , ai2_tmp , pi2_level ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> { //<S2SV> UWORD16 au2_ngbr_pels [ 33 ] ; //<S2SV> UWORD8 * pu1_ngbr_pels = ( UWORD8 * ) au2_ngbr_pels ; //<S2SV> UWORD16 * pu2_left_uv ; //<S2SV> UWORD16 * pu2_topleft_uv ; //<S2SV> WORD32 use_left1 = ( u2_use_left_mb_pack & 0x0ff ) ; //<S2SV> WORD32 use_left2 = ( u2_use_left_mb_pack & 0xff00 ) >> 8 ; //<S2SV> pu2_topleft_uv = ( UWORD16 * ) pu1_u_top_left ; //<S2SV> pu2_left_uv = ( UWORD16 * ) pu1_uleft ; //<S2SV> if ( u2_use_left_mb_pack ) //<S2SV> { //<S2SV> WORD32 i ; //<S2SV> if ( use_left1 ) //<S2SV> { //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) //<S2SV> au2_ngbr_pels [ 8 - 1 - i ] = pu2_left_uv [ i //<S2SV> * u4_recwidth_cr / YUV420SP_FACTOR ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels + 4 , 0 , 4 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> if ( use_left2 ) //<S2SV> { //<S2SV> for ( i = 4 ; i < 8 ; i ++ ) //<S2SV> au2_ngbr_pels [ 8 - 1 - i ] = pu2_left_uv [ i //<S2SV> * u4_recwidth_cr / YUV420SP_FACTOR ] ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels , 0 , 4 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels , 0 , 8 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> au2_ngbr_pels [ 8 ] = * pu2_topleft_uv ; //<S2SV> if ( uc_useTopMB ) //<S2SV> { //<S2SV> memcpy ( au2_ngbr_pels + 8 + 1 , pu1_top_u , //<S2SV> 8 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> memset ( au2_ngbr_pels + 8 + 1 , 0 , 8 * sizeof ( UWORD16 ) ) ; //<S2SV> } //<S2SV> PROFILE_DISABLE_INTRA_PRED ( ) //<S2SV> ps_dec -> apf_intra_pred_chroma [ u1_intra_chrom_pred_mode ] ( //<S2SV> pu1_ngbr_pels , //<S2SV> pu1_mb_cb_rei1_buffer , //<S2SV> 1 , //<S2SV> u4_recwidth_cr , //<S2SV> ( ( uc_useTopMB << 2 ) | ( use_left2 << 4 ) //<S2SV> | use_left1 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return OK ; //<S2SV> } //<S2SV> 