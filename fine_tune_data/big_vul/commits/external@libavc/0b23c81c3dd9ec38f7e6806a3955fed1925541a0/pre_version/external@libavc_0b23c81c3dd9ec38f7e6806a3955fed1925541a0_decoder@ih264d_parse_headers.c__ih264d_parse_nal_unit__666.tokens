WORD32 ih264d_parse_nal_unit ( iv_obj_t * dec_hdl , //<S2SV> ivd_video_decode_op_t * ps_dec_op , //<S2SV> UWORD8 * pu1_buf , //<S2SV> UWORD32 u4_length ) //<S2SV> { //<S2SV> dec_bit_stream_t * ps_bitstrm ; //<S2SV> dec_struct_t * ps_dec = ( dec_struct_t * ) dec_hdl -> pv_codec_handle ; //<S2SV> ivd_video_decode_ip_t * ps_dec_in = //<S2SV> ( ivd_video_decode_ip_t * ) ps_dec -> pv_dec_in ; //<S2SV> dec_slice_params_t * ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> UWORD8 u1_first_byte , u1_nal_ref_idc ; //<S2SV> UWORD8 u1_nal_unit_type ; //<S2SV> WORD32 i_status = OK ; //<S2SV> ps_bitstrm = ps_dec -> ps_bitstrm ; //<S2SV> if ( pu1_buf ) //<S2SV> { //<S2SV> if ( u4_length ) //<S2SV> { //<S2SV> ps_dec_op -> u4_frame_decoded_flag = 0 ; //<S2SV> ih264d_process_nal_unit ( ps_dec -> ps_bitstrm , pu1_buf , //<S2SV> u4_length ) ; //<S2SV> SWITCHOFFTRACE ; //<S2SV> u1_first_byte = ih264d_get_bits_h264 ( ps_bitstrm , 8 ) ; //<S2SV> if ( NAL_FORBIDDEN_BIT ( u1_first_byte ) ) //<S2SV> { //<S2SV> H264_DEC_DEBUG_PRINT ( "\\nForbidden<S2SV_blank>bit<S2SV_blank>set<S2SV_blank>in<S2SV_blank>Nal<S2SV_blank>Unit,<S2SV_blank>Let\'s<S2SV_blank>try\\n" ) ; //<S2SV> } //<S2SV> u1_nal_unit_type = NAL_UNIT_TYPE ( u1_first_byte ) ; //<S2SV> if ( ( ps_dec -> u4_slice_start_code_found == 1 ) //<S2SV> && ( ps_dec -> u1_pic_decode_done != 1 ) //<S2SV> && ( u1_nal_unit_type > IDR_SLICE_NAL ) ) //<S2SV> { //<S2SV> return ERROR_INCOMPLETE_FRAME ; //<S2SV> } //<S2SV> ps_dec -> u1_nal_unit_type = u1_nal_unit_type ; //<S2SV> u1_nal_ref_idc = ( UWORD8 ) ( NAL_REF_IDC ( u1_first_byte ) ) ; //<S2SV> switch ( u1_nal_unit_type ) //<S2SV> { //<S2SV> case SLICE_DATA_PARTITION_A_NAL : //<S2SV> case SLICE_DATA_PARTITION_B_NAL : //<S2SV> case SLICE_DATA_PARTITION_C_NAL : //<S2SV> if ( ! ps_dec -> i4_decode_header ) //<S2SV> ih264d_parse_slice_partition ( ps_dec , ps_bitstrm ) ; //<S2SV> break ; //<S2SV> case IDR_SLICE_NAL : //<S2SV> case SLICE_NAL : //<S2SV> DEBUG_THREADS_PRINTF ( "Decoding<S2SV_blank><S2SV_blank>a<S2SV_blank>slice<S2SV_blank>NAL\\n" ) ; //<S2SV> if ( ! ps_dec -> i4_decode_header ) //<S2SV> { //<S2SV> if ( ps_dec -> i4_header_decoded == 3 ) //<S2SV> { //<S2SV> ps_dec -> u4_slice_start_code_found = 1 ; //<S2SV> ih264d_rbsp_to_sodb ( ps_dec -> ps_bitstrm ) ; //<S2SV> i_status = ih264d_parse_decode_slice ( //<S2SV> ( UWORD8 ) ( u1_nal_unit_type //<S2SV> == IDR_SLICE_NAL ) , //<S2SV> u1_nal_ref_idc , ps_dec ) ; //<S2SV> if ( ( ps_dec -> u4_first_slice_in_pic != 0 ) && //<S2SV> ( ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) == 0 ) ) //<S2SV> { //<S2SV> ps_dec -> u4_first_slice_in_pic = 1 ; //<S2SV> } //<S2SV> if ( i_status != OK ) //<S2SV> { //<S2SV> return i_status ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> H264_DEC_DEBUG_PRINT ( //<S2SV> "\\nSlice<S2SV_blank>NAL<S2SV_blank>Supplied<S2SV_blank>but<S2SV_blank>no<S2SV_blank>header<S2SV_blank>has<S2SV_blank>been<S2SV_blank>supplied\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case SEI_NAL : //<S2SV> if ( ! ps_dec -> i4_decode_header ) //<S2SV> { //<S2SV> ih264d_rbsp_to_sodb ( ps_dec -> ps_bitstrm ) ; //<S2SV> i_status = ih264d_parse_sei_message ( ps_dec , ps_bitstrm ) ; //<S2SV> if ( i_status != OK ) //<S2SV> return i_status ; //<S2SV> ih264d_parse_sei ( ps_dec , ps_bitstrm ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case SEQ_PARAM_NAL : //<S2SV> ih264d_rbsp_to_sodb ( ps_dec -> ps_bitstrm ) ; //<S2SV> i_status = ih264d_parse_sps ( ps_dec , ps_bitstrm ) ; //<S2SV> if ( i_status == ERROR_INV_SPS_PPS_T ) //<S2SV> return i_status ; //<S2SV> if ( ! i_status ) //<S2SV> ps_dec -> i4_header_decoded |= 0x1 ; //<S2SV> break ; //<S2SV> case PIC_PARAM_NAL : //<S2SV> ih264d_rbsp_to_sodb ( ps_dec -> ps_bitstrm ) ; //<S2SV> i_status = ih264d_parse_pps ( ps_dec , ps_bitstrm ) ; //<S2SV> if ( i_status == ERROR_INV_SPS_PPS_T ) //<S2SV> return i_status ; //<S2SV> if ( ! i_status ) //<S2SV> ps_dec -> i4_header_decoded |= 0x2 ; //<S2SV> break ; //<S2SV> case ACCESS_UNIT_DELIMITER_RBSP : //<S2SV> if ( ! ps_dec -> i4_decode_header ) //<S2SV> { //<S2SV> ih264d_access_unit_delimiter_rbsp ( ps_dec ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case END_OF_STREAM_RBSP : //<S2SV> if ( ! ps_dec -> i4_decode_header ) //<S2SV> { //<S2SV> ih264d_parse_end_of_stream ( ps_dec ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case FILLER_DATA_NAL : //<S2SV> if ( ! ps_dec -> i4_decode_header ) //<S2SV> { //<S2SV> ih264d_parse_filler_data ( ps_dec , ps_bitstrm ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> H264_DEC_DEBUG_PRINT ( "\\nUnknown<S2SV_blank>NAL<S2SV_blank>type<S2SV_blank>%d\\n" , u1_nal_unit_type ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return i_status ; //<S2SV> } //<S2SV> 