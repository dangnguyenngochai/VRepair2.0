WORD32 ih264d_start_of_pic ( dec_struct_t * ps_dec , //<S2SV> WORD32 i4_poc , //<S2SV> pocstruct_t * ps_temp_poc , //<S2SV> UWORD16 u2_frame_num , //<S2SV> dec_pic_params_t * ps_pps ) //<S2SV> { //<S2SV> pocstruct_t * ps_prev_poc = & ps_dec -> s_cur_pic_poc ; //<S2SV> pocstruct_t * ps_cur_poc = ps_temp_poc ; //<S2SV> pic_buffer_t * pic_buf ; //<S2SV> ivd_video_decode_op_t * ps_dec_output = //<S2SV> ( ivd_video_decode_op_t * ) ps_dec -> pv_dec_out ; //<S2SV> dec_slice_params_t * ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> dec_seq_params_t * ps_seq = ps_pps -> ps_sps ; //<S2SV> UWORD8 u1_bottom_field_flag = ps_cur_slice -> u1_bottom_field_flag ; //<S2SV> UWORD8 u1_field_pic_flag = ps_cur_slice -> u1_field_pic_flag ; //<S2SV> high_profile_tools_t s_high_profile ; //<S2SV> WORD32 ret ; //<S2SV> H264_MUTEX_LOCK ( & ps_dec -> process_disp_mutex ) ; //<S2SV> ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; //<S2SV> ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt_bottom = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt_bottom ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt [ 0 ] = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt [ 1 ] = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] ; //<S2SV> ps_prev_poc -> u1_bot_field = ps_dec -> ps_cur_slice -> u1_bottom_field_flag ; //<S2SV> ps_prev_poc -> i4_prev_frame_num_ofst = ps_cur_poc -> i4_prev_frame_num_ofst ; //<S2SV> ps_prev_poc -> u2_frame_num = u2_frame_num ; //<S2SV> ps_dec -> i1_prev_mb_qp_delta = 0 ; //<S2SV> ps_dec -> i1_next_ctxt_idx = 0 ; //<S2SV> ps_dec -> u4_nmb_deblk = 0 ; //<S2SV> if ( ps_dec -> u4_num_cores == 1 ) //<S2SV> ps_dec -> u4_nmb_deblk = 1 ; //<S2SV> if ( ps_seq -> u1_mb_aff_flag == 1 ) //<S2SV> { //<S2SV> ps_dec -> u4_nmb_deblk = 0 ; //<S2SV> if ( ps_dec -> u4_num_cores > 2 ) //<S2SV> ps_dec -> u4_num_cores = 2 ; //<S2SV> } //<S2SV> ps_dec -> u4_use_intrapred_line_copy = 0 ; //<S2SV> if ( ps_seq -> u1_mb_aff_flag == 0 ) //<S2SV> { //<S2SV> ps_dec -> u4_use_intrapred_line_copy = 1 ; //<S2SV> } //<S2SV> ps_dec -> u4_app_disable_deblk_frm = 0 ; //<S2SV> if ( ps_dec -> i4_degrade_type && ps_dec -> i4_degrade_pics ) //<S2SV> { //<S2SV> WORD32 degrade_pic ; //<S2SV> ps_dec -> i4_degrade_pic_cnt ++ ; //<S2SV> degrade_pic = 0 ; //<S2SV> switch ( ps_dec -> i4_degrade_pics ) //<S2SV> { //<S2SV> case 4 : //<S2SV> { //<S2SV> degrade_pic = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> case 3 : //<S2SV> { //<S2SV> if ( ps_cur_slice -> u1_slice_type != I_SLICE ) //<S2SV> degrade_pic = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> case 2 : //<S2SV> { //<S2SV> if ( ( ps_cur_slice -> u1_slice_type != I_SLICE ) //<S2SV> && ( ps_dec -> i4_degrade_pic_cnt //<S2SV> != ps_dec -> i4_nondegrade_interval ) ) //<S2SV> degrade_pic = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> case 1 : //<S2SV> { //<S2SV> if ( 0 == ps_cur_slice -> u1_nal_ref_idc ) //<S2SV> { //<S2SV> degrade_pic = 1 ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( degrade_pic ) //<S2SV> { //<S2SV> if ( ps_dec -> i4_degrade_type & 0x2 ) //<S2SV> ps_dec -> u4_app_disable_deblk_frm = 1 ; //<S2SV> if ( 0 == ps_cur_slice -> u1_nal_ref_idc ) //<S2SV> { //<S2SV> if ( ps_dec -> i4_degrade_type & 0x4 ) //<S2SV> ps_dec -> i4_mv_frac_mask = 0 ; //<S2SV> if ( ps_dec -> i4_degrade_type & 0x8 ) //<S2SV> ps_dec -> i4_mv_frac_mask = 0 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> ps_dec -> i4_degrade_pic_cnt = 0 ; //<S2SV> } //<S2SV> { //<S2SV> dec_err_status_t * ps_err = ps_dec -> ps_dec_err_status ; //<S2SV> if ( ps_dec -> u1_sl_typ_5_9 //<S2SV> && ( ( ps_cur_slice -> u1_slice_type == I_SLICE ) //<S2SV> || ( ps_cur_slice -> u1_slice_type //<S2SV> == SI_SLICE ) ) ) //<S2SV> ps_err -> u1_cur_pic_type = PIC_TYPE_I ; //<S2SV> else //<S2SV> ps_err -> u1_cur_pic_type = PIC_TYPE_UNKNOWN ; //<S2SV> if ( ps_err -> u1_pic_aud_i == PIC_TYPE_I ) //<S2SV> { //<S2SV> ps_err -> u1_cur_pic_type = PIC_TYPE_I ; //<S2SV> ps_err -> u1_pic_aud_i = PIC_TYPE_UNKNOWN ; //<S2SV> } //<S2SV> if ( ps_cur_slice -> u1_nal_unit_type == IDR_SLICE_NAL ) //<S2SV> { //<S2SV> if ( ps_err -> u1_err_flag ) //<S2SV> ih264d_reset_ref_bufs ( ps_dec -> ps_dpb_mgr ) ; //<S2SV> ps_err -> u1_err_flag = ACCEPT_ALL_PICS ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec -> u1_init_dec_flag && ps_dec -> s_prev_seq_params . u1_eoseq_pending ) //<S2SV> { //<S2SV> WORD32 j ; //<S2SV> for ( j = 0 ; j < MAX_DISP_BUFS_NEW ; j ++ ) //<S2SV> { //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> j , //<S2SV> BUF_MGR_REF ) ; //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_mv_buf_mgr , //<S2SV> ps_dec -> au1_pic_buf_id_mv_buf_id_map [ j ] , //<S2SV> BUF_MGR_REF ) ; //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> j , //<S2SV> BUF_MGR_IO ) ; //<S2SV> } //<S2SV> ps_dec -> u1_second_field = 0 ; //<S2SV> ps_dec -> i4_cur_display_seq = 0 ; //<S2SV> ps_dec -> s_prev_seq_params . u1_eoseq_pending = 0 ; //<S2SV> } //<S2SV> ret = ih264d_init_pic ( ps_dec , u2_frame_num , i4_poc , ps_pps ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ps_dec -> pv_parse_tu_coeff_data = ps_dec -> pv_pic_tu_coeff_data ; //<S2SV> ps_dec -> pv_proc_tu_coeff_data = ps_dec -> pv_pic_tu_coeff_data ; //<S2SV> ps_dec -> ps_nmb_info = ps_dec -> ps_frm_mb_info ; //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> UWORD16 pic_wd ; //<S2SV> UWORD16 pic_ht ; //<S2SV> UWORD32 num_mbs ; //<S2SV> pic_wd = ps_dec -> u2_pic_wd ; //<S2SV> pic_ht = ps_dec -> u2_pic_ht ; //<S2SV> num_mbs = ( pic_wd * pic_ht ) >> 8 ; //<S2SV> if ( ps_dec -> pu1_dec_mb_map ) //<S2SV> { //<S2SV> memset ( ( void * ) ps_dec -> pu1_dec_mb_map , 0 , num_mbs ) ; //<S2SV> } //<S2SV> if ( ps_dec -> pu1_recon_mb_map ) //<S2SV> { //<S2SV> memset ( ( void * ) ps_dec -> pu1_recon_mb_map , 0 , num_mbs ) ; //<S2SV> } //<S2SV> if ( ps_dec -> pu2_slice_num_map ) //<S2SV> { //<S2SV> memset ( ( void * ) ps_dec -> pu2_slice_num_map , 0 , //<S2SV> ( num_mbs * sizeof ( UWORD16 ) ) ) ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> ps_parse_cur_slice = & ( ps_dec -> ps_dec_slice_buf [ 0 ] ) ; //<S2SV> ps_dec -> ps_decode_cur_slice = & ( ps_dec -> ps_dec_slice_buf [ 0 ] ) ; //<S2SV> ps_dec -> ps_computebs_cur_slice = & ( ps_dec -> ps_dec_slice_buf [ 0 ] ) ; //<S2SV> ps_dec -> s_high_profile . u1_scaling_present = 0 ; //<S2SV> ps_dec -> s_high_profile . u1_transform8x8_present = 0 ; //<S2SV> if ( 1 == ps_dec -> u4_share_disp_buf ) //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> for ( i = 0 ; i < MAX_DISP_BUFS_NEW ; i ++ ) //<S2SV> { //<S2SV> if ( 0 == ps_dec -> u4_disp_buf_to_be_freed [ i ] ) //<S2SV> continue ; //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , i , //<S2SV> BUF_MGR_IO ) ; //<S2SV> ps_dec -> u4_disp_buf_to_be_freed [ i ] = 0 ; //<S2SV> ps_dec -> u4_disp_buf_mapping [ i ] = 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! ( u1_field_pic_flag && 0 != ps_dec -> u1_top_bottom_decoded ) ) //<S2SV> { //<S2SV> pic_buffer_t * ps_cur_pic ; //<S2SV> WORD32 cur_pic_buf_id , cur_mv_buf_id ; //<S2SV> col_mv_buf_t * ps_col_mv ; //<S2SV> while ( 1 ) //<S2SV> { //<S2SV> ps_cur_pic = ( pic_buffer_t * ) ih264_buf_mgr_get_next_free ( //<S2SV> ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> & cur_pic_buf_id ) ; //<S2SV> if ( ps_cur_pic == NULL ) //<S2SV> { //<S2SV> ps_dec -> i4_error_code = ERROR_UNAVAIL_PICBUF_T ; //<S2SV> return ERROR_UNAVAIL_PICBUF_T ; //<S2SV> } //<S2SV> if ( 0 == ps_dec -> u4_disp_buf_mapping [ cur_pic_buf_id ] ) //<S2SV> { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> ps_col_mv = ( col_mv_buf_t * ) ih264_buf_mgr_get_next_free ( ( buf_mgr_t * ) ps_dec -> pv_mv_buf_mgr , //<S2SV> & cur_mv_buf_id ) ; //<S2SV> if ( ps_col_mv == NULL ) //<S2SV> { //<S2SV> ps_dec -> i4_error_code = ERROR_UNAVAIL_MVBUF_T ; //<S2SV> return ERROR_UNAVAIL_MVBUF_T ; //<S2SV> } //<S2SV> ps_dec -> ps_cur_pic = ps_cur_pic ; //<S2SV> ps_dec -> u1_pic_buf_id = cur_pic_buf_id ; //<S2SV> ps_cur_pic -> u4_ts = ps_dec -> u4_ts ; //<S2SV> ps_cur_pic -> u1_mv_buf_id = cur_mv_buf_id ; //<S2SV> ps_dec -> au1_pic_buf_id_mv_buf_id_map [ cur_pic_buf_id ] = cur_mv_buf_id ; //<S2SV> ps_cur_pic -> pu1_col_zero_flag = ( UWORD8 * ) ps_col_mv -> pv_col_zero_flag ; //<S2SV> ps_cur_pic -> ps_mv = ( mv_pred_t * ) ps_col_mv -> pv_mv ; //<S2SV> ps_dec -> au1_pic_buf_ref_flag [ cur_pic_buf_id ] = 0 ; //<S2SV> if ( ps_dec -> u1_first_slice_in_stream ) //<S2SV> { //<S2SV> ps_dec -> ps_ref_pic_buf_lx [ 0 ] = ps_dec -> ps_dpb_mgr -> ps_init_dpb [ 0 ] ; //<S2SV> * ( ps_dec -> ps_dpb_mgr -> ps_init_dpb [ 0 ] [ 0 ] ) = * ps_cur_pic ; //<S2SV> } //<S2SV> if ( ! ps_dec -> ps_cur_pic ) //<S2SV> { //<S2SV> WORD32 j ; //<S2SV> H264_DEC_DEBUG_PRINT ( "-------<S2SV_blank>Display<S2SV_blank>Buffers<S2SV_blank>Reset<S2SV_blank>--------\\n" ) ; //<S2SV> for ( j = 0 ; j < MAX_DISP_BUFS_NEW ; j ++ ) //<S2SV> { //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> j , //<S2SV> BUF_MGR_REF ) ; //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_mv_buf_mgr , //<S2SV> ps_dec -> au1_pic_buf_id_mv_buf_id_map [ j ] , //<S2SV> BUF_MGR_REF ) ; //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> j , //<S2SV> BUF_MGR_IO ) ; //<S2SV> } //<S2SV> ps_dec -> i4_cur_display_seq = 0 ; //<S2SV> ps_dec -> i4_prev_max_display_seq = 0 ; //<S2SV> ps_dec -> i4_max_poc = 0 ; //<S2SV> ps_cur_pic = ( pic_buffer_t * ) ih264_buf_mgr_get_next_free ( //<S2SV> ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> & cur_pic_buf_id ) ; //<S2SV> if ( ps_cur_pic == NULL ) //<S2SV> { //<S2SV> ps_dec -> i4_error_code = ERROR_UNAVAIL_PICBUF_T ; //<S2SV> return ERROR_UNAVAIL_PICBUF_T ; //<S2SV> } //<S2SV> ps_col_mv = ( col_mv_buf_t * ) ih264_buf_mgr_get_next_free ( ( buf_mgr_t * ) ps_dec -> pv_mv_buf_mgr , //<S2SV> & cur_mv_buf_id ) ; //<S2SV> if ( ps_col_mv == NULL ) //<S2SV> { //<S2SV> ps_dec -> i4_error_code = ERROR_UNAVAIL_MVBUF_T ; //<S2SV> return ERROR_UNAVAIL_MVBUF_T ; //<S2SV> } //<S2SV> ps_dec -> ps_cur_pic = ps_cur_pic ; //<S2SV> ps_dec -> u1_pic_buf_id = cur_pic_buf_id ; //<S2SV> ps_cur_pic -> u4_ts = ps_dec -> u4_ts ; //<S2SV> ps_dec -> apv_buf_id_pic_buf_map [ cur_pic_buf_id ] = ( void * ) ps_cur_pic ; //<S2SV> ps_cur_pic -> u1_mv_buf_id = cur_mv_buf_id ; //<S2SV> ps_dec -> au1_pic_buf_id_mv_buf_id_map [ cur_pic_buf_id ] = cur_mv_buf_id ; //<S2SV> ps_cur_pic -> pu1_col_zero_flag = ( UWORD8 * ) ps_col_mv -> pv_col_zero_flag ; //<S2SV> ps_cur_pic -> ps_mv = ( mv_pred_t * ) ps_col_mv -> pv_mv ; //<S2SV> ps_dec -> au1_pic_buf_ref_flag [ cur_pic_buf_id ] = 0 ; //<S2SV> } //<S2SV> ps_dec -> ps_cur_pic -> u1_picturetype = u1_field_pic_flag ; //<S2SV> ps_dec -> ps_cur_pic -> u4_pack_slc_typ = SKIP_NONE ; //<S2SV> H264_DEC_DEBUG_PRINT ( "got<S2SV_blank>a<S2SV_blank>buffer\\n" ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> H264_DEC_DEBUG_PRINT ( "did<S2SV_blank>not<S2SV_blank>get<S2SV_blank>a<S2SV_blank>buffer\\n" ) ; //<S2SV> } //<S2SV> ps_dec -> u4_pic_buf_got = 1 ; //<S2SV> ps_dec -> ps_cur_pic -> i4_poc = i4_poc ; //<S2SV> ps_dec -> ps_cur_pic -> i4_frame_num = u2_frame_num ; //<S2SV> ps_dec -> ps_cur_pic -> i4_pic_num = u2_frame_num ; //<S2SV> ps_dec -> ps_cur_pic -> i4_top_field_order_cnt = ps_pps -> i4_top_field_order_cnt ; //<S2SV> ps_dec -> ps_cur_pic -> i4_bottom_field_order_cnt = //<S2SV> ps_pps -> i4_bottom_field_order_cnt ; //<S2SV> ps_dec -> ps_cur_pic -> i4_avg_poc = ps_pps -> i4_avg_poc ; //<S2SV> ps_dec -> ps_cur_pic -> u4_time_stamp = ps_dec -> u4_pts ; //<S2SV> ps_dec -> s_cur_pic = * ( ps_dec -> ps_cur_pic ) ; //<S2SV> if ( u1_field_pic_flag && u1_bottom_field_flag ) //<S2SV> { //<S2SV> WORD32 i4_temp_poc ; //<S2SV> WORD32 i4_top_field_order_poc , i4_bot_field_order_poc ; //<S2SV> ps_dec -> s_cur_pic . pu1_buf1 += ps_dec -> s_cur_pic . u2_frm_wd_y ; //<S2SV> ps_dec -> s_cur_pic . pu1_buf2 += ps_dec -> s_cur_pic . u2_frm_wd_uv ; //<S2SV> ps_dec -> s_cur_pic . pu1_buf3 += ps_dec -> s_cur_pic . u2_frm_wd_uv ; //<S2SV> ps_dec -> s_cur_pic . ps_mv += //<S2SV> ( ( ps_dec -> u2_pic_ht * ps_dec -> u2_pic_wd ) >> 5 ) ; //<S2SV> ps_dec -> s_cur_pic . pu1_col_zero_flag += ( ( ps_dec -> u2_pic_ht //<S2SV> * ps_dec -> u2_pic_wd ) >> 5 ) ; //<S2SV> ps_dec -> ps_cur_pic -> u1_picturetype |= BOT_FLD ; //<S2SV> i4_top_field_order_poc = ps_dec -> ps_cur_pic -> i4_top_field_order_cnt ; //<S2SV> i4_bot_field_order_poc = ps_dec -> ps_cur_pic -> i4_bottom_field_order_cnt ; //<S2SV> i4_temp_poc = MIN ( i4_top_field_order_poc , //<S2SV> i4_bot_field_order_poc ) ; //<S2SV> ps_dec -> ps_cur_pic -> i4_avg_poc = i4_temp_poc ; //<S2SV> } //<S2SV> ps_cur_slice -> u1_mbaff_frame_flag = ps_seq -> u1_mb_aff_flag //<S2SV> && ( ! u1_field_pic_flag ) ; //<S2SV> ps_dec -> ps_cur_pic -> u1_picturetype |= ( ps_cur_slice -> u1_mbaff_frame_flag //<S2SV> << 2 ) ; //<S2SV> ps_dec -> ps_cur_mb_row = ps_dec -> ps_nbr_mb_row ; //<S2SV> ps_dec -> ps_cur_mb_row += 2 ; //<S2SV> ps_dec -> ps_top_mb_row = ps_dec -> ps_nbr_mb_row ; //<S2SV> ps_dec -> ps_top_mb_row += ( ( ps_dec -> u2_frm_wd_in_mbs + 2 ) << ( 1 - ps_dec -> ps_cur_sps -> u1_frame_mbs_only_flag ) ) ; //<S2SV> ps_dec -> ps_top_mb_row += 2 ; //<S2SV> ps_dec -> ps_mv_cur = ps_dec -> s_cur_pic . ps_mv ; //<S2SV> ps_dec -> ps_mv_top = ps_dec -> ps_mv_top_p [ 0 ] ; //<S2SV> ps_dec -> u1_mv_top_p = 0 ; //<S2SV> ps_dec -> u1_mb_idx = 0 ; //<S2SV> ps_dec -> ps_mv_left = ps_dec -> s_cur_pic . ps_mv ; //<S2SV> ps_dec -> u2_total_mbs_coded = 0 ; //<S2SV> ps_dec -> i4_submb_ofst = - ( SUB_BLK_SIZE ) ; //<S2SV> ps_dec -> u4_pred_info_idx = 0 ; //<S2SV> ps_dec -> u4_pred_info_pkd_idx = 0 ; //<S2SV> ps_dec -> u4_dma_buf_idx = 0 ; //<S2SV> ps_dec -> ps_mv = ps_dec -> s_cur_pic . ps_mv ; //<S2SV> ps_dec -> ps_mv_bank_cur = ps_dec -> s_cur_pic . ps_mv ; //<S2SV> ps_dec -> pu1_col_zero_flag = ps_dec -> s_cur_pic . pu1_col_zero_flag ; //<S2SV> ps_dec -> ps_part = ps_dec -> ps_parse_part_params ; //<S2SV> ps_dec -> i2_prev_slice_mbx = - 1 ; //<S2SV> ps_dec -> i2_prev_slice_mby = 0 ; //<S2SV> ps_dec -> u2_mv_2mb [ 0 ] = 0 ; //<S2SV> ps_dec -> u2_mv_2mb [ 1 ] = 0 ; //<S2SV> ps_dec -> u1_last_pic_not_decoded = 0 ; //<S2SV> ps_dec -> u2_cur_slice_num = 0 ; //<S2SV> ps_dec -> u2_cur_slice_num_dec_thread = 0 ; //<S2SV> ps_dec -> u2_cur_slice_num_bs = 0 ; //<S2SV> ps_dec -> u4_intra_pred_line_ofst = 0 ; //<S2SV> ps_dec -> pu1_cur_y_intra_pred_line = ps_dec -> pu1_y_intra_pred_line ; //<S2SV> ps_dec -> pu1_cur_u_intra_pred_line = ps_dec -> pu1_u_intra_pred_line ; //<S2SV> ps_dec -> pu1_cur_v_intra_pred_line = ps_dec -> pu1_v_intra_pred_line ; //<S2SV> ps_dec -> pu1_cur_y_intra_pred_line_base = ps_dec -> pu1_y_intra_pred_line ; //<S2SV> ps_dec -> pu1_cur_u_intra_pred_line_base = ps_dec -> pu1_u_intra_pred_line ; //<S2SV> ps_dec -> pu1_cur_v_intra_pred_line_base = ps_dec -> pu1_v_intra_pred_line ; //<S2SV> ps_dec -> pu1_prev_y_intra_pred_line = ps_dec -> pu1_y_intra_pred_line //<S2SV> + ( ps_dec -> u2_frm_wd_in_mbs * MB_SIZE ) ; //<S2SV> ps_dec -> pu1_prev_u_intra_pred_line = ps_dec -> pu1_u_intra_pred_line //<S2SV> + ps_dec -> u2_frm_wd_in_mbs * BLK8x8SIZE * YUV420SP_FACTOR ; //<S2SV> ps_dec -> pu1_prev_v_intra_pred_line = ps_dec -> pu1_v_intra_pred_line //<S2SV> + ps_dec -> u2_frm_wd_in_mbs * BLK8x8SIZE ; //<S2SV> ps_dec -> ps_deblk_mbn = ps_dec -> ps_deblk_pic ; //<S2SV> { //<S2SV> if ( ps_cur_slice -> u1_mbaff_frame_flag ) //<S2SV> { //<S2SV> ps_dec -> pf_compute_bs = ih264d_compute_bs_mbaff ; //<S2SV> ps_dec -> pf_mvpred = ih264d_mvpred_mbaff ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> pf_compute_bs = ih264d_compute_bs_non_mbaff ; //<S2SV> ps_dec -> u1_cur_mb_fld_dec_flag = ps_cur_slice -> u1_field_pic_flag ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> UWORD8 u1_field_pic_flag = ps_dec -> ps_cur_slice -> u1_field_pic_flag ; //<S2SV> UWORD8 u1_mbaff = ps_cur_slice -> u1_mbaff_frame_flag ; //<S2SV> UWORD8 uc_lastmbs = ( ( ( ps_dec -> u2_pic_wd ) >> 4 ) //<S2SV> % ( ps_dec -> u1_recon_mb_grp >> u1_mbaff ) ) ; //<S2SV> UWORD16 ui16_lastmbs_widthY = //<S2SV> ( uc_lastmbs ? ( uc_lastmbs << 4 ) : ( ( ps_dec -> u1_recon_mb_grp //<S2SV> >> u1_mbaff ) << 4 ) ) ; //<S2SV> UWORD16 ui16_lastmbs_widthUV = //<S2SV> uc_lastmbs ? ( uc_lastmbs << 3 ) : ( ( ps_dec -> u1_recon_mb_grp //<S2SV> >> u1_mbaff ) << 3 ) ; //<S2SV> ps_dec -> s_tran_addrecon . pu1_dest_y = ps_dec -> s_cur_pic . pu1_buf1 ; //<S2SV> ps_dec -> s_tran_addrecon . pu1_dest_u = ps_dec -> s_cur_pic . pu1_buf2 ; //<S2SV> ps_dec -> s_tran_addrecon . pu1_dest_v = ps_dec -> s_cur_pic . pu1_buf3 ; //<S2SV> ps_dec -> s_tran_addrecon . u2_frm_wd_y = ps_dec -> u2_frm_wd_y //<S2SV> << u1_field_pic_flag ; //<S2SV> ps_dec -> s_tran_addrecon . u2_frm_wd_uv = ps_dec -> u2_frm_wd_uv //<S2SV> << u1_field_pic_flag ; //<S2SV> if ( u1_field_pic_flag ) //<S2SV> { //<S2SV> ui16_lastmbs_widthY += ps_dec -> u2_frm_wd_y ; //<S2SV> ui16_lastmbs_widthUV += ps_dec -> u2_frm_wd_uv ; //<S2SV> } //<S2SV> ps_dec -> s_tran_addrecon . u4_inc_y [ 0 ] = ( ( ps_dec -> u1_recon_mb_grp << 4 ) //<S2SV> >> u1_mbaff ) ; //<S2SV> ps_dec -> s_tran_addrecon . u4_inc_uv [ 0 ] = ( ( ps_dec -> u1_recon_mb_grp << 4 ) //<S2SV> >> u1_mbaff ) ; //<S2SV> ps_dec -> s_tran_addrecon . u4_inc_y [ 1 ] = ( ui16_lastmbs_widthY //<S2SV> + ( PAD_LEN_Y_H << 1 ) //<S2SV> + ps_dec -> s_tran_addrecon . u2_frm_wd_y //<S2SV> * ( ( 15 << u1_mbaff ) + u1_mbaff ) ) ; //<S2SV> ps_dec -> s_tran_addrecon . u4_inc_uv [ 1 ] = ( ui16_lastmbs_widthUV //<S2SV> + ( PAD_LEN_UV_H << 2 ) //<S2SV> + ps_dec -> s_tran_addrecon . u2_frm_wd_uv //<S2SV> * ( ( 15 << u1_mbaff ) + u1_mbaff ) ) ; //<S2SV> ih264d_assign_pic_num ( ps_dec ) ; //<S2SV> ps_dec -> s_tran_addrecon . u2_mv_top_left_inc = ( ps_dec -> u1_recon_mb_grp //<S2SV> << 2 ) - 1 - ( u1_mbaff << 2 ) ; //<S2SV> ps_dec -> s_tran_addrecon . u2_mv_left_inc = ( ( ps_dec -> u1_recon_mb_grp //<S2SV> >> u1_mbaff ) - 1 ) << ( 4 + u1_mbaff ) ; //<S2SV> } //<S2SV> if ( ps_seq -> u1_profile_idc == HIGH_PROFILE_IDC ) //<S2SV> { //<S2SV> if ( ( ps_seq -> i4_seq_scaling_matrix_present_flag ) //<S2SV> || ( ps_pps -> i4_pic_scaling_matrix_present_flag ) ) //<S2SV> { //<S2SV> ih264d_form_scaling_matrix_picture ( ps_seq , ps_pps , ps_dec ) ; //<S2SV> ps_dec -> s_high_profile . u1_scaling_present = 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ih264d_form_default_scaling_matrix ( ps_dec ) ; //<S2SV> } //<S2SV> if ( ps_pps -> i4_transform_8x8_mode_flag ) //<S2SV> { //<S2SV> ps_dec -> s_high_profile . u1_transform8x8_present = 1 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ih264d_form_default_scaling_matrix ( ps_dec ) ; //<S2SV> } //<S2SV> ps_dec -> s_high_profile . u1_direct_8x8_inference_flag = //<S2SV> ps_seq -> u1_direct_8x8_inference_flag ; //<S2SV> ps_dec -> s_high_profile . s_cavlc_ctxt = ps_dec -> s_cavlc_ctxt ; //<S2SV> ps_dec -> i1_recon_in_thread3_flag = 1 ; //<S2SV> ps_dec -> ps_frame_buf_ip_recon = & ps_dec -> s_tran_addrecon ; //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> memcpy ( & ps_dec -> s_tran_addrecon_parse , & ps_dec -> s_tran_addrecon , //<S2SV> sizeof ( tfr_ctxt_t ) ) ; //<S2SV> if ( ps_dec -> u4_num_cores >= 3 && ps_dec -> i1_recon_in_thread3_flag ) //<S2SV> { //<S2SV> memcpy ( & ps_dec -> s_tran_iprecon , & ps_dec -> s_tran_addrecon , //<S2SV> sizeof ( tfr_ctxt_t ) ) ; //<S2SV> ps_dec -> ps_frame_buf_ip_recon = & ps_dec -> s_tran_iprecon ; //<S2SV> } //<S2SV> } //<S2SV> ih264d_init_deblk_tfr_ctxt ( ps_dec , & ( ps_dec -> s_pad_mgr ) , & ( ps_dec -> s_tran_addrecon ) , //<S2SV> ps_dec -> u2_frm_wd_in_mbs , 0 ) ; //<S2SV> ps_dec -> ps_cur_deblk_mb = ps_dec -> ps_deblk_pic ; //<S2SV> ps_dec -> u4_cur_deblk_mb_num = 0 ; //<S2SV> ps_dec -> u4_deblk_mb_x = 0 ; //<S2SV> ps_dec -> u4_deblk_mb_y = 0 ; //<S2SV> ps_dec -> pu4_wt_ofsts = ps_dec -> pu4_wts_ofsts_mat ; //<S2SV> H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; //<S2SV> return OK ; //<S2SV> } //<S2SV> 