WORD32 ih264d_parse_sps ( dec_struct_t * ps_dec , dec_bit_stream_t * ps_bitstrm ) //<S2SV> { //<S2SV> UWORD8 i ; //<S2SV> dec_seq_params_t * ps_seq = NULL ; //<S2SV> UWORD8 u1_profile_idc , u1_level_idc , u1_seq_parameter_set_id ; //<S2SV> UWORD16 i2_max_frm_num ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> u4_ofst ; //<S2SV> UWORD8 u1_frm , uc_constraint_set0_flag , uc_constraint_set1_flag ; //<S2SV> UWORD32 u4_temp ; //<S2SV> WORD32 pic_height_in_map_units_minus1 = 0 ; //<S2SV> UWORD32 u2_pic_wd = 0 ; //<S2SV> UWORD32 u2_pic_ht = 0 ; //<S2SV> UWORD32 u2_frm_wd_y = 0 ; //<S2SV> UWORD32 u2_frm_ht_y = 0 ; //<S2SV> UWORD32 u2_frm_wd_uv = 0 ; //<S2SV> UWORD32 u2_frm_ht_uv = 0 ; //<S2SV> UWORD32 u2_crop_offset_y = 0 ; //<S2SV> UWORD32 u2_crop_offset_uv = 0 ; //<S2SV> WORD32 ret ; //<S2SV> WORD32 i4_i ; //<S2SV> UWORD8 u1_frame_cropping_flag , u1_frame_cropping_rect_left_ofst , //<S2SV> u1_frame_cropping_rect_right_ofst , //<S2SV> u1_frame_cropping_rect_top_ofst , //<S2SV> u1_frame_cropping_rect_bottom_ofst ; //<S2SV> SWITCHONTRACE ; //<S2SV> u1_profile_idc = ih264d_get_bits_h264 ( ps_bitstrm , 8 ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>profile_idc" , u1_profile_idc ) ; //<S2SV> uc_constraint_set0_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> uc_constraint_set1_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> ih264d_get_bits_h264 ( ps_bitstrm , 5 ) ; //<S2SV> if ( ( u1_profile_idc != MAIN_PROFILE_IDC ) && //<S2SV> ( u1_profile_idc != BASE_PROFILE_IDC ) && //<S2SV> ( u1_profile_idc != HIGH_PROFILE_IDC ) //<S2SV> ) //<S2SV> { //<S2SV> if ( ( u1_profile_idc != EXTENDED_PROFILE_IDC ) || //<S2SV> ( ( uc_constraint_set1_flag != 1 ) && ( uc_constraint_set0_flag != 1 ) ) ) //<S2SV> { //<S2SV> return ( ERROR_FEATURE_UNAVAIL ) ; //<S2SV> } //<S2SV> } //<S2SV> u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm , 8 ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>u4_level_idc" , u1_level_idc ) ; //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp & MASK_ERR_SEQ_SET_ID ) //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> u1_seq_parameter_set_id = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>seq_parameter_set_id" , //<S2SV> u1_seq_parameter_set_id ) ; //<S2SV> ps_seq = ps_dec -> pv_scratch_sps_pps ; //<S2SV> * ps_seq = ps_dec -> ps_sps [ u1_seq_parameter_set_id ] ; //<S2SV> if ( NULL == ps_dec -> ps_cur_sps ) //<S2SV> ps_dec -> ps_cur_sps = ps_seq ; //<S2SV> ps_seq -> u1_profile_idc = u1_profile_idc ; //<S2SV> ps_seq -> u1_level_idc = u1_level_idc ; //<S2SV> ps_seq -> u1_seq_parameter_set_id = u1_seq_parameter_set_id ; //<S2SV> ps_seq -> i4_chroma_format_idc = 1 ; //<S2SV> ps_seq -> i4_bit_depth_luma_minus8 = 0 ; //<S2SV> ps_seq -> i4_bit_depth_chroma_minus8 = 0 ; //<S2SV> ps_seq -> i4_qpprime_y_zero_transform_bypass_flag = 0 ; //<S2SV> ps_seq -> i4_seq_scaling_matrix_present_flag = 0 ; //<S2SV> if ( u1_profile_idc == HIGH_PROFILE_IDC ) //<S2SV> { //<S2SV> ps_seq -> i4_chroma_format_idc = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> if ( ps_seq -> i4_chroma_format_idc != 1 ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> ps_seq -> i4_bit_depth_luma_minus8 = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> if ( ps_seq -> i4_bit_depth_luma_minus8 != 0 ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> ps_seq -> i4_bit_depth_chroma_minus8 = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> if ( ps_seq -> i4_bit_depth_chroma_minus8 != 0 ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> ps_seq -> i4_qpprime_y_zero_transform_bypass_flag = //<S2SV> ( WORD32 ) ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> if ( ps_seq -> i4_qpprime_y_zero_transform_bypass_flag != 0 ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> ps_seq -> i4_seq_scaling_matrix_present_flag = //<S2SV> ( WORD32 ) ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> if ( ps_seq -> i4_seq_scaling_matrix_present_flag ) //<S2SV> { //<S2SV> for ( i4_i = 0 ; i4_i < 8 ; i4_i ++ ) //<S2SV> { //<S2SV> ps_seq -> u1_seq_scaling_list_present_flag [ i4_i ] = //<S2SV> ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> ps_seq -> u1_use_default_scaling_matrix_flag [ i4_i ] = 0 ; //<S2SV> if ( ps_seq -> u1_seq_scaling_list_present_flag [ i4_i ] ) //<S2SV> { //<S2SV> if ( i4_i < 6 ) //<S2SV> { //<S2SV> ih264d_scaling_list ( //<S2SV> ps_seq -> i2_scalinglist4x4 [ i4_i ] , //<S2SV> 16 , //<S2SV> & ps_seq -> u1_use_default_scaling_matrix_flag [ i4_i ] , //<S2SV> ps_bitstrm ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ih264d_scaling_list ( //<S2SV> ps_seq -> i2_scalinglist8x8 [ i4_i - 6 ] , //<S2SV> 64 , //<S2SV> & ps_seq -> u1_use_default_scaling_matrix_flag [ i4_i ] , //<S2SV> ps_bitstrm ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> u4_temp = 4 + ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > MAX_BITS_IN_FRAME_NUM ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> ps_seq -> u1_bits_in_frm_num = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>log2_max_frame_num_minus4" , //<S2SV> ( ps_seq -> u1_bits_in_frm_num - 4 ) ) ; //<S2SV> i2_max_frm_num = ( 1 << ( ps_seq -> u1_bits_in_frm_num ) ) ; //<S2SV> ps_seq -> u2_u4_max_pic_num_minus1 = i2_max_frm_num - 1 ; //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > MAX_PIC_ORDER_CNT_TYPE ) //<S2SV> { //<S2SV> return ERROR_INV_POC_TYPE_T ; //<S2SV> } //<S2SV> ps_seq -> u1_pic_order_cnt_type = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>pic_order_cnt_type" , ps_seq -> u1_pic_order_cnt_type ) ; //<S2SV> ps_seq -> u1_num_ref_frames_in_pic_order_cnt_cycle = 1 ; //<S2SV> if ( ps_seq -> u1_pic_order_cnt_type == 0 ) //<S2SV> { //<S2SV> u4_temp = 4 + ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > MAX_BITS_IN_POC_LSB ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> ps_seq -> u1_log2_max_pic_order_cnt_lsb_minus = u4_temp ; //<S2SV> ps_seq -> i4_max_pic_order_cntLsb = ( 1 << u4_temp ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>log2_max_pic_order_cnt_lsb_minus4" , ( u4_temp - 4 ) ) ; //<S2SV> } //<S2SV> else if ( ps_seq -> u1_pic_order_cnt_type == 1 ) //<S2SV> { //<S2SV> ps_seq -> u1_delta_pic_order_always_zero_flag = ih264d_get_bit_h264 ( //<S2SV> ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>delta_pic_order_always_zero_flag" , //<S2SV> ps_seq -> u1_delta_pic_order_always_zero_flag ) ; //<S2SV> ps_seq -> i4_ofst_for_non_ref_pic = ih264d_sev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>offset_for_non_ref_pic" , //<S2SV> ps_seq -> i4_ofst_for_non_ref_pic ) ; //<S2SV> ps_seq -> i4_ofst_for_top_to_bottom_field = ih264d_sev ( //<S2SV> pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>offset_for_top_to_bottom_field" , //<S2SV> ps_seq -> i4_ofst_for_top_to_bottom_field ) ; //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > 255 ) //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> ps_seq -> u1_num_ref_frames_in_pic_order_cnt_cycle = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>num_ref_frames_in_pic_order_cnt_cycle" , //<S2SV> ps_seq -> u1_num_ref_frames_in_pic_order_cnt_cycle ) ; //<S2SV> for ( i = 0 ; i < ps_seq -> u1_num_ref_frames_in_pic_order_cnt_cycle ; i ++ ) //<S2SV> { //<S2SV> ps_seq -> i4_ofst_for_ref_frame [ i ] = ih264d_sev ( //<S2SV> pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>offset_for_ref_frame" , //<S2SV> ps_seq -> i4_ofst_for_ref_frame [ i ] ) ; //<S2SV> } //<S2SV> } //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( ( u4_temp > H264_MAX_REF_PICS ) ) //<S2SV> { //<S2SV> return ERROR_NUM_REF ; //<S2SV> } //<S2SV> ps_seq -> u1_num_ref_frames = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>num_ref_frames" , ps_seq -> u1_num_ref_frames ) ; //<S2SV> ps_seq -> u1_gaps_in_frame_num_value_allowed_flag = ih264d_get_bit_h264 ( //<S2SV> ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>gaps_in_frame_num_value_allowed_flag" , //<S2SV> ps_seq -> u1_gaps_in_frame_num_value_allowed_flag ) ; //<S2SV> ps_seq -> u2_frm_wd_in_mbs = 1 //<S2SV> + ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>pic_width_in_mbs_minus1" , //<S2SV> ps_seq -> u2_frm_wd_in_mbs - 1 ) ; //<S2SV> u2_pic_wd = ( ps_seq -> u2_frm_wd_in_mbs << 4 ) ; //<S2SV> pic_height_in_map_units_minus1 = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> ps_seq -> u2_frm_ht_in_mbs = 1 + pic_height_in_map_units_minus1 ; //<S2SV> u2_pic_ht = ( ps_seq -> u2_frm_ht_in_mbs << 4 ) ; //<S2SV> ps_seq -> u2_max_mb_addr = ( ps_seq -> u2_frm_wd_in_mbs //<S2SV> * ps_seq -> u2_frm_ht_in_mbs ) - 1 ; //<S2SV> ps_seq -> u2_total_num_of_mbs = ps_seq -> u2_max_mb_addr + 1 ; //<S2SV> ps_seq -> u1_level_idc = ih264d_correct_level_idc ( //<S2SV> u1_level_idc , ps_seq -> u2_total_num_of_mbs ) ; //<S2SV> u1_frm = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> ps_seq -> u1_frame_mbs_only_flag = u1_frm ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>frame_mbs_only_flag" , u1_frm ) ; //<S2SV> if ( ! u1_frm ) //<S2SV> { //<S2SV> u2_pic_ht <<= 1 ; //<S2SV> ps_seq -> u1_mb_aff_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>mb_adaptive_frame_field_flag" , //<S2SV> ps_seq -> u1_mb_aff_flag ) ; //<S2SV> } //<S2SV> else //<S2SV> ps_seq -> u1_mb_aff_flag = 0 ; //<S2SV> ps_seq -> u1_direct_8x8_inference_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>direct_8x8_inference_flag" , //<S2SV> ps_seq -> u1_direct_8x8_inference_flag ) ; //<S2SV> u1_frame_cropping_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>frame_cropping_flag" , u1_frame_cropping_flag ) ; //<S2SV> if ( u1_frame_cropping_flag ) //<S2SV> { //<S2SV> u1_frame_cropping_rect_left_ofst = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>frame_cropping_rect_left_offset" , //<S2SV> u1_frame_cropping_rect_left_ofst ) ; //<S2SV> u1_frame_cropping_rect_right_ofst = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>frame_cropping_rect_right_offset" , //<S2SV> u1_frame_cropping_rect_right_ofst ) ; //<S2SV> u1_frame_cropping_rect_top_ofst = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>frame_cropping_rect_top_offset" , //<S2SV> u1_frame_cropping_rect_top_ofst ) ; //<S2SV> u1_frame_cropping_rect_bottom_ofst = ih264d_uev ( pu4_bitstrm_ofst , //<S2SV> pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>frame_cropping_rect_bottom_offset" , //<S2SV> u1_frame_cropping_rect_bottom_ofst ) ; //<S2SV> } //<S2SV> ps_seq -> u1_vui_parameters_present_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SPS:<S2SV_blank>vui_parameters_present_flag" , //<S2SV> ps_seq -> u1_vui_parameters_present_flag ) ; //<S2SV> u2_frm_wd_y = u2_pic_wd + ( UWORD8 ) ( PAD_LEN_Y_H << 1 ) ; //<S2SV> if ( 1 == ps_dec -> u4_share_disp_buf ) //<S2SV> { //<S2SV> if ( ps_dec -> u4_app_disp_width > u2_frm_wd_y ) //<S2SV> u2_frm_wd_y = ps_dec -> u4_app_disp_width ; //<S2SV> } //<S2SV> u2_frm_ht_y = u2_pic_ht + ( UWORD8 ) ( PAD_LEN_Y_V << 2 ) ; //<S2SV> u2_frm_wd_uv = u2_pic_wd + ( UWORD8 ) ( PAD_LEN_UV_H << 2 ) ; //<S2SV> u2_frm_wd_uv = MAX ( u2_frm_wd_uv , u2_frm_wd_y ) ; //<S2SV> u2_frm_ht_uv = ( u2_pic_ht >> 1 ) + ( UWORD8 ) ( PAD_LEN_UV_V << 2 ) ; //<S2SV> u2_frm_ht_uv = MAX ( u2_frm_ht_uv , ( u2_frm_ht_y >> 1 ) ) ; //<S2SV> { //<S2SV> UWORD16 u2_rgt_ofst = 0 ; //<S2SV> UWORD16 u2_lft_ofst = 0 ; //<S2SV> UWORD16 u2_top_ofst = 0 ; //<S2SV> UWORD16 u2_btm_ofst = 0 ; //<S2SV> UWORD8 u1_frm_mbs_flag ; //<S2SV> UWORD8 u1_vert_mult_factor ; //<S2SV> WORD32 i4_cropped_ht , i4_cropped_wd ; //<S2SV> if ( u1_frame_cropping_flag ) //<S2SV> { //<S2SV> u2_rgt_ofst = u1_frame_cropping_rect_right_ofst << 1 ; //<S2SV> u2_lft_ofst = u1_frame_cropping_rect_left_ofst << 1 ; //<S2SV> u1_frm_mbs_flag = ( 1 == ps_seq -> u1_frame_mbs_only_flag ) ; //<S2SV> u1_vert_mult_factor = ( 2 - u1_frm_mbs_flag ) ; //<S2SV> u2_btm_ofst = ( u1_frame_cropping_rect_bottom_ofst //<S2SV> << u1_vert_mult_factor ) ; //<S2SV> u2_top_ofst = ( u1_frame_cropping_rect_top_ofst //<S2SV> << u1_vert_mult_factor ) ; //<S2SV> } //<S2SV> u2_crop_offset_y = ( u2_frm_wd_y * u2_top_ofst ) + ( u2_lft_ofst ) ; //<S2SV> u2_crop_offset_uv = ( u2_frm_wd_uv * ( u2_top_ofst >> 1 ) ) //<S2SV> + ( u2_lft_ofst >> 1 ) * YUV420SP_FACTOR ; //<S2SV> i4_cropped_ht = u2_pic_ht - ( u2_btm_ofst + u2_top_ofst ) ; //<S2SV> i4_cropped_wd = u2_pic_wd - ( u2_rgt_ofst + u2_lft_ofst ) ; //<S2SV> if ( ( i4_cropped_ht < MB_SIZE ) || ( i4_cropped_wd < MB_SIZE ) ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> if ( ( 3 == ps_dec -> i4_header_decoded ) && ( ps_dec -> u2_pic_wd != u2_pic_wd ) ) //<S2SV> { //<S2SV> ps_dec -> u1_res_changed = 1 ; //<S2SV> return IVD_RES_CHANGED ; //<S2SV> } //<S2SV> if ( ( 3 == ps_dec -> i4_header_decoded ) && ( ps_dec -> u2_pic_ht != u2_pic_ht ) ) //<S2SV> { //<S2SV> ps_dec -> u1_res_changed = 1 ; //<S2SV> return IVD_RES_CHANGED ; //<S2SV> } //<S2SV> if ( ( u2_pic_wd > H264_MAX_FRAME_WIDTH ) || ( u2_pic_ht > H264_MAX_FRAME_HEIGHT ) ) //<S2SV> { //<S2SV> return IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED ; //<S2SV> } //<S2SV> ps_dec -> u2_disp_height = i4_cropped_ht ; //<S2SV> ps_dec -> u2_disp_width = i4_cropped_wd ; //<S2SV> } //<S2SV> if ( 1 == ps_seq -> u1_vui_parameters_present_flag ) //<S2SV> { //<S2SV> ret = ih264d_parse_vui_parametres ( & ps_seq -> s_vui , ps_bitstrm ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> } //<S2SV> ps_dec -> u2_pic_wd = u2_pic_wd ; //<S2SV> ps_dec -> u2_pic_ht = u2_pic_ht ; //<S2SV> ps_dec -> u2_frm_wd_y = u2_frm_wd_y ; //<S2SV> ps_dec -> u2_frm_ht_y = u2_frm_ht_y ; //<S2SV> ps_dec -> u2_frm_wd_uv = u2_frm_wd_uv ; //<S2SV> ps_dec -> u2_frm_ht_uv = u2_frm_ht_uv ; //<S2SV> ps_dec -> s_pad_mgr . u1_pad_len_y_v = ( UWORD8 ) ( PAD_LEN_Y_V << ( 1 - u1_frm ) ) ; //<S2SV> ps_dec -> s_pad_mgr . u1_pad_len_cr_v = ( UWORD8 ) ( PAD_LEN_UV_V << ( 1 - u1_frm ) ) ; //<S2SV> ps_dec -> u2_frm_wd_in_mbs = ps_seq -> u2_frm_wd_in_mbs ; //<S2SV> ps_dec -> u2_frm_ht_in_mbs = ps_seq -> u2_frm_ht_in_mbs ; //<S2SV> ps_dec -> u2_crop_offset_y = u2_crop_offset_y ; //<S2SV> ps_dec -> u2_crop_offset_uv = u2_crop_offset_uv ; //<S2SV> if ( ps_bitstrm -> u4_ofst > ps_bitstrm -> u4_max_ofst ) //<S2SV> { //<S2SV> return ERROR_INV_SPS_PPS_T ; //<S2SV> } //<S2SV> ps_seq -> u1_is_valid = TRUE ; //<S2SV> ps_dec -> ps_sps [ u1_seq_parameter_set_id ] = * ps_seq ; //<S2SV> return OK ; //<S2SV> } //<S2SV> 