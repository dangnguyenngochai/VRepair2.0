void ih264d_init_decoder ( void * ps_dec_params ) //<S2SV> { //<S2SV> dec_struct_t * ps_dec = ( dec_struct_t * ) ps_dec_params ; //<S2SV> dec_slice_params_t * ps_cur_slice ; //<S2SV> pocstruct_t * ps_prev_poc , * ps_cur_poc ; //<S2SV> WORD32 size ; //<S2SV> size = sizeof ( pred_info_t ) * 2 * 32 ; //<S2SV> memset ( ps_dec -> ps_pred , 0 , size ) ; //<S2SV> size = sizeof ( disp_mgr_t ) ; //<S2SV> memset ( ps_dec -> pv_disp_buf_mgr , 0 , size ) ; //<S2SV> size = sizeof ( buf_mgr_t ) + ithread_get_mutex_lock_size ( ) ; //<S2SV> memset ( ps_dec -> pv_pic_buf_mgr , 0 , size ) ; //<S2SV> size = sizeof ( dec_err_status_t ) ; //<S2SV> memset ( ps_dec -> ps_dec_err_status , 0 , size ) ; //<S2SV> size = sizeof ( sei ) ; //<S2SV> memset ( ps_dec -> ps_sei , 0 , size ) ; //<S2SV> size = sizeof ( dpb_commands_t ) ; //<S2SV> memset ( ps_dec -> ps_dpb_cmds , 0 , size ) ; //<S2SV> size = sizeof ( dec_bit_stream_t ) ; //<S2SV> memset ( ps_dec -> ps_bitstrm , 0 , size ) ; //<S2SV> size = sizeof ( dec_slice_params_t ) ; //<S2SV> memset ( ps_dec -> ps_cur_slice , 0 , size ) ; //<S2SV> size = MAX ( sizeof ( dec_seq_params_t ) , sizeof ( dec_pic_params_t ) ) ; //<S2SV> memset ( ps_dec -> pv_scratch_sps_pps , 0 , size ) ; //<S2SV> size = sizeof ( ctxt_inc_mb_info_t ) ; //<S2SV> memset ( ps_dec -> ps_left_mb_ctxt_info , 0 , size ) ; //<S2SV> size = ( sizeof ( neighbouradd_t ) << 2 ) ; //<S2SV> memset ( ps_dec -> ps_left_mvpred_addr , 0 , size ) ; //<S2SV> size = sizeof ( buf_mgr_t ) + ithread_get_mutex_lock_size ( ) ; //<S2SV> memset ( ps_dec -> pv_mv_buf_mgr , 0 , size ) ; //<S2SV> ih264d_free_dynamic_bufs ( ps_dec ) ; //<S2SV> ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> ps_dec -> init_done = 0 ; //<S2SV> ps_dec -> u4_num_cores = 1 ; //<S2SV> ps_dec -> u2_pic_ht = ps_dec -> u2_pic_wd = 0 ; //<S2SV> ps_dec -> u1_separate_parse = DEFAULT_SEPARATE_PARSE ; //<S2SV> ps_dec -> u4_app_disable_deblk_frm = 0 ; //<S2SV> ps_dec -> i4_degrade_type = 0 ; //<S2SV> ps_dec -> i4_degrade_pics = 0 ; //<S2SV> ps_dec -> i4_app_skip_mode = IVD_SKIP_NONE ; //<S2SV> ps_dec -> i4_dec_skip_mode = IVD_SKIP_NONE ; //<S2SV> memset ( ps_dec -> ps_pps , 0 , //<S2SV> ( ( sizeof ( dec_pic_params_t ) ) * MAX_NUM_PIC_PARAMS ) ) ; //<S2SV> memset ( ps_dec -> ps_sps , 0 , //<S2SV> ( ( sizeof ( dec_seq_params_t ) ) * MAX_NUM_SEQ_PARAMS ) ) ; //<S2SV> ps_dec -> p_DeblockPicture [ 0 ] = ih264d_deblock_picture_non_mbaff ; //<S2SV> ps_dec -> p_DeblockPicture [ 1 ] = ih264d_deblock_picture_mbaff ; //<S2SV> ps_dec -> s_cab_dec_env . pv_codec_handle = ps_dec ; //<S2SV> ps_dec -> u4_num_fld_in_frm = 0 ; //<S2SV> ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; //<S2SV> ps_dec -> ps_sei -> u1_is_valid = 0 ; //<S2SV> ps_dec -> ps_cur_pps = NULL ; //<S2SV> ps_dec -> ps_cur_sps = NULL ; //<S2SV> ps_dec -> u1_init_dec_flag = 0 ; //<S2SV> ps_dec -> u1_first_slice_in_stream = 1 ; //<S2SV> ps_dec -> u1_first_pb_nal_in_pic = 1 ; //<S2SV> ps_dec -> u1_last_pic_not_decoded = 0 ; //<S2SV> ps_dec -> u4_app_disp_width = 0 ; //<S2SV> ps_dec -> i4_header_decoded = 0 ; //<S2SV> ps_dec -> u4_total_frames_decoded = 0 ; //<S2SV> ps_dec -> i4_error_code = 0 ; //<S2SV> ps_dec -> i4_content_type = - 1 ; //<S2SV> ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag = 0 ; //<S2SV> ps_dec -> ps_dec_err_status -> u1_err_flag = ACCEPT_ALL_PICS ; //<S2SV> ps_dec -> ps_dec_err_status -> u1_cur_pic_type = PIC_TYPE_UNKNOWN ; //<S2SV> ps_dec -> ps_dec_err_status -> u4_frm_sei_sync = SYNC_FRM_DEFAULT ; //<S2SV> ps_dec -> ps_dec_err_status -> u4_cur_frm = INIT_FRAME ; //<S2SV> ps_dec -> ps_dec_err_status -> u1_pic_aud_i = PIC_TYPE_UNKNOWN ; //<S2SV> ps_dec -> u1_pr_sl_type = 0xFF ; //<S2SV> ps_dec -> u2_mbx = 0xffff ; //<S2SV> ps_dec -> u2_mby = 0 ; //<S2SV> ps_dec -> u2_total_mbs_coded = 0 ; //<S2SV> ps_prev_poc = & ps_dec -> s_prev_pic_poc ; //<S2SV> ps_cur_poc = & ps_dec -> s_cur_pic_poc ; //<S2SV> ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb = 0 ; //<S2SV> ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb = 0 ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt_bottom = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt_bottom = 0 ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt [ 0 ] = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] = 0 ; //<S2SV> ps_prev_poc -> i4_delta_pic_order_cnt [ 1 ] = //<S2SV> ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] = 0 ; //<S2SV> ps_prev_poc -> u1_mmco_equalto5 = ps_cur_poc -> u1_mmco_equalto5 = 0 ; //<S2SV> ps_prev_poc -> i4_top_field_order_count = ps_cur_poc -> i4_top_field_order_count = //<S2SV> 0 ; //<S2SV> ps_prev_poc -> i4_bottom_field_order_count = //<S2SV> ps_cur_poc -> i4_bottom_field_order_count = 0 ; //<S2SV> ps_prev_poc -> u1_bot_field = ps_cur_poc -> u1_bot_field = 0 ; //<S2SV> ps_prev_poc -> u1_mmco_equalto5 = ps_cur_poc -> u1_mmco_equalto5 = 0 ; //<S2SV> ps_prev_poc -> i4_prev_frame_num_ofst = ps_cur_poc -> i4_prev_frame_num_ofst = 0 ; //<S2SV> ps_cur_slice -> u1_mmco_equalto5 = 0 ; //<S2SV> ps_cur_slice -> u2_frame_num = 0 ; //<S2SV> ps_dec -> i4_max_poc = 0 ; //<S2SV> ps_dec -> i4_prev_max_display_seq = 0 ; //<S2SV> ps_dec -> u1_recon_mb_grp = 4 ; //<S2SV> ps_dec -> u1_second_field = 0 ; //<S2SV> ps_dec -> s_prev_seq_params . u1_eoseq_pending = 0 ; //<S2SV> ps_dec -> u2_crop_offset_y = 0 ; //<S2SV> ps_dec -> u2_crop_offset_uv = 0 ; //<S2SV> ps_dec -> i4_vui_frame_rate = - 1 ; //<S2SV> ps_dec -> i4_pic_type = - 1 ; //<S2SV> ps_dec -> i4_frametype = - 1 ; //<S2SV> ps_dec -> i4_content_type = - 1 ; //<S2SV> ps_dec -> u1_res_changed = 0 ; //<S2SV> ps_dec -> u1_frame_decoded_flag = 0 ; //<S2SV> ps_dec -> u4_skip_frm_mask = SKIP_NONE ; //<S2SV> ps_dec -> pf_cavlc_4x4res_block [ 0 ] = ih264d_cavlc_4x4res_block_totalcoeff_1 ; //<S2SV> ps_dec -> pf_cavlc_4x4res_block [ 1 ] = //<S2SV> ih264d_cavlc_4x4res_block_totalcoeff_2to10 ; //<S2SV> ps_dec -> pf_cavlc_4x4res_block [ 2 ] = //<S2SV> ih264d_cavlc_4x4res_block_totalcoeff_11to16 ; //<S2SV> ps_dec -> pf_cavlc_parse4x4coeff [ 0 ] = ih264d_cavlc_parse4x4coeff_n0to7 ; //<S2SV> ps_dec -> pf_cavlc_parse4x4coeff [ 1 ] = ih264d_cavlc_parse4x4coeff_n8 ; //<S2SV> ps_dec -> pf_cavlc_parse_8x8block [ 0 ] = //<S2SV> ih264d_cavlc_parse_8x8block_none_available ; //<S2SV> ps_dec -> pf_cavlc_parse_8x8block [ 1 ] = //<S2SV> ih264d_cavlc_parse_8x8block_left_available ; //<S2SV> ps_dec -> pf_cavlc_parse_8x8block [ 2 ] = //<S2SV> ih264d_cavlc_parse_8x8block_top_available ; //<S2SV> ps_dec -> pf_cavlc_parse_8x8block [ 3 ] = //<S2SV> ih264d_cavlc_parse_8x8block_both_available ; //<S2SV> ps_dec -> pf_fill_bs1 [ 0 ] [ 0 ] = ih264d_fill_bs1_16x16mb_pslice ; //<S2SV> ps_dec -> pf_fill_bs1 [ 0 ] [ 1 ] = ih264d_fill_bs1_non16x16mb_pslice ; //<S2SV> ps_dec -> pf_fill_bs1 [ 1 ] [ 0 ] = ih264d_fill_bs1_16x16mb_bslice ; //<S2SV> ps_dec -> pf_fill_bs1 [ 1 ] [ 1 ] = ih264d_fill_bs1_non16x16mb_bslice ; //<S2SV> ps_dec -> pf_fill_bs_xtra_left_edge [ 0 ] = //<S2SV> ih264d_fill_bs_xtra_left_edge_cur_frm ; //<S2SV> ps_dec -> pf_fill_bs_xtra_left_edge [ 1 ] = //<S2SV> ih264d_fill_bs_xtra_left_edge_cur_fld ; //<S2SV> ih264d_init_ref_bufs ( ps_dec -> ps_dpb_mgr ) ; //<S2SV> ps_dec -> u2_prv_frame_num = 0 ; //<S2SV> ps_dec -> u1_top_bottom_decoded = 0 ; //<S2SV> ps_dec -> u1_dangling_field = 0 ; //<S2SV> ps_dec -> s_cab_dec_env . cabac_table = gau4_ih264d_cabac_table ; //<S2SV> ps_dec -> pu1_left_mv_ctxt_inc = ps_dec -> u1_left_mv_ctxt_inc_arr [ 0 ] ; //<S2SV> ps_dec -> pi1_left_ref_idx_ctxt_inc = //<S2SV> & ps_dec -> i1_left_ref_idx_ctx_inc_arr [ 0 ] [ 0 ] ; //<S2SV> ps_dec -> pu1_left_yuv_dc_csbp = & ps_dec -> u1_yuv_dc_csbp_topmb ; //<S2SV> ps_dec -> u1_flushfrm = 0 ; //<S2SV> { //<S2SV> ps_dec -> s_cab_dec_env . pv_codec_handle = ( void * ) ps_dec ; //<S2SV> ps_dec -> ps_bitstrm -> pv_codec_handle = ( void * ) ps_dec ; //<S2SV> ps_dec -> ps_cur_slice -> pv_codec_handle = ( void * ) ps_dec ; //<S2SV> ps_dec -> ps_dpb_mgr -> pv_codec_handle = ( void * ) ps_dec ; //<S2SV> } //<S2SV> memset ( ps_dec -> disp_bufs , 0 , ( MAX_DISP_BUFS_NEW ) * sizeof ( disp_buf_t ) ) ; //<S2SV> memset ( ps_dec -> u4_disp_buf_mapping , 0 , //<S2SV> ( MAX_DISP_BUFS_NEW ) * sizeof ( UWORD32 ) ) ; //<S2SV> memset ( ps_dec -> u4_disp_buf_to_be_freed , 0 , //<S2SV> ( MAX_DISP_BUFS_NEW ) * sizeof ( UWORD32 ) ) ; //<S2SV> memset ( ps_dec -> ps_cur_slice , 0 , sizeof ( dec_slice_params_t ) ) ; //<S2SV> ih264d_init_arch ( ps_dec ) ; //<S2SV> ih264d_init_function_ptr ( ps_dec ) ; //<S2SV> ps_dec -> e_frm_out_mode = IVD_DISPLAY_FRAME_OUT ; //<S2SV> ps_dec -> init_done = 1 ; //<S2SV> } //<S2SV> 