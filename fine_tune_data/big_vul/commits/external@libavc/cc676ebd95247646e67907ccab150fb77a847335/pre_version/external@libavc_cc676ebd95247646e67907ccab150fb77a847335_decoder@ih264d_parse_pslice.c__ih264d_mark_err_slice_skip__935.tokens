WORD32 ih264d_mark_err_slice_skip ( dec_struct_t * ps_dec , //<S2SV> WORD32 num_mb_skip , //<S2SV> UWORD8 u1_is_idr_slice , //<S2SV> UWORD16 u2_frame_num , //<S2SV> pocstruct_t * ps_cur_poc , //<S2SV> WORD32 prev_slice_err ) //<S2SV> { //<S2SV> WORD32 i2_cur_mb_addr ; //<S2SV> UWORD32 u1_num_mbs , u1_num_mbsNby2 ; //<S2SV> UWORD32 u1_mb_idx = ps_dec -> u1_mb_idx ; //<S2SV> UWORD32 i2_mb_skip_run ; //<S2SV> UWORD32 u1_num_mbs_next , u1_end_of_row ; //<S2SV> const UWORD32 i2_pic_wdin_mbs = ps_dec -> u2_frm_wd_in_mbs ; //<S2SV> UWORD32 u1_slice_end ; //<S2SV> UWORD32 u1_tfr_n_mb ; //<S2SV> UWORD32 u1_decode_nmb ; //<S2SV> dec_bit_stream_t * const ps_bitstrm = ps_dec -> ps_bitstrm ; //<S2SV> dec_slice_params_t * ps_slice = ps_dec -> ps_cur_slice ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> u4_ofst ; //<S2SV> deblk_mb_t * ps_cur_deblk_mb ; //<S2SV> dec_mb_info_t * ps_cur_mb_info ; //<S2SV> parse_pmbarams_t * ps_parse_mb_data ; //<S2SV> UWORD32 u1_inter_mb_type ; //<S2SV> UWORD32 u1_deblk_mb_type ; //<S2SV> UWORD16 u2_total_mbs_coded ; //<S2SV> UWORD32 u1_mbaff = ps_slice -> u1_mbaff_frame_flag ; //<S2SV> parse_part_params_t * ps_part_info ; //<S2SV> WORD32 ret ; //<S2SV> if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) //<S2SV> { //<S2SV> ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ps_dec -> ps_dpb_cmds -> u1_long_term_reference_flag = 0 ; //<S2SV> if ( prev_slice_err == 1 ) //<S2SV> { //<S2SV> ps_dec -> ps_cur_slice -> u2_frame_num = u2_frame_num ; //<S2SV> if ( ! ps_dec -> u1_first_slice_in_stream ) //<S2SV> { //<S2SV> ih264d_end_of_pic ( ps_dec , u1_is_idr_slice , //<S2SV> ps_dec -> ps_cur_slice -> u2_frame_num ) ; //<S2SV> ps_dec -> s_cur_pic_poc . u2_frame_num = //<S2SV> ps_dec -> ps_cur_slice -> u2_frame_num ; //<S2SV> } //<S2SV> { //<S2SV> WORD32 i , j , poc = 0 ; //<S2SV> ps_dec -> ps_cur_slice -> u2_first_mb_in_slice = 0 ; //<S2SV> ps_dec -> pf_mvpred = ih264d_mvpred_nonmbaff ; //<S2SV> ps_dec -> p_form_mb_part_info = ih264d_form_mb_part_info_bp ; //<S2SV> ps_dec -> p_motion_compensate = ih264d_motion_compensate_bp ; //<S2SV> if ( ps_dec -> ps_cur_pic != NULL ) //<S2SV> poc = ps_dec -> ps_cur_pic -> i4_poc + 2 ; //<S2SV> j = 0 ; //<S2SV> for ( i = 0 ; i < MAX_NUM_PIC_PARAMS ; i ++ ) //<S2SV> if ( ps_dec -> ps_pps [ i ] . u1_is_valid == TRUE ) //<S2SV> j = i ; //<S2SV> { //<S2SV> ps_dec -> ps_cur_slice -> u1_bottom_field_flag = 0 ; //<S2SV> ps_dec -> ps_cur_slice -> u1_field_pic_flag = 0 ; //<S2SV> ps_dec -> ps_cur_slice -> u1_slice_type = P_SLICE ; //<S2SV> ps_dec -> ps_cur_slice -> u1_nal_ref_idc = 1 ; //<S2SV> ps_dec -> ps_cur_slice -> u1_nal_unit_type = 1 ; //<S2SV> ret = ih264d_start_of_pic ( ps_dec , poc , ps_cur_poc , //<S2SV> ps_dec -> ps_cur_slice -> u2_frame_num , //<S2SV> & ps_dec -> ps_pps [ j ] ) ; //<S2SV> if ( ret != OK ) //<S2SV> { //<S2SV> return ret ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> ps_ref_pic_buf_lx [ 0 ] [ 0 ] -> u1_pic_buf_id = 0 ; //<S2SV> ps_dec -> u4_output_present = 0 ; //<S2SV> { //<S2SV> ih264d_get_next_display_field ( ps_dec , //<S2SV> ps_dec -> ps_out_buffer , //<S2SV> & ( ps_dec -> s_disp_op ) ) ; //<S2SV> if ( 0 != ps_dec -> s_disp_op . u4_error_code ) //<S2SV> { //<S2SV> ps_dec -> u4_fmt_conv_cur_row = ps_dec -> s_disp_frame_info . u4_y_ht ; //<S2SV> } //<S2SV> else //<S2SV> ps_dec -> u4_output_present = 1 ; //<S2SV> } //<S2SV> if ( ps_dec -> u1_separate_parse == 1 ) //<S2SV> { //<S2SV> if ( ps_dec -> u4_dec_thread_created == 0 ) //<S2SV> { //<S2SV> ithread_create ( ps_dec -> pv_dec_thread_handle , NULL , //<S2SV> ( void * ) ih264d_decode_picture_thread , //<S2SV> ( void * ) ps_dec ) ; //<S2SV> ps_dec -> u4_dec_thread_created = 1 ; //<S2SV> } //<S2SV> if ( ( ps_dec -> u4_num_cores == 3 ) && //<S2SV> ( ( ps_dec -> u4_app_disable_deblk_frm == 0 ) || ps_dec -> i1_recon_in_thread3_flag ) //<S2SV> && ( ps_dec -> u4_bs_deblk_thread_created == 0 ) ) //<S2SV> { //<S2SV> ps_dec -> u4_start_recon_deblk = 0 ; //<S2SV> ithread_create ( ps_dec -> pv_bs_deblk_thread_handle , NULL , //<S2SV> ( void * ) ih264d_recon_deblk_thread , //<S2SV> ( void * ) ps_dec ) ; //<S2SV> ps_dec -> u4_bs_deblk_thread_created = 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> dec_slice_struct_t * ps_parse_cur_slice ; //<S2SV> ps_parse_cur_slice = ps_dec -> ps_dec_slice_buf + ps_dec -> u2_cur_slice_num ; //<S2SV> if ( ps_dec -> u1_slice_header_done //<S2SV> && ps_parse_cur_slice == ps_dec -> ps_parse_cur_slice ) //<S2SV> { //<S2SV> u1_num_mbs = ps_dec -> u4_num_mbs_cur_nmb ; //<S2SV> if ( u1_num_mbs ) //<S2SV> { //<S2SV> ps_cur_mb_info = ps_dec -> ps_nmb_info + u1_num_mbs - 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ps_cur_mb_info = ps_dec -> ps_nmb_info - 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_cur_mb_info = ps_dec -> ps_nmb_info //<S2SV> + ps_dec -> u4_num_mbs_prev_nmb - 1 ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> u2_mby = ps_cur_mb_info -> u2_mby ; //<S2SV> ps_dec -> u2_mbx = ps_cur_mb_info -> u2_mbx ; //<S2SV> ps_dec -> u1_mb_ngbr_availablity = //<S2SV> ps_cur_mb_info -> u1_mb_ngbr_availablity ; //<S2SV> ps_dec -> pv_parse_tu_coeff_data = ps_dec -> pv_prev_mb_parse_tu_coeff_data ; //<S2SV> ps_dec -> u2_cur_mb_addr -- ; //<S2SV> ps_dec -> i4_submb_ofst -= SUB_BLK_SIZE ; //<S2SV> if ( u1_num_mbs ) //<S2SV> { //<S2SV> if ( ps_dec -> u1_pr_sl_type == P_SLICE //<S2SV> || ps_dec -> u1_pr_sl_type == B_SLICE ) //<S2SV> { //<S2SV> ps_dec -> pf_mvpred_ref_tfr_nby2mb ( ps_dec , u1_mb_idx , u1_num_mbs ) ; //<S2SV> ps_dec -> ps_part = ps_dec -> ps_parse_part_params ; //<S2SV> } //<S2SV> u1_num_mbs_next = i2_pic_wdin_mbs - ps_dec -> u2_mbx - 1 ; //<S2SV> u1_end_of_row = ( ! u1_num_mbs_next ) //<S2SV> && ( ! ( u1_mbaff && ( u1_num_mbs & 0x01 ) ) ) ; //<S2SV> u1_slice_end = 1 ; //<S2SV> u1_tfr_n_mb = 1 ; //<S2SV> ps_cur_mb_info -> u1_end_of_slice = u1_slice_end ; //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ih264d_parse_tfr_nmb ( ps_dec , u1_mb_idx , u1_num_mbs , //<S2SV> u1_num_mbs_next , u1_tfr_n_mb , u1_end_of_row ) ; //<S2SV> ps_dec -> ps_nmb_info += u1_num_mbs ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ih264d_decode_recon_tfr_nmb ( ps_dec , u1_mb_idx , u1_num_mbs , //<S2SV> u1_num_mbs_next , u1_tfr_n_mb , u1_end_of_row ) ; //<S2SV> } //<S2SV> ps_dec -> u2_total_mbs_coded += u1_num_mbs ; //<S2SV> ps_dec -> u1_mb_idx = 0 ; //<S2SV> ps_dec -> u4_num_mbs_cur_nmb = 0 ; //<S2SV> } //<S2SV> if ( ps_dec -> u2_total_mbs_coded //<S2SV> >= ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) //<S2SV> { //<S2SV> ps_dec -> u1_pic_decode_done = 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ps_dec -> u2_cur_slice_num ++ ; //<S2SV> ps_dec -> i2_prev_slice_mbx = ps_dec -> u2_mbx ; //<S2SV> ps_dec -> i2_prev_slice_mby = ps_dec -> u2_mby ; //<S2SV> ps_dec -> ps_parse_cur_slice ++ ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> ps_parse_cur_slice = ps_dec -> ps_dec_slice_buf //<S2SV> + ps_dec -> u2_cur_slice_num ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> WORD32 num_entries ; //<S2SV> WORD32 size ; //<S2SV> UWORD8 * pu1_buf ; //<S2SV> num_entries = MAX_FRAMES ; //<S2SV> if ( ( 1 >= ps_dec -> ps_cur_sps -> u1_num_ref_frames ) && //<S2SV> ( 0 == ps_dec -> i4_display_delay ) ) //<S2SV> { //<S2SV> num_entries = 1 ; //<S2SV> } //<S2SV> num_entries = ( ( 2 * num_entries ) + 1 ) ; //<S2SV> if ( BASE_PROFILE_IDC != ps_dec -> ps_cur_sps -> u1_profile_idc ) //<S2SV> { //<S2SV> num_entries *= 2 ; //<S2SV> } //<S2SV> size = num_entries * sizeof ( void * ) ; //<S2SV> size += PAD_MAP_IDX_POC * sizeof ( void * ) ; //<S2SV> pu1_buf = ( UWORD8 * ) ps_dec -> pv_map_ref_idx_to_poc_buf ; //<S2SV> pu1_buf += size * ps_dec -> u2_cur_slice_num ; //<S2SV> ps_dec -> ps_parse_cur_slice -> ppv_map_ref_idx_to_poc = ( volatile void * * ) pu1_buf ; //<S2SV> } //<S2SV> ps_dec -> ps_cur_slice -> u2_first_mb_in_slice = ps_dec -> u2_total_mbs_coded << u1_mbaff ; //<S2SV> ps_dec -> ps_cur_slice -> i1_slice_alpha_c0_offset = 0 ; //<S2SV> ps_dec -> ps_cur_slice -> i1_slice_beta_offset = 0 ; //<S2SV> if ( ps_dec -> ps_cur_slice -> u1_field_pic_flag ) //<S2SV> ps_dec -> u2_prv_frame_num = ps_dec -> ps_cur_slice -> u2_frame_num ; //<S2SV> ps_dec -> ps_parse_cur_slice -> u4_first_mb_in_slice = ps_dec -> u2_total_mbs_coded << u1_mbaff ; //<S2SV> ps_dec -> ps_parse_cur_slice -> u2_log2Y_crwd = ps_dec -> ps_cur_slice -> u2_log2Y_crwd ; //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ps_dec -> ps_parse_cur_slice -> pv_tu_coeff_data_start = ps_dec -> pv_parse_tu_coeff_data ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> pv_proc_tu_coeff_data = ps_dec -> pv_parse_tu_coeff_data ; //<S2SV> } //<S2SV> u1_inter_mb_type = P_MB ; //<S2SV> u1_deblk_mb_type = D_INTER_MB ; //<S2SV> ps_dec -> ps_cur_slice -> u1_slice_type = P_SLICE ; //<S2SV> ps_dec -> ps_parse_cur_slice -> slice_type = P_SLICE ; //<S2SV> ps_dec -> pf_mvpred_ref_tfr_nby2mb = ih264d_mv_pred_ref_tfr_nby2_pmb ; //<S2SV> ps_dec -> ps_part = ps_dec -> ps_parse_part_params ; //<S2SV> ps_dec -> u1_slice_header_done = 2 ; //<S2SV> ps_dec -> u1_qp = ps_slice -> u1_slice_qp ; //<S2SV> ih264d_update_qp ( ps_dec , 0 ) ; //<S2SV> u1_mb_idx = ps_dec -> u1_mb_idx ; //<S2SV> ps_parse_mb_data = ps_dec -> ps_parse_mb_data ; //<S2SV> u1_num_mbs = u1_mb_idx ; //<S2SV> u1_slice_end = 0 ; //<S2SV> u1_tfr_n_mb = 0 ; //<S2SV> u1_decode_nmb = 0 ; //<S2SV> u1_num_mbsNby2 = 0 ; //<S2SV> i2_cur_mb_addr = ps_dec -> u2_total_mbs_coded ; //<S2SV> i2_mb_skip_run = num_mb_skip ; //<S2SV> while ( ! u1_slice_end ) //<S2SV> { //<S2SV> UWORD8 u1_mb_type ; //<S2SV> if ( i2_cur_mb_addr > ps_dec -> ps_cur_sps -> u2_max_mb_addr ) //<S2SV> break ; //<S2SV> ps_cur_mb_info = ps_dec -> ps_nmb_info + u1_num_mbs ; //<S2SV> ps_dec -> u4_num_mbs_cur_nmb = u1_num_mbs ; //<S2SV> ps_cur_mb_info -> u1_Mux = 0 ; //<S2SV> ps_dec -> u4_num_pmbair = ( u1_num_mbs >> u1_mbaff ) ; //<S2SV> ps_cur_deblk_mb = ps_dec -> ps_deblk_mbn + u1_num_mbs ; //<S2SV> ps_cur_mb_info -> u1_end_of_slice = 0 ; //<S2SV> ps_parse_mb_data -> u1_num_part = 1 ; //<S2SV> ps_parse_mb_data -> u1_isI_mb = 0 ; //<S2SV> if ( u1_mbaff ) //<S2SV> ih264d_get_mb_info_cavlc_mbaff ( ps_dec , i2_cur_mb_addr , ps_cur_mb_info , i2_mb_skip_run ) ; //<S2SV> else //<S2SV> ih264d_get_mb_info_cavlc_nonmbaff ( ps_dec , i2_cur_mb_addr , ps_cur_mb_info , i2_mb_skip_run ) ; //<S2SV> if ( ps_dec -> u4_app_disable_deblk_frm == 0 ) //<S2SV> { //<S2SV> ih264d_set_deblocking_parameters ( ps_cur_deblk_mb , ps_slice , //<S2SV> ps_dec -> u1_mb_ngbr_availablity , //<S2SV> ps_dec -> u1_cur_mb_fld_dec_flag ) ; //<S2SV> } //<S2SV> ps_dec -> i1_prev_mb_qp_delta = 0 ; //<S2SV> ps_dec -> u1_sub_mb_num = 0 ; //<S2SV> ps_cur_mb_info -> u1_mb_type = MB_SKIP ; //<S2SV> ps_cur_mb_info -> u1_mb_mc_mode = PRED_16x16 ; //<S2SV> ps_cur_mb_info -> u1_cbp = 0 ; //<S2SV> ps_part_info = ps_dec -> ps_part ; //<S2SV> ps_part_info -> u1_is_direct = PART_DIRECT_16x16 ; //<S2SV> ps_part_info -> u1_sub_mb_num = 0 ; //<S2SV> ps_dec -> ps_part ++ ; //<S2SV> ih264d_update_nnz_for_skipmb ( ps_dec , ps_cur_mb_info , CAVLC ) ; //<S2SV> ps_cur_mb_info -> ps_curmb -> u1_mb_type = u1_inter_mb_type ; //<S2SV> ps_cur_deblk_mb -> u1_mb_type |= u1_deblk_mb_type ; //<S2SV> i2_mb_skip_run -- ; //<S2SV> ps_cur_deblk_mb -> u1_mb_qp = ps_dec -> u1_qp ; //<S2SV> if ( u1_mbaff ) //<S2SV> { //<S2SV> ih264d_update_mbaff_left_nnz ( ps_dec , ps_cur_mb_info ) ; //<S2SV> } //<S2SV> i2_cur_mb_addr ++ ; //<S2SV> u1_num_mbs ++ ; //<S2SV> u1_num_mbsNby2 ++ ; //<S2SV> ps_parse_mb_data ++ ; //<S2SV> u1_num_mbs_next = i2_pic_wdin_mbs - ps_dec -> u2_mbx - 1 ; //<S2SV> u1_end_of_row = ( ! u1_num_mbs_next ) && ( ! ( u1_mbaff && ( u1_num_mbs & 0x01 ) ) ) ; //<S2SV> u1_slice_end = ! i2_mb_skip_run ; //<S2SV> u1_tfr_n_mb = ( u1_num_mbs == ps_dec -> u1_recon_mb_grp ) || u1_end_of_row //<S2SV> || u1_slice_end ; //<S2SV> u1_decode_nmb = u1_tfr_n_mb || u1_slice_end ; //<S2SV> ps_cur_mb_info -> u1_end_of_slice = u1_slice_end ; //<S2SV> if ( u1_decode_nmb ) //<S2SV> { //<S2SV> ps_dec -> pf_mvpred_ref_tfr_nby2mb ( ps_dec , u1_mb_idx , u1_num_mbs ) ; //<S2SV> u1_num_mbsNby2 = 0 ; //<S2SV> ps_parse_mb_data = ps_dec -> ps_parse_mb_data ; //<S2SV> ps_dec -> ps_part = ps_dec -> ps_parse_part_params ; //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> ih264d_parse_tfr_nmb ( ps_dec , u1_mb_idx , u1_num_mbs , //<S2SV> u1_num_mbs_next , u1_tfr_n_mb , u1_end_of_row ) ; //<S2SV> ps_dec -> ps_nmb_info += u1_num_mbs ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ih264d_decode_recon_tfr_nmb ( ps_dec , u1_mb_idx , u1_num_mbs , u1_num_mbs_next , //<S2SV> u1_tfr_n_mb , u1_end_of_row ) ; //<S2SV> } //<S2SV> ps_dec -> u2_total_mbs_coded += u1_num_mbs ; //<S2SV> if ( u1_tfr_n_mb ) //<S2SV> u1_num_mbs = 0 ; //<S2SV> u1_mb_idx = u1_num_mbs ; //<S2SV> ps_dec -> u1_mb_idx = u1_num_mbs ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> u4_num_mbs_cur_nmb = 0 ; //<S2SV> ps_dec -> ps_cur_slice -> u4_mbs_in_slice = i2_cur_mb_addr //<S2SV> - ps_dec -> ps_parse_cur_slice -> u4_first_mb_in_slice ; //<S2SV> H264_DEC_DEBUG_PRINT ( "Mbs<S2SV_blank>in<S2SV_blank>slice:<S2SV_blank>%d\\n" , ps_dec -> ps_cur_slice -> u4_mbs_in_slice ) ; //<S2SV> ps_dec -> u2_cur_slice_num ++ ; //<S2SV> if ( ps_dec -> u4_first_slice_in_pic != 0 ) //<S2SV> ps_dec -> ps_parse_cur_slice ++ ; //<S2SV> ps_dec -> i2_prev_slice_mbx = ps_dec -> u2_mbx ; //<S2SV> ps_dec -> i2_prev_slice_mby = ps_dec -> u2_mby ; //<S2SV> if ( ps_dec -> u2_total_mbs_coded //<S2SV> >= ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) //<S2SV> { //<S2SV> ps_dec -> u1_pic_decode_done = 1 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 