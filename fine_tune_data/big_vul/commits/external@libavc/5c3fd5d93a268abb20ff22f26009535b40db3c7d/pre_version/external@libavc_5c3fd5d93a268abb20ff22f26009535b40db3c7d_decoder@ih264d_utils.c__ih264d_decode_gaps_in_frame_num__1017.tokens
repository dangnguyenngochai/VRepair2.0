WORD32 ih264d_decode_gaps_in_frame_num ( dec_struct_t * ps_dec , //<S2SV> UWORD16 u2_frame_num ) //<S2SV> { //<S2SV> UWORD32 u4_next_frm_num , u4_start_frm_num ; //<S2SV> UWORD32 u4_max_frm_num ; //<S2SV> pocstruct_t s_tmp_poc ; //<S2SV> WORD32 i4_poc ; //<S2SV> dec_slice_params_t * ps_cur_slice ; //<S2SV> dec_pic_params_t * ps_pic_params ; //<S2SV> WORD8 i1_gap_idx ; //<S2SV> WORD32 * i4_gaps_start_frm_num ; //<S2SV> dpb_manager_t * ps_dpb_mgr ; //<S2SV> WORD32 i4_frame_gaps ; //<S2SV> WORD8 * pi1_gaps_per_seq ; //<S2SV> WORD32 ret ; //<S2SV> ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> if ( ps_cur_slice -> u1_field_pic_flag ) //<S2SV> { //<S2SV> if ( ps_dec -> u2_prev_ref_frame_num == u2_frame_num ) //<S2SV> return 0 ; //<S2SV> } //<S2SV> u4_next_frm_num = ps_dec -> u2_prev_ref_frame_num + 1 ; //<S2SV> u4_max_frm_num = ps_dec -> ps_cur_sps -> u2_u4_max_pic_num_minus1 + 1 ; //<S2SV> if ( u4_next_frm_num >= u4_max_frm_num ) //<S2SV> { //<S2SV> u4_next_frm_num -= u4_max_frm_num ; //<S2SV> } //<S2SV> if ( u4_next_frm_num == u2_frame_num ) //<S2SV> { //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> if ( ( ps_dec -> u1_nal_unit_type == IDR_SLICE_NAL ) //<S2SV> && ( u4_next_frm_num >= u2_frame_num ) ) //<S2SV> { //<S2SV> return ( 0 ) ; //<S2SV> } //<S2SV> u4_start_frm_num = u4_next_frm_num ; //<S2SV> s_tmp_poc . i4_pic_order_cnt_lsb = 0 ; //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt_bottom = 0 ; //<S2SV> s_tmp_poc . i4_pic_order_cnt_lsb = 0 ; //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt_bottom = 0 ; //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 0 ] = 0 ; //<S2SV> s_tmp_poc . i4_delta_pic_order_cnt [ 1 ] = 0 ; //<S2SV> ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> ps_pic_params = ps_dec -> ps_cur_pps ; //<S2SV> ps_cur_slice -> u1_field_pic_flag = 0 ; //<S2SV> i4_frame_gaps = 0 ; //<S2SV> ps_dpb_mgr = ps_dec -> ps_dpb_mgr ; //<S2SV> i4_gaps_start_frm_num = ps_dpb_mgr -> ai4_gaps_start_frm_num ; //<S2SV> for ( i1_gap_idx = 0 ; i1_gap_idx < MAX_FRAMES ; i1_gap_idx ++ ) //<S2SV> { //<S2SV> if ( INVALID_FRAME_NUM == i4_gaps_start_frm_num [ i1_gap_idx ] ) //<S2SV> break ; //<S2SV> } //<S2SV> if ( MAX_FRAMES == i1_gap_idx ) //<S2SV> { //<S2SV> UWORD32 i4_error_code ; //<S2SV> i4_error_code = ERROR_DBP_MANAGER_T ; //<S2SV> return i4_error_code ; //<S2SV> } //<S2SV> i4_poc = 0 ; //<S2SV> i4_gaps_start_frm_num [ i1_gap_idx ] = u4_start_frm_num ; //<S2SV> ps_dpb_mgr -> ai4_gaps_end_frm_num [ i1_gap_idx ] = u2_frame_num - 1 ; //<S2SV> pi1_gaps_per_seq = ps_dpb_mgr -> ai1_gaps_per_seq ; //<S2SV> pi1_gaps_per_seq [ i1_gap_idx ] = 0 ; //<S2SV> while ( u4_next_frm_num != u2_frame_num ) //<S2SV> { //<S2SV> ih264d_delete_nonref_nondisplay_pics ( ps_dpb_mgr ) ; //<S2SV> if ( ps_pic_params -> ps_sps -> u1_pic_order_cnt_type ) //<S2SV> { //<S2SV> ret = ih264d_decode_pic_order_cnt ( 0 , u4_next_frm_num , //<S2SV> & ps_dec -> s_prev_pic_poc , //<S2SV> & s_tmp_poc , ps_cur_slice , //<S2SV> ps_pic_params , 1 , 0 , 0 , //<S2SV> & i4_poc ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> if ( i4_poc >= ps_dec -> i4_max_poc ) //<S2SV> ps_dec -> i4_max_poc = i4_poc ; //<S2SV> if ( i4_poc == 0 ) //<S2SV> { //<S2SV> ps_dec -> i4_prev_max_display_seq = //<S2SV> ps_dec -> i4_prev_max_display_seq //<S2SV> + ps_dec -> i4_max_poc //<S2SV> + ps_dec -> u1_max_dec_frame_buffering //<S2SV> + 1 ; //<S2SV> ps_dec -> i4_max_poc = 0 ; //<S2SV> } //<S2SV> ps_cur_slice -> u1_mmco_equalto5 = 0 ; //<S2SV> ps_cur_slice -> u2_frame_num = u4_next_frm_num ; //<S2SV> } //<S2SV> if ( ps_dpb_mgr -> i1_poc_buf_id_entries //<S2SV> >= ps_dec -> u1_max_dec_frame_buffering ) //<S2SV> { //<S2SV> ret = ih264d_assign_display_seq ( ps_dec ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> } //<S2SV> ret = ih264d_insert_pic_in_display_list ( //<S2SV> ps_dec -> ps_dpb_mgr , ( WORD8 ) DO_NOT_DISP , //<S2SV> ( WORD32 ) ( ps_dec -> i4_prev_max_display_seq + i4_poc ) , //<S2SV> u4_next_frm_num ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> pi1_gaps_per_seq [ i1_gap_idx ] ++ ; //<S2SV> ret = ih264d_do_mmco_for_gaps ( ps_dpb_mgr , //<S2SV> ps_dec -> ps_cur_sps -> u1_num_ref_frames ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ih264d_delete_nonref_nondisplay_pics ( ps_dpb_mgr ) ; //<S2SV> u4_next_frm_num ++ ; //<S2SV> if ( u4_next_frm_num >= u4_max_frm_num ) //<S2SV> { //<S2SV> u4_next_frm_num -= u4_max_frm_num ; //<S2SV> } //<S2SV> i4_frame_gaps ++ ; //<S2SV> } //<S2SV> return OK ; //<S2SV> } //<S2SV> 