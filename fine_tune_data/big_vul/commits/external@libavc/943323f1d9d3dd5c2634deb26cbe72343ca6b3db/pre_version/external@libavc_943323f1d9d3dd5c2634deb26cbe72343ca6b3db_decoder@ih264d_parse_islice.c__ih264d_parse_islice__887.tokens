WORD32 ih264d_parse_islice ( dec_struct_t * ps_dec , //<S2SV> UWORD16 u2_first_mb_in_slice ) //<S2SV> { //<S2SV> dec_pic_params_t * ps_pps = ps_dec -> ps_cur_pps ; //<S2SV> dec_slice_params_t * ps_slice = ps_dec -> ps_cur_slice ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_dec -> ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD32 * pu4_bitstrm_ofst = & ps_dec -> ps_bitstrm -> u4_ofst ; //<S2SV> UWORD32 u4_temp ; //<S2SV> WORD32 i_temp ; //<S2SV> WORD32 ret ; //<S2SV> if ( ps_slice -> u1_nal_ref_idc != 0 ) //<S2SV> { //<S2SV> if ( ! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) //<S2SV> ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( //<S2SV> ps_dec ) ; //<S2SV> else //<S2SV> ps_dec -> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ; //<S2SV> } //<S2SV> i_temp = ps_pps -> u1_pic_init_qp //<S2SV> + ih264d_sev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( ( i_temp < 0 ) || ( i_temp > 51 ) ) //<S2SV> return ERROR_INV_RANGE_QP_T ; //<S2SV> ps_slice -> u1_slice_qp = i_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>slice_qp_delta" , //<S2SV> ps_slice -> u1_slice_qp - ps_pps -> u1_pic_init_qp ) ; //<S2SV> if ( ps_pps -> u1_deblocking_filter_parameters_present_flag == 1 ) //<S2SV> { //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>disable_deblocking_filter_idc" , u4_temp ) ; //<S2SV> if ( u4_temp > SLICE_BOUNDARY_DBLK_DISABLED ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> ps_slice -> u1_disable_dblk_filter_idc = u4_temp ; //<S2SV> if ( u4_temp != 1 ) //<S2SV> { //<S2SV> i_temp = ih264d_sev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) //<S2SV> << 1 ; //<S2SV> if ( ( MIN_DBLK_FIL_OFF > i_temp ) || ( i_temp > MAX_DBLK_FIL_OFF ) ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> ps_slice -> i1_slice_alpha_c0_offset = i_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>slice_alpha_c0_offset_div2" , //<S2SV> ps_slice -> i1_slice_alpha_c0_offset >> 1 ) ; //<S2SV> i_temp = ih264d_sev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) //<S2SV> << 1 ; //<S2SV> if ( ( MIN_DBLK_FIL_OFF > i_temp ) || ( i_temp > MAX_DBLK_FIL_OFF ) ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> ps_slice -> i1_slice_beta_offset = i_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>slice_beta_offset_div2" , //<S2SV> ps_slice -> i1_slice_beta_offset >> 1 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_slice -> i1_slice_alpha_c0_offset = 0 ; //<S2SV> ps_slice -> i1_slice_beta_offset = 0 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_slice -> u1_disable_dblk_filter_idc = 0 ; //<S2SV> ps_slice -> i1_slice_alpha_c0_offset = 0 ; //<S2SV> ps_slice -> i1_slice_beta_offset = 0 ; //<S2SV> } //<S2SV> ps_dec -> u2_mv_2mb [ 0 ] = 0 ; //<S2SV> ps_dec -> u2_mv_2mb [ 1 ] = 0 ; //<S2SV> ps_dec -> u1_slice_header_done = 2 ; //<S2SV> if ( ps_pps -> u1_entropy_coding_mode ) //<S2SV> { //<S2SV> SWITCHOFFTRACE ; SWITCHONTRACECABAC ; //<S2SV> if ( ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag ) //<S2SV> { //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cabac_mbaff ; //<S2SV> } //<S2SV> else //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cabac_nonmbaff ; //<S2SV> ret = ih264d_parse_islice_data_cabac ( ps_dec , ps_slice , //<S2SV> u2_first_mb_in_slice ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> SWITCHONTRACE ; SWITCHOFFTRACECABAC ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag ) //<S2SV> { //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cavlc_mbaff ; //<S2SV> } //<S2SV> else //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cavlc_nonmbaff ; //<S2SV> ret = ih264d_parse_islice_data_cavlc ( ps_dec , ps_slice , //<S2SV> u2_first_mb_in_slice ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> } //<S2SV> return OK ; //<S2SV> } //<S2SV> 