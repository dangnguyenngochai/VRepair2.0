WORD32 ih264d_parse_pslice ( dec_struct_t * ps_dec , UWORD16 u2_first_mb_in_slice ) //<S2SV> { //<S2SV> dec_pic_params_t * ps_pps = ps_dec -> ps_cur_pps ; //<S2SV> dec_slice_params_t * ps_cur_slice = ps_dec -> ps_cur_slice ; //<S2SV> dec_bit_stream_t * ps_bitstrm = ps_dec -> ps_bitstrm ; //<S2SV> UWORD32 * pu4_bitstrm_buf = ps_bitstrm -> pu4_buffer ; //<S2SV> UWORD32 * pu4_bitstrm_ofst = & ps_bitstrm -> u4_ofst ; //<S2SV> UWORD8 u1_mbaff = ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag ; //<S2SV> UWORD8 u1_field_pic_flag = ps_cur_slice -> u1_field_pic_flag ; //<S2SV> UWORD32 u4_temp ; //<S2SV> WORD32 i_temp ; //<S2SV> WORD32 ret ; //<S2SV> { //<S2SV> WORD8 * pi1_buf ; //<S2SV> WORD16 * pi2_mv = ps_dec -> s_default_mv_pred . i2_mv ; //<S2SV> WORD32 * pi4_mv = ( WORD32 * ) pi2_mv ; //<S2SV> WORD16 * pi16_refFrame ; //<S2SV> pi1_buf = ps_dec -> s_default_mv_pred . i1_ref_frame ; //<S2SV> pi16_refFrame = ( WORD16 * ) pi1_buf ; //<S2SV> * pi4_mv = 0 ; //<S2SV> * ( pi4_mv + 1 ) = 0 ; //<S2SV> * pi16_refFrame = OUT_OF_RANGE_REF ; //<S2SV> ps_dec -> s_default_mv_pred . u1_col_ref_pic_idx = ( UWORD8 ) - 1 ; //<S2SV> ps_dec -> s_default_mv_pred . u1_pic_type = ( UWORD8 ) - 1 ; //<S2SV> } //<S2SV> ps_cur_slice -> u1_num_ref_idx_active_override_flag = ih264d_get_bit_h264 ( //<S2SV> ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>num_ref_idx_override_flag" , //<S2SV> ps_cur_slice -> u1_num_ref_idx_active_override_flag ) ; //<S2SV> u4_temp = ps_dec -> ps_cur_pps -> u1_num_ref_idx_lx_active [ 0 ] ; //<S2SV> if ( ps_cur_slice -> u1_num_ref_idx_active_override_flag ) //<S2SV> { //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) + 1 ; //<S2SV> } //<S2SV> { //<S2SV> UWORD8 u1_max_ref_idx = MAX_FRAMES << u1_field_pic_flag ; //<S2SV> if ( u4_temp > u1_max_ref_idx ) //<S2SV> { //<S2SV> return ERROR_NUM_REF ; //<S2SV> } //<S2SV> ps_cur_slice -> u1_num_ref_idx_lx_active [ 0 ] = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>num_ref_idx_l0_active_minus1" , //<S2SV> ps_cur_slice -> u1_num_ref_idx_lx_active [ 0 ] - 1 ) ; //<S2SV> } //<S2SV> { //<S2SV> UWORD8 uc_refIdxReFlagL0 = ih264d_get_bit_h264 ( ps_bitstrm ) ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>ref_pic_list_reordering_flag_l0" , uc_refIdxReFlagL0 ) ; //<S2SV> { //<S2SV> UWORD8 init_idx_flg = ( ps_dec -> u1_pr_sl_type //<S2SV> != ps_dec -> ps_cur_slice -> u1_slice_type ) ; //<S2SV> if ( ps_dec -> u1_first_pb_nal_in_pic //<S2SV> || ( init_idx_flg & ! ps_dec -> u1_sl_typ_5_9 ) //<S2SV> || ps_dec -> u1_num_ref_idx_lx_active_prev //<S2SV> != ps_cur_slice -> u1_num_ref_idx_lx_active [ 0 ] ) //<S2SV> { //<S2SV> ih264d_init_ref_idx_lx_p ( ps_dec ) ; //<S2SV> } //<S2SV> if ( ps_dec -> u1_first_pb_nal_in_pic & ps_dec -> u1_sl_typ_5_9 ) //<S2SV> ps_dec -> u1_first_pb_nal_in_pic = 0 ; //<S2SV> } //<S2SV> ps_dec -> u1_num_ref_idx_lx_active_prev = //<S2SV> ps_cur_slice -> u1_num_ref_idx_lx_active [ 0 ] ; //<S2SV> if ( uc_refIdxReFlagL0 ) //<S2SV> { //<S2SV> WORD8 ret ; //<S2SV> ps_dec -> ps_ref_pic_buf_lx [ 0 ] = ps_dec -> ps_dpb_mgr -> ps_mod_dpb [ 0 ] ; //<S2SV> ret = ih264d_ref_idx_reordering ( ps_dec , 0 ) ; //<S2SV> if ( ret == - 1 ) //<S2SV> return ERROR_REFIDX_ORDER_T ; //<S2SV> ps_dec -> ps_ref_pic_buf_lx [ 0 ] = ps_dec -> ps_dpb_mgr -> ps_mod_dpb [ 0 ] ; //<S2SV> } //<S2SV> else //<S2SV> ps_dec -> ps_ref_pic_buf_lx [ 0 ] = //<S2SV> ps_dec -> ps_dpb_mgr -> ps_init_dpb [ 0 ] ; //<S2SV> } //<S2SV> { //<S2SV> void * * pui_map_ref_idx_to_poc_lx0 , * * pui_map_ref_idx_to_poc_lx1 ; //<S2SV> WORD8 idx ; //<S2SV> struct pic_buffer_t * ps_pic ; //<S2SV> pui_map_ref_idx_to_poc_lx0 = ps_dec -> ppv_map_ref_idx_to_poc + FRM_LIST_L0 ; //<S2SV> pui_map_ref_idx_to_poc_lx0 [ 0 ] = 0 ; //<S2SV> pui_map_ref_idx_to_poc_lx0 ++ ; //<S2SV> for ( idx = 0 ; idx < ps_cur_slice -> u1_num_ref_idx_lx_active [ 0 ] ; idx ++ ) //<S2SV> { //<S2SV> ps_pic = ps_dec -> ps_ref_pic_buf_lx [ 0 ] [ idx ] ; //<S2SV> pui_map_ref_idx_to_poc_lx0 [ idx ] = ( ps_pic -> pu1_buf1 ) ; //<S2SV> } //<S2SV> pui_map_ref_idx_to_poc_lx1 = ps_dec -> ppv_map_ref_idx_to_poc + FRM_LIST_L1 ; //<S2SV> pui_map_ref_idx_to_poc_lx1 [ 0 ] = 0 ; //<S2SV> if ( u1_mbaff ) //<S2SV> { //<S2SV> void * * ppv_map_ref_idx_to_poc_lx_t , * * ppv_map_ref_idx_to_poc_lx_b ; //<S2SV> void * * ppv_map_ref_idx_to_poc_lx_t1 , * * ppv_map_ref_idx_to_poc_lx_b1 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_t = ps_dec -> ppv_map_ref_idx_to_poc //<S2SV> + TOP_LIST_FLD_L0 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b = ps_dec -> ppv_map_ref_idx_to_poc //<S2SV> + BOT_LIST_FLD_L0 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_t [ 0 ] = 0 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_t ++ ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b [ 0 ] = 0 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b ++ ; //<S2SV> idx = 0 ; //<S2SV> for ( idx = 0 ; idx < ps_cur_slice -> u1_num_ref_idx_lx_active [ 0 ] ; idx ++ ) //<S2SV> { //<S2SV> ps_pic = ps_dec -> ps_ref_pic_buf_lx [ 0 ] [ idx ] ; //<S2SV> ppv_map_ref_idx_to_poc_lx_t [ 0 ] = ( ps_pic -> pu1_buf1 ) ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b [ 1 ] = ( ps_pic -> pu1_buf1 ) ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b [ 0 ] = ( ps_pic -> pu1_buf1 ) + 1 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_t [ 1 ] = ( ps_pic -> pu1_buf1 ) + 1 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_t += 2 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b += 2 ; //<S2SV> } //<S2SV> ppv_map_ref_idx_to_poc_lx_t1 = ps_dec -> ppv_map_ref_idx_to_poc //<S2SV> + TOP_LIST_FLD_L1 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_t1 [ 0 ] = 0 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b1 = ps_dec -> ppv_map_ref_idx_to_poc //<S2SV> + BOT_LIST_FLD_L1 ; //<S2SV> ppv_map_ref_idx_to_poc_lx_b1 [ 0 ] = 0 ; //<S2SV> } //<S2SV> if ( ps_dec -> u4_num_cores >= 3 ) //<S2SV> { //<S2SV> WORD32 num_entries ; //<S2SV> WORD32 size ; //<S2SV> num_entries = MIN ( MAX_FRAMES , ps_dec -> u4_num_ref_frames_at_init ) ; //<S2SV> num_entries = 2 * ( ( 2 * num_entries ) + 1 ) ; //<S2SV> size = num_entries * sizeof ( void * ) ; //<S2SV> size += PAD_MAP_IDX_POC * sizeof ( void * ) ; //<S2SV> memcpy ( ( void * ) ps_dec -> ps_parse_cur_slice -> ppv_map_ref_idx_to_poc , //<S2SV> ps_dec -> ppv_map_ref_idx_to_poc , //<S2SV> size ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_pps -> u1_wted_pred_flag ) //<S2SV> { //<S2SV> ret = ih264d_parse_pred_weight_table ( ps_cur_slice , ps_bitstrm ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> ih264d_form_pred_weight_matrix ( ps_dec ) ; //<S2SV> ps_dec -> pu4_wt_ofsts = ps_dec -> pu4_wts_ofsts_mat ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> ps_cur_slice -> u2_log2Y_crwd = 0 ; //<S2SV> ps_dec -> pu4_wt_ofsts = ps_dec -> pu4_wts_ofsts_mat ; //<S2SV> } //<S2SV> ps_dec -> ps_parse_cur_slice -> u2_log2Y_crwd = //<S2SV> ps_dec -> ps_cur_slice -> u2_log2Y_crwd ; //<S2SV> if ( u1_mbaff && ( u1_field_pic_flag == 0 ) ) //<S2SV> { //<S2SV> ih264d_convert_frm_mbaff_list ( ps_dec ) ; //<S2SV> } //<S2SV> if ( ps_cur_slice -> u1_nal_ref_idc != 0 ) //<S2SV> { //<S2SV> if ( ! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) //<S2SV> { //<S2SV> i_temp = ih264d_read_mmco_commands ( ps_dec ) ; //<S2SV> if ( i_temp < 0 ) //<S2SV> { //<S2SV> return ERROR_DBP_MANAGER_T ; //<S2SV> } //<S2SV> ps_dec -> u4_bitoffset = i_temp ; //<S2SV> } //<S2SV> else //<S2SV> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ; //<S2SV> } //<S2SV> if ( ps_pps -> u1_entropy_coding_mode == CABAC ) //<S2SV> { //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > MAX_CABAC_INIT_IDC ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> ps_cur_slice -> u1_cabac_init_idc = u4_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>cabac_init_idc" , ps_cur_slice -> u1_cabac_init_idc ) ; //<S2SV> } //<S2SV> i_temp = ps_pps -> u1_pic_init_qp //<S2SV> + ih264d_sev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( ( i_temp < 0 ) || ( i_temp > 51 ) ) //<S2SV> { //<S2SV> return ERROR_INV_RANGE_QP_T ; //<S2SV> } //<S2SV> ps_cur_slice -> u1_slice_qp = i_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>slice_qp_delta" , //<S2SV> ( WORD8 ) ( ps_cur_slice -> u1_slice_qp - ps_pps -> u1_pic_init_qp ) ) ; //<S2SV> if ( ps_pps -> u1_deblocking_filter_parameters_present_flag == 1 ) //<S2SV> { //<S2SV> u4_temp = ih264d_uev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) ; //<S2SV> if ( u4_temp > SLICE_BOUNDARY_DBLK_DISABLED ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>disable_deblocking_filter_idc" , u4_temp ) ; //<S2SV> ps_cur_slice -> u1_disable_dblk_filter_idc = u4_temp ; //<S2SV> if ( u4_temp != 1 ) //<S2SV> { //<S2SV> i_temp = ih264d_sev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) //<S2SV> << 1 ; //<S2SV> if ( ( MIN_DBLK_FIL_OFF > i_temp ) || ( i_temp > MAX_DBLK_FIL_OFF ) ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> ps_cur_slice -> i1_slice_alpha_c0_offset = i_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>slice_alpha_c0_offset_div2" , //<S2SV> ps_cur_slice -> i1_slice_alpha_c0_offset >> 1 ) ; //<S2SV> i_temp = ih264d_sev ( pu4_bitstrm_ofst , pu4_bitstrm_buf ) //<S2SV> << 1 ; //<S2SV> if ( ( MIN_DBLK_FIL_OFF > i_temp ) || ( i_temp > MAX_DBLK_FIL_OFF ) ) //<S2SV> { //<S2SV> return ERROR_INV_SLICE_HDR_T ; //<S2SV> } //<S2SV> ps_cur_slice -> i1_slice_beta_offset = i_temp ; //<S2SV> COPYTHECONTEXT ( "SH:<S2SV_blank>slice_beta_offset_div2" , //<S2SV> ps_cur_slice -> i1_slice_beta_offset >> 1 ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_cur_slice -> i1_slice_alpha_c0_offset = 0 ; //<S2SV> ps_cur_slice -> i1_slice_beta_offset = 0 ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_cur_slice -> u1_disable_dblk_filter_idc = 0 ; //<S2SV> ps_cur_slice -> i1_slice_alpha_c0_offset = 0 ; //<S2SV> ps_cur_slice -> i1_slice_beta_offset = 0 ; //<S2SV> } //<S2SV> ps_dec -> u1_slice_header_done = 2 ; //<S2SV> if ( ps_pps -> u1_entropy_coding_mode ) //<S2SV> { //<S2SV> SWITCHOFFTRACE ; SWITCHONTRACECABAC ; //<S2SV> ps_dec -> pf_parse_inter_slice = ih264d_parse_inter_slice_data_cabac ; //<S2SV> ps_dec -> pf_parse_inter_mb = ih264d_parse_pmb_cabac ; //<S2SV> ih264d_init_cabac_contexts ( P_SLICE , ps_dec ) ; //<S2SV> if ( ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag ) //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cabac_mbaff ; //<S2SV> else //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cabac_nonmbaff ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> SWITCHONTRACE ; SWITCHOFFTRACECABAC ; //<S2SV> ps_dec -> pf_parse_inter_slice = ih264d_parse_inter_slice_data_cavlc ; //<S2SV> ps_dec -> pf_parse_inter_mb = ih264d_parse_pmb_cavlc ; //<S2SV> if ( ps_dec -> ps_cur_slice -> u1_mbaff_frame_flag ) //<S2SV> { //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cavlc_mbaff ; //<S2SV> } //<S2SV> else //<S2SV> ps_dec -> pf_get_mb_info = ih264d_get_mb_info_cavlc_nonmbaff ; //<S2SV> } //<S2SV> ps_dec -> u1_B = 0 ; //<S2SV> ps_dec -> pf_mvpred_ref_tfr_nby2mb = ih264d_mv_pred_ref_tfr_nby2_pmb ; //<S2SV> ret = ps_dec -> pf_parse_inter_slice ( ps_dec , ps_cur_slice , u2_first_mb_in_slice ) ; //<S2SV> if ( ret != OK ) //<S2SV> return ret ; //<S2SV> return OK ; //<S2SV> } //<S2SV> 