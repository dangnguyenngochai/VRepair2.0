WORD32 ih264d_video_decode ( iv_obj_t * dec_hdl , void * pv_api_ip , void * pv_api_op ) //<S2SV> { //<S2SV> dec_struct_t * ps_dec = ( dec_struct_t * ) ( dec_hdl -> pv_codec_handle ) ; //<S2SV> WORD32 i4_err_status = 0 ; //<S2SV> UWORD8 * pu1_buf = NULL ; //<S2SV> WORD32 buflen ; //<S2SV> UWORD32 u4_max_ofst , u4_length_of_start_code = 0 ; //<S2SV> UWORD32 bytes_consumed = 0 ; //<S2SV> UWORD32 cur_slice_is_nonref = 0 ; //<S2SV> UWORD32 u4_next_is_aud ; //<S2SV> UWORD32 u4_first_start_code_found = 0 ; //<S2SV> WORD32 ret = 0 , api_ret_value = IV_SUCCESS ; //<S2SV> WORD32 header_data_left = 0 , frame_data_left = 0 ; //<S2SV> UWORD8 * pu1_bitstrm_buf ; //<S2SV> ivd_video_decode_ip_t * ps_dec_ip ; //<S2SV> ivd_video_decode_op_t * ps_dec_op ; //<S2SV> ithread_set_name ( ( void * ) "Parse_thread" ) ; //<S2SV> ps_dec_ip = ( ivd_video_decode_ip_t * ) pv_api_ip ; //<S2SV> ps_dec_op = ( ivd_video_decode_op_t * ) pv_api_op ; //<S2SV> { //<S2SV> UWORD32 u4_size ; //<S2SV> u4_size = ps_dec_op -> u4_size ; //<S2SV> memset ( ps_dec_op , 0 , sizeof ( ivd_video_decode_op_t ) ) ; //<S2SV> ps_dec_op -> u4_size = u4_size ; //<S2SV> } //<S2SV> ps_dec -> pv_dec_out = ps_dec_op ; //<S2SV> if ( ps_dec -> init_done != 1 ) //<S2SV> { //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> DATA_SYNC ( ) ; //<S2SV> if ( 0 == ps_dec -> u1_flushfrm ) //<S2SV> { //<S2SV> if ( ps_dec_ip -> pv_stream_buffer == NULL ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DEC_FRM_BS_BUF_NULL ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_dec_ip -> u4_num_Bytes <= 0 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DEC_NUMBYTES_INV ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> u1_pic_decode_done = 0 ; //<S2SV> ps_dec_op -> u4_num_bytes_consumed = 0 ; //<S2SV> ps_dec -> ps_out_buffer = NULL ; //<S2SV> if ( ps_dec_ip -> u4_size //<S2SV> >= offsetof ( ivd_video_decode_ip_t , s_out_buffer ) ) //<S2SV> ps_dec -> ps_out_buffer = & ps_dec_ip -> s_out_buffer ; //<S2SV> ps_dec -> u4_fmt_conv_cur_row = 0 ; //<S2SV> ps_dec -> u4_output_present = 0 ; //<S2SV> ps_dec -> s_disp_op . u4_error_code = 1 ; //<S2SV> ps_dec -> u4_fmt_conv_num_rows = FMT_CONV_NUM_ROWS ; //<S2SV> if ( 0 == ps_dec -> u4_share_disp_buf //<S2SV> && ps_dec -> i4_decode_header == 0 ) //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> if ( ps_dec -> ps_out_buffer -> u4_num_bufs == 0 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DISP_FRM_ZERO_OP_BUFS ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> for ( i = 0 ; i < ps_dec -> ps_out_buffer -> u4_num_bufs ; i ++ ) //<S2SV> { //<S2SV> if ( ps_dec -> ps_out_buffer -> pu1_bufs [ i ] == NULL ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= IVD_DISP_FRM_OP_BUF_NULL ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_dec -> ps_out_buffer -> u4_min_out_buf_size [ i ] == 0 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_UNSUPPORTEDPARAM ; //<S2SV> ps_dec_op -> u4_error_code |= //<S2SV> IVD_DISP_FRM_ZERO_OP_BUF_SIZE ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec -> u4_total_frames_decoded >= NUM_FRAMES_LIMIT ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code = ERROR_FRAME_LIMIT_OVER ; //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> ps_dec -> u4_ts = ps_dec_ip -> u4_ts ; //<S2SV> ps_dec_op -> u4_error_code = 0 ; //<S2SV> ps_dec_op -> e_pic_type = - 1 ; //<S2SV> ps_dec_op -> u4_output_present = 0 ; //<S2SV> ps_dec_op -> u4_frame_decoded_flag = 0 ; //<S2SV> ps_dec -> i4_frametype = - 1 ; //<S2SV> ps_dec -> i4_content_type = - 1 ; //<S2SV> { //<S2SV> if ( ( TOP_FIELD_ONLY | BOT_FIELD_ONLY ) == ps_dec -> u1_top_bottom_decoded ) //<S2SV> { //<S2SV> ps_dec -> u1_top_bottom_decoded = 0 ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> u4_slice_start_code_found = 0 ; //<S2SV> if ( ps_dec -> u1_init_dec_flag == 1 && ps_dec -> u4_share_disp_buf == 1 //<S2SV> && ps_dec -> u1_flushfrm == 0 ) //<S2SV> { //<S2SV> UWORD32 i ; //<S2SV> WORD32 disp_avail = 0 , free_id ; //<S2SV> for ( i = 0 ; i < ps_dec -> u1_pic_bufs ; i ++ ) //<S2SV> { //<S2SV> if ( 0 == ps_dec -> u4_disp_buf_mapping [ i ] //<S2SV> || 1 == ps_dec -> u4_disp_buf_to_be_freed [ i ] ) //<S2SV> { //<S2SV> disp_avail = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( 0 == disp_avail ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code = IVD_DEC_REF_BUF_NULL ; //<S2SV> ps_dec_op -> u4_error_code |= ( 1 << IVD_UNSUPPORTEDPARAM ) ; //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> while ( 1 ) //<S2SV> { //<S2SV> pic_buffer_t * ps_pic_buf ; //<S2SV> ps_pic_buf = ( pic_buffer_t * ) ih264_buf_mgr_get_next_free ( //<S2SV> ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , & free_id ) ; //<S2SV> if ( ps_pic_buf == NULL ) //<S2SV> { //<S2SV> UWORD32 i , display_queued = 0 ; //<S2SV> for ( i = 0 ; i < ( MAX_DISP_BUFS_NEW ) ; i ++ ) //<S2SV> { //<S2SV> if ( 0 != ps_dec -> u4_disp_buf_mapping [ i ] ) //<S2SV> { //<S2SV> display_queued = 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( 1 == display_queued ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code = IVD_DEC_REF_BUF_NULL ; //<S2SV> ps_dec_op -> u4_error_code |= ( 1 //<S2SV> << IVD_UNSUPPORTEDPARAM ) ; //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( 1 == ps_dec -> u4_disp_buf_mapping [ free_id ] ) //<S2SV> { //<S2SV> ih264_buf_mgr_set_status ( //<S2SV> ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> free_id , //<S2SV> BUF_MGR_IO ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ih264_buf_mgr_release ( ( buf_mgr_t * ) ps_dec -> pv_pic_buf_mgr , //<S2SV> free_id , //<S2SV> BUF_MGR_IO ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec -> u1_flushfrm && ps_dec -> u1_init_dec_flag ) //<S2SV> { //<S2SV> ih264d_get_next_display_field ( ps_dec , ps_dec -> ps_out_buffer , //<S2SV> & ( ps_dec -> s_disp_op ) ) ; //<S2SV> if ( 0 == ps_dec -> s_disp_op . u4_error_code ) //<S2SV> { //<S2SV> ps_dec -> u4_fmt_conv_cur_row = 0 ; //<S2SV> ps_dec -> u4_fmt_conv_num_rows = ps_dec -> s_disp_frame_info . u4_y_ht ; //<S2SV> ih264d_format_convert ( ps_dec , & ( ps_dec -> s_disp_op ) , //<S2SV> ps_dec -> u4_fmt_conv_cur_row , //<S2SV> ps_dec -> u4_fmt_conv_num_rows ) ; //<S2SV> ps_dec -> u4_fmt_conv_cur_row += ps_dec -> u4_fmt_conv_num_rows ; //<S2SV> ps_dec -> u4_output_present = 1 ; //<S2SV> } //<S2SV> ih264d_release_display_field ( ps_dec , & ( ps_dec -> s_disp_op ) ) ; //<S2SV> ps_dec_op -> u4_pic_wd = ( UWORD32 ) ps_dec -> u2_disp_width ; //<S2SV> ps_dec_op -> u4_pic_ht = ( UWORD32 ) ps_dec -> u2_disp_height ; //<S2SV> ps_dec_op -> u4_new_seq = 0 ; //<S2SV> ps_dec_op -> u4_output_present = ps_dec -> u4_output_present ; //<S2SV> ps_dec_op -> u4_progressive_frame_flag = //<S2SV> ps_dec -> s_disp_op . u4_progressive_frame_flag ; //<S2SV> ps_dec_op -> e_output_format = //<S2SV> ps_dec -> s_disp_op . e_output_format ; //<S2SV> ps_dec_op -> s_disp_frm_buf = ps_dec -> s_disp_op . s_disp_frm_buf ; //<S2SV> ps_dec_op -> e4_fld_type = ps_dec -> s_disp_op . e4_fld_type ; //<S2SV> ps_dec_op -> u4_ts = ps_dec -> s_disp_op . u4_ts ; //<S2SV> ps_dec_op -> u4_disp_buf_id = ps_dec -> s_disp_op . u4_disp_buf_id ; //<S2SV> ps_dec_op -> u4_is_ref_flag = - 1 ; //<S2SV> ps_dec_op -> e_pic_type = IV_NA_FRAME ; //<S2SV> ps_dec_op -> u4_frame_decoded_flag = 0 ; //<S2SV> if ( 0 == ps_dec -> s_disp_op . u4_error_code ) //<S2SV> { //<S2SV> return ( IV_SUCCESS ) ; //<S2SV> } //<S2SV> else //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> if ( ps_dec -> u1_res_changed == 1 ) //<S2SV> { //<S2SV> ih264d_init_decoder ( ps_dec ) ; //<S2SV> } //<S2SV> ps_dec -> u4_prev_nal_skipped = 0 ; //<S2SV> ps_dec -> u2_cur_mb_addr = 0 ; //<S2SV> ps_dec -> u2_total_mbs_coded = 0 ; //<S2SV> ps_dec -> u2_cur_slice_num = 0 ; //<S2SV> ps_dec -> cur_dec_mb_num = 0 ; //<S2SV> ps_dec -> cur_recon_mb_num = 0 ; //<S2SV> ps_dec -> u4_first_slice_in_pic = 2 ; //<S2SV> ps_dec -> u1_first_pb_nal_in_pic = 1 ; //<S2SV> ps_dec -> u1_slice_header_done = 0 ; //<S2SV> ps_dec -> u1_dangling_field = 0 ; //<S2SV> ps_dec -> u4_dec_thread_created = 0 ; //<S2SV> ps_dec -> u4_bs_deblk_thread_created = 0 ; //<S2SV> ps_dec -> u4_cur_bs_mb_num = 0 ; //<S2SV> ps_dec -> u4_start_recon_deblk = 0 ; //<S2SV> DEBUG_THREADS_PRINTF ( "<S2SV_blank>Starting<S2SV_blank>process<S2SV_blank>call\\n" ) ; //<S2SV> ps_dec -> u4_pic_buf_got = 0 ; //<S2SV> do //<S2SV> { //<S2SV> WORD32 buf_size ; //<S2SV> pu1_buf = ( UWORD8 * ) ps_dec_ip -> pv_stream_buffer //<S2SV> + ps_dec_op -> u4_num_bytes_consumed ; //<S2SV> u4_max_ofst = ps_dec_ip -> u4_num_Bytes //<S2SV> - ps_dec_op -> u4_num_bytes_consumed ; //<S2SV> if ( ( NULL == ps_dec -> pu1_bits_buf_dynamic ) && //<S2SV> ( ps_dec -> i4_header_decoded & 1 ) ) //<S2SV> { //<S2SV> WORD32 size ; //<S2SV> void * pv_buf ; //<S2SV> void * pv_mem_ctxt = ps_dec -> pv_mem_ctxt ; //<S2SV> size = MAX ( 256000 , ps_dec -> u2_pic_wd * ps_dec -> u2_pic_ht * 3 / 2 ) ; //<S2SV> pv_buf = ps_dec -> pf_aligned_alloc ( pv_mem_ctxt , 128 , size ) ; //<S2SV> RETURN_IF ( ( NULL == pv_buf ) , IV_FAIL ) ; //<S2SV> ps_dec -> pu1_bits_buf_dynamic = pv_buf ; //<S2SV> ps_dec -> u4_dynamic_bits_buf_size = size ; //<S2SV> } //<S2SV> if ( ps_dec -> pu1_bits_buf_dynamic ) //<S2SV> { //<S2SV> pu1_bitstrm_buf = ps_dec -> pu1_bits_buf_dynamic ; //<S2SV> buf_size = ps_dec -> u4_dynamic_bits_buf_size ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> pu1_bitstrm_buf = ps_dec -> pu1_bits_buf_static ; //<S2SV> buf_size = ps_dec -> u4_static_bits_buf_size ; //<S2SV> } //<S2SV> u4_next_is_aud = 0 ; //<S2SV> buflen = ih264d_find_start_code ( pu1_buf , 0 , u4_max_ofst , //<S2SV> & u4_length_of_start_code , //<S2SV> & u4_next_is_aud ) ; //<S2SV> if ( buflen == - 1 ) //<S2SV> buflen = 0 ; //<S2SV> buflen = MIN ( buflen , buf_size ) ; //<S2SV> bytes_consumed = buflen + u4_length_of_start_code ; //<S2SV> ps_dec_op -> u4_num_bytes_consumed += bytes_consumed ; //<S2SV> { //<S2SV> UWORD8 u1_firstbyte , u1_nal_ref_idc ; //<S2SV> if ( ps_dec -> i4_app_skip_mode == IVD_SKIP_B ) //<S2SV> { //<S2SV> u1_firstbyte = * ( pu1_buf + u4_length_of_start_code ) ; //<S2SV> u1_nal_ref_idc = ( UWORD8 ) ( NAL_REF_IDC ( u1_firstbyte ) ) ; //<S2SV> if ( u1_nal_ref_idc == 0 ) //<S2SV> { //<S2SV> cur_slice_is_nonref = 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( 1 == cur_slice_is_nonref ) //<S2SV> { //<S2SV> ps_dec_op -> u4_num_bytes_consumed -= //<S2SV> bytes_consumed ; //<S2SV> ps_dec_op -> e_pic_type = IV_B_FRAME ; //<S2SV> ps_dec_op -> u4_error_code = //<S2SV> IVD_DEC_FRM_SKIPPED ; //<S2SV> ps_dec_op -> u4_error_code |= ( 1 //<S2SV> << IVD_UNSUPPORTEDPARAM ) ; //<S2SV> ps_dec_op -> u4_frame_decoded_flag = 0 ; //<S2SV> ps_dec_op -> u4_size = //<S2SV> sizeof ( ivd_video_decode_op_t ) ; //<S2SV> ih264d_signal_decode_thread ( ps_dec ) ; //<S2SV> if ( ps_dec -> u4_num_cores == 3 ) //<S2SV> { //<S2SV> ih264d_signal_bs_deblk_thread ( ps_dec ) ; //<S2SV> } //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( buflen ) //<S2SV> { //<S2SV> memcpy ( pu1_bitstrm_buf , pu1_buf + u4_length_of_start_code , //<S2SV> buflen ) ; //<S2SV> if ( ( buflen + 8 ) < buf_size ) //<S2SV> { //<S2SV> memset ( pu1_bitstrm_buf + buflen , 0 , 8 ) ; //<S2SV> } //<S2SV> u4_first_start_code_found = 1 ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( u4_first_start_code_found == 0 ) //<S2SV> { //<S2SV> ps_dec -> i4_error_code = ERROR_START_CODE_NOT_FOUND ; //<S2SV> ps_dec_op -> u4_error_code |= 1 << IVD_INSUFFICIENTDATA ; //<S2SV> if ( ps_dec -> u4_pic_buf_got == 0 ) //<S2SV> { //<S2SV> ih264d_fill_output_struct_from_context ( ps_dec , //<S2SV> ps_dec_op ) ; //<S2SV> ps_dec_op -> u4_error_code = ps_dec -> i4_error_code ; //<S2SV> ps_dec_op -> u4_frame_decoded_flag = 0 ; //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> u1_pic_decode_done = 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> frame_data_left = 0 ; //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> ps_dec -> u4_return_to_app = 0 ; //<S2SV> ret = ih264d_parse_nal_unit ( dec_hdl , ps_dec_op , //<S2SV> pu1_bitstrm_buf , buflen ) ; //<S2SV> if ( ret != OK ) //<S2SV> { //<S2SV> UWORD32 error = ih264d_map_error ( ret ) ; //<S2SV> ps_dec_op -> u4_error_code = error | ret ; //<S2SV> api_ret_value = IV_FAIL ; //<S2SV> if ( ( ret == IVD_RES_CHANGED ) //<S2SV> || ( ret == IVD_MEM_ALLOC_FAILED ) //<S2SV> || ( ret == ERROR_UNAVAIL_PICBUF_T ) //<S2SV> || ( ret == ERROR_UNAVAIL_MVBUF_T ) //<S2SV> || ( ret == ERROR_INV_SPS_PPS_T ) ) //<S2SV> { //<S2SV> ps_dec -> u4_slice_start_code_found = 0 ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ( ret == ERROR_INCOMPLETE_FRAME ) || ( ret == ERROR_DANGLING_FIELD_IN_PIC ) ) //<S2SV> { //<S2SV> ps_dec_op -> u4_num_bytes_consumed -= bytes_consumed ; //<S2SV> api_ret_value = IV_FAIL ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ret == ERROR_IN_LAST_SLICE_OF_PIC ) //<S2SV> { //<S2SV> api_ret_value = IV_FAIL ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec -> u4_return_to_app ) //<S2SV> { //<S2SV> ps_dec_op -> u4_num_bytes_consumed -= bytes_consumed ; //<S2SV> ps_dec_op -> u4_error_code = IVD_DEC_FRM_SKIPPED ; //<S2SV> ps_dec_op -> u4_error_code |= ( 1 << IVD_UNSUPPORTEDPARAM ) ; //<S2SV> ps_dec_op -> u4_frame_decoded_flag = 0 ; //<S2SV> ps_dec_op -> u4_size = sizeof ( ivd_video_decode_op_t ) ; //<S2SV> ih264d_signal_decode_thread ( ps_dec ) ; //<S2SV> if ( ps_dec -> u4_num_cores == 3 ) //<S2SV> { //<S2SV> ih264d_signal_bs_deblk_thread ( ps_dec ) ; //<S2SV> } //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> header_data_left = ( ( ps_dec -> i4_decode_header == 1 ) //<S2SV> && ( ps_dec -> i4_header_decoded != 3 ) //<S2SV> && ( ps_dec_op -> u4_num_bytes_consumed //<S2SV> < ps_dec_ip -> u4_num_Bytes ) ) ; //<S2SV> frame_data_left = ( ( ( ps_dec -> i4_decode_header == 0 ) //<S2SV> && ( ( ps_dec -> u1_pic_decode_done == 0 ) //<S2SV> || ( u4_next_is_aud == 1 ) ) ) //<S2SV> && ( ps_dec_op -> u4_num_bytes_consumed //<S2SV> < ps_dec_ip -> u4_num_Bytes ) ) ; //<S2SV> } //<S2SV> while ( ( header_data_left == 1 ) || ( frame_data_left == 1 ) ) ; //<S2SV> if ( ( ps_dec -> u4_slice_start_code_found == 1 ) //<S2SV> && ( ret != IVD_MEM_ALLOC_FAILED ) //<S2SV> && ps_dec -> u2_total_mbs_coded < ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) //<S2SV> { //<S2SV> WORD32 num_mb_skipped ; //<S2SV> WORD32 prev_slice_err ; //<S2SV> pocstruct_t temp_poc ; //<S2SV> WORD32 ret1 ; //<S2SV> num_mb_skipped = ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) //<S2SV> - ps_dec -> u2_total_mbs_coded ; //<S2SV> if ( ps_dec -> u4_first_slice_in_pic && ( ps_dec -> u4_pic_buf_got == 0 ) ) //<S2SV> prev_slice_err = 1 ; //<S2SV> else //<S2SV> prev_slice_err = 2 ; //<S2SV> if ( ps_dec -> u4_first_slice_in_pic && ( ps_dec -> u2_total_mbs_coded == 0 ) ) //<S2SV> prev_slice_err = 1 ; //<S2SV> ret1 = ih264d_mark_err_slice_skip ( ps_dec , num_mb_skipped , ps_dec -> u1_nal_unit_type == IDR_SLICE_NAL , ps_dec -> ps_cur_slice -> u2_frame_num , //<S2SV> & temp_poc , prev_slice_err ) ; //<S2SV> if ( ( ret1 == ERROR_UNAVAIL_PICBUF_T ) || ( ret1 == ERROR_UNAVAIL_MVBUF_T ) ) //<S2SV> { //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( ret == IVD_RES_CHANGED ) //<S2SV> || ( ret == IVD_MEM_ALLOC_FAILED ) //<S2SV> || ( ret == ERROR_UNAVAIL_PICBUF_T ) //<S2SV> || ( ret == ERROR_UNAVAIL_MVBUF_T ) //<S2SV> || ( ret == ERROR_INV_SPS_PPS_T ) ) //<S2SV> { //<S2SV> ih264d_signal_decode_thread ( ps_dec ) ; //<S2SV> if ( ps_dec -> u4_num_cores == 3 ) //<S2SV> { //<S2SV> ih264d_signal_bs_deblk_thread ( ps_dec ) ; //<S2SV> } //<S2SV> if ( ret == IVD_RES_CHANGED ) //<S2SV> { //<S2SV> ps_dec_op -> u4_num_bytes_consumed -= bytes_consumed ; //<S2SV> } //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> if ( ps_dec -> u1_separate_parse ) //<S2SV> { //<S2SV> if ( ps_dec -> u4_num_cores == 2 ) //<S2SV> { //<S2SV> if ( ( ps_dec -> u4_nmb_deblk == 0 ) && ( ps_dec -> u4_start_recon_deblk == 1 ) && ( ps_dec -> ps_cur_sps -> u1_mb_aff_flag == 0 ) ) //<S2SV> { //<S2SV> UWORD32 u4_num_mbs , u4_max_addr ; //<S2SV> tfr_ctxt_t s_tfr_ctxt ; //<S2SV> tfr_ctxt_t * ps_tfr_cxt = & s_tfr_ctxt ; //<S2SV> pad_mgr_t * ps_pad_mgr = & ps_dec -> s_pad_mgr ; //<S2SV> u4_max_addr = ( ps_dec -> u2_frm_wd_in_mbs * ps_dec -> u2_frm_ht_in_mbs ) - 1 ; //<S2SV> ps_dec -> u4_cur_bs_mb_num = u4_max_addr + 1 ; //<S2SV> ih264d_init_deblk_tfr_ctxt ( ps_dec , ps_pad_mgr , ps_tfr_cxt , //<S2SV> ps_dec -> u2_frm_wd_in_mbs , 0 ) ; //<S2SV> u4_num_mbs = u4_max_addr //<S2SV> - ps_dec -> u4_cur_deblk_mb_num + 1 ; //<S2SV> DEBUG_PERF_PRINTF ( "mbs<S2SV_blank>left<S2SV_blank>for<S2SV_blank>deblocking=<S2SV_blank>%d<S2SV_blank>\\n" , u4_num_mbs ) ; //<S2SV> if ( u4_num_mbs != 0 ) //<S2SV> ih264d_check_mb_map_deblk ( ps_dec , u4_num_mbs , //<S2SV> ps_tfr_cxt , 1 ) ; //<S2SV> ps_dec -> u4_start_recon_deblk = 0 ; //<S2SV> } //<S2SV> } //<S2SV> ih264d_signal_decode_thread ( ps_dec ) ; //<S2SV> if ( ps_dec -> u4_num_cores == 3 ) //<S2SV> { //<S2SV> ih264d_signal_bs_deblk_thread ( ps_dec ) ; //<S2SV> } //<S2SV> } //<S2SV> DATA_SYNC ( ) ; //<S2SV> if ( ( ps_dec_op -> u4_error_code & 0xff ) //<S2SV> != ERROR_DYNAMIC_RESOLUTION_NOT_SUPPORTED ) //<S2SV> { //<S2SV> ps_dec_op -> u4_pic_wd = ( UWORD32 ) ps_dec -> u2_disp_width ; //<S2SV> ps_dec_op -> u4_pic_ht = ( UWORD32 ) ps_dec -> u2_disp_height ; //<S2SV> } //<S2SV> if ( ps_dec -> i4_header_decoded != 3 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= ( 1 << IVD_INSUFFICIENTDATA ) ; //<S2SV> } //<S2SV> if ( ps_dec -> i4_decode_header == 1 && ps_dec -> i4_header_decoded != 3 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code |= ( 1 << IVD_INSUFFICIENTDATA ) ; //<S2SV> } //<S2SV> if ( ps_dec -> u4_prev_nal_skipped ) //<S2SV> { //<S2SV> ps_dec_op -> u4_error_code = IVD_DEC_FRM_SKIPPED ; //<S2SV> ps_dec_op -> u4_error_code |= ( 1 << IVD_UNSUPPORTEDPARAM ) ; //<S2SV> ps_dec_op -> u4_frame_decoded_flag = 0 ; //<S2SV> ps_dec_op -> u4_size = sizeof ( ivd_video_decode_op_t ) ; //<S2SV> if ( ps_dec -> u4_num_cores == 3 ) //<S2SV> { //<S2SV> ih264d_signal_bs_deblk_thread ( ps_dec ) ; //<S2SV> } //<S2SV> return ( IV_FAIL ) ; //<S2SV> } //<S2SV> if ( ( ps_dec -> u4_slice_start_code_found == 1 ) //<S2SV> && ( ERROR_DANGLING_FIELD_IN_PIC != i4_err_status ) ) //<S2SV> { //<S2SV> if ( ps_dec -> ps_cur_slice -> u1_field_pic_flag ) //<S2SV> { //<S2SV> if ( 1 == ps_dec -> ps_cur_slice -> u1_bottom_field_flag ) //<S2SV> { //<S2SV> ps_dec -> u1_top_bottom_decoded |= BOT_FIELD_ONLY ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> ps_dec -> u1_top_bottom_decoded |= TOP_FIELD_ONLY ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) == 0 ) //<S2SV> { //<S2SV> ret = ih264d_deblock_display ( ps_dec ) ; //<S2SV> if ( ret != 0 ) //<S2SV> { //<S2SV> return IV_FAIL ; //<S2SV> } //<S2SV> } //<S2SV> if ( ps_dec -> i4_header_decoded == 3 ) //<S2SV> { //<S2SV> ps_dec -> u2_total_mbs_coded = ps_dec -> ps_cur_sps -> u2_max_mb_addr + 1 ; //<S2SV> } //<S2SV> if ( ps_dec -> ps_cur_slice -> u1_nal_unit_type == IDR_SLICE_NAL ) //<S2SV> { //<S2SV> ps_dec -> i4_frametype = IV_IDR_FRAME ; //<S2SV> } //<S2SV> else if ( ps_dec -> i4_pic_type == B_SLICE ) //<S2SV> { //<S2SV> ps_dec -> i4_frametype = IV_B_FRAME ; //<S2SV> } //<S2SV> else if ( ps_dec -> i4_pic_type == P_SLICE ) //<S2SV> { //<S2SV> ps_dec -> i4_frametype = IV_P_FRAME ; //<S2SV> } //<S2SV> else if ( ps_dec -> i4_pic_type == I_SLICE ) //<S2SV> { //<S2SV> ps_dec -> i4_frametype = IV_I_FRAME ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> H264_DEC_DEBUG_PRINT ( "Shouldn\'t<S2SV_blank>come<S2SV_blank>here\\n" ) ; //<S2SV> } //<S2SV> ps_dec -> i4_content_type = ps_dec -> ps_cur_slice -> u1_field_pic_flag ; //<S2SV> ps_dec -> u4_total_frames_decoded = ps_dec -> u4_total_frames_decoded + 2 ; //<S2SV> ps_dec -> u4_total_frames_decoded = ps_dec -> u4_total_frames_decoded //<S2SV> - ps_dec -> ps_cur_slice -> u1_field_pic_flag ; //<S2SV> } //<S2SV> if ( ps_dec -> u4_num_cores == 3 ) //<S2SV> { //<S2SV> ih264d_signal_bs_deblk_thread ( ps_dec ) ; //<S2SV> } //<S2SV> { //<S2SV> if ( ( IVD_DECODE_FRAME_OUT == ps_dec -> e_frm_out_mode ) //<S2SV> && ps_dec -> u1_init_dec_flag ) //<S2SV> { //<S2SV> ih264d_get_next_display_field ( ps_dec , ps_dec -> ps_out_buffer , //<S2SV> & ( ps_dec -> s_disp_op ) ) ; //<S2SV> if ( 0 == ps_dec -> s_disp_op . u4_error_code ) //<S2SV> { //<S2SV> ps_dec -> u4_fmt_conv_cur_row = 0 ; //<S2SV> ps_dec -> u4_output_present = 1 ; //<S2SV> } //<S2SV> } //<S2SV> ih264d_fill_output_struct_from_context ( ps_dec , ps_dec_op ) ; //<S2SV> if ( ps_dec -> u4_output_present && //<S2SV> ( ps_dec -> u4_fmt_conv_cur_row < ps_dec -> s_disp_frame_info . u4_y_ht ) ) //<S2SV> { //<S2SV> ps_dec -> u4_fmt_conv_num_rows = ps_dec -> s_disp_frame_info . u4_y_ht //<S2SV> - ps_dec -> u4_fmt_conv_cur_row ; //<S2SV> ih264d_format_convert ( ps_dec , & ( ps_dec -> s_disp_op ) , //<S2SV> ps_dec -> u4_fmt_conv_cur_row , //<S2SV> ps_dec -> u4_fmt_conv_num_rows ) ; //<S2SV> ps_dec -> u4_fmt_conv_cur_row += ps_dec -> u4_fmt_conv_num_rows ; //<S2SV> } //<S2SV> ih264d_release_display_field ( ps_dec , & ( ps_dec -> s_disp_op ) ) ; //<S2SV> } //<S2SV> if ( ps_dec -> i4_decode_header == 1 && ( ps_dec -> i4_header_decoded & 1 ) == 1 ) //<S2SV> { //<S2SV> ps_dec_op -> u4_progressive_frame_flag = 1 ; //<S2SV> if ( ( NULL != ps_dec -> ps_cur_sps ) && ( 1 == ( ps_dec -> ps_cur_sps -> u1_is_valid ) ) ) //<S2SV> { //<S2SV> if ( ( 0 == ps_dec -> ps_sps -> u1_frame_mbs_only_flag ) //<S2SV> && ( 0 == ps_dec -> ps_sps -> u1_mb_aff_flag ) ) //<S2SV> ps_dec_op -> u4_progressive_frame_flag = 0 ; //<S2SV> } //<S2SV> } //<S2SV> DATA_SYNC ( ) ; //<S2SV> H264_DEC_DEBUG_PRINT ( "The<S2SV_blank>num<S2SV_blank>bytes<S2SV_blank>consumed:<S2SV_blank>%d\\n" , //<S2SV> ps_dec_op -> u4_num_bytes_consumed ) ; //<S2SV> return api_ret_value ; //<S2SV> } //<S2SV> 