static int //<S2SV> daemon_AuthUserPwd ( char * username , char * password , char * errbuf ) //<S2SV> { //<S2SV> # ifdef _WIN32 //<S2SV> HANDLE Token ; //<S2SV> if ( LogonUser ( username , "." , password , LOGON32_LOGON_NETWORK , LOGON32_PROVIDER_DEFAULT , & Token ) == 0 ) //<S2SV> { //<S2SV> pcap_fmt_errmsg_for_win32_err ( errbuf , PCAP_ERRBUF_SIZE , //<S2SV> GetLastError ( ) , "LogonUser()<S2SV_blank>failed" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ImpersonateLoggedOnUser ( Token ) == 0 ) //<S2SV> { //<S2SV> pcap_fmt_errmsg_for_win32_err ( errbuf , PCAP_ERRBUF_SIZE , //<S2SV> GetLastError ( ) , "ImpersonateLoggedOnUser()<S2SV_blank>failed" ) ; //<S2SV> CloseHandle ( Token ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> CloseHandle ( Token ) ; //<S2SV> return 0 ; //<S2SV> # else //<S2SV> struct passwd * user ; //<S2SV> char * user_password ; //<S2SV> # ifdef HAVE_GETSPNAM //<S2SV> struct spwd * usersp ; //<S2SV> # endif //<S2SV> if ( ( user = getpwnam ( username ) ) == NULL ) //<S2SV> { //<S2SV> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> # ifdef HAVE_GETSPNAM //<S2SV> if ( ( usersp = getspnam ( username ) ) == NULL ) //<S2SV> { //<S2SV> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> user_password = usersp -> sp_pwdp ; //<S2SV> # else //<S2SV> user_password = user -> pw_passwd ; //<S2SV> # endif //<S2SV> if ( strcmp ( user_password , ( char * ) crypt ( password , user_password ) ) != 0 ) //<S2SV> { //<S2SV> pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed:<S2SV_blank>user<S2SV_blank>name<S2SV_blank>or<S2SV_blank>password<S2SV_blank>incorrect" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( setuid ( user -> pw_uid ) ) //<S2SV> { //<S2SV> pcap_fmt_errmsg_for_errno ( errbuf , PCAP_ERRBUF_SIZE , //<S2SV> errno , "setuid" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> # endif //<S2SV> } //<S2SV> 