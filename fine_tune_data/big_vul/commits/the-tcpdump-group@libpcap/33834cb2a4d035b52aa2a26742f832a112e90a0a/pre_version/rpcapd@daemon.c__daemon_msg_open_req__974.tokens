static int //<S2SV> daemon_msg_open_req ( uint8 ver , struct daemon_slpars * pars , uint32 plen , //<S2SV> char * source , size_t sourcelen ) //<S2SV> { //<S2SV> char errbuf [ PCAP_ERRBUF_SIZE ] ; //<S2SV> char errmsgbuf [ PCAP_ERRBUF_SIZE ] ; //<S2SV> pcap_t * fp ; //<S2SV> int nread ; //<S2SV> char sendbuf [ RPCAP_NETBUF_SIZE ] ; //<S2SV> int sendbufidx = 0 ; //<S2SV> struct rpcap_openreply * openreply ; //<S2SV> if ( plen > sourcelen - 1 ) //<S2SV> { //<S2SV> pcap_snprintf ( errmsgbuf , PCAP_ERRBUF_SIZE , "Source<S2SV_blank>string<S2SV_blank>too<S2SV_blank>long" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> nread = sock_recv ( pars -> sockctrl , source , plen , //<S2SV> SOCK_RECEIVEALL_YES | SOCK_EOF_IS_ERROR , errbuf , PCAP_ERRBUF_SIZE ) ; //<S2SV> if ( nread == - 1 ) //<S2SV> { //<S2SV> rpcapd_log ( LOGPRIO_ERROR , "Read<S2SV_blank>from<S2SV_blank>client<S2SV_blank>failed:<S2SV_blank>%s" , errbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> source [ nread ] = '\\0' ; //<S2SV> plen -= nread ; //<S2SV> if ( ( fp = pcap_open_live ( source , //<S2SV> 1500 , //<S2SV> 0 , //<S2SV> 1000 , //<S2SV> errmsgbuf ) ) == NULL ) //<S2SV> goto error ; //<S2SV> if ( sock_bufferize ( NULL , sizeof ( struct rpcap_header ) , NULL , & sendbufidx , //<S2SV> RPCAP_NETBUF_SIZE , SOCKBUF_CHECKONLY , errmsgbuf , PCAP_ERRBUF_SIZE ) == - 1 ) //<S2SV> goto error ; //<S2SV> rpcap_createhdr ( ( struct rpcap_header * ) sendbuf , ver , //<S2SV> RPCAP_MSG_OPEN_REPLY , 0 , sizeof ( struct rpcap_openreply ) ) ; //<S2SV> openreply = ( struct rpcap_openreply * ) & sendbuf [ sendbufidx ] ; //<S2SV> if ( sock_bufferize ( NULL , sizeof ( struct rpcap_openreply ) , NULL , & sendbufidx , //<S2SV> RPCAP_NETBUF_SIZE , SOCKBUF_CHECKONLY , errmsgbuf , PCAP_ERRBUF_SIZE ) == - 1 ) //<S2SV> goto error ; //<S2SV> memset ( openreply , 0 , sizeof ( struct rpcap_openreply ) ) ; //<S2SV> openreply -> linktype = htonl ( pcap_datalink ( fp ) ) ; //<S2SV> openreply -> tzoff = 0 ; //<S2SV> pcap_close ( fp ) ; //<S2SV> if ( sock_send ( pars -> sockctrl , sendbuf , sendbufidx , errbuf , PCAP_ERRBUF_SIZE ) == - 1 ) //<S2SV> { //<S2SV> rpcapd_log ( LOGPRIO_ERROR , "Send<S2SV_blank>to<S2SV_blank>client<S2SV_blank>failed:<S2SV_blank>%s" , errbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> error : //<S2SV> if ( rpcap_senderror ( pars -> sockctrl , ver , PCAP_ERR_OPEN , //<S2SV> errmsgbuf , errbuf ) == - 1 ) //<S2SV> { //<S2SV> rpcapd_log ( LOGPRIO_ERROR , "Send<S2SV_blank>to<S2SV_blank>client<S2SV_blank>failed:<S2SV_blank>%s" , errbuf ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( rpcapd_discard ( pars -> sockctrl , plen ) == - 1 ) //<S2SV> { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 