void test_parser ( void ) { //<S2SV> int i , retval ; //<S2SV> bzrtpPacket_t * zrtpPacket ; //<S2SV> bzrtpContext_t * context87654321 = bzrtp_createBzrtpContext ( 0x87654321 ) ; //<S2SV> bzrtpContext_t * context12345678 = bzrtp_createBzrtpContext ( 0x12345678 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> selfH [ 0 ] , H12345678 [ 0 ] , 32 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> selfH [ 1 ] , H12345678 [ 1 ] , 32 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> selfH [ 2 ] , H12345678 [ 2 ] , 32 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> selfH [ 3 ] , H12345678 [ 3 ] , 32 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> selfH [ 0 ] , H87654321 [ 0 ] , 32 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> selfH [ 1 ] , H87654321 [ 1 ] , 32 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> selfH [ 2 ] , H87654321 [ 2 ] , 32 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> selfH [ 3 ] , H87654321 [ 3 ] , 32 ) ; //<S2SV> context87654321 -> channelContext [ 0 ] -> keyAgreementAlgo = ZRTP_KEYAGREEMENT_DH3k ; //<S2SV> context12345678 -> channelContext [ 0 ] -> keyAgreementAlgo = ZRTP_KEYAGREEMENT_DH3k ; //<S2SV> context87654321 -> channelContext [ 0 ] -> cipherAlgo = ZRTP_CIPHER_AES1 ; //<S2SV> context12345678 -> channelContext [ 0 ] -> cipherAlgo = ZRTP_CIPHER_AES1 ; //<S2SV> context87654321 -> channelContext [ 0 ] -> hashAlgo = ZRTP_HASH_S256 ; //<S2SV> context12345678 -> channelContext [ 0 ] -> hashAlgo = ZRTP_HASH_S256 ; //<S2SV> updateCryptoFunctionPointers ( context87654321 -> channelContext [ 0 ] ) ; //<S2SV> updateCryptoFunctionPointers ( context12345678 -> channelContext [ 0 ] ) ; //<S2SV> context87654321 -> channelContext [ 0 ] -> mackeyi = ( uint8_t * ) malloc ( 32 ) ; //<S2SV> context12345678 -> channelContext [ 0 ] -> mackeyi = ( uint8_t * ) malloc ( 32 ) ; //<S2SV> context87654321 -> channelContext [ 0 ] -> mackeyr = ( uint8_t * ) malloc ( 32 ) ; //<S2SV> context12345678 -> channelContext [ 0 ] -> mackeyr = ( uint8_t * ) malloc ( 32 ) ; //<S2SV> context87654321 -> channelContext [ 0 ] -> zrtpkeyi = ( uint8_t * ) malloc ( 16 ) ; //<S2SV> context12345678 -> channelContext [ 0 ] -> zrtpkeyi = ( uint8_t * ) malloc ( 16 ) ; //<S2SV> context87654321 -> channelContext [ 0 ] -> zrtpkeyr = ( uint8_t * ) malloc ( 16 ) ; //<S2SV> context12345678 -> channelContext [ 0 ] -> zrtpkeyr = ( uint8_t * ) malloc ( 16 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> mackeyi , mackeyi , 32 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> mackeyr , mackeyr , 32 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> zrtpkeyi , zrtpkeyi , 16 ) ; //<S2SV> memcpy ( context12345678 -> channelContext [ 0 ] -> zrtpkeyr , zrtpkeyr , 16 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> mackeyi , mackeyi , 32 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> mackeyr , mackeyr , 32 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> zrtpkeyi , zrtpkeyi , 16 ) ; //<S2SV> memcpy ( context87654321 -> channelContext [ 0 ] -> zrtpkeyr , zrtpkeyr , 16 ) ; //<S2SV> context12345678 -> channelContext [ 0 ] -> role = RESPONDER ; //<S2SV> for ( i = 0 ; i < TEST_PACKET_NUMBER ; i ++ ) { //<S2SV> uint8_t freePacketFlag = 1 ; //<S2SV> zrtpPacket = bzrtp_packetCheck ( patternZRTPPackets [ i ] , patternZRTPMetaData [ i ] [ 0 ] , ( patternZRTPMetaData [ i ] [ 1 ] ) - 1 , & retval ) ; //<S2SV> retval += bzrtp_packetParser ( ( patternZRTPMetaData [ i ] [ 2 ] == 0x87654321 ) ? context12345678 : context87654321 , ( patternZRTPMetaData [ i ] [ 2 ] == 0x87654321 ) ? context12345678 -> channelContext [ 0 ] : context87654321 -> channelContext [ 0 ] , patternZRTPPackets [ i ] , patternZRTPMetaData [ i ] [ 0 ] , zrtpPacket ) ; //<S2SV> if ( zrtpPacket -> messageType == MSGTYPE_HELLO ) { //<S2SV> if ( patternZRTPMetaData [ i ] [ 2 ] == 0x87654321 ) { //<S2SV> context12345678 -> channelContext [ 0 ] -> peerPackets [ HELLO_MESSAGE_STORE_ID ] = zrtpPacket ; //<S2SV> } else { //<S2SV> context87654321 -> channelContext [ 0 ] -> peerPackets [ HELLO_MESSAGE_STORE_ID ] = zrtpPacket ; //<S2SV> } //<S2SV> freePacketFlag = 0 ; //<S2SV> } //<S2SV> if ( zrtpPacket -> messageType == MSGTYPE_COMMIT ) { //<S2SV> if ( patternZRTPMetaData [ i ] [ 2 ] == 0x87654321 ) { //<S2SV> context12345678 -> channelContext [ 0 ] -> peerPackets [ COMMIT_MESSAGE_STORE_ID ] = zrtpPacket ; //<S2SV> } else { //<S2SV> context87654321 -> channelContext [ 0 ] -> peerPackets [ COMMIT_MESSAGE_STORE_ID ] = zrtpPacket ; //<S2SV> } //<S2SV> freePacketFlag = 0 ; //<S2SV> } //<S2SV> if ( zrtpPacket -> messageType == MSGTYPE_DHPART1 || zrtpPacket -> messageType == MSGTYPE_DHPART2 ) { //<S2SV> if ( patternZRTPMetaData [ i ] [ 2 ] == 0x87654321 ) { //<S2SV> context12345678 -> channelContext [ 0 ] -> peerPackets [ DHPART_MESSAGE_STORE_ID ] = zrtpPacket ; //<S2SV> } else { //<S2SV> context87654321 -> channelContext [ 0 ] -> peerPackets [ DHPART_MESSAGE_STORE_ID ] = zrtpPacket ; //<S2SV> } //<S2SV> freePacketFlag = 0 ; //<S2SV> } //<S2SV> free ( zrtpPacket -> packetString ) ; //<S2SV> retval = bzrtp_packetBuild ( ( patternZRTPMetaData [ i ] [ 2 ] == 0x12345678 ) ? context12345678 : context87654321 , ( patternZRTPMetaData [ i ] [ 2 ] == 0x12345678 ) ? context12345678 -> channelContext [ 0 ] : context87654321 -> channelContext [ 0 ] , zrtpPacket , patternZRTPMetaData [ i ] [ 1 ] ) ; //<S2SV> if ( zrtpPacket -> packetString != NULL ) { //<S2SV> CU_ASSERT_TRUE ( memcmp ( zrtpPacket -> packetString , patternZRTPPackets [ i ] , patternZRTPMetaData [ i ] [ 0 ] ) == 0 ) ; //<S2SV> } else { //<S2SV> CU_FAIL ( "Unable<S2SV_blank>to<S2SV_blank>build<S2SV_blank>packet" ) ; //<S2SV> } //<S2SV> if ( freePacketFlag == 1 ) { //<S2SV> bzrtp_freeZrtpPacket ( zrtpPacket ) ; //<S2SV> } //<S2SV> } //<S2SV> bzrtp_destroyBzrtpContext ( context87654321 , 0x87654321 ) ; //<S2SV> bzrtp_destroyBzrtpContext ( context12345678 , 0x12345678 ) ; //<S2SV> } //<S2SV> 