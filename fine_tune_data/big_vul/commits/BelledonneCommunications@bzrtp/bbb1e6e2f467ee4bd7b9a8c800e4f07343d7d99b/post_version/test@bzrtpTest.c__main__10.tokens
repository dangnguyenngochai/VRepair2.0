int main ( int argc , char * argv [ ] ) { //<S2SV> int i , fails_count = 0 ; //<S2SV> CU_pSuite cryptoUtilsTestSuite , parserTestSuite ; //<S2SV> CU_pSuite * suites [ ] = { //<S2SV> & cryptoUtilsTestSuite , //<S2SV> & parserTestSuite , //<S2SV> NULL //<S2SV> } ; //<S2SV> if ( argc > 1 ) { //<S2SV> if ( argv [ 1 ] [ 0 ] == '-' ) { //<S2SV> if ( strcmp ( argv [ 1 ] , "-verbose" ) == 0 ) { //<S2SV> verbose = 1 ; //<S2SV> } else { //<S2SV> printf ( "Usage:\\n<S2SV_blank>%s<S2SV_blank>[-verbose]<S2SV_blank>to<S2SV_blank>enable<S2SV_blank>extensive<S2SV_blank>logging\\n" , argv [ 0 ] ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> printf ( "Usage:\\n<S2SV_blank>%s<S2SV_blank>[-verbose]<S2SV_blank>to<S2SV_blank>enable<S2SV_blank>extensive<S2SV_blank>logging\\n" , argv [ 0 ] ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> } //<S2SV> # ifdef HAVE_LIBXML2 //<S2SV> xmlInitParser ( ) ; //<S2SV> # endif //<S2SV> if ( CUE_SUCCESS != CU_initialize_registry ( ) ) { //<S2SV> return CU_get_error ( ) ; //<S2SV> } //<S2SV> cryptoUtilsTestSuite = CU_add_suite ( "Bzrtp<S2SV_blank>Crypto<S2SV_blank>Utils" , NULL , NULL ) ; //<S2SV> CU_add_test ( cryptoUtilsTestSuite , "zrtpKDF" , test_zrtpKDF ) ; //<S2SV> CU_add_test ( cryptoUtilsTestSuite , "CRC32" , test_CRC32 ) ; //<S2SV> CU_add_test ( cryptoUtilsTestSuite , "algo<S2SV_blank>agreement" , test_algoAgreement ) ; //<S2SV> CU_add_test ( cryptoUtilsTestSuite , "context<S2SV_blank>algo<S2SV_blank>setter<S2SV_blank>and<S2SV_blank>getter" , test_algoSetterGetter ) ; //<S2SV> CU_add_test ( cryptoUtilsTestSuite , "adding<S2SV_blank>mandatory<S2SV_blank>crypto<S2SV_blank>algorithms<S2SV_blank>if<S2SV_blank>needed" , test_addMandatoryCryptoTypesIfNeeded ) ; //<S2SV> parserTestSuite = CU_add_suite ( "Bzrtp<S2SV_blank>ZRTP<S2SV_blank>Packet<S2SV_blank>Parser" , NULL , NULL ) ; //<S2SV> CU_add_test ( parserTestSuite , "Parse" , test_parser ) ; //<S2SV> CU_add_test ( parserTestSuite , "Parse<S2SV_blank>hvi<S2SV_blank>check<S2SV_blank>fail" , test_parser_hvi ) ; //<S2SV> CU_add_test ( parserTestSuite , "Parse<S2SV_blank>Exchange" , test_parserComplete ) ; //<S2SV> CU_add_test ( parserTestSuite , "State<S2SV_blank>machine" , test_stateMachine ) ; //<S2SV> for ( i = 0 ; suites [ i ] ; i ++ ) { //<S2SV> CU_basic_run_suite ( * suites [ i ] ) ; //<S2SV> fails_count += CU_get_number_of_tests_failed ( ) ; //<S2SV> } //<S2SV> CU_cleanup_registry ( ) ; //<S2SV> # ifdef HAVE_LIBXML2 //<S2SV> xmlCleanupParser ( ) ; //<S2SV> # endif //<S2SV> return ( fails_count == 0 ? 0 : 1 ) ; //<S2SV> } //<S2SV> 