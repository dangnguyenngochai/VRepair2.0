int main ( int argc , char * argv [ ] ) //<S2SV> { //<S2SV> opj_dinfo_t * dinfo ; //<S2SV> opj_event_mgr_t event_mgr ; //<S2SV> int tnum ; //<S2SV> unsigned int snum ; //<S2SV> opj_mj2_t * movie ; //<S2SV> mj2_tk_t * track ; //<S2SV> mj2_sample_t * sample ; //<S2SV> unsigned char * frame_codestream ; //<S2SV> FILE * file , * outfile ; //<S2SV> char outfilename [ 50 ] ; //<S2SV> mj2_dparameters_t parameters ; //<S2SV> if ( argc != 3 ) { //<S2SV> printf ( "Usage:<S2SV_blank>%s<S2SV_blank>mj2filename<S2SV_blank>output_location\\n" , argv [ 0 ] ) ; //<S2SV> printf ( "Example:<S2SV_blank>%s<S2SV_blank>foreman.mj2<S2SV_blank>output/foreman\\n" , argv [ 0 ] ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> file = fopen ( argv [ 1 ] , "rb" ) ; //<S2SV> if ( ! file ) { //<S2SV> fprintf ( stderr , "failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading\\n" , argv [ 1 ] ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> memset ( & event_mgr , 0 , sizeof ( opj_event_mgr_t ) ) ; //<S2SV> event_mgr . error_handler = error_callback ; //<S2SV> event_mgr . warning_handler = warning_callback ; //<S2SV> event_mgr . info_handler = info_callback ; //<S2SV> dinfo = mj2_create_decompress ( ) ; //<S2SV> opj_set_event_mgr ( ( opj_common_ptr ) dinfo , & event_mgr , stderr ) ; //<S2SV> memset ( & parameters , 0 , sizeof ( mj2_dparameters_t ) ) ; //<S2SV> movie = ( opj_mj2_t * ) dinfo -> mj2_handle ; //<S2SV> mj2_setup_decoder ( movie , & parameters ) ; //<S2SV> if ( mj2_read_struct ( file , movie ) ) { //<S2SV> return 1 ; //<S2SV> } //<S2SV> tnum = 0 ; //<S2SV> while ( movie -> tk [ tnum ] . track_type != 0 ) { //<S2SV> tnum ++ ; //<S2SV> } //<S2SV> track = & movie -> tk [ tnum ] ; //<S2SV> fprintf ( stdout , "Extracting<S2SV_blank>%d<S2SV_blank>frames<S2SV_blank>from<S2SV_blank>file...\\n" , track -> num_samples ) ; //<S2SV> for ( snum = 0 ; snum < track -> num_samples ; snum ++ ) { //<S2SV> sample = & track -> sample [ snum ] ; //<S2SV> frame_codestream = ( unsigned char * ) malloc ( sample -> sample_size - //<S2SV> 8 ) ; //<S2SV> fseek ( file , sample -> offset + 8 , SEEK_SET ) ; //<S2SV> fread ( frame_codestream , sample -> sample_size - 8 , 1 , //<S2SV> file ) ; //<S2SV> int num = snprintf ( outfilename , sizeof ( outfilename ) , "%s_%05d.j2k" , argv [ 2 ] , snum ) ; //<S2SV> if ( num >= sizeof ( outfilename ) ) { //<S2SV> fprintf ( stderr , "maximum<S2SV_blank>length<S2SV_blank>of<S2SV_blank>output<S2SV_blank>prefix<S2SV_blank>exceeded\\n" ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> outfile = fopen ( outfilename , "wb" ) ; //<S2SV> if ( ! outfile ) { //<S2SV> fprintf ( stderr , "failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>writing\\n" , outfilename ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> fwrite ( frame_codestream , sample -> sample_size - 8 , 1 , outfile ) ; //<S2SV> fclose ( outfile ) ; //<S2SV> free ( frame_codestream ) ; //<S2SV> } //<S2SV> fclose ( file ) ; //<S2SV> fprintf ( stdout , "%d<S2SV_blank>frames<S2SV_blank>correctly<S2SV_blank>extracted\\n" , snum ) ; //<S2SV> if ( dinfo ) { //<S2SV> mj2_destroy_decompress ( ( opj_mj2_t * ) dinfo -> mj2_handle ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 