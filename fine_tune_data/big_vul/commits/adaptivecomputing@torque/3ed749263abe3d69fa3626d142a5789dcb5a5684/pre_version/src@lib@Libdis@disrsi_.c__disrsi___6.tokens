int disrsi_ ( //<S2SV> int stream , //<S2SV> int * negate , //<S2SV> unsigned * value , //<S2SV> unsigned count ) //<S2SV> { //<S2SV> int c ; //<S2SV> unsigned locval ; //<S2SV> unsigned ndigs ; //<S2SV> char * cp ; //<S2SV> char scratch [ DIS_BUFSIZ + 1 ] ; //<S2SV> assert ( negate != NULL ) ; //<S2SV> assert ( value != NULL ) ; //<S2SV> assert ( count ) ; //<S2SV> assert ( stream >= 0 ) ; //<S2SV> assert ( dis_getc != NULL ) ; //<S2SV> assert ( dis_gets != NULL ) ; //<S2SV> memset ( scratch , 0 , DIS_BUFSIZ + 1 ) ; //<S2SV> if ( dis_umaxd == 0 ) //<S2SV> disiui_ ( ) ; //<S2SV> switch ( c = ( * dis_getc ) ( stream ) ) //<S2SV> { //<S2SV> case '-' : //<S2SV> case '+' : //<S2SV> * negate = c == '-' ; //<S2SV> if ( ( * dis_gets ) ( stream , scratch , count ) != ( int ) count ) //<S2SV> { //<S2SV> return ( DIS_EOD ) ; //<S2SV> } //<S2SV> if ( count >= dis_umaxd ) //<S2SV> { //<S2SV> if ( count > dis_umaxd ) //<S2SV> goto overflow ; //<S2SV> if ( memcmp ( scratch , dis_umax , dis_umaxd ) > 0 ) //<S2SV> goto overflow ; //<S2SV> } //<S2SV> cp = scratch ; //<S2SV> locval = 0 ; //<S2SV> do //<S2SV> { //<S2SV> if ( ( ( c = * cp ++ ) < '0' ) || ( c > '9' ) ) //<S2SV> { //<S2SV> return ( DIS_NONDIGIT ) ; //<S2SV> } //<S2SV> locval = 10 * locval + c - '0' ; //<S2SV> } //<S2SV> while ( -- count ) ; //<S2SV> * value = locval ; //<S2SV> return ( DIS_SUCCESS ) ; //<S2SV> break ; //<S2SV> case '0' : //<S2SV> return ( DIS_LEADZRO ) ; //<S2SV> break ; //<S2SV> case '1' : //<S2SV> case '2' : //<S2SV> case '3' : //<S2SV> case '4' : //<S2SV> case '5' : //<S2SV> case '6' : //<S2SV> case '7' : //<S2SV> case '8' : //<S2SV> case '9' : //<S2SV> ndigs = c - '0' ; //<S2SV> if ( count > 1 ) //<S2SV> { //<S2SV> if ( ( * dis_gets ) ( stream , scratch + 1 , count - 1 ) != ( int ) count - 1 ) //<S2SV> { //<S2SV> return ( DIS_EOD ) ; //<S2SV> } //<S2SV> cp = scratch ; //<S2SV> if ( count >= dis_umaxd ) //<S2SV> { //<S2SV> if ( count > dis_umaxd ) //<S2SV> break ; //<S2SV> * cp = c ; //<S2SV> if ( memcmp ( scratch , dis_umax , dis_umaxd ) > 0 ) //<S2SV> break ; //<S2SV> } //<S2SV> while ( -- count ) //<S2SV> { //<S2SV> if ( ( ( c = * ++ cp ) < '0' ) || ( c > '9' ) ) //<S2SV> { //<S2SV> return ( DIS_NONDIGIT ) ; //<S2SV> } //<S2SV> ndigs = 10 * ndigs + c - '0' ; //<S2SV> } //<S2SV> } //<S2SV> return ( disrsi_ ( stream , negate , value , ndigs ) ) ; //<S2SV> break ; //<S2SV> case - 1 : //<S2SV> return ( DIS_EOD ) ; //<S2SV> break ; //<S2SV> case - 2 : //<S2SV> return ( DIS_EOF ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> return ( DIS_NONDIGIT ) ; //<S2SV> break ; //<S2SV> } //<S2SV> * negate = FALSE ; //<S2SV> overflow : //<S2SV> * value = UINT_MAX ; //<S2SV> return ( DIS_OVERFLOW ) ; //<S2SV> } //<S2SV> 