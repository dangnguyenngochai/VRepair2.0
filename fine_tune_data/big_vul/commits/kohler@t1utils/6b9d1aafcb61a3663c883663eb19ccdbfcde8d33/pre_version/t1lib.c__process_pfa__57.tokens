void //<S2SV> process_pfa ( FILE * ifp , const char * ifp_filename , struct font_reader * fr ) //<S2SV> { //<S2SV> char buffer [ LINESIZE ] ; //<S2SV> int c = 0 ; //<S2SV> int blocktyp = PFA_ASCII ; //<S2SV> char saved_orphan = 0 ; //<S2SV> ( void ) ifp_filename ; //<S2SV> while ( c != EOF ) { //<S2SV> char * line = buffer , * last = buffer ; //<S2SV> int crlf = 0 ; //<S2SV> c = getc ( ifp ) ; //<S2SV> while ( c != EOF && c != '\\r' && c != '\\n' && last < buffer + LINESIZE - 1 ) { //<S2SV> * last ++ = c ; //<S2SV> c = getc ( ifp ) ; //<S2SV> } //<S2SV> if ( last == buffer + LINESIZE - 1 ) //<S2SV> ungetc ( c , ifp ) ; //<S2SV> else if ( c == '\\r' && blocktyp != PFA_BINARY ) { //<S2SV> c = getc ( ifp ) ; //<S2SV> if ( c != '\\n' ) //<S2SV> ungetc ( c , ifp ) , crlf = 1 ; //<S2SV> else //<S2SV> crlf = 2 ; //<S2SV> * last ++ = '\\n' ; //<S2SV> } else if ( c != EOF ) //<S2SV> * last ++ = c ; //<S2SV> * last = 0 ; //<S2SV> if ( blocktyp == PFA_ASCII ) { //<S2SV> if ( strncmp ( line , "currentfile<S2SV_blank>eexec" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { //<S2SV> char saved_p ; //<S2SV> for ( line += 18 ; isspace ( * line ) ; line ++ ) //<S2SV> ; //<S2SV> saved_p = * line ; //<S2SV> * line = 0 ; //<S2SV> fr -> output_ascii ( buffer , line - buffer ) ; //<S2SV> * line = saved_p ; //<S2SV> blocktyp = PFA_EEXEC_TEST ; //<S2SV> if ( ! * line ) //<S2SV> continue ; //<S2SV> } else { //<S2SV> fr -> output_ascii ( line , last - line ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> if ( blocktyp == PFA_EEXEC_TEST ) { //<S2SV> for ( ; line < last && isspace ( * line ) ; line ++ ) //<S2SV> ; //<S2SV> if ( line == last ) //<S2SV> continue ; //<S2SV> else if ( last >= line + 4 && isxdigit ( line [ 0 ] ) && isxdigit ( line [ 1 ] ) //<S2SV> && isxdigit ( line [ 2 ] ) && isxdigit ( line [ 3 ] ) ) //<S2SV> blocktyp = PFA_HEX ; //<S2SV> else //<S2SV> blocktyp = PFA_BINARY ; //<S2SV> memmove ( buffer , line , last - line + 1 ) ; //<S2SV> last = buffer + ( last - line ) ; //<S2SV> line = buffer ; //<S2SV> if ( blocktyp == PFA_BINARY && crlf ) { //<S2SV> last [ - 1 ] = '\\r' ; //<S2SV> if ( crlf == 2 ) //<S2SV> * last ++ = '\\n' ; //<S2SV> } //<S2SV> } //<S2SV> if ( all_zeroes ( line ) ) { //<S2SV> fr -> output_ascii ( line , last - line ) ; //<S2SV> blocktyp = PFA_ASCII ; //<S2SV> } else if ( blocktyp == PFA_HEX ) { //<S2SV> int len = translate_hex_string ( line , & saved_orphan ) ; //<S2SV> if ( len ) //<S2SV> fr -> output_binary ( ( unsigned char * ) line , len ) ; //<S2SV> } else //<S2SV> fr -> output_binary ( ( unsigned char * ) line , last - line ) ; //<S2SV> } //<S2SV> fr -> output_end ( ) ; //<S2SV> } //<S2SV> 