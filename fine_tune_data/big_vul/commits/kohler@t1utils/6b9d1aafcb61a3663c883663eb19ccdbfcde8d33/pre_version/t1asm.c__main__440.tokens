int main ( int argc , char * argv [ ] ) //<S2SV> { //<S2SV> char * p , * q , * r ; //<S2SV> Clp_Parser * clp = //<S2SV> Clp_NewParser ( argc , ( const char * const * ) argv , sizeof ( options ) / sizeof ( options [ 0 ] ) , options ) ; //<S2SV> program_name = Clp_ProgramName ( clp ) ; //<S2SV> while ( 1 ) { //<S2SV> int opt = Clp_Next ( clp ) ; //<S2SV> switch ( opt ) { //<S2SV> case BLOCK_LEN_OPT : //<S2SV> blocklen = clp -> val . i ; //<S2SV> break ; //<S2SV> output_file : //<S2SV> case OUTPUT_OPT : //<S2SV> if ( ofp ) //<S2SV> fatal_error ( "output<S2SV_blank>file<S2SV_blank>already<S2SV_blank>specified" ) ; //<S2SV> if ( strcmp ( clp -> vstr , "-" ) == 0 ) //<S2SV> ofp = stdout ; //<S2SV> else if ( ! ( ofp = fopen ( clp -> vstr , "w" ) ) ) //<S2SV> fatal_error ( "%s:<S2SV_blank>%s" , clp -> vstr , strerror ( errno ) ) ; //<S2SV> break ; //<S2SV> case PFB_OPT : //<S2SV> pfb = 1 ; //<S2SV> break ; //<S2SV> case PFA_OPT : //<S2SV> pfb = 0 ; //<S2SV> break ; //<S2SV> case HELP_OPT : //<S2SV> usage ( ) ; //<S2SV> exit ( 0 ) ; //<S2SV> break ; //<S2SV> case VERSION_OPT : //<S2SV> printf ( "t1asm<S2SV_blank>(LCDF<S2SV_blank>t1utils)<S2SV_blank>%s\\n" , VERSION ) ; //<S2SV> printf ( "Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\n<S2SV_blank>This<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\n<S2SV_blank>There<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\n<S2SV_blank>particular<S2SV_blank>purpose.\\n" ) ; //<S2SV> exit ( 0 ) ; //<S2SV> break ; //<S2SV> case Clp_NotOption : //<S2SV> if ( ifp && ofp ) //<S2SV> fatal_error ( "too<S2SV_blank>many<S2SV_blank>arguments" ) ; //<S2SV> else if ( ifp ) //<S2SV> goto output_file ; //<S2SV> if ( strcmp ( clp -> vstr , "-" ) == 0 ) //<S2SV> ifp = stdin ; //<S2SV> else if ( ! ( ifp = fopen ( clp -> vstr , "r" ) ) ) //<S2SV> fatal_error ( "%s:<S2SV_blank>%s" , clp -> vstr , strerror ( errno ) ) ; //<S2SV> break ; //<S2SV> case Clp_Done : //<S2SV> goto done ; //<S2SV> case Clp_BadOption : //<S2SV> short_usage ( ) ; //<S2SV> exit ( 1 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> done : //<S2SV> if ( ! pfb ) { //<S2SV> if ( blocklen == - 1 ) //<S2SV> blocklen = 64 ; //<S2SV> else if ( blocklen < 8 ) { //<S2SV> blocklen = 8 ; //<S2SV> error ( "warning:<S2SV_blank>line<S2SV_blank>length<S2SV_blank>raised<S2SV_blank>to<S2SV_blank>%d" , blocklen ) ; //<S2SV> } else if ( blocklen > 1024 ) { //<S2SV> blocklen = 1024 ; //<S2SV> error ( "warning:<S2SV_blank>line<S2SV_blank>length<S2SV_blank>lowered<S2SV_blank>to<S2SV_blank>%d" , blocklen ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! ifp ) ifp = stdin ; //<S2SV> if ( ! ofp ) ofp = stdout ; //<S2SV> if ( pfb ) //<S2SV> init_pfb_writer ( & w , blocklen , ofp ) ; //<S2SV> # if defined ( _MSDOS ) || defined ( _WIN32 ) //<S2SV> if ( pfb ) //<S2SV> _setmode ( _fileno ( ofp ) , _O_BINARY ) ; //<S2SV> # endif //<S2SV> while ( ! feof ( ifp ) && ! ferror ( ifp ) ) { //<S2SV> t1utils_getline ( ) ; //<S2SV> if ( ! ever_active ) { //<S2SV> if ( strncmp ( line , "currentfile<S2SV_blank>eexec" , 17 ) == 0 && isspace ( line [ 17 ] ) ) { //<S2SV> for ( p = line + 18 ; isspace ( * p ) ; p ++ ) //<S2SV> ; //<S2SV> eexec_start ( p ) ; //<S2SV> continue ; //<S2SV> } else if ( strncmp ( line , "/lenIV" , 6 ) == 0 ) { //<S2SV> lenIV = atoi ( line + 6 ) ; //<S2SV> } else if ( ( p = strstr ( line , "string<S2SV_blank>currentfile" ) ) //<S2SV> && strstr ( line , "readstring" ) ) { //<S2SV> * p = '\\0' ; //<S2SV> q = strrchr ( line , '/' ) ; //<S2SV> if ( q ) { //<S2SV> r = cs_start ; //<S2SV> ++ q ; //<S2SV> while ( ! isspace ( * q ) && * q != '{' ) //<S2SV> * r ++ = * q ++ ; //<S2SV> * r = '\\0' ; //<S2SV> } //<S2SV> * p = 's' ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! active ) { //<S2SV> if ( ( p = strstr ( line , "/Subrs" ) ) && isdigit ( p [ 7 ] ) ) //<S2SV> ever_active = active = 1 ; //<S2SV> else if ( ( p = strstr ( line , "/CharStrings" ) ) && isdigit ( p [ 13 ] ) ) //<S2SV> ever_active = active = 1 ; //<S2SV> } //<S2SV> if ( ( p = strstr ( line , "currentfile<S2SV_blank>closefile" ) ) ) { //<S2SV> p += sizeof ( "currentfile<S2SV_blank>closefile" ) - 1 ; //<S2SV> for ( q = p ; isspace ( * q ) && * q != '\\n' ; q ++ ) //<S2SV> ; //<S2SV> if ( q == p && ! * q ) //<S2SV> error ( "warning:<S2SV_blank>`currentfile<S2SV_blank>closefile\'<S2SV_blank>line<S2SV_blank>too<S2SV_blank>long" ) ; //<S2SV> else if ( q != p ) { //<S2SV> if ( * q != '\\n' ) //<S2SV> error ( "text<S2SV_blank>after<S2SV_blank>`currentfile<S2SV_blank>closefile\'<S2SV_blank>ignored" ) ; //<S2SV> * p ++ = '\\n' ; //<S2SV> * p ++ = '\\0' ; //<S2SV> } //<S2SV> eexec_string ( line ) ; //<S2SV> break ; //<S2SV> } //<S2SV> eexec_string ( line ) ; //<S2SV> if ( start_charstring ) { //<S2SV> if ( ! cs_start [ 0 ] ) //<S2SV> fatal_error ( "couldn\'t<S2SV_blank>find<S2SV_blank>charstring<S2SV_blank>start<S2SV_blank>command" ) ; //<S2SV> parse_charstring ( ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( in_eexec ) //<S2SV> eexec_end ( ) ; //<S2SV> while ( ! feof ( ifp ) && ! ferror ( ifp ) ) { //<S2SV> t1utils_getline ( ) ; //<S2SV> eexec_string ( line ) ; //<S2SV> } //<S2SV> if ( pfb ) //<S2SV> pfb_writer_end ( & w ) ; //<S2SV> if ( ! ever_active ) //<S2SV> error ( "warning:<S2SV_blank>no<S2SV_blank>charstrings<S2SV_blank>found<S2SV_blank>in<S2SV_blank>input<S2SV_blank>file" ) ; //<S2SV> fclose ( ifp ) ; //<S2SV> fclose ( ofp ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 