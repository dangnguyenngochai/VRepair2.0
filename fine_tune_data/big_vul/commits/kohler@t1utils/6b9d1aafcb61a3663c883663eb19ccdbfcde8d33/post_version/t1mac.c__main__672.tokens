int //<S2SV> main ( int argc , char * argv [ ] ) //<S2SV> { //<S2SV> int i , c ; //<S2SV> FILE * ifp = 0 , * ofp = 0 ; //<S2SV> const char * ifp_filename = "<stdin>" ; //<S2SV> const char * ofp_filename = "<stdout>" ; //<S2SV> const char * set_font_name = 0 ; //<S2SV> struct font_reader fr ; //<S2SV> uint32_t rfork_len ; //<S2SV> int raw = 0 , macbinary = 1 , applesingle = 0 , appledouble = 0 , binhex = 0 ; //<S2SV> Clp_Parser * clp = //<S2SV> Clp_NewParser ( argc , ( const char * const * ) argv , sizeof ( options ) / sizeof ( options [ 0 ] ) , options ) ; //<S2SV> program_name = Clp_ProgramName ( clp ) ; //<S2SV> while ( 1 ) { //<S2SV> int opt = Clp_Next ( clp ) ; //<S2SV> switch ( opt ) { //<S2SV> case RAW_OPT : //<S2SV> raw = 1 ; //<S2SV> macbinary = applesingle = appledouble = binhex = 0 ; //<S2SV> break ; //<S2SV> case MACBINARY_OPT : //<S2SV> macbinary = 1 ; //<S2SV> raw = applesingle = appledouble = binhex = 0 ; //<S2SV> break ; //<S2SV> case APPLESINGLE_OPT : //<S2SV> applesingle = 1 ; //<S2SV> raw = macbinary = appledouble = binhex = 0 ; //<S2SV> break ; //<S2SV> case APPLEDOUBLE_OPT : //<S2SV> appledouble = 1 ; //<S2SV> raw = macbinary = applesingle = binhex = 0 ; //<S2SV> break ; //<S2SV> case BINHEX_OPT : //<S2SV> binhex = 1 ; //<S2SV> raw = macbinary = applesingle = appledouble = 0 ; //<S2SV> break ; //<S2SV> output_file : //<S2SV> case OUTPUT_OPT : //<S2SV> if ( ofp ) //<S2SV> fatal_error ( "output<S2SV_blank>file<S2SV_blank>already<S2SV_blank>specified" ) ; //<S2SV> if ( strcmp ( clp -> vstr , "-" ) == 0 ) //<S2SV> ofp = stdout ; //<S2SV> else { //<S2SV> ofp_filename = clp -> vstr ; //<S2SV> ofp = fopen ( ofp_filename , "wb" ) ; //<S2SV> if ( ! ofp ) fatal_error ( "%s:<S2SV_blank>%s" , ofp_filename , strerror ( errno ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case FILENAME_OPT : //<S2SV> if ( set_font_name ) //<S2SV> fatal_error ( "Macintosh<S2SV_blank>font<S2SV_blank>filename<S2SV_blank>already<S2SV_blank>specified" ) ; //<S2SV> set_font_name = clp -> vstr ; //<S2SV> break ; //<S2SV> case HELP_OPT : //<S2SV> usage ( ) ; //<S2SV> exit ( 0 ) ; //<S2SV> break ; //<S2SV> case VERSION_OPT : //<S2SV> printf ( "t1mac<S2SV_blank>(LCDF<S2SV_blank>t1utils)<S2SV_blank>%s\\n" , VERSION ) ; //<S2SV> printf ( "Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n" ) ; //<S2SV> exit ( 0 ) ; //<S2SV> break ; //<S2SV> case Clp_NotOption : //<S2SV> if ( ifp && ofp ) //<S2SV> fatal_error ( "too<S2SV_blank>many<S2SV_blank>arguments" ) ; //<S2SV> else if ( ifp ) //<S2SV> goto output_file ; //<S2SV> if ( strcmp ( clp -> vstr , "-" ) == 0 ) //<S2SV> ifp = stdin ; //<S2SV> else { //<S2SV> ifp_filename = clp -> vstr ; //<S2SV> ifp = fopen ( clp -> vstr , "r" ) ; //<S2SV> if ( ! ifp ) fatal_error ( "%s:<S2SV_blank>%s" , clp -> vstr , strerror ( errno ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case Clp_Done : //<S2SV> goto done ; //<S2SV> case Clp_BadOption : //<S2SV> short_usage ( ) ; //<S2SV> exit ( 1 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> done : //<S2SV> if ( ! ifp ) ifp = stdin ; //<S2SV> if ( ! ofp ) ofp = stdout ; //<S2SV> # if defined ( _MSDOS ) || defined ( _WIN32 ) //<S2SV> _setmode ( _fileno ( ofp ) , _O_BINARY ) ; //<S2SV> # endif //<S2SV> fr . output_ascii = t1mac_output_ascii ; //<S2SV> fr . output_binary = t1mac_output_binary ; //<S2SV> fr . output_end = t1mac_output_end ; //<S2SV> rfork_f = tmpfile ( ) ; //<S2SV> if ( ! rfork_f ) //<S2SV> fatal_error ( "cannot<S2SV_blank>open<S2SV_blank>temorary<S2SV_blank>file:<S2SV_blank>%s" , strerror ( errno ) ) ; //<S2SV> for ( i = 0 ; i < RFORK_HEADERLEN ; i ++ ) //<S2SV> putc ( 0 , rfork_f ) ; //<S2SV> init_current_post ( ) ; //<S2SV> c = getc ( ifp ) ; //<S2SV> ungetc ( c , ifp ) ; //<S2SV> if ( c == PFB_MARKER ) //<S2SV> process_pfb ( ifp , ifp_filename , & fr ) ; //<S2SV> else if ( c == '%' ) //<S2SV> process_pfa ( ifp , ifp_filename , & fr ) ; //<S2SV> else //<S2SV> fatal_error ( "%s<S2SV_blank>does<S2SV_blank>not<S2SV_blank>start<S2SV_blank>with<S2SV_blank>font<S2SV_blank>marker<S2SV_blank>(`%%\'<S2SV_blank>or<S2SV_blank>0x80)" , ifp_filename ) ; //<S2SV> if ( ifp != stdin ) //<S2SV> fclose ( ifp ) ; //<S2SV> if ( nrsrc == 0 ) //<S2SV> error ( "no<S2SV_blank>POST<S2SV_blank>resources<S2SV_blank>written<S2SV_blank>--<S2SV_blank>are<S2SV_blank>you<S2SV_blank>sure<S2SV_blank>this<S2SV_blank>was<S2SV_blank>a<S2SV_blank>font?" ) ; //<S2SV> output_new_rsrc ( "ICN#" , 256 , 32 , ( const char * ) icon_bw_data , 256 ) ; //<S2SV> output_new_rsrc ( "FREF" , 256 , 32 , "LWFN\\0\\0\\0" , 7 ) ; //<S2SV> output_new_rsrc ( "BNDL" , 256 , 32 , "T1UT\\0\\0\\0\\1FREF\\0\\0\\0\\0\\1\\0ICN#\\0\\0\\0\\0\\1\\0" , 28 ) ; //<S2SV> output_new_rsrc ( "icl8" , 256 , 32 , ( const char * ) icon_8_data , 1024 ) ; //<S2SV> output_new_rsrc ( "icl4" , 256 , 32 , ( const char * ) icon_4_data , 512 ) ; //<S2SV> output_new_rsrc ( "ics#" , 256 , 32 , ( const char * ) small_icon_bw_data , 64 ) ; //<S2SV> output_new_rsrc ( "ics8" , 256 , 32 , ( const char * ) small_icon_8_data , 256 ) ; //<S2SV> output_new_rsrc ( "ics4" , 256 , 32 , ( const char * ) small_icon_4_data , 128 ) ; //<S2SV> output_new_rsrc ( "T1UT" , 0 , 0 , "DConverted<S2SV_blank>by<S2SV_blank>t1mac<S2SV_blank>(t1utils)<S2SV_blank>\\251Eddie<S2SV_blank>Kohler<S2SV_blank>http://www.lcdf.org/type/" , 69 ) ; //<S2SV> rfork_len = complete_rfork ( ) ; //<S2SV> if ( ! set_font_name && font_name ) { //<S2SV> int part = 0 , len = 0 ; //<S2SV> char * x , * s ; //<S2SV> for ( x = s = font_name ; * s ; s ++ ) //<S2SV> if ( isupper ( ( unsigned char ) * s ) || isdigit ( ( unsigned char ) * s ) ) { //<S2SV> * x ++ = * s ; //<S2SV> part ++ ; //<S2SV> len = 1 ; //<S2SV> } else if ( islower ( ( unsigned char ) * s ) ) { //<S2SV> if ( len < ( part <= 1 ? 5 : 3 ) ) //<S2SV> * x ++ = * s ; //<S2SV> len ++ ; //<S2SV> } //<S2SV> * x ++ = 0 ; //<S2SV> set_font_name = font_name ; //<S2SV> } else if ( ! set_font_name ) //<S2SV> set_font_name = "Unknown<S2SV_blank>Font" ; //<S2SV> if ( macbinary ) //<S2SV> output_macbinary ( rfork_f , rfork_len , set_font_name , ofp ) ; //<S2SV> else if ( raw ) //<S2SV> output_raw ( rfork_f , rfork_len , ofp ) ; //<S2SV> else if ( applesingle || appledouble ) //<S2SV> output_applesingle ( rfork_f , rfork_len , set_font_name , ofp , appledouble ) ; //<S2SV> else if ( binhex ) //<S2SV> output_binhex ( rfork_f , rfork_len , set_font_name , ofp ) ; //<S2SV> else //<S2SV> fatal_error ( "strange<S2SV_blank>output<S2SV_blank>format" ) ; //<S2SV> fclose ( rfork_f ) ; //<S2SV> if ( ofp != stdout ) //<S2SV> fclose ( ofp ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 