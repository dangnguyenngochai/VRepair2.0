void //<S2SV> wiki_handle_rest_call ( HttpRequest * req , //<S2SV> HttpResponse * res , //<S2SV> char * func ) //<S2SV> { //<S2SV> if ( func != NULL && * func != '\\0' ) //<S2SV> { //<S2SV> if ( ! strcmp ( func , "page/get" ) ) //<S2SV> { //<S2SV> char * page = http_request_param_get ( req , "page" ) ; //<S2SV> if ( page == NULL ) //<S2SV> page = http_request_get_query_string ( req ) ; //<S2SV> if ( page && ( access ( page , R_OK ) == 0 ) ) //<S2SV> { //<S2SV> http_response_printf ( res , "%s" , file_read ( page ) ) ; //<S2SV> http_response_send ( res ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ! strcmp ( func , "page/set" ) ) //<S2SV> { //<S2SV> char * wikitext = NULL , * page = NULL ; //<S2SV> if ( ( ( wikitext = http_request_param_get ( req , "text" ) ) != NULL ) //<S2SV> && ( ( page = http_request_param_get ( req , "page" ) ) != NULL ) ) //<S2SV> { //<S2SV> file_write ( page , wikitext ) ; //<S2SV> http_response_printf ( res , "success" ) ; //<S2SV> http_response_send ( res ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ! strcmp ( func , "page/delete" ) ) //<S2SV> { //<S2SV> char * page = http_request_param_get ( req , "page" ) ; //<S2SV> if ( page == NULL ) //<S2SV> page = http_request_get_query_string ( req ) ; //<S2SV> if ( page && ( unlink ( page ) > 0 ) ) //<S2SV> { //<S2SV> http_response_printf ( res , "success" ) ; //<S2SV> http_response_send ( res ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ! strcmp ( func , "page/exists" ) ) //<S2SV> { //<S2SV> char * page = http_request_param_get ( req , "page" ) ; //<S2SV> if ( page == NULL ) //<S2SV> page = http_request_get_query_string ( req ) ; //<S2SV> if ( page && ( access ( page , R_OK ) == 0 ) ) //<S2SV> { //<S2SV> http_response_printf ( res , "success" ) ; //<S2SV> http_response_send ( res ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ! strcmp ( func , "pages" ) || ! strcmp ( func , "search" ) ) //<S2SV> { //<S2SV> WikiPageList * * pages = NULL ; //<S2SV> int n_pages , i ; //<S2SV> char * expr = http_request_param_get ( req , "expr" ) ; //<S2SV> if ( expr == NULL ) //<S2SV> expr = http_request_get_query_string ( req ) ; //<S2SV> pages = wiki_get_pages ( & n_pages , expr ) ; //<S2SV> if ( pages ) //<S2SV> { //<S2SV> for ( i = 0 ; i < n_pages ; i ++ ) //<S2SV> { //<S2SV> struct tm * pTm ; //<S2SV> char datebuf [ 64 ] ; //<S2SV> pTm = localtime ( & pages [ i ] -> mtime ) ; //<S2SV> strftime ( datebuf , sizeof ( datebuf ) , "%Y-%m-%d<S2SV_blank>%H:%M" , pTm ) ; //<S2SV> http_response_printf ( res , "%s\\t%s\\n" , pages [ i ] -> name , datebuf ) ; //<S2SV> } //<S2SV> http_response_send ( res ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> http_response_set_status ( res , 500 , "Error" ) ; //<S2SV> http_response_printf ( res , "<html><body>Failed</body></html>\\n" ) ; //<S2SV> http_response_send ( res ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 