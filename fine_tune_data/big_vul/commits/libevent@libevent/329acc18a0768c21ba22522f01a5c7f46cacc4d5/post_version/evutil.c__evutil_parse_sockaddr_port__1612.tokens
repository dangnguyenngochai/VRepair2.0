int //<S2SV> evutil_parse_sockaddr_port ( const char * ip_as_string , struct sockaddr * out , int * outlen ) //<S2SV> { //<S2SV> int port ; //<S2SV> char buf [ 128 ] ; //<S2SV> const char * cp , * addr_part , * port_part ; //<S2SV> int is_ipv6 ; //<S2SV> cp = strchr ( ip_as_string , ':' ) ; //<S2SV> if ( * ip_as_string == '[' ) { //<S2SV> size_t len ; //<S2SV> if ( ! ( cp = strchr ( ip_as_string , ']' ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> len = ( cp - ( ip_as_string + 1 ) ) ; //<S2SV> if ( len > sizeof ( buf ) - 1 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memcpy ( buf , ip_as_string + 1 , len ) ; //<S2SV> buf [ len ] = '\\0' ; //<S2SV> addr_part = buf ; //<S2SV> if ( cp [ 1 ] == ':' ) //<S2SV> port_part = cp + 2 ; //<S2SV> else //<S2SV> port_part = NULL ; //<S2SV> is_ipv6 = 1 ; //<S2SV> } else if ( cp && strchr ( cp + 1 , ':' ) ) { //<S2SV> is_ipv6 = 1 ; //<S2SV> addr_part = ip_as_string ; //<S2SV> port_part = NULL ; //<S2SV> } else if ( cp ) { //<S2SV> is_ipv6 = 0 ; //<S2SV> if ( cp - ip_as_string > ( int ) sizeof ( buf ) - 1 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memcpy ( buf , ip_as_string , cp - ip_as_string ) ; //<S2SV> buf [ cp - ip_as_string ] = '\\0' ; //<S2SV> addr_part = buf ; //<S2SV> port_part = cp + 1 ; //<S2SV> } else { //<S2SV> addr_part = ip_as_string ; //<S2SV> port_part = NULL ; //<S2SV> is_ipv6 = 0 ; //<S2SV> } //<S2SV> if ( port_part == NULL ) { //<S2SV> port = 0 ; //<S2SV> } else { //<S2SV> port = atoi ( port_part ) ; //<S2SV> if ( port <= 0 || port > 65535 ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! addr_part ) //<S2SV> return - 1 ; //<S2SV> # ifdef AF_INET6 //<S2SV> if ( is_ipv6 ) //<S2SV> { //<S2SV> struct sockaddr_in6 sin6 ; //<S2SV> memset ( & sin6 , 0 , sizeof ( sin6 ) ) ; //<S2SV> # ifdef EVENT__HAVE_STRUCT_SOCKADDR_IN6_SIN6_LEN //<S2SV> sin6 . sin6_len = sizeof ( sin6 ) ; //<S2SV> # endif //<S2SV> sin6 . sin6_family = AF_INET6 ; //<S2SV> sin6 . sin6_port = htons ( port ) ; //<S2SV> if ( 1 != evutil_inet_pton ( AF_INET6 , addr_part , & sin6 . sin6_addr ) ) //<S2SV> return - 1 ; //<S2SV> if ( ( int ) sizeof ( sin6 ) > * outlen ) //<S2SV> return - 1 ; //<S2SV> memset ( out , 0 , * outlen ) ; //<S2SV> memcpy ( out , & sin6 , sizeof ( sin6 ) ) ; //<S2SV> * outlen = sizeof ( sin6 ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> else //<S2SV> # endif //<S2SV> { //<S2SV> struct sockaddr_in sin ; //<S2SV> memset ( & sin , 0 , sizeof ( sin ) ) ; //<S2SV> # ifdef EVENT__HAVE_STRUCT_SOCKADDR_IN_SIN_LEN //<S2SV> sin . sin_len = sizeof ( sin ) ; //<S2SV> # endif //<S2SV> sin . sin_family = AF_INET ; //<S2SV> sin . sin_port = htons ( port ) ; //<S2SV> if ( 1 != evutil_inet_pton ( AF_INET , addr_part , & sin . sin_addr ) ) //<S2SV> return - 1 ; //<S2SV> if ( ( int ) sizeof ( sin ) > * outlen ) //<S2SV> return - 1 ; //<S2SV> memset ( out , 0 , * outlen ) ; //<S2SV> memcpy ( out , & sin , sizeof ( sin ) ) ; //<S2SV> * outlen = sizeof ( sin ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> 