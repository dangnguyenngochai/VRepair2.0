static int uhid_event ( btif_hh_device_t * p_dev ) //<S2SV> { //<S2SV> struct uhid_event ev ; //<S2SV> ssize_t ret ; //<S2SV> memset ( & ev , 0 , sizeof ( ev ) ) ; //<S2SV> if ( ! p_dev ) //<S2SV> { //<S2SV> APPL_TRACE_ERROR ( "%s:<S2SV_blank>Device<S2SV_blank>not<S2SV_blank>found" , __FUNCTION__ ) //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ret = TEMP_FAILURE_RETRY ( read ( p_dev -> fd , & ev , sizeof ( ev ) ) ) ; //<S2SV> if ( ret == 0 ) { //<S2SV> APPL_TRACE_ERROR ( "%s:<S2SV_blank>Read<S2SV_blank>HUP<S2SV_blank>on<S2SV_blank>uhid-cdev<S2SV_blank>%s" , __FUNCTION__ , //<S2SV> strerror ( errno ) ) ; //<S2SV> return - EFAULT ; //<S2SV> } else if ( ret < 0 ) { //<S2SV> APPL_TRACE_ERROR ( "%s:<S2SV_blank>Cannot<S2SV_blank>read<S2SV_blank>uhid-cdev:<S2SV_blank>%s" , __FUNCTION__ , //<S2SV> strerror ( errno ) ) ; //<S2SV> return - errno ; //<S2SV> } else if ( ( ev . type == UHID_OUTPUT ) || ( ev . type == UHID_OUTPUT_EV ) ) { //<S2SV> if ( ret < ( ssize_t ) sizeof ( ev ) ) { //<S2SV> APPL_TRACE_ERROR ( "%s:<S2SV_blank>Invalid<S2SV_blank>size<S2SV_blank>read<S2SV_blank>from<S2SV_blank>uhid-dev:<S2SV_blank>%ld<S2SV_blank>!=<S2SV_blank>%lu" , //<S2SV> __FUNCTION__ , ret , sizeof ( ev . type ) ) ; //<S2SV> return - EFAULT ; //<S2SV> } //<S2SV> } //<S2SV> switch ( ev . type ) { //<S2SV> case UHID_START : //<S2SV> APPL_TRACE_DEBUG ( "UHID_START<S2SV_blank>from<S2SV_blank>uhid-dev\\n" ) ; //<S2SV> p_dev -> ready_for_data = TRUE ; //<S2SV> break ; //<S2SV> case UHID_STOP : //<S2SV> APPL_TRACE_DEBUG ( "UHID_STOP<S2SV_blank>from<S2SV_blank>uhid-dev\\n" ) ; //<S2SV> p_dev -> ready_for_data = FALSE ; //<S2SV> break ; //<S2SV> case UHID_OPEN : //<S2SV> APPL_TRACE_DEBUG ( "UHID_OPEN<S2SV_blank>from<S2SV_blank>uhid-dev\\n" ) ; //<S2SV> break ; //<S2SV> case UHID_CLOSE : //<S2SV> APPL_TRACE_DEBUG ( "UHID_CLOSE<S2SV_blank>from<S2SV_blank>uhid-dev\\n" ) ; //<S2SV> p_dev -> ready_for_data = FALSE ; //<S2SV> break ; //<S2SV> case UHID_OUTPUT : //<S2SV> if ( ret < ( ssize_t ) ( sizeof ( ev . type ) + sizeof ( ev . u . output ) ) ) { //<S2SV> APPL_TRACE_ERROR ( "%s:<S2SV_blank>Invalid<S2SV_blank>size<S2SV_blank>read<S2SV_blank>from<S2SV_blank>uhid-dev:<S2SV_blank>%zd<S2SV_blank><<S2SV_blank>%zu" , //<S2SV> __FUNCTION__ , ret , //<S2SV> sizeof ( ev . type ) + sizeof ( ev . u . output ) ) ; //<S2SV> return - EFAULT ; //<S2SV> } //<S2SV> APPL_TRACE_DEBUG ( "UHID_OUTPUT:<S2SV_blank>Report<S2SV_blank>type<S2SV_blank>=<S2SV_blank>%d,<S2SV_blank>report_size<S2SV_blank>=<S2SV_blank>%d" //<S2SV> , ev . u . output . rtype , ev . u . output . size ) ; //<S2SV> if ( ev . u . output . rtype == UHID_FEATURE_REPORT ) //<S2SV> btif_hh_setreport ( p_dev , BTHH_FEATURE_REPORT , //<S2SV> ev . u . output . size , ev . u . output . data ) ; //<S2SV> else if ( ev . u . output . rtype == UHID_OUTPUT_REPORT ) //<S2SV> btif_hh_setreport ( p_dev , BTHH_OUTPUT_REPORT , //<S2SV> ev . u . output . size , ev . u . output . data ) ; //<S2SV> else //<S2SV> btif_hh_setreport ( p_dev , BTHH_INPUT_REPORT , //<S2SV> ev . u . output . size , ev . u . output . data ) ; //<S2SV> break ; //<S2SV> case UHID_OUTPUT_EV : //<S2SV> APPL_TRACE_DEBUG ( "UHID_OUTPUT_EV<S2SV_blank>from<S2SV_blank>uhid-dev\\n" ) ; //<S2SV> break ; //<S2SV> case UHID_FEATURE : //<S2SV> APPL_TRACE_DEBUG ( "UHID_FEATURE<S2SV_blank>from<S2SV_blank>uhid-dev\\n" ) ; //<S2SV> break ; //<S2SV> case UHID_FEATURE_ANSWER : //<S2SV> APPL_TRACE_DEBUG ( "UHID_FEATURE_ANSWER<S2SV_blank>from<S2SV_blank>uhid-dev\\n" ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> APPL_TRACE_DEBUG ( "Invalid<S2SV_blank>event<S2SV_blank>from<S2SV_blank>uhid-dev:<S2SV_blank>%u\\n" , ev . type ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 