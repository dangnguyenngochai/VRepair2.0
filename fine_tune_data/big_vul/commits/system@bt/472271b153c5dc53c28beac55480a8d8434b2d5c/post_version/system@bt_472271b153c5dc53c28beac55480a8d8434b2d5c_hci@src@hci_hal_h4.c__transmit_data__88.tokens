static uint16_t transmit_data ( serial_data_type_t type , uint8_t * data , uint16_t length ) { //<S2SV> assert ( data != NULL ) ; //<S2SV> assert ( length > 0 ) ; //<S2SV> if ( type < DATA_TYPE_COMMAND || type > DATA_TYPE_SCO ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>invalid<S2SV_blank>data<S2SV_blank>type:<S2SV_blank>%d" , __func__ , type ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> -- data ; //<S2SV> uint8_t previous_byte = * data ; //<S2SV> * ( data ) = type ; //<S2SV> ++ length ; //<S2SV> uint16_t transmitted_length = 0 ; //<S2SV> while ( length > 0 ) { //<S2SV> ssize_t ret = TEMP_FAILURE_RETRY ( write ( uart_fd , data + transmitted_length , length ) ) ; //<S2SV> switch ( ret ) { //<S2SV> case - 1 : //<S2SV> LOG_ERROR ( "In<S2SV_blank>%s,<S2SV_blank>error<S2SV_blank>writing<S2SV_blank>to<S2SV_blank>the<S2SV_blank>uart<S2SV_blank>serial<S2SV_blank>port:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> goto done ; //<S2SV> case 0 : //<S2SV> goto done ; //<S2SV> default : //<S2SV> transmitted_length += ret ; //<S2SV> length -= ret ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> done : ; //<S2SV> * ( data ) = previous_byte ; //<S2SV> if ( transmitted_length > 0 ) //<S2SV> -- transmitted_length ; //<S2SV> return transmitted_length ; //<S2SV> } //<S2SV> 