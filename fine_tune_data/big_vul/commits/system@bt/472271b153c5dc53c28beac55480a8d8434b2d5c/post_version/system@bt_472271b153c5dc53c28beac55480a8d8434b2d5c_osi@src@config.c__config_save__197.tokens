bool config_save ( const config_t * config , const char * filename ) { //<S2SV> assert ( config != NULL ) ; //<S2SV> assert ( filename != NULL ) ; //<S2SV> assert ( * filename != '\\0' ) ; //<S2SV> int dir_fd = - 1 ; //<S2SV> FILE * fp = NULL ; //<S2SV> static const char * temp_file_ext = ".new" ; //<S2SV> const int filename_len = strlen ( filename ) ; //<S2SV> const int temp_filename_len = filename_len + strlen ( temp_file_ext ) + 1 ; //<S2SV> char * temp_filename = osi_calloc ( temp_filename_len ) ; //<S2SV> snprintf ( temp_filename , temp_filename_len , "%s%s" , filename , temp_file_ext ) ; //<S2SV> char * temp_dirname = osi_strdup ( filename ) ; //<S2SV> const char * directoryname = dirname ( temp_dirname ) ; //<S2SV> if ( ! directoryname ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>error<S2SV_blank>extracting<S2SV_blank>directory<S2SV_blank>from<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> dir_fd = TEMP_FAILURE_RETRY ( open ( directoryname , O_RDONLY ) ) ; //<S2SV> if ( dir_fd < 0 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , directoryname , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> fp = fopen ( temp_filename , "wt" ) ; //<S2SV> if ( ! fp ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> for ( const list_node_t * node = list_begin ( config -> sections ) ; node != list_end ( config -> sections ) ; node = list_next ( node ) ) { //<S2SV> const section_t * section = ( const section_t * ) list_node ( node ) ; //<S2SV> if ( fprintf ( fp , "[%s]\\n" , section -> name ) < 0 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode != list_end ( section -> entries ) ; enode = list_next ( enode ) ) { //<S2SV> const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; //<S2SV> if ( fprintf ( fp , "%s<S2SV_blank>=<S2SV_blank>%s\\n" , entry -> key , entry -> value ) < 0 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> } //<S2SV> if ( list_next ( node ) != list_end ( config -> sections ) ) { //<S2SV> if ( fputc ( '\\n' , fp ) == EOF ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( fsync ( fileno ( fp ) ) < 0 ) { //<S2SV> LOG_WARN ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; //<S2SV> } //<S2SV> if ( fclose ( fp ) == EOF ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> fp = NULL ; //<S2SV> if ( chmod ( temp_filename , S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>change<S2SV_blank>file<S2SV_blank>permissions<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( rename ( temp_filename , filename ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>commit<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( fsync ( dir_fd ) < 0 ) { //<S2SV> LOG_WARN ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , directoryname , strerror ( errno ) ) ; //<S2SV> } //<S2SV> if ( close ( dir_fd ) < 0 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , directoryname , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> osi_free ( temp_filename ) ; //<S2SV> osi_free ( temp_dirname ) ; //<S2SV> return true ; //<S2SV> error : //<S2SV> unlink ( temp_filename ) ; //<S2SV> if ( fp ) //<S2SV> fclose ( fp ) ; //<S2SV> if ( dir_fd != - 1 ) //<S2SV> close ( dir_fd ) ; //<S2SV> osi_free ( temp_filename ) ; //<S2SV> osi_free ( temp_dirname ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> 