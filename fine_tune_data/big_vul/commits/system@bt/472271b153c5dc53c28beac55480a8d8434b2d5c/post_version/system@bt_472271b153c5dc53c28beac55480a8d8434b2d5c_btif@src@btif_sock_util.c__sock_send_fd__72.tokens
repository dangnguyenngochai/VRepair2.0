int sock_send_fd ( int sock_fd , const uint8_t * buf , int len , int send_fd ) //<S2SV> { //<S2SV> ssize_t ret ; //<S2SV> struct msghdr msg ; //<S2SV> unsigned char * buffer = ( unsigned char * ) buf ; //<S2SV> memset ( & msg , 0 , sizeof ( msg ) ) ; //<S2SV> struct cmsghdr * cmsg ; //<S2SV> char msgbuf [ CMSG_SPACE ( 1 ) ] ; //<S2SV> asrt ( send_fd != - 1 ) ; //<S2SV> if ( sock_fd == - 1 || send_fd == - 1 ) //<S2SV> return - 1 ; //<S2SV> msg . msg_control = msgbuf ; //<S2SV> msg . msg_controllen = sizeof msgbuf ; //<S2SV> cmsg = CMSG_FIRSTHDR ( & msg ) ; //<S2SV> cmsg -> cmsg_level = SOL_SOCKET ; //<S2SV> cmsg -> cmsg_type = SCM_RIGHTS ; //<S2SV> cmsg -> cmsg_len = CMSG_LEN ( sizeof send_fd ) ; //<S2SV> memcpy ( CMSG_DATA ( cmsg ) , & send_fd , sizeof send_fd ) ; //<S2SV> int ret_len = len ; //<S2SV> while ( len > 0 ) { //<S2SV> struct iovec iv ; //<S2SV> memset ( & iv , 0 , sizeof ( iv ) ) ; //<S2SV> iv . iov_base = buffer ; //<S2SV> iv . iov_len = len ; //<S2SV> msg . msg_iov = & iv ; //<S2SV> msg . msg_iovlen = 1 ; //<S2SV> do { //<S2SV> ret = TEMP_FAILURE_RETRY ( sendmsg ( sock_fd , & msg , MSG_NOSIGNAL ) ) ; //<S2SV> } while ( ret < 0 && errno == EINTR ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> BTIF_TRACE_ERROR ( "fd:%d,<S2SV_blank>send_fd:%d,<S2SV_blank>sendmsg<S2SV_blank>ret:%d,<S2SV_blank>errno:%d,<S2SV_blank>%s" , //<S2SV> sock_fd , send_fd , ( int ) ret , errno , strerror ( errno ) ) ; //<S2SV> ret_len = - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> buffer += ret ; //<S2SV> len -= ret ; //<S2SV> memset ( & msg , 0 , sizeof ( msg ) ) ; //<S2SV> } //<S2SV> BTIF_TRACE_DEBUG ( "close<S2SV_blank>fd:%d<S2SV_blank>after<S2SV_blank>sent" , send_fd ) ; //<S2SV> close ( send_fd ) ; //<S2SV> return ret_len ; //<S2SV> } //<S2SV> 