static void * btif_hl_select_thread ( void * arg ) { //<S2SV> fd_set org_set , curr_set ; //<S2SV> int r , max_curr_s , max_org_s ; //<S2SV> UNUSED ( arg ) ; //<S2SV> BTIF_TRACE_DEBUG ( "entered<S2SV_blank>btif_hl_select_thread" ) ; //<S2SV> FD_ZERO ( & org_set ) ; //<S2SV> max_org_s = btif_hl_select_wakeup_init ( & org_set ) ; //<S2SV> BTIF_TRACE_DEBUG ( "max_s=%d<S2SV_blank>" , max_org_s ) ; //<S2SV> for ( ; ; ) //<S2SV> { //<S2SV> r = 0 ; //<S2SV> BTIF_TRACE_DEBUG ( "set<S2SV_blank>curr_set<S2SV_blank>=<S2SV_blank>org_set<S2SV_blank>" ) ; //<S2SV> curr_set = org_set ; //<S2SV> max_curr_s = max_org_s ; //<S2SV> int ret = TEMP_FAILURE_RETRY ( select ( ( max_curr_s + 1 ) , & curr_set , NULL , NULL , NULL ) ) ; //<S2SV> BTIF_TRACE_DEBUG ( "select<S2SV_blank>unblocked<S2SV_blank>ret=%d" , ret ) ; //<S2SV> if ( ret == - 1 ) //<S2SV> { //<S2SV> BTIF_TRACE_DEBUG ( "select()<S2SV_blank>ret<S2SV_blank>-1,<S2SV_blank>exit<S2SV_blank>the<S2SV_blank>thread" ) ; //<S2SV> btif_hl_thread_cleanup ( ) ; //<S2SV> select_thread_id = - 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> else if ( ret ) //<S2SV> { //<S2SV> BTIF_TRACE_DEBUG ( "btif_hl_select_wake_signaled,<S2SV_blank>signal<S2SV_blank>ret=%d" , ret ) ; //<S2SV> if ( btif_hl_select_wake_signaled ( & curr_set ) ) //<S2SV> { //<S2SV> r = btif_hl_select_wake_reset ( ) ; //<S2SV> BTIF_TRACE_DEBUG ( "btif_hl_select_wake_signaled,<S2SV_blank>signal:%d" , r ) ; //<S2SV> if ( r == btif_hl_signal_select_wakeup || r == btif_hl_signal_select_close_connected ) //<S2SV> { //<S2SV> btif_hl_select_wakeup_callback ( & org_set , r ) ; //<S2SV> } //<S2SV> else if ( r == btif_hl_signal_select_exit ) //<S2SV> { //<S2SV> btif_hl_thread_cleanup ( ) ; //<S2SV> BTIF_TRACE_DEBUG ( "Exit<S2SV_blank>hl_select_thread<S2SV_blank>for<S2SV_blank>btif_hl_signal_select_exit" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> btif_hl_select_monitor_callback ( & curr_set , & org_set ) ; //<S2SV> max_org_s = btif_hl_update_maxfd ( max_org_s ) ; //<S2SV> } //<S2SV> else //<S2SV> BTIF_TRACE_DEBUG ( "no<S2SV_blank>data,<S2SV_blank>select<S2SV_blank>ret:<S2SV_blank>%d\\n" , ret ) ; //<S2SV> } //<S2SV> BTIF_TRACE_DEBUG ( "leaving<S2SV_blank>hl_select_thread" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 