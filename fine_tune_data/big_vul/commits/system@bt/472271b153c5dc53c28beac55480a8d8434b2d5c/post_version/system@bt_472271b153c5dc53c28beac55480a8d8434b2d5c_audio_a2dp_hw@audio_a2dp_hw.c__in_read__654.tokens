static ssize_t in_read ( struct audio_stream_in * stream , void * buffer , //<S2SV> size_t bytes ) //<S2SV> { //<S2SV> struct a2dp_stream_in * in = ( struct a2dp_stream_in * ) stream ; //<S2SV> int read ; //<S2SV> DEBUG ( "read<S2SV_blank>%zu<S2SV_blank>bytes,<S2SV_blank>state:<S2SV_blank>%d" , bytes , in -> common . state ) ; //<S2SV> if ( in -> common . state == AUDIO_A2DP_STATE_SUSPENDED ) //<S2SV> { //<S2SV> DEBUG ( "stream<S2SV_blank>suspended" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ( in -> common . state == AUDIO_A2DP_STATE_STOPPED ) || //<S2SV> ( in -> common . state == AUDIO_A2DP_STATE_STANDBY ) ) //<S2SV> { //<S2SV> pthread_mutex_lock ( & in -> common . lock ) ; //<S2SV> if ( start_audio_datapath ( & in -> common ) < 0 ) //<S2SV> { //<S2SV> int us_delay = calc_audiotime ( in -> common . cfg , bytes ) ; //<S2SV> DEBUG ( "emulate<S2SV_blank>a2dp<S2SV_blank>read<S2SV_blank>delay<S2SV_blank>(%d<S2SV_blank>us)" , us_delay ) ; //<S2SV> TEMP_FAILURE_RETRY ( usleep ( us_delay ) ) ; //<S2SV> pthread_mutex_unlock ( & in -> common . lock ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> pthread_mutex_unlock ( & in -> common . lock ) ; //<S2SV> } //<S2SV> else if ( in -> common . state != AUDIO_A2DP_STATE_STARTED ) //<S2SV> { //<S2SV> ERROR ( "stream<S2SV_blank>not<S2SV_blank>in<S2SV_blank>stopped<S2SV_blank>or<S2SV_blank>standby" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> read = skt_read ( in -> common . audio_fd , buffer , bytes ) ; //<S2SV> if ( read == - 1 ) //<S2SV> { //<S2SV> skt_disconnect ( in -> common . audio_fd ) ; //<S2SV> in -> common . audio_fd = AUDIO_SKT_DISCONNECTED ; //<S2SV> in -> common . state = AUDIO_A2DP_STATE_STOPPED ; //<S2SV> } else if ( read == 0 ) { //<S2SV> DEBUG ( "read<S2SV_blank>time<S2SV_blank>out<S2SV_blank>-<S2SV_blank>return<S2SV_blank>zeros" ) ; //<S2SV> memset ( buffer , 0 , bytes ) ; //<S2SV> read = bytes ; //<S2SV> } //<S2SV> DEBUG ( "read<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>out<S2SV_blank>of<S2SV_blank>%zu<S2SV_blank>bytes" , read , bytes ) ; //<S2SV> return read ; //<S2SV> } //<S2SV> 