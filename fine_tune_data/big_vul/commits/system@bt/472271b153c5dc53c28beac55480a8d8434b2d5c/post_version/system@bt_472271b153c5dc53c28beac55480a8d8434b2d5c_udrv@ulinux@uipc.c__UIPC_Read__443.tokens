UINT32 UIPC_Read ( tUIPC_CH_ID ch_id , UINT16 * p_msg_evt , UINT8 * p_buf , UINT32 len ) //<S2SV> { //<S2SV> int n ; //<S2SV> int n_read = 0 ; //<S2SV> int fd = uipc_main . ch [ ch_id ] . fd ; //<S2SV> struct pollfd pfd ; //<S2SV> UNUSED ( p_msg_evt ) ; //<S2SV> if ( ch_id >= UIPC_CH_NUM ) //<S2SV> { //<S2SV> BTIF_TRACE_ERROR ( "UIPC_Read<S2SV_blank>:<S2SV_blank>invalid<S2SV_blank>ch<S2SV_blank>id<S2SV_blank>%d" , ch_id ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( fd == UIPC_DISCONNECTED ) //<S2SV> { //<S2SV> BTIF_TRACE_ERROR ( "UIPC_Read<S2SV_blank>:<S2SV_blank>channel<S2SV_blank>%d<S2SV_blank>closed" , ch_id ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> while ( n_read < ( int ) len ) //<S2SV> { //<S2SV> pfd . fd = fd ; //<S2SV> pfd . events = POLLIN | POLLHUP ; //<S2SV> if ( TEMP_FAILURE_RETRY ( poll ( & pfd , 1 , uipc_main . ch [ ch_id ] . read_poll_tmo_ms ) ) == 0 ) //<S2SV> { //<S2SV> BTIF_TRACE_EVENT ( "poll<S2SV_blank>timeout<S2SV_blank>(%d<S2SV_blank>ms)" , uipc_main . ch [ ch_id ] . read_poll_tmo_ms ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( pfd . revents & ( POLLHUP | POLLNVAL ) ) //<S2SV> { //<S2SV> BTIF_TRACE_EVENT ( "poll<S2SV_blank>:<S2SV_blank>channel<S2SV_blank>detached<S2SV_blank>remotely" ) ; //<S2SV> UIPC_LOCK ( ) ; //<S2SV> uipc_close_locked ( ch_id ) ; //<S2SV> UIPC_UNLOCK ( ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> n = TEMP_FAILURE_RETRY ( recv ( fd , p_buf + n_read , len - n_read , 0 ) ) ; //<S2SV> if ( n == 0 ) //<S2SV> { //<S2SV> BTIF_TRACE_EVENT ( "UIPC_Read<S2SV_blank>:<S2SV_blank>channel<S2SV_blank>detached<S2SV_blank>remotely" ) ; //<S2SV> UIPC_LOCK ( ) ; //<S2SV> uipc_close_locked ( ch_id ) ; //<S2SV> UIPC_UNLOCK ( ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( n < 0 ) //<S2SV> { //<S2SV> BTIF_TRACE_EVENT ( "UIPC_Read<S2SV_blank>:<S2SV_blank>read<S2SV_blank>failed<S2SV_blank>(%s)" , strerror ( errno ) ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> n_read += n ; //<S2SV> } //<S2SV> return n_read ; //<S2SV> } //<S2SV> 