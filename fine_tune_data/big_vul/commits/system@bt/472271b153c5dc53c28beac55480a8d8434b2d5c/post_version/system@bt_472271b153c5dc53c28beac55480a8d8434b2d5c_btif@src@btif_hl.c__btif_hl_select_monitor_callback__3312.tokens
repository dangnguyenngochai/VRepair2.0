void btif_hl_select_monitor_callback ( fd_set * p_cur_set , fd_set * p_org_set ) { //<S2SV> UNUSED ( p_org_set ) ; //<S2SV> BTIF_TRACE_DEBUG ( "entering<S2SV_blank>%s" , __FUNCTION__ ) ; //<S2SV> for ( const list_node_t * node = list_begin ( soc_queue ) ; //<S2SV> node != list_end ( soc_queue ) ; node = list_next ( node ) ) { //<S2SV> btif_hl_soc_cb_t * p_scb = list_node ( node ) ; //<S2SV> if ( btif_hl_get_socket_state ( p_scb ) == BTIF_HL_SOC_STATE_W4_READ ) { //<S2SV> if ( FD_ISSET ( p_scb -> socket_id [ 1 ] , p_cur_set ) ) { //<S2SV> BTIF_TRACE_DEBUG ( "read<S2SV_blank>data<S2SV_blank>state=<S2SV_blank>BTIF_HL_SOC_STATE_W4_READ" ) ; //<S2SV> btif_hl_mdl_cb_t * p_dcb = BTIF_HL_GET_MDL_CB_PTR ( p_scb -> app_idx , //<S2SV> p_scb -> mcl_idx , p_scb -> mdl_idx ) ; //<S2SV> assert ( p_dcb != NULL ) ; //<S2SV> if ( p_dcb -> p_tx_pkt ) { //<S2SV> BTIF_TRACE_ERROR ( "Rcv<S2SV_blank>new<S2SV_blank>pkt<S2SV_blank>but<S2SV_blank>the<S2SV_blank>last<S2SV_blank>pkt<S2SV_blank>is<S2SV_blank>still<S2SV_blank>not<S2SV_blank>been" //<S2SV> "<S2SV_blank><S2SV_blank>sent<S2SV_blank>tx_size=%d" , p_dcb -> tx_size ) ; //<S2SV> btif_hl_free_buf ( ( void * * ) & p_dcb -> p_tx_pkt ) ; //<S2SV> } //<S2SV> p_dcb -> p_tx_pkt = btif_hl_get_buf ( p_dcb -> mtu ) ; //<S2SV> if ( p_dcb ) { //<S2SV> int r = ( int ) TEMP_FAILURE_RETRY ( recv ( p_scb -> socket_id [ 1 ] , p_dcb -> p_tx_pkt , //<S2SV> p_dcb -> mtu , MSG_DONTWAIT ) ) ; //<S2SV> if ( r > 0 ) { //<S2SV> BTIF_TRACE_DEBUG ( "btif_hl_select_monitor_callback<S2SV_blank>send<S2SV_blank>data<S2SV_blank>r<S2SV_blank>=%d" , r ) ; //<S2SV> p_dcb -> tx_size = r ; //<S2SV> BTIF_TRACE_DEBUG ( "btif_hl_select_monitor_callback<S2SV_blank>send<S2SV_blank>data<S2SV_blank>tx_size=%d" , p_dcb -> tx_size ) ; //<S2SV> BTA_HlSendData ( p_dcb -> mdl_handle , p_dcb -> tx_size ) ; //<S2SV> } else { //<S2SV> BTIF_TRACE_DEBUG ( "btif_hl_select_monitor_callback<S2SV_blank>receive<S2SV_blank>failed<S2SV_blank>r=%d" , r ) ; //<S2SV> BTA_HlDchClose ( p_dcb -> mdl_handle ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( list_is_empty ( soc_queue ) ) //<S2SV> BTIF_TRACE_DEBUG ( "btif_hl_select_monitor_queue<S2SV_blank>is<S2SV_blank>empty" ) ; //<S2SV> BTIF_TRACE_DEBUG ( "leaving<S2SV_blank>%s" , __FUNCTION__ ) ; //<S2SV> } //<S2SV> 