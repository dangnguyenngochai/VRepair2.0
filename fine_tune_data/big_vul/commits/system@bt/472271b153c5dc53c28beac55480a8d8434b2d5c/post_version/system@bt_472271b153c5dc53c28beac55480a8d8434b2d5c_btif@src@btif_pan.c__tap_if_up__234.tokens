static int tap_if_up ( const char * devname , const bt_bdaddr_t * addr ) //<S2SV> { //<S2SV> struct ifreq ifr ; //<S2SV> int sk , err ; //<S2SV> sk = socket ( AF_INET , SOCK_DGRAM , 0 ) ; //<S2SV> if ( sk < 0 ) //<S2SV> return - 1 ; //<S2SV> memset ( & ifr , 0 , sizeof ( ifr ) ) ; //<S2SV> strncpy ( ifr . ifr_name , devname , IFNAMSIZ - 1 ) ; //<S2SV> err = TEMP_FAILURE_RETRY ( ioctl ( sk , SIOCGIFHWADDR , & ifr ) ) ; //<S2SV> if ( err < 0 ) //<S2SV> { //<S2SV> BTIF_TRACE_ERROR ( "Could<S2SV_blank>not<S2SV_blank>get<S2SV_blank>network<S2SV_blank>hardware<S2SV_blank>for<S2SV_blank>interface:%s,<S2SV_blank>errno:%s" , devname , strerror ( errno ) ) ; //<S2SV> close ( sk ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> strncpy ( ifr . ifr_name , devname , IFNAMSIZ - 1 ) ; //<S2SV> memcpy ( ifr . ifr_hwaddr . sa_data , addr -> address , 6 ) ; //<S2SV> if ( ifr . ifr_hwaddr . sa_data [ 0 ] & 0x01 ) { //<S2SV> BTIF_TRACE_WARNING ( "Not<S2SV_blank>a<S2SV_blank>unicast<S2SV_blank>MAC<S2SV_blank>address,<S2SV_blank>force<S2SV_blank>multicast<S2SV_blank>bit<S2SV_blank>flipping" ) ; //<S2SV> ifr . ifr_hwaddr . sa_data [ 0 ] &= ~ 0x01 ; //<S2SV> } //<S2SV> err = TEMP_FAILURE_RETRY ( ioctl ( sk , SIOCSIFHWADDR , ( caddr_t ) & ifr ) ) ; //<S2SV> if ( err < 0 ) { //<S2SV> BTIF_TRACE_ERROR ( "Could<S2SV_blank>not<S2SV_blank>set<S2SV_blank>bt<S2SV_blank>address<S2SV_blank>for<S2SV_blank>interface:%s,<S2SV_blank>errno:%s" , devname , strerror ( errno ) ) ; //<S2SV> close ( sk ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memset ( & ifr , 0 , sizeof ( ifr ) ) ; //<S2SV> strncpy ( ifr . ifr_name , devname , IF_NAMESIZE - 1 ) ; //<S2SV> ifr . ifr_flags |= IFF_UP ; //<S2SV> ifr . ifr_flags |= IFF_MULTICAST ; //<S2SV> err = TEMP_FAILURE_RETRY ( ioctl ( sk , SIOCSIFFLAGS , ( caddr_t ) & ifr ) ) ; //<S2SV> if ( err < 0 ) { //<S2SV> BTIF_TRACE_ERROR ( "Could<S2SV_blank>not<S2SV_blank>bring<S2SV_blank>up<S2SV_blank>network<S2SV_blank>interface:%s,<S2SV_blank>errno:%d" , devname , errno ) ; //<S2SV> close ( sk ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> close ( sk ) ; //<S2SV> BTIF_TRACE_DEBUG ( "network<S2SV_blank>interface:<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>up" , devname ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 