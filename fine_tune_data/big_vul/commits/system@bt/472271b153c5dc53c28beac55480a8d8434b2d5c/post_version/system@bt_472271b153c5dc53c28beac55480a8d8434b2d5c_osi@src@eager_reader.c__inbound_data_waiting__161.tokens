static void inbound_data_waiting ( void * context ) { //<S2SV> eager_reader_t * reader = ( eager_reader_t * ) context ; //<S2SV> data_buffer_t * buffer = ( data_buffer_t * ) reader -> allocator -> alloc ( reader -> buffer_size + sizeof ( data_buffer_t ) ) ; //<S2SV> if ( ! buffer ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>couldn\'t<S2SV_blank>aquire<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>inbound<S2SV_blank>data<S2SV_blank>buffer." , __func__ ) ; //<S2SV> return ; //<S2SV> } //<S2SV> buffer -> length = 0 ; //<S2SV> buffer -> offset = 0 ; //<S2SV> int bytes_read = TEMP_FAILURE_RETRY ( read ( reader -> inbound_fd , buffer -> data , reader -> buffer_size ) ) ; //<S2SV> if ( bytes_read > 0 ) { //<S2SV> buffer -> length = bytes_read ; //<S2SV> fixed_queue_enqueue ( reader -> buffers , buffer ) ; //<S2SV> eventfd_write ( reader -> bytes_available_fd , bytes_read ) ; //<S2SV> } else { //<S2SV> if ( bytes_read == 0 ) //<S2SV> LOG_WARN ( "%s<S2SV_blank>fd<S2SV_blank>said<S2SV_blank>bytes<S2SV_blank>existed,<S2SV_blank>but<S2SV_blank>none<S2SV_blank>were<S2SV_blank>found." , __func__ ) ; //<S2SV> else //<S2SV> LOG_WARN ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>read<S2SV_blank>from<S2SV_blank>file<S2SV_blank>descriptor:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> reader -> allocator -> free ( buffer ) ; //<S2SV> } //<S2SV> } //<S2SV> 