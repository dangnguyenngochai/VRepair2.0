static void * btif_hh_poll_event_thread ( void * arg ) //<S2SV> { //<S2SV> btif_hh_device_t * p_dev = arg ; //<S2SV> APPL_TRACE_DEBUG ( "%s:<S2SV_blank>Thread<S2SV_blank>created<S2SV_blank>fd<S2SV_blank>=<S2SV_blank>%d" , __FUNCTION__ , p_dev -> fd ) ; //<S2SV> struct pollfd pfds [ 1 ] ; //<S2SV> int ret ; //<S2SV> pfds [ 0 ] . fd = p_dev -> fd ; //<S2SV> pfds [ 0 ] . events = POLLIN ; //<S2SV> uhid_set_non_blocking ( p_dev -> fd ) ; //<S2SV> while ( p_dev -> hh_keep_polling ) { //<S2SV> ret = TEMP_FAILURE_RETRY ( poll ( pfds , 1 , 50 ) ) ; //<S2SV> if ( ret < 0 ) { //<S2SV> APPL_TRACE_ERROR ( "%s:<S2SV_blank>Cannot<S2SV_blank>poll<S2SV_blank>for<S2SV_blank>fds:<S2SV_blank>%s\\n" , __FUNCTION__ , strerror ( errno ) ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( pfds [ 0 ] . revents & POLLIN ) { //<S2SV> APPL_TRACE_DEBUG ( "btif_hh_poll_event_thread:<S2SV_blank>POLLIN" ) ; //<S2SV> ret = uhid_event ( p_dev ) ; //<S2SV> if ( ret ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> p_dev -> hh_poll_thread_id = - 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 