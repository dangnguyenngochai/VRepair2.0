bool semaphore_try_wait ( semaphore_t * semaphore ) { //<S2SV> assert ( semaphore != NULL ) ; //<S2SV> assert ( semaphore -> fd != INVALID_FD ) ; //<S2SV> int flags = fcntl ( semaphore -> fd , F_GETFL ) ; //<S2SV> if ( flags == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>get<S2SV_blank>flags<S2SV_blank>for<S2SV_blank>semaphore<S2SV_blank>fd:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> if ( fcntl ( semaphore -> fd , F_SETFL , flags | O_NONBLOCK ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>O_NONBLOCK<S2SV_blank>for<S2SV_blank>semaphore<S2SV_blank>fd:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> eventfd_t value ; //<S2SV> if ( eventfd_read ( semaphore -> fd , & value ) == - 1 ) //<S2SV> return false ; //<S2SV> if ( fcntl ( semaphore -> fd , F_SETFL , flags ) == - 1 ) //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>resetore<S2SV_blank>flags<S2SV_blank>for<S2SV_blank>semaphore<S2SV_blank>fd:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> return true ; //<S2SV> } //<S2SV> 