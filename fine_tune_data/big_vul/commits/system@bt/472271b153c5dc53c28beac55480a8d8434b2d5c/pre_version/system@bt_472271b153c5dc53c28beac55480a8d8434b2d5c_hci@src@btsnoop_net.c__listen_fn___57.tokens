static void * listen_fn_ ( UNUSED_ATTR void * context ) { //<S2SV> prctl ( PR_SET_NAME , ( unsigned long ) LISTEN_THREAD_NAME_ , 0 , 0 , 0 ) ; //<S2SV> listen_socket_ = socket ( AF_INET , SOCK_STREAM , IPPROTO_TCP ) ; //<S2SV> if ( listen_socket_ == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>socket<S2SV_blank>creation<S2SV_blank>failed:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> int enable = 1 ; //<S2SV> if ( setsockopt ( listen_socket_ , SOL_SOCKET , SO_REUSEADDR , & enable , sizeof ( enable ) ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>SO_REUSEADDR:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> struct sockaddr_in addr ; //<S2SV> addr . sin_family = AF_INET ; //<S2SV> addr . sin_addr . s_addr = htonl ( LOCALHOST_ ) ; //<S2SV> addr . sin_port = htons ( LISTEN_PORT_ ) ; //<S2SV> if ( bind ( listen_socket_ , ( struct sockaddr * ) & addr , sizeof ( addr ) ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>bind<S2SV_blank>listen<S2SV_blank>socket:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> if ( listen ( listen_socket_ , 10 ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>listen:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> goto cleanup ; //<S2SV> } //<S2SV> for ( ; ; ) { //<S2SV> int client_socket = accept ( listen_socket_ , NULL , NULL ) ; //<S2SV> if ( client_socket == - 1 ) { //<S2SV> if ( errno == EINVAL || errno == EBADF ) { //<S2SV> break ; //<S2SV> } //<S2SV> LOG_WARN ( "%s<S2SV_blank>error<S2SV_blank>accepting<S2SV_blank>socket:<S2SV_blank>%s" , __func__ , strerror ( errno ) ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> pthread_mutex_lock ( & client_socket_lock_ ) ; //<S2SV> safe_close_ ( & client_socket_ ) ; //<S2SV> client_socket_ = client_socket ; //<S2SV> send ( client_socket_ , "btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea" , 16 , 0 ) ; //<S2SV> pthread_mutex_unlock ( & client_socket_lock_ ) ; //<S2SV> } //<S2SV> cleanup : //<S2SV> safe_close_ ( & listen_socket_ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 