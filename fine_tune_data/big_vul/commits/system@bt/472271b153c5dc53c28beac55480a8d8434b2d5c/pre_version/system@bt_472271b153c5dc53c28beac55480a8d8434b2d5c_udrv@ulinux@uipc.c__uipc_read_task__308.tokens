static void uipc_read_task ( void * arg ) //<S2SV> { //<S2SV> int ch_id ; //<S2SV> int result ; //<S2SV> UNUSED ( arg ) ; //<S2SV> prctl ( PR_SET_NAME , ( unsigned long ) "uipc-main" , 0 , 0 , 0 ) ; //<S2SV> raise_priority_a2dp ( TASK_UIPC_READ ) ; //<S2SV> while ( uipc_main . running ) //<S2SV> { //<S2SV> uipc_main . read_set = uipc_main . active_set ; //<S2SV> result = select ( uipc_main . max_fd + 1 , & uipc_main . read_set , NULL , NULL , NULL ) ; //<S2SV> if ( result == 0 ) //<S2SV> { //<S2SV> BTIF_TRACE_EVENT ( "select<S2SV_blank>timeout" ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> else if ( result < 0 ) //<S2SV> { //<S2SV> BTIF_TRACE_EVENT ( "select<S2SV_blank>failed<S2SV_blank>%s" , strerror ( errno ) ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> UIPC_LOCK ( ) ; //<S2SV> uipc_check_interrupt_locked ( ) ; //<S2SV> uipc_check_task_flags_locked ( ) ; //<S2SV> uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; //<S2SV> for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) //<S2SV> { //<S2SV> if ( ch_id != UIPC_CH_ID_AV_AUDIO ) //<S2SV> uipc_check_fd_locked ( ch_id ) ; //<S2SV> } //<S2SV> UIPC_UNLOCK ( ) ; //<S2SV> } //<S2SV> BTIF_TRACE_EVENT ( "UIPC<S2SV_blank>READ<S2SV_blank>THREAD<S2SV_blank>EXITING" ) ; //<S2SV> uipc_main_cleanup ( ) ; //<S2SV> uipc_main . tid = 0 ; //<S2SV> BTIF_TRACE_EVENT ( "UIPC<S2SV_blank>READ<S2SV_blank>THREAD<S2SV_blank>DONE" ) ; //<S2SV> } //<S2SV> 