void btsock_rfc_signaled ( UNUSED_ATTR int fd , int flags , uint32_t user_id ) { //<S2SV> pthread_mutex_lock ( & slot_lock ) ; //<S2SV> rfc_slot_t * slot = find_rfc_slot_by_id ( user_id ) ; //<S2SV> if ( ! slot ) //<S2SV> goto out ; //<S2SV> bool need_close = false ; //<S2SV> if ( flags & SOCK_THREAD_FD_RD && ! slot -> f . server ) { //<S2SV> if ( slot -> f . connected ) { //<S2SV> int size = 0 ; //<S2SV> if ( ! ( flags & SOCK_THREAD_FD_EXCEPTION ) || ( ioctl ( slot -> fd , FIONREAD , & size ) == 0 && size ) ) //<S2SV> pthread_mutex_unlock ( & slot_lock ) ; //<S2SV> BTA_JvRfcommWrite ( slot -> rfc_handle , slot -> id ) ; //<S2SV> } else { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>socket<S2SV_blank>signaled<S2SV_blank>for<S2SV_blank>read<S2SV_blank>while<S2SV_blank>disconnected,<S2SV_blank>slot:<S2SV_blank>%d,<S2SV_blank>channel:<S2SV_blank>%d" , __func__ , slot -> id , slot -> scn ) ; //<S2SV> need_close = true ; //<S2SV> } //<S2SV> } //<S2SV> if ( flags & SOCK_THREAD_FD_WR ) { //<S2SV> if ( ! slot -> f . connected || ! flush_incoming_que_on_wr_signal ( slot ) ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>socket<S2SV_blank>signaled<S2SV_blank>for<S2SV_blank>write<S2SV_blank>while<S2SV_blank>disconnected<S2SV_blank>(or<S2SV_blank>write<S2SV_blank>failure),<S2SV_blank>slot:<S2SV_blank>%d,<S2SV_blank>channel:<S2SV_blank>%d" , __func__ , slot -> id , slot -> scn ) ; //<S2SV> need_close = true ; //<S2SV> } //<S2SV> } //<S2SV> if ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION ) ) { //<S2SV> int size = 0 ; //<S2SV> if ( need_close || ioctl ( slot -> fd , FIONREAD , & size ) != 0 || ! size ) //<S2SV> cleanup_rfc_slot ( slot ) ; //<S2SV> } //<S2SV> out : ; //<S2SV> pthread_mutex_unlock ( & slot_lock ) ; //<S2SV> } //<S2SV> 