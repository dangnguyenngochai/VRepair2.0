static void btif_fetch_local_bdaddr ( bt_bdaddr_t * local_addr ) //<S2SV> { //<S2SV> char val [ PROPERTY_VALUE_MAX ] = { 0 } ; //<S2SV> uint8_t valid_bda = FALSE ; //<S2SV> int val_size = 0 ; //<S2SV> const uint8_t null_bdaddr [ BD_ADDR_LEN ] = { 0 , 0 , 0 , 0 , 0 , 0 } ; //<S2SV> if ( property_get ( PROPERTY_BT_BDADDR_PATH , val , NULL ) ) //<S2SV> { //<S2SV> int addr_fd ; //<S2SV> BTIF_TRACE_DEBUG ( "%s,<S2SV_blank>local<S2SV_blank>bdaddr<S2SV_blank>is<S2SV_blank>stored<S2SV_blank>in<S2SV_blank>%s" , __func__ , val ) ; //<S2SV> if ( ( addr_fd = open ( val , O_RDONLY ) ) != - 1 ) //<S2SV> { //<S2SV> memset ( val , 0 , sizeof ( val ) ) ; //<S2SV> read ( addr_fd , val , FACTORY_BT_BDADDR_STORAGE_LEN ) ; //<S2SV> if ( ( string_to_bdaddr ( val , local_addr ) ) && //<S2SV> ( memcmp ( local_addr -> address , null_bdaddr , BD_ADDR_LEN ) != 0 ) ) //<S2SV> { //<S2SV> valid_bda = TRUE ; //<S2SV> BTIF_TRACE_DEBUG ( "%s:<S2SV_blank>Got<S2SV_blank>Factory<S2SV_blank>BDA<S2SV_blank>%s" , __func__ , val ) ; //<S2SV> } //<S2SV> close ( addr_fd ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! valid_bda ) //<S2SV> { //<S2SV> val_size = sizeof ( val ) ; //<S2SV> if ( btif_config_get_str ( "Adapter" , "Address" , val , & val_size ) ) //<S2SV> { //<S2SV> string_to_bdaddr ( val , local_addr ) ; //<S2SV> BTIF_TRACE_DEBUG ( "local<S2SV_blank>bdaddr<S2SV_blank>from<S2SV_blank>bt_config.xml<S2SV_blank>is<S2SV_blank><S2SV_blank>%s" , val ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! valid_bda ) { //<S2SV> valid_bda = btif_fetch_property ( PERSIST_BDADDR_PROPERTY , local_addr ) ; //<S2SV> } //<S2SV> if ( ! valid_bda ) { //<S2SV> valid_bda = btif_fetch_property ( FACTORY_BT_ADDR_PROPERTY , local_addr ) ; //<S2SV> } //<S2SV> if ( ! valid_bda ) //<S2SV> { //<S2SV> bdstr_t bdstr ; //<S2SV> srand ( ( unsigned int ) ( time ( 0 ) ) ) ; //<S2SV> local_addr -> address [ 0 ] = 0x22 ; //<S2SV> local_addr -> address [ 1 ] = 0x22 ; //<S2SV> local_addr -> address [ 2 ] = ( uint8_t ) ( ( rand ( ) >> 8 ) & 0xFF ) ; //<S2SV> local_addr -> address [ 3 ] = ( uint8_t ) ( ( rand ( ) >> 8 ) & 0xFF ) ; //<S2SV> local_addr -> address [ 4 ] = ( uint8_t ) ( ( rand ( ) >> 8 ) & 0xFF ) ; //<S2SV> local_addr -> address [ 5 ] = ( uint8_t ) ( ( rand ( ) >> 8 ) & 0xFF ) ; //<S2SV> bdaddr_to_string ( local_addr , bdstr , sizeof ( bdstr ) ) ; //<S2SV> BTIF_TRACE_DEBUG ( "No<S2SV_blank>preset<S2SV_blank>BDA.<S2SV_blank>Generating<S2SV_blank>BDA:<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>prop<S2SV_blank>%s" , //<S2SV> ( char * ) bdstr , PERSIST_BDADDR_PROPERTY ) ; //<S2SV> if ( property_set ( PERSIST_BDADDR_PROPERTY , ( char * ) bdstr ) < 0 ) //<S2SV> BTIF_TRACE_ERROR ( "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>random<S2SV_blank>BDA<S2SV_blank>in<S2SV_blank>prop<S2SV_blank>%s" , PERSIST_BDADDR_PROPERTY ) ; //<S2SV> } //<S2SV> bdstr_t bdstr ; //<S2SV> bdaddr_to_string ( local_addr , bdstr , sizeof ( bdstr ) ) ; //<S2SV> val_size = sizeof ( val ) ; //<S2SV> if ( btif_config_get_str ( "Adapter" , "Address" , val , & val_size ) ) //<S2SV> { //<S2SV> if ( strcmp ( bdstr , val ) == 0 ) //<S2SV> { //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> btif_config_set_str ( "Adapter" , "Address" , bdstr ) ; //<S2SV> } //<S2SV> 