static ssize_t out_write ( struct audio_stream_out * stream , const void * buffer , //<S2SV> size_t bytes ) //<S2SV> { //<S2SV> struct a2dp_stream_out * out = ( struct a2dp_stream_out * ) stream ; //<S2SV> int sent ; //<S2SV> DEBUG ( "write<S2SV_blank>%zu<S2SV_blank>bytes<S2SV_blank>(fd<S2SV_blank>%d)" , bytes , out -> common . audio_fd ) ; //<S2SV> pthread_mutex_lock ( & out -> common . lock ) ; //<S2SV> if ( out -> common . state == AUDIO_A2DP_STATE_SUSPENDED ) //<S2SV> { //<S2SV> DEBUG ( "stream<S2SV_blank>suspended" ) ; //<S2SV> pthread_mutex_unlock ( & out -> common . lock ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ( out -> common . state == AUDIO_A2DP_STATE_STOPPED ) || //<S2SV> ( out -> common . state == AUDIO_A2DP_STATE_STANDBY ) ) //<S2SV> { //<S2SV> if ( start_audio_datapath ( & out -> common ) < 0 ) //<S2SV> { //<S2SV> int us_delay = calc_audiotime ( out -> common . cfg , bytes ) ; //<S2SV> DEBUG ( "emulate<S2SV_blank>a2dp<S2SV_blank>write<S2SV_blank>delay<S2SV_blank>(%d<S2SV_blank>us)" , us_delay ) ; //<S2SV> usleep ( us_delay ) ; //<S2SV> pthread_mutex_unlock ( & out -> common . lock ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> else if ( out -> common . state != AUDIO_A2DP_STATE_STARTED ) //<S2SV> { //<S2SV> ERROR ( "stream<S2SV_blank>not<S2SV_blank>in<S2SV_blank>stopped<S2SV_blank>or<S2SV_blank>standby" ) ; //<S2SV> pthread_mutex_unlock ( & out -> common . lock ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> pthread_mutex_unlock ( & out -> common . lock ) ; //<S2SV> sent = skt_write ( out -> common . audio_fd , buffer , bytes ) ; //<S2SV> if ( sent == - 1 ) { //<S2SV> skt_disconnect ( out -> common . audio_fd ) ; //<S2SV> out -> common . audio_fd = AUDIO_SKT_DISCONNECTED ; //<S2SV> if ( out -> common . state != AUDIO_A2DP_STATE_SUSPENDED ) //<S2SV> out -> common . state = AUDIO_A2DP_STATE_STOPPED ; //<S2SV> else //<S2SV> ERROR ( "write<S2SV_blank>failed<S2SV_blank>:<S2SV_blank>stream<S2SV_blank>suspended,<S2SV_blank>avoid<S2SV_blank>resetting<S2SV_blank>state" ) ; //<S2SV> } else { //<S2SV> const size_t frames = bytes / audio_stream_out_frame_size ( stream ) ; //<S2SV> out -> frames_rendered += frames ; //<S2SV> out -> frames_presented += frames ; //<S2SV> } //<S2SV> DEBUG ( "wrote<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>out<S2SV_blank>of<S2SV_blank>%zu<S2SV_blank>bytes" , sent , bytes ) ; //<S2SV> return sent ; //<S2SV> } //<S2SV> 