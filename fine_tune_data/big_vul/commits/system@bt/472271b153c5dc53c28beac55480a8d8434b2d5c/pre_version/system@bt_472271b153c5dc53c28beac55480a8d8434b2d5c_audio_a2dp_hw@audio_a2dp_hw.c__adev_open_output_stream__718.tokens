static int adev_open_output_stream ( struct audio_hw_device * dev , //<S2SV> audio_io_handle_t handle , //<S2SV> audio_devices_t devices , //<S2SV> audio_output_flags_t flags , //<S2SV> struct audio_config * config , //<S2SV> struct audio_stream_out * * stream_out , //<S2SV> const char * address ) //<S2SV> { //<S2SV> struct a2dp_audio_device * a2dp_dev = ( struct a2dp_audio_device * ) dev ; //<S2SV> struct a2dp_stream_out * out ; //<S2SV> int ret = 0 ; //<S2SV> int i ; //<S2SV> UNUSED ( address ) ; //<S2SV> UNUSED ( handle ) ; //<S2SV> UNUSED ( devices ) ; //<S2SV> UNUSED ( flags ) ; //<S2SV> INFO ( "opening<S2SV_blank>output" ) ; //<S2SV> out = ( struct a2dp_stream_out * ) calloc ( 1 , sizeof ( struct a2dp_stream_out ) ) ; //<S2SV> if ( ! out ) //<S2SV> return - ENOMEM ; //<S2SV> out -> stream . common . get_sample_rate = out_get_sample_rate ; //<S2SV> out -> stream . common . set_sample_rate = out_set_sample_rate ; //<S2SV> out -> stream . common . get_buffer_size = out_get_buffer_size ; //<S2SV> out -> stream . common . get_channels = out_get_channels ; //<S2SV> out -> stream . common . get_format = out_get_format ; //<S2SV> out -> stream . common . set_format = out_set_format ; //<S2SV> out -> stream . common . standby = out_standby ; //<S2SV> out -> stream . common . dump = out_dump ; //<S2SV> out -> stream . common . set_parameters = out_set_parameters ; //<S2SV> out -> stream . common . get_parameters = out_get_parameters ; //<S2SV> out -> stream . common . add_audio_effect = out_add_audio_effect ; //<S2SV> out -> stream . common . remove_audio_effect = out_remove_audio_effect ; //<S2SV> out -> stream . get_latency = out_get_latency ; //<S2SV> out -> stream . set_volume = out_set_volume ; //<S2SV> out -> stream . write = out_write ; //<S2SV> out -> stream . get_render_position = out_get_render_position ; //<S2SV> out -> stream . get_presentation_position = out_get_presentation_position ; //<S2SV> a2dp_stream_common_init ( & out -> common ) ; //<S2SV> out -> common . cfg . channel_flags = AUDIO_STREAM_DEFAULT_CHANNEL_FLAG ; //<S2SV> out -> common . cfg . format = AUDIO_STREAM_DEFAULT_FORMAT ; //<S2SV> out -> common . cfg . rate = AUDIO_STREAM_DEFAULT_RATE ; //<S2SV> if ( config ) //<S2SV> { //<S2SV> config -> format = out_get_format ( ( const struct audio_stream * ) & out -> stream ) ; //<S2SV> config -> sample_rate = out_get_sample_rate ( ( const struct audio_stream * ) & out -> stream ) ; //<S2SV> config -> channel_mask = out_get_channels ( ( const struct audio_stream * ) & out -> stream ) ; //<S2SV> } //<S2SV> * stream_out = & out -> stream ; //<S2SV> a2dp_dev -> output = out ; //<S2SV> a2dp_open_ctrl_path ( & out -> common ) ; //<S2SV> if ( out -> common . ctrl_fd == AUDIO_SKT_DISCONNECTED ) //<S2SV> { //<S2SV> ERROR ( "ctrl<S2SV_blank>socket<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>connect<S2SV_blank>(%s)" , strerror ( errno ) ) ; //<S2SV> ret = - 1 ; //<S2SV> goto err_open ; //<S2SV> } //<S2SV> DEBUG ( "success" ) ; //<S2SV> usleep ( 250000 ) ; //<S2SV> return 0 ; //<S2SV> err_open : //<S2SV> free ( out ) ; //<S2SV> * stream_out = NULL ; //<S2SV> a2dp_dev -> output = NULL ; //<S2SV> ERROR ( "failed" ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 