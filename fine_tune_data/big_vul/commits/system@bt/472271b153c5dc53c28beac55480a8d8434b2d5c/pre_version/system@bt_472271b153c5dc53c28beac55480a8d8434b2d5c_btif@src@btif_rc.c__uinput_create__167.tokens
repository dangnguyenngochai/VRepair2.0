int uinput_create ( char * name ) //<S2SV> { //<S2SV> struct uinput_dev dev ; //<S2SV> int fd , x = 0 ; //<S2SV> for ( x = 0 ; x < MAX_UINPUT_PATHS ; x ++ ) //<S2SV> { //<S2SV> fd = open ( uinput_dev_path [ x ] , O_RDWR ) ; //<S2SV> if ( fd < 0 ) //<S2SV> continue ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( x == MAX_UINPUT_PATHS ) { //<S2SV> BTIF_TRACE_ERROR ( "%s<S2SV_blank>ERROR:<S2SV_blank>uinput<S2SV_blank>device<S2SV_blank>open<S2SV_blank>failed" , __FUNCTION__ ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memset ( & dev , 0 , sizeof ( dev ) ) ; //<S2SV> if ( name ) //<S2SV> strncpy ( dev . name , name , UINPUT_MAX_NAME_SIZE - 1 ) ; //<S2SV> dev . id . bustype = BUS_BLUETOOTH ; //<S2SV> dev . id . vendor = 0x0000 ; //<S2SV> dev . id . product = 0x0000 ; //<S2SV> dev . id . version = 0x0000 ; //<S2SV> if ( write ( fd , & dev , sizeof ( dev ) ) < 0 ) { //<S2SV> BTIF_TRACE_ERROR ( "%s<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>device<S2SV_blank>information" , __FUNCTION__ ) ; //<S2SV> close ( fd ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> ioctl ( fd , UI_SET_EVBIT , EV_KEY ) ; //<S2SV> ioctl ( fd , UI_SET_EVBIT , EV_REL ) ; //<S2SV> ioctl ( fd , UI_SET_EVBIT , EV_SYN ) ; //<S2SV> for ( x = 0 ; key_map [ x ] . name != NULL ; x ++ ) //<S2SV> ioctl ( fd , UI_SET_KEYBIT , key_map [ x ] . mapped_id ) ; //<S2SV> if ( ioctl ( fd , UI_DEV_CREATE , NULL ) < 0 ) { //<S2SV> BTIF_TRACE_ERROR ( "%s<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>create<S2SV_blank>uinput<S2SV_blank>device" , __FUNCTION__ ) ; //<S2SV> close ( fd ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> return fd ; //<S2SV> } //<S2SV> 