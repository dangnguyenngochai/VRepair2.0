int btsock_thread_post_cmd ( int h , int type , const unsigned char * data , int size , uint32_t user_id ) //<S2SV> { //<S2SV> if ( h < 0 || h >= MAX_THREAD ) //<S2SV> { //<S2SV> APPL_TRACE_ERROR ( "invalid<S2SV_blank>bt<S2SV_blank>thread<S2SV_blank>handle:%d" , h ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> if ( ts [ h ] . cmd_fdw == - 1 ) //<S2SV> { //<S2SV> APPL_TRACE_ERROR ( "cmd<S2SV_blank>socket<S2SV_blank>is<S2SV_blank>not<S2SV_blank>created.<S2SV_blank>socket<S2SV_blank>thread<S2SV_blank>may<S2SV_blank>not<S2SV_blank>initialized" ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> sock_cmd_t cmd = { CMD_USER_PRIVATE , 0 , type , size , user_id } ; //<S2SV> APPL_TRACE_DEBUG ( "post<S2SV_blank>cmd<S2SV_blank>type:%d,<S2SV_blank>size:%d,<S2SV_blank>h:%d,<S2SV_blank>" , type , size , h ) ; //<S2SV> sock_cmd_t * cmd_send = & cmd ; //<S2SV> int size_send = sizeof ( cmd ) ; //<S2SV> if ( data && size ) //<S2SV> { //<S2SV> size_send = sizeof ( cmd ) + size ; //<S2SV> cmd_send = ( sock_cmd_t * ) alloca ( size_send ) ; //<S2SV> if ( cmd_send ) //<S2SV> { //<S2SV> * cmd_send = cmd ; //<S2SV> memcpy ( cmd_send + 1 , data , size ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> APPL_TRACE_ERROR ( "alloca<S2SV_blank>failed<S2SV_blank>at<S2SV_blank>h:%d,<S2SV_blank>cmd<S2SV_blank>type:%d,<S2SV_blank>size:%d" , h , type , size_send ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> } //<S2SV> return send ( ts [ h ] . cmd_fdw , cmd_send , size_send , 0 ) == size_send ; //<S2SV> } //<S2SV> 