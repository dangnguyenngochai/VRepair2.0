bool config_save ( const config_t * config , const char * filename ) { //<S2SV> assert ( config != NULL ) ; //<S2SV> assert ( filename != NULL ) ; //<S2SV> assert ( * filename != '\\0' ) ; //<S2SV> char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; //<S2SV> if ( ! temp_filename ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>memory<S2SV_blank>for<S2SV_blank>filename." , __func__ ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> strcpy ( temp_filename , filename ) ; //<S2SV> strcat ( temp_filename , ".new" ) ; //<S2SV> FILE * fp = fopen ( temp_filename , "wt" ) ; //<S2SV> if ( ! fp ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> for ( const list_node_t * node = list_begin ( config -> sections ) ; node != list_end ( config -> sections ) ; node = list_next ( node ) ) { //<S2SV> const section_t * section = ( const section_t * ) list_node ( node ) ; //<S2SV> fprintf ( fp , "[%s]\\n" , section -> name ) ; //<S2SV> for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode != list_end ( section -> entries ) ; enode = list_next ( enode ) ) { //<S2SV> const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; //<S2SV> fprintf ( fp , "%s<S2SV_blank>=<S2SV_blank>%s\\n" , entry -> key , entry -> value ) ; //<S2SV> } //<S2SV> if ( list_next ( node ) != list_end ( config -> sections ) ) //<S2SV> fputc ( '\\n' , fp ) ; //<S2SV> } //<S2SV> fflush ( fp ) ; //<S2SV> fclose ( fp ) ; //<S2SV> if ( chmod ( temp_filename , S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>change<S2SV_blank>file<S2SV_blank>permissions<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( rename ( temp_filename , filename ) == - 1 ) { //<S2SV> LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>commit<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , filename , strerror ( errno ) ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> osi_free ( temp_filename ) ; //<S2SV> return true ; //<S2SV> error : ; //<S2SV> unlink ( temp_filename ) ; //<S2SV> osi_free ( temp_filename ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> 