int main ( int argc , char * * argv ) { //<S2SV> const char * test_name = NULL ; //<S2SV> bool skip_sanity_suite = false ; //<S2SV> for ( int i = 1 ; i < argc ; ++ i ) { //<S2SV> if ( ! strcmp ( "--help" , argv [ i ] ) ) { //<S2SV> print_usage ( argv [ 0 ] ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! strcmp ( "--insanity" , argv [ i ] ) ) { //<S2SV> skip_sanity_suite = true ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! is_valid ( argv [ i ] ) ) { //<S2SV> printf ( "Error:<S2SV_blank>invalid<S2SV_blank>test<S2SV_blank>name.\\n" ) ; //<S2SV> print_usage ( argv [ 0 ] ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( test_name != NULL ) { //<S2SV> printf ( "Error:<S2SV_blank>invalid<S2SV_blank>arguments.\\n" ) ; //<S2SV> print_usage ( argv [ 0 ] ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> test_name = argv [ i ] ; //<S2SV> } //<S2SV> if ( is_shell_running ( ) ) { //<S2SV> printf ( "Run<S2SV_blank>\'adb<S2SV_blank>shell<S2SV_blank>stop\'<S2SV_blank>before<S2SV_blank>running<S2SV_blank>%s.\\n" , argv [ 0 ] ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> config_t * config = config_new ( CONFIG_FILE_PATH ) ; //<S2SV> if ( ! config ) { //<S2SV> printf ( "Error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>stack<S2SV_blank>config<S2SV_blank>file.\\n" ) ; //<S2SV> print_usage ( argv [ 0 ] ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( const config_section_node_t * node = config_section_begin ( config ) ; node != config_section_end ( config ) ; node = config_section_next ( node ) ) { //<S2SV> const char * name = config_section_name ( node ) ; //<S2SV> if ( config_has_key ( config , name , "LinkKey" ) && string_to_bdaddr ( name , & bt_remote_bdaddr ) ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> config_free ( config ) ; //<S2SV> if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { //<S2SV> printf ( "Error:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>find<S2SV_blank>paired<S2SV_blank>device<S2SV_blank>in<S2SV_blank>config<S2SV_blank>file.\\n" ) ; //<S2SV> print_usage ( argv [ 0 ] ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! hal_open ( callbacks_get_adapter_struct ( ) ) ) { //<S2SV> printf ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>Bluetooth<S2SV_blank>HAL.\\n" ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( ! btsocket_init ( ) ) { //<S2SV> printf ( "Unable<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>Bluetooth<S2SV_blank>sockets.\\n" ) ; //<S2SV> return 2 ; //<S2SV> } //<S2SV> if ( ! pan_init ( ) ) { //<S2SV> printf ( "Unable<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>PAN.\\n" ) ; //<S2SV> return 3 ; //<S2SV> } //<S2SV> if ( ! gatt_init ( ) ) { //<S2SV> printf ( "Unable<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>GATT.\\n" ) ; //<S2SV> return 4 ; //<S2SV> } //<S2SV> watchdog_running = true ; //<S2SV> pthread_create ( & watchdog_thread , NULL , watchdog_fn , NULL ) ; //<S2SV> static const char * DEFAULT = "\\x1b[0m" ; //<S2SV> static const char * GREEN = "\\x1b[0;32m" ; //<S2SV> static const char * RED = "\\x1b[0;31m" ; //<S2SV> if ( ! isatty ( fileno ( stdout ) ) ) { //<S2SV> DEFAULT = GREEN = RED = "" ; //<S2SV> } //<S2SV> int pass = 0 ; //<S2SV> int fail = 0 ; //<S2SV> int case_num = 0 ; //<S2SV> if ( ! skip_sanity_suite ) { //<S2SV> for ( size_t i = 0 ; i < sanity_suite_size ; ++ i ) { //<S2SV> if ( ! test_name || ! strcmp ( test_name , sanity_suite [ i ] . function_name ) ) { //<S2SV> callbacks_init ( ) ; //<S2SV> if ( sanity_suite [ i ] . function ( ) ) { //<S2SV> printf ( "[%4d]<S2SV_blank>%-64s<S2SV_blank>[%sPASS%s]\\n" , ++ case_num , sanity_suite [ i ] . function_name , GREEN , DEFAULT ) ; //<S2SV> ++ pass ; //<S2SV> } else { //<S2SV> printf ( "[%4d]<S2SV_blank>%-64s<S2SV_blank>[%sFAIL%s]\\n" , ++ case_num , sanity_suite [ i ] . function_name , RED , DEFAULT ) ; //<S2SV> ++ fail ; //<S2SV> } //<S2SV> callbacks_cleanup ( ) ; //<S2SV> ++ watchdog_id ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( fail ) { //<S2SV> printf ( "\\n%sSanity<S2SV_blank>suite<S2SV_blank>failed<S2SV_blank>with<S2SV_blank>%d<S2SV_blank>errors.%s\\n" , RED , fail , DEFAULT ) ; //<S2SV> hal_close ( ) ; //<S2SV> return 4 ; //<S2SV> } //<S2SV> for ( size_t i = 0 ; i < test_suite_size ; ++ i ) { //<S2SV> if ( ! test_name || ! strcmp ( test_name , test_suite [ i ] . function_name ) ) { //<S2SV> callbacks_init ( ) ; //<S2SV> CALL_AND_WAIT ( bt_interface -> enable ( false ) , adapter_state_changed ) ; //<S2SV> if ( test_suite [ i ] . function ( ) ) { //<S2SV> printf ( "[%4d]<S2SV_blank>%-64s<S2SV_blank>[%sPASS%s]\\n" , ++ case_num , test_suite [ i ] . function_name , GREEN , DEFAULT ) ; //<S2SV> ++ pass ; //<S2SV> } else { //<S2SV> printf ( "[%4d]<S2SV_blank>%-64s<S2SV_blank>[%sFAIL%s]\\n" , ++ case_num , test_suite [ i ] . function_name , RED , DEFAULT ) ; //<S2SV> ++ fail ; //<S2SV> } //<S2SV> CALL_AND_WAIT ( bt_interface -> disable ( ) , adapter_state_changed ) ; //<S2SV> callbacks_cleanup ( ) ; //<S2SV> ++ watchdog_id ; //<S2SV> } //<S2SV> } //<S2SV> printf ( "\\n" ) ; //<S2SV> if ( fail ) { //<S2SV> printf ( "%d/%d<S2SV_blank>tests<S2SV_blank>failed.<S2SV_blank>See<S2SV_blank>above<S2SV_blank>for<S2SV_blank>failed<S2SV_blank>test<S2SV_blank>cases.\\n" , fail , sanity_suite_size + test_suite_size ) ; //<S2SV> } else { //<S2SV> printf ( "All<S2SV_blank>tests<S2SV_blank>passed!\\n" ) ; //<S2SV> } //<S2SV> watchdog_running = false ; //<S2SV> pthread_join ( watchdog_thread , NULL ) ; //<S2SV> hal_close ( ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 