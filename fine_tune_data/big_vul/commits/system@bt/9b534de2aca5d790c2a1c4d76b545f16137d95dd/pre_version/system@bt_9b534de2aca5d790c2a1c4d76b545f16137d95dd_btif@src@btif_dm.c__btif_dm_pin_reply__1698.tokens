bt_status_t btif_dm_pin_reply ( const bt_bdaddr_t * bd_addr , uint8_t accept , //<S2SV> uint8_t pin_len , bt_pin_code_t * pin_code ) //<S2SV> { //<S2SV> BTIF_TRACE_EVENT ( "%s:<S2SV_blank>accept=%d" , __FUNCTION__ , accept ) ; //<S2SV> if ( pin_code == NULL ) //<S2SV> return BT_STATUS_FAIL ; //<S2SV> # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) //<S2SV> if ( pairing_cb . is_le_only ) //<S2SV> { //<S2SV> int i ; //<S2SV> UINT32 passkey = 0 ; //<S2SV> int multi [ ] = { 100000 , 10000 , 1000 , 100 , 10 , 1 } ; //<S2SV> BD_ADDR remote_bd_addr ; //<S2SV> bdcpy ( remote_bd_addr , bd_addr -> address ) ; //<S2SV> for ( i = 0 ; i < 6 ; i ++ ) //<S2SV> { //<S2SV> passkey += ( multi [ i ] * ( pin_code -> pin [ i ] - '0' ) ) ; //<S2SV> } //<S2SV> BTIF_TRACE_DEBUG ( "btif_dm_pin_reply:<S2SV_blank>passkey:<S2SV_blank>%d" , passkey ) ; //<S2SV> BTA_DmBlePasskeyReply ( remote_bd_addr , accept , passkey ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> BTA_DmPinReply ( ( UINT8 * ) bd_addr -> address , accept , pin_len , pin_code -> pin ) ; //<S2SV> if ( accept ) //<S2SV> pairing_cb . pin_code_len = pin_len ; //<S2SV> } //<S2SV> # else //<S2SV> BTA_DmPinReply ( ( UINT8 * ) bd_addr -> address , accept , pin_len , pin_code -> pin ) ; //<S2SV> if ( accept ) //<S2SV> pairing_cb . pin_code_len = pin_len ; //<S2SV> # endif //<S2SV> return BT_STATUS_SUCCESS ; //<S2SV> } //<S2SV> 