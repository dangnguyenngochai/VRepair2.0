bool //<S2SV> layer_resize ( int layer , int x_size , int y_size ) //<S2SV> { //<S2SV> int old_height ; //<S2SV> int old_width ; //<S2SV> struct map_tile * tile ; //<S2SV> int tile_width ; //<S2SV> int tile_height ; //<S2SV> struct map_tile * tilemap ; //<S2SV> struct map_trigger * trigger ; //<S2SV> struct map_zone * zone ; //<S2SV> int x , y , i ; //<S2SV> old_width = s_map -> layers [ layer ] . width ; //<S2SV> old_height = s_map -> layers [ layer ] . height ; //<S2SV> if ( ! ( tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ) ) //<S2SV> return false ; //<S2SV> for ( x = 0 ; x < x_size ; ++ x ) { //<S2SV> for ( y = 0 ; y < y_size ; ++ y ) { //<S2SV> if ( x < old_width && y < old_height ) { //<S2SV> tilemap [ x + y * x_size ] = s_map -> layers [ layer ] . tilemap [ x + y * old_width ] ; //<S2SV> } //<S2SV> else { //<S2SV> tile = & tilemap [ x + y * x_size ] ; //<S2SV> tile -> frames_left = tileset_get_delay ( s_map -> tileset , 0 ) ; //<S2SV> tile -> tile_index = 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> free ( s_map -> layers [ layer ] . tilemap ) ; //<S2SV> s_map -> layers [ layer ] . tilemap = tilemap ; //<S2SV> s_map -> layers [ layer ] . width = x_size ; //<S2SV> s_map -> layers [ layer ] . height = y_size ; //<S2SV> tileset_get_size ( s_map -> tileset , & tile_width , & tile_height ) ; //<S2SV> s_map -> width = 0 ; //<S2SV> s_map -> height = 0 ; //<S2SV> for ( i = 0 ; i < s_map -> num_layers ; ++ i ) { //<S2SV> if ( ! s_map -> layers [ i ] . is_parallax ) { //<S2SV> s_map -> width = fmax ( s_map -> width , s_map -> layers [ i ] . width * tile_width ) ; //<S2SV> s_map -> height = fmax ( s_map -> height , s_map -> layers [ i ] . height * tile_height ) ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = ( int ) vector_len ( s_map -> zones ) - 1 ; i >= 0 ; -- i ) { //<S2SV> zone = vector_get ( s_map -> zones , i ) ; //<S2SV> if ( zone -> bounds . x1 >= s_map -> width || zone -> bounds . y1 >= s_map -> height ) //<S2SV> vector_remove ( s_map -> zones , i ) ; //<S2SV> else { //<S2SV> if ( zone -> bounds . x2 > s_map -> width ) //<S2SV> zone -> bounds . x2 = s_map -> width ; //<S2SV> if ( zone -> bounds . y2 > s_map -> height ) //<S2SV> zone -> bounds . y2 = s_map -> height ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = ( int ) vector_len ( s_map -> triggers ) - 1 ; i >= 0 ; -- i ) { //<S2SV> trigger = vector_get ( s_map -> triggers , i ) ; //<S2SV> if ( trigger -> x >= s_map -> width || trigger -> y >= s_map -> height ) //<S2SV> vector_remove ( s_map -> triggers , i ) ; //<S2SV> } //<S2SV> return true ; //<S2SV> } //<S2SV> 