static int jpc_dec_tileinit ( jpc_dec_t * dec , jpc_dec_tile_t * tile ) //<S2SV> { //<S2SV> jpc_dec_tcomp_t * tcomp ; //<S2SV> int compno ; //<S2SV> int rlvlno ; //<S2SV> jpc_dec_rlvl_t * rlvl ; //<S2SV> jpc_dec_band_t * band ; //<S2SV> jpc_dec_prc_t * prc ; //<S2SV> int bndno ; //<S2SV> jpc_tsfb_band_t * bnd ; //<S2SV> int bandno ; //<S2SV> jpc_dec_ccp_t * ccp ; //<S2SV> int prccnt ; //<S2SV> jpc_dec_cblk_t * cblk ; //<S2SV> int cblkcnt ; //<S2SV> uint_fast32_t tlprcxstart ; //<S2SV> uint_fast32_t tlprcystart ; //<S2SV> uint_fast32_t brprcxend ; //<S2SV> uint_fast32_t brprcyend ; //<S2SV> uint_fast32_t tlcbgxstart ; //<S2SV> uint_fast32_t tlcbgystart ; //<S2SV> uint_fast32_t brcbgxend ; //<S2SV> uint_fast32_t brcbgyend ; //<S2SV> uint_fast32_t cbgxstart ; //<S2SV> uint_fast32_t cbgystart ; //<S2SV> uint_fast32_t cbgxend ; //<S2SV> uint_fast32_t cbgyend ; //<S2SV> uint_fast32_t tlcblkxstart ; //<S2SV> uint_fast32_t tlcblkystart ; //<S2SV> uint_fast32_t brcblkxend ; //<S2SV> uint_fast32_t brcblkyend ; //<S2SV> uint_fast32_t cblkxstart ; //<S2SV> uint_fast32_t cblkystart ; //<S2SV> uint_fast32_t cblkxend ; //<S2SV> uint_fast32_t cblkyend ; //<S2SV> uint_fast32_t tmpxstart ; //<S2SV> uint_fast32_t tmpystart ; //<S2SV> uint_fast32_t tmpxend ; //<S2SV> uint_fast32_t tmpyend ; //<S2SV> jpc_dec_cp_t * cp ; //<S2SV> jpc_tsfb_band_t bnds [ JPC_MAXBANDS ] ; //<S2SV> jpc_pchg_t * pchg ; //<S2SV> int pchgno ; //<S2SV> jpc_dec_cmpt_t * cmpt ; //<S2SV> cp = tile -> cp ; //<S2SV> tile -> realmode = 0 ; //<S2SV> if ( cp -> mctid == JPC_MCT_ICT ) { //<S2SV> tile -> realmode = 1 ; //<S2SV> } //<S2SV> for ( compno = 0 , tcomp = tile -> tcomps , cmpt = dec -> cmpts ; compno < //<S2SV> dec -> numcomps ; ++ compno , ++ tcomp , ++ cmpt ) { //<S2SV> ccp = & tile -> cp -> ccps [ compno ] ; //<S2SV> if ( ccp -> qmfbid == JPC_COX_INS ) { //<S2SV> tile -> realmode = 1 ; //<S2SV> } //<S2SV> tcomp -> numrlvls = ccp -> numrlvls ; //<S2SV> if ( ! ( tcomp -> rlvls = jas_alloc2 ( tcomp -> numrlvls , //<S2SV> sizeof ( jpc_dec_rlvl_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! ( tcomp -> data = jas_seq2d_create ( JPC_CEILDIV ( tile -> xstart , //<S2SV> cmpt -> hstep ) , JPC_CEILDIV ( tile -> ystart , cmpt -> vstep ) , //<S2SV> JPC_CEILDIV ( tile -> xend , cmpt -> hstep ) , JPC_CEILDIV ( tile -> yend , //<S2SV> cmpt -> vstep ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! ( tcomp -> tsfb = jpc_cod_gettsfb ( ccp -> qmfbid , //<S2SV> tcomp -> numrlvls - 1 ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> { //<S2SV> jpc_tsfb_getbands ( tcomp -> tsfb , jas_seq2d_xstart ( tcomp -> data ) , //<S2SV> jas_seq2d_ystart ( tcomp -> data ) , jas_seq2d_xend ( tcomp -> data ) , //<S2SV> jas_seq2d_yend ( tcomp -> data ) , bnds ) ; //<S2SV> } //<S2SV> for ( rlvlno = 0 , rlvl = tcomp -> rlvls ; rlvlno < tcomp -> numrlvls ; //<S2SV> ++ rlvlno , ++ rlvl ) { //<S2SV> rlvl -> bands = 0 ; //<S2SV> rlvl -> xstart = JPC_CEILDIVPOW2 ( tcomp -> xstart , //<S2SV> tcomp -> numrlvls - 1 - rlvlno ) ; //<S2SV> rlvl -> ystart = JPC_CEILDIVPOW2 ( tcomp -> ystart , //<S2SV> tcomp -> numrlvls - 1 - rlvlno ) ; //<S2SV> rlvl -> xend = JPC_CEILDIVPOW2 ( tcomp -> xend , //<S2SV> tcomp -> numrlvls - 1 - rlvlno ) ; //<S2SV> rlvl -> yend = JPC_CEILDIVPOW2 ( tcomp -> yend , //<S2SV> tcomp -> numrlvls - 1 - rlvlno ) ; //<S2SV> rlvl -> prcwidthexpn = ccp -> prcwidthexpns [ rlvlno ] ; //<S2SV> rlvl -> prcheightexpn = ccp -> prcheightexpns [ rlvlno ] ; //<S2SV> tlprcxstart = JPC_FLOORDIVPOW2 ( rlvl -> xstart , //<S2SV> rlvl -> prcwidthexpn ) << rlvl -> prcwidthexpn ; //<S2SV> tlprcystart = JPC_FLOORDIVPOW2 ( rlvl -> ystart , //<S2SV> rlvl -> prcheightexpn ) << rlvl -> prcheightexpn ; //<S2SV> brprcxend = JPC_CEILDIVPOW2 ( rlvl -> xend , //<S2SV> rlvl -> prcwidthexpn ) << rlvl -> prcwidthexpn ; //<S2SV> brprcyend = JPC_CEILDIVPOW2 ( rlvl -> yend , //<S2SV> rlvl -> prcheightexpn ) << rlvl -> prcheightexpn ; //<S2SV> rlvl -> numhprcs = ( brprcxend - tlprcxstart ) >> //<S2SV> rlvl -> prcwidthexpn ; //<S2SV> rlvl -> numvprcs = ( brprcyend - tlprcystart ) >> //<S2SV> rlvl -> prcheightexpn ; //<S2SV> rlvl -> numprcs = rlvl -> numhprcs * rlvl -> numvprcs ; //<S2SV> if ( rlvl -> xstart >= rlvl -> xend || rlvl -> ystart >= rlvl -> yend ) { //<S2SV> rlvl -> bands = 0 ; //<S2SV> rlvl -> numprcs = 0 ; //<S2SV> rlvl -> numhprcs = 0 ; //<S2SV> rlvl -> numvprcs = 0 ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! rlvlno ) { //<S2SV> tlcbgxstart = tlprcxstart ; //<S2SV> tlcbgystart = tlprcystart ; //<S2SV> brcbgxend = brprcxend ; //<S2SV> brcbgyend = brprcyend ; //<S2SV> rlvl -> cbgwidthexpn = rlvl -> prcwidthexpn ; //<S2SV> rlvl -> cbgheightexpn = rlvl -> prcheightexpn ; //<S2SV> } else { //<S2SV> tlcbgxstart = JPC_CEILDIVPOW2 ( tlprcxstart , 1 ) ; //<S2SV> tlcbgystart = JPC_CEILDIVPOW2 ( tlprcystart , 1 ) ; //<S2SV> brcbgxend = JPC_CEILDIVPOW2 ( brprcxend , 1 ) ; //<S2SV> brcbgyend = JPC_CEILDIVPOW2 ( brprcyend , 1 ) ; //<S2SV> rlvl -> cbgwidthexpn = rlvl -> prcwidthexpn - 1 ; //<S2SV> rlvl -> cbgheightexpn = rlvl -> prcheightexpn - 1 ; //<S2SV> } //<S2SV> rlvl -> cblkwidthexpn = JAS_MIN ( ccp -> cblkwidthexpn , //<S2SV> rlvl -> cbgwidthexpn ) ; //<S2SV> rlvl -> cblkheightexpn = JAS_MIN ( ccp -> cblkheightexpn , //<S2SV> rlvl -> cbgheightexpn ) ; //<S2SV> rlvl -> numbands = ( ! rlvlno ) ? 1 : 3 ; //<S2SV> if ( ! ( rlvl -> bands = jas_alloc2 ( rlvl -> numbands , //<S2SV> sizeof ( jpc_dec_band_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( bandno = 0 , band = rlvl -> bands ; //<S2SV> bandno < rlvl -> numbands ; ++ bandno , ++ band ) { //<S2SV> bndno = ( ! rlvlno ) ? 0 : ( 3 * ( rlvlno - 1 ) + //<S2SV> bandno + 1 ) ; //<S2SV> bnd = & bnds [ bndno ] ; //<S2SV> band -> orient = bnd -> orient ; //<S2SV> band -> stepsize = ccp -> stepsizes [ bndno ] ; //<S2SV> band -> analgain = JPC_NOMINALGAIN ( ccp -> qmfbid , //<S2SV> tcomp -> numrlvls - 1 , rlvlno , band -> orient ) ; //<S2SV> band -> absstepsize = jpc_calcabsstepsize ( band -> stepsize , //<S2SV> cmpt -> prec + band -> analgain ) ; //<S2SV> band -> numbps = ccp -> numguardbits + //<S2SV> JPC_QCX_GETEXPN ( band -> stepsize ) - 1 ; //<S2SV> band -> roishift = ( ccp -> roishift + band -> numbps >= JPC_PREC ) ? //<S2SV> ( JPC_PREC - 1 - band -> numbps ) : ccp -> roishift ; //<S2SV> band -> data = 0 ; //<S2SV> band -> prcs = 0 ; //<S2SV> if ( bnd -> xstart == bnd -> xend || bnd -> ystart == bnd -> yend ) { //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! ( band -> data = jas_seq2d_create ( 0 , 0 , 0 , 0 ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> jas_seq2d_bindsub ( band -> data , tcomp -> data , bnd -> locxstart , //<S2SV> bnd -> locystart , bnd -> locxend , bnd -> locyend ) ; //<S2SV> jas_seq2d_setshift ( band -> data , bnd -> xstart , bnd -> ystart ) ; //<S2SV> assert ( rlvl -> numprcs ) ; //<S2SV> if ( ! ( band -> prcs = jas_alloc2 ( rlvl -> numprcs , //<S2SV> sizeof ( jpc_dec_prc_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> cbgxstart = tlcbgxstart ; //<S2SV> cbgystart = tlcbgystart ; //<S2SV> for ( prccnt = rlvl -> numprcs , prc = band -> prcs ; //<S2SV> prccnt > 0 ; -- prccnt , ++ prc ) { //<S2SV> cbgxend = cbgxstart + ( 1 << rlvl -> cbgwidthexpn ) ; //<S2SV> cbgyend = cbgystart + ( 1 << rlvl -> cbgheightexpn ) ; //<S2SV> prc -> xstart = JAS_MAX ( cbgxstart , JAS_CAST ( uint_fast32_t , //<S2SV> jas_seq2d_xstart ( band -> data ) ) ) ; //<S2SV> prc -> ystart = JAS_MAX ( cbgystart , JAS_CAST ( uint_fast32_t , //<S2SV> jas_seq2d_ystart ( band -> data ) ) ) ; //<S2SV> prc -> xend = JAS_MIN ( cbgxend , JAS_CAST ( uint_fast32_t , //<S2SV> jas_seq2d_xend ( band -> data ) ) ) ; //<S2SV> prc -> yend = JAS_MIN ( cbgyend , JAS_CAST ( uint_fast32_t , //<S2SV> jas_seq2d_yend ( band -> data ) ) ) ; //<S2SV> if ( prc -> xend > prc -> xstart && prc -> yend > prc -> ystart ) { //<S2SV> tlcblkxstart = JPC_FLOORDIVPOW2 ( prc -> xstart , //<S2SV> rlvl -> cblkwidthexpn ) << rlvl -> cblkwidthexpn ; //<S2SV> tlcblkystart = JPC_FLOORDIVPOW2 ( prc -> ystart , //<S2SV> rlvl -> cblkheightexpn ) << rlvl -> cblkheightexpn ; //<S2SV> brcblkxend = JPC_CEILDIVPOW2 ( prc -> xend , //<S2SV> rlvl -> cblkwidthexpn ) << rlvl -> cblkwidthexpn ; //<S2SV> brcblkyend = JPC_CEILDIVPOW2 ( prc -> yend , //<S2SV> rlvl -> cblkheightexpn ) << rlvl -> cblkheightexpn ; //<S2SV> prc -> numhcblks = ( brcblkxend - tlcblkxstart ) >> //<S2SV> rlvl -> cblkwidthexpn ; //<S2SV> prc -> numvcblks = ( brcblkyend - tlcblkystart ) >> //<S2SV> rlvl -> cblkheightexpn ; //<S2SV> prc -> numcblks = prc -> numhcblks * prc -> numvcblks ; //<S2SV> assert ( prc -> numcblks > 0 ) ; //<S2SV> if ( ! ( prc -> incltagtree = jpc_tagtree_create ( //<S2SV> prc -> numhcblks , prc -> numvcblks ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! ( prc -> numimsbstagtree = jpc_tagtree_create ( //<S2SV> prc -> numhcblks , prc -> numvcblks ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! ( prc -> cblks = jas_alloc2 ( prc -> numcblks , //<S2SV> sizeof ( jpc_dec_cblk_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> cblkxstart = cbgxstart ; //<S2SV> cblkystart = cbgystart ; //<S2SV> for ( cblkcnt = prc -> numcblks , cblk = prc -> cblks ; //<S2SV> cblkcnt > 0 ; ) { //<S2SV> cblkxend = cblkxstart + ( 1 << rlvl -> cblkwidthexpn ) ; //<S2SV> cblkyend = cblkystart + ( 1 << rlvl -> cblkheightexpn ) ; //<S2SV> tmpxstart = JAS_MAX ( cblkxstart , prc -> xstart ) ; //<S2SV> tmpystart = JAS_MAX ( cblkystart , prc -> ystart ) ; //<S2SV> tmpxend = JAS_MIN ( cblkxend , prc -> xend ) ; //<S2SV> tmpyend = JAS_MIN ( cblkyend , prc -> yend ) ; //<S2SV> if ( tmpxend > tmpxstart && tmpyend > tmpystart ) { //<S2SV> cblk -> firstpassno = - 1 ; //<S2SV> cblk -> mqdec = 0 ; //<S2SV> cblk -> nulldec = 0 ; //<S2SV> cblk -> flags = 0 ; //<S2SV> cblk -> numpasses = 0 ; //<S2SV> cblk -> segs . head = 0 ; //<S2SV> cblk -> segs . tail = 0 ; //<S2SV> cblk -> curseg = 0 ; //<S2SV> cblk -> numimsbs = 0 ; //<S2SV> cblk -> numlenbits = 3 ; //<S2SV> cblk -> flags = 0 ; //<S2SV> if ( ! ( cblk -> data = jas_seq2d_create ( 0 , 0 , 0 , //<S2SV> 0 ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> jas_seq2d_bindsub ( cblk -> data , band -> data , //<S2SV> tmpxstart , tmpystart , tmpxend , tmpyend ) ; //<S2SV> ++ cblk ; //<S2SV> -- cblkcnt ; //<S2SV> } //<S2SV> cblkxstart += 1 << rlvl -> cblkwidthexpn ; //<S2SV> if ( cblkxstart >= cbgxend ) { //<S2SV> cblkxstart = cbgxstart ; //<S2SV> cblkystart += 1 << rlvl -> cblkheightexpn ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> prc -> cblks = 0 ; //<S2SV> prc -> incltagtree = 0 ; //<S2SV> prc -> numimsbstagtree = 0 ; //<S2SV> } //<S2SV> cbgxstart += 1 << rlvl -> cbgwidthexpn ; //<S2SV> if ( cbgxstart >= brcbgxend ) { //<S2SV> cbgxstart = tlcbgxstart ; //<S2SV> cbgystart += 1 << rlvl -> cbgheightexpn ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ! ( tile -> pi = jpc_dec_pi_create ( dec , tile ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( pchgno = 0 ; pchgno < jpc_pchglist_numpchgs ( tile -> cp -> pchglist ) ; //<S2SV> ++ pchgno ) { //<S2SV> pchg = jpc_pchg_copy ( jpc_pchglist_get ( tile -> cp -> pchglist , pchgno ) ) ; //<S2SV> assert ( pchg ) ; //<S2SV> jpc_pi_addpchg ( tile -> pi , pchg ) ; //<S2SV> } //<S2SV> jpc_pi_init ( tile -> pi ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 