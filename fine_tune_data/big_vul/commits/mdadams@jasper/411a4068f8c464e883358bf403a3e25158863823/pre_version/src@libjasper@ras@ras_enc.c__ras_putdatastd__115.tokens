static int ras_putdatastd ( jas_stream_t * out , ras_hdr_t * hdr , jas_image_t * image , int numcmpts , int * cmpts ) //<S2SV> { //<S2SV> int rowsize ; //<S2SV> int pad ; //<S2SV> unsigned int z ; //<S2SV> int nz ; //<S2SV> int c ; //<S2SV> int x ; //<S2SV> int y ; //<S2SV> int v ; //<S2SV> jas_matrix_t * data [ 3 ] ; //<S2SV> int i ; //<S2SV> for ( i = 0 ; i < numcmpts ; ++ i ) { //<S2SV> data [ i ] = jas_matrix_create ( jas_image_height ( image ) , jas_image_width ( image ) ) ; //<S2SV> assert ( data [ i ] ) ; //<S2SV> } //<S2SV> rowsize = RAS_ROWSIZE ( hdr ) ; //<S2SV> pad = rowsize - ( hdr -> width * hdr -> depth + 7 ) / 8 ; //<S2SV> hdr -> length = hdr -> height * rowsize ; //<S2SV> for ( y = 0 ; y < hdr -> height ; y ++ ) { //<S2SV> for ( i = 0 ; i < numcmpts ; ++ i ) { //<S2SV> if ( jas_image_readcmpt ( image , cmpts [ i ] , 0 , y , //<S2SV> jas_image_width ( image ) , 1 , data [ i ] ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> z = 0 ; //<S2SV> nz = 0 ; //<S2SV> for ( x = 0 ; x < hdr -> width ; x ++ ) { //<S2SV> z <<= hdr -> depth ; //<S2SV> if ( RAS_ISRGB ( hdr ) ) { //<S2SV> v = RAS_RED ( ( jas_matrix_getv ( data [ 0 ] , x ) ) ) | //<S2SV> RAS_GREEN ( ( jas_matrix_getv ( data [ 1 ] , x ) ) ) | //<S2SV> RAS_BLUE ( ( jas_matrix_getv ( data [ 2 ] , x ) ) ) ; //<S2SV> } else { //<S2SV> v = ( jas_matrix_getv ( data [ 0 ] , x ) ) ; //<S2SV> } //<S2SV> z |= v & RAS_ONES ( hdr -> depth ) ; //<S2SV> nz += hdr -> depth ; //<S2SV> while ( nz >= 8 ) { //<S2SV> c = ( z >> ( nz - 8 ) ) & 0xff ; //<S2SV> if ( jas_stream_putc ( out , c ) == EOF ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> nz -= 8 ; //<S2SV> z &= RAS_ONES ( nz ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( nz > 0 ) { //<S2SV> c = ( z >> ( 8 - nz ) ) & RAS_ONES ( nz ) ; //<S2SV> if ( jas_stream_putc ( out , c ) == EOF ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( pad % 2 ) { //<S2SV> if ( jas_stream_putc ( out , 0 ) == EOF ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < numcmpts ; ++ i ) { //<S2SV> jas_matrix_destroy ( data [ i ] ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 