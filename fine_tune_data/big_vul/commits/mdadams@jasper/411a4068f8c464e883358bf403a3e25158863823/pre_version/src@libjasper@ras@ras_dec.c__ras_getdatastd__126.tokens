static int ras_getdatastd ( jas_stream_t * in , ras_hdr_t * hdr , ras_cmap_t * cmap , //<S2SV> jas_image_t * image ) //<S2SV> { //<S2SV> int pad ; //<S2SV> int nz ; //<S2SV> int z ; //<S2SV> int c ; //<S2SV> int y ; //<S2SV> int x ; //<S2SV> int v ; //<S2SV> int i ; //<S2SV> jas_matrix_t * data [ 3 ] ; //<S2SV> cmap = 0 ; //<S2SV> for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { //<S2SV> data [ i ] = jas_matrix_create ( 1 , jas_image_width ( image ) ) ; //<S2SV> assert ( data [ i ] ) ; //<S2SV> } //<S2SV> pad = RAS_ROWSIZE ( hdr ) - ( hdr -> width * hdr -> depth + 7 ) / 8 ; //<S2SV> for ( y = 0 ; y < hdr -> height ; y ++ ) { //<S2SV> nz = 0 ; //<S2SV> z = 0 ; //<S2SV> for ( x = 0 ; x < hdr -> width ; x ++ ) { //<S2SV> while ( nz < hdr -> depth ) { //<S2SV> if ( ( c = jas_stream_getc ( in ) ) == EOF ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> z = ( z << 8 ) | c ; //<S2SV> nz += 8 ; //<S2SV> } //<S2SV> v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; //<S2SV> z &= RAS_ONES ( nz - hdr -> depth ) ; //<S2SV> nz -= hdr -> depth ; //<S2SV> if ( jas_image_numcmpts ( image ) == 3 ) { //<S2SV> jas_matrix_setv ( data [ 0 ] , x , ( RAS_GETRED ( v ) ) ) ; //<S2SV> jas_matrix_setv ( data [ 1 ] , x , ( RAS_GETGREEN ( v ) ) ) ; //<S2SV> jas_matrix_setv ( data [ 2 ] , x , ( RAS_GETBLUE ( v ) ) ) ; //<S2SV> } else { //<S2SV> jas_matrix_setv ( data [ 0 ] , x , ( v ) ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( pad ) { //<S2SV> if ( ( c = jas_stream_getc ( in ) ) == EOF ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { //<S2SV> if ( jas_image_writecmpt ( image , i , 0 , y , hdr -> width , 1 , //<S2SV> data [ i ] ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { //<S2SV> jas_matrix_destroy ( data [ i ] ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 