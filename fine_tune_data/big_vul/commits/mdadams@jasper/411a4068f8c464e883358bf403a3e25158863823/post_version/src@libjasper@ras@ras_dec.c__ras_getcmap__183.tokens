static int ras_getcmap ( jas_stream_t * in , ras_hdr_t * hdr , ras_cmap_t * cmap ) //<S2SV> { //<S2SV> int i ; //<S2SV> int j ; //<S2SV> int x ; //<S2SV> int c ; //<S2SV> int numcolors ; //<S2SV> int actualnumcolors ; //<S2SV> switch ( hdr -> maptype ) { //<S2SV> case RAS_MT_NONE : //<S2SV> break ; //<S2SV> case RAS_MT_EQUALRGB : //<S2SV> { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>palettized<S2SV_blank>images<S2SV_blank>not<S2SV_blank>fully<S2SV_blank>supported\\n" ) ; //<S2SV> numcolors = 1 << hdr -> depth ; //<S2SV> if ( numcolors > RAS_CMAP_MAXSIZ ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> actualnumcolors = hdr -> maplength / 3 ; //<S2SV> for ( i = 0 ; i < numcolors ; i ++ ) { //<S2SV> cmap -> data [ i ] = 0 ; //<S2SV> } //<S2SV> if ( ( hdr -> maplength % 3 ) || hdr -> maplength < 0 || //<S2SV> hdr -> maplength > 3 * numcolors ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 3 ; i ++ ) { //<S2SV> for ( j = 0 ; j < actualnumcolors ; j ++ ) { //<S2SV> if ( ( c = jas_stream_getc ( in ) ) == EOF ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> x = 0 ; //<S2SV> switch ( i ) { //<S2SV> case 0 : //<S2SV> x = RAS_RED ( c ) ; //<S2SV> break ; //<S2SV> case 1 : //<S2SV> x = RAS_GREEN ( c ) ; //<S2SV> break ; //<S2SV> case 2 : //<S2SV> x = RAS_BLUE ( c ) ; //<S2SV> break ; //<S2SV> } //<S2SV> cmap -> data [ j ] |= x ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> return - 1 ; //<S2SV> break ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 