static int jpc_dec_tiledecode ( jpc_dec_t * dec , jpc_dec_tile_t * tile ) //<S2SV> { //<S2SV> int i ; //<S2SV> int j ; //<S2SV> jpc_dec_tcomp_t * tcomp ; //<S2SV> jpc_dec_rlvl_t * rlvl ; //<S2SV> jpc_dec_band_t * band ; //<S2SV> int compno ; //<S2SV> int rlvlno ; //<S2SV> int bandno ; //<S2SV> int adjust ; //<S2SV> int v ; //<S2SV> jpc_dec_ccp_t * ccp ; //<S2SV> jpc_dec_cmpt_t * cmpt ; //<S2SV> if ( jpc_dec_decodecblks ( dec , tile ) ) { //<S2SV> jas_eprintf ( "jpc_dec_decodecblks<S2SV_blank>failed\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( compno = 0 , tcomp = tile -> tcomps ; compno < dec -> numcomps ; //<S2SV> ++ compno , ++ tcomp ) { //<S2SV> ccp = & tile -> cp -> ccps [ compno ] ; //<S2SV> for ( rlvlno = 0 , rlvl = tcomp -> rlvls ; rlvlno < tcomp -> numrlvls ; //<S2SV> ++ rlvlno , ++ rlvl ) { //<S2SV> if ( ! rlvl -> bands ) { //<S2SV> continue ; //<S2SV> } //<S2SV> for ( bandno = 0 , band = rlvl -> bands ; //<S2SV> bandno < rlvl -> numbands ; ++ bandno , ++ band ) { //<S2SV> if ( ! band -> data ) { //<S2SV> continue ; //<S2SV> } //<S2SV> jpc_undo_roi ( band -> data , band -> roishift , ccp -> roishift - //<S2SV> band -> roishift , band -> numbps ) ; //<S2SV> if ( tile -> realmode ) { //<S2SV> jas_matrix_asl ( band -> data , JPC_FIX_FRACBITS ) ; //<S2SV> jpc_dequantize ( band -> data , band -> absstepsize ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( compno = 0 , tcomp = tile -> tcomps ; compno < dec -> numcomps ; //<S2SV> ++ compno , ++ tcomp ) { //<S2SV> ccp = & tile -> cp -> ccps [ compno ] ; //<S2SV> jpc_tsfb_synthesize ( tcomp -> tsfb , tcomp -> data ) ; //<S2SV> } //<S2SV> switch ( tile -> cp -> mctid ) { //<S2SV> case JPC_MCT_RCT : //<S2SV> if ( dec -> numcomps < 3 ) { //<S2SV> jas_eprintf ( "RCT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> jpc_irct ( tile -> tcomps [ 0 ] . data , tile -> tcomps [ 1 ] . data , //<S2SV> tile -> tcomps [ 2 ] . data ) ; //<S2SV> break ; //<S2SV> case JPC_MCT_ICT : //<S2SV> if ( dec -> numcomps < 3 ) { //<S2SV> jas_eprintf ( "ICT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> jpc_iict ( tile -> tcomps [ 0 ] . data , tile -> tcomps [ 1 ] . data , //<S2SV> tile -> tcomps [ 2 ] . data ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( tile -> realmode ) { //<S2SV> for ( compno = 0 , tcomp = tile -> tcomps ; compno < dec -> numcomps ; //<S2SV> ++ compno , ++ tcomp ) { //<S2SV> for ( i = 0 ; i < jas_matrix_numrows ( tcomp -> data ) ; ++ i ) { //<S2SV> for ( j = 0 ; j < jas_matrix_numcols ( tcomp -> data ) ; ++ j ) { //<S2SV> v = jas_matrix_get ( tcomp -> data , i , j ) ; //<S2SV> v = jpc_fix_round ( v ) ; //<S2SV> jas_matrix_set ( tcomp -> data , i , j , jpc_fixtoint ( v ) ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( compno = 0 , tcomp = tile -> tcomps , cmpt = dec -> cmpts ; compno < //<S2SV> dec -> numcomps ; ++ compno , ++ tcomp , ++ cmpt ) { //<S2SV> adjust = cmpt -> sgnd ? 0 : ( 1 << ( cmpt -> prec - 1 ) ) ; //<S2SV> for ( i = 0 ; i < jas_matrix_numrows ( tcomp -> data ) ; ++ i ) { //<S2SV> for ( j = 0 ; j < jas_matrix_numcols ( tcomp -> data ) ; ++ j ) { //<S2SV> * jas_matrix_getref ( tcomp -> data , i , j ) += adjust ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( compno = 0 , tcomp = tile -> tcomps , cmpt = dec -> cmpts ; compno < //<S2SV> dec -> numcomps ; ++ compno , ++ tcomp , ++ cmpt ) { //<S2SV> jpc_fix_t mn ; //<S2SV> jpc_fix_t mx ; //<S2SV> mn = cmpt -> sgnd ? ( - ( 1 << ( cmpt -> prec - 1 ) ) ) : ( 0 ) ; //<S2SV> mx = cmpt -> sgnd ? ( ( 1 << ( cmpt -> prec - 1 ) ) - 1 ) : ( ( 1 << //<S2SV> cmpt -> prec ) - 1 ) ; //<S2SV> jas_matrix_clip ( tcomp -> data , mn , mx ) ; //<S2SV> } //<S2SV> for ( compno = 0 , tcomp = tile -> tcomps , cmpt = dec -> cmpts ; compno < //<S2SV> dec -> numcomps ; ++ compno , ++ tcomp , ++ cmpt ) { //<S2SV> if ( jas_image_writecmpt ( dec -> image , compno , tcomp -> xstart - //<S2SV> JPC_CEILDIV ( dec -> xstart , cmpt -> hstep ) , tcomp -> ystart - //<S2SV> JPC_CEILDIV ( dec -> ystart , cmpt -> vstep ) , jas_matrix_numcols ( //<S2SV> tcomp -> data ) , jas_matrix_numrows ( tcomp -> data ) , tcomp -> data ) ) { //<S2SV> jas_eprintf ( "write<S2SV_blank>component<S2SV_blank>failed\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 