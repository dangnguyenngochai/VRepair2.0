static int jp2_pclr_getdata ( jp2_box_t * box , jas_stream_t * in ) //<S2SV> { //<S2SV> jp2_pclr_t * pclr = & box -> data . pclr ; //<S2SV> int lutsize ; //<S2SV> unsigned int i ; //<S2SV> unsigned int j ; //<S2SV> int_fast32_t x ; //<S2SV> pclr -> lutdata = 0 ; //<S2SV> if ( jp2_getuint16 ( in , & pclr -> numlutents ) || //<S2SV> jp2_getuint8 ( in , & pclr -> numchans ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> lutsize = pclr -> numlutents * pclr -> numchans ; //<S2SV> if ( ! ( pclr -> lutdata = jas_alloc2 ( lutsize , sizeof ( int_fast32_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! ( pclr -> bpc = jas_alloc2 ( pclr -> numchans , sizeof ( uint_fast8_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < pclr -> numchans ; ++ i ) { //<S2SV> if ( jp2_getuint8 ( in , & pclr -> bpc [ i ] ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < pclr -> numlutents ; ++ i ) { //<S2SV> for ( j = 0 ; j < pclr -> numchans ; ++ j ) { //<S2SV> if ( jp2_getint ( in , ( pclr -> bpc [ j ] & 0x80 ) != 0 , //<S2SV> ( pclr -> bpc [ j ] & 0x7f ) + 1 , & x ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> pclr -> lutdata [ i * pclr -> numchans + j ] = x ; //<S2SV> } //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 