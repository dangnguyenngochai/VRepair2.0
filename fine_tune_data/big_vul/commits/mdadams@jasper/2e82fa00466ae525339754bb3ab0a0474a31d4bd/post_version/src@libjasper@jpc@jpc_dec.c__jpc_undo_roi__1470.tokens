static void jpc_undo_roi ( jas_matrix_t * x , int roishift , int bgshift , int numbps ) //<S2SV> { //<S2SV> int i ; //<S2SV> int j ; //<S2SV> int thresh ; //<S2SV> jpc_fix_t val ; //<S2SV> jpc_fix_t mag ; //<S2SV> bool warn ; //<S2SV> uint_fast32_t mask ; //<S2SV> if ( roishift < 0 ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>forcing<S2SV_blank>negative<S2SV_blank>ROI<S2SV_blank>shift<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>" //<S2SV> "(bitstream<S2SV_blank>is<S2SV_blank>probably<S2SV_blank>corrupt)\\n" ) ; //<S2SV> roishift = 0 ; //<S2SV> } //<S2SV> if ( roishift == 0 && bgshift == 0 ) { //<S2SV> return ; //<S2SV> } //<S2SV> thresh = 1 << roishift ; //<S2SV> warn = false ; //<S2SV> for ( i = 0 ; i < jas_matrix_numrows ( x ) ; ++ i ) { //<S2SV> for ( j = 0 ; j < jas_matrix_numcols ( x ) ; ++ j ) { //<S2SV> val = jas_matrix_get ( x , i , j ) ; //<S2SV> mag = JAS_ABS ( val ) ; //<S2SV> if ( mag >= thresh ) { //<S2SV> mag >>= roishift ; //<S2SV> val = ( val < 0 ) ? ( - mag ) : mag ; //<S2SV> jas_matrix_set ( x , i , j , val ) ; //<S2SV> } else { //<S2SV> mag <<= bgshift ; //<S2SV> mask = ( JAS_CAST ( uint_fast32_t , 1 ) << numbps ) - 1 ; //<S2SV> if ( mag & ( ~ mask ) ) { //<S2SV> if ( ! warn ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>possibly<S2SV_blank>corrupt<S2SV_blank>code<S2SV_blank>stream\\n" ) ; //<S2SV> warn = true ; //<S2SV> } //<S2SV> mag &= mask ; //<S2SV> } //<S2SV> val = ( val < 0 ) ? ( - mag ) : mag ; //<S2SV> jas_matrix_set ( x , i , j , val ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 