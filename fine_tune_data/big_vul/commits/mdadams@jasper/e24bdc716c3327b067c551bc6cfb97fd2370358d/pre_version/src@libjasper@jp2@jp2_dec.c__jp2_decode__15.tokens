jas_image_t * jp2_decode ( jas_stream_t * in , char * optstr ) //<S2SV> { //<S2SV> jp2_box_t * box ; //<S2SV> int found ; //<S2SV> jas_image_t * image ; //<S2SV> jp2_dec_t * dec ; //<S2SV> bool samedtype ; //<S2SV> int dtype ; //<S2SV> unsigned int i ; //<S2SV> jp2_cmap_t * cmapd ; //<S2SV> jp2_pclr_t * pclrd ; //<S2SV> jp2_cdef_t * cdefd ; //<S2SV> unsigned int channo ; //<S2SV> int newcmptno ; //<S2SV> int_fast32_t * lutents ; //<S2SV> # if 0 //<S2SV> jp2_cdefchan_t * cdefent ; //<S2SV> int cmptno ; //<S2SV> # endif //<S2SV> jp2_cmapent_t * cmapent ; //<S2SV> jas_icchdr_t icchdr ; //<S2SV> jas_iccprof_t * iccprof ; //<S2SV> dec = 0 ; //<S2SV> box = 0 ; //<S2SV> image = 0 ; //<S2SV> if ( ! ( dec = jp2_dec_create ( ) ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ! ( box = jp2_box_get ( in ) ) ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>cannot<S2SV_blank>get<S2SV_blank>box\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( box -> type != JP2_BOX_JP ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>expecting<S2SV_blank>signature<S2SV_blank>box\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( box -> data . jp . magic != JP2_JP_MAGIC ) { //<S2SV> jas_eprintf ( "incorrect<S2SV_blank>magic<S2SV_blank>number\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> jp2_box_destroy ( box ) ; //<S2SV> box = 0 ; //<S2SV> if ( ! ( box = jp2_box_get ( in ) ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( box -> type != JP2_BOX_FTYP ) { //<S2SV> jas_eprintf ( "expecting<S2SV_blank>file<S2SV_blank>type<S2SV_blank>box\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> jp2_box_destroy ( box ) ; //<S2SV> box = 0 ; //<S2SV> found = 0 ; //<S2SV> while ( ( box = jp2_box_get ( in ) ) ) { //<S2SV> if ( jas_getdbglevel ( ) >= 1 ) { //<S2SV> jas_eprintf ( "box<S2SV_blank>type<S2SV_blank>%s\\n" , box -> info -> name ) ; //<S2SV> } //<S2SV> switch ( box -> type ) { //<S2SV> case JP2_BOX_JP2C : //<S2SV> found = 1 ; //<S2SV> break ; //<S2SV> case JP2_BOX_IHDR : //<S2SV> if ( ! dec -> ihdr ) { //<S2SV> dec -> ihdr = box ; //<S2SV> box = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> case JP2_BOX_BPCC : //<S2SV> if ( ! dec -> bpcc ) { //<S2SV> dec -> bpcc = box ; //<S2SV> box = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> case JP2_BOX_CDEF : //<S2SV> if ( ! dec -> cdef ) { //<S2SV> dec -> cdef = box ; //<S2SV> box = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> case JP2_BOX_PCLR : //<S2SV> if ( ! dec -> pclr ) { //<S2SV> dec -> pclr = box ; //<S2SV> box = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> case JP2_BOX_CMAP : //<S2SV> if ( ! dec -> cmap ) { //<S2SV> dec -> cmap = box ; //<S2SV> box = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> case JP2_BOX_COLR : //<S2SV> if ( ! dec -> colr ) { //<S2SV> dec -> colr = box ; //<S2SV> box = 0 ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> if ( box ) { //<S2SV> jp2_box_destroy ( box ) ; //<S2SV> box = 0 ; //<S2SV> } //<S2SV> if ( found ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! found ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>no<S2SV_blank>code<S2SV_blank>stream<S2SV_blank>found\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ! ( dec -> image = jpc_decode ( in , optstr ) ) ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>cannot<S2SV_blank>decode<S2SV_blank>code<S2SV_blank>stream\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ! dec -> ihdr ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>missing<S2SV_blank>IHDR<S2SV_blank>box\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( dec -> ihdr -> data . ihdr . numcmpts != JAS_CAST ( uint , //<S2SV> jas_image_numcmpts ( dec -> image ) ) ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>mismatch\\n" ) ; //<S2SV> } //<S2SV> if ( ! jas_image_numcmpts ( dec -> image ) ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>no<S2SV_blank>components\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> samedtype = true ; //<S2SV> dtype = jas_image_cmptdtype ( dec -> image , 0 ) ; //<S2SV> for ( i = 1 ; i < JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; ++ i ) { //<S2SV> if ( jas_image_cmptdtype ( dec -> image , i ) != dtype ) { //<S2SV> samedtype = false ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( samedtype && dec -> ihdr -> data . ihdr . bpc != JP2_DTYPETOBPC ( dtype ) ) || //<S2SV> ( ! samedtype && dec -> ihdr -> data . ihdr . bpc != JP2_IHDR_BPCNULL ) ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch\\n" ) ; //<S2SV> } //<S2SV> if ( dec -> ihdr -> data . ihdr . comptype != JP2_IHDR_COMPTYPE ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>unsupported<S2SV_blank>compression<S2SV_blank>type\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( dec -> bpcc ) { //<S2SV> if ( dec -> bpcc -> data . bpcc . numcmpts != JAS_CAST ( uint , jas_image_numcmpts ( //<S2SV> dec -> image ) ) ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>mismatch\\n" ) ; //<S2SV> } //<S2SV> if ( ! samedtype ) { //<S2SV> for ( i = 0 ; i < JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; //<S2SV> ++ i ) { //<S2SV> if ( jas_image_cmptdtype ( dec -> image , i ) != //<S2SV> JP2_BPCTODTYPE ( dec -> bpcc -> data . bpcc . bpcs [ i ] ) ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>component<S2SV_blank>data<S2SV_blank>type<S2SV_blank>mismatch\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>superfluous<S2SV_blank>BPCC<S2SV_blank>box\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! dec -> colr ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>no<S2SV_blank>COLR<S2SV_blank>box\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> switch ( dec -> colr -> data . colr . method ) { //<S2SV> case JP2_COLR_ENUM : //<S2SV> jas_image_setclrspc ( dec -> image , jp2_getcs ( & dec -> colr -> data . colr ) ) ; //<S2SV> break ; //<S2SV> case JP2_COLR_ICC : //<S2SV> iccprof = jas_iccprof_createfrombuf ( dec -> colr -> data . colr . iccp , //<S2SV> dec -> colr -> data . colr . iccplen ) ; //<S2SV> if ( ! iccprof ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>ICC<S2SV_blank>profile\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> jas_iccprof_gethdr ( iccprof , & icchdr ) ; //<S2SV> jas_eprintf ( "ICC<S2SV_blank>Profile<S2SV_blank>CS<S2SV_blank>%08x\\n" , icchdr . colorspc ) ; //<S2SV> jas_image_setclrspc ( dec -> image , fromiccpcs ( icchdr . colorspc ) ) ; //<S2SV> dec -> image -> cmprof_ = jas_cmprof_createfromiccprof ( iccprof ) ; //<S2SV> assert ( dec -> image -> cmprof_ ) ; //<S2SV> jas_iccprof_destroy ( iccprof ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( dec -> cmap && ! dec -> pclr ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>missing<S2SV_blank>PCLR<S2SV_blank>box<S2SV_blank>or<S2SV_blank>superfluous<S2SV_blank>CMAP<S2SV_blank>box\\n" ) ; //<S2SV> jp2_box_destroy ( dec -> cmap ) ; //<S2SV> dec -> cmap = 0 ; //<S2SV> } //<S2SV> if ( ! dec -> cmap && dec -> pclr ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>missing<S2SV_blank>CMAP<S2SV_blank>box<S2SV_blank>or<S2SV_blank>superfluous<S2SV_blank>PCLR<S2SV_blank>box\\n" ) ; //<S2SV> jp2_box_destroy ( dec -> pclr ) ; //<S2SV> dec -> pclr = 0 ; //<S2SV> } //<S2SV> dec -> numchans = dec -> cmap ? dec -> cmap -> data . cmap . numchans : //<S2SV> JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; //<S2SV> if ( dec -> cmap ) { //<S2SV> for ( i = 0 ; i < dec -> numchans ; ++ i ) { //<S2SV> if ( dec -> cmap -> data . cmap . ents [ i ] . cmptno >= JAS_CAST ( uint , //<S2SV> jas_image_numcmpts ( dec -> image ) ) ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>invalid<S2SV_blank>component<S2SV_blank>number<S2SV_blank>in<S2SV_blank>CMAP<S2SV_blank>box\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( dec -> cmap -> data . cmap . ents [ i ] . pcol >= //<S2SV> dec -> pclr -> data . pclr . numchans ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>invalid<S2SV_blank>CMAP<S2SV_blank>LUT<S2SV_blank>index\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( ! ( dec -> chantocmptlut = jas_alloc2 ( dec -> numchans , //<S2SV> sizeof ( uint_fast16_t ) ) ) ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>no<S2SV_blank>memory\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ! dec -> cmap ) { //<S2SV> for ( i = 0 ; i < dec -> numchans ; ++ i ) { //<S2SV> dec -> chantocmptlut [ i ] = i ; //<S2SV> } //<S2SV> } else { //<S2SV> cmapd = & dec -> cmap -> data . cmap ; //<S2SV> pclrd = & dec -> pclr -> data . pclr ; //<S2SV> cdefd = & dec -> cdef -> data . cdef ; //<S2SV> for ( channo = 0 ; channo < cmapd -> numchans ; ++ channo ) { //<S2SV> cmapent = & cmapd -> ents [ channo ] ; //<S2SV> if ( cmapent -> map == JP2_CMAP_DIRECT ) { //<S2SV> dec -> chantocmptlut [ channo ] = channo ; //<S2SV> } else if ( cmapent -> map == JP2_CMAP_PALETTE ) { //<S2SV> lutents = jas_alloc2 ( pclrd -> numlutents , sizeof ( int_fast32_t ) ) ; //<S2SV> for ( i = 0 ; i < pclrd -> numlutents ; ++ i ) { //<S2SV> lutents [ i ] = pclrd -> lutdata [ cmapent -> pcol + i * pclrd -> numchans ] ; //<S2SV> } //<S2SV> newcmptno = jas_image_numcmpts ( dec -> image ) ; //<S2SV> jas_image_depalettize ( dec -> image , cmapent -> cmptno , //<S2SV> pclrd -> numlutents , lutents , //<S2SV> JP2_BPCTODTYPE ( pclrd -> bpc [ cmapent -> pcol ] ) , newcmptno ) ; //<S2SV> dec -> chantocmptlut [ channo ] = newcmptno ; //<S2SV> jas_free ( lutents ) ; //<S2SV> # if 0 //<S2SV> if ( dec -> cdef ) { //<S2SV> cdefent = jp2_cdef_lookup ( cdefd , channo ) ; //<S2SV> if ( ! cdefent ) { //<S2SV> abort ( ) ; //<S2SV> } //<S2SV> jas_image_setcmpttype ( dec -> image , newcmptno , jp2_getct ( jas_image_clrspc ( dec -> image ) , cdefent -> type , cdefent -> assoc ) ) ; //<S2SV> } else { //<S2SV> jas_image_setcmpttype ( dec -> image , newcmptno , jp2_getct ( jas_image_clrspc ( dec -> image ) , 0 , channo + 1 ) ) ; //<S2SV> } //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < JAS_CAST ( uint , jas_image_numcmpts ( dec -> image ) ) ; ++ i ) { //<S2SV> jas_image_setcmpttype ( dec -> image , i , JAS_IMAGE_CT_UNKNOWN ) ; //<S2SV> } //<S2SV> if ( dec -> cdef ) { //<S2SV> for ( i = 0 ; i < dec -> numchans ; ++ i ) { //<S2SV> if ( dec -> cdef -> data . cdef . ents [ i ] . channo >= dec -> numchans ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>invalid<S2SV_blank>channel<S2SV_blank>number<S2SV_blank>in<S2SV_blank>CDEF<S2SV_blank>box\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> jas_image_setcmpttype ( dec -> image , //<S2SV> dec -> chantocmptlut [ dec -> cdef -> data . cdef . ents [ i ] . channo ] , //<S2SV> jp2_getct ( jas_image_clrspc ( dec -> image ) , //<S2SV> dec -> cdef -> data . cdef . ents [ i ] . type , //<S2SV> dec -> cdef -> data . cdef . ents [ i ] . assoc ) ) ; //<S2SV> } //<S2SV> } else { //<S2SV> for ( i = 0 ; i < dec -> numchans ; ++ i ) { //<S2SV> jas_image_setcmpttype ( dec -> image , dec -> chantocmptlut [ i ] , //<S2SV> jp2_getct ( jas_image_clrspc ( dec -> image ) , 0 , i + 1 ) ) ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = jas_image_numcmpts ( dec -> image ) ; i > 0 ; -- i ) { //<S2SV> if ( jas_image_cmpttype ( dec -> image , i - 1 ) == JAS_IMAGE_CT_UNKNOWN ) { //<S2SV> jas_image_delcmpt ( dec -> image , i - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! jas_image_numcmpts ( dec -> image ) ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>no<S2SV_blank>components\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> # if 0 //<S2SV> jas_eprintf ( "no<S2SV_blank>of<S2SV_blank>components<S2SV_blank>is<S2SV_blank>%d\\n" , jas_image_numcmpts ( dec -> image ) ) ; //<S2SV> # endif //<S2SV> image = dec -> image ; //<S2SV> dec -> image = 0 ; //<S2SV> jp2_dec_destroy ( dec ) ; //<S2SV> return image ; //<S2SV> error : //<S2SV> if ( box ) { //<S2SV> jp2_box_destroy ( box ) ; //<S2SV> } //<S2SV> if ( dec ) { //<S2SV> jp2_dec_destroy ( dec ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 