void jpc_qmfb_split_colres ( jpc_fix_t * a , int numrows , int numcols , //<S2SV> int stride , int parity ) //<S2SV> { //<S2SV> int bufsize = JPC_CEILDIVPOW2 ( numrows , 1 ) ; //<S2SV> jpc_fix_t splitbuf [ QMFB_SPLITBUFSIZE * JPC_QMFB_COLGRPSIZE ] ; //<S2SV> jpc_fix_t * buf = splitbuf ; //<S2SV> jpc_fix_t * srcptr ; //<S2SV> jpc_fix_t * dstptr ; //<S2SV> register jpc_fix_t * srcptr2 ; //<S2SV> register jpc_fix_t * dstptr2 ; //<S2SV> register int n ; //<S2SV> register int i ; //<S2SV> int m ; //<S2SV> int hstartcol ; //<S2SV> if ( bufsize > QMFB_SPLITBUFSIZE ) { //<S2SV> if ( ! ( buf = jas_alloc3 ( bufsize , numcols , sizeof ( jpc_fix_t ) ) ) ) { //<S2SV> abort ( ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( numrows >= 2 ) { //<S2SV> hstartcol = ( numrows + 1 - parity ) >> 1 ; //<S2SV> m = numrows - hstartcol ; //<S2SV> n = m ; //<S2SV> dstptr = buf ; //<S2SV> srcptr = & a [ ( 1 - parity ) * stride ] ; //<S2SV> while ( n -- > 0 ) { //<S2SV> dstptr2 = dstptr ; //<S2SV> srcptr2 = srcptr ; //<S2SV> for ( i = 0 ; i < numcols ; ++ i ) { //<S2SV> * dstptr2 = * srcptr2 ; //<S2SV> ++ dstptr2 ; //<S2SV> ++ srcptr2 ; //<S2SV> } //<S2SV> dstptr += numcols ; //<S2SV> srcptr += stride << 1 ; //<S2SV> } //<S2SV> dstptr = & a [ ( 1 - parity ) * stride ] ; //<S2SV> srcptr = & a [ ( 2 - parity ) * stride ] ; //<S2SV> n = numrows - m - ( ! parity ) ; //<S2SV> while ( n -- > 0 ) { //<S2SV> dstptr2 = dstptr ; //<S2SV> srcptr2 = srcptr ; //<S2SV> for ( i = 0 ; i < numcols ; ++ i ) { //<S2SV> * dstptr2 = * srcptr2 ; //<S2SV> ++ dstptr2 ; //<S2SV> ++ srcptr2 ; //<S2SV> } //<S2SV> dstptr += stride ; //<S2SV> srcptr += stride << 1 ; //<S2SV> } //<S2SV> dstptr = & a [ hstartcol * stride ] ; //<S2SV> srcptr = buf ; //<S2SV> n = m ; //<S2SV> while ( n -- > 0 ) { //<S2SV> dstptr2 = dstptr ; //<S2SV> srcptr2 = srcptr ; //<S2SV> for ( i = 0 ; i < numcols ; ++ i ) { //<S2SV> * dstptr2 = * srcptr2 ; //<S2SV> ++ dstptr2 ; //<S2SV> ++ srcptr2 ; //<S2SV> } //<S2SV> dstptr += stride ; //<S2SV> srcptr += numcols ; //<S2SV> } //<S2SV> } //<S2SV> if ( buf != splitbuf ) { //<S2SV> jas_free ( buf ) ; //<S2SV> } //<S2SV> } //<S2SV> 