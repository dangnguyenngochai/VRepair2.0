void jpc_qmfb_split_col ( jpc_fix_t * a , int numrows , int stride , //<S2SV> int parity ) //<S2SV> { //<S2SV> int bufsize = JPC_CEILDIVPOW2 ( numrows , 1 ) ; //<S2SV> jpc_fix_t splitbuf [ QMFB_SPLITBUFSIZE ] ; //<S2SV> jpc_fix_t * buf = splitbuf ; //<S2SV> register jpc_fix_t * srcptr ; //<S2SV> register jpc_fix_t * dstptr ; //<S2SV> register int n ; //<S2SV> register int m ; //<S2SV> int hstartrow ; //<S2SV> if ( bufsize > QMFB_SPLITBUFSIZE ) { //<S2SV> if ( ! ( buf = jas_alloc2 ( bufsize , sizeof ( jpc_fix_t ) ) ) ) { //<S2SV> abort ( ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( numrows >= 2 ) { //<S2SV> hstartrow = ( numrows + 1 - parity ) >> 1 ; //<S2SV> m = numrows - hstartrow ; //<S2SV> n = m ; //<S2SV> dstptr = buf ; //<S2SV> srcptr = & a [ ( 1 - parity ) * stride ] ; //<S2SV> while ( n -- > 0 ) { //<S2SV> * dstptr = * srcptr ; //<S2SV> ++ dstptr ; //<S2SV> srcptr += stride << 1 ; //<S2SV> } //<S2SV> dstptr = & a [ ( 1 - parity ) * stride ] ; //<S2SV> srcptr = & a [ ( 2 - parity ) * stride ] ; //<S2SV> n = numrows - m - ( ! parity ) ; //<S2SV> while ( n -- > 0 ) { //<S2SV> * dstptr = * srcptr ; //<S2SV> dstptr += stride ; //<S2SV> srcptr += stride << 1 ; //<S2SV> } //<S2SV> dstptr = & a [ hstartrow * stride ] ; //<S2SV> srcptr = buf ; //<S2SV> n = m ; //<S2SV> while ( n -- > 0 ) { //<S2SV> * dstptr = * srcptr ; //<S2SV> dstptr += stride ; //<S2SV> ++ srcptr ; //<S2SV> } //<S2SV> } //<S2SV> if ( buf != splitbuf ) { //<S2SV> jas_free ( buf ) ; //<S2SV> } //<S2SV> } //<S2SV> 