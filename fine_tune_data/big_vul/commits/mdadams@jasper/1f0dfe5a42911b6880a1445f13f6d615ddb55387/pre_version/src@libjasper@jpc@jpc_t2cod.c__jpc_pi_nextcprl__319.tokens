static int jpc_pi_nextcprl ( register jpc_pi_t * pi ) //<S2SV> { //<S2SV> int rlvlno ; //<S2SV> jpc_pirlvl_t * pirlvl ; //<S2SV> jpc_pchg_t * pchg ; //<S2SV> int prchind ; //<S2SV> int prcvind ; //<S2SV> int * prclyrno ; //<S2SV> uint_fast32_t trx0 ; //<S2SV> uint_fast32_t try0 ; //<S2SV> uint_fast32_t r ; //<S2SV> uint_fast32_t rpx ; //<S2SV> uint_fast32_t rpy ; //<S2SV> pchg = pi -> pchg ; //<S2SV> if ( ! pi -> prgvolfirst ) { //<S2SV> goto skip ; //<S2SV> } else { //<S2SV> pi -> prgvolfirst = 0 ; //<S2SV> } //<S2SV> for ( pi -> compno = pchg -> compnostart , pi -> picomp = //<S2SV> & pi -> picomps [ pi -> compno ] ; pi -> compno < JAS_CAST ( int , pchg -> compnoend ) && pi -> compno < pi -> numcomps ; ++ pi -> compno , //<S2SV> ++ pi -> picomp ) { //<S2SV> pirlvl = pi -> picomp -> pirlvls ; //<S2SV> pi -> xstep = pi -> picomp -> hsamp * ( 1 << ( pirlvl -> prcwidthexpn + //<S2SV> pi -> picomp -> numrlvls - 1 ) ) ; //<S2SV> pi -> ystep = pi -> picomp -> vsamp * ( 1 << ( pirlvl -> prcheightexpn + //<S2SV> pi -> picomp -> numrlvls - 1 ) ) ; //<S2SV> for ( rlvlno = 1 , pirlvl = & pi -> picomp -> pirlvls [ 1 ] ; //<S2SV> rlvlno < pi -> picomp -> numrlvls ; ++ rlvlno , ++ pirlvl ) { //<S2SV> pi -> xstep = JAS_MIN ( pi -> xstep , pi -> picomp -> hsamp * ( 1 << //<S2SV> ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls - //<S2SV> rlvlno - 1 ) ) ) ; //<S2SV> pi -> ystep = JAS_MIN ( pi -> ystep , pi -> picomp -> vsamp * ( 1 << //<S2SV> ( pirlvl -> prcheightexpn + pi -> picomp -> numrlvls - //<S2SV> rlvlno - 1 ) ) ) ; //<S2SV> } //<S2SV> for ( pi -> y = pi -> ystart ; pi -> y < pi -> yend ; //<S2SV> pi -> y += pi -> ystep - ( pi -> y % pi -> ystep ) ) { //<S2SV> for ( pi -> x = pi -> xstart ; pi -> x < pi -> xend ; //<S2SV> pi -> x += pi -> xstep - ( pi -> x % pi -> xstep ) ) { //<S2SV> for ( pi -> rlvlno = pchg -> rlvlnostart , //<S2SV> pi -> pirlvl = & pi -> picomp -> pirlvls [ pi -> rlvlno ] ; //<S2SV> pi -> rlvlno < pi -> picomp -> numrlvls && pi -> rlvlno < //<S2SV> pchg -> rlvlnoend ; ++ pi -> rlvlno , ++ pi -> pirlvl ) { //<S2SV> if ( pi -> pirlvl -> numprcs == 0 ) { //<S2SV> continue ; //<S2SV> } //<S2SV> r = pi -> picomp -> numrlvls - 1 - pi -> rlvlno ; //<S2SV> trx0 = JPC_CEILDIV ( pi -> xstart , pi -> picomp -> hsamp << r ) ; //<S2SV> try0 = JPC_CEILDIV ( pi -> ystart , pi -> picomp -> vsamp << r ) ; //<S2SV> rpx = r + pi -> pirlvl -> prcwidthexpn ; //<S2SV> rpy = r + pi -> pirlvl -> prcheightexpn ; //<S2SV> if ( ( ( pi -> x == pi -> xstart && ( ( trx0 << r ) % ( 1 << rpx ) ) ) || //<S2SV> ! ( pi -> x % ( pi -> picomp -> hsamp << rpx ) ) ) && //<S2SV> ( ( pi -> y == pi -> ystart && ( ( try0 << r ) % ( 1 << rpy ) ) ) || //<S2SV> ! ( pi -> y % ( pi -> picomp -> vsamp << rpy ) ) ) ) { //<S2SV> prchind = JPC_FLOORDIVPOW2 ( JPC_CEILDIV ( pi -> x , pi -> picomp -> hsamp //<S2SV> << r ) , pi -> pirlvl -> prcwidthexpn ) - JPC_FLOORDIVPOW2 ( trx0 , //<S2SV> pi -> pirlvl -> prcwidthexpn ) ; //<S2SV> prcvind = JPC_FLOORDIVPOW2 ( JPC_CEILDIV ( pi -> y , pi -> picomp -> vsamp //<S2SV> << r ) , pi -> pirlvl -> prcheightexpn ) - JPC_FLOORDIVPOW2 ( try0 , //<S2SV> pi -> pirlvl -> prcheightexpn ) ; //<S2SV> pi -> prcno = prcvind * //<S2SV> pi -> pirlvl -> numhprcs + //<S2SV> prchind ; //<S2SV> assert ( pi -> prcno < //<S2SV> pi -> pirlvl -> numprcs ) ; //<S2SV> for ( pi -> lyrno = 0 ; pi -> lyrno < //<S2SV> pi -> numlyrs && pi -> lyrno < JAS_CAST ( int , pchg -> lyrnoend ) ; ++ pi -> lyrno ) { //<S2SV> prclyrno = & pi -> pirlvl -> prclyrnos [ pi -> prcno ] ; //<S2SV> if ( pi -> lyrno >= * prclyrno ) { //<S2SV> ++ ( * prclyrno ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> skip : //<S2SV> ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 