static int jpc_dec_process_siz ( jpc_dec_t * dec , jpc_ms_t * ms ) //<S2SV> { //<S2SV> jpc_siz_t * siz = & ms -> parms . siz ; //<S2SV> int compno ; //<S2SV> int tileno ; //<S2SV> jpc_dec_tile_t * tile ; //<S2SV> jpc_dec_tcomp_t * tcomp ; //<S2SV> int htileno ; //<S2SV> int vtileno ; //<S2SV> jpc_dec_cmpt_t * cmpt ; //<S2SV> dec -> xstart = siz -> xoff ; //<S2SV> dec -> ystart = siz -> yoff ; //<S2SV> dec -> xend = siz -> width ; //<S2SV> dec -> yend = siz -> height ; //<S2SV> dec -> tilewidth = siz -> tilewidth ; //<S2SV> dec -> tileheight = siz -> tileheight ; //<S2SV> dec -> tilexoff = siz -> tilexoff ; //<S2SV> dec -> tileyoff = siz -> tileyoff ; //<S2SV> dec -> numcomps = siz -> numcomps ; //<S2SV> if ( ! ( dec -> cp = jpc_dec_cp_create ( dec -> numcomps ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! ( dec -> cmpts = jas_alloc2 ( dec -> numcomps , sizeof ( jpc_dec_cmpt_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( compno = 0 , cmpt = dec -> cmpts ; compno < dec -> numcomps ; ++ compno , //<S2SV> ++ cmpt ) { //<S2SV> cmpt -> prec = siz -> comps [ compno ] . prec ; //<S2SV> cmpt -> sgnd = siz -> comps [ compno ] . sgnd ; //<S2SV> cmpt -> hstep = siz -> comps [ compno ] . hsamp ; //<S2SV> cmpt -> vstep = siz -> comps [ compno ] . vsamp ; //<S2SV> cmpt -> width = JPC_CEILDIV ( dec -> xend , cmpt -> hstep ) - //<S2SV> JPC_CEILDIV ( dec -> xstart , cmpt -> hstep ) ; //<S2SV> cmpt -> height = JPC_CEILDIV ( dec -> yend , cmpt -> vstep ) - //<S2SV> JPC_CEILDIV ( dec -> ystart , cmpt -> vstep ) ; //<S2SV> cmpt -> hsubstep = 0 ; //<S2SV> cmpt -> vsubstep = 0 ; //<S2SV> } //<S2SV> dec -> image = 0 ; //<S2SV> dec -> numhtiles = JPC_CEILDIV ( dec -> xend - dec -> tilexoff , dec -> tilewidth ) ; //<S2SV> dec -> numvtiles = JPC_CEILDIV ( dec -> yend - dec -> tileyoff , dec -> tileheight ) ; //<S2SV> dec -> numtiles = dec -> numhtiles * dec -> numvtiles ; //<S2SV> JAS_DBGLOG ( 10 , ( "numtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numhtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numvtiles<S2SV_blank>=<S2SV_blank>%d;\\n" , //<S2SV> dec -> numtiles , dec -> numhtiles , dec -> numvtiles ) ) ; //<S2SV> if ( ! ( dec -> tiles = jas_alloc2 ( dec -> numtiles , sizeof ( jpc_dec_tile_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( tileno = 0 , tile = dec -> tiles ; tileno < dec -> numtiles ; ++ tileno , //<S2SV> ++ tile ) { //<S2SV> htileno = tileno % dec -> numhtiles ; //<S2SV> vtileno = tileno / dec -> numhtiles ; //<S2SV> tile -> realmode = 0 ; //<S2SV> tile -> state = JPC_TILE_INIT ; //<S2SV> tile -> xstart = JAS_MAX ( dec -> tilexoff + htileno * dec -> tilewidth , //<S2SV> dec -> xstart ) ; //<S2SV> tile -> ystart = JAS_MAX ( dec -> tileyoff + vtileno * dec -> tileheight , //<S2SV> dec -> ystart ) ; //<S2SV> tile -> xend = JAS_MIN ( dec -> tilexoff + ( htileno + 1 ) * //<S2SV> dec -> tilewidth , dec -> xend ) ; //<S2SV> tile -> yend = JAS_MIN ( dec -> tileyoff + ( vtileno + 1 ) * //<S2SV> dec -> tileheight , dec -> yend ) ; //<S2SV> tile -> numparts = 0 ; //<S2SV> tile -> partno = 0 ; //<S2SV> tile -> pkthdrstream = 0 ; //<S2SV> tile -> pkthdrstreampos = 0 ; //<S2SV> tile -> pptstab = 0 ; //<S2SV> tile -> cp = 0 ; //<S2SV> tile -> pi = 0 ; //<S2SV> if ( ! ( tile -> tcomps = jas_alloc2 ( dec -> numcomps , //<S2SV> sizeof ( jpc_dec_tcomp_t ) ) ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( compno = 0 , cmpt = dec -> cmpts , tcomp = tile -> tcomps ; //<S2SV> compno < dec -> numcomps ; ++ compno , ++ cmpt , ++ tcomp ) { //<S2SV> tcomp -> rlvls = 0 ; //<S2SV> tcomp -> numrlvls = 0 ; //<S2SV> tcomp -> data = 0 ; //<S2SV> tcomp -> xstart = JPC_CEILDIV ( tile -> xstart , cmpt -> hstep ) ; //<S2SV> tcomp -> ystart = JPC_CEILDIV ( tile -> ystart , cmpt -> vstep ) ; //<S2SV> tcomp -> xend = JPC_CEILDIV ( tile -> xend , cmpt -> hstep ) ; //<S2SV> tcomp -> yend = JPC_CEILDIV ( tile -> yend , cmpt -> vstep ) ; //<S2SV> tcomp -> tsfb = 0 ; //<S2SV> } //<S2SV> } //<S2SV> dec -> pkthdrstreams = 0 ; //<S2SV> dec -> state = JPC_MH ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 