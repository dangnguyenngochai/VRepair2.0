jas_matrix_t * jas_matrix_create ( int numrows , int numcols ) //<S2SV> { //<S2SV> jas_matrix_t * matrix ; //<S2SV> int i ; //<S2SV> if ( numrows < 0 || numcols < 0 ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! ( matrix = jas_malloc ( sizeof ( jas_matrix_t ) ) ) ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> matrix -> flags_ = 0 ; //<S2SV> matrix -> numrows_ = numrows ; //<S2SV> matrix -> numcols_ = numcols ; //<S2SV> matrix -> rows_ = 0 ; //<S2SV> matrix -> maxrows_ = numrows ; //<S2SV> matrix -> data_ = 0 ; //<S2SV> matrix -> datasize_ = numrows * numcols ; //<S2SV> if ( matrix -> maxrows_ > 0 ) { //<S2SV> if ( ! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_ , //<S2SV> sizeof ( jas_seqent_t * ) ) ) ) { //<S2SV> jas_matrix_destroy ( matrix ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( matrix -> datasize_ > 0 ) { //<S2SV> if ( ! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_ , //<S2SV> sizeof ( jas_seqent_t ) ) ) ) { //<S2SV> jas_matrix_destroy ( matrix ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < numrows ; ++ i ) { //<S2SV> matrix -> rows_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; //<S2SV> } //<S2SV> for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { //<S2SV> matrix -> data_ [ i ] = 0 ; //<S2SV> } //<S2SV> matrix -> xstart_ = 0 ; //<S2SV> matrix -> ystart_ = 0 ; //<S2SV> matrix -> xend_ = matrix -> numcols_ ; //<S2SV> matrix -> yend_ = matrix -> numrows_ ; //<S2SV> return matrix ; //<S2SV> } //<S2SV> 