static jas_image_cmpt_t * jas_image_cmpt_create ( int_fast32_t tlx , //<S2SV> int_fast32_t tly , int_fast32_t hstep , int_fast32_t vstep , //<S2SV> int_fast32_t width , int_fast32_t height , uint_fast16_t depth , bool sgnd , //<S2SV> uint_fast32_t inmem ) //<S2SV> { //<S2SV> jas_image_cmpt_t * cmpt ; //<S2SV> size_t size ; //<S2SV> cmpt = 0 ; //<S2SV> if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ! jas_safe_intfast32_add ( tlx , width , 0 ) || //<S2SV> ! jas_safe_intfast32_add ( tly , height , 0 ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; //<S2SV> cmpt -> tlx_ = tlx ; //<S2SV> cmpt -> tly_ = tly ; //<S2SV> cmpt -> hstep_ = hstep ; //<S2SV> cmpt -> vstep_ = vstep ; //<S2SV> cmpt -> width_ = width ; //<S2SV> cmpt -> height_ = height ; //<S2SV> cmpt -> prec_ = depth ; //<S2SV> cmpt -> sgnd_ = sgnd ; //<S2SV> cmpt -> stream_ = 0 ; //<S2SV> cmpt -> cps_ = ( depth + 7 ) / 8 ; //<S2SV> if ( ! jas_safe_size_mul ( cmpt -> width_ , cmpt -> height_ , & size ) || //<S2SV> ! jas_safe_size_mul ( size , cmpt -> cps_ , & size ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> cmpt -> stream_ = ( inmem ) ? jas_stream_memopen ( 0 , size ) : //<S2SV> jas_stream_tmpfile ( ) ; //<S2SV> if ( ! cmpt -> stream_ ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( jas_stream_seek ( cmpt -> stream_ , size - 1 , SEEK_SET ) < 0 || //<S2SV> jas_stream_putc ( cmpt -> stream_ , 0 ) == EOF || //<S2SV> jas_stream_seek ( cmpt -> stream_ , 0 , SEEK_SET ) < 0 ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> return cmpt ; //<S2SV> error : //<S2SV> if ( cmpt ) { //<S2SV> jas_image_cmpt_destroy ( cmpt ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 