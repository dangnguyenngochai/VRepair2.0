static int mem_write ( jas_stream_obj_t * obj , char * buf , int cnt ) //<S2SV> { //<S2SV> int n ; //<S2SV> int ret ; //<S2SV> jas_stream_memobj_t * m = ( jas_stream_memobj_t * ) obj ; //<S2SV> long newbufsize ; //<S2SV> long newpos ; //<S2SV> assert ( buf ) ; //<S2SV> assert ( cnt >= 0 ) ; //<S2SV> JAS_DBGLOG ( 100 , ( "mem_write(%p,<S2SV_blank>%p,<S2SV_blank>%d)\\n" , obj , buf , cnt ) ) ; //<S2SV> newpos = m -> pos_ + cnt ; //<S2SV> if ( newpos > m -> bufsize_ && m -> growable_ ) { //<S2SV> newbufsize = m -> bufsize_ ; //<S2SV> while ( newbufsize < newpos ) { //<S2SV> newbufsize <<= 1 ; //<S2SV> assert ( newbufsize >= 0 ) ; //<S2SV> } //<S2SV> JAS_DBGLOG ( 100 , ( "mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%z\\n" , m -> bufsize_ , //<S2SV> newbufsize ) ) ; //<S2SV> JAS_DBGLOG ( 100 , ( "mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%ul\\n" , m -> bufsize_ , //<S2SV> JAS_CAST ( unsigned long , newbufsize ) ) ) ; //<S2SV> if ( mem_resize ( m , newbufsize ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( m -> pos_ > m -> len_ ) { //<S2SV> n = JAS_MIN ( m -> pos_ , m -> bufsize_ ) - m -> len_ ; //<S2SV> if ( n > 0 ) { //<S2SV> memset ( & m -> buf_ [ m -> len_ ] , 0 , n ) ; //<S2SV> m -> len_ += n ; //<S2SV> } //<S2SV> if ( m -> pos_ != m -> len_ ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> n = m -> bufsize_ - m -> pos_ ; //<S2SV> ret = JAS_MIN ( n , cnt ) ; //<S2SV> if ( ret > 0 ) { //<S2SV> memcpy ( & m -> buf_ [ m -> pos_ ] , buf , ret ) ; //<S2SV> m -> pos_ += ret ; //<S2SV> } //<S2SV> if ( m -> pos_ > m -> len_ ) { //<S2SV> m -> len_ = m -> pos_ ; //<S2SV> } //<S2SV> assert ( ret == cnt ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 