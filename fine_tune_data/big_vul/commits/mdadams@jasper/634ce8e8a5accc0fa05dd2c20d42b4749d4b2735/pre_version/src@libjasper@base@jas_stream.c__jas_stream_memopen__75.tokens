jas_stream_t * jas_stream_memopen ( char * buf , int bufsize ) //<S2SV> { //<S2SV> jas_stream_t * stream ; //<S2SV> jas_stream_memobj_t * obj ; //<S2SV> JAS_DBGLOG ( 100 , ( "jas_stream_memopen(%p,<S2SV_blank>%d)\\n" , buf , bufsize ) ) ; //<S2SV> if ( ! ( stream = jas_stream_create ( ) ) ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; //<S2SV> jas_stream_initbuf ( stream , JAS_STREAM_FULLBUF , 0 , 0 ) ; //<S2SV> stream -> ops_ = & jas_stream_memops ; //<S2SV> if ( ! ( obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { //<S2SV> jas_stream_destroy ( stream ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> stream -> obj_ = ( void * ) obj ; //<S2SV> obj -> myalloc_ = 0 ; //<S2SV> obj -> buf_ = 0 ; //<S2SV> if ( bufsize <= 0 ) { //<S2SV> obj -> bufsize_ = 1024 ; //<S2SV> obj -> growable_ = 1 ; //<S2SV> } else { //<S2SV> obj -> bufsize_ = bufsize ; //<S2SV> obj -> growable_ = 0 ; //<S2SV> } //<S2SV> if ( buf ) { //<S2SV> obj -> buf_ = ( unsigned char * ) buf ; //<S2SV> } else { //<S2SV> obj -> buf_ = jas_malloc ( obj -> bufsize_ ) ; //<S2SV> obj -> myalloc_ = 1 ; //<S2SV> } //<S2SV> if ( ! obj -> buf_ ) { //<S2SV> jas_stream_close ( stream ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> JAS_DBGLOG ( 100 , ( "jas_stream_memopen<S2SV_blank>buffer<S2SV_blank>buf=%p<S2SV_blank>myalloc=%d\\n" , //<S2SV> obj -> buf_ , obj -> myalloc_ ) ) ; //<S2SV> if ( bufsize > 0 && buf ) { //<S2SV> obj -> len_ = bufsize ; //<S2SV> } else { //<S2SV> obj -> len_ = 0 ; //<S2SV> } //<S2SV> obj -> pos_ = 0 ; //<S2SV> return stream ; //<S2SV> } //<S2SV> 