jas_image_t * bmp_decode ( jas_stream_t * in , char * optstr ) //<S2SV> { //<S2SV> jas_image_t * image ; //<S2SV> bmp_hdr_t hdr ; //<S2SV> bmp_info_t * info ; //<S2SV> uint_fast16_t cmptno ; //<S2SV> jas_image_cmptparm_t cmptparms [ 3 ] ; //<S2SV> jas_image_cmptparm_t * cmptparm ; //<S2SV> uint_fast16_t numcmpts ; //<S2SV> long n ; //<S2SV> image = 0 ; //<S2SV> info = 0 ; //<S2SV> if ( optstr ) { //<S2SV> jas_eprintf ( "warning:<S2SV_blank>ignoring<S2SV_blank>BMP<S2SV_blank>decoder<S2SV_blank>options\\n" ) ; //<S2SV> } //<S2SV> jas_eprintf ( //<S2SV> "THE<S2SV_blank>BMP<S2SV_blank>FORMAT<S2SV_blank>IS<S2SV_blank>NOT<S2SV_blank>FULLY<S2SV_blank>SUPPORTED!\\n" //<S2SV> "THAT<S2SV_blank>IS,<S2SV_blank>THE<S2SV_blank>JASPER<S2SV_blank>SOFTWARE<S2SV_blank>CANNOT<S2SV_blank>DECODE<S2SV_blank>ALL<S2SV_blank>TYPES<S2SV_blank>OF<S2SV_blank>BMP<S2SV_blank>DATA.\\n" //<S2SV> "IF<S2SV_blank>YOU<S2SV_blank>HAVE<S2SV_blank>ANY<S2SV_blank>PROBLEMS,<S2SV_blank>PLEASE<S2SV_blank>TRY<S2SV_blank>CONVERTING<S2SV_blank>YOUR<S2SV_blank>IMAGE<S2SV_blank>DATA\\n" //<S2SV> "TO<S2SV_blank>THE<S2SV_blank>PNM<S2SV_blank>FORMAT,<S2SV_blank>AND<S2SV_blank>USING<S2SV_blank>THIS<S2SV_blank>FORMAT<S2SV_blank>INSTEAD.\\n" //<S2SV> ) ; //<S2SV> if ( bmp_gethdr ( in , & hdr ) ) { //<S2SV> jas_eprintf ( "cannot<S2SV_blank>get<S2SV_blank>header\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> JAS_DBGLOG ( 1 , ( //<S2SV> "BMP<S2SV_blank>header:<S2SV_blank>magic<S2SV_blank>0x%x;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>res1<S2SV_blank>%d;<S2SV_blank>res2<S2SV_blank>%d;<S2SV_blank>off<S2SV_blank>%d\\n" , //<S2SV> hdr . magic , hdr . siz , hdr . reserved1 , hdr . reserved2 , hdr . off //<S2SV> ) ) ; //<S2SV> if ( ! ( info = bmp_getinfo ( in ) ) ) { //<S2SV> jas_eprintf ( "cannot<S2SV_blank>get<S2SV_blank>info\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> JAS_DBGLOG ( 1 , //<S2SV> ( "BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%ld;<S2SV_blank>width<S2SV_blank>%ld;<S2SV_blank>height<S2SV_blank>%ld;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>" //<S2SV> "depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%ld;<S2SV_blank>siz<S2SV_blank>%ld;<S2SV_blank>hres<S2SV_blank>%ld;<S2SV_blank>vres<S2SV_blank>%ld;<S2SV_blank>numcolors<S2SV_blank>%ld;<S2SV_blank>" //<S2SV> "mincolors<S2SV_blank>%ld\\n" , JAS_CAST ( long , info -> len ) , //<S2SV> JAS_CAST ( long , info -> width ) , JAS_CAST ( long , info -> height ) , //<S2SV> JAS_CAST ( long , info -> numplanes ) , JAS_CAST ( long , info -> depth ) , //<S2SV> JAS_CAST ( long , info -> enctype ) , JAS_CAST ( long , info -> siz ) , //<S2SV> JAS_CAST ( long , info -> hres ) , JAS_CAST ( long , info -> vres ) , //<S2SV> JAS_CAST ( long , info -> numcolors ) , JAS_CAST ( long , info -> mincolors ) ) ) ; //<S2SV> if ( info -> width < 0 || info -> height < 0 || info -> numplanes < 0 || //<S2SV> info -> depth < 0 || info -> siz < 0 || info -> hres < 0 || info -> vres < 0 ) { //<S2SV> jas_eprintf ( "corrupt<S2SV_blank>bit<S2SV_blank>stream\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ! bmp_issupported ( & hdr , info ) ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>unsupported<S2SV_blank>BMP<S2SV_blank>encoding\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( ( n = hdr . off - ( BMP_HDRLEN + BMP_INFOLEN + BMP_PALLEN ( info ) ) ) < 0 ) { //<S2SV> jas_eprintf ( "error:<S2SV_blank>possibly<S2SV_blank>bad<S2SV_blank>bitmap<S2SV_blank>offset?\\n" ) ; //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( n > 0 ) { //<S2SV> jas_eprintf ( "skipping<S2SV_blank>unknown<S2SV_blank>data<S2SV_blank>in<S2SV_blank>BMP<S2SV_blank>file\\n" ) ; //<S2SV> if ( bmp_gobble ( in , n ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> } //<S2SV> numcmpts = bmp_numcmpts ( info ) ; //<S2SV> for ( cmptno = 0 , cmptparm = cmptparms ; cmptno < numcmpts ; ++ cmptno , //<S2SV> ++ cmptparm ) { //<S2SV> cmptparm -> tlx = 0 ; //<S2SV> cmptparm -> tly = 0 ; //<S2SV> cmptparm -> hstep = 1 ; //<S2SV> cmptparm -> vstep = 1 ; //<S2SV> cmptparm -> width = info -> width ; //<S2SV> cmptparm -> height = info -> height ; //<S2SV> cmptparm -> prec = 8 ; //<S2SV> cmptparm -> sgnd = false ; //<S2SV> } //<S2SV> if ( ! ( image = jas_image_create ( numcmpts , cmptparms , //<S2SV> JAS_CLRSPC_UNKNOWN ) ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> if ( numcmpts == 3 ) { //<S2SV> jas_image_setclrspc ( image , JAS_CLRSPC_SRGB ) ; //<S2SV> jas_image_setcmpttype ( image , 0 , //<S2SV> JAS_IMAGE_CT_COLOR ( JAS_CLRSPC_CHANIND_RGB_R ) ) ; //<S2SV> jas_image_setcmpttype ( image , 1 , //<S2SV> JAS_IMAGE_CT_COLOR ( JAS_CLRSPC_CHANIND_RGB_G ) ) ; //<S2SV> jas_image_setcmpttype ( image , 2 , //<S2SV> JAS_IMAGE_CT_COLOR ( JAS_CLRSPC_CHANIND_RGB_B ) ) ; //<S2SV> } else { //<S2SV> jas_image_setclrspc ( image , JAS_CLRSPC_SGRAY ) ; //<S2SV> jas_image_setcmpttype ( image , 0 , //<S2SV> JAS_IMAGE_CT_COLOR ( JAS_CLRSPC_CHANIND_GRAY_Y ) ) ; //<S2SV> } //<S2SV> if ( bmp_getdata ( in , info , image ) ) { //<S2SV> goto error ; //<S2SV> } //<S2SV> bmp_info_destroy ( info ) ; //<S2SV> return image ; //<S2SV> error : //<S2SV> if ( info ) { //<S2SV> bmp_info_destroy ( info ) ; //<S2SV> } //<S2SV> if ( image ) { //<S2SV> jas_image_destroy ( image ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 