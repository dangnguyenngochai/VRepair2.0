static void dump_boot ( DOS_FS * fs , struct boot_sector * b , unsigned lss ) //<S2SV> { //<S2SV> unsigned short sectors ; //<S2SV> printf ( "Boot<S2SV_blank>sector<S2SV_blank>contents:\\n" ) ; //<S2SV> if ( ! atari_format ) { //<S2SV> char id [ 9 ] ; //<S2SV> strncpy ( id , ( const char * ) b -> system_id , 8 ) ; //<S2SV> id [ 8 ] = 0 ; //<S2SV> printf ( "System<S2SV_blank>ID<S2SV_blank>\\"%s\\"\\n" , id ) ; //<S2SV> } else { //<S2SV> printf ( "Serial<S2SV_blank>number<S2SV_blank>0x%x\\n" , //<S2SV> b -> system_id [ 5 ] | ( b -> system_id [ 6 ] << 8 ) | ( b -> //<S2SV> system_id [ 7 ] << 16 ) ) ; //<S2SV> } //<S2SV> printf ( "Media<S2SV_blank>byte<S2SV_blank>0x%02x<S2SV_blank>(%s)\\n" , b -> media , get_media_descr ( b -> media ) ) ; //<S2SV> printf ( "%10d<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>logical<S2SV_blank>sector\\n" , GET_UNALIGNED_W ( b -> sector_size ) ) ; //<S2SV> printf ( "%10d<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>cluster\\n" , fs -> cluster_size ) ; //<S2SV> printf ( "%10d<S2SV_blank>reserved<S2SV_blank>sector%s\\n" , le16toh ( b -> reserved ) , //<S2SV> le16toh ( b -> reserved ) == 1 ? "" : "s" ) ; //<S2SV> printf ( "First<S2SV_blank>FAT<S2SV_blank>starts<S2SV_blank>at<S2SV_blank>byte<S2SV_blank>%llu<S2SV_blank>(sector<S2SV_blank>%llu)\\n" , //<S2SV> ( unsigned long long ) fs -> fat_start , //<S2SV> ( unsigned long long ) fs -> fat_start / lss ) ; //<S2SV> printf ( "%10d<S2SV_blank>FATs,<S2SV_blank>%d<S2SV_blank>bit<S2SV_blank>entries\\n" , b -> fats , fs -> fat_bits ) ; //<S2SV> printf ( "%10lld<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%llu<S2SV_blank>sectors)\\n" , ( long long ) fs -> fat_size , //<S2SV> ( long long ) fs -> fat_size / lss ) ; //<S2SV> if ( ! fs -> root_cluster ) { //<S2SV> printf ( "Root<S2SV_blank>directory<S2SV_blank>starts<S2SV_blank>at<S2SV_blank>byte<S2SV_blank>%llu<S2SV_blank>(sector<S2SV_blank>%llu)\\n" , //<S2SV> ( unsigned long long ) fs -> root_start , //<S2SV> ( unsigned long long ) fs -> root_start / lss ) ; //<S2SV> printf ( "%10d<S2SV_blank>root<S2SV_blank>directory<S2SV_blank>entries\\n" , fs -> root_entries ) ; //<S2SV> } else { //<S2SV> printf ( "Root<S2SV_blank>directory<S2SV_blank>start<S2SV_blank>at<S2SV_blank>cluster<S2SV_blank>%lu<S2SV_blank>(arbitrary<S2SV_blank>size)\\n" , //<S2SV> ( unsigned long ) fs -> root_cluster ) ; //<S2SV> } //<S2SV> printf ( "Data<S2SV_blank>area<S2SV_blank>starts<S2SV_blank>at<S2SV_blank>byte<S2SV_blank>%llu<S2SV_blank>(sector<S2SV_blank>%llu)\\n" , //<S2SV> ( unsigned long long ) fs -> data_start , //<S2SV> ( unsigned long long ) fs -> data_start / lss ) ; //<S2SV> printf ( "%10lu<S2SV_blank>data<S2SV_blank>clusters<S2SV_blank>(%llu<S2SV_blank>bytes)\\n" , //<S2SV> ( unsigned long ) fs -> data_clusters , //<S2SV> ( unsigned long long ) fs -> data_clusters * fs -> cluster_size ) ; //<S2SV> printf ( "%u<S2SV_blank>sectors/track,<S2SV_blank>%u<S2SV_blank>heads\\n" , le16toh ( b -> secs_track ) , //<S2SV> le16toh ( b -> heads ) ) ; //<S2SV> printf ( "%10u<S2SV_blank>hidden<S2SV_blank>sectors\\n" , atari_format ? //<S2SV> ( ( ( unsigned char * ) & b -> hidden ) [ 0 ] | //<S2SV> ( ( unsigned char * ) & b -> hidden ) [ 1 ] << 8 ) : le32toh ( b -> hidden ) ) ; //<S2SV> sectors = GET_UNALIGNED_W ( b -> sectors ) ; //<S2SV> printf ( "%10u<S2SV_blank>sectors<S2SV_blank>total\\n" , sectors ? sectors : le32toh ( b -> total_sect ) ) ; //<S2SV> } //<S2SV> 