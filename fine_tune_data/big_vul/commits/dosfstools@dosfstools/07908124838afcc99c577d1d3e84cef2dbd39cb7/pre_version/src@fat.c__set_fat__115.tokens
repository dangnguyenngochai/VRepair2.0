void set_fat ( DOS_FS * fs , uint32_t cluster , int32_t new ) //<S2SV> { //<S2SV> unsigned char * data = NULL ; //<S2SV> int size ; //<S2SV> loff_t offs ; //<S2SV> if ( new == - 1 ) //<S2SV> new = FAT_EOF ( fs ) ; //<S2SV> else if ( ( long ) new == - 2 ) //<S2SV> new = FAT_BAD ( fs ) ; //<S2SV> switch ( fs -> fat_bits ) { //<S2SV> case 12 : //<S2SV> data = fs -> fat + cluster * 3 / 2 ; //<S2SV> offs = fs -> fat_start + cluster * 3 / 2 ; //<S2SV> if ( cluster & 1 ) { //<S2SV> FAT_ENTRY prevEntry ; //<S2SV> get_fat ( & prevEntry , fs -> fat , cluster - 1 , fs ) ; //<S2SV> data [ 0 ] = ( ( new & 0xf ) << 4 ) | ( prevEntry . value >> 8 ) ; //<S2SV> data [ 1 ] = new >> 4 ; //<S2SV> } else { //<S2SV> FAT_ENTRY subseqEntry ; //<S2SV> if ( cluster != fs -> clusters - 1 ) //<S2SV> get_fat ( & subseqEntry , fs -> fat , cluster + 1 , fs ) ; //<S2SV> else //<S2SV> subseqEntry . value = 0 ; //<S2SV> data [ 0 ] = new & 0xff ; //<S2SV> data [ 1 ] = ( new >> 8 ) | ( ( 0xff & subseqEntry . value ) << 4 ) ; //<S2SV> } //<S2SV> size = 2 ; //<S2SV> break ; //<S2SV> case 16 : //<S2SV> data = fs -> fat + cluster * 2 ; //<S2SV> offs = fs -> fat_start + cluster * 2 ; //<S2SV> * ( unsigned short * ) data = htole16 ( new ) ; //<S2SV> size = 2 ; //<S2SV> break ; //<S2SV> case 32 : //<S2SV> { //<S2SV> FAT_ENTRY curEntry ; //<S2SV> get_fat ( & curEntry , fs -> fat , cluster , fs ) ; //<S2SV> data = fs -> fat + cluster * 4 ; //<S2SV> offs = fs -> fat_start + cluster * 4 ; //<S2SV> * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff ) | //<S2SV> ( curEntry . reserved << 28 ) ) ; //<S2SV> size = 4 ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> die ( "Bad<S2SV_blank>FAT<S2SV_blank>entry<S2SV_blank>size:<S2SV_blank>%d<S2SV_blank>bits." , fs -> fat_bits ) ; //<S2SV> } //<S2SV> fs_write ( offs , size , data ) ; //<S2SV> if ( fs -> nfats > 1 ) { //<S2SV> fs_write ( offs + fs -> fat_size , size , data ) ; //<S2SV> } //<S2SV> } //<S2SV> 