static bool parse_reconnect ( struct pool * pool , json_t * val ) //<S2SV> { //<S2SV> char * sockaddr_url , * stratum_port , * tmp ; //<S2SV> char * url , * port , address [ 256 ] ; //<S2SV> memset ( address , 0 , 255 ) ; //<S2SV> url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; //<S2SV> if ( ! url ) //<S2SV> url = pool -> sockaddr_url ; //<S2SV> else { //<S2SV> char * dot_pool , * dot_reconnect ; //<S2SV> dot_pool = strchr ( pool -> sockaddr_url , '.' ) ; //<S2SV> if ( ! dot_pool ) { //<S2SV> applog ( LOG_ERR , "Denied<S2SV_blank>stratum<S2SV_blank>reconnect<S2SV_blank>request<S2SV_blank>for<S2SV_blank>pool<S2SV_blank>without<S2SV_blank>domain<S2SV_blank>\'%s\'" , //<S2SV> pool -> sockaddr_url ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> dot_reconnect = strchr ( url , '.' ) ; //<S2SV> if ( ! dot_reconnect ) { //<S2SV> applog ( LOG_ERR , "Denied<S2SV_blank>stratum<S2SV_blank>reconnect<S2SV_blank>request<S2SV_blank>to<S2SV_blank>url<S2SV_blank>without<S2SV_blank>domain<S2SV_blank>\'%s\'" , //<S2SV> url ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> if ( strcmp ( dot_pool , dot_reconnect ) ) { //<S2SV> applog ( LOG_ERR , "Denied<S2SV_blank>stratum<S2SV_blank>reconnect<S2SV_blank>request<S2SV_blank>to<S2SV_blank>non-matching<S2SV_blank>domain<S2SV_blank>url<S2SV_blank>\'%s\'" , //<S2SV> pool -> sockaddr_url ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> } //<S2SV> port = ( char * ) json_string_value ( json_array_get ( val , 1 ) ) ; //<S2SV> if ( ! port ) //<S2SV> port = pool -> stratum_port ; //<S2SV> snprintf ( address , 254 , "%s:%s" , url , port ) ; //<S2SV> if ( ! extract_sockaddr ( address , & sockaddr_url , & stratum_port ) ) //<S2SV> return false ; //<S2SV> applog ( LOG_WARNING , "Stratum<S2SV_blank>reconnect<S2SV_blank>requested<S2SV_blank>from<S2SV_blank>pool<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%s" , pool -> pool_no , address ) ; //<S2SV> clear_pool_work ( pool ) ; //<S2SV> mutex_lock ( & pool -> stratum_lock ) ; //<S2SV> __suspend_stratum ( pool ) ; //<S2SV> tmp = pool -> sockaddr_url ; //<S2SV> pool -> sockaddr_url = sockaddr_url ; //<S2SV> pool -> stratum_url = pool -> sockaddr_url ; //<S2SV> free ( tmp ) ; //<S2SV> tmp = pool -> stratum_port ; //<S2SV> pool -> stratum_port = stratum_port ; //<S2SV> free ( tmp ) ; //<S2SV> mutex_unlock ( & pool -> stratum_lock ) ; //<S2SV> if ( ! restart_stratum ( pool ) ) { //<S2SV> pool_failed ( pool ) ; //<S2SV> return false ; //<S2SV> } //<S2SV> return true ; //<S2SV> } //<S2SV> 