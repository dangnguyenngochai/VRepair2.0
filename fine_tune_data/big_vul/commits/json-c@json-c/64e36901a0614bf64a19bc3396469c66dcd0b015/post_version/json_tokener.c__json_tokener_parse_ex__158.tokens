struct json_object * json_tokener_parse_ex ( struct json_tokener * tok , //<S2SV> const char * str , int len ) //<S2SV> { //<S2SV> struct json_object * obj = NULL ; //<S2SV> char c = '\\1' ; //<S2SV> # ifdef HAVE_SETLOCALE //<S2SV> char * oldlocale = NULL , * tmplocale ; //<S2SV> tmplocale = setlocale ( LC_NUMERIC , NULL ) ; //<S2SV> if ( tmplocale ) oldlocale = strdup ( tmplocale ) ; //<S2SV> setlocale ( LC_NUMERIC , "C" ) ; //<S2SV> # endif //<S2SV> tok -> char_offset = 0 ; //<S2SV> tok -> err = json_tokener_success ; //<S2SV> if ( ( len < - 1 ) || ( len == - 1 && strlen ( str ) > INT32_MAX ) ) { //<S2SV> tok -> err = json_tokener_error_size ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> while ( PEEK_CHAR ( c , tok ) ) { //<S2SV> redo_char : //<S2SV> switch ( state ) { //<S2SV> case json_tokener_state_eatws : //<S2SV> while ( isspace ( ( int ) c ) ) { //<S2SV> if ( ( ! ADVANCE_CHAR ( str , tok ) ) || ( ! PEEK_CHAR ( c , tok ) ) ) //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( c == '/' && ! ( tok -> flags & JSON_TOKENER_STRICT ) ) { //<S2SV> printbuf_reset ( tok -> pb ) ; //<S2SV> printbuf_memappend_fast ( tok -> pb , & c , 1 ) ; //<S2SV> state = json_tokener_state_comment_start ; //<S2SV> } else { //<S2SV> state = saved_state ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_start : //<S2SV> switch ( c ) { //<S2SV> case '{' : //<S2SV> state = json_tokener_state_eatws ; //<S2SV> saved_state = json_tokener_state_object_field_start ; //<S2SV> current = json_object_new_object ( ) ; //<S2SV> break ; //<S2SV> case '[' : //<S2SV> state = json_tokener_state_eatws ; //<S2SV> saved_state = json_tokener_state_array ; //<S2SV> current = json_object_new_array ( ) ; //<S2SV> break ; //<S2SV> case 'I' : //<S2SV> case 'i' : //<S2SV> state = json_tokener_state_inf ; //<S2SV> printbuf_reset ( tok -> pb ) ; //<S2SV> tok -> st_pos = 0 ; //<S2SV> goto redo_char ; //<S2SV> case 'N' : //<S2SV> case 'n' : //<S2SV> state = json_tokener_state_null ; //<S2SV> printbuf_reset ( tok -> pb ) ; //<S2SV> tok -> st_pos = 0 ; //<S2SV> goto redo_char ; //<S2SV> case '\\'' : //<S2SV> if ( tok -> flags & JSON_TOKENER_STRICT ) { //<S2SV> tok -> err = json_tokener_error_parse_unexpected ; //<S2SV> goto out ; //<S2SV> } //<S2SV> case \'"\' : //<S2SV> state = json_tokener_state_string ; //<S2SV> printbuf_reset ( tok -> pb ) ; //<S2SV> tok -> quote_char = c ; //<S2SV> break ; //<S2SV> case 'T' : //<S2SV> case 't' : //<S2SV> case 'F' : //<S2SV> case 'f' : //<S2SV> state = json_tokener_state_boolean ; //<S2SV> printbuf_reset ( tok -> pb ) ; //<S2SV> tok -> st_pos = 0 ; //<S2SV> goto redo_char ; //<S2SV> # if defined ( __GNUC__ ) //<S2SV> case '0' ... '9' : //<S2SV> # else //<S2SV> case '0' : //<S2SV> case '1' : //<S2SV> case '2' : //<S2SV> case '3' : //<S2SV> case '4' : //<S2SV> case '5' : //<S2SV> case '6' : //<S2SV> case '7' : //<S2SV> case '8' : //<S2SV> case '9' : //<S2SV> # endif //<S2SV> case '-' : //<S2SV> state = json_tokener_state_number ; //<S2SV> printbuf_reset ( tok -> pb ) ; //<S2SV> tok -> is_double = 0 ; //<S2SV> goto redo_char ; //<S2SV> default : //<S2SV> tok -> err = json_tokener_error_parse_unexpected ; //<S2SV> goto out ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_finish : //<S2SV> if ( tok -> depth == 0 ) goto out ; //<S2SV> obj = json_object_get ( current ) ; //<S2SV> json_tokener_reset_level ( tok , tok -> depth ) ; //<S2SV> tok -> depth -- ; //<S2SV> goto redo_char ; //<S2SV> case json_tokener_state_inf : //<S2SV> { //<S2SV> int size ; //<S2SV> int size_inf ; //<S2SV> int is_negative = 0 ; //<S2SV> printbuf_memappend_fast ( tok -> pb , & c , 1 ) ; //<S2SV> size = json_min ( tok -> st_pos + 1 , json_null_str_len ) ; //<S2SV> size_inf = json_min ( tok -> st_pos + 1 , json_inf_str_len ) ; //<S2SV> char * infbuf = tok -> pb -> buf ; //<S2SV> if ( * infbuf == '-' ) //<S2SV> { //<S2SV> infbuf ++ ; //<S2SV> is_negative = 1 ; //<S2SV> } //<S2SV> if ( ( ! ( tok -> flags & JSON_TOKENER_STRICT ) && //<S2SV> strncasecmp ( json_inf_str , infbuf , size_inf ) == 0 ) || //<S2SV> ( strncmp ( json_inf_str , infbuf , size_inf ) == 0 ) //<S2SV> ) //<S2SV> { //<S2SV> if ( tok -> st_pos == json_inf_str_len ) //<S2SV> { //<S2SV> current = json_object_new_double ( is_negative ? - INFINITY : INFINITY ) ; //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_unexpected ; //<S2SV> goto out ; //<S2SV> } //<S2SV> tok -> st_pos ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_null : //<S2SV> { //<S2SV> int size ; //<S2SV> int size_nan ; //<S2SV> printbuf_memappend_fast ( tok -> pb , & c , 1 ) ; //<S2SV> size = json_min ( tok -> st_pos + 1 , json_null_str_len ) ; //<S2SV> size_nan = json_min ( tok -> st_pos + 1 , json_nan_str_len ) ; //<S2SV> if ( ( ! ( tok -> flags & JSON_TOKENER_STRICT ) && //<S2SV> strncasecmp ( json_null_str , tok -> pb -> buf , size ) == 0 ) //<S2SV> || ( strncmp ( json_null_str , tok -> pb -> buf , size ) == 0 ) //<S2SV> ) { //<S2SV> if ( tok -> st_pos == json_null_str_len ) { //<S2SV> current = NULL ; //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ( ! ( tok -> flags & JSON_TOKENER_STRICT ) && //<S2SV> strncasecmp ( json_nan_str , tok -> pb -> buf , size_nan ) == 0 ) || //<S2SV> ( strncmp ( json_nan_str , tok -> pb -> buf , size_nan ) == 0 ) //<S2SV> ) //<S2SV> { //<S2SV> if ( tok -> st_pos == json_nan_str_len ) //<S2SV> { //<S2SV> current = json_object_new_double ( NAN ) ; //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_null ; //<S2SV> goto out ; //<S2SV> } //<S2SV> tok -> st_pos ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_comment_start : //<S2SV> if ( c == '*' ) { //<S2SV> state = json_tokener_state_comment ; //<S2SV> } else if ( c == '/' ) { //<S2SV> state = json_tokener_state_comment_eol ; //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_comment ; //<S2SV> goto out ; //<S2SV> } //<S2SV> printbuf_memappend_fast ( tok -> pb , & c , 1 ) ; //<S2SV> break ; //<S2SV> case json_tokener_state_comment : //<S2SV> { //<S2SV> const char * case_start = str ; //<S2SV> while ( c != '*' ) { //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! PEEK_CHAR ( c , tok ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , 1 + str - case_start ) ; //<S2SV> state = json_tokener_state_comment_end ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_comment_eol : //<S2SV> { //<S2SV> const char * case_start = str ; //<S2SV> while ( c != '\\n' ) { //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! PEEK_CHAR ( c , tok ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> MC_DEBUG ( "json_tokener_comment:<S2SV_blank>%s\\n" , tok -> pb -> buf ) ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_comment_end : //<S2SV> printbuf_memappend_fast ( tok -> pb , & c , 1 ) ; //<S2SV> if ( c == '/' ) { //<S2SV> MC_DEBUG ( "json_tokener_comment:<S2SV_blank>%s\\n" , tok -> pb -> buf ) ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else { //<S2SV> state = json_tokener_state_comment ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_string : //<S2SV> { //<S2SV> const char * case_start = str ; //<S2SV> while ( 1 ) { //<S2SV> if ( c == tok -> quote_char ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> current = json_object_new_string_len ( tok -> pb -> buf , tok -> pb -> bpos ) ; //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> break ; //<S2SV> } else if ( c == '\\\\' ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> saved_state = json_tokener_state_string ; //<S2SV> state = json_tokener_state_string_escape ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! PEEK_CHAR ( c , tok ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_string_escape : //<S2SV> switch ( c ) { //<S2SV> case \'"\' : //<S2SV> case '\\\\' : //<S2SV> case '/' : //<S2SV> printbuf_memappend_fast ( tok -> pb , & c , 1 ) ; //<S2SV> state = saved_state ; //<S2SV> break ; //<S2SV> case 'b' : //<S2SV> case 'n' : //<S2SV> case 'r' : //<S2SV> case 't' : //<S2SV> case 'f' : //<S2SV> if ( c == 'b' ) printbuf_memappend_fast ( tok -> pb , "\\b" , 1 ) ; //<S2SV> else if ( c == 'n' ) printbuf_memappend_fast ( tok -> pb , "\\n" , 1 ) ; //<S2SV> else if ( c == 'r' ) printbuf_memappend_fast ( tok -> pb , "\\r" , 1 ) ; //<S2SV> else if ( c == 't' ) printbuf_memappend_fast ( tok -> pb , "\\t" , 1 ) ; //<S2SV> else if ( c == 'f' ) printbuf_memappend_fast ( tok -> pb , "\\f" , 1 ) ; //<S2SV> state = saved_state ; //<S2SV> break ; //<S2SV> case 'u' : //<S2SV> tok -> ucs_char = 0 ; //<S2SV> tok -> st_pos = 0 ; //<S2SV> state = json_tokener_state_escape_unicode ; //<S2SV> break ; //<S2SV> default : //<S2SV> tok -> err = json_tokener_error_parse_string ; //<S2SV> goto out ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_escape_unicode : //<S2SV> { //<S2SV> unsigned int got_hi_surrogate = 0 ; //<S2SV> while ( 1 ) { //<S2SV> if ( strchr ( json_hex_chars , c ) ) { //<S2SV> tok -> ucs_char += ( ( unsigned int ) hexdigit ( c ) << ( ( 3 - tok -> st_pos ++ ) * 4 ) ) ; //<S2SV> if ( tok -> st_pos == 4 ) { //<S2SV> unsigned char unescaped_utf [ 4 ] ; //<S2SV> if ( got_hi_surrogate ) { //<S2SV> if ( IS_LOW_SURROGATE ( tok -> ucs_char ) ) { //<S2SV> tok -> ucs_char = DECODE_SURROGATE_PAIR ( got_hi_surrogate , tok -> ucs_char ) ; //<S2SV> } else { //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) utf8_replacement_char , 3 ) ; //<S2SV> } //<S2SV> got_hi_surrogate = 0 ; //<S2SV> } //<S2SV> if ( tok -> ucs_char < 0x80 ) { //<S2SV> unescaped_utf [ 0 ] = tok -> ucs_char ; //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) unescaped_utf , 1 ) ; //<S2SV> } else if ( tok -> ucs_char < 0x800 ) { //<S2SV> unescaped_utf [ 0 ] = 0xc0 | ( tok -> ucs_char >> 6 ) ; //<S2SV> unescaped_utf [ 1 ] = 0x80 | ( tok -> ucs_char & 0x3f ) ; //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) unescaped_utf , 2 ) ; //<S2SV> } else if ( IS_HIGH_SURROGATE ( tok -> ucs_char ) ) { //<S2SV> got_hi_surrogate = tok -> ucs_char ; //<S2SV> if ( ( tok -> char_offset + 1 != len ) && //<S2SV> ( tok -> char_offset + 2 != len ) && //<S2SV> ( str [ 1 ] == '\\\\' ) && //<S2SV> ( str [ 2 ] == 'u' ) ) //<S2SV> { //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! ADVANCE_CHAR ( str , tok ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) utf8_replacement_char , 3 ) ; //<S2SV> } //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! PEEK_CHAR ( c , tok ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) utf8_replacement_char , 3 ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> tok -> ucs_char = 0 ; //<S2SV> tok -> st_pos = 0 ; //<S2SV> continue ; //<S2SV> } else { //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) utf8_replacement_char , 3 ) ; //<S2SV> } //<S2SV> } else if ( IS_LOW_SURROGATE ( tok -> ucs_char ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) utf8_replacement_char , 3 ) ; //<S2SV> } else if ( tok -> ucs_char < 0x10000 ) { //<S2SV> unescaped_utf [ 0 ] = 0xe0 | ( tok -> ucs_char >> 12 ) ; //<S2SV> unescaped_utf [ 1 ] = 0x80 | ( ( tok -> ucs_char >> 6 ) & 0x3f ) ; //<S2SV> unescaped_utf [ 2 ] = 0x80 | ( tok -> ucs_char & 0x3f ) ; //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) unescaped_utf , 3 ) ; //<S2SV> } else if ( tok -> ucs_char < 0x110000 ) { //<S2SV> unescaped_utf [ 0 ] = 0xf0 | ( ( tok -> ucs_char >> 18 ) & 0x07 ) ; //<S2SV> unescaped_utf [ 1 ] = 0x80 | ( ( tok -> ucs_char >> 12 ) & 0x3f ) ; //<S2SV> unescaped_utf [ 2 ] = 0x80 | ( ( tok -> ucs_char >> 6 ) & 0x3f ) ; //<S2SV> unescaped_utf [ 3 ] = 0x80 | ( tok -> ucs_char & 0x3f ) ; //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) unescaped_utf , 4 ) ; //<S2SV> } else { //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) utf8_replacement_char , 3 ) ; //<S2SV> } //<S2SV> state = saved_state ; //<S2SV> break ; //<S2SV> } //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_string ; //<S2SV> goto out ; //<S2SV> } //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! PEEK_CHAR ( c , tok ) ) { //<S2SV> if ( got_hi_surrogate ) //<S2SV> printbuf_memappend_fast ( tok -> pb , ( char * ) utf8_replacement_char , 3 ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_boolean : //<S2SV> { //<S2SV> int size1 , size2 ; //<S2SV> printbuf_memappend_fast ( tok -> pb , & c , 1 ) ; //<S2SV> size1 = json_min ( tok -> st_pos + 1 , json_true_str_len ) ; //<S2SV> size2 = json_min ( tok -> st_pos + 1 , json_false_str_len ) ; //<S2SV> if ( ( ! ( tok -> flags & JSON_TOKENER_STRICT ) && //<S2SV> strncasecmp ( json_true_str , tok -> pb -> buf , size1 ) == 0 ) //<S2SV> || ( strncmp ( json_true_str , tok -> pb -> buf , size1 ) == 0 ) //<S2SV> ) { //<S2SV> if ( tok -> st_pos == json_true_str_len ) { //<S2SV> current = json_object_new_boolean ( 1 ) ; //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> } else if ( ( ! ( tok -> flags & JSON_TOKENER_STRICT ) && //<S2SV> strncasecmp ( json_false_str , tok -> pb -> buf , size2 ) == 0 ) //<S2SV> || ( strncmp ( json_false_str , tok -> pb -> buf , size2 ) == 0 ) ) { //<S2SV> if ( tok -> st_pos == json_false_str_len ) { //<S2SV> current = json_object_new_boolean ( 0 ) ; //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_boolean ; //<S2SV> goto out ; //<S2SV> } //<S2SV> tok -> st_pos ++ ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_number : //<S2SV> { //<S2SV> const char * case_start = str ; //<S2SV> int case_len = 0 ; //<S2SV> while ( c && strchr ( json_number_chars , c ) ) { //<S2SV> ++ case_len ; //<S2SV> if ( c == '.' || c == 'e' || c == 'E' ) //<S2SV> tok -> is_double = 1 ; //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! PEEK_CHAR ( c , tok ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , case_len ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> if ( case_len > 0 ) //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , case_len ) ; //<S2SV> if ( tok -> pb -> buf [ 0 ] == '-' && case_len == 1 && //<S2SV> ( c == 'i' || c == 'I' ) ) //<S2SV> { //<S2SV> state = json_tokener_state_inf ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> int64_t num64 ; //<S2SV> double numd ; //<S2SV> if ( ! tok -> is_double && json_parse_int64 ( tok -> pb -> buf , & num64 ) == 0 ) { //<S2SV> if ( num64 && tok -> pb -> buf [ 0 ] == '0' && ( tok -> flags & JSON_TOKENER_STRICT ) ) { //<S2SV> tok -> err = json_tokener_error_parse_number ; //<S2SV> goto out ; //<S2SV> } //<S2SV> current = json_object_new_int64 ( num64 ) ; //<S2SV> } //<S2SV> else if ( tok -> is_double && json_parse_double ( tok -> pb -> buf , & numd ) == 0 ) //<S2SV> { //<S2SV> current = json_object_new_double_s ( numd , tok -> pb -> buf ) ; //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_number ; //<S2SV> goto out ; //<S2SV> } //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_array_after_sep : //<S2SV> case json_tokener_state_array : //<S2SV> if ( c == ']' ) { //<S2SV> if ( state == json_tokener_state_array_after_sep && //<S2SV> ( tok -> flags & JSON_TOKENER_STRICT ) ) //<S2SV> { //<S2SV> tok -> err = json_tokener_error_parse_unexpected ; //<S2SV> goto out ; //<S2SV> } //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else { //<S2SV> if ( tok -> depth >= tok -> max_depth - 1 ) { //<S2SV> tok -> err = json_tokener_error_depth ; //<S2SV> goto out ; //<S2SV> } //<S2SV> state = json_tokener_state_array_add ; //<S2SV> tok -> depth ++ ; //<S2SV> json_tokener_reset_level ( tok , tok -> depth ) ; //<S2SV> goto redo_char ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_array_add : //<S2SV> json_object_array_add ( current , obj ) ; //<S2SV> saved_state = json_tokener_state_array_sep ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> case json_tokener_state_array_sep : //<S2SV> if ( c == ']' ) { //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else if ( c == ',' ) { //<S2SV> saved_state = json_tokener_state_array_after_sep ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_array ; //<S2SV> goto out ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_object_field_start : //<S2SV> case json_tokener_state_object_field_start_after_sep : //<S2SV> if ( c == '}' ) { //<S2SV> if ( state == json_tokener_state_object_field_start_after_sep && //<S2SV> ( tok -> flags & JSON_TOKENER_STRICT ) ) //<S2SV> { //<S2SV> tok -> err = json_tokener_error_parse_unexpected ; //<S2SV> goto out ; //<S2SV> } //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else if ( c == \'"\' || c == '\\'' ) { //<S2SV> tok -> quote_char = c ; //<S2SV> printbuf_reset ( tok -> pb ) ; //<S2SV> state = json_tokener_state_object_field ; //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_object_key_name ; //<S2SV> goto out ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_object_field : //<S2SV> { //<S2SV> const char * case_start = str ; //<S2SV> while ( 1 ) { //<S2SV> if ( c == tok -> quote_char ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> obj_field_name = strdup ( tok -> pb -> buf ) ; //<S2SV> saved_state = json_tokener_state_object_field_end ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> break ; //<S2SV> } else if ( c == '\\\\' ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> saved_state = json_tokener_state_object_field ; //<S2SV> state = json_tokener_state_string_escape ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) || ! PEEK_CHAR ( c , tok ) ) { //<S2SV> printbuf_memappend_fast ( tok -> pb , case_start , str - case_start ) ; //<S2SV> goto out ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_object_field_end : //<S2SV> if ( c == ':' ) { //<S2SV> saved_state = json_tokener_state_object_value ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_object_key_sep ; //<S2SV> goto out ; //<S2SV> } //<S2SV> break ; //<S2SV> case json_tokener_state_object_value : //<S2SV> if ( tok -> depth >= tok -> max_depth - 1 ) { //<S2SV> tok -> err = json_tokener_error_depth ; //<S2SV> goto out ; //<S2SV> } //<S2SV> state = json_tokener_state_object_value_add ; //<S2SV> tok -> depth ++ ; //<S2SV> json_tokener_reset_level ( tok , tok -> depth ) ; //<S2SV> goto redo_char ; //<S2SV> case json_tokener_state_object_value_add : //<S2SV> json_object_object_add ( current , obj_field_name , obj ) ; //<S2SV> free ( obj_field_name ) ; //<S2SV> obj_field_name = NULL ; //<S2SV> saved_state = json_tokener_state_object_sep ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> goto redo_char ; //<S2SV> case json_tokener_state_object_sep : //<S2SV> if ( c == '}' ) { //<S2SV> saved_state = json_tokener_state_finish ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else if ( c == ',' ) { //<S2SV> saved_state = json_tokener_state_object_field_start_after_sep ; //<S2SV> state = json_tokener_state_eatws ; //<S2SV> } else { //<S2SV> tok -> err = json_tokener_error_parse_object_value_sep ; //<S2SV> goto out ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! ADVANCE_CHAR ( str , tok ) ) //<S2SV> goto out ; //<S2SV> } //<S2SV> out : //<S2SV> if ( c && //<S2SV> ( state == json_tokener_state_finish ) && //<S2SV> ( tok -> depth == 0 ) && //<S2SV> ( tok -> flags & JSON_TOKENER_STRICT ) ) { //<S2SV> tok -> err = json_tokener_error_parse_unexpected ; //<S2SV> } //<S2SV> if ( ! c ) { //<S2SV> if ( state != json_tokener_state_finish && //<S2SV> saved_state != json_tokener_state_finish ) //<S2SV> tok -> err = json_tokener_error_parse_eof ; //<S2SV> } //<S2SV> # ifdef HAVE_SETLOCALE //<S2SV> setlocale ( LC_NUMERIC , oldlocale ) ; //<S2SV> if ( oldlocale ) free ( oldlocale ) ; //<S2SV> # endif //<S2SV> if ( tok -> err == json_tokener_success ) //<S2SV> { //<S2SV> json_object * ret = json_object_get ( current ) ; //<S2SV> int ii ; //<S2SV> for ( ii = tok -> depth ; ii >= 0 ; ii -- ) //<S2SV> json_tokener_reset_level ( tok , ii ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> MC_DEBUG ( "json_tokener_parse_ex:<S2SV_blank>error<S2SV_blank>%s<S2SV_blank>at<S2SV_blank>offset<S2SV_blank>%d\\n" , //<S2SV> json_tokener_errors [ tok -> err ] , tok -> char_offset ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> 