static int bin_symbols ( RCore * r , int mode , ut64 laddr , int va , ut64 at , const char * name , bool exponly , const char * args ) { //<S2SV> RBinInfo * info = r_bin_get_info ( r -> bin ) ; //<S2SV> RList * entries = r_bin_get_entries ( r -> bin ) ; //<S2SV> RBinSymbol * symbol ; //<S2SV> RBinAddr * entry ; //<S2SV> RListIter * iter ; //<S2SV> bool firstexp = true ; //<S2SV> bool printHere = false ; //<S2SV> int i = 0 , lastfs = 's' ; //<S2SV> bool bin_demangle = r_config_get_i ( r -> config , "bin.demangle" ) ; //<S2SV> if ( ! info ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( args && * args == '.' ) { //<S2SV> printHere = true ; //<S2SV> } //<S2SV> bool is_arm = info && info -> arch && ! strncmp ( info -> arch , "arm" , 3 ) ; //<S2SV> const char * lang = bin_demangle ? r_config_get ( r -> config , "bin.lang" ) : NULL ; //<S2SV> RList * symbols = r_bin_get_symbols ( r -> bin ) ; //<S2SV> r_spaces_push ( & r -> anal -> meta_spaces , "bin" ) ; //<S2SV> if ( IS_MODE_JSON ( mode ) && ! printHere ) { //<S2SV> r_cons_printf ( "[" ) ; //<S2SV> } else if ( IS_MODE_SET ( mode ) ) { //<S2SV> r_flag_space_set ( r -> flags , R_FLAGS_FS_SYMBOLS ) ; //<S2SV> } else if ( ! at && exponly ) { //<S2SV> if ( IS_MODE_RAD ( mode ) ) { //<S2SV> r_cons_printf ( "fs<S2SV_blank>exports\\n" ) ; //<S2SV> } else if ( IS_MODE_NORMAL ( mode ) ) { //<S2SV> r_cons_printf ( printHere ? "" : "[Exports]\\n" ) ; //<S2SV> } //<S2SV> } else if ( ! at && ! exponly ) { //<S2SV> if ( IS_MODE_RAD ( mode ) ) { //<S2SV> r_cons_printf ( "fs<S2SV_blank>symbols\\n" ) ; //<S2SV> } else if ( IS_MODE_NORMAL ( mode ) ) { //<S2SV> r_cons_printf ( printHere ? "" : "[Symbols]\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( IS_MODE_NORMAL ( mode ) ) { //<S2SV> r_cons_printf ( "Num<S2SV_blank>Paddr<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Vaddr<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Bind<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Type<S2SV_blank>Size<S2SV_blank>Name\\n" ) ; //<S2SV> } //<S2SV> size_t count = 0 ; //<S2SV> r_list_foreach ( symbols , iter , symbol ) { //<S2SV> if ( ! symbol -> name ) { //<S2SV> continue ; //<S2SV> } //<S2SV> char * r_symbol_name = r_str_escape_utf8 ( symbol -> name , false , true ) ; //<S2SV> ut64 addr = compute_addr ( r -> bin , symbol -> paddr , symbol -> vaddr , va ) ; //<S2SV> int len = symbol -> size ? symbol -> size : 32 ; //<S2SV> SymName sn = { 0 } ; //<S2SV> if ( exponly && ! isAnExport ( symbol ) ) { //<S2SV> free ( r_symbol_name ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( name && strcmp ( r_symbol_name , name ) ) { //<S2SV> free ( r_symbol_name ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( at && ( ! symbol -> size || ! is_in_range ( at , addr , symbol -> size ) ) ) { //<S2SV> free ( r_symbol_name ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ( printHere && ! is_in_range ( r -> offset , symbol -> paddr , len ) ) //<S2SV> && ( printHere && ! is_in_range ( r -> offset , addr , len ) ) ) { //<S2SV> free ( r_symbol_name ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> count ++ ; //<S2SV> snInit ( r , & sn , symbol , lang ) ; //<S2SV> if ( IS_MODE_SET ( mode ) && ( is_section_symbol ( symbol ) || is_file_symbol ( symbol ) ) ) { //<S2SV> } else if ( IS_MODE_SET ( mode ) && is_special_symbol ( symbol ) ) { //<S2SV> if ( is_arm ) { //<S2SV> handle_arm_special_symbol ( r , symbol , va ) ; //<S2SV> } //<S2SV> } else if ( IS_MODE_SET ( mode ) ) { //<S2SV> if ( is_arm ) { //<S2SV> handle_arm_symbol ( r , symbol , info , va ) ; //<S2SV> } //<S2SV> select_flag_space ( r , symbol ) ; //<S2SV> if ( sn . classname ) { //<S2SV> RFlagItem * fi = r_flag_get ( r -> flags , sn . methflag ) ; //<S2SV> if ( r -> bin -> prefix ) { //<S2SV> char * prname = r_str_newf ( "%s.%s" , r -> bin -> prefix , sn . methflag ) ; //<S2SV> r_name_filter ( sn . methflag , - 1 ) ; //<S2SV> free ( sn . methflag ) ; //<S2SV> sn . methflag = prname ; //<S2SV> } //<S2SV> if ( fi ) { //<S2SV> r_flag_item_set_realname ( fi , sn . methname ) ; //<S2SV> if ( ( fi -> offset - r -> flags -> base ) == addr ) { //<S2SV> r_flag_unset ( r -> flags , fi ) ; //<S2SV> } //<S2SV> } else { //<S2SV> fi = r_flag_set ( r -> flags , sn . methflag , addr , symbol -> size ) ; //<S2SV> char * comment = fi -> comment ? strdup ( fi -> comment ) : NULL ; //<S2SV> if ( comment ) { //<S2SV> r_flag_item_set_comment ( fi , comment ) ; //<S2SV> R_FREE ( comment ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> const char * n = sn . demname ? sn . demname : sn . name ; //<S2SV> const char * fn = sn . demflag ? sn . demflag : sn . nameflag ; //<S2SV> char * fnp = ( r -> bin -> prefix ) ? //<S2SV> r_str_newf ( "%s.%s" , r -> bin -> prefix , fn ) : //<S2SV> strdup ( fn ) ; //<S2SV> RFlagItem * fi = r_flag_set ( r -> flags , fnp , addr , symbol -> size ) ; //<S2SV> if ( fi ) { //<S2SV> r_flag_item_set_realname ( fi , n ) ; //<S2SV> fi -> demangled = ( bool ) ( size_t ) sn . demname ; //<S2SV> } else { //<S2SV> if ( fn ) { //<S2SV> eprintf ( "[Warning]<S2SV_blank>Can\'t<S2SV_blank>find<S2SV_blank>flag<S2SV_blank>(%s)\\n" , fn ) ; //<S2SV> } //<S2SV> } //<S2SV> free ( fnp ) ; //<S2SV> } //<S2SV> if ( sn . demname ) { //<S2SV> r_meta_add ( r -> anal , R_META_TYPE_COMMENT , //<S2SV> addr , symbol -> size , sn . demname ) ; //<S2SV> } //<S2SV> r_flag_space_pop ( r -> flags ) ; //<S2SV> } else if ( IS_MODE_JSON ( mode ) ) { //<S2SV> char * str = r_str_escape_utf8_for_json ( r_symbol_name , - 1 ) ; //<S2SV> r_cons_printf ( "%s{\\"name\\":\\"%s\\"," //<S2SV> "\\"demname\\":\\"%s\\"," //<S2SV> "\\"flagname\\":\\"%s\\"," //<S2SV> "\\"ordinal\\":%d," //<S2SV> "\\"bind\\":\\"%s\\"," //<S2SV> "\\"size\\":%d," //<S2SV> "\\"type\\":\\"%s\\"," //<S2SV> "\\"vaddr\\":%" PFMT64d "," //<S2SV> "\\"paddr\\":%" PFMT64d "}" , //<S2SV> ( ( exponly && firstexp ) || printHere ) ? "" : ( iter -> p ? "," : "" ) , //<S2SV> str , //<S2SV> sn . demname ? sn . demname : "" , //<S2SV> sn . nameflag , //<S2SV> symbol -> ordinal , //<S2SV> symbol -> bind , //<S2SV> ( int ) symbol -> size , //<S2SV> symbol -> type , //<S2SV> ( ut64 ) addr , ( ut64 ) symbol -> paddr ) ; //<S2SV> free ( str ) ; //<S2SV> } else if ( IS_MODE_SIMPLE ( mode ) ) { //<S2SV> const char * name = sn . demname ? sn . demname : r_symbol_name ; //<S2SV> r_cons_printf ( "0x%08" PFMT64x "<S2SV_blank>%d<S2SV_blank>%s\\n" , //<S2SV> addr , ( int ) symbol -> size , name ) ; //<S2SV> } else if ( IS_MODE_SIMPLEST ( mode ) ) { //<S2SV> const char * name = sn . demname ? sn . demname : r_symbol_name ; //<S2SV> r_cons_printf ( "%s\\n" , name ) ; //<S2SV> } else if ( IS_MODE_RAD ( mode ) ) { //<S2SV> if ( is_special_symbol ( symbol ) ) { //<S2SV> goto next ; //<S2SV> } //<S2SV> RBinFile * binfile ; //<S2SV> RBinPlugin * plugin ; //<S2SV> const char * name = sn . demname ? sn . demname : r_symbol_name ; //<S2SV> if ( ! name ) { //<S2SV> goto next ; //<S2SV> } //<S2SV> if ( ! strncmp ( name , "imp." , 4 ) ) { //<S2SV> if ( lastfs != 'i' ) { //<S2SV> r_cons_printf ( "fs<S2SV_blank>imports\\n" ) ; //<S2SV> } //<S2SV> lastfs = 'i' ; //<S2SV> } else { //<S2SV> if ( lastfs != 's' ) { //<S2SV> const char * fs = exponly ? "exports" : "symbols" ; //<S2SV> r_cons_printf ( "fs<S2SV_blank>%s\\n" , fs ) ; //<S2SV> } //<S2SV> lastfs = 's' ; //<S2SV> } //<S2SV> if ( r -> bin -> prefix || * name ) { //<S2SV> char * flagname = construct_symbol_flagname ( "sym" , name , MAXFLAG_LEN_DEFAULT ) ; //<S2SV> if ( ! flagname ) { //<S2SV> goto next ; //<S2SV> } //<S2SV> r_cons_printf ( "\\"f<S2SV_blank>%s%s%s<S2SV_blank>%u<S2SV_blank>0x%08" PFMT64x "\\"\\n" , //<S2SV> r -> bin -> prefix ? r -> bin -> prefix : "" , r -> bin -> prefix ? "." : "" , //<S2SV> flagname , symbol -> size , addr ) ; //<S2SV> free ( flagname ) ; //<S2SV> } //<S2SV> binfile = r_bin_cur ( r -> bin ) ; //<S2SV> plugin = r_bin_file_cur_plugin ( binfile ) ; //<S2SV> if ( plugin && plugin -> name ) { //<S2SV> if ( r_str_startswith ( plugin -> name , "pe" ) ) { //<S2SV> char * module = strdup ( r_symbol_name ) ; //<S2SV> char * p = strstr ( module , ".dll_" ) ; //<S2SV> if ( p && strstr ( module , "imp." ) ) { //<S2SV> char * symname = __filterShell ( p + 5 ) ; //<S2SV> char * m = __filterShell ( module ) ; //<S2SV> * p = 0 ; //<S2SV> if ( r -> bin -> prefix ) { //<S2SV> r_cons_printf ( "\\"k<S2SV_blank>bin/pe/%s/%d=%s.%s\\"\\n" , //<S2SV> module , symbol -> ordinal , r -> bin -> prefix , symname ) ; //<S2SV> } else { //<S2SV> r_cons_printf ( "\\"k<S2SV_blank>bin/pe/%s/%d=%s\\"\\n" , //<S2SV> module , symbol -> ordinal , symname ) ; //<S2SV> } //<S2SV> free ( symname ) ; //<S2SV> free ( m ) ; //<S2SV> } //<S2SV> free ( module ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> const char * bind = symbol -> bind ? symbol -> bind : "NONE" ; //<S2SV> const char * type = symbol -> type ? symbol -> type : "NONE" ; //<S2SV> const char * name = r_str_get ( sn . demname ? sn . demname : r_symbol_name ) ; //<S2SV> r_cons_printf ( "%03u" , symbol -> ordinal ) ; //<S2SV> if ( symbol -> paddr == UT64_MAX ) { //<S2SV> r_cons_printf ( "<S2SV_blank>----------" ) ; //<S2SV> } else { //<S2SV> r_cons_printf ( "<S2SV_blank>0x%08" PFMT64x , symbol -> paddr ) ; //<S2SV> } //<S2SV> r_cons_printf ( "<S2SV_blank>0x%08" PFMT64x "<S2SV_blank>%6s<S2SV_blank>%6s<S2SV_blank>%4d%s%s\\n" , //<S2SV> addr , bind , type , symbol -> size , * name ? "<S2SV_blank>" : "" , name ) ; //<S2SV> } //<S2SV> next : //<S2SV> snFini ( & sn ) ; //<S2SV> i ++ ; //<S2SV> free ( r_symbol_name ) ; //<S2SV> if ( exponly && firstexp ) { //<S2SV> firstexp = false ; //<S2SV> } //<S2SV> if ( printHere ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( count == 0 && IS_MODE_JSON ( mode ) ) { //<S2SV> r_cons_printf ( "{}" ) ; //<S2SV> } //<S2SV> if ( is_arm ) { //<S2SV> r_list_foreach ( entries , iter , entry ) { //<S2SV> if ( IS_MODE_SET ( mode ) ) { //<S2SV> handle_arm_entry ( r , entry , info , va ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( IS_MODE_JSON ( mode ) && ! printHere ) { //<S2SV> r_cons_printf ( "]" ) ; //<S2SV> } //<S2SV> r_spaces_pop ( & r -> anal -> meta_spaces ) ; //<S2SV> return true ; //<S2SV> } //<S2SV> 