static gboolean //<S2SV> side_in_cb ( GSocket * socket , GIOCondition condition , gpointer user_data ) //<S2SV> { //<S2SV> ProxySide * side = user_data ; //<S2SV> FlatpakProxyClient * client = side -> client ; //<S2SV> GError * error = NULL ; //<S2SV> Buffer * buffer ; //<S2SV> gboolean retval = G_SOURCE_CONTINUE ; //<S2SV> g_object_ref ( client ) ; //<S2SV> while ( ! side -> closed ) //<S2SV> { //<S2SV> if ( ! side -> got_first_byte ) //<S2SV> buffer = buffer_new ( 1 , NULL ) ; //<S2SV> else if ( ! client -> authenticated ) //<S2SV> buffer = buffer_new ( 64 , NULL ) ; //<S2SV> else //<S2SV> buffer = side -> current_read_buffer ; //<S2SV> if ( ! buffer_read ( side , buffer , socket ) ) //<S2SV> { //<S2SV> if ( buffer != side -> current_read_buffer ) //<S2SV> buffer_unref ( buffer ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! client -> authenticated ) //<S2SV> { //<S2SV> if ( buffer -> pos > 0 ) //<S2SV> { //<S2SV> gboolean found_auth_end = FALSE ; //<S2SV> gsize extra_data ; //<S2SV> buffer -> size = buffer -> pos ; //<S2SV> if ( ! side -> got_first_byte ) //<S2SV> { //<S2SV> buffer -> send_credentials = TRUE ; //<S2SV> side -> got_first_byte = TRUE ; //<S2SV> } //<S2SV> else if ( side == & client -> client_side ) //<S2SV> { //<S2SV> gssize auth_end = find_auth_end ( client , buffer ) ; //<S2SV> if ( auth_end >= 0 ) //<S2SV> { //<S2SV> found_auth_end = TRUE ; //<S2SV> buffer -> size = auth_end ; //<S2SV> extra_data = buffer -> pos - buffer -> size ; //<S2SV> if ( extra_data > 0 ) //<S2SV> side -> extra_input_data = g_bytes_new ( buffer -> data + buffer -> size , extra_data ) ; //<S2SV> } //<S2SV> } //<S2SV> got_buffer_from_side ( side , buffer ) ; //<S2SV> if ( found_auth_end ) //<S2SV> client -> authenticated = TRUE ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> buffer_unref ( buffer ) ; //<S2SV> } //<S2SV> } //<S2SV> else if ( buffer -> pos == buffer -> size ) //<S2SV> { //<S2SV> if ( buffer == & side -> header_buffer ) //<S2SV> { //<S2SV> gssize required ; //<S2SV> required = g_dbus_message_bytes_needed ( buffer -> data , buffer -> size , & error ) ; //<S2SV> if ( required < 0 ) //<S2SV> { //<S2SV> g_warning ( "Invalid<S2SV_blank>message<S2SV_blank>header<S2SV_blank>read" ) ; //<S2SV> side_closed ( side ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> side -> current_read_buffer = buffer_new ( required , buffer ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> got_buffer_from_side ( side , buffer ) ; //<S2SV> side -> header_buffer . pos = 0 ; //<S2SV> side -> current_read_buffer = & side -> header_buffer ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( side -> closed ) //<S2SV> { //<S2SV> side -> in_source = NULL ; //<S2SV> retval = G_SOURCE_REMOVE ; //<S2SV> } //<S2SV> g_object_unref ( client ) ; //<S2SV> return retval ; //<S2SV> } //<S2SV> 