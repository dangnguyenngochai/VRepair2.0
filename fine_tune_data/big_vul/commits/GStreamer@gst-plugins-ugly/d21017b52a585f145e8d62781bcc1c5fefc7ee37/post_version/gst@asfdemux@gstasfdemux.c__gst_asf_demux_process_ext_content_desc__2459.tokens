static GstFlowReturn //<S2SV> gst_asf_demux_process_ext_content_desc ( GstASFDemux * demux , guint8 * data , //<S2SV> guint64 size ) //<S2SV> { //<S2SV> GstTagList * taglist ; //<S2SV> guint16 blockcount , i ; //<S2SV> gboolean content3D = FALSE ; //<S2SV> struct //<S2SV> { //<S2SV> const gchar * interleave_name ; //<S2SV> GstASF3DMode interleaving_type ; //<S2SV> } stereoscopic_layout_map [ ] = { //<S2SV> { //<S2SV> "SideBySideRF" , GST_ASF_3D_SIDE_BY_SIDE_HALF_RL } , { //<S2SV> "SideBySideLF" , GST_ASF_3D_SIDE_BY_SIDE_HALF_LR } , { //<S2SV> "OverUnderRT" , GST_ASF_3D_TOP_AND_BOTTOM_HALF_RL } , { //<S2SV> "OverUnderLT" , GST_ASF_3D_TOP_AND_BOTTOM_HALF_LR } , { //<S2SV> "DualStream" , GST_ASF_3D_DUAL_STREAM } //<S2SV> } ; //<S2SV> GST_INFO_OBJECT ( demux , "object<S2SV_blank>is<S2SV_blank>an<S2SV_blank>extended<S2SV_blank>content<S2SV_blank>description" ) ; //<S2SV> taglist = gst_tag_list_new_empty ( ) ; //<S2SV> if ( size < 2 ) //<S2SV> goto not_enough_data ; //<S2SV> blockcount = gst_asf_demux_get_uint16 ( & data , & size ) ; //<S2SV> for ( i = 1 ; i <= blockcount ; ++ i ) { //<S2SV> const gchar * gst_tag_name ; //<S2SV> guint16 datatype ; //<S2SV> guint16 value_len ; //<S2SV> guint16 name_len ; //<S2SV> GValue tag_value = { 0 , } ; //<S2SV> gsize in , out ; //<S2SV> gchar * name ; //<S2SV> gchar * name_utf8 = NULL ; //<S2SV> gchar * value ; //<S2SV> if ( ! gst_asf_demux_get_string ( & name , & name_len , & data , & size ) ) //<S2SV> goto not_enough_data ; //<S2SV> if ( size < 2 ) { //<S2SV> g_free ( name ) ; //<S2SV> goto not_enough_data ; //<S2SV> } //<S2SV> datatype = gst_asf_demux_get_uint16 ( & data , & size ) ; //<S2SV> if ( ! gst_asf_demux_get_string ( & value , & value_len , & data , & size ) ) { //<S2SV> g_free ( name ) ; //<S2SV> goto not_enough_data ; //<S2SV> } //<S2SV> name_utf8 = //<S2SV> g_convert ( name , name_len , "UTF-8" , "UTF-16LE" , & in , & out , NULL ) ; //<S2SV> if ( name_utf8 != NULL ) { //<S2SV> GST_DEBUG ( "Found<S2SV_blank>tag/metadata<S2SV_blank>%s" , name_utf8 ) ; //<S2SV> gst_tag_name = gst_asf_demux_get_gst_tag_from_tag_name ( name_utf8 ) ; //<S2SV> GST_DEBUG ( "gst_tag_name<S2SV_blank>%s" , GST_STR_NULL ( gst_tag_name ) ) ; //<S2SV> switch ( datatype ) { //<S2SV> case ASF_DEMUX_DATA_TYPE_UTF16LE_STRING : { //<S2SV> gchar * value_utf8 ; //<S2SV> value_utf8 = g_convert ( value , value_len , "UTF-8" , "UTF-16LE" , //<S2SV> & in , & out , NULL ) ; //<S2SV> if ( value_utf8 != NULL && * value_utf8 != '\\0' ) { //<S2SV> GST_DEBUG ( "string<S2SV_blank>value<S2SV_blank>%s" , value_utf8 ) ; //<S2SV> value_utf8 [ out ] = '\\0' ; //<S2SV> if ( gst_tag_name != NULL ) { //<S2SV> if ( strcmp ( gst_tag_name , GST_TAG_DATE_TIME ) == 0 ) { //<S2SV> guint year = atoi ( value_utf8 ) ; //<S2SV> if ( year > 0 ) { //<S2SV> g_value_init ( & tag_value , GST_TYPE_DATE_TIME ) ; //<S2SV> g_value_take_boxed ( & tag_value , gst_date_time_new_y ( year ) ) ; //<S2SV> } //<S2SV> } else if ( strcmp ( gst_tag_name , GST_TAG_GENRE ) == 0 ) { //<S2SV> guint id3v1_genre_id ; //<S2SV> const gchar * genre_str ; //<S2SV> if ( sscanf ( value_utf8 , "(%u)" , & id3v1_genre_id ) == 1 && //<S2SV> ( ( genre_str = gst_tag_id3_genre_get ( id3v1_genre_id ) ) ) ) { //<S2SV> GST_DEBUG ( "Genre:<S2SV_blank>%s<S2SV_blank>-><S2SV_blank>%s" , value_utf8 , genre_str ) ; //<S2SV> g_free ( value_utf8 ) ; //<S2SV> value_utf8 = g_strdup ( genre_str ) ; //<S2SV> } //<S2SV> } else { //<S2SV> GType tag_type ; //<S2SV> tag_type = gst_tag_get_type ( gst_tag_name ) ; //<S2SV> g_value_init ( & tag_value , tag_type ) ; //<S2SV> if ( ! gst_value_deserialize ( & tag_value , value_utf8 ) ) { //<S2SV> GValue from_val = { 0 , } ; //<S2SV> g_value_init ( & from_val , G_TYPE_STRING ) ; //<S2SV> g_value_set_string ( & from_val , value_utf8 ) ; //<S2SV> if ( ! g_value_transform ( & from_val , & tag_value ) ) { //<S2SV> GST_WARNING_OBJECT ( demux , //<S2SV> "Could<S2SV_blank>not<S2SV_blank>transform<S2SV_blank>string<S2SV_blank>tag<S2SV_blank>to<S2SV_blank>" "%s<S2SV_blank>tag<S2SV_blank>type<S2SV_blank>%s" , //<S2SV> gst_tag_name , g_type_name ( tag_type ) ) ; //<S2SV> g_value_unset ( & tag_value ) ; //<S2SV> } //<S2SV> g_value_unset ( & from_val ) ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> GST_DEBUG ( "Setting<S2SV_blank>metadata" ) ; //<S2SV> g_value_init ( & tag_value , G_TYPE_STRING ) ; //<S2SV> g_value_set_string ( & tag_value , value_utf8 ) ; //<S2SV> if ( content3D ) { //<S2SV> guint i ; //<S2SV> if ( strncmp ( "StereoscopicLayout" , name_utf8 , //<S2SV> strlen ( name_utf8 ) ) == 0 ) { //<S2SV> for ( i = 0 ; i < G_N_ELEMENTS ( stereoscopic_layout_map ) ; i ++ ) { //<S2SV> if ( g_str_equal ( stereoscopic_layout_map [ i ] . interleave_name , //<S2SV> value_utf8 ) ) { //<S2SV> demux -> asf_3D_mode = //<S2SV> stereoscopic_layout_map [ i ] . interleaving_type ; //<S2SV> GST_INFO ( "find<S2SV_blank>interleave<S2SV_blank>type<S2SV_blank>%u" , demux -> asf_3D_mode ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> GST_INFO_OBJECT ( demux , "3d<S2SV_blank>type<S2SV_blank>is<S2SV_blank>%u" , demux -> asf_3D_mode ) ; //<S2SV> } else { //<S2SV> demux -> asf_3D_mode = GST_ASF_3D_NONE ; //<S2SV> GST_INFO_OBJECT ( demux , "None<S2SV_blank>3d<S2SV_blank>type" ) ; //<S2SV> } //<S2SV> } //<S2SV> } else if ( value_utf8 == NULL ) { //<S2SV> GST_WARNING ( "Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>string<S2SV_blank>value<S2SV_blank>to<S2SV_blank>UTF8,<S2SV_blank>skipping" ) ; //<S2SV> } else { //<S2SV> GST_DEBUG ( "Skipping<S2SV_blank>empty<S2SV_blank>string<S2SV_blank>value<S2SV_blank>for<S2SV_blank>%s" , //<S2SV> GST_STR_NULL ( gst_tag_name ) ) ; //<S2SV> } //<S2SV> g_free ( value_utf8 ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case ASF_DEMUX_DATA_TYPE_BYTE_ARRAY : { //<S2SV> if ( gst_tag_name ) { //<S2SV> if ( ! g_str_equal ( gst_tag_name , GST_TAG_IMAGE ) ) { //<S2SV> GST_FIXME ( "Unhandled<S2SV_blank>byte<S2SV_blank>array<S2SV_blank>tag<S2SV_blank>%s" , //<S2SV> GST_STR_NULL ( gst_tag_name ) ) ; //<S2SV> break ; //<S2SV> } else { //<S2SV> asf_demux_parse_picture_tag ( taglist , ( guint8 * ) value , //<S2SV> value_len ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case ASF_DEMUX_DATA_TYPE_DWORD : { //<S2SV> guint uint_val ; //<S2SV> if ( value_len < 4 ) //<S2SV> break ; //<S2SV> uint_val = GST_READ_UINT32_LE ( value ) ; //<S2SV> g_value_init ( & tag_value , G_TYPE_UINT ) ; //<S2SV> if ( ! strcmp ( name_utf8 , "WM/Track" ) ) //<S2SV> ++ uint_val ; //<S2SV> g_value_set_uint ( & tag_value , uint_val ) ; //<S2SV> break ; //<S2SV> } //<S2SV> case ASF_DEMUX_DATA_TYPE_BOOL : { //<S2SV> gboolean bool_val ; //<S2SV> if ( value_len < 4 ) //<S2SV> break ; //<S2SV> bool_val = GST_READ_UINT32_LE ( value ) ; //<S2SV> if ( strncmp ( "Stereoscopic" , name_utf8 , strlen ( name_utf8 ) ) == 0 ) { //<S2SV> if ( bool_val ) { //<S2SV> GST_INFO_OBJECT ( demux , "This<S2SV_blank>is<S2SV_blank>3D<S2SV_blank>contents" ) ; //<S2SV> content3D = TRUE ; //<S2SV> } else { //<S2SV> GST_INFO_OBJECT ( demux , "This<S2SV_blank>is<S2SV_blank>not<S2SV_blank>3D<S2SV_blank>contenst" ) ; //<S2SV> content3D = FALSE ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> default : { //<S2SV> GST_DEBUG ( "Skipping<S2SV_blank>tag<S2SV_blank>%s<S2SV_blank>of<S2SV_blank>type<S2SV_blank>%d" , gst_tag_name , datatype ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( G_IS_VALUE ( & tag_value ) ) { //<S2SV> if ( gst_tag_name ) { //<S2SV> GstTagMergeMode merge_mode = GST_TAG_MERGE_APPEND ; //<S2SV> if ( strcmp ( name_utf8 , "WM/TrackNumber" ) == 0 ) //<S2SV> merge_mode = GST_TAG_MERGE_REPLACE ; //<S2SV> gst_tag_list_add_values ( taglist , merge_mode , gst_tag_name , //<S2SV> & tag_value , NULL ) ; //<S2SV> } else { //<S2SV> GST_DEBUG ( "Setting<S2SV_blank>global<S2SV_blank>metadata<S2SV_blank>%s" , name_utf8 ) ; //<S2SV> gst_structure_set_value ( demux -> global_metadata , name_utf8 , //<S2SV> & tag_value ) ; //<S2SV> } //<S2SV> g_value_unset ( & tag_value ) ; //<S2SV> } //<S2SV> } //<S2SV> g_free ( name ) ; //<S2SV> g_free ( value ) ; //<S2SV> g_free ( name_utf8 ) ; //<S2SV> } //<S2SV> gst_asf_demux_add_global_tags ( demux , taglist ) ; //<S2SV> return GST_FLOW_OK ; //<S2SV> not_enough_data : //<S2SV> { //<S2SV> GST_WARNING ( "Unexpected<S2SV_blank>end<S2SV_blank>of<S2SV_blank>data<S2SV_blank>parsing<S2SV_blank>ext<S2SV_blank>content<S2SV_blank>desc<S2SV_blank>object" ) ; //<S2SV> gst_tag_list_unref ( taglist ) ; //<S2SV> return GST_FLOW_OK ; //<S2SV> } //<S2SV> } //<S2SV> 