int MSG_ReadBits ( msg_t * msg , int bits ) { //<S2SV> int value ; //<S2SV> int get ; //<S2SV> qboolean sgn ; //<S2SV> int i , nbits ; //<S2SV> if ( msg -> readcount > msg -> cursize ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> value = 0 ; //<S2SV> if ( bits < 0 ) { //<S2SV> bits = - bits ; //<S2SV> sgn = qtrue ; //<S2SV> } else { //<S2SV> sgn = qfalse ; //<S2SV> } //<S2SV> if ( msg -> oob ) { //<S2SV> if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { //<S2SV> msg -> readcount = msg -> cursize + 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( bits == 8 ) //<S2SV> { //<S2SV> value = msg -> data [ msg -> readcount ] ; //<S2SV> msg -> readcount += 1 ; //<S2SV> msg -> bit += 8 ; //<S2SV> } //<S2SV> else if ( bits == 16 ) //<S2SV> { //<S2SV> short temp ; //<S2SV> CopyLittleShort ( & temp , & msg -> data [ msg -> readcount ] ) ; //<S2SV> value = temp ; //<S2SV> msg -> readcount += 2 ; //<S2SV> msg -> bit += 16 ; //<S2SV> } //<S2SV> else if ( bits == 32 ) //<S2SV> { //<S2SV> CopyLittleLong ( & value , & msg -> data [ msg -> readcount ] ) ; //<S2SV> msg -> readcount += 4 ; //<S2SV> msg -> bit += 32 ; //<S2SV> } //<S2SV> else //<S2SV> Com_Error ( ERR_DROP , "can\'t<S2SV_blank>read<S2SV_blank>%d<S2SV_blank>bits" , bits ) ; //<S2SV> } else { //<S2SV> nbits = 0 ; //<S2SV> if ( bits & 7 ) { //<S2SV> nbits = bits & 7 ; //<S2SV> if ( msg -> bit + nbits > msg -> cursize << 3 ) { //<S2SV> msg -> readcount = msg -> cursize + 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < nbits ; i ++ ) { //<S2SV> value |= ( Huff_getBit ( msg -> data , & msg -> bit ) << i ) ; //<S2SV> } //<S2SV> bits = bits - nbits ; //<S2SV> } //<S2SV> if ( bits ) { //<S2SV> for ( i = 0 ; i < bits ; i += 8 ) { //<S2SV> Huff_offsetReceive ( msgHuff . decompressor . tree , & get , msg -> data , & msg -> bit , msg -> cursize << 3 ) ; //<S2SV> value |= ( get << ( i + nbits ) ) ; //<S2SV> if ( msg -> bit > msg -> cursize << 3 ) { //<S2SV> msg -> readcount = msg -> cursize + 1 ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> msg -> readcount = ( msg -> bit >> 3 ) + 1 ; //<S2SV> } //<S2SV> if ( sgn && bits > 0 && bits < 32 ) { //<S2SV> if ( value & ( 1 << ( bits - 1 ) ) ) { //<S2SV> value |= - 1 ^ ( ( 1 << bits ) - 1 ) ; //<S2SV> } //<S2SV> } //<S2SV> return value ; //<S2SV> } //<S2SV> 