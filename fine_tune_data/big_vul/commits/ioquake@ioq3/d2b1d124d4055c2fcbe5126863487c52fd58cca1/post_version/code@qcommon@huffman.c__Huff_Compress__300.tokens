void Huff_Compress ( msg_t * mbuf , int offset ) { //<S2SV> int i , ch , size ; //<S2SV> byte seq [ 65536 ] ; //<S2SV> byte * buffer ; //<S2SV> huff_t huff ; //<S2SV> size = mbuf -> cursize - offset ; //<S2SV> buffer = mbuf -> data + + offset ; //<S2SV> if ( size <= 0 ) { //<S2SV> return ; //<S2SV> } //<S2SV> Com_Memset ( & huff , 0 , sizeof ( huff_t ) ) ; //<S2SV> huff . tree = huff . lhead = huff . loc [ NYT ] = & ( huff . nodeList [ huff . blocNode ++ ] ) ; //<S2SV> huff . tree -> symbol = NYT ; //<S2SV> huff . tree -> weight = 0 ; //<S2SV> huff . lhead -> next = huff . lhead -> prev = NULL ; //<S2SV> huff . tree -> parent = huff . tree -> left = huff . tree -> right = NULL ; //<S2SV> seq [ 0 ] = ( size >> 8 ) ; //<S2SV> seq [ 1 ] = size & 0xff ; //<S2SV> bloc = 16 ; //<S2SV> for ( i = 0 ; i < size ; i ++ ) { //<S2SV> ch = buffer [ i ] ; //<S2SV> Huff_transmit ( & huff , ch , seq , size << 3 ) ; //<S2SV> Huff_addRef ( & huff , ( byte ) ch ) ; //<S2SV> } //<S2SV> bloc += 8 ; //<S2SV> mbuf -> cursize = ( bloc >> 3 ) + offset ; //<S2SV> Com_Memcpy ( mbuf -> data + offset , seq , ( bloc >> 3 ) ) ; //<S2SV> } //<S2SV> 