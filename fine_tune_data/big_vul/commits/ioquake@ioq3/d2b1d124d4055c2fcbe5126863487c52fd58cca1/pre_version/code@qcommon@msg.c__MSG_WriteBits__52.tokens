void MSG_WriteBits ( msg_t * msg , int value , int bits ) { //<S2SV> int i ; //<S2SV> oldsize += bits ; //<S2SV> if ( msg -> maxsize - msg -> cursize < 4 ) { //<S2SV> msg -> overflowed = qtrue ; //<S2SV> return ; //<S2SV> } //<S2SV> if ( bits == 0 || bits < - 31 || bits > 32 ) { //<S2SV> Com_Error ( ERR_DROP , "MSG_WriteBits:<S2SV_blank>bad<S2SV_blank>bits<S2SV_blank>%i" , bits ) ; //<S2SV> } //<S2SV> if ( bits < 0 ) { //<S2SV> bits = - bits ; //<S2SV> } //<S2SV> if ( msg -> oob ) { //<S2SV> if ( bits == 8 ) { //<S2SV> msg -> data [ msg -> cursize ] = value ; //<S2SV> msg -> cursize += 1 ; //<S2SV> msg -> bit += 8 ; //<S2SV> } else if ( bits == 16 ) { //<S2SV> short temp = value ; //<S2SV> CopyLittleShort ( & msg -> data [ msg -> cursize ] , & temp ) ; //<S2SV> msg -> cursize += 2 ; //<S2SV> msg -> bit += 16 ; //<S2SV> } else if ( bits == 32 ) { //<S2SV> CopyLittleLong ( & msg -> data [ msg -> cursize ] , & value ) ; //<S2SV> msg -> cursize += 4 ; //<S2SV> msg -> bit += 32 ; //<S2SV> } else { //<S2SV> Com_Error ( ERR_DROP , "can\'t<S2SV_blank>write<S2SV_blank>%d<S2SV_blank>bits" , bits ) ; //<S2SV> } //<S2SV> } else { //<S2SV> value &= ( 0xffffffff >> ( 32 - bits ) ) ; //<S2SV> if ( bits & 7 ) { //<S2SV> int nbits ; //<S2SV> nbits = bits & 7 ; //<S2SV> for ( i = 0 ; i < nbits ; i ++ ) { //<S2SV> Huff_putBit ( ( value & 1 ) , msg -> data , & msg -> bit ) ; //<S2SV> value = ( value >> 1 ) ; //<S2SV> } //<S2SV> bits = bits - nbits ; //<S2SV> } //<S2SV> if ( bits ) { //<S2SV> for ( i = 0 ; i < bits ; i += 8 ) { //<S2SV> Huff_offsetTransmit ( & msgHuff . compressor , ( value & 0xff ) , msg -> data , & msg -> bit ) ; //<S2SV> value = ( value >> 8 ) ; //<S2SV> } //<S2SV> } //<S2SV> msg -> cursize = ( msg -> bit >> 3 ) + 1 ; //<S2SV> } //<S2SV> } //<S2SV> 