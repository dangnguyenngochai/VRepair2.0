unsigned char * base64decode ( const char * buf , size_t * size ) //<S2SV> { //<S2SV> if ( ! buf || ! size ) return NULL ; //<S2SV> size_t len = ( * size > 0 ) ? * size : strlen ( buf ) ; //<S2SV> if ( len <= 0 ) return NULL ; //<S2SV> unsigned char * outbuf = ( unsigned char * ) malloc ( ( len / 4 ) * 3 + 3 ) ; //<S2SV> const char * ptr = buf ; //<S2SV> int p = 0 ; //<S2SV> int wv , w1 , w2 , w3 , w4 ; //<S2SV> int tmpval [ 4 ] ; //<S2SV> int tmpcnt = 0 ; //<S2SV> do { //<S2SV> while ( ptr < buf + len && ( * ptr == '<S2SV_blank>' || * ptr == '\\t' || * ptr == '\\n' || * ptr == '\\r' ) ) { //<S2SV> ptr ++ ; //<S2SV> } //<S2SV> if ( * ptr == '\\0' || ptr >= buf + len ) { //<S2SV> break ; //<S2SV> } //<S2SV> if ( ( wv = base64_table [ ( int ) ( unsigned char ) * ptr ++ ] ) == - 1 ) { //<S2SV> continue ; //<S2SV> } //<S2SV> tmpval [ tmpcnt ++ ] = wv ; //<S2SV> if ( tmpcnt == 4 ) { //<S2SV> tmpcnt = 0 ; //<S2SV> w1 = tmpval [ 0 ] ; //<S2SV> w2 = tmpval [ 1 ] ; //<S2SV> w3 = tmpval [ 2 ] ; //<S2SV> w4 = tmpval [ 3 ] ; //<S2SV> if ( w2 >= 0 ) { //<S2SV> outbuf [ p ++ ] = ( unsigned char ) ( ( ( w1 << 2 ) + ( w2 >> 4 ) ) & 0xFF ) ; //<S2SV> } //<S2SV> if ( w3 >= 0 ) { //<S2SV> outbuf [ p ++ ] = ( unsigned char ) ( ( ( w2 << 4 ) + ( w3 >> 2 ) ) & 0xFF ) ; //<S2SV> } //<S2SV> if ( w4 >= 0 ) { //<S2SV> outbuf [ p ++ ] = ( unsigned char ) ( ( ( w3 << 6 ) + w4 ) & 0xFF ) ; //<S2SV> } //<S2SV> } //<S2SV> } while ( 1 ) ; //<S2SV> outbuf [ p ] = 0 ; //<S2SV> * size = p ; //<S2SV> return outbuf ; //<S2SV> } //<S2SV> 