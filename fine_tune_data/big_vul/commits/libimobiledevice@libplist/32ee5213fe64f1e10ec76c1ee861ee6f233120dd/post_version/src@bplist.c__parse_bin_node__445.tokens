static plist_t parse_bin_node ( struct bplist_data * bplist , const char * * object ) //<S2SV> { //<S2SV> uint16_t type = 0 ; //<S2SV> uint64_t size = 0 ; //<S2SV> if ( ! object ) //<S2SV> return NULL ; //<S2SV> type = ( * * object ) & BPLIST_MASK ; //<S2SV> size = ( * * object ) & BPLIST_FILL ; //<S2SV> ( * object ) ++ ; //<S2SV> if ( size == BPLIST_FILL ) { //<S2SV> switch ( type ) { //<S2SV> case BPLIST_DATA : //<S2SV> case BPLIST_STRING : //<S2SV> case BPLIST_UNICODE : //<S2SV> case BPLIST_ARRAY : //<S2SV> case BPLIST_SET : //<S2SV> case BPLIST_DICT : //<S2SV> { //<S2SV> uint16_t next_size = * * object & BPLIST_FILL ; //<S2SV> if ( ( * * object & BPLIST_MASK ) != BPLIST_UINT ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>invalid<S2SV_blank>size<S2SV_blank>node<S2SV_blank>type<S2SV_blank>for<S2SV_blank>node<S2SV_blank>type<S2SV_blank>0x%02x:<S2SV_blank>found<S2SV_blank>0x%02x,<S2SV_blank>expected<S2SV_blank>0x%02x\\n" , __func__ , type , * * object & BPLIST_MASK , BPLIST_UINT ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> ( * object ) ++ ; //<S2SV> next_size = 1 << next_size ; //<S2SV> if ( * object + next_size > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>size<S2SV_blank>node<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>for<S2SV_blank>node<S2SV_blank>type<S2SV_blank>0x%02x<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ , type ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> size = UINT_TO_HOST ( * object , next_size ) ; //<S2SV> ( * object ) += next_size ; //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> switch ( type ) //<S2SV> { //<S2SV> case BPLIST_NULL : //<S2SV> switch ( size ) //<S2SV> { //<S2SV> case BPLIST_TRUE : //<S2SV> { //<S2SV> plist_data_t data = plist_new_plist_data ( ) ; //<S2SV> data -> type = PLIST_BOOLEAN ; //<S2SV> data -> boolval = TRUE ; //<S2SV> data -> length = 1 ; //<S2SV> return node_create ( NULL , data ) ; //<S2SV> } //<S2SV> case BPLIST_FALSE : //<S2SV> { //<S2SV> plist_data_t data = plist_new_plist_data ( ) ; //<S2SV> data -> type = PLIST_BOOLEAN ; //<S2SV> data -> boolval = FALSE ; //<S2SV> data -> length = 1 ; //<S2SV> return node_create ( NULL , data ) ; //<S2SV> } //<S2SV> case BPLIST_NULL : //<S2SV> default : //<S2SV> return NULL ; //<S2SV> } //<S2SV> case BPLIST_UINT : //<S2SV> if ( * object + ( uint64_t ) ( 1 << size ) > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_UINT<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_uint_node ( object , size ) ; //<S2SV> case BPLIST_REAL : //<S2SV> if ( * object + ( uint64_t ) ( 1 << size ) > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_REAL<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_real_node ( object , size ) ; //<S2SV> case BPLIST_DATE : //<S2SV> if ( 3 != size ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>invalid<S2SV_blank>data<S2SV_blank>size<S2SV_blank>for<S2SV_blank>BPLIST_DATE<S2SV_blank>node\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> if ( * object + ( uint64_t ) ( 1 << size ) > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_DATE<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_date_node ( object , size ) ; //<S2SV> case BPLIST_DATA : //<S2SV> if ( * object + size < * object || * object + size > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_DATA<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_data_node ( object , size ) ; //<S2SV> case BPLIST_STRING : //<S2SV> if ( * object + size < * object || * object + size > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_STRING<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_string_node ( object , size ) ; //<S2SV> case BPLIST_UNICODE : //<S2SV> if ( size * 2 < size ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>BPLIST_UNICODE<S2SV_blank>data<S2SV_blank>size.\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> if ( * object + size * 2 < * object || * object + size * 2 > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_UNICODE<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_unicode_node ( object , size ) ; //<S2SV> case BPLIST_SET : //<S2SV> case BPLIST_ARRAY : //<S2SV> if ( * object + size < * object || * object + size > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_ARRAY<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_array_node ( bplist , object , size ) ; //<S2SV> case BPLIST_UID : //<S2SV> if ( * object + size + 1 > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_UID<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_uid_node ( object , size ) ; //<S2SV> case BPLIST_DICT : //<S2SV> if ( * object + size < * object || * object + size > bplist -> offset_table ) { //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_DICT<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" , __func__ ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return parse_dict_node ( bplist , object , size ) ; //<S2SV> default : //<S2SV> PLIST_BIN_ERR ( "%s:<S2SV_blank>unexpected<S2SV_blank>node<S2SV_blank>type<S2SV_blank>0x%02x\\n" , __func__ , type ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> return NULL ; //<S2SV> } //<S2SV> 