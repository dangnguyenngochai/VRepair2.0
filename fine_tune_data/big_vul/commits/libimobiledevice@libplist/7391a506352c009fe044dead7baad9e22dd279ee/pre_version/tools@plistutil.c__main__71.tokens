int main ( int argc , char * argv [ ] ) //<S2SV> { //<S2SV> FILE * iplist = NULL ; //<S2SV> plist_t root_node = NULL ; //<S2SV> char * plist_out = NULL ; //<S2SV> uint32_t size = 0 ; //<S2SV> int read_size = 0 ; //<S2SV> char * plist_entire = NULL ; //<S2SV> struct stat filestats ; //<S2SV> options_t * options = parse_arguments ( argc , argv ) ; //<S2SV> if ( ! options ) //<S2SV> { //<S2SV> print_usage ( argc , argv ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> iplist = fopen ( options -> in_file , "rb" ) ; //<S2SV> if ( ! iplist ) { //<S2SV> free ( options ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> stat ( options -> in_file , & filestats ) ; //<S2SV> plist_entire = ( char * ) malloc ( sizeof ( char ) * ( filestats . st_size + 1 ) ) ; //<S2SV> read_size = fread ( plist_entire , sizeof ( char ) , filestats . st_size , iplist ) ; //<S2SV> fclose ( iplist ) ; //<S2SV> if ( memcmp ( plist_entire , "bplist00" , 8 ) == 0 ) //<S2SV> { //<S2SV> plist_from_bin ( plist_entire , read_size , & root_node ) ; //<S2SV> plist_to_xml ( root_node , & plist_out , & size ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> plist_from_xml ( plist_entire , read_size , & root_node ) ; //<S2SV> plist_to_bin ( root_node , & plist_out , & size ) ; //<S2SV> } //<S2SV> plist_free ( root_node ) ; //<S2SV> free ( plist_entire ) ; //<S2SV> if ( plist_out ) //<S2SV> { //<S2SV> if ( options -> out_file != NULL ) //<S2SV> { //<S2SV> FILE * oplist = fopen ( options -> out_file , "wb" ) ; //<S2SV> if ( ! oplist ) { //<S2SV> free ( options ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> fwrite ( plist_out , size , sizeof ( char ) , oplist ) ; //<S2SV> fclose ( oplist ) ; //<S2SV> } //<S2SV> else //<S2SV> fwrite ( plist_out , size , sizeof ( char ) , stdout ) ; //<S2SV> free ( plist_out ) ; //<S2SV> } //<S2SV> else //<S2SV> printf ( "ERROR:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>input<S2SV_blank>file.\\n" ) ; //<S2SV> free ( options ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 