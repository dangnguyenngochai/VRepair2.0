static int bmpr_read_rle ( struct iwbmprcontext * rctx ) //<S2SV> { //<S2SV> int retval = 0 ; //<S2SV> if ( ! ( rctx -> compression == IWBMP_BI_RLE8 && rctx -> bitcount == 8 ) && //<S2SV> ! ( rctx -> compression == IWBMP_BI_RLE4 && rctx -> bitcount == 4 ) ) //<S2SV> { //<S2SV> iw_set_error ( rctx -> ctx , "Compression<S2SV_blank>type<S2SV_blank>incompatible<S2SV_blank>with<S2SV_blank>image<S2SV_blank>type" ) ; //<S2SV> } //<S2SV> if ( rctx -> topdown ) { //<S2SV> iw_set_error ( rctx -> ctx , "Compression<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>with<S2SV_blank>top-down<S2SV_blank>images" ) ; //<S2SV> } //<S2SV> rctx -> img -> imgtype = IW_IMGTYPE_RGBA ; //<S2SV> rctx -> img -> bit_depth = 8 ; //<S2SV> rctx -> img -> bpr = iw_calc_bytesperrow ( rctx -> width , 32 ) ; //<S2SV> rctx -> img -> pixels = ( iw_byte * ) iw_malloc_large ( rctx -> ctx , rctx -> img -> bpr , rctx -> img -> height ) ; //<S2SV> if ( ! rctx -> img -> pixels ) goto done ; //<S2SV> if ( ! bmpr_read_rle_internal ( rctx ) ) goto done ; //<S2SV> if ( ! bmpr_has_transparency ( rctx -> img ) ) { //<S2SV> bmpr_strip_alpha ( rctx -> img ) ; //<S2SV> } //<S2SV> retval = 1 ; //<S2SV> done : //<S2SV> return retval ; //<S2SV> } //<S2SV> 