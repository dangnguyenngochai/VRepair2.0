GF_Err urn_Read ( GF_Box * s , GF_BitStream * bs ) //<S2SV> { //<S2SV> u32 i , to_read ; //<S2SV> char * tmpName ; //<S2SV> GF_DataEntryURNBox * ptr = ( GF_DataEntryURNBox * ) s ; //<S2SV> if ( ! ptr -> size ) return GF_OK ; //<S2SV> to_read = ( u32 ) ptr -> size ; //<S2SV> tmpName = ( char * ) gf_malloc ( sizeof ( char ) * to_read ) ; //<S2SV> if ( ! tmpName ) return GF_OUT_OF_MEM ; //<S2SV> gf_bs_read_data ( bs , tmpName , to_read ) ; //<S2SV> i = 0 ; //<S2SV> while ( ( i < to_read ) && ( tmpName [ i ] != 0 ) ) { //<S2SV> i ++ ; //<S2SV> } //<S2SV> if ( i == to_read ) { //<S2SV> gf_free ( tmpName ) ; //<S2SV> return GF_ISOM_INVALID_FILE ; //<S2SV> } //<S2SV> if ( i == to_read - 1 ) { //<S2SV> ptr -> nameURN = tmpName ; //<S2SV> ptr -> location = NULL ; //<S2SV> return GF_OK ; //<S2SV> } //<S2SV> ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; //<S2SV> if ( ! ptr -> nameURN ) { //<S2SV> gf_free ( tmpName ) ; //<S2SV> return GF_OUT_OF_MEM ; //<S2SV> } //<S2SV> ptr -> location = ( char * ) gf_malloc ( sizeof ( char ) * ( to_read - i - 1 ) ) ; //<S2SV> if ( ! ptr -> location ) { //<S2SV> gf_free ( tmpName ) ; //<S2SV> gf_free ( ptr -> nameURN ) ; //<S2SV> ptr -> nameURN = NULL ; //<S2SV> return GF_OUT_OF_MEM ; //<S2SV> } //<S2SV> memcpy ( ptr -> nameURN , tmpName , i + 1 ) ; //<S2SV> memcpy ( ptr -> location , tmpName + i + 1 , ( to_read - i - 1 ) ) ; //<S2SV> gf_free ( tmpName ) ; //<S2SV> return GF_OK ; //<S2SV> } //<S2SV> 