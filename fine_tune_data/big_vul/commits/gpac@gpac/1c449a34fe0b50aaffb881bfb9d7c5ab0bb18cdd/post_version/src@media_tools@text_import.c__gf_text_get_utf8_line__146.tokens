char * gf_text_get_utf8_line ( char * szLine , u32 lineSize , FILE * txt_in , s32 unicode_type ) //<S2SV> { //<S2SV> u32 i , j , len ; //<S2SV> char * sOK ; //<S2SV> char szLineConv [ 1024 ] ; //<S2SV> unsigned short * sptr ; //<S2SV> memset ( szLine , 0 , sizeof ( char ) * lineSize ) ; //<S2SV> sOK = fgets ( szLine , lineSize , txt_in ) ; //<S2SV> if ( ! sOK ) return NULL ; //<S2SV> if ( unicode_type <= 1 ) { //<S2SV> j = 0 ; //<S2SV> len = ( u32 ) strlen ( szLine ) ; //<S2SV> for ( i = 0 ; i < len && j < sizeof ( szLineConv ) - 1 ; i ++ , j ++ ) { //<S2SV> if ( ! unicode_type && ( szLine [ i ] & 0x80 ) ) { //<S2SV> if ( ( szLine [ i + 1 ] & 0xc0 ) != 0x80 ) { //<S2SV> if ( j + 1 < sizeof ( szLineConv ) - 1 ) { //<S2SV> szLineConv [ j ] = 0xc0 | ( ( szLine [ i ] >> 6 ) & 0x3 ) ; //<S2SV> j ++ ; //<S2SV> szLine [ i ] &= 0xbf ; //<S2SV> } //<S2SV> else //<S2SV> break ; //<S2SV> } //<S2SV> else if ( ( szLine [ i ] & 0xe0 ) == 0xc0 ) { //<S2SV> if ( j + 1 < sizeof ( szLineConv ) - 1 && i + 1 < len ) { //<S2SV> szLineConv [ j ] = szLine [ i ] ; //<S2SV> i ++ ; //<S2SV> j ++ ; //<S2SV> } //<S2SV> else { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ( szLine [ i ] & 0xf0 ) == 0xe0 ) { //<S2SV> if ( j + 2 < sizeof ( szLineConv ) - 1 && i + 2 < len ) { //<S2SV> szLineConv [ j ] = szLine [ i ] ; //<S2SV> i ++ ; //<S2SV> j ++ ; //<S2SV> szLineConv [ j ] = szLine [ i ] ; //<S2SV> i ++ ; //<S2SV> j ++ ; //<S2SV> } //<S2SV> else { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> else if ( ( szLine [ i ] & 0xf8 ) == 0xf0 ) { //<S2SV> if ( j + 3 < sizeof ( szLineConv ) - 1 && i + 3 < len ) { //<S2SV> szLineConv [ j ] = szLine [ i ] ; //<S2SV> i ++ ; //<S2SV> j ++ ; //<S2SV> szLineConv [ j ] = szLine [ i ] ; //<S2SV> i ++ ; //<S2SV> j ++ ; //<S2SV> szLineConv [ j ] = szLine [ i ] ; //<S2SV> i ++ ; //<S2SV> j ++ ; //<S2SV> } //<S2SV> else { //<S2SV> break ; //<S2SV> } //<S2SV> } else { //<S2SV> i += 1 ; //<S2SV> continue ; //<S2SV> } //<S2SV> } //<S2SV> if ( j < sizeof ( szLineConv ) - 1 && i < len ) //<S2SV> szLineConv [ j ] = szLine [ i ] ; //<S2SV> } //<S2SV> if ( j >= sizeof ( szLineConv ) ) //<S2SV> szLineConv [ sizeof ( szLineConv ) - 1 ] = 0 ; //<S2SV> else //<S2SV> szLineConv [ j ] = 0 ; //<S2SV> strcpy ( szLine , szLineConv ) ; //<S2SV> return sOK ; //<S2SV> } //<S2SV> # ifdef GPAC_BIG_ENDIAN //<S2SV> if ( unicode_type == 3 ) { //<S2SV> # else //<S2SV> if ( unicode_type == 2 ) { //<S2SV> # endif //<S2SV> i = 0 ; //<S2SV> while ( 1 ) { //<S2SV> char c ; //<S2SV> if ( ! szLine [ i ] && ! szLine [ i + 1 ] ) break ; //<S2SV> c = szLine [ i + 1 ] ; //<S2SV> szLine [ i + 1 ] = szLine [ i ] ; //<S2SV> szLine [ i ] = c ; //<S2SV> i += 2 ; //<S2SV> } //<S2SV> } //<S2SV> sptr = ( u16 * ) szLine ; //<S2SV> i = ( u32 ) gf_utf8_wcstombs ( szLineConv , 1024 , ( const unsigned short * * ) & sptr ) ; //<S2SV> if ( i >= ( u32 ) ARRAY_LENGTH ( szLineConv ) ) //<S2SV> return NULL ; //<S2SV> szLineConv [ i ] = 0 ; //<S2SV> strcpy ( szLine , szLineConv ) ; //<S2SV> if ( unicode_type == 3 ) fgetc ( txt_in ) ; //<S2SV> return sOK ; //<S2SV> } //<S2SV> 