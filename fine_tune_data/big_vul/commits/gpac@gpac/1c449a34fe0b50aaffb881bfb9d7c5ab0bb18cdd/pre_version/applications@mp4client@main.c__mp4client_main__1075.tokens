int mp4client_main ( int argc , char * * argv ) //<S2SV> { //<S2SV> char c ; //<S2SV> const char * str ; //<S2SV> int ret_val = 0 ; //<S2SV> u32 i , times [ 100 ] , nb_times , dump_mode ; //<S2SV> u32 simulation_time_in_ms = 0 ; //<S2SV> u32 initial_service_id = 0 ; //<S2SV> Bool auto_exit = GF_FALSE ; //<S2SV> Bool logs_set = GF_FALSE ; //<S2SV> Bool start_fs = GF_FALSE ; //<S2SV> Bool use_rtix = GF_FALSE ; //<S2SV> Bool pause_at_first = GF_FALSE ; //<S2SV> Bool no_cfg_save = GF_FALSE ; //<S2SV> Bool is_cfg_only = GF_FALSE ; //<S2SV> Double play_from = 0 ; //<S2SV> # ifdef GPAC_MEMORY_TRACKING //<S2SV> GF_MemTrackerType mem_track = GF_MemTrackerNone ; //<S2SV> # endif //<S2SV> Double fps = GF_IMPORT_DEFAULT_FPS ; //<S2SV> Bool fill_ar , visible , do_uncache , has_command ; //<S2SV> char * url_arg , * out_arg , * the_cfg , * rti_file , * views , * mosaic ; //<S2SV> FILE * logfile = NULL ; //<S2SV> Float scale = 1 ; //<S2SV> # ifndef WIN32 //<S2SV> dlopen ( NULL , RTLD_NOW | RTLD_GLOBAL ) ; //<S2SV> # endif //<S2SV> strcpy ( the_url , "." ) ; //<S2SV> memset ( & user , 0 , sizeof ( GF_User ) ) ; //<S2SV> dump_mode = DUMP_NONE ; //<S2SV> fill_ar = visible = do_uncache = has_command = GF_FALSE ; //<S2SV> url_arg = out_arg = the_cfg = rti_file = views = mosaic = NULL ; //<S2SV> nb_times = 0 ; //<S2SV> times [ 0 ] = 0 ; //<S2SV> for ( i = 1 ; i < ( u32 ) argc ; i ++ ) { //<S2SV> char * arg = argv [ i ] ; //<S2SV> if ( ! strcmp ( arg , "-c" ) || ! strcmp ( arg , "-cfg" ) ) { //<S2SV> the_cfg = argv [ i + 1 ] ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-mem-track" ) || ! strcmp ( arg , "-mem-track-stack" ) ) { //<S2SV> # ifdef GPAC_MEMORY_TRACKING //<S2SV> mem_track = ! strcmp ( arg , "-mem-track-stack" ) ? GF_MemTrackerBackTrace : GF_MemTrackerSimple ; //<S2SV> # else //<S2SV> fprintf ( stderr , "WARNING<S2SV_blank>-<S2SV_blank>GPAC<S2SV_blank>not<S2SV_blank>compiled<S2SV_blank>with<S2SV_blank>Memory<S2SV_blank>Tracker<S2SV_blank>-<S2SV_blank>ignoring<S2SV_blank>\\"%s\\"\\n" , arg ) ; //<S2SV> # endif //<S2SV> } else if ( ! strcmp ( arg , "-gui" ) ) { //<S2SV> gui_mode = 1 ; //<S2SV> } else if ( ! strcmp ( arg , "-guid" ) ) { //<S2SV> gui_mode = 2 ; //<S2SV> } else if ( ! strcmp ( arg , "-h" ) || ! strcmp ( arg , "-help" ) ) { //<S2SV> PrintUsage ( ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> # ifdef GPAC_MEMORY_TRACKING //<S2SV> gf_sys_init ( mem_track ) ; //<S2SV> # else //<S2SV> gf_sys_init ( GF_MemTrackerNone ) ; //<S2SV> # endif //<S2SV> gf_sys_set_args ( argc , ( const char * * ) argv ) ; //<S2SV> cfg_file = gf_cfg_init ( the_cfg , NULL ) ; //<S2SV> if ( ! cfg_file ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>Configuration<S2SV_blank>File<S2SV_blank>not<S2SV_blank>found\\n" ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( gf_log_set_tools_levels ( gf_cfg_get_key ( cfg_file , "General" , "Logs" ) ) != GF_OK ) { //<S2SV> return 1 ; //<S2SV> } //<S2SV> if ( gf_cfg_get_key ( cfg_file , "General" , "Logs" ) != NULL ) { //<S2SV> logs_set = GF_TRUE ; //<S2SV> } //<S2SV> if ( ! gui_mode ) { //<S2SV> str = gf_cfg_get_key ( cfg_file , "General" , "ForceGUI" ) ; //<S2SV> if ( str && ! strcmp ( str , "yes" ) ) gui_mode = 1 ; //<S2SV> } //<S2SV> for ( i = 1 ; i < ( u32 ) argc ; i ++ ) { //<S2SV> char * arg = argv [ i ] ; //<S2SV> if ( ! strcmp ( arg , "-rti" ) ) { //<S2SV> rti_file = argv [ i + 1 ] ; //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-rtix" ) ) { //<S2SV> rti_file = argv [ i + 1 ] ; //<S2SV> i ++ ; //<S2SV> use_rtix = GF_TRUE ; //<S2SV> } else if ( ! stricmp ( arg , "-size" ) ) { //<S2SV> if ( sscanf ( argv [ i + 1 ] , "%dx%d" , & forced_width , & forced_height ) != 2 ) { //<S2SV> forced_width = forced_height = 0 ; //<S2SV> } //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-quiet" ) ) { //<S2SV> be_quiet = 1 ; //<S2SV> } else if ( ! strcmp ( arg , "-strict-error" ) ) { //<S2SV> gf_log_set_strict_error ( 1 ) ; //<S2SV> } else if ( ! strcmp ( arg , "-log-file" ) || ! strcmp ( arg , "-lf" ) ) { //<S2SV> logfile = gf_fopen ( argv [ i + 1 ] , "wt" ) ; //<S2SV> gf_log_set_callback ( logfile , on_gpac_log ) ; //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-logs" ) ) { //<S2SV> if ( gf_log_set_tools_levels ( argv [ i + 1 ] ) != GF_OK ) { //<S2SV> return 1 ; //<S2SV> } //<S2SV> logs_set = GF_TRUE ; //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-log-clock" ) || ! strcmp ( arg , "-lc" ) ) { //<S2SV> log_time_start = 1 ; //<S2SV> } else if ( ! strcmp ( arg , "-log-utc" ) || ! strcmp ( arg , "-lu" ) ) { //<S2SV> log_utc_time = 1 ; //<S2SV> } //<S2SV> # if defined ( __DARWIN__ ) || defined ( __APPLE__ ) //<S2SV> else if ( ! strcmp ( arg , "-thread" ) ) threading_flags = 0 ; //<S2SV> # else //<S2SV> else if ( ! strcmp ( arg , "-no-thread" ) ) threading_flags = GF_TERM_NO_DECODER_THREAD | GF_TERM_NO_COMPOSITOR_THREAD | GF_TERM_WINDOW_NO_THREAD ; //<S2SV> # endif //<S2SV> else if ( ! strcmp ( arg , "-no-cthread" ) || ! strcmp ( arg , "-no-compositor-thread" ) ) threading_flags |= GF_TERM_NO_COMPOSITOR_THREAD ; //<S2SV> else if ( ! strcmp ( arg , "-no-audio" ) ) no_audio = 1 ; //<S2SV> else if ( ! strcmp ( arg , "-no-regulation" ) ) no_regulation = 1 ; //<S2SV> else if ( ! strcmp ( arg , "-fs" ) ) start_fs = 1 ; //<S2SV> else if ( ! strcmp ( arg , "-opt" ) ) { //<S2SV> set_cfg_option ( argv [ i + 1 ] ) ; //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-conf" ) ) { //<S2SV> set_cfg_option ( argv [ i + 1 ] ) ; //<S2SV> is_cfg_only = GF_TRUE ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-ifce" ) ) { //<S2SV> gf_cfg_set_key ( cfg_file , "Network" , "DefaultMCastInterface" , argv [ i + 1 ] ) ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-help" ) ) { //<S2SV> PrintUsage ( ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-noprog" ) ) { //<S2SV> no_prog = 1 ; //<S2SV> gf_set_progress_callback ( NULL , progress_quiet ) ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-no-save" ) || ! stricmp ( arg , "--no-save" ) ) { //<S2SV> no_cfg_save = 1 ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-ntp-shift" ) ) { //<S2SV> s32 shift = atoi ( argv [ i + 1 ] ) ; //<S2SV> i ++ ; //<S2SV> gf_net_set_ntp_shift ( shift ) ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-run-for" ) ) { //<S2SV> simulation_time_in_ms = atoi ( argv [ i + 1 ] ) * 1000 ; //<S2SV> if ( ! simulation_time_in_ms ) //<S2SV> simulation_time_in_ms = 1 ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-out" ) ) { //<S2SV> out_arg = argv [ i + 1 ] ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-fps" ) ) { //<S2SV> fps = atof ( argv [ i + 1 ] ) ; //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-avi" ) || ! strcmp ( arg , "-sha" ) ) { //<S2SV> dump_mode &= 0xFFFF0000 ; //<S2SV> if ( ! strcmp ( arg , "-sha" ) ) dump_mode |= DUMP_SHA1 ; //<S2SV> else dump_mode |= DUMP_AVI ; //<S2SV> if ( ( url_arg || ( i + 2 < ( u32 ) argc ) ) && get_time_list ( argv [ i + 1 ] , times , & nb_times ) ) { //<S2SV> if ( ! strcmp ( arg , "-avi" ) && ( nb_times != 2 ) ) { //<S2SV> fprintf ( stderr , "Only<S2SV_blank>one<S2SV_blank>time<S2SV_blank>arg<S2SV_blank>found<S2SV_blank>for<S2SV_blank>-avi<S2SV_blank>-<S2SV_blank>check<S2SV_blank>usage\\n" ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> i ++ ; //<S2SV> } //<S2SV> } else if ( ! strcmp ( arg , "-rgbds" ) ) { //<S2SV> dump_mode |= DUMP_RGB_DEPTH_SHAPE ; //<S2SV> } else if ( ! strcmp ( arg , "-rgbd" ) ) { //<S2SV> dump_mode |= DUMP_RGB_DEPTH ; //<S2SV> } else if ( ! strcmp ( arg , "-depth" ) ) { //<S2SV> dump_mode |= DUMP_DEPTH_ONLY ; //<S2SV> } else if ( ! strcmp ( arg , "-bmp" ) ) { //<S2SV> dump_mode &= 0xFFFF0000 ; //<S2SV> dump_mode |= DUMP_BMP ; //<S2SV> if ( ( url_arg || ( i + 2 < ( u32 ) argc ) ) && get_time_list ( argv [ i + 1 ] , times , & nb_times ) ) i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-png" ) ) { //<S2SV> dump_mode &= 0xFFFF0000 ; //<S2SV> dump_mode |= DUMP_PNG ; //<S2SV> if ( ( url_arg || ( i + 2 < ( u32 ) argc ) ) && get_time_list ( argv [ i + 1 ] , times , & nb_times ) ) i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-raw" ) ) { //<S2SV> dump_mode &= 0xFFFF0000 ; //<S2SV> dump_mode |= DUMP_RAW ; //<S2SV> if ( ( url_arg || ( i + 2 < ( u32 ) argc ) ) && get_time_list ( argv [ i + 1 ] , times , & nb_times ) ) i ++ ; //<S2SV> } else if ( ! stricmp ( arg , "-scale" ) ) { //<S2SV> sscanf ( argv [ i + 1 ] , "%f" , & scale ) ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-c" ) || ! strcmp ( arg , "-cfg" ) ) { //<S2SV> i ++ ; //<S2SV> } //<S2SV> if ( ! gui_mode ) { //<S2SV> if ( arg [ 0 ] != '-' ) { //<S2SV> if ( url_arg ) { //<S2SV> fprintf ( stderr , "Several<S2SV_blank>input<S2SV_blank>URLs<S2SV_blank>provided<S2SV_blank>(\\"%s\\",<S2SV_blank>\\"%s\\").<S2SV_blank>Check<S2SV_blank>your<S2SV_blank>command-line.\\n" , url_arg , arg ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> url_arg = arg ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-loop" ) ) loop_at_end = 1 ; //<S2SV> else if ( ! strcmp ( arg , "-bench" ) ) bench_mode = 1 ; //<S2SV> else if ( ! strcmp ( arg , "-vbench" ) ) bench_mode = 2 ; //<S2SV> else if ( ! strcmp ( arg , "-sbench" ) ) bench_mode = 3 ; //<S2SV> else if ( ! strcmp ( arg , "-no-addon" ) ) enable_add_ons = GF_FALSE ; //<S2SV> else if ( ! strcmp ( arg , "-pause" ) ) pause_at_first = 1 ; //<S2SV> else if ( ! strcmp ( arg , "-play-from" ) ) { //<S2SV> play_from = atof ( ( const char * ) argv [ i + 1 ] ) ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-speed" ) ) { //<S2SV> playback_speed = FLT2FIX ( atof ( ( const char * ) argv [ i + 1 ] ) ) ; //<S2SV> if ( playback_speed <= 0 ) playback_speed = FIX_ONE ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-no-wnd" ) ) user . init_flags |= GF_TERM_WINDOWLESS ; //<S2SV> else if ( ! strcmp ( arg , "-no-back" ) ) user . init_flags |= GF_TERM_WINDOW_TRANSPARENT ; //<S2SV> else if ( ! strcmp ( arg , "-align" ) ) { //<S2SV> if ( argv [ i + 1 ] [ 0 ] == 'm' ) align_mode = 1 ; //<S2SV> else if ( argv [ i + 1 ] [ 0 ] == 'b' ) align_mode = 2 ; //<S2SV> align_mode <<= 8 ; //<S2SV> if ( argv [ i + 1 ] [ 1 ] == 'm' ) align_mode |= 1 ; //<S2SV> else if ( argv [ i + 1 ] [ 1 ] == 'r' ) align_mode |= 2 ; //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( arg , "-fill" ) ) { //<S2SV> fill_ar = GF_TRUE ; //<S2SV> } else if ( ! strcmp ( arg , "-show" ) ) { //<S2SV> visible = 1 ; //<S2SV> } else if ( ! strcmp ( arg , "-uncache" ) ) { //<S2SV> do_uncache = GF_TRUE ; //<S2SV> } //<S2SV> else if ( ! strcmp ( arg , "-exit" ) ) auto_exit = GF_TRUE ; //<S2SV> else if ( ! stricmp ( arg , "-views" ) ) { //<S2SV> views = argv [ i + 1 ] ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-mosaic" ) ) { //<S2SV> mosaic = argv [ i + 1 ] ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-com" ) ) { //<S2SV> has_command = GF_TRUE ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> else if ( ! stricmp ( arg , "-service" ) ) { //<S2SV> initial_service_id = atoi ( argv [ i + 1 ] ) ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( is_cfg_only ) { //<S2SV> gf_cfg_del ( cfg_file ) ; //<S2SV> fprintf ( stderr , "GPAC<S2SV_blank>Config<S2SV_blank>updated\\n" ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( do_uncache ) { //<S2SV> const char * cache_dir = gf_cfg_get_key ( cfg_file , "General" , "CacheDirectory" ) ; //<S2SV> do_flatten_cache ( cache_dir ) ; //<S2SV> fprintf ( stderr , "GPAC<S2SV_blank>Cache<S2SV_blank>dir<S2SV_blank>%s<S2SV_blank>flattened\\n" , cache_dir ) ; //<S2SV> gf_cfg_del ( cfg_file ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( dump_mode && ! url_arg ) { //<S2SV> FILE * test ; //<S2SV> url_arg = ( char * ) gf_cfg_get_key ( cfg_file , "General" , "StartupFile" ) ; //<S2SV> test = url_arg ? gf_fopen ( url_arg , "rt" ) : NULL ; //<S2SV> if ( ! test ) url_arg = NULL ; //<S2SV> else gf_fclose ( test ) ; //<S2SV> if ( ! url_arg ) { //<S2SV> fprintf ( stderr , "Missing<S2SV_blank>argument<S2SV_blank>for<S2SV_blank>dump\\n" ) ; //<S2SV> PrintUsage ( ) ; //<S2SV> if ( logfile ) gf_fclose ( logfile ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! gui_mode && ! url_arg && ( gf_cfg_get_key ( cfg_file , "General" , "StartupFile" ) != NULL ) ) { //<S2SV> gui_mode = 1 ; //<S2SV> } //<S2SV> # ifdef WIN32 //<S2SV> if ( gui_mode == 1 ) { //<S2SV> const char * opt ; //<S2SV> TCHAR buffer [ 1024 ] ; //<S2SV> DWORD res = GetCurrentDirectory ( 1024 , buffer ) ; //<S2SV> buffer [ res ] = 0 ; //<S2SV> opt = gf_cfg_get_key ( cfg_file , "General" , "ModulesDirectory" ) ; //<S2SV> if ( strstr ( opt , buffer ) ) { //<S2SV> gui_mode = 1 ; //<S2SV> } else { //<S2SV> gui_mode = 2 ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> if ( gui_mode == 1 ) { //<S2SV> hide_shell ( 1 ) ; //<S2SV> } //<S2SV> if ( gui_mode ) { //<S2SV> no_prog = 1 ; //<S2SV> gf_set_progress_callback ( NULL , progress_quiet ) ; //<S2SV> } //<S2SV> if ( ! url_arg && simulation_time_in_ms ) //<S2SV> simulation_time_in_ms += gf_sys_clock ( ) ; //<S2SV> # if defined ( __DARWIN__ ) || defined ( __APPLE__ ) //<S2SV> carbon_init ( ) ; //<S2SV> # endif //<S2SV> if ( dump_mode ) rti_file = NULL ; //<S2SV> if ( ! logs_set ) { //<S2SV> gf_log_set_tool_level ( GF_LOG_ALL , GF_LOG_WARNING ) ; //<S2SV> } //<S2SV> if ( rti_file || logfile || log_utc_time || log_time_start ) //<S2SV> gf_log_set_callback ( NULL , on_gpac_log ) ; //<S2SV> if ( rti_file ) init_rti_logs ( rti_file , url_arg , use_rtix ) ; //<S2SV> { //<S2SV> GF_SystemRTInfo rti ; //<S2SV> if ( gf_sys_get_rti ( 0 , & rti , 0 ) ) //<S2SV> fprintf ( stderr , "System<S2SV_blank>info:<S2SV_blank>%d<S2SV_blank>MB<S2SV_blank>RAM<S2SV_blank>-<S2SV_blank>%d<S2SV_blank>cores\\n" , ( u32 ) ( rti . physical_memory / 1024 / 1024 ) , rti . nb_cores ) ; //<S2SV> } //<S2SV> if ( dump_mode ) { //<S2SV> user . init_flags |= GF_TERM_NO_DECODER_THREAD | GF_TERM_NO_COMPOSITOR_THREAD | GF_TERM_NO_REGULATION ; //<S2SV> if ( ! visible ) //<S2SV> user . init_flags |= GF_TERM_INIT_HIDE ; //<S2SV> gf_cfg_set_key ( cfg_file , "Audio" , "DriverName" , "Raw<S2SV_blank>Audio<S2SV_blank>Output" ) ; //<S2SV> no_cfg_save = GF_TRUE ; //<S2SV> } else { //<S2SV> init_w = forced_width ; //<S2SV> init_h = forced_height ; //<S2SV> } //<S2SV> user . modules = gf_modules_new ( NULL , cfg_file ) ; //<S2SV> if ( user . modules ) i = gf_modules_get_count ( user . modules ) ; //<S2SV> if ( ! i || ! user . modules ) { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>no<S2SV_blank>modules<S2SV_blank>found<S2SV_blank>-<S2SV_blank>exiting\\n" ) ; //<S2SV> if ( user . modules ) gf_modules_del ( user . modules ) ; //<S2SV> gf_cfg_del ( cfg_file ) ; //<S2SV> gf_sys_close ( ) ; //<S2SV> if ( logfile ) gf_fclose ( logfile ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> fprintf ( stderr , "Modules<S2SV_blank>Found<S2SV_blank>:<S2SV_blank>%d<S2SV_blank>\\n" , i ) ; //<S2SV> str = gf_cfg_get_key ( cfg_file , "General" , "GPACVersion" ) ; //<S2SV> if ( ! str || strcmp ( str , GPAC_FULL_VERSION ) ) { //<S2SV> gf_cfg_del_section ( cfg_file , "PluginsCache" ) ; //<S2SV> gf_cfg_set_key ( cfg_file , "General" , "GPACVersion" , GPAC_FULL_VERSION ) ; //<S2SV> } //<S2SV> user . config = cfg_file ; //<S2SV> user . EventProc = GPAC_EventProc ; //<S2SV> user . opaque = user . modules ; //<S2SV> if ( threading_flags ) user . init_flags |= threading_flags ; //<S2SV> if ( no_audio ) user . init_flags |= GF_TERM_NO_AUDIO ; //<S2SV> if ( no_regulation ) user . init_flags |= GF_TERM_NO_REGULATION ; //<S2SV> if ( threading_flags & ( GF_TERM_NO_DECODER_THREAD | GF_TERM_NO_COMPOSITOR_THREAD ) ) term_step = GF_TRUE ; //<S2SV> if ( dump_mode ) user . init_flags |= GF_TERM_USE_AUDIO_HW_CLOCK ; //<S2SV> if ( bench_mode ) { //<S2SV> gf_cfg_discard_changes ( user . config ) ; //<S2SV> auto_exit = GF_TRUE ; //<S2SV> gf_cfg_set_key ( user . config , "Audio" , "DriverName" , "Raw<S2SV_blank>Audio<S2SV_blank>Output" ) ; //<S2SV> if ( bench_mode != 2 ) { //<S2SV> gf_cfg_set_key ( user . config , "Video" , "DriverName" , "Raw<S2SV_blank>Video<S2SV_blank>Output" ) ; //<S2SV> gf_cfg_set_key ( user . config , "RAWVideo" , "RawOutput" , "null" ) ; //<S2SV> gf_cfg_set_key ( user . config , "Compositor" , "OpenGLMode" , "disable" ) ; //<S2SV> } else { //<S2SV> gf_cfg_set_key ( user . config , "Video" , "DisableVSync" , "yes" ) ; //<S2SV> } //<S2SV> } //<S2SV> { //<S2SV> char dim [ 50 ] ; //<S2SV> sprintf ( dim , "%d" , forced_width ) ; //<S2SV> gf_cfg_set_key ( user . config , "Compositor" , "DefaultWidth" , forced_width ? dim : NULL ) ; //<S2SV> sprintf ( dim , "%d" , forced_height ) ; //<S2SV> gf_cfg_set_key ( user . config , "Compositor" , "DefaultHeight" , forced_height ? dim : NULL ) ; //<S2SV> } //<S2SV> fprintf ( stderr , "Loading<S2SV_blank>GPAC<S2SV_blank>Terminal\\n" ) ; //<S2SV> i = gf_sys_clock ( ) ; //<S2SV> term = gf_term_new ( & user ) ; //<S2SV> if ( ! term ) { //<S2SV> fprintf ( stderr , "\\nInit<S2SV_blank>error<S2SV_blank>-<S2SV_blank>check<S2SV_blank>you<S2SV_blank>have<S2SV_blank>at<S2SV_blank>least<S2SV_blank>one<S2SV_blank>video<S2SV_blank>out<S2SV_blank>and<S2SV_blank>one<S2SV_blank>rasterizer...\\nFound<S2SV_blank>modules:\\n" ) ; //<S2SV> list_modules ( user . modules ) ; //<S2SV> gf_modules_del ( user . modules ) ; //<S2SV> gf_cfg_discard_changes ( cfg_file ) ; //<S2SV> gf_cfg_del ( cfg_file ) ; //<S2SV> gf_sys_close ( ) ; //<S2SV> if ( logfile ) gf_fclose ( logfile ) ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> fprintf ( stderr , "Terminal<S2SV_blank>Loaded<S2SV_blank>in<S2SV_blank>%d<S2SV_blank>ms\\n" , gf_sys_clock ( ) - i ) ; //<S2SV> if ( bench_mode ) { //<S2SV> display_rti = 2 ; //<S2SV> gf_term_set_option ( term , GF_OPT_VIDEO_BENCH , ( bench_mode == 3 ) ? 2 : 1 ) ; //<S2SV> if ( bench_mode == 1 ) bench_mode = 2 ; //<S2SV> } //<S2SV> if ( dump_mode ) { //<S2SV> if ( fill_ar ) gf_term_set_option ( term , GF_OPT_ASPECT_RATIO , GF_ASPECT_RATIO_FILL_SCREEN ) ; //<S2SV> } else { //<S2SV> str = gf_cfg_get_key ( cfg_file , "Video" , "DriverName" ) ; //<S2SV> if ( ! bench_mode && ! strcmp ( str , "Raw<S2SV_blank>Video<S2SV_blank>Output" ) ) fprintf ( stderr , "WARNING:<S2SV_blank>using<S2SV_blank>raw<S2SV_blank>output<S2SV_blank>video<S2SV_blank>(memory<S2SV_blank>only)<S2SV_blank>-<S2SV_blank>no<S2SV_blank>display<S2SV_blank>used\\n" ) ; //<S2SV> str = gf_cfg_get_key ( cfg_file , "Audio" , "DriverName" ) ; //<S2SV> if ( ! str || ! strcmp ( str , "No<S2SV_blank>Audio<S2SV_blank>Output<S2SV_blank>Available" ) ) fprintf ( stderr , "WARNING:<S2SV_blank>no<S2SV_blank>audio<S2SV_blank>output<S2SV_blank>available<S2SV_blank>-<S2SV_blank>make<S2SV_blank>sure<S2SV_blank>no<S2SV_blank>other<S2SV_blank>program<S2SV_blank>is<S2SV_blank>locking<S2SV_blank>the<S2SV_blank>sound<S2SV_blank>card\\n" ) ; //<S2SV> str = gf_cfg_get_key ( cfg_file , "General" , "NoMIMETypeFetch" ) ; //<S2SV> no_mime_check = ( str && ! stricmp ( str , "yes" ) ) ? 1 : 0 ; //<S2SV> } //<S2SV> str = gf_cfg_get_key ( cfg_file , "HTTPProxy" , "Enabled" ) ; //<S2SV> if ( str && ! strcmp ( str , "yes" ) ) { //<S2SV> str = gf_cfg_get_key ( cfg_file , "HTTPProxy" , "Name" ) ; //<S2SV> if ( str ) fprintf ( stderr , "HTTP<S2SV_blank>Proxy<S2SV_blank>%s<S2SV_blank>enabled\\n" , str ) ; //<S2SV> } //<S2SV> if ( rti_file ) { //<S2SV> str = gf_cfg_get_key ( cfg_file , "General" , "RTIRefreshPeriod" ) ; //<S2SV> if ( str ) { //<S2SV> rti_update_time_ms = atoi ( str ) ; //<S2SV> } else { //<S2SV> gf_cfg_set_key ( cfg_file , "General" , "RTIRefreshPeriod" , "200" ) ; //<S2SV> } //<S2SV> UpdateRTInfo ( "At<S2SV_blank>GPAC<S2SV_blank>load<S2SV_blank>time\\n" ) ; //<S2SV> } //<S2SV> Run = 1 ; //<S2SV> if ( dump_mode ) { //<S2SV> if ( ! nb_times ) { //<S2SV> times [ 0 ] = 0 ; //<S2SV> nb_times ++ ; //<S2SV> } //<S2SV> ret_val = dump_file ( url_arg , out_arg , dump_mode , fps , forced_width , forced_height , scale , times , nb_times ) ; //<S2SV> Run = 0 ; //<S2SV> } //<S2SV> else if ( views ) { //<S2SV> } //<S2SV> else if ( ! gui_mode && url_arg ) { //<S2SV> char * ext ; //<S2SV> if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { //<S2SV> fprintf ( stderr , "Input<S2SV_blank>url<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long,<S2SV_blank>truncating<S2SV_blank>to<S2SV_blank>%d<S2SV_blank>chars.\\n" , url_arg , ( int ) ( sizeof ( the_url ) - 1 ) ) ; //<S2SV> strncpy ( the_url , url_arg , sizeof ( the_url ) - 1 ) ; //<S2SV> the_url [ sizeof ( the_url ) - 1 ] = 0 ; //<S2SV> } //<S2SV> else { //<S2SV> strcpy ( the_url , url_arg ) ; //<S2SV> } //<S2SV> ext = strrchr ( the_url , '.' ) ; //<S2SV> if ( ext && ( ! stricmp ( ext , ".m3u" ) || ! stricmp ( ext , ".pls" ) ) ) { //<S2SV> GF_Err e = GF_OK ; //<S2SV> fprintf ( stderr , "Opening<S2SV_blank>Playlist<S2SV_blank>%s\\n" , the_url ) ; //<S2SV> strcpy ( pl_path , the_url ) ; //<S2SV> if ( ! strncmp ( "http:" , the_url , 5 ) ) { //<S2SV> GF_DownloadSession * sess = gf_dm_sess_new ( term -> downloader , the_url , GF_NETIO_SESSION_NOT_THREADED , NULL , NULL , & e ) ; //<S2SV> if ( sess ) { //<S2SV> e = gf_dm_sess_process ( sess ) ; //<S2SV> if ( ! e ) { //<S2SV> strncpy ( the_url , gf_dm_sess_get_cache_name ( sess ) , sizeof ( the_url ) - 1 ) ; //<S2SV> the_url [ sizeof ( the_cfg ) - 1 ] = 0 ; //<S2SV> } //<S2SV> gf_dm_sess_del ( sess ) ; //<S2SV> } //<S2SV> } //<S2SV> playlist = e ? NULL : gf_fopen ( the_url , "rt" ) ; //<S2SV> readonly_playlist = 1 ; //<S2SV> if ( playlist ) { //<S2SV> request_next_playlist_item = GF_TRUE ; //<S2SV> } else { //<S2SV> if ( e ) //<S2SV> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>playlist<S2SV_blank>%s:<S2SV_blank>%s\\n" , the_url , gf_error_to_string ( e ) ) ; //<S2SV> fprintf ( stderr , "Hit<S2SV_blank>\'h\'<S2SV_blank>for<S2SV_blank>help\\n\\n" ) ; //<S2SV> } //<S2SV> } else { //<S2SV> fprintf ( stderr , "Opening<S2SV_blank>URL<S2SV_blank>%s\\n" , the_url ) ; //<S2SV> if ( pause_at_first ) fprintf ( stderr , "[Status:<S2SV_blank>Paused]\\n" ) ; //<S2SV> gf_term_connect_from_time ( term , the_url , ( u64 ) ( play_from * 1000 ) , pause_at_first ) ; //<S2SV> } //<S2SV> } else { //<S2SV> fprintf ( stderr , "Hit<S2SV_blank>\'h\'<S2SV_blank>for<S2SV_blank>help\\n\\n" ) ; //<S2SV> str = gf_cfg_get_key ( cfg_file , "General" , "StartupFile" ) ; //<S2SV> if ( str ) { //<S2SV> strncpy ( the_url , "MP4Client<S2SV_blank>" GPAC_FULL_VERSION , sizeof ( the_url ) - 1 ) ; //<S2SV> the_url [ sizeof ( the_url ) - 1 ] = 0 ; //<S2SV> gf_term_connect ( term , str ) ; //<S2SV> startup_file = 1 ; //<S2SV> is_connected = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( gui_mode == 2 ) gui_mode = 0 ; //<S2SV> if ( start_fs ) gf_term_set_option ( term , GF_OPT_FULLSCREEN , 1 ) ; //<S2SV> if ( views ) { //<S2SV> char szTemp [ 4046 ] ; //<S2SV> sprintf ( szTemp , "views://%s" , views ) ; //<S2SV> gf_term_connect ( term , szTemp ) ; //<S2SV> } //<S2SV> if ( mosaic ) { //<S2SV> char szTemp [ 4046 ] ; //<S2SV> sprintf ( szTemp , "mosaic://%s" , mosaic ) ; //<S2SV> gf_term_connect ( term , szTemp ) ; //<S2SV> } //<S2SV> if ( bench_mode ) { //<S2SV> rti_update_time_ms = 500 ; //<S2SV> bench_mode_start = gf_sys_clock ( ) ; //<S2SV> } //<S2SV> while ( Run ) { //<S2SV> if ( ( gui_mode == 1 ) || ! gf_prompt_has_input ( ) ) { //<S2SV> if ( reload ) { //<S2SV> reload = 0 ; //<S2SV> gf_term_disconnect ( term ) ; //<S2SV> gf_term_connect ( term , startup_file ? gf_cfg_get_key ( cfg_file , "General" , "StartupFile" ) : the_url ) ; //<S2SV> } //<S2SV> if ( restart && gf_term_get_option ( term , GF_OPT_IS_OVER ) ) { //<S2SV> restart = 0 ; //<S2SV> gf_term_play_from_time ( term , 0 , 0 ) ; //<S2SV> } //<S2SV> if ( request_next_playlist_item ) { //<S2SV> c = '\\n' ; //<S2SV> request_next_playlist_item = 0 ; //<S2SV> goto force_input ; //<S2SV> } //<S2SV> if ( has_command && is_connected ) { //<S2SV> has_command = GF_FALSE ; //<S2SV> for ( i = 0 ; i < ( u32 ) argc ; i ++ ) { //<S2SV> if ( ! strcmp ( argv [ i ] , "-com" ) ) { //<S2SV> gf_term_scene_update ( term , NULL , argv [ i + 1 ] ) ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( initial_service_id && is_connected ) { //<S2SV> GF_ObjectManager * root_od = gf_term_get_root_object ( term ) ; //<S2SV> if ( root_od ) { //<S2SV> gf_term_select_service ( term , root_od , initial_service_id ) ; //<S2SV> initial_service_id = 0 ; //<S2SV> } //<S2SV> } //<S2SV> if ( ! use_rtix || display_rti ) UpdateRTInfo ( NULL ) ; //<S2SV> if ( term_step ) { //<S2SV> gf_term_process_step ( term ) ; //<S2SV> } else { //<S2SV> gf_sleep ( rti_update_time_ms ) ; //<S2SV> } //<S2SV> if ( auto_exit && eos_seen && gf_term_get_option ( term , GF_OPT_IS_OVER ) ) { //<S2SV> Run = GF_FALSE ; //<S2SV> } //<S2SV> if ( simulation_time_in_ms //<S2SV> && ( ( gf_term_get_elapsed_time_in_ms ( term ) > simulation_time_in_ms ) || ( ! url_arg && gf_sys_clock ( ) > simulation_time_in_ms ) ) //<S2SV> ) { //<S2SV> Run = GF_FALSE ; //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> c = gf_prompt_get_char ( ) ; //<S2SV> force_input : //<S2SV> switch ( c ) { //<S2SV> case 'q' : //<S2SV> { //<S2SV> GF_Event evt ; //<S2SV> memset ( & evt , 0 , sizeof ( GF_Event ) ) ; //<S2SV> evt . type = GF_EVENT_QUIT ; //<S2SV> gf_term_send_event ( term , & evt ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'X' : //<S2SV> exit ( 0 ) ; //<S2SV> break ; //<S2SV> case 'Q' : //<S2SV> break ; //<S2SV> case 'o' : //<S2SV> startup_file = 0 ; //<S2SV> gf_term_disconnect ( term ) ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>the<S2SV_blank>absolute<S2SV_blank>URL\\n" ) ; //<S2SV> if ( 1 > scanf ( "%s" , the_url ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>absolute<S2SV_blank>URL,<S2SV_blank>aborting\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( rti_file ) init_rti_logs ( rti_file , the_url , use_rtix ) ; //<S2SV> gf_term_connect ( term , the_url ) ; //<S2SV> break ; //<S2SV> case 'O' : //<S2SV> gf_term_disconnect ( term ) ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>the<S2SV_blank>absolute<S2SV_blank>URL<S2SV_blank>to<S2SV_blank>the<S2SV_blank>playlist\\n" ) ; //<S2SV> if ( 1 > scanf ( "%s" , the_url ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>the<S2SV_blank>absolute<S2SV_blank>URL,<S2SV_blank>aborting.\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> playlist = gf_fopen ( the_url , "rt" ) ; //<S2SV> if ( playlist ) { //<S2SV> if ( 1 > fscanf ( playlist , "%s" , the_url ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>any<S2SV_blank>URL<S2SV_blank>from<S2SV_blank>playlist,<S2SV_blank>aborting.\\n" ) ; //<S2SV> gf_fclose ( playlist ) ; //<S2SV> break ; //<S2SV> } //<S2SV> fprintf ( stderr , "Opening<S2SV_blank>URL<S2SV_blank>%s\\n" , the_url ) ; //<S2SV> gf_term_connect ( term , the_url ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case '\\n' : //<S2SV> case 'N' : //<S2SV> if ( playlist ) { //<S2SV> int res ; //<S2SV> gf_term_disconnect ( term ) ; //<S2SV> res = fscanf ( playlist , "%s" , the_url ) ; //<S2SV> if ( ( res == EOF ) && loop_at_end ) { //<S2SV> fseek ( playlist , 0 , SEEK_SET ) ; //<S2SV> res = fscanf ( playlist , "%s" , the_url ) ; //<S2SV> } //<S2SV> if ( res == EOF ) { //<S2SV> fprintf ( stderr , "No<S2SV_blank>more<S2SV_blank>items<S2SV_blank>-<S2SV_blank>exiting\\n" ) ; //<S2SV> Run = 0 ; //<S2SV> } else if ( the_url [ 0 ] == '#' ) { //<S2SV> request_next_playlist_item = GF_TRUE ; //<S2SV> } else { //<S2SV> fprintf ( stderr , "Opening<S2SV_blank>URL<S2SV_blank>%s\\n" , the_url ) ; //<S2SV> gf_term_connect_with_path ( term , the_url , pl_path ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 'P' : //<S2SV> if ( playlist ) { //<S2SV> u32 count ; //<S2SV> gf_term_disconnect ( term ) ; //<S2SV> if ( 1 > scanf ( "%u" , & count ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>number,<S2SV_blank>aborting.\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> while ( count ) { //<S2SV> if ( fscanf ( playlist , "%s" , the_url ) ) { //<S2SV> fprintf ( stderr , "Failed<S2SV_blank>to<S2SV_blank>read<S2SV_blank>line,<S2SV_blank>aborting\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> count -- ; //<S2SV> } //<S2SV> fprintf ( stderr , "Opening<S2SV_blank>URL<S2SV_blank>%s\\n" , the_url ) ; //<S2SV> gf_term_connect ( term , the_url ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'r' : //<S2SV> if ( is_connected ) //<S2SV> reload = 1 ; //<S2SV> break ; //<S2SV> case 'D' : //<S2SV> if ( is_connected ) gf_term_disconnect ( term ) ; //<S2SV> break ; //<S2SV> case 'p' : //<S2SV> if ( is_connected ) { //<S2SV> Bool is_pause = gf_term_get_option ( term , GF_OPT_PLAY_STATE ) ; //<S2SV> fprintf ( stderr , "[Status:<S2SV_blank>%s]\\n" , is_pause ? "Playing" : "Paused" ) ; //<S2SV> gf_term_set_option ( term , GF_OPT_PLAY_STATE , is_pause ? GF_STATE_PLAYING : GF_STATE_PAUSED ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 's' : //<S2SV> if ( is_connected ) { //<S2SV> gf_term_set_option ( term , GF_OPT_PLAY_STATE , GF_STATE_STEP_PAUSE ) ; //<S2SV> fprintf ( stderr , "Step<S2SV_blank>time:<S2SV_blank>" ) ; //<S2SV> PrintTime ( gf_term_get_time_in_ms ( term ) ) ; //<S2SV> fprintf ( stderr , "\\n" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'z' : //<S2SV> case 'T' : //<S2SV> if ( ! CanSeek || ( Duration <= 2000 ) ) { //<S2SV> fprintf ( stderr , "scene<S2SV_blank>not<S2SV_blank>seekable\\n" ) ; //<S2SV> } else { //<S2SV> Double res ; //<S2SV> s32 seekTo ; //<S2SV> fprintf ( stderr , "Duration:<S2SV_blank>" ) ; //<S2SV> PrintTime ( Duration ) ; //<S2SV> res = gf_term_get_time_in_ms ( term ) ; //<S2SV> if ( c == 'z' ) { //<S2SV> res *= 100 ; //<S2SV> res /= ( s64 ) Duration ; //<S2SV> fprintf ( stderr , "<S2SV_blank>(current<S2SV_blank>%.2f<S2SV_blank>%%)\\nEnter<S2SV_blank>Seek<S2SV_blank>percentage:\\n" , res ) ; //<S2SV> if ( scanf ( "%d" , & seekTo ) == 1 ) { //<S2SV> if ( seekTo > 100 ) seekTo = 100 ; //<S2SV> res = ( Double ) ( s64 ) Duration ; //<S2SV> res /= 100 ; //<S2SV> res *= seekTo ; //<S2SV> gf_term_play_from_time ( term , ( u64 ) ( s64 ) res , 0 ) ; //<S2SV> } //<S2SV> } else { //<S2SV> u32 r , h , m , s ; //<S2SV> fprintf ( stderr , "<S2SV_blank>-<S2SV_blank>Current<S2SV_blank>Time:<S2SV_blank>" ) ; //<S2SV> PrintTime ( ( u64 ) res ) ; //<S2SV> fprintf ( stderr , "\\nEnter<S2SV_blank>seek<S2SV_blank>time<S2SV_blank>(Format:<S2SV_blank>s,<S2SV_blank>m:s<S2SV_blank>or<S2SV_blank>h:m:s):\\n" ) ; //<S2SV> h = m = s = 0 ; //<S2SV> r = scanf ( "%d:%d:%d" , & h , & m , & s ) ; //<S2SV> if ( r == 2 ) { //<S2SV> s = m ; //<S2SV> m = h ; //<S2SV> h = 0 ; //<S2SV> } //<S2SV> else if ( r == 1 ) { //<S2SV> s = h ; //<S2SV> m = h = 0 ; //<S2SV> } //<S2SV> if ( r && ( r <= 3 ) ) { //<S2SV> u64 time = h * 3600 + m * 60 + s ; //<S2SV> gf_term_play_from_time ( term , time * 1000 , 0 ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 't' : //<S2SV> { //<S2SV> if ( is_connected ) { //<S2SV> fprintf ( stderr , "Current<S2SV_blank>Time:<S2SV_blank>" ) ; //<S2SV> PrintTime ( gf_term_get_time_in_ms ( term ) ) ; //<S2SV> fprintf ( stderr , "<S2SV_blank>-<S2SV_blank>Duration:<S2SV_blank>" ) ; //<S2SV> PrintTime ( Duration ) ; //<S2SV> fprintf ( stderr , "\\n" ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 'w' : //<S2SV> if ( is_connected ) PrintWorldInfo ( term ) ; //<S2SV> break ; //<S2SV> case 'v' : //<S2SV> if ( is_connected ) PrintODList ( term , NULL , 0 , 0 , "Root" ) ; //<S2SV> break ; //<S2SV> case 'i' : //<S2SV> if ( is_connected ) { //<S2SV> u32 ID ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>OD<S2SV_blank>ID<S2SV_blank>(0<S2SV_blank>for<S2SV_blank>main<S2SV_blank>OD):<S2SV_blank>" ) ; //<S2SV> fflush ( stderr ) ; //<S2SV> if ( scanf ( "%ud" , & ID ) == 1 ) { //<S2SV> ViewOD ( term , ID , ( u32 ) - 1 , NULL ) ; //<S2SV> } else { //<S2SV> char str_url [ GF_MAX_PATH ] ; //<S2SV> if ( scanf ( "%s" , str_url ) == 1 ) //<S2SV> ViewOD ( term , 0 , ( u32 ) - 1 , str_url ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 'j' : //<S2SV> if ( is_connected ) { //<S2SV> u32 num ; //<S2SV> do { //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>OD<S2SV_blank>number<S2SV_blank>(0<S2SV_blank>for<S2SV_blank>main<S2SV_blank>OD):<S2SV_blank>" ) ; //<S2SV> fflush ( stderr ) ; //<S2SV> } while ( 1 > scanf ( "%ud" , & num ) ) ; //<S2SV> ViewOD ( term , ( u32 ) - 1 , num , NULL ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'b' : //<S2SV> if ( is_connected ) ViewODs ( term , 1 ) ; //<S2SV> break ; //<S2SV> case 'm' : //<S2SV> if ( is_connected ) ViewODs ( term , 0 ) ; //<S2SV> break ; //<S2SV> case 'l' : //<S2SV> list_modules ( user . modules ) ; //<S2SV> break ; //<S2SV> case 'n' : //<S2SV> if ( is_connected ) set_navigation ( ) ; //<S2SV> break ; //<S2SV> case 'x' : //<S2SV> if ( is_connected ) gf_term_set_option ( term , GF_OPT_NAVIGATION_TYPE , 0 ) ; //<S2SV> break ; //<S2SV> case 'd' : //<S2SV> if ( is_connected ) { //<S2SV> GF_ObjectManager * odm = NULL ; //<S2SV> char radname [ GF_MAX_PATH ] , * sExt ; //<S2SV> GF_Err e ; //<S2SV> u32 i , count , odid ; //<S2SV> Bool xml_dump , std_out ; //<S2SV> radname [ 0 ] = 0 ; //<S2SV> do { //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>Inline<S2SV_blank>OD<S2SV_blank>ID<S2SV_blank>if<S2SV_blank>any<S2SV_blank>or<S2SV_blank>0<S2SV_blank>:<S2SV_blank>" ) ; //<S2SV> fflush ( stderr ) ; //<S2SV> } while ( 1 > scanf ( "%ud" , & odid ) ) ; //<S2SV> if ( odid ) { //<S2SV> GF_ObjectManager * root_odm = gf_term_get_root_object ( term ) ; //<S2SV> if ( ! root_odm ) break ; //<S2SV> count = gf_term_get_object_count ( term , root_odm ) ; //<S2SV> for ( i = 0 ; i < count ; i ++ ) { //<S2SV> GF_MediaInfo info ; //<S2SV> odm = gf_term_get_object ( term , root_odm , i ) ; //<S2SV> if ( gf_term_get_object_info ( term , odm , & info ) == GF_OK ) { //<S2SV> if ( info . od -> objectDescriptorID == odid ) break ; //<S2SV> } //<S2SV> odm = NULL ; //<S2SV> } //<S2SV> } //<S2SV> do { //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>file<S2SV_blank>radical<S2SV_blank>name<S2SV_blank>(+\\\'.x\\\'<S2SV_blank>for<S2SV_blank>XML<S2SV_blank>dumping)<S2SV_blank>-<S2SV_blank>\\"std\\"<S2SV_blank>for<S2SV_blank>stderr:<S2SV_blank>" ) ; //<S2SV> fflush ( stderr ) ; //<S2SV> } while ( 1 > scanf ( "%s" , radname ) ) ; //<S2SV> sExt = strrchr ( radname , '.' ) ; //<S2SV> xml_dump = 0 ; //<S2SV> if ( sExt ) { //<S2SV> if ( ! stricmp ( sExt , ".x" ) ) xml_dump = 1 ; //<S2SV> sExt [ 0 ] = 0 ; //<S2SV> } //<S2SV> std_out = strnicmp ( radname , "std" , 3 ) ? 0 : 1 ; //<S2SV> e = gf_term_dump_scene ( term , std_out ? NULL : radname , NULL , xml_dump , 0 , odm ) ; //<S2SV> fprintf ( stderr , "Dump<S2SV_blank>done<S2SV_blank>(%s)\\n" , gf_error_to_string ( e ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'c' : //<S2SV> PrintGPACConfig ( ) ; //<S2SV> break ; //<S2SV> case '3' : //<S2SV> { //<S2SV> Bool use_3d = ! gf_term_get_option ( term , GF_OPT_USE_OPENGL ) ; //<S2SV> if ( gf_term_set_option ( term , GF_OPT_USE_OPENGL , use_3d ) == GF_OK ) { //<S2SV> fprintf ( stderr , "Using<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>2D<S2SV_blank>drawing\\n" , use_3d ? "OpenGL" : "2D<S2SV_blank>rasterizer" ) ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 'k' : //<S2SV> { //<S2SV> Bool opt = gf_term_get_option ( term , GF_OPT_STRESS_MODE ) ; //<S2SV> opt = ! opt ; //<S2SV> fprintf ( stderr , "Turning<S2SV_blank>stress<S2SV_blank>mode<S2SV_blank>%s\\n" , opt ? "on" : "off" ) ; //<S2SV> gf_term_set_option ( term , GF_OPT_STRESS_MODE , opt ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case '4' : //<S2SV> gf_term_set_option ( term , GF_OPT_ASPECT_RATIO , GF_ASPECT_RATIO_4_3 ) ; //<S2SV> break ; //<S2SV> case '5' : //<S2SV> gf_term_set_option ( term , GF_OPT_ASPECT_RATIO , GF_ASPECT_RATIO_16_9 ) ; //<S2SV> break ; //<S2SV> case '6' : //<S2SV> gf_term_set_option ( term , GF_OPT_ASPECT_RATIO , GF_ASPECT_RATIO_FILL_SCREEN ) ; //<S2SV> break ; //<S2SV> case '7' : //<S2SV> gf_term_set_option ( term , GF_OPT_ASPECT_RATIO , GF_ASPECT_RATIO_KEEP ) ; //<S2SV> break ; //<S2SV> case 'C' : //<S2SV> switch ( gf_term_get_option ( term , GF_OPT_MEDIA_CACHE ) ) { //<S2SV> case GF_MEDIA_CACHE_DISABLED : //<S2SV> gf_term_set_option ( term , GF_OPT_MEDIA_CACHE , GF_MEDIA_CACHE_ENABLED ) ; //<S2SV> break ; //<S2SV> case GF_MEDIA_CACHE_ENABLED : //<S2SV> gf_term_set_option ( term , GF_OPT_MEDIA_CACHE , GF_MEDIA_CACHE_DISABLED ) ; //<S2SV> break ; //<S2SV> case GF_MEDIA_CACHE_RUNNING : //<S2SV> fprintf ( stderr , "Streaming<S2SV_blank>Cache<S2SV_blank>is<S2SV_blank>running<S2SV_blank>-<S2SV_blank>please<S2SV_blank>stop<S2SV_blank>it<S2SV_blank>first\\n" ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> switch ( gf_term_get_option ( term , GF_OPT_MEDIA_CACHE ) ) { //<S2SV> case GF_MEDIA_CACHE_ENABLED : //<S2SV> fprintf ( stderr , "Streaming<S2SV_blank>Cache<S2SV_blank>Enabled\\n" ) ; //<S2SV> break ; //<S2SV> case GF_MEDIA_CACHE_DISABLED : //<S2SV> fprintf ( stderr , "Streaming<S2SV_blank>Cache<S2SV_blank>Disabled\\n" ) ; //<S2SV> break ; //<S2SV> case GF_MEDIA_CACHE_RUNNING : //<S2SV> fprintf ( stderr , "Streaming<S2SV_blank>Cache<S2SV_blank>Running\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'S' : //<S2SV> case 'A' : //<S2SV> if ( gf_term_get_option ( term , GF_OPT_MEDIA_CACHE ) == GF_MEDIA_CACHE_RUNNING ) { //<S2SV> gf_term_set_option ( term , GF_OPT_MEDIA_CACHE , ( c == 'S' ) ? GF_MEDIA_CACHE_DISABLED : GF_MEDIA_CACHE_DISCARD ) ; //<S2SV> fprintf ( stderr , "Streaming<S2SV_blank>Cache<S2SV_blank>stopped\\n" ) ; //<S2SV> } else { //<S2SV> fprintf ( stderr , "Streaming<S2SV_blank>Cache<S2SV_blank>not<S2SV_blank>running\\n" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'R' : //<S2SV> display_rti = ! display_rti ; //<S2SV> ResetCaption ( ) ; //<S2SV> break ; //<S2SV> case 'F' : //<S2SV> if ( display_rti ) display_rti = 0 ; //<S2SV> else display_rti = 2 ; //<S2SV> ResetCaption ( ) ; //<S2SV> break ; //<S2SV> case 'u' : //<S2SV> { //<S2SV> GF_Err e ; //<S2SV> char szCom [ 8192 ] ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>command<S2SV_blank>to<S2SV_blank>send:\\n" ) ; //<S2SV> fflush ( stdin ) ; //<S2SV> szCom [ 0 ] = 0 ; //<S2SV> if ( 1 > scanf ( "%[^\\t\\n]" , szCom ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>command<S2SV_blank>to<S2SV_blank>send,<S2SV_blank>aborting.\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> e = gf_term_scene_update ( term , NULL , szCom ) ; //<S2SV> if ( e ) fprintf ( stderr , "Processing<S2SV_blank>command<S2SV_blank>failed:<S2SV_blank>%s\\n" , gf_error_to_string ( e ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'e' : //<S2SV> { //<S2SV> GF_Err e ; //<S2SV> char jsCode [ 8192 ] ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>JavaScript<S2SV_blank>code<S2SV_blank>to<S2SV_blank>evaluate:\\n" ) ; //<S2SV> fflush ( stdin ) ; //<S2SV> jsCode [ 0 ] = 0 ; //<S2SV> if ( 1 > scanf ( "%[^\\t\\n]" , jsCode ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>code<S2SV_blank>to<S2SV_blank>evaluate,<S2SV_blank>aborting.\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> e = gf_term_scene_update ( term , "application/ecmascript" , jsCode ) ; //<S2SV> if ( e ) fprintf ( stderr , "Processing<S2SV_blank>JS<S2SV_blank>code<S2SV_blank>failed:<S2SV_blank>%s\\n" , gf_error_to_string ( e ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'L' : //<S2SV> { //<S2SV> char szLog [ 1024 ] , * cur_logs ; //<S2SV> cur_logs = gf_log_get_tools_levels ( ) ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>new<S2SV_blank>log<S2SV_blank>level<S2SV_blank>(current<S2SV_blank>tools<S2SV_blank>%s):\\n" , cur_logs ) ; //<S2SV> gf_free ( cur_logs ) ; //<S2SV> if ( scanf ( "%s" , szLog ) < 1 ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>new<S2SV_blank>log<S2SV_blank>level,<S2SV_blank>aborting.\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> gf_log_modify_tools_levels ( szLog ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'g' : //<S2SV> { //<S2SV> GF_SystemRTInfo rti ; //<S2SV> gf_sys_get_rti ( rti_update_time_ms , & rti , 0 ) ; //<S2SV> fprintf ( stderr , "GPAC<S2SV_blank>allocated<S2SV_blank>memory<S2SV_blank>" LLD "\\n" , rti . gpac_memory ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'M' : //<S2SV> { //<S2SV> u32 size ; //<S2SV> do { //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>new<S2SV_blank>video<S2SV_blank>cache<S2SV_blank>memory<S2SV_blank>in<S2SV_blank>kBytes<S2SV_blank>(current<S2SV_blank>%ud):\\n" , gf_term_get_option ( term , GF_OPT_VIDEO_CACHE_SIZE ) ) ; //<S2SV> } while ( 1 > scanf ( "%ud" , & size ) ) ; //<S2SV> gf_term_set_option ( term , GF_OPT_VIDEO_CACHE_SIZE , size ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'H' : //<S2SV> { //<S2SV> u32 http_bitrate = gf_term_get_option ( term , GF_OPT_HTTP_MAX_RATE ) ; //<S2SV> do { //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>new<S2SV_blank>http<S2SV_blank>bitrate<S2SV_blank>in<S2SV_blank>bps<S2SV_blank>(0<S2SV_blank>for<S2SV_blank>none)<S2SV_blank>-<S2SV_blank>current<S2SV_blank>limit:<S2SV_blank>%d\\n" , http_bitrate ) ; //<S2SV> } while ( 1 > scanf ( "%ud" , & http_bitrate ) ) ; //<S2SV> gf_term_set_option ( term , GF_OPT_HTTP_MAX_RATE , http_bitrate ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'E' : //<S2SV> gf_term_set_option ( term , GF_OPT_RELOAD_CONFIG , 1 ) ; //<S2SV> break ; //<S2SV> case 'B' : //<S2SV> switch_bench ( ! bench_mode ) ; //<S2SV> break ; //<S2SV> case 'Y' : //<S2SV> { //<S2SV> char szOpt [ 8192 ] ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>option<S2SV_blank>to<S2SV_blank>set<S2SV_blank>(Section:Name=Value):\\n" ) ; //<S2SV> fflush ( stdin ) ; //<S2SV> szOpt [ 0 ] = 0 ; //<S2SV> if ( 1 > scanf ( "%[^\\t\\n]" , szOpt ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>option\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> set_cfg_option ( szOpt ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'Z' : //<S2SV> { //<S2SV> char szFileName [ 100 ] ; //<S2SV> u32 nb_pass , nb_views , offscreen_view = 0 ; //<S2SV> GF_VideoSurface fb ; //<S2SV> GF_Err e ; //<S2SV> nb_pass = 1 ; //<S2SV> nb_views = gf_term_get_option ( term , GF_OPT_NUM_STEREO_VIEWS ) ; //<S2SV> if ( nb_views > 1 ) { //<S2SV> fprintf ( stderr , "Auto-stereo<S2SV_blank>mode<S2SV_blank>detected<S2SV_blank>-<S2SV_blank>type<S2SV_blank>number<S2SV_blank>of<S2SV_blank>view<S2SV_blank>to<S2SV_blank>dump<S2SV_blank>(0<S2SV_blank>is<S2SV_blank>main<S2SV_blank>output,<S2SV_blank>1<S2SV_blank>to<S2SV_blank>%d<S2SV_blank>offscreen<S2SV_blank>view,<S2SV_blank>%d<S2SV_blank>for<S2SV_blank>all<S2SV_blank>offscreen,<S2SV_blank>%d<S2SV_blank>for<S2SV_blank>all<S2SV_blank>offscreen<S2SV_blank>and<S2SV_blank>main)\\n" , nb_views , nb_views + 1 , nb_views + 2 ) ; //<S2SV> if ( scanf ( "%d" , & offscreen_view ) != 1 ) { //<S2SV> offscreen_view = 0 ; //<S2SV> } //<S2SV> if ( offscreen_view == nb_views + 1 ) { //<S2SV> offscreen_view = 1 ; //<S2SV> nb_pass = nb_views ; //<S2SV> } //<S2SV> else if ( offscreen_view == nb_views + 2 ) { //<S2SV> offscreen_view = 0 ; //<S2SV> nb_pass = nb_views + 1 ; //<S2SV> } //<S2SV> } //<S2SV> while ( nb_pass ) { //<S2SV> nb_pass -- ; //<S2SV> if ( offscreen_view ) { //<S2SV> sprintf ( szFileName , "view%d_dump.png" , offscreen_view ) ; //<S2SV> e = gf_term_get_offscreen_buffer ( term , & fb , offscreen_view - 1 , 0 ) ; //<S2SV> } else { //<S2SV> sprintf ( szFileName , "gpac_video_dump_" LLU ".png" , gf_net_get_utc ( ) ) ; //<S2SV> e = gf_term_get_screen_buffer ( term , & fb ) ; //<S2SV> } //<S2SV> offscreen_view ++ ; //<S2SV> if ( e ) { //<S2SV> fprintf ( stderr , "Error<S2SV_blank>dumping<S2SV_blank>screen<S2SV_blank>buffer<S2SV_blank>%s\\n" , gf_error_to_string ( e ) ) ; //<S2SV> nb_pass = 0 ; //<S2SV> } else { //<S2SV> # ifndef GPAC_DISABLE_AV_PARSERS //<S2SV> u32 dst_size = fb . width * fb . height * 4 ; //<S2SV> char * dst = ( char * ) gf_malloc ( sizeof ( char ) * dst_size ) ; //<S2SV> e = gf_img_png_enc ( fb . video_buffer , fb . width , fb . height , fb . pitch_y , fb . pixel_format , dst , & dst_size ) ; //<S2SV> if ( e ) { //<S2SV> fprintf ( stderr , "Error<S2SV_blank>encoding<S2SV_blank>PNG<S2SV_blank>%s\\n" , gf_error_to_string ( e ) ) ; //<S2SV> nb_pass = 0 ; //<S2SV> } else { //<S2SV> FILE * png = gf_fopen ( szFileName , "wb" ) ; //<S2SV> if ( ! png ) { //<S2SV> fprintf ( stderr , "Error<S2SV_blank>writing<S2SV_blank>file<S2SV_blank>%s\\n" , szFileName ) ; //<S2SV> nb_pass = 0 ; //<S2SV> } else { //<S2SV> gf_fwrite ( dst , dst_size , 1 , png ) ; //<S2SV> gf_fclose ( png ) ; //<S2SV> fprintf ( stderr , "Dump<S2SV_blank>to<S2SV_blank>%s\\n" , szFileName ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( dst ) gf_free ( dst ) ; //<S2SV> gf_term_release_screen_buffer ( term , & fb ) ; //<S2SV> # endif //<S2SV> } //<S2SV> } //<S2SV> fprintf ( stderr , "Done:<S2SV_blank>%s\\n" , szFileName ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'G' : //<S2SV> { //<S2SV> GF_ObjectManager * root_od , * odm ; //<S2SV> u32 index ; //<S2SV> char szOpt [ 8192 ] ; //<S2SV> fprintf ( stderr , "Enter<S2SV_blank>0-based<S2SV_blank>index<S2SV_blank>of<S2SV_blank>object<S2SV_blank>to<S2SV_blank>select<S2SV_blank>or<S2SV_blank>service<S2SV_blank>ID:\\n" ) ; //<S2SV> fflush ( stdin ) ; //<S2SV> szOpt [ 0 ] = 0 ; //<S2SV> if ( 1 > scanf ( "%[^\\t\\n]" , szOpt ) ) { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>read<S2SV_blank>OD<S2SV_blank>ID\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> index = atoi ( szOpt ) ; //<S2SV> odm = NULL ; //<S2SV> root_od = gf_term_get_root_object ( term ) ; //<S2SV> if ( root_od ) { //<S2SV> if ( gf_term_find_service ( term , root_od , index ) ) { //<S2SV> gf_term_select_service ( term , root_od , index ) ; //<S2SV> } else { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>find<S2SV_blank>service<S2SV_blank>%d<S2SV_blank>-<S2SV_blank>trying<S2SV_blank>with<S2SV_blank>object<S2SV_blank>index\\n" , index ) ; //<S2SV> odm = gf_term_get_object ( term , root_od , index ) ; //<S2SV> if ( odm ) { //<S2SV> gf_term_select_object ( term , odm ) ; //<S2SV> } else { //<S2SV> fprintf ( stderr , "Cannot<S2SV_blank>find<S2SV_blank>object<S2SV_blank>at<S2SV_blank>index<S2SV_blank>%d\\n" , index ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> case 'h' : //<S2SV> PrintHelp ( ) ; //<S2SV> break ; //<S2SV> default : //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( bench_mode ) { //<S2SV> PrintAVInfo ( GF_TRUE ) ; //<S2SV> } //<S2SV> if ( simulation_time_in_ms ) { //<S2SV> gf_log_set_strict_error ( 0 ) ; //<S2SV> } //<S2SV> i = gf_sys_clock ( ) ; //<S2SV> gf_term_disconnect ( term ) ; //<S2SV> if ( rti_file ) UpdateRTInfo ( "Disconnected\\n" ) ; //<S2SV> fprintf ( stderr , "Deleting<S2SV_blank>terminal...<S2SV_blank>" ) ; //<S2SV> if ( playlist ) gf_fclose ( playlist ) ; //<S2SV> # if defined ( __DARWIN__ ) || defined ( __APPLE__ ) //<S2SV> carbon_uninit ( ) ; //<S2SV> # endif //<S2SV> gf_term_del ( term ) ; //<S2SV> fprintf ( stderr , "done<S2SV_blank>(in<S2SV_blank>%d<S2SV_blank>ms)<S2SV_blank>-<S2SV_blank>ran<S2SV_blank>for<S2SV_blank>%d<S2SV_blank>ms\\n" , gf_sys_clock ( ) - i , gf_sys_clock ( ) ) ; //<S2SV> fprintf ( stderr , "GPAC<S2SV_blank>cleanup<S2SV_blank>...\\n" ) ; //<S2SV> gf_modules_del ( user . modules ) ; //<S2SV> if ( no_cfg_save ) //<S2SV> gf_cfg_discard_changes ( cfg_file ) ; //<S2SV> gf_cfg_del ( cfg_file ) ; //<S2SV> gf_sys_close ( ) ; //<S2SV> if ( rti_logs ) gf_fclose ( rti_logs ) ; //<S2SV> if ( logfile ) gf_fclose ( logfile ) ; //<S2SV> if ( gui_mode ) { //<S2SV> hide_shell ( 2 ) ; //<S2SV> } //<S2SV> # ifdef GPAC_MEMORY_TRACKING //<S2SV> if ( mem_track && ( gf_memory_size ( ) || gf_file_handles_count ( ) ) ) { //<S2SV> gf_log_set_tool_level ( GF_LOG_MEMORY , GF_LOG_INFO ) ; //<S2SV> gf_memory_print ( ) ; //<S2SV> return 2 ; //<S2SV> } //<S2SV> # endif //<S2SV> return ret_val ; //<S2SV> } //<S2SV> 