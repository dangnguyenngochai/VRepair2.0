GF_Err cat_multiple_files ( GF_ISOFile * dest , char * fileName , u32 import_flags , Double force_fps , u32 frames_per_sample , char * tmp_dir , Bool force_cat , Bool align_timelines , Bool allow_add_in_command ) //<S2SV> { //<S2SV> CATEnum cat_enum ; //<S2SV> char * sep ; //<S2SV> cat_enum . dest = dest ; //<S2SV> cat_enum . import_flags = import_flags ; //<S2SV> cat_enum . force_fps = force_fps ; //<S2SV> cat_enum . frames_per_sample = frames_per_sample ; //<S2SV> cat_enum . tmp_dir = tmp_dir ; //<S2SV> cat_enum . force_cat = force_cat ; //<S2SV> cat_enum . align_timelines = align_timelines ; //<S2SV> cat_enum . allow_add_in_command = allow_add_in_command ; //<S2SV> if ( strlen ( fileName ) >= sizeof ( cat_enum . szPath ) ) { //<S2SV> GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , fileName ) ) ; //<S2SV> return GF_NOT_SUPPORTED ; //<S2SV> } //<S2SV> strcpy ( cat_enum . szPath , fileName ) ; //<S2SV> sep = strrchr ( cat_enum . szPath , GF_PATH_SEPARATOR ) ; //<S2SV> if ( ! sep ) sep = strrchr ( cat_enum . szPath , '/' ) ; //<S2SV> if ( ! sep ) { //<S2SV> strcpy ( cat_enum . szPath , "." ) ; //<S2SV> if ( strlen ( fileName ) >= sizeof ( cat_enum . szRad1 ) ) { //<S2SV> GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , fileName ) ) ; //<S2SV> return GF_NOT_SUPPORTED ; //<S2SV> } //<S2SV> strcpy ( cat_enum . szRad1 , fileName ) ; //<S2SV> } else { //<S2SV> if ( strlen ( sep + 1 ) >= sizeof ( cat_enum . szRad1 ) ) { //<S2SV> GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , ( sep + 1 ) ) ) ; //<S2SV> return GF_NOT_SUPPORTED ; //<S2SV> } //<S2SV> strcpy ( cat_enum . szRad1 , sep + 1 ) ; //<S2SV> sep [ 0 ] = 0 ; //<S2SV> } //<S2SV> sep = strchr ( cat_enum . szRad1 , '*' ) ; //<S2SV> if ( strlen ( sep + 1 ) >= sizeof ( cat_enum . szRad2 ) ) { //<S2SV> GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , ( sep + 1 ) ) ) ; //<S2SV> return GF_NOT_SUPPORTED ; //<S2SV> } //<S2SV> strcpy ( cat_enum . szRad2 , sep + 1 ) ; //<S2SV> sep [ 0 ] = 0 ; //<S2SV> sep = strchr ( cat_enum . szRad2 , '%' ) ; //<S2SV> if ( ! sep ) sep = strchr ( cat_enum . szRad2 , '#' ) ; //<S2SV> if ( ! sep ) sep = strchr ( cat_enum . szRad2 , ':' ) ; //<S2SV> strcpy ( cat_enum . szOpt , "" ) ; //<S2SV> if ( sep ) { //<S2SV> if ( strlen ( sep ) >= sizeof ( cat_enum . szOpt ) ) { //<S2SV> GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "Invalid<S2SV_blank>option:<S2SV_blank>%s.\\n" , sep ) ) ; //<S2SV> return GF_NOT_SUPPORTED ; //<S2SV> } //<S2SV> strcpy ( cat_enum . szOpt , sep ) ; //<S2SV> sep [ 0 ] = 0 ; //<S2SV> } //<S2SV> return gf_enum_directory ( cat_enum . szPath , 0 , cat_enumerate , & cat_enum , NULL ) ; //<S2SV> } //<S2SV> 