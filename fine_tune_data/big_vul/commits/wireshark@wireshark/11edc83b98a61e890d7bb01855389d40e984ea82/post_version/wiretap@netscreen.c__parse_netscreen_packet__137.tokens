static gboolean //<S2SV> parse_netscreen_packet ( FILE_T fh , struct wtap_pkthdr * phdr , Buffer * buf , //<S2SV> char * line , int * err , gchar * * err_info ) //<S2SV> { //<S2SV> int pkt_len ; //<S2SV> int sec ; //<S2SV> int dsec ; //<S2SV> char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; //<S2SV> char direction [ 2 ] ; //<S2SV> char cap_src [ 13 ] ; //<S2SV> char cap_dst [ 13 ] ; //<S2SV> guint8 * pd ; //<S2SV> gchar * p ; //<S2SV> int n , i = 0 ; //<S2SV> int offset = 0 ; //<S2SV> gchar dststr [ 13 ] ; //<S2SV> phdr -> rec_type = REC_TYPE_PACKET ; //<S2SV> phdr -> presence_flags = WTAP_HAS_TS | WTAP_HAS_CAP_LEN ; //<S2SV> if ( sscanf ( line , "%9d.%9d:<S2SV_blank>%15[a-z0-9/:.-](%1[io])<S2SV_blank>len=%9d:%12s->%12s/" , //<S2SV> & sec , & dsec , cap_int , direction , & pkt_len , cap_src , cap_dst ) < 5 ) { //<S2SV> * err = WTAP_ERR_BAD_FILE ; //<S2SV> * err_info = g_strdup ( "netscreen:<S2SV_blank>Can\'t<S2SV_blank>parse<S2SV_blank>packet-header" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( pkt_len < 0 ) { //<S2SV> * err = WTAP_ERR_BAD_FILE ; //<S2SV> * err_info = g_strdup ( "netscreen:<S2SV_blank>packet<S2SV_blank>header<S2SV_blank>has<S2SV_blank>a<S2SV_blank>negative<S2SV_blank>packet<S2SV_blank>length" ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> if ( pkt_len > WTAP_MAX_PACKET_SIZE ) { //<S2SV> * err = WTAP_ERR_BAD_FILE ; //<S2SV> * err_info = g_strdup_printf ( "netscreen:<S2SV_blank>File<S2SV_blank>has<S2SV_blank>%u-byte<S2SV_blank>packet,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>maximum<S2SV_blank>of<S2SV_blank>%u" , //<S2SV> pkt_len , WTAP_MAX_PACKET_SIZE ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> phdr -> ts . secs = sec ; //<S2SV> phdr -> ts . nsecs = dsec * 100000000 ; //<S2SV> phdr -> len = pkt_len ; //<S2SV> ws_buffer_assure_space ( buf , pkt_len ) ; //<S2SV> pd = ws_buffer_start_ptr ( buf ) ; //<S2SV> while ( 1 ) { //<S2SV> if ( file_gets ( line , NETSCREEN_LINE_LENGTH , fh ) == NULL ) { //<S2SV> break ; //<S2SV> } //<S2SV> for ( p = & line [ 0 ] ; g_ascii_isspace ( * p ) ; p ++ ) //<S2SV> ; //<S2SV> if ( * p == '\\0' ) { //<S2SV> break ; //<S2SV> } //<S2SV> n = parse_single_hex_dump_line ( p , pd , offset ) ; //<S2SV> if ( offset == 0 && n < 6 ) { //<S2SV> if ( info_line ( line ) ) { //<S2SV> if ( ++ i <= NETSCREEN_MAX_INFOLINES ) { //<S2SV> continue ; //<S2SV> } //<S2SV> } else { //<S2SV> * err = WTAP_ERR_BAD_FILE ; //<S2SV> * err_info = g_strdup ( "netscreen:<S2SV_blank>cannot<S2SV_blank>parse<S2SV_blank>hex-data" ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> } //<S2SV> if ( n == - 1 ) { //<S2SV> * err = WTAP_ERR_BAD_FILE ; //<S2SV> * err_info = g_strdup ( "netscreen:<S2SV_blank>cannot<S2SV_blank>parse<S2SV_blank>hex-data" ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> offset += n ; //<S2SV> if ( offset > pkt_len ) { //<S2SV> * err = WTAP_ERR_BAD_FILE ; //<S2SV> * err_info = g_strdup ( "netscreen:<S2SV_blank>too<S2SV_blank>much<S2SV_blank>hex-data" ) ; //<S2SV> return FALSE ; //<S2SV> } //<S2SV> } //<S2SV> if ( strncmp ( cap_int , "adsl" , 4 ) == 0 ) { //<S2SV> g_snprintf ( dststr , 13 , "%02x%02x%02x%02x%02x%02x" , //<S2SV> pd [ 0 ] , pd [ 1 ] , pd [ 2 ] , pd [ 3 ] , pd [ 4 ] , pd [ 5 ] ) ; //<S2SV> if ( strncmp ( dststr , cap_dst , 12 ) == 0 ) //<S2SV> phdr -> pkt_encap = WTAP_ENCAP_ETHERNET ; //<S2SV> else //<S2SV> phdr -> pkt_encap = WTAP_ENCAP_PPP ; //<S2SV> } //<S2SV> else if ( strncmp ( cap_int , "seri" , 4 ) == 0 ) //<S2SV> phdr -> pkt_encap = WTAP_ENCAP_PPP ; //<S2SV> else //<S2SV> phdr -> pkt_encap = WTAP_ENCAP_ETHERNET ; //<S2SV> phdr -> caplen = offset ; //<S2SV> return TRUE ; //<S2SV> } //<S2SV> 