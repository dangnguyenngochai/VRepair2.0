static guint32 //<S2SV> parse_wbxml_attribute_list ( proto_tree * tree , tvbuff_t * tvb , //<S2SV> guint32 offset , guint32 str_tbl , guint8 level , guint8 * codepage_attr ) //<S2SV> { //<S2SV> guint32 tvb_len = tvb_reported_length ( tvb ) ; //<S2SV> guint32 off = offset , last_off ; //<S2SV> guint32 len ; //<S2SV> guint str_len ; //<S2SV> guint32 ent ; //<S2SV> guint32 idx ; //<S2SV> guint8 peek ; //<S2SV> DebugLog ( ( "parse_wbxml_attr<S2SV_blank>(level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>offset<S2SV_blank>=<S2SV_blank>%u)\\n" , level , offset ) ) ; //<S2SV> last_off = off ; //<S2SV> while ( off < tvb_len ) { //<S2SV> peek = tvb_get_guint8 ( tvb , off ) ; //<S2SV> DebugLog ( ( "ATTR:<S2SV_blank>(top<S2SV_blank>of<S2SV_blank>while)<S2SV_blank>level<S2SV_blank>=<S2SV_blank>%3u,<S2SV_blank>peek<S2SV_blank>=<S2SV_blank>0x%02X,<S2SV_blank>" //<S2SV> "off<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>tvb_len<S2SV_blank>=<S2SV_blank>%u\\n" , level , peek , off , tvb_len ) ) ; //<S2SV> if ( ( peek & 0x3F ) < 5 ) switch ( peek ) { //<S2SV> case 0x00 : //<S2SV> * codepage_attr = tvb_get_guint8 ( tvb , off + 1 ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 2 , //<S2SV> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>-->%3d<S2SV_blank>" //<S2SV> "|<S2SV_blank>SWITCH_PAGE<S2SV_blank>(Attr<S2SV_blank>code<S2SV_blank>page)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>|" , //<S2SV> * codepage_attr ) ; //<S2SV> off += 2 ; //<S2SV> break ; //<S2SV> case 0x01 : //<S2SV> off ++ ; //<S2SV> DebugLog ( ( "ATTR:<S2SV_blank>level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>Return:<S2SV_blank>len<S2SV_blank>=<S2SV_blank>%u\\n" , //<S2SV> level , off - offset ) ) ; //<S2SV> return ( off - offset ) ; //<S2SV> case 0x02 : //<S2SV> ent = tvb_get_guintvar ( tvb , off + 1 , & len ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 + len , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>ENTITY<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s\'&#%u;\'" , //<S2SV> level , * codepage_attr , Indent ( level ) , ent ) ; //<S2SV> off += 1 + len ; //<S2SV> break ; //<S2SV> case 0x03 : //<S2SV> len = tvb_strsize ( tvb , off + 1 ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 + len , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>STR_I<S2SV_blank>(Inline<S2SV_blank>string)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s\\\'%s\\\'" , //<S2SV> level , * codepage_attr , Indent ( level ) , //<S2SV> tvb_format_text ( tvb , off + 1 , len - 1 ) ) ; //<S2SV> off += 1 + len ; //<S2SV> break ; //<S2SV> case 0x04 : //<S2SV> idx = tvb_get_guintvar ( tvb , off + 1 , & len ) ; //<S2SV> str_len = tvb_strsize ( tvb , str_tbl + idx ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 + len , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>LITERAL<S2SV_blank>(Literal<S2SV_blank>Attribute)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank>%s<%s<S2SV_blank>/>" , //<S2SV> level , * codepage_attr , Indent ( level ) , //<S2SV> tvb_format_text ( tvb , str_tbl + idx , str_len - 1 ) ) ; //<S2SV> off += 1 + len ; //<S2SV> break ; //<S2SV> case 0x40 : //<S2SV> case 0x41 : //<S2SV> case 0x42 : //<S2SV> len = tvb_strsize ( tvb , off + 1 ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 + len , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>EXT_I_%1x<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(Extension<S2SV_blank>Token)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s(Inline<S2SV_blank>string<S2SV_blank>extension:<S2SV_blank>\\\'%s\\\')" , //<S2SV> level , * codepage_attr , peek & 0x0f , Indent ( level ) , //<S2SV> tvb_format_text ( tvb , off + 1 , len - 1 ) ) ; //<S2SV> off += 1 + len ; //<S2SV> break ; //<S2SV> case 0x80 : //<S2SV> case 0x81 : //<S2SV> case 0x82 : //<S2SV> idx = tvb_get_guintvar ( tvb , off + 1 , & len ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 + len , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>EXT_T_%1x<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(Extension<S2SV_blank>Token)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s(Extension<S2SV_blank>Token,<S2SV_blank>integer<S2SV_blank>value:<S2SV_blank>%u)" , //<S2SV> level , * codepage_attr , peek & 0x0f , Indent ( level ) , //<S2SV> idx ) ; //<S2SV> off += 1 + len ; //<S2SV> break ; //<S2SV> case 0x83 : //<S2SV> idx = tvb_get_guintvar ( tvb , off + 1 , & len ) ; //<S2SV> str_len = tvb_strsize ( tvb , str_tbl + idx ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 + len , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>STR_T<S2SV_blank>(Tableref<S2SV_blank>string)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s\\\'%s\\\'" , //<S2SV> level , * codepage_attr , Indent ( level ) , //<S2SV> tvb_format_text ( tvb , str_tbl + idx , str_len - 1 ) ) ; //<S2SV> off += 1 + len ; //<S2SV> break ; //<S2SV> case 0xC0 : //<S2SV> case 0xC1 : //<S2SV> case 0xC2 : //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>EXT_%1x<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(Extension<S2SV_blank>Token)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s(Single-byte<S2SV_blank>extension)" , //<S2SV> level , * codepage_attr , peek & 0x0f , Indent ( level ) ) ; //<S2SV> off ++ ; //<S2SV> break ; //<S2SV> case 0xC3 : //<S2SV> if ( tvb_get_guint8 ( tvb , 0 ) ) { //<S2SV> idx = tvb_get_guintvar ( tvb , off + 1 , & len ) ; //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 + len + idx , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>OPAQUE<S2SV_blank>(Opaque<S2SV_blank>data)<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%s(%d<S2SV_blank>bytes<S2SV_blank>of<S2SV_blank>opaque<S2SV_blank>data)" , //<S2SV> level , * codepage_attr , Indent ( level ) , idx ) ; //<S2SV> off += 1 + len + idx ; //<S2SV> } else { //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>RESERVED_2<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(Invalid<S2SV_blank>Token!)<S2SV_blank>" //<S2SV> "|<S2SV_blank>WBXML<S2SV_blank>1.0<S2SV_blank>parsing<S2SV_blank>stops<S2SV_blank>here." , //<S2SV> level , * codepage_attr ) ; //<S2SV> off = tvb_len ; //<S2SV> DebugLog ( ( "ATTR:<S2SV_blank>level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>Return:<S2SV_blank>len<S2SV_blank>=<S2SV_blank>%u\\n" , //<S2SV> level , off - offset ) ) ; //<S2SV> return ( off - offset ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank>%-10s<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>(Invalid<S2SV_blank>Token!)<S2SV_blank>" //<S2SV> "|<S2SV_blank>WBXML<S2SV_blank>parsing<S2SV_blank>stops<S2SV_blank>here." , //<S2SV> level , * codepage_attr , //<S2SV> val_to_str_ext ( peek , & vals_wbxml1x_global_tokens_ext , "(unknown<S2SV_blank>0x%x)" ) ) ; //<S2SV> off = tvb_len ; //<S2SV> break ; //<S2SV> } else { //<S2SV> if ( peek & 0x80 ) { //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank>Known<S2SV_blank>attrValue<S2SV_blank>0x%02X<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%sattrValue_0x%02X" , //<S2SV> level , * codepage_attr , peek & 0x7f , Indent ( level ) , //<S2SV> peek ) ; //<S2SV> off ++ ; //<S2SV> } else { //<S2SV> proto_tree_add_text ( tree , tvb , off , 1 , //<S2SV> "<S2SV_blank><S2SV_blank>%3d<S2SV_blank>|<S2SV_blank><S2SV_blank>Attr<S2SV_blank>|<S2SV_blank>A<S2SV_blank>%3d<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank>Known<S2SV_blank>attrStart<S2SV_blank>0x%02X<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" //<S2SV> "|<S2SV_blank><S2SV_blank><S2SV_blank>%sattrStart_0x%02X" , //<S2SV> level , * codepage_attr , peek & 0x7f , Indent ( level ) , //<S2SV> peek ) ; //<S2SV> off ++ ; //<S2SV> } //<S2SV> } //<S2SV> if ( off < last_off ) { //<S2SV> THROW ( ReportedBoundsError ) ; //<S2SV> } //<S2SV> last_off = off ; //<S2SV> } //<S2SV> DebugLog ( ( "ATTR:<S2SV_blank>level<S2SV_blank>=<S2SV_blank>%u,<S2SV_blank>Return:<S2SV_blank>len<S2SV_blank>=<S2SV_blank>%u<S2SV_blank>(end<S2SV_blank>of<S2SV_blank>function<S2SV_blank>body)\\n" , //<S2SV> level , off - offset ) ) ; //<S2SV> return ( off - offset ) ; //<S2SV> } //<S2SV> 