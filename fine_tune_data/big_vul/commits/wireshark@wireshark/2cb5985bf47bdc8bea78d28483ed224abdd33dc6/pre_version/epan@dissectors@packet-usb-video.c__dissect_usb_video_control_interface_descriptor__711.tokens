static int //<S2SV> dissect_usb_video_control_interface_descriptor ( proto_tree * parent_tree , tvbuff_t * tvb , //<S2SV> guint8 descriptor_len , packet_info * pinfo , usb_conv_info_t * usb_conv_info ) //<S2SV> { //<S2SV> video_conv_info_t * video_conv_info = NULL ; //<S2SV> video_entity_t * entity = NULL ; //<S2SV> proto_item * item = NULL ; //<S2SV> proto_item * subtype_item = NULL ; //<S2SV> proto_tree * tree = NULL ; //<S2SV> guint8 entity_id = 0 ; //<S2SV> guint16 terminal_type = 0 ; //<S2SV> int offset = 0 ; //<S2SV> guint8 subtype ; //<S2SV> subtype = tvb_get_guint8 ( tvb , offset + 2 ) ; //<S2SV> if ( parent_tree ) //<S2SV> { //<S2SV> const gchar * subtype_str ; //<S2SV> subtype_str = val_to_str_ext ( subtype , & vc_if_descriptor_subtypes_ext , "Unknown<S2SV_blank>(0x%x)" ) ; //<S2SV> tree = proto_tree_add_subtree_format ( parent_tree , tvb , offset , descriptor_len , //<S2SV> ett_descriptor_video_control , & item , "VIDEO<S2SV_blank>CONTROL<S2SV_blank>INTERFACE<S2SV_blank>DESCRIPTOR<S2SV_blank>[%s]" , //<S2SV> subtype_str ) ; //<S2SV> } //<S2SV> dissect_usb_descriptor_header ( tree , tvb , offset , & vid_descriptor_type_vals_ext ) ; //<S2SV> subtype_item = proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_subtype , tvb , offset + 2 , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> offset += 3 ; //<S2SV> if ( subtype == VC_HEADER ) //<S2SV> { //<S2SV> guint8 num_vs_interfaces ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_bcdUVC , tvb , offset , 2 , ENC_LITTLE_ENDIAN ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_ifdesc_wTotalLength , tvb , offset + 2 , 2 , ENC_LITTLE_ENDIAN ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_dwClockFrequency , tvb , offset + 4 , 4 , ENC_LITTLE_ENDIAN ) ; //<S2SV> num_vs_interfaces = tvb_get_guint8 ( tvb , offset + 8 ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_bInCollection , tvb , offset + 8 , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> if ( num_vs_interfaces > 0 ) //<S2SV> { //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_baInterfaceNr , tvb , offset + 9 , num_vs_interfaces , ENC_NA ) ; //<S2SV> } //<S2SV> offset += 9 + num_vs_interfaces ; //<S2SV> } //<S2SV> else if ( ( subtype == VC_INPUT_TERMINAL ) || ( subtype == VC_OUTPUT_TERMINAL ) ) //<S2SV> { //<S2SV> entity_id = tvb_get_guint8 ( tvb , offset ) ; //<S2SV> terminal_type = tvb_get_letohs ( tvb , offset + 1 ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_terminal_id , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_terminal_type , tvb , offset + 1 , 2 , ENC_LITTLE_ENDIAN ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_assoc_terminal , tvb , offset + 3 , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> offset += 4 ; //<S2SV> if ( subtype == VC_OUTPUT_TERMINAL ) //<S2SV> { //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_src_id , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> ++ offset ; //<S2SV> } //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_iTerminal , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> ++ offset ; //<S2SV> if ( subtype == VC_INPUT_TERMINAL ) //<S2SV> { //<S2SV> if ( terminal_type == ITT_CAMERA ) //<S2SV> { //<S2SV> offset = dissect_usb_video_camera_terminal ( tree , tvb , offset ) ; //<S2SV> } //<S2SV> else if ( terminal_type == ITT_MEDIA_TRANSPORT_INPUT ) //<S2SV> { //<S2SV> } //<S2SV> } //<S2SV> if ( subtype == VC_OUTPUT_TERMINAL ) //<S2SV> { //<S2SV> if ( terminal_type == OTT_MEDIA_TRANSPORT_OUTPUT ) //<S2SV> { //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> entity_id = tvb_get_guint8 ( tvb , offset ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_control_ifdesc_unit_id , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> ++ offset ; //<S2SV> if ( subtype == VC_PROCESSING_UNIT ) //<S2SV> { //<S2SV> offset = dissect_usb_video_processing_unit ( tree , tvb , offset ) ; //<S2SV> } //<S2SV> else if ( subtype == VC_SELECTOR_UNIT ) //<S2SV> { //<S2SV> offset = dissect_usb_video_selector_unit ( tree , tvb , offset ) ; //<S2SV> } //<S2SV> else if ( subtype == VC_EXTENSION_UNIT ) //<S2SV> { //<S2SV> offset = dissect_usb_video_extension_unit ( tree , tvb , offset ) ; //<S2SV> } //<S2SV> else if ( subtype == VC_ENCODING_UNIT ) //<S2SV> { //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> expert_add_info_format ( pinfo , subtype_item , & ei_usb_vid_subtype_unknown , //<S2SV> "Unknown<S2SV_blank>VC<S2SV_blank>subtype<S2SV_blank>%u" , subtype ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( offset < descriptor_len ) //<S2SV> { //<S2SV> proto_tree_add_item ( tree , hf_usb_vid_descriptor_data , tvb , offset , descriptor_len - offset , ENC_NA ) ; //<S2SV> } //<S2SV> if ( entity_id != 0 ) //<S2SV> proto_item_append_text ( item , "<S2SV_blank>(Entity<S2SV_blank>%d)" , entity_id ) ; //<S2SV> if ( subtype != VC_HEADER && usb_conv_info ) //<S2SV> { //<S2SV> usb_conv_info = get_usb_iface_conv_info ( pinfo , usb_conv_info -> interfaceNum ) ; //<S2SV> video_conv_info = ( video_conv_info_t * ) usb_conv_info -> class_data ; //<S2SV> if ( ! video_conv_info ) //<S2SV> { //<S2SV> video_conv_info = wmem_new ( wmem_file_scope ( ) , video_conv_info_t ) ; //<S2SV> video_conv_info -> entities = wmem_tree_new ( wmem_file_scope ( ) ) ; //<S2SV> usb_conv_info -> class_data = video_conv_info ; //<S2SV> } //<S2SV> entity = ( video_entity_t * ) wmem_tree_lookup32 ( video_conv_info -> entities , entity_id ) ; //<S2SV> if ( ! entity ) //<S2SV> { //<S2SV> entity = wmem_new ( wmem_file_scope ( ) , video_entity_t ) ; //<S2SV> entity -> entityID = entity_id ; //<S2SV> entity -> subtype = subtype ; //<S2SV> entity -> terminalType = terminal_type ; //<S2SV> wmem_tree_insert32 ( video_conv_info -> entities , entity_id , entity ) ; //<S2SV> } //<S2SV> } //<S2SV> return descriptor_len ; //<S2SV> } //<S2SV> 