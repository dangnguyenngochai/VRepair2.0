static int //<S2SV> dissect_usb_ms_bulk ( tvbuff_t * tvb , packet_info * pinfo , proto_tree * parent_tree , void * data ) //<S2SV> { //<S2SV> usb_conv_info_t * usb_conv_info ; //<S2SV> usb_ms_conv_info_t * usb_ms_conv_info ; //<S2SV> proto_tree * tree ; //<S2SV> proto_item * ti ; //<S2SV> guint32 signature = 0 ; //<S2SV> int offset = 0 ; //<S2SV> gboolean is_request ; //<S2SV> itl_nexus_t * itl ; //<S2SV> itlq_nexus_t * itlq ; //<S2SV> if ( data == NULL ) //<S2SV> return 0 ; //<S2SV> usb_conv_info = ( usb_conv_info_t * ) data ; //<S2SV> usb_ms_conv_info = ( usb_ms_conv_info_t * ) usb_conv_info -> class_data ; //<S2SV> if ( ! usb_ms_conv_info ) { //<S2SV> usb_ms_conv_info = wmem_new ( wmem_file_scope ( ) , usb_ms_conv_info_t ) ; //<S2SV> usb_ms_conv_info -> itl = wmem_tree_new ( wmem_file_scope ( ) ) ; //<S2SV> usb_ms_conv_info -> itlq = wmem_tree_new ( wmem_file_scope ( ) ) ; //<S2SV> usb_conv_info -> class_data = usb_ms_conv_info ; //<S2SV> usb_conv_info -> class_data_type = USB_CONV_MASS_STORAGE ; //<S2SV> } else if ( usb_conv_info -> class_data_type != USB_CONV_MASS_STORAGE ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> is_request = ( pinfo -> srcport == NO_ENDPOINT ) ; //<S2SV> col_set_str ( pinfo -> cinfo , COL_PROTOCOL , "USBMS" ) ; //<S2SV> col_clear ( pinfo -> cinfo , COL_INFO ) ; //<S2SV> ti = proto_tree_add_protocol_format ( parent_tree , proto_usb_ms , tvb , 0 , - 1 , "USB<S2SV_blank>Mass<S2SV_blank>Storage" ) ; //<S2SV> tree = proto_item_add_subtree ( ti , ett_usb_ms ) ; //<S2SV> signature = tvb_get_letohl ( tvb , offset ) ; //<S2SV> if ( is_request && ( signature == 0x43425355 ) && ( tvb_reported_length ( tvb ) == 31 ) ) { //<S2SV> tvbuff_t * cdb_tvb ; //<S2SV> int cdbrlen , cdblen ; //<S2SV> guint8 lun , flags ; //<S2SV> guint32 datalen ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWSignature , tvb , offset , 4 , ENC_LITTLE_ENDIAN ) ; //<S2SV> offset += 4 ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWTag , tvb , offset , 4 , ENC_LITTLE_ENDIAN ) ; //<S2SV> offset += 4 ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWDataTransferLength , tvb , offset , 4 , ENC_LITTLE_ENDIAN ) ; //<S2SV> datalen = tvb_get_letohl ( tvb , offset ) ; //<S2SV> offset += 4 ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWFlags , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> flags = tvb_get_guint8 ( tvb , offset ) ; //<S2SV> offset += 1 ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWTarget , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWLUN , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> lun = tvb_get_guint8 ( tvb , offset ) & 0x0f ; //<S2SV> offset += 1 ; //<S2SV> itl = ( itl_nexus_t * ) wmem_tree_lookup32 ( usb_ms_conv_info -> itl , lun ) ; //<S2SV> if ( ! itl ) { //<S2SV> itl = wmem_new ( wmem_file_scope ( ) , itl_nexus_t ) ; //<S2SV> itl -> cmdset = 0xff ; //<S2SV> itl -> conversation = NULL ; //<S2SV> wmem_tree_insert32 ( usb_ms_conv_info -> itl , lun , itl ) ; //<S2SV> } //<S2SV> itlq = ( itlq_nexus_t * ) wmem_tree_lookup32 ( usb_ms_conv_info -> itlq , pinfo -> num ) ; //<S2SV> if ( ! itlq ) { //<S2SV> itlq = wmem_new ( wmem_file_scope ( ) , itlq_nexus_t ) ; //<S2SV> itlq -> lun = lun ; //<S2SV> itlq -> scsi_opcode = 0xffff ; //<S2SV> itlq -> task_flags = 0 ; //<S2SV> if ( datalen ) { //<S2SV> if ( flags & 0x80 ) { //<S2SV> itlq -> task_flags |= SCSI_DATA_READ ; //<S2SV> } else { //<S2SV> itlq -> task_flags |= SCSI_DATA_WRITE ; //<S2SV> } //<S2SV> } //<S2SV> itlq -> data_length = datalen ; //<S2SV> itlq -> bidir_data_length = 0 ; //<S2SV> itlq -> fc_time = pinfo -> abs_ts ; //<S2SV> itlq -> first_exchange_frame = pinfo -> num ; //<S2SV> itlq -> last_exchange_frame = 0 ; //<S2SV> itlq -> flags = 0 ; //<S2SV> itlq -> alloc_len = 0 ; //<S2SV> itlq -> extra_data = NULL ; //<S2SV> wmem_tree_insert32 ( usb_ms_conv_info -> itlq , pinfo -> num , itlq ) ; //<S2SV> } //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWCBLength , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> cdbrlen = tvb_get_guint8 ( tvb , offset ) & 0x1f ; //<S2SV> offset += 1 ; //<S2SV> cdblen = cdbrlen ; //<S2SV> if ( cdblen > tvb_captured_length_remaining ( tvb , offset ) ) { //<S2SV> cdblen = tvb_captured_length_remaining ( tvb , offset ) ; //<S2SV> } //<S2SV> if ( cdblen ) { //<S2SV> cdb_tvb = tvb_new_subset ( tvb , offset , cdblen , cdbrlen ) ; //<S2SV> dissect_scsi_cdb ( cdb_tvb , pinfo , parent_tree , SCSI_DEV_UNKNOWN , itlq , itl ) ; //<S2SV> } //<S2SV> return tvb_captured_length ( tvb ) ; //<S2SV> } //<S2SV> if ( ( ! is_request ) && ( signature == 0x53425355 ) && ( tvb_reported_length ( tvb ) == 13 ) ) { //<S2SV> guint8 status ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCSWSignature , tvb , offset , 4 , ENC_LITTLE_ENDIAN ) ; //<S2SV> offset += 4 ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCBWTag , tvb , offset , 4 , ENC_LITTLE_ENDIAN ) ; //<S2SV> offset += 4 ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCSWDataResidue , tvb , offset , 4 , ENC_LITTLE_ENDIAN ) ; //<S2SV> offset += 4 ; //<S2SV> proto_tree_add_item ( tree , hf_usb_ms_dCSWStatus , tvb , offset , 1 , ENC_LITTLE_ENDIAN ) ; //<S2SV> status = tvb_get_guint8 ( tvb , offset ) ; //<S2SV> itlq = ( itlq_nexus_t * ) wmem_tree_lookup32_le ( usb_ms_conv_info -> itlq , pinfo -> num ) ; //<S2SV> if ( ! itlq ) { //<S2SV> return tvb_captured_length ( tvb ) ; //<S2SV> } //<S2SV> itlq -> last_exchange_frame = pinfo -> num ; //<S2SV> itl = ( itl_nexus_t * ) wmem_tree_lookup32 ( usb_ms_conv_info -> itl , itlq -> lun ) ; //<S2SV> if ( ! itl ) { //<S2SV> return tvb_captured_length ( tvb ) ; //<S2SV> } //<S2SV> if ( ! status ) { //<S2SV> dissect_scsi_rsp ( tvb , pinfo , parent_tree , itlq , itl , 0 ) ; //<S2SV> } else { //<S2SV> dissect_scsi_rsp ( tvb , pinfo , parent_tree , itlq , itl , 0x02 ) ; //<S2SV> } //<S2SV> return tvb_captured_length ( tvb ) ; //<S2SV> } //<S2SV> itlq = ( itlq_nexus_t * ) wmem_tree_lookup32_le ( usb_ms_conv_info -> itlq , pinfo -> num ) ; //<S2SV> if ( ! itlq ) { //<S2SV> return tvb_captured_length ( tvb ) ; //<S2SV> } //<S2SV> itl = ( itl_nexus_t * ) wmem_tree_lookup32 ( usb_ms_conv_info -> itl , itlq -> lun ) ; //<S2SV> if ( ! itl ) { //<S2SV> return tvb_captured_length ( tvb ) ; //<S2SV> } //<S2SV> dissect_scsi_payload ( tvb , pinfo , parent_tree , is_request , itlq , itl , 0 ) ; //<S2SV> return tvb_captured_length ( tvb ) ; //<S2SV> } //<S2SV> 