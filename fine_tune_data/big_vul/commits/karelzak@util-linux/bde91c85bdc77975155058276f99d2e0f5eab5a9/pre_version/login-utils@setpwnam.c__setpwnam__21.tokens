int setpwnam ( struct passwd * pwd ) //<S2SV> { //<S2SV> FILE * fp = NULL , * pwf = NULL ; //<S2SV> int save_errno ; //<S2SV> int found ; //<S2SV> int namelen ; //<S2SV> int buflen = 256 ; //<S2SV> int contlen , rc ; //<S2SV> char * linebuf = NULL ; //<S2SV> char * tmpname = NULL ; //<S2SV> char * atomic_dir = "/etc" ; //<S2SV> pw_init ( ) ; //<S2SV> if ( ( fp = xfmkstemp ( & tmpname , atomic_dir ) ) == NULL ) //<S2SV> return - 1 ; //<S2SV> if ( fchown ( fileno ( fp ) , ( uid_t ) 0 , ( gid_t ) 0 ) < 0 ) //<S2SV> goto fail ; //<S2SV> if ( lckpwdf ( ) < 0 ) //<S2SV> goto fail ; //<S2SV> pwf = fopen ( PASSWD_FILE , "r" ) ; //<S2SV> if ( ! pwf ) //<S2SV> goto fail ; //<S2SV> namelen = strlen ( pwd -> pw_name ) ; //<S2SV> linebuf = malloc ( buflen ) ; //<S2SV> if ( ! linebuf ) //<S2SV> goto fail ; //<S2SV> found = false ; //<S2SV> while ( fgets ( linebuf , buflen , pwf ) != NULL ) { //<S2SV> contlen = strlen ( linebuf ) ; //<S2SV> while ( linebuf [ contlen - 1 ] != '\\n' && ! feof ( pwf ) ) { //<S2SV> char * tmp ; //<S2SV> buflen *= 2 ; //<S2SV> tmp = realloc ( linebuf , buflen ) ; //<S2SV> if ( tmp == NULL ) //<S2SV> goto fail ; //<S2SV> linebuf = tmp ; //<S2SV> if ( fgets ( & linebuf [ contlen ] , buflen / 2 , pwf ) == NULL ) //<S2SV> break ; //<S2SV> contlen = strlen ( linebuf ) ; //<S2SV> } //<S2SV> if ( ! found && linebuf [ namelen ] == ':' && //<S2SV> ! strncmp ( linebuf , pwd -> pw_name , namelen ) ) { //<S2SV> if ( putpwent ( pwd , fp ) < 0 ) //<S2SV> goto fail ; //<S2SV> found = true ; //<S2SV> continue ; //<S2SV> } //<S2SV> fputs ( linebuf , fp ) ; //<S2SV> } //<S2SV> if ( fchmod ( fileno ( fp ) , 0644 ) < 0 ) //<S2SV> goto fail ; //<S2SV> rc = close_stream ( fp ) ; //<S2SV> fp = NULL ; //<S2SV> if ( rc != 0 ) //<S2SV> goto fail ; //<S2SV> fclose ( pwf ) ; //<S2SV> pwf = NULL ; //<S2SV> if ( ! found ) { //<S2SV> errno = ENOENT ; //<S2SV> goto fail ; //<S2SV> } //<S2SV> unlink ( PASSWD_FILE ".OLD" ) ; //<S2SV> ignore_result ( link ( PASSWD_FILE , PASSWD_FILE ".OLD" ) ) ; //<S2SV> if ( rename ( tmpname , PASSWD_FILE ) < 0 ) //<S2SV> goto fail ; //<S2SV> ulckpwdf ( ) ; //<S2SV> return 0 ; //<S2SV> fail : //<S2SV> save_errno = errno ; //<S2SV> ulckpwdf ( ) ; //<S2SV> if ( fp != NULL ) //<S2SV> fclose ( fp ) ; //<S2SV> if ( tmpname != NULL ) //<S2SV> unlink ( tmpname ) ; //<S2SV> free ( tmpname ) ; //<S2SV> if ( pwf != NULL ) //<S2SV> fclose ( pwf ) ; //<S2SV> free ( linebuf ) ; //<S2SV> errno = save_errno ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> 