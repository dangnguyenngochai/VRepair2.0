int main ( int argc , char * * argv ) //<S2SV> { //<S2SV> char * oldshell ; //<S2SV> int nullshell = 0 ; //<S2SV> const uid_t uid = getuid ( ) ; //<S2SV> struct sinfo info = { 0 } ; //<S2SV> struct passwd * pw ; //<S2SV> sanitize_env ( ) ; //<S2SV> setlocale ( LC_ALL , "" ) ; //<S2SV> bindtextdomain ( PACKAGE , LOCALEDIR ) ; //<S2SV> textdomain ( PACKAGE ) ; //<S2SV> atexit ( close_stdout ) ; //<S2SV> parse_argv ( argc , argv , & info ) ; //<S2SV> if ( ! info . username ) { //<S2SV> pw = getpwuid ( uid ) ; //<S2SV> if ( ! pw ) //<S2SV> errx ( EXIT_FAILURE , _ ( "you<S2SV_blank>(user<S2SV_blank>%d)<S2SV_blank>don\'t<S2SV_blank>exist." ) , //<S2SV> uid ) ; //<S2SV> } else { //<S2SV> pw = getpwnam ( info . username ) ; //<S2SV> if ( ! pw ) //<S2SV> errx ( EXIT_FAILURE , _ ( "user<S2SV_blank>\\"%s\\"<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist." ) , //<S2SV> info . username ) ; //<S2SV> } //<S2SV> # ifndef HAVE_LIBUSER //<S2SV> if ( ! ( is_local ( pw -> pw_name ) ) ) //<S2SV> errx ( EXIT_FAILURE , _ ( "can<S2SV_blank>only<S2SV_blank>change<S2SV_blank>local<S2SV_blank>entries" ) ) ; //<S2SV> # endif //<S2SV> # ifdef HAVE_LIBSELINUX //<S2SV> if ( is_selinux_enabled ( ) > 0 ) { //<S2SV> if ( uid == 0 ) { //<S2SV> if ( checkAccess ( pw -> pw_name , PASSWD__CHSH ) != 0 ) { //<S2SV> security_context_t user_context ; //<S2SV> if ( getprevcon ( & user_context ) < 0 ) //<S2SV> user_context = //<S2SV> ( security_context_t ) NULL ; //<S2SV> errx ( EXIT_FAILURE , //<S2SV> _ ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>authorized<S2SV_blank>to<S2SV_blank>change<S2SV_blank>the<S2SV_blank>shell<S2SV_blank>of<S2SV_blank>%s" ) , //<S2SV> user_context ? : _ ( "Unknown<S2SV_blank>user<S2SV_blank>context" ) , //<S2SV> pw -> pw_name ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( setupDefaultContext ( _PATH_PASSWD ) != 0 ) //<S2SV> errx ( EXIT_FAILURE , //<S2SV> _ ( "can\'t<S2SV_blank>set<S2SV_blank>default<S2SV_blank>context<S2SV_blank>for<S2SV_blank>%s" ) , _PATH_PASSWD ) ; //<S2SV> } //<S2SV> # endif //<S2SV> oldshell = pw -> pw_shell ; //<S2SV> if ( oldshell == NULL || * oldshell == '\\0' ) { //<S2SV> oldshell = _PATH_BSHELL ; //<S2SV> nullshell = 1 ; //<S2SV> } //<S2SV> # ifdef HAVE_LIBUSER //<S2SV> if ( geteuid ( ) != getuid ( ) && uid != pw -> pw_uid ) { //<S2SV> # else //<S2SV> if ( uid != 0 && uid != pw -> pw_uid ) { //<S2SV> # endif //<S2SV> errno = EACCES ; //<S2SV> err ( EXIT_FAILURE , //<S2SV> _ ( "running<S2SV_blank>UID<S2SV_blank>doesn\'t<S2SV_blank>match<S2SV_blank>UID<S2SV_blank>of<S2SV_blank>user<S2SV_blank>we\'re<S2SV_blank>" //<S2SV> "altering,<S2SV_blank>shell<S2SV_blank>change<S2SV_blank>denied" ) ) ; //<S2SV> } //<S2SV> if ( uid != 0 && ! get_shell_list ( oldshell ) ) { //<S2SV> errno = EACCES ; //<S2SV> err ( EXIT_FAILURE , _ ( "your<S2SV_blank>shell<S2SV_blank>is<S2SV_blank>not<S2SV_blank>in<S2SV_blank>%s,<S2SV_blank>" //<S2SV> "shell<S2SV_blank>change<S2SV_blank>denied" ) , _PATH_SHELLS ) ; //<S2SV> } //<S2SV> printf ( _ ( "Changing<S2SV_blank>shell<S2SV_blank>for<S2SV_blank>%s.\\n" ) , pw -> pw_name ) ; //<S2SV> # if ! defined ( HAVE_LIBUSER ) && defined ( CHFN_CHSH_PASSWORD ) //<S2SV> if ( ! auth_pam ( "chsh" , uid , pw -> pw_name ) ) { //<S2SV> return EXIT_FAILURE ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( ! info . shell ) { //<S2SV> info . shell = ask_new_shell ( _ ( "New<S2SV_blank>shell" ) , oldshell ) ; //<S2SV> if ( ! info . shell ) //<S2SV> return EXIT_SUCCESS ; //<S2SV> } //<S2SV> check_shell ( info . shell ) ; //<S2SV> if ( ! nullshell && strcmp ( oldshell , info . shell ) == 0 ) //<S2SV> errx ( EXIT_SUCCESS , _ ( "Shell<S2SV_blank>not<S2SV_blank>changed." ) ) ; //<S2SV> # ifdef HAVE_LIBUSER //<S2SV> if ( set_value_libuser ( "chsh" , pw -> pw_name , uid , //<S2SV> LU_LOGINSHELL , info . shell ) < 0 ) //<S2SV> errx ( EXIT_FAILURE , _ ( "Shell<S2SV_blank>*NOT*<S2SV_blank>changed.<S2SV_blank><S2SV_blank>Try<S2SV_blank>again<S2SV_blank>later." ) ) ; //<S2SV> # else //<S2SV> pw -> pw_shell = info . shell ; //<S2SV> if ( setpwnam ( pw ) < 0 ) //<S2SV> err ( EXIT_FAILURE , _ ( "setpwnam<S2SV_blank>failed\\n" //<S2SV> "Shell<S2SV_blank>*NOT*<S2SV_blank>changed.<S2SV_blank><S2SV_blank>Try<S2SV_blank>again<S2SV_blank>later." ) ) ; //<S2SV> # endif //<S2SV> printf ( _ ( "Shell<S2SV_blank>changed.\\n" ) ) ; //<S2SV> return EXIT_SUCCESS ; //<S2SV> } //<S2SV> 