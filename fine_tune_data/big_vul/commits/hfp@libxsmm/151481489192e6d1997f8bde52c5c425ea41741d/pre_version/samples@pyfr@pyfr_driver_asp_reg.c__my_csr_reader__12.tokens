int my_csr_reader ( const char * i_csr_file_in , //<S2SV> unsigned int * * o_row_idx , //<S2SV> unsigned int * * o_column_idx , //<S2SV> REALTYPE * * o_values , //<S2SV> unsigned int * o_row_count , //<S2SV> unsigned int * o_column_count , //<S2SV> unsigned int * o_element_count ) { //<S2SV> FILE * l_csr_file_handle ; //<S2SV> const unsigned int l_line_length = 512 ; //<S2SV> char l_line [ 512 + 1 ] ; //<S2SV> unsigned int l_header_read = 0 ; //<S2SV> unsigned int * l_row_idx_id = NULL ; //<S2SV> unsigned int l_i = 0 ; //<S2SV> l_csr_file_handle = fopen ( i_csr_file_in , "r" ) ; //<S2SV> if ( l_csr_file_handle == NULL ) { //<S2SV> fprintf ( stderr , "cannot<S2SV_blank>open<S2SV_blank>CSR<S2SV_blank>file!\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> while ( fgets ( l_line , l_line_length , l_csr_file_handle ) != NULL ) { //<S2SV> if ( strlen ( l_line ) == l_line_length ) { //<S2SV> fprintf ( stderr , "could<S2SV_blank>not<S2SV_blank>read<S2SV_blank>file<S2SV_blank>length!\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( l_line [ 0 ] == '%' ) { //<S2SV> continue ; //<S2SV> } else { //<S2SV> if ( l_header_read == 0 ) { //<S2SV> if ( sscanf ( l_line , "%u<S2SV_blank>%u<S2SV_blank>%u" , o_row_count , o_column_count , o_element_count ) == 3 ) { //<S2SV> * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; //<S2SV> * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; //<S2SV> * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; //<S2SV> l_row_idx_id = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count ) ) ; //<S2SV> if ( ( * o_row_idx == NULL ) || //<S2SV> ( * o_column_idx == NULL ) || //<S2SV> ( * o_values == NULL ) || //<S2SV> ( l_row_idx_id == NULL ) ) { //<S2SV> fprintf ( stderr , "could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>sp<S2SV_blank>data!\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> memset ( * o_row_idx , 0 , sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; //<S2SV> memset ( * o_column_idx , 0 , sizeof ( unsigned int ) * ( * o_element_count ) ) ; //<S2SV> memset ( * o_values , 0 , sizeof ( double ) * ( * o_element_count ) ) ; //<S2SV> memset ( l_row_idx_id , 0 , sizeof ( unsigned int ) * ( * o_row_count ) ) ; //<S2SV> for ( l_i = 0 ; l_i < ( * o_row_count + 1 ) ; l_i ++ ) //<S2SV> ( * o_row_idx ) [ l_i ] = ( * o_element_count ) ; //<S2SV> ( * o_row_idx ) [ 0 ] = 0 ; //<S2SV> l_i = 0 ; //<S2SV> l_header_read = 1 ; //<S2SV> } else { //<S2SV> fprintf ( stderr , "could<S2SV_blank>not<S2SV_blank>csr<S2SV_blank>description!\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } else { //<S2SV> unsigned int l_row , l_column ; //<S2SV> REALTYPE l_value ; //<S2SV> if ( sscanf ( l_line , "%u<S2SV_blank>%u<S2SV_blank>%lf" , & l_row , & l_column , & l_value ) != 3 ) { //<S2SV> fprintf ( stderr , "could<S2SV_blank>not<S2SV_blank>read<S2SV_blank>element!\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> l_row -- ; //<S2SV> l_column -- ; //<S2SV> ( * o_column_idx ) [ l_i ] = l_column ; //<S2SV> ( * o_values ) [ l_i ] = l_value ; //<S2SV> l_i ++ ; //<S2SV> l_row_idx_id [ l_row ] = 1 ; //<S2SV> ( * o_row_idx ) [ l_row + 1 ] = l_i ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> fclose ( l_csr_file_handle ) ; //<S2SV> if ( l_i != ( * o_element_count ) ) { //<S2SV> fprintf ( stderr , "we<S2SV_blank>were<S2SV_blank>not<S2SV_blank>able<S2SV_blank>to<S2SV_blank>read<S2SV_blank>all<S2SV_blank>elements!\\n" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> for ( l_i = 0 ; l_i < ( * o_row_count ) ; l_i ++ ) { //<S2SV> if ( l_row_idx_id [ l_i ] == 0 ) { //<S2SV> ( * o_row_idx ) [ l_i + 1 ] = ( * o_row_idx ) [ l_i ] ; //<S2SV> } //<S2SV> } //<S2SV> if ( l_row_idx_id != NULL ) { //<S2SV> free ( l_row_idx_id ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 