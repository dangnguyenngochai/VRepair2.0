static void _out_result ( conn_t out , nad_t nad ) { //<S2SV> int attr ; //<S2SV> jid_t from , to ; //<S2SV> char * rkey ; //<S2SV> int rkeylen ; //<S2SV> attr = nad_find_attr ( nad , 0 , - 1 , "from" , NULL ) ; //<S2SV> if ( attr < 0 || ( from = jid_new ( NAD_AVAL ( nad , attr ) , NAD_AVAL_L ( nad , attr ) ) ) == NULL ) { //<S2SV> log_debug ( ZONE , "missing<S2SV_blank>or<S2SV_blank>invalid<S2SV_blank>from<S2SV_blank>on<S2SV_blank>db<S2SV_blank>result<S2SV_blank>packet" ) ; //<S2SV> nad_free ( nad ) ; //<S2SV> return ; //<S2SV> } //<S2SV> attr = nad_find_attr ( nad , 0 , - 1 , "to" , NULL ) ; //<S2SV> if ( attr < 0 || ( to = jid_new ( NAD_AVAL ( nad , attr ) , NAD_AVAL_L ( nad , attr ) ) ) == NULL ) { //<S2SV> log_debug ( ZONE , "missing<S2SV_blank>or<S2SV_blank>invalid<S2SV_blank>to<S2SV_blank>on<S2SV_blank>db<S2SV_blank>result<S2SV_blank>packet" ) ; //<S2SV> jid_free ( from ) ; //<S2SV> nad_free ( nad ) ; //<S2SV> return ; //<S2SV> } //<S2SV> rkey = s2s_route_key ( NULL , to -> domain , from -> domain ) ; //<S2SV> rkeylen = strlen ( rkey ) ; //<S2SV> if ( nad_find_attr ( nad , 0 , - 1 , "type" , "valid" ) >= 0 && xhash_get ( out -> states , rkey ) == ( void * ) conn_INPROGRESS ) { //<S2SV> log_write ( out -> s2s -> log , LOG_NOTICE , "[%d]<S2SV_blank>[%s,<S2SV_blank>port=%d]<S2SV_blank>outgoing<S2SV_blank>route<S2SV_blank>\'%s\'<S2SV_blank>is<S2SV_blank>now<S2SV_blank>valid%s%s" , out -> fd -> fd , out -> ip , out -> port , rkey , ( out -> s -> flags & SX_SSL_WRAPPER ) ? ",<S2SV_blank>TLS<S2SV_blank>negotiated" : "" , out -> s -> compressed ? ",<S2SV_blank>ZLIB<S2SV_blank>compression<S2SV_blank>enabled" : "" ) ; //<S2SV> xhash_put ( out -> states , pstrdup ( xhash_pool ( out -> states ) , rkey ) , ( void * ) conn_VALID ) ; //<S2SV> log_debug ( ZONE , "%s<S2SV_blank>valid,<S2SV_blank>flushing<S2SV_blank>queue" , rkey ) ; //<S2SV> out_flush_route_queue ( out -> s2s , rkey , rkeylen ) ; //<S2SV> free ( rkey ) ; //<S2SV> jid_free ( from ) ; //<S2SV> jid_free ( to ) ; //<S2SV> nad_free ( nad ) ; //<S2SV> return ; //<S2SV> } //<S2SV> log_write ( out -> s2s -> log , LOG_NOTICE , "[%d]<S2SV_blank>[%s,<S2SV_blank>port=%d]<S2SV_blank>outgoing<S2SV_blank>route<S2SV_blank>\'%s\'<S2SV_blank>is<S2SV_blank>now<S2SV_blank>invalid" , out -> fd -> fd , out -> ip , out -> port , rkey ) ; //<S2SV> log_write ( out -> s2s -> log , LOG_NOTICE , "[%d]<S2SV_blank>[%s,<S2SV_blank>port=%d]<S2SV_blank>closing<S2SV_blank>connection" , out -> fd -> fd , out -> ip , out -> port ) ; //<S2SV> sx_error ( out -> s , stream_err_INVALID_ID , "dialback<S2SV_blank>negotiation<S2SV_blank>failed" ) ; //<S2SV> sx_close ( out -> s ) ; //<S2SV> out_bounce_route_queue ( out -> s2s , rkey , rkeylen , stanza_err_SERVICE_UNAVAILABLE ) ; //<S2SV> free ( rkey ) ; //<S2SV> jid_free ( from ) ; //<S2SV> jid_free ( to ) ; //<S2SV> nad_free ( nad ) ; //<S2SV> } //<S2SV> 