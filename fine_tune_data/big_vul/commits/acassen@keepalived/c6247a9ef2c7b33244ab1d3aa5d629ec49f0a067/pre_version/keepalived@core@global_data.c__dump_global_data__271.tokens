void //<S2SV> dump_global_data ( FILE * fp , data_t * data ) //<S2SV> { //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> char buf [ 64 ] ; //<S2SV> # endif //<S2SV> if ( ! data ) //<S2SV> return ; //<S2SV> conf_write ( fp , "------<<S2SV_blank>Global<S2SV_blank>definitions<S2SV_blank>>------" ) ; //<S2SV> # if HAVE_DECL_CLONE_NEWNET //<S2SV> conf_write ( fp , "<S2SV_blank>Network<S2SV_blank>namespace<S2SV_blank>=<S2SV_blank>%s" , data -> network_namespace ? data -> network_namespace : "(default)" ) ; //<S2SV> # endif //<S2SV> if ( data -> instance_name ) //<S2SV> conf_write ( fp , "<S2SV_blank>Instance<S2SV_blank>name<S2SV_blank>=<S2SV_blank>%s" , data -> instance_name ) ; //<S2SV> if ( data -> router_id ) //<S2SV> conf_write ( fp , "<S2SV_blank>Router<S2SV_blank>ID<S2SV_blank>=<S2SV_blank>%s" , data -> router_id ) ; //<S2SV> if ( data -> smtp_server . ss_family ) { //<S2SV> conf_write ( fp , "<S2SV_blank>Smtp<S2SV_blank>server<S2SV_blank>=<S2SV_blank>%s" , inet_sockaddrtos ( & data -> smtp_server ) ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Smtp<S2SV_blank>server<S2SV_blank>port<S2SV_blank>=<S2SV_blank>%u" , ntohs ( inet_sockaddrport ( & data -> smtp_server ) ) ) ; //<S2SV> } //<S2SV> if ( data -> smtp_helo_name ) //<S2SV> conf_write ( fp , "<S2SV_blank>Smtp<S2SV_blank>HELO<S2SV_blank>name<S2SV_blank>=<S2SV_blank>%s" , data -> smtp_helo_name ) ; //<S2SV> if ( data -> smtp_connection_to ) //<S2SV> conf_write ( fp , "<S2SV_blank>Smtp<S2SV_blank>server<S2SV_blank>connection<S2SV_blank>timeout<S2SV_blank>=<S2SV_blank>%lu" //<S2SV> , data -> smtp_connection_to / TIMER_HZ ) ; //<S2SV> if ( data -> email_from ) { //<S2SV> conf_write ( fp , "<S2SV_blank>Email<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>=<S2SV_blank>%s" //<S2SV> , data -> email_from ) ; //<S2SV> dump_list ( fp , data -> email ) ; //<S2SV> } //<S2SV> conf_write ( fp , "<S2SV_blank>Default<S2SV_blank>smtp_alert<S2SV_blank>=<S2SV_blank>%s" , //<S2SV> data -> smtp_alert == - 1 ? "unset" : data -> smtp_alert ? "on" : "off" ) ; //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> conf_write ( fp , "<S2SV_blank>Default<S2SV_blank>smtp_alert_vrrp<S2SV_blank>=<S2SV_blank>%s" , //<S2SV> data -> smtp_alert_vrrp == - 1 ? "unset" : data -> smtp_alert_vrrp ? "on" : "off" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_LVS_ //<S2SV> conf_write ( fp , "<S2SV_blank>Default<S2SV_blank>smtp_alert_checker<S2SV_blank>=<S2SV_blank>%s" , //<S2SV> data -> smtp_alert_checker == - 1 ? "unset" : data -> smtp_alert_checker ? "on" : "off" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> conf_write ( fp , "<S2SV_blank>Dynamic<S2SV_blank>interfaces<S2SV_blank>=<S2SV_blank>%s" , data -> dynamic_interfaces ? "true" : "false" ) ; //<S2SV> if ( data -> dynamic_interfaces ) //<S2SV> conf_write ( fp , "<S2SV_blank>Allow<S2SV_blank>interface<S2SV_blank>changes<S2SV_blank>=<S2SV_blank>%s" , data -> allow_if_changes ? "true" : "false" ) ; //<S2SV> if ( data -> no_email_faults ) //<S2SV> conf_write ( fp , "<S2SV_blank>Send<S2SV_blank>emails<S2SV_blank>for<S2SV_blank>fault<S2SV_blank>transitions<S2SV_blank>=<S2SV_blank>off" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_LVS_ //<S2SV> if ( data -> lvs_tcp_timeout ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>TCP<S2SV_blank>timeout<S2SV_blank>=<S2SV_blank>%d" , data -> lvs_tcp_timeout ) ; //<S2SV> if ( data -> lvs_tcpfin_timeout ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>TCP<S2SV_blank>FIN<S2SV_blank>timeout<S2SV_blank>=<S2SV_blank>%d" , data -> lvs_tcpfin_timeout ) ; //<S2SV> if ( data -> lvs_udp_timeout ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>TCP<S2SV_blank>timeout<S2SV_blank>=<S2SV_blank>%d" , data -> lvs_udp_timeout ) ; //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> # ifndef _DEBUG_ //<S2SV> if ( prog_type == PROG_TYPE_VRRP ) //<S2SV> # endif //<S2SV> conf_write ( fp , "<S2SV_blank>Default<S2SV_blank>interface<S2SV_blank>=<S2SV_blank>%s" , data -> default_ifp ? data -> default_ifp -> ifname : DFLT_INT ) ; //<S2SV> if ( data -> lvs_syncd . vrrp ) { //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>syncd<S2SV_blank>vrrp<S2SV_blank>instance<S2SV_blank>=<S2SV_blank>%s" //<S2SV> , data -> lvs_syncd . vrrp -> iname ) ; //<S2SV> if ( data -> lvs_syncd . ifname ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>syncd<S2SV_blank>interface<S2SV_blank>=<S2SV_blank>%s" //<S2SV> , data -> lvs_syncd . ifname ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>syncd<S2SV_blank>syncid<S2SV_blank>=<S2SV_blank>%u" //<S2SV> , data -> lvs_syncd . syncid ) ; //<S2SV> # ifdef _HAVE_IPVS_SYNCD_ATTRIBUTES_ //<S2SV> if ( data -> lvs_syncd . sync_maxlen ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>syncd<S2SV_blank>maxlen<S2SV_blank>=<S2SV_blank>%u" , data -> lvs_syncd . sync_maxlen ) ; //<S2SV> if ( data -> lvs_syncd . mcast_group . ss_family != AF_UNSPEC ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>mcast<S2SV_blank>group<S2SV_blank>%s" , inet_sockaddrtos ( & data -> lvs_syncd . mcast_group ) ) ; //<S2SV> if ( data -> lvs_syncd . mcast_port ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>syncd<S2SV_blank>mcast<S2SV_blank>port<S2SV_blank>=<S2SV_blank>%d" , data -> lvs_syncd . mcast_port ) ; //<S2SV> if ( data -> lvs_syncd . mcast_ttl ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>syncd<S2SV_blank>mcast<S2SV_blank>ttl<S2SV_blank>=<S2SV_blank>%u" , data -> lvs_syncd . mcast_ttl ) ; //<S2SV> # endif //<S2SV> } //<S2SV> # endif //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>flush<S2SV_blank>=<S2SV_blank>%s" , data -> lvs_flush ? "true" : "false" ) ; //<S2SV> # endif //<S2SV> if ( data -> notify_fifo . name ) { //<S2SV> conf_write ( fp , "<S2SV_blank>Global<S2SV_blank>notify<S2SV_blank>fifo<S2SV_blank>=<S2SV_blank>%s" , data -> notify_fifo . name ) ; //<S2SV> if ( data -> notify_fifo . script ) //<S2SV> conf_write ( fp , "<S2SV_blank>Global<S2SV_blank>notify<S2SV_blank>fifo<S2SV_blank>script<S2SV_blank>=<S2SV_blank>%s,<S2SV_blank>uid:gid<S2SV_blank>%d:%d" , //<S2SV> cmd_str ( data -> notify_fifo . script ) , //<S2SV> data -> notify_fifo . script -> uid , //<S2SV> data -> notify_fifo . script -> gid ) ; //<S2SV> } //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> if ( data -> vrrp_notify_fifo . name ) { //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>notify<S2SV_blank>fifo<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_notify_fifo . name ) ; //<S2SV> if ( data -> vrrp_notify_fifo . script ) //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>notify<S2SV_blank>fifo<S2SV_blank>script<S2SV_blank>=<S2SV_blank>%s,<S2SV_blank>uid:gid<S2SV_blank>%d:%d" , //<S2SV> cmd_str ( data -> vrrp_notify_fifo . script ) , //<S2SV> data -> vrrp_notify_fifo . script -> uid , //<S2SV> data -> vrrp_notify_fifo . script -> gid ) ; //<S2SV> } //<S2SV> # endif //<S2SV> # ifdef _WITH_LVS_ //<S2SV> if ( data -> lvs_notify_fifo . name ) { //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>notify<S2SV_blank>fifo<S2SV_blank>=<S2SV_blank>%s" , data -> lvs_notify_fifo . name ) ; //<S2SV> if ( data -> lvs_notify_fifo . script ) //<S2SV> conf_write ( fp , "<S2SV_blank>LVS<S2SV_blank>notify<S2SV_blank>fifo<S2SV_blank>script<S2SV_blank>=<S2SV_blank>%s,<S2SV_blank>uid:gid<S2SV_blank>%d:%d" , //<S2SV> cmd_str ( data -> lvs_notify_fifo . script ) , //<S2SV> data -> lvs_notify_fifo . script -> uid , //<S2SV> data -> lvs_notify_fifo . script -> gid ) ; //<S2SV> } //<S2SV> # endif //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> if ( data -> vrrp_mcast_group4 . sin_family ) { //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>IPv4<S2SV_blank>mcast<S2SV_blank>group<S2SV_blank>=<S2SV_blank>%s" //<S2SV> , inet_sockaddrtos ( ( struct sockaddr_storage * ) & data -> vrrp_mcast_group4 ) ) ; //<S2SV> } //<S2SV> if ( data -> vrrp_mcast_group6 . sin6_family ) { //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>IPv6<S2SV_blank>mcast<S2SV_blank>group<S2SV_blank>=<S2SV_blank>%s" //<S2SV> , inet_sockaddrtos ( ( struct sockaddr_storage * ) & data -> vrrp_mcast_group6 ) ) ; //<S2SV> } //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>ARP<S2SV_blank>delay<S2SV_blank>=<S2SV_blank>%u" , //<S2SV> data -> vrrp_garp_delay / TIMER_HZ ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>ARP<S2SV_blank>repeat<S2SV_blank>=<S2SV_blank>%u" , data -> vrrp_garp_rep ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>ARP<S2SV_blank>refresh<S2SV_blank>timer<S2SV_blank>=<S2SV_blank>%lu" , //<S2SV> data -> vrrp_garp_refresh . tv_sec ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>ARP<S2SV_blank>refresh<S2SV_blank>repeat<S2SV_blank>=<S2SV_blank>%d" , data -> vrrp_garp_refresh_rep ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>ARP<S2SV_blank>lower<S2SV_blank>priority<S2SV_blank>delay<S2SV_blank>=<S2SV_blank>%d" , data -> vrrp_garp_lower_prio_delay == PARAMETER_UNSET ? PARAMETER_UNSET : data -> vrrp_garp_lower_prio_delay / TIMER_HZ ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>ARP<S2SV_blank>lower<S2SV_blank>priority<S2SV_blank>repeat<S2SV_blank>=<S2SV_blank>%d" , data -> vrrp_garp_lower_prio_rep ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Send<S2SV_blank>advert<S2SV_blank>after<S2SV_blank>receive<S2SV_blank>lower<S2SV_blank>priority<S2SV_blank>advert<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_lower_prio_no_advert ? "false" : "true" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Send<S2SV_blank>advert<S2SV_blank>after<S2SV_blank>receive<S2SV_blank>higher<S2SV_blank>priority<S2SV_blank>advert<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_higher_prio_send_advert ? "true" : "false" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>ARP<S2SV_blank>interval<S2SV_blank>=<S2SV_blank>%d" , data -> vrrp_garp_interval ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Gratuitous<S2SV_blank>NA<S2SV_blank>interval<S2SV_blank>=<S2SV_blank>%d" , data -> vrrp_gna_interval ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>default<S2SV_blank>protocol<S2SV_blank>version<S2SV_blank>=<S2SV_blank>%d" , data -> vrrp_version ) ; //<S2SV> if ( data -> vrrp_iptables_inchain [ 0 ] ) //<S2SV> conf_write ( fp , "<S2SV_blank>Iptables<S2SV_blank>input<S2SV_blank>chain<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_iptables_inchain ) ; //<S2SV> if ( data -> vrrp_iptables_outchain [ 0 ] ) //<S2SV> conf_write ( fp , "<S2SV_blank>Iptables<S2SV_blank>output<S2SV_blank>chain<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_iptables_outchain ) ; //<S2SV> # ifdef _HAVE_LIBIPSET_ //<S2SV> conf_write ( fp , "<S2SV_blank>Using<S2SV_blank>ipsets<S2SV_blank>=<S2SV_blank>%s" , data -> using_ipsets ? "true" : "false" ) ; //<S2SV> if ( data -> vrrp_ipset_address [ 0 ] ) //<S2SV> conf_write ( fp , "<S2SV_blank>ipset<S2SV_blank>IPv4<S2SV_blank>address<S2SV_blank>set<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_ipset_address ) ; //<S2SV> if ( data -> vrrp_ipset_address6 [ 0 ] ) //<S2SV> conf_write ( fp , "<S2SV_blank>ipset<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>set<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_ipset_address6 ) ; //<S2SV> if ( data -> vrrp_ipset_address_iface6 [ 0 ] ) //<S2SV> conf_write ( fp , "<S2SV_blank>ipset<S2SV_blank>IPv6<S2SV_blank>address,iface<S2SV_blank>set<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_ipset_address_iface6 ) ; //<S2SV> # endif //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>check<S2SV_blank>unicast_src<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_check_unicast_src ? "true" : "false" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>skip<S2SV_blank>check<S2SV_blank>advert<S2SV_blank>addresses<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_skip_check_adv_addr ? "true" : "false" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>strict<S2SV_blank>mode<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_strict ? "true" : "false" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>process<S2SV_blank>priority<S2SV_blank>=<S2SV_blank>%d" , data -> vrrp_process_priority ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>don\'t<S2SV_blank>swap<S2SV_blank>=<S2SV_blank>%s" , data -> vrrp_no_swap ? "true" : "false" ) ; //<S2SV> # ifdef _HAVE_SCHED_RT_ //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>realtime<S2SV_blank>priority<S2SV_blank>=<S2SV_blank>%u" , data -> vrrp_realtime_priority ) ; //<S2SV> # if HAVE_DECL_RLIMIT_RTTIME //<S2SV> conf_write ( fp , "<S2SV_blank>VRRP<S2SV_blank>realtime<S2SV_blank>limit<S2SV_blank>=<S2SV_blank>%lu" , data -> vrrp_rlimit_rt ) ; //<S2SV> # endif //<S2SV> # endif //<S2SV> # endif //<S2SV> # ifdef _WITH_LVS_ //<S2SV> conf_write ( fp , "<S2SV_blank>Checker<S2SV_blank>process<S2SV_blank>priority<S2SV_blank>=<S2SV_blank>%d" , data -> checker_process_priority ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Checker<S2SV_blank>don\'t<S2SV_blank>swap<S2SV_blank>=<S2SV_blank>%s" , data -> checker_no_swap ? "true" : "false" ) ; //<S2SV> # ifdef _HAVE_SCHED_RT_ //<S2SV> conf_write ( fp , "<S2SV_blank>Checker<S2SV_blank>realtime<S2SV_blank>priority<S2SV_blank>=<S2SV_blank>%u" , data -> checker_realtime_priority ) ; //<S2SV> # if HAVE_DECL_RLIMIT_RTTIME //<S2SV> conf_write ( fp , "<S2SV_blank>Checker<S2SV_blank>realtime<S2SV_blank>limit<S2SV_blank>=<S2SV_blank>%lu" , data -> checker_rlimit_rt ) ; //<S2SV> # endif //<S2SV> # endif //<S2SV> # endif //<S2SV> # ifdef _WITH_BFD_ //<S2SV> conf_write ( fp , "<S2SV_blank>BFD<S2SV_blank>process<S2SV_blank>priority<S2SV_blank>=<S2SV_blank>%d" , data -> bfd_process_priority ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>BFD<S2SV_blank>don\'t<S2SV_blank>swap<S2SV_blank>=<S2SV_blank>%s" , data -> bfd_no_swap ? "true" : "false" ) ; //<S2SV> # ifdef _HAVE_SCHED_RT_ //<S2SV> conf_write ( fp , "<S2SV_blank>BFD<S2SV_blank>realtime<S2SV_blank>priority<S2SV_blank>=<S2SV_blank>%u" , data -> bfd_realtime_priority ) ; //<S2SV> # if HAVE_DECL_RLIMIT_RTTIME //<S2SV> conf_write ( fp , "<S2SV_blank>BFD<S2SV_blank>realtime<S2SV_blank>limit<S2SV_blank>=<S2SV_blank>%lu" , data -> bfd_rlimit_rt ) ; //<S2SV> # endif //<S2SV> # endif //<S2SV> # endif //<S2SV> # ifdef _WITH_SNMP_VRRP_ //<S2SV> conf_write ( fp , "<S2SV_blank>SNMP<S2SV_blank>vrrp<S2SV_blank>%s" , data -> enable_snmp_vrrp ? "enabled" : "disabled" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_SNMP_CHECKER_ //<S2SV> conf_write ( fp , "<S2SV_blank>SNMP<S2SV_blank>checker<S2SV_blank>%s" , data -> enable_snmp_checker ? "enabled" : "disabled" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_SNMP_RFCV2_ //<S2SV> conf_write ( fp , "<S2SV_blank>SNMP<S2SV_blank>RFCv2<S2SV_blank>%s" , data -> enable_snmp_rfcv2 ? "enabled" : "disabled" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_SNMP_RFCV3_ //<S2SV> conf_write ( fp , "<S2SV_blank>SNMP<S2SV_blank>RFCv3<S2SV_blank>%s" , data -> enable_snmp_rfcv3 ? "enabled" : "disabled" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_SNMP_ //<S2SV> conf_write ( fp , "<S2SV_blank>SNMP<S2SV_blank>traps<S2SV_blank>%s" , data -> enable_traps ? "enabled" : "disabled" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>SNMP<S2SV_blank>socket<S2SV_blank>=<S2SV_blank>%s" , data -> snmp_socket ? data -> snmp_socket : "default<S2SV_blank>(unix:/var/agentx/master)" ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_DBUS_ //<S2SV> conf_write ( fp , "<S2SV_blank>DBus<S2SV_blank>%s" , data -> enable_dbus ? "enabled" : "disabled" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>DBus<S2SV_blank>service<S2SV_blank>name<S2SV_blank>=<S2SV_blank>%s" , data -> dbus_service_name ? data -> dbus_service_name : "" ) ; //<S2SV> # endif //<S2SV> conf_write ( fp , "<S2SV_blank>Script<S2SV_blank>security<S2SV_blank>%s" , script_security ? "enabled" : "disabled" ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>Default<S2SV_blank>script<S2SV_blank>uid:gid<S2SV_blank>%d:%d" , default_script_uid , default_script_gid ) ; //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> conf_write ( fp , "<S2SV_blank>vrrp_netlink_cmd_rcv_bufs<S2SV_blank>=<S2SV_blank>%u" , global_data -> vrrp_netlink_cmd_rcv_bufs ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>vrrp_netlink_cmd_rcv_bufs_force<S2SV_blank>=<S2SV_blank>%u" , global_data -> vrrp_netlink_cmd_rcv_bufs_force ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>vrrp_netlink_monitor_rcv_bufs<S2SV_blank>=<S2SV_blank>%u" , global_data -> vrrp_netlink_monitor_rcv_bufs ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>vrrp_netlink_monitor_rcv_bufs_force<S2SV_blank>=<S2SV_blank>%u" , global_data -> vrrp_netlink_monitor_rcv_bufs_force ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_LVS_ //<S2SV> conf_write ( fp , "<S2SV_blank>lvs_netlink_cmd_rcv_bufs<S2SV_blank>=<S2SV_blank>%u" , global_data -> lvs_netlink_cmd_rcv_bufs ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>lvs_netlink_cmd_rcv_bufs_force<S2SV_blank>=<S2SV_blank>%u" , global_data -> lvs_netlink_cmd_rcv_bufs_force ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>lvs_netlink_monitor_rcv_bufs<S2SV_blank>=<S2SV_blank>%u" , global_data -> lvs_netlink_monitor_rcv_bufs ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>lvs_netlink_monitor_rcv_bufs_force<S2SV_blank>=<S2SV_blank>%u" , global_data -> lvs_netlink_monitor_rcv_bufs_force ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>rs_init_notifies<S2SV_blank>=<S2SV_blank>%u" , global_data -> rs_init_notifies ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>no_checker_emails<S2SV_blank>=<S2SV_blank>%u" , global_data -> no_checker_emails ) ; //<S2SV> # endif //<S2SV> # ifdef _WITH_VRRP_ //<S2SV> buf [ 0 ] = '\\0' ; //<S2SV> if ( global_data -> vrrp_rx_bufs_policy & RX_BUFS_POLICY_MTU ) //<S2SV> strcpy ( buf , "<S2SV_blank>rx_bufs_policy<S2SV_blank>=<S2SV_blank>MTU" ) ; //<S2SV> else if ( global_data -> vrrp_rx_bufs_policy & RX_BUFS_POLICY_ADVERT ) //<S2SV> strcpy ( buf , "<S2SV_blank>rx_bufs_policy<S2SV_blank>=<S2SV_blank>ADVERT" ) ; //<S2SV> else if ( global_data -> vrrp_rx_bufs_policy & RX_BUFS_SIZE ) //<S2SV> sprintf ( buf , "<S2SV_blank>rx_bufs_size<S2SV_blank>=<S2SV_blank>%lu" , global_data -> vrrp_rx_bufs_size ) ; //<S2SV> if ( buf [ 0 ] ) //<S2SV> conf_write ( fp , "%s" , buf ) ; //<S2SV> conf_write ( fp , "<S2SV_blank>rx_bufs_multiples<S2SV_blank>=<S2SV_blank>%u" , global_data -> vrrp_rx_bufs_multiples ) ; //<S2SV> # endif //<S2SV> } //<S2SV> 