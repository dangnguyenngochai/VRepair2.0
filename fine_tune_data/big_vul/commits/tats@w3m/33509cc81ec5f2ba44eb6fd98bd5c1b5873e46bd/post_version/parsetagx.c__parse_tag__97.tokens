struct parsed_tag * //<S2SV> parse_tag ( char * * s , int internal ) //<S2SV> { //<S2SV> struct parsed_tag * tag = NULL ; //<S2SV> int tag_id ; //<S2SV> char tagname [ MAX_TAG_LEN ] , attrname [ MAX_TAG_LEN ] ; //<S2SV> char * p , * q ; //<S2SV> int i , attr_id = 0 , nattr ; //<S2SV> tagname [ 0 ] = '\\0' ; //<S2SV> q = ( * s ) + 1 ; //<S2SV> p = tagname ; //<S2SV> if ( * q == '/' ) { //<S2SV> * ( p ++ ) = * ( q ++ ) ; //<S2SV> SKIP_BLANKS ( q ) ; //<S2SV> } //<S2SV> while ( * q && ! IS_SPACE ( * q ) && ! ( tagname [ 0 ] != '/' && * q == '/' ) && //<S2SV> * q != '>' && p - tagname < MAX_TAG_LEN - 1 ) { //<S2SV> * ( p ++ ) = TOLOWER ( * q ) ; //<S2SV> q ++ ; //<S2SV> } //<S2SV> * p = '\\0' ; //<S2SV> while ( * q && ! IS_SPACE ( * q ) && ! ( tagname [ 0 ] != '/' && * q == '/' ) && //<S2SV> * q != '>' ) //<S2SV> q ++ ; //<S2SV> tag_id = getHash_si ( & tagtable , tagname , HTML_UNKNOWN ) ; //<S2SV> if ( tag_id == HTML_UNKNOWN || //<S2SV> ( ! internal && TagMAP [ tag_id ] . flag & TFLG_INT ) ) //<S2SV> goto skip_parse_tagarg ; //<S2SV> tag = New ( struct parsed_tag ) ; //<S2SV> bzero ( tag , sizeof ( struct parsed_tag ) ) ; //<S2SV> tag -> tagid = tag_id ; //<S2SV> if ( ( nattr = TagMAP [ tag_id ] . max_attribute ) > 0 ) { //<S2SV> tag -> attrid = NewAtom_N ( unsigned char , nattr ) ; //<S2SV> tag -> value = New_N ( char * , nattr ) ; //<S2SV> tag -> map = NewAtom_N ( unsigned char , MAX_TAGATTR ) ; //<S2SV> memset ( tag -> map , MAX_TAGATTR , MAX_TAGATTR ) ; //<S2SV> memset ( tag -> attrid , ATTR_UNKNOWN , nattr ) ; //<S2SV> for ( i = 0 ; i < nattr ; i ++ ) //<S2SV> tag -> map [ TagMAP [ tag_id ] . accept_attribute [ i ] ] = i ; //<S2SV> } //<S2SV> SKIP_BLANKS ( q ) ; //<S2SV> while ( 1 ) { //<S2SV> Str value = NULL , value_tmp = NULL ; //<S2SV> if ( * q == '>' || * q == '\\0' ) //<S2SV> goto done_parse_tag ; //<S2SV> p = attrname ; //<S2SV> while ( * q && * q != '=' && ! IS_SPACE ( * q ) && //<S2SV> * q != '>' && p - attrname < MAX_TAG_LEN - 1 ) { //<S2SV> * ( p ++ ) = TOLOWER ( * q ) ; //<S2SV> q ++ ; //<S2SV> } //<S2SV> * p = '\\0' ; //<S2SV> while ( * q && * q != '=' && ! IS_SPACE ( * q ) && * q != '>' ) //<S2SV> q ++ ; //<S2SV> SKIP_BLANKS ( q ) ; //<S2SV> if ( * q == '=' ) { //<S2SV> value_tmp = Strnew ( ) ; //<S2SV> q ++ ; //<S2SV> SKIP_BLANKS ( q ) ; //<S2SV> if ( * q == \'"\' ) { //<S2SV> q ++ ; //<S2SV> while ( * q && * q != \'"\' ) { //<S2SV> Strcat_char ( value_tmp , * q ) ; //<S2SV> if ( ! tag -> need_reconstruct && is_html_quote ( * q ) ) //<S2SV> tag -> need_reconstruct = TRUE ; //<S2SV> q ++ ; //<S2SV> } //<S2SV> if ( * q == \'"\' ) //<S2SV> q ++ ; //<S2SV> } //<S2SV> else if ( * q == '\\'' ) { //<S2SV> q ++ ; //<S2SV> while ( * q && * q != '\\'' ) { //<S2SV> Strcat_char ( value_tmp , * q ) ; //<S2SV> if ( ! tag -> need_reconstruct && is_html_quote ( * q ) ) //<S2SV> tag -> need_reconstruct = TRUE ; //<S2SV> q ++ ; //<S2SV> } //<S2SV> if ( * q == '\\'' ) //<S2SV> q ++ ; //<S2SV> } //<S2SV> else if ( * q ) { //<S2SV> while ( * q && ! IS_SPACE ( * q ) && * q != '>' ) { //<S2SV> Strcat_char ( value_tmp , * q ) ; //<S2SV> if ( ! tag -> need_reconstruct && is_html_quote ( * q ) ) //<S2SV> tag -> need_reconstruct = TRUE ; //<S2SV> q ++ ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < nattr ; i ++ ) { //<S2SV> if ( ( tag ) -> attrid [ i ] == ATTR_UNKNOWN && //<S2SV> strcmp ( AttrMAP [ TagMAP [ tag_id ] . accept_attribute [ i ] ] . name , //<S2SV> attrname ) == 0 ) { //<S2SV> attr_id = TagMAP [ tag_id ] . accept_attribute [ i ] ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( value_tmp ) { //<S2SV> int j , hidden = FALSE ; //<S2SV> for ( j = 0 ; j < i ; j ++ ) { //<S2SV> if ( tag -> attrid [ j ] == ATTR_TYPE && //<S2SV> tag -> value [ j ] && //<S2SV> strcmp ( "hidden" , tag -> value [ j ] ) == 0 ) { //<S2SV> hidden = TRUE ; //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( tag_id == HTML_INPUT || tag_id == HTML_INPUT_ALT ) && //<S2SV> attr_id == ATTR_VALUE && hidden ) { //<S2SV> value = value_tmp ; //<S2SV> } else { //<S2SV> char * x ; //<S2SV> value = Strnew ( ) ; //<S2SV> for ( x = value_tmp -> ptr ; * x ; x ++ ) { //<S2SV> if ( * x != '\\n' ) //<S2SV> Strcat_char ( value , * x ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( i != nattr ) { //<S2SV> if ( ! internal && //<S2SV> ( ( AttrMAP [ attr_id ] . flag & AFLG_INT ) || //<S2SV> ( value && AttrMAP [ attr_id ] . vtype == VTYPE_METHOD && //<S2SV> ! strcasecmp ( value -> ptr , "internal" ) ) ) ) { //<S2SV> tag -> need_reconstruct = TRUE ; //<S2SV> continue ; //<S2SV> } //<S2SV> tag -> attrid [ i ] = attr_id ; //<S2SV> if ( value ) //<S2SV> tag -> value [ i ] = html_unquote ( value -> ptr ) ; //<S2SV> else //<S2SV> tag -> value [ i ] = NULL ; //<S2SV> } //<S2SV> else { //<S2SV> tag -> need_reconstruct = TRUE ; //<S2SV> } //<S2SV> } //<S2SV> skip_parse_tagarg : //<S2SV> while ( * q != '>' && * q ) //<S2SV> q ++ ; //<S2SV> done_parse_tag : //<S2SV> if ( * q == '>' ) //<S2SV> q ++ ; //<S2SV> * s = q ; //<S2SV> return tag ; //<S2SV> } //<S2SV> 