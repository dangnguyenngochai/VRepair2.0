static int //<S2SV> updateDevice ( const struct header * headers , time_t t ) //<S2SV> { //<S2SV> struct device * * pp = & devlist ; //<S2SV> struct device * p = * pp ; //<S2SV> while ( p ) //<S2SV> { //<S2SV> if ( p -> headers [ HEADER_NT ] . l == headers [ HEADER_NT ] . l //<S2SV> && ( 0 == memcmp ( p -> headers [ HEADER_NT ] . p , headers [ HEADER_NT ] . p , headers [ HEADER_NT ] . l ) ) //<S2SV> && p -> headers [ HEADER_USN ] . l == headers [ HEADER_USN ] . l //<S2SV> && ( 0 == memcmp ( p -> headers [ HEADER_USN ] . p , headers [ HEADER_USN ] . p , headers [ HEADER_USN ] . l ) ) ) //<S2SV> { //<S2SV> syslog ( LOG_DEBUG , "device<S2SV_blank>updated<S2SV_blank>:<S2SV_blank>%.*s" , headers [ HEADER_USN ] . l , headers [ HEADER_USN ] . p ) ; //<S2SV> p -> t = t ; //<S2SV> if ( headers [ HEADER_LOCATION ] . l > p -> headers [ HEADER_LOCATION ] . l ) //<S2SV> { //<S2SV> struct device * tmp ; //<S2SV> tmp = realloc ( p , sizeof ( struct device ) //<S2SV> + headers [ 0 ] . l + headers [ 1 ] . l + headers [ 2 ] . l ) ; //<S2SV> if ( ! tmp ) //<S2SV> { //<S2SV> syslog ( LOG_ERR , "updateDevice()<S2SV_blank>:<S2SV_blank>memory<S2SV_blank>allocation<S2SV_blank>error" ) ; //<S2SV> * pp = p -> next ; //<S2SV> free ( p ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> p = tmp ; //<S2SV> * pp = p ; //<S2SV> } //<S2SV> memcpy ( p -> data + p -> headers [ 0 ] . l + p -> headers [ 1 ] . l , //<S2SV> headers [ 2 ] . p , headers [ 2 ] . l ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> pp = & p -> next ; //<S2SV> p = * pp ; //<S2SV> } //<S2SV> syslog ( LOG_INFO , "new<S2SV_blank>device<S2SV_blank>discovered<S2SV_blank>:<S2SV_blank>%.*s" , //<S2SV> headers [ HEADER_USN ] . l , headers [ HEADER_USN ] . p ) ; //<S2SV> { //<S2SV> char * pc ; //<S2SV> int i ; //<S2SV> p = malloc ( sizeof ( struct device ) //<S2SV> + headers [ 0 ] . l + headers [ 1 ] . l + headers [ 2 ] . l ) ; //<S2SV> if ( ! p ) { //<S2SV> syslog ( LOG_ERR , "updateDevice():<S2SV_blank>cannot<S2SV_blank>allocate<S2SV_blank>memory" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> p -> next = devlist ; //<S2SV> p -> t = t ; //<S2SV> pc = p -> data ; //<S2SV> for ( i = 0 ; i < 3 ; i ++ ) //<S2SV> { //<S2SV> p -> headers [ i ] . p = pc ; //<S2SV> p -> headers [ i ] . l = headers [ i ] . l ; //<S2SV> memcpy ( pc , headers [ i ] . p , headers [ i ] . l ) ; //<S2SV> pc += headers [ i ] . l ; //<S2SV> } //<S2SV> devlist = p ; //<S2SV> sendNotifications ( NOTIF_NEW , p , NULL ) ; //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 