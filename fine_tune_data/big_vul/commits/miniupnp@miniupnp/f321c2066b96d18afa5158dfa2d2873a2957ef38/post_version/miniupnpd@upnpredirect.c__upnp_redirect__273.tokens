int //<S2SV> upnp_redirect ( const char * rhost , unsigned short eport , //<S2SV> const char * iaddr , unsigned short iport , //<S2SV> const char * protocol , const char * desc , //<S2SV> unsigned int leaseduration ) //<S2SV> { //<S2SV> int proto , r ; //<S2SV> char iaddr_old [ 32 ] ; //<S2SV> char rhost_old [ 32 ] ; //<S2SV> unsigned short iport_old ; //<S2SV> struct in_addr address ; //<S2SV> unsigned int timestamp ; //<S2SV> proto = proto_atoi ( protocol ) ; //<S2SV> if ( inet_aton ( iaddr , & address ) <= 0 ) { //<S2SV> syslog ( LOG_ERR , "inet_aton(%s)<S2SV_blank>FAILED" , iaddr ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! check_upnp_rule_against_permissions ( upnppermlist , num_upnpperm , //<S2SV> eport , address , iport ) ) { //<S2SV> syslog ( LOG_INFO , "redirection<S2SV_blank>permission<S2SV_blank>check<S2SV_blank>failed<S2SV_blank>for<S2SV_blank>" //<S2SV> "%hu->%s:%hu<S2SV_blank>%s" , eport , iaddr , iport , protocol ) ; //<S2SV> return - 3 ; //<S2SV> } //<S2SV> if ( desc == NULL ) //<S2SV> desc = "" ; //<S2SV> rhost_old [ 0 ] = '\\0' ; //<S2SV> r = get_redirect_rule ( ext_if_name , eport , proto , //<S2SV> iaddr_old , sizeof ( iaddr_old ) , & iport_old , 0 , 0 , //<S2SV> rhost_old , sizeof ( rhost_old ) , //<S2SV> & timestamp , 0 , 0 ) ; //<S2SV> if ( r == 0 ) { //<S2SV> if ( strcmp ( iaddr , iaddr_old ) == 0 && //<S2SV> ( ( rhost == NULL && rhost_old [ 0 ] == '\\0' ) || //<S2SV> ( rhost && ( strcmp ( rhost , "*" ) == 0 ) && rhost_old [ 0 ] == '\\0' ) || //<S2SV> ( rhost && ( strcmp ( rhost , rhost_old ) == 0 ) ) ) ) { //<S2SV> syslog ( LOG_INFO , "updating<S2SV_blank>existing<S2SV_blank>port<S2SV_blank>mapping<S2SV_blank>%hu<S2SV_blank>%s<S2SV_blank>(rhost<S2SV_blank>\'%s\')<S2SV_blank>=><S2SV_blank>%s:%hu" , //<S2SV> eport , protocol , rhost_old , iaddr_old , iport_old ) ; //<S2SV> timestamp = ( leaseduration > 0 ) ? upnp_time ( ) + leaseduration : 0 ; //<S2SV> if ( iport != iport_old ) { //<S2SV> r = update_portmapping ( ext_if_name , eport , proto , iport , desc , timestamp ) ; //<S2SV> } else { //<S2SV> r = update_portmapping_desc_timestamp ( ext_if_name , eport , proto , desc , timestamp ) ; //<S2SV> } //<S2SV> # ifdef ENABLE_LEASEFILE //<S2SV> if ( r == 0 ) { //<S2SV> lease_file_remove ( eport , proto ) ; //<S2SV> lease_file_add ( eport , iaddr , iport , proto , desc , timestamp ) ; //<S2SV> } //<S2SV> # endif //<S2SV> return r ; //<S2SV> } else { //<S2SV> syslog ( LOG_INFO , "port<S2SV_blank>%hu<S2SV_blank>%s<S2SV_blank>(rhost<S2SV_blank>\'%s\')<S2SV_blank>already<S2SV_blank>redirected<S2SV_blank>to<S2SV_blank>%s:%hu" , //<S2SV> eport , protocol , rhost_old , iaddr_old , iport_old ) ; //<S2SV> return - 2 ; //<S2SV> } //<S2SV> # ifdef CHECK_PORTINUSE //<S2SV> } else if ( port_in_use ( ext_if_name , eport , proto , iaddr , iport ) > 0 ) { //<S2SV> syslog ( LOG_INFO , "port<S2SV_blank>%hu<S2SV_blank>protocol<S2SV_blank>%s<S2SV_blank>already<S2SV_blank>in<S2SV_blank>use" , //<S2SV> eport , protocol ) ; //<S2SV> return - 4 ; //<S2SV> # endif //<S2SV> } else { //<S2SV> timestamp = ( leaseduration > 0 ) ? upnp_time ( ) + leaseduration : 0 ; //<S2SV> syslog ( LOG_INFO , "redirecting<S2SV_blank>port<S2SV_blank>%hu<S2SV_blank>to<S2SV_blank>%s:%hu<S2SV_blank>protocol<S2SV_blank>%s<S2SV_blank>for:<S2SV_blank>%s" , //<S2SV> eport , iaddr , iport , protocol , desc ) ; //<S2SV> return upnp_redirect_internal ( rhost , eport , iaddr , iport , proto , //<S2SV> desc , timestamp ) ; //<S2SV> } //<S2SV> } //<S2SV> 