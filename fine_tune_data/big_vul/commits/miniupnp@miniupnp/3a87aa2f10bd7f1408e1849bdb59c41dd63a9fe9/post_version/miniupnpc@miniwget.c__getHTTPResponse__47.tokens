void * //<S2SV> getHTTPResponse ( int s , int * size ) //<S2SV> { //<S2SV> char buf [ 2048 ] ; //<S2SV> int n ; //<S2SV> int endofheaders = 0 ; //<S2SV> int chunked = 0 ; //<S2SV> int content_length = - 1 ; //<S2SV> unsigned int chunksize = 0 ; //<S2SV> unsigned int bytestocopy = 0 ; //<S2SV> char * header_buf ; //<S2SV> unsigned int header_buf_len = 2048 ; //<S2SV> unsigned int header_buf_used = 0 ; //<S2SV> char * content_buf ; //<S2SV> unsigned int content_buf_len = 2048 ; //<S2SV> unsigned int content_buf_used = 0 ; //<S2SV> char chunksize_buf [ 32 ] ; //<S2SV> unsigned int chunksize_buf_index ; //<S2SV> header_buf = malloc ( header_buf_len ) ; //<S2SV> content_buf = malloc ( content_buf_len ) ; //<S2SV> chunksize_buf [ 0 ] = '\\0' ; //<S2SV> chunksize_buf_index = 0 ; //<S2SV> while ( ( n = receivedata ( s , buf , 2048 , 5000 , NULL ) ) > 0 ) //<S2SV> { //<S2SV> if ( endofheaders == 0 ) //<S2SV> { //<S2SV> int i ; //<S2SV> int linestart = 0 ; //<S2SV> int colon = 0 ; //<S2SV> int valuestart = 0 ; //<S2SV> if ( header_buf_used + n > header_buf_len ) { //<S2SV> header_buf = realloc ( header_buf , header_buf_used + n ) ; //<S2SV> header_buf_len = header_buf_used + n ; //<S2SV> } //<S2SV> memcpy ( header_buf + header_buf_used , buf , n ) ; //<S2SV> header_buf_used += n ; //<S2SV> i = 0 ; //<S2SV> while ( i < ( ( int ) header_buf_used - 1 ) && ( endofheaders == 0 ) ) { //<S2SV> if ( header_buf [ i ] == '\\r' ) { //<S2SV> i ++ ; //<S2SV> if ( header_buf [ i ] == '\\n' ) { //<S2SV> i ++ ; //<S2SV> if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { //<S2SV> i ++ ; //<S2SV> if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { //<S2SV> endofheaders = i + 1 ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } else if ( header_buf [ i ] == '\\n' ) { //<S2SV> i ++ ; //<S2SV> if ( header_buf [ i ] == '\\n' ) { //<S2SV> endofheaders = i + 1 ; //<S2SV> } //<S2SV> } //<S2SV> i ++ ; //<S2SV> } //<S2SV> if ( endofheaders == 0 ) //<S2SV> continue ; //<S2SV> for ( i = 0 ; i < endofheaders - 1 ; i ++ ) { //<S2SV> if ( colon <= linestart && header_buf [ i ] == ':' ) //<S2SV> { //<S2SV> colon = i ; //<S2SV> while ( i < ( endofheaders - 1 ) //<S2SV> && ( header_buf [ i + 1 ] == '<S2SV_blank>' || header_buf [ i + 1 ] == '\\t' ) ) //<S2SV> i ++ ; //<S2SV> valuestart = i + 1 ; //<S2SV> } //<S2SV> else if ( header_buf [ i ] == '\\r' || header_buf [ i ] == '\\n' ) //<S2SV> { //<S2SV> if ( colon > linestart && valuestart > colon ) //<S2SV> { //<S2SV> # ifdef DEBUG //<S2SV> printf ( "header=\'%.*s\',<S2SV_blank>value=\'%.*s\'\\n" , //<S2SV> colon - linestart , header_buf + linestart , //<S2SV> i - valuestart , header_buf + valuestart ) ; //<S2SV> # endif //<S2SV> if ( 0 == strncasecmp ( header_buf + linestart , "content-length" , colon - linestart ) ) //<S2SV> { //<S2SV> content_length = atoi ( header_buf + valuestart ) ; //<S2SV> # ifdef DEBUG //<S2SV> printf ( "Content-Length:<S2SV_blank>%d\\n" , content_length ) ; //<S2SV> # endif //<S2SV> } //<S2SV> else if ( 0 == strncasecmp ( header_buf + linestart , "transfer-encoding" , colon - linestart ) //<S2SV> && 0 == strncasecmp ( header_buf + valuestart , "chunked" , 7 ) ) //<S2SV> { //<S2SV> # ifdef DEBUG //<S2SV> printf ( "chunked<S2SV_blank>transfer-encoding!\\n" ) ; //<S2SV> # endif //<S2SV> chunked = 1 ; //<S2SV> } //<S2SV> } //<S2SV> while ( ( i < ( int ) header_buf_used ) && ( header_buf [ i ] == '\\r' || header_buf [ i ] == '\\n' ) ) //<S2SV> i ++ ; //<S2SV> linestart = i ; //<S2SV> colon = linestart ; //<S2SV> valuestart = 0 ; //<S2SV> } //<S2SV> } //<S2SV> n = header_buf_used - endofheaders ; //<S2SV> memcpy ( buf , header_buf + endofheaders , n ) ; //<S2SV> } //<S2SV> if ( endofheaders ) //<S2SV> { //<S2SV> if ( chunked ) //<S2SV> { //<S2SV> int i = 0 ; //<S2SV> while ( i < n ) //<S2SV> { //<S2SV> if ( chunksize == 0 ) //<S2SV> { //<S2SV> if ( chunksize_buf_index == 0 ) { //<S2SV> if ( i < n && buf [ i ] == '\\r' ) i ++ ; //<S2SV> if ( i < n && buf [ i ] == '\\n' ) i ++ ; //<S2SV> } //<S2SV> while ( i < n && isxdigit ( buf [ i ] ) //<S2SV> && chunksize_buf_index < ( sizeof ( chunksize_buf ) - 1 ) ) //<S2SV> { //<S2SV> chunksize_buf [ chunksize_buf_index ++ ] = buf [ i ] ; //<S2SV> chunksize_buf [ chunksize_buf_index ] = '\\0' ; //<S2SV> i ++ ; //<S2SV> } //<S2SV> while ( i < n && buf [ i ] != '\\r' && buf [ i ] != '\\n' ) //<S2SV> i ++ ; //<S2SV> if ( i < n && buf [ i ] == '\\r' ) i ++ ; //<S2SV> if ( i < n && buf [ i ] == '\\n' ) { //<S2SV> unsigned int j ; //<S2SV> for ( j = 0 ; j < chunksize_buf_index ; j ++ ) { //<S2SV> if ( chunksize_buf [ j ] >= '0' //<S2SV> && chunksize_buf [ j ] <= '9' ) //<S2SV> chunksize = ( chunksize << 4 ) + ( chunksize_buf [ j ] - '0' ) ; //<S2SV> else //<S2SV> chunksize = ( chunksize << 4 ) + ( ( chunksize_buf [ j ] | 32 ) - 'a' + 10 ) ; //<S2SV> } //<S2SV> chunksize_buf [ 0 ] = '\\0' ; //<S2SV> chunksize_buf_index = 0 ; //<S2SV> i ++ ; //<S2SV> } else { //<S2SV> continue ; //<S2SV> } //<S2SV> # ifdef DEBUG //<S2SV> printf ( "chunksize<S2SV_blank>=<S2SV_blank>%u<S2SV_blank>(%x)\\n" , chunksize , chunksize ) ; //<S2SV> # endif //<S2SV> if ( chunksize == 0 ) //<S2SV> { //<S2SV> # ifdef DEBUG //<S2SV> printf ( "end<S2SV_blank>of<S2SV_blank>HTTP<S2SV_blank>content<S2SV_blank>-<S2SV_blank>%d<S2SV_blank>%d\\n" , i , n ) ; //<S2SV> # endif //<S2SV> goto end_of_stream ; //<S2SV> } //<S2SV> } //<S2SV> bytestocopy = ( ( int ) chunksize < ( n - i ) ) ? chunksize : ( unsigned int ) ( n - i ) ; //<S2SV> if ( ( content_buf_used + bytestocopy ) > content_buf_len ) //<S2SV> { //<S2SV> if ( content_length >= ( int ) ( content_buf_used + bytestocopy ) ) { //<S2SV> content_buf_len = content_length ; //<S2SV> } else { //<S2SV> content_buf_len = content_buf_used + bytestocopy ; //<S2SV> } //<S2SV> content_buf = ( char * ) realloc ( ( void * ) content_buf , //<S2SV> content_buf_len ) ; //<S2SV> } //<S2SV> memcpy ( content_buf + content_buf_used , buf + i , bytestocopy ) ; //<S2SV> content_buf_used += bytestocopy ; //<S2SV> i += bytestocopy ; //<S2SV> chunksize -= bytestocopy ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( content_length > 0 //<S2SV> && ( int ) ( content_buf_used + n ) > content_length ) { //<S2SV> n = content_length - content_buf_used ; //<S2SV> } //<S2SV> if ( content_buf_used + n > content_buf_len ) //<S2SV> { //<S2SV> if ( content_length >= ( int ) ( content_buf_used + n ) ) { //<S2SV> content_buf_len = content_length ; //<S2SV> } else { //<S2SV> content_buf_len = content_buf_used + n ; //<S2SV> } //<S2SV> content_buf = ( char * ) realloc ( ( void * ) content_buf , //<S2SV> content_buf_len ) ; //<S2SV> } //<S2SV> memcpy ( content_buf + content_buf_used , buf , n ) ; //<S2SV> content_buf_used += n ; //<S2SV> } //<S2SV> } //<S2SV> if ( content_length > 0 && ( int ) content_buf_used >= content_length ) //<S2SV> { //<S2SV> # ifdef DEBUG //<S2SV> printf ( "End<S2SV_blank>of<S2SV_blank>HTTP<S2SV_blank>content\\n" ) ; //<S2SV> # endif //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> end_of_stream : //<S2SV> free ( header_buf ) ; header_buf = NULL ; //<S2SV> * size = content_buf_used ; //<S2SV> if ( content_buf_used == 0 ) //<S2SV> { //<S2SV> free ( content_buf ) ; //<S2SV> content_buf = NULL ; //<S2SV> } //<S2SV> return content_buf ; //<S2SV> } //<S2SV> 