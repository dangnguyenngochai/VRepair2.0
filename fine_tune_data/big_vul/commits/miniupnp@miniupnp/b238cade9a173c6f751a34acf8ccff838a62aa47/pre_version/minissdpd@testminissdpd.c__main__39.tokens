int //<S2SV> main ( int argc , char * * argv ) //<S2SV> { //<S2SV> const char command0 [ ] = { 0x00 , 0x00 } ; //<S2SV> char command1 [ ] = "\\x01\\x00urn:schemas-upnp-org:device:InternetGatewayDevice" ; //<S2SV> char command2 [ ] = "\\x02\\x00uuid:fc4ec57e-b051-11db-88f8-0060085db3f6::upnp:rootdevice" ; //<S2SV> const char command3 [ ] = { 0x03 , 0x00 } ; //<S2SV> char command3compat [ ] = "\\x03\\x00ssdp:all" ; //<S2SV> char command4 [ ] = "\\x04\\x00test:test:test" ; //<S2SV> const char bad_command [ ] = { 0xff , 0xff } ; //<S2SV> const char overflow [ ] = { 0x01 , 0xff , 0xff , 0xff , 0xff , 0xff , 0xff , 0xff } ; //<S2SV> const char command5 [ ] = { 0x05 , 0x00 } ; //<S2SV> int s ; //<S2SV> int i ; //<S2SV> void * tmp ; //<S2SV> unsigned char * resp = NULL ; //<S2SV> size_t respsize = 0 ; //<S2SV> unsigned char buf [ 4096 ] ; //<S2SV> ssize_t n ; //<S2SV> int total = 0 ; //<S2SV> const char * sockpath = "/var/run/minissdpd.sock" ; //<S2SV> for ( i = 0 ; i < argc - 1 ; i ++ ) { //<S2SV> if ( 0 == strcmp ( argv [ i ] , "-s" ) ) //<S2SV> sockpath = argv [ ++ i ] ; //<S2SV> } //<S2SV> command1 [ 1 ] = sizeof ( command1 ) - 3 ; //<S2SV> command2 [ 1 ] = sizeof ( command2 ) - 3 ; //<S2SV> command3compat [ 1 ] = sizeof ( command3compat ) - 3 ; //<S2SV> command4 [ 1 ] = sizeof ( command4 ) - 3 ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> n = SENDCOMMAND ( command0 , sizeof ( command0 ) ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> if ( n > 0 ) { //<S2SV> printversion ( buf , n ) ; //<S2SV> } else { //<S2SV> printf ( "Command<S2SV_blank>0<S2SV_blank>(get<S2SV_blank>version)<S2SV_blank>not<S2SV_blank>supported\\n" ) ; //<S2SV> close ( s ) ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> } //<S2SV> n = SENDCOMMAND ( command1 , sizeof ( command1 ) - 1 ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> printresponse ( buf , n ) ; //<S2SV> if ( n == 0 ) { //<S2SV> close ( s ) ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> } //<S2SV> n = SENDCOMMAND ( command2 , sizeof ( command2 ) - 1 ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> printresponse ( buf , n ) ; //<S2SV> if ( n == 0 ) { //<S2SV> close ( s ) ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> } //<S2SV> buf [ 0 ] = 0 ; //<S2SV> n = SENDCOMMAND ( command3 , sizeof ( command3 ) ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> if ( n == 0 ) { //<S2SV> printf ( "command3<S2SV_blank>failed,<S2SV_blank>testing<S2SV_blank>compatible<S2SV_blank>one\\n" ) ; //<S2SV> close ( s ) ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> n = SENDCOMMAND ( command3compat , sizeof ( command3compat ) - 1 ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> } //<S2SV> printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> printf ( "Number<S2SV_blank>of<S2SV_blank>devices<S2SV_blank>%d\\n" , ( int ) buf [ 0 ] ) ; //<S2SV> while ( n > 0 ) { //<S2SV> tmp = realloc ( resp , respsize + n ) ; //<S2SV> if ( tmp == NULL ) { //<S2SV> fprintf ( stderr , "memory<S2SV_blank>allocation<S2SV_blank>error\\n" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> resp = tmp ; //<S2SV> respsize += n ; //<S2SV> if ( n > 0 ) { //<S2SV> memcpy ( resp + total , buf , n ) ; //<S2SV> total += n ; //<S2SV> } //<S2SV> if ( n < ( ssize_t ) sizeof ( buf ) ) { //<S2SV> break ; //<S2SV> } //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> printf ( "response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> } //<S2SV> if ( resp != NULL ) { //<S2SV> printresponse ( resp , total ) ; //<S2SV> free ( resp ) ; //<S2SV> resp = NULL ; //<S2SV> } //<S2SV> if ( n == 0 ) { //<S2SV> close ( s ) ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> } //<S2SV> n = SENDCOMMAND ( command4 , sizeof ( command4 ) ) ; //<S2SV> n = SENDCOMMAND ( bad_command , sizeof ( bad_command ) ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> printresponse ( buf , n ) ; //<S2SV> if ( n == 0 ) { //<S2SV> close ( s ) ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> } //<S2SV> n = SENDCOMMAND ( overflow , sizeof ( overflow ) ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> printresponse ( buf , n ) ; //<S2SV> if ( n == 0 ) { //<S2SV> close ( s ) ; //<S2SV> s = connect_unix_socket ( sockpath ) ; //<S2SV> } //<S2SV> n = SENDCOMMAND ( command5 , sizeof ( command5 ) ) ; //<S2SV> n = read ( s , buf , sizeof ( buf ) ) ; //<S2SV> printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; //<S2SV> printresponse ( buf , n ) ; //<S2SV> close ( s ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 