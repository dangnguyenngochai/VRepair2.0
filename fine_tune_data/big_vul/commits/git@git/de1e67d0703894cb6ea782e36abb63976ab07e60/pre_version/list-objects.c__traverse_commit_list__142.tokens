void traverse_commit_list ( struct rev_info * revs , //<S2SV> show_commit_fn show_commit , //<S2SV> show_object_fn show_object , //<S2SV> void * data ) //<S2SV> { //<S2SV> int i ; //<S2SV> struct commit * commit ; //<S2SV> struct strbuf base ; //<S2SV> strbuf_init ( & base , PATH_MAX ) ; //<S2SV> while ( ( commit = get_revision ( revs ) ) != NULL ) { //<S2SV> if ( commit -> tree ) //<S2SV> add_pending_tree ( revs , commit -> tree ) ; //<S2SV> show_commit ( commit , data ) ; //<S2SV> } //<S2SV> for ( i = 0 ; i < revs -> pending . nr ; i ++ ) { //<S2SV> struct object_array_entry * pending = revs -> pending . objects + i ; //<S2SV> struct object * obj = pending -> item ; //<S2SV> const char * name = pending -> name ; //<S2SV> const char * path = pending -> path ; //<S2SV> if ( obj -> flags & ( UNINTERESTING | SEEN ) ) //<S2SV> continue ; //<S2SV> if ( obj -> type == OBJ_TAG ) { //<S2SV> obj -> flags |= SEEN ; //<S2SV> show_object ( obj , NULL , name , data ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! path ) //<S2SV> path = "" ; //<S2SV> if ( obj -> type == OBJ_TREE ) { //<S2SV> process_tree ( revs , ( struct tree * ) obj , show_object , //<S2SV> & base , path , data ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( obj -> type == OBJ_BLOB ) { //<S2SV> process_blob ( revs , ( struct blob * ) obj , show_object , //<S2SV> NULL , path , data ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> die ( "unknown<S2SV_blank>pending<S2SV_blank>object<S2SV_blank>%s<S2SV_blank>(%s)" , //<S2SV> oid_to_hex ( & obj -> oid ) , name ) ; //<S2SV> } //<S2SV> object_array_clear ( & revs -> pending ) ; //<S2SV> strbuf_release ( & base ) ; //<S2SV> } //<S2SV> 