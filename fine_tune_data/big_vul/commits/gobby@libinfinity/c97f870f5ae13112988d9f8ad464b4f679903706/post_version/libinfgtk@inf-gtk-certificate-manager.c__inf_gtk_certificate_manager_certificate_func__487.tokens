static void //<S2SV> inf_gtk_certificate_manager_certificate_func ( InfXmppConnection * connection , //<S2SV> gnutls_session_t session , //<S2SV> InfCertificateChain * chain , //<S2SV> gpointer user_data ) //<S2SV> { //<S2SV> InfGtkCertificateManager * manager ; //<S2SV> InfGtkCertificateManagerPrivate * priv ; //<S2SV> InfGtkCertificateDialogFlags flags ; //<S2SV> gnutls_x509_crt_t presented_cert ; //<S2SV> gnutls_x509_crt_t known_cert ; //<S2SV> gchar * hostname ; //<S2SV> gboolean match_hostname ; //<S2SV> gboolean issuer_known ; //<S2SV> gnutls_x509_crt_t root_cert ; //<S2SV> int ret ; //<S2SV> unsigned int verify ; //<S2SV> GHashTable * table ; //<S2SV> gboolean cert_equal ; //<S2SV> time_t expiration_time ; //<S2SV> InfGtkCertificateManagerQuery * query ; //<S2SV> gchar * text ; //<S2SV> GtkWidget * vbox ; //<S2SV> GtkWidget * label ; //<S2SV> GError * error ; //<S2SV> manager = INF_GTK_CERTIFICATE_MANAGER ( user_data ) ; //<S2SV> priv = INF_GTK_CERTIFICATE_MANAGER_PRIVATE ( manager ) ; //<S2SV> g_object_get ( G_OBJECT ( connection ) , "remote-hostname" , & hostname , NULL ) ; //<S2SV> presented_cert = inf_certificate_chain_get_own_certificate ( chain ) ; //<S2SV> match_hostname = gnutls_x509_crt_check_hostname ( presented_cert , hostname ) ; //<S2SV> ret = gnutls_certificate_verify_peers2 ( session , & verify ) ; //<S2SV> error = NULL ; //<S2SV> if ( ret != GNUTLS_E_SUCCESS ) //<S2SV> inf_gnutls_set_error ( & error , ret ) ; //<S2SV> if ( error == NULL ) //<S2SV> { //<S2SV> issuer_known = TRUE ; //<S2SV> if ( verify & GNUTLS_CERT_SIGNER_NOT_FOUND ) //<S2SV> { //<S2SV> issuer_known = FALSE ; //<S2SV> root_cert = inf_certificate_chain_get_root_certificate ( chain ) ; //<S2SV> ret = gnutls_x509_crt_list_verify ( //<S2SV> inf_certificate_chain_get_raw ( chain ) , //<S2SV> inf_certificate_chain_get_n_certificates ( chain ) , //<S2SV> & root_cert , //<S2SV> 1 , //<S2SV> NULL , //<S2SV> 0 , //<S2SV> GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT , //<S2SV> & verify //<S2SV> ) ; //<S2SV> if ( ret != GNUTLS_E_SUCCESS ) //<S2SV> inf_gnutls_set_error ( & error , ret ) ; //<S2SV> } //<S2SV> if ( error == NULL ) //<S2SV> if ( verify & GNUTLS_CERT_INVALID ) //<S2SV> inf_gnutls_certificate_verification_set_error ( & error , verify ) ; //<S2SV> } //<S2SV> table = NULL ; //<S2SV> if ( error == NULL ) //<S2SV> { //<S2SV> known_cert = NULL ; //<S2SV> if ( ! match_hostname || ! issuer_known ) //<S2SV> { //<S2SV> table = inf_gtk_certificate_manager_ref_known_hosts ( manager , & error ) ; //<S2SV> if ( table != NULL ) //<S2SV> known_cert = g_hash_table_lookup ( table , hostname ) ; //<S2SV> } //<S2SV> } //<S2SV> flags = 0 ; //<S2SV> if ( error == NULL ) //<S2SV> { //<S2SV> if ( known_cert != NULL ) //<S2SV> { //<S2SV> cert_equal = inf_gtk_certificate_manager_compare_fingerprint ( //<S2SV> known_cert , //<S2SV> presented_cert , //<S2SV> & error //<S2SV> ) ; //<S2SV> if ( error == NULL && cert_equal == FALSE ) //<S2SV> { //<S2SV> if ( ! match_hostname ) //<S2SV> flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH ; //<S2SV> if ( ! issuer_known ) //<S2SV> flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN ; //<S2SV> flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_UNEXPECTED ; //<S2SV> expiration_time = gnutls_x509_crt_get_expiration_time ( known_cert ) ; //<S2SV> if ( expiration_time != ( time_t ) ( - 1 ) ) //<S2SV> { //<S2SV> expiration_time -= INF_GTK_CERTIFICATE_MANAGER_EXPIRATION_TOLERANCE ; //<S2SV> if ( time ( NULL ) > expiration_time ) //<S2SV> { //<S2SV> flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_OLD_EXPIRED ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> if ( ! match_hostname ) //<S2SV> flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_HOSTNAME_MISMATCH ; //<S2SV> if ( ! issuer_known ) //<S2SV> flags |= INF_GTK_CERTIFICATE_DIALOG_CERT_ISSUER_NOT_KNOWN ; //<S2SV> } //<S2SV> } //<S2SV> if ( error == NULL ) //<S2SV> { //<S2SV> if ( flags == 0 ) //<S2SV> { //<S2SV> if ( match_hostname && issuer_known ) //<S2SV> { //<S2SV> if ( table != NULL && g_hash_table_remove ( table , hostname ) == TRUE ) //<S2SV> { //<S2SV> inf_gtk_certificate_manager_write_known_hosts_with_warning ( //<S2SV> manager , //<S2SV> table //<S2SV> ) ; //<S2SV> } //<S2SV> } //<S2SV> inf_xmpp_connection_certificate_verify_continue ( connection ) ; //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> query = g_slice_new ( InfGtkCertificateManagerQuery ) ; //<S2SV> query -> manager = manager ; //<S2SV> query -> known_hosts = table ; //<S2SV> query -> connection = connection ; //<S2SV> query -> dialog = inf_gtk_certificate_dialog_new ( //<S2SV> priv -> parent_window , //<S2SV> 0 , //<S2SV> flags , //<S2SV> hostname , //<S2SV> chain //<S2SV> ) ; //<S2SV> query -> certificate_chain = chain ; //<S2SV> table = NULL ; //<S2SV> g_object_ref ( query -> connection ) ; //<S2SV> inf_certificate_chain_ref ( chain ) ; //<S2SV> g_signal_connect ( //<S2SV> G_OBJECT ( connection ) , //<S2SV> "notify::status" , //<S2SV> G_CALLBACK ( inf_gtk_certificate_manager_notify_status_cb ) , //<S2SV> query //<S2SV> ) ; //<S2SV> g_signal_connect ( //<S2SV> G_OBJECT ( query -> dialog ) , //<S2SV> "response" , //<S2SV> G_CALLBACK ( inf_gtk_certificate_manager_response_cb ) , //<S2SV> query //<S2SV> ) ; //<S2SV> gtk_dialog_add_button ( //<S2SV> GTK_DIALOG ( query -> dialog ) , //<S2SV> _ ( "_Cancel<S2SV_blank>connection" ) , //<S2SV> GTK_RESPONSE_REJECT //<S2SV> ) ; //<S2SV> gtk_dialog_add_button ( //<S2SV> GTK_DIALOG ( query -> dialog ) , //<S2SV> _ ( "C_ontinue<S2SV_blank>connection" ) , //<S2SV> GTK_RESPONSE_ACCEPT //<S2SV> ) ; //<S2SV> text = g_strdup_printf ( //<S2SV> _ ( "Do<S2SV_blank>you<S2SV_blank>want<S2SV_blank>to<S2SV_blank>continue<S2SV_blank>the<S2SV_blank>connection<S2SV_blank>to<S2SV_blank>host<S2SV_blank>\\"%s\\"?<S2SV_blank>If<S2SV_blank>you<S2SV_blank>" //<S2SV> "choose<S2SV_blank>to<S2SV_blank>continue,<S2SV_blank>this<S2SV_blank>certificate<S2SV_blank>will<S2SV_blank>be<S2SV_blank>trusted<S2SV_blank>in<S2SV_blank>the<S2SV_blank>" //<S2SV> "future<S2SV_blank>when<S2SV_blank>connecting<S2SV_blank>to<S2SV_blank>this<S2SV_blank>host." ) , //<S2SV> hostname //<S2SV> ) ; //<S2SV> label = gtk_label_new ( text ) ; //<S2SV> gtk_label_set_line_wrap ( GTK_LABEL ( label ) , TRUE ) ; //<S2SV> gtk_label_set_line_wrap_mode ( GTK_LABEL ( label ) , PANGO_WRAP_WORD_CHAR ) ; //<S2SV> gtk_label_set_max_width_chars ( GTK_LABEL ( label ) , 60 ) ; //<S2SV> gtk_misc_set_alignment ( GTK_MISC ( label ) , 0.0 , 0.0 ) ; //<S2SV> gtk_widget_show ( label ) ; //<S2SV> g_free ( text ) ; //<S2SV> vbox = gtk_dialog_get_content_area ( GTK_DIALOG ( query -> dialog ) ) ; //<S2SV> gtk_box_pack_start ( GTK_BOX ( vbox ) , label , FALSE , FALSE , 0 ) ; //<S2SV> priv -> queries = g_slist_prepend ( priv -> queries , query ) ; //<S2SV> gtk_window_present ( GTK_WINDOW ( query -> dialog ) ) ; //<S2SV> } //<S2SV> } //<S2SV> else //<S2SV> { //<S2SV> inf_xmpp_connection_certificate_verify_cancel ( connection , error ) ; //<S2SV> g_error_free ( error ) ; //<S2SV> } //<S2SV> if ( table != NULL ) g_hash_table_unref ( table ) ; //<S2SV> g_free ( hostname ) ; //<S2SV> } //<S2SV> 