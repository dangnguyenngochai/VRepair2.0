int config__parse_args ( struct mosquitto_db * db , struct mosquitto__config * config , int argc , char * argv [ ] ) //<S2SV> { //<S2SV> int i ; //<S2SV> int port_tmp ; //<S2SV> for ( i = 1 ; i < argc ; i ++ ) { //<S2SV> if ( ! strcmp ( argv [ i ] , "-c" ) || ! strcmp ( argv [ i ] , "--config-file" ) ) { //<S2SV> if ( i < argc - 1 ) { //<S2SV> db -> config_file = argv [ i + 1 ] ; //<S2SV> if ( config__read ( db , config , false ) ) { //<S2SV> log__printf ( NULL , MOSQ_LOG_ERR , "Error:<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>configuration<S2SV_blank>file." ) ; //<S2SV> return MOSQ_ERR_INVAL ; //<S2SV> } //<S2SV> } else { //<S2SV> log__printf ( NULL , MOSQ_LOG_ERR , "Error:<S2SV_blank>-c<S2SV_blank>argument<S2SV_blank>given,<S2SV_blank>but<S2SV_blank>no<S2SV_blank>config<S2SV_blank>file<S2SV_blank>specified." ) ; //<S2SV> return MOSQ_ERR_INVAL ; //<S2SV> } //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( argv [ i ] , "-d" ) || ! strcmp ( argv [ i ] , "--daemon" ) ) { //<S2SV> config -> daemon = true ; //<S2SV> } else if ( ! strcmp ( argv [ i ] , "-h" ) || ! strcmp ( argv [ i ] , "--help" ) ) { //<S2SV> print_usage ( ) ; //<S2SV> return MOSQ_ERR_INVAL ; //<S2SV> } else if ( ! strcmp ( argv [ i ] , "-p" ) || ! strcmp ( argv [ i ] , "--port" ) ) { //<S2SV> if ( i < argc - 1 ) { //<S2SV> port_tmp = atoi ( argv [ i + 1 ] ) ; //<S2SV> if ( port_tmp < 1 || port_tmp > 65535 ) { //<S2SV> log__printf ( NULL , MOSQ_LOG_ERR , "Error:<S2SV_blank>Invalid<S2SV_blank>port<S2SV_blank>specified<S2SV_blank>(%d)." , port_tmp ) ; //<S2SV> return MOSQ_ERR_INVAL ; //<S2SV> } else { //<S2SV> if ( config -> default_listener . port ) { //<S2SV> log__printf ( NULL , MOSQ_LOG_WARNING , "Warning:<S2SV_blank>Default<S2SV_blank>listener<S2SV_blank>port<S2SV_blank>specified<S2SV_blank>multiple<S2SV_blank>times.<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>latest<S2SV_blank>will<S2SV_blank>be<S2SV_blank>used." ) ; //<S2SV> } //<S2SV> config -> default_listener . port = port_tmp ; //<S2SV> } //<S2SV> } else { //<S2SV> log__printf ( NULL , MOSQ_LOG_ERR , "Error:<S2SV_blank>-p<S2SV_blank>argument<S2SV_blank>given,<S2SV_blank>but<S2SV_blank>no<S2SV_blank>port<S2SV_blank>specified." ) ; //<S2SV> return MOSQ_ERR_INVAL ; //<S2SV> } //<S2SV> i ++ ; //<S2SV> } else if ( ! strcmp ( argv [ i ] , "-v" ) || ! strcmp ( argv [ i ] , "--verbose" ) ) { //<S2SV> db -> verbose = true ; //<S2SV> } else { //<S2SV> fprintf ( stderr , "Error:<S2SV_blank>Unknown<S2SV_blank>option<S2SV_blank>\'%s\'.\\n" , argv [ i ] ) ; //<S2SV> print_usage ( ) ; //<S2SV> return MOSQ_ERR_INVAL ; //<S2SV> } //<S2SV> } //<S2SV> if ( config -> listener_count == 0 //<S2SV> # ifdef WITH_TLS //<S2SV> || config -> default_listener . cafile //<S2SV> || config -> default_listener . capath //<S2SV> || config -> default_listener . certfile //<S2SV> || config -> default_listener . keyfile //<S2SV> || config -> default_listener . ciphers //<S2SV> || config -> default_listener . psk_hint //<S2SV> || config -> default_listener . require_certificate //<S2SV> || config -> default_listener . crlfile //<S2SV> || config -> default_listener . use_identity_as_username //<S2SV> || config -> default_listener . use_subject_as_username //<S2SV> # endif //<S2SV> || config -> default_listener . use_username_as_clientid //<S2SV> || config -> default_listener . host //<S2SV> || config -> default_listener . port //<S2SV> || config -> default_listener . max_connections != - 1 //<S2SV> || config -> default_listener . mount_point //<S2SV> || config -> default_listener . protocol != mp_mqtt //<S2SV> || config -> default_listener . socket_domain //<S2SV> || config -> default_listener . security_options . password_file //<S2SV> || config -> default_listener . security_options . psk_file //<S2SV> || config -> default_listener . security_options . auth_plugin_config_count //<S2SV> || config -> default_listener . security_options . allow_anonymous != - 1 //<S2SV> ) { //<S2SV> config -> listener_count ++ ; //<S2SV> config -> listeners = mosquitto__realloc ( config -> listeners , sizeof ( struct mosquitto__listener ) * config -> listener_count ) ; //<S2SV> if ( ! config -> listeners ) { //<S2SV> log__printf ( NULL , MOSQ_LOG_ERR , "Error:<S2SV_blank>Out<S2SV_blank>of<S2SV_blank>memory." ) ; //<S2SV> return MOSQ_ERR_NOMEM ; //<S2SV> } //<S2SV> memset ( & config -> listeners [ config -> listener_count - 1 ] , 0 , sizeof ( struct mosquitto__listener ) ) ; //<S2SV> if ( config -> default_listener . port ) { //<S2SV> config -> listeners [ config -> listener_count - 1 ] . port = config -> default_listener . port ; //<S2SV> } else { //<S2SV> config -> listeners [ config -> listener_count - 1 ] . port = 1883 ; //<S2SV> } //<S2SV> if ( config -> default_listener . host ) { //<S2SV> config -> listeners [ config -> listener_count - 1 ] . host = config -> default_listener . host ; //<S2SV> } else { //<S2SV> config -> listeners [ config -> listener_count - 1 ] . host = NULL ; //<S2SV> } //<S2SV> if ( config -> default_listener . mount_point ) { //<S2SV> config -> listeners [ config -> listener_count - 1 ] . mount_point = config -> default_listener . mount_point ; //<S2SV> } else { //<S2SV> config -> listeners [ config -> listener_count - 1 ] . mount_point = NULL ; //<S2SV> } //<S2SV> config -> listeners [ config -> listener_count - 1 ] . max_connections = config -> default_listener . max_connections ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . protocol = config -> default_listener . protocol ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . socket_domain = config -> default_listener . socket_domain ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . client_count = 0 ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . socks = NULL ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . sock_count = 0 ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . client_count = 0 ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . use_username_as_clientid = config -> default_listener . use_username_as_clientid ; //<S2SV> # ifdef WITH_TLS //<S2SV> config -> listeners [ config -> listener_count - 1 ] . tls_version = config -> default_listener . tls_version ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . cafile = config -> default_listener . cafile ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . capath = config -> default_listener . capath ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . certfile = config -> default_listener . certfile ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . keyfile = config -> default_listener . keyfile ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . ciphers = config -> default_listener . ciphers ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . psk_hint = config -> default_listener . psk_hint ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . require_certificate = config -> default_listener . require_certificate ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . ssl_ctx = NULL ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . crlfile = config -> default_listener . crlfile ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . use_identity_as_username = config -> default_listener . use_identity_as_username ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . use_subject_as_username = config -> default_listener . use_subject_as_username ; //<S2SV> # endif //<S2SV> config -> listeners [ config -> listener_count - 1 ] . security_options . acl_file = config -> default_listener . security_options . acl_file ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . security_options . password_file = config -> default_listener . security_options . password_file ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . security_options . psk_file = config -> default_listener . security_options . psk_file ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . security_options . auth_plugin_configs = config -> default_listener . security_options . auth_plugin_configs ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . security_options . auth_plugin_config_count = config -> default_listener . security_options . auth_plugin_config_count ; //<S2SV> config -> listeners [ config -> listener_count - 1 ] . security_options . allow_anonymous = config -> default_listener . security_options . allow_anonymous ; //<S2SV> } //<S2SV> if ( ! config -> user ) { //<S2SV> config -> user = "mosquitto" ; //<S2SV> } //<S2SV> if ( db -> verbose ) { //<S2SV> config -> log_type = INT_MAX ; //<S2SV> } //<S2SV> return config__check ( config ) ; //<S2SV> } //<S2SV> 