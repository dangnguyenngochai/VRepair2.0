static void * zend_mm_realloc_heap ( zend_mm_heap * heap , void * ptr , size_t size , size_t copy_size ZEND_FILE_LINE_DC ZEND_FILE_LINE_ORIG_DC ) //<S2SV> { //<S2SV> size_t page_offset ; //<S2SV> size_t old_size ; //<S2SV> size_t new_size ; //<S2SV> void * ret ; //<S2SV> # if ZEND_DEBUG //<S2SV> size_t real_size ; //<S2SV> zend_mm_debug_info * dbg ; //<S2SV> # endif //<S2SV> page_offset = ZEND_MM_ALIGNED_OFFSET ( ptr , ZEND_MM_CHUNK_SIZE ) ; //<S2SV> if ( UNEXPECTED ( page_offset == 0 ) ) { //<S2SV> if ( UNEXPECTED ( ptr == NULL ) ) { //<S2SV> return zend_mm_alloc_heap ( heap , size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> } //<S2SV> old_size = zend_mm_get_huge_block_size ( heap , ptr ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # if ZEND_DEBUG //<S2SV> real_size = size ; //<S2SV> size = ZEND_MM_ALIGNED_SIZE ( size ) + ZEND_MM_ALIGNED_SIZE ( sizeof ( zend_mm_debug_info ) ) ; //<S2SV> # endif //<S2SV> if ( size > ZEND_MM_MAX_LARGE_SIZE ) { //<S2SV> # if ZEND_DEBUG //<S2SV> size = real_size ; //<S2SV> # endif //<S2SV> # ifdef ZEND_WIN32 //<S2SV> new_size = ZEND_MM_ALIGNED_SIZE_EX ( size , MAX ( REAL_PAGE_SIZE , ZEND_MM_CHUNK_SIZE ) ) ; //<S2SV> # else //<S2SV> new_size = ZEND_MM_ALIGNED_SIZE_EX ( size , REAL_PAGE_SIZE ) ; //<S2SV> # endif //<S2SV> if ( new_size == old_size ) { //<S2SV> # if ZEND_DEBUG //<S2SV> zend_mm_change_huge_block_size ( heap , ptr , new_size , real_size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # else //<S2SV> zend_mm_change_huge_block_size ( heap , ptr , new_size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # endif //<S2SV> return ptr ; //<S2SV> } else if ( new_size < old_size ) { //<S2SV> if ( zend_mm_chunk_truncate ( heap , ptr , old_size , new_size ) ) { //<S2SV> # if ZEND_MM_STAT || ZEND_MM_LIMIT //<S2SV> heap -> real_size -= old_size - new_size ; //<S2SV> # endif //<S2SV> # if ZEND_MM_STAT //<S2SV> heap -> size -= old_size - new_size ; //<S2SV> # endif //<S2SV> # if ZEND_DEBUG //<S2SV> zend_mm_change_huge_block_size ( heap , ptr , new_size , real_size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # else //<S2SV> zend_mm_change_huge_block_size ( heap , ptr , new_size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # endif //<S2SV> return ptr ; //<S2SV> } //<S2SV> } else { //<S2SV> # if ZEND_MM_LIMIT //<S2SV> if ( UNEXPECTED ( heap -> real_size + ( new_size - old_size ) > heap -> limit ) ) { //<S2SV> if ( zend_mm_gc ( heap ) && heap -> real_size + ( new_size - old_size ) <= heap -> limit ) { //<S2SV> } else if ( heap -> overflow == 0 ) { //<S2SV> # if ZEND_DEBUG //<S2SV> zend_mm_safe_error ( heap , "Allowed<S2SV_blank>memory<S2SV_blank>size<S2SV_blank>of<S2SV_blank>%zu<S2SV_blank>bytes<S2SV_blank>exhausted<S2SV_blank>at<S2SV_blank>%s:%d<S2SV_blank>(tried<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>%zu<S2SV_blank>bytes)" , heap -> limit , __zend_filename , __zend_lineno , size ) ; //<S2SV> # else //<S2SV> zend_mm_safe_error ( heap , "Allowed<S2SV_blank>memory<S2SV_blank>size<S2SV_blank>of<S2SV_blank>%zu<S2SV_blank>bytes<S2SV_blank>exhausted<S2SV_blank>(tried<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>%zu<S2SV_blank>bytes)" , heap -> limit , size ) ; //<S2SV> # endif //<S2SV> return NULL ; //<S2SV> } //<S2SV> } //<S2SV> # endif //<S2SV> if ( zend_mm_chunk_extend ( heap , ptr , old_size , new_size ) ) { //<S2SV> # if ZEND_MM_STAT || ZEND_MM_LIMIT //<S2SV> heap -> real_size += new_size - old_size ; //<S2SV> # endif //<S2SV> # if ZEND_MM_STAT //<S2SV> heap -> real_peak = MAX ( heap -> real_peak , heap -> real_size ) ; //<S2SV> heap -> size += new_size - old_size ; //<S2SV> heap -> peak = MAX ( heap -> peak , heap -> size ) ; //<S2SV> # endif //<S2SV> # if ZEND_DEBUG //<S2SV> zend_mm_change_huge_block_size ( heap , ptr , new_size , real_size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # else //<S2SV> zend_mm_change_huge_block_size ( heap , ptr , new_size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # endif //<S2SV> return ptr ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> zend_mm_chunk * chunk = ( zend_mm_chunk * ) ZEND_MM_ALIGNED_BASE ( ptr , ZEND_MM_CHUNK_SIZE ) ; //<S2SV> int page_num = ( int ) ( page_offset / ZEND_MM_PAGE_SIZE ) ; //<S2SV> zend_mm_page_info info = chunk -> map [ page_num ] ; //<S2SV> # if ZEND_DEBUG //<S2SV> size_t real_size = size ; //<S2SV> size = ZEND_MM_ALIGNED_SIZE ( size ) + ZEND_MM_ALIGNED_SIZE ( sizeof ( zend_mm_debug_info ) ) ; //<S2SV> # endif //<S2SV> ZEND_MM_CHECK ( chunk -> heap == heap , "zend_mm_heap<S2SV_blank>corrupted" ) ; //<S2SV> if ( info & ZEND_MM_IS_SRUN ) { //<S2SV> int old_bin_num = ZEND_MM_SRUN_BIN_NUM ( info ) ; //<S2SV> old_size = bin_data_size [ old_bin_num ] ; //<S2SV> if ( size <= ZEND_MM_MAX_SMALL_SIZE ) { //<S2SV> int bin_num = ZEND_MM_SMALL_SIZE_TO_BIN ( size ) ; //<S2SV> if ( old_bin_num == bin_num ) { //<S2SV> # if ZEND_DEBUG //<S2SV> dbg = zend_mm_get_debug_info ( heap , ptr ) ; //<S2SV> dbg -> size = real_size ; //<S2SV> dbg -> filename = __zend_filename ; //<S2SV> dbg -> orig_filename = __zend_orig_filename ; //<S2SV> dbg -> lineno = __zend_lineno ; //<S2SV> dbg -> orig_lineno = __zend_orig_lineno ; //<S2SV> # endif //<S2SV> return ptr ; //<S2SV> } //<S2SV> } //<S2SV> } else { //<S2SV> ZEND_MM_CHECK ( ZEND_MM_ALIGNED_OFFSET ( page_offset , ZEND_MM_PAGE_SIZE ) == 0 , "zend_mm_heap<S2SV_blank>corrupted" ) ; //<S2SV> old_size = ZEND_MM_LRUN_PAGES ( info ) * ZEND_MM_PAGE_SIZE ; //<S2SV> if ( size > ZEND_MM_MAX_SMALL_SIZE && size <= ZEND_MM_MAX_LARGE_SIZE ) { //<S2SV> new_size = ZEND_MM_ALIGNED_SIZE_EX ( size , ZEND_MM_PAGE_SIZE ) ; //<S2SV> if ( new_size == old_size ) { //<S2SV> # if ZEND_DEBUG //<S2SV> dbg = zend_mm_get_debug_info ( heap , ptr ) ; //<S2SV> dbg -> size = real_size ; //<S2SV> dbg -> filename = __zend_filename ; //<S2SV> dbg -> orig_filename = __zend_orig_filename ; //<S2SV> dbg -> lineno = __zend_lineno ; //<S2SV> dbg -> orig_lineno = __zend_orig_lineno ; //<S2SV> # endif //<S2SV> return ptr ; //<S2SV> } else if ( new_size < old_size ) { //<S2SV> int new_pages_count = ( int ) ( new_size / ZEND_MM_PAGE_SIZE ) ; //<S2SV> int rest_pages_count = ( int ) ( ( old_size - new_size ) / ZEND_MM_PAGE_SIZE ) ; //<S2SV> # if ZEND_MM_STAT //<S2SV> heap -> size -= rest_pages_count * ZEND_MM_PAGE_SIZE ; //<S2SV> # endif //<S2SV> chunk -> map [ page_num ] = ZEND_MM_LRUN ( new_pages_count ) ; //<S2SV> chunk -> free_pages += rest_pages_count ; //<S2SV> zend_mm_bitset_reset_range ( chunk -> free_map , page_num + new_pages_count , rest_pages_count ) ; //<S2SV> # if ZEND_DEBUG //<S2SV> dbg = zend_mm_get_debug_info ( heap , ptr ) ; //<S2SV> dbg -> size = real_size ; //<S2SV> dbg -> filename = __zend_filename ; //<S2SV> dbg -> orig_filename = __zend_orig_filename ; //<S2SV> dbg -> lineno = __zend_lineno ; //<S2SV> dbg -> orig_lineno = __zend_orig_lineno ; //<S2SV> # endif //<S2SV> return ptr ; //<S2SV> } else { //<S2SV> int new_pages_count = ( int ) ( new_size / ZEND_MM_PAGE_SIZE ) ; //<S2SV> int old_pages_count = ( int ) ( old_size / ZEND_MM_PAGE_SIZE ) ; //<S2SV> if ( page_num + new_pages_count <= ZEND_MM_PAGES && //<S2SV> zend_mm_bitset_is_free_range ( chunk -> free_map , page_num + old_pages_count , new_pages_count - old_pages_count ) ) { //<S2SV> # if ZEND_MM_STAT //<S2SV> do { //<S2SV> size_t size = heap -> size + ( new_size - old_size ) ; //<S2SV> size_t peak = MAX ( heap -> peak , size ) ; //<S2SV> heap -> size = size ; //<S2SV> heap -> peak = peak ; //<S2SV> } while ( 0 ) ; //<S2SV> # endif //<S2SV> chunk -> free_pages -= new_pages_count - old_pages_count ; //<S2SV> zend_mm_bitset_set_range ( chunk -> free_map , page_num + old_pages_count , new_pages_count - old_pages_count ) ; //<S2SV> chunk -> map [ page_num ] = ZEND_MM_LRUN ( new_pages_count ) ; //<S2SV> # if ZEND_DEBUG //<S2SV> dbg = zend_mm_get_debug_info ( heap , ptr ) ; //<S2SV> dbg -> size = real_size ; //<S2SV> dbg -> filename = __zend_filename ; //<S2SV> dbg -> orig_filename = __zend_orig_filename ; //<S2SV> dbg -> lineno = __zend_lineno ; //<S2SV> dbg -> orig_lineno = __zend_orig_lineno ; //<S2SV> # endif //<S2SV> return ptr ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> # if ZEND_DEBUG //<S2SV> size = real_size ; //<S2SV> # endif //<S2SV> } //<S2SV> # if ZEND_MM_STAT //<S2SV> do { //<S2SV> size_t orig_peak = heap -> peak ; //<S2SV> size_t orig_real_peak = heap -> real_peak ; //<S2SV> # endif //<S2SV> ret = zend_mm_alloc_heap ( heap , size ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> memcpy ( ret , ptr , MIN ( old_size , copy_size ) ) ; //<S2SV> zend_mm_free_heap ( heap , ptr ZEND_FILE_LINE_RELAY_CC ZEND_FILE_LINE_ORIG_RELAY_CC ) ; //<S2SV> # if ZEND_MM_STAT //<S2SV> heap -> peak = MAX ( orig_peak , heap -> size ) ; //<S2SV> heap -> real_peak = MAX ( orig_real_peak , heap -> real_size ) ; //<S2SV> } while ( 0 ) ; //<S2SV> # endif //<S2SV> return ret ; //<S2SV> } //<S2SV> 