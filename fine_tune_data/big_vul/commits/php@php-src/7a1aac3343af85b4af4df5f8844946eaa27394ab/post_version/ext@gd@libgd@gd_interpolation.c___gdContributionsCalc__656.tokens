static inline LineContribType * _gdContributionsCalc ( unsigned int line_size , unsigned int src_size , double scale_d , const interpolation_method pFilter ) //<S2SV> { //<S2SV> double width_d ; //<S2SV> double scale_f_d = 1.0 ; //<S2SV> const double filter_width_d = DEFAULT_BOX_RADIUS ; //<S2SV> int windows_size ; //<S2SV> unsigned int u ; //<S2SV> LineContribType * res ; //<S2SV> if ( scale_d < 1.0 ) { //<S2SV> width_d = filter_width_d / scale_d ; //<S2SV> scale_f_d = scale_d ; //<S2SV> } else { //<S2SV> width_d = filter_width_d ; //<S2SV> } //<S2SV> windows_size = 2 * ( int ) ceil ( width_d ) + 1 ; //<S2SV> res = _gdContributionsAlloc ( line_size , windows_size ) ; //<S2SV> for ( u = 0 ; u < line_size ; u ++ ) { //<S2SV> const double dCenter = ( double ) u / scale_d ; //<S2SV> register int iLeft = MAX ( 0 , ( int ) floor ( dCenter - width_d ) ) ; //<S2SV> int iRight = MIN ( ( int ) ceil ( dCenter + width_d ) , ( int ) src_size - 1 ) ; //<S2SV> double dTotalWeight = 0.0 ; //<S2SV> int iSrc ; //<S2SV> if ( iRight - iLeft + 1 > windows_size ) { //<S2SV> if ( iLeft < ( ( int ) src_size - 1 / 2 ) ) { //<S2SV> iLeft ++ ; //<S2SV> } else { //<S2SV> iRight -- ; //<S2SV> } //<S2SV> } //<S2SV> res -> ContribRow [ u ] . Left = iLeft ; //<S2SV> res -> ContribRow [ u ] . Right = iRight ; //<S2SV> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { //<S2SV> dTotalWeight += ( res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] = scale_f_d * ( * pFilter ) ( scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; //<S2SV> } //<S2SV> if ( dTotalWeight < 0.0 ) { //<S2SV> _gdContributionsFree ( res ) ; //<S2SV> return NULL ; //<S2SV> } //<S2SV> if ( dTotalWeight > 0.0 ) { //<S2SV> for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { //<S2SV> res -> ContribRow [ u ] . Weights [ iSrc - iLeft ] /= dTotalWeight ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> return res ; //<S2SV> } //<S2SV> 