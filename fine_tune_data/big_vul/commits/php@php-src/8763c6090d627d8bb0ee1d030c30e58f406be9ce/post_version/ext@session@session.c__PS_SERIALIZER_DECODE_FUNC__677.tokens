PS_SERIALIZER_DECODE_FUNC ( php_binary ) //<S2SV> { //<S2SV> const char * p ; //<S2SV> char * name ; //<S2SV> const char * endptr = val + vallen ; //<S2SV> zval * current ; //<S2SV> int namelen ; //<S2SV> int has_value ; //<S2SV> php_unserialize_data_t var_hash ; //<S2SV> int skip = 0 ; //<S2SV> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; //<S2SV> for ( p = val ; p < endptr ; ) { //<S2SV> zval * * tmp ; //<S2SV> skip = 0 ; //<S2SV> namelen = ( ( unsigned char ) ( * p ) ) & ( ~ PS_BIN_UNDEF ) ; //<S2SV> if ( namelen < 0 || namelen > PS_BIN_MAX || ( p + namelen ) >= endptr ) { //<S2SV> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; //<S2SV> return FAILURE ; //<S2SV> } //<S2SV> has_value = * p & PS_BIN_UNDEF ? 0 : 1 ; //<S2SV> name = estrndup ( p + 1 , namelen ) ; //<S2SV> p += namelen + 1 ; //<S2SV> if ( zend_hash_find ( & EG ( symbol_table ) , name , namelen + 1 , ( void * * ) & tmp ) == SUCCESS ) { //<S2SV> if ( ( Z_TYPE_PP ( tmp ) == IS_ARRAY && Z_ARRVAL_PP ( tmp ) == & EG ( symbol_table ) ) || * tmp == PS ( http_session_vars ) ) { //<S2SV> skip = 1 ; //<S2SV> } //<S2SV> } //<S2SV> if ( has_value ) { //<S2SV> ALLOC_INIT_ZVAL ( current ) ; //<S2SV> if ( php_var_unserialize ( & current , ( const unsigned char * * ) & p , ( const unsigned char * ) endptr , & var_hash TSRMLS_CC ) ) { //<S2SV> if ( ! skip ) { //<S2SV> php_set_session_var ( name , namelen , current , & var_hash TSRMLS_CC ) ; //<S2SV> } //<S2SV> } else { //<S2SV> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; //<S2SV> return FAILURE ; //<S2SV> } //<S2SV> var_push_dtor_no_addref ( & var_hash , & current ) ; //<S2SV> } //<S2SV> if ( ! skip ) { //<S2SV> PS_ADD_VARL ( name , namelen ) ; //<S2SV> } //<S2SV> efree ( name ) ; //<S2SV> } //<S2SV> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; //<S2SV> return SUCCESS ; //<S2SV> } //<S2SV> 