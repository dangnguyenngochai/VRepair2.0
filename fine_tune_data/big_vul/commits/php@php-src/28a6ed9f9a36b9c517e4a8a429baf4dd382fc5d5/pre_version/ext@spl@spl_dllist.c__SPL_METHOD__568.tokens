SPL_METHOD ( SplDoublyLinkedList , offsetSet ) //<S2SV> { //<S2SV> zval * zindex , * value ; //<S2SV> spl_dllist_object * intern ; //<S2SV> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) , "zz" , & zindex , & value ) == FAILURE ) { //<S2SV> return ; //<S2SV> } //<S2SV> intern = Z_SPLDLLIST_P ( getThis ( ) ) ; //<S2SV> if ( Z_TYPE_P ( zindex ) == IS_NULL ) { //<S2SV> spl_ptr_llist_push ( intern -> llist , value ) ; //<S2SV> } else { //<S2SV> zend_long index ; //<S2SV> spl_ptr_llist_element * element ; //<S2SV> index = spl_offset_convert_to_long ( zindex ) ; //<S2SV> if ( index < 0 || index >= intern -> llist -> count ) { //<S2SV> zval_ptr_dtor ( value ) ; //<S2SV> zend_throw_exception ( spl_ce_OutOfRangeException , "Offset<S2SV_blank>invalid<S2SV_blank>or<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range" , 0 ) ; //<S2SV> return ; //<S2SV> } //<S2SV> element = spl_ptr_llist_offset ( intern -> llist , index , intern -> flags & SPL_DLLIST_IT_LIFO ) ; //<S2SV> if ( element != NULL ) { //<S2SV> if ( intern -> llist -> dtor ) { //<S2SV> intern -> llist -> dtor ( element ) ; //<S2SV> } //<S2SV> zval_ptr_dtor ( & element -> data ) ; //<S2SV> ZVAL_COPY_VALUE ( & element -> data , value ) ; //<S2SV> if ( intern -> llist -> ctor ) { //<S2SV> intern -> llist -> ctor ( element ) ; //<S2SV> } //<S2SV> } else { //<S2SV> zval_ptr_dtor ( value ) ; //<S2SV> zend_throw_exception ( spl_ce_OutOfRangeException , "Offset<S2SV_blank>invalid" , 0 ) ; //<S2SV> return ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 