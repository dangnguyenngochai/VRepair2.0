static PHP_MINIT_FUNCTION ( zip ) //<S2SV> { //<S2SV> # ifdef PHP_ZIP_USE_OO //<S2SV> zend_class_entry ce ; //<S2SV> memcpy ( & zip_object_handlers , zend_get_std_object_handlers ( ) , sizeof ( zend_object_handlers ) ) ; //<S2SV> zip_object_handlers . clone_obj = NULL ; //<S2SV> zip_object_handlers . get_property_ptr_ptr = php_zip_get_property_ptr_ptr ; //<S2SV> zip_object_handlers . get_gc = php_zip_get_gc ; //<S2SV> zip_object_handlers . get_properties = php_zip_get_properties ; //<S2SV> zip_object_handlers . read_property = php_zip_read_property ; //<S2SV> zip_object_handlers . has_property = php_zip_has_property ; //<S2SV> INIT_CLASS_ENTRY ( ce , "ZipArchive" , zip_class_functions ) ; //<S2SV> ce . create_object = php_zip_object_new ; //<S2SV> zip_class_entry = zend_register_internal_class ( & ce TSRMLS_CC ) ; //<S2SV> zend_hash_init ( & zip_prop_handlers , 0 , NULL , NULL , 1 ) ; //<S2SV> php_zip_register_prop_handler ( & zip_prop_handlers , "status" , php_zip_status , NULL , NULL , IS_LONG TSRMLS_CC ) ; //<S2SV> php_zip_register_prop_handler ( & zip_prop_handlers , "statusSys" , php_zip_status_sys , NULL , NULL , IS_LONG TSRMLS_CC ) ; //<S2SV> php_zip_register_prop_handler ( & zip_prop_handlers , "numFiles" , php_zip_get_num_files , NULL , NULL , IS_LONG TSRMLS_CC ) ; //<S2SV> php_zip_register_prop_handler ( & zip_prop_handlers , "filename" , NULL , NULL , php_zipobj_get_filename , IS_STRING TSRMLS_CC ) ; //<S2SV> php_zip_register_prop_handler ( & zip_prop_handlers , "comment" , NULL , php_zipobj_get_zip_comment , NULL , IS_STRING TSRMLS_CC ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CREATE" , ZIP_CREATE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "EXCL" , ZIP_EXCL ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CHECKCONS" , ZIP_CHECKCONS ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "OVERWRITE" , ZIP_OVERWRITE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "FL_NOCASE" , ZIP_FL_NOCASE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "FL_NODIR" , ZIP_FL_NODIR ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "FL_COMPRESSED" , ZIP_FL_COMPRESSED ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "FL_UNCHANGED" , ZIP_FL_UNCHANGED ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_DEFAULT" , ZIP_CM_DEFAULT ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_STORE" , ZIP_CM_STORE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_SHRINK" , ZIP_CM_SHRINK ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_REDUCE_1" , ZIP_CM_REDUCE_1 ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_REDUCE_2" , ZIP_CM_REDUCE_2 ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_REDUCE_3" , ZIP_CM_REDUCE_3 ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_REDUCE_4" , ZIP_CM_REDUCE_4 ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_IMPLODE" , ZIP_CM_IMPLODE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_DEFLATE" , ZIP_CM_DEFLATE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_DEFLATE64" , ZIP_CM_DEFLATE64 ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_PKWARE_IMPLODE" , ZIP_CM_PKWARE_IMPLODE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_BZIP2" , ZIP_CM_BZIP2 ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_LZMA" , ZIP_CM_LZMA ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_TERSE" , ZIP_CM_TERSE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_LZ77" , ZIP_CM_LZ77 ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_WAVPACK" , ZIP_CM_WAVPACK ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "CM_PPMD" , ZIP_CM_PPMD ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_OK" , ZIP_ER_OK ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_MULTIDISK" , ZIP_ER_MULTIDISK ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_RENAME" , ZIP_ER_RENAME ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_CLOSE" , ZIP_ER_CLOSE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_SEEK" , ZIP_ER_SEEK ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_READ" , ZIP_ER_READ ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_WRITE" , ZIP_ER_WRITE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_CRC" , ZIP_ER_CRC ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_ZIPCLOSED" , ZIP_ER_ZIPCLOSED ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_NOENT" , ZIP_ER_NOENT ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_EXISTS" , ZIP_ER_EXISTS ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_OPEN" , ZIP_ER_OPEN ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_TMPOPEN" , ZIP_ER_TMPOPEN ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_ZLIB" , ZIP_ER_ZLIB ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_MEMORY" , ZIP_ER_MEMORY ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_CHANGED" , ZIP_ER_CHANGED ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_COMPNOTSUPP" , ZIP_ER_COMPNOTSUPP ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_EOF" , ZIP_ER_EOF ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_INVAL" , ZIP_ER_INVAL ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_NOZIP" , ZIP_ER_NOZIP ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_INTERNAL" , ZIP_ER_INTERNAL ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_INCONS" , ZIP_ER_INCONS ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_REMOVE" , ZIP_ER_REMOVE ) ; //<S2SV> REGISTER_ZIP_CLASS_CONST_LONG ( "ER_DELETED" , ZIP_ER_DELETED ) ; //<S2SV> php_register_url_stream_wrapper ( "zip" , & php_stream_zip_wrapper TSRMLS_CC ) ; //<S2SV> # endif //<S2SV> le_zip_dir = zend_register_list_destructors_ex ( php_zip_free_dir , NULL , le_zip_dir_name , module_number ) ; //<S2SV> le_zip_entry = zend_register_list_destructors_ex ( php_zip_free_entry , NULL , le_zip_entry_name , module_number ) ; //<S2SV> return SUCCESS ; //<S2SV> } //<S2SV> 