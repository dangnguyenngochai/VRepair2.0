SPL_METHOD ( SplObjectStorage , unserialize ) //<S2SV> { //<S2SV> spl_SplObjectStorage * intern = Z_SPLOBJSTORAGE_P ( getThis ( ) ) ; //<S2SV> char * buf ; //<S2SV> size_t buf_len ; //<S2SV> const unsigned char * p , * s ; //<S2SV> php_unserialize_data_t var_hash ; //<S2SV> zval entry , inf ; //<S2SV> zval * pcount , * pmembers ; //<S2SV> spl_SplObjectStorageElement * element ; //<S2SV> zend_long count ; //<S2SV> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) , "s" , & buf , & buf_len ) == FAILURE ) { //<S2SV> return ; //<S2SV> } //<S2SV> if ( buf_len == 0 ) { //<S2SV> return ; //<S2SV> } //<S2SV> s = p = ( const unsigned char * ) buf ; //<S2SV> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; //<S2SV> if ( * p != 'x' || * ++ p != ':' ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> ++ p ; //<S2SV> pcount = var_tmp_var ( & var_hash ) ; //<S2SV> if ( ! php_var_unserialize ( pcount , & p , s + buf_len , & var_hash ) || Z_TYPE_P ( pcount ) != IS_LONG ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> -- p ; //<S2SV> count = Z_LVAL_P ( pcount ) ; //<S2SV> ZVAL_UNDEF ( & entry ) ; //<S2SV> ZVAL_UNDEF ( & inf ) ; //<S2SV> while ( count -- > 0 ) { //<S2SV> spl_SplObjectStorageElement * pelement ; //<S2SV> zend_string * hash ; //<S2SV> if ( * p != ';' ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> ++ p ; //<S2SV> if ( * p != 'O' && * p != 'C' && * p != 'r' ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> if ( ! php_var_unserialize ( & entry , & p , s + buf_len , & var_hash ) ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> if ( * p == ',' ) { //<S2SV> ++ p ; //<S2SV> if ( ! php_var_unserialize ( & inf , & p , s + buf_len , & var_hash ) ) { //<S2SV> zval_ptr_dtor ( & entry ) ; //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> } //<S2SV> if ( Z_TYPE ( entry ) != IS_OBJECT ) { //<S2SV> zval_ptr_dtor ( & entry ) ; //<S2SV> zval_ptr_dtor ( & inf ) ; //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> hash = spl_object_storage_get_hash ( intern , getThis ( ) , & entry ) ; //<S2SV> if ( ! hash ) { //<S2SV> zval_ptr_dtor ( & entry ) ; //<S2SV> zval_ptr_dtor ( & inf ) ; //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> pelement = spl_object_storage_get ( intern , hash ) ; //<S2SV> spl_object_storage_free_hash ( intern , hash ) ; //<S2SV> if ( pelement ) { //<S2SV> if ( ! Z_ISUNDEF ( pelement -> inf ) ) { //<S2SV> var_push_dtor ( & var_hash , & pelement -> inf ) ; //<S2SV> } //<S2SV> if ( ! Z_ISUNDEF ( pelement -> obj ) ) { //<S2SV> var_push_dtor ( & var_hash , & pelement -> obj ) ; //<S2SV> } //<S2SV> } //<S2SV> element = spl_object_storage_attach ( intern , getThis ( ) , & entry , Z_ISUNDEF ( inf ) ? NULL : & inf ) ; //<S2SV> var_replace ( & var_hash , & entry , & element -> obj ) ; //<S2SV> var_replace ( & var_hash , & inf , & element -> inf ) ; //<S2SV> zval_ptr_dtor ( & entry ) ; //<S2SV> ZVAL_UNDEF ( & entry ) ; //<S2SV> zval_ptr_dtor ( & inf ) ; //<S2SV> ZVAL_UNDEF ( & inf ) ; //<S2SV> } //<S2SV> if ( * p != ';' ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> ++ p ; //<S2SV> if ( * p != 'm' || * ++ p != ':' ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> ++ p ; //<S2SV> pmembers = var_tmp_var ( & var_hash ) ; //<S2SV> if ( ! php_var_unserialize ( pmembers , & p , s + buf_len , & var_hash ) || Z_TYPE_P ( pmembers ) != IS_ARRAY ) { //<S2SV> goto outexcept ; //<S2SV> } //<S2SV> object_properties_load ( & intern -> std , Z_ARRVAL_P ( pmembers ) ) ; //<S2SV> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; //<S2SV> return ; //<S2SV> outexcept : //<S2SV> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; //<S2SV> zend_throw_exception_ex ( spl_ce_UnexpectedValueException , 0 , "Error<S2SV_blank>at<S2SV_blank>offset<S2SV_blank>%pd<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>bytes" , ( zend_long ) ( ( char * ) p - buf ) , buf_len ) ; //<S2SV> return ; //<S2SV> } //<S2SV> 