static int _gd2GetHeader ( gdIOCtxPtr in , int * sx , int * sy , int * cs , int * vers , int * fmt , int * ncx , int * ncy , t_chunk_info * * chunkIdx ) //<S2SV> { //<S2SV> int i ; //<S2SV> int ch ; //<S2SV> char id [ 5 ] ; //<S2SV> t_chunk_info * cidx ; //<S2SV> int sidx ; //<S2SV> int nc ; //<S2SV> GD2_DBG ( php_gd_error ( "Reading<S2SV_blank>gd2<S2SV_blank>header<S2SV_blank>info" ) ) ; //<S2SV> for ( i = 0 ; i < 4 ; i ++ ) { //<S2SV> ch = gdGetC ( in ) ; //<S2SV> if ( ch == EOF ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> id [ i ] = ch ; //<S2SV> } //<S2SV> id [ 4 ] = 0 ; //<S2SV> GD2_DBG ( php_gd_error ( "Got<S2SV_blank>file<S2SV_blank>code:<S2SV_blank>%s" , id ) ) ; //<S2SV> if ( strcmp ( id , GD2_ID ) != 0 ) { //<S2SV> GD2_DBG ( php_gd_error ( "Not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>gd2<S2SV_blank>file" ) ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> if ( gdGetWord ( vers , in ) != 1 ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> GD2_DBG ( php_gd_error ( "Version:<S2SV_blank>%d" , * vers ) ) ; //<S2SV> if ( ( * vers != 1 ) && ( * vers != 2 ) ) { //<S2SV> GD2_DBG ( php_gd_error ( "Bad<S2SV_blank>version:<S2SV_blank>%d" , * vers ) ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> if ( ! gdGetWord ( sx , in ) ) { //<S2SV> GD2_DBG ( php_gd_error ( "Could<S2SV_blank>not<S2SV_blank>get<S2SV_blank>x-size" ) ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> if ( ! gdGetWord ( sy , in ) ) { //<S2SV> GD2_DBG ( php_gd_error ( "Could<S2SV_blank>not<S2SV_blank>get<S2SV_blank>y-size" ) ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> GD2_DBG ( php_gd_error ( "Image<S2SV_blank>is<S2SV_blank>%dx%d" , * sx , * sy ) ) ; //<S2SV> if ( gdGetWord ( cs , in ) != 1 ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> GD2_DBG ( php_gd_error ( "ChunkSize:<S2SV_blank>%d" , * cs ) ) ; //<S2SV> if ( ( * cs < GD2_CHUNKSIZE_MIN ) || ( * cs > GD2_CHUNKSIZE_MAX ) ) { //<S2SV> GD2_DBG ( php_gd_error ( "Bad<S2SV_blank>chunk<S2SV_blank>size:<S2SV_blank>%d" , * cs ) ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> if ( gdGetWord ( fmt , in ) != 1 ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> GD2_DBG ( php_gd_error ( "Format:<S2SV_blank>%d" , * fmt ) ) ; //<S2SV> if ( ( * fmt != GD2_FMT_RAW ) && ( * fmt != GD2_FMT_COMPRESSED ) && ( * fmt != GD2_FMT_TRUECOLOR_RAW ) && ( * fmt != GD2_FMT_TRUECOLOR_COMPRESSED ) ) { //<S2SV> GD2_DBG ( php_gd_error ( "Bad<S2SV_blank>data<S2SV_blank>format:<S2SV_blank>%d" , * fmt ) ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> if ( gdGetWord ( ncx , in ) != 1 ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> GD2_DBG ( php_gd_error ( "%d<S2SV_blank>Chunks<S2SV_blank>Wide" , * ncx ) ) ; //<S2SV> if ( gdGetWord ( ncy , in ) != 1 ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> GD2_DBG ( php_gd_error ( "%d<S2SV_blank>Chunks<S2SV_blank>vertically" , * ncy ) ) ; //<S2SV> if ( gd2_compressed ( * fmt ) ) { //<S2SV> nc = ( * ncx ) * ( * ncy ) ; //<S2SV> GD2_DBG ( php_gd_error ( "Reading<S2SV_blank>%d<S2SV_blank>chunk<S2SV_blank>index<S2SV_blank>entries" , nc ) ) ; //<S2SV> if ( overflow2 ( sidx , nc ) ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> sidx = sizeof ( t_chunk_info ) * nc ; //<S2SV> if ( sidx <= 0 ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> cidx = gdCalloc ( sidx , 1 ) ; //<S2SV> if ( cidx == NULL ) { //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> for ( i = 0 ; i < nc ; i ++ ) { //<S2SV> if ( gdGetInt ( & cidx [ i ] . offset , in ) != 1 ) { //<S2SV> gdFree ( cidx ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> if ( gdGetInt ( & cidx [ i ] . size , in ) != 1 ) { //<S2SV> gdFree ( cidx ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> if ( cidx [ i ] . offset < 0 || cidx [ i ] . size < 0 ) { //<S2SV> gdFree ( cidx ) ; //<S2SV> goto fail1 ; //<S2SV> } //<S2SV> } //<S2SV> * chunkIdx = cidx ; //<S2SV> } //<S2SV> GD2_DBG ( php_gd_error ( "gd2<S2SV_blank>header<S2SV_blank>complete" ) ) ; //<S2SV> return 1 ; //<S2SV> fail1 : //<S2SV> return 0 ; //<S2SV> } //<S2SV> 