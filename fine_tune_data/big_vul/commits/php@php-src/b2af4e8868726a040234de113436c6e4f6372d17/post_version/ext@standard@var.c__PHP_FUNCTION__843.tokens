PHP_FUNCTION ( unserialize ) //<S2SV> { //<S2SV> char * buf = NULL ; //<S2SV> size_t buf_len ; //<S2SV> const unsigned char * p ; //<S2SV> php_unserialize_data_t var_hash ; //<S2SV> zval * options = NULL , * classes = NULL ; //<S2SV> zval * retval ; //<S2SV> HashTable * class_hash = NULL ; //<S2SV> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) , "s|a" , & buf , & buf_len , & options ) == FAILURE ) { //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( buf_len == 0 ) { //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> p = ( const unsigned char * ) buf ; //<S2SV> PHP_VAR_UNSERIALIZE_INIT ( var_hash ) ; //<S2SV> if ( options != NULL ) { //<S2SV> classes = zend_hash_str_find ( Z_ARRVAL_P ( options ) , "allowed_classes" , sizeof ( "allowed_classes" ) - 1 ) ; //<S2SV> if ( classes && ( Z_TYPE_P ( classes ) == IS_ARRAY || ! zend_is_true ( classes ) ) ) { //<S2SV> ALLOC_HASHTABLE ( class_hash ) ; //<S2SV> zend_hash_init ( class_hash , ( Z_TYPE_P ( classes ) == IS_ARRAY ) ? zend_hash_num_elements ( Z_ARRVAL_P ( classes ) ) : 0 , NULL , NULL , 0 ) ; //<S2SV> } //<S2SV> if ( class_hash && Z_TYPE_P ( classes ) == IS_ARRAY ) { //<S2SV> zval * entry ; //<S2SV> zend_string * lcname ; //<S2SV> ZEND_HASH_FOREACH_VAL ( Z_ARRVAL_P ( classes ) , entry ) { //<S2SV> convert_to_string_ex ( entry ) ; //<S2SV> lcname = zend_string_tolower ( Z_STR_P ( entry ) ) ; //<S2SV> zend_hash_add_empty_element ( class_hash , lcname ) ; //<S2SV> zend_string_release ( lcname ) ; //<S2SV> } ZEND_HASH_FOREACH_END ( ) ; //<S2SV> } //<S2SV> } //<S2SV> retval = var_tmp_var ( & var_hash ) ; //<S2SV> if ( ! php_var_unserialize_ex ( retval , & p , p + buf_len , & var_hash , class_hash ) ) { //<S2SV> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; //<S2SV> if ( class_hash ) { //<S2SV> zend_hash_destroy ( class_hash ) ; //<S2SV> FREE_HASHTABLE ( class_hash ) ; //<S2SV> } //<S2SV> if ( ! EG ( exception ) ) { //<S2SV> php_error_docref ( NULL , E_NOTICE , "Error<S2SV_blank>at<S2SV_blank>offset<S2SV_blank>" ZEND_LONG_FMT "<S2SV_blank>of<S2SV_blank>%zd<S2SV_blank>bytes" , //<S2SV> ( zend_long ) ( ( char * ) p - buf ) , buf_len ) ; //<S2SV> } //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> ZVAL_COPY ( return_value , retval ) ; //<S2SV> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash ) ; //<S2SV> if ( class_hash ) { //<S2SV> zend_hash_destroy ( class_hash ) ; //<S2SV> FREE_HASHTABLE ( class_hash ) ; //<S2SV> } //<S2SV> } //<S2SV> 