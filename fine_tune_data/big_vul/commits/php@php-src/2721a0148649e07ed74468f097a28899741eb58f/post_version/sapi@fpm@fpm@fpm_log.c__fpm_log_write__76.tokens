int fpm_log_write ( char * log_format ) //<S2SV> { //<S2SV> char * s , * b ; //<S2SV> char buffer [ FPM_LOG_BUFFER + 1 ] ; //<S2SV> int token , test ; //<S2SV> size_t len , len2 ; //<S2SV> struct fpm_scoreboard_proc_s proc , * proc_p ; //<S2SV> struct fpm_scoreboard_s * scoreboard ; //<S2SV> char tmp [ 129 ] ; //<S2SV> char format [ 129 ] ; //<S2SV> time_t now_epoch ; //<S2SV> # ifdef HAVE_TIMES //<S2SV> clock_t tms_total ; //<S2SV> # endif //<S2SV> if ( ! log_format && ( ! fpm_log_format || fpm_log_fd == - 1 ) ) { //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! log_format ) { //<S2SV> log_format = fpm_log_format ; //<S2SV> test = 0 ; //<S2SV> } else { //<S2SV> test = 1 ; //<S2SV> } //<S2SV> now_epoch = time ( NULL ) ; //<S2SV> if ( ! test ) { //<S2SV> scoreboard = fpm_scoreboard_get ( ) ; //<S2SV> if ( ! scoreboard ) { //<S2SV> zlog ( ZLOG_WARNING , "unable<S2SV_blank>to<S2SV_blank>get<S2SV_blank>scoreboard<S2SV_blank>while<S2SV_blank>preparing<S2SV_blank>the<S2SV_blank>access<S2SV_blank>log" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> proc_p = fpm_scoreboard_proc_acquire ( NULL , - 1 , 0 ) ; //<S2SV> if ( ! proc_p ) { //<S2SV> zlog ( ZLOG_WARNING , "[pool<S2SV_blank>%s]<S2SV_blank>Unable<S2SV_blank>to<S2SV_blank>acquire<S2SV_blank>shm<S2SV_blank>slot<S2SV_blank>while<S2SV_blank>preparing<S2SV_blank>the<S2SV_blank>access<S2SV_blank>log" , scoreboard -> pool ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> proc = * proc_p ; //<S2SV> fpm_scoreboard_proc_release ( proc_p ) ; //<S2SV> } //<S2SV> token = 0 ; //<S2SV> memset ( buffer , '\\0' , sizeof ( buffer ) ) ; //<S2SV> b = buffer ; //<S2SV> len = 0 ; //<S2SV> s = log_format ; //<S2SV> while ( * s != '\\0' ) { //<S2SV> if ( len >= FPM_LOG_BUFFER ) { //<S2SV> zlog ( ZLOG_NOTICE , "the<S2SV_blank>log<S2SV_blank>buffer<S2SV_blank>is<S2SV_blank>full<S2SV_blank>(%d).<S2SV_blank>The<S2SV_blank>access<S2SV_blank>log<S2SV_blank>request<S2SV_blank>has<S2SV_blank>been<S2SV_blank>truncated." , FPM_LOG_BUFFER ) ; //<S2SV> len = FPM_LOG_BUFFER ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! token && * s == '%' ) { //<S2SV> token = 1 ; //<S2SV> memset ( format , '\\0' , sizeof ( format ) ) ; //<S2SV> s ++ ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( token ) { //<S2SV> token = 0 ; //<S2SV> len2 = 0 ; //<S2SV> switch ( * s ) { //<S2SV> case '%' : //<S2SV> * b = '%' ; //<S2SV> len2 = 1 ; //<S2SV> break ; //<S2SV> # ifdef HAVE_TIMES //<S2SV> case 'C' : //<S2SV> if ( format [ 0 ] == '\\0' || ! strcasecmp ( format , "total" ) ) { //<S2SV> if ( ! test ) { //<S2SV> tms_total = proc . last_request_cpu . tms_utime + proc . last_request_cpu . tms_stime + proc . last_request_cpu . tms_cutime + proc . last_request_cpu . tms_cstime ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( format , "user" ) ) { //<S2SV> if ( ! test ) { //<S2SV> tms_total = proc . last_request_cpu . tms_utime + proc . last_request_cpu . tms_cutime ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( format , "system" ) ) { //<S2SV> if ( ! test ) { //<S2SV> tms_total = proc . last_request_cpu . tms_stime + proc . last_request_cpu . tms_cstime ; //<S2SV> } //<S2SV> } else { //<S2SV> zlog ( ZLOG_WARNING , "only<S2SV_blank>\'total\',<S2SV_blank>\'user\'<S2SV_blank>or<S2SV_blank>\'system\'<S2SV_blank>are<S2SV_blank>allowed<S2SV_blank>as<S2SV_blank>a<S2SV_blank>modifier<S2SV_blank>for<S2SV_blank>%%%c<S2SV_blank>(\'%s\')" , * s , format ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> format [ 0 ] = '\\0' ; //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%.2f" , tms_total / fpm_scoreboard_get_tick ( ) / ( proc . cpu_duration . tv_sec + proc . cpu_duration . tv_usec / 1000000. ) * 100. ) ; //<S2SV> } //<S2SV> break ; //<S2SV> # endif //<S2SV> case 'd' : //<S2SV> if ( format [ 0 ] == '\\0' || ! strcasecmp ( format , "seconds" ) ) { //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%.3f" , proc . duration . tv_sec + proc . duration . tv_usec / 1000000. ) ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( format , "miliseconds" ) || ! strcasecmp ( format , "mili" ) ) { //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%.3f" , proc . duration . tv_sec * 1000. + proc . duration . tv_usec / 1000. ) ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( format , "microseconds" ) || ! strcasecmp ( format , "micro" ) ) { //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%lu" , proc . duration . tv_sec * 1000000UL + proc . duration . tv_usec ) ; //<S2SV> } //<S2SV> } else { //<S2SV> zlog ( ZLOG_WARNING , "only<S2SV_blank>\'seconds\',<S2SV_blank>\'mili\',<S2SV_blank>\'miliseconds\',<S2SV_blank>\'micro\'<S2SV_blank>or<S2SV_blank>\'microseconds\'<S2SV_blank>are<S2SV_blank>allowed<S2SV_blank>as<S2SV_blank>a<S2SV_blank>modifier<S2SV_blank>for<S2SV_blank>%%%c<S2SV_blank>(\'%s\')" , * s , format ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> format [ 0 ] = '\\0' ; //<S2SV> break ; //<S2SV> case 'e' : //<S2SV> if ( format [ 0 ] == '\\0' ) { //<S2SV> zlog ( ZLOG_WARNING , "the<S2SV_blank>name<S2SV_blank>of<S2SV_blank>the<S2SV_blank>environment<S2SV_blank>variable<S2SV_blank>must<S2SV_blank>be<S2SV_blank>set<S2SV_blank>between<S2SV_blank>embraces<S2SV_blank>for<S2SV_blank>%%%c" , * s ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! test ) { //<S2SV> char * env = fcgi_getenv ( ( fcgi_request * ) SG ( server_context ) , format , strlen ( format ) ) ; //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , env ? env : "-" ) ; //<S2SV> } //<S2SV> format [ 0 ] = '\\0' ; //<S2SV> break ; //<S2SV> case 'f' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , * proc . script_filename ? proc . script_filename : "-" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'l' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%zu" , proc . content_length ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'm' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , * proc . request_method ? proc . request_method : "-" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'M' : //<S2SV> if ( format [ 0 ] == '\\0' || ! strcasecmp ( format , "bytes" ) ) { //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%zu" , proc . memory ) ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( format , "kilobytes" ) || ! strcasecmp ( format , "kilo" ) ) { //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%lu" , proc . memory / 1024 ) ; //<S2SV> } //<S2SV> } else if ( ! strcasecmp ( format , "megabytes" ) || ! strcasecmp ( format , "mega" ) ) { //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%lu" , proc . memory / 1024 / 1024 ) ; //<S2SV> } //<S2SV> } else { //<S2SV> zlog ( ZLOG_WARNING , "only<S2SV_blank>\'bytes\',<S2SV_blank>\'kilo\',<S2SV_blank>\'kilobytes\',<S2SV_blank>\'mega\'<S2SV_blank>or<S2SV_blank>\'megabytes\'<S2SV_blank>are<S2SV_blank>allowed<S2SV_blank>as<S2SV_blank>a<S2SV_blank>modifier<S2SV_blank>for<S2SV_blank>%%%c<S2SV_blank>(\'%s\')" , * s , format ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> format [ 0 ] = '\\0' ; //<S2SV> break ; //<S2SV> case 'n' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , scoreboard -> pool [ 0 ] ? scoreboard -> pool : "-" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'o' : //<S2SV> if ( format [ 0 ] == '\\0' ) { //<S2SV> zlog ( ZLOG_WARNING , "the<S2SV_blank>name<S2SV_blank>of<S2SV_blank>the<S2SV_blank>header<S2SV_blank>must<S2SV_blank>be<S2SV_blank>set<S2SV_blank>between<S2SV_blank>embraces<S2SV_blank>for<S2SV_blank>%%%c" , * s ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( ! test ) { //<S2SV> sapi_header_struct * h ; //<S2SV> zend_llist_position pos ; //<S2SV> sapi_headers_struct * sapi_headers = & SG ( sapi_headers ) ; //<S2SV> size_t format_len = strlen ( format ) ; //<S2SV> h = ( sapi_header_struct * ) zend_llist_get_first_ex ( & sapi_headers -> headers , & pos ) ; //<S2SV> while ( h ) { //<S2SV> char * header ; //<S2SV> if ( ! h -> header_len ) { //<S2SV> h = ( sapi_header_struct * ) zend_llist_get_next_ex ( & sapi_headers -> headers , & pos ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! strstr ( h -> header , format ) ) { //<S2SV> h = ( sapi_header_struct * ) zend_llist_get_next_ex ( & sapi_headers -> headers , & pos ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( h -> header_len <= format_len + 2 ) { //<S2SV> h = ( sapi_header_struct * ) zend_llist_get_next_ex ( & sapi_headers -> headers , & pos ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> if ( h -> header [ format_len ] != ':' || h -> header [ format_len + 1 ] != '<S2SV_blank>' ) { //<S2SV> h = ( sapi_header_struct * ) zend_llist_get_next_ex ( & sapi_headers -> headers , & pos ) ; //<S2SV> continue ; //<S2SV> } //<S2SV> header = h -> header + format_len + 2 ; //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , header && * header ? header : "-" ) ; //<S2SV> break ; //<S2SV> } //<S2SV> if ( ! len2 ) { //<S2SV> len2 = 1 ; //<S2SV> * b = '-' ; //<S2SV> } //<S2SV> } //<S2SV> format [ 0 ] = '\\0' ; //<S2SV> break ; //<S2SV> case 'p' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%ld" , ( long ) getpid ( ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'P' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%ld" , ( long ) getppid ( ) ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'q' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , proc . query_string ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'Q' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , * proc . query_string ? "?" : "" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'r' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , proc . request_uri ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'R' : //<S2SV> if ( ! test ) { //<S2SV> const char * tmp = fcgi_get_last_client_ip ( ) ; //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , tmp ? tmp : "-" ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 's' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%d" , SG ( sapi_headers ) . http_response_code ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case 'T' : //<S2SV> case 't' : //<S2SV> if ( ! test ) { //<S2SV> time_t * t ; //<S2SV> if ( * s == 't' ) { //<S2SV> t = & proc . accepted_epoch ; //<S2SV> } else { //<S2SV> t = & now_epoch ; //<S2SV> } //<S2SV> if ( format [ 0 ] == '\\0' ) { //<S2SV> strftime ( tmp , sizeof ( tmp ) - 1 , "%d/%b/%Y:%H:%M:%S<S2SV_blank>%z" , localtime ( t ) ) ; //<S2SV> } else { //<S2SV> strftime ( tmp , sizeof ( tmp ) - 1 , format , localtime ( t ) ) ; //<S2SV> } //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , tmp ) ; //<S2SV> } //<S2SV> format [ 0 ] = '\\0' ; //<S2SV> break ; //<S2SV> case 'u' : //<S2SV> if ( ! test ) { //<S2SV> len2 = snprintf ( b , FPM_LOG_BUFFER - len , "%s" , proc . auth_user ) ; //<S2SV> } //<S2SV> break ; //<S2SV> case '{' : //<S2SV> token = 1 ; //<S2SV> { //<S2SV> char * start ; //<S2SV> size_t l ; //<S2SV> start = ++ s ; //<S2SV> while ( * s != '\\0' ) { //<S2SV> if ( * s == '}' ) { //<S2SV> l = s - start ; //<S2SV> if ( l >= sizeof ( format ) - 1 ) { //<S2SV> l = sizeof ( format ) - 1 ; //<S2SV> } //<S2SV> memcpy ( format , start , l ) ; //<S2SV> format [ l ] = '\\0' ; //<S2SV> break ; //<S2SV> } //<S2SV> s ++ ; //<S2SV> } //<S2SV> if ( s [ 1 ] == '\\0' ) { //<S2SV> zlog ( ZLOG_WARNING , "missing<S2SV_blank>closing<S2SV_blank>embrace<S2SV_blank>in<S2SV_blank>the<S2SV_blank>access.format" ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> zlog ( ZLOG_WARNING , "Invalid<S2SV_blank>token<S2SV_blank>in<S2SV_blank>the<S2SV_blank>access.format<S2SV_blank>(%%%c)" , * s ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> if ( * s != '}' && format [ 0 ] != '\\0' ) { //<S2SV> zlog ( ZLOG_WARNING , "embrace<S2SV_blank>is<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>for<S2SV_blank>modifier<S2SV_blank>%%%c" , * s ) ; //<S2SV> return - 1 ; //<S2SV> } //<S2SV> s ++ ; //<S2SV> if ( ! test ) { //<S2SV> b += len2 ; //<S2SV> len += len2 ; //<S2SV> } //<S2SV> if ( len >= FPM_LOG_BUFFER ) { //<S2SV> zlog ( ZLOG_NOTICE , "the<S2SV_blank>log<S2SV_blank>buffer<S2SV_blank>is<S2SV_blank>full<S2SV_blank>(%d).<S2SV_blank>The<S2SV_blank>access<S2SV_blank>log<S2SV_blank>request<S2SV_blank>has<S2SV_blank>been<S2SV_blank>truncated." , FPM_LOG_BUFFER ) ; //<S2SV> len = FPM_LOG_BUFFER ; //<S2SV> break ; //<S2SV> } //<S2SV> continue ; //<S2SV> } //<S2SV> if ( ! test ) { //<S2SV> * b = * s ; //<S2SV> b ++ ; //<S2SV> len ++ ; //<S2SV> } //<S2SV> s ++ ; //<S2SV> } //<S2SV> if ( ! test && strlen ( buffer ) > 0 ) { //<S2SV> buffer [ len ] = '\\n' ; //<S2SV> write ( fpm_log_fd , buffer , len + 1 ) ; //<S2SV> } //<S2SV> return 0 ; //<S2SV> } //<S2SV> 