void pdo_stmt_init ( TSRMLS_D ) //<S2SV> { //<S2SV> zend_class_entry ce ; //<S2SV> INIT_CLASS_ENTRY ( ce , "PDOStatement" , pdo_dbstmt_functions ) ; //<S2SV> pdo_dbstmt_ce = zend_register_internal_class ( & ce TSRMLS_CC ) ; //<S2SV> pdo_dbstmt_ce -> get_iterator = pdo_stmt_iter_get ; //<S2SV> pdo_dbstmt_ce -> create_object = pdo_dbstmt_new ; //<S2SV> zend_class_implements ( pdo_dbstmt_ce TSRMLS_CC , 1 , zend_ce_traversable ) ; //<S2SV> zend_declare_property_null ( pdo_dbstmt_ce , "queryString" , sizeof ( "queryString" ) - 1 , ZEND_ACC_PUBLIC TSRMLS_CC ) ; //<S2SV> memcpy ( & pdo_dbstmt_object_handlers , & std_object_handlers , sizeof ( zend_object_handlers ) ) ; //<S2SV> pdo_dbstmt_object_handlers . write_property = dbstmt_prop_write ; //<S2SV> pdo_dbstmt_object_handlers . unset_property = dbstmt_prop_delete ; //<S2SV> pdo_dbstmt_object_handlers . get_method = dbstmt_method_get ; //<S2SV> pdo_dbstmt_object_handlers . compare_objects = dbstmt_compare ; //<S2SV> pdo_dbstmt_object_handlers . clone_obj = dbstmt_clone_obj ; //<S2SV> INIT_CLASS_ENTRY ( ce , "PDORow" , pdo_row_functions ) ; //<S2SV> pdo_row_ce = zend_register_internal_class ( & ce TSRMLS_CC ) ; //<S2SV> pdo_row_ce -> ce_flags |= ZEND_ACC_FINAL_CLASS ; //<S2SV> pdo_row_ce -> create_object = pdo_row_new ; //<S2SV> pdo_row_ce -> serialize = pdo_row_serialize ; //<S2SV> } //<S2SV> 