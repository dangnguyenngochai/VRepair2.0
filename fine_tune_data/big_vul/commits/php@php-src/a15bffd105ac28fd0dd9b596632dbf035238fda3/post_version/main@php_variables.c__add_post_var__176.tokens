static zend_bool add_post_var ( zval * arr , post_var_data_t * var , zend_bool eof ) //<S2SV> { //<S2SV> char * start , * ksep , * vsep , * val ; //<S2SV> size_t klen , vlen ; //<S2SV> size_t new_vlen ; //<S2SV> if ( var -> ptr >= var -> end ) { //<S2SV> return 0 ; //<S2SV> } //<S2SV> start = var -> ptr + var -> already_scanned ; //<S2SV> vsep = memchr ( start , '&' , var -> end - start ) ; //<S2SV> if ( ! vsep ) { //<S2SV> if ( ! eof ) { //<S2SV> var -> already_scanned = var -> end - var -> ptr ; //<S2SV> return 0 ; //<S2SV> } else { //<S2SV> vsep = var -> end ; //<S2SV> } //<S2SV> } //<S2SV> ksep = memchr ( var -> ptr , '=' , vsep - var -> ptr ) ; //<S2SV> if ( ksep ) { //<S2SV> * ksep = '\\0' ; //<S2SV> klen = ksep - var -> ptr ; //<S2SV> vlen = vsep - ++ ksep ; //<S2SV> } else { //<S2SV> ksep = "" ; //<S2SV> klen = vsep - var -> ptr ; //<S2SV> vlen = 0 ; //<S2SV> } //<S2SV> php_url_decode ( var -> ptr , klen ) ; //<S2SV> val = estrndup ( ksep , vlen ) ; //<S2SV> if ( vlen ) { //<S2SV> vlen = php_url_decode ( val , vlen ) ; //<S2SV> } //<S2SV> if ( sapi_module . input_filter ( PARSE_POST , var -> ptr , & val , vlen , & new_vlen ) ) { //<S2SV> php_register_variable_safe ( var -> ptr , val , new_vlen , arr ) ; //<S2SV> } //<S2SV> efree ( val ) ; //<S2SV> var -> ptr = vsep + ( vsep != var -> end ) ; //<S2SV> var -> already_scanned = 0 ; //<S2SV> return 1 ; //<S2SV> } //<S2SV> 