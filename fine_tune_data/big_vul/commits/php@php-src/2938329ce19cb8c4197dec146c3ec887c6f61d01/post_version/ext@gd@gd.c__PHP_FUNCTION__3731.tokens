PHP_FUNCTION ( imageaffine ) //<S2SV> { //<S2SV> zval * IM ; //<S2SV> gdImagePtr src ; //<S2SV> gdImagePtr dst ; //<S2SV> gdRect rect ; //<S2SV> gdRectPtr pRect = NULL ; //<S2SV> zval * z_rect = NULL ; //<S2SV> zval * z_affine ; //<S2SV> zval * * tmp ; //<S2SV> double affine [ 6 ] ; //<S2SV> int i , nelems ; //<S2SV> zval * * zval_affine_elem = NULL ; //<S2SV> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) TSRMLS_CC , "ra|a" , & IM , & z_affine , & z_rect ) == FAILURE ) { //<S2SV> return ; //<S2SV> } //<S2SV> ZEND_FETCH_RESOURCE ( src , gdImagePtr , & IM , - 1 , "Image" , le_gd ) ; //<S2SV> if ( ( nelems = zend_hash_num_elements ( Z_ARRVAL_P ( z_affine ) ) ) != 6 ) { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Affine<S2SV_blank>array<S2SV_blank>must<S2SV_blank>have<S2SV_blank>six<S2SV_blank>elements" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> for ( i = 0 ; i < nelems ; i ++ ) { //<S2SV> if ( zend_hash_index_find ( Z_ARRVAL_P ( z_affine ) , i , ( void * * ) & zval_affine_elem ) == SUCCESS ) { //<S2SV> switch ( Z_TYPE_PP ( zval_affine_elem ) ) { //<S2SV> case IS_LONG : //<S2SV> affine [ i ] = Z_LVAL_PP ( zval_affine_elem ) ; //<S2SV> break ; //<S2SV> case IS_DOUBLE : //<S2SV> affine [ i ] = Z_DVAL_PP ( zval_affine_elem ) ; //<S2SV> break ; //<S2SV> case IS_STRING : //<S2SV> { //<S2SV> zval dval ; //<S2SV> dval = * * zval_affine_elem ; //<S2SV> zval_copy_ctor ( & dval ) ; //<S2SV> convert_to_double ( & dval ) ; //<S2SV> affine [ i ] = Z_DVAL ( dval ) ; //<S2SV> } //<S2SV> break ; //<S2SV> default : //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Invalid<S2SV_blank>type<S2SV_blank>for<S2SV_blank>element<S2SV_blank>%i" , i ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> if ( z_rect != NULL ) { //<S2SV> if ( zend_hash_find ( HASH_OF ( z_rect ) , "x" , sizeof ( "x" ) , ( void * * ) & tmp ) != FAILURE ) { //<S2SV> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { //<S2SV> zval lval ; //<S2SV> lval = * * tmp ; //<S2SV> zval_copy_ctor ( & lval ) ; //<S2SV> convert_to_long ( & lval ) ; //<S2SV> rect . x = Z_LVAL ( lval ) ; //<S2SV> } else { //<S2SV> rect . x = Z_LVAL_PP ( tmp ) ; //<S2SV> } //<S2SV> } else { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Missing<S2SV_blank>x<S2SV_blank>position" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( zend_hash_find ( HASH_OF ( z_rect ) , "y" , sizeof ( "x" ) , ( void * * ) & tmp ) != FAILURE ) { //<S2SV> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { //<S2SV> zval lval ; //<S2SV> lval = * * tmp ; //<S2SV> zval_copy_ctor ( & lval ) ; //<S2SV> convert_to_long ( & lval ) ; //<S2SV> rect . y = Z_LVAL ( lval ) ; //<S2SV> } else { //<S2SV> rect . y = Z_LVAL_PP ( tmp ) ; //<S2SV> } //<S2SV> } else { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Missing<S2SV_blank>y<S2SV_blank>position" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( zend_hash_find ( HASH_OF ( z_rect ) , "width" , sizeof ( "width" ) , ( void * * ) & tmp ) != FAILURE ) { //<S2SV> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { //<S2SV> zval lval ; //<S2SV> lval = * * tmp ; //<S2SV> zval_copy_ctor ( & lval ) ; //<S2SV> convert_to_long ( & lval ) ; //<S2SV> rect . width = Z_LVAL ( lval ) ; //<S2SV> } else { //<S2SV> rect . width = Z_LVAL_PP ( tmp ) ; //<S2SV> } //<S2SV> } else { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Missing<S2SV_blank>width" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( zend_hash_find ( HASH_OF ( z_rect ) , "height" , sizeof ( "height" ) , ( void * * ) & tmp ) != FAILURE ) { //<S2SV> if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { //<S2SV> zval lval ; //<S2SV> lval = * * tmp ; //<S2SV> zval_copy_ctor ( & lval ) ; //<S2SV> convert_to_long ( & lval ) ; //<S2SV> rect . height = Z_LVAL ( lval ) ; //<S2SV> } else { //<S2SV> rect . height = Z_LVAL_PP ( tmp ) ; //<S2SV> } //<S2SV> } else { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Missing<S2SV_blank>height" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> pRect = & rect ; //<S2SV> } else { //<S2SV> rect . x = - 1 ; //<S2SV> rect . y = - 1 ; //<S2SV> rect . width = gdImageSX ( src ) ; //<S2SV> rect . height = gdImageSY ( src ) ; //<S2SV> pRect = NULL ; //<S2SV> } //<S2SV> if ( gdTransformAffineGetImage ( & dst , src , pRect , affine ) != GD_TRUE ) { //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( dst == NULL ) { //<S2SV> RETURN_FALSE ; //<S2SV> } else { //<S2SV> ZEND_REGISTER_RESOURCE ( return_value , dst , le_gd ) ; //<S2SV> } //<S2SV> } //<S2SV> 