PHP_FUNCTION ( imageaffinematrixget ) //<S2SV> { //<S2SV> double affine [ 6 ] ; //<S2SV> long type ; //<S2SV> zval * options ; //<S2SV> zval * * tmp ; //<S2SV> int res = GD_FALSE , i ; //<S2SV> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) TSRMLS_CC , "l|z" , & type , & options ) == FAILURE ) { //<S2SV> return ; //<S2SV> } //<S2SV> switch ( ( gdAffineStandardMatrix ) type ) { //<S2SV> case GD_AFFINE_TRANSLATE : //<S2SV> case GD_AFFINE_SCALE : { //<S2SV> double x , y ; //<S2SV> if ( Z_TYPE_P ( options ) != IS_ARRAY ) { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Array<S2SV_blank>expected<S2SV_blank>as<S2SV_blank>options" ) ; //<S2SV> } //<S2SV> if ( zend_hash_find ( HASH_OF ( options ) , "x" , sizeof ( "x" ) , ( void * * ) & tmp ) != FAILURE ) { //<S2SV> convert_to_double_ex ( tmp ) ; //<S2SV> x = Z_DVAL_PP ( tmp ) ; //<S2SV> } else { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Missing<S2SV_blank>x<S2SV_blank>position" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( zend_hash_find ( HASH_OF ( options ) , "y" , sizeof ( "y" ) , ( void * * ) & tmp ) != FAILURE ) { //<S2SV> convert_to_double_ex ( tmp ) ; //<S2SV> y = Z_DVAL_PP ( tmp ) ; //<S2SV> } else { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Missing<S2SV_blank>y<S2SV_blank>position" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( type == GD_AFFINE_TRANSLATE ) { //<S2SV> res = gdAffineTranslate ( affine , x , y ) ; //<S2SV> } else { //<S2SV> res = gdAffineScale ( affine , x , y ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> case GD_AFFINE_ROTATE : //<S2SV> case GD_AFFINE_SHEAR_HORIZONTAL : //<S2SV> case GD_AFFINE_SHEAR_VERTICAL : { //<S2SV> double angle ; //<S2SV> convert_to_double_ex ( & options ) ; //<S2SV> angle = Z_DVAL_P ( options ) ; //<S2SV> if ( type == GD_AFFINE_SHEAR_HORIZONTAL ) { //<S2SV> res = gdAffineShearHorizontal ( affine , angle ) ; //<S2SV> } else if ( type == GD_AFFINE_SHEAR_VERTICAL ) { //<S2SV> res = gdAffineShearVertical ( affine , angle ) ; //<S2SV> } else { //<S2SV> res = gdAffineRotate ( affine , angle ) ; //<S2SV> } //<S2SV> break ; //<S2SV> } //<S2SV> default : //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Invalid<S2SV_blank>type<S2SV_blank>for<S2SV_blank>element<S2SV_blank>%li" , type ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> if ( res == GD_FALSE ) { //<S2SV> RETURN_FALSE ; //<S2SV> } else { //<S2SV> array_init ( return_value ) ; //<S2SV> for ( i = 0 ; i < 6 ; i ++ ) { //<S2SV> add_index_double ( return_value , i , affine [ i ] ) ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> 