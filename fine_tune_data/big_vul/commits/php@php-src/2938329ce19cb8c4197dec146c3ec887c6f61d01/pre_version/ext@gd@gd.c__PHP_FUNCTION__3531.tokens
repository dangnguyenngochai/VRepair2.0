PHP_FUNCTION ( imageconvolution ) //<S2SV> { //<S2SV> zval * SIM , * hash_matrix ; //<S2SV> zval * * var = NULL , * * var2 = NULL ; //<S2SV> gdImagePtr im_src = NULL ; //<S2SV> double div , offset ; //<S2SV> int nelem , i , j , res ; //<S2SV> float matrix [ 3 ] [ 3 ] = { { 0 , 0 , 0 } , { 0 , 0 , 0 } , { 0 , 0 , 0 } } ; //<S2SV> if ( zend_parse_parameters ( ZEND_NUM_ARGS ( ) TSRMLS_CC , "radd" , & SIM , & hash_matrix , & div , & offset ) == FAILURE ) { //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> ZEND_FETCH_RESOURCE ( im_src , gdImagePtr , & SIM , - 1 , "Image" , le_gd ) ; //<S2SV> nelem = zend_hash_num_elements ( Z_ARRVAL_P ( hash_matrix ) ) ; //<S2SV> if ( nelem != 3 ) { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "You<S2SV_blank>must<S2SV_blank>have<S2SV_blank>3x3<S2SV_blank>array" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> for ( i = 0 ; i < 3 ; i ++ ) { //<S2SV> if ( zend_hash_index_find ( Z_ARRVAL_P ( hash_matrix ) , ( i ) , ( void * * ) & var ) == SUCCESS && Z_TYPE_PP ( var ) == IS_ARRAY ) { //<S2SV> if ( Z_TYPE_PP ( var ) != IS_ARRAY || zend_hash_num_elements ( Z_ARRVAL_PP ( var ) ) != 3 ) { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "You<S2SV_blank>must<S2SV_blank>have<S2SV_blank>3x3<S2SV_blank>array" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> for ( j = 0 ; j < 3 ; j ++ ) { //<S2SV> if ( zend_hash_index_find ( Z_ARRVAL_PP ( var ) , ( j ) , ( void * * ) & var2 ) == SUCCESS ) { //<S2SV> SEPARATE_ZVAL ( var2 ) ; //<S2SV> convert_to_double ( * var2 ) ; //<S2SV> matrix [ i ] [ j ] = ( float ) Z_DVAL_PP ( var2 ) ; //<S2SV> } else { //<S2SV> php_error_docref ( NULL TSRMLS_CC , E_WARNING , "You<S2SV_blank>must<S2SV_blank>have<S2SV_blank>a<S2SV_blank>3x3<S2SV_blank>matrix" ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> } //<S2SV> res = gdImageConvolution ( im_src , matrix , ( float ) div , ( float ) offset ) ; //<S2SV> if ( res ) { //<S2SV> RETURN_TRUE ; //<S2SV> } else { //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> } //<S2SV> 