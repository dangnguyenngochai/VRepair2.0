PHP_MINIT_FUNCTION ( spl_array ) //<S2SV> { //<S2SV> REGISTER_SPL_STD_CLASS_EX ( ArrayObject , spl_array_object_new , spl_funcs_ArrayObject ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayObject , Aggregate ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayObject , ArrayAccess ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayObject , Serializable ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayObject , Countable ) ; //<S2SV> memcpy ( & spl_handler_ArrayObject , zend_get_std_object_handlers ( ) , sizeof ( zend_object_handlers ) ) ; //<S2SV> spl_handler_ArrayObject . clone_obj = spl_array_object_clone ; //<S2SV> spl_handler_ArrayObject . read_dimension = spl_array_read_dimension ; //<S2SV> spl_handler_ArrayObject . write_dimension = spl_array_write_dimension ; //<S2SV> spl_handler_ArrayObject . unset_dimension = spl_array_unset_dimension ; //<S2SV> spl_handler_ArrayObject . has_dimension = spl_array_has_dimension ; //<S2SV> spl_handler_ArrayObject . count_elements = spl_array_object_count_elements ; //<S2SV> spl_handler_ArrayObject . get_properties = spl_array_get_properties ; //<S2SV> spl_handler_ArrayObject . get_debug_info = spl_array_get_debug_info ; //<S2SV> spl_handler_ArrayObject . get_gc = spl_array_get_gc ; //<S2SV> spl_handler_ArrayObject . read_property = spl_array_read_property ; //<S2SV> spl_handler_ArrayObject . write_property = spl_array_write_property ; //<S2SV> spl_handler_ArrayObject . get_property_ptr_ptr = spl_array_get_property_ptr_ptr ; //<S2SV> spl_handler_ArrayObject . has_property = spl_array_has_property ; //<S2SV> spl_handler_ArrayObject . unset_property = spl_array_unset_property ; //<S2SV> spl_handler_ArrayObject . compare_objects = spl_array_compare_objects ; //<S2SV> REGISTER_SPL_STD_CLASS_EX ( ArrayIterator , spl_array_object_new , spl_funcs_ArrayIterator ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayIterator , Iterator ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayIterator , ArrayAccess ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayIterator , SeekableIterator ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayIterator , Serializable ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( ArrayIterator , Countable ) ; //<S2SV> memcpy ( & spl_handler_ArrayIterator , & spl_handler_ArrayObject , sizeof ( zend_object_handlers ) ) ; //<S2SV> spl_ce_ArrayIterator -> get_iterator = spl_array_get_iterator ; //<S2SV> REGISTER_SPL_SUB_CLASS_EX ( RecursiveArrayIterator , ArrayIterator , spl_array_object_new , spl_funcs_RecursiveArrayIterator ) ; //<S2SV> REGISTER_SPL_IMPLEMENTS ( RecursiveArrayIterator , RecursiveIterator ) ; //<S2SV> spl_ce_RecursiveArrayIterator -> get_iterator = spl_array_get_iterator ; //<S2SV> REGISTER_SPL_CLASS_CONST_LONG ( ArrayObject , "STD_PROP_LIST" , SPL_ARRAY_STD_PROP_LIST ) ; //<S2SV> REGISTER_SPL_CLASS_CONST_LONG ( ArrayObject , "ARRAY_AS_PROPS" , SPL_ARRAY_ARRAY_AS_PROPS ) ; //<S2SV> REGISTER_SPL_CLASS_CONST_LONG ( ArrayIterator , "STD_PROP_LIST" , SPL_ARRAY_STD_PROP_LIST ) ; //<S2SV> REGISTER_SPL_CLASS_CONST_LONG ( ArrayIterator , "ARRAY_AS_PROPS" , SPL_ARRAY_ARRAY_AS_PROPS ) ; //<S2SV> REGISTER_SPL_CLASS_CONST_LONG ( RecursiveArrayIterator , "CHILD_ARRAYS_ONLY" , SPL_ARRAY_CHILD_ARRAYS_ONLY ) ; //<S2SV> return SUCCESS ; //<S2SV> } //<S2SV> 