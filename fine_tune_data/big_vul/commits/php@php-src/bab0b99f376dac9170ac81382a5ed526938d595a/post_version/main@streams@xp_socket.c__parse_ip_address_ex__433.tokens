static inline char * parse_ip_address_ex ( const char * str , size_t str_len , int * portno , int get_err , zend_string * * err ) //<S2SV> { //<S2SV> char * colon ; //<S2SV> char * host = NULL ; //<S2SV> # ifdef HAVE_IPV6 //<S2SV> if ( * ( str ) == '[' && str_len > 1 ) { //<S2SV> char * p = memchr ( str + 1 , ']' , str_len - 2 ) , * e = NULL ; //<S2SV> if ( ! p || * ( p + 1 ) != ':' ) { //<S2SV> if ( get_err ) { //<S2SV> * err = strpprintf ( 0 , "Failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>\\"%s\\"" , str ) ; //<S2SV> } //<S2SV> return NULL ; //<S2SV> } //<S2SV> * portno = strtol ( p + 2 , & e , 10 ) ; //<S2SV> if ( e && * e ) { //<S2SV> if ( get_err ) { //<S2SV> * err = strpprintf ( 0 , "Failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>address<S2SV_blank>\\"%s\\"" , str ) ; //<S2SV> } //<S2SV> return NULL ; //<S2SV> } //<S2SV> return estrndup ( str + 1 , p - str - 1 ) ; //<S2SV> } //<S2SV> # endif //<S2SV> if ( str_len ) { //<S2SV> colon = memchr ( str , ':' , str_len - 1 ) ; //<S2SV> } else { //<S2SV> colon = NULL ; //<S2SV> } //<S2SV> if ( colon ) { //<S2SV> char * e = NULL ; //<S2SV> * portno = strtol ( colon + 1 , & e , 10 ) ; //<S2SV> if ( ! e || ! * e ) { //<S2SV> return estrndup ( str , colon - str ) ; //<S2SV> } //<S2SV> } //<S2SV> if ( get_err ) { //<S2SV> * err = strpprintf ( 0 , "Failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>address<S2SV_blank>\\"%s\\"" , str ) ; //<S2SV> } //<S2SV> return NULL ; //<S2SV> } //<S2SV> 