PHP_FUNCTION ( msgfmt_format_message ) //<S2SV> { //<S2SV> zval * args ; //<S2SV> UChar * spattern = NULL ; //<S2SV> int spattern_len = 0 ; //<S2SV> char * pattern = NULL ; //<S2SV> int pattern_len = 0 ; //<S2SV> const char * slocale = NULL ; //<S2SV> int slocale_len = 0 ; //<S2SV> MessageFormatter_object mf = { 0 } ; //<S2SV> MessageFormatter_object * mfo = & mf ; //<S2SV> if ( zend_parse_method_parameters ( ZEND_NUM_ARGS ( ) TSRMLS_CC , getThis ( ) , "ssa" , //<S2SV> & slocale , & slocale_len , & pattern , & pattern_len , & args ) == FAILURE ) //<S2SV> { //<S2SV> intl_error_set ( NULL , U_ILLEGAL_ARGUMENT_ERROR , //<S2SV> "msgfmt_format_message:<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>input<S2SV_blank>params" , 0 TSRMLS_CC ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> INTL_CHECK_LOCALE_LEN ( slocale_len ) ; //<S2SV> msgformat_data_init ( & mfo -> mf_data TSRMLS_CC ) ; //<S2SV> if ( pattern && pattern_len ) { //<S2SV> intl_convert_utf8_to_utf16 ( & spattern , & spattern_len , pattern , pattern_len , & INTL_DATA_ERROR_CODE ( mfo ) ) ; //<S2SV> if ( U_FAILURE ( INTL_DATA_ERROR_CODE ( ( mfo ) ) ) ) //<S2SV> { //<S2SV> intl_error_set ( NULL , U_ILLEGAL_ARGUMENT_ERROR , //<S2SV> "msgfmt_format_message:<S2SV_blank>error<S2SV_blank>converting<S2SV_blank>pattern<S2SV_blank>to<S2SV_blank>UTF-16" , 0 TSRMLS_CC ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> } else { //<S2SV> spattern_len = 0 ; //<S2SV> spattern = NULL ; //<S2SV> } //<S2SV> if ( slocale_len == 0 ) { //<S2SV> slocale = intl_locale_get_default ( TSRMLS_C ) ; //<S2SV> } //<S2SV> # ifdef MSG_FORMAT_QUOTE_APOS //<S2SV> if ( msgformat_fix_quotes ( & spattern , & spattern_len , & INTL_DATA_ERROR_CODE ( mfo ) ) != SUCCESS ) { //<S2SV> intl_error_set ( NULL , U_INVALID_FORMAT_ERROR , //<S2SV> "msgfmt_format_message:<S2SV_blank>error<S2SV_blank>converting<S2SV_blank>pattern<S2SV_blank>to<S2SV_blank>quote-friendly<S2SV_blank>format" , 0 TSRMLS_CC ) ; //<S2SV> RETURN_FALSE ; //<S2SV> } //<S2SV> # endif //<S2SV> MSG_FORMAT_OBJECT ( mfo ) = umsg_open ( spattern , spattern_len , slocale , NULL , & INTL_DATA_ERROR_CODE ( mfo ) ) ; //<S2SV> if ( spattern && spattern_len ) { //<S2SV> efree ( spattern ) ; //<S2SV> } //<S2SV> INTL_METHOD_CHECK_STATUS ( mfo , "Creating<S2SV_blank>message<S2SV_blank>formatter<S2SV_blank>failed" ) ; //<S2SV> msgfmt_do_format ( mfo , args , return_value TSRMLS_CC ) ; //<S2SV> msgformat_data_free ( & mfo -> mf_data TSRMLS_CC ) ; //<S2SV> } //<S2SV> 