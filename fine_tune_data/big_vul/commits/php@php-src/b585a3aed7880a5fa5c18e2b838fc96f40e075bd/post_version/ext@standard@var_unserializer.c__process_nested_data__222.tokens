static inline int process_nested_data ( UNSERIALIZE_PARAMETER , HashTable * ht , long elements , int objprops ) //<S2SV> { //<S2SV> while ( elements -- > 0 ) { //<S2SV> zval * key , * data , * * old_data ; //<S2SV> ALLOC_INIT_ZVAL ( key ) ; //<S2SV> if ( ! php_var_unserialize ( & key , p , max , NULL TSRMLS_CC ) ) { //<S2SV> zval_dtor ( key ) ; //<S2SV> FREE_ZVAL ( key ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( Z_TYPE_P ( key ) != IS_LONG && Z_TYPE_P ( key ) != IS_STRING ) { //<S2SV> zval_dtor ( key ) ; //<S2SV> FREE_ZVAL ( key ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> ALLOC_INIT_ZVAL ( data ) ; //<S2SV> if ( ! php_var_unserialize ( & data , p , max , var_hash TSRMLS_CC ) ) { //<S2SV> zval_dtor ( key ) ; //<S2SV> FREE_ZVAL ( key ) ; //<S2SV> zval_dtor ( data ) ; //<S2SV> FREE_ZVAL ( data ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> if ( ! objprops ) { //<S2SV> switch ( Z_TYPE_P ( key ) ) { //<S2SV> case IS_LONG : //<S2SV> if ( zend_hash_index_find ( ht , Z_LVAL_P ( key ) , ( void * * ) & old_data ) == SUCCESS ) { //<S2SV> var_push_dtor ( var_hash , old_data ) ; //<S2SV> } //<S2SV> zend_hash_index_update ( ht , Z_LVAL_P ( key ) , & data , sizeof ( data ) , NULL ) ; //<S2SV> break ; //<S2SV> case IS_STRING : //<S2SV> if ( zend_symtable_find ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , ( void * * ) & old_data ) == SUCCESS ) { //<S2SV> var_push_dtor ( var_hash , old_data ) ; //<S2SV> } //<S2SV> zend_symtable_update ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , & data , sizeof ( data ) , NULL ) ; //<S2SV> break ; //<S2SV> } //<S2SV> } else { //<S2SV> convert_to_string ( key ) ; //<S2SV> if ( zend_hash_find ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , ( void * * ) & old_data ) == SUCCESS ) { //<S2SV> var_push_dtor ( var_hash , old_data ) ; //<S2SV> } //<S2SV> zend_hash_update ( ht , Z_STRVAL_P ( key ) , Z_STRLEN_P ( key ) + 1 , & data , //<S2SV> sizeof data , NULL ) ; //<S2SV> } //<S2SV> zval_dtor ( key ) ; //<S2SV> FREE_ZVAL ( key ) ; //<S2SV> if ( elements && * ( * p - 1 ) != ';' && * ( * p - 1 ) != '}' ) { //<S2SV> ( * p ) -- ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> } //<S2SV> return 1 ; //<S2SV> } //<S2SV> 