int read_xattrs_from_disk ( int fd , struct squashfs_super_block * sBlk , int flag , long long * table_start ) //<S2SV> { //<S2SV> int res , bytes , i , indexes , index_bytes , ids ; //<S2SV> long long * index , start , end ; //<S2SV> struct squashfs_xattr_table id_table ; //<S2SV> TRACE ( "read_xattrs_from_disk\\n" ) ; //<S2SV> if ( sBlk -> xattr_id_table_start == SQUASHFS_INVALID_BLK ) //<S2SV> return SQUASHFS_INVALID_BLK ; //<S2SV> res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start , sizeof ( id_table ) , //<S2SV> & id_table ) ; //<S2SV> if ( res == 0 ) //<S2SV> return 0 ; //<S2SV> SQUASHFS_INSWAP_XATTR_TABLE ( & id_table ) ; //<S2SV> if ( flag ) { //<S2SV> * table_start = id_table . xattr_table_start ; //<S2SV> return id_table . xattr_ids ; //<S2SV> } //<S2SV> ids = id_table . xattr_ids ; //<S2SV> xattr_table_start = id_table . xattr_table_start ; //<S2SV> index_bytes = SQUASHFS_XATTR_BLOCK_BYTES ( ids ) ; //<S2SV> indexes = SQUASHFS_XATTR_BLOCKS ( ids ) ; //<S2SV> index = malloc ( index_bytes ) ; //<S2SV> if ( index == NULL ) //<S2SV> MEM_ERROR ( ) ; //<S2SV> res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) , //<S2SV> index_bytes , index ) ; //<S2SV> if ( res == 0 ) //<S2SV> goto failed1 ; //<S2SV> SQUASHFS_INSWAP_LONG_LONGS ( index , indexes ) ; //<S2SV> bytes = SQUASHFS_XATTR_BYTES ( ids ) ; //<S2SV> xattr_ids = malloc ( bytes ) ; //<S2SV> if ( xattr_ids == NULL ) //<S2SV> MEM_ERROR ( ) ; //<S2SV> for ( i = 0 ; i < indexes ; i ++ ) { //<S2SV> int expected = ( i + 1 ) != indexes ? SQUASHFS_METADATA_SIZE : //<S2SV> bytes & ( SQUASHFS_METADATA_SIZE - 1 ) ; //<S2SV> int length = read_block ( fd , index [ i ] , NULL , expected , //<S2SV> ( ( unsigned char * ) xattr_ids ) + //<S2SV> ( i * SQUASHFS_METADATA_SIZE ) ) ; //<S2SV> TRACE ( "Read<S2SV_blank>xattr<S2SV_blank>id<S2SV_blank>table<S2SV_blank>block<S2SV_blank>%d,<S2SV_blank>from<S2SV_blank>0x%llx,<S2SV_blank>length<S2SV_blank>" //<S2SV> "%d\\n" , i , index [ i ] , length ) ; //<S2SV> if ( length == 0 ) { //<S2SV> ERROR ( "Failed<S2SV_blank>to<S2SV_blank>read<S2SV_blank>xattr<S2SV_blank>id<S2SV_blank>table<S2SV_blank>block<S2SV_blank>%d,<S2SV_blank>" //<S2SV> "from<S2SV_blank>0x%llx,<S2SV_blank>length<S2SV_blank>%d\\n" , i , index [ i ] , //<S2SV> length ) ; //<S2SV> goto failed2 ; //<S2SV> } //<S2SV> } //<S2SV> start = xattr_table_start ; //<S2SV> end = index [ 0 ] ; //<S2SV> for ( i = 0 ; start < end ; i ++ ) { //<S2SV> int length ; //<S2SV> xattrs = realloc ( xattrs , ( i + 1 ) * SQUASHFS_METADATA_SIZE ) ; //<S2SV> if ( xattrs == NULL ) //<S2SV> MEM_ERROR ( ) ; //<S2SV> save_xattr_block ( start , i * SQUASHFS_METADATA_SIZE ) ; //<S2SV> length = read_block ( fd , start , & start , 0 , //<S2SV> ( ( unsigned char * ) xattrs ) + //<S2SV> ( i * SQUASHFS_METADATA_SIZE ) ) ; //<S2SV> TRACE ( "Read<S2SV_blank>xattr<S2SV_blank>block<S2SV_blank>%d,<S2SV_blank>length<S2SV_blank>%d\\n" , i , length ) ; //<S2SV> if ( length == 0 ) { //<S2SV> ERROR ( "Failed<S2SV_blank>to<S2SV_blank>read<S2SV_blank>xattr<S2SV_blank>block<S2SV_blank>%d\\n" , i ) ; //<S2SV> goto failed3 ; //<S2SV> } //<S2SV> if ( start != end && length != SQUASHFS_METADATA_SIZE ) { //<S2SV> ERROR ( "Xattr<S2SV_blank>block<S2SV_blank>%d<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>length,<S2SV_blank>" //<S2SV> "it<S2SV_blank>is<S2SV_blank>%d<S2SV_blank>bytes\\n" , i , SQUASHFS_METADATA_SIZE , //<S2SV> length ) ; //<S2SV> goto failed3 ; //<S2SV> } //<S2SV> } //<S2SV> for ( i = 0 ; i < ids ; i ++ ) //<S2SV> SQUASHFS_INSWAP_XATTR_ID ( & xattr_ids [ i ] ) ; //<S2SV> free ( index ) ; //<S2SV> return ids ; //<S2SV> failed3 : //<S2SV> free ( xattrs ) ; //<S2SV> failed2 : //<S2SV> free ( xattr_ids ) ; //<S2SV> failed1 : //<S2SV> free ( index ) ; //<S2SV> return 0 ; //<S2SV> } //<S2SV> 