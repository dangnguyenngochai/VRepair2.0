static int http_RecvPostMessage ( //<S2SV> http_parser_t * parser , //<S2SV> SOCKINFO * info , //<S2SV> char * filename , //<S2SV> struct SendInstruction * Instr ) //<S2SV> { //<S2SV> size_t Data_Buf_Size = 1024 ; //<S2SV> char Buf [ 1024 ] ; //<S2SV> int Timeout = - 1 ; //<S2SV> FILE * Fp ; //<S2SV> parse_status_t status = PARSE_OK ; //<S2SV> int ok_on_close = FALSE ; //<S2SV> size_t entity_offset = 0 ; //<S2SV> int num_read = 0 ; //<S2SV> int ret_code = HTTP_OK ; //<S2SV> if ( Instr && Instr -> IsVirtualFile ) { //<S2SV> Fp = ( virtualDirCallback . open ) ( filename , UPNP_WRITE ) ; //<S2SV> if ( Fp == NULL ) //<S2SV> return HTTP_INTERNAL_SERVER_ERROR ; //<S2SV> } else { //<S2SV> Fp = fopen ( filename , "wb" ) ; //<S2SV> if ( Fp == NULL ) //<S2SV> return HTTP_UNAUTHORIZED ; //<S2SV> } //<S2SV> parser -> position = POS_ENTITY ; //<S2SV> do { //<S2SV> if ( parser -> position != POS_COMPLETE ) //<S2SV> status = parser_parse_entity ( parser ) ; //<S2SV> if ( status == PARSE_INCOMPLETE_ENTITY ) { //<S2SV> ok_on_close = TRUE ; //<S2SV> } else if ( ( status != PARSE_SUCCESS ) //<S2SV> && ( status != PARSE_CONTINUE_1 ) //<S2SV> && ( status != PARSE_INCOMPLETE ) ) { //<S2SV> ret_code = HTTP_BAD_REQUEST ; //<S2SV> goto ExitFunction ; //<S2SV> } //<S2SV> while ( entity_offset + Data_Buf_Size > parser -> msg . entity . length && //<S2SV> parser -> position != POS_COMPLETE ) { //<S2SV> num_read = sock_read ( info , Buf , sizeof ( Buf ) , & Timeout ) ; //<S2SV> if ( num_read > 0 ) { //<S2SV> if ( membuffer_append ( & parser -> msg . msg , //<S2SV> Buf , ( size_t ) num_read ) != 0 ) { //<S2SV> parser -> http_error_code = //<S2SV> HTTP_INTERNAL_SERVER_ERROR ; //<S2SV> ret_code = HTTP_INTERNAL_SERVER_ERROR ; //<S2SV> goto ExitFunction ; //<S2SV> } //<S2SV> status = parser_parse_entity ( parser ) ; //<S2SV> if ( status == PARSE_INCOMPLETE_ENTITY ) { //<S2SV> ok_on_close = TRUE ; //<S2SV> } else if ( ( status != PARSE_SUCCESS ) //<S2SV> && ( status != PARSE_CONTINUE_1 ) //<S2SV> && ( status != PARSE_INCOMPLETE ) ) { //<S2SV> ret_code = HTTP_BAD_REQUEST ; //<S2SV> goto ExitFunction ; //<S2SV> } //<S2SV> } else if ( num_read == 0 ) { //<S2SV> if ( ok_on_close ) { //<S2SV> UpnpPrintf ( UPNP_INFO , HTTP , __FILE__ , __LINE__ , //<S2SV> "<<<<S2SV_blank>(RECVD)<S2SV_blank><<<\\n%s\\n-----------------\\n" , //<S2SV> parser -> msg . msg . buf ) ; //<S2SV> print_http_headers ( & parser -> msg ) ; //<S2SV> parser -> position = POS_COMPLETE ; //<S2SV> } else { //<S2SV> parser -> http_error_code = HTTP_BAD_REQUEST ; //<S2SV> ret_code = HTTP_BAD_REQUEST ; //<S2SV> goto ExitFunction ; //<S2SV> } //<S2SV> } else { //<S2SV> ret_code = HTTP_SERVICE_UNAVAILABLE ; //<S2SV> goto ExitFunction ; //<S2SV> } //<S2SV> } //<S2SV> if ( ( entity_offset + Data_Buf_Size ) > parser -> msg . entity . length ) { //<S2SV> Data_Buf_Size = //<S2SV> parser -> msg . entity . length - entity_offset ; //<S2SV> } //<S2SV> memcpy ( Buf , //<S2SV> & parser -> msg . msg . buf [ parser -> entity_start_position + entity_offset ] , //<S2SV> Data_Buf_Size ) ; //<S2SV> entity_offset += Data_Buf_Size ; //<S2SV> if ( Instr && Instr -> IsVirtualFile ) { //<S2SV> int n = virtualDirCallback . write ( Fp , Buf , Data_Buf_Size ) ; //<S2SV> if ( n < 0 ) { //<S2SV> ret_code = HTTP_INTERNAL_SERVER_ERROR ; //<S2SV> goto ExitFunction ; //<S2SV> } //<S2SV> } else { //<S2SV> size_t n = fwrite ( Buf , 1 , Data_Buf_Size , Fp ) ; //<S2SV> if ( n != Data_Buf_Size ) { //<S2SV> ret_code = HTTP_INTERNAL_SERVER_ERROR ; //<S2SV> goto ExitFunction ; //<S2SV> } //<S2SV> } //<S2SV> } while ( parser -> position != POS_COMPLETE || //<S2SV> entity_offset != parser -> msg . entity . length ) ; //<S2SV> ExitFunction : //<S2SV> if ( Instr && Instr -> IsVirtualFile ) { //<S2SV> virtualDirCallback . close ( Fp ) ; //<S2SV> } else { //<S2SV> fclose ( Fp ) ; //<S2SV> } //<S2SV> return ret_code ; //<S2SV> } //<S2SV> 