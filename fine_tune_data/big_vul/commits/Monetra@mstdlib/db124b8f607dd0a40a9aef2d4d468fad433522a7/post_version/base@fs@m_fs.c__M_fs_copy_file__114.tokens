static M_fs_error_t M_fs_copy_file ( const char * path_old , const char * path_new , M_fs_file_mode_t mode , M_fs_progress_cb_t cb , M_fs_progress_flags_t progress_flags , M_fs_progress_t * progress , const M_fs_perms_t * perms ) //<S2SV> { //<S2SV> M_fs_file_t * fd_old ; //<S2SV> M_fs_file_t * fd_new ; //<S2SV> M_fs_info_t * info = NULL ; //<S2SV> unsigned char temp [ M_FS_BUF_SIZE ] ; //<S2SV> size_t read_len ; //<S2SV> size_t wrote_len ; //<S2SV> size_t wrote_total = 0 ; //<S2SV> size_t offset ; //<S2SV> M_fs_error_t res ; //<S2SV> res = M_fs_file_open ( & fd_old , path_old , M_FS_BUF_SIZE , M_FS_FILE_MODE_READ | M_FS_FILE_MODE_NOCREATE , NULL ) ; //<S2SV> if ( res != M_FS_ERROR_SUCCESS ) { //<S2SV> return res ; //<S2SV> } //<S2SV> if ( perms == NULL && mode & M_FS_FILE_MODE_PRESERVE_PERMS ) { //<S2SV> res = M_fs_info_file ( & info , fd_old , M_FS_PATH_INFO_FLAGS_NONE ) ; //<S2SV> if ( res != M_FS_ERROR_SUCCESS ) { //<S2SV> M_fs_file_close ( fd_old ) ; //<S2SV> return res ; //<S2SV> } //<S2SV> perms = M_fs_info_get_perms ( info ) ; //<S2SV> } //<S2SV> res = M_fs_file_open ( & fd_new , path_new , M_FS_BUF_SIZE , M_FS_FILE_MODE_WRITE | M_FS_FILE_MODE_OVERWRITE , perms ) ; //<S2SV> M_fs_info_destroy ( info ) ; //<S2SV> if ( res != M_FS_ERROR_SUCCESS ) { //<S2SV> M_fs_file_close ( fd_old ) ; //<S2SV> return res ; //<S2SV> } //<S2SV> while ( ( res = M_fs_file_read ( fd_old , temp , sizeof ( temp ) , & read_len , M_FS_FILE_RW_NORMAL ) ) == M_FS_ERROR_SUCCESS && read_len != 0 ) { //<S2SV> offset = 0 ; //<S2SV> while ( offset < read_len ) { //<S2SV> res = M_fs_file_write ( fd_new , temp + offset , read_len - offset , & wrote_len , M_FS_FILE_RW_NORMAL ) ; //<S2SV> offset += wrote_len ; //<S2SV> wrote_total += wrote_len ; //<S2SV> if ( cb ) { //<S2SV> M_fs_progress_set_result ( progress , res ) ; //<S2SV> if ( progress_flags & M_FS_PROGRESS_SIZE_TOTAL ) { //<S2SV> M_fs_progress_set_size_total_progess ( progress , M_fs_progress_get_size_total_progess ( progress ) + wrote_len ) ; //<S2SV> } //<S2SV> if ( progress_flags & M_FS_PROGRESS_SIZE_CUR ) { //<S2SV> M_fs_progress_set_size_current_progress ( progress , wrote_total ) ; //<S2SV> } //<S2SV> if ( progress_flags & M_FS_PROGRESS_COUNT ) { //<S2SV> M_fs_progress_set_count ( progress , M_fs_progress_get_count ( progress ) + 1 ) ; //<S2SV> } //<S2SV> if ( ! cb ( progress ) ) { //<S2SV> res = M_FS_ERROR_CANCELED ; //<S2SV> } //<S2SV> } //<S2SV> if ( res != M_FS_ERROR_SUCCESS ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> if ( res != M_FS_ERROR_SUCCESS ) { //<S2SV> break ; //<S2SV> } //<S2SV> } //<S2SV> M_fs_file_close ( fd_old ) ; //<S2SV> M_fs_file_close ( fd_new ) ; //<S2SV> if ( res != M_FS_ERROR_SUCCESS ) { //<S2SV> return res ; //<S2SV> } //<S2SV> return M_FS_ERROR_SUCCESS ; //<S2SV> } //<S2SV> 