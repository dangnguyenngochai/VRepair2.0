static M_bool M_fs_check_overwrite_allowed ( const char * p1 , const char * p2 , M_uint32 mode ) //<S2SV> { //<S2SV> M_fs_info_t * info = NULL ; //<S2SV> char * pold = NULL ; //<S2SV> char * pnew = NULL ; //<S2SV> M_fs_type_t type ; //<S2SV> M_bool ret = M_TRUE ; //<S2SV> if ( mode & M_FS_FILE_MODE_OVERWRITE ) //<S2SV> return M_TRUE ; //<S2SV> if ( M_fs_info ( & info , p1 , M_FS_PATH_INFO_FLAGS_BASIC ) != M_FS_ERROR_SUCCESS ) //<S2SV> return M_FALSE ; //<S2SV> type = M_fs_info_get_type ( info ) ; //<S2SV> M_fs_info_destroy ( info ) ; //<S2SV> if ( type != M_FS_TYPE_DIR ) { //<S2SV> if ( M_fs_perms_can_access ( p2 , M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { //<S2SV> ret = M_FALSE ; //<S2SV> goto done ; //<S2SV> } //<S2SV> } //<S2SV> pold = M_fs_path_basename ( p1 , M_FS_SYSTEM_AUTO ) ; //<S2SV> pnew = M_fs_path_join ( p2 , pnew , M_FS_SYSTEM_AUTO ) ; //<S2SV> if ( M_fs_perms_can_access ( pnew , M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { //<S2SV> ret = M_FALSE ; //<S2SV> goto done ; //<S2SV> } //<S2SV> done : //<S2SV> M_free ( pnew ) ; //<S2SV> M_free ( pold ) ; //<S2SV> return ret ; //<S2SV> } //<S2SV> 