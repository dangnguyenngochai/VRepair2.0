<S2SV_ModStart> ) { p_fm_config_conx_hdlt hdl = NULL <S2SV_ModStart> res ) ; goto cleanup <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) ; goto cleanup <S2SV_ModEnd> ; } for ( <S2SV_ModStart> == 0 ) { res = <S2SV_ModEnd> commandList [ i ] <S2SV_ModStart> optind ] ) ; goto cleanup ; <S2SV_ModStart> = - 1 ; cleanup : if ( hdl ) { if ( hdl -> sm_hdl ) { if ( hdl -> sm_hdl -> c_path [ 0 ] ) unlink ( hdl -> sm_hdl -> c_path ) ; } if ( hdl -> pm_hdl ) { if ( hdl -> pm_hdl -> c_path [ 0 ] ) unlink ( hdl -> pm_hdl -> c_path ) ; } if ( hdl -> fe_hdl ) { if ( hdl -> fe_hdl -> c_path [ 0 ] ) unlink ( hdl -> fe_hdl -> c_path ) ; } <S2SV_ModEnd> free ( hdl ) <S2SV_ModStart> ( hdl ) ; }
<S2SV_ModStart> struct sockaddr_un unix_addr ; hsm_com_errno_t res = HSM_COM_OK ; <S2SV_ModStart> sun_path ) ) { res = HSM_COM_PATH_ERR ; goto cleanup <S2SV_ModEnd> ; } snprintf ( <S2SV_ModStart> < 0 ) { res = HSM_COM_BIND_ERR ; goto cleanup ; <S2SV_ModEnd> } if ( chmod <S2SV_ModStart> < 0 ) { res = HSM_COM_CHMOD_ERR ; goto cleanup <S2SV_ModEnd> ; } memset ( <S2SV_ModStart> < 0 ) { res = HSM_COM_CONX_ERR ; goto cleanup <S2SV_ModEnd> ; } hdl -> <S2SV_ModStart> client_state = HSM_COM_C_STATE_IN ; res = HSM_COM_SEND_ERR ; } return res ; cleanup : close ( fd ) ; return res <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> , client_path ) ; if ( mkstemp ( hdl -> c_path ) == - 1 ) { res = HSM_COM_PATH_ERR ; goto cleanup ; }
<S2SV_ModStart> cleanup ; } } cleanup : <S2SV_ModEnd> return res ; }
<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl ; <S2SV_ModEnd> memset ( s_path , <S2SV_ModStart> sizeof ( c_path ) <S2SV_ModEnd> ) ; switch ( <S2SV_ModStart> sprintf ( c_path , "%s%s%d_C_XXXXXX" <S2SV_ModEnd> , HSM_FM_SCK_PREFIX , mgr_prefix <S2SV_ModStart> , hdl -> instance <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> <S2SV_null> TPM_RC tpm_kdfa ( <S2SV_ModEnd> TPMI_ALG_HASH hashAlg , TPM2B <S2SV_ModStart> resultKey ) { TPM2B_DIGEST <S2SV_ModEnd> tpm2bLabel , tpm2bBits , <S2SV_ModStart> i_Swizzled ; TPM_RC rval = TPM_RC_SUCCESS <S2SV_ModStart> i = 1 ; const EVP_MD * md = tpm_algorithm_to_openssl_digest ( hashAlg ) ; if ( ! md ) { LOG_ERR ( "Algorithm<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>for<S2SV_blank>hmac:<S2SV_blank>%x" , hashAlg ) ; return TPM_RC_HASH ; } HMAC_CTX ctx ; HMAC_CTX_init ( & ctx ) ; int rc = HMAC_Init_ex ( & ctx , key -> buffer , key -> size , md , NULL ) ; if ( ! rc ) { LOG_ERR ( "HMAC<S2SV_blank>Init<S2SV_blank>failed:<S2SV_blank>%s" , ERR_error_string ( rc , NULL ) ) ; return TPM_RC_MEMORY ; } <S2SV_ModStart> < bytes ) { TPM2B_DIGEST tmpResult ; <S2SV_ModStart> ; bufferList [ j ] = ( TPM2B_DIGEST * ) 0 ; int c ; for ( c = 0 ; c < j ; c ++ ) { TPM2B_DIGEST * digest = bufferList [ c ] ; int rc = HMAC_Update ( & ctx , digest -> b . buffer , digest -> b . size ) ; if ( ! rc ) { LOG_ERR ( "HMAC<S2SV_blank>Update<S2SV_blank>failed:<S2SV_blank>%s" , ERR_error_string ( rc , NULL ) ) ; rval = TPM_RC_MEMORY ; goto err ; } } unsigned size = sizeof ( tmpResult . t . buffer ) ; int rc = HMAC_Final ( & ctx , tmpResult . t . buffer , & size <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ) ; if ( ! rc ) { LOG_ERR ( "HMAC<S2SV_blank>Final<S2SV_blank>failed:<S2SV_blank>%s" , ERR_error_string ( rc , NULL ) ) ; rval = TPM_RC_MEMORY ; goto err ; } tmpResult . t . size = size ; <S2SV_ModEnd> bool res = string_bytes_concat_buffer <S2SV_ModStart> ! res ) { rval = TSS2_SYS_RC_BAD_VALUE ; goto err ; } } resultKey -> t . size = bytes ; err : HMAC_CTX_cleanup ( & ctx ) ; return rval <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> rval = tpm_kdfa ( <S2SV_ModEnd> session -> authHash ,
<S2SV_ModStart> i += 2 ; if ( i + 1 < data_size )
<S2SV_ModStart> return BZRTP_PARSER_ERROR_UNMATCHINGMAC ; } { uint8_t computedHvi [ 32 ] ; uint16_t HelloMessageLength = zrtpChannelContext -> selfPackets [ HELLO_MESSAGE_STORE_ID ] -> messageLength ; uint16_t DHPartHelloMessageStringLength = zrtpPacket -> messageLength + HelloMessageLength ; uint8_t * DHPartHelloMessageString = ( uint8_t * ) malloc ( DHPartHelloMessageStringLength * sizeof ( uint8_t ) ) ; memcpy ( DHPartHelloMessageString , input + ZRTP_PACKET_HEADER_LENGTH , zrtpPacket -> messageLength ) ; memcpy ( DHPartHelloMessageString + zrtpPacket -> messageLength , zrtpChannelContext -> selfPackets [ HELLO_MESSAGE_STORE_ID ] -> packetString + ZRTP_PACKET_HEADER_LENGTH , HelloMessageLength ) ; zrtpChannelContext -> hashFunction ( DHPartHelloMessageString , DHPartHelloMessageStringLength , 32 , computedHvi ) ; free ( DHPartHelloMessageString ) ; if ( memcmp ( computedHvi , peerCommitMessageData -> hvi , 32 ) != 0 ) { free ( messageData ) ; return BZRTP_PARSER_ERROR_UNMATCHINGHVI ; } }
<S2SV_ModStart> ( void ) { test_parser_param ( <S2SV_ModEnd> 0 ) ; } <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> CU_add_test ( parserTestSuite , "Parse<S2SV_blank>hvi<S2SV_blank>check<S2SV_blank>fail" , test_parser_hvi ) ; CU_add_test ( parserTestSuite ,
<S2SV_ModStart> ( sync_reply ) { if ( client_obj -> ipc ) { <S2SV_ModStart> : "" ) ; } else { crm_trace ( "Sending<S2SV_blank>response<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>%s" , client_obj -> name , from_peer ? "(originator<S2SV_blank>of<S2SV_blank>delegated<S2SV_blank>request)" : "" ) ; }
<S2SV_ModStart> -> ipc == NULL && client -> session == NULL
<S2SV_ModStart> gid_client ) { static <S2SV_ModEnd> gid_t gid_cluster = 0 <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if ( crm_user_lookup ( <S2SV_ModStart> } } if ( uid_client != 0 ) { crm_trace ( "Giving<S2SV_blank>access<S2SV_blank>to<S2SV_blank>group<S2SV_blank>%u" , gid_cluster ) ; qb_ipcs_connection_auth_set ( c , - 1 <S2SV_ModEnd> , gid_cluster , S_IRUSR
<S2SV_ModStart> xIter = NULL ; char * path = xml_get_path ( xml ) ; <S2SV_ModStart> XML_ATTR_ID ) == 0 && strstr ( path , "/" XML_CIB_TAG_ACLS "/" ) == NULL <S2SV_ModStart> ; } else { <S2SV_ModEnd> crm_trace ( "Cannot<S2SV_blank>add<S2SV_blank>new<S2SV_blank>node<S2SV_blank>%s<S2SV_blank>at<S2SV_blank>%s" , <S2SV_ModStart> return ; } } free ( path ) ;
<S2SV_ModStart> , 1 ) ; snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> , "%s/%s.html" , dirout <S2SV_ModStart> ( charbuf ) ; snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> , "%s/%s-links.html" , dirout <S2SV_ModStart> , factor ) ; snprintf ( charbuf , sizeof ( charbuf ) <S2SV_ModEnd> , "%s_thumb_%03d" , rootname
<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 * <S2SV_ModStart> ] + 1 , "prestring=%490s" <S2SV_ModEnd> , buf ) ; <S2SV_ModStart> buf ) ) > L_BUFSIZE <S2SV_ModEnd> - 3 ) { <S2SV_ModStart> ] + 1 , "protos=%490s" <S2SV_ModEnd> , buf ) ; <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "<S2SV_blank>*<S2SV_blank><S2SV_blank>These<S2SV_blank>prototypes<S2SV_blank>were<S2SV_blank>autogen\'d<S2SV_blank>by<S2SV_blank>xtractprotos,<S2SV_blank>v.<S2SV_blank>%s" , version <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "cpp<S2SV_blank>-ansi<S2SV_blank>-DNO_PROTOS<S2SV_blank>%s<S2SV_blank>%s" , filein
<S2SV_ModStart> { char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char emptystring <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "%s.data.%d" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "%f<S2SV_blank>%f\\n" , valx
<S2SV_ModStart> ; char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int32 badchar <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "%s.cmd" , rootname <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "%s.png" , newroot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "%s.ps" , newroot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "%s.eps" , newroot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "%s.tex" , newroot
<S2SV_ModStart> { char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char * <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>title<S2SV_blank>\'%s\'" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>xlabel<S2SV_blank>\'%s\'" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>ylabel<S2SV_blank>\'%s\'" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>png;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>postscript;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>postscript<S2SV_blank>eps;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>terminal<S2SV_blank>latex;<S2SV_blank>set<S2SV_blank>output<S2SV_blank>\'%s\'" , gplot <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>logscale<S2SV_blank>x" ) ; <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "set<S2SV_blank>logscale<S2SV_blank>y" ) ; <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , dataname <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "plot<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , dataname <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s,<S2SV_blank>\\\\" , dataname <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "<S2SV_blank>\'%s\'<S2SV_blank>title<S2SV_blank>\'%s\'<S2SV_blank>%s" , dataname
<S2SV_ModStart> { char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char * <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "gnuplot<S2SV_blank>%s" , cmdname <S2SV_ModStart> snprintf ( buf , L_BUFSIZE <S2SV_ModEnd> , "wgnuplot<S2SV_blank>%s" , cmdname
<S2SV_ModStart> { char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char * <S2SV_ModStart> fscanf ( fp , "Rootname:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , buf ) ; <S2SV_ModStart> fgets ( buf , L_BUFSIZE <S2SV_ModEnd> , fp ) ; <S2SV_ModStart> fgets ( buf , L_BUFSIZE <S2SV_ModEnd> , fp ) ; <S2SV_ModStart> fgets ( buf , L_BUFSIZE <S2SV_ModEnd> , fp ) ; <S2SV_ModStart> fscanf ( fp , "Commandfile<S2SV_blank>name:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , buf ) ; <S2SV_ModStart> fscanf ( fp , "Output<S2SV_blank>file<S2SV_blank>name:<S2SV_blank>%511s\\n" <S2SV_ModEnd> , buf ) ;
<S2SV_ModStart> fscanf ( fp , "<S2SV_blank>Number<S2SV_blank>of<S2SV_blank>pts<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>format<S2SV_blank>=<S2SV_blank>%127s\\n" <S2SV_ModEnd> , & n ,
<S2SV_ModStart> ; char linebuf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int32 sy <S2SV_ModStart> fgets ( linebuf , L_BUFSIZE <S2SV_ModEnd> , fp ) == <S2SV_ModStart> sscanf ( linebuf , "<S2SV_blank><S2SV_blank>------<S2SV_blank><S2SV_blank>%200s<S2SV_blank><S2SV_blank>------" <S2SV_ModEnd> , selname ) ;
<S2SV_ModStart> ; char combname [ L_BUFSIZE <S2SV_ModEnd> ] ; l_int32 i <S2SV_ModStart> snprintf ( combname , L_BUFSIZE <S2SV_ModEnd> , "sel_comb_%dh" , size <S2SV_ModStart> snprintf ( combname , L_BUFSIZE <S2SV_ModEnd> , "sel_comb_%dv" , size
<S2SV_ModStart> && ++ len ) { <S2SV_ModStart> ++ == '\\\\' ) { if ( * end_ptr == '\\0' ) { return 0 ; } end_ptr ++ ; } } <S2SV_ModEnd> out = ( char
<S2SV_ModStart> -> str ) ; <S2SV_ModEnd> g_string_free ( result ,
<S2SV_ModStart> context ; JSObjectRef globalobject <S2SV_ModEnd> ; JSStringRef js_script ; <S2SV_ModStart> = JSContextGetGlobalObject ( context <S2SV_ModEnd> ) ; js_script = <S2SV_ModStart> js_result_string ) ; } <S2SV_ModEnd> JSStringRelease ( js_script )
<S2SV_ModStart> ) == 0 ) if ( received_protocol ) { fprintf ( stderr , "received_protocol<S2SV_blank>is<S2SV_blank>set<S2SV_blank>already\\n" ) ; exit ( EXIT_FAILURE ) ; } else <S2SV_ModStart> ) { uschar * hn ; if ( received_protocol ) { fprintf ( stderr , "received_protocol<S2SV_blank>is<S2SV_blank>set<S2SV_blank>already\\n" ) ; exit ( EXIT_FAILURE ) ; }
<S2SV_ModStart> ( ( ret = ff_set_dimensions ( avctx , <S2SV_ModEnd> s -> width , <S2SV_ModStart> , s -> height <S2SV_ModEnd> ) ) < 0
<S2SV_ModStart> ) & 0xFFFFFFFF ; int remaining ; <S2SV_ModStart> 0 ) continue ; <S2SV_ModEnd> remaining = avpriv_dnxhd_get_frame_size ( <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> remaining <= 0 ) <S2SV_ModStart> <= 0 ) { <S2SV_ModEnd> remaining = dnxhd_get_hr_frame_size ( <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> remaining <= 0 ) <S2SV_ModStart> remaining <= 0 ) continue ; } dctx -> remaining = remaining ; <S2SV_ModEnd> if ( buf_size -
<S2SV_ModStart> ; j ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> pb ) ) ; }
<S2SV_ModStart> AVERROR_INVALIDDATA ; if ( <S2SV_ModEnd> av_strstart ( proto_name , <S2SV_ModStart> av_strstart ( proto_name , "file" , NULL ) ) { if ( strcmp ( c -> allowed_extensions , "ALL" ) && ! av_match_ext ( url , c -> allowed_extensions ) ) { av_log ( s , AV_LOG_ERROR , "Filename<S2SV_blank>extension<S2SV_blank>of<S2SV_blank>\\\'%s\\\'<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>common<S2SV_blank>multimedia<S2SV_blank>extension,<S2SV_blank>blocked<S2SV_blank>for<S2SV_blank>security<S2SV_blank>reasons.\\n" "If<S2SV_blank>you<S2SV_blank>wish<S2SV_blank>to<S2SV_blank>override<S2SV_blank>this<S2SV_blank>adjust<S2SV_blank>allowed_extensions,<S2SV_blank>you<S2SV_blank>can<S2SV_blank>set<S2SV_blank>it<S2SV_blank>to<S2SV_blank>\\\'ALL\\\'<S2SV_blank>to<S2SV_blank>allow<S2SV_blank>all\\n" , url ) ; return AVERROR_INVALIDDATA ; } } else if ( av_strstart ( proto_name , <S2SV_ModStart> "http" , NULL ) ) { ; } else <S2SV_ModEnd> return AVERROR_INVALIDDATA ; if
<S2SV_ModStart> bpp == 8 ) && c -> format != CHUNKY
<S2SV_ModStart> 0 ; s -> interlaced_dct = 0 ; s ->
<S2SV_ModStart> = 4 ; } if ( s -> codec_id == AV_CODEC_ID_INTERPLAY_VIDEO ) { w_align = 8 ; h_align = 8 ; } <S2SV_ModStart> -> codec_id == AV_CODEC_ID_JV || s -> codec_id == AV_CODEC_ID_INTERPLAY_VIDEO
<S2SV_ModStart> ; } if ( x >= 16 || c >= 256 ) { return AVERROR_INVALIDDATA ; } if (
<S2SV_ModStart> - src < zsize + ( sub_type != 2 ) <S2SV_ModStart> ! bits ) { if ( src >= src_end ) return AVERROR_INVALIDDATA ;
<S2SV_ModStart> -> mb_height > 68 ) { av_log ( ctx -> avctx , AV_LOG_ERROR , "mb<S2SV_blank>height<S2SV_blank>too<S2SV_blank>big:<S2SV_blank>%d\\n" , ctx -> mb_height ) ; return AVERROR_INVALIDDATA ; } ctx -> data_offset = 0x280 ; } if ( <S2SV_ModEnd> ( ctx -> mb_height <S2SV_ModStart> return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> if ( buf_size <
<S2SV_ModStart> ) ; if ( <S2SV_ModEnd> h0 -> cur_pic_ptr -> <S2SV_ModStart> ) { if ( <S2SV_ModEnd> last_pic_structure != PICT_FRAME ) <S2SV_ModStart> ) { if ( <S2SV_ModEnd> last_pic_structure != PICT_FRAME )
<S2SV_ModStart> ; } else { uint64_t <S2SV_ModEnd> target_end = s -> <S2SV_ModStart> || s -> chunksize == UINT64_MAX ) <S2SV_ModEnd> && s -> off <S2SV_ModStart> || s -> chunksize == UINT64_MAX ) && s -> off < <S2SV_ModEnd> target_end ) { av_log <S2SV_ModStart> , AV_LOG_ERROR , "Stream<S2SV_blank>ends<S2SV_blank>prematurely<S2SV_blank>at<S2SV_blank>%" PRIu64 ",<S2SV_blank>should<S2SV_blank>be<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "\\n" , s ->
<S2SV_ModStart> proxyauthstr = NULL ; uint64_t <S2SV_ModEnd> off = s -> <S2SV_ModStart> - len , "Range:<S2SV_blank>bytes=%" PRIu64 <S2SV_ModEnd> "-" , s -> <S2SV_ModStart> s -> filesize = UINT64_MAX <S2SV_ModEnd> ; s -> willclose
<S2SV_ModStart> s -> filesize = UINT64_MAX <S2SV_ModEnd> ; s -> location
<S2SV_ModStart> s -> chunksize = UINT64_MAX <S2SV_ModEnd> ; for ( ;
<S2SV_ModStart> ( s -> chunksize != UINT64_MAX <S2SV_ModEnd> ) { if ( <S2SV_ModStart> s -> chunksize = strtoull <S2SV_ModEnd> ( line , NULL <S2SV_ModStart> ) ; av_log ( h <S2SV_ModEnd> , AV_LOG_TRACE , "Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%" <S2SV_ModStart> , AV_LOG_TRACE , "Chunked<S2SV_blank>encoding<S2SV_blank>data<S2SV_blank>size:<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "\'\\n" , s -> <S2SV_ModStart> ) return 0 ; else if ( s -> chunksize == UINT64_MAX ) { av_log ( h , AV_LOG_ERROR , "Invalid<S2SV_blank>chunk<S2SV_blank>size<S2SV_blank>%" PRIu64 "\\n" , s -> chunksize ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ) ) ) { uint64_t <S2SV_ModEnd> target = h -> <S2SV_ModStart> , AV_LOG_INFO , "Will<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRIu64 <S2SV_ModEnd> "<S2SV_blank>error=%s.\\n" , s -> <S2SV_ModStart> , AV_LOG_ERROR , "Failed<S2SV_blank>to<S2SV_blank>reconnect<S2SV_blank>at<S2SV_blank>%" PRIu64 <S2SV_ModEnd> ".\\n" , target )
<S2SV_ModStart> s -> hd ; uint64_t <S2SV_ModEnd> old_off = s -> <S2SV_ModStart> s -> filesize == UINT64_MAX <S2SV_ModEnd> && whence == SEEK_END
<S2SV_ModStart> s -> off = strtoull <S2SV_ModEnd> ( p , NULL <S2SV_ModStart> s -> filesize = strtoull <S2SV_ModEnd> ( slash + 1
<S2SV_ModStart> s -> filesize == UINT64_MAX <S2SV_ModEnd> ) { s -> <S2SV_ModStart> s -> filesize = strtoull <S2SV_ModEnd> ( p , NULL <S2SV_ModStart> s -> filesize = UINT64_MAX ; s -> chunksize = 0 ; } else if ( ! av_strcasecmp ( tag , "WWW-Authenticate" ) ) { ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , "Authentication-Info" ) ) { ff_http_auth_handle_header ( & s -> auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , "Proxy-Authenticate" ) ) { ff_http_auth_handle_header ( & s -> proxy_auth_state , tag , p ) ; } else if ( ! av_strcasecmp ( tag , "Connection" ) ) { if ( ! strcmp ( p , "close" ) ) s -> willclose = 1 ; } else if ( ! av_strcasecmp ( tag , "Server" ) ) { if ( ! av_strcasecmp ( p , "AkamaiGHost" ) ) { s -> is_akamai = 1 ; } else if ( ! av_strncasecmp ( p , "MediaGateway" , 12 ) ) { s -> is_mediagateway = 1 ; } } else if ( ! av_strcasecmp ( tag , "Content-Type" ) ) { av_free ( s -> mime_type ) ; s -> mime_type = av_strdup ( p ) ; } else if ( ! av_strcasecmp ( tag , "Set-Cookie" ) ) { if ( parse_cookie ( s , p , & s -> <S2SV_ModEnd> cookie_dict ) ) av_log <S2SV_ModStart> s -> icy_metaint = strtoull <S2SV_ModEnd> ( p , NULL
<S2SV_ModStart> h -> priv_data ; uint64_t remaining ; if ( s -> icy_metaint < s -> icy_data_read ) return AVERROR_INVALIDDATA ; <S2SV_ModEnd> remaining = s -> <S2SV_ModStart> - s -> icy_data_read <S2SV_ModEnd> ; if ( !
<S2SV_ModStart> == VOS_STARTCODE ) { int profile , level ; <S2SV_ModStart> ( s , gb , & profile , & level ) ; if ( <S2SV_ModEnd> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO && <S2SV_ModStart> == FF_PROFILE_MPEG4_SIMPLE_STUDIO && ( <S2SV_ModEnd> level > 0 && <S2SV_ModStart> level > 0 && <S2SV_ModEnd> level < 9 ) <S2SV_ModStart> 0 ) ; } else if ( s -> studio_profile ) { avpriv_request_sample ( s -> avctx , "Mixes<S2SV_blank>studio<S2SV_blank>and<S2SV_blank>non<S2SV_blank>studio<S2SV_blank>profile\\n" ) ; return AVERROR_PATCHWELCOME ; } s -> avctx -> profile = profile ; s -> avctx -> level = level ; <S2SV_ModStart> -> studio_profile ) { av_assert0 ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) ;
<S2SV_ModStart> , GetBitContext * gb , int * profile , int * level ) { * <S2SV_ModEnd> profile = get_bits ( <S2SV_ModStart> , 4 ) ; * <S2SV_ModEnd> level = get_bits ( <S2SV_ModStart> ) ; if ( * <S2SV_ModEnd> profile == 0 && <S2SV_ModStart> profile == 0 && * <S2SV_ModEnd> level == 8 ) <S2SV_ModStart> == 8 ) { * <S2SV_ModEnd> level = 0 ;
<S2SV_ModStart> ( size_bmp > BMP_HEADER_SIZE && size_bmp < INT_MAX - AV_INPUT_BUFFER_PADDING_SIZE
<S2SV_ModStart> align_get_bits ( gb ) ; if ( ! s -> studio_profile && s -> avctx -> bits_per_raw_sample != 8 ) s -> avctx -> bits_per_raw_sample = 0
<S2SV_ModStart> ) & 0xFFFFFFFF ; int remaining ; <S2SV_ModStart> 0 ) continue ; <S2SV_ModEnd> remaining = avpriv_dnxhd_get_frame_size ( <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> remaining <= 0 ) <S2SV_ModStart> <= 0 ) { <S2SV_ModEnd> remaining = dnxhd_get_hr_frame_size ( <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> remaining <= 0 ) <S2SV_ModStart> remaining <= 0 ) continue ; } dctx -> remaining = remaining ; <S2SV_ModEnd> if ( buf_size -
<S2SV_ModStart> ; int pixel_ptr = - 4 <S2SV_ModEnd> ; int block_ptr ; <S2SV_ModStart> n_blocks -- ) { ADVANCE_BLOCK ( ) <S2SV_ModStart> += row_inc ; } <S2SV_ModEnd> } break ; case <S2SV_ModStart> n_blocks -- ) { ADVANCE_BLOCK ( ) ; <S2SV_ModStart> += row_inc ; } <S2SV_ModEnd> } break ; case <S2SV_ModStart> 16 ) return ; ADVANCE_BLOCK ( ) ; <S2SV_ModStart> += row_inc ; } <S2SV_ModEnd> break ; default :
<S2SV_ModStart> 1 ; if ( samples_in_chunk < 1 ) { av_log ( s , AV_LOG_ERROR , "fatal<S2SV_blank>error,<S2SV_blank>input<S2SV_blank>packet<S2SV_blank>contains<S2SV_blank>no<S2SV_blank>samples\\n" ) ; return AVERROR_PATCHWELCOME ; } if (
<S2SV_ModStart> AVERROR_INVALIDDATA ; if ( bpp == 1 && <S2SV_ModStart> } else if ( bpp == 8 &&
<S2SV_ModStart> i <= w - ( int )
<S2SV_ModStart> i <= w - ( int )
<S2SV_ModStart> avio_rb32 ( pb ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA
<S2SV_ModStart> ) return ret ; if ( ret == 1 ) { ret = AVERROR_INVALIDDATA ; goto fail ; } <S2SV_ModStart> if ( s -> <S2SV_ModEnd> max_ra == INT_MAX )
<S2SV_ModStart> ( gb ) ; if ( s -> ref && sh -> first_slice_in_pic_flag ) { av_log ( s -> avctx , AV_LOG_ERROR , "Two<S2SV_blank>slices<S2SV_blank>reporting<S2SV_blank>being<S2SV_blank>the<S2SV_blank>first<S2SV_blank>in<S2SV_blank>the<S2SV_blank>same<S2SV_blank>frame.\\n" ) ; return 1 ; }
<S2SV_ModStart> < 2 ) { int chroma_planes , chroma_h_shift , chroma_v_shift , transparency ; <S2SV_ModStart> , 0 ) ; <S2SV_ModEnd> chroma_planes = get_rac ( <S2SV_ModStart> , state ) ; <S2SV_ModEnd> chroma_h_shift = get_symbol ( <S2SV_ModStart> , 0 ) ; <S2SV_ModEnd> chroma_v_shift = get_symbol ( <S2SV_ModStart> , 0 ) ; <S2SV_ModEnd> transparency = get_rac ( <S2SV_ModStart> c , state ) ; if ( f -> plane_count ) { if ( chroma_planes != f -> chroma_planes || chroma_h_shift != f -> chroma_h_shift || chroma_v_shift != f -> chroma_v_shift || transparency != f -> transparency ) { av_log ( f -> avctx , AV_LOG_ERROR , "Invalid<S2SV_blank>change<S2SV_blank>of<S2SV_blank>global<S2SV_blank>parameters\\n" ) ; return AVERROR_INVALIDDATA ; } } f -> chroma_planes = chroma_planes ; f -> chroma_h_shift = chroma_h_shift ; f -> chroma_v_shift = chroma_v_shift ; f -> transparency = transparency
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_quant_matrix_ext ( MpegEncContext * <S2SV_ModStart> gb ) ) { if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> gb ) ) { if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> gb ) ) { if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> gb ) ) { if ( get_bits_left ( gb ) < 64 * 8 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ( gb ) ; return 0 ;
<S2SV_ModStart> ) & 0xFFFFFFFF ; int remaining ; <S2SV_ModStart> 0 ) continue ; <S2SV_ModEnd> remaining = avpriv_dnxhd_get_frame_size ( <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> remaining <= 0 ) <S2SV_ModStart> <= 0 ) { <S2SV_ModEnd> remaining = ff_dnxhd_get_hr_frame_size ( <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> remaining <= 0 ) <S2SV_ModStart> remaining <= 0 ) continue ; } dctx -> remaining = remaining ; <S2SV_ModEnd> if ( buf_size -
<S2SV_ModStart> ) ; sc -> drefs_count = 0 ; sc ->
<S2SV_ModStart> ) , * prev_frame ; av_assert0 ( avctx -> pix_fmt == AV_PIX_FMT_YUVA420P || avctx -> pix_fmt == AV_PIX_FMT_YUV420P )
<S2SV_ModStart> ( pb ) ; if ( par -> codec_type == AVMEDIA_TYPE_AUDIO && ! pkt -> size ) { av_log ( s , AV_LOG_WARNING , "Empty<S2SV_blank>audio<S2SV_blank>Packet\\n" ) ; return AVERROR ( EINVAL ) ; }
<S2SV_ModStart> -> g ) ; if ( s -> image_offset_x || s -> image_offset_y ) { avpriv_request_sample ( s -> avctx , "Support<S2SV_blank>for<S2SV_blank>image<S2SV_blank>offsets" ) ; return AVERROR_PATCHWELCOME ; }
<S2SV_ModStart> > 0 ) { if ( y >= avctx -> height ) return AVERROR_INVALIDDATA ;
<S2SV_ModStart> timestamp ; if ( prev_pkt [ channel_id ] . read && size != prev_pkt [ channel_id ] . size ) { av_log ( NULL , AV_LOG_ERROR , "RTMP<S2SV_blank>packet<S2SV_blank>size<S2SV_blank>mismatch<S2SV_blank>%d<S2SV_blank>!=<S2SV_blank>%d\\n" , size , prev_pkt [ channel_id ] . size ) ; ff_rtmp_packet_destroy ( & prev_pkt [ channel_id ] ) ; prev_pkt [ channel_id ] . read = 0 ; } if (
<S2SV_ModStart> ; i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> , AVINDEX_KEYFRAME ) ; }
<S2SV_ModStart> i ; int just_opened = 0 ; int reload_count <S2SV_ModStart> ) ; reload : reload_count ++ ; if ( reload_count > c -> max_reload ) return AVERROR_EOF ;
<S2SV_ModStart> ( pb ) ; avio_skip ( pb , name_len <S2SV_ModEnd> ) ; for ( <S2SV_ModStart> pres_time ; int name_len ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA
<S2SV_ModStart> ( c -> tile_width , 16 ) * 3 <S2SV_ModEnd> ; aligned_height = FFALIGN
<S2SV_ModStart> ; } if ( ! ape -> totalframes ) { av_log ( s , AV_LOG_ERROR , "No<S2SV_blank>frames<S2SV_blank>in<S2SV_blank>the<S2SV_blank>file!\\n" ) ; return AVERROR ( EINVAL ) ; } if (
<S2SV_ModStart> colorspace ) ) ; print_primaries ( w , frame -> color_primaries <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> color_trc ) ) ; print_primaries ( w , par -> color_primaries <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> i <= w - ( int )
<S2SV_ModStart> , 8 ) ; if ( s -> diff_start + s -> diff_height > cur_blk_height ) { av_log ( avctx , AV_LOG_ERROR , "Block<S2SV_blank>parameters<S2SV_blank>invalid\\n" ) ; return AVERROR_INVALIDDATA ; }
<S2SV_ModStart> [ i ] || s -> cdx [ i ] == 3 || s -> cdx [ i ] > 4 || <S2SV_ModStart> cdy [ i ] || s -> cdy [ i ] == 3 || s -> cdy [ i ] > 4
<S2SV_ModStart> != avctx -> width || <S2SV_ModEnd> s -> height !=
<S2SV_ModStart> ) ; if ( segment -> nb_index_entries && length < 11 ) return AVERROR_INVALIDDATA ; if ( <S2SV_ModStart> i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;
<S2SV_ModStart> precno ++ ) { if ( band -> prec ) { <S2SV_ModStart> cblk ) ; } }
<S2SV_ModStart> reslevel -> band = av_calloc <S2SV_ModEnd> ( reslevel -> nbands <S2SV_ModStart> band -> prec = av_calloc <S2SV_ModEnd> ( reslevel -> num_precincts_x
<S2SV_ModStart> ; i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ( pb ) ; } <S2SV_ModStart> ; i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ( pb ) ; } <S2SV_ModStart> ; i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) & 0xFFFF ; }
<S2SV_ModStart> ) ; if ( avio_feof ( pb ) ) { return AVERROR_EOF ; } if (
<S2SV_ModStart> -> cblk_style & JPEG2000_CBLK_VSC ; av_assert0 ( width <= JPEG2000_MAX_CBLKW ) ; av_assert0 ( height <= JPEG2000_MAX_CBLKH )
<S2SV_ModStart> return AVERROR_INVALIDDATA ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx , "cblk<S2SV_blank>size<S2SV_blank>><S2SV_blank>64" ) ; return AVERROR_PATCHWELCOME ; }
<S2SV_ModStart> time , offset ; if ( avio_feof ( f ) ) { index -> item_count = 0 ; av_freep ( & index -> items ) ; return AVERROR_INVALIDDATA ; }
<S2SV_ModStart> ( item_num > 65536 || item_num < 0
<S2SV_ModStart> ( c -> nreslevels <= <S2SV_ModEnd> s -> reduction_factor ) <S2SV_ModStart> s -> reduction_factor ) { av_log ( s -> avctx , AV_LOG_ERROR , "reduction_factor<S2SV_blank>too<S2SV_blank>large<S2SV_blank>for<S2SV_blank>this<S2SV_blank>bitstream,<S2SV_blank>max<S2SV_blank>is<S2SV_blank>%d\\n" , c -> nreslevels - 1 ) ; s -> reduction_factor = c -> nreslevels - 1 ; return AVERROR ( EINVAL ) ; } <S2SV_ModEnd> c -> nreslevels2decode =
<S2SV_ModStart> ( c -> chunk_size <= 0 ) { c -> chunk_size = 0 ; goto fail ; } <S2SV_ModEnd> c -> buffer_ptr = <S2SV_ModStart> fail ; else { av_assert0 ( len <= c -> chunk_size ) ;
<S2SV_ModStart> error ; if ( strcmp ( sub_demuxer -> name , "srt" ) && strcmp ( sub_demuxer -> name , "ass" ) ) goto error ; if (
<S2SV_ModStart> priv_data , size2 , NULL <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> , 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; }
<S2SV_ModStart> , chroma_v_shift , transparency , colorspace , bits_per_raw_sample <S2SV_ModStart> i ] ; } <S2SV_ModEnd> colorspace = get_symbol ( <S2SV_ModStart> , 0 ) ; bits_per_raw_sample = <S2SV_ModEnd> f -> version > <S2SV_ModStart> -> version > 0 ? get_symbol ( c , state , 0 ) : <S2SV_ModEnd> f -> avctx -> <S2SV_ModStart> -> avctx -> bits_per_raw_sample ; chroma_planes = get_rac ( c , state ) ; chroma_h_shift <S2SV_ModStart> , 0 ) ; chroma_v_shift = get_symbol ( c , state , 0 ) ; transparency <S2SV_ModEnd> = get_rac ( c <S2SV_ModStart> , state ) ; <S2SV_ModEnd> if ( f -> <S2SV_ModStart> ) { if ( colorspace != f -> colorspace || bits_per_raw_sample != f -> avctx -> bits_per_raw_sample || <S2SV_ModStart> AVERROR_INVALIDDATA ; } } f -> colorspace = colorspace ; f -> avctx -> bits_per_raw_sample = bits_per_raw_sample ;
<S2SV_ModStart> ) { if ( c -> mpeg4_studio_profile <S2SV_ModEnd> ) c -> idct_put
<S2SV_ModStart> * s ) { if ( s -> codec_id == AV_CODEC_ID_MPEG4 ) s -> idsp . mpeg4_studio_profile = s -> studio_profile ;
<S2SV_ModStart> ret ; int blockstodecode ; uint64_t decoded_buffer_size <S2SV_ModStart> || nblocks > INT_MAX / 2 / sizeof ( * s -> decoded_buffer ) - 8 <S2SV_ModStart> s -> samples ; decoded_buffer_size = 2LL * FFALIGN ( blockstodecode , 8 ) * sizeof ( * s -> decoded_buffer ) ; av_assert0 ( decoded_buffer_size <= INT_MAX ) ; <S2SV_ModStart> s -> decoded_size , decoded_buffer_size <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> { av_log ( mxf -> fc
<S2SV_ModStart> -> cur_pic . field_picture <S2SV_ModEnd> ) return 0 ;
<S2SV_ModStart> ) ; frame_end : if ( ! s -> studio_profile )
<S2SV_ModStart> * avctx ) { MpegEncContext * s = avctx -> priv_data ; <S2SV_ModStart> ) { av_assert1 ( s -> studio_profile <S2SV_ModEnd> ) ; return avctx
<S2SV_ModStart> -> studio_profile ) { <S2SV_ModEnd> if ( ! s
<S2SV_ModStart> ; i ++ ) { if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) + size ; }
<S2SV_ModStart> ret ; if ( * value == 0 ||
<S2SV_ModStart> ! * ptrptr && nmemb && size <S2SV_ModEnd> ) return AVERROR (
<S2SV_ModStart> [ 100 ] ; len = FFMIN ( FFMAX ( len , 0 ) , sizeof ( color_name ) - 1 ) ;
<S2SV_ModStart> -> pixels ) ; av_freep ( & x -> buf ) ; x -> buf_size = 0 ;
<S2SV_ModStart> end , * ptr <S2SV_ModEnd> ; int ncolors , <S2SV_ModStart> pix_fmt = AV_PIX_FMT_BGRA ; av_fast_padded_malloc ( & x -> buf , & x -> buf_size , avpkt -> size ) ; if ( ! x -> buf ) return AVERROR ( ENOMEM ) ; memcpy ( x -> buf , avpkt -> data , avpkt -> size ) ; x -> buf [ avpkt -> size ] = 0 ; ptr = x -> buf ; end = x -> buf <S2SV_ModEnd> + avpkt -> size <S2SV_ModStart> size ; while ( end - ptr > 9 && <S2SV_ModStart> "/*<S2SV_blank>XPM<S2SV_blank>*/" , 9 ) ) ptr ++ ; if ( end - ptr <= 9 <S2SV_ModEnd> ) { av_log ( <S2SV_ModStart> ++ ) size *= 95 <S2SV_ModEnd> ; if ( ncolors <S2SV_ModStart> ) + 1 ; if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 1 ; if ( end - ptr < cpp <S2SV_ModEnd> ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) + 1 ; if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ] ) ; if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) + 1 ; if ( end - ptr < 1 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ) { if ( end - ptr < cpp <S2SV_ModEnd> ) return AVERROR_INVALIDDATA ;
<S2SV_ModStart> ) ) ) { if ( end - p >= ( sizeof ( ff_asf_guid ) * 3 + 26 ) ) { <S2SV_ModStart> AVERROR_INVALIDDATA ; } } } <S2SV_ModStart> chunksize = 46 ; if ( chunksize > end - p ) { av_log ( NULL , AV_LOG_ERROR , "Corrupt<S2SV_blank>stream<S2SV_blank>(header<S2SV_blank>chunksize<S2SV_blank>%" PRId64 "<S2SV_blank>is<S2SV_blank>invalid)\\n" , chunksize ) ; return AVERROR_INVALIDDATA ; }
<S2SV_ModStart> -> pts == AV_NOPTS_VALUE || av_fifo_size ( s -> fifo ) <= 0
<S2SV_ModStart> idx += run ; if ( idx > 63 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> <= 20 ) { if ( idx > 63 ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> == 21 ) { if ( idx > 63 ) return AVERROR_INVALIDDATA ;
<S2SV_ModStart> ( c -> width + 15 , 16 ) * 3 ; aligned_height = c -> height + 15 <S2SV_ModEnd> ; av_free ( c
<S2SV_ModStart> * s ) { int64_t <S2SV_ModEnd> hours , minutes ,
<S2SV_ModStart> -> bpp <= 8 && c -> format != CHUNKY
<S2SV_ModStart> av_bprint_get_buffer ( bp , 2 , & buf , & buf_size ) ; if ( buf_size < 2 <S2SV_ModEnd> ) { ret = <S2SV_ModStart> . avail_out = buf_size - 1
<S2SV_ModStart> plane = 0 ; plane < 4 && in -> data [ plane ] && in -> linesize [ plane ] <S2SV_ModEnd> ; plane ++ ) <S2SV_ModStart> plane = 0 ; plane < 4 && in -> data [ plane ] && in -> linesize [ plane ] <S2SV_ModEnd> ; plane ++ )
<S2SV_ModStart> && in -> data [ plane ] && in -> linesize
<S2SV_ModStart> && src -> data [ plane ] && src -> linesize
<S2SV_ModStart> data [ plane ] && frame -> linesize [ plane ]
<S2SV_ModStart> data [ p ] && in -> linesize [ p ]
<S2SV_ModStart> data [ plane ] && in -> linesize [ plane ]
<S2SV_ModStart> plane = 0 ; plane < 4 && inpic -> data [ plane ] && inpic -> linesize [ plane ] <S2SV_ModEnd> ; plane ++ )
<S2SV_ModStart> data [ plane ] && in -> linesize [ plane ]
<S2SV_ModStart> data [ i ] && out -> linesize [ i ]
<S2SV_ModStart> data [ plane ] && frame -> linesize [ plane ]
<S2SV_ModStart> && frame -> data [ plane ] && frame -> linesize <S2SV_ModStart> data [ plane ] && frame -> linesize [ plane ]
<S2SV_ModStart> && in -> data [ plane ] && in -> linesize
<S2SV_ModStart> x , y ; av_assert0 ( s -> bit_depth > 1 ) ;
<S2SV_ModStart> v , i ; if ( ! ( s -> state & PNG_IHDR ) ) { av_log ( avctx , AV_LOG_ERROR , "trns<S2SV_blank>before<S2SV_blank>IHDR\\n" ) ; return AVERROR_INVALIDDATA ; } if ( s -> state & PNG_IDAT ) { av_log ( avctx , AV_LOG_ERROR , "trns<S2SV_blank>after<S2SV_blank>IDAT\\n" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> length != 6 ) || s -> bit_depth == 1
<S2SV_ModStart> i ] ) ; memset ( h -> delayed_pic , 0 , sizeof ( h -> delayed_pic ) ) ;
<S2SV_ModStart> AVStream * st ; int ret ; <S2SV_ModStart> , val ) ; ret = <S2SV_ModStart> 3 ] ) ; if ( ret != 4 ) return AVERROR_INVALIDDATA ;
<S2SV_ModStart> ( ! new_buffer ) { pc -> index = 0 ; <S2SV_ModStart> ( ENOMEM ) ; } <S2SV_ModStart> ( ! new_buffer ) { pc -> overread_index = pc -> index = 0 ; <S2SV_ModStart> ( ENOMEM ) ; }
<S2SV_ModStart> frame < width + 4 <S2SV_ModEnd> ) return AVERROR_INVALIDDATA ;
<S2SV_ModStart> -> timescale > UINT16_MAX || ! track -> par -> channels
<S2SV_ModStart> plane ] + y / s -> cdy [ compno ] <S2SV_ModStart> = line + x / s -> cdx [ compno ] <S2SV_ModStart> plane ] + y / s -> cdy [ compno ] <S2SV_ModStart> linel + ( x / s -> cdx [ compno ]
<S2SV_ModStart> int dst_size ) { GetByteContext gb ; if ( data >= data_end <S2SV_ModEnd> ) return - 1 <S2SV_ModStart> return - 1 ; bytestream2_init ( & gb , data , data_end - data ) ; return amf_get_field_value2 ( & gb , name , dst , dst_size ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> break ; # if ENABLE_BGP_VNC_ATTR <S2SV_ModEnd> case BGP_ATTR_VNC : #
<S2SV_ModStart> ) ; # if ENABLE_BGP_VNC_ATTR <S2SV_ModEnd> bgp_packet_mpattr_tea ( bgp ,
<S2SV_ModStart> break ; # if ENABLE_BGP_VNC_ATTR <S2SV_ModEnd> case BGP_ATTR_VNC : attrname
<S2SV_ModStart> ) ; rc = foreach_shareopt <S2SV_ModEnd> ( shareopts , get_linux_shareopts_cb
<S2SV_ModStart> sizeof ( SecBuffer ) ) ; SecInvalidateHandle ( & credssp -> context
<S2SV_ModStart> -> credssp ) ; rdp -> nego -> transport -> credssp = NULL ;
<S2SV_ModStart> -> credssp ) ; transport -> credssp = NULL ;
<S2SV_ModStart> -> credssp ) ; transport -> credssp = NULL ;
<S2SV_ModStart> if ( ! handle || ! SecIsValidHandle ( handle )
<S2SV_ModStart> if ( ! handle || ! SecIsValidHandle ( handle )
<S2SV_ModStart> context -> gdi ; UINT32 size = DstWidth * DstHeight ; <S2SV_ModStart> gdi -> dstFormat ; if ( ( GetBytesPerPixel ( bitmap -> format ) == 0 ) || ( DstWidth == 0 ) || ( DstHeight == 0 ) || ( DstWidth > UINT32_MAX / DstHeight ) || ( size > ( UINT32_MAX / GetBytesPerPixel ( bitmap -> format ) ) ) ) return FALSE ; size *= GetBytesPerPixel ( bitmap -> format ) ; <S2SV_ModStart> bitmap -> length = size <S2SV_ModEnd> ; bitmap -> data
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> > 0 ) { const UINT64 offset = ( UINT64 ) <S2SV_ModEnd> fields -> BufferOffset + <S2SV_ModStart> fields -> BufferOffset + ( UINT64 ) fields -> Len ; if ( offset <S2SV_ModEnd> > Stream_Length ( s
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> -> count ) { UINT32 <S2SV_ModEnd> count = bitmapUpdate -> <S2SV_ModStart> number * 2 ; BITMAP_DATA *
<S2SV_ModStart> ( wmac ) ; if ( ! <S2SV_ModStart> length , rdp ) ) return FALSE
<S2SV_ModStart> * rdp ) { if ( rdp -> rc4_decrypt_key == NULL ) return FALSE ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_decode ( NSC_CONTEXT * <S2SV_ModStart> y ; UINT16 rw ; BYTE shift ; BYTE * bmpdata ; size_t pos = 0 ; if ( ! context ) return FALSE ; rw <S2SV_ModStart> , 8 ) ; <S2SV_ModEnd> shift = context -> <S2SV_ModStart> ColorLossLevel - 1 ; <S2SV_ModEnd> bmpdata = context -> <S2SV_ModStart> = context -> BitmapData ; if ( ! bmpdata ) return FALSE <S2SV_ModStart> co_val - cg_val ; if ( pos + 4 > context -> BitmapDataLength ) return FALSE ; pos += 4 ; <S2SV_ModStart> ++ ; } } return TRUE ;
<S2SV_ModStart> ) return FALSE ; { BOOL rc ; <S2SV_ModStart> priv -> prof_nsc_rle_decompress_data ) rc = <S2SV_ModStart> priv -> prof_nsc_rle_decompress_data ) if ( ! rc ) return FALSE ; } { BOOL rc ; <S2SV_ModStart> priv -> prof_nsc_decode ) rc = <S2SV_ModStart> priv -> prof_nsc_decode ) if ( ! rc ) return FALSE ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE * <S2SV_ModStart> , BYTE * out , UINT32 outSize <S2SV_ModStart> == 5 ) { if ( outSize < 1 ) return FALSE ; outSize -- ; <S2SV_ModStart> += 4 ; } if ( outSize < len ) return FALSE ; outSize -= len ; <S2SV_ModStart> ; } else { if ( outSize < 1 ) return FALSE ; outSize -- ; * out ++ = value ; left -- ; } } if ( ( outSize < 4 ) || ( left < 4 ) ) return FALSE ; memcpy ( out , in , 4 ) ; return TRUE <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT * <S2SV_ModStart> ; UINT32 originalSize ; if ( ! context ) return FALSE ; <S2SV_ModStart> planeSize == 0 ) { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModStart> , 0xFF ) ; } <S2SV_ModStart> planeSize < originalSize ) { if ( ! <S2SV_ModStart> [ i ] , context -> priv -> PlaneBuffersLength , originalSize ) ) return FALSE ; } else { if ( context -> priv -> PlaneBuffersLength < originalSize ) return FALSE ; <S2SV_ModEnd> CopyMemory ( context -> <S2SV_ModStart> , originalSize ) ; } <S2SV_ModStart> += planeSize ; } return TRUE ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT * <S2SV_ModStart> UINT32 rowstride ) { if ( ! context || ! bmpdata || ( rowstride == 0 ) ) return FALSE ; if ( ! <S2SV_ModStart> bmpdata , rowstride ) ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel ) { if ( ! <S2SV_ModStart> nsc_encode_subsampling ( context ) ) return FALSE ; } return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT * <S2SV_ModStart> a_val ; UINT32 tempWidth ; if ( ! context || data || ( scanline == 0 ) ) return FALSE <S2SV_ModStart> context -> ColorLossLevel ; if ( context -> priv -> PlaneBuffersLength < rw * scanline ) return FALSE ; if ( rw < scanline * 2 ) return FALSE ; <S2SV_ModStart> rw ) ; } return TRUE ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_subsampling ( NSC_CONTEXT * <S2SV_ModStart> ; UINT16 y ; <S2SV_ModEnd> UINT32 tempWidth ; UINT32 <S2SV_ModStart> tempWidth ; UINT32 tempHeight ; if ( ! context ) return FALSE <S2SV_ModStart> , 2 ) ; if ( tempHeight == 0 ) return FALSE ; if ( tempWidth > context -> priv -> PlaneBuffersLength / tempHeight ) return FALSE ; <S2SV_ModStart> y ++ ) { BYTE * <S2SV_ModStart> >> 1 ) ; BYTE * <S2SV_ModStart> >> 1 ) ; const INT8 * <S2SV_ModStart> ) * tempWidth ; const INT8 * <S2SV_ModStart> co_src0 + tempWidth ; const INT8 * <S2SV_ModStart> ) * tempWidth ; const INT8 * <S2SV_ModStart> 2 ; } } return TRUE ;
<S2SV_ModStart> static UINT32 nsc_rle_encode ( const
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_sse2 ( NSC_CONTEXT * <S2SV_ModStart> context ) ; } return TRUE ;
<S2SV_ModStart> return TRUE ; } <S2SV_ModEnd> } else if ( <S2SV_ModStart> return TRUE ; } <S2SV_ModEnd> } else if ( <S2SV_ModStart> return TRUE ; } } else <S2SV_ModEnd> { g_set_error ( error
<S2SV_ModStart> ; gchar * filename = NULL ; gint file_handle <S2SV_ModStart> , use_gimp_2_8_features ) ; file_handle = g_file_open_tmp ( "gimp-test-XXXXXX.xcf" , & filename , NULL ) ; g_assert ( file_handle != - 1 ) ; close ( file_handle <S2SV_ModEnd> ) ; file =
<S2SV_ModStart> conn = conn ; <S2SV_ModEnd> g_debug ( "GsmXSMPClient:<S2SV_blank>Initializing<S2SV_blank>client<S2SV_blank>%s" ,
<S2SV_ModStart> ice_connection ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( channel ) ; <S2SV_ModEnd> set_description ( client )
<S2SV_ModStart> ; } GsmIceConnectionData ; typedef struct { guint watch_id ; guint protocol_timeout ; } GsmIceConnectionWatch ; static void disconnect_ice_connection ( IceConn ice_conn ) { IceSetShutdownNegotiation ( ice_conn , FALSE ) ; IceCloseConnection <S2SV_ModEnd> ( ice_conn ) ; <S2SV_ModStart> ( ice_conn ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> { IceConn ice_conn ; GsmClient * client ; GsmIceConnectionWatch * data <S2SV_ModEnd> ; if ( server <S2SV_ModStart> ( sms_conn ) ; data <S2SV_ModEnd> = ice_conn -> context <S2SV_ModStart> ice_conn -> context ; free_ice_connection_watch ( data ) ; client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store , gsm_client_peek_id ( client ) , G_OBJECT ( client ) ) ; g_object_unref ( client <S2SV_ModEnd> ) ; gsm_xsmp_client_connect ( <S2SV_ModStart> ) ; gsm_xsmp_client_connect ( GSM_XSMP_CLIENT ( client ) <S2SV_ModEnd> , sms_conn , mask_ret
<S2SV_ModStart> ( subdir ) { dir = GSF_IS_INFILE_TAR ( subdir ) ? GSF_INFILE_TAR ( subdir ) : dir ; <S2SV_ModStart> ( subdir ) ; <S2SV_ModEnd> } else dir =
<S2SV_ModStart> ) < 0 ) { xmlFreeInputStream ( input ) ; return ; } <S2SV_ModEnd> if ( entity ->
<S2SV_ModStart> , input -> cur ) ; } if ( ( ( ctxt -> inputNr > 40 ) && ( ( ctxt -> options & XML_PARSE_HUGE ) == 0 ) ) || ( ctxt -> inputNr > 1024 ) ) { xmlFatalErr ( ctxt , XML_ERR_ENTITY_LOOP , NULL ) ; while ( ctxt -> inputNr > 1 ) xmlFreeInputStream ( inputPop ( ctxt ) ) ; return ( - 1
<S2SV_ModStart> ( l ) ; <S2SV_ModEnd> } } if ( <S2SV_ModStart> , XML_ERR_NAME_TOO_LONG , "Name" ) ; return ( NULL ) ; } if ( ctxt -> input -> cur - ctxt -> input -> base < len ) { xmlFatalErr ( ctxt , XML_ERR_INTERNAL_ERROR , "unexpected<S2SV_blank>change<S2SV_blank>of<S2SV_blank>input<S2SV_blank>buffer"
<S2SV_ModStart> ; gboolean res ; g_autofree gchar * trusted = NULL ; <S2SV_ModStart> return TRUE ; } trusted = nautilus_file_get_metadata ( file , NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED , NULL ) ; <S2SV_ModStart> nautilus_file_can_execute ( file ) && trusted != NULL
<S2SV_ModStart> cancellable ) ) { mark_desktop_file_executable <S2SV_ModEnd> ( job , job
<S2SV_ModStart> ) , _ ( "_Cancel" ) , GTK_RESPONSE_CANCEL ) ; gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ) , GTK_RESPONSE_CANCEL <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ) , _ ( "Trust<S2SV_blank>and<S2SV_blank>_Launch" ) , GTK_RESPONSE_OK ) ; } <S2SV_ModEnd> g_signal_connect ( dialog ,
<S2SV_ModStart> response_id ) { case GTK_RESPONSE_OK : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_set_metadata ( parameters -> file , NAUTILUS_METADATA_KEY_DESKTOP_FILE_TRUSTED , NULL , "yes" ) ; nautilus_file_mark_desktop_file_executable ( file , parameters -> parent_window , TRUE , NULL , NULL ) ; nautilus_file_invalidate_all_attributes ( parameters -> file ) ; <S2SV_ModEnd> screen = gtk_widget_get_screen ( <S2SV_ModStart> ( uri ) ; <S2SV_ModEnd> g_object_unref ( file )
<S2SV_ModStart> ( current_emoji_type ) ; if ( iter -> start == iter -> end ) iter -> end = g_utf8_next_char ( iter -> end ) ;
<S2SV_ModStart> : { guint uint_val ; if ( value_len < 4 ) break ; uint_val <S2SV_ModStart> : { gboolean bool_val ; if ( value_len < 4 ) break ; bool_val
<S2SV_ModStart> ; size_t columns , rows ; rows = MagickMax ( GetImageListLength ( images ) , <S2SV_ModEnd> ( size_t ) GetMagickResourceLimit <S2SV_ModStart> GetMagickResourceLimit ( ThreadResource ) ) <S2SV_ModStart> * ) AcquireQuantumMemory ( rows , <S2SV_ModEnd> sizeof ( * pixels <S2SV_ModStart> ) NULL ) ; columns = MaxPixelChannels ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; for ( i = 0 <S2SV_ModEnd> ; i < ( <S2SV_ModStart> < ( ssize_t ) rows <S2SV_ModEnd> ; i ++ )
<S2SV_ModStart> ) ; END_OF_READING : <S2SV_ModEnd> CloseBlob ( image ) <S2SV_ModStart> p -> previous ; if ( tmp == image2 ) image2 = ( Image * ) NULL ;
<S2SV_ModStart> = ( size_t ) floor <S2SV_ModStart> = ( size_t ) floor <S2SV_ModStart> = ( size_t ) floor <S2SV_ModStart> = ( size_t ) floor <S2SV_ModStart> = ( size_t ) floor
<S2SV_ModStart> ) { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image -> <S2SV_ModStart> else { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels , viff_info
<S2SV_ModStart> memory ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count , quantum
<S2SV_ModStart> extent ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count , quantum
<S2SV_ModStart> length ) ) ; if ( DiscardBlobBytes ( image , length ) == <S2SV_ModEnd> MagickFalse ) { layer_info <S2SV_ModStart> ThrowBinaryException ( CorruptImageError , "UnexpectedEndOfFile" <S2SV_ModEnd> , image -> filename <S2SV_ModStart> , image -> filename <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> # if defined ( MAGICKCORE_WINDOWS_SUPPORT ) && defined ( _DEBUG ) "<S2SV_blank>Debug" # endif # if defined ( MAGICKCORE_CIPHER_SUPPORT ) "<S2SV_blank>Cipher" <S2SV_ModEnd> # endif # if <S2SV_ModStart> ( MAGICKCORE_HDRI_SUPPORT ) "<S2SV_blank>HDRI" # endif # if defined ( MAGICKCORE_BUILD_MODULES ) || defined ( _DLL ) "<S2SV_blank>Modules" <S2SV_ModStart> ) "<S2SV_blank>OpenMP" # endif # if defined ( ZERO_CONFIGURATION_SUPPORT ) "<S2SV_blank>Zero-configuration" # endif
<S2SV_ModStart> ) ; if ( ( p == q ) || ( size < 16 ) || ( size > 256 ) <S2SV_ModEnd> ) return ( (
<S2SV_ModStart> i ] . size ; if ( ~ length < 16 ) ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" )
<S2SV_ModStart> ) AcquireQuantumMemory ( imsx , imsy <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> imbuf , background_color_index , ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( dmsx , dmsy <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> dmbuf , background_color_index , ( size_t ) <S2SV_ModStart> y , imbuf + ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( dmsx , dmsy <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> dmbuf , background_color_index , ( size_t ) <S2SV_ModStart> y , imbuf + ( size_t ) <S2SV_ModStart> ResetMagickMemory ( imbuf + ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( dmsx , dmsy <S2SV_ModEnd> ) ) == NULL
<S2SV_ModStart> == MagickCoreSignature ) ; pixel = 0 ;
<S2SV_ModStart> data_storage_type == VFF_TYP_BIT ) { if ( CheckMemoryOverflow <S2SV_ModEnd> ( ( image -> <S2SV_ModStart> 7UL ) >> 3UL , image -> rows ) != MagickFalse ) ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; max_packets = ( ( image -> columns + 7UL ) >> 3UL ) * image -> rows ; } else { if ( CheckMemoryOverflow ( number_pixels , viff_info . number_data_bands ) != MagickFalse ) ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <S2SV_ModEnd> max_packets = ( size_t <S2SV_ModStart> . number_data_bands ) ; }
<S2SV_ModStart> exception , message ) \\\n{ <S2SV_ModEnd> if ( info . <S2SV_ModStart> message ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ MagickPathExtent <S2SV_ModStart> ) ; if ( length > ( size_t ) GetBlobSize ( image ) ) ThrowDCMException ( CorruptImageError , "InsufficientImageDataInFile" ) ; if (
<S2SV_ModStart> bytes_per_line , extent , height , <S2SV_ModStart> , "UnableToReadImageData" ) ; <S2SV_ModEnd> height = sun_info . <S2SV_ModStart> , "MemoryAllocationFailed" ) ; if ( sun_info . type == RT_ENCODED ) <S2SV_ModStart> ( sun_data ) ; <S2SV_ModEnd> p = sun_pixels ;
<S2SV_ModStart> ( pixel_info ) ; ( void ) ResetMagickMemory ( pixels , 0 , pixel_info_length ) ;
<S2SV_ModStart> PCDGetBits ( n ) \\\n{ <S2SV_ModEnd> sum = ( sum <S2SV_ModStart> p ++ ; } \\\n} <S2SV_ModEnd> typedef struct PCDTable { <S2SV_ModStart> ( buffer ) ; for ( j = 0 ; j < i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ] ) ; <S2SV_ModStart> ) RelinquishMagickMemory ( buffer ) ; for ( j = 0 ; j <= i ; j ++ ) pcd_table [ j ] = ( PCDTable * ) RelinquishMagickMemory ( pcd_table [ j ]
<S2SV_ModStart> 2 ) / 3 ) ThrowReaderException ( CorruptImageError , "InvalidColormapIndex" ) ; if ( WPG_Palette . StartIndex > WPG_Palette . NumOfEntries
<S2SV_ModStart> c < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; } <S2SV_ModEnd> * p ++ = <S2SV_ModStart> c < 0 ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; } <S2SV_ModEnd> * p ++ =
<S2SV_ModStart> = DestroyQuantumInfo ( quantum_info ) ; canvas_image = DestroyImage ( canvas_image
<S2SV_ModStart> nibble ) ; } if ( image -> depth > 1 ) { SetPSDPixel ( image , channels , type , packet_size , pixel , q , exception ) ; q += GetPixelChannels ( image ) ; } else <S2SV_ModEnd> { ssize_t bit , <S2SV_ModStart> bit ++ ) { SetPSDPixel ( image , channels , type , packet_size <S2SV_ModEnd> , ( ( ( <S2SV_ModStart> : 255 , q , exception <S2SV_ModEnd> ) ; q += <S2SV_ModStart> x ++ ; } if ( x != image -> columns ) <S2SV_ModStart> continue ; } } <S2SV_ModEnd> return ( SyncAuthenticPixels (
<S2SV_ModStart> , number_colormaps , number_planes , number_planes_filled <S2SV_ModStart> image -> rows ; number_planes_filled = ( number_planes % 2 == 0 ) ? number_planes : number_planes + 1 ; <S2SV_ModStart> ( ( number_pixels * number_planes_filled <S2SV_ModEnd> ) != ( size_t <S2SV_ModStart> ) ( number_pixels * number_planes_filled <S2SV_ModEnd> ) ) ThrowReaderException ( <S2SV_ModStart> image -> rows * number_planes_filled <S2SV_ModEnd> ; pixel_info = AcquireVirtualMemory
<S2SV_ModStart> ) AcquireQuantumMemory ( pixels_length + image -> rows
<S2SV_ModStart> j ++ ) { CheckNumberCompactPixels ; <S2SV_ModStart> break ; } } <S2SV_ModEnd> compact_pixels ++ ; }
<S2SV_ModStart> , "`%s\'" , option ) ; page_geometry = DestroyString ( page_geometry
<S2SV_ModStart> image -> rows * MagickMax ( number_planes_filled , 4 ) <S2SV_ModEnd> * sizeof ( * <S2SV_ModStart> image -> rows * MagickMax ( number_planes_filled , 4 ) <S2SV_ModEnd> ; pixels = (
<S2SV_ModStart> AcquireQuantumMemory ( packets + 257UL <S2SV_ModEnd> , image -> rows
<S2SV_ModStart> number_pixels ; x += 4 <S2SV_ModEnd> ) { for (
<S2SV_ModStart> ) , "enter" ) ; quantum_info = ( QuantumInfo * ) NULL <S2SV_ModStart> ( BImgBuff ) ; if ( quantum_info != ( QuantumInfo * ) NULL )
<S2SV_ModStart> == PseudoClass ) { image -> colormap = ( PixelPacket * ) AcquireQuantumMemory ( image -> colors + 1 , sizeof ( * image -> colormap ) ) ; if ( image -> colormap == ( PixelPacket * ) NULL <S2SV_ModEnd> ) ThrowReaderException ( ResourceLimitError <S2SV_ModStart> ) ) break ; if ( ( AcquireMagickResource ( WidthResource <S2SV_ModEnd> , image -> columns <S2SV_ModStart> , image -> columns ) == MagickFalse ) || ( AcquireMagickResource ( HeightResource <S2SV_ModStart> image -> rows ) == MagickFalse ) ) ThrowReaderException ( ImageError , "WidthOrHeightExceedsLimit" ) ; <S2SV_ModEnd> status = PersistPixelCache (
<S2SV_ModStart> . maptype ) { case RMT_NONE : break ;
<S2SV_ModStart> rows = height ; if ( ( max_value == 0 ) || ( max_value > 4294967295 ) ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; <S2SV_ModStart> ; depth ++ ) <S2SV_ModEnd> ; image -> depth
<S2SV_ModStart> & Rec . RecordLength ) ; if ( Rec . RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader"
<S2SV_ModStart> != 0 ) { if ( image -> colors < tga_info . colormap_index ) image -> colors = tga_info . colormap_index ;
<S2SV_ModStart> != 0 ) { if ( EOFBlob ( image ) != MagickFalse ) ThrowReaderException ( CorruptImageError , "UnexpectedEndOfFile" ) ;
<S2SV_ModStart> , "MemoryAllocationFailed" ) ; ( void ) ResetMagickMemory ( BImgBuff , 0 , ldblk * sizeof ( double ) ) ;
<S2SV_ModStart> case 0x0004 : { if ( data == ( unsigned char * ) NULL ) break ; <S2SV_ModStart> case 0x0008 : { if ( data == ( unsigned char * ) NULL ) break ; <S2SV_ModStart> = 0 ; i <= ( ssize_t ) GetQuantumRange ( depth <S2SV_ModEnd> ) ; i ++ <S2SV_ModStart> ) NULL ) { if ( pixel . red <= GetQuantumRange ( depth ) ) <S2SV_ModStart> . red ] ; if ( pixel . green <= GetQuantumRange ( depth ) ) <S2SV_ModStart> . green ] ; if ( pixel . blue <= GetQuantumRange ( depth ) )
<S2SV_ModStart> ) return ( ( ( <S2SV_ModStart> 7 ) / 8 ) * GetPSDPacketSize ( image )
<S2SV_ModStart> GIFOutputCode ( code ) \\\n{ <S2SV_ModEnd> if ( bits > <S2SV_ModStart> number_bits ) ; } \\\n} <S2SV_ModEnd> Quantum index ; short <S2SV_ModStart> x ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> k -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if ( hash_code
<S2SV_ModStart> ThrowReaderException ( ResourceLimitError , "ImproperImageHeader" <S2SV_ModEnd> ) ; number_pixels = <S2SV_ModStart> ThrowReaderException ( ResourceLimitError , "ImproperImageHeader" <S2SV_ModEnd> ) ; bytes_per_line += <S2SV_ModStart> ThrowReaderException ( ResourceLimitError , "ImproperImageHeader" <S2SV_ModEnd> ) ; bytes_per_line >>= <S2SV_ModStart> * height ) ; else { if ( sun_info . length > ( height * bytes_per_line ) ) ThrowReaderException ( ResourceLimitError , "ImproperImageHeader" ) ; ( void ) CopyMagickMemory ( sun_pixels , sun_data , sun_info . length ) ; }
<S2SV_ModStart> ) != EOF ) if ( <S2SV_ModEnd> fputc ( c , <S2SV_ModStart> c , file ) != c ) break
<S2SV_ModStart> exception , message ) \\\n{ <S2SV_ModEnd> if ( info . <S2SV_ModStart> message ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ MagickPathExtent <S2SV_ModStart> ; break ; } if ( <S2SV_ModEnd> fputc ( c , <S2SV_ModStart> c , file ) != c ) break
<S2SV_ModStart> exception , message ) \\\n{ <S2SV_ModEnd> if ( tile_image != <S2SV_ModStart> message ) ) ; \\\n} <S2SV_ModEnd> char geometry [ MagickPathExtent <S2SV_ModStart> EOF ) break ; if ( <S2SV_ModEnd> fputc ( c , <S2SV_ModStart> c , file ) != c ) break
<S2SV_ModStart> EOF ) break ; if ( <S2SV_ModEnd> fputc ( c , <S2SV_ModStart> c , file ) != c ) break
<S2SV_ModStart> number_planes_filled , one , pixel_info_length ; ssize_t count , offset <S2SV_ModEnd> , y ; unsigned <S2SV_ModStart> ++ ; if ( ( offset < 0 ) || ( <S2SV_ModStart> number_planes ) > pixel_info_length ) <S2SV_ModStart> number_planes + plane ; if ( ( offset < 0 ) || ( offset + ( ( size_t ) operand * number_planes ) > pixel_info_length ) ) { if ( number_colormaps != 0 ) colormap = ( unsigned char * ) RelinquishMagickMemory ( colormap ) ; pixel_info = RelinquishVirtualMemory ( pixel_info ) ; ThrowReaderException ( CorruptImageError , "UnableToReadImageData" ) ; } <S2SV_ModStart> pixels + offset ; <S2SV_ModEnd> for ( i =
<S2SV_ModStart> ) RelinquishMagickMemory ( sixel_buffer ) ; sixel_pixels = ( unsigned char * ) RelinquishMagickMemory ( sixel_pixels
<S2SV_ModStart> , "ImproperImageHeader" ) ; bytes_per_line = sun_info . width * sun_info . depth ; <S2SV_ModStart> ( ( size_t ) MagickMax ( <S2SV_ModStart> sun_info . length , bytes_per_line * sun_info . width ) , <S2SV_ModStart> = sun_info . height <S2SV_ModEnd> ; if ( (
<S2SV_ModStart> ; } if ( EOFBlob ( image ) != MagickFalse ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ; if (
<S2SV_ModStart> ssize_t ) length ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> , "UnableToReadImageData" ) ; }
<S2SV_ModStart> , exception ) ; if ( mask != ( Image * ) NULL ) { <S2SV_ModStart> channel_image = mask ; }
<S2SV_ModStart> ( options ) ; if ( image -> number_meta_channels > MaxPixelChannels ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ;
<S2SV_ModStart> # define EOFOp 0x07 # define ThrowRLEException ( exception , message ) \\\n{ if ( colormap != ( unsigned char * ) NULL ) colormap = ( unsigned char * ) RelinquishMagickMemory ( colormap ) ; if ( pixel_info != ( MemoryInfo * ) NULL ) pixel_info = RelinquishVirtualMemory ( pixel_info ) ; ThrowReaderException ( ( exception ) , ( message ) ) ; \\\n} <S2SV_ModStart> image ) ) ; colormap = ( unsigned char * ) NULL ; pixel_info = ( MemoryInfo * ) NULL ; <S2SV_ModStart> page . x = ( ssize_t ) <S2SV_ModStart> page . y = ( ssize_t ) <S2SV_ModStart> , "ImproperImageHeader" ) ; if ( EOFBlob ( image ) != MagickFalse ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; <S2SV_ModStart> ) != MagickFalse ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; <S2SV_ModEnd> colormap = ( unsigned <S2SV_ModStart> ; x ++ ) { <S2SV_ModStart> ) ) ) ; if ( EOFBlob ( image ) != MagickFalse ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; } <S2SV_ModStart> ) != MagickFalse ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; <S2SV_ModEnd> if ( ( image_info <S2SV_ModStart> ( image ) ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; <S2SV_ModStart> ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; if ( opcode & 0x40 ) { <S2SV_ModEnd> operand = ReadBlobLSBSignedShort ( <S2SV_ModStart> ( image ) ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; } <S2SV_ModStart> ( image ) ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; <S2SV_ModStart> ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; if ( opcode & 0x40 ) { <S2SV_ModEnd> operand = ReadBlobLSBSignedShort ( <S2SV_ModStart> ( image ) ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; } <S2SV_ModStart> ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; if ( opcode & 0x40 ) { <S2SV_ModEnd> operand = ReadBlobLSBSignedShort ( <S2SV_ModStart> ( image ) ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; } offset = ( ssize_t ) ( <S2SV_ModEnd> ( ( image -> <S2SV_ModStart> * number_planes + plane ) <S2SV_ModStart> 0 ) || ( ( offset + <S2SV_ModEnd> operand * number_planes ) <S2SV_ModStart> * number_planes ) > ( ssize_t ) <S2SV_ModStart> ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; if ( opcode & 0x40 ) { <S2SV_ModEnd> operand = ReadBlobLSBSignedShort ( <S2SV_ModStart> ( image ) ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; } <S2SV_ModStart> ++ ; offset = ( ssize_t ) ( <S2SV_ModStart> * number_planes + plane ) <S2SV_ModStart> 0 ) || ( ( offset + <S2SV_ModEnd> operand * number_planes ) <S2SV_ModStart> * number_planes ) > ( ssize_t ) <S2SV_ModStart> ( image ) ; if ( opcode == EOF ) ThrowRLEException ( CorruptImageError , "UnexpectedEndOfFile" ) ; <S2SV_ModStart> IsValidColormapIndex ( image , ( ssize_t ) ( <S2SV_ModStart> * p & mask ) <S2SV_ModStart> ( image , ( ssize_t <S2SV_ModEnd> ) ( x * <S2SV_ModStart> IsValidColormapIndex ( image , ( ssize_t ) <S2SV_ModStart> IsValidColormapIndex ( image , ( ssize_t ) <S2SV_ModStart> IsValidColormapIndex ( image , ( ssize_t )
<S2SV_ModStart> break ; } } if ( EOFBlob ( image ) != MagickFalse ) { ThrowFileException ( exception , CorruptImageError , "UnexpectedEndOfFile" , image -> filename ) ; break ; }
<S2SV_ModStart> ; length = extent ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , "InsufficientImageDataInFile" )
<S2SV_ModStart> , 6 ) ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ; <S2SV_ModEnd> ThrowReaderException ( CorruptImageError , <S2SV_ModStart> , "ImproperImageHeader" ) ; }
<S2SV_ModStart> ( image2 ) ; if ( Frames == 0 ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ;
<S2SV_ModStart> storage_class = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image , screen ) ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC (
<S2SV_ModStart> , extent , height <S2SV_ModEnd> ; ssize_t count , <S2SV_ModStart> == PseudoClass ) { for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ssize_t ) image -> columns ; x ++ ) { SetPixelIndex ( image , * p ++ , q ) ; q += GetPixelChannels ( image ) ; } if ( ( <S2SV_ModEnd> image -> columns % <S2SV_ModStart> columns % 2 ) != 0 ) p ++ ; if ( SyncAuthenticPixels ( image , exception ) == MagickFalse ) break ; if ( image -> previous == ( Image * ) NULL ) { status = SetImageProgress ( image , LoadImageTag , ( MagickOffsetType ) y , image -> rows ) ; if ( status == MagickFalse ) break ; } } } else { size_t bytes_per_pixel ; bytes_per_pixel = 3 ; if ( image -> alpha_trait != UndefinedPixelTrait ) bytes_per_pixel ++ ; if ( bytes_per_line == 0 ) bytes_per_line = bytes_per_pixel * image -> columns <S2SV_ModEnd> ; for ( y <S2SV_ModStart> x ++ ) { if ( image -> alpha_trait != UndefinedPixelTrait ) SetPixelAlpha ( image , ScaleCharToQuantum ( * p ++ ) <S2SV_ModEnd> , q ) ; <S2SV_ModStart> , q ) ; if ( sun_info . type == RT_STANDARD ) { SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; } else { SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; } if ( image -> colors != 0 ) { SetPixelRed ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelRed ( image , q ) ] . red ) , q ) ; SetPixelGreen ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelGreen ( image , q ) ] . green ) , q ) ; SetPixelBlue ( image , ClampToQuantum ( image -> colormap [ ( ssize_t ) GetPixelBlue ( image , q ) ] . blue ) , q ) ; } <S2SV_ModStart> } if ( ( <S2SV_ModEnd> ( bytes_per_pixel * image
<S2SV_ModStart> ( image ) ; count = <S2SV_ModEnd> ReadBlob ( image , <S2SV_ModStart> ) iris_info . name ) ; if ( count != sizeof ( iris_info . name ) ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader" <S2SV_ModStart> . filler ) ; if ( count != sizeof ( iris_info . filler ) ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) <S2SV_ModEnd> ; image -> columns <S2SV_ModStart> ; } if ( <S2SV_ModEnd> ( image_info -> ping
<S2SV_ModStart> , * output ; MagickBooleanType status ; <S2SV_ModStart> MagickFalse ) ; } status = MagickTrue ; <S2SV_ModStart> ; i ++ ) { <S2SV_ModEnd> input = fopen_utf8 ( <S2SV_ModStart> ( input ) ) if ( fputc ( ( char ) c , output ) != c ) status = MagickFalse ; ( void ) fclose ( input <S2SV_ModEnd> ) ; ( void <S2SV_ModStart> ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( <S2SV_ModEnd> output ) ; return <S2SV_ModStart> ) ; return ( status <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> c != '\\0' ) && ( c != EOF ) <S2SV_ModStart> [ 2 ] ; if ( <S2SV_ModEnd> sscanf ( value , <S2SV_ModStart> [ 1 ] ) == 8 ) { <S2SV_ModEnd> image -> chromaticity . <S2SV_ModStart> [ 1 ] ; } <S2SV_ModStart> height , width ; if ( <S2SV_ModEnd> sscanf ( value , <S2SV_ModStart> , & width ) == 2 ) { <S2SV_ModEnd> image -> columns = <S2SV_ModStart> size_t ) height ; }
<S2SV_ModStart> exception , message ) \\\n{ <S2SV_ModEnd> if ( data != <S2SV_ModStart> message ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ MaxTextExtent <S2SV_ModStart> ( image ) ) ThrowDCMException <S2SV_ModEnd> ( CorruptImageError , "InsufficientImageDataInFile"
<S2SV_ModStart> ( ResourceLimitError , "MemoryAllocationFailed" ) ; ( void ) ResetMagickMemory ( global_colormap , 0 , 3 * MagickMax ( global_colors , 256 ) * sizeof ( * global_colormap )
<S2SV_ModStart> ; ( void ) strncpy <S2SV_ModEnd> ( clone_info -> magick
<S2SV_ModStart> * ) AcquireQuantumMemory ( MagickMax ( data_length , tile_image -> columns * tile_image -> rows ) <S2SV_ModEnd> , sizeof ( *
<S2SV_ModStart> break ; } } if ( EOFBlob ( image ) != MagickFalse ) { ThrowFileException ( exception , CorruptImageError , "UnexpectedEndOfFile" , image -> filename ) ; break ; }
<S2SV_ModStart> ( const Image * images ) { const Image * next ; <S2SV_ModEnd> PixelChannels * * pixels <S2SV_ModStart> ssize_t i ; size_t columns , <S2SV_ModStart> pixels ) ) ; columns = images -> columns ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; <S2SV_ModStart> * ) AcquireQuantumMemory ( columns , <S2SV_ModEnd> sizeof ( * * <S2SV_ModStart> < ( ssize_t ) <S2SV_ModEnd> columns ; j ++
<S2SV_ModStart> : 0.0 ) ; ( void ) CloneString ( & draw_info -> geometry , <S2SV_ModEnd> geometry ) ; status
<S2SV_ModStart> : 0.0 ) ; ( void ) CloneString ( & draw_info -> geometry , <S2SV_ModEnd> geometry ) ; status
<S2SV_ModStart> exception , message ) \\\n{ <S2SV_ModEnd> if ( tile_image != <S2SV_ModStart> message ) ) ; \\\n} <S2SV_ModEnd> char geometry [ MagickPathExtent <S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" ) ; if ( length <S2SV_ModStart> ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" ) ; if ( <S2SV_ModStart> = ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" <S2SV_ModStart> = ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" <S2SV_ModStart> = ReadBlobMSBShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" <S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" ) ; if ( length <S2SV_ModStart> if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" ) ; if ( length > <S2SV_ModStart> ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" ) ; <S2SV_ModStart> & 0xff ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError , "InsufficientImageDataInFile" ) ;
<S2SV_ModStart> >= 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;
<S2SV_ModStart> ) ; x += 4 <S2SV_ModEnd> ) { index =
<S2SV_ModStart> ; Image * image ; int c <S2SV_ModStart> , length , padding <S2SV_ModEnd> , version , width <S2SV_ModStart> 2 ) ) { c <S2SV_ModEnd> = XBMInteger ( image <S2SV_ModStart> image , hex_digits ) ; if ( c < 0 ) break <S2SV_ModStart> ( unsigned char ) c <S2SV_ModEnd> ; if ( ( <S2SV_ModStart> unsigned char ) ( c <S2SV_ModEnd> >> 8 ) ; <S2SV_ModStart> , hex_digits ) ; if ( c < 0 ) break ; <S2SV_ModStart> ( unsigned char ) c ; } if ( EOFBlob ( image ) != MagickFalse ) { data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) <S2SV_ModEnd> ; } p = <S2SV_ModStart> ) byte = ( unsigned int <S2SV_ModEnd> ) ( * p
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int XBMInteger ( Image <S2SV_ModStart> EOF ) return ( - 1 <S2SV_ModEnd> ) ; } while <S2SV_ModStart> EOF ) return ( - 1 <S2SV_ModEnd> ) ; } return <S2SV_ModStart> ; } return ( ( int )
<S2SV_ModStart> != RT_ENCODED ) && ( ( number_pixels * sun_info . depth ) > ( 8 * sun_info . length ) <S2SV_ModEnd> ) ) ThrowReaderException ( <S2SV_ModStart> * ( bytes_per_line + bytes_per_line <S2SV_ModEnd> % 2 ) ;
<S2SV_ModStart> one ; image -> <S2SV_ModEnd> colors = sun_info . <S2SV_ModStart> maplength / 3 ; if ( AcquireImageColormap ( image , image -> colors , exception ) == MagickFalse ) ThrowReaderException ( ResourceLimitError , "MemoryAllocationFailed" ) ; <S2SV_ModStart> . maptype ) { <S2SV_ModEnd> case RMT_EQUAL_RGB : { <S2SV_ModStart> unsigned char * sun_colormap <S2SV_ModEnd> ; sun_colormap = (
<S2SV_ModStart> ( size_t ) ldblk + 1
<S2SV_ModStart> * ) AcquireQuantumMemory ( MagickMax ( number_pixels , max_packets ) , <S2SV_ModEnd> bytes_per_pixel * sizeof (
<S2SV_ModStart> ( size_t ) count + 1
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static MagickBooleanType <S2SV_ModEnd> InsertRow ( Image * <S2SV_ModStart> * image , ssize_t bpp <S2SV_ModEnd> , unsigned char * <S2SV_ModStart> * exception ) { int bit ; Quantum index ; register Quantum * q ; ssize_t x ; q = QueueAuthenticPixels ( image , 0 , y , image -> columns , 1 , exception ) ; if ( q == ( Quantum * ) NULL ) return ( MagickFalse ) ; switch ( bpp <S2SV_ModEnd> ) { case 1 <S2SV_ModStart> case 1 : { <S2SV_ModEnd> for ( x = <S2SV_ModStart> { index = ( <S2SV_ModEnd> ( * p ) <S2SV_ModStart> ( 0x80 >> bit <S2SV_ModEnd> ) ? 0x01 : <S2SV_ModStart> , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; <S2SV_ModStart> ; bit < ( ssize_t ) ( <S2SV_ModStart> { index = ( <S2SV_ModEnd> ( * p ) <S2SV_ModStart> ( 0x80 >> bit <S2SV_ModEnd> ) ? 0x01 : <S2SV_ModStart> , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; <S2SV_ModStart> p ++ ; } <S2SV_ModEnd> break ; } case <S2SV_ModStart> case 2 : { for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 3 ) ; x += 4 ) { index = ConstrainColormapIndex ( image , ( * p >> 6 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image , ( * p >> 2 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; index = ConstrainColormapIndex ( image , ( * p ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; p ++ ; } if ( ( image -> columns % 4 ) != 0 ) { index = ConstrainColormapIndex ( image , ( * p >> 6 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; if ( ( image -> columns % 4 ) > 1 ) { index = ConstrainColormapIndex ( image , ( * p >> 4 ) & 0x3 <S2SV_ModEnd> , exception ) ; <S2SV_ModStart> , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; if ( ( image -> columns % 4 ) > 2 ) { index = ConstrainColormapIndex ( image , ( * p >> 2 ) & 0x3 , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; q += GetPixelChannels ( image ) ; } } p ++ ; } break ; } case 4 : { <S2SV_ModEnd> for ( x = <S2SV_ModStart> ( * p >> 4 ) & 0x0f <S2SV_ModEnd> , exception ) ; <S2SV_ModStart> , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; <S2SV_ModStart> , ( * p ) & 0x0f <S2SV_ModEnd> , exception ) ; <S2SV_ModStart> , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; p ++ ; <S2SV_ModStart> GetPixelChannels ( image ) <S2SV_ModEnd> ; } if ( <S2SV_ModStart> >> 4 ) & 0x0f <S2SV_ModEnd> , exception ) ; <S2SV_ModStart> , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; p ++ ; <S2SV_ModStart> ( image ) ; } <S2SV_ModEnd> break ; } case <S2SV_ModStart> case 8 : { for ( x = 0 ; x < ( ssize_t ) image -> columns ; x ++ ) { index = ConstrainColormapIndex ( image , * p <S2SV_ModEnd> , exception ) ; <S2SV_ModStart> , exception ) ; SetPixelIndex ( image , index , q ) ; if ( index < image -> colors ) SetPixelViaPixelInfo ( image , image -> colormap + ( ssize_t ) index , q ) ; p ++ ; q += GetPixelChannels ( image ) ; } } break ; case 24 : <S2SV_ModEnd> for ( x = <S2SV_ModStart> x ++ ) { SetPixelRed ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelGreen ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; SetPixelBlue ( image , ScaleCharToQuantum ( * p ++ ) , q ) ; q += GetPixelChannels ( image ) ; } break ; } if ( ! SyncAuthenticPixels ( image , exception ) ) return ( MagickFalse ) ; return ( MagickTrue ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> severity , tag ) \\\n{ <S2SV_ModEnd> if ( palette != <S2SV_ModStart> , tag ) ; \\\n} <S2SV_ModEnd> Image * image , <S2SV_ModStart> ) goto NoMemory ; ( void ) memset ( BImgBuff , 0 , ( size_t ) ldblk * sizeof ( * BImgBuff ) ) ;
<S2SV_ModStart> = ReadBlobMSBShort ( image ) ; if ( ( iris_info . dimension == 0 ) || ( iris_info . dimension > 3 ) ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader"
<S2SV_ModStart> -> name , MaxTextExtent - 1
<S2SV_ModStart> ( image ) ; if ( GetNextImageInList ( image ) != ( Image * ) NULL )

<S2SV_ModStart> a = 1.0f / MagickMax ( w . x , MagickMax <S2SV_ModEnd> ( w . y
<S2SV_ModStart> x , y , MagickMin <S2SV_ModEnd> ( 4 , dds_info <S2SV_ModStart> - x ) , MagickMin <S2SV_ModEnd> ( 4 , dds_info <S2SV_ModStart> MagickFalse ; } } return ( <S2SV_ModStart> , dds_info , 8 , exception ) ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> x , y , MagickMin <S2SV_ModEnd> ( 4 , dds_info <S2SV_ModStart> - x ) , MagickMin <S2SV_ModEnd> ( 4 , dds_info <S2SV_ModStart> MagickFalse ; } } return ( <S2SV_ModStart> , dds_info , 16 , exception ) ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> x , y , MagickMin <S2SV_ModEnd> ( 4 , dds_info <S2SV_ModStart> - x ) , MagickMin <S2SV_ModEnd> ( 4 , dds_info <S2SV_ModStart> MagickFalse ; } } return ( <S2SV_ModStart> , dds_info , 16 , exception ) ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> return MagickFalse ; } return ( <S2SV_ModStart> , dds_info , 4 , exception ) ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> return MagickFalse ; } return ( <S2SV_ModStart> , dds_info , 3 , exception ) ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> value -> x = MagickMin ( 1.0f , MagickMax <S2SV_ModEnd> ( 0.0f , value <S2SV_ModStart> value -> y = MagickMin ( 1.0f , MagickMax <S2SV_ModEnd> ( 0.0f , value <S2SV_ModStart> value -> z = MagickMin ( 1.0f , MagickMax <S2SV_ModEnd> ( 0.0f , value
<S2SV_ModStart> value -> x = MagickMin ( 1.0f , MagickMax <S2SV_ModEnd> ( 0.0f , value <S2SV_ModStart> value -> y = MagickMin ( 1.0f , MagickMax <S2SV_ModEnd> ( 0.0f , value <S2SV_ModStart> value -> z = MagickMin ( 1.0f , MagickMax <S2SV_ModEnd> ( 0.0f , value <S2SV_ModStart> value -> w = MagickMin ( 1.0f , MagickMax <S2SV_ModEnd> ( 0.0f , value
<S2SV_ModStart> format , arg ) \\\n{ <S2SV_ModEnd> ssize_t component ; size_t <S2SV_ModStart> ( buffer ) ; \\\n} <S2SV_ModEnd> # define EXIFMultipleFractions ( <S2SV_ModStart> arg1 , arg2 ) \\\n{ <S2SV_ModEnd> ssize_t component ; size_t <S2SV_ModStart> ( buffer ) ; \\\n} <S2SV_ModEnd> typedef struct _DirectoryInfo { <S2SV_ModStart> ) ; if ( q > ( exif + length - 12 ) ) break ; if ( <S2SV_ModStart> q + 4 ) ; if ( components < 0 ) break
<S2SV_ModStart> [ 4 ] ; unsigned int <S2SV_ModEnd> value ; if ( <S2SV_ModStart> } value = ( unsigned int ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> 0 ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> 16 ; value |= ( unsigned int ) <S2SV_ModStart> 8 ; value |= ( unsigned int ) <S2SV_ModStart> quantum . unsigned_value = value & 0xffffffff <S2SV_ModEnd> ; return ( quantum
<S2SV_ModStart> ( unsigned short ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> 0 ] << 8 ; value |= ( unsigned short ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> quantum . unsigned_value = value & 0xffff <S2SV_ModEnd> ; return ( quantum
<S2SV_ModStart> ( unsigned int ) <S2SV_ModEnd> buffer [ 3 ] <S2SV_ModStart> 3 ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 ] <S2SV_ModStart> 2 ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> 1 ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> buffer [ 0 ] <S2SV_ModEnd> ; quantum . unsigned_value <S2SV_ModStart> quantum . unsigned_value = value & 0xffffffff <S2SV_ModEnd> ; return ( quantum <S2SV_ModStart> ( unsigned int ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> 0 ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> 1 ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 ] <S2SV_ModStart> 2 ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 ] <S2SV_ModStart> buffer [ 3 ] <S2SV_ModEnd> ; quantum . unsigned_value <S2SV_ModStart> quantum . unsigned_value = value & 0xffffffff <S2SV_ModEnd> ; return ( quantum
<S2SV_ModStart> ( unsigned short ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> 1 ] << 8 ; value |= ( unsigned short ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> buffer [ 0 ] <S2SV_ModEnd> ; quantum . unsigned_value <S2SV_ModStart> quantum . unsigned_value = value & 0xffff <S2SV_ModEnd> ; return ( quantum <S2SV_ModStart> ( unsigned short ) buffer <S2SV_ModEnd> [ 0 ] << <S2SV_ModStart> 0 ] << 8 ; value |= ( unsigned short ) buffer [ 1 ] <S2SV_ModEnd> ; quantum . unsigned_value <S2SV_ModStart> quantum . unsigned_value = value & 0xffff <S2SV_ModEnd> ; return ( quantum
<S2SV_ModStart> ( unsigned int ) <S2SV_ModEnd> buffer [ 3 ] <S2SV_ModStart> 3 ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 ] <S2SV_ModStart> 2 ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> 1 ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> buffer [ 0 ] ; return ( value & 0xffffffff <S2SV_ModEnd> ) ; } value <S2SV_ModStart> ( unsigned int ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> 0 ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> 1 ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 ] <S2SV_ModStart> 2 ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 ] <S2SV_ModStart> buffer [ 3 ] ; return <S2SV_ModEnd> ( value & 0xffffffff <S2SV_ModStart> value & 0xffffffff ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( unsigned short ) <S2SV_ModEnd> buffer [ 1 ] <S2SV_ModStart> 1 ] << 8 ; value |= ( unsigned short ) <S2SV_ModEnd> buffer [ 0 ] <S2SV_ModStart> buffer [ 0 ] ; return ( value & 0xffff <S2SV_ModEnd> ) ; } value <S2SV_ModStart> ( unsigned short ) buffer <S2SV_ModEnd> [ 0 ] << <S2SV_ModStart> 0 ] << 8 ; value |= <S2SV_ModEnd> ( unsigned short ) <S2SV_ModStart> ( unsigned short ) buffer [ 1 ] ; return <S2SV_ModStart> value & 0xffff ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> image -> columns - 3 <S2SV_ModEnd> ) ; x += <S2SV_ModStart> ) index ) ; q ++ ; p <S2SV_ModEnd> ++ ; } if <S2SV_ModStart> columns % 4 ) > <S2SV_ModEnd> 1 ) { index <S2SV_ModStart> columns % 4 ) > <S2SV_ModEnd> 2 ) { index
<S2SV_ModStart> image -> rows = 1 <S2SV_ModEnd> ; image -> colors <S2SV_ModStart> RelinquishMagickMemory ( BImgBuff ) <S2SV_ModEnd> ; break ; }
<S2SV_ModStart> ) ; if ( ( MagickSizeType ) <S2SV_ModStart> ) ) break ; offset = ( MagickOffsetType ) bmp_info . ba_offset ; if ( offset != 0 ) if ( ( offset < TellBlob ( image ) ) || ( SeekBlob ( image , offset , SEEK_SET ) != offset ) <S2SV_ModEnd> ) ThrowReaderException ( CorruptImageError <S2SV_ModStart> , "ImproperImageHeader" ) ; * magick = '\\0' ; <S2SV_ModEnd> count = ReadBlob (
<S2SV_ModStart> ; unsigned char * last_row <S2SV_ModEnd> , * one_row , <S2SV_ModStart> , "MemoryAllocationFailed" ) ; last_row <S2SV_ModEnd> = ( unsigned char <S2SV_ModStart> == PALM_COMPRESSION_SCANLINE ) { last_row <S2SV_ModEnd> = ( unsigned char <S2SV_ModStart> , sizeof ( * last_row ) ) ; if ( last_row <S2SV_ModEnd> == ( unsigned char <S2SV_ModStart> + bit ] = last_row <S2SV_ModEnd> [ i + bit <S2SV_ModStart> void ) CopyMagickMemory ( last_row <S2SV_ModEnd> , one_row , bytes_per_row <S2SV_ModStart> compressionType == PALM_COMPRESSION_SCANLINE ) last_row <S2SV_ModEnd> = ( unsigned char <S2SV_ModStart> * ) RelinquishMagickMemory ( last_row <S2SV_ModEnd> ) ; ThrowReaderException ( <S2SV_ModStart> compressionType == PALM_COMPRESSION_SCANLINE ) last_row <S2SV_ModEnd> = ( unsigned char <S2SV_ModStart> * ) RelinquishMagickMemory ( last_row <S2SV_ModEnd> ) ; ThrowReaderException ( <S2SV_ModStart> compressionType == PALM_COMPRESSION_SCANLINE ) last_row <S2SV_ModEnd> = ( unsigned char <S2SV_ModStart> * ) RelinquishMagickMemory ( last_row <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ; if ( ( count < 0 ) || ( ( size_t ) count > length ) ) { length = 0 ; continue ; } if ( (
<S2SV_ModStart> 2 ) / 3 ) ThrowReaderException ( CorruptImageError , "InvalidColormapIndex" ) ; if ( WPG_Palette . StartIndex > WPG_Palette . NumOfEntries
<S2SV_ModStart> + ( ssize_t ) ConstrainColormapIndex ( image , <S2SV_ModStart> ( image , q ) , exception
<S2SV_ModStart> image ) ; } if ( ( ( MagickSizeType ) image -> columns * image -> rows ) > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , "InsufficientImageDataInFile" ) ;
<S2SV_ModStart> ) { MATLAB_KO : if ( clone_info != ( ImageInfo * ) NULL )
<S2SV_ModStart> = ReadBlobLSBLong ( image ) ; if ( bmp_info . number_colors > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError , "InsufficientImageDataInFile"
<S2SV_ModStart> ( read_info ) ; <S2SV_ModEnd> if ( EOFBlob (
<S2SV_ModStart> * ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> , "MemoryAllocationFailed" ) ; } <S2SV_ModStart> == MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> == MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> == MagickFalse ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> * ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ; <S2SV_ModStart> , "MemoryAllocationFailed" ) ; } <S2SV_ModStart> ) NULL ) { scanline = ( unsigned char * ) RelinquishMagickMemory ( scanline ) ;
<S2SV_ModStart> ) , sizeof ( double <S2SV_ModEnd> ) ) ; if
<S2SV_ModStart> ) != MagickTrue ) <S2SV_ModEnd> ThrowReaderException ( CorruptImageError , <S2SV_ModStart> , "ImproperImageHeader" ) ; <S2SV_ModEnd> if ( dds_info . <S2SV_ModStart> dds_info . depth ; if ( num_images < 1 ) ThrowReaderException ( CorruptImageError , "ImproperImageHeader" ) ;
<S2SV_ModStart> ) ; if ( EOFBlob ( image ) != MagickFalse ) { layer_info = DestroyLayerInfo ( layer_info , number_layers ) ; ThrowBinaryException ( CorruptImageError , "InsufficientImageDataInFile" , image -> filename ) ; } if (
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ) ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ( image_info -> ping != MagickFalse <S2SV_ModStart> ; return ( image ) ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image )
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ( image_info -> ping != MagickFalse <S2SV_ModStart> ) goto Finish ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> depth = depth ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; break ; }
<S2SV_ModStart> ) ) ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> . height ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ; return ( GetFirstImageInList ( image ) ) ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList
<S2SV_ModStart> ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status =
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ) break ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> * cube_size ) ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ) ; } status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> depth = 8 ; status = SetImageExtent ( image , image -> columns , image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception , & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }
<S2SV_ModStart> ) ; if ( EOFBlob ( image ) ) break ; if (
<S2SV_ModStart> ) ; while ( filepos < GetBlobSize ( image ) && <S2SV_ModStart> ; if ( filepos > GetBlobSize ( image ) || filepos < 0 <S2SV_ModEnd> ) break ; if <S2SV_ModStart> ObjectSize + filepos ) >= <S2SV_ModEnd> GetBlobSize ( image ) <S2SV_ModStart> i - 1 ) ) ; ThrowReaderException ( CorruptImageError , "UnexpectedEndOfFile"
<S2SV_ModStart> Depth ; UnpackRaster : status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; if ( status == MagickFalse ) break ; <S2SV_ModStart> = Bitmap2Header1 . Height ; status = SetImageExtent ( image , image -> columns , image -> rows , exception ) ; if ( status == MagickFalse ) break <S2SV_ModStart> ) ; } } <S2SV_ModEnd> Finish : ( void
<S2SV_ModStart> status = MagickFalse ; break <S2SV_ModEnd> ; } image =
<S2SV_ModStart> ) NULL ) { status = MagickFalse ; break <S2SV_ModEnd> ; } image =
<S2SV_ModStart> GIFOutputCode ( code ) \\\n{ <S2SV_ModEnd> if ( bits > <S2SV_ModStart> number_bits ) ; } \\\n} <S2SV_ModEnd> IndexPacket index ; short <S2SV_ModStart> x ++ ) { next_pixel = MagickFalse ; displacement = 1 ; <S2SV_ModStart> k -= MaxHashTable ; if ( k < 0 ) continue <S2SV_ModEnd> ; if ( hash_code
<S2SV_ModStart> severity , tag ) \\\n{ <S2SV_ModEnd> if ( palette != <S2SV_ModStart> , tag ) ; \\\n} <S2SV_ModEnd> Image * image , <S2SV_ModStart> ) goto NoMemory ; ( void ) memset ( BImgBuff , 0 , ( size_t ) ldblk * sizeof ( * BImgBuff ) ) ;
<S2SV_ModStart> ( const Image * images ) { const Image * next ; <S2SV_ModEnd> MagickPixelPacket * * pixels <S2SV_ModStart> , j ; size_t columns , <S2SV_ModStart> pixels ) ) ; columns = images -> columns ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; for ( <S2SV_ModEnd> i = 0 ; <S2SV_ModStart> * ) AcquireQuantumMemory ( <S2SV_ModEnd> columns , sizeof ( <S2SV_ModStart> < ( ssize_t ) <S2SV_ModEnd> columns ; j ++ <S2SV_ModStart> ++ ) GetMagickPixelPacket ( images <S2SV_ModEnd> , & pixels [
<S2SV_ModStart> , "`%s\'" , option ) ; geometry = DestroyString ( geometry
<S2SV_ModStart> ; size_t columns , rows ; rows = MagickMax ( GetImageListLength ( images ) , <S2SV_ModEnd> ( size_t ) GetMagickResourceLimit <S2SV_ModStart> GetMagickResourceLimit ( ThreadResource ) ) <S2SV_ModStart> * ) AcquireQuantumMemory ( rows , <S2SV_ModEnd> sizeof ( * pixels <S2SV_ModStart> ) NULL ) ; columns = images -> columns ; for ( next = images ; next != ( Image * ) NULL ; next = next -> next ) columns = MagickMax ( next -> columns , columns ) ; for ( i = 0 <S2SV_ModEnd> ; i < ( <S2SV_ModStart> < ( ssize_t ) rows <S2SV_ModEnd> ; i ++ )
<S2SV_ModStart> absolute_filename ; if ( <S2SV_ModEnd> g_path_is_absolute ( filename )
<S2SV_ModStart> mechbuf [ i ] ) ; log_debug ( ZONE , "sx<S2SV_blank>sasl<S2SV_blank>callback:<S2SV_blank>check<S2SV_blank>mech<S2SV_blank>(mech=%s)" , mechbuf
<S2SV_ModStart> gsasl_ctx , mech ) || ( ctx -> cb ) ( sx_sasl_cb_CHECK_MECH , ( void * ) mech , NULL , s , ctx -> cbarg ) != sx_sasl_ret_OK
<S2SV_ModStart> "valid" ) >= 0 && xhash_get ( out -> states , rkey ) == ( void * ) conn_INPROGRESS
<S2SV_ModStart> ( attr >= 0 && xhash_get ( in -> states , rkey ) == ( void * ) conn_INPROGRESS
<S2SV_ModStart> ( radius_get_vendor_attr ) { <S2SV_ModEnd> const void * data <S2SV_ModStart> const void * data , * raw <S2SV_ModStart> len ; u_int32_t vendor ; unsigned char type ; size_t data_len <S2SV_ModStart> , "s" , & raw <S2SV_ModEnd> , & len ) <S2SV_ModStart> { return ; } if ( <S2SV_ModEnd> rad_get_vendor_attr ( & vendor <S2SV_ModStart> & vendor , & type , & data , & data_len , raw , len ) <S2SV_ModEnd> == - 1 ) <S2SV_ModStart> return_value , "attr" , type <S2SV_ModEnd> ) ; add_assoc_long ( <S2SV_ModStart> * ) data , data_len <S2SV_ModEnd> , 1 ) ;
<S2SV_ModStart> ( u_int32_t * vendor , unsigned char * type <S2SV_ModStart> , size_t * len , const void * raw , size_t raw_len <S2SV_ModStart> vendor_attribute * attr ; if ( raw_len < sizeof ( struct vendor_attribute ) ) { return - 1 ; } <S2SV_ModStart> struct vendor_attribute * ) raw <S2SV_ModEnd> ; * vendor = <S2SV_ModStart> attr -> vendor_value ) ; * type = attr -> attrib_type <S2SV_ModStart> attrib_len - 2 ; if ( ( attr -> attrib_len + 4 ) > raw_len ) { return - 1 ; }
<S2SV_ModStart> unfold_elm * ue ; if <S2SV_ModEnd> ( tree_root == NULL <S2SV_ModStart> tree_root == NULL ) return 0
<S2SV_ModStart> [ ] ) { int ret_value = 0 ; <S2SV_ModStart> , "\\n\\nThe<S2SV_blank>script<S2SV_blank>contains<S2SV_blank>errors...\\n\\n" ) ; ret_value = write_output ( ) ; if ( ret_value == - E_NOTHANDLED ) FATAL_ERROR ( "Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correctly<S2SV_blank>handled." , EF_GBL_OPTIONS -> output_file ) ; else if ( ret_value == - E_INVALID ) FATAL_ERROR ( "Cannot<S2SV_blank>write<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(%s):<S2SV_blank>the<S2SV_blank>filter<S2SV_blank>format<S2SV_blank>is<S2SV_blank>not<S2SV_blank>correct.<S2SV_blank>" <S2SV_ModEnd> , EF_GBL_OPTIONS -> output_file
<S2SV_ModStart> ) return - E_NOTHANDLED ; if ( ninst == 0 ) return - E_INVALID
<S2SV_ModStart> hmi_base = hmi_data ; uint32_t data_siz ; <S2SV_ModStart> ; } * note <S2SV_ModEnd> ; if ( memcmp <S2SV_ModStart> 0 ; if ( hmi_track_offset [ i ] >= hmi_size ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , "file<S2SV_blank>too<S2SV_blank>short" , 0 ) ; goto _hmi_end ; } data_siz = hmi_size - hmi_track_offset [ i ] ; if ( <S2SV_ModStart> ] += hmi_tmp ; hmi_tmp += 4 ; <S2SV_ModStart> ] += 4 ; hmi_tmp = 8 ; } else { hmi_tmp = 4 ; } hmi_data += 4 ; hmi_track_offset [ i ] += 4 ; if ( hmi_tmp > data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , "file<S2SV_blank>too<S2SV_blank>short" , 0 ) ; goto _hmi_end ; } data_siz -= hmi_tmp ; <S2SV_ModEnd> } else { if <S2SV_ModStart> ( hmi_mdi , hmi_data , data_siz <S2SV_ModStart> ] += setup_ret ; data_siz -= setup_ret ; <S2SV_ModStart> 0 ; if ( data_siz && <S2SV_ModStart> ) { do { if ( ! data_siz ) break ; <S2SV_ModStart> ; hmi_data ++ ; data_siz -- ; <S2SV_ModStart> hmi_data > 0x7F ) ; } if ( ! data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , "file<S2SV_blank>too<S2SV_blank>short" , 0 ) ; goto _hmi_end <S2SV_ModStart> ; hmi_data ++ ; data_siz -- ; <S2SV_ModStart> ] += setup_ret ; data_siz -= setup_ret ; } } if ( data_siz && <S2SV_ModEnd> * hmi_data > 0x7f <S2SV_ModStart> ) { do { if ( ! data_siz ) break ; <S2SV_ModStart> ; hmi_data ++ ; data_siz -- ; <S2SV_ModStart> 0x7F ) ; } if ( ! data_siz ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMI , "file<S2SV_blank>too<S2SV_blank>short" , 0 ) ; goto _hmi_end ; } <S2SV_ModStart> ) ; hmi_data ++ ; data_siz --
<S2SV_ModStart> i ] + chunk_length [ i ] ; chunk_length [ i ] -= chunk_ofs <S2SV_ModStart> ] += 3 ; chunk_length [ i ] -= 3 ; <S2SV_ModStart> ( hmp_mdi , hmp_chunk [ i ] , chunk_length <S2SV_ModStart> i ] = 1 ; chunk_length [ i ] -= 3 <S2SV_ModStart> ] += setup_ret ; chunk_length [ i ] -= setup_ret ; <S2SV_ModStart> 0 ; if ( chunk_length [ i ] && <S2SV_ModStart> ) { do { if ( ! chunk_length [ i ] ) break ; <S2SV_ModStart> i ] ++ ; chunk_length [ i ] -- ; <S2SV_ModStart> 0x80 ) ; } if ( ! chunk_length [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_NOT_HMP , "file<S2SV_blank>too<S2SV_blank>short" , 0 ) ; goto _hmp_end ; } <S2SV_ModStart> [ i ] ++ ; chunk_length [ i ] --
<S2SV_ModStart> ; uint32_t midi_type ; uint8_t * * tracks ; uint32_t * track_size <S2SV_ModEnd> ; uint32_t end_of_tracks = <S2SV_ModStart> * no_tracks ) ; track_size = malloc ( sizeof ( uint32_t ) * no_tracks ) ; <S2SV_ModStart> midi_size -= 4 ; tmp_val <S2SV_ModEnd> = * midi_data ++ <S2SV_ModStart> ++ << 24 ; tmp_val <S2SV_ModEnd> |= * midi_data ++ <S2SV_ModStart> ++ << 16 ; tmp_val <S2SV_ModEnd> |= * midi_data ++ <S2SV_ModStart> ++ << 8 ; tmp_val <S2SV_ModEnd> |= * midi_data ++ <S2SV_ModStart> if ( midi_size < tmp_val <S2SV_ModEnd> ) { _WM_GLOBAL_ERROR ( <S2SV_ModStart> ; } if ( tmp_val <S2SV_ModEnd> < 3 ) { <S2SV_ModStart> ( ( midi_data [ tmp_val <S2SV_ModEnd> - 3 ] != <S2SV_ModStart> || ( midi_data [ tmp_val <S2SV_ModEnd> - 2 ] != <S2SV_ModStart> || ( midi_data [ tmp_val <S2SV_ModEnd> - 1 ] != <S2SV_ModStart> ] = midi_data ; track_size [ i ] = tmp_val ; midi_data += tmp_val ; midi_size -= tmp_val <S2SV_ModEnd> ; track_end [ i <S2SV_ModStart> i ] ++ ; track_size [ i ] -- ; <S2SV_ModStart> [ i ] ++ ; track_size [ i ] -- <S2SV_ModStart> [ i ] , track_size [ i ] , <S2SV_ModStart> ] += 3 ; track_size [ i ] -= 3 ; <S2SV_ModStart> ] += setup_ret ; track_size [ i ] -= setup_ret ; <S2SV_ModStart> ) { do { if ( ! track_size [ i ] ) break ; <S2SV_ModStart> i ] ++ ; track_size [ i ] -- ; <S2SV_ModStart> 0x7f ) ; } if ( ! track_size [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; goto _end ; } <S2SV_ModStart> [ i ] ++ ; track_size [ i ] -- <S2SV_ModStart> [ i ] , track_size [ i ] , <S2SV_ModStart> ] += setup_ret ; track_size [ i ] -= setup_ret ; <S2SV_ModStart> ) { do { if ( ! track_size [ i ] ) break ; <S2SV_ModStart> i ] ++ ; track_size [ i ] -- ; <S2SV_ModStart> 0x7f ) ; } if ( ! track_size [ i ] ) { _WM_GLOBAL_ERROR ( __FUNCTION__ , __LINE__ , WM_ERR_CORUPT , "(too<S2SV_blank>short)" , 0 ) ; goto _end ; } <S2SV_ModStart> [ i ] ++ ; track_size [ i ] -- <S2SV_ModStart> ( tracks ) ; free ( track_size ) ;
<S2SV_ModStart> samples_per_tick_f = 0.0 ; # define MUS_SZ 4 uint8_t mus_event [ MUS_SZ <S2SV_ModEnd> ] = { 0 <S2SV_ModStart> uint8_t * ) mus_event , MUS_SZ
<S2SV_ModStart> xmi_mdi , xmi_data , xmi_size ,

<S2SV_ModStart> ; M_fs_error_t res ; <S2SV_ModEnd> res = M_fs_file_open (
<S2SV_ModStart> ) ; if ( daemon_mode == TRUE && sigrestart == FALSE ) { result = daemon_init ( ) ; if ( result == ERROR ) { logit ( NSLOG_PROCESS_INFO | NSLOG_RUNTIME_ERROR , TRUE , "Bailing<S2SV_blank>out<S2SV_blank>due<S2SV_blank>to<S2SV_blank>failure<S2SV_blank>to<S2SV_blank>daemonize.<S2SV_blank>(PID=%d)" , ( int ) getpid ( ) ) ; cleanup ( ) ; exit ( EXIT_FAILURE ) ; } nagios_pid = ( int ) getpid ( ) ; } if ( <S2SV_ModStart> { exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } logit
<S2SV_ModStart> ( void ) { int fh ; struct stat st ; <S2SV_ModStart> ; if ( ( fh = open ( debug_file , O_RDWR | O_APPEND | O_CREAT | O_NOFOLLOW , S_IRUSR | S_IWUSR ) ) == - 1 ) return ERROR ; if ( ( debug_file_fp = fdopen ( fh <S2SV_ModEnd> , "a+" ) ) <S2SV_ModStart> ) return ERROR ; if ( ( fstat ( fh , & st ) ) == - 1 ) { debug_file_fp = NULL ; close ( fh ) ; return ERROR ; } if ( st . st_nlink != 1 || ( st . st_mode & S_IFMT ) != S_IFREG ) { debug_file_fp = NULL ; close ( fh ) ; return ERROR ; } <S2SV_ModStart> void ) fcntl ( fh <S2SV_ModEnd> , F_SETFD , FD_CLOEXEC
<S2SV_ModStart> ( void ) { int fh ; struct stat st ; if ( log_fp ) return log_fp ; if ( ( fh = open ( log_file , O_RDWR | O_APPEND | O_CREAT | O_NOFOLLOW , S_IRUSR | S_IWUSR ) ) == - 1 ) { if ( daemon_mode == FALSE ) printf ( "Warning:<S2SV_blank>Cannot<S2SV_blank>open<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>for<S2SV_blank>writing\\n" , log_file ) ; return NULL ; } log_fp = fdopen ( fh <S2SV_ModEnd> , "a+" ) ; <S2SV_ModStart> daemon_mode == FALSE ) <S2SV_ModEnd> printf ( "Warning:<S2SV_blank>Cannot<S2SV_blank>open<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>for<S2SV_blank>writing\\n" , <S2SV_ModStart> , log_file ) ; return NULL ; } if ( ( fstat ( fh , & st ) ) == - 1 ) { log_fp = NULL ; close ( fh ) ; if ( daemon_mode == FALSE ) printf ( "Warning:<S2SV_blank>Cannot<S2SV_blank>fstat<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'\\n" , log_file ) ; return NULL ; } if ( st . st_nlink != 1 || ( st . st_mode & S_IFMT ) != S_IFREG ) { log_fp = NULL ; close ( fh ) ; if ( daemon_mode == FALSE ) printf ( "Warning:<S2SV_blank>log<S2SV_blank>file<S2SV_blank>\'%s\'<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>mode\\n" , log_file ) ; <S2SV_ModEnd> return NULL ; }
<S2SV_ModStart> ) return res ; size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , num_params , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> params = malloc ( alloc_size <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ) return res ; size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , num_params , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> params = malloc ( alloc_size <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> if ( mobj ) { size_t granularity = BIT ( tee_mm_sec_ddr . shift ) ; <S2SV_ModStart> ) , 0 , ROUNDUP ( size , granularity ) ) ; } <S2SV_ModEnd> return mobj ; #
<S2SV_ModStart> { uaddr_t a ; uaddr_t end_addr = 0 ; <S2SV_ModStart> , len , & end_addr <S2SV_ModEnd> ) ) return TEE_ERROR_ACCESS_DENIED <S2SV_ModStart> for ( a = ROUNDDOWN ( uaddr , addr_incr ) ; a < end_addr <S2SV_ModEnd> ; a += addr_incr
<S2SV_ModStart> ) return res ; size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , param_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> params = malloc ( alloc_size <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ) return TEE_ERROR_NOT_SUPPORTED ; size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , param_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> params = malloc ( alloc_size <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ) return TEE_ERROR_NOT_IMPLEMENTED ; size_t alloc_size = 0 ; if ( MUL_OVERFLOW ( sizeof ( TEE_Attribute ) , attr_count , & alloc_size ) ) return TEE_ERROR_OVERFLOW ; <S2SV_ModStart> attrs = malloc ( alloc_size <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ) return res ; res = utee_param_to_param ( utc , <S2SV_ModEnd> param , callee_params ) <S2SV_ModStart> param , callee_params ) ; if ( res != TEE_SUCCESS ) return res
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static TEE_Result utee_param_to_param ( struct user_ta_ctx * utc , <S2SV_ModEnd> struct tee_ta_param * p <S2SV_ModStart> + 1 ] ; uint32_t flags = TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER ; <S2SV_ModStart> ) ) { case TEE_PARAM_TYPE_MEMREF_OUTPUT : case TEE_PARAM_TYPE_MEMREF_INOUT : flags |= TEE_MEMORY_ACCESS_WRITE ; case TEE_PARAM_TYPE_MEMREF_INPUT <S2SV_ModEnd> : p -> u <S2SV_ModStart> size = b ; if ( tee_mmu_check_access_rights ( utc , flags , a , b ) ) return TEE_ERROR_ACCESS_DENIED ; <S2SV_ModStart> break ; } } return TEE_SUCCESS ;
<S2SV_ModStart> * mem ) { size_t req_size = 0 ; <S2SV_ModStart> -> size ) ; if ( ADD_OVERFLOW ( mem -> offs , mem -> size , & req_size ) || mem -> mobj -> size < req_size ) return TEE_ERROR_SECURITY ;
<S2SV_ModStart> priv -> cac_id , serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN (
<S2SV_ModStart> objectId . id ; if ( bufLen < 2 ) break ; <S2SV_ModStart> count += 2 ; bufLen -= 2 ;
<S2SV_ModStart> 1 ] ) { size_t <S2SV_ModEnd> j , len = <S2SV_ModStart> ; case 0x84 : file -> namelen = MIN ( sizeof file -> name , len ) ; <S2SV_ModStart> name , d , file -> namelen ) <S2SV_ModEnd> ; break ; case
<S2SV_ModStart> ) ; buff [ MIN ( ( size_t ) r , ( sizeof buff ) - 1 ) <S2SV_ModEnd> ] = '\\0' ;
<S2SV_ModStart> ind ] == 0x01 && i < gemsafe_cert_max
<S2SV_ModStart> , "Skipping<S2SV_blank>optional<S2SV_blank>EF.C_DevAut" ) ; if ( len > 0 ) { <S2SV_ModStart> EF_C_DevAut_len = len ; }
<S2SV_ModStart> ( sec_attr == NULL || sec_attr_len
<S2SV_ModStart> 10 ; bufsize = MIN ( file -> size , sizeof buf ) <S2SV_ModEnd> ; sc_file_free ( file
<S2SV_ModStart> ; } bufsize = MIN ( file -> size , sizeof buf ) <S2SV_ModEnd> ; sc_file_free ( file
<S2SV_ModStart> } len = file && file -> size > 0
<S2SV_ModStart> ; break ; } strncat ( line , buf , sizeof line ) ; strncat <S2SV_ModEnd> ( line , "<S2SV_blank>" <S2SV_ModStart> ( line , "<S2SV_blank>" , sizeof line <S2SV_ModStart> ; } line [ ( sizeof <S2SV_ModEnd> line ) - 1 <S2SV_ModStart> - 1 ] = '\\0' ; line [ strlen ( line ) - 1 ] =
<S2SV_ModStart> ) outbuf ; int i , count = 0 ; int zero_bits ; size_t octets_left ; if ( outlen < octets_left ) return SC_ERROR_BUFFER_TOO_SMALL ; if ( inlen < 1 ) return SC_ERROR_INVALID_ASN1_OBJECT ; <S2SV_ModStart> in & 0x07 ; <S2SV_ModEnd> octets_left = inlen - <S2SV_ModStart> inlen - 1 ; in ++ ; memset ( outbuf , 0 , outlen ) ; while ( octets_left ) { int bits_to_go ; * out = 0 ; if ( octets_left == 1 ) bits_to_go = 8 - zero_bits ; else bits_to_go = 8 ; if ( invert ) for ( i = 0 ; i < bits_to_go ; i ++ ) { * out |= ( ( * in >> ( 7 - i ) ) & 1 ) << i ; } else { * out = * in ; } out ++ ; in ++ ; octets_left -- ; count ++ ; } return ( count * 8 <S2SV_ModEnd> ) - zero_bits ;
<S2SV_ModStart> & SC_ASN1_UNSIGNED ) && objlen > 1 && <S2SV_ModStart> 0 ] == 0x00 <S2SV_ModEnd> ) { objlen --
<S2SV_ModStart> ] ; unsigned char * signature = NULL <S2SV_ModEnd> ; unsigned int siglen <S2SV_ModStart> ; unsigned int siglen <S2SV_ModEnd> ; const EVP_MD * <S2SV_ModStart> ) ; if ( NULL == privkey ) goto err ; siglen = EVP_PKEY_size ( privkey ) ; if ( siglen <= 0 ) goto err ; signature = malloc ( siglen ) ; if ( NULL == signature ) goto err ; if ( <S2SV_ModStart> 1 ; err : free ( signature ) ;
<S2SV_ModStart> size , len ; <S2SV_ModEnd> WCHAR * data = <S2SV_ModStart> L"PeekNamedPipeAsync" ) ; goto err <S2SV_ModEnd> ; } size = <S2SV_ModStart> exit_event ) ; goto err <S2SV_ModEnd> ; } data = <S2SV_ModStart> L"malloc" ) ; goto err <S2SV_ModEnd> ; } read = <S2SV_ModStart> L"ReadPipeAsync" ) ; goto err <S2SV_ModEnd> ; } if ( <S2SV_ModStart> exit_event ) ; goto err <S2SV_ModEnd> ; } sud -> <S2SV_ModStart> exit_event ) ; goto err <S2SV_ModEnd> ; } sud -> <S2SV_ModStart> exit_event ) ; goto err <S2SV_ModEnd> ; } sud -> <S2SV_ModStart> options + len ; return TRUE ; err : sud -> directory = NULL ; <S2SV_ModEnd> free ( data ) <S2SV_ModStart> data ) ; return FALSE <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( ( fd = _open_as_other ( path_name , req <S2SV_ModEnd> ) ) == - <S2SV_ModStart> ) { error ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s:<S2SV_blank>Permission<S2SV_blank>denied" , path_name <S2SV_ModEnd> ) ; return ;
<S2SV_ModStart> t1_getline ( ) ; alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ( t1_buf_array , t1_line_array ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE
<S2SV_ModStart> t1_getline ( ) ; alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ( t1_buf_array , t1_line_array ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE
<S2SV_ModStart> t1_getline ( ) ; alloc_array ( t1_buf , strlen ( t1_line_array ) + strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE ) ; <S2SV_ModStart> ( t1_buf_array , t1_line_array ) ; alloc_array ( t1_line , strlen ( t1_buf_array ) + 1 , T1_BUF_SIZE
<S2SV_ModStart> * s ) { HTChunk * target = NULL ; <S2SV_ModStart> ; case HTML_TITLE : target = <S2SV_ModEnd> & me -> title <S2SV_ModStart> & me -> title <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case HTML_STYLE : target = <S2SV_ModEnd> & me -> style_block <S2SV_ModStart> & me -> style_block <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case HTML_SCRIPT : target = <S2SV_ModEnd> & me -> script <S2SV_ModStart> & me -> script <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case HTML_OBJECT : target = <S2SV_ModEnd> & me -> object <S2SV_ModStart> & me -> object <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case HTML_TEXTAREA : target = <S2SV_ModEnd> & me -> textarea <S2SV_ModStart> & me -> textarea <S2SV_ModEnd> ; break ; case <S2SV_ModStart> : case HTML_OPTION : target = <S2SV_ModEnd> & me -> option <S2SV_ModStart> & me -> option <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case HTML_MATH : target = <S2SV_ModEnd> & me -> math <S2SV_ModStart> & me -> math <S2SV_ModEnd> ; break ; default <S2SV_ModStart> } } } } if ( target != NULL ) { if ( target -> data == s ) { CTRACE ( ( tfp , "BUG:<S2SV_blank>appending<S2SV_blank>chunk<S2SV_blank>to<S2SV_blank>itself:<S2SV_blank>`%.*s\'\\n" , target -> size , target -> data ) ) ; } else { HTChunkPuts ( target , s ) ; } }
<S2SV_ModStart> return HTTP_BAD_REQUEST ; } if ( * i == '\\\\' ) { AM_LOG_RERROR ( APLOG_MARK , APLOG_ERR , HTTP_BAD_REQUEST , r , "Backslash<S2SV_blank>character<S2SV_blank>detected<S2SV_blank>in<S2SV_blank>URL." ) ; return HTTP_BAD_REQUEST ; }
<S2SV_ModStart> YR_OBJECT_FUNCTION * function ; YR_OBJECT * * obj_ptr ; YR_ARENA * obj_arena ; <S2SV_ModStart> NULL ) return ERROR_INSUFFICIENT_MEMORY ; FAIL_ON_ERROR_WITH_CLEANUP ( yr_arena_create ( 1024 , 0 , & obj_arena ) , yr_free ( stack ) ) <S2SV_ModStart> ) ; # endif assert ( sp == 0 ) ; <S2SV_ModStart> result == ERROR_SUCCESS ) result = yr_object_copy ( function -> return_obj , & r1 . o ) ; if ( result == ERROR_SUCCESS ) result = yr_arena_write_data ( obj_arena , & r1 . o , sizeof ( r1 . o ) , NULL ) ; stop = ( result != ERROR_SUCCESS ) ; push ( r1 ) ; <S2SV_ModEnd> break ; case OP_FOUND <S2SV_ModStart> ip ++ ; } obj_ptr = ( YR_OBJECT * * ) yr_arena_base_address ( obj_arena ) ; while ( obj_ptr != NULL ) { yr_object_destroy ( * obj_ptr ) ; obj_ptr = ( YR_OBJECT * * ) yr_arena_next_address ( obj_arena , obj_ptr , sizeof ( YR_OBJECT * ) ) ; } yr_arena_destroy ( obj_arena ) ;
<S2SV_ModStart> ) -> value = ( ( YR_OBJECT_INTEGER * ) object ) -> value <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case OBJECT_TYPE_STRING : if ( <S2SV_ModStart> ( YR_OBJECT_STRING * ) object ) -> value != NULL ) { ( ( YR_OBJECT_STRING * ) copy ) -> value = sized_string_dup ( ( ( YR_OBJECT_STRING * ) object ) -> value ) ; } else { ( ( YR_OBJECT_STRING * ) copy ) -> value = NULL ; } break ; case OBJECT_TYPE_FLOAT : ( ( YR_OBJECT_DOUBLE * ) copy ) -> value = ( ( YR_OBJECT_DOUBLE * ) object ) -> value <S2SV_ModEnd> ; break ; case
<S2SV_ModStart> ) { assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\"baz\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"foo\\"]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"bar\\"]<S2SV_blank>==<S2SV_blank>\\"bar\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\"dummy\\")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ; <S2SV_ModStart> ) ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ; <S2SV_ModStart> ) ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ; <S2SV_ModStart> ) ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"foo\\")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"bar\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ;
<S2SV_ModStart> 2 : # line 113 <S2SV_ModEnd> "hex_grammar.y" { RE_AST * <S2SV_ModStart> ; } # line 1337 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 3 : # line 122 <S2SV_ModEnd> "hex_grammar.y" { ( yyval <S2SV_ModStart> ; } # line 1345 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 4 : # line 126 "hex_grammar.y" { incr_ast_levels ( ) ; <S2SV_ModEnd> ( yyval . re_node <S2SV_ModStart> ; } # line 1360 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 5 : # line 137 <S2SV_ModEnd> "hex_grammar.y" { RE_NODE * <S2SV_ModStart> 1 ] . re_node ) ; incr_ast_levels ( <S2SV_ModStart> ; } # line 1424 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 6 : # line 201 <S2SV_ModEnd> "hex_grammar.y" { ( yyval <S2SV_ModStart> ; } # line 1432 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 7 : # line 205 "hex_grammar.y" { incr_ast_levels ( ) ; <S2SV_ModEnd> ( yyval . re_node <S2SV_ModStart> ; } # line 1447 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 8 : # line 220 <S2SV_ModEnd> "hex_grammar.y" { ( yyval <S2SV_ModStart> ; } # line 1455 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 9 : # line 224 <S2SV_ModEnd> "hex_grammar.y" { ( yyval <S2SV_ModStart> ; } # line 1464 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 10 : # line 233 <S2SV_ModEnd> "hex_grammar.y" { lex_env -> <S2SV_ModStart> ; } # line 1481 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 11 : # line 246 <S2SV_ModEnd> "hex_grammar.y" { lex_env -> <S2SV_ModStart> ; } # line 1489 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 12 : # line 250 <S2SV_ModEnd> "hex_grammar.y" { ( yyval <S2SV_ModStart> ; } # line 1498 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 13 : # line 259 <S2SV_ModEnd> "hex_grammar.y" { if ( <S2SV_ModStart> ; } # line 1525 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 14 : # line 282 <S2SV_ModEnd> "hex_grammar.y" { if ( <S2SV_ModStart> ; } # line 1561 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 15 : # line 314 <S2SV_ModEnd> "hex_grammar.y" { if ( <S2SV_ModStart> ; } # line 1587 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 16 : # line 336 <S2SV_ModEnd> "hex_grammar.y" { if ( <S2SV_ModStart> ; } # line 1607 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 17 : # line 356 <S2SV_ModEnd> "hex_grammar.y" { ( yyval <S2SV_ModStart> ; } # line 1615 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 18 : # line 360 <S2SV_ModEnd> "hex_grammar.y" { mark_as_not_fast_regexp ( <S2SV_ModStart> mark_as_not_fast_regexp ( ) ; incr_ast_levels ( ) ; <S2SV_ModStart> ; } # line 1631 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 19 : # line 375 <S2SV_ModEnd> "hex_grammar.y" { ( yyval <S2SV_ModStart> ; } # line 1643 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 20 : # line 383 <S2SV_ModEnd> "hex_grammar.y" { uint8_t mask <S2SV_ModStart> } } # line 1667 <S2SV_ModEnd> "hex_grammar.c" break ; # <S2SV_ModStart> break ; # line 1671 <S2SV_ModEnd> "hex_grammar.c" default : break
<S2SV_ModStart> 16 : # line 101 "hex_grammar.y" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1030 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 17 : # line 102 "hex_grammar.y" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1036 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 18 : # line 103 "hex_grammar.y" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1042 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 19 : # line 104 "hex_grammar.y" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1048 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 21 : # line 107 "hex_grammar.y" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1054 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 22 : # line 106 "hex_grammar.y" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1060 <S2SV_ModEnd> "hex_grammar.c" break ; case <S2SV_ModStart> 23 : # line 105 "hex_grammar.y" { yr_re_node_destroy ( ( ( * yyvaluep ) . re_node ) ) ; } # line 1066 <S2SV_ModEnd> "hex_grammar.c" break ; default
<S2SV_ModStart> yyscanner , lex_env , "illegal<S2SV_blank>escape<S2SV_blank>sequence" <S2SV_ModEnd> ) ; yyterminate ( <S2SV_ModStart> yyscanner , lex_env , "illegal<S2SV_blank>escape<S2SV_blank>sequence" <S2SV_ModEnd> ) ; yyterminate ( <S2SV_ModStart> yyscanner , lex_env , "illegal<S2SV_blank>escape<S2SV_blank>sequence" <S2SV_ModEnd> ) ; yyterminate (
<S2SV_ModStart> 1 ] == EOF || text [ 1 ] == 0 <S2SV_ModStart> ) ; if ( ! isxdigit ( <S2SV_ModStart> text [ 2 ] ) <S2SV_ModEnd> ) return 0 ; <S2SV_ModStart> ) ; if ( ! isxdigit ( <S2SV_ModStart> text [ 3 ] ) <S2SV_ModEnd> ) return 0 ;
<S2SV_ModStart> , "<S2SV_blank><S2SV_blank><S2SV_blank>xy<S2SV_blank><S2SV_blank><S2SV_blank>x" ) ; assert_regexp_syntax_error ( "\\\\x0" ) ; assert_regexp_syntax_error ( "\\\\x" ) ; assert_regexp_syntax_error ( "\\\\xxy" ) ;
<S2SV_ModStart> , 2 ) ; set_integer ( 256 , module_object , "integer_array[%i]" , 256 ) ;
<S2SV_ModStart> ) { count = 64 ; while ( count <= index ) count *= 2 <S2SV_ModEnd> ; array -> items <S2SV_ModStart> count * 2 ; while ( count <= index ) count *= 2 ;
<S2SV_ModStart> ) { assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.one<S2SV_blank>+<S2SV_blank>1<S2SV_blank>==<S2SV_blank>tests.constants.two<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.foo<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.constants.empty<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.empty()<S2SV_blank>==<S2SV_blank>\\"\\"<S2SV_blank><S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[1].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>or<S2SV_blank>true<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[0]<S2SV_blank>==<S2SV_blank>0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[1]<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.integer_array[256]<S2SV_blank>==<S2SV_blank>256<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[0]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_array[2]<S2SV_blank>==<S2SV_blank>\\"baz\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"foo\\"]<S2SV_blank>==<S2SV_blank>\\"foo\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.string_dict[\\"bar\\"]<S2SV_blank>==<S2SV_blank>\\"bar\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.isum(1,2,3)<S2SV_blank>==<S2SV_blank>6<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,2.0,3.0)<S2SV_blank>==<S2SV_blank>6.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>==<S2SV_blank>tests.foobar(1)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.foobar(1)<S2SV_blank>!=<S2SV_blank>tests.foobar(2)<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>tests.length(\\"dummy\\")<S2SV_blank>==<S2SV_blank>5<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ; <S2SV_ModStart> ) ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.struct_array[0].i<S2SV_blank>==<S2SV_blank>1<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ; <S2SV_ModStart> ) ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.isum(1,1)<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ; <S2SV_ModStart> ) ; assert_false_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.fsum(1.0,1.0)<S2SV_blank>==<S2SV_blank>3.0<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"foo\\")<S2SV_blank>==<S2SV_blank>3<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo/,\\"bar\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/i,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>-1\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" , NULL ) ; assert_true_rule ( "import<S2SV_blank>\\"tests\\"<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>condition:<S2SV_blank>tests.match(/foo.bar/is,\\"FOO\\\\nBAR\\")<S2SV_blank>==<S2SV_blank>7\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}" <S2SV_ModEnd> , NULL ) ;
<S2SV_ModStart> ss -> length , 0 ,
<S2SV_ModStart> * input_data , size_t input_forwards_size , size_t input_backwards_size <S2SV_ModEnd> , int flags , <S2SV_ModStart> 3 # define prolog { if ( <S2SV_ModEnd> ( bytes_matched >= max_bytes_matched <S2SV_ModStart> bytes_matched >= max_bytes_matched ) || ( character_size == 2 && * ( input + 1 ) != 0 ) ) { action = ACTION_KILL ; break ; } <S2SV_ModEnd> } # define fail_if_error <S2SV_ModStart> fail_if_error ( e ) { <S2SV_ModStart> - 4 ; } } <S2SV_ModStart> & RE_FLAGS_BACKWARDS ) { max_bytes_matched = ( int ) yr_min ( input_backwards_size , RE_SCAN_LIMIT ) ; <S2SV_ModStart> - input_incr ; } else { <S2SV_ModStart> int ) yr_min ( input_forwards_size <S2SV_ModEnd> , RE_SCAN_LIMIT ) ; <S2SV_ModStart> , RE_SCAN_LIMIT ) ; } <S2SV_ModStart> prolog ; match = _yr_re_is_word_char ( input , character_size <S2SV_ModEnd> ) ; action = <S2SV_ModStart> ; match = ! _yr_re_is_word_char ( input , character_size <S2SV_ModEnd> ) ; action = <S2SV_ModStart> bytes_matched == 0 && input_backwards_size < character_size ) { <S2SV_ModEnd> match = TRUE ; <S2SV_ModStart> match = TRUE ; } <S2SV_ModStart> bytes_matched >= max_bytes_matched ) { <S2SV_ModStart> match = TRUE ; } else { assert ( input < input_data + input_forwards_size ) ; assert ( input >= input_data - input_backwards_size ) ; assert <S2SV_ModEnd> ( input - input_incr <S2SV_ModStart> ( input - input_incr < input_data + input_forwards_size ) ; assert ( input - input_incr >= input_data - input_backwards_size ) ; match = _yr_re_is_word_char ( input , character_size ) != _yr_re_is_word_char ( input - input_incr , character_size ) ; } <S2SV_ModEnd> if ( * ip <S2SV_ModStart> RE_FLAGS_BACKWARDS ) kill = input_backwards_size <S2SV_ModEnd> > ( size_t ) <S2SV_ModStart> ; else kill = input_backwards_size > 0 <S2SV_ModEnd> || ( bytes_matched != <S2SV_ModStart> flags & RE_FLAGS_BACKWARDS || input_forwards_size <S2SV_ModEnd> > ( size_t ) <S2SV_ModStart> = next_fiber ; } <S2SV_ModEnd> } input += input_incr
<S2SV_ModStart> * input_data , size_t input_forwards_size , size_t input_backwards_size <S2SV_ModEnd> , int flags , <S2SV_ModStart> bytes_matched ; int max_bytes_matched ; max_bytes_matched = flags & RE_FLAGS_BACKWARDS ? input_backwards_size : input_forwards_size <S2SV_ModEnd> ; input_incr = flags
<S2SV_ModStart> ( target ) , 0 ,
<S2SV_ModStart> - offset , offset , <S2SV_ModEnd> flags , NULL , <S2SV_ModStart> - offset , offset , <S2SV_ModEnd> flags , NULL , <S2SV_ModStart> backward_code , data + offset , data_size -
<S2SV_ModStart> , "a\\0x\\0x\\0b\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "\\0a\\0b\\0c\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "\\ta\\0b\\0c\\0" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "x\\0a\\0b\\0c\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\babc/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "x\\ta\\0b\\0c\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0\\t" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0x\\0" ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/abc\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "a\\0b\\0c\\0b\\t" ) ; assert_false_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/\\\\b/<S2SV_blank>wide<S2SV_blank>condition:<S2SV_blank>$a<S2SV_blank>}" , "abc" ) ; <S2SV_ModStart> ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>317<S2SV_blank>}" <S2SV_ModEnd> , PE32_FILE ) ; <S2SV_ModStart> ) ; assert_true_rule_blob ( "rule<S2SV_blank>test<S2SV_blank>{<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>strings:<S2SV_blank>$a<S2SV_blank>=<S2SV_blank>/MZ.{300,}?t/<S2SV_blank>\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>condition:<S2SV_blank>!a<S2SV_blank>==<S2SV_blank>314<S2SV_blank>}" <S2SV_ModEnd> , PE32_FILE ) ;
<S2SV_ModStart> * re_ast ) -> levels = 0 ; ( * re_ast ) ->
<S2SV_ModStart> i ++ ) { <S2SV_ModEnd> if ( bytes_matched + <S2SV_ModStart> >= max_bytes_matched ) break ; next_input = input + i * input_incr <S2SV_ModStart> repeat_any_args -> min ; bytes_matched = yr_min ( bytes_matched , max_bytes_matched ) ;
<S2SV_ModStart> += callback_args -> forward_matches ; assert ( match_offset + match_length <= callback_args -> data_size )
<S2SV_ModStart> == U2FH_OK ) { int offs = sizeof ( nonce ) <S2SV_ModEnd> ; if ( resplen <S2SV_ModStart> ; if ( resplen < 17 ) { return U2FH_SIZE_ERROR ; } if ( memcmp ( nonce , resp , sizeof ( nonce ) ) != 0 ) { return U2FH_TRANSPORT_ERROR ; } <S2SV_ModEnd> dev -> cid = <S2SV_ModStart> dev -> cid = resp [ offs ] << 24 | resp [ offs + 1 ] << 16 | resp [ offs + 2 ] << 8 | resp [ offs + 3 ] ; offs += 4 <S2SV_ModEnd> ; dev -> versionInterface <S2SV_ModStart> dev -> versionInterface = resp [ offs ++ ] <S2SV_ModEnd> ; dev -> versionMajor <S2SV_ModStart> dev -> versionMajor = resp [ offs ++ ] <S2SV_ModEnd> ; dev -> versionMinor <S2SV_ModStart> dev -> versionMinor = resp [ offs ++ ] ; dev -> versionBuild = resp [ offs ++ ] <S2SV_ModEnd> ; dev -> capFlags <S2SV_ModStart> dev -> capFlags = resp [ offs ++ ] <S2SV_ModEnd> ; } else {
<S2SV_ModStart> , O_RDONLY | O_CREAT | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY <S2SV_ModStart> retval ) ) ; if ( cfg -> is_custom_debug_file ) { fclose ( cfg -> debug_file ) ; }
<S2SV_ModStart> * cfg ) { struct stat st ; FILE * file = NULL ; int fd = - 1 ; <S2SV_ModStart> ; } else { fd = open ( filename , O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY ) ; if ( fd >= 0 && ( fstat ( fd <S2SV_ModEnd> , & st ) <S2SV_ModStart> ) == 0 ) && <S2SV_ModEnd> S_ISREG ( st . <S2SV_ModStart> ) { file = fdopen ( fd <S2SV_ModEnd> , "a" ) ; <S2SV_ModStart> debug_file = file ; cfg -> is_custom_debug_file = 1 ; file = NULL ; fd = - 1 ; <S2SV_ModEnd> } } } } <S2SV_ModStart> "(null)" ) ; } if ( fd != - 1 ) close ( fd ) ; if ( file != NULL ) fclose ( file ) ;
<S2SV_ModStart> ( authfile , O_RDONLY | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ) ; goto err ; } else { fd = - 1 <S2SV_ModStart> ( opwfile ) ; if ( fd != - 1 <S2SV_ModEnd> ) close ( fd
<S2SV_ModStart> 0 ; int openasuser = 0 <S2SV_ModStart> int should_free_authpending_file = 0 ; PAM_MODUTIL_DEF_PRIVS ( privs ) <S2SV_ModStart> goto done ; } openasuser = geteuid ( ) == 0 ? 1 : 0 ; <S2SV_ModStart> , DEFAULT_AUTHFILE ) ; if ( ! openasuser ) { DBG ( "WARNING:<S2SV_blank>not<S2SV_blank>dropping<S2SV_blank>privileges<S2SV_blank>when<S2SV_blank>reading<S2SV_blank>%s,<S2SV_blank>please<S2SV_blank>" "consider<S2SV_blank>setting<S2SV_blank>openasuser=1<S2SV_blank>in<S2SV_blank>the<S2SV_blank>module<S2SV_blank>configuration" <S2SV_ModEnd> , buf ) ; <S2SV_ModStart> , buf ) ; } } DBG ( "Using<S2SV_blank>authentication<S2SV_blank>file<S2SV_blank>%s" , buf ) ; <S2SV_ModStart> auth_file ) ; } if ( ! openasuser ) { openasuser <S2SV_ModEnd> = geteuid ( ) <S2SV_ModStart> cfg -> openasuser ; } <S2SV_ModStart> ( openasuser ) { DBG ( "Dropping<S2SV_blank>privileges" ) ; if ( pam_modutil_drop_priv ( pamh , & privs , pw <S2SV_ModEnd> ) ) { DBG <S2SV_ModStart> DBG ( "Unable<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>user<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw -> <S2SV_ModEnd> pw_uid ) ; retval <S2SV_ModStart> DBG ( "Switched<S2SV_blank>to<S2SV_blank>uid<S2SV_blank>%i" , pw -> <S2SV_ModEnd> pw_uid ) ; } <S2SV_ModStart> ) { if ( pam_modutil_regain_priv ( pamh , & privs ) ) { DBG ( "could<S2SV_blank>not<S2SV_blank>restore<S2SV_blank>privileges" <S2SV_ModEnd> ) ; retval = <S2SV_ModStart> ; } DBG ( "Restored<S2SV_blank>privileges" <S2SV_ModEnd> ) ; } if
<S2SV_ModStart> , otp_id ) ; fclose ( opwfile ) ;
<S2SV_ModStart> core_basename ) ; } # if 0 <S2SV_ModStart> ) ; } } # endif
<S2SV_ModStart> , path ) ; unlink ( path ) ; <S2SV_ModStart> O_WRONLY | O_CREAT | O_EXCL <S2SV_ModEnd> , 0600 ) ;
<S2SV_ModStart> dd , fsuid , <S2SV_ModEnd> NULL ) ; char
<S2SV_ModStart> build_ids_fd ) ; } char tmp_directory [ ] = LARGE_DATA_TMP_DIR "/abrt-tmp-debuginfo.XXXXXX" ; if ( mkdtemp ( tmp_directory ) == NULL ) perror_msg_and_die ( "Failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>working<S2SV_blank>directory" ) ; log_info ( "Created<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s" , tmp_directory ) ; const char * args [ 13 <S2SV_ModEnd> ] ; { const <S2SV_ModStart> i ++ ] = "--tmpdir" ; args [ i ++ ] = tmp_directory ; args [ i ++ ] = <S2SV_ModStart> 0022 ) ; } pid_t pid = fork ( ) ; if ( pid < 0 ) perror_msg_and_die ( "fork" ) ; if ( pid == 0 ) { <S2SV_ModStart> EXECUTABLE ) ; } int status ; if ( safe_waitpid ( pid , & status , 0 ) < 0 ) perror_msg_and_die ( "waitpid" ) ; if ( rmdir ( tmp_directory ) >= 0 ) log_info ( "Removed<S2SV_blank>working<S2SV_blank>directory:<S2SV_blank>%s" , tmp_directory ) ; else if ( errno != ENOENT ) perror_msg ( "Failed<S2SV_blank>to<S2SV_blank>remove<S2SV_blank>working<S2SV_blank>directory" ) ; if ( WIFEXITED ( status ) ) return WEXITSTATUS ( status ) ; if ( WIFSIGNALED ( status ) ) error_msg_and_die ( "Child<S2SV_blank>terminated<S2SV_blank>with<S2SV_blank>signal<S2SV_blank>%d" , WTERMSIG ( status ) ) ; error_msg_and_die ( "Child<S2SV_blank>exit<S2SV_blank>failed" ) ; }
<S2SV_ModStart> source_filename , int source_base_ofs , uid_t uid , gid_t gid <S2SV_ModStart> in ) ; } const int dest_fd = fileno ( fp ) ; if ( fchown ( dest_fd , uid , gid ) < 0 ) { perror_msg ( "Can\'t<S2SV_blank>change<S2SV_blank>\'%s\'<S2SV_blank>ownership<S2SV_blank>to<S2SV_blank>%lu:%lu" , dest_filename , ( long ) uid , ( long ) gid ) ; fclose ( fp ) ; unlink ( dest_filename ) ; return false ; }
<S2SV_ModStart> , FILENAME_MAPS ) ; copy_file_ext <S2SV_ModEnd> ( source_filename , dest_filename <S2SV_ModStart> source_filename , dest_filename , 0640 <S2SV_ModEnd> , dd -> dd_uid <S2SV_ModStart> , dd -> dd_gid , O_RDONLY , O_WRONLY | O_CREAT | O_TRUNC | O_EXCL <S2SV_ModEnd> ) ; strcpy ( <S2SV_ModStart> , FILENAME_LIMITS ) ; copy_file_ext <S2SV_ModEnd> ( source_filename , dest_filename <S2SV_ModStart> source_filename , dest_filename , 0640 <S2SV_ModEnd> , dd -> dd_uid <S2SV_ModStart> , dd -> dd_gid , O_RDONLY , O_WRONLY | O_CREAT | O_TRUNC | O_EXCL <S2SV_ModEnd> ) ; strcpy ( <S2SV_ModStart> , FILENAME_CGROUP ) ; copy_file_ext <S2SV_ModEnd> ( source_filename , dest_filename <S2SV_ModStart> source_filename , dest_filename , 0640 <S2SV_ModEnd> , dd -> dd_uid <S2SV_ModStart> , dd -> dd_gid , O_RDONLY , O_WRONLY | O_CREAT | O_TRUNC | O_EXCL <S2SV_ModEnd> ) ; strcpy ( <S2SV_ModStart> , FILENAME_OPEN_FDS ) ; <S2SV_ModEnd> dump_fd_info ( dest_filename , <S2SV_ModStart> , source_filename , source_base_ofs <S2SV_ModEnd> , dd -> dd_uid <S2SV_ModStart> , dd -> dd_gid <S2SV_ModEnd> ) ; free (
<S2SV_ModStart> dd_create ( path , g_settings_privatereports ? 0 :
<S2SV_ModStart> return 400 ; } if ( g_settings_privatereports ) { struct stat statbuf ; if ( lstat ( dirname , & statbuf ) != 0 || ! S_ISDIR ( statbuf . st_mode ) ) { error_msg ( "Path<S2SV_blank>\'%s\'<S2SV_blank>isn\'t<S2SV_blank>directory" , dirname ) ; return 404 ; } struct group * gr = getgrnam ( "abrt" ) ; if ( ! gr ) { error_msg ( "Group<S2SV_blank>\'abrt\'<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist" ) ; return 500 ; } if ( statbuf . st_uid != 0 || ! ( statbuf . st_gid == 0 || statbuf . st_gid == gr -> gr_gid ) || statbuf . st_mode & 07 ) { error_msg ( "Problem<S2SV_blank>directory<S2SV_blank>\'%s\'<S2SV_blank>isn\'t<S2SV_blank>owned<S2SV_blank>by<S2SV_blank>root:abrt<S2SV_blank>or<S2SV_blank>others<S2SV_blank>are<S2SV_blank>not<S2SV_blank>restricted<S2SV_blank>from<S2SV_blank>access" , dirname ) ; return 403 ; } struct dump_dir * dd = dd_opendir ( dirname , DD_OPEN_READONLY ) ; const bool complete = dd && problem_dump_dir_is_complete ( dd ) ; dd_close ( dd ) ; if ( complete ) { error_msg ( "Problem<S2SV_blank>directory<S2SV_blank>\'%s\'<S2SV_blank>has<S2SV_blank>already<S2SV_blank>been<S2SV_blank>processed" , dirname ) ; return 403 ; } } else
<S2SV_ModStart> 1 ; } } const uid_t dduid = g_settings_privatereports ? 0 : fsuid ; <S2SV_ModStart> dd_create_skeleton ( path , dduid <S2SV_ModEnd> , DEFAULT_DUMP_DIR_MODE , 0
<S2SV_ModStart> g_settings_shortenedreporting = 0 ; value = get_map_string_item_or_NULL ( settings , "PrivateReports" ) ; if ( value ) { g_settings_privatereports = string_to_bool ( value ) ; remove_map_string_item ( settings , "PrivateReports" ) ; }
<S2SV_ModStart> ; struct dump_dir * dd = NULL ; if ( g_settings_privatereports ) dd = create_dump_dir_from_problem_data_ext ( pd , g_settings_dump_location , 0 ) ; else
<S2SV_ModStart> ( ) ; } if ( g_settings_privatereports ) { if ( world_readable_dump ) log ( "Not<S2SV_blank>going<S2SV_blank>to<S2SV_blank>make<S2SV_blank>dump<S2SV_blank>directories<S2SV_blank>world<S2SV_blank>readable<S2SV_blank>because<S2SV_blank>PrivateReports<S2SV_blank>is<S2SV_blank>on" ) ; mode = DEFAULT_DUMP_DIR_MODE ; my_euid = 0 ; }
<S2SV_ModStart> ( ) ; } if ( g_settings_privatereports ) { if ( ( g_opts & OPT_x ) ) log ( "Not<S2SV_blank>going<S2SV_blank>to<S2SV_blank>make<S2SV_blank>dump<S2SV_blank>directories<S2SV_blank>world<S2SV_blank>readable<S2SV_blank>because<S2SV_blank>PrivateReports<S2SV_blank>is<S2SV_blank>on" ) ; mode = DEFAULT_DUMP_DIR_MODE ; my_euid = 0 ; }
<S2SV_ModStart> fopen ( dest_filename , "wx" <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ( g_tv_comment , FILENAME_COMMENT ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0
<S2SV_ModStart> ( dd ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) == GTK_RESPONSE_OK ) { <S2SV_ModStart> , item_name ) ; problem_data_reload_from_dump_dir ( ) ; update_gui_state_from_problem_data ( 0 ) ; }
<S2SV_ModStart> | O_APPEND | O_CREAT | O_NOFOLLOW
<S2SV_ModStart> ; int pidfd = open ( pid_file , O_NOFOLLOW | O_CREAT | O_WRONLY | O_TRUNC <S2SV_ModEnd> , S_IRUSR | S_IWUSR
<S2SV_ModStart> fopen ( filepath , "r" <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> return ; file = fopen_safe <S2SV_ModEnd> ( "/tmp/keepalived.json" , "w"
<S2SV_ModStart> ( ( tf = fopen_safe <S2SV_ModEnd> ( tfile -> file_path
<S2SV_ModStart> FILE * file = fopen_safe <S2SV_ModEnd> ( dump_file , "w"
<S2SV_ModStart> { FILE * file = fopen_safe <S2SV_ModEnd> ( stats_file , "w" <S2SV_ModStart> stats_file , "w" ) <S2SV_ModEnd> ; element e ; <S2SV_ModStart> vrrp_t * vrrp ; if ( ! file ) { log_message ( LOG_INFO , "Can\'t<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>(%d:<S2SV_blank>%s)" , stats_file , errno , strerror ( errno ) ) ; return ; } LIST_FOREACH ( vrrp_data -> vrrp , vrrp , e ) { <S2SV_ModEnd> fprintf ( file ,
<S2SV_ModStart> ) ; log_file = fopen_safe <S2SV_ModEnd> ( file_name , "a"
<S2SV_ModStart> | O_CLOEXEC | O_NONBLOCK | O_NOFOLLOW
<S2SV_ModStart> optarg ) ; return 0
<S2SV_ModStart> -> vrrp_rx_bufs_multiples ) ; conf_write ( fp , "<S2SV_blank>umask<S2SV_blank>=<S2SV_blank>0%o" , global_data -> umask ) ;
<S2SV_ModStart> ) ; # endif install_keyword ( "umask" , & umask_handler ) ;
<S2SV_ModStart> ) ; # endif umask ( 022 ) ; <S2SV_ModStart> alloc_global_data ( ) ; global_data -> umask = umask_val ; <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> # ifdef _MEM_CHECK_ enable_mem_log_termination
<S2SV_ModStart> false ; unsigned facility ; mode_t new_umask_val <S2SV_ModStart> , 'G' } , { "umask" , required_argument , NULL , 'u' } , <S2SV_ModStart> argc , argv , ":vhlndu:DRS:f:p:i:mM::g::Gt::" <S2SV_ModEnd> # if defined _WITH_VRRP_ <S2SV_ModStart> ; break ; case 'u' : new_umask_val = set_umask ( optarg ) ; if ( umask_cmdline ) umask_val = new_umask_val ; break ; case
<S2SV_ModStart> , "<S2SV_blank><S2SV_blank>-G,<S2SV_blank>--no-syslog<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Don\'t<S2SV_blank>log<S2SV_blank>via<S2SV_blank>syslog\\n" ) ; fprintf ( stderr , "<S2SV_blank><S2SV_blank>-u,<S2SV_blank>--umask=MASK<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>umask<S2SV_blank>for<S2SV_blank>file<S2SV_blank>creation<S2SV_blank>(in<S2SV_blank>numeric<S2SV_blank>form)\\n" ) ;
<S2SV_ModStart> { ACPI_STATUS Status ; <S2SV_ModEnd> ACPI_OPERAND_OBJECT * Prev ; <S2SV_ModStart> ; ACPI_OPERAND_OBJECT * Next ; ACPI_FUNCTION_TRACE ( NsTerminate ) <S2SV_ModStart> Prev ) ; } <S2SV_ModEnd> AcpiNsDeleteNamespaceSubtree ( AcpiGbl_RootNode )
<S2SV_ModStart> disiui_ ( ) ; if ( count >= dis_umaxd ) { if ( count > dis_umaxd ) goto overflow ; if ( memcmp ( scratch , dis_umax , dis_umaxd ) > 0 ) goto overflow ; }
<S2SV_ModStart> plen <= * len && plen > 0
<S2SV_ModStart> len - 2 ; if ( plen < 0 ) return 0 ;
<S2SV_ModStart> ) { LPSTR tmp = NULL ; LPSTR tmp2 <S2SV_ModStart> if ( s ) { tmp2 <S2SV_ModEnd> = ( LPSTR ) <S2SV_ModStart> CHAR ) ) ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 ; } <S2SV_ModStart> len - 1 ; tmp2 <S2SV_ModEnd> = ( LPSTR ) <S2SV_ModStart> ( CHAR ) ) ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> len - 1 ; tmp2 <S2SV_ModEnd> = ( LPSTR ) <S2SV_ModStart> ( CHAR ) ) ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> ds += 5 ; tmp2 <S2SV_ModEnd> = ( LPSTR ) <S2SV_ModStart> ( CHAR ) ) ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> ds += 5 ; tmp2 <S2SV_ModEnd> = ( LPSTR ) <S2SV_ModStart> ( CHAR ) ) ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 <S2SV_ModStart> ds += 4 ; tmp2 <S2SV_ModEnd> = ( LPSTR ) <S2SV_ModStart> ) ; if ( ! tmp2 ) free ( tmp ) ; tmp = tmp2 ; if (
<S2SV_ModStart> ) - 1 ; int n = 0 ; <S2SV_ModStart> defaultoptions ( & h <S2SV_ModEnd> ) ; while ( <S2SV_ModStart> luaL_checkstack ( L , 2 <S2SV_ModEnd> , "too<S2SV_blank>many<S2SV_blank>results" ) ; <S2SV_ModStart> , res ) ; n ++ ; <S2SV_ModStart> , f ) ; n ++ ; <S2SV_ModStart> , d ) ; n ++ ; <S2SV_ModStart> ) { if ( n == 0 || <S2SV_ModStart> luaL_error ( L , "format<S2SV_blank>\'c0\'<S2SV_blank>needs<S2SV_blank>a<S2SV_blank>previous<S2SV_blank>size" <S2SV_ModEnd> ) ; size = <S2SV_ModStart> , 1 ) ; n -- ; <S2SV_ModStart> luaL_argcheck ( L , size <= ld && pos <= ld - size , <S2SV_ModEnd> 2 , "data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short" ) <S2SV_ModStart> pos , size ) ; n ++ <S2SV_ModStart> - 1 ) ; n ++ ; <S2SV_ModStart> 1 ) ; return n + 1 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> a = getnum ( <S2SV_ModEnd> fmt , MAXALIGN )
<S2SV_ModStart> static int getnum ( <S2SV_ModEnd> const char * * <S2SV_ModStart> 0 ; do { <S2SV_ModEnd> a = a *
<S2SV_ModStart> : return getnum ( <S2SV_ModEnd> fmt , 1 ) <S2SV_ModStart> sz = getnum ( <S2SV_ModEnd> fmt , sizeof (
<S2SV_ModStart> , 0 , "MessagePack<S2SV_blank>pack<S2SV_blank>needs<S2SV_blank>input." ) ; if ( ! lua_checkstack ( L , nargs ) ) return luaL_argerror ( L , 0 , "Too<S2SV_blank>many<S2SV_blank>arguments<S2SV_blank>for<S2SV_blank>MessagePack<S2SV_blank>pack."
<S2SV_ModStart> ; lua_newtable ( L ) ; luaL_checkstack ( L , 1 , "in<S2SV_blank>function<S2SV_blank>mp_decode_to_lua_array"
<S2SV_ModStart> , len ) ; luaL_checkstack ( L , 1 , "in<S2SV_blank>function<S2SV_blank>mp_encode_lua_table_as_array" ) ;
<S2SV_ModStart> size_t len = 0 ; luaL_checkstack ( L , 3 , "in<S2SV_blank>function<S2SV_blank>mp_encode_lua_table_as_map" )
<S2SV_ModStart> i ++ ) { luaL_checkstack ( L , 1 , "in<S2SV_blank>function<S2SV_blank>mp_check" ) ;
<S2SV_ModStart> c . left ; luaL_checkstack ( L , 1 , "in<S2SV_blank>function<S2SV_blank>mp_unpack_full" ) ;
<S2SV_ModStart> == 0 ) { int class = <S2SV_ModEnd> getClientTypeByName ( v [ <S2SV_ModStart> [ j ] ) ; if ( class == - 1 || class == CLIENT_TYPE_MASTER <S2SV_ModEnd> ) { sdsfreesplitres (
<S2SV_ModStart> class == - 1 || class == CLIENT_TYPE_MASTER ) { err = "Unrecognized<S2SV_blank>client<S2SV_blank>limit<S2SV_blank>class:<S2SV_blank>the<S2SV_blank>user<S2SV_blank>specified<S2SV_blank>" "an<S2SV_blank>invalid<S2SV_blank>one,<S2SV_blank>or<S2SV_blank>\'master\'<S2SV_blank>which<S2SV_blank>has<S2SV_blank>no<S2SV_blank>buffer<S2SV_blank>limits." <S2SV_ModEnd> ; goto loaderr ;
<S2SV_ModStart> c -> flags & ( CLIENT_CLOSE_AFTER_REPLY | CLIENT_CLOSE_ASAP ) <S2SV_ModEnd> ) break ; if
<S2SV_ModStart> ( void ) { <S2SV_ModEnd> if ( config . <S2SV_ModStart> eval_ldb ) return ; sds prompt = sdsempty ( ) ; <S2SV_ModStart> hostsocket != NULL ) { prompt = sdscatfmt ( prompt , "redis<S2SV_blank>%s" , config . hostsocket ) ; } else { char addr [ 256 ] ; anetFormatAddr ( addr , sizeof ( addr ) , config . hostip , config . hostport ) ; prompt = sdscatlen ( prompt , addr , strlen ( addr ) ) ; } if ( config . dbnum != 0 ) prompt = sdscatfmt ( prompt , "[%i]" , config . dbnum ) ; prompt = sdscatlen ( prompt , "><S2SV_blank>" , 2 ) ; <S2SV_ModEnd> snprintf ( config . <S2SV_ModStart> . prompt ) , "%s" , prompt ) ; sdsfree ( prompt <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> ( o == NULL || checkType ( c , o , OBJ_STREAM )
<S2SV_ModStart> 3 , 1 ) ; luaL_argcheck ( L , pos > 0 , 3 , "offset<S2SV_blank>must<S2SV_blank>be<S2SV_blank>1<S2SV_blank>or<S2SV_blank>greater" ) ; pos -- <S2SV_ModEnd> ; int n = <S2SV_ModStart> luaL_argcheck ( L , size <= ld && pos <= ld - size , <S2SV_ModEnd> 2 , "data<S2SV_blank>string<S2SV_blank>too<S2SV_blank>short" )
<S2SV_ModStart> ; tf = ( <S2SV_ModEnd> luaY_parser ) ( L
<S2SV_ModStart> ap_log_cerror ( APLOG_MARK , APLOG_DEBUG <S2SV_ModEnd> , 0 , session <S2SV_ModStart> , valuelen ) ; if ( status == APR_ECONNRESET ) { ap_log_cerror ( APLOG_MARK , APLOG_TRACE1 , status , session -> c , "h2-stream(%ld-%d):<S2SV_blank>on_header,<S2SV_blank>reset<S2SV_blank>stream" , session -> id , stream -> id ) ; nghttp2_submit_rst_stream ( ngh2 , NGHTTP2_FLAG_NONE , stream -> id , NGHTTP2_INTERNAL_ERROR ) ; } else
<S2SV_ModStart> size_t vlen ) { int error = 0 ; <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> stream -> has_response ) <S2SV_ModStart> -> has_response ) { return APR_EINVAL ; } ++ stream -> request_headers_added ; <S2SV_ModStart> , name ) ; error = HTTP_REQUEST_URI_TOO_LARGE <S2SV_ModEnd> ; } } else <S2SV_ModStart> , name ) ; error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE ; } if ( stream -> request_headers_added > stream -> session -> s -> limit_req_fields + 4 ) { if ( stream -> request_headers_added > stream -> session -> s -> limit_req_fields + 4 + 100 ) { return APR_ECONNRESET ; } ap_log_cerror ( APLOG_MARK , APLOG_TRACE1 , 0 , stream -> session -> c , "h2_stream(%ld-%d):<S2SV_blank>too<S2SV_blank>many<S2SV_blank>header<S2SV_blank>lines" , stream -> session -> id , stream -> id ) ; error = HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE ; } if ( h2_stream_is_scheduled ( stream ) ) { return add_trailer ( stream , name , nlen , value , vlen ) ; } else if ( error ) { <S2SV_ModStart> h2_stream_set_error ( stream , error <S2SV_ModEnd> ) ; } else
<S2SV_ModStart> , "verify-client" ) ; SSL_set_verify ( ssl , verify_old , ssl_callback_SSLVerify ) ;
<S2SV_ModStart> lua_module ) ; const lua_authz_provider_func * prov_func = parsed_require_line ; const <S2SV_ModStart> lua_authz_provider_spec * prov_spec = prov_func -> spec <S2SV_ModEnd> ; int result ; <S2SV_ModStart> ) ; if ( prov_func <S2SV_ModEnd> -> args ) { <S2SV_ModStart> lua_checkstack ( L , prov_func <S2SV_ModEnd> -> args -> nelts <S2SV_ModStart> 0 ; i < prov_func <S2SV_ModEnd> -> args -> nelts <S2SV_ModStart> arg = APR_ARRAY_IDX ( prov_func <S2SV_ModEnd> -> args , i <S2SV_ModStart> ; } nargs = prov_func <S2SV_ModEnd> -> args -> nelts
<S2SV_ModStart> ; lua_authz_provider_spec * spec ; lua_authz_provider_func * func = apr_pcalloc ( cmd -> pool , sizeof ( lua_authz_provider_func ) ) <S2SV_ModStart> != NULL ) ; func -> spec = spec ; <S2SV_ModStart> char * arg ; func <S2SV_ModEnd> -> args = apr_array_make <S2SV_ModStart> ) { APR_ARRAY_PUSH ( func <S2SV_ModEnd> -> args , const <S2SV_ModStart> } * parsed_require_line = func <S2SV_ModEnd> ; return NULL ;
<S2SV_ModStart> apr_status_t rv ; int do_read = 1 ; int <S2SV_ModStart> r -> connection ) ; while ( do_read ) { do_read = 0 <S2SV_ModStart> & plen ) ; do_read = 1 ; } <S2SV_ModEnd> } } } return
<S2SV_ModStart> APLOGNO ( 02555 ) "Unknown<S2SV_blank>Transfer-Encoding:<S2SV_blank>%s;<S2SV_blank>" "using<S2SV_blank>read-until-close" <S2SV_ModEnd> , tenc ) ; <S2SV_ModStart> "Invalid<S2SV_blank>Content-Length" ) ; return APR_EINVAL <S2SV_ModEnd> ; } if ( <S2SV_ModStart> , bb ) ; apr_brigade_cleanup ( bb ) ; <S2SV_ModStart> case BODY_CHUNK_EXT : case BODY_CHUNK_LF : case BODY_CHUNK_END : case BODY_CHUNK_END_LF <S2SV_ModEnd> : { rv = <S2SV_ModStart> == BODY_CHUNK_TRAILER ) { return read_chunked_trailers ( ctx , f , b , conf -> merge_trailers == AP_MERGE_TRAILERS_ENABLE <S2SV_ModEnd> ) ; } break <S2SV_ModStart> } default : { ap_log_rerror ( APLOG_MARK , APLOG_ERR , 0 , f -> r , APLOGNO ( 02901 ) "Unexpected<S2SV_blank>body<S2SV_blank>state<S2SV_blank>(%i)" , ( int ) ctx -> state ) ; return APR_EGENERAL <S2SV_ModEnd> ; } } }
<S2SV_ModStart> -> state == BODY_CHUNK_END || ctx -> state == BODY_CHUNK_END_LF <S2SV_ModStart> -> state = BODY_CHUNK ; } else if ( c == CR && ctx -> state == BODY_CHUNK_END ) { ctx -> state = BODY_CHUNK_END_LF ; } else { return APR_EINVAL <S2SV_ModStart> ) ) { return APR_EINVAL <S2SV_ModEnd> ; } else { <S2SV_ModStart> chunkbits = sizeof ( apr_off_t <S2SV_ModEnd> ) * 8 ; <S2SV_ModStart> if ( c == LF ) { if ( ctx -> remaining ) { ctx -> state = BODY_CHUNK_DATA ; } else { ctx -> state = BODY_CHUNK_TRAILER ; } } else if ( ctx -> state == BODY_CHUNK_LF ) { return APR_EINVAL ; } else if ( c == CR ) { ctx -> state = BODY_CHUNK_LF ; } else if ( c == ';' <S2SV_ModEnd> ) { ctx -> <S2SV_ModStart> } else if ( ctx -> state == BODY_CHUNK_EXT ) { if ( c != '\\t' && apr_iscntrl ( c ) ) { return APR_EINVAL ; } } else if ( ctx -> state == BODY_CHUNK_PART <S2SV_ModEnd> ) { int xvalue <S2SV_ModStart> ) { int xvalue <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> i ++ ; continue ; } ctx -> chunkbits -= 4 ; if ( ctx -> chunkbits < 0 ) { return APR_ENOSPC <S2SV_ModStart> } else { return APR_EINVAL <S2SV_ModEnd> ; } ctx -> <S2SV_ModStart> ) | xvalue ; if ( <S2SV_ModEnd> ctx -> remaining < <S2SV_ModStart> return APR_ENOSPC ; } } else { return APR_EGENERAL ;
<S2SV_ModStart> NULL ) ; } attr = ippFindAttribute ( con -> request , "requesting-user-name" , IPP_TAG_NAME ) ; if ( attr && ! ippValidateAttribute ( attr ) ) { send_ipp_status ( con , IPP_ATTRIBUTES , _ ( "Bad<S2SV_blank>requesting-user-name<S2SV_blank>value:<S2SV_blank>%s" ) , cupsLastErrorString ( ) ) ; if ( ( attr = ippCopyAttribute ( con -> response , attr , 0 ) ) != NULL ) attr -> group_tag = IPP_TAG_UNSUPPORTED_GROUP ; return ( NULL ) ; } <S2SV_ModStart> ( printer , job <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> , "localhost." ) || <S2SV_ModEnd> ! strcmp ( con
<S2SV_ModStart> ; } if ( caplentoobig ) { printf ( "\\n\\nCapture<S2SV_blank>file<S2SV_blank>appears<S2SV_blank>to<S2SV_blank>be<S2SV_blank>damaged<S2SV_blank>or<S2SV_blank>corrupt.\\n" "Contains<S2SV_blank>packet<S2SV_blank>of<S2SV_blank>size<S2SV_blank>%u,<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>snap<S2SV_blank>length<S2SV_blank>%u\\n" , caplen , pcap_fh . snaplen ) ; close ( fd ) ; break ; } if ( <S2SV_ModStart> ( fd ) ; break <S2SV_ModEnd> ; } printf (
<S2SV_ModStart> ) ; } } s -> append_char ( s , 0 ) ; strncpy <S2SV_ModEnd> ( outbuffer , s
<S2SV_ModStart> & cs_flags ) ; hook_del_nick_can_register ( check_registration_keywords ) ; hook_del_user_can_register ( check_registration_keywords ) ; del_conf_item ( "ANOPE_FLAGS_COMPAT" , & chansvs . me -> conf_table ) ;
<S2SV_ModStart> & cs_flags ) ; add_bool_conf_item ( "ANOPE_FLAGS_COMPAT" , & chansvs . me -> conf_table , 0 , & anope_flags_compat , true ) ; hook_add_event ( "nick_can_register" ) ; hook_add_nick_can_register ( check_registration_keywords ) ; hook_add_event ( "user_can_register" ) ; hook_add_user_can_register ( check_registration_keywords ) ;
<S2SV_ModStart> } else if ( anope_flags_compat && <S2SV_ModStart> } else if ( anope_flags_compat && <S2SV_ModStart> } else if ( anope_flags_compat &&
<S2SV_ModStart> == in ) && ( alloc > 2 ) &&
<S2SV_ModStart> ( const char * cooke_domain <S2SV_ModEnd> , const char * <S2SV_ModStart> , const char * hostname ) { size_t cookie_domain_len = strlen ( cooke_domain ) ; size_t hostname_len = strlen ( hostname <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ) ; if ( hostname_len < cookie_domain_len <S2SV_ModEnd> ) return FALSE ; <S2SV_ModStart> ) return FALSE ; if ( ! Curl_raw_equal ( cooke_domain , hostname + hostname_len - cookie_domain_len ) ) return FALSE ; if ( hostname_len == cookie_domain_len ) return TRUE ; if ( '.' == * ( hostname + hostname_len - cookie_domain_len - 1 ) ) return TRUE ; return <S2SV_ModEnd> FALSE ; } <S2SV_null>
<S2SV_ModStart> newlen = alloc ; size_t <S2SV_ModEnd> strindex = 0 ;
<S2SV_ModStart> * olen ) { char * str = NULL ; size_t inputlen = length ; size_t outputlen ; CURLcode res = Curl_urldecode ( handle , string , inputlen , & str , & outputlen , FALSE <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> if ( res ) return NULL <S2SV_ModEnd> ; if ( olen <S2SV_ModStart> ) * olen = curlx_uztosi ( outputlen ) ; return str <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> state . path ; <S2SV_ModEnd> if ( ! * <S2SV_ModStart> path = "INBOX" ; return Curl_urldecode <S2SV_ModEnd> ( data , path <S2SV_ModStart> , 0 , & imapc -> mailbox , NULL , TRUE ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> state . path ; return Curl_urldecode <S2SV_ModEnd> ( data , path <S2SV_ModStart> path , 0 , & pop3c -> mailbox , NULL , TRUE ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> -> state . path <S2SV_ModEnd> ; char localhost [ <S2SV_ModStart> = "localhost" ; } result = Curl_urldecode ( conn -> data , path , 0 , & smtpc -> domain , NULL , TRUE ) ; if ( result ) return result <S2SV_ModEnd> ; state ( conn
<S2SV_ModStart> -> size ) ; if ( ! px -> ft ) { return FALSE ; }
<S2SV_ModStart> -> ui -> ft_in_start && bu
<S2SV_ModStart> 2 , strlen ( cp <S2SV_ModEnd> ) - 1 )
<S2SV_ModStart> tag , r -> qiov . size <S2SV_ModEnd> ) ; n = <S2SV_ModStart> n = r -> qiov . size <S2SV_ModEnd> / 512 ; r <S2SV_ModStart> req , r -> qiov . size <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> ; return ; } <S2SV_ModEnd> if ( s -> <S2SV_ModStart> ENOMEDIUM ) ; } n = scsi_init_iovec ( r ) ; bdrv_acct_start ( s -> bs , & r -> acct , n * BDRV_SECTOR_SIZE , BDRV_ACCT_READ ) ; r -> req . aiocb = bdrv_aio_readv ( s -> bs , r -> sector , <S2SV_ModEnd> & r -> qiov <S2SV_ModStart> r -> qiov , n , scsi_read_complete , r ) ; if ( <S2SV_ModEnd> r -> req . <S2SV_ModStart> -> req . aiocb <S2SV_ModEnd> == NULL ) {
<S2SV_ModStart> dev ) ; uint32_t <S2SV_ModEnd> n ; if ( <S2SV_ModStart> n = r -> qiov . size <S2SV_ModEnd> / 512 ; r <S2SV_ModStart> ; } else { scsi_init_iovec ( r ) <S2SV_ModEnd> ; DPRINTF ( "Write<S2SV_blank>complete<S2SV_blank>tag=0x%x<S2SV_blank>more=%d\\n" <S2SV_ModStart> req . tag , r -> qiov . size <S2SV_ModEnd> ) ; scsi_req_data ( <S2SV_ModStart> r -> req , r -> qiov . size <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> n = r -> qiov . size <S2SV_ModEnd> / 512 ; if <S2SV_ModStart> ENOMEDIUM ) ; } <S2SV_ModEnd> bdrv_acct_start ( s ->
<S2SV_ModStart> ( SCSIDiskReq * r ) { SCSIRequest * req = & r -> req ; SCSIDiskState * s = DO_UPCAST ( SCSIDiskState , qdev , req -> dev ) ; uint64_t nb_sectors ; uint8_t * outbuf ; int buflen = 0 ; if ( ! r -> iov . iov_base ) { if ( req -> cmd . xfer > 65536 ) { goto illegal_request ; } r -> buflen = MAX ( 4096 , req -> cmd . xfer ) ; r -> iov . iov_base = qemu_blockalign ( s -> bs , r -> buflen ) ; } outbuf = r -> iov . iov_base <S2SV_ModEnd> ; switch ( req
<S2SV_ModStart> = scsi_disk_emulate_command ( r <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> , req ) ; if ( r -> iov . iov_base ) { <S2SV_ModStart> iov_base ) ; } }
<S2SV_ModStart> * r ) { SCSIDiskState * s = DO_UPCAST ( SCSIDiskState , qdev , r -> req . dev ) ; if ( ! r -> iov . iov_base ) { r -> buflen = SCSI_DMA_BUF_SIZE ; r -> iov . iov_base = qemu_blockalign ( s -> bs , r -> buflen ) ; } <S2SV_ModStart> sector_count * 512 , r -> buflen <S2SV_ModEnd> ) ; qemu_iovec_init_external (
<S2SV_ModStart> SCSIRequest * req ; <S2SV_ModEnd> req = scsi_req_alloc ( <S2SV_ModStart> , hba_private ) ; <S2SV_ModEnd> return req ; }
<S2SV_ModStart> ; uint8_t command ; <S2SV_ModEnd> int rc ; command <S2SV_ModStart> buf [ 0 ] <S2SV_ModEnd> ; DPRINTF ( "Command:<S2SV_blank>lun=%d<S2SV_blank>tag=0x%x<S2SV_blank>data=0x%02x" <S2SV_ModStart> = scsi_disk_emulate_command ( r <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> unsigned int blksize ; size_t <S2SV_ModEnd> blocks ; unsigned int <S2SV_ModStart> - 1 ; } if ( blksize != 0 ) { <S2SV_ModStart> ) + 1 ; } if ( size == 0 || blksize == 0 || blocks > SIZE_MAX / blksize || range_count == 0 ) { LOGE ( "invalid<S2SV_blank>data<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map<S2SV_blank>file:<S2SV_blank>size<S2SV_blank>%zu,<S2SV_blank>blksize<S2SV_blank>%u,<S2SV_blank>range_count<S2SV_blank>%u\\n" , size , blksize , range_count ) ; return - 1 ; } <S2SV_ModStart> pMap -> ranges = calloc ( range_count , <S2SV_ModEnd> sizeof ( MappedRange ) <S2SV_ModStart> MappedRange ) ) ; if <S2SV_ModEnd> ( pMap -> ranges <S2SV_ModStart> ( pMap -> ranges == NULL ) { LOGE ( "calloc(%u,<S2SV_blank>%zu)<S2SV_blank>failed:<S2SV_blank>%s\\n" , range_count , <S2SV_ModEnd> sizeof ( MappedRange ) <S2SV_ModStart> sizeof ( MappedRange ) , strerror ( errno ) ) ; return - 1 ; } <S2SV_ModEnd> unsigned char * reserve <S2SV_ModStart> errno ) ) ; free ( pMap -> ranges ) ; return - 1 ; } int fd = open ( block_dev , O_RDONLY ) ; if ( fd < 0 ) { LOGW ( "failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>block<S2SV_blank>device<S2SV_blank>%s:<S2SV_blank>%s\\n" , block_dev , strerror ( errno ) ) ; munmap ( reserve , blocks * blksize ) ; free ( pMap -> ranges ) ; return - 1 ; } unsigned char * next = reserve ; size_t remaining_size = blocks * blksize ; bool success = true ; for ( i = 0 ; i < range_count ; ++ i ) { size_t start , end ; if ( fscanf ( mapf , "%zu<S2SV_blank>%zu\\n" , & start , & end ) != 2 ) { LOGW ( "failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>range<S2SV_blank>%d<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map\\n" , i ) ; success = false ; break ; } size_t length = ( end - start ) * blksize ; if ( end <= start || ( end - start ) > SIZE_MAX / blksize || length > remaining_size ) { LOGE ( "unexpected<S2SV_blank>range<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map:<S2SV_blank>%zu<S2SV_blank>%zu\\n" , start , end ) ; success = false ; break ; } void * addr = mmap64 ( next , length , PROT_READ , MAP_PRIVATE | MAP_FIXED , fd , ( ( off64_t ) start ) * blksize ) ; if ( addr == MAP_FAILED ) { LOGW ( "failed<S2SV_blank>to<S2SV_blank>map<S2SV_blank>block<S2SV_blank>%d:<S2SV_blank>%s\\n" , i , strerror ( errno ) ) ; success = false ; break <S2SV_ModEnd> ; } pMap -> <S2SV_ModStart> pMap -> ranges [ i <S2SV_ModEnd> ] . addr = <S2SV_ModStart> ] . addr = addr <S2SV_ModEnd> ; pMap -> ranges <S2SV_ModStart> pMap -> ranges [ i <S2SV_ModEnd> ] . length = <S2SV_ModStart> ] . length = length ; next += length ; remaining_size -= length ; } if ( success && remaining_size != 0 ) { LOGE ( "ranges<S2SV_blank>in<S2SV_blank>block<S2SV_blank>map<S2SV_blank>are<S2SV_blank>invalid:<S2SV_blank>remaining_size<S2SV_blank>=<S2SV_blank>%zu\\n" , remaining_size ) ; success = false ; } if ( ! success ) { close ( fd ) ; munmap ( reserve , blocks * blksize ) ; free ( pMap -> ranges ) ; return - 1 ; } close ( fd ) ; pMap -> addr = reserve ; pMap -> length <S2SV_ModEnd> = size ; LOGI
<S2SV_ModStart> MappedRange ) ) ; if ( pMap -> ranges == NULL ) { LOGE ( "malloc<S2SV_blank>failed:<S2SV_blank>%s\\n" , strerror ( errno ) ) ; munmap ( memPtr , length ) ; return - 1 ; }
<S2SV_ModStart> , fn ) ; fclose ( mapf ) ;
<S2SV_ModStart> return TRUE ; } Jid * my_jid = jid_create ( connection_get_fulljid ( ) ) ; const char * const stanza_from = xmpp_stanza_get_from ( stanza ) ; Jid * msg_jid = jid_create ( stanza_from ) ; if ( g_strcmp0 ( my_jid -> barejid , msg_jid -> barejid ) != 0 ) { log_warning ( "Invalid<S2SV_blank>carbon<S2SV_blank>received,<S2SV_blank>from:<S2SV_blank>%s" , stanza_from ) ; return TRUE ; } <S2SV_ModStart> = jid_create ( to <S2SV_ModEnd> ) ; char *
<S2SV_ModStart> ) ; stbbr_send ( "<message<S2SV_blank>type=\'chat\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'stabber@localhost\'>" <S2SV_ModEnd> "<received<S2SV_blank>xmlns=\'urn:xmpp:carbons:2\'>" "<forwarded<S2SV_blank>xmlns=\'urn:xmpp:forward:0\'>" "<message<S2SV_blank>id=\'prof_msg_7\'<S2SV_blank>xmlns=\'jabber:client\'<S2SV_blank>type=\'chat\'<S2SV_blank>lang=\'en\'<S2SV_blank>to=\'stabber@localhost/profanity\'<S2SV_blank>from=\'buddy1@localhost/mobile\'>" "<body>test<S2SV_blank>carbon<S2SV_blank>from<S2SV_blank>recipient</body>"
<S2SV_ModStart> space == 0 ) { <S2SV_ModStart> string -> space = 4 ; } else { const guint max_space = MIN ( G_MAXINT , G_MAXSIZE / MAX ( sizeof ( PangoGlyphInfo ) , sizeof ( gint ) ) ) ; guint more_space = ( guint ) string -> space * <S2SV_ModEnd> 2 ; if ( <S2SV_ModStart> 2 ; if ( more_space > max_space ) { more_space = max_space ; if ( ( guint ) new_len > max_space ) { g_error ( "%s:<S2SV_blank>failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>glyph<S2SV_blank>string<S2SV_blank>of<S2SV_blank>length<S2SV_blank>%i\\n" , G_STRLOC , new_len ) ; } } <S2SV_ModEnd> string -> space = <S2SV_ModStart> string -> space = more_space <S2SV_ModEnd> ; } } string
<S2SV_ModStart> * text ; int result ; int <S2SV_ModStart> REG_NOTBOL ; } } result = <S2SV_ModEnd> js_regexec ( re -> <S2SV_ModStart> m , opts ) ; if ( result < 0 ) js_error ( J , "regexec<S2SV_blank>failed" ) ; if ( result == 0
<S2SV_ModStart> text ) { int result ; int <S2SV_ModStart> REG_NOTBOL ; } } result = <S2SV_ModEnd> js_regexec ( re -> <S2SV_ModStart> m , opts ) ; if ( result < 0 ) js_error ( J , "regexec<S2SV_blank>failed" ) ; if ( result == 0
<S2SV_ModStart> ) { if ( js_doregexec ( J , <S2SV_ModEnd> re -> prog ,
<S2SV_ModStart> ) ; if ( js_doregexec ( J , <S2SV_ModEnd> re -> prog , <S2SV_ModStart> } if ( ! js_doregexec ( J , <S2SV_ModEnd> re -> prog ,
<S2SV_ModStart> ; if ( ! js_doregexec ( J , <S2SV_ModEnd> re -> prog ,
<S2SV_ModStart> ) { if ( js_doregexec ( J , <S2SV_ModEnd> re -> prog , <S2SV_ModStart> ) { if ( js_doregexec ( J , <S2SV_ModEnd> re -> prog ,
<S2SV_ModStart> , Resub * out , int depth <S2SV_ModStart> Resub scratch ; int result ; int <S2SV_ModStart> ; Rune c ; if ( depth > MAXREC ) return - 1 ; <S2SV_ModStart> case I_END : return 0 <S2SV_ModEnd> ; case I_JUMP : <S2SV_ModStart> = * out ; result = <S2SV_ModEnd> match ( pc -> <S2SV_ModStart> flags , & scratch , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 0 <S2SV_ModEnd> ) { * out <S2SV_ModStart> = scratch ; return 0 <S2SV_ModEnd> ; } pc = <S2SV_ModStart> ; case I_PLA : result = <S2SV_ModEnd> match ( pc -> <S2SV_ModStart> , flags , out , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 1 ) return 1 <S2SV_ModEnd> ; pc = pc <S2SV_ModStart> = * out ; result = <S2SV_ModEnd> match ( pc -> <S2SV_ModStart> flags , & scratch , depth + 1 ) ; if ( result == - 1 ) return - 1 ; if ( result == 0 ) return 1 <S2SV_ModEnd> ; pc = pc <S2SV_ModStart> == 0 ) return 1 <S2SV_ModEnd> ; pc = pc <S2SV_ModStart> == 0 ) return 1 <S2SV_ModEnd> ; if ( isnewline <S2SV_ModStart> c ) ) return 1 <S2SV_ModEnd> ; pc = pc <S2SV_ModStart> == 0 ) return 1 <S2SV_ModEnd> ; if ( flags <S2SV_ModStart> -> c ) return 1 <S2SV_ModEnd> ; pc = pc <S2SV_ModStart> == 0 ) return 1 <S2SV_ModEnd> ; if ( flags <S2SV_ModStart> ) ) ) return 1 <S2SV_ModEnd> ; } else { <S2SV_ModStart> c ) ) return 1 <S2SV_ModEnd> ; } pc = <S2SV_ModStart> == 0 ) return 1 <S2SV_ModEnd> ; if ( flags <S2SV_ModStart> ) ) ) return 1 <S2SV_ModEnd> ; } else { <S2SV_ModStart> c ) ) return 1 <S2SV_ModEnd> ; } pc = <S2SV_ModStart> i ) ) return 1 <S2SV_ModEnd> ; } else { <S2SV_ModStart> i ) ) return 1 <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ; } } return 1 <S2SV_ModEnd> ; case I_EOL : <S2SV_ModStart> ; } } return 1 <S2SV_ModEnd> ; case I_WORD : <S2SV_ModStart> ! i ) return 1 <S2SV_ModEnd> ; pc = pc <S2SV_ModStart> ( i ) return 1 <S2SV_ModEnd> ; pc = pc <S2SV_ModStart> ; default : return 1 <S2SV_ModEnd> ; } } }
<S2SV_ModStart> = NULL ; return <S2SV_ModEnd> match ( prog -> <S2SV_ModStart> | eflags , sub , 0
<S2SV_ModStart> , OP_ENDCATCH ) ; emit ( J , F , OP_ENDTRY ) ;
<S2SV_ModStart> { char buf [ 100 <S2SV_ModEnd> ] ; js_Object * <S2SV_ModStart> ] = "0123456789abcdefghijklmnopqrstuvwxyz" ; <S2SV_ModEnd> double number = self
<S2SV_ModStart> { char buf [ 50 <S2SV_ModEnd> ] , * e
<S2SV_ModStart> , client_p , "Mixing<S2SV_blank>client<S2SV_blank>and<S2SV_blank>server<S2SV_blank>protocol" ) ; return 0 ; } if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) { exit_client ( client_p , client_p , client_p , "Malformed<S2SV_blank>AUTHENTICATE"
<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd )
<S2SV_ModStart> end ++ ; } if ( pattern [ end ] == 0 ) break ;
<S2SV_ModStart> ] = Mymr_C_VIRAMA ; if ( len > 0 )
<S2SV_ModStart> ctxt -> dict ) && xmlDictOwns ( ctxt -> dict , value )
<S2SV_ModStart> ctxt -> dict ) && xmlDictOwns ( ctxt -> dict , value )
<S2SV_ModStart> # endif if ( ctxt -> instate == XML_PARSER_EOF ) return ; if (
<S2SV_ModStart> , NULL ) ; if ( ctxt -> instate != XML_PARSER_EOF ) <S2SV_ModStart> NULL ) ; } if ( ctxt -> instate != XML_PARSER_EOF ) ctxt -> instate <S2SV_ModEnd> = state ; }
<S2SV_ModStart> ; Browser_Window * window ; char * window_size_string = NULL <S2SV_ModStart> ( evas_engine_name ) , ECORE_GETOPT_VALUE_STR ( window_size_string ) , <S2SV_ModStart> ) ; if ( window_size_string ) parse_window_size ( window_size_string , & window_width , & window_height ) ; if (
<S2SV_ModStart> app_data -> window , window_width , window_height <S2SV_ModEnd> ) ; evas_object_show (
<S2SV_ModStart> > count ) { png_size_t <S2SV_ModEnd> copy = output_size - <S2SV_ModStart> count ; if ( ( png_size_t ) <S2SV_ModStart> copy ) copy = ( png_size_t )
<S2SV_ModStart> db ; addModuleArgument ( pParse <S2SV_ModEnd> , pParse -> pNewTable
<S2SV_ModStart> static void addModuleArgument ( Parse * pParse <S2SV_ModEnd> , Table * pTable <S2SV_ModStart> * zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof ( <S2SV_ModStart> * * azModuleArg ; sqlite3 * db = pParse -> db ; if ( pTable -> nModuleArg + 3 >= db -> aLimit [ SQLITE_LIMIT_COLUMN ] ) { sqlite3ErrorMsg ( pParse , "too<S2SV_blank>many<S2SV_blank>columns<S2SV_blank>on<S2SV_blank>%s" , pTable -> zName ) ; }
<S2SV_ModStart> ; # ifdef SQLITE_TEST_REALLOC_STRESS sqlite3_int64 <S2SV_ModEnd> nNew = ( v <S2SV_ModStart> nOpAlloc >= 512 ? 2 * ( sqlite3_int64 ) v -> nOpAlloc : ( sqlite3_int64 ) <S2SV_ModEnd> v -> nOpAlloc + <S2SV_ModStart> ) ; # else sqlite3_int64 <S2SV_ModEnd> nNew = ( v <S2SV_ModStart> v -> nOpAlloc ? 2 * ( sqlite3_int64 ) v -> nOpAlloc : ( sqlite3_int64 ) <S2SV_ModEnd> 1024 / sizeof ( <S2SV_ModStart> / sizeof ( Op <S2SV_ModEnd> ) ) ; UNUSED_PARAMETER
<S2SV_ModStart> * * aVTrans ; sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof ( <S2SV_ModStart> * ) * ( ( sqlite3_int64 )
<S2SV_ModStart> sqlite3Malloc ( sz * ( sqlite3_int64 )
<S2SV_ModStart> char * z ; sqlite3_int64 <S2SV_ModEnd> n = * pnEntry <S2SV_ModStart> == 0 ) { sqlite3_int64 <S2SV_ModEnd> sz = ( n
<S2SV_ModStart> + ( 2 * ( sqlite3_int64 )
<S2SV_ModStart> SrcList * pNew ; sqlite3_int64 nAlloc = 2 * ( sqlite3_int64 ) pSrc -> nSrc <S2SV_ModEnd> + nExtra ; sqlite3
<S2SV_ModStart> 0 ] ) { sqlite3_int64 <S2SV_ModEnd> nAlloc = ( pIn <S2SV_ModStart> = ( pIn ? 2 * ( sqlite3_int64 ) pIn [ 0 ] <S2SV_ModEnd> : 10 ) +
<S2SV_ModStart> list . aMemory ; sqlite3_int64 nNew = 2 * ( sqlite3_int64 ) pSorter -> nMemory <S2SV_ModEnd> ; while ( nNew
<S2SV_ModStart> ) ; addModuleArgument ( pParse <S2SV_ModEnd> , pTable , sqlite3NameFromToken <S2SV_ModStart> ) ; addModuleArgument ( pParse <S2SV_ModEnd> , pTable , 0 <S2SV_ModStart> ) ; addModuleArgument ( pParse <S2SV_ModEnd> , pTable , sqlite3DbStrDup
<S2SV_ModStart> 1 ; addModuleArgument ( pParse <S2SV_ModEnd> , pTab , sqlite3DbStrDup <S2SV_ModStart> ) ; addModuleArgument ( pParse <S2SV_ModEnd> , pTab , 0 <S2SV_ModStart> ) ; addModuleArgument ( pParse <S2SV_ModEnd> , pTab , sqlite3DbStrDup
<S2SV_ModStart> ( pWith ) { sqlite3_int64 <S2SV_ModEnd> nByte = sizeof (
<S2SV_ModStart> u8 * aNew ; sqlite3_int64 <S2SV_ModEnd> nNew = MAX ( <S2SV_ModStart> MAX ( 128 , 2 * ( sqlite3_int64 ) p -> nAlloc <S2SV_ModEnd> ) ; while (
<S2SV_ModStart> MatchinfoBuffer * pRet ; sqlite3_int64 <S2SV_ModEnd> nByte = sizeof ( <S2SV_ModStart> * ( 2 * ( sqlite3_int64 ) <S2SV_ModStart> ( MatchinfoBuffer ) ; sqlite3_int64 nStr = <S2SV_ModEnd> strlen ( zMatchinfo ) <S2SV_ModStart> ) ; pRet = sqlite3_malloc64 <S2SV_ModEnd> ( nByte + nStr
<S2SV_ModStart> pCsr -> zInput = sqlite3_malloc64 <S2SV_ModEnd> ( nByte + 1
<S2SV_ModStart> ) ) ) { sqlite3_int64 <S2SV_ModEnd> nNew = sizeof ( <S2SV_ModStart> char * * ) sqlite3_realloc64 <S2SV_ModEnd> ( ( void *
<S2SV_ModStart> ) { while ( ( len > 0 ) && ( <S2SV_ModStart> ] == 0x20 ) )
<S2SV_ModStart> ptime -> month - 1U <S2SV_ModEnd> ) % 12 ] <S2SV_ModStart> ptime -> month - 1U <S2SV_ModEnd> ) % 12 ] <S2SV_ModStart> ptime -> month - 1U <S2SV_ModEnd> ) % 12 ]
<S2SV_ModStart> ( png_charp ) PNG_STRING_NEWLINE "libpng<S2SV_blank>version<S2SV_blank>1.2.54<S2SV_blank>-<S2SV_blank>November<S2SV_blank>12,<S2SV_blank>2015" PNG_STRING_NEWLINE "Copyright<S2SV_blank>(c)<S2SV_blank>1998-2015<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson" <S2SV_ModEnd> PNG_STRING_NEWLINE "Copyright<S2SV_blank>(c)<S2SV_blank>1996-1997<S2SV_blank>Andreas<S2SV_blank>Dilger" PNG_STRING_NEWLINE "Copyright<S2SV_blank>(c)<S2SV_blank>1995-1996<S2SV_blank>Guy<S2SV_blank>Eric<S2SV_blank>Schalnat,<S2SV_blank>Group<S2SV_blank>42,<S2SV_blank>Inc." <S2SV_ModStart> ( ( png_charp ) "libpng<S2SV_blank>version<S2SV_blank>1.2.54<S2SV_blank>-<S2SV_blank>November<S2SV_blank>12,<S2SV_blank>2015\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1998-2015<S2SV_blank>Glenn<S2SV_blank>Randers-Pehrson\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1996-1997<S2SV_blank>Andreas<S2SV_blank>Dilger\\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Copyright<S2SV_blank>(c)<S2SV_blank>1995-1996<S2SV_blank>Guy<S2SV_blank>Eric<S2SV_blank>Schalnat,<S2SV_blank>Group<S2SV_blank>42,<S2SV_blank>Inc." <S2SV_ModEnd> ) ; # endif
<S2SV_ModStart> ptr_ptr = info_ptr ; if ( info_ptr == NULL ) return ;
<S2SV_ModStart> ptr ; png_structp p ; png_uint_32 save_flags ; png_uint_32 num_bytes ; if ( png_ptr == NULL ) return ( NULL ) ; p <S2SV_ModStart> png_structp ) png_ptr ; <S2SV_ModEnd> save_flags = p -> <S2SV_ModStart> = p -> flags <S2SV_ModEnd> ; if ( items
<S2SV_ModStart> ) ; if ( ctxt -> error ) return ; if (
<S2SV_ModStart> growBuffer ( buffer , i +
<S2SV_ModStart> ) { xmlNodePtr cur = NULL ; xmlXPathObjectPtr obj <S2SV_ModStart> == 1 ) { <S2SV_ModEnd> xmlNodeSetPtr nodelist ; int <S2SV_ModStart> i ] ; } <S2SV_ModEnd> } else { xsltTransformError <S2SV_ModStart> -> doc ; } if ( obj ) xmlXPathFreeObject ( obj ) ;
<S2SV_ModStart> ; if ( split_flag && size >= MIN_BLOCK_SIZE
<S2SV_ModStart> ( 3 , stream ) ; decoder_info -> log2_sb_size = clip ( decoder_info -> log2_sb_size , log2i ( MIN_BLOCK_SIZE ) , log2i ( MAX_SB_SIZE )
<S2SV_ModStart> 0 ; if ( ( len > 12 ) && <S2SV_ModStart> } else if ( ( len > 9 ) &&
<S2SV_ModStart> ; if ( ! valid_hex ( nonce1 ) <S2SV_ModEnd> ) { applog ( <S2SV_ModStart> applog ( LOG_INFO , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>valid<S2SV_blank>nonce1<S2SV_blank>in<S2SV_blank>initiate_stratum" <S2SV_ModEnd> ) ; free ( <S2SV_ModStart> ) ; if ( n2size < 2 || n2size > 16 <S2SV_ModEnd> ) { applog ( <S2SV_ModStart> applog ( LOG_INFO , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>valid<S2SV_blank>n2size<S2SV_blank>in<S2SV_blank>initiate_stratum" <S2SV_ModEnd> ) ; free (
<S2SV_ModStart> ; if ( ! valid_hex ( job_id ) || ! valid_hex ( prev_hash ) || ! valid_hex ( coinbase1 ) || ! valid_hex ( coinbase2 ) || ! valid_hex ( bbversion ) || ! valid_hex ( nbit ) || ! valid_hex ( ntime ) ) { free ( job_id ) ; free ( coinbase1 ) ; <S2SV_ModEnd> free ( coinbase2 )
<S2SV_ModStart> pool -> stratum_port ; snprintf ( address , 254 <S2SV_ModEnd> , "%s:%s" , url
<S2SV_ModStart> ) + pkg_length ; buffer_size -= ( size_t ) pkg_length ; <S2SV_ModStart> ) + pkg_length ; buffer_size -= ( size_t ) pkg_length ; <S2SV_ModStart> ) + pkg_length ; buffer_size -= ( size_t ) pkg_length ;
<S2SV_ModStart> { DEBUG ( "snmp<S2SV_blank>plugin:<S2SV_blank>all<S2SV_blank>variables<S2SV_blank>have<S2SV_blank>left<S2SV_blank>their<S2SV_blank>subtree" ) ; snmp_free_pdu ( req <S2SV_ModStart> res = NULL ; <S2SV_ModEnd> sfree ( errstr ) <S2SV_ModStart> NULL ; if ( <S2SV_ModEnd> status == 0 )
<S2SV_ModStart> if ( size < 5 + 1 <S2SV_ModEnd> ) ASSERT ( result <S2SV_ModStart> result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf , "DEADBEEF" , 8 ) ; length = size ; result = my_asnprintf ( buf , & length , "%2.0f" , 1.6314159265358979e+125 ) ; ASSERT ( result != NULL ) ; ASSERT ( strcmp ( result , "163141592653589790215729350939528493057529598899734151772468186268423257777068536614838678161083520756952076273094236944990208" ) == 0 ) ; ASSERT ( length == 126 ) ; if ( size < 126 + 1 ) ASSERT ( result != buf ) ; ASSERT ( memcmp ( buf + size , & "DEADBEEF" [ size ] , 8 - size ) == 0 ) ; if ( result != buf ) free ( result ) ; }
<S2SV_ModStart> hash_param . data = instance -> private_key <S2SV_ModEnd> ; hash_param . len <S2SV_ModStart> hash_param . len = instance -> private_key_len <S2SV_ModEnd> ; hash_slot = PK11_GetBestSlot
<S2SV_ModStart> '%' == * ptr && ptr [ 1 ]
<S2SV_ModStart> >= 0 ) { if ( width >= ( long ) sizeof ( work ) ) width = sizeof ( work ) - 1 ; <S2SV_ModStart> >= 0 ) { size_t maxprec = sizeof ( work ) - 2 ; double val = p -> data . dnum ; while ( val >= 10.0 ) { val /= 10 ; maxprec -- ; } if ( prec > ( long ) maxprec ) prec = maxprec - 1 ; <S2SV_ModStart> . dnum ) ; # ifdef CURLDEBUG assert ( strlen ( work ) <= sizeof ( work ) ) ; # endif
<S2SV_ModStart> test_string_formatting ( ) ; errors += test_float_formatting ( ) ;
<S2SV_ModStart> data -> multi_easy ) { <S2SV_ModStart> -> multi_easy ) ; data -> multi_easy = NULL ; }
<S2SV_ModStart> malloc ( 2 * UPLOAD_BUFSIZE <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> CURLE_OUT_OF_MEMORY ; } } DEBUGASSERT ( UPLOAD_BUFSIZE >= nread ) ;
<S2SV_ModStart> ; len -= cut + 1
<S2SV_ModStart> ulen > SIZE_T_MAX / 4 <S2SV_ModEnd> ) || ( plen
<S2SV_ModStart> "Syncapply" ) ) { if ( ! imapd_userisadmin ) goto badcmd ; <S2SV_ModStart> "Syncget" ) ) { if ( ! imapd_userisadmin ) goto badcmd ; <S2SV_ModStart> ) { if ( ! imapd_userisadmin ) goto badcmd ; if ( <S2SV_ModStart> "Syncrestore" ) ) { if ( ! imapd_userisadmin ) goto badcmd ;
<S2SV_ModStart> const char * base <S2SV_ModEnd> = isarchive ? config_archivepartitiondir <S2SV_ModStart> ( part ) ; <S2SV_ModEnd> assert ( base !=
<S2SV_ModStart> { if ( prefixlen <= <S2SV_ModEnd> len ) { strlcpy
<S2SV_ModStart> RAPTOR_OPTION_NO_FILE ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2 , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES , NULL , RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;
<S2SV_ModStart> RAPTOR_OPTION_NO_FILE ) ) ; raptor_sax2_set_option ( rss_parser -> sax2 , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES , NULL , RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser , RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;
<S2SV_ModStart> case RAPTOR_OPTION_NO_FILE : case RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES : case
<S2SV_ModStart> case RAPTOR_OPTION_NO_FILE : case RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES : case
<S2SV_ModStart> NPNVSupportsXEmbedBool : case NPNVSupportsWindowless : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling
<S2SV_ModStart> NPPVpluginDescriptionString : case NPPVformValue : case NPPVpluginNativeAccessibleAtkPlugId <S2SV_ModStart> : case NPPVpluginKeepLibraryInMemory : case NPPVpluginUrlRequestsDisplayedBool : case NPPVpluginWantsAllNetworkStreams : case NPPVpluginCancelSrcStream : case NPPVSupportsAdvancedKeyHandling :
<S2SV_ModStart> : case NPNVPluginElementNPObject : case NPNVprivateModeBool : case NPNVsupportsAdvancedKeyHandling :
<S2SV_ModStart> ( NPNVSupportsWindowless ) ; _ ( NPNVprivateModeBool ) ; _ ( NPNVsupportsAdvancedKeyHandling ) ;
<S2SV_ModStart> ( NPPVformValue ) ; _ ( NPPVpluginUrlRequestsDisplayedBool ) ; _ ( NPPVpluginWantsAllNetworkStreams ) ; _ ( NPPVpluginNativeAccessibleAtkPlugId ) ; _ ( NPPVpluginCancelSrcStream ) ; _ ( NPPVSupportsAdvancedKeyHandling ) ;
<S2SV_ModStart> ; int i ; if ( ! config -> sample_rate ) { strcpy ( wpc -> error_message , "sample<S2SV_blank>rate<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>zero!" ) ; return FALSE ; }
<S2SV_ModStart> 4 ) , got_ds64 = 0 , format_chunk <S2SV_ModStart> TRUE , format ; if ( format_chunk ++ ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; }
<S2SV_ModStart> ; WaveHeader WaveHeader ; int format_chunk = 0 ; <S2SV_ModStart> TRUE , format ; if ( format_chunk ++ ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; }
<S2SV_ModStart> 0 ; uint32_t bcount ; CLEAR ( WaveHeader )
<S2SV_ModStart> ) { char * prop_chunk ; if ( dff_chunk_header . ckDataSize < 4 || dff_chunk_header . ckDataSize > 1024 ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( "got<S2SV_blank>PROP<S2SV_blank>chunk<S2SV_blank>of<S2SV_blank>%d<S2SV_blank>bytes<S2SV_blank>total" , ( int ) dff_chunk_header . ckDataSize ) ;
<S2SV_ModStart> } if ( bytecnt >= 2 <S2SV_ModStart> * byteptr ++ ; if ( wpc -> channel_reordering [ i ] >= nchans ) wpc -> channel_reordering [ i ] = 0 ;
<S2SV_ModStart> ckDataSize ; uint16_t numChannels = 0 <S2SV_ModStart> || numChannels < 1 || numChannels > 256 <S2SV_ModStart> 4 ) ) { if ( ! config -> num_channels ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; }
<S2SV_ModStart> ; char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.DFF<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; } buff
<S2SV_ModStart> ; char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.WAV<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; } buff
<S2SV_ModStart> 7L ; char * buff ; if ( bytes_to_copy < 0 || bytes_to_copy > 4194304 ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.W64<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; }
<S2SV_ModStart> { CAFChannelLayout * caf_channel_layout <S2SV_ModEnd> ; if ( caf_chunk_header <S2SV_ModStart> ( CAFChannelLayout ) || caf_chunk_header . mChunkSize > 1024 ) { error_line ( "this<S2SV_blank>.CAF<S2SV_blank>file<S2SV_blank>has<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>\'chan\'<S2SV_blank>chunk!" ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( "\'chan\'<S2SV_blank>chunk<S2SV_blank>is<S2SV_blank>%d<S2SV_blank>bytes" , ( int ) caf_chunk_header . mChunkSize ) ; caf_channel_layout = malloc ( ( size_t ) caf_chunk_header . mChunkSize ) ; if ( <S2SV_ModStart> ; } else { uint32_t <S2SV_ModEnd> bytes_to_copy = ( uint32_t <S2SV_ModStart> mChunkSize ; char * buff ; if ( caf_chunk_header . mChunkSize < 0 || caf_chunk_header . mChunkSize > 1048576 ) { error_line ( "%s<S2SV_blank>is<S2SV_blank>not<S2SV_blank>a<S2SV_blank>valid<S2SV_blank>.CAF<S2SV_blank>file!" , infilename ) ; return WAVPACK_SOFT_ERROR ; }
<S2SV_ModStart> if ( * dp <S2SV_ModEnd> != ( csum & <S2SV_ModStart> & 0xff ) || dp [ 1 ] <S2SV_ModEnd> != ( ( csum <S2SV_ModStart> & 0xff ) || dp [ 2 ] <S2SV_ModEnd> != ( ( csum <S2SV_ModStart> & 0xff ) || dp [ 3 ] <S2SV_ModEnd> != ( ( csum <S2SV_ModStart> if ( * dp <S2SV_ModEnd> != ( csum & <S2SV_ModStart> & 0xff ) || dp [ 1 ] <S2SV_ModEnd> != ( ( csum
<S2SV_ModStart> 0 ; uint32_t sampleRate = 0 <S2SV_ModStart> ! config -> num_channels || ! config -> sample_rate
<S2SV_ModStart> , & ds64_chunk , sizeof ( DS64Chunk ) <S2SV_ModEnd> , & bcount ) <S2SV_ModStart> ) || bcount != sizeof ( DS64Chunk ) <S2SV_ModEnd> ) { error_line ( <S2SV_ModStart> , & ds64_chunk , sizeof ( DS64Chunk ) <S2SV_ModEnd> ) ) { error_line
<S2SV_ModStart> , write_junk = 1 , table_length = 0 <S2SV_ModStart> riffhdr ; DS64Chunk ds64_chunk ; CS64Chunk cs64_chunk <S2SV_ModStart> ( ds64_chunk ) ; total_riff_bytes += table_length * sizeof ( CS64Chunk ) ; if ( write_junk ) total_riff_bytes += <S2SV_ModEnd> sizeof ( junkchunk ) <S2SV_ModStart> sizeof ( ds64_chunk ) + ( table_length * sizeof ( CS64Chunk ) ) <S2SV_ModStart> . sampleCount64 = total_samples ; ds64_chunk . tableLength = table_length <S2SV_ModStart> ) total_data_bytes ; } if ( table_length ) { strncpy ( cs64_chunk . ckID , "dmmy" , sizeof ( cs64_chunk . ckID ) ) ; cs64_chunk . chunkSize64 = 12345678 ; WavpackNativeToLittleEndian ( & cs64_chunk , CS64ChunkFormat ) ; } <S2SV_ModStart> ds64_chunk ) ) ) ) { error_line ( "can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!" ) ; return FALSE ; } while ( table_length -- ) if ( ! DoWriteFile ( outfile , & cs64_chunk , sizeof ( cs64_chunk ) , & bcount ) || bcount != sizeof ( cs64_chunk ) ) { error_line ( "can\'t<S2SV_blank>write<S2SV_blank>.WAV<S2SV_blank>data,<S2SV_blank>disk<S2SV_blank>probably<S2SV_blank>full!" ) ; return FALSE ; } if ( <S2SV_ModEnd> ( write_junk && (
<S2SV_ModStart> ) { uint32_t chan_chunk = 0 , desc_chunk <S2SV_ModStart> caf_audio_format , CAFAudioFormatFormat ) ; desc_chunk = 1 <S2SV_ModStart> ; if ( ! desc_chunk || !
<S2SV_ModStart> = NULL ; static size_t <S2SV_ModEnd> len = 0 ;
<S2SV_ModStart> 1 && str [ j <S2SV_ModEnd> ] ; i ++
<S2SV_ModStart> ; } if ( strlen ( token ) > 4 &&
<S2SV_ModStart> ; int res ; clist * list ; <S2SV_ModStart> { res = r ; goto free_display_name ; } list = clist_new ( ) ; if ( list == NULL ) { res = MAILIMF_ERROR_MEMORY ; goto free_display_name ; } mailbox_list = mailimf_mailbox_list_new ( list ) ; if ( mailbox_list == NULL ) { res = MAILIMF_ERROR_MEMORY ; clist_free ( list )
<S2SV_ModStart> != fs -> clusters + <S2SV_ModEnd> 1 ) get_fat (
<S2SV_ModStart> ) ; printf ( "%10lld<S2SV_blank>bytes<S2SV_blank>per<S2SV_blank>FAT<S2SV_blank>(=<S2SV_blank>%llu<S2SV_blank>sectors)\\n" , ( long long ) <S2SV_ModEnd> fs -> fat_size , <S2SV_ModStart> fs -> fat_size , ( long long )
<S2SV_ModStart> logical_sector_size , sectors ; off_t <S2SV_ModEnd> fat_length ; unsigned total_fat_entries <S2SV_ModStart> . fat32_length ) ; if ( ! fat_length ) die ( "FAT<S2SV_blank>size<S2SV_blank>is<S2SV_blank>zero." ) ; <S2SV_ModStart> - fs -> data_start ; if ( data_size < fs -> cluster_size ) die ( "Filesystem<S2SV_blank>has<S2SV_blank>no<S2SV_blank>space<S2SV_blank>for<S2SV_blank>any<S2SV_blank>data<S2SV_blank>clusters" )
<S2SV_ModStart> ] . security_options . acl_file = config -> default_listener . security_options . acl_file ; config -> listeners [ config -> listener_count - 1 ] . security_options .
<S2SV_ModStart> , NULL , NULL ) ; gss_release_buffer ( & min , & in <S2SV_ModStart> return NULL ; } gss_release_buffer ( & min , & out ) ;
<S2SV_ModStart> ) ) ) ; goto bail <S2SV_ModEnd> ; } if ( <S2SV_ModStart> "EOF<S2SV_blank>reading<S2SV_blank>packet<S2SV_blank>len" ) ) ; goto bail <S2SV_ModEnd> ; } len_buf_pos += <S2SV_ModStart> len ) ) ; goto bail <S2SV_ModEnd> ; } if ( <S2SV_ModStart> len ) ) ; goto bail <S2SV_ModEnd> ; } } ret <S2SV_ModStart> ) ) ) ; goto bail <S2SV_ModEnd> ; } if ( <S2SV_ModStart> len ) ) ; goto bail <S2SV_ModEnd> ; } tmpbuf_pos += <S2SV_ModStart> return - 2 ; bail : free ( tmpbuf ) ; tmpbuf = NULL ; return - 1 ;
<S2SV_ModStart> '\\0' ; dname = safe_calloc <S2SV_ModEnd> ( strlen ( name
<S2SV_ModStart> '\\0' ; new_fname = safe_calloc <S2SV_ModEnd> ( strlen ( fname
<S2SV_ModStart> ) { ascii = safe_calloc <S2SV_ModEnd> ( strlen ( str <S2SV_ModStart> NULL ; ascii = safe_calloc <S2SV_ModEnd> ( str_len ) ;
<S2SV_ModStart> * fp ) { char * header = safe_calloc ( 1024 ) ; long <S2SV_ModEnd> start = ftell (
<S2SV_ModStart> 1 ; data = safe_calloc ( <S2SV_ModEnd> blk_sz * n_blks )
<S2SV_ModStart> xref -> entries = safe_calloc ( <S2SV_ModEnd> xref -> n_entries *
<S2SV_ModStart> } ; daddy = safe_calloc <S2SV_ModEnd> ( sizeof ( creator_template
<S2SV_ModStart> ) ; buf = safe_calloc <S2SV_ModEnd> ( sz + 1
<S2SV_ModStart> pdf -> xrefs = safe_calloc ( <S2SV_ModEnd> sizeof ( xref_t )
<S2SV_ModStart> pdf ; pdf = safe_calloc ( <S2SV_ModEnd> sizeof ( pdf_t ) <S2SV_ModStart> pdf -> name = safe_calloc <S2SV_ModEnd> ( strlen ( n <S2SV_ModStart> pdf -> name = safe_calloc <S2SV_ModEnd> ( strlen ( "Unknown"
<S2SV_ModStart> ) { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( name
<S2SV_ModStart> ip , port , server -> connrec -> address ,
<S2SV_ModStart> 0 ; ssize_t count ; if ( bytes == 0 || items == 0 ) return 0
<S2SV_ModStart> map_offset + 30 ; if ( rsrc . map_offset + 28 > rsrc . rsrc_len ) { psf_log_printf ( psf , "Bad<S2SV_blank>map<S2SV_blank>offset.\\n" ) ; goto parse_rsrc_fork_cleanup ; } ; <S2SV_ModStart> k ++ ) { if ( <S2SV_ModEnd> rsrc . type_offset + <S2SV_ModStart> + k * 8 > rsrc . rsrc_len ) { psf_log_printf ( psf , "Bad<S2SV_blank>rsrc<S2SV_blank>marker.\\n" ) ; goto parse_rsrc_fork_cleanup ; } ; marker = read_rsrc_marker ( & rsrc , rsrc . type_offset + k * 8
<S2SV_ModStart> offset + 10 ; if ( psf -> fileoffset < psf -> filelength ) { <S2SV_ModStart> 1 ; } ; } ;
<S2SV_ModStart> { size_t chanmap_size = SF_MIN ( <S2SV_ModStart> -> sf . channels , layout_tag & 0xffff )
<S2SV_ModStart> == LEX_ID ) { espruino_snprintf ( str , len , "ID:%s" <S2SV_ModEnd> , jslGetTokenValueAsString ( ) <S2SV_ModStart> , jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } else <S2SV_ModStart> == LEX_STR ) { espruino_snprintf ( str , len , "String:\'%s\'" <S2SV_ModEnd> , jslGetTokenValueAsString ( ) <S2SV_ModStart> , jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } else
<S2SV_ModStart> >= 10 ) ; espruino_snprintf ( str , len , "?[%d]" , token <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> endif } else { strcpy <S2SV_ModEnd> ( result , "undefined" <S2SV_ModStart> ( result , "undefined" <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> int fractionalDigits ) { assert ( len > 9 ) ; <S2SV_ModStart> ( val ) ) strcpy <S2SV_ModEnd> ( str , "NaN" <S2SV_ModStart> ( str , "NaN" <S2SV_ModEnd> ) ; else if <S2SV_ModStart> val < 0 ) strcpy <S2SV_ModEnd> ( str , "-Infinity" <S2SV_ModStart> ( str , "-Infinity" ) ; else strcpy <S2SV_ModEnd> ( str , "Infinity" <S2SV_ModStart> ( str , "Infinity" <S2SV_ModEnd> ) ; } else
<S2SV_ModStart> JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE ) ; else { jsExceptionHere ( JSET_ERROR , "vertical_byte<S2SV_blank>only<S2SV_blank>works<S2SV_blank>for<S2SV_blank>1bpp<S2SV_blank>ArrayBuffers\\n" ) ; return 0 ; } if ( gfx . data . height & 7 ) { jsExceptionHere ( JSET_ERROR , "height<S2SV_blank>must<S2SV_blank>be<S2SV_blank>a<S2SV_blank>multiple<S2SV_blank>of<S2SV_blank>8<S2SV_blank>when<S2SV_blank>using<S2SV_blank>vertical_byte\\n" ) ; return 0 ; } <S2SV_ModEnd> } JsVar * colorv
<S2SV_ModStart> ) : idx ; assert ( ptr >= gfx -> backendData && ptr < ( ( char * ) gfx -> backendData + graphicsGetMemoryRequired ( gfx ) ) ) ;
<S2SV_ModStart> & ptr ) ; const uint32_t max_stack = 1000000 ; if ( count > max_stack ) return 0 ; return max_stack <S2SV_ModEnd> - count ; #
<S2SV_ModStart> size_t len ) { assert ( len > 28 ) ; <S2SV_ModStart> { case LEX_EOF : strcpy <S2SV_ModEnd> ( str , "EOF" <S2SV_ModStart> ( str , "EOF" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_ID : strcpy <S2SV_ModEnd> ( str , "ID" <S2SV_ModStart> ( str , "ID" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_INT : strcpy <S2SV_ModEnd> ( str , "INT" <S2SV_ModStart> ( str , "INT" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_FLOAT : strcpy <S2SV_ModEnd> ( str , "FLOAT" <S2SV_ModStart> ( str , "FLOAT" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_STR : strcpy <S2SV_ModEnd> ( str , "STRING" <S2SV_ModStart> ( str , "STRING" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_UNFINISHED_STR : strcpy <S2SV_ModEnd> ( str , "UNFINISHED<S2SV_blank>STRING" <S2SV_ModStart> ( str , "UNFINISHED<S2SV_blank>STRING" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str , "TEMPLATE<S2SV_blank>LITERAL" <S2SV_ModStart> ( str , "TEMPLATE<S2SV_blank>LITERAL" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy <S2SV_ModEnd> ( str , "UNFINISHED<S2SV_blank>TEMPLATE<S2SV_blank>LITERAL" <S2SV_ModStart> ( str , "UNFINISHED<S2SV_blank>TEMPLATE<S2SV_blank>LITERAL" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_REGEX : strcpy <S2SV_ModEnd> ( str , "REGEX" <S2SV_ModStart> ( str , "REGEX" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_UNFINISHED_REGEX : strcpy <S2SV_ModEnd> ( str , "UNFINISHED<S2SV_blank>REGEX" <S2SV_ModStart> ( str , "UNFINISHED<S2SV_blank>REGEX" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; case LEX_UNFINISHED_COMMENT : strcpy <S2SV_ModEnd> ( str , "UNFINISHED<S2SV_blank>COMMENT" <S2SV_ModStart> ( str , "UNFINISHED<S2SV_blank>COMMENT" <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> == 0 ) ; strcpy <S2SV_ModEnd> ( str , & <S2SV_ModStart> tokenNames [ p ] <S2SV_ModEnd> ) ; return ; <S2SV_ModStart> ; return ; } <S2SV_ModEnd> espruino_snprintf ( str ,
<S2SV_ModStart> ) { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) return exit_client ( cptr , sptr , sptr , "Malformed<S2SV_blank>AUTHENTICATE" ) ; if ( <S2SV_ModStart> ) { if ( * parv [ 1 ] == ':' || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) return exit_client ( cptr , sptr , sptr , "Malformed<S2SV_blank>AUTHENTICATE" ) ; if (
<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec -> u1_first_pb_nal_in_pic
<S2SV_ModStart> ) ; if ( <S2SV_ModEnd> i_status != OK )
<S2SV_ModStart> ; } } } <S2SV_ModEnd> } else { dec_slice_struct_t
<S2SV_ModStart> ps_dec -> u1_first_slice_in_stream && ps_dec -> u4_first_slice_in_pic <S2SV_ModEnd> ) { pocstruct_t * <S2SV_ModStart> ( ps_dec -> u4_first_slice_in_pic == 0 <S2SV_ModEnd> ) { i1_is_end_of_poc = <S2SV_ModStart> ( ps_dec -> u4_first_slice_in_pic <S2SV_ModEnd> ) { if ( <S2SV_ModStart> } } else { prev_slice_err = 2 ; num_mb_skipped = ( ps_dec -> u2_frm_ht_in_mbs * ps_dec -> u2_frm_wd_in_mbs ) - ps_dec -> u2_total_mbs_coded ; ps_cur_poc = & s_tmp_poc ; } } else { if ( ( u2_first_mb_in_slice << u1_mbaff ) > ps_dec -> u2_total_mbs_coded ) <S2SV_ModEnd> { prev_slice_err = 2 <S2SV_ModStart> 2 ; num_mb_skipped = <S2SV_ModEnd> ( u2_first_mb_in_slice << u1_mbaff <S2SV_ModStart> u2_first_mb_in_slice << u1_mbaff ) - ps_dec -> u2_total_mbs_coded ; ps_cur_poc = & s_tmp_poc ; } else if ( <S2SV_ModEnd> ( u2_first_mb_in_slice << u1_mbaff <S2SV_ModStart> u2_first_mb_in_slice << u1_mbaff ) <S2SV_ModEnd> < ps_dec -> u2_total_mbs_coded <S2SV_ModStart> ( ps_dec -> u4_first_slice_in_pic <S2SV_ModEnd> ) { ret = <S2SV_ModStart> ( ps_dec -> u4_first_slice_in_pic <S2SV_ModEnd> ) { if ( <S2SV_ModStart> ) { ps_dec -> <S2SV_ModEnd> u1_first_slice_in_stream = 0 ;
<S2SV_ModStart> ps_dec -> pu4_wts_ofsts_mat ; ps_dec -> u4_first_slice_in_pic = 0 ;
<S2SV_ModStart> -> u4_first_slice_in_pic = 2 ; ps_dec -> u1_first_pb_nal_in_pic = 1
<S2SV_ModStart> ps_cur_slice ; WORD32 ret <S2SV_ModEnd> ; ps_dec -> u2_mbx
<S2SV_ModStart> ( buflen , buf_size - 8
<S2SV_ModStart> return IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED ; } if ( ( u2_pic_wd << ps_seq -> u1_mb_aff_flag ) > H264_MAX_FRAME_WIDTH ) { return IVD_STREAM_WIDTH_HEIGHT_NOT_SUPPORTED ; }
<S2SV_ModStart> , u1_level_idc , u1_seq_parameter_set_id , u1_mb_aff_flag = 0 <S2SV_ModStart> ( ! u1_frm ) u1_mb_aff_flag = ih264d_get_bit_h264 ( ps_bitstrm ) ; if ( ( ps_dec -> i4_header_decoded & 1 ) && ( ps_seq -> u1_mb_aff_flag != u1_mb_aff_flag ) ) { ps_dec -> u1_res_changed = 1 ; return IVD_RES_CHANGED ; } if ( ! u1_frm ) <S2SV_ModStart> ps_seq -> u1_mb_aff_flag = u1_mb_aff_flag <S2SV_ModEnd> ; COPYTHECONTEXT ( "SPS:<S2SV_blank>mb_adaptive_frame_field_flag"
<S2SV_ModStart> = - 1 ; <S2SV_ModEnd> ps_dec -> u4_slice_start_code_found = <S2SV_ModStart> ( ps_dec ) ; <S2SV_ModEnd> } if ( ps_dec <S2SV_ModStart> 0 ; } } if ( ( TOP_FIELD_ONLY | BOT_FIELD_ONLY ) == ps_dec -> u1_top_bottom_decoded ) { ps_dec -> u1_top_bottom_decoded = 0 ; } if ( ps_dec -> u4_pic_buf_got == 1 ) { if ( 1 == ps_dec -> u1_last_pic_not_decoded ) { ret = ih264d_end_of_pic_dispbuf_mgr ( ps_dec ) ; if ( ret != OK ) return ret ; ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret != OK ) return ret ; } else { ret = ih264d_end_of_pic ( ps_dec ) ; if ( ret != OK ) return ret ; } }
<S2SV_ModStart> ; WORD32 ret ; UNUSED ( u1_is_idr_slice ) ; <S2SV_ModStart> u2_frame_num = u2_frame_num ; <S2SV_ModEnd> { WORD32 i ,
<S2SV_ModStart> ( dec_struct_t * ps_dec <S2SV_ModEnd> ) { dec_slice_params_t * <S2SV_ModStart> ps_cur_slice ; WORD32 ret <S2SV_ModEnd> ; { dec_err_status_t * <S2SV_ModStart> ) return ret ; <S2SV_ModEnd> H264_MUTEX_UNLOCK ( & ps_dec
<S2SV_ModStart> ; if ( ! ps_dec -> u1_first_slice_in_stream && ( ps_dec -> u4_first_slice_in_pic == 2 ) ) { pocstruct_t * ps_prev_poc = & ps_dec -> s_prev_pic_poc ; pocstruct_t * ps_cur_poc = & ps_dec -> s_cur_pic_poc ; ps_dec -> u2_mbx = 0xffff ; ps_dec -> u2_mby = 0 ; if ( ( 0 == u1_is_idr_slice ) && ps_cur_slice -> u1_nal_ref_idc ) ps_dec -> u2_prev_ref_frame_num = ps_cur_slice -> u2_frame_num ; if ( u1_is_idr_slice || ps_cur_slice -> u1_mmco_equalto5 ) ps_dec -> u2_prev_ref_frame_num = 0 ; if ( ps_dec -> ps_cur_sps -> u1_gaps_in_frame_num_value_allowed_flag ) { ih264d_decode_gaps_in_frame_num ( ps_dec , u2_frame_num ) ; } ps_prev_poc -> i4_prev_frame_num_ofst = ps_cur_poc -> i4_prev_frame_num_ofst ; ps_prev_poc -> u2_frame_num = ps_cur_poc -> u2_frame_num ; ps_prev_poc -> u1_mmco_equalto5 = ps_cur_slice -> u1_mmco_equalto5 ; if ( ps_cur_slice -> u1_nal_ref_idc ) { ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc -> i4_delta_pic_order_cnt_bottom = ps_cur_poc -> i4_delta_pic_order_cnt_bottom ; ps_prev_poc -> i4_delta_pic_order_cnt [ 0 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] ; ps_prev_poc -> i4_delta_pic_order_cnt [ 1 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] ; ps_prev_poc -> u1_bot_field = ps_cur_poc -> u1_bot_field ; } ps_dec -> u2_total_mbs_coded = 0 ; } if ( ! <S2SV_ModStart> , u1_bottom_field_flag ) ; if ( i1_is_end_of_poc ) { ps_dec -> u1_first_slice_in_stream = 0 ; return ERROR_INCOMPLETE_FRAME ; } <S2SV_ModStart> u1_slice_header_done = 0 ; <S2SV_ModEnd> if ( u1_field_pic_flag )
<S2SV_ModStart> ) ; } u1_num_mbs <S2SV_ModEnd> ++ ; } u1_num_mbs_next <S2SV_ModStart> u1_end_of_row ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ;
<S2SV_ModStart> } u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbs_next = i2_pic_wdin_mbs - <S2SV_ModStart> u1_end_of_row ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ;
<S2SV_ModStart> ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> <S2SV_ModStart> ; u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; ps_parse_mb_data <S2SV_ModStart> u1_end_of_row ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ;
<S2SV_ModStart> } u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; ps_parse_mb_data <S2SV_ModStart> u1_end_of_row ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ;
<S2SV_ModStart> ; u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ; ps_parse_mb_data <S2SV_ModStart> u1_end_of_row ) ; } ps_dec -> u2_total_mbs_coded += u1_num_mbs ;
<S2SV_ModStart> * pv_api_op ) { ih264d_create_ip_t * ps_create_ip ; <S2SV_ModStart> ps_create_op ; WORD32 ret ; ps_create_ip = ( ih264d_create_ip_t * ) pv_api_ip <S2SV_ModStart> u4_error_code = 0 ; dec_hdl = NULL ; <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> IV_FAIL == ret ) <S2SV_ModStart> IV_FAIL == ret ) { if ( dec_hdl ) { if ( dec_hdl -> pv_codec_handle <S2SV_ModEnd> ) { ih264d_free_static_bufs ( <S2SV_ModStart> ( dec_hdl ) ; } else { void ( * pf_aligned_free ) ( void * pv_mem_ctxt , void * pv_buf ) ; void * pv_mem_ctxt ; pf_aligned_free = ps_create_ip -> s_ivd_create_ip_t . pf_aligned_free ; pv_mem_ctxt = ps_create_ip -> s_ivd_create_ip_t . pv_mem_ctxt ; pf_aligned_free ( pv_mem_ctxt , dec_hdl ) ; } }
<S2SV_ModStart> ps_dec -> ps_cur_pps ; <S2SV_ModEnd> i4_frame_gaps = 0 ;
<S2SV_ModStart> dpb_commands_t * ps_dpb_cmds = & ( ps_dec -> s_dpb_cmds_scratch ) <S2SV_ModEnd> ; dec_slice_params_t * ps_slice
<S2SV_ModStart> ) return ret ; if ( u1_nal_ref_idc != 0 ) { if ( ! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) { memcpy ( ( void * ) ps_dec -> ps_dpb_cmds , ( void * ) ( & ( ps_dec -> s_dpb_cmds_scratch ) ) , sizeof ( dpb_commands_t ) ) ; } }
<S2SV_ModStart> prev_slice_err = 2 ; if ( ps_dec -> u4_first_slice_in_pic && ( ps_dec -> u2_total_mbs_coded == 0 ) ) prev_slice_err = 1 ;
<S2SV_ModStart> ret == ERROR_UNAVAIL_MVBUF_T ) || ( ret == ERROR_INV_SPS_PPS_T ) ) { ps_dec -> u4_slice_start_code_found = 0 ; <S2SV_ModEnd> break ; } if <S2SV_ModStart> ret == ERROR_UNAVAIL_MVBUF_T ) || ( ret == ERROR_INV_SPS_PPS_T )
<S2SV_ModStart> , ps_cur_mb_info ) ; if ( ! uc_more_data_flag && ( 0 == ( i2_cur_mb_addr & 1 ) ) ) { return ERROR_EOB_FLUSHBITS_T ; }
<S2SV_ModStart> , ps_cur_mb_info ) ; if ( ! uc_more_data_flag && ! i2_mb_skip_run && ( 0 == ( i2_cur_mb_addr & 1 ) ) ) { return ERROR_EOB_FLUSHBITS_T ; }
<S2SV_ModStart> ; } i1_is_end_of_poc = 1 ; <S2SV_ModEnd> ps_dec -> ps_dec_err_status -> <S2SV_ModStart> u1_err_flag &= MASK_REJECT_CUR_PIC ; if ( ps_dec -> u4_first_slice_in_pic != 2 ) { i1_is_end_of_poc = ih264d_is_end_of_pic ( u2_frame_num , u1_nal_ref_idc , & s_tmp_poc , & ps_dec -> s_cur_pic_poc , ps_cur_slice , u1_pic_order_cnt_type , u1_nal_unit_type , u4_idr_pic_id , u1_field_pic_flag , u1_bottom_field_flag ) ; <S2SV_ModEnd> } u1_mbaff = ps_seq
<S2SV_ModStart> != END_OF_MMCO ) { if ( j >= MAX_REF_BUFS ) { ALOGE ( "b/25818142" ) ; android_errorWriteLog ( 0x534e4554 , "25818142" ) ; ps_dpb_cmds -> u1_num_of_commands = 0 ; return - 1 ; }
<S2SV_ModStart> ps_dpb_cmds -> u1_dpb_commands_read ) { i_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( i_temp < 0 ) { return ERROR_DBP_MANAGER_T ; } <S2SV_ModStart> ps_dec -> u4_bitoffset = i_temp ; } <S2SV_ModEnd> else ps_bitstrm -> u4_ofst
<S2SV_ModStart> ps_dpb_cmds -> u1_dpb_commands_read ) { i_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( i_temp < 0 ) { return ERROR_DBP_MANAGER_T ; } <S2SV_ModStart> ps_dec -> u4_bitoffset = i_temp ; } <S2SV_ModEnd> else ps_dec -> ps_bitstrm
<S2SV_ModStart> ps_dpb_cmds -> u1_dpb_commands_read ) { i_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( i_temp < 0 ) { return ERROR_DBP_MANAGER_T ; } <S2SV_ModStart> ps_dec -> u4_bitoffset = i_temp ; } <S2SV_ModEnd> else ps_bitstrm -> u4_ofst
<S2SV_ModStart> 1 ) { return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; } if (
<S2SV_ModStart> & MASK_ERR_PIC_SET_ID ) return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; COPYTHECONTEXT ( "SH:<S2SV_blank>pic_parameter_set_id" <S2SV_ModStart> u1_is_valid ) { return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; } ps_seq = <S2SV_ModStart> ! ps_seq ) return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; if ( FALSE <S2SV_ModStart> -> u1_is_valid ) return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; u2_frame_num = ih264d_get_bits_h264 <S2SV_ModStart> > 65535 ) return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; COPYTHECONTEXT ( "SH:<S2SV_blank><S2SV_blank>" <S2SV_ModStart> -> i4_max_pic_order_cntLsb ) return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; s_tmp_poc . i4_pic_order_cnt_lsb <S2SV_ModStart> > MAX_REDUNDANT_PIC_CNT ) return ERROR_INV_SLICE_HDR_T <S2SV_ModEnd> ; u1_redundant_pic_cnt = u4_temp
<S2SV_ModStart> i1_intra_pred ) ; } i1_intra_pred = CLIP3 ( 0 , 8 , i1_intra_pred ) ; <S2SV_ModStart> i1_intra_pred ) ; } i1_intra_pred = CLIP3 ( 0 , 8 , i1_intra_pred ) ;
<S2SV_ModStart> ; ps_dec -> u4_cur_bs_mb_num = 0 ; ps_dec -> u4_start_recon_deblk
<S2SV_ModStart> ( u1_first_byte ) ; if ( ( ps_dec -> u2_total_mbs_coded != 0 ) && ( u1_nal_unit_type > IDR_SLICE_NAL ) ) { return ERROR_INCOMPLETE_FRAME ; }
<S2SV_ModStart> ; } } } ps_dec -> u4_first_slice_in_pic = 0 ; <S2SV_ModStart> -> u4_mbs_in_slice ) ; if ( ps_dec -> u4_first_slice_in_pic != 0 ) { ps_dec -> ps_parse_cur_slice ++ ; <S2SV_ModStart> -> u2_cur_slice_num ++ ; } <S2SV_ModEnd> ps_dec -> i2_prev_slice_mbx =
<S2SV_ModStart> u4_first_slice_in_pic == 0 ) { <S2SV_ModStart> -> ps_parse_cur_slice ++ ; ps_dec -> u2_cur_slice_num ++ ; } <S2SV_ModStart> ret ; ps_dec -> <S2SV_ModEnd> i2_prev_slice_mbx = ps_dec ->
<S2SV_ModStart> ) ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec -> <S2SV_ModStart> 0 ; ps_dec -> <S2SV_ModEnd> u2_cur_slice_num_dec_thread = 0 ;
<S2SV_ModStart> >> 16 ; WORD16 ai2_level_arr [ 19 ] ; WORD16 * i2_level_arr = & ai2_level_arr [ 3 <S2SV_ModEnd> ] ; tu_sblk4x4_coeff_data_t *
<S2SV_ModStart> >> 16 ; WORD16 ai2_level_arr [ 19 ] ; WORD16 * i2_level_arr = & ai2_level_arr [ 3 <S2SV_ModEnd> ] ; tu_sblk4x4_coeff_data_t *
<S2SV_ModStart> >> 16 ; WORD16 ai2_level_arr [ 7 ] ; WORD16 * i2_level_arr = & ai2_level_arr [ 3 <S2SV_ModEnd> ] ; tu_sblk4x4_coeff_data_t *
<S2SV_ModStart> UWORD32 ) ) ; memset ( ps_dec -> ps_cur_slice , 0 , sizeof ( dec_slice_params_t ) ) ;
<S2SV_ModStart> ps_dec -> ps_cur_slice -> <S2SV_ModEnd> u1_slice_type = P_SLICE ;
<S2SV_ModStart> return 0 ; } ps_dec -> ps_dpb_cmds -> u1_long_term_reference_flag = 0 ;
<S2SV_ModStart> * ) pv_api_op ; { UWORD32 u4_size ; u4_size = ps_dec_op -> u4_size ; memset ( ps_dec_op , 0 , sizeof ( ivd_video_decode_op_t ) ) ; ps_dec_op -> u4_size = u4_size ; }
<S2SV_ModStart> = i ; { ps_dec -> ps_cur_slice -> u1_bottom_field_flag = 0 ; ps_dec -> ps_cur_slice -> u1_field_pic_flag = 0 ; ps_dec -> ps_cur_slice -> u1_slice_type = P_SLICE ; ps_dec -> ps_cur_slice -> u1_nal_ref_idc = 1 ; ps_dec -> ps_cur_slice -> u1_nal_unit_type = 1 ; <S2SV_ModStart> u2_total_mbs_coded << u1_mbaff ; ps_dec -> ps_cur_slice -> i1_slice_alpha_c0_offset = 0 ; ps_dec -> ps_cur_slice -> i1_slice_beta_offset = 0 ;
<S2SV_ModStart> -> pv_parse_tu_coeff_data ; } <S2SV_ModEnd> if ( u1_slice_type ==
<S2SV_ModStart> u4_deblk_mb_y = 0 ; ps_dec -> pu4_wt_ofsts = ps_dec -> pu4_wts_ofsts_mat ;
<S2SV_ModStart> , 128 , size + EXTRA_BS_OFFSET
<S2SV_ModStart> ( 0xff == u4_bits && ! EXCEED_OFFSET ( ps_bitstrm ) <S2SV_ModStart> ( 0xff == u4_bits && ! EXCEED_OFFSET ( ps_bitstrm ) <S2SV_ModStart> ( 0 == ih264d_check_byte_aligned ( ps_bitstrm ) && ! EXCEED_OFFSET
<S2SV_ModStart> ps_prev_poc , * ps_cur_poc ; WORD32 size ; size = sizeof ( pred_info_t ) * 2 * 32 ; memset ( ps_dec -> ps_pred , 0 , size ) ; size = sizeof ( disp_mgr_t ) ; memset ( ps_dec -> pv_disp_buf_mgr , 0 , size ) ; size = sizeof ( buf_mgr_t ) + ithread_get_mutex_lock_size ( ) ; memset ( ps_dec -> pv_pic_buf_mgr , 0 , size ) ; size = sizeof ( dec_err_status_t ) ; memset ( ps_dec -> ps_dec_err_status , 0 , size ) ; size = sizeof ( sei ) ; memset ( ps_dec -> ps_sei , 0 , size ) ; size = sizeof ( dpb_commands_t ) ; memset ( ps_dec -> ps_dpb_cmds , 0 , size ) ; size = sizeof ( dec_bit_stream_t ) ; memset ( ps_dec -> ps_bitstrm , 0 , size ) ; size = sizeof ( dec_slice_params_t ) ; memset ( ps_dec -> ps_cur_slice , 0 , size ) ; size = MAX ( sizeof ( dec_seq_params_t ) , sizeof ( dec_pic_params_t ) ) ; memset ( ps_dec -> pv_scratch_sps_pps , 0 , size ) ; size = sizeof ( ctxt_inc_mb_info_t ) ; memset ( ps_dec -> ps_left_mb_ctxt_info , 0 , size ) ; size = ( sizeof ( neighbouradd_t ) << 2 ) ; memset ( ps_dec -> ps_left_mvpred_addr , 0 , size ) ; size = sizeof ( buf_mgr_t ) + ithread_get_mutex_lock_size ( ) ; memset ( ps_dec -> pv_mv_buf_mgr , 0 , size )
<S2SV_ModStart> ] = 0 ; <S2SV_ModEnd> { ps_dec -> ps_ref_pic_buf_lx
<S2SV_ModStart> ; while ( bin && ( numones <= 16 ) <S2SV_ModStart> } numones -= 1 <S2SV_ModEnd> ; if ( numones
<S2SV_ModStart> - cu_qp_delta_abs ; } if ( cu_qp_delta_abs < MIN_CU_QP_DELTA_ABS ( ps_sps -> i1_bit_depth_luma_minus8 ) || cu_qp_delta_abs > MAX_CU_QP_DELTA_ABS ( ps_sps -> i1_bit_depth_luma_minus8 ) ) { return IHEVCD_INVALID_PARAMETER ; }
<S2SV_ModStart> value + 1 ; if ( ps_sps -> ai1_sps_max_dec_pic_buffering [ i ] > MAX_DPB_SIZE ) { return IHEVCD_INVALID_PARAMETER ; } <S2SV_ModStart> ] = value ; if ( ps_sps -> ai1_sps_max_num_reorder_pics [ i ] > ps_sps -> ai1_sps_max_dec_pic_buffering [ i ] ) { return IHEVCD_INVALID_PARAMETER ; }
<S2SV_ModStart> i1_tiles_enabled_flag = value ; if ( ( ps_pps -> i1_tiles_enabled_flag ) && ( ps_sps -> i1_log2_ctb_size == 4 ) && ( ( ps_sps -> i2_pic_width_in_luma_samples >= 4096 ) || ( ps_sps -> i2_pic_height_in_luma_samples >= 4096 ) ) ) { return IHEVCD_INVALID_HEADER ; }
<S2SV_ModStart> IHEVCD_SUCCESS ) { WORD32 tu_coeff_data_reset_size ; <S2SV_ModEnd> ps_codec -> s_parse . <S2SV_ModStart> . i4_pic_pu_idx = i4_pic_pu_idx <S2SV_ModEnd> ; tu_coeff_data_reset_size = ( <S2SV_ModStart> * ) pu1_tu_coeff_data ; ihevcd_set_ctb_skip ( ps_codec ) <S2SV_ModEnd> ; ps_codec -> i4_slice_error <S2SV_ModStart> } } else { ihevcd_set_ctb_skip ( ps_codec ) <S2SV_ModEnd> ; } if (
<S2SV_ModStart> * pv_api_op ) { ihevcd_cxa_create_ip_t * ps_create_ip ; <S2SV_ModStart> codec_t * ps_codec ; ps_create_ip = ( ihevcd_cxa_create_ip_t * ) pv_api_ip ; <S2SV_ModStart> u4_error_code = 0 ; ps_codec_obj = NULL ; <S2SV_ModStart> pv_api_op ) ; if <S2SV_ModEnd> ( IV_FAIL == ret <S2SV_ModStart> IV_FAIL == ret ) { if <S2SV_ModEnd> ( NULL != ps_codec_obj <S2SV_ModStart> NULL != ps_codec_obj ) { if ( ps_codec_obj -> pv_codec_handle <S2SV_ModStart> ( ps_codec_obj ) ; } else { void ( * pf_aligned_free ) ( void * pv_mem_ctxt , void * pv_buf ) ; void * pv_mem_ctxt ; pf_aligned_free = ps_create_ip -> s_ivd_create_ip_t . pf_aligned_free ; pv_mem_ctxt = ps_create_ip -> s_ivd_create_ip_t . pv_mem_ctxt ; pf_aligned_free ( pv_mem_ctxt , ps_codec_obj ) ; } }
<S2SV_ModStart> , 1 ) ; if ( ( UWORD8 * ) ps_bitstrm -> pu4_buf > ps_bitstrm -> pu1_buf_max ) { return IHEVCD_INVALID_PARAMETER ; }
<S2SV_ModStart> 0 ; WORD32 slice_address ; WORD32 prev_slice_incomplete_flag = 0 <S2SV_ModStart> -> i4_pic_present ) { prev_slice_incomplete_flag = 1 <S2SV_ModEnd> ; } else { <S2SV_ModStart> ) ) ) ; prev_slice_incomplete_flag = 1 ; ASSERT ( ps_codec -> s_parse . i4_cur_slice_idx == 1 ) <S2SV_ModEnd> ; ps_slice_hdr_prev -> i2_ctb_x <S2SV_ModStart> IHEVCD_IGNORE_SLICE ; } } if ( prev_slice_incomplete_flag ) { ps_codec -> i4_slice_error = 1 ; ps_codec -> s_parse . i4_cur_slice_idx -- ; if ( ps_codec -> s_parse . i4_cur_slice_idx < 0 ) ps_codec -> s_parse . i4_cur_slice_idx = 0 ; }
<S2SV_ModStart> ) { ps_codec -> <S2SV_ModEnd> pu1_inp_bitsbuf += ( nal_ofst
<S2SV_ModStart> value ; WORD32 i , j <S2SV_ModStart> ps_mv_buf ; for ( j = 0 ; j < ps_codec -> i4_max_dpb_size ; j <S2SV_ModEnd> ++ ) { if <S2SV_ModStart> ps_codec -> pv_mv_buf_mgr , j <S2SV_ModEnd> , BUF_MGR_REF ) ;
<S2SV_ModStart> ) { WORD32 i , j <S2SV_ModStart> ps_mv_buf ; for ( j = 0 ; j < ps_codec -> i4_max_dpb_size ; j <S2SV_ModEnd> ++ ) { if <S2SV_ModStart> ps_codec -> pv_mv_buf_mgr , j <S2SV_ModEnd> , BUF_MGR_REF ) ;
<S2SV_ModStart> ; max_dpb_size ++ ; ps_codec -> i4_max_dpb_size = max_dpb_size ;
<S2SV_ModStart> i1_sei_parameters_present_flag = 1 ; if ( ps_parse -> s_sei_params . i4_sei_user_data_cnt >= USER_DATA_MAX ) { for ( i = 0 ; i < u4_payload_size / 4 ; i ++ ) { ihevcd_bits_flush ( ps_bitstrm , 4 * 8 ) ; } ihevcd_bits_flush ( ps_bitstrm , ( u4_payload_size - i * 4 ) * 8 ) ; } else { <S2SV_ModStart> , u4_payload_size ) ; } <S2SV_ModStart> i1_sei_parameters_present_flag = 1 ; if ( ps_parse -> s_sei_params . i4_sei_user_data_cnt >= USER_DATA_MAX ) { for ( i = 0 ; i < u4_payload_size / 4 ; i ++ ) { ihevcd_bits_flush ( ps_bitstrm , 4 * 8 ) ; } ihevcd_bits_flush ( ps_bitstrm , ( u4_payload_size - i * 4 ) * 8 ) ; } else { <S2SV_ModStart> , u4_payload_size ) ; }
<S2SV_ModStart> } } else { ret = <S2SV_ModStart> , ps_slice_hdr ) ; if ( ( WORD32 ) IHEVCD_SUCCESS != ret ) { return ret ; }
<S2SV_ModStart> ) { ps_codec -> s_parse . i4_cur_slice_idx = MAX ( 0 , ( ps_codec -> s_parse . i4_cur_slice_idx - 1 ) ) ; ps_codec ->
<S2SV_ModStart> -> u4_ofst ) ; if ( ps_cabac -> u4_ofst >= ps_cabac -> u4_range ) { return ( ( IHEVCD_ERROR_T ) IHEVCD_FAIL ) ; }
<S2SV_ModStart> ) ) ) { ret = <S2SV_ModStart> 0 ] ) ; if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> } } } { ret = <S2SV_ModStart> 0 ] ) ; if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> ( default_ctxt ) { ret = <S2SV_ModStart> 0 ] ) ; if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } } else { ret = <S2SV_ModEnd> ihevcd_cabac_init ( & ps_codec <S2SV_ModStart> . au1_ctxt_models_sync ) ; if ( ret != ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ps_codec -> i4_slice_error = 1 ; end_of_slice_flag = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ; } <S2SV_ModStart> ! end_of_slice_flag ) ; ps_codec -> i4_slice_error = 0 ;
<S2SV_ModStart> -> i1_tiles_enabled_flag ) { WORD32 wd = ALIGN64 ( ps_codec -> i4_wd ) ; WORD32 ht = ALIGN64 ( ps_codec -> i4_ht ) ; WORD32 max_tile_cols = ( wd + MIN_TILE_WD - 1 ) / MIN_TILE_WD ; WORD32 max_tile_rows = ( ht + MIN_TILE_HT - 1 ) / MIN_TILE_HT ; <S2SV_ModStart> ps_pps -> i1_num_tile_columns > max_tile_cols <S2SV_ModEnd> ) || ( ps_pps <S2SV_ModStart> ps_pps -> i1_num_tile_rows > max_tile_rows <S2SV_ModEnd> ) ) return IHEVCD_INVALID_HEADER
<S2SV_ModStart> u4_bits , u4_sym_len ) lead_zeros = CLZ ( u4_bits ) - 15 ; if ( lead_zeros > 11 ) { return IMPEG2D_MB_DATA_DECODE_ERR ; } <S2SV_ModStart> u4_bits , u4_sym_len ) lead_zeros = CLZ ( u4_bits ) - 15 ; if ( lead_zeros > 11 ) { return IMPEG2D_MB_DATA_DECODE_ERR ; }
<S2SV_ModStart> == 0 ) { if ( ps_dec -> u2_forw_f_code < 1 || ps_dec -> u2_forw_f_code > 7 || ps_dec -> u2_back_f_code < 1 || ps_dec -> u2_back_f_code > 7 ) { return IMPEG2D_UNKNOWN_ERROR ; }
<S2SV_ModStart> 0 ; ps_dec -> u2_forw_f_code = 7 ; ps_dec -> u2_back_f_code = 7 ; ps_dec ->
<S2SV_ModStart> u4_x_offset , u4_y_offset ; WORD32 ret ; <S2SV_ModStart> e_pic_type == B_PIC ) ret = <S2SV_ModStart> ps_dec ) ; else ret = <S2SV_ModStart> impeg2d_dec_p_mb_params ( ps_dec ) ; if ( ret ) return IMPEG2D_MB_TEX_DECODE_ERR
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 <S2SV_ModEnd> impeg2d_dec_p_mb_params ( dec_state_t * <S2SV_ModStart> ps_dec_mb_params -> s_mb_type ; if ( NULL == ps_dec_mb_params -> pf_func_mb_params ) return - 1 ; <S2SV_ModStart> 0 ; } } return 0 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> WORD32 <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( dec_state_t * <S2SV_ModStart> ps_dec_mb_params -> s_mb_type ; if ( NULL == ps_dec_mb_params -> pf_func_mb_params ) return - 1 ; <S2SV_ModStart> ps_dec_mb_params -> s_mb_type ; if ( NULL == ps_dec_mb_params -> pf_func_mb_params ) return - 1 ; <S2SV_ModStart> 0 ; } } return 0 ;
<S2SV_ModStart> ) return IMPEG2D_MB_TEX_DECODE_ERR ; if ( 0 >= ps_dec -> u2_num_mbs_left ) { break ; }
<S2SV_ModStart> >> 0x3 ) ; <S2SV_ModEnd> if ( u4_numCoeffs > <S2SV_ModStart> return IMPEG2D_MB_TEX_DECODE_ERR ; } } IBITS_GET ( u4_buf , u4_buf_nxt , u4_offset , u4_bits , pu4_buf_aligned , u4_sym_len ) <S2SV_ModStart> >> 0x3 ) ; <S2SV_ModEnd> if ( u4_numCoeffs > <S2SV_ModStart> { return IMPEG2D_MB_TEX_DECODE_ERR ; }
<S2SV_ModStart> -> u2_decode_header ) && ( <S2SV_ModStart> ( bytes_remaining > 0 ) && ( 1 == ps_dec_state -> u2_header_done )
<S2SV_ModStart> e_error = IMPEG2D_UNSUPPORTED_DIMENSIONS ; ps_dec -> u2_reinit_max_height = ps_dec -> u2_vertical_size ; ps_dec -> u2_reinit_max_width = ps_dec -> u2_horizontal_size ; return e_error <S2SV_ModEnd> ; } ps_dec ->
<S2SV_ModStart> u4_error_code = e_error ; if ( IMPEG2D_UNSUPPORTED_DIMENSIONS == e_error ) { ps_op -> s_ivd_video_decode_op_t . u4_num_bytes_consumed = 0 ; ps_dec -> u2_header_done = 0 ; ps_op -> s_ivd_video_decode_op_t . u4_pic_ht = ps_dec -> u2_reinit_max_height ; ps_op -> s_ivd_video_decode_op_t . u4_pic_wd = ps_dec -> u2_reinit_max_width ; }
<S2SV_ModStart> ) ; if ( 1 == ps_dec -> i4_num_cores && 0 == ps_dec -> u2_num_mbs_left ) { i4_continue_decode = 0 ; android_errorWriteLog ( 0x534e4554 , "26070014" ) ; } if (
<S2SV_ModStart> ; if ( i4_prev_row < <S2SV_ModEnd> i4_row ) { if <S2SV_ModStart> = i4_row ; } else if ( i4_prev_row > i4_row ) { android_errorWriteLog ( 0x534e4554 , "26070014" ) ; }
<S2SV_ModStart> u2_vertical_size = u2_height ; } else { <S2SV_ModStart> 0 == ps_dec -> i4_pic_count ) { return ( IMPEG2D_ERROR_CODES_T ) IMPEG2D_FRM_HDR_DECODE_ERR ; } else if ( ( u2_width > ps_dec -> u2_create_max_width ) || ( u2_height > ps_dec -> u2_create_max_height ) ) { IMPEG2D_ERROR_CODES_T e_error = IMPEG2D_UNSUPPORTED_DIMENSIONS ; ps_dec -> u2_reinit_max_height = u2_height ; ps_dec -> u2_reinit_max_width = u2_width ; return e_error <S2SV_ModEnd> ; } else if <S2SV_ModStart> else if ( ( ps_dec -> u2_horizontal_size < MIN_WIDTH ) || ( ps_dec -> u2_vertical_size < MIN_HEIGHT ) ) { return IMPEG2D_UNSUPPORTED_DIMENSIONS <S2SV_ModEnd> ; } else { <S2SV_ModStart> u2_horizontal_size ; return e_error ; } if ( ( ps_dec -> u2_horizontal_size < MIN_WIDTH ) || ( ps_dec -> u2_vertical_size < MIN_HEIGHT ) ) { return IMPEG2D_UNSUPPORTED_DIMENSIONS
<S2SV_ModStart> u4_frame_decoded_flag = 0 ; if ( 0 == ps_dec -> u4_frm_buf_stride ) { ps_dec -> u4_frm_buf_stride = ps_dec -> u2_horizontal_size ; }
<S2SV_ModStart> , 4 ) ; if ( ps_dec -> u2_frame_rate_code > MPEG2_MAX_FRAME_RATE_CODE ) { return IMPEG2D_FRM_HDR_DECODE_ERR ; }
<S2SV_ModStart> MB_STUFFING_CODE_LEN ) == MB_STUFFING_CODE && ps_stream -> u4_offset < ps_stream -> u4_max_offset
<S2SV_ModStart> ) IVD_ERROR_NONE == e_error && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset )
<S2SV_ModStart> 1 ) == 1 && ps_stream -> u4_offset < ps_stream -> u4_max_offset
<S2SV_ModStart> ) IVD_ERROR_NONE == e_error && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset )
<S2SV_ModStart> 1 ) == 1 && ps_stream -> u4_offset < ps_stream -> u4_max_offset
<S2SV_ModStart> ) ; while ( ( <S2SV_ModStart> START_CODE_PREFIX_LEN ) != START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset )
<S2SV_ModStart> ) ; while ( ( <S2SV_ModStart> || u4_start_code == USER_DATA_START_CODE ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ) <S2SV_ModStart> START_CODE_PREFIX_LEN ) != START_CODE_PREFIX && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset )
<S2SV_ModStart> ) != u4_start_code_val ) && <S2SV_ModEnd> ( ps_dec -> s_bit_stream <S2SV_ModStart> -> s_bit_stream . u4_offset < <S2SV_ModEnd> ps_dec -> s_bit_stream .
<S2SV_ModStart> -> s_bit_stream . u4_offset < <S2SV_ModEnd> ps_dec -> s_bit_stream .
<S2SV_ModStart> MB_ESCAPE_CODE_LEN ) == MB_ESCAPE_CODE && ps_stream -> u4_offset < ps_stream -> u4_max_offset
<S2SV_ModStart> [ i ] , silk_ADD_SAT16 ( NLSF_Q15 [ i - 1 ] , NDeltaMin_Q15 [ i ] ) <S2SV_ModEnd> ) ; NLSF_Q15 [
<S2SV_ModStart> setjmp = 0 ; ctx -> si . w = 0 ; ctx -> si . h = 0 ;
<S2SV_ModStart> ( si -> h && <S2SV_ModEnd> si -> w ) <S2SV_ModStart> ) ) res = VPX_CODEC_CORRUPT_FRAME ; } else { res = VPX_CODEC_UNSUP_BITSTREAM ; } <S2SV_ModEnd> } return res ;
<S2SV_ModStart> ; uint8_t clear_buffer [ 10 <S2SV_ModEnd> ] ; if ( <S2SV_ModStart> = clear_buffer ; } if ( data_sz < 1 ) return VPX_CODEC_UNSUP_BITSTREAM ; <S2SV_ModStart> VPX_CODEC_UNSUP_BITSTREAM ; if ( vpx_rb_read_bit ( & rb ) ) { if ( profile > 2 && data_sz < 2 ) return VPX_CODEC_UNSUP_BITSTREAM ; <S2SV_ModEnd> vpx_rb_read_literal ( & rb <S2SV_ModStart> } if ( data_sz < 10 <S2SV_ModEnd> ) return VPX_CODEC_UNSUP_BITSTREAM ;
<S2SV_ModStart> ; break ; } w = d_w ; h = d_h ; s = ( fmt & VPX_IMG_FMT_PLANAR ) ? w : bps * w / 8 ; s = ( s + stride_align - 1 ) & ~ ( stride_align - 1 ) ; stride_in_bytes = ( fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? s * 2 : s ; if ( ! img ) { img = ( vpx_image_t * ) calloc ( 1 , sizeof ( vpx_image_t ) ) ; if ( ! img ) goto fail ; img -> self_allocd = 1 ; } else { memset ( img , 0 , sizeof ( vpx_image_t ) ) ; } img -> img_data = img_data ; if ( ! img_data ) { uint64_t alloc_size ; <S2SV_ModStart> 2 : s ; <S2SV_ModEnd> alloc_size = ( fmt
<S2SV_ModStart> vpx_codec_iface_name ( decoder -> codec_interface <S2SV_ModEnd> ( ) ) ) <S2SV_ModStart> codec , decoder -> codec_interface <S2SV_ModEnd> ( ) , NULL
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> vpx_codec_iface_name ( decoder -> codec_interface <S2SV_ModEnd> ( ) ) ) <S2SV_ModStart> codec , decoder -> codec_interface <S2SV_ModEnd> ( ) , NULL
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> vpx_codec_iface_name ( decoder -> codec_interface <S2SV_ModEnd> ( ) ) ) <S2SV_ModStart> codec , decoder -> codec_interface <S2SV_ModEnd> ( ) , NULL
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> , target_width , target_height ; exec_name = argv [ 0 ] <S2SV_ModStart> ) ; usage ( <S2SV_ModEnd> ) ; return 1 <S2SV_ModStart> ) ; usage ( <S2SV_ModEnd> ) ; return 1 <S2SV_ModStart> ) ; usage ( <S2SV_ModEnd> ) ; return 1 <S2SV_ModStart> ) ; usage ( <S2SV_ModEnd> ) ; return 1 <S2SV_ModStart> ) ; usage ( <S2SV_ModEnd> ) ; return 1
<S2SV_ModStart> static void usage ( <S2SV_ModEnd> ) { printf ( <S2SV_ModStart> printf ( "%s<S2SV_blank><input_yuv><S2SV_blank><width>x<height><S2SV_blank><target_width>x<target_height><S2SV_blank>" , exec_name <S2SV_ModEnd> ) ; printf (
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame ( vpx_codec_ctx_t * <S2SV_ModStart> * writer ) { int got_pkts = 0 ; <S2SV_ModStart> != NULL ) { got_pkts = 1 ; <S2SV_ModStart> ) ; } } return got_pkts ;
<S2SV_ModStart> NULL ; vpx_codec_ctx_t codec ; vpx_codec_enc_cfg_t cfg <S2SV_ModEnd> ; int frame_count = <S2SV_ModStart> 0 ; vpx_image_t raw <S2SV_ModEnd> ; vpx_codec_err_t res ; <S2SV_ModStart> res ; VpxVideoInfo info <S2SV_ModEnd> ; VpxVideoWriter * writer <S2SV_ModStart> ( "Invalid<S2SV_blank>number<S2SV_blank>of<S2SV_blank>arguments" ) ; memset ( & info , 0 , sizeof ( info ) ) ; <S2SV_ModStart> ) ; if ( encoder == NULL ) { die ( "Unsupported<S2SV_blank>codec." ) ; } assert ( encoder != NULL <S2SV_ModEnd> ) ; info . <S2SV_ModStart> vpx_codec_iface_name ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) ) <S2SV_ModStart> vpx_codec_enc_config_default ( encoder -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> codec , encoder -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> writer ) ; } while ( <S2SV_ModStart> 1 , writer ) ) { } <S2SV_ModEnd> printf ( "\\n" )
<S2SV_ModStart> vpx_active_map_t map = { 0 , 0 ,
<S2SV_ModStart> i ; vpx_roi_map_t roi ; memset ( & roi , 0 , sizeof ( roi ) ) <S2SV_ModEnd> ; roi . rows
<S2SV_ModStart> vpx_active_map_t map = { 0 , 0 ,
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> vpx_codec_iface_name ( decoder -> codec_interface <S2SV_ModEnd> ( ) ) ) <S2SV_ModStart> codec , decoder -> codec_interface <S2SV_ModEnd> ( ) , NULL
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame ( vpx_codec_ctx_t * <S2SV_ModStart> * writer ) { int got_pkts = 0 ; <S2SV_ModStart> != NULL ) { got_pkts = 1 ; <S2SV_ModStart> ) ; } } return got_pkts ;
<S2SV_ModStart> vpx_codec_iface_name ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) ) <S2SV_ModStart> vpx_codec_enc_config_default ( encoder -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> codec , encoder -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> writer ) ; } while ( <S2SV_ModStart> 0 , writer ) ) { }
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame ( vpx_codec_ctx_t * <S2SV_ModStart> * writer ) { int got_pkts = 0 ; <S2SV_ModStart> != NULL ) { got_pkts = 1 ; <S2SV_ModStart> ) ; } } return got_pkts ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> get_frame_stats ( vpx_codec_ctx_t * <S2SV_ModStart> * stats ) { int got_pkts = 0 ; <S2SV_ModStart> != NULL ) { got_pkts = 1 ; <S2SV_ModStart> pkt_size ; } } return got_pkts ;
<S2SV_ModStart> infile = NULL ; int w , h <S2SV_ModEnd> ; vpx_codec_ctx_t codec ; <S2SV_ModStart> res ; vpx_fixed_buf_t stats <S2SV_ModEnd> ; const VpxInterface * <S2SV_ModStart> * encoder = NULL <S2SV_ModEnd> ; const int fps <S2SV_ModStart> ( "Unsupported<S2SV_blank>codec." ) ; w <S2SV_ModEnd> = strtol ( width_arg <S2SV_ModStart> , 0 ) ; h <S2SV_ModEnd> = strtol ( height_arg <S2SV_ModStart> ) ; if ( w <= 0 || h <= 0 || ( w <S2SV_ModEnd> % 2 ) != <S2SV_ModStart> ) != 0 || ( h <S2SV_ModEnd> % 2 ) != <S2SV_ModStart> ) != 0 ) <S2SV_ModEnd> die ( "Invalid<S2SV_blank>frame<S2SV_blank>size:<S2SV_blank>%dx%d" , <S2SV_ModStart> die ( "Invalid<S2SV_blank>frame<S2SV_blank>size:<S2SV_blank>%dx%d" , w , h ) ; <S2SV_ModEnd> if ( ! vpx_img_alloc <S2SV_ModStart> raw , VPX_IMG_FMT_I420 , w , h <S2SV_ModEnd> , 1 ) ) <S2SV_ModStart> , 1 ) ) <S2SV_ModEnd> die ( "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>image" , <S2SV_ModStart> die ( "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>image" , w , h ) ; printf ( "Using<S2SV_blank>%s\\n" , vpx_codec_iface_name ( encoder -> codec_interface ( ) ) ) ; res = vpx_codec_enc_config_default ( encoder -> codec_interface ( ) , & cfg , 0 ) ; if ( res ) die_codec ( & codec , "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>default<S2SV_blank>codec<S2SV_blank>config." ) ; cfg . g_w = w ; cfg . g_h = h ; cfg . g_timebase . num = 1 ; cfg . g_timebase . den = fps ; cfg . rc_target_bitrate = bitrate ; if ( ! ( infile = fopen ( infile_arg , "rb" ) ) ) die ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading" , infile_arg ) ; cfg . g_pass = VPX_RC_FIRST_PASS ; stats = pass0 ( & raw , infile , encoder , & cfg ) ; rewind ( infile ) ; cfg . g_pass = VPX_RC_LAST_PASS ; cfg . rc_twopass_stats_in = stats ; pass1 ( & raw , infile , outfile_arg , encoder , & cfg ) ; free ( stats . buf ) ; vpx_img_free ( & raw ) ; fclose ( infile <S2SV_ModEnd> ) ; return EXIT_SUCCESS
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> [ NUM_ENCODERS ] ; FILE * downsampled_input [ NUM_ENCODERS - 1 ] ; char filename [ 50 ] ; <S2SV_ModStart> [ NUM_ENCODERS ] ; int <S2SV_ModEnd> frame_cnt = 0 ; <S2SV_ModStart> long height ; int length_frame ; int <S2SV_ModStart> = 0 ; int layer_id = 0 ; int layer_flags [ VPX_TS_MAX_PERIODICITY * NUM_ENCODERS ] = { 0 } ; int flag_periodicity ; int <S2SV_ModStart> show_psnr = 0 ; int key_frame_insert = 0 ; <S2SV_ModStart> = { 0 } ; double cx_time = 0 ; struct timeval tv1 , tv2 , difftv <S2SV_ModStart> 1 } } ; unsigned int num_temporal_layers [ NUM_ENCODERS ] = { 3 , 3 , 3 } ; <S2SV_ModStart> ( argc != ( 7 + 3 * <S2SV_ModEnd> NUM_ENCODERS ) ) die <S2SV_ModStart> ) ) die ( "Usage:<S2SV_blank>%s<S2SV_blank><width><S2SV_blank><height><S2SV_blank><frame_rate><S2SV_blank><S2SV_blank><infile><S2SV_blank><outfile(s)><S2SV_blank>" "<rate_encoder(s)><S2SV_blank><temporal_layer(s)><S2SV_blank><key_frame_insert><S2SV_blank><output<S2SV_blank>psnr?><S2SV_blank>\\n" <S2SV_ModEnd> , argv [ 0 <S2SV_ModStart> ( argv [ 2 ] , NULL , 0 ) ; framerate = strtol ( argv [ 3 <S2SV_ModStart> fopen ( argv [ 4 <S2SV_ModEnd> ] , "rb" ) <S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>%s<S2SV_blank>for<S2SV_blank>reading" , argv [ 4 <S2SV_ModEnd> ] ) ; for <S2SV_ModStart> argv [ i + 5 <S2SV_ModEnd> ] , "wb" ) <S2SV_ModStart> ] ) ; } for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { target_bitrate [ i ] <S2SV_ModEnd> = strtol ( argv <S2SV_ModStart> argv [ NUM_ENCODERS + 5 + i <S2SV_ModEnd> ] , NULL , <S2SV_ModStart> , 0 ) ; } <S2SV_ModStart> i ++ ) { num_temporal_layers [ i ] = strtol ( argv [ 2 * NUM_ENCODERS + 5 + i ] , NULL , 0 ) ; if ( num_temporal_layers [ i ] < 1 || num_temporal_layers [ i ] > 3 ) die ( "Invalid<S2SV_blank>temporal<S2SV_blank>layers:<S2SV_blank>%d,<S2SV_blank>Must<S2SV_blank>be<S2SV_blank>1,<S2SV_blank>2,<S2SV_blank>or<S2SV_blank>3.<S2SV_blank>\\n" , num_temporal_layers ) ; } for ( i = 0 ; i < NUM_ENCODERS - 1 ; i ++ ) { if ( sprintf ( filename , "ds%d.yuv" , NUM_ENCODERS - i ) < 0 ) { <S2SV_ModEnd> return EXIT_FAILURE ; } <S2SV_ModStart> return EXIT_FAILURE ; } downsampled_input [ i ] = fopen ( filename , "wb" ) ; } key_frame_insert = strtol ( argv [ 3 * NUM_ENCODERS + 5 ] , NULL , 0 ) ; show_psnr = strtol ( argv [ 3 * NUM_ENCODERS + 6 ] , NULL , 0 ) ; for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { res [ i ] = vpx_codec_enc_config_default ( interface , & cfg [ i ] , 0 ) ; if ( res [ i ] ) { printf ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>config:<S2SV_blank>%s\\n" , vpx_codec_err_to_string ( res [ i ] ) ) ; return EXIT_FAILURE ; } <S2SV_ModStart> [ 0 ] . rc_dropframe_thresh = 0 <S2SV_ModEnd> ; cfg [ 0 <S2SV_ModStart> ] . rc_min_quantizer = 2 <S2SV_ModEnd> ; cfg [ 0 <S2SV_ModStart> ] . rc_undershoot_pct = 100 <S2SV_ModEnd> ; cfg [ 0 <S2SV_ModStart> ] . rc_overshoot_pct = 15 <S2SV_ModEnd> ; cfg [ 0 <S2SV_ModStart> ( vpx_codec_enc_cfg_t ) ) <S2SV_ModEnd> ; cfg [ i <S2SV_ModStart> g_h ++ ; } cfg [ 0 ] . g_threads = 2 ; cfg [ 1 ] . g_threads = 1 ; cfg [ 2 ] . g_threads = 1 ; <S2SV_ModStart> , 0 ) ; for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { set_temporal_layer_pattern ( num_temporal_layers [ i ] , & cfg [ i ] , cfg [ i ] . rc_target_bitrate , & layer_flags [ i * VPX_TS_MAX_PERIODICITY ] ) ; } <S2SV_ModStart> 6 ; if ( i == NUM_ENCODERS - 1 ) speed = - 4 ; if ( <S2SV_ModStart> i ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>cpu_used" ) ; } for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_STATIC_THRESHOLD , 1 ) ) die_codec ( & codec [ i ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold" ) ; } if ( vpx_codec_control ( & codec [ 0 ] , VP8E_SET_NOISE_SENSITIVITY , 1 ) ) die_codec ( & codec [ 0 ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>noise_sensitivity" ) ; for ( i = 1 ; i < NUM_ENCODERS ; i ++ ) { if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_NOISE_SENSITIVITY , 0 ) ) die_codec ( & codec [ i ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>noise_sensitivity" ) ; } for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { if ( vpx_codec_control ( & codec [ i ] , VP8E_SET_TOKEN_PARTITIONS , 1 ) ) die_codec ( & codec [ i ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold" <S2SV_ModStart> ) { unsigned int max_intra_size_pct = ( int ) ( ( ( double ) cfg [ 0 ] . rc_buf_optimal_sz * 0.5 ) * framerate / 10 ) <S2SV_ModEnd> ; if ( vpx_codec_control <S2SV_ModStart> [ i ] , VP8E_SET_MAX_INTRA_BITRATE_PCT , max_intra_size_pct <S2SV_ModEnd> ) ) die_codec ( <S2SV_ModStart> i ] , "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>static<S2SV_blank>threshold" <S2SV_ModEnd> ) ; } frame_avail <S2SV_ModStart> , 1 ) ; length_frame = cfg [ i ] . g_w * cfg [ i ] . g_h * 3 / 2 ; if ( fwrite ( raw [ i ] . planes [ 0 ] , 1 , length_frame , downsampled_input [ NUM_ENCODERS - i - 1 ] ) != length_frame ) { return EXIT_FAILURE ; } } } for ( i = 0 ; i < NUM_ENCODERS ; i ++ ) { layer_id = cfg [ i ] . ts_layer_id [ frame_cnt % cfg [ i ] . ts_periodicity ] ; flags = 0 ; flag_periodicity = periodicity_to_num_layers [ num_temporal_layers [ i ] - 1 ] ; flags = layer_flags [ i * VPX_TS_MAX_PERIODICITY + frame_cnt % flag_periodicity ] ; if ( frame_cnt == 0 ) { flags |= VPX_EFLAG_FORCE_KF ; } if ( frame_cnt > 0 && frame_cnt == key_frame_insert ) { flags = VPX_EFLAG_FORCE_KF ; } vpx_codec_control ( & codec [ i ] , VP8E_SET_FRAME_FLAGS , flags ) ; vpx_codec_control ( & codec [ i ] , VP8E_SET_TEMPORAL_LAYER_ID , layer_id ) ; } gettimeofday ( & tv1 , NULL ) ; <S2SV_ModEnd> if ( vpx_codec_encode ( <S2SV_ModStart> frame_cnt , 1 , 0 <S2SV_ModEnd> , arg_deadline ) ) <S2SV_ModStart> , arg_deadline ) ) { <S2SV_ModStart> 0 ] , "Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame" ) ; } gettimeofday ( & tv2 , NULL ) ; timersub ( & tv2 , & tv1 , & difftv ) ; cx_time += ( double ) ( difftv . tv_sec * 1000000 + difftv . tv_usec <S2SV_ModStart> ) ? "K" : "" <S2SV_ModEnd> ) ; fflush ( <S2SV_ModStart> } printf ( "\\n" ) ; printf ( "FPS<S2SV_blank>for<S2SV_blank>encoding<S2SV_blank>%d<S2SV_blank>%f<S2SV_blank>%f<S2SV_blank>\\n" , frame_cnt , ( float ) cx_time / 1000000 , 1000000 * ( double ) frame_cnt / ( double ) cx_time
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame ( vpx_codec_ctx_t * <S2SV_ModStart> * writer ) { int got_pkts = 0 ; <S2SV_ModStart> != NULL ) { got_pkts = 1 ; <S2SV_ModStart> ) ; } } return got_pkts ;
<S2SV_ModStart> vpx_codec_iface_name ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) ) <S2SV_ModStart> vpx_codec_enc_config_default ( encoder -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> codec , encoder -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> writer ) ; } while ( <S2SV_ModStart> 1 , writer ) ) { } <S2SV_ModEnd> printf ( "\\n" )
<S2SV_ModStart> <S2SV_null> void usage_exit ( void
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> rc_buf_initial_sz ) return ; if ( ! cfg -> rc_target_bitrate ) return ;
<S2SV_ModStart> shortread = 0 ; const int bytespp = ( yuv_frame -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ; <S2SV_ModStart> const int w = vpx_img_plane_width ( yuv_frame , plane <S2SV_ModEnd> ) ; const int <S2SV_ModStart> const int h = vpx_img_plane_height ( yuv_frame , plane <S2SV_ModEnd> ) ; int r <S2SV_ModStart> size_t needed = w * bytespp
<S2SV_ModStart> img , plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ) <S2SV_ModStart> , file ) != ( size_t )
<S2SV_ModStart> img , plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 )
<S2SV_ModStart> post_proc_buffer_int_used = 0 ; memset <S2SV_ModEnd> ( & oci -> <S2SV_ModStart> postproc_state ) ) ; memset <S2SV_ModEnd> ( oci -> post_proc_buffer
<S2SV_ModStart> clamp_type = RECON_CLAMP_REQUIRED ; memset <S2SV_ModEnd> ( oci -> ref_frame_sign_bias
<S2SV_ModStart> d29u8 , d30u8 ; uint8x16_t q1u8 , q2u8 ; uint16x8_t q1u16 , q2u16 ; uint16x8_t q7u16 , q8u16 , q9u16 ; uint64x2_t q4u64 , q5u64 ; uint64x1_t d12u64 ; uint32x2x2_t d0u32x2 , d1u32x2 , d2u32x2 , d3u32x2 ; if ( xoffset == 0 ) { uint32x2_t d28u32 = vdup_n_u32 ( 0 ) ; uint32x2_t d29u32 = vdup_n_u32 ( 0 ) ; uint32x2_t d30u32 = vdup_n_u32 ( 0 ) ; <S2SV_ModEnd> d28u32 = vld1_lane_u32 ( <S2SV_ModStart> d0u8 = vdup_n_u8 ( <S2SV_ModEnd> bifilter4_coeff [ xoffset ] <S2SV_ModStart> d1u8 = vdup_n_u8 ( <S2SV_ModEnd> bifilter4_coeff [ xoffset ]
<S2SV_ModStart> d0u8 = vdup_n_u8 ( <S2SV_ModEnd> bifilter4_coeff [ xoffset ] <S2SV_ModStart> d1u8 = vdup_n_u8 ( <S2SV_ModEnd> bifilter4_coeff [ xoffset ]
<S2SV_ModStart> d0u8 = vdup_n_u8 ( <S2SV_ModEnd> bifilter4_coeff [ xoffset ] <S2SV_ModStart> d1u8 = vdup_n_u8 ( <S2SV_ModEnd> bifilter4_coeff [ xoffset ]
<S2SV_ModStart> mvs , "\\n" ) <S2SV_ModEnd> ; fprintf ( mvs <S2SV_ModStart> , "\\n" ) ; <S2SV_ModEnd> fprintf ( mvs ,
<S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( input , 0
<S2SV_ModStart> * pc ) { memcpy <S2SV_ModEnd> ( pc -> fc
<S2SV_ModStart> 1 ] ) { memcpy <S2SV_ModEnd> ( p , vp8_bmode_prob
<S2SV_ModStart> * x ) { memcpy <S2SV_ModEnd> ( x -> fc <S2SV_ModStart> vp8_ymode_prob ) ) ; memcpy <S2SV_ModEnd> ( x -> fc <S2SV_ModStart> vp8_uv_mode_prob ) ) ; memcpy <S2SV_ModEnd> ( x -> fc
<S2SV_ModStart> i ++ ) { memset <S2SV_ModEnd> ( dest_ptr1 , src_ptr1 <S2SV_ModStart> , el ) ; memcpy ( dest_ptr1 + el , src_ptr1 , w ) ; memset <S2SV_ModEnd> ( dest_ptr2 , src_ptr2 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr1 , src_ptr1 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr2 , src_ptr2
<S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q , 0 <S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q , 0
<S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q , 0
<S2SV_ModStart> { actd = ( vpx_variance16x16 <S2SV_ModEnd> ( yd , yd_stride <S2SV_ModStart> ; act = ( vpx_variance16x16 <S2SV_ModEnd> ( y , y_stride <S2SV_ModStart> ; # ifdef USE_SSD vpx_variance16x16 ( y , y_stride , yd , yd_stride , & sse ) ; sad = ( sse + 128 ) >> 8 ; vpx_variance8x8 ( u , uv_stride , ud , uvd_stride , & sse ) ; usad = ( sse + 32 ) >> 6 ; vpx_variance8x8 ( v , uv_stride , vd , uvd_stride , & sse ) ; vsad = ( sse + 32 ) >> 6 ; # else sad = ( vpx_sad16x16 <S2SV_ModEnd> ( y , y_stride <S2SV_ModStart> , yd , yd_stride ) + 128 ) >> 8 ; usad = ( vpx_sad8x8 ( u , uv_stride , ud , uvd_stride ) + 32 ) >> 6 ; vsad = ( vpx_sad8x8 ( v , uv_stride , vd , uvd_stride ) + 32 ) >> 6 ; # endif } else { actd = ( vpx_variance8x8 ( yd , yd_stride , VP8_ZEROS , 0 <S2SV_ModStart> , & sse ) <S2SV_ModEnd> + 32 ) >> <S2SV_ModStart> ) >> 6 ; act = ( vpx_variance8x8 <S2SV_ModEnd> ( y , y_stride <S2SV_ModStart> ; # ifdef USE_SSD vpx_variance8x8 ( y , y_stride , yd , yd_stride , & sse ) ; sad = ( sse + 32 ) >> 6 ; vpx_variance4x4 ( u , uv_stride , ud , uvd_stride , & sse ) ; usad = ( sse + 8 ) >> 4 ; vpx_variance4x4 ( v , uv_stride , vd , uvd_stride , & sse ) ; vsad = ( sse + 8 ) >> 4 ; # else sad = ( vpx_sad8x8 <S2SV_ModEnd> ( y , y_stride <S2SV_ModStart> , yd , yd_stride ) <S2SV_ModEnd> + 32 ) >> <S2SV_ModStart> ; usad = ( vpx_sad4x4 <S2SV_ModEnd> ( u , uv_stride <S2SV_ModStart> , ud , uvd_stride ) <S2SV_ModEnd> + 8 ) >> <S2SV_ModStart> ; vsad = ( vpx_sad4x4 <S2SV_ModEnd> ( v , uv_stride <S2SV_ModStart> , vd , uvd_stride <S2SV_ModEnd> ) + 8 ) <S2SV_ModStart> udp += uvd_stride ) memcpy <S2SV_ModEnd> ( udp , up <S2SV_ModStart> vdp += uvd_stride ) memcpy <S2SV_ModEnd> ( vdp , vp
<S2SV_ModStart> -> uv_stride ) { memcpy <S2SV_ModEnd> ( udp , up <S2SV_ModStart> , 4 ) ; memcpy <S2SV_ModEnd> ( vdp , vp
<S2SV_ModStart> .5 + 256 * gaussian <S2SV_ModEnd> ( sigma , 0
<S2SV_ModStart> low_var_thresh , int flag , int uvfilter ) { int mbr ; <S2SV_ModEnd> double level = 6.0e-05 <S2SV_ModStart> ; int mb_rows = cm -> mb_rows <S2SV_ModEnd> ; int mb_cols = <S2SV_ModStart> ; int mb_cols = cm -> mb_cols <S2SV_ModEnd> ; unsigned char * <S2SV_ModStart> -> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) post <S2SV_ModStart> void ) flag ; memset <S2SV_ModEnd> ( limits , ( <S2SV_ModStart> , 16 ) ; if ( uvfilter == 1 ) { <S2SV_ModStart> uv_width , limits , 8 ) ; } <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> for ( i = 0 ; i < 17 ; i ++ ) s [ i + cols <S2SV_ModEnd> ] = s [
<S2SV_ModStart> for ( i = 0 ; i < 17 ; i ++ ) s [ ( i + rows ) <S2SV_ModEnd> * pitch ] =
<S2SV_ModStart> int i , j ; ( void ) bothclamp
<S2SV_ModStart> r ++ ) { memcpy ( dst , src , 16 ) ; <S2SV_ModEnd> src += src_stride ;
<S2SV_ModStart> r ++ ) { memcpy ( dst , src , 8 ) ; <S2SV_ModEnd> src += src_stride ;
<S2SV_ModStart> r ++ ) { memcpy ( dst , src , 8 ) ; <S2SV_ModEnd> src += src_stride ;
<S2SV_ModStart> i ++ ) { memset <S2SV_ModEnd> ( upred_ptr , expected_udc <S2SV_ModStart> , 8 ) ; memset <S2SV_ModEnd> ( vpred_ptr , expected_vdc <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( upred_ptr , uabove_row <S2SV_ModStart> , 8 ) ; memcpy <S2SV_ModEnd> ( vpred_ptr , vabove_row <S2SV_ModStart> i ++ ) { memset <S2SV_ModEnd> ( upred_ptr , uleft_col <S2SV_ModStart> , 8 ) ; memset <S2SV_ModEnd> ( vpred_ptr , vleft_col
<S2SV_ModStart> r ++ ) { memset <S2SV_ModEnd> ( ypred_ptr , expected_dc <S2SV_ModStart> r ++ ) { memset <S2SV_ModEnd> ( ypred_ptr , yleft_col
<S2SV_ModStart> vp8_rtcd ( ) { <S2SV_ModEnd> once ( setup_rtcd_internal )
<S2SV_ModStart> { int i ; memset <S2SV_ModEnd> ( ybf -> y_buffer <S2SV_ModStart> char ) 129 ; memset <S2SV_ModEnd> ( ybf -> u_buffer <S2SV_ModStart> char ) 129 ; memset <S2SV_ModEnd> ( ybf -> v_buffer
<S2SV_ModStart> * ybf ) { memset <S2SV_ModEnd> ( ybf -> y_buffer <S2SV_ModStart> + 5 ) ; memset <S2SV_ModEnd> ( ybf -> u_buffer <S2SV_ModStart> + 5 ) ; memset <S2SV_ModEnd> ( ybf -> v_buffer
<S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q , 0 <S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q + 16 <S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q , 0 <S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q + 16
<S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q , 0 <S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q + 16 <S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q + 32 <S2SV_ModStart> , stride ) ; memset <S2SV_ModEnd> ( q + 48
<S2SV_ModStart> shift = VP8_BD_VALUE_SIZE - CHAR_BIT <S2SV_ModEnd> - ( count + <S2SV_ModStart> - ( count + CHAR_BIT <S2SV_ModEnd> ) ; size_t bytes_left <S2SV_ModStart> { size_t n = MIN ( sizeof ( decrypted ) , bytes_left ) <S2SV_ModEnd> ; br -> decrypt_cb
<S2SV_ModStart> unsigned int source_sz , vpx_decrypt_cb <S2SV_ModEnd> decrypt_cb , void *
<S2SV_ModStart> = 0 ; # else ( void ) mb_idx ; # <S2SV_ModStart> frame_corrupt_residual = 1 ; memset <S2SV_ModEnd> ( xd -> qcoeff <S2SV_ModStart> corruption_detected = 1 ; memset <S2SV_ModEnd> ( xd -> eobs <S2SV_ModStart> mbmi . mb_skip_coeff ) memset <S2SV_ModEnd> ( xd -> eobs <S2SV_ModStart> , dst_stride ) ; memset <S2SV_ModEnd> ( b -> qcoeff <S2SV_ModStart> -> qcoeff ) ; memset <S2SV_ModEnd> ( b -> qcoeff <S2SV_ModStart> -> qcoeff ) ; memset <S2SV_ModEnd> ( b -> qcoeff
<S2SV_ModStart> pc -> above_context ; memset <S2SV_ModEnd> ( xd -> left_context <S2SV_ModStart> ] + recon_uvoffset ; if ( xd -> mode_info_context -> mbmi . ref_frame >= LAST_FRAME ) { const MV_REFERENCE_FRAME ref = xd -> mode_info_context -> mbmi . ref_frame ; <S2SV_ModStart> y_buffer = ref_buffer [ ref <S2SV_ModEnd> ] [ 0 ] <S2SV_ModStart> u_buffer = ref_buffer [ ref <S2SV_ModEnd> ] [ 1 ] <S2SV_ModStart> v_buffer = ref_buffer [ ref <S2SV_ModEnd> ] [ 2 ] <S2SV_ModStart> ] + recon_uvoffset ; } else { xd -> pre . y_buffer = 0 ; xd -> pre . u_buffer = 0 ; xd -> pre . v_buffer = 0 ; }
<S2SV_ModStart> == KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> fc <S2SV_ModStart> ( pc ) ; memset <S2SV_ModEnd> ( xd -> segment_feature_data <S2SV_ModStart> mb_segement_abs_delta = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> ref_lf_deltas <S2SV_ModStart> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( xd -> mode_lf_deltas
<S2SV_ModStart> = ( int ) MIN ( sizeof ( clear_buffer ) , <S2SV_ModEnd> data_end - data ) <S2SV_ModStart> data_end - data ) <S2SV_ModEnd> ; pbi -> decrypt_cb <S2SV_ModStart> data += 7 ; } else { memcpy <S2SV_ModEnd> ( & xd -> <S2SV_ModStart> YV12_BUFFER_CONFIG ) ) ; memcpy <S2SV_ModEnd> ( & xd -> <S2SV_ModStart> ( bc ) ; memset <S2SV_ModEnd> ( xd -> segment_feature_data <S2SV_ModStart> -> update_mb_segmentation_map ) { memset <S2SV_ModEnd> ( xd -> mb_segment_tree_probs <S2SV_ModStart> == 0 ) { memcpy <S2SV_ModEnd> ( & pc -> <S2SV_ModStart> 0 ; } } memset <S2SV_ModEnd> ( xd -> qcoeff <S2SV_ModStart> ; } # endif memset <S2SV_ModEnd> ( pc -> above_context <S2SV_ModStart> == 0 ) { memcpy <S2SV_ModEnd> ( & pc ->
<S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr2 , src_ptr2 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr2 , src_ptr2 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr2 , src_ptr2
<S2SV_ModStart> i ++ ) { memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; memset <S2SV_ModEnd> ( dest_ptr2 , src_ptr2 <S2SV_ModStart> i ++ ) { memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; memset <S2SV_ModEnd> ( dest_ptr2 , src_ptr2 <S2SV_ModStart> i ++ ) { memset ( dest_ptr1 , src_ptr1 [ 0 ] , Border ) ; memset <S2SV_ModEnd> ( dest_ptr2 , src_ptr2
<S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr1 , src_ptr1 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr1 , src_ptr1 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dest_ptr1 , src_ptr1
<S2SV_ModStart> * mbmi ) { ( void ) mbmi ;
<S2SV_ModStart> -> left_context ) ; memset <S2SV_ModEnd> ( a_ctx , 0 <S2SV_ModStart> - 1 ) ; memset <S2SV_ModEnd> ( l_ctx , 0
<S2SV_ModStart> mb_row , mb_col ; memset <S2SV_ModEnd> ( overlaps , 0
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> ) return NULL ; memset <S2SV_ModEnd> ( pbi , 0 <S2SV_ModStart> NULL ; # else ( void ) oxcf ;
<S2SV_ModStart> ) ; # else ( void ) flags ;
<S2SV_ModStart> int64_t time_stamp ) { <S2SV_ModEnd> VP8_COMMON * cm = <S2SV_ModStart> = - 1 ; ( void ) size ; ( void ) source ; <S2SV_ModStart> ) return retcode ; <S2SV_ModEnd> cm -> new_fb_idx = <S2SV_ModStart> time_stamp ; decode_exit : <S2SV_ModEnd> pbi -> common . <S2SV_ModStart> setjmp = 0 ; vp8_clear_system_state ( ) ;
<S2SV_ModStart> = 0 ; # else ( void ) mb_idx ; # <S2SV_ModStart> frame_corrupt_residual = 1 ; memset <S2SV_ModEnd> ( xd -> qcoeff <S2SV_ModStart> corruption_detected = 1 ; memset <S2SV_ModEnd> ( xd -> eobs <S2SV_ModStart> mbmi . mb_skip_coeff ) memset <S2SV_ModEnd> ( xd -> eobs <S2SV_ModStart> , dst_stride ) ; memset <S2SV_ModEnd> ( b -> qcoeff <S2SV_ModStart> -> qcoeff ) ; memset <S2SV_ModEnd> ( b -> qcoeff <S2SV_ModStart> -> qcoeff ) ; memset <S2SV_ModEnd> ( b -> qcoeff
<S2SV_ModStart> pc -> above_context ; memset <S2SV_ModEnd> ( xd -> left_context <S2SV_ModStart> - 1 ) { memcpy <S2SV_ModEnd> ( ( pbi -> <S2SV_ModStart> , 16 ) ; memcpy <S2SV_ModEnd> ( ( pbi -> <S2SV_ModStart> , 8 ) ; memcpy <S2SV_ModEnd> ( ( pbi ->
<S2SV_ModStart> xd -> mb_segement_abs_delta ; memcpy <S2SV_ModEnd> ( mbd -> segment_feature_data <S2SV_ModStart> segment_feature_data ) ) ; memcpy <S2SV_ModEnd> ( mbd -> ref_lf_deltas <S2SV_ModStart> ref_lf_deltas ) ) ; memcpy <S2SV_ModEnd> ( mbd -> mode_lf_deltas <S2SV_ModStart> [ 0 ] ; memcpy <S2SV_ModEnd> ( mbd -> dequant_y1_dc <S2SV_ModStart> dequant_y1_dc ) ) ; memcpy <S2SV_ModEnd> ( mbd -> dequant_y1 <S2SV_ModStart> dequant_y1 ) ) ; memcpy <S2SV_ModEnd> ( mbd -> dequant_y2 <S2SV_ModStart> dequant_y2 ) ) ; memcpy <S2SV_ModEnd> ( mbd -> dequant_uv
<S2SV_ModStart> ( filter_level ) { memset <S2SV_ModEnd> ( pbi -> mt_yabove_row <S2SV_ModStart> + 5 ) ; memset <S2SV_ModEnd> ( pbi -> mt_uabove_row <S2SV_ModStart> + 5 ) ; memset <S2SV_ModEnd> ( pbi -> mt_vabove_row <S2SV_ModStart> j ++ ) { memset <S2SV_ModEnd> ( pbi -> mt_yabove_row <S2SV_ModStart> , 1 ) ; memset <S2SV_ModEnd> ( pbi -> mt_uabove_row <S2SV_ModStart> , 1 ) ; memset <S2SV_ModEnd> ( pbi -> mt_vabove_row <S2SV_ModStart> j ++ ) { memset <S2SV_ModEnd> ( pbi -> mt_yleft_col <S2SV_ModStart> , 16 ) ; memset <S2SV_ModEnd> ( pbi -> mt_uleft_col <S2SV_ModStart> , 8 ) ; memset <S2SV_ModEnd> ( pbi -> mt_vleft_col
<S2SV_ModStart> <S2SV_null> int vp8_denoiser_filter_neon ( unsigned char * mc_running_avg_y , int mc_running_avg_y_stride , unsigned char * running_avg_y , int running_avg_y_stride , <S2SV_ModEnd> unsigned char * sig <S2SV_ModStart> unsigned char * sig , int sig_stride , unsigned int motion_magnitude , int increase_denoising ) { int shift_inc = ( increase_denoising && motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) ? 1 : 0 ; const uint8x16_t v_level1_adjustment = vmovq_n_u8 ( ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) ? 4 + shift_inc : 3 ) ; const uint8x16_t v_delta_level_1_and_2 = vdupq_n_u8 ( 1 ) ; const uint8x16_t v_delta_level_2_and_3 = vdupq_n_u8 ( 2 ) ; const uint8x16_t v_level1_threshold = vmovq_n_u8 ( 4 + shift_inc ) ; const uint8x16_t v_level2_threshold = vdupq_n_u8 ( 8 ) ; const uint8x16_t v_level3_threshold = vdupq_n_u8 ( 16 ) ; int64x2_t v_sum_diff_total = vdupq_n_s64 ( 0 ) ; int r ; for ( r = 0 ; r <S2SV_ModEnd> < 16 ; ++ <S2SV_ModStart> < 16 ; ++ r ) { const uint8x16_t v_sig = vld1q_u8 ( sig ) ; const uint8x16_t v_mc_running_avg_y = vld1q_u8 ( mc_running_avg_y ) ; const uint8x16_t v_abs_diff = vabdq_u8 ( v_sig , v_mc_running_avg_y ) ; const uint8x16_t v_diff_pos_mask = vcltq_u8 ( v_sig , v_mc_running_avg_y ) ; const uint8x16_t v_diff_neg_mask = vcgtq_u8 ( v_sig , v_mc_running_avg_y ) ; const uint8x16_t v_level1_mask = vcleq_u8 ( v_level1_threshold , v_abs_diff ) ; const uint8x16_t v_level2_mask = vcleq_u8 ( v_level2_threshold , v_abs_diff ) ; const uint8x16_t v_level3_mask = vcleq_u8 ( v_level3_threshold , v_abs_diff ) ; const uint8x16_t v_level2_adjustment = vandq_u8 ( v_level2_mask , v_delta_level_1_and_2 ) ; const uint8x16_t v_level3_adjustment = vandq_u8 ( v_level3_mask , v_delta_level_2_and_3 ) ; const uint8x16_t v_level1and2_adjustment = vaddq_u8 ( v_level1_adjustment , v_level2_adjustment ) ; const uint8x16_t v_level1and2and3_adjustment = vaddq_u8 ( v_level1and2_adjustment , v_level3_adjustment ) ; const uint8x16_t v_abs_adjustment = vbslq_u8 ( v_level1_mask , v_level1and2and3_adjustment , v_abs_diff ) ; const uint8x16_t v_pos_adjustment = vandq_u8 ( v_diff_pos_mask , v_abs_adjustment ) ; const uint8x16_t v_neg_adjustment = vandq_u8 ( v_diff_neg_mask , v_abs_adjustment ) ; uint8x16_t v_running_avg_y = vqaddq_u8 ( v_sig , v_pos_adjustment ) ; v_running_avg_y = vqsubq_u8 ( v_running_avg_y , v_neg_adjustment ) ; vst1q_u8 ( running_avg_y , v_running_avg_y ) ; { const int8x16_t v_sum_diff = vqsubq_s8 ( vreinterpretq_s8_u8 ( v_pos_adjustment ) , vreinterpretq_s8_u8 ( v_neg_adjustment ) ) ; const int16x8_t fe_dc_ba_98_76_54_32_10 = vpaddlq_s8 ( v_sum_diff ) ; const int32x4_t fedc_ba98_7654_3210 = vpaddlq_s16 ( fe_dc_ba_98_76_54_32_10 ) ; const int64x2_t fedcba98_76543210 = vpaddlq_s32 ( fedc_ba98_7654_3210 ) ; v_sum_diff_total = vqaddq_s64 ( v_sum_diff_total , fedcba98_76543210 ) <S2SV_ModEnd> ; } sig += <S2SV_ModStart> += running_avg_y_stride ; } { int64x1_t x = vqadd_s64 ( vget_high_s64 ( v_sum_diff_total ) , vget_low_s64 ( v_sum_diff_total ) ) ; int sum_diff = vget_lane_s32 ( vabs_s32 ( vreinterpret_s32_s64 ( x ) ) , 0 ) ; int sum_diff_thresh = SUM_DIFF_THRESHOLD ; if ( increase_denoising ) sum_diff_thresh = SUM_DIFF_THRESHOLD_HIGH ; if ( sum_diff > sum_diff_thresh ) { int delta = ( ( sum_diff - sum_diff_thresh ) >> 8 ) + 1 ; if ( delta < 4 ) { const uint8x16_t k_delta = vmovq_n_u8 ( delta ) ; sig -= sig_stride * 16 ; mc_running_avg_y -= mc_running_avg_y_stride * 16 ; running_avg_y -= running_avg_y_stride * 16 ; for ( r = 0 ; r < 16 ; ++ r ) { uint8x16_t v_running_avg_y = vld1q_u8 ( running_avg_y ) ; const uint8x16_t v_sig = vld1q_u8 ( sig ) ; const uint8x16_t v_mc_running_avg_y = vld1q_u8 ( mc_running_avg_y ) ; const uint8x16_t v_abs_diff = vabdq_u8 ( v_sig , v_mc_running_avg_y ) ; const uint8x16_t v_diff_pos_mask = vcltq_u8 ( v_sig , v_mc_running_avg_y ) ; const uint8x16_t v_diff_neg_mask = vcgtq_u8 ( v_sig , v_mc_running_avg_y ) ; const uint8x16_t v_abs_adjustment = vminq_u8 ( v_abs_diff , ( k_delta ) ) ; const uint8x16_t v_pos_adjustment = vandq_u8 ( v_diff_pos_mask , v_abs_adjustment ) ; const uint8x16_t v_neg_adjustment = vandq_u8 ( v_diff_neg_mask , v_abs_adjustment ) ; v_running_avg_y = vqsubq_u8 ( v_running_avg_y , v_pos_adjustment ) ; v_running_avg_y = vqaddq_u8 ( v_running_avg_y , v_neg_adjustment ) ; vst1q_u8 ( running_avg_y , v_running_avg_y ) ; { const int8x16_t v_sum_diff = vqsubq_s8 ( vreinterpretq_s8_u8 ( v_neg_adjustment ) , vreinterpretq_s8_u8 ( v_pos_adjustment ) ) ; const int16x8_t fe_dc_ba_98_76_54_32_10 = vpaddlq_s8 ( v_sum_diff ) ; const int32x4_t fedc_ba98_7654_3210 = vpaddlq_s16 ( fe_dc_ba_98_76_54_32_10 ) ; const int64x2_t fedcba98_76543210 = vpaddlq_s32 ( fedc_ba98_7654_3210 ) ; v_sum_diff_total = vqaddq_s64 ( v_sum_diff_total , fedcba98_76543210 ) ; } sig += sig_stride ; mc_running_avg_y += mc_running_avg_y_stride ; running_avg_y += running_avg_y_stride ; } { x = vqadd_s64 ( vget_high_s64 ( v_sum_diff_total ) , vget_low_s64 ( v_sum_diff_total ) ) ; sum_diff = vget_lane_s32 ( vabs_s32 ( vreinterpret_s32_s64 ( x ) ) , 0 ) ; if ( sum_diff > sum_diff_thresh ) { return COPY_BLOCK ; } } } else { return COPY_BLOCK ; } } } running_avg_y -= running_avg_y_stride * 16 ; sig -= sig_stride * 16 ; vp8_copy_mem16x16 ( running_avg_y , running_avg_y_stride , sig <S2SV_ModEnd> , sig_stride ) ;
<S2SV_ModStart> == 0 ) { memcpy <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> i ++ ) { memmove <S2SV_ModEnd> ( dp , cpi <S2SV_ModStart> ; else # endif vp8_pack_tokens <S2SV_ModEnd> ( & cpi ->
<S2SV_ModStart> width , int height , int num_mb_rows , int num_mb_cols , int mode <S2SV_ModStart> assert ( denoiser ) ; denoiser -> num_mb_cols = num_mb_cols <S2SV_ModStart> return 1 ; } memset <S2SV_ModEnd> ( denoiser -> yv12_running_avg <S2SV_ModStart> return 1 ; } memset <S2SV_ModEnd> ( denoiser -> yv12_mc_running_avg <S2SV_ModStart> . frame_size ) ; if ( vp8_yv12_alloc_frame_buffer ( & denoiser -> yv12_last_source , width , height , VP8BORDERINPIXELS ) < 0 ) { vp8_denoiser_free ( denoiser ) ; return 1 ; } memset ( denoiser -> yv12_last_source . buffer_alloc , 0 , denoiser -> yv12_last_source . frame_size ) ; denoiser -> denoise_state = vpx_calloc ( ( num_mb_rows * num_mb_cols ) , 1 ) ; memset ( denoiser -> denoise_state , 0 , ( num_mb_rows * num_mb_cols ) ) ; vp8_denoiser_set_parameters ( denoiser , mode ) ; denoiser -> nmse_source_diff = 0 ; denoiser -> nmse_source_diff_count = 0 ; denoiser -> qp_avg = 0 ; denoiser -> qp_threshold_up = 80 ; denoiser -> qp_threshold_down = 128 ; denoiser -> bitrate_threshold = 400000 ; denoiser -> threshold_aggressive_mode = 80 ; if ( width * height > 1280 * 720 ) { denoiser -> bitrate_threshold = 3000000 ; denoiser -> threshold_aggressive_mode = 200 ; } else if ( width * height > 960 * 540 ) { denoiser -> bitrate_threshold = 1200000 ; denoiser -> threshold_aggressive_mode = 120 ; } else if ( width * height > 640 * 480 ) { denoiser -> bitrate_threshold = 600000 ; denoiser -> threshold_aggressive_mode = 100 ; } return <S2SV_ModEnd> 0 ; } <S2SV_null>
<S2SV_ModStart> recon_yoffset , int recon_uvoffset , loop_filter_info_n * lfi_n , int mb_row , int mb_col , int block_index <S2SV_ModStart> mv_col ; unsigned int motion_threshold ; unsigned int motion_magnitude2 ; unsigned int sse_thresh ; int sse_diff_thresh = 0 ; int apply_spatial_loop_filter = 1 <S2SV_ModEnd> ; MV_REFERENCE_FRAME frame = <S2SV_ModStart> decision = FILTER_BLOCK ; enum vp8_denoiser_decision decision_u = COPY_BLOCK ; enum vp8_denoiser_decision decision_v = COPY_BLOCK ; <S2SV_ModStart> -> mbmi ; int sse_diff = 0 ; const int zero_bias = denoiser -> denoise_pars . denoise_mv_bias ; zero_mv_sse = ( unsigned int ) ( ( int64_t ) zero_mv_sse * zero_bias / 100 ) ; <S2SV_ModStart> row ; if ( ( unsigned int ) ( mv_row * mv_row + mv_col * mv_col ) <= NOISE_MOTION_THRESHOLD ) sse_diff_thresh = ( int ) SSE_DIFF_THRESHOLD ; if ( <S2SV_ModStart> frame == INTRA_FRAME || sse_diff <= sse_diff_thresh ) { x -> denoise_zeromv = 1 ; mbmi -> ref_frame = x -> best_zeromv_reference_frame ; src = & denoiser -> yv12_running_avg [ zero_frame ] ; mbmi -> mode = ZEROMV ; mbmi -> mv . as_int = 0 ; x -> best_sse_inter_mode = ZEROMV ; x -> best_sse_mv . as_int = 0 ; best_sse = zero_mv_sse ; } saved_pre = filter_xd -> pre ; saved_dst = filter_xd -> dst ; filter_xd -> pre . y_buffer = src -> y_buffer + recon_yoffset ; filter_xd -> pre . u_buffer = src -> u_buffer + recon_uvoffset ; filter_xd -> pre . v_buffer = src -> v_buffer + recon_uvoffset ; filter_xd -> dst . y_buffer = dst -> y_buffer + recon_yoffset ; filter_xd -> dst . u_buffer = dst -> u_buffer + recon_uvoffset ; filter_xd -> dst . v_buffer = dst -> v_buffer + recon_uvoffset ; if ( ! x -> skip ) { vp8_build_inter_predictors_mb ( filter_xd ) ; } else { vp8_build_inter16x16_predictors_mb ( filter_xd , filter_xd -> dst . y_buffer , filter_xd -> dst . u_buffer , filter_xd -> dst . v_buffer , filter_xd -> dst . y_stride , filter_xd -> dst . uv_stride ) ; } filter_xd -> pre = saved_pre ; filter_xd -> dst = saved_dst ; * mbmi = saved_mbmi ; } mv_row = x -> best_sse_mv . as_mv . row ; mv_col = x -> best_sse_mv . as_mv . col ; motion_magnitude2 = mv_row * mv_row <S2SV_ModEnd> + mv_col * mv_col <S2SV_ModStart> + mv_col * mv_col ; motion_threshold = denoiser -> denoise_pars . scale_motion_thresh * NOISE_MOTION_THRESHOLD ; if ( x -> is_skin ) motion_threshold = 1 ; if ( motion_magnitude2 < denoiser -> denoise_pars . scale_increase_filter * NOISE_MOTION_THRESHOLD ) x -> increase_denoising = 1 ; sse_thresh = denoiser -> denoise_pars . scale_sse_thresh * SSE_THRESHOLD ; if ( x -> increase_denoising ) sse_thresh = denoiser -> denoise_pars . scale_sse_thresh * SSE_THRESHOLD_HIGH <S2SV_ModEnd> ; if ( best_sse <S2SV_ModStart> if ( best_sse > sse_thresh || motion_magnitude2 > motion_threshold ) <S2SV_ModEnd> decision = COPY_BLOCK ; <S2SV_ModStart> decision = COPY_BLOCK ; <S2SV_ModEnd> if ( decision == <S2SV_ModStart> == FILTER_BLOCK ) { unsigned char * mc_running_avg_y = denoiser -> yv12_mc_running_avg . y_buffer + recon_yoffset ; int mc_avg_y_stride = denoiser -> yv12_mc_running_avg . y_stride ; unsigned char * running_avg_y = denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset ; int avg_y_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_stride ; <S2SV_ModStart> decision = vp8_denoiser_filter ( mc_running_avg_y , mc_avg_y_stride , running_avg_y , avg_y_stride , x -> thismb , 16 , motion_magnitude2 , x -> increase_denoising ) ; denoiser -> denoise_state [ block_index ] = motion_magnitude2 > 0 ? kFilterNonZeroMV : kFilterZeroMV ; if ( denoiser -> denoiser_mode != kDenoiserOnYOnly && motion_magnitude2 == 0 && decision == FILTER_BLOCK ) { unsigned char * mc_running_avg_u = denoiser -> yv12_mc_running_avg . u_buffer + recon_uvoffset ; unsigned char * running_avg_u = denoiser -> yv12_running_avg [ INTRA_FRAME ] . u_buffer + recon_uvoffset ; unsigned char * mc_running_avg_v = denoiser -> yv12_mc_running_avg . v_buffer + recon_uvoffset ; unsigned char * running_avg_v = denoiser -> yv12_running_avg [ INTRA_FRAME ] . v_buffer + recon_uvoffset ; int mc_avg_uv_stride = denoiser -> yv12_mc_running_avg . uv_stride ; int avg_uv_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ; int signal_stride = x -> block [ 16 ] . src_stride ; decision_u = vp8_denoiser_filter_uv ( mc_running_avg_u , mc_avg_uv_stride , running_avg_u , avg_uv_stride , x -> block [ 16 ] . src + * x -> block [ 16 ] . base_src , signal_stride , motion_magnitude2 , 0 ) ; decision_v = vp8_denoiser_filter_uv ( mc_running_avg_v , mc_avg_uv_stride , running_avg_v , avg_uv_stride , x -> block [ 20 ] . src + * x -> block [ 20 ] . base_src , signal_stride , motion_magnitude2 , 0 ) ; } <S2SV_ModEnd> } if ( decision <S2SV_ModStart> == COPY_BLOCK ) { x -> denoise_zeromv = 0 ; <S2SV_ModStart> . y_stride ) ; denoiser -> denoise_state [ block_index ] = kNoFilter ; } if ( denoiser -> denoiser_mode != kDenoiserOnYOnly ) { if ( decision_u == COPY_BLOCK ) { vp8_copy_mem8x8 ( x -> block [ 16 ] . src + * x -> block [ 16 ] . base_src , x -> block [ 16 ] . src_stride , denoiser -> yv12_running_avg [ INTRA_FRAME ] . u_buffer + recon_uvoffset , denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ) ; } if ( decision_v == COPY_BLOCK ) { vp8_copy_mem8x8 ( x -> block [ 20 ] . src + * x -> block [ 20 ] . base_src , x -> block [ 16 ] . src_stride , denoiser -> yv12_running_avg [ INTRA_FRAME ] . v_buffer + recon_uvoffset , denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ) ; } } if ( apply_spatial_loop_filter ) { loop_filter_info lfi ; int apply_filter_col = 0 ; int apply_filter_row = 0 ; int apply_filter = 0 ; int y_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_stride ; int uv_stride = denoiser -> yv12_running_avg [ INTRA_FRAME ] . uv_stride ; int filter_level = 48 ; int hev_index = lfi_n -> hev_thr_lut [ INTER_FRAME ] [ filter_level ] ; lfi . mblim = lfi_n -> mblim [ filter_level ] ; lfi . blim = lfi_n -> blim [ filter_level ] ; lfi . lim = lfi_n -> lim [ filter_level ] ; lfi . hev_thr = lfi_n -> hev_thr [ hev_index ] ; if ( mb_col > 0 ) { apply_filter_col = ! ( ( denoiser -> denoise_state [ block_index ] == denoiser -> denoise_state [ block_index - 1 ] ) && denoiser -> denoise_state [ block_index ] != kFilterNonZeroMV ) ; if ( apply_filter_col ) { apply_filter = 1 ; vp8_loop_filter_mbv ( denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset , NULL , NULL , y_stride , uv_stride , & lfi ) ; } } if ( mb_row > 0 ) { apply_filter_row = ! ( ( denoiser -> denoise_state [ block_index ] == denoiser -> denoise_state [ block_index - denoiser -> num_mb_cols ] ) && denoiser -> denoise_state [ block_index ] != kFilterNonZeroMV ) ; if ( apply_filter_row ) { apply_filter = 1 ; vp8_loop_filter_mbh ( denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset , NULL , NULL , y_stride , uv_stride , & lfi ) ; } } if ( apply_filter ) { vp8_copy_mem16x16 ( denoiser -> yv12_running_avg [ INTRA_FRAME ] . y_buffer + recon_yoffset , y_stride , x -> thismb , 16 ) ; }
<S2SV_ModStart> <S2SV_null> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * mc_running_avg_y <S2SV_ModStart> unsigned char * mc_running_avg_y , int mc_avg_y_stride , <S2SV_ModEnd> unsigned char * running_avg_y <S2SV_ModStart> unsigned char * running_avg_y , int avg_y_stride , unsigned char * sig , int sig_stride , unsigned int motion_magnitude , int increase_denoising ) { unsigned char * running_avg_y_start = running_avg_y ; unsigned char * sig_start = sig ; int sum_diff_thresh <S2SV_ModEnd> ; int r , <S2SV_ModStart> int r , c <S2SV_ModEnd> ; int sum_diff = <S2SV_ModStart> , 4 , 6 } ; int shift_inc1 = 0 ; int shift_inc2 = 1 ; int col_sum [ 16 ] = { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 <S2SV_ModStart> <= MOTION_MAGNITUDE_THRESHOLD ) { if ( increase_denoising ) { shift_inc1 = 1 ; shift_inc2 = 2 ; } adj_val [ 0 ] += shift_inc2 ; adj_val [ 1 ] += shift_inc2 ; adj_val [ 2 ] += shift_inc2 <S2SV_ModEnd> ; } for ( <S2SV_ModStart> ( absdiff <= 3 + shift_inc1 <S2SV_ModStart> [ c ] ; col_sum [ c ] <S2SV_ModEnd> += diff ; } <S2SV_ModStart> ( absdiff >= 4 + shift_inc1 <S2SV_ModStart> ] + adjustment ; col_sum [ c ] += adjustment ; } else { if ( ( sig [ c ] - adjustment ) < 0 ) running_avg_y [ c ] = 0 ; else running_avg_y [ c ] = sig [ c ] - adjustment ; col_sum [ c ] -= adjustment ; } } } sig += sig_stride ; mc_running_avg_y += mc_avg_y_stride ; running_avg_y += avg_y_stride ; } for ( c = 0 ; c < 16 ; ++ c ) { if ( col_sum [ c ] >= 128 ) { col_sum [ c ] = 127 ; } sum_diff += col_sum [ c ] ; } sum_diff_thresh = SUM_DIFF_THRESHOLD ; if ( increase_denoising ) sum_diff_thresh = SUM_DIFF_THRESHOLD_HIGH ; if ( abs ( sum_diff ) > sum_diff_thresh ) { int delta = ( ( abs ( sum_diff ) - sum_diff_thresh ) >> 8 ) + 1 ; if ( delta < 4 ) { sig -= sig_stride * 16 ; mc_running_avg_y -= mc_avg_y_stride * 16 ; running_avg_y -= avg_y_stride * 16 ; for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y <S2SV_ModEnd> [ c ] - <S2SV_ModStart> [ c ] - sig [ c ] ; int adjustment = abs ( diff ) ; if ( adjustment > delta ) adjustment = delta ; if ( diff > 0 ) { if ( running_avg_y [ c ] - adjustment < 0 ) running_avg_y [ c ] = 0 ; else running_avg_y [ c ] = running_avg_y [ c ] - adjustment ; col_sum [ c ] -= adjustment ; } else if ( diff < 0 ) { if ( running_avg_y [ c ] + adjustment > 255 ) running_avg_y [ c ] = 255 ; else running_avg_y [ c ] = running_avg_y [ c ] + adjustment ; col_sum [ c ] += adjustment ; } } sig += sig_stride ; mc_running_avg_y += mc_avg_y_stride ; running_avg_y += avg_y_stride ; } sum_diff = 0 ; for ( c = 0 ; c < 16 ; ++ c ) { if ( col_sum [ c ] >= 128 ) { col_sum [ c ] = 127 ; } sum_diff += col_sum [ c ] <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ( sum_diff ) > sum_diff_thresh <S2SV_ModEnd> ) return COPY_BLOCK ; <S2SV_ModStart> ) return COPY_BLOCK ; } else { return COPY_BLOCK ; } } vp8_copy_mem16x16 ( running_avg_y_start , avg_y_stride , sig_start <S2SV_ModEnd> , sig_stride ) ;
<S2SV_ModStart> -> yv12_mc_running_avg ) ; vp8_yv12_de_alloc_frame_buffer ( & denoiser -> yv12_last_source ) ; vpx_free ( denoiser -> denoise_state ) ;
<S2SV_ModStart> MBs ) ) ; memcpy <S2SV_ModEnd> ( sortlist , cpi
<S2SV_ModStart> # endif if ( <S2SV_ModEnd> cpi -> current_layer == <S2SV_ModStart> current_layer == 0 ) { if <S2SV_ModEnd> ( xd -> mode_info_context <S2SV_ModStart> . mode == ZEROMV && <S2SV_ModEnd> xd -> mode_info_context -> <S2SV_ModStart> ref_frame == LAST_FRAME ) { if ( cpi -> consec_zero_last [ map_index + mb_col ] < 255 ) cpi -> consec_zero_last [ map_index + mb_col ] += 1 ; if ( cpi -> consec_zero_last_mvbias [ map_index + mb_col ] < 255 ) cpi -> consec_zero_last_mvbias [ map_index + mb_col ] += 1 ; } else { cpi -> consec_zero_last [ map_index + mb_col ] = 0 ; cpi -> consec_zero_last_mvbias [ map_index + mb_col ] = 0 ; } if ( x -> zero_last_dot_suppress ) cpi -> consec_zero_last_mvbias [ map_index + mb_col ] = 0 ; } if ( ( cpi -> current_layer == 0 ) && ( cpi -> cyclic_refresh_mode_enabled && xd -> segmentation_enabled ) ) { cpi -> segmentation_map [ map_index + mb_col ] = xd -> mode_info_context -> mbmi . segment_id ; if ( xd -> mode_info_context -> mbmi . segment_id ) cpi -> cyclic_refresh_map [ map_index + mb_col ] = - 1 ; else if ( ( xd -> mode_info_context -> mbmi . mode == ZEROMV ) && ( xd -> mode_info_context -> mbmi . ref_frame == LAST_FRAME ) <S2SV_ModStart> tp - tp_start ; vp8_pack_tokens <S2SV_ModEnd> ( w , tp_start
<S2SV_ModStart> fc . mvc ; memset <S2SV_ModEnd> ( cm -> above_context
<S2SV_ModStart> ) ; } # else ( void ) cpi ; #
<S2SV_ModStart> unsigned int sse ; ( void ) cpi ; act = vpx_variance16x16 <S2SV_ModEnd> ( x -> src
<S2SV_ModStart> ) ; # endif memset <S2SV_ModEnd> ( segment_counts , 0 <S2SV_ModStart> ; int i ; memset <S2SV_ModEnd> ( xd -> mb_segment_tree_probs
<S2SV_ModStart> vp8_fast_quantize_b ; x -> <S2SV_ModEnd> zbin_mode_boost_enabled = 0 ; <S2SV_ModStart> distortion , & intra_error , mb_row , mb_col <S2SV_ModStart> -> quantize_b = vp8_regular_quantize_b <S2SV_ModEnd> ; } x ->
<S2SV_ModStart> } } intra_pred_var = vpx_get_mb_ss <S2SV_ModEnd> ( x -> src_diff
<S2SV_ModStart> [ ib ] ; <S2SV_ModEnd> dequant_ptr = d ->
<S2SV_ModStart> ENTROPY_CONTEXT * tl ; memcpy <S2SV_ModEnd> ( & t_above , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left ,
<S2SV_ModStart> left_context ) return ; memcpy <S2SV_ModEnd> ( & t_above , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left ,
<S2SV_ModStart> left_context ) return ; memcpy <S2SV_ModEnd> ( & t_above , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left ,
<S2SV_ModStart> ; double motion_pct ; ( void ) cpi ;
<S2SV_ModStart> twopass . stats_in ; memset <S2SV_ModEnd> ( & next_frame , <S2SV_ModStart> ; break ; } memcpy <S2SV_ModEnd> ( this_frame , &
<S2SV_ModStart> , 1.0 } ; memset <S2SV_ModEnd> ( & next_frame , <S2SV_ModStart> frames_to_key = 1 ; memcpy <S2SV_ModEnd> ( & first_frame , <S2SV_ModStart> this_frame -> coded_error ; memcpy <S2SV_ModEnd> ( & last_frame , <S2SV_ModStart> frames_to_key /= 2 ; memcpy <S2SV_ModEnd> ( & tmp_frame , <S2SV_ModStart> ; boost_score = 0.0 <S2SV_ModEnd> ; for ( i <S2SV_ModStart> Height ; int projected_buffer_level <S2SV_ModEnd> ; int tmp_q ;
<S2SV_ModStart> v_fn_ptr . vf = vpx_mse16x16 <S2SV_ModEnd> ; xd -> pre
<S2SV_ModStart> = next_frame -> pcnt_motion ; ( void ) cpi
<S2SV_ModStart> struct vpx_codec_cx_pkt pkt ; ( void ) cpi ;
<S2SV_ModStart> ; double next_iiratio ; memcpy <S2SV_ModEnd> ( & local_next_frame ,
<S2SV_ModStart> * cpi ) { ( void ) cpi ;
<S2SV_ModStart> y1dc_delta_q ) ) ; memcpy <S2SV_ModEnd> ( cm -> fc
<S2SV_ModStart> == 0 ) { memcpy <S2SV_ModEnd> ( & this_frame_copy , <S2SV_ModStart> == 0 ) { memcpy <S2SV_ModEnd> ( & this_frame_copy , <S2SV_ModStart> cpi -> per_frame_bandwidth ; memcpy <S2SV_ModEnd> ( & this_frame_copy , <S2SV_ModStart> != KEY_FRAME ) { memcpy <S2SV_ModEnd> ( & this_frame_copy , <S2SV_ModStart> } } else { memcpy <S2SV_ModEnd> ( & this_frame_copy ,
<S2SV_ModStart> pre . y_stride ; ( void ) cpi ; <S2SV_ModStart> -> offset ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr , src_stride <S2SV_ModStart> -> offset ) ; vpx_mse16x16 <S2SV_ModEnd> ( src_ptr , src_stride
<S2SV_ModStart> , in_what , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> , check_here , in_what_stride <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> , in_what , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> , check_here , in_what_stride <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> -> as_mv . row *= 8 <S2SV_ModEnd> ; bestmv -> as_mv <S2SV_ModStart> -> as_mv . col *= 8 <S2SV_ModEnd> ; startmv = *
<S2SV_ModStart> , bestaddress , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> , check_here , in_what_stride <S2SV_ModEnd> ) ; this_mv .
<S2SV_ModStart> , bestaddress , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> , check_here , in_what_stride <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ref_col + distance ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , unsigned <S2SV_ModStart> ( 16 , unsigned int , sad_array8 [ 8 ] <S2SV_ModEnd> ) ; unsigned int <S2SV_ModStart> , bestaddress , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> , check_here , in_what_stride <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> col >> 3 ; ( void ) mvcost ; <S2SV_ModStart> , this_offset , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> = 8 ; # else ( void ) search_param ; # <S2SV_ModStart> , this_offset , in_what_stride <S2SV_ModEnd> ) ; CHECK_BETTER } <S2SV_ModStart> , this_offset , in_what_stride <S2SV_ModEnd> ) ; CHECK_BETTER } <S2SV_ModStart> , this_offset , in_what_stride <S2SV_ModEnd> ) ; CHECK_BETTER } <S2SV_ModStart> , this_offset , in_what_stride <S2SV_ModEnd> ) ; CHECK_BETTER } <S2SV_ModStart> , this_offset , in_what_stride <S2SV_ModEnd> ) ; CHECK_BETTER } <S2SV_ModStart> , this_offset , in_what_stride <S2SV_ModEnd> ) ; CHECK_BETTER }
<S2SV_ModStart> , best_address , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> , check_here , in_what_stride <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> , best_address , in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost ( <S2SV_ModStart> , check_here , in_what_stride <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> unsigned int sse ; vpx_mse16x16 <S2SV_ModEnd> ( orig + col
<S2SV_ModStart> Q / 2 ; if ( cpi -> oxcf . screen_content_mode ) { int qp_thresh = ( cpi -> oxcf . screen_content_mode == 2 ) ? 80 : 100 ; if ( Q >= qp_thresh ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 10 ; } else if ( cpi -> frames_since_key > 250 && Q < 20 && cpi -> mb . skip_true_count > ( int ) ( 0.95 * mbs_in_frame ) ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = 0 ; } else { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 20 ; } block_count = cpi -> cyclic_refresh_mode_max_mbs_perframe ; } memset <S2SV_ModEnd> ( cpi -> segmentation_map <S2SV_ModStart> . frame_type != KEY_FRAME && block_count > 0 <S2SV_ModStart> cyclic_refresh_mode_index = i ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 ) { if ( cpi -> denoiser . denoiser_mode == kDenoiserOnYUVAggressive && Q < ( int ) cpi -> denoiser . denoise_pars . qp_thresh && ( cpi -> frames_since_key > 2 * cpi -> denoiser . denoise_pars . consec_zerolast ) ) { cpi -> cyclic_refresh_q = Q ; lf_adjustment = - 40 ; for ( i = 0 ; i < mbs_in_frame ; ++ i ) { seg_map [ i ] = ( cpi -> consec_zero_last [ i ] > cpi -> denoiser . denoise_pars . consec_zerolast ) ? 1 : 0 ; } } } # endif
<S2SV_ModStart> frame_type = KEY_FRAME ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity == 4 ) { vp8_denoiser_set_parameters ( & cpi -> denoiser , kDenoiserOnYUV ) ; } # endif } # if <S2SV_ModEnd> CONFIG_MULTI_RES_ENCODING if ( cpi <S2SV_ModStart> cpi -> oxcf . mr_total_resolutions > 1 ) <S2SV_ModEnd> { LOWER_RES_FRAME_INFO * low_res_frame_info <S2SV_ModStart> oxcf . mr_low_res_mode_info ; if ( cpi -> oxcf . mr_encoder_id ) { <S2SV_ModStart> GOLDEN_FRAME ] ) ; } } if ( cm -> frame_type == KEY_FRAME ) { if ( cpi -> oxcf . mr_encoder_id ) { if ( cpi -> common . current_video_frame == 0 && cpi -> buffer_level == 0 ) { unsigned int i ; cpi -> bits_off_target = cpi -> oxcf . starting_buffer_level ; cpi -> buffer_level = cpi -> oxcf . starting_buffer_level ; for ( i = 0 ; i < cpi -> oxcf . number_of_layers ; i ++ ) { LAYER_CONTEXT * lc = & cpi -> layer_context [ i ] ; lc -> bits_off_target = lc -> starting_buffer_level ; lc -> buffer_level = lc -> starting_buffer_level ; } } cpi -> common . current_video_frame = low_res_frame_info -> key_frame_counter_value ; } else { low_res_frame_info -> key_frame_counter_value = cpi -> common . current_video_frame ; } } } # endif cpi -> closest_reference_frame = LAST_FRAME ; if ( cm -> frame_type != KEY_FRAME ) { int i ; MV_REFERENCE_FRAME closest_ref = INTRA_FRAME ; if ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) { closest_ref = LAST_FRAME ; } else if ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) { closest_ref = GOLDEN_FRAME ; } else <S2SV_ModStart> ref_frame_flags & VP8_ALTR_FRAME ) { closest_ref = ALTREF_FRAME ; } for ( i = 1 ; i <= 3 ; i ++ ) { vpx_ref_frame_type_t ref_frame_type = ( vpx_ref_frame_type_t ) ( ( i == 3 ) ? 4 : i ) ; if ( cpi -> ref_frame_flags & ref_frame_type ) { if ( ( cm -> current_video_frame - <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> cpi -> current_ref_frames [ i ] ) < ( cm -> current_video_frame - cpi -> current_ref_frames [ closest_ref ] ) ) { closest_ref = i ; } } } cpi -> closest_reference_frame = closest_ref ; } <S2SV_ModEnd> if ( cm -> <S2SV_ModStart> = 128 ; } memset ( cpi -> consec_zero_last , 0 , cm -> mb_rows * cm -> mb_cols ) ; memset ( cpi -> consec_zero_last_mvbias , 0 , ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ) ; <S2SV_ModStart> -> cyclic_refresh_mode_enabled ) { int disable_cr_gf = ( cpi -> oxcf . screen_content_mode == 2 && cm -> refresh_golden_frame ) ; <S2SV_ModStart> -> current_layer == 0 && cpi -> force_maxqp == 0 && ! disable_cr_gf <S2SV_ModStart> , cpi ) ; # if CONFIG_TEMPORAL_DENOISING && CONFIG_POSTPROC if ( cpi -> oxcf . noise_sensitivity >= 3 ) { if ( cpi -> denoiser . denoise_pars . spatial_blur != 0 ) { vp8_de_noise ( cm , cpi -> Source , cpi -> Source , cpi -> denoiser . denoise_pars . spatial_blur , 1 , 0 , 0 ) ; } } # endif <S2SV_ModStart> , 1 , 0 , 1 <S2SV_ModStart> , 1 , 0 , 1 <S2SV_ModStart> ifdef OUTPUT_YUV_SRC vp8_write_yuv_frame ( yuv_file , <S2SV_ModStart> cpi ) ; } memset ( cpi -> consec_zero_last , 0 , cm -> mb_rows * cm -> mb_cols ) ; memset ( cpi -> consec_zero_last_mvbias , 0 , ( cpi -> common . mb_rows * cpi -> common . mb_cols ) ) ; <S2SV_ModStart> == 0 ) { memcpy <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> ( cpi ) ; if ( cpi -> oxcf . screen_content_mode == 2 ) { if ( vp8_drop_encodedframe_overshoot ( cpi , Q ) ) return ; } <S2SV_ModStart> . mode == ZEROMV && tmp -> mbmi . ref_frame == LAST_FRAME <S2SV_ModStart> ] ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 && cpi -> oxcf . noise_sensitivity < 4 && ! cpi -> oxcf . screen_content_mode && cpi -> frames_since_key % 8 == 0 && cm -> frame_type != KEY_FRAME ) { cpi -> mse_source_denoised = measure_square_diff_partial ( & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] , cpi -> Source , cpi ) ; } if ( cpi -> oxcf . noise_sensitivity == 4 && ! cpi -> oxcf . screen_content_mode && cpi -> frames_since_key % 8 == 0 && cm -> frame_type != KEY_FRAME ) { process_denoiser_mode_change ( cpi ) ; } # endif # if CONFIG_MULTITHREAD if ( cpi -> b_multi_threaded ) { sem_post ( & cpi -> h_event_start_lpf ) ; cpi -> b_lpf_running = 1 ; } else # endif <S2SV_ModEnd> { vp8_loopfilter_frame ( cpi <S2SV_ModStart> ( cpi ) ; # ifdef OUTPUT_YUV_DENOISED vp8_write_yuv_frame ( yuv_denoised_file , & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] ) ; # endif <S2SV_ModStart> cpi -> bits_off_target = cpi -> oxcf . maximum_buffer_size ; if ( cpi -> drop_frames_allowed == 0 && cpi -> oxcf . screen_content_mode && cpi -> bits_off_target < - cpi -> oxcf . maximum_buffer_size ) cpi -> bits_off_target = -
<S2SV_ModStart> ( cm ) ; if ( oxcf -> timebase . num > 0 ) { <S2SV_ModStart> . num ) ; } else { cpi -> framerate = 30 ; } <S2SV_ModStart> cpi -> framerate ; cpi -> ref_frame_flags = VP8_ALTR_FRAME | VP8_GOLD_FRAME | VP8_LAST_FRAME ; cm -> refresh_golden_frame = 0 ; cm -> refresh_last_frame = 1 ; cm -> refresh_entropy_probs = 1 ;
<S2SV_ModStart> mode_ref_lf_delta_update = 1 ; memset <S2SV_ModEnd> ( cpi -> mb <S2SV_ModStart> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( cpi -> mb
<S2SV_ModStart> mb_segement_abs_delta = abs_delta ; memcpy <S2SV_ModEnd> ( cpi -> segment_feature_data
<S2SV_ModStart> * segmentation_map ) { memcpy <S2SV_ModEnd> ( cpi -> segmentation_map
<S2SV_ModStart> mode_ref_lf_delta_update = 0 ; memset <S2SV_ModEnd> ( cpi -> mb <S2SV_ModStart> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( cpi -> mb <S2SV_ModStart> mode_lf_deltas ) ) ; memset <S2SV_ModEnd> ( cpi -> mb <S2SV_ModStart> ref_lf_deltas ) ) ; memset <S2SV_ModEnd> ( cpi -> mb
<S2SV_ModStart> -> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi -> gf_active_flags
<S2SV_ModStart> -> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi -> gf_active_flags
<S2SV_ModStart> < oxcf -> number_of_layers && i < VPX_TS_MAX_LAYERS ; ++ i <S2SV_ModEnd> ) { LAYER_CONTEXT *
<S2SV_ModStart> cm -> new_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> cm -> current_video_frame ; <S2SV_ModEnd> } else { if <S2SV_ModStart> cm -> new_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> cm -> current_video_frame ; <S2SV_ModEnd> } else if ( <S2SV_ModStart> cm -> lst_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> [ LAST_FRAME ] ; <S2SV_ModEnd> } } else { <S2SV_ModStart> cm -> gld_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> [ GOLDEN_FRAME ] ; <S2SV_ModEnd> } } } if <S2SV_ModStart> cm -> new_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> cm -> current_video_frame ; <S2SV_ModEnd> } else if ( <S2SV_ModStart> cm -> lst_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> [ LAST_FRAME ] ; <S2SV_ModEnd> } } else { <S2SV_ModStart> cm -> alt_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> [ ALTREF_FRAME ] ; <S2SV_ModEnd> } } } } <S2SV_ModStart> cm -> new_fb_idx ; <S2SV_ModEnd> cpi -> current_ref_frames [ <S2SV_ModStart> cm -> current_video_frame ; <S2SV_ModEnd> } # if CONFIG_TEMPORAL_DENOISING <S2SV_ModStart> { int i ; for ( i = LAST_FRAME <S2SV_ModEnd> ; i < MAX_REF_FRAMES <S2SV_ModStart> ; i < MAX_REF_FRAMES ; ++ i ) vp8_yv12_copy_frame ( cpi -> Source <S2SV_ModEnd> , & cpi -> <S2SV_ModStart> ) ; } } if ( cpi -> oxcf . noise_sensitivity == 4 ) vp8_yv12_copy_frame ( cpi -> Source , & cpi -> denoiser . yv12_last_source ) ;
<S2SV_ModStart> ) ) ) ; memset <S2SV_ModEnd> ( cpi -> active_map <S2SV_ModStart> mb_rows ) ) ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 ) { vp8_denoiser_free ( & cpi -> denoiser ) ; vp8_denoiser_allocate ( & cpi -> denoiser , width , height , cm -> mb_rows , cm -> mb_cols , cpi -> oxcf . noise_sensitivity ) ; } # endif
<S2SV_ModStart> sse ; Total += vpx_mse16x16 <S2SV_ModEnd> ( src + j
<S2SV_ModStart> alt_freq : DEFAULT_GF_INTERVAL ; <S2SV_ModEnd> # if ( CONFIG_REALTIME_ONLY <S2SV_ModStart> != prev_number_of_layers ) { if ( cpi -> temporal_layer_id > 0 ) { cpi -> temporal_layer_id = 0 ; } <S2SV_ModStart> prev_number_of_layers ) ; } if ( ! cpi -> initial_width ) { cpi -> initial_width = cpi -> oxcf . Width ; cpi -> initial_height = cpi -> oxcf . Height ; } cm -> Width = cpi -> oxcf . Width <S2SV_ModEnd> ; cm -> Height <S2SV_ModStart> -> oxcf . Height ; assert ( cm -> Width <= cpi -> initial_width ) ; assert ( cm -> Height <= cpi -> initial_height ) <S2SV_ModStart> , width , height , cm -> mb_rows , cm -> mb_cols , cpi -> oxcf . noise_sensitivity
<S2SV_ModStart> cpi -> common ; memset <S2SV_ModEnd> ( cpi , 0 <S2SV_ModStart> 0 ; cpi -> temporal_layer_id = - 1 ; cpi -> <S2SV_ModStart> # endif cpi -> mse_source_denoised = 0 ; cpi -> <S2SV_ModStart> ) / 5 ; if ( cpi -> oxcf . number_of_layers == 1 ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 20 ; } else if ( cpi -> oxcf . number_of_layers == 2 ) { cpi -> cyclic_refresh_mode_max_mbs_perframe = ( cpi -> common . mb_rows * cpi -> common . mb_cols ) / 10 ; } <S2SV_ModStart> * ) NULL ; CHECK_MEM_ERROR ( cpi -> consec_zero_last , vpx_calloc ( cm -> mb_rows * cm -> mb_cols , 1 ) ) ; CHECK_MEM_ERROR ( cpi -> consec_zero_last_mvbias , vpx_calloc ( ( cpi -> common . mb_rows * cpi -> common . mb_cols ) , 1 ) ) ; <S2SV_ModStart> 0 ; cpi -> force_maxqp = 0 ; cpi -> <S2SV_ModStart> ; # endif # ifdef OUTPUT_YUV_DENOISED yuv_denoised_file = fopen ( "denoised.yuv" , "ab" ) ; # endif # <S2SV_ModStart> ] . sdf = vpx_sad16x16 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . vf = vpx_variance16x16 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf = vpx_sub_pixel_variance16x16 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf_halfpix_h = vpx_variance_halfpixvar16x16_h <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf_halfpix_v = vpx_variance_halfpixvar16x16_v <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf_halfpix_hv = vpx_variance_halfpixvar16x16_hv <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx3f = vpx_sad16x16x3 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx8f = vpx_sad16x16x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx4df = vpx_sad16x16x4d <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdf = vpx_sad16x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . vf = vpx_variance16x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf = vpx_sub_pixel_variance16x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx3f = vpx_sad16x8x3 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx8f = vpx_sad16x8x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx4df = vpx_sad16x8x4d <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdf = vpx_sad8x16 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . vf = vpx_variance8x16 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf = vpx_sub_pixel_variance8x16 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx3f = vpx_sad8x16x3 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx8f = vpx_sad8x16x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx4df = vpx_sad8x16x4d <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdf = vpx_sad8x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . vf = vpx_variance8x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf = vpx_sub_pixel_variance8x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx3f = vpx_sad8x8x3 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx8f = vpx_sad8x8x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx4df = vpx_sad8x8x4d <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdf = vpx_sad4x4 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . vf = vpx_variance4x4 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . svf = vpx_sub_pixel_variance4x4 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx3f = vpx_sad4x4x3 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx8f = vpx_sad4x4x8 <S2SV_ModEnd> ; cpi -> fn_ptr <S2SV_ModStart> ] . sdx4df = vpx_sad4x4x4d <S2SV_ModEnd> ; # if ARCH_X86
<S2SV_ModStart> int flush ) { <S2SV_ModEnd> VP8_COMMON * cm ; <S2SV_ModStart> setjmp = 0 ; vp8_clear_system_state ( ) ; <S2SV_ModStart> setjmp = 1 ; <S2SV_ModEnd> vpx_usec_timer_start ( & cmptimer <S2SV_ModStart> ; } # endif <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> / avg_duration ; } # if CONFIG_MULTI_RES_ENCODING if ( cpi -> oxcf . mr_total_resolutions > 1 ) { LOWER_RES_FRAME_INFO * low_res_frame_info = ( LOWER_RES_FRAME_INFO * ) cpi -> oxcf . mr_low_res_mode_info ; if ( cpi -> oxcf . mr_encoder_id ) { cpi -> ref_framerate = low_res_frame_info -> low_res_framerate ; } else { low_res_frame_info -> low_res_framerate = cpi -> ref_framerate ; } } # endif <S2SV_ModStart> -> oxcf . number_of_layers && i < VPX_TS_MAX_LAYERS ; ++ i <S2SV_ModEnd> ) { LAYER_CONTEXT * <S2SV_ModStart> ( cpi ) ; if ( cpi -> temporal_layer_id >= 0 ) { layer = cpi -> temporal_layer_id ; } else { <S2SV_ModStart> . periodicity ] ; } <S2SV_ModStart> == 0 ) { memcpy <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> cm -> refresh_alt_ref_frame ) memcpy <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> cm -> refresh_golden_frame ) memcpy <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> cm -> refresh_last_frame ) memcpy <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> common . frame_to_show ; unsigned int y_width = cpi -> common . Width ; unsigned int y_height = cpi -> common . Height ; unsigned int uv_width = ( y_width + 1 ) / 2 ; unsigned int uv_height = ( y_height + 1 ) / 2 ; int y_samples = y_height * <S2SV_ModEnd> y_width ; int uv_samples <S2SV_ModStart> ; int uv_samples = uv_height * <S2SV_ModEnd> uv_width ; int t_samples <S2SV_ModStart> uv_samples ; double sq_error <S2SV_ModEnd> ; ye = calc_plane_error <S2SV_ModStart> recon -> y_stride , y_width , y_height ) ; ue = calc_plane_error ( orig -> u_buffer , orig -> uv_stride , recon -> u_buffer , recon -> uv_stride , uv_width , uv_height ) ; ve <S2SV_ModEnd> = calc_plane_error ( orig <S2SV_ModStart> calc_plane_error ( orig -> v_buffer <S2SV_ModEnd> , orig -> uv_stride <S2SV_ModStart> uv_stride , recon -> v_buffer <S2SV_ModEnd> , recon -> uv_stride <S2SV_ModStart> recon -> uv_stride , uv_width , <S2SV_ModEnd> uv_height ) ; sq_error <S2SV_ModStart> -> post_proc_buffer ; double sq_error2 ; double <S2SV_ModStart> pp -> y_stride , y_width , y_height ) ; ue = calc_plane_error ( orig -> u_buffer , orig -> uv_stride , pp -> u_buffer , pp -> uv_stride , uv_width , uv_height ) ; ve <S2SV_ModEnd> = calc_plane_error ( orig <S2SV_ModStart> calc_plane_error ( orig -> v_buffer <S2SV_ModEnd> , orig -> uv_stride <S2SV_ModStart> uv_stride , pp -> v_buffer <S2SV_ModEnd> , pp -> uv_stride <S2SV_ModStart> pp -> uv_stride , uv_width , <S2SV_ModEnd> uv_height ) ; sq_error2 <S2SV_ModStart> frame_psnr2 ; frame_ssim2 = vpx_calc_ssim <S2SV_ModEnd> ( cpi -> Source <S2SV_ModStart> & cm -> post_proc_buffer <S2SV_ModEnd> , & weight ) <S2SV_ModStart> frame_all ; frame_all = vpx_calc_ssimg <S2SV_ModEnd> ( cpi -> Source <S2SV_ModStart> # endif # endif <S2SV_ModEnd> cpi -> common .
<S2SV_ModStart> ) ; # else ( void ) flags ;
<S2SV_ModStart> cm -> frame_type ; int update_any_ref_buffers = 1 ; if ( cpi -> common . refresh_last_frame == 0 && cpi -> common . refresh_golden_frame == 0 && cpi -> common . refresh_alt_ref_frame == 0 ) { update_any_ref_buffers = 0 ; } <S2SV_ModStart> auto_filter == 0 ) { # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity && cm -> frame_type != KEY_FRAME ) { vp8cx_pick_filter_level_fast ( & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] , cpi ) ; } else { vp8cx_pick_filter_level_fast ( <S2SV_ModEnd> cpi -> Source , <S2SV_ModStart> , cpi ) ; } # else vp8cx_pick_filter_level_fast ( cpi -> Source , cpi ) ; # endif } else { # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity && cm -> frame_type != KEY_FRAME ) { vp8cx_pick_filter_level ( & cpi -> denoiser . yv12_running_avg [ INTRA_FRAME ] , cpi ) ; } else { vp8cx_pick_filter_level ( <S2SV_ModEnd> cpi -> Source , <S2SV_ModStart> , cpi ) ; } # else vp8cx_pick_filter_level ( cpi -> Source , cpi ) ; # endif } <S2SV_ModStart> -> filter_level > 0 && update_any_ref_buffers
<S2SV_ModStart> int64_t end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer ; <S2SV_ModStart> res = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & timer <S2SV_ModStart> & timer ) ; <S2SV_ModEnd> return res ; }
<S2SV_ModStart> -> b_calculate_psnr ) { <S2SV_ModEnd> if ( cpi -> <S2SV_ModStart> [ i ] * cpi -> common . Width * cpi -> common . Height <S2SV_ModEnd> ; double total_psnr = <S2SV_ModStart> cpi -> count * cpi -> common . Width * cpi -> common . Height <S2SV_ModEnd> ; double total_psnr = <S2SV_ModStart> -> cyclic_refresh_map ) ; vpx_free ( cpi -> consec_zero_last ) ; vpx_free ( cpi -> consec_zero_last_mvbias ) ; <S2SV_ModStart> ; # endif # ifdef OUTPUT_YUV_DENOISED fclose ( yuv_denoised_file ) ; # endif #
<S2SV_ModStart> ( map ) { memcpy <S2SV_ModEnd> ( cpi -> active_map
<S2SV_ModStart> mbs_tested_so_far = 0 ; cpi -> mb . mbs_zero_last_dot_suppress = 0 ; <S2SV_ModStart> , thresh_mult_map_split2 ) ; if ( ( cpi -> Speed <= 6 ) && ( cpi -> oxcf . number_of_layers > 1 ) && ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) && ( cpi -> ref_frame_flags & VP8_GOLD_FRAME ) ) { if ( cpi -> closest_reference_frame == GOLDEN_FRAME ) { sf -> thresh_mult [ THR_ZERO2 ] = sf -> thresh_mult [ THR_ZERO2 ] >> 3 ; sf -> thresh_mult [ THR_NEAREST2 ] = sf -> thresh_mult [ THR_NEAREST2 ] >> 3 ; sf -> thresh_mult [ THR_NEAR2 ] = sf -> thresh_mult [ THR_NEAR2 ] >> 3 ; } else { sf -> thresh_mult [ THR_ZERO2 ] = sf -> thresh_mult [ THR_ZERO2 ] >> 1 ; sf -> thresh_mult [ THR_NEAREST2 ] = sf -> thresh_mult [ THR_NEAREST2 ] >> 1 ; sf -> thresh_mult [ THR_NEAR2 ] = sf -> thresh_mult [ THR_NEAR2 ] >> 1 ; } } <S2SV_ModStart> half_pixel_search = 0 ; memset <S2SV_ModEnd> ( cpi -> mb <S2SV_ModStart> quantize_b = vp8_regular_quantize_b ; } else { <S2SV_ModStart> cpi -> mb . quantize_b = vp8_fast_quantize_b <S2SV_ModEnd> ; } if (
<S2SV_ModStart> mv ; int this_rd ; int denoise_aggressive = 0 <S2SV_ModStart> * distortion2 ) ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 ) { denoise_aggressive = ( cpi -> denoiser . denoiser_mode == kDenoiserOnYUVAggressive ) ? 1 : 0 ; } # endif if ( ! cpi -> oxcf . screen_content_mode && this_mode == ZEROMV && x -> e_mbd . mode_info_context -> mbmi . ref_frame == LAST_FRAME && ( denoise_aggressive || ( cpi -> closest_reference_frame == LAST_FRAME ) ) <S2SV_ModEnd> ) { if ( <S2SV_ModStart> ) { if ( x -> is_skin <S2SV_ModEnd> ) rd_adj = 100
<S2SV_ModStart> -> predictor ; return vpx_get4x4sse_cs <S2SV_ModEnd> ( sptr , be
<S2SV_ModStart> unsigned int sse = UINT_MAX , best_rd_sse = UINT_MAX <S2SV_ModEnd> ; # if CONFIG_TEMPORAL_DENOISING <S2SV_ModStart> unsigned int zero_mv_sse = UINT_MAX , best_sse = UINT_MAX <S2SV_ModEnd> ; # endif int <S2SV_ModStart> sf . improved_mv_pred ; # if CONFIG_MULTI_RES_ENCODING int dissim = INT_MAX ; int parent_ref_frame = 0 ; int_mv parent_ref_mv ; MB_PREDICTION_MODE parent_mode = 0 ; int parent_ref_valid = 0 ; # endif <S2SV_ModStart> sign_bias = 0 ; int dot_artifact_candidate = 0 ; get_predictor_pointers ( cpi , plane , recon_yoffset , recon_uvoffset ) ; if ( cpi -> ref_frame_flags & VP8_LAST_FRAME ) { unsigned char * target_y = x -> src . y_buffer ; unsigned char * target_u = x -> block [ 16 ] . src + * x -> block [ 16 ] . base_src ; unsigned char * target_v = x -> block [ 20 ] . src + * x -> block [ 20 ] . base_src ; int stride = x -> src . y_stride ; int stride_uv = x -> block [ 16 ] . src_stride ; # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity ) { const int uv_denoise = ( cpi -> oxcf . noise_sensitivity >= 2 ) ? 1 : 0 ; target_y = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . y_buffer + recon_yoffset ; stride = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . y_stride ; if ( uv_denoise ) { target_u = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . u_buffer + recon_uvoffset ; target_v = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . v_buffer + recon_uvoffset ; stride_uv = cpi -> denoiser . yv12_running_avg [ LAST_FRAME ] . uv_stride ; } } # endif dot_artifact_candidate = check_dot_artifact_candidate ( cpi , x , target_y , stride , plane [ LAST_FRAME ] [ 0 ] , mb_row , mb_col , 0 ) ; if ( ! dot_artifact_candidate ) { dot_artifact_candidate = check_dot_artifact_candidate ( cpi , x , target_u , stride_uv , plane [ LAST_FRAME ] [ 1 ] , mb_row , mb_col , 1 ) ; if ( ! dot_artifact_candidate ) { dot_artifact_candidate = check_dot_artifact_candidate ( cpi , x , target_v , stride_uv , plane [ LAST_FRAME ] [ 2 ] , mb_row , mb_col , 2 ) ; } } } # if CONFIG_MULTI_RES_ENCODING <S2SV_ModEnd> parent_ref_valid = cpi -> <S2SV_ModStart> && cpi -> mr_low_res_mv_avail <S2SV_ModEnd> ; if ( parent_ref_valid <S2SV_ModStart> -> ref_frame_flags & VP8_GOLD_FRAME <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> parent_ref_valid = 0 ; if ( dot_artifact_candidate ) parent_ref_valid = 0 ; } # endif { const int y = x -> src . y_buffer [ 7 * x -> src . y_stride + 7 ] ; const int cb = x -> src . u_buffer [ 3 * x -> src . uv_stride + 3 ] ; const int cr = x -> src . v_buffer [ 3 * x -> src . uv_stride + 3 ] ; x -> is_skin = 0 ; if ( ! cpi -> oxcf . screen_content_mode ) x -> is_skin = is_skin_color ( y , cb , cr ) ; } # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity ) { } # endif <S2SV_ModEnd> mode_mv = mode_mv_sb [ <S2SV_ModStart> as_int = 0 ; memset <S2SV_ModEnd> ( mode_mv_sb , 0 <S2SV_ModStart> mode_mv_sb ) ) ; memset <S2SV_ModEnd> ( & best_mbmode , <S2SV_ModStart> . as_int ; } <S2SV_ModEnd> x -> mbs_tested_so_far ++ <S2SV_ModStart> ref_frame = INTRA_FRAME ; if ( cpi -> Speed < 12 ) { <S2SV_ModStart> & rd_adjustment ) ; } # if CONFIG_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity ) { rd_adjustment = ( int ) ( rd_adjustment * cpi -> denoiser . denoise_pars . pickmode_mv_bias / 100 ) ; } # endif if ( dot_artifact_candidate ) { rd_adjustment = 150 ; } <S2SV_ModStart> rate ; distortion2 = vpx_variance16x16 <S2SV_ModEnd> ( * ( b <S2SV_ModStart> ) ; distortion2 = vpx_variance16x16 <S2SV_ModEnd> ( * ( b <S2SV_ModStart> -> oxcf . mr_encoder_id <S2SV_ModEnd> ) sf_improved_mv_pred = 0 <S2SV_ModStart> if ( parent_ref_valid && ( parent_ref_frame == this_ref_frame ) <S2SV_ModEnd> ) { mvp . <S2SV_ModStart> if ( parent_ref_valid && ( parent_ref_frame == this_ref_frame ) <S2SV_ModEnd> && dissim <= 2 <S2SV_ModStart> if ( ! parent_ref_valid || ( parent_ref_frame != this_ref_frame ) <S2SV_ModStart> mv . as_int ; vp8_clamp_mv2 ( & mode_mv [ this_mode ] , xd ) ; <S2SV_ModStart> . noise_sensitivity ) { int skip_old_reference = ( ( this_ref_frame != LAST_FRAME ) && ( cpi -> common . current_video_frame - cpi -> current_ref_frames [ this_ref_frame ] > MAX_GF_ARF_DENOISE_RANGE ) ) ? 1 : 0 ; <S2SV_ModStart> && sse < zero_mv_sse && ! skip_old_reference <S2SV_ModStart> && sse < best_sse && ! skip_old_reference <S2SV_ModStart> best_rd = this_rd ; memcpy <S2SV_ModEnd> ( & best_mbmode , <S2SV_ModStart> . noise_sensitivity ) { int block_index = mb_row * cpi -> common . mb_cols + mb_col ; int reevaluate = 0 ; int is_noisy = 0 ; <S2SV_ModStart> = best_rd_sse ; } if ( cpi -> oxcf . noise_sensitivity == 4 ) { if ( cpi -> denoiser . nmse_source_diff > 70 * cpi -> denoiser . threshold_aggressive_mode / 100 ) is_noisy = 1 ; } else { if ( cpi -> mse_source_denoised > 1000 ) is_noisy = 1 ; } x -> increase_denoising = 0 ; if ( ! x -> is_skin && x -> best_sse_inter_mode == ZEROMV && ( x -> best_reference_frame == LAST_FRAME || x -> best_reference_frame == cpi -> closest_reference_frame ) && cpi -> consec_zero_last [ block_index ] >= 20 && is_noisy ) { x -> increase_denoising = 1 ; } x -> denoise_zeromv = 0 ; <S2SV_ModStart> , recon_yoffset , recon_uvoffset , & cpi -> common . lf_info , mb_row , mb_col , block_index ) ; reevaluate = <S2SV_ModEnd> ( best_mbmode . ref_frame <S2SV_ModStart> . ref_frame == INTRA_FRAME ) || ( best_mbmode . mode != ZEROMV && x -> denoise_zeromv && cpi -> mse_source_denoised > 2000 ) ; if ( ! dot_artifact_candidate && reevaluate <S2SV_ModStart> x -> best_zeromv_reference_frame ; rd_adjustment = 100 ; <S2SV_ModStart> < best_rd ) { memcpy <S2SV_ModEnd> ( & best_mbmode , <S2SV_ModStart> x -> skip ) memcpy <S2SV_ModEnd> ( & x ->
<S2SV_ModStart> ) ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * ( b
<S2SV_ModStart> ; ( void ) mb ; ( void )
<S2SV_ModStart> sse ; Total += vpx_mse16x16 <S2SV_ModEnd> ( src + j
<S2SV_ModStart> 0 ; int filt_mid <S2SV_ModEnd> ; int filt_low = <S2SV_ModStart> cm -> frame_to_show ; memset <S2SV_ModEnd> ( ss_err , 0
<S2SV_ModStart> filt_val ; int best_filt_val <S2SV_ModEnd> ; YV12_BUFFER_CONFIG * saved_frame <S2SV_ModStart> best_filt_val = filt_val ; yv12_copy_partial_frame <S2SV_ModEnd> ( saved_frame , cm <S2SV_ModStart> >= min_filter_level ) { yv12_copy_partial_frame <S2SV_ModEnd> ( saved_frame , cm <S2SV_ModStart> < max_filter_level ) { yv12_copy_partial_frame <S2SV_ModEnd> ( saved_frame , cm
<S2SV_ModStart> >> 1 ) ) { Adjustment = <S2SV_ModEnd> ( cpi -> current_gf_interval <S2SV_ModStart> 1 ) * Adjustment ; if ( Adjustment > ( 10 * cpi -> this_frame_target ) / 100 ) Adjustment = ( 10 * cpi -> this_frame_target ) / 100 ; cpi -> this_frame_target += Adjustment ; } <S2SV_ModEnd> else cpi -> this_frame_target
<S2SV_ModStart> cpi -> active_worst_quality ; if ( cpi -> force_maxqp == 1 ) { cpi -> active_worst_quality = cpi -> worst_quality ; return cpi -> worst_quality ; }
<S2SV_ModStart> -> common ) ; memcpy <S2SV_ModEnd> ( cpi -> common <S2SV_ModStart> flag ) ; } memcpy <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> fc ) ) ; memcpy <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> fc ) ) ; memcpy <S2SV_ModEnd> ( & cpi ->
<S2SV_ModStart> & 7 ) { vpx_sub_pixel_variance8x8 <S2SV_ModEnd> ( uptr , pre_stride <S2SV_ModStart> & sse2 ) ; vpx_sub_pixel_variance8x8 <S2SV_ModEnd> ( vptr , pre_stride <S2SV_ModStart> ; } else { vpx_variance8x8 <S2SV_ModEnd> ( uptr , pre_stride <S2SV_ModStart> & sse2 ) ; vpx_variance8x8 <S2SV_ModEnd> ( vptr , pre_stride
<S2SV_ModStart> encode_breakout ; var = vpx_variance16x16 <S2SV_ModEnd> ( * ( b
<S2SV_ModStart> ENTROPY_CONTEXT * tl_b ; memcpy <S2SV_ModEnd> ( & t_above , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left , <S2SV_ModStart> ENTROPY_CONTEXT * tl_s ; memcpy <S2SV_ModEnd> ( & t_above_s , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left_s , <S2SV_ModStart> best_label_rd = this_rd ; memcpy <S2SV_ModEnd> ( ta_b , ta_s <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( tl_b , tl_s <S2SV_ModStart> ) ; } } memcpy <S2SV_ModEnd> ( ta , ta_b <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( tl , tl_b
<S2SV_ModStart> ENTROPY_CONTEXT * tl ; memcpy <S2SV_ModEnd> ( & t_above , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left ,
<S2SV_ModStart> int fullpixel ) { ( void ) cpi ; ( void ) fullpixel ;
<S2SV_ModStart> int fullpixel ) { ( void ) cpi ; ( void ) fullpixel ;
<S2SV_ModStart> = * l ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , unsigned <S2SV_ModStart> unsigned char , best_predictor [ 16 * 4 ] ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , short <S2SV_ModStart> , short , best_dqcoeff [ 16 ] <S2SV_ModEnd> ) ; int dst_stride <S2SV_ModStart> -> predictor ) ; memcpy <S2SV_ModEnd> ( best_dqcoeff , b
<S2SV_ModStart> int * bmode_costs ; memcpy <S2SV_ModEnd> ( & t_above , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left ,
<S2SV_ModStart> rd = this_rd ; memcpy <S2SV_ModEnd> ( & best_mode -> <S2SV_ModStart> MB_MODE_INFO ) ) ; memcpy <S2SV_ModEnd> ( & best_mode ->
<S2SV_ModStart> -> dst . y_stride <S2SV_ModEnd> ) ; } else <S2SV_ModStart> -> dst . y_stride <S2SV_ModEnd> ) ; } else <S2SV_ModStart> -> dst . y_stride <S2SV_ModEnd> ) ; near_sad [ <S2SV_ModStart> -> dst . y_stride <S2SV_ModEnd> ) ; near_sad [ <S2SV_ModStart> -> dst . y_stride <S2SV_ModEnd> ) ; } if <S2SV_ModStart> * 16 , pre_y_stride <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> - 16 , pre_y_stride <S2SV_ModEnd> ) ; near_sad [ <S2SV_ModStart> , pre_y_buffer , pre_y_stride <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> + 16 , pre_y_stride <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> * 16 , pre_y_stride <S2SV_ModEnd> ) ; } if
<S2SV_ModStart> / 2 ] ; <S2SV_ModEnd> * sr = 0
<S2SV_ModStart> ; BEST_SEG_INFO bsi ; memset <S2SV_ModEnd> ( & bsi ,
<S2SV_ModStart> , int * returnintra , int mb_row , int mb_col <S2SV_ModStart> unsigned int zero_mv_sse = UINT_MAX , best_sse = UINT_MAX , best_rd_sse = UINT_MAX <S2SV_ModEnd> ; # endif mode_mv <S2SV_ModStart> intra_rd = INT_MAX ; memset <S2SV_ModEnd> ( mode_mv_sb , 0 <S2SV_ModStart> mode_mv_sb ) ) ; memset <S2SV_ModEnd> ( & best_mode . <S2SV_ModStart> mbmode ) ) ; memset <S2SV_ModEnd> ( & best_mode . <S2SV_ModStart> . mv . as_int <S2SV_ModEnd> ; further_steps = ( <S2SV_ModStart> . noise_sensitivity ) { int block_index = mb_row * cpi -> common . mb_cols + mb_col ; <S2SV_ModStart> , recon_yoffset , recon_uvoffset , & cpi -> common . lf_info , mb_row , mb_col , block_index <S2SV_ModStart> -> skip ) { <S2SV_ModEnd> * returnrate = rd <S2SV_ModStart> ; return ; } memcpy <S2SV_ModEnd> ( & x -> <S2SV_ModStart> mv . as_int ; memcpy <S2SV_ModEnd> ( x -> partition_info
<S2SV_ModStart> ENTROPY_CONTEXT * tl ; memcpy <S2SV_ModEnd> ( & t_above , <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memcpy <S2SV_ModEnd> ( & t_left ,
<S2SV_ModStart> refresh_golden_frame ) ) { memset <S2SV_ModEnd> ( cpi -> gf_active_flags
<S2SV_ModStart> != SPLITMV ) { memset <S2SV_ModEnd> ( x -> above_context <S2SV_ModStart> ENTROPY_CONTEXT_PLANES ) ) ; memset <S2SV_ModEnd> ( x -> left_context <S2SV_ModStart> ; } else { memset <S2SV_ModEnd> ( x -> above_context <S2SV_ModStart> - 1 ) ; memset <S2SV_ModEnd> ( x -> left_context
<S2SV_ModStart> <S2SV_null> int vp8_denoiser_filter_sse2 ( unsigned char * mc_running_avg_y , int mc_avg_y_stride , unsigned char * running_avg_y , int avg_y_stride , unsigned char * sig , int sig_stride , unsigned int motion_magnitude , int increase_denoising ) { unsigned char * running_avg_y_start = running_avg_y ; unsigned char * sig_start = sig ; unsigned int sum_diff_thresh <S2SV_ModEnd> ; int r ; <S2SV_ModStart> ; int r ; int shift_inc = ( increase_denoising && <S2SV_ModEnd> motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) <S2SV_ModStart> <= MOTION_MAGNITUDE_THRESHOLD ) ? 1 : 0 ; __m128i acc_diff = _mm_setzero_si128 ( ) ; const __m128i k_0 = _mm_setzero_si128 ( ) ; const __m128i k_4 = _mm_set1_epi8 ( 4 + shift_inc ) ; const __m128i k_8 = _mm_set1_epi8 ( 8 ) ; const __m128i k_16 = _mm_set1_epi8 ( 16 ) ; const __m128i l3 = _mm_set1_epi8 ( ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) ? 7 + shift_inc <S2SV_ModEnd> : 6 ) ; <S2SV_ModStart> avg_y_stride ; } { unsigned int abs_sum_diff = abs_sum_diff_16x1 ( acc_diff ) ; sum_diff_thresh = SUM_DIFF_THRESHOLD ; if ( increase_denoising ) sum_diff_thresh = SUM_DIFF_THRESHOLD_HIGH ; if ( abs_sum_diff > sum_diff_thresh ) { int delta = ( ( abs_sum_diff - sum_diff_thresh ) >> 8 ) + 1 ; if ( delta < 4 ) { const __m128i k_delta = _mm_set1_epi8 ( delta ) ; sig -= sig_stride * 16 ; mc_running_avg_y -= mc_avg_y_stride * 16 ; running_avg_y -= avg_y_stride * 16 ; for ( r = 0 ; r < 16 ; ++ r ) { __m128i v_running_avg_y = _mm_loadu_si128 ( ( __m128i * ) ( & running_avg_y [ 0 ] ) ) ; const __m128i v_sig = _mm_loadu_si128 ( ( __m128i * ) ( & sig [ 0 ] ) ) ; const __m128i v_mc_running_avg_y = _mm_loadu_si128 ( ( __m128i * ) ( & mc_running_avg_y [ 0 ] ) ) ; const __m128i pdiff = _mm_subs_epu8 ( v_mc_running_avg_y , v_sig ) ; const __m128i ndiff = _mm_subs_epu8 ( v_sig , v_mc_running_avg_y ) ; const __m128i diff_sign = _mm_cmpeq_epi8 ( pdiff , k_0 ) ; const __m128i adj = _mm_min_epu8 ( _mm_or_si128 ( pdiff , ndiff ) , k_delta ) ; __m128i padj , nadj ; padj = _mm_andnot_si128 ( diff_sign , adj ) ; nadj = _mm_and_si128 ( diff_sign , adj ) ; v_running_avg_y = _mm_subs_epu8 ( v_running_avg_y , padj ) ; v_running_avg_y = _mm_adds_epu8 ( v_running_avg_y , nadj ) ; _mm_storeu_si128 ( ( __m128i * ) running_avg_y , v_running_avg_y ) ; acc_diff = _mm_subs_epi8 ( acc_diff , padj ) ; acc_diff = _mm_adds_epi8 ( acc_diff , nadj ) ; sig += sig_stride ; mc_running_avg_y += mc_avg_y_stride ; running_avg_y += avg_y_stride ; } abs_sum_diff = abs_sum_diff_16x1 ( acc_diff ) ; if ( abs_sum_diff > sum_diff_thresh ) <S2SV_ModEnd> { return COPY_BLOCK ; <S2SV_ModStart> COPY_BLOCK ; } } else { return COPY_BLOCK ; } } } vp8_copy_mem16x16 ( running_avg_y_start , avg_y_stride , sig_start <S2SV_ModEnd> , sig_stride ) ;
<S2SV_ModStart> * yv12 ) { const int y_w = img -> d_w ; const int y_h = img -> d_h ; const int uv_w = ( img -> d_w + 1 ) / 2 ; const int uv_h = ( img -> d_h + 1 ) / 2 ; <S2SV_ModStart> yv12 -> y_crop_width = y_w <S2SV_ModEnd> ; yv12 -> y_crop_height <S2SV_ModStart> yv12 -> y_crop_height = y_h <S2SV_ModEnd> ; yv12 -> y_width <S2SV_ModStart> yv12 -> y_width = y_w <S2SV_ModEnd> ; yv12 -> y_height <S2SV_ModStart> yv12 -> y_height = y_h ; yv12 -> uv_crop_width = uv_w ; yv12 -> uv_crop_height = uv_h <S2SV_ModEnd> ; yv12 -> uv_width <S2SV_ModStart> yv12 -> uv_width = uv_w ; yv12 -> uv_height = uv_h ; yv12 -> y_stride = img -> stride [ VPX_PLANE_Y ] ; yv12 -> uv_stride = img -> stride [ VPX_PLANE_U ] ; yv12 -> border = ( img -> stride [ VPX_PLANE_Y ] - img -> w <S2SV_ModEnd> ) / 2 ; <S2SV_ModStart> ) / 2 ; <S2SV_ModEnd> return res ; }
<S2SV_ModStart> mr_low_res_mode_info ; } # else ( void ) mr_cfg ; # <S2SV_ModStart> = vp8_cfg . tuning ; oxcf -> screen_content_mode = vp8_cfg . screen_content_mode
<S2SV_ModStart> num , 1 , 1000000000 <S2SV_ModEnd> ) ; RANGE_CHECK_HI ( <S2SV_ModStart> , 0 , 63 ) ; RANGE_CHECK_HI ( vp8_cfg , screen_content_mode , 2 <S2SV_ModStart> i - 1 ] && cfg -> rc_target_bitrate > 0
<S2SV_ModStart> -> cpi ) ; vpx_free <S2SV_ModEnd> ( ctx ) ;
<S2SV_ModStart> ) ; if ( ! flags ) { flags = ctx -> control_frame_flags ; } ctx -> control_frame_flags = 0 ; res = set_reference_and_update ( ctx , flags ) ; <S2SV_ModEnd> if ( ctx -> <S2SV_ModStart> = ( vpx_codec_pts_t ) 10000000 <S2SV_ModEnd> * ctx -> cfg
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> res = VPX_CODEC_OK ; vp8_rtcd ( ) ; vpx_dsp_rtcd ( ) ; vpx_scale_rtcd ( ) ; if ( ! ctx -> priv ) { <S2SV_ModStart> struct vpx_codec_alg_priv * priv = ( struct vpx_codec_alg_priv * ) vpx_calloc ( 1 , sizeof ( * priv <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ctx -> priv = ( vpx_codec_priv_t * ) <S2SV_ModEnd> priv ; ctx -> <S2SV_ModStart> . enc ) { priv <S2SV_ModEnd> -> cfg = * <S2SV_ModStart> . enc = & priv -> cfg ; } <S2SV_ModEnd> priv -> vp8_cfg = <S2SV_ModStart> priv -> vp8_cfg = default_extracfg <S2SV_ModEnd> ; priv -> vp8_cfg <S2SV_ModStart> { set_vp8e_config ( & priv -> oxcf , priv -> cfg , priv <S2SV_ModEnd> -> vp8_cfg , mr_cfg <S2SV_ModStart> , mr_cfg ) ; priv -> cpi <S2SV_ModEnd> = vp8_create_compressor ( & <S2SV_ModStart> = vp8_create_compressor ( & priv <S2SV_ModEnd> -> oxcf ) ; <S2SV_ModStart> ; if ( ! priv -> cpi <S2SV_ModEnd> ) res = VPX_CODEC_MEM_ERROR <S2SV_ModStart> res = VPX_CODEC_MEM_ERROR ; <S2SV_ModEnd> } } return res
<S2SV_ModStart> VPX_CODEC_OK ; } # else ( void ) cfg ; ( void ) mem_loc ; #
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> res ; if ( <S2SV_ModEnd> cfg -> g_w != <S2SV_ModStart> -> cfg . g_w || <S2SV_ModEnd> cfg -> g_h != <S2SV_ModStart> cfg . g_h ) { if <S2SV_ModEnd> ( cfg -> g_lag_in_frames <S2SV_ModStart> g_pass != VPX_RC_ONE_PASS ) <S2SV_ModEnd> ERROR ( "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" ) <S2SV_ModStart> ( "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" ) ; if ( ( ctx -> cpi -> initial_width && ( int ) cfg -> g_w > ctx -> cpi -> initial_width ) || ( ctx -> cpi -> initial_height && ( int ) cfg -> g_h > ctx -> cpi -> initial_height ) ) ERROR ( "Cannot<S2SV_blank>increase<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>their<S2SV_blank>initial<S2SV_blank>values" ) ; }
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args ) <S2SV_ModStart> , vp8_postproc_cfg_t * ) <S2SV_ModEnd> ; if ( data <S2SV_ModStart> ; ( void ) <S2SV_ModEnd> args ; return VPX_CODEC_INCAPABLE
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> * yv12 ) { const int y_w = img -> d_w ; const int y_h = img -> d_h ; const int uv_w = ( img -> d_w + 1 ) / 2 ; const int uv_h = ( img -> d_h + 1 ) / 2 ; <S2SV_ModStart> yv12 -> y_crop_width = y_w ; yv12 -> y_crop_height = y_h ; yv12 -> y_width = y_w ; yv12 -> y_height = y_h ; yv12 -> uv_crop_width = uv_w ; yv12 -> uv_crop_height = uv_h ; yv12 -> uv_width = uv_w ; yv12 -> uv_height = uv_h ; yv12 -> y_stride = img -> stride [ VPX_PLANE_Y ] ; yv12 -> uv_stride = img -> stride [ VPX_PLANE_U ] ; yv12 -> border = ( img -> stride [ VPX_PLANE_Y ] - img -> d_w ) / 2 ; <S2SV_ModEnd> return res ; }
<S2SV_ModStart> == 0 ) { memset <S2SV_ModEnd> ( ( void * <S2SV_ModStart> ptrs ) ) ; memset <S2SV_ModEnd> ( ctx -> fragments <S2SV_ModStart> -> fragments . enabled && ( data == NULL && data_sz == 0 ) ) { return 0 ; } if ( ! ctx -> fragments . enabled
<S2SV_ModStart> h ; if ( ! ctx -> fragments . enabled && ( data == NULL && data_sz == 0 ) ) { return 0 ; } if ( <S2SV_ModStart> ( ! res && ! ctx -> decoder_init <S2SV_ModEnd> ) { VP8D_CONFIG oxcf <S2SV_ModStart> ) ; ctx -> decoder_init = 1 ; } if ( ctx -> decoder_init ) { ctx -> <S2SV_ModStart> = ctx -> decrypt_state <S2SV_ModEnd> ; } if ( <S2SV_ModStart> setjmp = 0 ; vp8_clear_system_state ( ) ;
<S2SV_ModStart> * ctx ) { <S2SV_ModEnd> vp8_remove_decoder_instances ( & ctx <S2SV_ModStart> -> yv12_frame_buffers ) ; vpx_free ( ctx ) ; <S2SV_ModEnd> return VPX_CODEC_OK ; }
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args ) <S2SV_ModStart> && pbi ) { const YV12_BUFFER_CONFIG * const frame <S2SV_ModEnd> = pbi -> common <S2SV_ModStart> -> common . frame_to_show ; if ( frame == NULL ) return VPX_CODEC_ERROR ; * corrupted = frame
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> res = VPX_CODEC_OK ; vpx_codec_alg_priv_t * priv = NULL ; <S2SV_ModStart> vp8_rtcd ( ) ; vpx_dsp_rtcd ( ) ; vpx_scale_rtcd ( ) ; <S2SV_ModStart> -> priv ) { vp8_init_ctx ( ctx ) ; priv = ( vpx_codec_alg_priv_t * ) ctx -> priv ; priv <S2SV_ModEnd> -> fragments . count <S2SV_ModStart> count = 0 ; priv <S2SV_ModEnd> -> fragments . enabled <S2SV_ModStart> . enabled = ( priv <S2SV_ModEnd> -> base . init_flags <S2SV_ModStart> & VPX_CODEC_USE_INPUT_FRAGMENTS ) ; } else { priv = ( vpx_codec_alg_priv_t * ) ctx -> priv ; } priv <S2SV_ModEnd> -> yv12_frame_buffers . use_frame_threads <S2SV_ModStart> ctx -> priv -> <S2SV_ModEnd> init_flags & VPX_CODEC_USE_FRAME_THREADING ) <S2SV_ModStart> & VPX_CODEC_USE_FRAME_THREADING ) ; priv <S2SV_ModEnd> -> yv12_frame_buffers . use_frame_threads <S2SV_ModStart> 0 ; if ( priv <S2SV_ModEnd> -> yv12_frame_buffers . use_frame_threads <S2SV_ModStart> ctx -> priv -> <S2SV_ModEnd> init_flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) <S2SV_ModStart> init_flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) || <S2SV_ModEnd> ( ctx -> priv <S2SV_ModStart> ctx -> priv -> <S2SV_ModEnd> init_flags & VPX_CODEC_USE_INPUT_FRAGMENTS )
<S2SV_ModStart> ( vpx_codec_ctx_t * ctx ) { vpx_codec_alg_priv_t * priv = ( vpx_codec_alg_priv_t * ) vpx_calloc ( 1 , sizeof ( * priv ) ) <S2SV_ModEnd> ; ctx -> priv <S2SV_ModStart> ctx -> priv = ( vpx_codec_priv_t * ) priv <S2SV_ModEnd> ; ctx -> priv <S2SV_ModStart> ctx -> init_flags ; priv -> si . sz = sizeof ( priv -> si ) ; priv -> decrypt_cb = NULL ; priv -> decrypt_state = NULL ; <S2SV_ModStart> . dec ) { priv <S2SV_ModEnd> -> cfg = * <S2SV_ModStart> . dec = & priv <S2SV_ModEnd> -> cfg ; }
<S2SV_ModStart> vpx_codec_stream_info_t * si , vpx_decrypt_cb <S2SV_ModEnd> decrypt_cb , void * <S2SV_ModStart> { int n = MIN ( sizeof ( clear_buffer ) , data_sz ) <S2SV_ModEnd> ; decrypt_cb ( decrypt_state <S2SV_ModStart> ] != 0x2a ) return <S2SV_ModEnd> VPX_CODEC_UNSUP_BITSTREAM ; si ->
<S2SV_ModStart> void ) si ; ( void ) flags ;
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> va_list args ) { vpx_decrypt_init <S2SV_ModEnd> * init = va_arg <S2SV_ModStart> va_arg ( args , vpx_decrypt_init <S2SV_ModEnd> * ) ; if
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args ) <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; # else ( void ) ctx ; ( void ) args ;
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> y_stride ; img -> bit_depth = 8 ; img ->
<S2SV_ModStart> * cm ) { vp9_free_context_buffers <S2SV_ModEnd> ( cm ) ; <S2SV_ModStart> ( cm ) ; vpx_free ( cm -> fc ) ; cm -> fc = NULL ; vpx_free ( cm -> frame_contexts ) ; cm -> frame_contexts = NULL <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_above_block_mode ( const MODE_INFO
<S2SV_ModStart> plane < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane ( xd
<S2SV_ModStart> ? get_uv_tx_size ( mbmi , pd <S2SV_ModStart> ) ; int i = 0 , r , c ; const int max_blocks_wide = num_4x4_w + <S2SV_ModEnd> ( xd -> mb_to_right_edge <S2SV_ModStart> ( xd -> mb_to_right_edge >= 0 ? 0 : <S2SV_ModEnd> xd -> mb_to_right_edge >> <S2SV_ModStart> subsampling_x ) ) ; const int max_blocks_high = num_4x4_h + <S2SV_ModEnd> ( xd -> mb_to_bottom_edge <S2SV_ModStart> ( xd -> mb_to_bottom_edge >= 0 ? 0 : <S2SV_ModEnd> xd -> mb_to_bottom_edge >> <S2SV_ModStart> subsampling_y ) ) ; const int extra_step = ( ( num_4x4_w - max_blocks_wide ) >> tx_size ) * step <S2SV_ModEnd> ; for ( r <S2SV_ModStart> r = 0 ; r < max_blocks_high ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < max_blocks_wide ; c += ( 1 << tx_size ) ) { <S2SV_ModEnd> visit ( plane , <S2SV_ModStart> += step ; } i += extra_step <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const MODE_INFO
<S2SV_ModStart> ; } else { memset <S2SV_ModEnd> ( a , has_eob <S2SV_ModStart> ; } else { memset <S2SV_ModEnd> ( l , has_eob
<S2SV_ModStart> : 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) { int mi_row , mi_col <S2SV_ModEnd> ; MODE_INFO * * <S2SV_ModStart> ; MODE_INFO * * mi <S2SV_ModEnd> = cm -> mi_grid_visible <S2SV_ModStart> descriptor , file ) <S2SV_ModEnd> ; for ( mi_row <S2SV_ModStart> * ) ( & mi [ 0 <S2SV_ModEnd> ] -> mbmi ) <S2SV_ModStart> ) ) ) ; mi <S2SV_ModEnd> ++ ; } fprintf <S2SV_ModStart> , "\\n" ) ; mi <S2SV_ModEnd> += 8 ; }
<S2SV_ModStart> ; int mi_col ; <S2SV_ModEnd> FILE * mvs = <S2SV_ModStart> ; MODE_INFO * * mi <S2SV_ModEnd> = cm -> mi_grid_visible <S2SV_ModStart> cm , mvs , "Ref<S2SV_blank>frame:" , offsetof ( MB_MODE_INFO , ref_frame [ 0 ] ) ) ; print_mi_data ( cm , mvs , "Transform:" , offsetof ( MB_MODE_INFO , tx_size ) ) ; print_mi_data ( cm , mvs , "UV<S2SV_blank>Modes:" , offsetof ( MB_MODE_INFO , uv_mode ) ) ; log_frame_info ( cm , "Skips:" <S2SV_ModEnd> , mvs ) ; <S2SV_ModStart> fprintf ( mvs , "S<S2SV_blank>" <S2SV_ModEnd> ) ; for ( <S2SV_ModStart> fprintf ( mvs , "%2d<S2SV_blank>" , mi [ 0 <S2SV_ModEnd> ] -> mbmi . <S2SV_ModStart> ] -> mbmi . skip ) ; mi <S2SV_ModEnd> ++ ; } fprintf <S2SV_ModStart> , "\\n" ) ; mi <S2SV_ModEnd> += 8 ; } <S2SV_ModStart> , "\\n" ) ; log_frame_info ( cm , "Vectors<S2SV_blank>" , mvs ) ; mi = cm -> mi_grid_visible ; for ( mi_row = 0 ; mi_row < rows ; mi_row ++ ) { fprintf ( mvs , "V<S2SV_blank>" ) ; for ( mi_col = 0 ; mi_col < cols ; mi_col ++ ) { fprintf ( mvs , "%4d:%4d<S2SV_blank>" , mi [ 0 ] -> mbmi . mv [ 0 ] . as_mv . row , mi [ 0 ] -> mbmi . mv [ 0 ] . as_mv . col ) ; mi ++ ; } fprintf ( mvs , "\\n" ) ; mi += 8 ; } fprintf ( mvs , "\\n" ) ;
<S2SV_ModStart> = cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size ]
<S2SV_ModStart> static void extend_to_full_distribution ( vpx_prob * probs , vpx_prob p ) { memcpy <S2SV_ModEnd> ( probs , vp9_pareto8_full <S2SV_ModStart> MODEL_NODES * sizeof ( vpx_prob <S2SV_ModEnd> ) ) ; }
<S2SV_ModStart> ( cm -> fc -> <S2SV_ModEnd> coef_probs [ TX_4X4 ] <S2SV_ModStart> ( cm -> fc -> <S2SV_ModEnd> coef_probs [ TX_8X8 ] <S2SV_ModStart> ( cm -> fc -> <S2SV_ModEnd> coef_probs [ TX_16X16 ] <S2SV_ModStart> ( cm -> fc -> <S2SV_ModEnd> coef_probs [ TX_32X32 ]
<S2SV_ModStart> void vp9_model_to_full_probs ( const vpx_prob * model , vpx_prob <S2SV_ModEnd> * full ) { <S2SV_ModStart> full != model ) memcpy <S2SV_ModEnd> ( full , model <S2SV_ModStart> model , sizeof ( vpx_prob <S2SV_ModEnd> ) * UNCONSTRAINED_NODES )
<S2SV_ModStart> FRAME_CONTEXT * fc = <S2SV_ModEnd> cm -> fc ; <S2SV_ModStart> [ i ] = mode_mv_merge_probs <S2SV_ModEnd> ( pre_fc -> intra_inter_prob <S2SV_ModStart> [ i ] = mode_mv_merge_probs <S2SV_ModEnd> ( pre_fc -> comp_inter_prob <S2SV_ModStart> [ i ] = mode_mv_merge_probs <S2SV_ModEnd> ( pre_fc -> comp_ref_prob <S2SV_ModStart> [ j ] = mode_mv_merge_probs ( <S2SV_ModEnd> pre_fc -> single_ref_prob [ <S2SV_ModStart> ; i ++ ) vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_inter_mode_tree , pre_fc <S2SV_ModStart> ; i ++ ) vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_intra_mode_tree , pre_fc <S2SV_ModStart> ; ++ i ) vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_intra_mode_tree , pre_fc <S2SV_ModStart> ; i ++ ) vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_partition_tree , pre_fc <S2SV_ModStart> ; i ++ ) vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_switchable_interp_tree , pre_fc <S2SV_ModStart> [ j ] = mode_mv_merge_probs ( <S2SV_ModEnd> pre_fc -> tx_probs . <S2SV_ModStart> [ j ] = mode_mv_merge_probs ( <S2SV_ModEnd> pre_fc -> tx_probs . <S2SV_ModStart> [ j ] = mode_mv_merge_probs ( <S2SV_ModEnd> pre_fc -> tx_probs . <S2SV_ModStart> [ i ] = mode_mv_merge_probs ( <S2SV_ModEnd> pre_fc -> skip_probs [
<S2SV_ModStart> ( cm -> last_frame_seg_map && ! cm -> frame_parallel_decode ) memset <S2SV_ModEnd> ( cm -> last_frame_seg_map <S2SV_ModStart> ( cm -> last_frame_seg_map , 0 , ( cm -> mi_rows * cm -> mi_cols ) ) ; if ( cm -> current_frame_seg_map ) memset ( cm -> current_frame_seg_map <S2SV_ModStart> ( cm ) ; init_mode_probs ( <S2SV_ModEnd> cm -> fc ) <S2SV_ModStart> vp9_init_mv_probs ( cm ) ; cm -> fc -> initialized = 1 <S2SV_ModStart> [ i ] = * <S2SV_ModStart> -> frame_context_idx ] = * <S2SV_ModStart> frame_is_intra_only ( cm ) && cm -> prev_mip && ! cm -> frame_parallel_decode ) memset ( cm -> prev_mip , 0 , <S2SV_ModEnd> cm -> mi_stride * <S2SV_ModStart> * cm -> prev_mip <S2SV_ModEnd> ) ) ; vp9_zero
<S2SV_ModStart> & cm -> fc -> <S2SV_ModEnd> nmvc ; const nmv_context <S2SV_ModStart> counts . mv ; vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_mv_joint_tree , pre_fc <S2SV_ModStart> comp -> sign = mode_mv_merge_probs <S2SV_ModEnd> ( pre_comp -> sign <S2SV_ModStart> -> sign ) ; vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_mv_class_tree , pre_comp <S2SV_ModStart> -> classes ) ; vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_mv_class0_tree , pre_comp <S2SV_ModStart> [ j ] = mode_mv_merge_probs <S2SV_ModEnd> ( pre_comp -> bits <S2SV_ModStart> ; ++ j ) vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_mv_fp_tree , pre_comp <S2SV_ModStart> j ] ) ; vpx_tree_merge_probs <S2SV_ModEnd> ( vp9_mv_fp_tree , pre_comp <S2SV_ModStart> comp -> class0_hp = mode_mv_merge_probs <S2SV_ModEnd> ( pre_comp -> class0_hp <S2SV_ModStart> comp -> hp = mode_mv_merge_probs <S2SV_ModEnd> ( pre_comp -> hp
<S2SV_ModStart> { cm -> fc -> <S2SV_ModEnd> nmvc = default_nmv_context ;
<S2SV_ModStart> return - 1 ; memset ( int_fb_list -> int_fb [ i ] . data , 0 , min_size ) ;
<S2SV_ModStart> void ) cb_priv ; if ( int_fb )
<S2SV_ModStart> void vp9_idct16x16_add ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> eob == 1 ) vpx_idct16x16_1_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> eob <= 10 ) vpx_idct16x16_10_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> stride ) ; else vpx_idct16x16_256_add <S2SV_ModEnd> ( input , dest
<S2SV_ModStart> void vp9_idct32x32_add ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> eob == 1 ) vpx_idct32x32_1_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> eob <= 34 ) vpx_idct32x32_34_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> stride ) ; else vpx_idct32x32_1024_add <S2SV_ModEnd> ( input , dest
<S2SV_ModStart> void vp9_idct4x4_add ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> eob > 1 ) vpx_idct4x4_16_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> stride ) ; else vpx_idct4x4_1_add <S2SV_ModEnd> ( input , dest
<S2SV_ModStart> void vp9_idct8x8_add ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> eob == 1 ) vpx_idct8x8_1_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> if ( eob <= 12 ) vpx_idct8x8_12_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> stride ) ; else vpx_idct8x8_64_add <S2SV_ModEnd> ( input , dest
<S2SV_ModStart> void vp9_iht16x16_256_add_c ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> i , j ; tran_low_t <S2SV_ModEnd> out [ 16 * <S2SV_ModStart> * 16 ] ; tran_low_t <S2SV_ModEnd> * outptr = out <S2SV_ModStart> outptr = out ; tran_low_t <S2SV_ModEnd> temp_in [ 16 ] <S2SV_ModStart> ; ++ j ) { <S2SV_ModStart> + i ] = clip_pixel_add ( <S2SV_ModEnd> dest [ j * <S2SV_ModStart> stride + i ] , ROUND_POWER_OF_TWO ( temp_out [ j ] , 6 ) ) ; } <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TX_TYPE tx_type , const tran_low_t <S2SV_ModEnd> * input , uint8_t
<S2SV_ModStart> void vp9_iht4x4_16_add_c ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> ] = { { idct4_c , idct4_c } , { iadst4_c , idct4_c } , { idct4_c , iadst4_c } , { iadst4_c , iadst4_c <S2SV_ModEnd> } } ; int <S2SV_ModStart> i , j ; tran_low_t <S2SV_ModEnd> out [ 4 * <S2SV_ModStart> * 4 ] ; tran_low_t <S2SV_ModEnd> * outptr = out <S2SV_ModStart> outptr = out ; tran_low_t <S2SV_ModEnd> temp_in [ 4 ] <S2SV_ModStart> ; ++ j ) { <S2SV_ModStart> + i ] = clip_pixel_add ( <S2SV_ModEnd> dest [ j * <S2SV_ModStart> stride + i ] , ROUND_POWER_OF_TWO ( temp_out [ j ] , 4 ) ) ; } <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TX_TYPE tx_type , const tran_low_t <S2SV_ModEnd> * input , uint8_t
<S2SV_ModStart> void vp9_iht8x8_64_add_c ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> i , j ; tran_low_t <S2SV_ModEnd> out [ 8 * <S2SV_ModStart> * 8 ] ; tran_low_t <S2SV_ModEnd> * outptr = out <S2SV_ModStart> outptr = out ; tran_low_t <S2SV_ModEnd> temp_in [ 8 ] <S2SV_ModStart> ; ++ j ) { <S2SV_ModStart> + i ] = clip_pixel_add ( <S2SV_ModEnd> dest [ j * <S2SV_ModStart> stride + i ] , ROUND_POWER_OF_TWO ( temp_out [ j ] , 5 ) ) ; } <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> TX_TYPE tx_type , const tran_low_t <S2SV_ModEnd> * input , uint8_t
<S2SV_ModStart> void vp9_iwht4x4_add ( const tran_low_t <S2SV_ModEnd> * input , uint8_t <S2SV_ModStart> eob > 1 ) vpx_iwht4x4_16_add <S2SV_ModEnd> ( input , dest <S2SV_ModStart> stride ) ; else vpx_iwht4x4_1_add <S2SV_ModEnd> ( input , dest
<S2SV_ModStart> const TX_SIZE tx_size_uv = get_uv_tx_size_impl ( tx_size_y , block_size , 1 , 1 <S2SV_ModEnd> ) ; const int <S2SV_ModStart> i ++ ) { memset <S2SV_ModEnd> ( & lfm -> <S2SV_ModStart> [ block_size ] & 0xffffffffffffffffULL <S2SV_ModEnd> ) << shift_y ;
<S2SV_ModStart> i ++ ) { memset <S2SV_ModEnd> ( & lfm -> <S2SV_ModStart> [ block_size ] & 0xffffffffffffffffULL <S2SV_ModEnd> ) << shift_y ;
<S2SV_ModStart> == 3 ) { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> ; } else { vpx_lpf_horizontal_16 <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> + 1 ) ; vpx_lpf_horizontal_8_dual <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> == 3 ) { vpx_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , lfin -> mblim , lfin -> lim , lfin -> hev_thr ) ; } else { if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s + 4 <S2SV_ModStart> mask_4x4_int & 2 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s + 8 <S2SV_ModStart> ; } else { vpx_lpf_horizontal_8 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s + 4 <S2SV_ModStart> + 1 ) ; vpx_lpf_horizontal_4_dual <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> == 3 ) { vpx_lpf_horizontal_4_dual ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , lfin -> mblim , lfin -> lim , lfin -> hev_thr ) ; } else { if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s + 4 <S2SV_ModStart> mask_4x4_int & 2 ) vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s + 8 <S2SV_ModStart> ; } else { vpx_lpf_horizontal_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; if ( mask_4x4_int & 1 ) vpx_lpf_horizontal_4 ( s + 4 * pitch , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; } } else if ( mask_4x4_int & 1 ) { vpx_lpf_horizontal_4 <S2SV_ModEnd> ( s + 4
<S2SV_ModStart> & 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_4 ( s , pitch , lfi -> mblim , lfi -> lim , lfi -> hev_thr , 1 ) ; } } if ( mask_4x4_int & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s + 4
<S2SV_ModStart> static void filter_selectively_vert_row2 ( int subsampling_factor <S2SV_ModEnd> , uint8_t * s <S2SV_ModStart> const int mask_shift = subsampling_factor <S2SV_ModEnd> ? 4 : 8 <S2SV_ModStart> const int mask_cutoff = subsampling_factor <S2SV_ModEnd> ? 0xf : 0xff <S2SV_ModStart> const int lfl_forward = subsampling_factor <S2SV_ModEnd> ? 4 : 8 <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_16_dual <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> ; } else { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s + 8 <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_8_dual <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> ; } else { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s + 8 <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_4_dual <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s , pitch <S2SV_ModStart> ; } else { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s + 8 <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_4_dual <S2SV_ModEnd> ( s + 4 <S2SV_ModStart> & 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s + 4 <S2SV_ModStart> ; } else { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s + 8
<S2SV_ModStart> block_inside_limit = 1 ; memset <S2SV_ModEnd> ( lfi -> lfthr <S2SV_ModStart> , SIMD_WIDTH ) ; memset <S2SV_ModEnd> ( lfi -> lfthr
<S2SV_ModStart> <S2SV_null> void vp9_loop_filter_frame ( YV12_BUFFER_CONFIG * frame , <S2SV_ModStart> ) ; vp9_loop_filter_rows ( frame <S2SV_ModEnd> , cm , xd <S2SV_ModStart> , cm , xd -> plane
<S2SV_ModStart> default_filt_lvl ; if ( segfeature_active <S2SV_ModEnd> ( seg , seg_id <S2SV_ModStart> const int data = get_segdata <S2SV_ModEnd> ( seg , seg_id <S2SV_ModStart> -> mode_ref_delta_enabled ) { memset <S2SV_ModEnd> ( lfi -> lvl
<S2SV_ModStart> ; lvl ++ ) memset <S2SV_ModEnd> ( lfi -> lfthr
<S2SV_ModStart> <S2SV_null> void vp9_loop_filter_rows ( <S2SV_ModEnd> YV12_BUFFER_CONFIG * frame_buffer , <S2SV_ModStart> VP9_COMMON * cm , struct macroblockd_plane planes [ MAX_MB_PLANE ] <S2SV_ModEnd> , int start , <S2SV_ModStart> 1 : MAX_MB_PLANE ; enum lf_path path <S2SV_ModEnd> ; LOOP_FILTER_MASK lfm ; <S2SV_ModStart> LOOP_FILTER_MASK lfm ; int mi_row , mi_col ; if ( y_only ) path = LF_PATH_444 ; else if ( planes <S2SV_ModEnd> [ 1 ] . <S2SV_ModStart> subsampling_y == 1 && planes <S2SV_ModEnd> [ 1 ] . <S2SV_ModStart> subsampling_x == 1 ) path = LF_PATH_420 ; else if ( planes [ 1 ] . subsampling_y == 0 && planes [ 1 ] . subsampling_x == 0 ) path = LF_PATH_444 ; else path = LF_PATH_SLOW <S2SV_ModStart> { MODE_INFO * * mi <S2SV_ModEnd> = cm -> mi_grid_visible <S2SV_ModStart> plane ; vp9_setup_dst_planes ( planes <S2SV_ModEnd> , frame_buffer , mi_row <S2SV_ModStart> , mi_col ) ; <S2SV_ModEnd> vp9_setup_mask ( cm , <S2SV_ModStart> mi_row , mi_col , mi <S2SV_ModEnd> + mi_col , cm <S2SV_ModStart> & lfm ) ; vp9_filter_block_plane_ss00 ( cm , & planes [ 0 ] , mi_row , & lfm ) ; <S2SV_ModStart> for ( plane = 1 <S2SV_ModEnd> ; plane < num_planes <S2SV_ModStart> ++ plane ) { switch ( path ) { case LF_PATH_420 : vp9_filter_block_plane_ss11 ( cm , & planes [ plane ] , mi_row , & lfm ) ; break ; case LF_PATH_444 : vp9_filter_block_plane_ss00 ( cm , & planes [ plane ] , mi_row , & lfm ) ; break ; case LF_PATH_SLOW : vp9_filter_block_plane_non420 ( cm , & planes [ plane ] , mi <S2SV_ModEnd> + mi_col , mi_row <S2SV_ModStart> , mi_col ) ; break ; }
<S2SV_ModStart> <S2SV_null> int vp9_loop_filter_worker ( <S2SV_ModEnd> LFWorkerData * const lf_data <S2SV_ModStart> LFWorkerData * const lf_data , void * unused ) { ( void ) unused <S2SV_ModEnd> ; vp9_loop_filter_rows ( lf_data <S2SV_ModStart> lf_data -> cm , lf_data -> planes <S2SV_ModEnd> , lf_data -> start
<S2SV_ModStart> , MODE_INFO * * mi <S2SV_ModEnd> , const int mode_info_stride <S2SV_ModStart> * * mip = mi <S2SV_ModEnd> ; MODE_INFO * * <S2SV_ModStart> * * mip2 = mi <S2SV_ModEnd> ; const int offset_32 <S2SV_ModStart> vp9_zero ( * lfm ) ; assert ( mip [ 0 ] != NULL <S2SV_ModStart> 1 ) ) * 0x0101010101010101ULL <S2SV_ModEnd> ; const uint16_t mask_uv <S2SV_ModStart> [ i ] &= 0xfefefefefefefefeULL <S2SV_ModEnd> ; lfm -> left_uv
<S2SV_ModStart> qindex , int delta , vpx_bit_depth_t bit_depth ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> return ac_qlookup [ clamp <S2SV_ModStart> MAXQ ) ] ; case VPX_BITS_10 : return ac_qlookup_10 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; case VPX_BITS_12 : return ac_qlookup_12 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; default : assert ( 0 && "bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>or<S2SV_blank>VPX_BITS_12" ) ; return - 1 ; } # else ( void ) bit_depth ; return ac_qlookup [ clamp ( qindex + delta , 0 , MAXQ ) ] ; # endif
<S2SV_ModStart> qindex , int delta , vpx_bit_depth_t bit_depth ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> return dc_qlookup [ clamp <S2SV_ModStart> MAXQ ) ] ; case VPX_BITS_10 : return dc_qlookup_10 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; case VPX_BITS_12 : return dc_qlookup_12 [ clamp ( qindex + delta , 0 , MAXQ ) ] ; default : assert ( 0 && "bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>or<S2SV_blank>VPX_BITS_12" ) ; return - 1 ; } # else ( void ) bit_depth ; return dc_qlookup [ clamp ( qindex + delta , 0 , MAXQ ) ] ; # endif
<S2SV_ModStart> ) { if ( segfeature_active <S2SV_ModEnd> ( seg , segment_id <S2SV_ModStart> const int data = get_segdata <S2SV_ModEnd> ( seg , segment_id
<S2SV_ModStart> InterpKernel * kernel = vp9_filter_kernels [ <S2SV_ModEnd> mi -> mbmi . <S2SV_ModStart> -> mbmi . interp_filter ] <S2SV_ModEnd> ; int ref ; <S2SV_ModStart> sb_type < BLOCK_8X8 ? average_split_mvs ( pd , mi , ref , block <S2SV_ModEnd> ) : mi -> <S2SV_ModStart> subpel_x , subpel_y ; const int is_scaled = vp9_is_scaled ( sf ) ; if ( is_scaled <S2SV_ModEnd> ) { pre = <S2SV_ModStart> >> SUBPEL_BITS ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { high_inter_predictor ( pre , pre_buf -> stride , dst , dst_buf -> stride , subpel_x , subpel_y , sf , w , h , ref , kernel , xs , ys , xd -> bd ) ; } else { <S2SV_ModStart> , ys ) ; } # else inter_predictor ( pre , pre_buf -> stride , dst , dst_buf -> stride , subpel_x , subpel_y , sf , w , h , ref , kernel , xs , ys ) ; # endif
<S2SV_ModStart> <S2SV_null> void vp9_setup_dst_planes ( struct macroblockd_plane planes [ MAX_MB_PLANE ] <S2SV_ModEnd> , const YV12_BUFFER_CONFIG * <S2SV_ModStart> * const buffers [ MAX_MB_PLANE <S2SV_ModEnd> ] = { src <S2SV_ModStart> , src -> v_buffer <S2SV_ModEnd> } ; const int <S2SV_ModStart> const int strides [ MAX_MB_PLANE <S2SV_ModEnd> ] = { src <S2SV_ModStart> , src -> uv_stride <S2SV_ModEnd> } ; int i <S2SV_ModStart> const pd = & planes <S2SV_ModEnd> [ i ] ;
<S2SV_ModStart> * const buffers [ MAX_MB_PLANE <S2SV_ModEnd> ] = { src <S2SV_ModStart> , src -> v_buffer <S2SV_ModEnd> } ; const int <S2SV_ModStart> const int strides [ MAX_MB_PLANE <S2SV_ModEnd> ] = { src <S2SV_ModStart> , src -> uv_stride <S2SV_ModEnd> } ; for (
<S2SV_ModStart> , int dst_stride , PREDICTION_MODE <S2SV_ModEnd> mode , TX_SIZE tx_size <S2SV_ModStart> { int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , uint8_t <S2SV_ModStart> , uint8_t , left_col [ 32 ] ) ; DECLARE_ALIGNED ( 16 , uint8_t , above_data [ 64 + 16 ] <S2SV_ModEnd> ) ; uint8_t * <S2SV_ModStart> [ plane ] ; <S2SV_ModEnd> if ( plane == <S2SV_ModStart> ) + y ; if ( extend_modes [ mode ] & NEED_LEFT ) { <S2SV_ModEnd> if ( left_available ) <S2SV_ModStart> ] ; } } else { memset ( left_col , 129 , bs ) ; } } if ( extend_modes [ mode ] & NEED_ABOVE ) { <S2SV_ModStart> if ( x0 + <S2SV_ModEnd> bs <= frame_width ) <S2SV_ModStart> <= frame_width ) { memcpy ( above_row , above_ref , bs ) ; } else if ( x0 <S2SV_ModEnd> <= frame_width ) { <S2SV_ModStart> frame_width - x0 ; memcpy ( above_row , above_ref , r ) ; memset ( above_row + r , above_row [ r - 1 ] , x0 + bs - frame_width ) ; } <S2SV_ModEnd> } else { if <S2SV_ModStart> ; } else { memcpy ( above_row , above_ref , bs ) ; } } above_row [ - 1 ] = left_available ? above_ref [ - 1 ] : 129 ; } else { memset ( above_row , 127 , bs ) ; above_row [ - 1 ] = 127 ; } } if ( extend_modes [ mode ] & NEED_ABOVERIGHT ) { if ( up_available ) { const uint8_t * above_ref = ref - ref_stride ; if ( xd -> mb_to_right_edge < 0 ) { if ( x0 + 2 * bs <= frame_width ) { if ( right_available && bs == 4 ) { memcpy ( above_row , above_ref , 2 * bs ) ; } else { memcpy ( above_row , above_ref , bs ) ; memset ( above_row + bs , above_row [ bs - 1 ] , bs ) ; } } else if ( x0 + bs <= frame_width ) { const int r = frame_width - x0 ; if ( right_available && bs == 4 ) { memcpy ( above_row , above_ref , r ) ; memset ( above_row + r , above_row [ r - 1 ] , x0 + 2 * bs - frame_width ) ; } else { memcpy ( above_row , above_ref , bs ) ; memset ( above_row + bs , above_row [ bs - 1 ] , bs ) ; } } else if ( x0 <= frame_width ) { const int r = frame_width - x0 ; memcpy ( above_row , above_ref , r ) ; memset ( above_row + r , above_row [ r - 1 ] , x0 + 2 * bs - frame_width ) ; } } else { <S2SV_ModEnd> if ( bs == <S2SV_ModStart> == 4 && right_available && left_available ) { const_above_row = above_ref ; } else { memcpy ( above_row , above_ref , bs ) ; if ( bs == 4 && right_available ) memcpy ( above_row + bs , above_ref + bs , bs ) ; else memset ( above_row + bs , above_row [ bs - 1 ] , bs ) ; } } <S2SV_ModEnd> above_row [ - 1 <S2SV_ModStart> : 129 ; } else { memset <S2SV_ModEnd> ( above_row , 127 <S2SV_ModStart> ] = 127 ; }
<S2SV_ModStart> * xd , int <S2SV_ModEnd> bwl_in , TX_SIZE tx_size <S2SV_ModStart> , TX_SIZE tx_size , PREDICTION_MODE <S2SV_ModEnd> mode , const uint8_t <S2SV_ModStart> ) { const int bw <S2SV_ModEnd> = ( 1 << <S2SV_ModStart> = ( 1 << bwl_in ) ; const int txw = ( 1 << tx_size ) <S2SV_ModEnd> ; const int have_top <S2SV_ModStart> const int have_top = loff <S2SV_ModEnd> || xd -> up_available <S2SV_ModStart> const int have_left = aoff || xd -> left_available ; const int have_right = ( aoff + txw ) < bw ; const int x = aoff * 4 ; const int y = loff * 4 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { build_intra_predictors_high ( xd , ref , ref_stride , dst , dst_stride , mode , tx_size , have_top , have_left , have_right , x , y , plane , xd -> bd ) ; return ; } # endif <S2SV_ModEnd> build_intra_predictors ( xd ,
<S2SV_ModStart> vp9_rtcd ( ) { <S2SV_ModEnd> once ( setup_rtcd_internal )
<S2SV_ModStart> int this_h ) { # endif if ( ! valid_ref_frame_size <S2SV_ModEnd> ( other_w , other_h <S2SV_ModStart> [ 0 ] = vpx_convolve_copy ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_convolve_avg ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_convolve8_vert ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_convolve8_avg_vert ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_convolve8_avg_horiz <S2SV_ModEnd> ; } else { <S2SV_ModStart> [ 0 ] = vpx_scaled_vert ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_vert ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_vert ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_vert ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d <S2SV_ModEnd> ; } } else <S2SV_ModStart> [ 0 ] = vpx_scaled_horiz ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_horiz ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_horiz ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_horiz <S2SV_ModEnd> ; } else { <S2SV_ModStart> [ 0 ] = vpx_scaled_2d ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 0 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; sf -> predict [ 1 ] [ 0 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vpx_scaled_avg_2d ; } } if ( ( sf -> x_step_q4 != 16 ) || ( sf -> y_step_q4 != 16 ) ) { sf -> predict [ 1 ] [ 1 ] [ 0 ] = vpx_scaled_2d ; sf -> predict [ 1 ] [ 1 ] [ 1 ] = vpx_scaled_avg_2d ; } else { sf -> predict [ 1 ] [ 1 ] [ 0 ] = vpx_convolve8 ; sf -> predict [ 1 ] [ 1 ] [ 1 ] = vpx_convolve8_avg ; } # if CONFIG_VP9_HIGHBITDEPTH if ( use_highbd ) { if ( sf -> x_step_q4 == 16 ) { if ( sf -> y_step_q4 == 16 ) { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve_copy ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve_avg ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8_vert ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; } else { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_vert ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8_vert ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg_vert ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; } } else { if ( sf -> y_step_q4 == 16 ) { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8_horiz ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg_horiz ; } else { sf -> highbd_predict [ 0 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 0 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; sf -> highbd_predict [ 0 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 0 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; sf -> highbd_predict [ 1 ] [ 0 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 1 ] [ 0 ] [ 1 ] = vpx_highbd_convolve8_avg ; } } sf -> highbd_predict [ 1 ] [ 1 ] [ 0 ] = vpx_highbd_convolve8 ; sf -> highbd_predict [ 1 ] [ 1 ] [ 1 ] = vpx_highbd_convolve8_avg ; } # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) { const int sb64_cols <S2SV_ModEnd> = mi_cols_aligned_to_sb ( mi_cols <S2SV_ModStart> ) >> MI_BLOCK_SIZE_LOG2 ; * min_log2_tile_cols = get_min_log2_tile_cols ( sb64_cols ) <S2SV_ModEnd> ; * max_log2_tile_cols = <S2SV_ModStart> ; * max_log2_tile_cols = get_max_log2_tile_cols ( sb64_cols ) ; assert ( * min_log2_tile_cols <= * max_log2_tile_cols ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> int col ) { vp9_tile_set_row ( tile , cm , row ) ; vp9_tile_set_col ( tile , cm , col <S2SV_ModEnd> ) ; } <S2SV_null>

<S2SV_ModStart> * ) b ; return ( int ) ( buf2 -> size - buf1 -> size ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> & pbi -> common ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) <S2SV_ModStart> tile_row , tile_col ; int mi_row , mi_col ; TileData * tile_data = NULL ; if ( cm -> lf . filter_level && ! cm -> skip_loop_filter && pbi -> lf_worker . data1 == NULL ) { CHECK_MEM_ERROR ( cm , pbi -> lf_worker . data1 , vpx_memalign ( 32 , sizeof ( LFWorkerData ) ) ) ; pbi -> lf_worker . hook = ( VPxWorkerHook ) vp9_loop_filter_worker ; if ( pbi -> max_threads > 1 && ! winterface -> reset ( & pbi -> lf_worker ) ) { vpx_internal_error ( & cm -> error , VPX_CODEC_ERROR , "Loop<S2SV_blank>filter<S2SV_blank>thread<S2SV_blank>creation<S2SV_blank>failed" ) ; } } if ( cm -> lf . filter_level && ! cm -> skip_loop_filter ) { LFWorkerData * const lf_data = ( LFWorkerData * ) pbi -> lf_worker . data1 ; winterface -> sync ( & pbi -> lf_worker ) ; vp9_loop_filter_data_reset ( lf_data , get_frame_new_buffer ( cm ) , cm , pbi -> mb . plane ) ; } <S2SV_ModEnd> assert ( tile_rows <= <S2SV_ModStart> 6 ) ) ; memset <S2SV_ModEnd> ( cm -> above_context <S2SV_ModStart> * aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> above_seg_context <S2SV_ModStart> * aligned_cols ) ; get_tile_buffers ( pbi , data , data_end , tile_cols , tile_rows , tile_buffers ) ; if ( pbi -> tile_data == NULL || ( tile_cols * tile_rows ) != pbi -> total_tiles ) { vpx_free ( pbi -> tile_data ) ; CHECK_MEM_ERROR ( cm , pbi -> tile_data , vpx_memalign ( 32 , tile_cols * tile_rows * ( sizeof ( * pbi -> tile_data ) ) ) ) ; pbi -> total_tiles = tile_rows * tile_cols ; } <S2SV_ModStart> tile_col ) { const TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; tile_data = pbi -> tile_data + tile_cols * tile_row + tile_col ; tile_data -> cm = cm ; tile_data -> xd = pbi -> mb ; tile_data -> xd . corrupted = 0 ; tile_data -> xd . counts = cm -> frame_parallel_decoding_mode ? NULL : & cm -> counts ; vp9_zero ( tile_data -> dqcoeff ) ; vp9_tile_init ( & tile_data -> xd . tile , tile_data -> cm , tile_row , tile_col ) ; setup_token_decoder ( buf -> data , data_end , buf -> size , & cm -> error , & tile_data -> bit_reader , pbi -> decrypt_cb , pbi -> decrypt_state ) ; vp9_init_macroblockd ( cm , & tile_data -> xd , tile_data -> dqcoeff ) ; } } for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { TileInfo tile ; vp9_tile_set_row ( & tile , cm , tile_row ) ; for ( mi_row = tile . mi_row_start ; mi_row < tile . mi_row_end ; mi_row += MI_BLOCK_SIZE ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int col = pbi -> inv_tile_order ? tile_cols - tile_col - 1 : tile_col ; tile_data = pbi -> tile_data + tile_cols * tile_row + col ; vp9_tile_set_col ( & tile , tile_data -> cm , col ) ; vp9_zero ( tile_data -> xd . left_context ) ; vp9_zero ( tile_data -> xd . left_seg_context ) ; for ( mi_col = tile . mi_col_start ; mi_col < tile . mi_col_end ; mi_col += MI_BLOCK_SIZE ) { decode_partition ( pbi , & tile_data -> xd , mi_row , mi_col , & tile_data -> bit_reader , BLOCK_64X64 , 4 ) ; } pbi -> mb . corrupted |= tile_data -> xd . corrupted ; if ( pbi -> mb . corrupted ) vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , "Failed<S2SV_blank>to<S2SV_blank>decode<S2SV_blank>tile<S2SV_blank>data" ) ; } if ( cm -> lf . filter_level && ! cm -> skip_loop_filter ) { const int lf_start = mi_row - MI_BLOCK_SIZE ; LFWorkerData * const lf_data = ( LFWorkerData * ) pbi -> lf_worker . data1 ; if ( lf_start < 0 ) continue ; if ( mi_row + MI_BLOCK_SIZE >= cm -> mi_rows ) continue ; winterface -> sync ( & pbi -> lf_worker ) ; lf_data -> start = lf_start ; lf_data -> stop = mi_row ; if ( pbi -> max_threads > 1 ) { winterface -> launch ( & pbi -> lf_worker ) ; } else { winterface -> execute ( & pbi -> lf_worker ) ; } } if ( pbi -> frame_parallel_decode ) vp9_frameworker_broadcast ( pbi -> cur_buf , mi_row << MI_BLOCK_SIZE_LOG2 ) ; } } if ( cm -> lf . filter_level && ! cm -> skip_loop_filter ) { LFWorkerData * const lf_data = ( LFWorkerData * ) pbi -> lf_worker . data1 ; winterface -> sync ( & pbi -> lf_worker ) ; lf_data -> start = lf_data -> stop ; lf_data -> stop = cm -> mi_rows ; winterface -> execute ( & pbi -> lf_worker ) ; } tile_data = pbi -> tile_data + tile_cols * tile_rows - 1 ; if ( pbi -> frame_parallel_decode ) vp9_frameworker_broadcast ( pbi -> cur_buf , INT_MAX ) ; return vpx_reader_find_end ( & tile_data -> bit_reader ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> & pbi -> common ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) <S2SV_ModStart> MIN ( pbi -> <S2SV_ModEnd> max_threads & ~ 1 <S2SV_ModStart> TileBuffer tile_buffers [ 1 ] [ 1 <S2SV_ModStart> num_threads = pbi -> <S2SV_ModEnd> max_threads & ~ 1 <S2SV_ModStart> * pbi -> tile_workers ) ) ) ; assert ( ( sizeof ( * pbi -> tile_worker_data ) % 16 ) == 0 ) ; CHECK_MEM_ERROR ( cm , pbi -> tile_worker_data , vpx_memalign ( 32 , num_threads * sizeof ( * pbi -> tile_worker_data ) ) ) ; CHECK_MEM_ERROR ( cm , pbi -> tile_worker_info , vpx_malloc ( num_threads * sizeof ( * pbi -> tile_worker_info <S2SV_ModStart> ++ i ) { VPxWorker <S2SV_ModEnd> * const worker = <S2SV_ModStart> pbi -> num_tile_workers ; winterface -> init ( worker <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> - 1 && ! winterface -> reset <S2SV_ModEnd> ( worker ) ) <S2SV_ModStart> ++ n ) { VPxWorker * const worker = & <S2SV_ModStart> tile_workers [ n ] ; winterface -> sync ( worker ) ; worker -> hook = ( VPxWorkerHook ) tile_worker_hook ; worker -> data1 = & pbi -> tile_worker_data [ n ] ; worker -> data2 = & pbi -> tile_worker_info [ n ] ; } memset <S2SV_ModEnd> ( cm -> above_context <S2SV_ModStart> * aligned_mi_cols ) ; memset <S2SV_ModEnd> ( cm -> above_seg_context <S2SV_ModStart> * aligned_mi_cols ) ; get_tile_buffers ( pbi , data , data_end , tile_cols , tile_rows , tile_buffers ) ; qsort ( tile_buffers [ 0 ] , tile_cols , sizeof ( tile_buffers [ 0 ] [ 0 ] ) , compare_tile_buffers ) ; { int group_start = 0 ; while ( group_start < tile_cols ) { const TileBuffer largest = tile_buffers [ 0 ] [ group_start ] ; const int group_end = MIN ( group_start + num_workers , tile_cols ) - 1 ; memmove ( tile_buffers [ 0 ] + group_start , tile_buffers [ 0 ] + group_start + 1 , ( group_end - group_start ) * sizeof ( tile_buffers [ 0 ] [ 0 ] ) ) ; tile_buffers [ 0 ] [ group_end ] = largest ; group_start = group_end + 1 ; } } if ( ! cm -> frame_parallel_decoding_mode ) { int i ; for ( i = 0 ; i < num_workers ; ++ i ) { TileWorkerData * const tile_data = ( TileWorkerData * ) pbi -> tile_workers [ i ] . data1 ; vp9_zero ( tile_data -> counts ) ; } } n = 0 ; while ( n < tile_cols ) { int i ; for ( i = 0 ; i < num_workers && n < tile_cols ; ++ i ) { VPxWorker * const worker = & pbi -> tile_workers [ i ] ; TileWorkerData * const tile_data = ( TileWorkerData * ) worker -> data1 ; TileInfo * const tile = ( TileInfo * ) worker -> data2 ; TileBuffer * const buf = & tile_buffers [ 0 ] [ n ] ; tile_data -> pbi = pbi ; tile_data -> xd = pbi -> mb ; tile_data -> xd . corrupted = 0 ; tile_data -> xd . counts = cm -> frame_parallel_decoding_mode ? 0 : & tile_data -> counts ; vp9_zero ( tile_data -> dqcoeff ) ; vp9_tile_init ( tile , cm , 0 , buf -> col ) ; vp9_tile_init ( & tile_data -> xd . tile , cm , 0 , buf -> col ) ; setup_token_decoder ( buf -> data , data_end , buf -> size , & cm -> error , & tile_data -> bit_reader , pbi -> decrypt_cb , pbi -> decrypt_state ) ; vp9_init_macroblockd ( cm , & tile_data -> xd , tile_data -> dqcoeff ) ; worker -> had_error = 0 ; if ( i == num_workers - 1 || <S2SV_ModEnd> n == tile_cols - <S2SV_ModStart> == tile_cols - 1 ) { winterface -> execute <S2SV_ModEnd> ( worker ) ; <S2SV_ModStart> ; } else { winterface -> launch <S2SV_ModEnd> ( worker ) ; <S2SV_ModStart> -- i ) { VPxWorker <S2SV_ModEnd> * const worker = <S2SV_ModStart> . corrupted |= ! winterface -> sync <S2SV_ModEnd> ( worker ) ; <S2SV_ModStart> data1 ; bit_reader_end = vpx_reader_find_end <S2SV_ModEnd> ( & tile_data -> <S2SV_ModStart> = - 1 ; } if ( n >= tile_cols && ! cm -> frame_parallel_decoding_mode ) { for ( i = 0 ; i < num_workers ; ++ i ) { TileWorkerData * const tile_data = ( TileWorkerData * ) pbi -> tile_workers [ i ] . data1 ; vp9_accumulate_frame_counts ( cm , & tile_data -> counts , 1 ) ; }
<S2SV_ModStart> int decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb , int <S2SV_ModStart> const int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb , get_unsigned_bits
<S2SV_ModStart> static void predict_and_reconstruct_intra_block ( MACROBLOCKD * const xd , vpx_reader * r , MB_MODE_INFO * const mbmi , int plane , int row , int col , TX_SIZE tx_size ) { <S2SV_ModEnd> struct macroblockd_plane * const <S2SV_ModStart> [ plane ] ; PREDICTION_MODE <S2SV_ModEnd> mode = ( plane <S2SV_ModStart> == 0 ) ? mbmi -> mode : mbmi -> uv_mode ; <S2SV_ModEnd> uint8_t * dst ; <S2SV_ModStart> uint8_t * dst ; <S2SV_ModEnd> dst = & pd <S2SV_ModStart> buf [ 4 * row <S2SV_ModEnd> * pd -> dst <S2SV_ModStart> stride + 4 * col ] ; if ( mbmi -> sb_type < BLOCK_8X8 ) if ( plane == 0 ) mode = xd -> mi [ 0 ] -> bmi [ ( row << 1 ) + col ] . as_mode ; vp9_predict_intra_block ( xd , pd -> n4_wl , tx_size , mode , dst , pd -> dst . stride , dst , pd -> dst . stride , col , row <S2SV_ModEnd> , plane ) ; <S2SV_ModStart> ; if ( ! mbmi -> <S2SV_ModEnd> skip ) { const <S2SV_ModStart> skip ) { const TX_TYPE tx_type = ( plane || xd -> lossless ) ? DCT_DCT : intra_mode_to_tx_type_lookup [ mode ] ; const scan_order * sc = ( plane || xd -> lossless ) ? & vp9_default_scan_orders [ tx_size ] : & vp9_scan_orders [ tx_size ] [ tx_type ] ; const <S2SV_ModStart> eob = vp9_decode_block_tokens ( xd , plane , sc , col , row , tx_size , r , mbmi -> segment_id ) ; inverse_transform_block_intra ( xd , plane , tx_type , tx_size , dst , pd -> dst . stride , <S2SV_ModEnd> eob ) ; }
<S2SV_ModStart> * const fc = cm -> fc ; vpx_reader <S2SV_ModEnd> r ; int k <S2SV_ModStart> k ; if ( vpx_reader_init <S2SV_ModEnd> ( & r , <S2SV_ModStart> , data , partition_size , pbi -> decrypt_cb , pbi -> decrypt_state <S2SV_ModStart> ) ; } return vpx_reader_has_error <S2SV_ModEnd> ( & r )
<S2SV_ModStart> VP9_COMMON * cm , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> ) ) { return vpx_read_bit <S2SV_ModEnd> ( r ) ? <S2SV_ModStart> r ) ? ( vpx_read_bit <S2SV_ModEnd> ( r ) ?
<S2SV_ModStart> VP9_COMMON * cm , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> * const fc = <S2SV_ModEnd> cm -> fc ;
<S2SV_ModStart> FRAME_CONTEXT * fc , vpx_reader <S2SV_ModEnd> * r ) {
<S2SV_ModStart> , int allow_hp , vpx_reader <S2SV_ModEnd> * r ) {
<S2SV_ModStart> FRAME_CONTEXT * fc , vpx_reader <S2SV_ModEnd> * r ) {
<S2SV_ModStart> static TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r , 2 <S2SV_ModStart> ALLOW_32X32 ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ) ;
<S2SV_ModStart> tx_probs * tx_probs , vpx_reader <S2SV_ModEnd> * r ) {
<S2SV_ModStart> * pbi , struct vpx_read_bit_buffer <S2SV_ModEnd> * rb ) { <S2SV_ModStart> pbi -> common ; BufferPool * const pool = cm -> buffer_pool ; RefCntBuffer * const frame_bufs = pool -> frame_bufs ; int i , mask , ref_index = 0 ; size_t sz ; <S2SV_ModEnd> cm -> last_frame_type = <S2SV_ModStart> cm -> frame_type ; cm -> last_intra_only = cm -> intra_only ; if ( vpx_rb_read_literal <S2SV_ModEnd> ( rb , 2 <S2SV_ModStart> cm -> profile = vp9_read_profile ( rb ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> if ( cm -> <S2SV_ModStart> , "Unsupported<S2SV_blank>bitstream<S2SV_blank>profile" ) ; # else if ( cm -> profile >= PROFILE_2 ) vpx_internal_error ( & cm -> error , VPX_CODEC_UNSUP_BITSTREAM , "Unsupported<S2SV_blank>bitstream<S2SV_blank>profile" ) ; # endif <S2SV_ModStart> cm -> show_existing_frame = vpx_rb_read_bit <S2SV_ModEnd> ( rb ) ; <S2SV_ModStart> cm -> ref_frame_map [ vpx_rb_read_literal <S2SV_ModEnd> ( rb , 3 <S2SV_ModStart> 3 ) ] ; lock_buffer_pool ( pool ) ; if ( frame_to_show < 0 || <S2SV_ModEnd> frame_bufs [ frame_to_show ] <S2SV_ModStart> ref_count < 1 ) { unlock_buffer_pool ( pool ) ; <S2SV_ModStart> , frame_to_show ) ; } ref_cnt_fb ( <S2SV_ModEnd> frame_bufs , & cm <S2SV_ModStart> -> new_fb_idx , frame_to_show ) ; unlock_buffer_pool ( pool <S2SV_ModStart> show_frame = 1 ; if ( pbi -> frame_parallel_decode ) { for ( i = 0 ; i < REF_FRAMES ; ++ i ) cm -> next_ref_frame_map [ i ] = cm -> ref_frame_map [ i ] ; } <S2SV_ModStart> = ( FRAME_TYPE ) vpx_rb_read_bit <S2SV_ModEnd> ( rb ) ; <S2SV_ModStart> cm -> show_frame = vpx_rb_read_bit <S2SV_ModEnd> ( rb ) ; <S2SV_ModStart> cm -> error_resilient_mode = vpx_rb_read_bit <S2SV_ModEnd> ( rb ) ; <S2SV_ModStart> == KEY_FRAME ) { if ( ! vp9_read_sync_code ( rb ) ) <S2SV_ModEnd> vpx_internal_error ( & cm <S2SV_ModStart> error , VPX_CODEC_UNSUP_BITSTREAM , "Invalid<S2SV_blank>frame<S2SV_blank>sync<S2SV_blank>code" ) ; read_bitdepth_colorspace_sampling ( cm , rb ) ; <S2SV_ModEnd> pbi -> refresh_frame_flags = <S2SV_ModStart> ] . idx = INVALID_IDX <S2SV_ModEnd> ; cm -> frame_refs <S2SV_ModStart> ] . buf = NULL <S2SV_ModEnd> ; } setup_frame_size ( <S2SV_ModStart> , rb ) ; if ( pbi -> need_resync ) { memset ( & cm -> ref_frame_map , - 1 , sizeof ( cm -> ref_frame_map ) ) ; pbi -> need_resync = 0 ; } <S2SV_ModStart> show_frame ? 0 : vpx_rb_read_bit <S2SV_ModEnd> ( rb ) ; <S2SV_ModStart> error_resilient_mode ? 0 : vpx_rb_read_literal <S2SV_ModEnd> ( rb , 2 <S2SV_ModStart> -> intra_only ) { if ( ! vp9_read_sync_code ( rb ) ) vpx_internal_error ( & cm -> error , VPX_CODEC_UNSUP_BITSTREAM , "Invalid<S2SV_blank>frame<S2SV_blank>sync<S2SV_blank>code" ) ; if ( cm -> profile > PROFILE_0 ) { read_bitdepth_colorspace_sampling ( cm , rb ) ; } else { cm -> color_space = VPX_CS_BT_601 ; cm -> subsampling_y = cm -> subsampling_x = 1 ; cm -> bit_depth = VPX_BITS_8 ; # if CONFIG_VP9_HIGHBITDEPTH cm -> use_highbitdepth = 0 ; # endif } <S2SV_ModEnd> pbi -> refresh_frame_flags = <S2SV_ModStart> pbi -> refresh_frame_flags = vpx_rb_read_literal <S2SV_ModEnd> ( rb , REF_FRAMES <S2SV_ModStart> , rb ) ; if ( pbi -> need_resync ) { memset ( & cm -> ref_frame_map , - 1 , sizeof ( cm -> ref_frame_map ) ) ; pbi -> need_resync = 0 ; } } else if ( pbi -> need_resync != 1 ) <S2SV_ModEnd> { pbi -> refresh_frame_flags <S2SV_ModStart> pbi -> refresh_frame_flags = vpx_rb_read_literal <S2SV_ModEnd> ( rb , REF_FRAMES <S2SV_ModStart> const int ref = vpx_rb_read_literal <S2SV_ModEnd> ( rb , REF_FRAMES_LOG2 <S2SV_ModStart> [ ref ] ; RefBuffer * const ref_frame = & <S2SV_ModStart> frame_refs [ i ] ; ref_frame -> <S2SV_ModEnd> idx = idx ; <S2SV_ModStart> idx = idx ; ref_frame -> buf = & frame_bufs [ idx ] . buf <S2SV_ModEnd> ; cm -> ref_frame_sign_bias <S2SV_ModStart> + i ] = vpx_rb_read_bit <S2SV_ModEnd> ( rb ) ; <S2SV_ModStart> cm -> allow_high_precision_mv = vpx_rb_read_bit <S2SV_ModEnd> ( rb ) ; <S2SV_ModStart> [ i ] ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> , cm -> height , cm -> use_highbitdepth ) ; # else vp9_setup_scale_factors_for_frame <S2SV_ModEnd> ( & ref_buf -> <S2SV_ModStart> & ref_buf -> sf , ref_buf -> buf -> y_crop_width , ref_buf -> buf -> y_crop_height , cm -> width , cm -> height ) ; # endif } } } # if CONFIG_VP9_HIGHBITDEPTH get_frame_new_buffer ( cm ) -> bit_depth = cm -> bit_depth ; # endif get_frame_new_buffer ( cm ) -> color_space = cm -> color_space ; if ( pbi -> need_resync ) { vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , "Keyframe<S2SV_blank>/<S2SV_blank>intra-only<S2SV_blank>frame<S2SV_blank>required<S2SV_blank>to<S2SV_blank>reset<S2SV_blank>decoder" "<S2SV_blank>state" ) ; <S2SV_ModEnd> } if ( ! <S2SV_ModStart> ) { cm -> refresh_frame_context = vpx_rb_read_bit ( rb ) ; cm -> frame_parallel_decoding_mode = vpx_rb_read_bit ( rb ) ; } else { cm -> refresh_frame_context = 0 ; cm -> frame_parallel_decoding_mode = 1 ; } cm -> frame_context_idx = vpx_rb_read_literal ( rb , FRAME_CONTEXTS_LOG2 ) ; lock_buffer_pool ( pool ) ; for ( mask = pbi -> refresh_frame_flags ; mask ; mask >>= 1 ) { if ( mask & 1 ) { cm -> next_ref_frame_map [ ref_index ] = cm -> new_fb_idx ; ++ frame_bufs [ cm -> new_fb_idx ] . ref_count <S2SV_ModEnd> ; } else { <S2SV_ModStart> else { cm -> next_ref_frame_map [ ref_index ] = cm -> ref_frame_map [ ref_index ] ; } if ( cm -> ref_frame_map [ ref_index ] >= 0 ) ++ frame_bufs [ cm -> ref_frame_map [ ref_index ] ] . ref_count ; ++ ref_index ; } for ( ; ref_index < REF_FRAMES ; ++ ref_index ) { cm -> next_ref_frame_map [ ref_index ] = cm -> ref_frame_map [ ref_index ] ; if ( cm -> ref_frame_map [ ref_index ] >= 0 ) ++ frame_bufs [ cm -> ref_frame_map [ ref_index ] ] . ref_count ; } unlock_buffer_pool ( pool ) ; pbi -> hold_ref_buf = 1 ; <S2SV_ModEnd> if ( frame_is_intra_only ( <S2SV_ModStart> , rb ) ; setup_segmentation_dequant ( cm ) ; <S2SV_ModStart> ) ; sz = vpx_rb_read_literal <S2SV_ModEnd> ( rb , 16
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int reconstruct_inter_block ( <S2SV_ModEnd> MACROBLOCKD * const xd <S2SV_ModStart> MACROBLOCKD * const xd , vpx_reader * r , MB_MODE_INFO * const mbmi , int plane , int row , int col , TX_SIZE tx_size ) { <S2SV_ModEnd> struct macroblockd_plane * const <S2SV_ModStart> [ plane ] ; const scan_order * sc = & vp9_default_scan_orders [ tx_size ] ; const int eob = vp9_decode_block_tokens <S2SV_ModEnd> ( xd , plane <S2SV_ModStart> xd , plane , sc , col , row , tx_size , r , mbmi -> segment_id ) ; inverse_transform_block_inter ( xd , plane <S2SV_ModEnd> , tx_size , & <S2SV_ModStart> buf [ 4 * row <S2SV_ModEnd> * pd -> dst <S2SV_ModStart> stride + 4 * col <S2SV_ModEnd> ] , pd -> <S2SV_ModStart> , eob ) ; return <S2SV_ModEnd> eob ; } <S2SV_null>
<S2SV_ModStart> static int tile_worker_hook ( <S2SV_ModEnd> TileWorkerData * const tile_data <S2SV_ModStart> TileWorkerData * const tile_data , <S2SV_ModEnd> const TileInfo * const <S2SV_ModStart> TileInfo * const tile ) { <S2SV_ModEnd> int mi_row , mi_col <S2SV_ModStart> int mi_row , mi_col ; if ( setjmp ( tile_data -> error_info . jmp ) ) { tile_data -> error_info . setjmp = 0 ; tile_data -> xd . corrupted = 1 ; return 0 ; } tile_data -> error_info . setjmp = 1 ; tile_data -> xd . error_info = & tile_data -> error_info <S2SV_ModStart> decode_partition ( tile_data -> pbi <S2SV_ModEnd> , & tile_data -> <S2SV_ModStart> & tile_data -> xd <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> -> bit_reader , BLOCK_64X64 , 4
<S2SV_ModStart> static void update_mv_probs ( vpx_prob <S2SV_ModEnd> * p , int <S2SV_ModStart> , int n , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> i ) if ( vpx_read <S2SV_ModEnd> ( r , MV_UPDATE_PROB <S2SV_ModStart> i ] = ( vpx_read_literal <S2SV_ModEnd> ( r , 7
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> void vp9_decode_frame ( VP9Decoder * pbi , const uint8_t * data , const uint8_t * data_end , const uint8_t * * p_data_end ) { VP9_COMMON * const cm = & pbi -> common ; MACROBLOCKD * const xd = & pbi -> mb ; struct vpx_read_bit_buffer rb ; int context_updated = 0 ; uint8_t clear_data [ MAX_VP9_HEADER_SIZE ] <S2SV_ModEnd> ; const size_t first_partition_size <S2SV_ModStart> read_uncompressed_header ( pbi , init_read_bit_buffer ( pbi , & rb , data , data_end , clear_data ) ) <S2SV_ModEnd> ; const int tile_rows <S2SV_ModStart> p_data_end = data + ( cm -> profile <= PROFILE_2 ? 1 : 2 ) ; return ; } data += vpx_rb_bytes_read <S2SV_ModEnd> ( & rb ) <S2SV_ModStart> , "Truncated<S2SV_blank>packet<S2SV_blank>or<S2SV_blank>corrupt<S2SV_blank>header<S2SV_blank>length" ) ; cm -> use_prev_frame_mvs = ! cm -> error_resilient_mode && cm -> width == cm -> last_width && cm -> height == cm -> last_height && ! cm -> last_intra_only && cm -> last_show_frame && ( cm -> last_frame_type != KEY_FRAME ) ; vp9_setup_block_planes ( xd , cm -> subsampling_x , cm -> subsampling_y ) ; * cm -> fc = cm -> frame_contexts [ cm -> frame_context_idx ] ; if ( ! cm -> fc -> initialized ) vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , "Uninitialized<S2SV_blank>entropy<S2SV_blank>context." ) ; vp9_zero ( cm -> counts ) ; xd -> corrupted = 0 ; new_fb -> corrupted = read_compressed_header ( pbi , data , first_partition_size ) ; if ( new_fb -> corrupted ) vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , "Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>header<S2SV_blank>is<S2SV_blank>corrupted." ) ; if ( <S2SV_ModEnd> cm -> lf . <S2SV_ModStart> -> lf . filter_level && ! cm -> skip_loop_filter ) { vp9_loop_filter_frame_init ( cm , cm -> lf . filter_level ) ; } if ( pbi -> frame_parallel_decode && cm -> frame_parallel_decoding_mode ) { VPxWorker * const worker = pbi -> frame_worker_owner ; FrameWorkerData * const frame_worker_data = worker -> data1 ; if ( cm -> refresh_frame_context ) { context_updated = 1 ; cm -> frame_contexts [ cm -> frame_context_idx ] = * cm -> fc ; } vp9_frameworker_lock_stats ( worker ) ; pbi -> cur_buf -> row = - 1 ; pbi -> cur_buf -> col = - 1 ; frame_worker_data -> frame_context_ready = 1 ; vp9_frameworker_signal_stats ( worker ) ; vp9_frameworker_unlock_stats ( worker ) ; } if ( pbi -> <S2SV_ModEnd> max_threads > 1 && <S2SV_ModStart> max_threads > 1 && <S2SV_ModEnd> tile_rows == 1 && <S2SV_ModStart> && tile_cols > 1 <S2SV_ModEnd> ) { * p_data_end <S2SV_ModStart> , data_end ) ; if ( ! xd -> corrupted ) { if ( ! cm -> skip_loop_filter ) { vp9_loop_filter_frame_mt ( new_fb , cm , pbi -> mb . plane , cm -> lf . filter_level , 0 , 0 , pbi -> tile_workers , pbi -> num_tile_workers , & pbi -> lf_row_sync ) ; } } else { vpx_internal_error ( & cm -> error , VPX_CODEC_CORRUPT_FRAME , "Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>is<S2SV_blank>corrupted." ) ; } <S2SV_ModStart> data_end ) ; } if ( ! xd -> corrupted ) { if ( ! cm -> error_resilient_mode && ! cm -> frame_parallel_decoding_mode ) { vp9_adapt_coef_probs ( cm ) ; if ( ! frame_is_intra_only ( cm ) ) { vp9_adapt_mode_probs ( cm ) ; vp9_adapt_mv_probs ( cm , cm -> allow_high_precision_mv ) ; } } else { debug_check_frame_counts ( cm ) ; } } else { <S2SV_ModEnd> vpx_internal_error ( & cm <S2SV_ModStart> error , VPX_CODEC_CORRUPT_FRAME , "Decode<S2SV_blank>failed.<S2SV_blank>Frame<S2SV_blank>data<S2SV_blank>is<S2SV_blank>corrupted." <S2SV_ModEnd> ) ; } if <S2SV_ModStart> ( cm -> refresh_frame_context && ! context_updated <S2SV_ModStart> -> frame_context_idx ] = * <S2SV_ModStart> cm -> fc ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> MACROBLOCKD * xd , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> = ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r , cm <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx ] <S2SV_ModStart> ctx ] ) ; FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> comp_inter [ ctx ]
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_inter_mode ( VP9_COMMON * <S2SV_ModStart> VP9_COMMON * cm , MACROBLOCKD * xd , vpx_reader <S2SV_ModEnd> * r , int <S2SV_ModStart> const int mode = vpx_read_tree <S2SV_ModEnd> ( r , vp9_inter_mode_tree <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> inter_mode_probs [ ctx ] <S2SV_ModStart> ctx ] ) ; FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> inter_mode [ ctx ]
<S2SV_ModStart> , int mi_col , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> ] -> mbmi ; int predicted_segment_id , segment_id ; const int mi_offset = mi_row * cm -> mi_cols + mi_col ; const int bw = xd -> plane [ 0 ] . n4_w >> 1 ; const int bh = xd -> plane [ 0 ] . n4_h >> 1 ; const int x_mis = MIN ( cm -> mi_cols - mi_col , bw ) ; const int y_mis = MIN ( cm -> mi_rows - mi_row , bh ) <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> 0 ; predicted_segment_id = cm -> last_frame_seg_map ? dec_get_segment_id ( cm , cm -> last_frame_seg_map , mi_offset , x_mis , y_mis ) : 0 <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> seg -> update_map ) { copy_segment_id ( cm , cm -> last_frame_seg_map , cm -> current_frame_seg_map , mi_offset , x_mis , y_mis ) ; return predicted_segment_id ; } <S2SV_ModEnd> if ( seg -> <S2SV_ModStart> temporal_update ) { const vpx_prob <S2SV_ModEnd> pred_prob = vp9_get_pred_prob_seg_id ( <S2SV_ModStart> mbmi -> seg_id_predicted = vpx_read <S2SV_ModEnd> ( r , pred_prob <S2SV_ModStart> set_segment_id ( cm , mi_offset , x_mis , y_mis <S2SV_ModEnd> , segment_id ) ;
<S2SV_ModStart> , int mi_col , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> above_mi = xd -> above_mi <S2SV_ModEnd> ; const MODE_INFO * <S2SV_ModStart> left_mi = xd -> left_mi <S2SV_ModEnd> ; const BLOCK_SIZE bsize <S2SV_ModStart> ; int i ; const int mi_offset = mi_row * cm -> mi_cols + mi_col ; const int bw = xd -> plane [ 0 ] . n4_w >> 1 ; const int bh = xd -> plane [ 0 ] . n4_h >> 1 ; const int x_mis = MIN ( cm -> mi_cols - mi_col , bw ) ; const int y_mis = MIN ( cm -> mi_rows - mi_row , bh ) ; <S2SV_ModStart> read_intra_segment_id ( cm , mi_offset , x_mis , y_mis <S2SV_ModEnd> , r ) ; <S2SV_ModStart> ( cm , xd <S2SV_ModEnd> , 1 , r
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE read_intra_mode ( vpx_reader <S2SV_ModEnd> * r , const <S2SV_ModStart> * r , const vpx_prob <S2SV_ModEnd> * p ) { <S2SV_ModStart> ) { return ( PREDICTION_MODE ) vpx_read_tree <S2SV_ModEnd> ( r , vp9_intra_mode_tree
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON * <S2SV_ModStart> VP9_COMMON * cm , MACROBLOCKD * xd , vpx_reader * r , PREDICTION_MODE <S2SV_ModEnd> y_mode ) { const <S2SV_ModStart> y_mode ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode ( <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode ] <S2SV_ModStart> y_mode ] ) ; FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> uv_mode [ y_mode ]
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_y ( VP9_COMMON * <S2SV_ModStart> VP9_COMMON * cm , MACROBLOCKD * xd , vpx_reader <S2SV_ModEnd> * r , int <S2SV_ModStart> size_group ) { const PREDICTION_MODE <S2SV_ModEnd> y_mode = read_intra_mode ( <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> y_mode_prob [ size_group ] <S2SV_ModStart> size_group ] ) ; FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> y_mode [ size_group ]
<S2SV_ModStart> * const cm , int mi_offset , int x_mis , int y_mis , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> & cm -> seg <S2SV_ModEnd> ; int segment_id ; <S2SV_ModStart> seg -> update_map ) { copy_segment_id ( cm , cm -> last_frame_seg_map , cm -> current_frame_seg_map , mi_offset , x_mis , y_mis ) ; return 0 ; } <S2SV_ModEnd> segment_id = read_segment_id ( <S2SV_ModStart> set_segment_id ( cm , mi_offset , x_mis , y_mis <S2SV_ModEnd> , segment_id ) ;
<S2SV_ModStart> INLINE void read_mv ( vpx_reader <S2SV_ModEnd> * r , MV <S2SV_ModStart> = ( MV_JOINT_TYPE ) vpx_read_tree <S2SV_ModEnd> ( r , vp9_mv_joint_tree
<S2SV_ModStart> static int read_mv_component ( vpx_reader <S2SV_ModEnd> * r , const <S2SV_ModStart> const int sign = vpx_read <S2SV_ModEnd> ( r , mvcomp <S2SV_ModStart> const int mv_class = vpx_read_tree <S2SV_ModEnd> ( r , vp9_mv_class_tree <S2SV_ModStart> ) { d = vpx_read_tree <S2SV_ModEnd> ( r , vp9_mv_class0_tree <S2SV_ModStart> mvcomp -> class0 ) ; mag = 0 <S2SV_ModStart> i ) d |= vpx_read <S2SV_ModEnd> ( r , mvcomp <S2SV_ModStart> ) << i ; mag = CLASS0_SIZE << ( mv_class + 2 ) ; } fr = vpx_read_tree <S2SV_ModEnd> ( r , vp9_mv_fp_tree <S2SV_ModStart> hp = usehp ? vpx_read <S2SV_ModEnd> ( r , class0 <S2SV_ModStart> : 1 ; mag += ( <S2SV_ModEnd> ( d << 3
<S2SV_ModStart> * const xd , vpx_reader <S2SV_ModEnd> * r , int <S2SV_ModStart> * const fc = cm -> fc ; FRAME_COUNTS * counts = xd -> counts ; if ( segfeature_active ( & cm -> <S2SV_ModEnd> seg , segment_id , <S2SV_ModStart> = ( MV_REFERENCE_FRAME ) get_segdata <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> const int bit = vpx_read <S2SV_ModEnd> ( r , fc <S2SV_ModStart> ) ; if ( counts <S2SV_ModEnd> ) ++ counts -> <S2SV_ModStart> const int bit0 = vpx_read <S2SV_ModEnd> ( r , fc <S2SV_ModStart> ) ; if ( counts <S2SV_ModEnd> ) ++ counts -> <S2SV_ModStart> const int bit1 = vpx_read <S2SV_ModEnd> ( r , fc <S2SV_ModStart> ) ; if ( counts <S2SV_ModEnd> ) ++ counts ->
<S2SV_ModStart> static int read_segment_id ( vpx_reader <S2SV_ModEnd> * r , const <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r , vp9_segment_tree
<S2SV_ModStart> , TX_SIZE max_tx_size , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> * r ) { FRAME_COUNTS * counts = xd -> counts ; <S2SV_ModStart> const int ctx = get_tx_size_context <S2SV_ModEnd> ( xd ) ; <S2SV_ModStart> xd ) ; const vpx_prob <S2SV_ModEnd> * tx_probs = get_tx_probs <S2SV_ModStart> & cm -> fc -> <S2SV_ModEnd> tx_probs ) ; int <S2SV_ModStart> ; int tx_size = vpx_read <S2SV_ModEnd> ( r , tx_probs <S2SV_ModStart> ) { tx_size += vpx_read <S2SV_ModEnd> ( r , tx_probs <S2SV_ModStart> TX_32X32 ) tx_size += vpx_read <S2SV_ModEnd> ( r , tx_probs <S2SV_ModStart> ; } if ( counts <S2SV_ModEnd> ) ++ get_tx_counts ( <S2SV_ModStart> , ctx , & counts -> <S2SV_ModEnd> tx ) [ tx_size
<S2SV_ModStart> , int segment_id , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> ) { if ( segfeature_active <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> const int skip = vpx_read <S2SV_ModEnd> ( r , cm <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> skip_probs [ ctx ] <S2SV_ModStart> ctx ] ) ; FRAME_COUNTS * counts = xd -> counts ; if ( counts ) ++ counts -> <S2SV_ModEnd> skip [ ctx ]
<S2SV_ModStart> MACROBLOCKD * xd , int allow_select , vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> * r ) { TX_MODE tx_mode = cm -> tx_mode ; BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi . sb_type ;
<S2SV_ModStart> VP9_COMMON * cm , int mi_offset , int x_mis , int y_mis <S2SV_ModEnd> , int segment_id ) <S2SV_ModStart> int segment_id ) { <S2SV_ModEnd> int x , y <S2SV_ModStart> 0 ; y < y_mis <S2SV_ModEnd> ; y ++ ) <S2SV_ModStart> 0 ; x < x_mis <S2SV_ModEnd> ; x ++ ) <S2SV_ModStart> ++ ) cm -> current_frame_seg_map <S2SV_ModEnd> [ mi_offset + y
<S2SV_ModStart> pbi -> common ; BufferPool * const pool = cm -> buffer_pool ; RefCntBuffer * const frame_bufs = cm -> buffer_pool -> frame_bufs ; lock_buffer_pool ( pool ) ; <S2SV_ModStart> >>= 1 ) { const int old_idx = cm -> ref_frame_map [ ref_index ] ; decrease_ref_count ( old_idx , frame_bufs , pool ) ; if ( <S2SV_ModEnd> ( mask & 1 <S2SV_ModStart> mask & 1 ) && old_idx >= 0 ) { decrease_ref_count ( old_idx , frame_bufs , pool ) ; } cm -> ref_frame_map [ ref_index ] = cm -> next_ref_frame_map [ ref_index ] ; ++ ref_index ; } for ( ; ref_index < REF_FRAMES && ! cm -> show_existing_frame ; ++ ref_index ) <S2SV_ModStart> [ ref_index ] ; decrease_ref_count ( old_idx , frame_bufs , pool ) ; cm -> ref_frame_map [ ref_index ] = cm -> next_ref_frame_map [ ref_index ] ; } unlock_buffer_pool ( pool ) ; pbi -> hold_ref_buf = 0 ; cm -> frame_to_show = get_frame_new_buffer ( cm ) ; if ( ! pbi -> frame_parallel_decode || ! cm -> show_frame ) { lock_buffer_pool ( pool ) ; -- frame_bufs [ cm -> new_fb_idx ] . ref_count ; unlock_buffer_pool ( pool ) ; } <S2SV_ModEnd> for ( ref_index = <S2SV_ModStart> ] . idx = - 1 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * const cfg = get_ref_frame ( cm , 0 ) ; if ( cfg == NULL ) { vpx_internal_error ( & cm -> error , VPX_CODEC_ERROR , "No<S2SV_blank>\'last\'<S2SV_blank>reference<S2SV_blank>frame" ) ; return VPX_CODEC_ERROR ; } <S2SV_ModEnd> if ( ! equal_dimensions
<S2SV_ModStart> VP9Decoder * vp9_decoder_create ( BufferPool * const pool <S2SV_ModEnd> ) { VP9Decoder * <S2SV_ModStart> ) { VP9Decoder * volatile <S2SV_ModStart> ) ; VP9_COMMON * volatile <S2SV_ModStart> setjmp = 1 ; CHECK_MEM_ERROR ( cm , cm -> fc , ( FRAME_CONTEXT * ) vpx_calloc ( 1 , sizeof ( * cm -> fc ) ) ) ; CHECK_MEM_ERROR ( cm , cm -> frame_contexts , ( FRAME_CONTEXT * ) vpx_calloc ( FRAME_CONTEXTS , sizeof ( * cm -> frame_contexts ) ) ) ; pbi -> need_resync = 1 ; once ( initialize_dec ) ; memset <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> ref_frame_map ) ) ; memset ( & cm -> next_ref_frame_map , - 1 , sizeof ( cm -> next_ref_frame_map ) ) ; <S2SV_ModStart> 0 ; pbi -> <S2SV_ModEnd> ready_for_new_data = 1 ; <S2SV_ModStart> 1 ; pbi -> common . buffer_pool = pool ; cm -> bit_depth = VPX_BITS_8 ; cm -> dequant_bit_depth = VPX_BITS_8 ; cm -> alloc_mi = vp9_dec_alloc_mi ; cm -> free_mi = vp9_dec_free_mi ; cm -> setup_mi = vp9_dec_setup_mi ; vp9_loop_filter_init ( cm ) ; cm -> error . setjmp = 0 ; vpx_get_worker_interface ( ) -> init <S2SV_ModEnd> ( & pbi ->
<S2SV_ModStart> * pbi ) { int i ; vpx_get_worker_interface ( ) -> end <S2SV_ModEnd> ( & pbi -> <S2SV_ModStart> -> lf_worker . data1 ) ; vpx_free ( pbi -> tile_data <S2SV_ModStart> ++ i ) { VPxWorker <S2SV_ModEnd> * const worker = <S2SV_ModStart> [ i ] ; vpx_get_worker_interface ( ) -> end <S2SV_ModEnd> ( worker ) ; <S2SV_ModStart> ( worker ) ; } vpx_free ( pbi -> tile_worker_data <S2SV_ModEnd> ) ; vpx_free ( <S2SV_ModStart> ) ; vpx_free ( pbi -> tile_worker_info ) ; <S2SV_ModEnd> vpx_free ( pbi -> <S2SV_ModStart> ( pbi -> num_tile_workers > 0 ) { <S2SV_ModEnd> vp9_loop_filter_dealloc ( & pbi <S2SV_ModStart> & pbi -> lf_row_sync <S2SV_ModEnd> ) ; } vpx_free
<S2SV_ModStart> YV12_BUFFER_CONFIG * sd , <S2SV_ModEnd> vp9_ppflags_t * flags ) <S2SV_ModStart> * flags ) { VP9_COMMON * const cm = & pbi -> common ; <S2SV_ModStart> = - 1 ; # if ! CONFIG_VP9_POSTPROC ( void ) * flags ; # endif <S2SV_ModStart> ) return ret ; pbi -> ready_for_new_data = 1 ; if ( ! cm -> show_frame <S2SV_ModEnd> ) return ret ; <S2SV_ModStart> ready_for_new_data = 1 ; # if CONFIG_VP9_POSTPROC if ( ! cm -> show_existing_frame ) { <S2SV_ModEnd> ret = vp9_post_proc_frame ( <S2SV_ModStart> ret = vp9_post_proc_frame ( cm <S2SV_ModEnd> , sd , flags <S2SV_ModStart> , flags ) ; } else { * sd = * cm -> frame_to_show ; ret = 0 ; } <S2SV_ModStart> * sd = * cm -> frame_to_show <S2SV_ModEnd> ; ret = 0 <S2SV_ModStart> 0 ; # endif vpx_clear_system_state <S2SV_ModEnd> ( ) ; return
<S2SV_ModStart> uint8_t * * psource <S2SV_ModEnd> ) { VP9_COMMON * <S2SV_ModStart> ) { VP9_COMMON * volatile <S2SV_ModStart> & pbi -> common ; BufferPool * volatile const pool = cm -> buffer_pool ; RefCntBuffer * volatile const frame_bufs = cm -> buffer_pool -> frame_bufs <S2SV_ModStart> 0 ] . idx > 0 ) { assert ( cm -> frame_refs [ 0 ] . buf != NULL ) ; <S2SV_ModEnd> cm -> frame_refs [ <S2SV_ModStart> = 1 ; } } pbi -> ready_for_new_data = 0 ; if ( ! pbi -> frame_parallel_decode && <S2SV_ModEnd> cm -> new_fb_idx >= <S2SV_ModStart> new_fb_idx >= 0 && <S2SV_ModEnd> frame_bufs [ cm -> <S2SV_ModStart> ref_count == 0 ) pool -> release_fb_cb ( pool <S2SV_ModEnd> -> cb_priv , & <S2SV_ModStart> -> cb_priv , & <S2SV_ModEnd> frame_bufs [ cm -> <S2SV_ModStart> ) ; if ( cm -> new_fb_idx == INVALID_IDX ) return VPX_CODEC_MEM_ERROR ; cm -> cur_frame = & pool -> frame_bufs [ cm -> new_fb_idx ] ; pbi -> hold_ref_buf = 0 ; if ( pbi -> frame_parallel_decode ) { VPxWorker * const worker = pbi -> frame_worker_owner ; vp9_frameworker_lock_stats ( worker ) ; frame_bufs [ cm -> new_fb_idx ] . frame_worker_owner = worker ; pbi -> cur_buf = & frame_bufs [ cm -> new_fb_idx ] ; pbi -> cur_buf -> row = - 1 ; pbi -> cur_buf -> col = - 1 ; vp9_frameworker_unlock_stats ( worker ) ; } else { pbi -> cur_buf = & frame_bufs [ cm -> new_fb_idx ] ; } if ( <S2SV_ModStart> jmp ) ) { const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; int i ; <S2SV_ModStart> setjmp = 0 ; pbi -> ready_for_new_data = 1 ; winterface -> sync ( & pbi -> lf_worker ) ; for ( i = 0 ; i < pbi -> num_tile_workers ; ++ i ) { winterface -> sync ( & pbi -> tile_workers [ i ] ) ; } lock_buffer_pool ( pool ) ; if ( pbi -> hold_ref_buf == 1 ) { int ref_index = 0 , mask ; for ( mask = pbi -> refresh_frame_flags ; mask ; mask >>= 1 ) { const int old_idx = cm -> ref_frame_map [ ref_index ] ; decrease_ref_count ( old_idx , frame_bufs , pool ) ; if ( ( mask & 1 ) && old_idx >= 0 ) { decrease_ref_count ( old_idx , frame_bufs , pool ) ; } ++ ref_index ; } for ( ; ref_index < REF_FRAMES && ! cm -> show_existing_frame ; ++ ref_index ) { const int old_idx = cm -> ref_frame_map [ ref_index ] ; decrease_ref_count ( old_idx , frame_bufs , pool ) ; } pbi -> hold_ref_buf = 0 ; } decrease_ref_count ( cm -> new_fb_idx , frame_bufs , pool ) ; unlock_buffer_pool ( pool ) ; vpx_clear_system_state ( ) <S2SV_ModEnd> ; return - 1 <S2SV_ModStart> setjmp = 1 ; <S2SV_ModEnd> vp9_decode_frame ( pbi , <S2SV_ModStart> , psource ) ; swap_frame_buffers ( pbi ) ; vpx_clear_system_state ( ) ; if ( ! cm -> show_existing_frame ) { cm -> last_show_frame = cm -> show_frame ; cm -> prev_frame = cm -> cur_frame ; if ( cm -> seg . enabled && ! pbi -> frame_parallel_decode ) vp9_swap_current_and_last_seg_map ( cm ) ; } if ( pbi -> frame_parallel_decode ) { VPxWorker * const worker = pbi -> frame_worker_owner ; FrameWorkerData * const frame_worker_data = worker -> data1 ; vp9_frameworker_lock_stats ( worker ) ; if ( cm -> show_frame ) { cm -> current_video_frame ++ ; } frame_worker_data -> frame_decoded = 1 ; frame_worker_data -> frame_context_ready = 1 ; vp9_frameworker_signal_stats ( worker ) ; vp9_frameworker_unlock_stats ( worker ) ; } else { cm -> last_width = cm -> width ; cm -> last_height = cm -> height ; if ( cm -> show_frame ) { cm -> current_video_frame ++ ; } } <S2SV_ModEnd> cm -> error . <S2SV_ModStart> cm -> error . setjmp = 0 <S2SV_ModEnd> ; return retcode ; <S2SV_ModStart> return retcode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * ref_buf = NULL ; RefCntBuffer * const frame_bufs = cm -> buffer_pool -> frame_bufs <S2SV_ModStart> ( cm ) ; if ( cm -> new_fb_idx == INVALID_IDX ) return VPX_CODEC_MEM_ERROR ; -- <S2SV_ModEnd> frame_bufs [ free_fb ] <S2SV_ModStart> free_fb ] . ref_count ; ref_cnt_fb ( <S2SV_ModEnd> frame_bufs , ref_fb_ptr , <S2SV_ModStart> -> buf = & <S2SV_ModEnd> frame_bufs [ * ref_fb_ptr
<S2SV_ModStart> static int decode_coefs ( <S2SV_ModEnd> const MACROBLOCKD * xd <S2SV_ModStart> , PLANE_TYPE type , tran_low_t <S2SV_ModEnd> * dqcoeff , TX_SIZE <S2SV_ModStart> int16_t * nb , vpx_reader * r ) { FRAME_COUNTS * counts = xd -> counts ; <S2SV_ModEnd> const int max_eob = <S2SV_ModStart> * const fc = xd -> fc <S2SV_ModEnd> ; const int ref <S2SV_ModStart> = 0 ; const vpx_prob <S2SV_ModEnd> ( * coef_probs ) <S2SV_ModStart> ref ] ; const vpx_prob <S2SV_ModEnd> * prob ; unsigned <S2SV_ModStart> UNCONSTRAINED_NODES + 1 ] ; unsigned int ( * eob_branch_count ) [ COEFF_CONTEXTS ] ; uint8_t token_cache [ 32 * 32 ] ; const uint8_t * band_translate = get_band_translate ( tx_size ) ; const int dq_shift = ( tx_size == TX_32X32 ) ; int v , token ; int16_t dqv = dq [ 0 ] ; const uint8_t * cat1_prob ; const uint8_t * cat2_prob ; const uint8_t * cat3_prob ; const uint8_t * cat4_prob ; const uint8_t * cat5_prob ; const uint8_t * cat6_prob ; if ( counts ) { coef_counts = <S2SV_ModEnd> counts -> coef [ <S2SV_ModStart> [ ref ] ; eob_branch_count = <S2SV_ModEnd> counts -> eob_branch [ <S2SV_ModStart> [ ref ] ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> bd > VPX_BITS_8 ) { if ( xd -> bd == VPX_BITS_10 ) { cat1_prob = vp9_cat1_prob_high10 ; cat2_prob = vp9_cat2_prob_high10 ; cat3_prob = vp9_cat3_prob_high10 ; cat4_prob = vp9_cat4_prob_high10 ; cat5_prob = vp9_cat5_prob_high10 ; cat6_prob = vp9_cat6_prob_high10 ; } else { cat1_prob = vp9_cat1_prob_high12 ; cat2_prob = vp9_cat2_prob_high12 ; cat3_prob = vp9_cat3_prob_high12 ; cat4_prob = vp9_cat4_prob_high12 ; cat5_prob = vp9_cat5_prob_high12 ; cat6_prob = vp9_cat6_prob_high12 ; } } else { cat1_prob = vp9_cat1_prob ; cat2_prob = vp9_cat2_prob ; cat3_prob = vp9_cat3_prob ; cat4_prob = vp9_cat4_prob ; cat5_prob = vp9_cat5_prob ; cat6_prob = vp9_cat6_prob ; } # else cat1_prob = vp9_cat1_prob ; cat2_prob = vp9_cat2_prob ; cat3_prob = vp9_cat3_prob ; cat4_prob = vp9_cat4_prob ; cat5_prob = vp9_cat5_prob ; cat6_prob = vp9_cat6_prob ; # endif <S2SV_ModEnd> while ( c < <S2SV_ModStart> ) { int val = - 1 <S2SV_ModStart> ] ; if ( counts <S2SV_ModEnd> ) ++ eob_branch_count [ <S2SV_ModStart> ; if ( ! vpx_read <S2SV_ModEnd> ( r , prob <S2SV_ModStart> } while ( ! vpx_read <S2SV_ModEnd> ( r , prob <S2SV_ModStart> } if ( ! vpx_read <S2SV_ModEnd> ( r , prob <S2SV_ModStart> ( ONE_TOKEN ) ; token = ONE_TOKEN ; val = 1 ; } else { <S2SV_ModEnd> INCREMENT_COUNT ( TWO_TOKEN ) <S2SV_ModStart> ( TWO_TOKEN ) ; token = vpx_read_tree ( r , vp9_coef_con_tree , <S2SV_ModEnd> vp9_pareto8_full [ prob [ <S2SV_ModStart> ] - 1 ] ) ; switch ( token ) { case TWO_TOKEN : case THREE_TOKEN : case FOUR_TOKEN : val = token ; break ; case CATEGORY1_TOKEN : val = CAT1_MIN_VAL + read_coeff ( cat1_prob , 1 , r ) ; break ; case CATEGORY2_TOKEN : val = CAT2_MIN_VAL + read_coeff ( cat2_prob , 2 , r ) ; break ; case CATEGORY3_TOKEN : val = CAT3_MIN_VAL + read_coeff ( cat3_prob , 3 , r ) ; break ; case CATEGORY4_TOKEN : val = CAT4_MIN_VAL + read_coeff ( cat4_prob , 4 , r ) ; break ; case CATEGORY5_TOKEN : val = CAT5_MIN_VAL + read_coeff ( cat5_prob , 5 , r ) ; break ; case CATEGORY6_TOKEN : # if CONFIG_VP9_HIGHBITDEPTH switch ( xd -> bd ) { case VPX_BITS_8 : val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 14 , r ) ; break ; case VPX_BITS_10 : val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 16 , r ) ; break ; case VPX_BITS_12 : val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 18 , r ) ; break ; default : assert ( 0 ) ; return - 1 ; } # else val = CAT6_MIN_VAL + read_coeff ( cat6_prob , 14 , r ) ; # endif break ; } } v = ( val * dqv ) >> dq_shift ; # if CONFIG_COEFFICIENT_RANGE_CHECKING # if CONFIG_VP9_HIGHBITDEPTH dqcoeff [ scan [ c ] ] = highbd_check_range ( ( vpx_read_bit ( r ) ? - v : v ) , xd -> bd ) ; # else dqcoeff [ scan [ c ] ] = check_range ( vpx_read_bit ( r ) ? - v : v ) ; # endif # else dqcoeff [ scan [ c ] ] = vpx_read_bit ( r ) ? - v : v ; # endif token_cache [ scan [ c ] ] = vp9_pt_energy_class [ token ] ; ++ c ; ctx = get_coef_context ( nb , token_cache , c ) ; dqv = dq [ 1 ] <S2SV_ModEnd> ; } return c
<S2SV_ModStart> <S2SV_null> int vp9_decode_block_tokens ( <S2SV_ModEnd> MACROBLOCKD * xd , <S2SV_ModStart> , int plane , const scan_order * sc <S2SV_ModEnd> , int x , <S2SV_ModStart> , TX_SIZE tx_size , vpx_reader * r , int seg_id <S2SV_ModEnd> ) { struct macroblockd_plane <S2SV_ModStart> -> plane [ plane ] ; const int16_t * const dequant = pd -> seg_dequant [ seg_id <S2SV_ModStart> y ) ; const <S2SV_ModEnd> int eob = decode_coefs <S2SV_ModStart> eob = decode_coefs ( <S2SV_ModEnd> xd , pd -> <S2SV_ModStart> pd -> plane_type , <S2SV_ModEnd> pd -> dqcoeff , <S2SV_ModStart> pd -> dqcoeff , tx_size , <S2SV_ModEnd> dequant , ctx , <S2SV_ModStart> dequant , ctx , sc -> scan , sc <S2SV_ModEnd> -> neighbors , r <S2SV_ModStart> , r ) ; dec_set_contexts <S2SV_ModEnd> ( xd , pd <S2SV_ModStart> ( xd , pd <S2SV_ModEnd> , tx_size , eob
<S2SV_ModStart> static int decode_term_subexp ( vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> { if ( ! vpx_read_bit <S2SV_ModEnd> ( r ) ) <S2SV_ModStart> r ) ) return vpx_read_literal <S2SV_ModEnd> ( r , 4 <S2SV_ModStart> ; if ( ! vpx_read_bit <S2SV_ModEnd> ( r ) ) <S2SV_ModStart> r ) ) return vpx_read_literal <S2SV_ModEnd> ( r , 4 <S2SV_ModStart> ; if ( ! vpx_read_bit <S2SV_ModEnd> ( r ) ) <S2SV_ModStart> r ) ) return vpx_read_literal <S2SV_ModEnd> ( r , 5
<S2SV_ModStart> static int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) { <S2SV_ModStart> const int v = vpx_read_literal <S2SV_ModEnd> ( r , l <S2SV_ModStart> ) - m + vpx_read_bit <S2SV_ModEnd> ( r ) ;
<S2SV_ModStart> return v ; return ( v & 1 ) ? m - ( <S2SV_ModEnd> ( v + 1 <S2SV_ModStart> v + 1 ) >> 1 ) : m + ( v >> 1 ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> int inv_map_table [ MAX_PROB ] = { 7 , 20 , 33 , 46 , 59 , 72 , 85 , 98 , 111 , 124 , 137 , 150 , 163 , 176 , 189 , 202 , 215 , 228 , 241 , 254 , 1 , 2 , 3 , 4 , 5 , 6 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 99 , 100 , 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 112 , 113 , 114 , 115 , 116 , 117 , 118 , 119 , 120 , 121 , 122 , 123 , 125 , 126 , 127 , 128 , 129 , 130 , 131 , 132 , 133 , 134 , 135 , 136 , 138 , 139 , 140 , 141 , 142 , 143 , 144 , 145 , 146 , 147 , 148 , 149 , 151 , 152 , 153 , 154 , 155 , 156 , 157 , 158 , 159 , 160 , 161 , 162 , 164 , 165 , 166 , 167 , 168 , 169 , 170 , 171 , 172 , 173 , 174 , 175 , 177 , 178 , 179 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 188 , 190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 200 , 201 , 203 , 204 , 205 , 206 , 207 , 208 , 209 , 210 , 211 , 212 , 213 , 214 , 216 , 217 , 218 , 219 , 220 , 221 , 222 , 223 , 224 , 225 , 226 , 227 , 229 , 230 , 231 , 232 , 233 , 234 , 235 , 236 , 237 , 238 , 239 , 240 , 242 , 243 , 244 , 245 , 246 , 247 , 248 , 249 , 250 , 251 , 252 , 253 , 253 } ; assert ( v < ( int ) ( sizeof ( inv_map_table ) / sizeof ( inv_map_table [ 0 ] ) ) <S2SV_ModEnd> ) ; v = <S2SV_ModStart> + inv_recenter_nonneg ( v <S2SV_ModEnd> , m ) ; <S2SV_ModStart> - inv_recenter_nonneg ( v <S2SV_ModEnd> , MAX_PROB - 1
<S2SV_ModStart> <S2SV_null> void vp9_diff_update_prob ( vpx_reader * r , vpx_prob <S2SV_ModEnd> * p ) { <S2SV_ModStart> ) { if ( vpx_read <S2SV_ModEnd> ( r , DIFF_UPDATE_PROB <S2SV_ModStart> * p = ( vpx_prob <S2SV_ModEnd> ) inv_remap_prob ( delp
<S2SV_ModStart> cm -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; if <S2SV_ModStart> { int segment ; const int aq_strength = get_aq_c_strength ( cm -> base_qindex , cm -> bit_depth ) ; memset ( cpi -> segmentation_map , DEFAULT_AQ2_SEG , cm -> mi_rows * cm -> mi_cols ) ; vp9_clearall_segfeatures ( seg ) ; if ( cpi -> rc . sb64_target_rate < 256 ) { vp9_disable_segmentation ( seg ) ; return ; } vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg , DEFAULT_AQ2_SEG , SEG_LVL_ALT_Q ) ; for ( segment = 0 ; segment < AQ_C_SEGMENTS ; ++ segment ) { int qindex_delta ; if ( segment == DEFAULT_AQ2_SEG ) continue ; <S2SV_ModEnd> qindex_delta = vp9_compute_qdelta_by_rate ( <S2SV_ModStart> cm -> base_qindex , aq_c_q_adj_factor [ aq_strength ] [ segment ] , cm -> bit_depth ) ; if ( ( cm -> base_qindex != 0 ) && ( ( cm -> base_qindex + qindex_delta ) == 0 ) ) { qindex_delta = - cm -> base_qindex + 1 ; } if ( ( cm -> base_qindex + qindex_delta ) > 0 ) { <S2SV_ModEnd> vp9_enable_segfeature ( seg , <S2SV_ModStart> ; } } } }
<S2SV_ModStart> const float factor = 0.25 <S2SV_ModEnd> ; const int number_blocks <S2SV_ModStart> if ( rc -> avg_frame_bandwidth <S2SV_ModEnd> < factor * number_blocks
<S2SV_ModStart> MB_MODE_INFO * mbmi , int64_t rate , int64_t dist , int bsize ) { MV mv = <S2SV_ModEnd> mbmi -> mv [ <S2SV_ModStart> [ 0 ] . as_mv ; if ( dist <S2SV_ModEnd> > cr -> thresh_dist_sb <S2SV_ModStart> > cr -> thresh_dist_sb && ( mv . row > cr -> motion_thresh || mv . row < - cr -> motion_thresh || mv . col > cr -> motion_thresh || mv . col < - cr -> motion_thresh <S2SV_ModEnd> || ! is_inter_block ( <S2SV_ModStart> ( mbmi ) ) ) return CR_SEGMENT_ID_BASE ; else if ( bsize >= BLOCK_16X16 && rate < cr -> thresh_rate_sb && is_inter_block ( mbmi ) && <S2SV_ModEnd> mbmi -> mv [ <S2SV_ModStart> 0 ] . as_int == 0 && cr -> rate_boost_fac > 10 ) return CR_SEGMENT_ID_BOOST2 ; else return CR_SEGMENT_ID_BOOST1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> int mi_cols ) { size_t last_coded_q_map_size ; <S2SV_ModStart> return NULL ; } last_coded_q_map_size = mi_rows * mi_cols * sizeof ( * cr -> last_coded_q_map ) ; cr -> last_coded_q_map = vpx_malloc ( last_coded_q_map_size ) ; if ( cr -> last_coded_q_map == NULL ) { vpx_free ( cr ) ; return NULL ; } assert ( MAXQ <= 255 ) ; memset ( cr -> last_coded_q_map , MAXQ , last_coded_q_map_size ) ;
<S2SV_ModStart> ; vpx_free ( cr -> last_coded_q_map ) ; vpx_free ( cr
<S2SV_ModStart> cm -> seg ; <S2SV_ModEnd> const int apply_cyclic_refresh = <S2SV_ModStart> cm , rc ) ; if ( cm -> current_video_frame == 0 ) cr -> low_content_avg = 0.0 <S2SV_ModStart> temporal_layer_id > 0 ) || ( cpi -> svc . spatial_layer_id > 0 ) ) { unsigned char * const seg_map = cpi -> segmentation_map ; memset <S2SV_ModEnd> ( seg_map , 0 <S2SV_ModStart> frame_type == KEY_FRAME ) { memset ( cr -> last_coded_q_map , MAXQ , cm -> mi_rows * cm -> mi_cols * sizeof ( * cr -> last_coded_q_map ) ) ; <S2SV_ModStart> sb_index = 0 ; } <S2SV_ModStart> = 0 ; int qindex2 ; const double q = vp9_convert_qindex_to_q ( cm -> base_qindex , cm -> bit_depth ) ; vpx_clear_system_state ( ) ; cr -> thresh_rate_sb = ( ( int64_t ) ( rc -> sb64_target_rate ) << 8 ) << 2 ; cr -> thresh_dist_sb = ( ( int64_t ) ( q * q ) ) << 2 ; vp9_enable_segmentation ( & cm -> seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg , CR_SEGMENT_ID_BASE , SEG_LVL_ALT_Q ) ; vp9_enable_segfeature ( seg , CR_SEGMENT_ID_BOOST1 , SEG_LVL_ALT_Q ) ; vp9_enable_segfeature ( seg , CR_SEGMENT_ID_BOOST2 , SEG_LVL_ALT_Q ) ; qindex_delta = compute_deltaq ( cpi , cm -> base_qindex , cr -> rate_ratio_qdelta ) ; cr -> qindex_delta [ 1 ] = qindex_delta <S2SV_ModEnd> ; qindex2 = clamp <S2SV_ModStart> vp9_set_segdata ( seg , CR_SEGMENT_ID_BOOST1 <S2SV_ModEnd> , SEG_LVL_ALT_Q , qindex_delta <S2SV_ModStart> , qindex_delta ) ; qindex_delta = compute_deltaq ( cpi , cm -> base_qindex , MIN ( CR_MAX_RATE_TARGET_RATIO , 0.1 * cr -> rate_boost_fac * cr -> rate_ratio_qdelta ) ) ; cr -> qindex_delta [ 2 ] = qindex_delta ; vp9_set_segdata ( seg , CR_SEGMENT_ID_BOOST2 , SEG_LVL_ALT_Q , qindex_delta ) ; cyclic_refresh_update_map ( cpi ) <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> , BLOCK_SIZE bsize , int64_t rate , int64_t dist , int skip <S2SV_ModEnd> ) { const VP9_COMMON <S2SV_ModStart> cr , mbmi , rate , dist , bsize <S2SV_ModEnd> ) ; int new_map_value <S2SV_ModStart> 0 ; if ( cyclic_refresh_segment_id_boosted ( mbmi -> segment_id ) ) { mbmi -> segment_id = refresh_this_block ; if ( skip ) mbmi -> segment_id = CR_SEGMENT_ID_BASE ; } if ( cyclic_refresh_segment_id_boosted ( mbmi -> segment_id ) ) { new_map_value = - cr -> time_for_refresh ; } else if ( refresh_this_block ) { if ( cr -> map [ block_index ] == 1 ) <S2SV_ModEnd> new_map_value = 0 ; <S2SV_ModStart> x ++ ) { int map_offset = <S2SV_ModEnd> block_index + y * <S2SV_ModStart> -> mi_cols + x ; cr -> map [ map_offset <S2SV_ModStart> cpi -> segmentation_map [ map_offset ] = mbmi -> segment_id ; if ( ! is_inter_block ( mbmi ) || ! skip ) cr -> last_coded_q_map [ map_offset ] = clamp ( cm -> base_qindex + cr -> qindex_delta [ mbmi -> segment_id ] , 0 , MAXQ ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; int avg ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { aq_highbd_8_variance <S2SV_ModEnd> ( x -> plane <S2SV_ModStart> src . stride , CONVERT_TO_BYTEPTR ( vp9_highbd_64_zeros ) , 0 , bw , bh , & sse , & avg ) ; sse >>= 2 * ( xd -> bd - 8 ) ; avg >>= ( xd -> bd - 8 ) ; } else { aq_variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_ModStart> & avg ) ; } # else aq_variance ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , vp9_64_zeros , 0 , bw , bh , & sse , & avg ) ; # endif <S2SV_ModStart> ; } else { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> src . stride , CONVERT_TO_BYTEPTR ( vp9_highbd_64_zeros ) , 0 , & sse ) ; } else { var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , <S2SV_ModStart> & sse ) ; } # else var = cpi -> fn_ptr [ bs ] . vf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , vp9_64_zeros , 0 , & sse ) ; # endif
<S2SV_ModStart> { double energy ; double energy_midpoint ; vpx_clear_system_state ( ) ; energy_midpoint = ( cpi -> oxcf . pass == 2 ) ? cpi -> twopass . mb_av_energy : DEFAULT_E_MIDPOINT ; energy = vp9_log_block_var <S2SV_ModEnd> ( cpi , x <S2SV_ModStart> x , bs ) - energy_midpoint <S2SV_ModEnd> ; return clamp (
<S2SV_ModStart> & cm -> seg <S2SV_ModEnd> ; int i ; <S2SV_ModStart> abs_delta = SEGMENT_DELTADATA ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; for <S2SV_ModStart> for ( i = 0 ; i < MAX_SEGMENTS ; ++ i <S2SV_ModEnd> ) { int qindex_delta <S2SV_ModStart> ) { int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc , cm -> frame_type , cm -> base_qindex , rate_ratio [ i ] , cm -> bit_depth ) ; if ( ( cm -> base_qindex != 0 ) && ( ( cm -> base_qindex + qindex_delta ) == 0 ) ) { qindex_delta = - cm -> base_qindex + 1 ; } if ( rate_ratio [ i ] == 1.0 ) { continue ; } <S2SV_ModEnd> vp9_set_segdata ( seg , <S2SV_ModStart> vp9_set_segdata ( seg , i <S2SV_ModEnd> , SEG_LVL_ALT_Q , qindex_delta <S2SV_ModStart> vp9_enable_segfeature ( seg , i <S2SV_ModEnd> , SEG_LVL_ALT_Q ) ; <S2SV_ModStart> , SEG_LVL_ALT_Q ) ; <S2SV_ModEnd> } } } <S2SV_null>
<S2SV_ModStart> , vp9_coeff_stats * coef_branch_ct , vp9_coeff_probs_model * coef_probs ) { vp9_coeff_count * coef_counts = cpi -> td . rd_counts . <S2SV_ModEnd> coef_counts [ tx_size ]
<S2SV_ModStart> * lf , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> { int i ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , lf <S2SV_ModStart> , 6 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , lf <S2SV_ModStart> , 3 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , lf <S2SV_ModStart> -> mode_ref_delta_enabled ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb , lf <S2SV_ModStart> [ i ] ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , changed <S2SV_ModStart> ] = delta ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , abs <S2SV_ModStart> , 6 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , delta <S2SV_ModStart> [ i ] ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , changed <S2SV_ModStart> ] = delta ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , abs <S2SV_ModStart> , 6 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , delta
<S2SV_ModStart> static void encode_quantization ( const VP9_COMMON * const cm , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> * wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm
<S2SV_ModStart> static void encode_segmentation ( VP9_COMMON * cm , MACROBLOCKD * xd , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> i , j ; const <S2SV_ModStart> * seg = & cm -> seg ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , seg <S2SV_ModStart> enabled ) return ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , seg <S2SV_ModStart> ) { vp9_choose_segmap_coding_method ( cm , xd <S2SV_ModEnd> ) ; for ( <S2SV_ModStart> prob != MAX_PROB ; vpx_wb_write_bit ( wb , update ) ; if ( update ) vpx_wb_write_literal <S2SV_ModEnd> ( wb , prob <S2SV_ModStart> 8 ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb , seg <S2SV_ModStart> prob != MAX_PROB ; vpx_wb_write_bit ( wb , update ) ; if ( update ) vpx_wb_write_literal <S2SV_ModEnd> ( wb , prob <S2SV_ModStart> ; } } } vpx_wb_write_bit <S2SV_ModEnd> ( wb , seg <S2SV_ModStart> -> update_data ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb , seg <S2SV_ModStart> const int active = segfeature_active ( seg , i , j ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , active <S2SV_ModStart> const int data = get_segdata <S2SV_ModEnd> ( seg , i <S2SV_ModStart> , data_max ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , data
<S2SV_ModStart> cpi -> common ; vpx_writer <S2SV_ModEnd> residual_bc ; int tile_row <S2SV_ModStart> , tile_col ; TOKENEXTRA <S2SV_ModEnd> * tok_end ; size_t <S2SV_ModStart> cm -> log2_tile_rows ; memset <S2SV_ModEnd> ( cm -> above_seg_context <S2SV_ModStart> mi_cols ) ) ; for ( tile_row = 0 ; tile_row < tile_rows ; tile_row ++ ) { for ( tile_col = 0 ; tile_col < tile_cols ; tile_col ++ ) { int tile_idx = tile_row * tile_cols + tile_col ; TOKENEXTRA * tok = cpi -> tile_tok [ tile_row ] [ tile_col ] ; tok_end = cpi -> tile_tok [ tile_row ] [ tile_col ] + <S2SV_ModEnd> cpi -> tok_count [ <S2SV_ModStart> tile_rows - 1 ) vpx_start_encode <S2SV_ModEnd> ( & residual_bc , <S2SV_ModStart> 4 ) ; else vpx_start_encode <S2SV_ModEnd> ( & residual_bc , <S2SV_ModStart> ( cpi , & cpi -> tile_data [ tile_idx ] . tile_info , <S2SV_ModEnd> & residual_bc , & <S2SV_ModStart> residual_bc , & tok <S2SV_ModEnd> , tok_end ) ; <S2SV_ModStart> ; assert ( tok <S2SV_ModEnd> == tok_end ) ; <S2SV_ModStart> == tok_end ) ; vpx_stop_encode <S2SV_ModEnd> ( & residual_bc )
<S2SV_ModStart> VP9_COMMON * cm , vpx_writer * w , FRAME_COUNTS * counts ) { vpx_write_literal <S2SV_ModEnd> ( w , MIN <S2SV_ModStart> tx_mode >= ALLOW_32X32 ) vpx_write_bit <S2SV_ModEnd> ( w , cm <S2SV_ModStart> ) { tx_counts_to_branch_counts_8x8 ( counts -> <S2SV_ModEnd> tx . p8x8 [ <S2SV_ModStart> & cm -> fc -> <S2SV_ModEnd> tx_probs . p8x8 [ <S2SV_ModStart> ) { tx_counts_to_branch_counts_16x16 ( counts -> <S2SV_ModEnd> tx . p16x16 [ <S2SV_ModStart> & cm -> fc -> <S2SV_ModEnd> tx_probs . p16x16 [ <S2SV_ModStart> ) { tx_counts_to_branch_counts_32x32 ( counts -> <S2SV_ModEnd> tx . p32x32 [ <S2SV_ModStart> & cm -> fc -> <S2SV_ModEnd> tx_probs . p32x32 [
<S2SV_ModStart> void encode_unsigned_max ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb , int <S2SV_ModStart> int max ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb , data
<S2SV_ModStart> ( VP9_COMMON * cm , FRAME_COUNTS * counts <S2SV_ModStart> [ i ] += counts -> <S2SV_ModEnd> switchable_interp [ j ]
<S2SV_ModStart> * cpi ) { if ( vp9_preserve_existing_gf ( cpi ) ) { <S2SV_ModEnd> return ( cpi -> <S2SV_ModStart> cpi -> alt_fb_idx ; if ( ( cpi -> oxcf . pass == 2 ) && cpi -> multi_arf_allowed ) { const GF_GROUP * const gf_group = & cpi -> twopass . gf_group ; arf_idx = gf_group -> arf_update_idx [ gf_group -> index ] ; } <S2SV_ModEnd> return ( cpi ->
<S2SV_ModStart> MODE_INFO * mi , vpx_writer <S2SV_ModEnd> * w ) { <S2SV_ModStart> & cm -> fc -> nmvc ; const MACROBLOCK * const x = & cpi -> td . <S2SV_ModEnd> mb ; const MACROBLOCKD <S2SV_ModStart> -> mbmi ; const MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext ; const PREDICTION_MODE <S2SV_ModEnd> mode = mbmi -> <S2SV_ModStart> mbmi -> seg_id_predicted ; vpx_prob <S2SV_ModEnd> pred_prob = vp9_get_pred_prob_seg_id ( <S2SV_ModStart> , xd ) ; vpx_write <S2SV_ModEnd> ( w , pred_flag <S2SV_ModStart> skip = write_skip ( cm , xd <S2SV_ModEnd> , segment_id , mi <S2SV_ModStart> ; if ( ! segfeature_active <S2SV_ModEnd> ( seg , segment_id <S2SV_ModStart> , SEG_LVL_REF_FRAME ) ) vpx_write <S2SV_ModEnd> ( w , is_inter <S2SV_ModStart> ! ( is_inter && skip <S2SV_ModEnd> ) ) { write_selected_tx_size <S2SV_ModStart> ) { write_selected_tx_size ( cm , xd <S2SV_ModEnd> , w ) ; <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> y_mode_prob [ size_group_lookup [ <S2SV_ModStart> num_4x4_w ) { const PREDICTION_MODE <S2SV_ModEnd> b_mode = mi -> <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> y_mode_prob [ 0 ] <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ mode ] <S2SV_ModStart> const int mode_ctx = mbmi_ext <S2SV_ModEnd> -> mode_context [ mbmi <S2SV_ModStart> ] ] ; const vpx_prob <S2SV_ModEnd> * const inter_probs = <S2SV_ModStart> = cm -> fc -> <S2SV_ModEnd> inter_mode_probs [ mode_ctx ] <S2SV_ModStart> ] ; write_ref_frames ( cm , xd <S2SV_ModEnd> , w ) ; <S2SV_ModStart> ; if ( ! segfeature_active <S2SV_ModEnd> ( seg , segment_id <S2SV_ModStart> , inter_probs ) ; <S2SV_ModEnd> } } if ( <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> switchable_interp_prob [ ctx ] <S2SV_ModStart> -> interp_filter ] ) ; ++ cpi -> interp_filter_selected [ 0 ] [ mbmi -> interp_filter ] <S2SV_ModStart> + idx ; const PREDICTION_MODE <S2SV_ModEnd> b_mode = mi -> <S2SV_ModStart> b_mode , inter_probs ) <S2SV_ModEnd> ; if ( b_mode <S2SV_ModStart> . as_mv , & mbmi_ext <S2SV_ModEnd> -> ref_mvs [ mbmi <S2SV_ModStart> . as_mv , & mbmi_ext <S2SV_ModEnd> -> ref_mvs [ mbmi
<S2SV_ModStart> static void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w , TOKENEXTRA <S2SV_ModStart> , const TOKENEXTRA * const stop , vpx_bit_depth_t bit_depth <S2SV_ModEnd> ) { TOKENEXTRA * <S2SV_ModStart> [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; # if CONFIG_VP9_HIGHBITDEPTH const vp9_extra_bit * b ; if ( bit_depth == VPX_BITS_12 ) b = & vp9_extra_bits_high12 [ t ] ; else if ( bit_depth == VPX_BITS_10 ) b = & vp9_extra_bits_high10 [ t ] ; else <S2SV_ModEnd> b = & vp9_extra_bits <S2SV_ModStart> [ t ] ; # else const vp9_extra_bit * const b = & vp9_extra_bits [ t ] ; ( void ) bit_depth ; # endif <S2SV_ModEnd> if ( p -> <S2SV_ModStart> ) & 1 ; vpx_write <S2SV_ModEnd> ( w , bb <S2SV_ModStart> n ) ; } vpx_write_bit <S2SV_ModEnd> ( w , e
<S2SV_ModStart> void prob_diff_update ( const vpx_tree_index * tree , vpx_prob <S2SV_ModEnd> probs [ ] , <S2SV_ModStart> , int n , vpx_writer <S2SV_ModEnd> * w ) {
<S2SV_ModStart> VP9_COMP * cpi , vpx_writer <S2SV_ModEnd> * w ) { <S2SV_ModStart> ; TX_SIZE tx_size ; <S2SV_ModEnd> for ( tx_size = <S2SV_ModStart> ; ++ tx_size ) { vp9_coeff_stats frame_branch_ct [ PLANE_TYPES ] ; vp9_coeff_probs_model frame_coef_probs [ PLANE_TYPES ] ; if ( cpi -> td . counts -> tx . tx_totals [ tx_size ] <= 20 || ( tx_size >= TX_16X16 && cpi -> sf . tx_size_search_method == USE_TX_8X8 ) ) { vpx_write_bit ( w , 0 ) ; } else { build_tree_distribution ( cpi , tx_size , frame_branch_ct , frame_coef_probs ) ; <S2SV_ModStart> , tx_size , frame_branch_ct , frame_coef_probs ) ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> static void update_coef_probs_common ( vpx_writer <S2SV_ModEnd> * const bc , <S2SV_ModStart> , vp9_coeff_stats * frame_branch_ct , vp9_coeff_probs_model * new_coef_probs ) { vp9_coeff_probs_model * old_coef_probs = <S2SV_ModEnd> cpi -> common . <S2SV_ModStart> -> common . fc -> coef_probs [ tx_size ] ; const vpx_prob upd = DIFF_UPDATE_PROB ; const int entropy_nodes_update = UNCONSTRAINED_NODES ; int i , j , k , l , t ; int stepsize = cpi -> sf . coeff_prob_appx_step <S2SV_ModEnd> ; switch ( cpi <S2SV_ModStart> ++ t ) { vpx_prob newp = new_coef_probs <S2SV_ModEnd> [ i ] [ <S2SV_ModStart> t ] ; const vpx_prob oldp = old_coef_probs <S2SV_ModEnd> [ i ] [ <S2SV_ModStart> [ 0 ] , old_coef_probs <S2SV_ModEnd> [ i ] [ <S2SV_ModStart> & newp , upd , stepsize <S2SV_ModStart> < 0 ) { vpx_write_bit <S2SV_ModEnd> ( bc , 0 <S2SV_ModStart> ; return ; } vpx_write_bit <S2SV_ModEnd> ( bc , 1 <S2SV_ModStart> ++ t ) { vpx_prob newp = new_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; vpx_prob * oldp = old_coef_probs <S2SV_ModEnd> [ i ] [ <S2SV_ModStart> + t ; const vpx_prob <S2SV_ModEnd> upd = DIFF_UPDATE_PROB ; <S2SV_ModStart> [ 0 ] , old_coef_probs <S2SV_ModEnd> [ i ] [ <S2SV_ModStart> & newp , upd , stepsize <S2SV_ModStart> u = 1 ; vpx_write <S2SV_ModEnd> ( bc , u <S2SV_ModStart> } return ; } <S2SV_ModEnd> case ONE_LOOP_REDUCED : { <S2SV_ModStart> case ONE_LOOP_REDUCED : { int updates = 0 ; int noupdates_before_first = 0 ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS <S2SV_ModEnd> ; ++ k ) <S2SV_ModStart> ++ t ) { vpx_prob newp = new_coef_probs [ i ] [ j ] [ k ] [ l ] [ t ] ; vpx_prob * oldp = old_coef_probs <S2SV_ModEnd> [ i ] [ <S2SV_ModStart> u = 0 ; <S2SV_ModEnd> if ( t == <S2SV_ModStart> t == PIVOT_NODE ) { <S2SV_ModStart> [ 0 ] , old_coef_probs <S2SV_ModEnd> [ i ] [ <S2SV_ModStart> & newp , upd , stepsize ) ; } else { <S2SV_ModEnd> s = vp9_prob_diff_update_savings_search ( <S2SV_ModStart> , upd ) ; } <S2SV_ModStart> u = 1 ; <S2SV_ModEnd> updates += u ; <S2SV_ModStart> { int v ; vpx_write_bit <S2SV_ModEnd> ( bc , 1 <S2SV_ModStart> ; ++ v ) vpx_write <S2SV_ModEnd> ( bc , 0 <S2SV_ModStart> upd ) ; } vpx_write <S2SV_ModEnd> ( bc , u <S2SV_ModStart> == 0 ) { vpx_write_bit <S2SV_ModEnd> ( bc , 0
<S2SV_ModStart> VP9_COMMON * cm , vpx_writer * w , FRAME_COUNTS * counts <S2SV_ModEnd> ) { int k <S2SV_ModStart> & cm -> fc -> <S2SV_ModEnd> skip_probs [ k ] <S2SV_ModStart> [ k ] , counts -> <S2SV_ModEnd> skip [ k ]
<S2SV_ModStart> VP9_COMMON * cm , vpx_writer * w , FRAME_COUNTS * counts <S2SV_ModEnd> ) { int j <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> switchable_interp_prob [ j ] <S2SV_ModStart> [ j ] , counts -> <S2SV_ModEnd> switchable_interp [ j ]
<S2SV_ModStart> , uncompressed_hdr_size ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { data <S2SV_ModStart> 0 } ; struct vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header ( <S2SV_ModStart> saved_wb = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb , <S2SV_ModStart> ) ; uncompressed_hdr_size = vpx_wb_bytes_written <S2SV_ModEnd> ( & wb ) <S2SV_ModStart> data += uncompressed_hdr_size ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; first_part_size <S2SV_ModStart> data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb ,
<S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> * const fc = cm -> fc ; FRAME_COUNTS * counts = cpi -> td . counts ; vpx_writer header_bc ; vpx_start_encode <S2SV_ModEnd> ( & header_bc , <S2SV_ModStart> cm , & header_bc , counts <S2SV_ModStart> cm , & header_bc , counts <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> inter_mode_probs [ i ] <S2SV_ModStart> [ i ] , counts -> <S2SV_ModEnd> inter_mode [ i ] <S2SV_ModStart> INTER_MODES , & header_bc <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> cm , & header_bc , counts <S2SV_ModStart> [ i ] , counts -> <S2SV_ModEnd> intra_inter [ i ] <S2SV_ModStart> ) ; if ( cpi <S2SV_ModEnd> -> allow_comp_inter_inter ) { <S2SV_ModStart> reference_mode == REFERENCE_MODE_SELECT ; vpx_write_bit <S2SV_ModEnd> ( & header_bc , <S2SV_ModStart> ( use_compound_pred ) { vpx_write_bit <S2SV_ModEnd> ( & header_bc , <S2SV_ModStart> [ i ] , counts -> <S2SV_ModEnd> comp_inter [ i ] <S2SV_ModStart> [ 0 ] , counts -> <S2SV_ModEnd> single_ref [ i ] <S2SV_ModStart> [ 1 ] , counts -> <S2SV_ModEnd> single_ref [ i ] <S2SV_ModStart> [ i ] , counts -> <S2SV_ModEnd> comp_ref [ i ] <S2SV_ModStart> , cm -> fc -> <S2SV_ModEnd> y_mode_prob [ i ] <S2SV_ModStart> [ i ] , counts -> <S2SV_ModEnd> y_mode [ i ] <S2SV_ModStart> [ i ] , counts -> <S2SV_ModEnd> partition [ i ] <S2SV_ModStart> allow_high_precision_mv , & header_bc , & counts -> mv ) ; } vpx_stop_encode <S2SV_ModEnd> ( & header_bc )
<S2SV_ModStart> void write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb , int <S2SV_ModStart> != 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb , 1 <S2SV_ModStart> , 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , abs <S2SV_ModStart> , 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , delta_q <S2SV_ModStart> ; } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb , 0
<S2SV_ModStart> * cm , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> cm -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , scaling_active <S2SV_ModStart> ( scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> , 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm
<S2SV_ModStart> * cm , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> * wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> , 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm
<S2SV_ModStart> * cpi , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> , ref_frame ) ; if ( cpi -> use_svc && ( ( cpi -> svc . number_temporal_layers > 1 && cpi -> oxcf . rc_mode == VPX_CBR ) || ( cpi -> svc . number_spatial_layers > 1 && cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id ] . is_key_frame ) || ( is_two_pass_svc ( cpi ) && cpi -> svc . encode_empty_frame_state == ENCODING && cpi -> svc . layer_context [ 0 ] . frames_from_key_frame < cpi -> svc . number_temporal_layers + 1 ) ) ) { found = 0 ; } else if ( cfg != NULL ) { <S2SV_ModStart> cfg -> y_crop_height ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb , found <S2SV_ModStart> ! found ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> , 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm
<S2SV_ModStart> static void write_inter_mode ( vpx_writer * w , PREDICTION_MODE mode , const vpx_prob <S2SV_ModEnd> * probs ) {
<S2SV_ModStart> INTERP_FILTER filter , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> , 3 } ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , filter <S2SV_ModStart> filter != SWITCHABLE ) vpx_wb_write_literal <S2SV_ModEnd> ( wb , filter_to_literal
<S2SV_ModStart> static void write_intra_mode ( vpx_writer * w , PREDICTION_MODE mode , const vpx_prob <S2SV_ModEnd> * probs ) {
<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm , const MACROBLOCKD * xd , <S2SV_ModEnd> MODE_INFO * * mi_8x8 <S2SV_ModStart> * * mi_8x8 , vpx_writer * w ) { <S2SV_ModEnd> const struct segmentation * <S2SV_ModStart> * const above_mi = xd -> above_mi <S2SV_ModEnd> ; const MODE_INFO * <S2SV_ModStart> left_mi = xd -> left_mi <S2SV_ModEnd> ; const MB_MODE_INFO * <S2SV_ModStart> ) ; write_skip ( cm , xd <S2SV_ModEnd> , mbmi -> segment_id <S2SV_ModStart> TX_MODE_SELECT ) write_selected_tx_size ( cm , xd <S2SV_ModEnd> , w ) ;
<S2SV_ModStart> * const tile , vpx_writer <S2SV_ModEnd> * w , TOKENEXTRA <S2SV_ModStart> * * tok , const TOKENEXTRA * const tok_end ) { const VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & cpi -> td . mb . e_mbd ; <S2SV_ModEnd> int mi_row , mi_col <S2SV_ModStart> int mi_row , mi_col ; set_partition_probs ( cm , xd ) <S2SV_ModStart> ) { vp9_zero ( xd -> <S2SV_ModEnd> left_seg_context ) ; for
<S2SV_ModStart> * const tile , vpx_writer <S2SV_ModEnd> * w , TOKENEXTRA <S2SV_ModStart> * * tok , const TOKENEXTRA * const <S2SV_ModEnd> tok_end , int mi_row <S2SV_ModStart> int mi_col ) { const <S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> [ 0 ] ; cpi -> td . mb . mbmi_ext = cpi -> td . mb . mbmi_ext_base + ( mi_row * cm -> mi_cols + mi_col ) ; <S2SV_ModStart> ) { write_mb_modes_kf ( cm , xd <S2SV_ModEnd> , xd -> mi <S2SV_ModStart> , tok , tok_end , cm -> bit_depth
<S2SV_ModStart> * const tile , vpx_writer * w , <S2SV_ModEnd> TOKENEXTRA * * tok <S2SV_ModStart> * * tok , const TOKENEXTRA * const <S2SV_ModEnd> tok_end , int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { const <S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> const int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ; const int bs <S2SV_ModStart> ; BLOCK_SIZE subsize ; const MODE_INFO * m = NULL ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; <S2SV_ModEnd> m = cm -> <S2SV_ModStart> mi_stride + mi_col ] <S2SV_ModEnd> ; partition = partition_lookup
<S2SV_ModStart> static void write_partition ( const VP9_COMMON * const cm , const MACROBLOCKD * const <S2SV_ModEnd> xd , int hbs <S2SV_ModStart> , BLOCK_SIZE bsize , vpx_writer <S2SV_ModEnd> * w ) { <S2SV_ModStart> bsize ) ; const vpx_prob * const probs = xd -> partition_probs [ ctx ] <S2SV_ModEnd> ; const int has_rows <S2SV_ModStart> == PARTITION_HORZ ) ; vpx_write <S2SV_ModEnd> ( w , p <S2SV_ModStart> == PARTITION_VERT ) ; vpx_write <S2SV_ModEnd> ( w , p
<S2SV_ModStart> BITSTREAM_PROFILE profile , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> * wb ) { switch ( profile ) { case PROFILE_0 : vpx_wb_write_literal ( wb , 0 , 2 ) ; break ; case PROFILE_1 : vpx_wb_write_literal ( wb , 2 , 2 ) ; break ; case PROFILE_2 : vpx_wb_write_literal ( wb , 1 , 2 ) ; break ; case PROFILE_3 : vpx_wb_write_literal ( wb , 6 , 3 ) ; break ; default : assert ( 0 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> void write_ref_frames ( const VP9_COMMON * cm , const MACROBLOCKD * xd , vpx_writer * w ) { const MB_MODE_INFO * const mbmi = & xd -> mi [ 0 ] -> mbmi ; const int is_compound = has_second_ref ( mbmi ) ; const int segment_id = mbmi -> segment_id ; if ( segfeature_active ( & cm -> seg , segment_id , SEG_LVL_REF_FRAME ) ) { assert ( ! is_compound ) ; assert ( mbmi -> ref_frame [ 0 ] == get_segdata ( & <S2SV_ModEnd> cm -> seg , <S2SV_ModStart> , SEG_LVL_REF_FRAME ) ) ; } else { if ( cm -> reference_mode == REFERENCE_MODE_SELECT ) { vpx_write ( w , is_compound , vp9_get_reference_mode_prob ( cm , xd ) ) ; } else <S2SV_ModStart> assert ( ! is_compound == <S2SV_ModEnd> ( cm -> reference_mode <S2SV_ModStart> cm -> reference_mode == <S2SV_ModEnd> SINGLE_REFERENCE ) ) ; <S2SV_ModStart> ( is_compound ) { vpx_write <S2SV_ModEnd> ( w , mbmi <S2SV_ModStart> ] != LAST_FRAME ; vpx_write <S2SV_ModEnd> ( w , bit0 <S2SV_ModStart> ] != GOLDEN_FRAME ; vpx_write <S2SV_ModEnd> ( w , bit1
<S2SV_ModStart> static void write_segment_id ( vpx_writer <S2SV_ModEnd> * w , const
<S2SV_ModStart> void write_selected_tx_size ( const VP9_COMMON * cm , const MACROBLOCKD * xd , vpx_writer <S2SV_ModEnd> * w ) { <S2SV_ModStart> * w ) { TX_SIZE tx_size = xd -> mi [ 0 ] -> mbmi . tx_size ; BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi . sb_type ; <S2SV_ModStart> bsize ] ; const vpx_prob <S2SV_ModEnd> * const tx_probs = <S2SV_ModStart> , xd , & cm -> fc -> tx_probs ) ; vpx_write <S2SV_ModEnd> ( w , tx_size <S2SV_ModStart> >= TX_16X16 ) { vpx_write <S2SV_ModEnd> ( w , tx_size <S2SV_ModStart> max_tx_size >= TX_32X32 ) vpx_write <S2SV_ModEnd> ( w , tx_size
<S2SV_ModStart> int write_skip ( const VP9_COMMON * cm , const MACROBLOCKD * xd , <S2SV_ModEnd> int segment_id , const <S2SV_ModStart> MODE_INFO * mi , vpx_writer <S2SV_ModEnd> * w ) { <S2SV_ModStart> * w ) { if ( segfeature_active ( & cm -> <S2SV_ModEnd> seg , segment_id , <S2SV_ModStart> mbmi . skip ; vpx_write <S2SV_ModEnd> ( w , skip <S2SV_ModStart> skip , vp9_get_skip_prob ( cm <S2SV_ModEnd> , xd ) )
<S2SV_ModStart> void write_sync_code ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> * wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb , VP9_SYNC_CODE_0 <S2SV_ModStart> , 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , VP9_SYNC_CODE_1 <S2SV_ModStart> , 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , VP9_SYNC_CODE_2
<S2SV_ModStart> static void write_tile_info ( const VP9_COMMON * const cm , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> ( ones -- ) vpx_wb_write_bit <S2SV_ModEnd> ( wb , 1 <S2SV_ModStart> log2_tile_cols < max_log2_tile_cols ) vpx_wb_write_bit <S2SV_ModEnd> ( wb , 0 <S2SV_ModStart> , 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> log2_tile_rows != 0 ) vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm
<S2SV_ModStart> * cpi , struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) { <S2SV_ModStart> cpi -> common ; MACROBLOCKD * const xd = & cpi -> td . mb . e_mbd ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , VP9_FRAME_MARKER <S2SV_ModStart> , wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , 0 <S2SV_ModStart> , 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> -> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> -> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> == KEY_FRAME ) { write_sync_code ( wb ) ; write_bitdepth_colorspace_sampling ( cm , wb ) ; write_frame_size ( cm , wb ) ; } else { if ( ! cm -> show_frame ) vpx_wb_write_bit ( wb , cm -> intra_only ) ; if ( ! cm -> error_resilient_mode ) vpx_wb_write_literal ( wb , cm -> reset_frame_context , 2 ) ; if ( cm -> intra_only ) { <S2SV_ModEnd> write_sync_code ( wb ) <S2SV_ModStart> cm -> profile > PROFILE_0 ) { write_bitdepth_colorspace_sampling ( cm , wb ) ; } vpx_wb_write_literal ( wb , get_refresh_mask ( cpi ) , REF_FRAMES ) ; write_frame_size ( cm , wb ) ; } else { MV_REFERENCE_FRAME ref_frame ; vpx_wb_write_literal <S2SV_ModEnd> ( wb , get_refresh_mask <S2SV_ModStart> ++ ref_frame ) { assert ( get_ref_frame_map_idx ( cpi , ref_frame ) != INVALID_IDX ) ; vpx_wb_write_literal ( wb , get_ref_frame_map_idx <S2SV_ModEnd> ( cpi , ref_frame <S2SV_ModStart> , REF_FRAMES_LOG2 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> , wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> ; fix_interp_filter ( cm , cpi -> td . counts <S2SV_ModStart> -> error_resilient_mode ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> -> refresh_frame_context ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> frame_parallel_decoding_mode ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb , cm <S2SV_ModStart> ) ; encode_segmentation ( cm , xd <S2SV_ModEnd> , wb ) ;
<S2SV_ModStart> int * costs , vpx_tree tree , const vpx_prob <S2SV_ModEnd> * probs , int <S2SV_ModStart> c ) { const vpx_prob <S2SV_ModEnd> prob = probs [ <S2SV_ModStart> b ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree [
<S2SV_ModStart> * costs , const vpx_prob * probs , vpx_tree <S2SV_ModEnd> tree ) { cost
<S2SV_ModStart> * costs , const vpx_prob * probs , vpx_tree <S2SV_ModEnd> tree ) { assert
<S2SV_ModStart> void fadst16 ( const tran_low_t * input , tran_low_t <S2SV_ModEnd> * output ) { <S2SV_ModStart> * output ) { tran_high_t <S2SV_ModEnd> s0 , s1 , <S2SV_ModStart> , s7 , s8 ; tran_high_t <S2SV_ModEnd> s9 , s10 , <S2SV_ModStart> s14 , s15 ; tran_high_t <S2SV_ModEnd> x0 = input [ <S2SV_ModStart> [ 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input [ <S2SV_ModStart> [ 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input [ <S2SV_ModStart> [ 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input [ <S2SV_ModStart> [ 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input [ <S2SV_ModStart> [ 11 ] ; tran_high_t <S2SV_ModEnd> x5 = input [ <S2SV_ModStart> [ 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input [ <S2SV_ModStart> [ 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input [ <S2SV_ModStart> [ 6 ] ; tran_high_t <S2SV_ModEnd> x8 = input [ <S2SV_ModStart> [ 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input [ <S2SV_ModStart> [ 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input [ <S2SV_ModStart> [ 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input [ <S2SV_ModStart> [ 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input [ <S2SV_ModStart> [ 3 ] ; tran_high_t <S2SV_ModEnd> x13 = input [ <S2SV_ModStart> [ 12 ] ; tran_high_t <S2SV_ModEnd> x14 = input [ <S2SV_ModStart> [ 1 ] ; tran_high_t <S2SV_ModEnd> x15 = input [ <S2SV_ModStart> [ 0 ] = ( tran_low_t ) <S2SV_ModStart> [ 1 ] = ( tran_low_t ) <S2SV_ModStart> [ 2 ] = ( tran_low_t ) <S2SV_ModStart> [ 3 ] = ( tran_low_t ) <S2SV_ModStart> [ 4 ] = ( tran_low_t ) <S2SV_ModStart> [ 5 ] = ( tran_low_t ) <S2SV_ModStart> [ 6 ] = ( tran_low_t ) <S2SV_ModStart> [ 7 ] = ( tran_low_t ) <S2SV_ModStart> [ 8 ] = ( tran_low_t ) <S2SV_ModStart> [ 9 ] = ( tran_low_t ) <S2SV_ModStart> [ 10 ] = ( tran_low_t ) <S2SV_ModStart> [ 11 ] = ( tran_low_t ) <S2SV_ModStart> [ 12 ] = ( tran_low_t ) <S2SV_ModStart> [ 13 ] = ( tran_low_t ) <S2SV_ModStart> [ 14 ] = ( tran_low_t ) <S2SV_ModStart> [ 15 ] = ( tran_low_t )
<S2SV_ModStart> void fadst4 ( const tran_low_t * input , tran_low_t <S2SV_ModEnd> * output ) { <S2SV_ModStart> * output ) { tran_high_t x0 , x1 , x2 , x3 ; tran_high_t <S2SV_ModEnd> s0 , s1 , <S2SV_ModStart> [ 0 ] = ( tran_low_t ) <S2SV_ModStart> [ 1 ] = ( tran_low_t ) <S2SV_ModStart> [ 2 ] = ( tran_low_t ) <S2SV_ModStart> [ 3 ] = ( tran_low_t )
<S2SV_ModStart> void fadst8 ( const tran_low_t * input , tran_low_t <S2SV_ModEnd> * output ) { <S2SV_ModStart> * output ) { tran_high_t s0 , s1 , s2 , s3 , s4 , s5 , s6 , s7 ; tran_high_t <S2SV_ModEnd> x0 = input [ <S2SV_ModStart> [ 7 ] ; tran_high_t <S2SV_ModEnd> x1 = input [ <S2SV_ModStart> [ 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input [ <S2SV_ModStart> [ 5 ] ; tran_high_t <S2SV_ModEnd> x3 = input [ <S2SV_ModStart> [ 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input [ <S2SV_ModStart> [ 3 ] ; tran_high_t <S2SV_ModEnd> x5 = input [ <S2SV_ModStart> [ 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input [ <S2SV_ModStart> [ 1 ] ; tran_high_t <S2SV_ModEnd> x7 = input [ <S2SV_ModStart> [ 0 ] = ( tran_low_t ) <S2SV_ModStart> [ 1 ] = ( tran_low_t ) <S2SV_ModStart> [ 2 ] = ( tran_low_t ) <S2SV_ModStart> [ 3 ] = ( tran_low_t ) <S2SV_ModStart> [ 4 ] = ( tran_low_t ) <S2SV_ModStart> [ 5 ] = ( tran_low_t ) <S2SV_ModStart> [ 6 ] = ( tran_low_t ) <S2SV_ModStart> [ 7 ] = ( tran_low_t )
<S2SV_ModStart> void fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 ] <S2SV_ModStart> [ 16 ] , tran_low_t <S2SV_ModEnd> out [ 16 ] <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 ] <S2SV_ModStart> [ 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 ] <S2SV_ModStart> [ 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 ] <S2SV_ModStart> [ 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 ] <S2SV_ModStart> [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1 , temp2 ; <S2SV_ModStart> 15 ] ; { tran_high_t <S2SV_ModEnd> s0 , s1 , <S2SV_ModStart> s6 , s7 ; tran_high_t <S2SV_ModEnd> t0 , t1 , <S2SV_ModStart> t2 , t3 ; tran_high_t <S2SV_ModEnd> x0 , x1 , <S2SV_ModStart> [ 0 ] = ( tran_low_t ) <S2SV_ModStart> [ 4 ] = ( tran_low_t ) <S2SV_ModStart> [ 8 ] = ( tran_low_t ) <S2SV_ModStart> [ 12 ] = ( tran_low_t ) <S2SV_ModStart> [ 2 ] = ( tran_low_t ) <S2SV_ModStart> [ 6 ] = ( tran_low_t ) <S2SV_ModStart> [ 10 ] = ( tran_low_t ) <S2SV_ModStart> [ 14 ] = ( tran_low_t ) <S2SV_ModStart> [ 2 ] * cospi_24_64 + <S2SV_ModEnd> step3 [ 5 ] <S2SV_ModStart> [ 2 ] * cospi_8_64 - <S2SV_ModEnd> step3 [ 5 ] <S2SV_ModStart> step3 [ 3 ] + step2 [ 2 ] ; step1 [ 3 ] = step3 [ 3 ] - step2 [ 2 ] ; step1 [ 4 ] = step3 [ 4 ] - step2 [ 5 ] ; step1 [ 5 ] = step3 [ 4 ] + <S2SV_ModEnd> step2 [ 5 ] <S2SV_ModStart> [ 1 ] = ( tran_low_t ) <S2SV_ModStart> [ 9 ] = ( tran_low_t ) <S2SV_ModStart> [ 5 ] = ( tran_low_t ) <S2SV_ModStart> [ 13 ] = ( tran_low_t ) <S2SV_ModStart> [ 3 ] = ( tran_low_t ) <S2SV_ModStart> [ 11 ] = ( tran_low_t ) <S2SV_ModStart> [ 7 ] = ( tran_low_t ) <S2SV_ModStart> [ 15 ] = ( tran_low_t )
<S2SV_ModStart> void fdct4 ( const tran_low_t * input , tran_low_t <S2SV_ModEnd> * output ) { <S2SV_ModStart> * output ) { tran_high_t <S2SV_ModEnd> step [ 4 ] <S2SV_ModStart> [ 4 ] ; tran_high_t <S2SV_ModEnd> temp1 , temp2 ; <S2SV_ModStart> [ 0 ] = ( tran_low_t ) fdct_round_shift ( temp1 ) ; output [ 2 ] = ( tran_low_t ) <S2SV_ModEnd> fdct_round_shift ( temp2 ) <S2SV_ModStart> [ 1 ] = ( tran_low_t ) fdct_round_shift ( temp1 ) ; output [ 3 ] = ( tran_low_t ) <S2SV_ModEnd> fdct_round_shift ( temp2 )
<S2SV_ModStart> void fdct8 ( const tran_low_t * input , tran_low_t <S2SV_ModEnd> * output ) { <S2SV_ModStart> * output ) { tran_high_t <S2SV_ModEnd> s0 , s1 , <S2SV_ModStart> s6 , s7 ; tran_high_t t0 , t1 , t2 , t3 ; tran_high_t <S2SV_ModEnd> x0 , x1 , <S2SV_ModStart> [ 0 ] = ( tran_low_t ) <S2SV_ModStart> [ 2 ] = ( tran_low_t ) <S2SV_ModStart> [ 4 ] = ( tran_low_t ) <S2SV_ModStart> [ 6 ] = ( tran_low_t ) <S2SV_ModStart> cospi_16_64 ; t2 = ( tran_low_t ) fdct_round_shift ( t0 ) ; t3 = ( tran_low_t ) <S2SV_ModEnd> fdct_round_shift ( t1 ) <S2SV_ModStart> [ 1 ] = ( tran_low_t ) <S2SV_ModStart> [ 3 ] = ( tran_low_t ) <S2SV_ModStart> [ 5 ] = ( tran_low_t ) <S2SV_ModStart> [ 7 ] = ( tran_low_t )
<S2SV_ModStart> int16_t * input , tran_low_t <S2SV_ModEnd> * output , int <S2SV_ModStart> == DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input , output <S2SV_ModStart> ; } else { tran_low_t <S2SV_ModEnd> out [ 256 ] <S2SV_ModStart> [ 256 ] ; <S2SV_ModEnd> int i , j <S2SV_ModStart> i , j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 ] <S2SV_ModStart> ; ++ j ) out <S2SV_ModEnd> [ j * 16
<S2SV_ModStart> int16_t * input , tran_low_t <S2SV_ModEnd> * output , int <S2SV_ModStart> == DCT_DCT ) { vpx_fdct4x4_c <S2SV_ModEnd> ( input , output <S2SV_ModStart> ; } else { tran_low_t <S2SV_ModEnd> out [ 4 * <S2SV_ModStart> * 4 ] ; <S2SV_ModEnd> int i , j <S2SV_ModStart> i , j ; tran_low_t <S2SV_ModEnd> temp_in [ 4 ] <S2SV_ModStart> ; ++ j ) out <S2SV_ModEnd> [ j * 4
<S2SV_ModStart> int16_t * input , tran_low_t <S2SV_ModEnd> * output , int <S2SV_ModStart> == DCT_DCT ) { vpx_fdct8x8_c <S2SV_ModEnd> ( input , output <S2SV_ModStart> ; } else { tran_low_t <S2SV_ModEnd> out [ 64 ] <S2SV_ModStart> [ 64 ] ; <S2SV_ModEnd> int i , j <S2SV_ModStart> i , j ; tran_low_t <S2SV_ModEnd> temp_in [ 8 ] <S2SV_ModStart> ; ++ j ) out <S2SV_ModEnd> [ j * 8
<S2SV_ModStart> int16_t * input , tran_low_t <S2SV_ModEnd> * output , int <S2SV_ModStart> { int i ; tran_high_t <S2SV_ModEnd> a1 , b1 , <S2SV_ModStart> ; const int16_t * ip_pass0 = input ; const tran_low_t * ip = NULL ; tran_low_t <S2SV_ModEnd> * op = output <S2SV_ModStart> ) { a1 = ip_pass0 [ 0 * stride ] ; b1 = ip_pass0 [ 1 * stride ] ; c1 = ip_pass0 <S2SV_ModEnd> [ 2 * stride <S2SV_ModStart> ] ; d1 = ip_pass0 <S2SV_ModEnd> [ 3 * stride <S2SV_ModStart> [ 0 ] = ( tran_low_t ) a1 ; op [ 4 ] = ( tran_low_t ) <S2SV_ModEnd> c1 ; op [ <S2SV_ModStart> [ 8 ] = ( tran_low_t ) <S2SV_ModStart> [ 12 ] = ( tran_low_t ) b1 ; ip_pass0 <S2SV_ModEnd> ++ ; op ++ <S2SV_ModStart> [ 0 ] = ( tran_low_t ) ( a1 * UNIT_QUANT_FACTOR ) ; op [ 1 ] = ( tran_low_t ) ( c1 * UNIT_QUANT_FACTOR ) <S2SV_ModEnd> ; op [ 2 <S2SV_ModStart> [ 2 ] = ( tran_low_t ) ( d1 * UNIT_QUANT_FACTOR ) <S2SV_ModEnd> ; op [ 3 <S2SV_ModStart> [ 3 ] = ( tran_low_t ) ( b1 * UNIT_QUANT_FACTOR ) <S2SV_ModEnd> ; ip += 4
<S2SV_ModStart> ref_frame_flags ; if ( segfeature_active <S2SV_ModEnd> ( & cpi ->
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> choose_partitioning ( VP9_COMP * <S2SV_ModStart> * const tile , MACROBLOCK * x , int mi_row , int mi_col ) { VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; MACROBLOCKD * xd <S2SV_ModStart> * xd = & x -> <S2SV_ModEnd> e_mbd ; int i <S2SV_ModStart> , j , k , m ; v64x64 vt ; v16x16 vt2 [ 16 ] ; int force_split [ 21 ] <S2SV_ModEnd> ; uint8_t * s <S2SV_ModStart> pixels_high = 64 ; int64_t thresholds [ 4 ] = { cpi -> vbp_thresholds [ 0 ] , cpi -> vbp_thresholds [ 1 ] , cpi -> vbp_thresholds [ 2 ] , cpi -> vbp_thresholds [ 3 ] } ; const int is_key_frame = ( cm -> frame_type == KEY_FRAME ) ; const int use_4x4_partition = is_key_frame ; const int low_res = ( cm -> width <= 352 && cm -> height <= 288 ) ; int variance4x4downsample [ 16 ] ; int segment_id = CR_SEGMENT_ID_BASE ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled ) { const uint8_t * const map = cm -> seg . update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; segment_id = get_segment_id ( cm , map , BLOCK_64X64 , mi_row , mi_col ) ; if ( cyclic_refresh_segment_id_boosted ( segment_id ) ) { int q = vp9_get_qindex ( & cm -> seg , segment_id , cm -> base_qindex ) ; set_vbp_thresholds ( cpi , thresholds , q ) ; } } set_offsets ( cpi , tile , x , mi_row , mi_col , BLOCK_64X64 ) ; if ( xd -> mb_to_right_edge < 0 ) pixels_wide += ( xd -> mb_to_right_edge >> 3 ) ; if ( xd -> mb_to_bottom_edge < 0 ) pixels_high += ( xd -> mb_to_bottom_edge >> 3 ) ; s = x -> plane [ 0 ] . src . buf ; sp = x -> plane [ 0 ] . src . stride ; if ( ! is_key_frame && ! ( is_one_pass_cbr_svc ( cpi ) && cpi -> svc . layer_context [ cpi -> svc . temporal_layer_id ] . is_key_frame ) ) { MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; unsigned int uv_sad <S2SV_ModEnd> ; const YV12_BUFFER_CONFIG * <S2SV_ModStart> LAST_FRAME ) ; const YV12_BUFFER_CONFIG * yv12_g = NULL ; unsigned int y_sad , y_sad_g ; const BLOCK_SIZE bsize = BLOCK_32X32 + ( mi_col + 4 < cm -> mi_cols ) * 2 + ( mi_row + 4 < cm -> mi_rows ) ; assert ( yv12 != NULL ) ; if ( ! ( is_one_pass_cbr_svc ( cpi ) && cpi -> svc . spatial_layer_id ) ) { yv12_g = get_ref_frame_buffer ( cpi , GOLDEN_FRAME ) ; } if ( yv12_g && yv12_g != yv12 && ( cpi -> ref_frame_flags & VP9_GOLD_FLAG ) ) { vp9_setup_pre_planes ( xd , 0 , yv12_g , mi_row , mi_col , & cm -> frame_refs [ GOLDEN_FRAME - 1 ] . sf ) ; y_sad_g = cpi -> fn_ptr [ bsize ] . sdf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , xd -> plane [ 0 ] . pre [ 0 ] . buf , xd -> plane [ 0 ] . pre [ 0 ] . stride ) ; } else { y_sad_g = UINT_MAX ; } vp9_setup_pre_planes ( xd , 0 , yv12 , mi_row , mi_col , <S2SV_ModEnd> & cm -> frame_refs <S2SV_ModStart> 1 ] . sf ) ; mbmi -> ref_frame [ 0 ] = LAST_FRAME ; mbmi -> ref_frame [ 1 ] = NONE ; mbmi -> sb_type = BLOCK_64X64 ; mbmi -> mv [ 0 ] . as_int = 0 ; mbmi -> interp_filter = BILINEAR ; y_sad = vp9_int_pro_motion_estimation ( cpi , x , bsize <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> , mi_row , mi_col ) ; if ( y_sad_g < y_sad ) { vp9_setup_pre_planes ( xd , 0 , yv12_g , mi_row , mi_col , & cm -> frame_refs [ GOLDEN_FRAME - 1 ] . sf ) ; mbmi -> ref_frame [ 0 ] = GOLDEN_FRAME ; mbmi -> mv [ 0 ] . as_int = 0 ; y_sad = y_sad_g ; } else { x -> pred_mv [ LAST_FRAME ] = mbmi -> mv [ 0 ] . as_mv ; } vp9_build_inter_predictors_sb ( xd , mi_row , mi_col <S2SV_ModStart> , BLOCK_64X64 ) ; for ( i = 1 ; i <= 2 ; ++ i ) { struct macroblock_plane * p = & x -> plane [ i ] ; struct macroblockd_plane * pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize , pd ) ; if ( bs == BLOCK_INVALID ) uv_sad = UINT_MAX ; else uv_sad = cpi -> fn_ptr [ bs ] . sdf ( p -> src . buf , p -> src . stride , pd -> dst . buf , pd -> dst . stride ) ; x -> color_sensitivity [ i - 1 ] = uv_sad > ( y_sad >> 2 ) ; } d = xd -> plane [ 0 ] . dst . buf ; dp = xd -> plane [ 0 ] . dst . stride ; if ( segment_id == CR_SEGMENT_ID_BASE && y_sad < cpi -> vbp_threshold_sad ) { const int block_width = num_8x8_blocks_wide_lookup [ BLOCK_64X64 ] ; const int block_height = num_8x8_blocks_high_lookup [ BLOCK_64X64 ] ; if ( mi_col + block_width / 2 < cm -> mi_cols && mi_row + block_height / 2 < cm -> mi_rows ) { set_block_size ( cpi , x , xd <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> mi_row , mi_col , BLOCK_64X64 ) ; return 0 ; } } } else { d = VP9_VAR_OFFS ; dp = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { switch ( xd -> bd ) { case 10 : d = CONVERT_TO_BYTEPTR ( VP9_HIGH_VAR_OFFS_10 ) ; break ; case 12 : d = CONVERT_TO_BYTEPTR ( VP9_HIGH_VAR_OFFS_12 ) ; break ; case 8 : default : d = CONVERT_TO_BYTEPTR ( VP9_HIGH_VAR_OFFS_8 ) ; break ; } } # endif } force_split [ 0 ] = 0 ; <S2SV_ModEnd> for ( i = <S2SV_ModStart> << 5 ) ; const int i2 = i << 2 ; force_split [ i + 1 ] = 0 ; <S2SV_ModStart> ) << 4 ) ; const int split_index = 5 + i2 + j <S2SV_ModStart> [ j ] ; force_split [ split_index ] = 0 ; variance4x4downsample [ i2 + j ] = 0 ; if ( ! is_key_frame ) { fill_variance_8x8avg ( s , sp , d , dp , x16_idx , y16_idx , vst , # if CONFIG_VP9_HIGHBITDEPTH xd -> cur_buf -> flags , # endif pixels_wide , pixels_high , is_key_frame ) ; fill_variance_tree ( & vt . split [ i ] . split [ j ] , BLOCK_16X16 ) ; get_variance ( & vt . split [ i ] . split [ j ] . part_variances . none ) ; if ( vt . split [ i ] . split [ j ] . part_variances . none . variance > thresholds [ 2 ] ) { force_split [ split_index ] = 1 ; force_split [ i + 1 ] = 1 ; force_split [ 0 ] = 1 ; } else if ( vt . split [ i ] . split [ j ] . part_variances . none . variance > thresholds [ 1 ] && ! cyclic_refresh_segment_id_boosted ( segment_id ) ) { int minmax = compute_minmax_8x8 ( s , sp , d , dp , x16_idx , y16_idx , # if CONFIG_VP9_HIGHBITDEPTH xd -> cur_buf -> flags , # endif pixels_wide , pixels_high ) ; if ( minmax > cpi -> vbp_threshold_minmax ) { force_split [ split_index ] = 1 ; force_split [ i + 1 ] = 1 ; force_split [ 0 ] = 1 ; } } } if ( is_key_frame || ( low_res && ! cpi -> use_svc && vt . split [ i ] . split [ j ] . part_variances . none . variance > ( thresholds [ 1 ] << 1 ) ) ) { force_split [ split_index ] = 0 ; variance4x4downsample [ i2 + j ] = 1 ; <S2SV_ModStart> ++ ) { int x8_idx <S2SV_ModEnd> = x16_idx + ( <S2SV_ModStart> 3 ) ; int y8_idx <S2SV_ModEnd> = y16_idx + ( <S2SV_ModStart> << 3 ) ; v8x8 * vst2 = is_key_frame ? & vst -> split [ k ] : & vt2 [ i2 + j ] . split [ k ] ; fill_variance_4x4avg ( s , sp , d , dp , x8_idx , y8_idx , vst2 , # if CONFIG_VP9_HIGHBITDEPTH xd -> cur_buf -> flags , # endif pixels_wide , pixels_high , is_key_frame ) ; } <S2SV_ModEnd> } } } for <S2SV_ModStart> i ++ ) { const int i2 = i << 2 ; <S2SV_ModStart> j ++ ) { if ( variance4x4downsample [ i2 + j ] == 1 ) { v16x16 * vtemp = ( ! is_key_frame ) ? & vt2 [ i2 + j ] : & vt . split [ i ] . split [ j ] ; for ( m = 0 ; m < 4 ; m ++ ) fill_variance_tree ( & vtemp -> split [ m ] , BLOCK_8X8 ) ; fill_variance_tree ( vtemp , BLOCK_16X16 ) ; } } fill_variance_tree ( & <S2SV_ModEnd> vt . split [ <S2SV_ModStart> split [ i ] , BLOCK_32X32 ) ; if ( ! force_split [ i + 1 ] ) { get_variance ( & vt . split [ i ] . part_variances . none ) ; if ( vt . split [ i ] . part_variances . none . variance > thresholds [ 1 ] ) { force_split [ i + 1 ] = 1 ; force_split [ 0 ] = 1 ; } } } if ( ! force_split [ 0 ] ) { <S2SV_ModEnd> fill_variance_tree ( & vt <S2SV_ModStart> fill_variance_tree ( & vt , BLOCK_64X64 ) ; get_variance ( & vt . part_variances . none ) ; } if ( mi_col + 8 > cm -> mi_cols || mi_row + 8 > cm -> mi_rows || <S2SV_ModEnd> ! set_vt_partitioning ( cpi <S2SV_ModStart> set_vt_partitioning ( cpi , x , xd , & vt , <S2SV_ModEnd> BLOCK_64X64 , mi_row , <S2SV_ModStart> mi_row , mi_col , thresholds [ 0 ] , BLOCK_16X16 , force_split [ 0 ] <S2SV_ModEnd> ) ) { for <S2SV_ModStart> << 2 ) ; const int i2 = i << 2 ; <S2SV_ModStart> set_vt_partitioning ( cpi , x , xd , <S2SV_ModStart> [ i ] , <S2SV_ModEnd> BLOCK_32X32 , ( mi_row <S2SV_ModStart> + x32_idx ) , thresholds [ 1 ] , BLOCK_16X16 , force_split [ i + 1 ] <S2SV_ModEnd> ) ) { for <S2SV_ModStart> << 1 ) ; v16x16 * vtemp = ( ! is_key_frame && variance4x4downsample [ i2 + j ] == 1 ) ? & vt2 [ i2 + j ] : & vt . split [ i ] . split [ j ] ; if ( ! set_vt_partitioning ( cpi , x , xd , vtemp , BLOCK_16X16 , <S2SV_ModEnd> mi_row + y32_idx + <S2SV_ModStart> + y32_idx + y16_idx , mi_col <S2SV_ModEnd> + x32_idx + x16_idx <S2SV_ModStart> + x32_idx + x16_idx , thresholds [ 2 ] , cpi -> vbp_bsize_min , force_split [ 5 + i2 + j ] ) ) <S2SV_ModEnd> { for ( k <S2SV_ModStart> >> 1 ) ; if ( use_4x4_partition ) { <S2SV_ModEnd> if ( ! set_vt_partitioning <S2SV_ModStart> set_vt_partitioning ( cpi , x , xd , & vtemp -> split [ k ] , BLOCK_8X8 , <S2SV_ModEnd> mi_row + y32_idx + <S2SV_ModStart> + y32_idx + y16_idx + y8_idx , <S2SV_ModEnd> mi_col + x32_idx + <S2SV_ModStart> + x32_idx + x16_idx + x8_idx , thresholds [ 3 ] , BLOCK_8X8 , 0 ) ) { set_block_size ( cpi , x , xd , ( mi_row + y32_idx + y16_idx + y8_idx ) , ( mi_col + x32_idx + x16_idx + x8_idx ) , BLOCK_4X4 ) ; } } else { <S2SV_ModEnd> set_block_size ( cpi , <S2SV_ModStart> set_block_size ( cpi , x , xd <S2SV_ModEnd> , ( mi_row + <S2SV_ModStart> ) ; } } } } } } } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> duplicate_mode_info_in_sb ( VP9_COMMON * <S2SV_ModEnd> cm , MACROBLOCKD * <S2SV_ModStart> cm , MACROBLOCKD * <S2SV_ModEnd> xd , int mi_row
<S2SV_ModStart> TileInfo * const tile , ThreadData * td <S2SV_ModStart> output_enabled , BLOCK_SIZE bsize , PICK_MODE_CONTEXT * ctx <S2SV_ModStart> const x = & td -> mb ; <S2SV_ModEnd> set_offsets ( cpi , <S2SV_ModStart> ( cpi , tile , x <S2SV_ModStart> update_state ( cpi , td , ctx <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> ; encode_superblock ( cpi , td <S2SV_ModStart> , mi_col , bsize , ctx <S2SV_ModStart> ) { update_stats ( & cpi -> common , td <S2SV_ModEnd> ) ; ( *
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , <S2SV_ModStart> output_enabled , BLOCK_SIZE bsize , PICK_MODE_CONTEXT * ctx <S2SV_ModStart> const x = & td -> mb ; <S2SV_ModEnd> set_offsets ( cpi , <S2SV_ModStart> ( cpi , tile , x <S2SV_ModStart> update_state_rt ( cpi , td , ctx <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> , bsize ) ; # if CONFIG_VP9_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 && output_enabled && cpi -> common . frame_type != KEY_FRAME ) { vp9_denoiser_denoise ( & cpi -> denoiser , x , mi_row , mi_col , MAX ( BLOCK_8X8 , bsize ) , ctx ) ; } # endif encode_superblock ( cpi , td <S2SV_ModEnd> , tp , output_enabled <S2SV_ModStart> , mi_col , bsize , ctx <S2SV_ModStart> ) ; update_stats ( & cpi -> common , td <S2SV_ModEnd> ) ; ( *
<S2SV_ModStart> cpi -> sf ; ThreadData * const td = & cpi -> td ; <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; VP9_COMMON <S2SV_ModStart> x -> e_mbd ; RD_COUNTS * const rdc = & cpi -> td . rd_counts ; <S2SV_ModStart> mi ; vp9_zero ( * td <S2SV_ModEnd> -> counts ) ; <S2SV_ModStart> ) ; vp9_zero ( rdc <S2SV_ModEnd> -> coef_counts ) ; <S2SV_ModStart> ) ; vp9_zero ( rdc -> comp_pred_diff <S2SV_ModEnd> ) ; vp9_zero ( <S2SV_ModStart> ) ; vp9_zero ( rdc -> filter_diff ) ; xd -> <S2SV_ModEnd> lossless = cm -> <S2SV_ModStart> uv_ac_delta_q == 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) x -> fwd_txm4x4 = xd -> lossless ? vp9_highbd_fwht4x4 : vpx_highbd_fdct4x4 ; else x -> fwd_txm4x4 = xd -> lossless ? vp9_fwht4x4 : vpx_fdct4x4 ; x -> highbd_itxm_add = xd -> lossless ? vp9_highbd_iwht4x4_add : vp9_highbd_idct4x4_add ; # else x -> fwd_txm4x4 = xd -> lossless ? vp9_fwht4x4 : vpx_fdct4x4 ; # endif x -> itxm_add = xd -> lossless ? vp9_iwht4x4_add : vp9_idct4x4_add ; if ( xd -> lossless ) x -> optimize = 0 ; cm -> tx_mode = select_tx_mode ( cpi , xd <S2SV_ModEnd> ) ; vp9_frame_init_quantizer ( <S2SV_ModStart> vp9_initialize_me_consts ( cpi , x , <S2SV_ModStart> ( cpi ) ; cm -> use_prev_frame_mvs = ! cm -> error_resilient_mode && cm -> width == cm -> last_width && cm -> height == cm -> last_height && ! cm -> intra_only && cm -> last_show_frame <S2SV_ModEnd> ; cm -> prev_mi <S2SV_ModStart> cm -> prev_mi = cm -> use_prev_frame_mvs ? cm -> prev_mip + cm -> mi_stride + 1 : NULL ; x -> quant_fp = cpi -> sf . use_quant_fp ; vp9_zero ( x -> skip_txfm <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> = & cpi -> td . pc_root -> none <S2SV_ModEnd> ; for ( i <S2SV_ModStart> ) ; if ( cm -> frame_type != KEY_FRAME && cpi -> rc . frames_since_golden == 0 && ! cpi -> use_svc ) cpi -> ref_frame_flags &= ( ~ VP9_GOLD_FLAG ) ; if ( sf -> partition_search_type == SOURCE_VAR_BASED_PARTITION ) source_var_based_partition_search_method ( cpi ) ; <S2SV_ModEnd> } { struct vpx_usec_timer <S2SV_ModStart> & emr_timer ) ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { input_fpmb_stats ( & cpi -> twopass . firstpass_mb_stats , cm , & cpi -> twopass . this_frame_mb_stats ) ; } # endif if ( MIN ( cpi -> oxcf . max_threads , <S2SV_ModEnd> 1 << cm -> <S2SV_ModStart> << cm -> log2_tile_cols ) > 1 ) vp9_encode_tiles_mt ( cpi ) ; else encode_tiles ( cpi ) ; <S2SV_ModEnd> vpx_usec_timer_mark ( & emr_timer <S2SV_ModStart> emr_timer ) ; } sf -> skip_encode_frame = sf -> skip_encode_sb ? get_skip_encode_frame ( cm , td ) : 0 ; <S2SV_ModEnd> # if 0 cpi
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , TileDataEnc * tile_data , int mi_row , TOKENEXTRA * * tp ) { SPEED_FEATURES * const sf = & cpi -> sf ; VP9_COMMON * const cm = & cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info ; MACROBLOCK * const x = & td -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; int mi_col ; memset ( & xd -> left_context , 0 , sizeof ( xd -> left_context ) ) ; memset ( xd -> left_seg_context <S2SV_ModEnd> , 0 , sizeof <S2SV_ModStart> sizeof ( xd -> left_seg_context <S2SV_ModEnd> ) ) ; for <S2SV_ModStart> for ( mi_col = tile_info <S2SV_ModEnd> -> mi_col_start ; mi_col <S2SV_ModStart> mi_col_start ; mi_col < tile_info <S2SV_ModEnd> -> mi_col_end ; mi_col <S2SV_ModStart> += MI_BLOCK_SIZE ) { const struct segmentation * const seg = & cm -> seg ; RD_COST dummy_rdc <S2SV_ModEnd> ; const int idx_str <S2SV_ModStart> ; MODE_INFO * * mi <S2SV_ModEnd> = cm -> mi_grid_visible <S2SV_ModStart> mi_grid_visible + idx_str ; PARTITION_SEARCH_TYPE partition_search_type = sf -> partition_search_type ; BLOCK_SIZE bsize = BLOCK_64X64 ; int seg_skip = 0 ; x -> <S2SV_ModEnd> source_variance = UINT_MAX ; <S2SV_ModStart> UINT_MAX ; vp9_zero ( x -> pred_mv ) ; vp9_rd_cost_init ( & dummy_rdc ) ; x -> color_sensitivity [ 0 ] = 0 ; x -> color_sensitivity [ 1 ] = 0 ; if ( seg -> enabled ) { const uint8_t * const map = seg -> update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; int segment_id = get_segment_id ( cm , map , BLOCK_64X64 , mi_row , mi_col ) ; seg_skip = segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ; if ( seg_skip ) { partition_search_type = FIXED_PARTITION ; } } switch ( <S2SV_ModEnd> partition_search_type ) { case <S2SV_ModStart> choose_partitioning ( cpi , tile_info , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> nonrd_use_partition ( cpi , td , tile_data , mi <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> mi_row , mi_col , BLOCK_64X64 , 1 , & dummy_rdc , td -> pc_root <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case SOURCE_VAR_BASED_PARTITION : <S2SV_ModEnd> set_source_var_based_partition ( cpi , <S2SV_ModStart> set_source_var_based_partition ( cpi , tile_info , x , mi <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> nonrd_use_partition ( cpi , td , tile_data , mi <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> mi_row , mi_col , BLOCK_64X64 , 1 , & dummy_rdc , td -> pc_root <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ) ; break ; case FIXED_PARTITION : if ( ! seg_skip ) bsize = sf -> always_this_block_size <S2SV_ModEnd> ; set_fixed_partitioning ( cpi <S2SV_ModStart> set_fixed_partitioning ( cpi , tile_info , mi <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> nonrd_use_partition ( cpi , td , tile_data , mi <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> mi_row , mi_col , BLOCK_64X64 , 1 , & dummy_rdc , td -> pc_root <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case REFERENCE_PARTITION : set_offsets ( cpi , tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; <S2SV_ModStart> if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled && xd -> mi [ 0 ] -> mbmi . segment_id ) { if ( cm -> width <= 352 && cm -> height <= 288 ) x -> max_partition_size = BLOCK_32X32 ; else x -> max_partition_size = BLOCK_64X64 ; x -> min_partition_size = BLOCK_8X8 ; <S2SV_ModEnd> nonrd_pick_partition ( cpi , <S2SV_ModStart> nonrd_pick_partition ( cpi , td , tile_data <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> mi_row , mi_col , BLOCK_64X64 , & dummy_rdc <S2SV_ModEnd> , 1 , INT64_MAX <S2SV_ModStart> , 1 , INT64_MAX , td -> pc_root <S2SV_ModStart> ; } else { choose_partitioning ( cpi , tile_info , x , mi_row , mi_col ) ; if ( cm -> frame_type == KEY_FRAME ) <S2SV_ModEnd> nonrd_use_partition ( cpi , <S2SV_ModStart> nonrd_use_partition ( cpi , td , tile_data , mi <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> , 1 , & dummy_rdc , td -> pc_root ) ; else nonrd_select_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , 1 , & dummy_rdc , td -> pc_root <S2SV_ModEnd> ) ; } break <S2SV_ModStart> ( 0 ) ; break ;
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , TileDataEnc * tile_data , int mi_row , TOKENEXTRA * * tp ) { VP9_COMMON * const cm = & cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info ; MACROBLOCK * const x = & td -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; SPEED_FEATURES * const sf = & cpi -> sf ; int mi_col ; memset ( & xd -> left_context , 0 , sizeof ( xd -> left_context ) ) ; memset ( xd -> left_seg_context <S2SV_ModEnd> , 0 , sizeof <S2SV_ModStart> sizeof ( xd -> left_seg_context <S2SV_ModEnd> ) ) ; for <S2SV_ModStart> for ( mi_col = tile_info <S2SV_ModEnd> -> mi_col_start ; mi_col <S2SV_ModStart> mi_col_start ; mi_col < tile_info <S2SV_ModEnd> -> mi_col_end ; mi_col <S2SV_ModStart> += MI_BLOCK_SIZE ) { const struct segmentation * const seg = & cm -> seg ; <S2SV_ModStart> ; int64_t dummy_dist ; RD_COST dummy_rdc ; int i ; int seg_skip = 0 ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; MODE_INFO * * mi = cm -> mi_grid_visible + idx_str <S2SV_ModEnd> ; if ( sf <S2SV_ModStart> for ( i = 0 ; i < 64 <S2SV_ModEnd> ; ++ i ) <S2SV_ModStart> ; ++ i ) td -> leaf_tree [ i ] . pred_interp_filter = SWITCHABLE ; for ( i = 0 ; i < 64 ; ++ i ) { td -> pc_tree [ i ] . vertical [ 0 ] . pred_interp_filter = SWITCHABLE ; td -> pc_tree [ i ] . vertical [ 1 ] . pred_interp_filter = SWITCHABLE ; td -> pc_tree [ i ] . horizontal [ 0 ] . pred_interp_filter = SWITCHABLE ; td -> pc_tree [ i ] . horizontal [ 1 ] . pred_interp_filter = SWITCHABLE ; } } vp9_zero ( x -> pred_mv ) ; td -> pc_root -> index = 0 ; if ( seg -> enabled ) { const uint8_t * const map = seg -> update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; int segment_id = get_segment_id ( cm , map , BLOCK_64X64 , mi_row , mi_col ) ; seg_skip = segfeature_active ( seg , segment_id , SEG_LVL_SKIP ) ; } x -> source_variance = UINT_MAX ; if ( <S2SV_ModEnd> sf -> partition_search_type == <S2SV_ModStart> partition_search_type == FIXED_PARTITION || seg_skip ) { const BLOCK_SIZE bsize = seg_skip ? BLOCK_64X64 : sf -> always_this_block_size ; set_offsets ( cpi , tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; set_fixed_partitioning ( cpi , tile_info , mi , mi_row , mi_col , bsize ) ; rd_use_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , & dummy_rate , & dummy_dist , 1 , td -> pc_root ) ; } else if ( cpi -> partition_search_skippable_frame ) { BLOCK_SIZE bsize ; set_offsets ( cpi , tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; bsize = get_rd_var_based_fixed_partition ( cpi , x , mi_row , mi_col ) ; set_fixed_partitioning ( cpi , tile_info , mi , mi_row , mi_col , bsize ) ; rd_use_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , & dummy_rate , & dummy_dist , 1 , td -> pc_root ) ; } else if ( <S2SV_ModStart> -> partition_search_type == VAR_BASED_PARTITION && cm -> frame_type != KEY_FRAME ) { choose_partitioning ( cpi , tile_info , x , mi_row , mi_col ) ; rd_use_partition ( cpi , td , tile_data , mi , tp , mi_row , mi_col , BLOCK_64X64 , & dummy_rate , & dummy_dist , 1 , td -> pc_root ) ; } else { if ( sf -> auto_min_max_partition_size <S2SV_ModEnd> ) { set_offsets ( <S2SV_ModStart> set_offsets ( cpi , tile_info , x , mi_row , mi_col , BLOCK_64X64 ) ; rd_auto_partition_range ( cpi , tile_info , xd , mi_row , mi_col , & x -> min_partition_size , & x -> max_partition_size ) ; } rd_pick_partition ( cpi , td , tile_data <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> , BLOCK_64X64 , & dummy_rdc , INT64_MAX , td -> pc_root <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , <S2SV_ModStart> output_enabled , BLOCK_SIZE bsize , PC_TREE * pc_tree <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> const int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> , hbs = ( <S2SV_ModStart> partition ; BLOCK_SIZE subsize = bsize <S2SV_ModStart> ) ; subsize = get_subsize ( bsize , pc_tree -> partitioning <S2SV_ModEnd> ) ; } else <S2SV_ModStart> ] [ subsize ] ; if ( output_enabled && bsize != BLOCK_4X4 ) td -> counts -> partition [ ctx ] [ partition ] ++ <S2SV_ModStart> { case PARTITION_NONE : <S2SV_ModEnd> encode_b ( cpi , <S2SV_ModStart> cpi , tile , td , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> none <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case PARTITION_VERT : encode_b ( cpi , tile , td , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> vertical [ 0 ] <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> < cm -> mi_cols && bsize > BLOCK_8X8 ) { encode_b ( cpi , tile , td , tp , mi_row , mi_col + hbs , output_enabled , subsize , & pc_tree -> vertical [ 1 ] <S2SV_ModEnd> ) ; } break <S2SV_ModStart> ; case PARTITION_HORZ : encode_b ( cpi , tile , td , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 0 ] <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> < cm -> mi_rows && bsize > BLOCK_8X8 ) { encode_b ( cpi , tile , td , tp , mi_row + hbs , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 1 ] <S2SV_ModEnd> ) ; } break <S2SV_ModStart> ; case PARTITION_SPLIT : if ( bsize == BLOCK_8X8 ) { encode_b ( cpi , tile , td , tp , mi_row , mi_col , output_enabled , subsize , pc_tree -> leaf_split [ 0 ] ) ; } else { <S2SV_ModEnd> encode_sb ( cpi , <S2SV_ModStart> encode_sb ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , pc_tree -> split [ 0 ] ) ; encode_sb ( cpi , td , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 1 ] ) <S2SV_ModEnd> ; encode_sb ( cpi <S2SV_ModStart> encode_sb ( cpi , td , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize , pc_tree -> split [ 2 ] ) <S2SV_ModEnd> ; encode_sb ( cpi <S2SV_ModStart> encode_sb ( cpi , td , tile , tp , mi_row + hbs , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 3 ] ) ; } <S2SV_ModEnd> break ; default : <S2SV_ModStart> default : assert ( 0 && "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; break <S2SV_ModEnd> ; } if (
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , <S2SV_ModStart> output_enabled , BLOCK_SIZE bsize , PC_TREE * pc_tree <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> const int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> , hbs = ( <S2SV_ModStart> >= BLOCK_8X8 ) { <S2SV_ModEnd> const int idx_str = <S2SV_ModStart> [ subsize ] ; if ( output_enabled && bsize != BLOCK_4X4 ) td -> counts -> partition [ ctx ] [ partition ] ++ ; <S2SV_ModStart> { case PARTITION_NONE : <S2SV_ModEnd> encode_b_rt ( cpi , <S2SV_ModStart> encode_b_rt ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> none <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case PARTITION_VERT : encode_b_rt ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> vertical [ 0 ] <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> < cm -> mi_cols && bsize > BLOCK_8X8 ) { encode_b_rt ( cpi , td , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize , & pc_tree -> vertical [ 1 ] <S2SV_ModEnd> ) ; } break <S2SV_ModStart> ; case PARTITION_HORZ : encode_b_rt ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 0 ] <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> < cm -> mi_rows && bsize > BLOCK_8X8 ) { encode_b_rt ( cpi , td , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 1 ] <S2SV_ModEnd> ) ; } break <S2SV_ModStart> , PARTITION_SPLIT ) ; encode_sb_rt ( cpi , td , tile , tp , mi_row , mi_col , output_enabled , subsize , pc_tree -> split [ 0 ] ) <S2SV_ModEnd> ; encode_sb_rt ( cpi <S2SV_ModStart> encode_sb_rt ( cpi , td , tile , tp , mi_row , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 1 ] ) <S2SV_ModEnd> ; encode_sb_rt ( cpi <S2SV_ModStart> encode_sb_rt ( cpi , td , tile , tp , mi_row + hbs , mi_col , output_enabled , subsize , pc_tree -> split [ 2 ] ) <S2SV_ModEnd> ; encode_sb_rt ( cpi <S2SV_ModStart> encode_sb_rt ( cpi , td , tile , tp , mi_row + hbs , mi_col + hbs , output_enabled , subsize , pc_tree -> split [ 3 ] <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> default : assert ( 0 && "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; break <S2SV_ModEnd> ; } if (
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , <S2SV_ModStart> mi_col , BLOCK_SIZE bsize , PICK_MODE_CONTEXT * ctx <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> mi -> mbmi ; const int seg_skip = segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) <S2SV_ModEnd> ; const int mis <S2SV_ModStart> = ! x -> select_tx_size <S2SV_ModEnd> && mbmi -> sb_type <S2SV_ModStart> sf . allow_skip_recode ; if ( ! x -> skip_recode && ! cpi -> sf . use_nonrd_pick_mode ) memset ( x -> skip_txfm , 0 , sizeof ( x -> skip_txfm ) ) ; <S2SV_ModStart> return ; if ( ! is_inter_block ( mbmi ) ) { int plane ; mbmi -> skip = 1 ; for ( plane = 0 ; plane < MAX_MB_PLANE ; ++ plane ) vp9_encode_intra_block_plane ( x , MAX ( bsize , BLOCK_8X8 ) , plane ) ; if ( output_enabled ) sum_intra_stats ( td -> counts , mi ) ; vp9_tokenize_sb ( cpi , td , t , ! output_enabled , MAX ( bsize , BLOCK_8X8 ) ) ; } else { int ref ; const int is_compound = has_second_ref ( mbmi ) ; <S2SV_ModEnd> set_ref_ptrs ( cm , <S2SV_ModStart> ref_frame [ 1 ] <S2SV_ModEnd> ) ; for ( <S2SV_ModStart> ref ] ) ; assert ( cfg != NULL ) ; <S2SV_ModStart> sf ) ; } if ( ! ( cpi -> sf . reuse_inter_pred_sby && ctx -> pred_pixel_ready ) || seg_skip ) vp9_build_inter_predictors_sby <S2SV_ModEnd> ( xd , mi_row <S2SV_ModStart> BLOCK_8X8 ) ) ; vp9_build_inter_predictors_sbuv ( xd , mi_row , mi_col , MAX ( bsize , BLOCK_8X8 ) ) <S2SV_ModEnd> ; vp9_encode_sb ( x <S2SV_ModStart> ; vp9_tokenize_sb ( cpi , td <S2SV_ModStart> BLOCK_8X8 ) ) ; <S2SV_ModEnd> } if ( output_enabled <S2SV_ModStart> mbmi -> skip || seg_skip <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> [ bsize ] , get_tx_size_context <S2SV_ModEnd> ( xd ) , <S2SV_ModStart> xd ) , & td -> counts -> <S2SV_ModEnd> tx ) [ mbmi <S2SV_ModStart> = tx_size ; } ++ td -> counts -> tx . tx_totals [ mbmi -> tx_size ] ; ++ td -> counts -> tx . tx_totals [ get_uv_tx_size ( mbmi , & xd -> plane [ 1 ] ) ] ;
<S2SV_ModStart> , BLOCK_SIZE bsize , PC_TREE * pc_tree <S2SV_ModEnd> ) { MACROBLOCKD * <S2SV_ModStart> ; int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> , hbs = ( <S2SV_ModStart> ; PARTITION_TYPE partition = pc_tree -> partitioning ; BLOCK_SIZE subsize = get_subsize ( bsize , partition ) <S2SV_ModEnd> ; assert ( bsize <S2SV_ModStart> { case PARTITION_NONE : set_mode_info_offsets ( cm , x <S2SV_ModEnd> , xd , mi_row <S2SV_ModStart> 0 ] ) = pc_tree -> none . mic ; * ( x -> mbmi_ext ) = pc_tree -> none . mbmi_ext <S2SV_ModEnd> ; duplicate_mode_info_in_sb ( cm <S2SV_ModStart> ; case PARTITION_VERT : set_mode_info_offsets ( cm , x <S2SV_ModEnd> , xd , mi_row <S2SV_ModStart> 0 ] ) = pc_tree -> vertical [ 0 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> vertical [ 0 ] . mbmi_ext ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm , <S2SV_ModStart> mi_row , mi_col , subsize <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> -> mi_cols ) { set_mode_info_offsets ( cm , x , xd , mi_row , mi_col + hbs ) ; * ( xd -> mi [ 0 ] ) = pc_tree -> vertical [ 1 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> vertical [ 1 ] . mbmi_ext ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm , <S2SV_ModStart> mi_col + hbs , subsize <S2SV_ModEnd> ) ; } break <S2SV_ModStart> ; case PARTITION_HORZ : set_mode_info_offsets ( cm , x <S2SV_ModEnd> , xd , mi_row <S2SV_ModStart> 0 ] ) = pc_tree -> horizontal [ 0 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> horizontal [ 0 ] . mbmi_ext ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm , <S2SV_ModStart> mi_row , mi_col , subsize <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> -> mi_rows ) { set_mode_info_offsets ( cm , x , xd , mi_row + hbs , mi_col ) ; * ( xd -> mi [ 0 ] ) = pc_tree -> horizontal [ 1 ] . mic ; * ( x -> mbmi_ext ) = pc_tree -> horizontal [ 1 ] . mbmi_ext ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm , <S2SV_ModStart> hbs , mi_col , subsize <S2SV_ModEnd> ) ; } break <S2SV_ModStart> ; case PARTITION_SPLIT : { <S2SV_ModEnd> fill_mode_info_sb ( cm , <S2SV_ModStart> mi_col , subsize , pc_tree -> split [ 0 ] ) ; fill_mode_info_sb ( cm , x , mi_row , mi_col + hbs , subsize , pc_tree -> split [ 1 ] ) <S2SV_ModEnd> ; fill_mode_info_sb ( cm <S2SV_ModStart> , x , mi_row + hbs , mi_col , subsize , pc_tree -> split [ 2 ] ) <S2SV_ModEnd> ; fill_mode_info_sb ( cm <S2SV_ModStart> + hbs , mi_col + hbs , subsize , pc_tree -> split [ 3 ] <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ) ; break ; }
<S2SV_ModStart> s ; v -> log2_count = c ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) { variance_node node ; memset ( & node , 0 , sizeof ( node ) )
<S2SV_ModStart> -> refresh_alt_ref_frame ) return GOLDEN_FRAME ; else return LAST_FRAME <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( VP9_COMP * cpi , MACROBLOCK * x <S2SV_ModStart> ( cpi , & x -> plane [ 0 ] . src <S2SV_ModEnd> , mi_row , mi_col
<S2SV_ModStart> static void get_sb_partition_size_range ( MACROBLOCKD * xd <S2SV_ModEnd> , MODE_INFO * * <S2SV_ModStart> , BLOCK_SIZE * max_block_size , int bs_hist [ BLOCK_SIZES ] ) { <S2SV_ModEnd> int sb_width_in_blocks = MI_BLOCK_SIZE <S2SV_ModStart> sb_type : 0 ; bs_hist [ sb_type ] ++ ;
<S2SV_ModStart> VP9_COMP * cpi , const struct buf_2d * ref <S2SV_ModEnd> , int mi_row , <S2SV_ModStart> BLOCK_SIZE bs ) { unsigned int sse , var ; uint8_t * last_y ; const YV12_BUFFER_CONFIG * last <S2SV_ModEnd> = get_ref_frame_buffer ( cpi <S2SV_ModStart> , LAST_FRAME ) ; assert ( last != NULL ) ; last_y = & last -> y_buffer [ mi_row * MI_SIZE * last -> y_stride + mi_col * MI_SIZE ] <S2SV_ModEnd> ; var = cpi <S2SV_ModStart> ] . vf ( ref -> buf , ref -> stride , last_y , last <S2SV_ModEnd> -> y_stride , &
<S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> -> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x , <S2SV_ModStart> , cpi -> Source <S2SV_ModEnd> , 0 , 0 <S2SV_ModStart> -> subsampling_y ) ; memset <S2SV_ModEnd> ( xd -> above_context <S2SV_ModStart> * MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd -> above_seg_context
<S2SV_ModStart> * ctx ) { memcpy <S2SV_ModEnd> ( x -> pred_mv
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , TileDataEnc * tile_data <S2SV_ModEnd> , TOKENEXTRA * * <S2SV_ModStart> , BLOCK_SIZE bsize , RD_COST * rd_cost , <S2SV_ModEnd> int do_recon , int64_t <S2SV_ModStart> do_recon , int64_t best_rd , PC_TREE * pc_tree ) { const SPEED_FEATURES * const sf = & cpi -> sf ; <S2SV_ModEnd> VP9_COMMON * const cm <S2SV_ModStart> cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> PICK_MODE_CONTEXT * ctx = & pc_tree -> none <S2SV_ModEnd> ; int i ; <S2SV_ModStart> i ; BLOCK_SIZE subsize = bsize ; RD_COST this_rdc , sum_rdc , best_rdc <S2SV_ModEnd> ; int do_split = <S2SV_ModStart> ) * tp_orig ; <S2SV_ModEnd> assert ( num_8x8_blocks_wide_lookup [ <S2SV_ModStart> bsize ] ) ; vp9_rd_cost_init ( & sum_rdc ) ; vp9_rd_cost_reset ( & best_rdc ) ; best_rdc . rdcost = best_rd ; if ( sf -> <S2SV_ModEnd> auto_min_max_partition_size ) { partition_none_allowed <S2SV_ModStart> &= ( bsize <= x -> <S2SV_ModEnd> max_partition_size && bsize >= <S2SV_ModStart> max_partition_size && bsize >= x -> <S2SV_ModEnd> min_partition_size ) ; partition_horz_allowed <S2SV_ModStart> ( ( bsize <= x -> <S2SV_ModEnd> max_partition_size && bsize > <S2SV_ModStart> max_partition_size && bsize > x -> <S2SV_ModEnd> min_partition_size ) || force_horz_split <S2SV_ModStart> ( ( bsize <= x -> <S2SV_ModEnd> max_partition_size && bsize > <S2SV_ModStart> max_partition_size && bsize > x -> <S2SV_ModEnd> min_partition_size ) || force_vert_split <S2SV_ModStart> do_split &= bsize > x -> min_partition_size ; } if ( sf -> <S2SV_ModEnd> use_square_partition_only ) { partition_horz_allowed <S2SV_ModStart> &= force_vert_split ; } ctx -> pred_pixel_ready = ! ( partition_vert_allowed || partition_horz_allowed || do_split ) <S2SV_ModEnd> ; if ( partition_none_allowed <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> , mi_col , & this_rdc , bsize , ctx ) ; ctx <S2SV_ModEnd> -> mic . mbmi <S2SV_ModStart> ] -> mbmi ; ctx -> mbmi_ext = * x -> mbmi_ext ; ctx -> skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; ctx -> skip = x -> skip ; if ( this_rdc . rate <S2SV_ModEnd> != INT_MAX ) { <S2SV_ModStart> , bsize ) ; this_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ PARTITION_NONE ] ; this_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , this_rdc . rate , this_rdc . dist ) ; if ( this_rdc . rdcost < best_rdc . rdcost ) { int64_t dist_breakout_thr = sf -> partition_search_breakout_dist_thr ; int64_t rate_breakout_thr = sf -> partition_search_breakout_rate_thr ; dist_breakout_thr <S2SV_ModEnd> >>= 8 - ( <S2SV_ModStart> bsize ] ) ; rate_breakout_thr *= num_pels_log2_lookup [ bsize ] ; best_rdc = this_rdc ; if ( bsize >= BLOCK_8X8 ) pc_tree -> partitioning = PARTITION_NONE <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> e_mbd . lossless && this_rdc . rate < rate_breakout_thr && this_rdc . dist < dist_breakout_thr <S2SV_ModEnd> ) { do_split = <S2SV_ModStart> ; } } } } store_pred_mv ( x , ctx ) ; if ( do_split <S2SV_ModEnd> ) { int pl <S2SV_ModStart> , bsize ) ; sum_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> ] [ PARTITION_SPLIT ] ; sum_rdc . rdcost = RDCOST ( x -> rdmult , x -> rddiv , sum_rdc . rate , sum_rdc . dist ) <S2SV_ModStart> i < 4 && sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> ; ++ i ) <S2SV_ModStart> mi_cols ) continue ; <S2SV_ModEnd> load_pred_mv ( x , <S2SV_ModStart> nonrd_pick_partition ( cpi , td , tile_data <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> , subsize , & this_rdc , 0 , best_rdc . rdcost - sum_rdc . rdcost , pc_tree -> split [ i ] ) ; if ( this_rdc . rate <S2SV_ModEnd> == INT_MAX ) { <S2SV_ModStart> == INT_MAX ) { vp9_rd_cost_reset ( & sum_rdc ) <S2SV_ModEnd> ; } else { <S2SV_ModStart> ; } else { sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost += this_rdc . rdcost ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_SPLIT <S2SV_ModEnd> ; } else { <S2SV_ModStart> else { if ( sf -> <S2SV_ModEnd> less_rectangular_check ) do_rect &= <S2SV_ModStart> , PARTITION_HORZ ) ; if ( sf -> adaptive_motion_search ) load_pred_mv ( x , ctx ) ; pc_tree -> horizontal [ 0 ] . pred_pixel_ready = 1 ; nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & sum_rdc , subsize , & pc_tree -> horizontal [ 0 ] ) ; pc_tree -> horizontal [ 0 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> ] -> mbmi ; pc_tree -> horizontal [ 0 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> horizontal [ 0 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> horizontal [ 0 ] . skip = x -> skip ; if ( sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> && mi_row + ms <S2SV_ModStart> -> mi_rows ) { <S2SV_ModEnd> load_pred_mv ( x , <S2SV_ModStart> , ctx ) ; pc_tree -> horizontal [ 1 ] . pred_pixel_ready = 1 ; <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x <S2SV_ModEnd> , mi_row + ms <S2SV_ModStart> , mi_col , & this_rdc , subsize , & pc_tree -> horizontal [ 1 ] ) ; pc_tree -> horizontal [ 1 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> ] -> mbmi ; pc_tree -> horizontal [ 1 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> horizontal [ 1 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> horizontal [ 1 ] . skip = x -> skip ; if ( this_rdc . rate <S2SV_ModEnd> == INT_MAX ) { <S2SV_ModStart> == INT_MAX ) { vp9_rd_cost_reset ( & sum_rdc ) <S2SV_ModEnd> ; } else { <S2SV_ModStart> , bsize ) ; this_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ PARTITION_HORZ ] ; sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , sum_rdc . rate , sum_rdc . dist ) ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_HORZ ; } else { pred_pixel_ready_reset ( pc_tree , bsize ) <S2SV_ModEnd> ; } } if <S2SV_ModStart> , PARTITION_VERT ) ; if ( sf -> adaptive_motion_search ) load_pred_mv ( x , ctx ) ; pc_tree -> vertical [ 0 ] . pred_pixel_ready = 1 ; nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & sum_rdc , subsize , & pc_tree -> vertical [ 0 ] ) ; pc_tree -> vertical [ 0 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> ] -> mbmi ; pc_tree -> vertical [ 0 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> vertical [ 0 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> vertical [ 0 ] . skip = x -> skip ; if ( sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> && mi_col + ms <S2SV_ModStart> -> mi_cols ) { <S2SV_ModEnd> load_pred_mv ( x , <S2SV_ModStart> , ctx ) ; pc_tree -> vertical [ 1 ] . pred_pixel_ready = 1 ; <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> + ms , & this_rdc , subsize , & pc_tree -> vertical [ 1 ] ) ; pc_tree -> vertical [ 1 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> ] -> mbmi ; pc_tree -> vertical [ 1 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> vertical [ 1 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> vertical [ 1 ] . skip = x -> skip ; if ( this_rdc . rate <S2SV_ModEnd> == INT_MAX ) { <S2SV_ModStart> == INT_MAX ) { vp9_rd_cost_reset ( & sum_rdc ) <S2SV_ModEnd> ; } else { <S2SV_ModStart> , bsize ) ; sum_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ PARTITION_VERT ] ; sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , sum_rdc . rate , sum_rdc . dist ) ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_VERT ; } else { pred_pixel_ready_reset ( pc_tree , bsize ) ; } } * rd_cost = best_rdc ; if ( best_rdc . rate == INT_MAX ) { vp9_rd_cost_reset ( rd_cost ) ; return ; } <S2SV_ModEnd> fill_mode_info_sb ( cm , <S2SV_ModStart> mi_col , bsize , pc_tree ) ; if ( best_rdc . rate < INT_MAX && best_rdc . dist <S2SV_ModEnd> < INT64_MAX && do_recon <S2SV_ModStart> == BLOCK_64X64 ) ; encode_sb_rt ( cpi , td , tile_info , tp <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> mi_col , output_enabled , bsize , pc_tree <S2SV_ModEnd> ) ; } if <S2SV_ModStart> ( bsize == BLOCK_64X64 && do_recon <S2SV_ModStart> ) ; assert ( best_rdc . rate <S2SV_ModEnd> < INT_MAX ) ; <S2SV_ModStart> ) ; assert ( best_rdc . dist <S2SV_ModEnd> < INT64_MAX ) ;
<S2SV_ModStart> VP9_COMP * cpi , TileDataEnc * tile_data , MACROBLOCK * const x , int mi_row , int mi_col , RD_COST * rd_cost , BLOCK_SIZE bsize , PICK_MODE_CONTEXT * ctx ) { VP9_COMMON * const cm = & cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info <S2SV_ModEnd> ; MACROBLOCKD * const <S2SV_ModStart> x -> e_mbd ; MB_MODE_INFO * mbmi ; <S2SV_ModStart> set_offsets ( cpi , tile_info , x , mi_row , mi_col , bsize ) ; mbmi = & <S2SV_ModEnd> xd -> mi [ <S2SV_ModStart> 0 ] -> mbmi ; mbmi -> sb_type = bsize ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled ) if ( cyclic_refresh_segment_id_boosted ( mbmi -> segment_id ) ) x -> rdmult = vp9_cyclic_refresh_get_rdmult ( cpi -> cyclic_refresh ) ; if ( cm -> frame_type == KEY_FRAME ) hybrid_intra_mode_search ( cpi , x , rd_cost , bsize , ctx ) ; else if ( segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) ) set_mode_info_seg_skip ( x , cm -> tx_mode , rd_cost , bsize ) ; else if ( bsize >= BLOCK_8X8 ) <S2SV_ModEnd> vp9_pick_inter_mode ( cpi , <S2SV_ModStart> cpi , x , tile_data , mi_row , mi_col , rd_cost , bsize , ctx ) ; else vp9_pick_inter_mode_sub8x8 ( cpi , x , mi_row , mi_col , rd_cost , bsize , ctx ) ; duplicate_mode_info_in_sb ( cm , xd , mi_row , mi_col , bsize ) ; if ( rd_cost -> rate == INT_MAX ) vp9_rd_cost_reset ( rd_cost ) ; ctx -> rate = rd_cost -> rate ; ctx -> dist = rd_cost -> dist <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , TileDataEnc * tile_data <S2SV_ModEnd> , MODE_INFO * * <S2SV_ModStart> , MODE_INFO * * mi <S2SV_ModEnd> , TOKENEXTRA * * <S2SV_ModStart> , int output_enabled , RD_COST * dummy_cost , PC_TREE * pc_tree <S2SV_ModEnd> ) { VP9_COMMON * <S2SV_ModStart> cpi -> common ; TileInfo * tile_info = & tile_data -> tile_info ; <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> const int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> , hbs = ( <S2SV_ModStart> ; BLOCK_SIZE subsize ; <S2SV_ModEnd> if ( mi_row >= <S2SV_ModStart> >= BLOCK_8X8 ) ? mi <S2SV_ModEnd> [ 0 ] -> <S2SV_ModStart> [ subsize ] ; if ( output_enabled && bsize != BLOCK_4X4 ) { int ctx = partition_plane_context ( xd , mi_row , mi_col , bsize ) ; td -> counts -> partition [ ctx ] [ partition ] ++ ; } <S2SV_ModStart> { case PARTITION_NONE : pc_tree -> none . pred_pixel_ready = 1 ; <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , dummy_cost , subsize , & pc_tree -> none ) ; pc_tree -> none . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> 0 ] -> mbmi ; pc_tree -> none . mbmi_ext = * x -> mbmi_ext ; pc_tree -> none . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> none . skip = x -> skip ; encode_b_rt ( cpi , td , tile_info , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> none ) <S2SV_ModStart> ; case PARTITION_VERT : pc_tree -> vertical [ 0 ] . pred_pixel_ready = 1 <S2SV_ModEnd> ; nonrd_pick_sb_modes ( cpi <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , dummy_cost , subsize , & pc_tree -> vertical [ 0 ] ) ; pc_tree -> vertical [ 0 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> 0 ] -> mbmi ; pc_tree -> vertical [ 0 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> vertical [ 0 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> vertical [ 0 ] . skip = x -> skip ; encode_b_rt ( cpi , td , tile_info , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> vertical [ 0 ] ) <S2SV_ModStart> < cm -> mi_cols && bsize > BLOCK_8X8 ) { pc_tree -> vertical [ 1 ] . pred_pixel_ready <S2SV_ModEnd> = 1 ; nonrd_pick_sb_modes <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col + hbs , dummy_cost , subsize , & pc_tree -> vertical [ 1 ] ) ; pc_tree -> vertical [ 1 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> ] -> mbmi ; pc_tree -> vertical [ 1 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> vertical [ 1 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> vertical [ 1 ] . skip = x -> skip ; encode_b_rt ( cpi , td , tile_info , tp , mi_row , mi_col + hbs , output_enabled , subsize , & pc_tree -> vertical [ 1 ] ) ; <S2SV_ModEnd> } break ; case <S2SV_ModStart> ; case PARTITION_HORZ : pc_tree -> horizontal [ 0 ] . pred_pixel_ready = 1 <S2SV_ModEnd> ; nonrd_pick_sb_modes ( cpi <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , dummy_cost , subsize , & pc_tree -> horizontal [ 0 ] ) ; pc_tree -> horizontal [ 0 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> 0 ] -> mbmi ; pc_tree -> horizontal [ 0 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> horizontal [ 0 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> horizontal [ 0 ] . skip = x -> skip ; encode_b_rt ( cpi , td , tile_info , tp , mi_row , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 0 ] ) <S2SV_ModStart> < cm -> mi_rows && bsize > BLOCK_8X8 ) { pc_tree -> horizontal [ 1 ] . pred_pixel_ready <S2SV_ModEnd> = 1 ; nonrd_pick_sb_modes <S2SV_ModStart> nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row + hbs , mi_col , dummy_cost , subsize , & pc_tree -> horizontal [ 1 ] ) ; pc_tree -> horizontal [ 1 ] . <S2SV_ModEnd> mic . mbmi = <S2SV_ModStart> mic . mbmi = xd -> mi <S2SV_ModEnd> [ 0 ] -> <S2SV_ModStart> ] -> mbmi ; pc_tree -> horizontal [ 1 ] . mbmi_ext = * x -> mbmi_ext ; pc_tree -> horizontal [ 1 ] . skip_txfm [ 0 ] = x -> skip_txfm [ 0 ] ; pc_tree -> horizontal [ 1 ] . skip = x -> skip ; encode_b_rt ( cpi , td , tile_info , tp , mi_row + hbs , mi_col , output_enabled , subsize , & pc_tree -> horizontal [ 1 ] ) ; <S2SV_ModEnd> } break ; case <S2SV_ModStart> , PARTITION_SPLIT ) ; if ( bsize == BLOCK_8X8 ) { nonrd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , dummy_cost , subsize , pc_tree -> leaf_split [ 0 ] ) ; encode_b_rt ( cpi , td , tile_info , tp , mi_row , mi_col , output_enabled , subsize , pc_tree -> leaf_split [ 0 ] ) ; } else { <S2SV_ModEnd> nonrd_use_partition ( cpi , <S2SV_ModStart> nonrd_use_partition ( cpi , td , tile_data , mi <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> subsize , output_enabled , dummy_cost , pc_tree -> split [ 0 ] ) <S2SV_ModEnd> ; nonrd_use_partition ( cpi <S2SV_ModStart> nonrd_use_partition ( cpi , td , tile_data , mi <S2SV_ModEnd> + hbs , tp <S2SV_ModStart> subsize , output_enabled , dummy_cost , pc_tree -> split [ 1 ] ) ; nonrd_use_partition ( cpi , td , tile_data , mi + hbs * mis , tp , mi_row + hbs , mi_col , subsize , output_enabled , dummy_cost , pc_tree -> split [ 2 ] ) <S2SV_ModEnd> ; nonrd_use_partition ( cpi <S2SV_ModStart> nonrd_use_partition ( cpi , td , tile_data , mi <S2SV_ModEnd> + hbs * mis <S2SV_ModStart> + hbs * mis + hbs <S2SV_ModStart> + hbs , mi_col + hbs <S2SV_ModStart> subsize , output_enabled , dummy_cost , pc_tree -> split [ 3 ] ) <S2SV_ModEnd> ; } break ; <S2SV_ModStart> default : assert ( 0 && "Invalid<S2SV_blank>partition<S2SV_blank>type." ) ; break ; } if ( partition != PARTITION_SPLIT || bsize == BLOCK_8X8 ) update_partition_context ( xd , mi_row , mi_col , subsize <S2SV_ModEnd> , bsize ) ; <S2SV_ModStart> , bsize ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * const tile , MACROBLOCKD * const xd , <S2SV_ModStart> cpi -> common ; MODE_INFO * * mi <S2SV_ModEnd> = xd -> mi <S2SV_ModStart> xd -> left_available && mi <S2SV_ModEnd> [ - 1 ] <S2SV_ModStart> xd -> up_available && mi <S2SV_ModEnd> [ - xd -> <S2SV_ModStart> -> mi_stride ] ; const <S2SV_ModEnd> int row8x8_remaining = tile <S2SV_ModStart> mi_row_end - mi_row ; const <S2SV_ModStart> BLOCK_SIZE max_size = BLOCK_64X64 ; int bs_hist [ BLOCK_SIZES ] = { 0 } <S2SV_ModStart> { MODE_INFO * * <S2SV_ModEnd> prev_mi = & cm <S2SV_ModStart> ] ; get_sb_partition_size_range ( xd <S2SV_ModEnd> , prev_mi , & <S2SV_ModStart> min_size , & max_size , bs_hist <S2SV_ModStart> ( left_in_image ) { MODE_INFO * * left_sb64_mi = & mi <S2SV_ModEnd> [ - MI_BLOCK_SIZE ] <S2SV_ModStart> ] ; get_sb_partition_size_range ( xd , left_sb64_mi , & min_size , & max_size , bs_hist <S2SV_ModEnd> ) ; } if <S2SV_ModStart> ( above_in_image ) { MODE_INFO * * above_sb64_mi = & mi <S2SV_ModEnd> [ - xd -> <S2SV_ModStart> ] ; get_sb_partition_size_range ( xd , above_sb64_mi , & min_size , & max_size , bs_hist <S2SV_ModEnd> ) ; } if <S2SV_ModStart> & bw ) ; if ( vp9_active_edge_sb ( cpi , mi_row , mi_col ) ) { min_size = BLOCK_4X4 ; } else { <S2SV_ModStart> min_size = MIN ( cpi -> sf . rd_auto_partition_min_limit , MIN ( min_size , max_size ) ) ; } <S2SV_ModEnd> if ( cpi ->
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , TileDataEnc * tile_data <S2SV_ModEnd> , TOKENEXTRA * * <S2SV_ModStart> , int mi_row , int mi_col , BLOCK_SIZE bsize , RD_COST * rd_cost , int64_t best_rd , PC_TREE * pc_tree <S2SV_ModEnd> ) { VP9_COMMON * <S2SV_ModStart> cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> PICK_MODE_CONTEXT * ctx = & pc_tree -> none <S2SV_ModEnd> ; int i , <S2SV_ModStart> ; BLOCK_SIZE subsize ; RD_COST this_rdc , sum_rdc , best_rdc <S2SV_ModEnd> ; int do_split = <S2SV_ModStart> ] . subsampling_y ; BLOCK_SIZE min_size = x -> min_partition_size ; BLOCK_SIZE max_size = x -> max_partition_size ; # if CONFIG_FP_MB_STATS unsigned int src_diff_var = UINT_MAX ; int none_complexity = 0 ; # endif <S2SV_ModStart> ) * tp_orig ; <S2SV_ModEnd> assert ( num_8x8_blocks_wide_lookup [ <S2SV_ModStart> num_8x8_blocks_high_lookup [ bsize ] ) ; vp9_rd_cost_init ( & this_rdc ) ; vp9_rd_cost_init ( & sum_rdc ) ; vp9_rd_cost_reset ( & best_rdc ) ; best_rdc . rdcost = best_rd ; set_offsets ( cpi , tile_info , x , mi_row , mi_col , bsize <S2SV_ModStart> ( bsize == BLOCK_16X16 && cpi -> oxcf . aq_mode ) <S2SV_ModEnd> x -> mb_energy = <S2SV_ModStart> , bsize ) ; if ( cpi -> sf . cb_partition_search && bsize == BLOCK_16X16 ) { int cb_partition_search_ctrl = ( ( pc_tree -> index == 0 || pc_tree -> index == 3 ) + get_chessboard_index ( cm -> current_video_frame ) ) & 0x1 ; if ( cb_partition_search_ctrl && bsize > min_size && bsize < max_size ) set_partition_range ( cm , xd , mi_row , mi_col , bsize , & min_size , & max_size <S2SV_ModEnd> ) ; } if <S2SV_ModStart> &= ( bsize <= max_size && bsize >= min_size <S2SV_ModEnd> ) ; partition_horz_allowed &= <S2SV_ModStart> ( ( bsize <= max_size && bsize > min_size <S2SV_ModEnd> ) || force_horz_split ) <S2SV_ModStart> ( ( bsize <= max_size && bsize > min_size <S2SV_ModEnd> ) || force_vert_split ) <S2SV_ModStart> do_split &= bsize > min_size <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ; } save_context ( x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> , bsize ) ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { set_offsets ( cpi , tile_info , x , mi_row , mi_col , bsize ) ; src_diff_var = get_sby_perpixel_diff_variance ( cpi , & x -> plane [ 0 ] . src , mi_row , mi_col , bsize ) ; } # endif # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats && bsize >= BLOCK_32X32 && do_split && partition_none_allowed && src_diff_var > 4 && cm -> base_qindex < qindex_split_threshold_lookup [ bsize ] ) { int mb_row = mi_row >> 1 ; int mb_col = mi_col >> 1 ; int mb_row_end = MIN ( mb_row + num_16x16_blocks_high_lookup [ bsize ] , cm -> mb_rows ) ; int mb_col_end = MIN ( mb_col + num_16x16_blocks_wide_lookup [ bsize ] , cm -> mb_cols ) ; int r , c ; for ( r = mb_row ; r < mb_row_end ; r ++ ) { for ( c = mb_col ; c < mb_col_end ; c ++ ) { const int mb_index = r * cm -> mb_cols + c ; MOTION_DIRECTION this_mv ; MOTION_DIRECTION right_mv ; MOTION_DIRECTION bottom_mv ; this_mv = get_motion_direction_fp ( cpi -> twopass . this_frame_mb_stats [ mb_index ] ) ; if ( c != mb_col_end - 1 ) { right_mv = get_motion_direction_fp ( cpi -> twopass . this_frame_mb_stats [ mb_index + 1 ] ) ; none_complexity += get_motion_inconsistency ( this_mv , right_mv ) ; } if ( r != mb_row_end - 1 ) { bottom_mv = get_motion_direction_fp ( cpi -> twopass . this_frame_mb_stats [ mb_index + cm -> mb_cols ] ) ; none_complexity += get_motion_inconsistency ( this_mv , bottom_mv ) ; } } } if ( none_complexity > complexity_16x16_blocks_threshold [ bsize ] ) { partition_none_allowed = 0 ; } } # endif <S2SV_ModEnd> if ( partition_none_allowed ) <S2SV_ModStart> rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & this_rdc , bsize , ctx , best_rdc . rdcost ) ; if ( this_rdc . rate <S2SV_ModEnd> != INT_MAX ) { <S2SV_ModStart> , bsize ) ; this_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ PARTITION_NONE ] ; this_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , this_rdc . rate , this_rdc . dist ) ; } if ( this_rdc . rdcost < best_rdc . rdcost ) { int64_t dist_breakout_thr = cpi -> sf . partition_search_breakout_dist_thr ; int rate_breakout_thr = cpi -> sf . partition_search_breakout_rate_thr ; best_rdc = this_rdc <S2SV_ModEnd> ; if ( bsize <S2SV_ModStart> bsize >= BLOCK_8X8 ) pc_tree -> partitioning = PARTITION_NONE ; dist_breakout_thr <S2SV_ModEnd> >>= 8 - ( <S2SV_ModStart> bsize ] ) ; rate_breakout_thr *= num_pels_log2_lookup [ bsize ] ; if ( ! x -> e_mbd . lossless && ( ctx -> skippable && best_rdc . dist < dist_breakout_thr && best_rdc . rate < rate_breakout_thr ) ) { do_split = 0 ; do_rect = 0 ; } # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats && do_split != 0 && cm -> base_qindex > qindex_skip_threshold_lookup [ bsize ] ) { int mb_row = mi_row >> 1 ; int mb_col = mi_col >> 1 ; int mb_row_end = MIN ( mb_row + num_16x16_blocks_high_lookup [ bsize ] , cm -> mb_rows ) ; int mb_col_end = MIN ( mb_col + num_16x16_blocks_wide_lookup [ bsize ] , cm -> mb_cols ) ; int r , c ; int skip = 1 ; for ( r = mb_row ; r < mb_row_end ; r ++ ) { for ( c = mb_col ; c < mb_col_end ; c ++ ) { const int mb_index = r * cm -> mb_cols + c <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> ; if ( ! ( cpi -> twopass . this_frame_mb_stats [ mb_index ] & FPMB_MOTION_ZERO_MASK ) || ! ( cpi -> twopass . this_frame_mb_stats [ mb_index ] & FPMB_ERROR_SMALL_MASK ) ) { skip = 0 ; break ; } } if ( skip == 0 ) { break ; } } if ( skip ) { if ( src_diff_var == UINT_MAX ) { set_offsets ( cpi , tile_info , x , mi_row , mi_col , bsize ) ; src_diff_var = get_sby_perpixel_diff_variance ( cpi , & x -> plane [ 0 ] . src , mi_row , mi_col , bsize ) ; } if ( src_diff_var < 8 <S2SV_ModEnd> ) { do_split = <S2SV_ModStart> ; } } } # endif } } restore_context ( x , mi_row , mi_col , a , l , sa , sl , bsize ) ; } if ( cpi -> sf . adaptive_motion_search ) store_pred_mv ( x , ctx ) ; if ( do_split ) { subsize = get_subsize ( bsize , PARTITION_SPLIT ) ; if ( bsize == BLOCK_8X8 ) { i = 4 ; if ( cpi -> sf . adaptive_pred_interp_filter && partition_none_allowed ) pc_tree -> leaf_split [ 0 ] -> pred_interp_filter = ctx -> mic . mbmi . interp_filter ; rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & sum_rdc , subsize , pc_tree -> leaf_split [ 0 ] , best_rdc . rdcost ) ; if ( sum_rdc . rate == INT_MAX ) sum_rdc . rdcost = INT64_MAX ; } else { <S2SV_ModEnd> for ( i = <S2SV_ModStart> i < 4 && sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> ; ++ i ) <S2SV_ModStart> mi_cols ) continue ; if ( cpi -> sf . adaptive_motion_search ) load_pred_mv ( x , ctx ) ; pc_tree -> split [ i ] -> index = i <S2SV_ModEnd> ; rd_pick_partition ( cpi <S2SV_ModStart> rd_pick_partition ( cpi , td , tile_data <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> , subsize , & this_rdc , best_rdc . rdcost - sum_rdc . rdcost , pc_tree -> split [ i ] ) ; if ( this_rdc . rate <S2SV_ModEnd> == INT_MAX ) { <S2SV_ModStart> == INT_MAX ) { sum_rdc . rdcost = INT64_MAX ; break ; } else { sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost += this_rdc . rdcost ; } } } if ( sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> && i == 4 <S2SV_ModStart> , bsize ) ; sum_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ PARTITION_SPLIT ] ; sum_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , sum_rdc . rate , sum_rdc . dist ) ; if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_SPLIT <S2SV_ModEnd> ; } } else <S2SV_ModStart> ; } restore_context ( x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> if ( partition_horz_allowed && ( do_rect || vp9_active_h_edge ( cpi , mi_row , mi_step ) ) <S2SV_ModEnd> ) { subsize = <S2SV_ModStart> bsize , PARTITION_HORZ ) <S2SV_ModEnd> ; if ( cpi <S2SV_ModStart> BLOCK_8X8 && partition_none_allowed ) pc_tree -> horizontal [ 0 ] . pred_interp_filter = ctx -> mic . mbmi . interp_filter ; rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & sum_rdc , subsize , & pc_tree -> horizontal [ 0 ] , best_rdc . rdcost ) ; if ( sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> && mi_row + mi_step <S2SV_ModStart> < cm -> mi_rows && bsize > BLOCK_8X8 ) { PICK_MODE_CONTEXT * ctx = & pc_tree -> horizontal [ 0 ] ; <S2SV_ModEnd> update_state ( cpi , <S2SV_ModStart> update_state ( cpi , td , ctx , mi_row , mi_col , subsize , 0 ) ; encode_superblock ( cpi , td , tp , 0 , mi_row , mi_col , subsize , ctx ) <S2SV_ModEnd> ; if ( cpi <S2SV_ModStart> BLOCK_8X8 && partition_none_allowed ) pc_tree -> horizontal [ 1 ] . <S2SV_ModEnd> pred_interp_filter = ctx -> <S2SV_ModStart> rd_pick_sb_modes ( cpi , tile_data , x <S2SV_ModEnd> , mi_row + mi_step <S2SV_ModStart> , mi_col , & this_rdc , subsize , & pc_tree -> horizontal [ 1 ] , best_rdc . rdcost - sum_rdc . rdcost ) ; if ( this_rdc . rate <S2SV_ModEnd> == INT_MAX ) { <S2SV_ModStart> == INT_MAX ) { sum_rdc . rdcost <S2SV_ModEnd> = INT64_MAX ; } <S2SV_ModStart> ; } else { sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost += this_rdc . rdcost ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { pl = partition_plane_context ( xd , mi_row , mi_col , bsize ) ; sum_rdc . rate += cpi -> partition_cost [ pl ] [ PARTITION_HORZ ] ; sum_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , sum_rdc . rate , sum_rdc . dist ) ; if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_HORZ ; } } restore_context ( x , mi_row , mi_col , a , l , sa , sl , bsize ) ; } if ( partition_vert_allowed && ( do_rect || vp9_active_v_edge ( cpi , mi_col , mi_step ) ) ) { subsize <S2SV_ModEnd> = get_subsize ( bsize <S2SV_ModStart> bsize , PARTITION_VERT ) <S2SV_ModEnd> ; if ( cpi <S2SV_ModStart> BLOCK_8X8 && partition_none_allowed ) pc_tree -> vertical [ 0 ] . pred_interp_filter = ctx -> mic . mbmi . interp_filter ; rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & sum_rdc , subsize , & pc_tree -> vertical [ 0 ] , best_rdc . rdcost ) ; if ( sum_rdc . rdcost < best_rdc . rdcost <S2SV_ModEnd> && mi_col + mi_step <S2SV_ModStart> < cm -> mi_cols && bsize > BLOCK_8X8 <S2SV_ModStart> update_state ( cpi , td , & pc_tree -> vertical [ 0 ] , mi_row , mi_col , subsize , 0 ) ; encode_superblock ( cpi , td , tp , 0 , mi_row , mi_col , subsize , & pc_tree -> vertical [ 0 ] ) <S2SV_ModEnd> ; if ( cpi <S2SV_ModStart> BLOCK_8X8 && partition_none_allowed ) pc_tree -> vertical [ 1 ] . <S2SV_ModEnd> pred_interp_filter = ctx -> <S2SV_ModStart> rd_pick_sb_modes ( cpi , tile_data , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> + mi_step , & this_rdc , subsize , & pc_tree -> vertical [ 1 ] , best_rdc . rdcost - sum_rdc . rdcost ) ; if ( this_rdc . rate <S2SV_ModEnd> == INT_MAX ) { <S2SV_ModStart> == INT_MAX ) { sum_rdc . rdcost <S2SV_ModEnd> = INT64_MAX ; } <S2SV_ModStart> ; } else { sum_rdc . rate += this_rdc . rate ; sum_rdc . dist += this_rdc . dist ; sum_rdc . rdcost += this_rdc . rdcost ; } } if ( sum_rdc . rdcost < best_rdc . rdcost ) { pl = partition_plane_context ( xd , mi_row , mi_col , bsize ) ; sum_rdc . rate += cpi -> partition_cost [ pl ] [ PARTITION_VERT ] ; sum_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , sum_rdc . rate , sum_rdc . dist ) ; if ( sum_rdc . rdcost < best_rdc . rdcost ) { best_rdc = sum_rdc ; pc_tree -> partitioning = PARTITION_VERT ; } } restore_context ( x , mi_row , mi_col , a , l , sa , sl , bsize ) ; } ( void ) best_rd ; * rd_cost = best_rdc ; if ( best_rdc . rate < INT_MAX && best_rdc . dist < INT64_MAX && pc_tree -> index != 3 <S2SV_ModEnd> ) { int output_enabled <S2SV_ModStart> == BLOCK_64X64 ) ; encode_sb ( cpi , td , tile_info , tp <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> mi_col , output_enabled , bsize , pc_tree <S2SV_ModEnd> ) ; } if <S2SV_ModStart> ) ; assert ( best_rdc . rate <S2SV_ModEnd> < INT_MAX ) ; <S2SV_ModStart> ) ; assert ( best_rdc . dist <S2SV_ModEnd> < INT64_MAX ) ;
<S2SV_ModStart> VP9_COMP * cpi , TileDataEnc * tile_data , MACROBLOCK * const x <S2SV_ModEnd> , int mi_row , <S2SV_ModStart> , int mi_col , RD_COST * rd_cost <S2SV_ModEnd> , BLOCK_SIZE bsize , <S2SV_ModStart> cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info <S2SV_ModEnd> ; MACROBLOCKD * const <S2SV_ModStart> i , orig_rdmult ; vpx_clear_system_state ( ) <S2SV_ModEnd> ; x -> use_lp32x32fdct <S2SV_ModStart> use_lp32x32fdct = 1 ; <S2SV_ModEnd> set_offsets ( cpi , <S2SV_ModStart> set_offsets ( cpi , tile_info , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> is_coded = 0 ; ctx -> skippable = 0 ; ctx -> pred_pixel_ready = 0 ; <S2SV_ModStart> skip = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> x -> source_variance = vp9_high_get_sby_perpixel_variance ( cpi , & x -> plane [ 0 ] . src , bsize , xd -> bd ) ; } else { x -> source_variance = vp9_get_sby_perpixel_variance ( cpi , & x -> plane [ 0 ] . src , bsize ) ; } # else x -> source_variance = vp9_get_sby_perpixel_variance ( cpi , & x -> plane [ 0 ] . src , bsize ) ; # endif orig_rdmult = x -> rdmult <S2SV_ModEnd> ; if ( aq_mode <S2SV_ModStart> mbmi -> segment_id = get_segment_id <S2SV_ModEnd> ( cm , map <S2SV_ModStart> mi_col ) ; } x -> rdmult = set_segment_rdmult ( cpi , x , mbmi -> segment_id <S2SV_ModEnd> ) ; } else <S2SV_ModStart> == COMPLEXITY_AQ ) { x -> rdmult = set_segment_rdmult ( cpi , x , mbmi -> segment_id <S2SV_ModEnd> ) ; } else <S2SV_ModStart> last_frame_seg_map ; if ( cyclic_refresh_segment_id_boosted ( get_segment_id <S2SV_ModEnd> ( cm , map <S2SV_ModStart> , mi_col ) ) ) <S2SV_ModStart> cpi , x , rd_cost , bsize , ctx , <S2SV_ModEnd> best_rd ) ; } <S2SV_ModStart> bsize >= BLOCK_8X8 ) { if ( segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) ) vp9_rd_pick_inter_mode_sb_seg_skip ( cpi , tile_data , x , rd_cost , bsize , ctx , best_rd ) ; else <S2SV_ModStart> vp9_rd_pick_inter_mode_sb ( cpi , tile_data , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> mi_row , mi_col , rd_cost <S2SV_ModEnd> , bsize , ctx <S2SV_ModStart> , best_rd ) ; } else { <S2SV_ModEnd> vp9_rd_pick_inter_mode_sub8x8 ( cpi , <S2SV_ModStart> vp9_rd_pick_inter_mode_sub8x8 ( cpi , tile_data , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> mi_row , mi_col , rd_cost <S2SV_ModEnd> , bsize , ctx <S2SV_ModStart> best_rd ) ; } } if ( ( rd_cost -> rate != INT_MAX ) && <S2SV_ModEnd> ( aq_mode == COMPLEXITY_AQ <S2SV_ModStart> ( aq_mode == COMPLEXITY_AQ ) && ( bsize >= BLOCK_16X16 ) && ( cm -> frame_type == KEY_FRAME || cpi -> refresh_alt_ref_frame || ( cpi -> refresh_golden_frame && ! cpi -> rc . is_src_frame_alt_ref ) ) ) { vp9_caq_select_segment ( cpi , x , bsize , mi_row , mi_col , rd_cost -> rate ) ; } x -> rdmult = orig_rdmult ; if ( rd_cost -> rate == INT_MAX ) rd_cost -> rdcost = INT64_MAX ; ctx -> rate = rd_cost -> rate ; ctx -> dist = rd_cost -> dist ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , TileDataEnc * tile_data <S2SV_ModEnd> , MODE_INFO * * <S2SV_ModStart> dist , int do_recon , PC_TREE * pc_tree <S2SV_ModStart> cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> const int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ; const int mi_step <S2SV_ModStart> [ 8 ] ; RD_COST last_part_rdc , none_rdc , chosen_rdc <S2SV_ModEnd> ; BLOCK_SIZE sub_subsize = <S2SV_ModStart> do_partition_search = 1 ; PICK_MODE_CONTEXT * ctx = & pc_tree -> none ; <S2SV_ModStart> bsize ] ) ; vp9_rd_cost_reset ( & last_part_rdc ) ; vp9_rd_cost_reset ( & none_rdc ) ; vp9_rd_cost_reset ( & chosen_rdc ) ; <S2SV_ModStart> , partition ) ; pc_tree -> partitioning = partition ; save_context ( x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> ( bsize == BLOCK_16X16 && cpi -> oxcf . aq_mode <S2SV_ModStart> set_offsets ( cpi , tile_info , x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> , bsize ) ; <S2SV_ModEnd> } if ( do_partition_search <S2SV_ModStart> -> mi_cols ) { pc_tree -> partitioning = PARTITION_NONE <S2SV_ModEnd> ; rd_pick_sb_modes ( cpi <S2SV_ModStart> rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & none_rdc , bsize , ctx <S2SV_ModEnd> , INT64_MAX ) ; <S2SV_ModStart> ) ; if ( none_rdc . rate <S2SV_ModEnd> < INT_MAX ) { <S2SV_ModStart> < INT_MAX ) { none_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ PARTITION_NONE ] ; none_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , none_rdc . rate , none_rdc . dist <S2SV_ModEnd> ) ; } restore_context <S2SV_ModStart> ; } restore_context ( x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> sb_type = bs_type ; pc_tree -> partitioning = partition <S2SV_ModEnd> ; } } switch <S2SV_ModStart> rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & last_part_rdc , bsize , ctx <S2SV_ModEnd> , INT64_MAX ) ; <S2SV_ModStart> ; case PARTITION_HORZ : rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & last_part_rdc , subsize , & pc_tree -> horizontal [ 0 ] , <S2SV_ModEnd> INT64_MAX ) ; if <S2SV_ModStart> ) ; if ( last_part_rdc . rate <S2SV_ModEnd> != INT_MAX && bsize <S2SV_ModStart> -> mi_rows ) { RD_COST tmp_rdc ; PICK_MODE_CONTEXT * ctx = & pc_tree -> horizontal [ 0 ] ; vp9_rd_cost_init ( & tmp_rdc ) <S2SV_ModEnd> ; update_state ( cpi <S2SV_ModStart> update_state ( cpi , td , ctx , mi_row , mi_col , subsize , 0 ) ; encode_superblock ( cpi , td , tp , 0 , mi_row , mi_col , subsize , ctx ) <S2SV_ModEnd> ; rd_pick_sb_modes ( cpi <S2SV_ModStart> rd_pick_sb_modes ( cpi , tile_data , x , <S2SV_ModEnd> mi_row + ( mi_step <S2SV_ModStart> , mi_col , & tmp_rdc , subsize , & pc_tree -> horizontal [ 1 ] <S2SV_ModEnd> , INT64_MAX ) ; <S2SV_ModStart> ) ; if ( tmp_rdc . rate == INT_MAX || tmp_rdc . dist <S2SV_ModEnd> == INT64_MAX ) { <S2SV_ModStart> == INT64_MAX ) { vp9_rd_cost_reset ( & last_part_rdc ) <S2SV_ModEnd> ; break ; } <S2SV_ModStart> ; break ; } last_part_rdc . rate += tmp_rdc . rate ; last_part_rdc . dist += tmp_rdc . dist ; last_part_rdc . rdcost += tmp_rdc . rdcost <S2SV_ModEnd> ; } break ; <S2SV_ModStart> ; case PARTITION_VERT : rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & last_part_rdc , subsize , & pc_tree -> vertical [ 0 ] <S2SV_ModEnd> , INT64_MAX ) ; <S2SV_ModStart> ) ; if ( last_part_rdc . rate <S2SV_ModEnd> != INT_MAX && bsize <S2SV_ModStart> -> mi_cols ) { RD_COST tmp_rdc ; PICK_MODE_CONTEXT * ctx = & pc_tree -> vertical [ 0 ] ; vp9_rd_cost_init ( & tmp_rdc ) <S2SV_ModEnd> ; update_state ( cpi <S2SV_ModStart> update_state ( cpi , td , ctx , mi_row , mi_col , subsize , 0 ) ; encode_superblock ( cpi , td , tp , 0 , mi_row , mi_col , subsize , ctx ) <S2SV_ModEnd> ; rd_pick_sb_modes ( cpi <S2SV_ModStart> rd_pick_sb_modes ( cpi , tile_data , x , <S2SV_ModEnd> mi_row , mi_col + <S2SV_ModStart> 1 ) , & tmp_rdc , subsize , & pc_tree -> vertical [ bsize > BLOCK_8X8 ] , <S2SV_ModEnd> INT64_MAX ) ; if <S2SV_ModStart> ) ; if ( tmp_rdc . rate == INT_MAX || tmp_rdc . dist <S2SV_ModEnd> == INT64_MAX ) { <S2SV_ModStart> == INT64_MAX ) { vp9_rd_cost_reset ( & last_part_rdc ) <S2SV_ModEnd> ; break ; } <S2SV_ModStart> ; break ; } last_part_rdc . rate += tmp_rdc . rate ; last_part_rdc . dist += tmp_rdc . dist ; last_part_rdc . rdcost += tmp_rdc . rdcost <S2SV_ModEnd> ; } break ; <S2SV_ModStart> ; case PARTITION_SPLIT : if ( bsize == BLOCK_8X8 ) { rd_pick_sb_modes ( cpi , tile_data , x , mi_row , mi_col , & last_part_rdc , subsize , pc_tree -> leaf_split [ 0 ] , INT64_MAX ) ; break ; } last_part_rdc . rate = 0 ; last_part_rdc . dist = 0 ; last_part_rdc . rdcost <S2SV_ModEnd> = 0 ; for <S2SV_ModStart> i & 0x01 ; RD_COST tmp_rdc <S2SV_ModEnd> ; if ( ( <S2SV_ModStart> ) ) continue ; vp9_rd_cost_init ( & tmp_rdc ) ; rd_use_partition ( cpi , td , tile_data , mi_8x8 + jj * bss * mis + ii * bss , tp , mi_row + y_idx , mi_col + x_idx , subsize , & tmp_rdc . rate , & tmp_rdc . dist <S2SV_ModEnd> , i != 3 <S2SV_ModStart> , i != 3 , pc_tree -> split [ i ] ) ; if ( tmp_rdc . rate == INT_MAX || tmp_rdc . dist <S2SV_ModEnd> == INT64_MAX ) { <S2SV_ModStart> == INT64_MAX ) { vp9_rd_cost_reset ( & last_part_rdc ) <S2SV_ModEnd> ; break ; } <S2SV_ModStart> ; break ; } last_part_rdc . rate += tmp_rdc . rate ; last_part_rdc . dist += tmp_rdc . dist <S2SV_ModEnd> ; } break ; <S2SV_ModStart> ( 0 ) ; break ; <S2SV_ModStart> ) ; if ( last_part_rdc . rate <S2SV_ModEnd> < INT_MAX ) { <S2SV_ModStart> < INT_MAX ) { last_part_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ partition ] ; last_part_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , last_part_rdc . rate , last_part_rdc . dist <S2SV_ModEnd> ) ; } if <S2SV_ModStart> , PARTITION_SPLIT ) ; chosen_rdc . rate = 0 ; chosen_rdc . dist <S2SV_ModEnd> = 0 ; restore_context <S2SV_ModStart> 0 ; restore_context ( x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> sl , bsize ) ; pc_tree -> partitioning = PARTITION_SPLIT <S2SV_ModStart> >> 1 ) ; RD_COST tmp_rdc <S2SV_ModEnd> ; ENTROPY_CONTEXT l [ <S2SV_ModStart> ) ) continue ; save_context ( x , mi_row , mi_col , a , l , sa , sl , bsize ) ; pc_tree -> split [ i ] -> partitioning = PARTITION_NONE ; rd_pick_sb_modes ( cpi , tile_data , x , mi_row + y_idx , mi_col + x_idx , & tmp_rdc , split_subsize , & pc_tree -> split [ i ] -> none , INT64_MAX ) ; restore_context ( x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> , bsize ) ; if ( tmp_rdc . rate == INT_MAX || tmp_rdc . dist <S2SV_ModEnd> == INT64_MAX ) { <S2SV_ModStart> == INT64_MAX ) { vp9_rd_cost_reset ( & chosen_rdc ) <S2SV_ModEnd> ; break ; } <S2SV_ModStart> ; break ; } chosen_rdc . rate += tmp_rdc . rate ; chosen_rdc . dist += tmp_rdc . dist <S2SV_ModEnd> ; if ( i <S2SV_ModStart> encode_sb ( cpi , td , tile_info <S2SV_ModEnd> , tp , mi_row <S2SV_ModStart> , 0 , split_subsize , pc_tree -> split [ i ] <S2SV_ModStart> , split_subsize ) ; chosen_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> ) ; if ( chosen_rdc . rate <S2SV_ModEnd> < INT_MAX ) { <S2SV_ModStart> < INT_MAX ) { chosen_rdc . rate += cpi <S2SV_ModEnd> -> partition_cost [ pl <S2SV_ModStart> [ PARTITION_SPLIT ] ; chosen_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , chosen_rdc . rate , chosen_rdc . dist ) ; } } if ( last_part_rdc . rdcost < chosen_rdc . rdcost <S2SV_ModEnd> ) { mi_8x8 [ <S2SV_ModStart> bsize >= BLOCK_8X8 ) pc_tree -> partitioning = partition ; chosen_rdc = last_part_rdc ; } if ( none_rdc . rdcost < chosen_rdc . rdcost <S2SV_ModEnd> ) { if ( <S2SV_ModStart> bsize >= BLOCK_8X8 ) pc_tree -> partitioning = PARTITION_NONE ; chosen_rdc = none_rdc <S2SV_ModEnd> ; } restore_context ( <S2SV_ModStart> ; } restore_context ( x <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> BLOCK_64X64 ) assert ( chosen_rdc . rate < INT_MAX && chosen_rdc . dist <S2SV_ModEnd> < INT64_MAX ) ; <S2SV_ModStart> == BLOCK_64X64 ) ; encode_sb ( cpi , td , tile_info , tp , mi_row , mi_col , output_enabled , bsize , pc_tree ) ; } * rate = chosen_rdc . rate <S2SV_ModEnd> ; * dist = <S2SV_ModStart> ; * dist = chosen_rdc . dist <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> static void restore_context ( MACROBLOCK * const x <S2SV_ModEnd> , int mi_row , <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> MACROBLOCKD * const xd <S2SV_ModStart> p ++ ) { memcpy <S2SV_ModEnd> ( xd -> above_context <S2SV_ModStart> . subsampling_x ) ; memcpy <S2SV_ModEnd> ( xd -> left_context <S2SV_ModStart> subsampling_y ) ; } memcpy <S2SV_ModEnd> ( xd -> above_seg_context <S2SV_ModStart> * mi_width ) ; memcpy <S2SV_ModEnd> ( xd -> left_seg_context
<S2SV_ModStart> static void save_context ( MACROBLOCK * const x <S2SV_ModEnd> , int mi_row , <S2SV_ModStart> bsize ) { const <S2SV_ModEnd> MACROBLOCKD * const xd <S2SV_ModStart> ++ p ) { memcpy <S2SV_ModEnd> ( a + num_4x4_blocks_wide <S2SV_ModStart> . subsampling_x ) ; memcpy <S2SV_ModEnd> ( l + num_4x4_blocks_high <S2SV_ModStart> subsampling_y ) ; } memcpy <S2SV_ModEnd> ( sa , xd <S2SV_ModStart> * mi_width ) ; memcpy <S2SV_ModEnd> ( sl , xd
<S2SV_ModStart> const VP9_COMP * cpi , MACROBLOCKD * const xd <S2SV_ModStart> ) { if ( xd -> lossless ) return ONLY_4X4 ; <S2SV_ModEnd> if ( cpi -> <S2SV_ModStart> cpi -> common . frame_type == KEY_FRAME && cpi -> sf . use_nonrd_pick_mode ) return ALLOW_16X16 ; <S2SV_ModEnd> if ( cpi -> <S2SV_ModStart> tx_size_search_method == USE_LARGESTALL ) return ALLOW_32X32 ; <S2SV_ModEnd> else if ( cpi <S2SV_ModStart> . tx_size_search_method == USE_FULL_RD || cpi -> sf . tx_size_search_method == USE_TX_8X8 ) return TX_MODE_SELECT ; else <S2SV_ModEnd> return cpi -> common <S2SV_ModStart> . tx_mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> * const cpi , MACROBLOCK * const x , MACROBLOCKD * const xd <S2SV_ModEnd> , int mi_row , <S2SV_ModStart> > mi_row ) { set_mode_info_offsets <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> & cpi -> common , x <S2SV_ModStart> sb_type = bsize ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> cm -> mi_stride ; const <S2SV_ModStart> mi_row_end - mi_row ; const <S2SV_ModStart> } } else { set_partial_b64x64_partition ( mi_upper_left , mis , bh , bw , row8x8_remaining , col8x8_remaining , bsize , mi_8x8 ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * const tile , MACROBLOCK * const x , <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> VP9_COMMON * const cm <S2SV_ModStart> bsize ] ; const <S2SV_ModEnd> struct segmentation * const <S2SV_ModStart> , mi_col ) ; set_mode_info_offsets ( cm , x <S2SV_ModEnd> , xd , mi_row <S2SV_ModStart> ; vp9_setup_dst_planes ( xd -> plane <S2SV_ModStart> rddiv = cpi -> rd . <S2SV_ModStart> rdmult = cpi -> rd . <S2SV_ModStart> mbmi -> segment_id = get_segment_id <S2SV_ModEnd> ( cm , map <S2SV_ModStart> -> encode_breakout ; } xd -> tile = * tile ;
<S2SV_ModStart> * const tile , MACROBLOCK * const x , <S2SV_ModStart> cpi -> common ; <S2SV_ModEnd> const int mis = <S2SV_ModStart> cm -> mi_stride ; const <S2SV_ModStart> mi_row_end - mi_row ; const <S2SV_ModStart> mi_col_end - mi_col ; <S2SV_ModEnd> MODE_INFO * mi_upper_left = <S2SV_ModStart> * mis + mi_col ; vp9_setup_src_planes ( x , cpi -> Source , mi_row , mi_col ) <S2SV_ModStart> MI_BLOCK_SIZE ) ) { int i , j ; int index ; diff d32 [ 4 ] ; const int offset = ( mi_row >> 1 ) * cm -> mb_cols + ( mi_col >> 1 ) ; int is_larger_better = 0 ; int use32x32 = 0 ; unsigned int thr = cpi -> source_var_thresh ; memset ( d32 , 0 , 4 * sizeof ( diff ) ) ; for ( i = 0 ; i < 4 ; i ++ ) { diff * d16 [ 4 ] ; for ( j = 0 ; j < 4 ; j ++ ) { int b_mi_row = coord_lookup [ i * 4 + j ] . row ; int b_mi_col = coord_lookup [ i * 4 + j ] . col ; int boffset = b_mi_row / 2 * cm -> mb_cols + b_mi_col / 2 ; d16 [ j ] = cpi -> source_diff_var + offset + boffset ; index = b_mi_row * mis + b_mi_col ; mi_8x8 [ index ] = mi_upper_left + index ; mi_8x8 [ index ] -> mbmi . sb_type = BLOCK_16X16 ; } is_larger_better = ( d16 [ 0 ] -> var < thr ) && ( d16 [ 1 ] -> var < thr ) && ( d16 [ 2 ] -> var < thr ) && ( d16 [ 3 ] -> var < thr ) ; if ( is_larger_better ) { use32x32 += 1 ; for ( j = 0 ; j < 4 ; j ++ ) { d32 [ i ] . sse += d16 [ j ] -> sse ; d32 [ i ] . sum += d16 [ j ] -> sum ; } d32 [ i ] . var = d32 [ i <S2SV_ModEnd> ] . sse - <S2SV_ModStart> ] . sse - <S2SV_ModEnd> ( ( ( int64_t <S2SV_ModStart> sb_type = BLOCK_32X32 ; } } if ( use32x32 == 4 ) { thr <<= 1 ; is_larger_better = ( d32 [ 0 ] . var < thr ) && ( d32 [ 1 ] . var < thr ) && ( d32 [ 2 ] . var < thr ) && ( d32 [ 3 ] . var < thr ) ; if ( is_larger_better ) { mi_8x8 [ 0 ] = mi_upper_left ; mi_8x8 [ 0 ] -> mbmi . sb_type = BLOCK_64X64 ; } } } else { int bh = num_8x8_blocks_high_lookup [ BLOCK_16X16 ] ; int bw = num_8x8_blocks_wide_lookup [ BLOCK_16X16 ] ; set_partial_b64x64_partition ( mi_upper_left , mis , bh , bw , row8x8_remaining , col8x8_remaining , BLOCK_16X16 , mi_8x8 ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> VP9_COMP * cpi , MACROBLOCK * const x , MACROBLOCKD * const xd , <S2SV_ModStart> void * data , <S2SV_ModEnd> BLOCK_SIZE bsize , int <S2SV_ModStart> , int mi_col , int64_t threshold , BLOCK_SIZE bsize_min , int force_split <S2SV_ModEnd> ) { VP9_COMMON * <S2SV_ModStart> bsize ] ; const int low_res = ( cm -> width <= 352 && cm -> height <= 288 ) <S2SV_ModEnd> ; assert ( block_height <S2SV_ModStart> ) ; if ( force_split == 1 ) return 0 ; if ( bsize == bsize_min ) { if ( low_res || cm -> frame_type == KEY_FRAME ) get_variance ( & vt . part_variances -> none ) ; if ( <S2SV_ModStart> set_block_size ( cpi , x , xd , mi_row , mi_col , bsize ) ; return 1 ; } return 0 ; } else if ( bsize > bsize_min ) { if ( low_res || cm -> frame_type == KEY_FRAME ) get_variance ( & vt . part_variances -> none ) ; if ( cm -> frame_type == KEY_FRAME && ( bsize > BLOCK_32X32 || vt . part_variances -> none . variance > ( threshold << 4 ) ) ) { return 0 ; } if ( mi_col + block_width / 2 < cm -> mi_cols && <S2SV_ModEnd> mi_row + block_height / <S2SV_ModStart> vt . part_variances -> none <S2SV_ModEnd> . variance < threshold <S2SV_ModStart> . variance < threshold ) { set_block_size ( cpi , x , xd , mi_row , mi_col , bsize ) ; return 1 ; } if ( mi_row + block_height / 2 < cm -> mi_rows <S2SV_ModEnd> ) { BLOCK_SIZE subsize <S2SV_ModStart> , PARTITION_VERT ) ; get_variance ( & vt . part_variances -> vert [ 0 ] ) ; get_variance ( & vt . part_variances -> vert [ 1 ] ) ; if ( vt . part_variances -> vert [ 0 ] . variance < threshold && vt . part_variances -> vert [ 1 ] . variance < threshold && get_plane_block_size ( subsize , & xd -> plane [ 1 ] ) < BLOCK_INVALID ) { <S2SV_ModStart> set_block_size ( cpi , x , xd <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> set_block_size ( cpi , x , xd <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> return 1 ; } } <S2SV_ModStart> < cm -> mi_cols <S2SV_ModEnd> ) { BLOCK_SIZE subsize <S2SV_ModStart> , PARTITION_HORZ ) ; get_variance ( & vt . part_variances -> horz [ 0 ] ) ; get_variance ( & vt . part_variances -> horz [ 1 ] ) ; if ( vt . part_variances -> horz [ 0 ] . variance < threshold && vt . part_variances -> horz [ 1 ] . variance < threshold && get_plane_block_size ( subsize , & xd -> plane [ 1 ] ) < BLOCK_INVALID ) { <S2SV_ModStart> set_block_size ( cpi , x , xd <S2SV_ModEnd> , mi_row , mi_col <S2SV_ModStart> set_block_size ( cpi , x , xd <S2SV_ModEnd> , mi_row + block_height <S2SV_ModStart> return 1 ; } } return 0 ; }
<S2SV_ModStart> * ctx ) { memcpy <S2SV_ModEnd> ( ctx -> pred_mv
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * r ) { assert ( a -> log2_count == b -> log2_count ) ; <S2SV_ModStart> sum_error , a -> log2_count + 1 <S2SV_ModEnd> , r ) ;
<S2SV_ModStart> mi ) { const PREDICTION_MODE <S2SV_ModEnd> y_mode = mi -> <S2SV_ModStart> . mode ; const PREDICTION_MODE <S2SV_ModEnd> uv_mode = mi ->
<S2SV_ModStart> { int i ; node -> part_variances = NULL ; <S2SV_ModStart> split [ i ] . part_variances . none ; break ; } case BLOCK_4X4 : { v4x4 * vt = ( v4x4 * ) data ; node -> part_variances = & vt -> part_variances ; for ( i = 0 ; i < 4 ; i ++ ) node -> split [ i ] = & vt -> split [ i ] <S2SV_ModStart> ( 0 ) ; break ;
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , <S2SV_ModStart> cpi -> common ; RD_COUNTS * const rdc = & td -> rd_counts ; <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> & cm -> seg ; const int bw = num_8x8_blocks_wide_lookup [ mi -> mbmi . sb_type ] ; const int bh = num_8x8_blocks_high_lookup [ mi -> mbmi . sb_type ] ; const int x_mis = MIN ( bw , cm -> mi_cols - mi_col ) ; const int y_mis = MIN ( bh , cm -> mi_rows - mi_row ) ; MV_REF * const frame_mvs = cm -> cur_frame -> mvs + mi_row * cm -> mi_cols + mi_col ; int w , h <S2SV_ModStart> = * mi ; * x -> mbmi_ext = ctx -> mbmi_ext ; <S2SV_ModStart> ( seg -> enabled <S2SV_ModEnd> ) { if ( <S2SV_ModStart> mbmi . segment_id = get_segment_id <S2SV_ModEnd> ( cm , map <S2SV_ModStart> mi_col ) ; } <S2SV_ModEnd> if ( cpi -> <S2SV_ModStart> mi_col , bsize , ctx -> rate , ctx -> dist , x -> skip <S2SV_ModEnd> ) ; } } <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> is_inter_block ( mbmi ) <S2SV_ModStart> ctx -> skip ; memcpy <S2SV_ModEnd> ( x -> zcoeff_blk <S2SV_ModStart> zcoeff_blk , sizeof ( ctx -> zcoeff_blk [ 0 ] <S2SV_ModEnd> ) * ctx -> <S2SV_ModStart> output_enabled ) return ; <S2SV_ModEnd> # if CONFIG_INTERNAL_STATS if <S2SV_ModStart> ) { vp9_update_mv_count ( td <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> xd ) ; ++ td -> counts -> <S2SV_ModEnd> switchable_interp [ ctx ] <S2SV_ModStart> ] ; } } rdc -> comp_pred_diff <S2SV_ModEnd> [ SINGLE_REFERENCE ] += <S2SV_ModStart> ctx -> single_pred_diff ; rdc -> comp_pred_diff <S2SV_ModEnd> [ COMPOUND_REFERENCE ] += <S2SV_ModStart> ctx -> comp_pred_diff ; rdc -> comp_pred_diff <S2SV_ModEnd> [ REFERENCE_MODE_SELECT ] += <S2SV_ModStart> ; ++ i ) rdc -> filter_diff <S2SV_ModEnd> [ i ] += <S2SV_ModStart> i ] ; } for ( h = 0 ; h < y_mis ; ++ h ) { MV_REF * const frame_mv = frame_mvs + h * cm -> mi_cols ; for ( w = 0 ; w < x_mis ; ++ w ) { MV_REF * const mv = frame_mv + w ; mv -> ref_frame [ 0 ] = mi -> mbmi . ref_frame [ 0 ] ; mv -> ref_frame [ 1 ] = mi -> mbmi . ref_frame [ 1 ] ; mv -> mv [ 0 ] . as_int = mi -> mbmi . mv [ 0 ] . as_int ; mv -> mv [ 1 ] . as_int = mi -> mbmi . mv [ 1 ] . as_int ; } }
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , <S2SV_ModStart> const x = & td <S2SV_ModEnd> -> mb ; MACROBLOCKD <S2SV_ModStart> x -> e_mbd ; MODE_INFO * const mi = xd -> mi [ 0 ] ; <S2SV_ModStart> cm -> seg ; const int bw = num_8x8_blocks_wide_lookup [ mi -> mbmi . sb_type ] ; const int bh = num_8x8_blocks_high_lookup [ mi -> mbmi . sb_type ] ; const int x_mis = MIN ( bw , cm -> mi_cols - mi_col ) ; const int y_mis = MIN ( bh , cm -> mi_rows - mi_row ) ; <S2SV_ModStart> ctx -> mic ; * ( x -> mbmi_ext ) = ctx -> mbmi_ext ; if ( seg -> enabled && cpi -> oxcf . aq_mode ) { if <S2SV_ModEnd> ( cpi -> oxcf <S2SV_ModStart> oxcf . aq_mode == COMPLEXITY_AQ || cpi -> oxcf . aq_mode == VARIANCE_AQ ) { const uint8_t * const map = seg -> update_map ? cpi -> segmentation_map : cm -> last_frame_seg_map ; mbmi -> segment_id = get_segment_id ( cm , map , bsize , mi_row , mi_col ) ; } else <S2SV_ModEnd> { vp9_cyclic_refresh_update_segment ( cpi <S2SV_ModStart> vp9_cyclic_refresh_update_segment ( cpi , mbmi , <S2SV_ModEnd> mi_row , mi_col , <S2SV_ModStart> mi_col , bsize , ctx -> rate , ctx -> dist , x -> skip ) ; } <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi , <S2SV_ModStart> ) { vp9_update_mv_count ( td <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> xd ) ; ++ td -> counts -> <S2SV_ModEnd> switchable_interp [ pred_ctx ] <S2SV_ModStart> interp_filter ] ; } if ( mbmi -> sb_type < BLOCK_8X8 ) { mbmi -> mv [ 0 ] . as_int = mi -> bmi [ 3 ] . as_mv [ 0 ] . as_int ; mbmi -> mv [ 1 ] . as_int = mi -> bmi [ 3 ] . as_mv [ 1 ] . as_int ; } } if ( cm -> use_prev_frame_mvs ) { MV_REF * const frame_mvs = cm -> cur_frame -> mvs + mi_row * cm -> mi_cols + mi_col ; int w , h ; for ( h = 0 ; h < y_mis ; ++ h ) { MV_REF * const frame_mv = frame_mvs + h * cm -> mi_cols ; for ( w = 0 ; w < x_mis ; ++ w ) { MV_REF * const mv = frame_mv + w ; mv -> ref_frame [ 0 ] = mi -> mbmi . ref_frame [ 0 ] ; mv -> ref_frame [ 1 ] = mi -> mbmi . ref_frame [ 1 ] ; mv -> mv [ 0 ] . as_int = mi -> mbmi . mv [ 0 ] . as_int ; mv -> mv [ 1 ] . as_int = mi -> mbmi . mv [ 1 ] . as_int ; } } <S2SV_ModStart> ctx -> skip ; x -> skip_txfm [ 0 ] = mbmi -> segment_id ? 0 : ctx -> skip_txfm [ 0 ] ;
<S2SV_ModStart> static void update_stats ( VP9_COMMON * cm , ThreadData * td ) { const MACROBLOCK * x = & td <S2SV_ModEnd> -> mb ; const <S2SV_ModStart> mi -> mbmi ; const MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext ; const BLOCK_SIZE bsize = mbmi -> sb_type ; <S2SV_ModStart> cm ) ) { FRAME_COUNTS * const counts = td -> counts ; const int inter_block = is_inter_block ( mbmi ) ; <S2SV_ModStart> const int seg_ref_active = segfeature_active <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> ! seg_ref_active ) { <S2SV_ModEnd> counts -> intra_inter [ <S2SV_ModStart> ; } } } if ( inter_block && ! segfeature_active ( & cm -> seg , mbmi -> segment_id , SEG_LVL_SKIP ) ) { const int mode_ctx = mbmi_ext -> mode_context [ mbmi -> ref_frame [ 0 ] ] ; if ( bsize >= BLOCK_8X8 ) { const PREDICTION_MODE mode = mbmi -> mode ; ++ counts -> inter_mode [ mode_ctx ] [ INTER_OFFSET ( mode ) ] ; } else { const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; int idx , idy ; for ( idy = 0 ; idy < 2 ; idy += num_4x4_h ) { for ( idx = 0 ; idx < 2 ; idx += num_4x4_w ) { const int j = idy * 2 + idx ; const PREDICTION_MODE b_mode = mi -> bmi [ j ] . as_mode ; ++ counts -> inter_mode [ mode_ctx ] [ INTER_OFFSET ( b_mode ) ] ; } } } }
<S2SV_ModStart> ] ) ) { cpi <S2SV_ModEnd> -> allow_comp_inter_inter = 0 <S2SV_ModStart> ; } else { cpi <S2SV_ModEnd> -> allow_comp_inter_inter = 1 <S2SV_ModStart> ) { int i ; RD_OPT * const rd_opt = & cpi -> rd ; FRAME_COUNTS * counts = cpi -> td . counts ; RD_COUNTS * const rdc = & cpi -> td . rd_counts <S2SV_ModStart> ( cpi ) ; int64_t * const mode_thrs = rd_opt -> prediction_type_threshes <S2SV_ModEnd> [ frame_type ] ; <S2SV_ModStart> [ frame_type ] ; int64_t * const filter_thrs = rd_opt -> filter_threshes <S2SV_ModEnd> [ frame_type ] ; <S2SV_ModStart> [ frame_type ] ; const int is_alt_ref = frame_type == ALTREF_FRAME ; if ( is_alt_ref || ! cpi <S2SV_ModEnd> -> allow_comp_inter_inter ) cm <S2SV_ModStart> ; else if ( mode_thrs <S2SV_ModEnd> [ COMPOUND_REFERENCE ] > <S2SV_ModStart> [ COMPOUND_REFERENCE ] > mode_thrs <S2SV_ModEnd> [ SINGLE_REFERENCE ] && <S2SV_ModStart> [ SINGLE_REFERENCE ] && mode_thrs <S2SV_ModEnd> [ COMPOUND_REFERENCE ] > <S2SV_ModStart> [ COMPOUND_REFERENCE ] > mode_thrs <S2SV_ModEnd> [ REFERENCE_MODE_SELECT ] && <S2SV_ModStart> ; else if ( mode_thrs <S2SV_ModEnd> [ SINGLE_REFERENCE ] > <S2SV_ModStart> [ SINGLE_REFERENCE ] > mode_thrs <S2SV_ModEnd> [ REFERENCE_MODE_SELECT ] ) <S2SV_ModStart> interp_filter == SWITCHABLE ) <S2SV_ModEnd> cm -> interp_filter = <S2SV_ModStart> cm -> interp_filter = get_interp_filter ( filter_thrs , is_alt_ref ) ; <S2SV_ModEnd> encode_frame_internal ( cpi ) <S2SV_ModStart> ; ++ i ) mode_thrs [ i ] = ( mode_thrs [ i ] + rdc -> comp_pred_diff <S2SV_ModEnd> [ i ] / <S2SV_ModStart> cm -> MBs ) / 2 ; <S2SV_ModEnd> for ( i = <S2SV_ModStart> i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) filter_thrs [ i ] = ( filter_thrs [ i ] + rdc -> filter_diff <S2SV_ModEnd> [ i ] / <S2SV_ModStart> / cm -> MBs <S2SV_ModEnd> ) / 2 ; <S2SV_ModStart> ) / 2 ; <S2SV_ModEnd> if ( cm -> <S2SV_ModStart> ) { single_count_zero += counts -> <S2SV_ModEnd> comp_inter [ i ] <S2SV_ModStart> ] ; comp_count_zero += counts -> <S2SV_ModEnd> comp_inter [ i ] <S2SV_ModStart> SINGLE_REFERENCE ; vp9_zero ( counts -> <S2SV_ModEnd> comp_inter ) ; } <S2SV_ModStart> COMPOUND_REFERENCE ; vp9_zero ( counts -> <S2SV_ModEnd> comp_inter ) ; } <S2SV_ModStart> ) { count4x4 += counts -> <S2SV_ModEnd> tx . p32x32 [ <S2SV_ModStart> ] ; count4x4 += counts -> <S2SV_ModEnd> tx . p16x16 [ <S2SV_ModStart> ] ; count4x4 += counts -> <S2SV_ModEnd> tx . p8x8 [ <S2SV_ModStart> ] ; count8x8_lp += counts -> <S2SV_ModEnd> tx . p32x32 [ <S2SV_ModStart> ] ; count8x8_lp += counts -> <S2SV_ModEnd> tx . p16x16 [ <S2SV_ModStart> ] ; count8x8_8x8p += counts -> <S2SV_ModEnd> tx . p8x8 [ <S2SV_ModStart> ] ; count16x16_16x16p += counts -> <S2SV_ModEnd> tx . p16x16 [ <S2SV_ModStart> ] ; count16x16_lp += counts -> <S2SV_ModEnd> tx . p32x32 [ <S2SV_ModStart> ] ; count32x32 += counts -> <S2SV_ModEnd> tx . p32x32 [ <S2SV_ModStart> tx_mode = ALLOW_8X8 ; reset_skip_tx_size <S2SV_ModEnd> ( cm , TX_8X8 <S2SV_ModStart> tx_mode = ONLY_4X4 ; reset_skip_tx_size <S2SV_ModEnd> ( cm , TX_4X4 <S2SV_ModStart> tx_mode = ALLOW_16X16 ; reset_skip_tx_size <S2SV_ModEnd> ( cm , TX_16X16 <S2SV_ModStart> reference_mode = SINGLE_REFERENCE ; <S2SV_ModEnd> encode_frame_internal ( cpi )
<S2SV_ModStart> * const buffers [ 3 <S2SV_ModEnd> ] = { src <S2SV_ModStart> , src -> v_buffer <S2SV_ModEnd> } ; const int <S2SV_ModStart> const int strides [ 3 <S2SV_ModEnd> ] = { src <S2SV_ModStart> , src -> uv_stride <S2SV_ModEnd> } ; int i
<S2SV_ModStart> [ plane ] ; tran_low_t <S2SV_ModEnd> * const dqcoeff = <S2SV_ModStart> x -> skip_recode ) { if ( x -> quant_fp ) { if ( x -> skip_txfm [ 0 ] == SKIP_TXFM_AC_DC && plane == 0 ) { p -> eobs [ block ] = 0 ; * a = * l = 0 ; return ; } else { vp9_xform_quant_fp ( x , plane , block , plane_bsize , tx_size ) ; } } else { if ( max_txsize_lookup [ plane_bsize ] == tx_size ) { int txfm_blk_index = ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ; if ( x -> skip_txfm [ txfm_blk_index ] == SKIP_TXFM_NONE ) { <S2SV_ModStart> , tx_size ) ; } else if ( x -> skip_txfm [ txfm_blk_index ] == SKIP_TXFM_AC_ONLY ) { vp9_xform_quant_dc ( x , plane , block , plane_bsize , tx_size ) ; } else { p -> eobs [ block ] = 0 ; * a = * l = 0 ; return ; } } else { vp9_xform_quant ( x , plane , block , plane_bsize , tx_size ) ; } } } <S2SV_ModStart> skip_optimize ) ) { const int ctx = combine_entropy_contexts ( * a , * l ) ; * a = * l = optimize_b ( x , plane , block , tx_size , ctx ) > 0 <S2SV_ModEnd> ; } else { <S2SV_ModStart> 0 ) return ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> { case TX_32X32 : vp9_highbd_idct32x32_add <S2SV_ModEnd> ( dqcoeff , dst <S2SV_ModStart> dst . stride , p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case TX_16X16 : vp9_highbd_idct16x16_add <S2SV_ModEnd> ( dqcoeff , dst <S2SV_ModStart> dst . stride , p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case TX_8X8 : vp9_highbd_idct8x8_add <S2SV_ModEnd> ( dqcoeff , dst <S2SV_ModStart> dst . stride , p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case TX_4X4 : x -> highbd_itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] , xd -> bd <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> "Invalid<S2SV_blank>transform<S2SV_blank>size" ) ; } return ; } # endif switch ( tx_size ) { case TX_32X32 : vp9_idct32x32_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; case TX_16X16 : vp9_idct16x16_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; case TX_8X8 : vp9_idct8x8_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; case TX_4X4 : x -> itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] ) ; break ; default : assert ( 0 && "Invalid<S2SV_blank>transform<S2SV_blank>size" ) ; break ; }
<S2SV_ModStart> [ plane ] ; tran_low_t <S2SV_ModEnd> * const dqcoeff = <S2SV_ModStart> ] > 0 ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { x -> highbd_itxm_add ( dqcoeff , dst , pd -> dst . stride , p -> eobs [ block ] , xd -> bd ) ; return ; } # endif x <S2SV_ModEnd> -> itxm_add ( dqcoeff <S2SV_ModStart> block ] ) ; }
<S2SV_ModStart> int16_t * src , tran_low_t <S2SV_ModEnd> * dst , int <S2SV_ModStart> if ( rd_transform ) vpx_fdct32x32_rd <S2SV_ModEnd> ( src , dst <S2SV_ModStart> src_stride ) ; else vpx_fdct32x32 <S2SV_ModEnd> ( src , dst
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int optimize_b ( MACROBLOCK * mb , <S2SV_ModEnd> int plane , int <S2SV_ModStart> , int block , TX_SIZE tx_size , int ctx <S2SV_ModEnd> ) { MACROBLOCKD * <S2SV_ModStart> ; struct macroblock_plane * const <S2SV_ModStart> ; struct macroblockd_plane * const <S2SV_ModStart> [ 2 ] ; uint8_t token_cache [ 1024 ] ; const tran_low_t * const <S2SV_ModEnd> coeff = BLOCK_OFFSET ( <S2SV_ModStart> , block ) ; tran_low_t * const <S2SV_ModEnd> qcoeff = BLOCK_OFFSET ( <S2SV_ModStart> , block ) ; tran_low_t * const <S2SV_ModEnd> dqcoeff = BLOCK_OFFSET ( <S2SV_ModStart> , block ) ; const <S2SV_ModStart> eobs [ block ] ; const <S2SV_ModEnd> PLANE_TYPE type = pd <S2SV_ModStart> = pd -> plane_type <S2SV_ModEnd> ; const int default_eob <S2SV_ModStart> == TX_32X32 ) ; const int16_t * dequant_ptr = pd -> dequant ; const uint8_t * const band_translate = get_band_translate ( tx_size ) ; const scan_order * const so = get_scan ( xd , tx_size , type , block ) <S2SV_ModEnd> ; const int16_t * <S2SV_ModStart> ; const int16_t * const scan = so -> scan ; const int16_t * const nb = so -> neighbors ; int next = eob , sz = 0 ; int64_t rdmult = mb -> rdmult * plane_rd_mult [ type ] , rddiv = mb -> rddiv ; int64_t rd_cost0 , rd_cost1 ; int rate0 , rate1 , error0 , error1 ; int16_t t0 , t1 ; EXTRABIT e0 ; int best , band , pt , i , final_eob ; # if CONFIG_VP9_HIGHBITDEPTH const int16_t * cat6_high_cost = vp9_get_high_cost_table ( xd -> bd ) ; # else const int16_t * cat6_high_cost = vp9_get_high_cost_table ( 8 ) ; # endif <S2SV_ModEnd> assert ( ( ! <S2SV_ModStart> <= default_eob ) ; if ( ! ref <S2SV_ModEnd> ) rdmult = ( <S2SV_ModStart> ) >> 4 ; <S2SV_ModEnd> tokens [ eob ] <S2SV_ModStart> qc = 0 ; <S2SV_ModEnd> tokens [ eob ] <S2SV_ModStart> tokens [ eob ] [ 1 ] = <S2SV_ModEnd> tokens [ eob ] <S2SV_ModStart> tokens [ eob ] [ 0 ] <S2SV_ModEnd> ; for ( i <S2SV_ModStart> ] = vp9_pt_energy_class [ vp9_get_token ( <S2SV_ModEnd> qcoeff [ scan [ <S2SV_ModStart> [ i ] ] ) <S2SV_ModEnd> ] ; for ( <S2SV_ModStart> ; i -- > 0 <S2SV_ModEnd> ; ) { int <S2SV_ModStart> d2 , dx ; const int <S2SV_ModStart> [ i ] ; int <S2SV_ModStart> ] . rate ; vp9_get_token_extra ( x , & t0 , & e0 ) <S2SV_ModEnd> ; if ( next <S2SV_ModStart> rd_cost0 ; base_bits = vp9_get_cost ( t0 , e0 , cat6_high_cost <S2SV_ModEnd> ) ; dx = <S2SV_ModStart> rc ] ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { dx >>= xd -> bd - 8 ; } # endif <S2SV_ModStart> EOB_TOKEN : ZERO_TOKEN ; e0 = 0 ; } else { vp9_get_token_extra ( x , & t0 , & e0 ) ; t1 = t0 <S2SV_ModEnd> ; } if ( <S2SV_ModStart> rd_cost0 ; base_bits = vp9_get_cost ( t0 , e0 , cat6_high_cost <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ; if ( shortcut ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH <S2SV_ModStart> { dx -= ( ( <S2SV_ModStart> rc != 0 ] >> ( xd -> bd - 8 ) ) <S2SV_ModStart> ) ^ sz ; } else { dx -= ( dequant_ptr [ rc != 0 ] + sz ) ^ sz ; } # else dx -= ( dequant_ptr [ rc != 0 ] + sz ) ^ sz ; # endif <S2SV_ModStart> + 1 ] ; <S2SV_ModEnd> rate0 = tokens [ <S2SV_ModStart> [ 0 ] [ ctx <S2SV_ModEnd> ] [ t0 ] <S2SV_ModStart> [ 0 ] [ ctx <S2SV_ModEnd> ] [ t1 ] <S2SV_ModStart> rd_cost0 ; final_eob = - 1 ; memset <S2SV_ModEnd> ( qcoeff , 0 <S2SV_ModStart> ) ) ) ; memset <S2SV_ModEnd> ( dqcoeff , 0 <S2SV_ModStart> = next ) { const int <S2SV_ModStart> ] . qc ; const int rc = scan [ i ] ; <S2SV_ModStart> = i ; } <S2SV_ModEnd> qcoeff [ rc ] <S2SV_ModStart> ] = final_eob ; return final_eob <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> void vp9_encode_block_intra ( <S2SV_ModEnd> int plane , int <S2SV_ModStart> , TX_SIZE tx_size , void * arg <S2SV_ModEnd> ) { struct encode_b_args <S2SV_ModStart> ) { struct encode_b_args * const args = arg ; MACROBLOCK * const x = args -> x ; MACROBLOCKD * const xd = & x -> e_mbd ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; struct macroblock_plane * const p = & x -> plane [ plane ] ; struct macroblockd_plane * const pd = & xd -> plane [ plane ] ; tran_low_t * coeff = BLOCK_OFFSET ( p -> coeff , block ) ; tran_low_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; tran_low_t * dqcoeff = BLOCK_OFFSET ( pd -> dqcoeff , block ) ; const scan_order * scan_order ; TX_TYPE tx_type = DCT_DCT ; PREDICTION_MODE mode ; const int bwl = b_width_log2_lookup [ plane_bsize ] ; const int diff_stride = 4 * ( 1 << bwl ) ; uint8_t * src , * dst ; int16_t * src_diff ; uint16_t * eob = & p -> eobs [ block ] ; const int src_stride = p -> src . stride ; const int dst_stride = pd -> dst . stride ; int i , j ; txfrm_block_to_raster_xy ( plane_bsize , tx_size , block , & i , & j ) ; dst = & pd -> dst . buf [ 4 * ( j * dst_stride + i ) ] ; src = & p -> src . buf [ 4 * ( j * src_stride + i ) ] ; src_diff = & p -> src_diff [ 4 * ( j * diff_stride + i ) ] ; if ( tx_size == TX_4X4 ) { tx_type = get_tx_type_4x4 ( pd -> plane_type , xd , block ) ; scan_order = & vp9_scan_orders [ TX_4X4 ] [ tx_type ] ; mode = plane == 0 ? get_y_mode ( xd -> mi [ 0 ] , block ) : mbmi -> uv_mode ; } else { mode = plane == 0 ? mbmi -> mode : mbmi -> uv_mode ; if ( tx_size == TX_32X32 ) { scan_order = & vp9_default_scan_orders [ TX_32X32 ] ; } else { tx_type = get_tx_type ( pd -> plane_type , xd ) ; scan_order = & vp9_scan_orders [ tx_size ] [ tx_type ] ; } } vp9_predict_intra_block ( xd , bwl , tx_size , mode , x -> skip_encode ? src : dst , x -> skip_encode ? src_stride : dst_stride , dst , dst_stride , i , j , plane ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { switch ( tx_size ) { case TX_32X32 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 32 , 32 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; highbd_fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; vpx_highbd_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { vp9_highbd_idct32x32_add ( dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } break ; case TX_16X16 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 16 , 16 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; if ( tx_type == DCT_DCT ) vpx_highbd_fdct16x16 ( src_diff , coeff , diff_stride ) ; else vp9_highbd_fht16x16 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_highbd_quantize_b ( coeff , 256 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { vp9_highbd_iht16x16_add ( tx_type , dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } break ; case TX_8X8 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 8 , 8 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; if ( tx_type == DCT_DCT ) vpx_highbd_fdct8x8 ( src_diff , coeff , diff_stride ) ; else vp9_highbd_fht8x8 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_highbd_quantize_b ( coeff , 64 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { vp9_highbd_iht8x8_add ( tx_type , dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } break ; case TX_4X4 : if ( ! x -> skip_recode ) { vpx_highbd_subtract_block ( 4 , 4 , src_diff , diff_stride , src , src_stride , dst , dst_stride , xd -> bd ) ; if ( tx_type != DCT_DCT ) vp9_highbd_fht4x4 ( src_diff , coeff , diff_stride , tx_type ) ; else x -> fwd_txm4x4 ( src_diff , coeff , diff_stride ) ; vpx_highbd_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { if ( tx_type == DCT_DCT ) { x -> highbd_itxm_add ( dqcoeff , dst , dst_stride , * eob , xd -> bd ) ; } else { vp9_highbd_iht4x4_16_add ( dqcoeff , dst , dst_stride , tx_type , xd -> bd ) ; } } break ; default : assert ( 0 ) ; return ; } if ( * eob ) * ( args -> skip ) = 0 ; return ; } # endif switch ( tx_size ) { case TX_32X32 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 32 , 32 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; vpx_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) vp9_idct32x32_add ( dqcoeff , dst , dst_stride , * eob ) ; break ; case TX_16X16 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 16 , 16 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; vp9_fht16x16 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_quantize_b ( coeff , 256 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) vp9_iht16x16_add ( tx_type , dqcoeff , dst , dst_stride , * eob ) ; break ; case TX_8X8 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 8 , 8 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; vp9_fht8x8 ( src_diff , coeff , diff_stride , tx_type ) ; vpx_quantize_b ( coeff , 64 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) vp9_iht8x8_add ( tx_type , dqcoeff , dst , dst_stride , * eob ) ; break ; case TX_4X4 : if ( ! x -> skip_recode ) { vpx_subtract_block ( 4 , 4 , src_diff , diff_stride , src , src_stride , dst , dst_stride ) ; if ( tx_type != DCT_DCT ) vp9_fht4x4 ( src_diff , coeff , diff_stride , tx_type ) ; else x -> fwd_txm4x4 ( src_diff , coeff , diff_stride ) ; vpx_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; } if ( ! x -> skip_encode && * eob ) { if ( tx_type == DCT_DCT ) x -> itxm_add ( dqcoeff , dst , dst_stride , * eob ) ; else vp9_iht4x4_16_add ( dqcoeff , dst , dst_stride , tx_type ) ; } break ; default : assert ( 0 ) ; break ; } if ( * eob ) * ( args -> skip ) = 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> bsize , plane , vp9_encode_block_intra <S2SV_ModEnd> , & arg )
<S2SV_ModStart> ; int plane ; mbmi -> skip = 1 ; if ( x -> skip ) return ; <S2SV_ModStart> ? get_uv_tx_size ( mbmi , pd
<S2SV_ModStart> [ plane_bsize ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( x -> e_mbd . cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbd_subtract_block ( bh , bw , p -> src_diff , bw , p -> src . buf , p -> src . stride , pd -> dst . buf , pd -> dst . stride , x -> e_mbd . bd ) ; return ; } # endif vpx_subtract_block <S2SV_ModEnd> ( bh , bw
<S2SV_ModStart> [ tx_size ] ; tran_low_t <S2SV_ModEnd> * const coeff = <S2SV_ModStart> , block ) ; tran_low_t <S2SV_ModEnd> * const qcoeff = <S2SV_ModStart> , block ) ; tran_low_t <S2SV_ModEnd> * const dqcoeff = <S2SV_ModStart> i ) ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> { case TX_32X32 : highbd_fdct32x32 <S2SV_ModEnd> ( x -> use_lp32x32fdct <S2SV_ModStart> , diff_stride ) ; vpx_highbd_quantize_b_32x32 <S2SV_ModEnd> ( coeff , 1024 <S2SV_ModStart> quant_shift , qcoeff , dqcoeff , <S2SV_ModEnd> pd -> dequant , <S2SV_ModStart> pd -> dequant , eob , <S2SV_ModEnd> scan_order -> scan , <S2SV_ModStart> ; case TX_16X16 : vpx_highbd_fdct16x16 ( src_diff , coeff , diff_stride ) ; vpx_highbd_quantize_b <S2SV_ModEnd> ( coeff , 256 <S2SV_ModStart> , pd -> dequant <S2SV_ModEnd> , eob , scan_order <S2SV_ModStart> ; case TX_8X8 : vpx_highbd_fdct8x8 ( src_diff , coeff , diff_stride ) ; vpx_highbd_quantize_b <S2SV_ModEnd> ( coeff , 64 <S2SV_ModStart> , pd -> dequant <S2SV_ModEnd> , eob , scan_order <S2SV_ModStart> , diff_stride ) ; vpx_highbd_quantize_b <S2SV_ModEnd> ( coeff , 16 <S2SV_ModStart> pd -> dequant , <S2SV_ModEnd> eob , scan_order -> <S2SV_ModStart> assert ( 0 ) ; } return ; } # endif switch ( tx_size ) { case TX_32X32 : fdct32x32 ( x -> use_lp32x32fdct , src_diff , coeff , diff_stride ) ; vpx_quantize_b_32x32 ( coeff , 1024 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; break ; case TX_16X16 : vpx_fdct16x16 ( src_diff , coeff , diff_stride ) ; vpx_quantize_b ( coeff , 256 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; break ; case TX_8X8 : vpx_fdct8x8 ( src_diff , coeff , diff_stride ) ; vpx_quantize_b ( coeff , 64 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; break ; case TX_4X4 : x -> fwd_txm4x4 ( src_diff , coeff , diff_stride ) ; vpx_quantize_b ( coeff , 16 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , qcoeff , dqcoeff , pd -> dequant , eob , scan_order -> scan , scan_order -> iscan ) ; break ; default : assert ( 0 ) ; break
<S2SV_ModStart> static void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w , int <S2SV_ModStart> != 0 ) ; vpx_write <S2SV_ModEnd> ( w , sign <S2SV_ModStart> ; ++ i ) vpx_write <S2SV_ModEnd> ( w , ( <S2SV_ModStart> if ( usehp ) vpx_write <S2SV_ModEnd> ( w , hp
<S2SV_ModStart> MB_MODE_INFO * mbmi , const MB_MODE_INFO_EXT * mbmi_ext , <S2SV_ModStart> * ref = & mbmi_ext <S2SV_ModEnd> -> ref_mvs [ mbmi
<S2SV_ModStart> static int update_mv ( vpx_writer <S2SV_ModEnd> * w , const <S2SV_ModStart> [ 2 ] , vpx_prob * cur_p , vpx_prob <S2SV_ModEnd> upd_p ) { const <S2SV_ModStart> upd_p ) { const vpx_prob <S2SV_ModEnd> new_p = get_binary_prob ( <S2SV_ModStart> 7 * 256 ; vpx_write <S2SV_ModEnd> ( w , update <S2SV_ModStart> cur_p = new_p ; vpx_write_literal <S2SV_ModEnd> ( w , new_p
<S2SV_ModStart> VP9_COMP * cpi , vpx_writer <S2SV_ModEnd> * w , const <S2SV_ModStart> ) ; if ( cpi -> sf . mv <S2SV_ModEnd> . auto_mv_step_size ) {
<S2SV_ModStart> <S2SV_null> void vp9_entropy_mv_init ( void
<S2SV_ModStart> <S2SV_null> void vp9_update_mv_count ( ThreadData * td ) { <S2SV_ModEnd> const MACROBLOCKD * xd <S2SV_ModStart> const MACROBLOCKD * xd = & td -> mb . e_mbd ; <S2SV_ModEnd> const MODE_INFO * mi <S2SV_ModStart> & mi -> mbmi ; const MB_MODE_INFO_EXT * mbmi_ext = td -> mb . mbmi_ext <S2SV_ModStart> inc_mvs ( mbmi , mbmi_ext , <S2SV_ModStart> . as_mv , & td -> counts -> <S2SV_ModEnd> mv ) ; } <S2SV_ModStart> inc_mvs ( mbmi , mbmi_ext , <S2SV_ModStart> -> mv , & td -> counts -> <S2SV_ModEnd> mv ) ; }
<S2SV_ModStart> , int usehp , vpx_writer * w , nmv_context_counts * const counts <S2SV_ModEnd> ) { int i <S2SV_ModStart> & cm -> fc -> nmvc ; <S2SV_ModEnd> write_mv_update ( vp9_mv_joint_tree ,
<S2SV_ModStart> void write_mv_update ( const vpx_tree_index * tree , vpx_prob <S2SV_ModEnd> probs [ ] , <S2SV_ModStart> , int n , vpx_writer <S2SV_ModEnd> * w ) {
<S2SV_ModStart> i ++ ) { memset <S2SV_ModEnd> ( dst_ptr1 , src_ptr1 <S2SV_ModStart> , extend_left ) ; memcpy ( dst_ptr1 + extend_left , src_ptr1 , w ) ; memset <S2SV_ModEnd> ( dst_ptr2 , src_ptr2 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1 , src_ptr1 <S2SV_ModStart> i ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr2 , src_ptr2
<S2SV_ModStart> 16 ; const int er_y = MAX ( src -> y_width + 16 , ALIGN_POWER_OF_TWO ( src -> y_width , 6 ) ) - src -> y_crop_width ; const int <S2SV_ModStart> eb_y = MAX ( src -> y_height + 16 , <S2SV_ModStart> ALIGN_POWER_OF_TWO ( src -> y_height , 6 ) ) - src -> y_crop_height <S2SV_ModEnd> ; const int uv_width_subsampling <S2SV_ModStart> uv_width_subsampling ; # if CONFIG_VP9_HIGHBITDEPTH if ( src -> flags & YV12_FLAG_HIGHBITDEPTH ) { highbd_copy_and_extend_plane ( src -> y_buffer , src -> y_stride , dst -> y_buffer , dst -> y_stride , src -> y_crop_width , src -> y_crop_height , et_y , el_y , eb_y , er_y ) ; highbd_copy_and_extend_plane ( src -> u_buffer , src -> uv_stride , dst -> u_buffer , dst -> uv_stride , src -> uv_crop_width , src -> uv_crop_height , et_uv , el_uv , eb_uv , er_uv ) ; highbd_copy_and_extend_plane ( src -> v_buffer , src -> uv_stride , dst -> v_buffer , dst -> uv_stride , src -> uv_crop_width , src -> uv_crop_height , et_uv , el_uv , eb_uv , er_uv ) ; return ; } <S2SV_ModEnd> # endif copy_and_extend_plane ( <S2SV_ModStart> y_stride , src -> y_crop_width , src -> y_crop_height <S2SV_ModEnd> , et_y , el_y <S2SV_ModStart> uv_stride , src -> uv_crop_width , src -> uv_crop_height <S2SV_ModEnd> , et_uv , el_uv <S2SV_ModStart> uv_stride , src -> uv_crop_width , src -> uv_crop_height <S2SV_ModEnd> , et_uv , el_uv
<S2SV_ModStart> static void accumulate_frame_motion_stats ( const FIRSTPASS_STATS * stats , double * mv_in_out <S2SV_ModEnd> , double * mv_in_out_accumulator <S2SV_ModStart> * mv_ratio_accumulator ) { const double pct = stats <S2SV_ModEnd> -> pcnt_motion ; * <S2SV_ModStart> -> pcnt_motion ; * mv_in_out = stats -> mv_in_out_count * pct <S2SV_ModEnd> ; * mv_in_out_accumulator += <S2SV_ModStart> ; * mv_in_out_accumulator += * mv_in_out <S2SV_ModEnd> ; * abs_mv_in_out_accumulator += <S2SV_ModStart> abs_mv_in_out_accumulator += fabs ( * mv_in_out <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ) ; if ( pct <S2SV_ModEnd> > 0.05 ) { <S2SV_ModStart> ) { const double mvr_ratio = fabs ( stats <S2SV_ModEnd> -> mvr_abs ) / <S2SV_ModStart> DOUBLE_DIVIDE_CHECK ( fabs ( stats <S2SV_ModEnd> -> MVr ) ) <S2SV_ModStart> ) ; const double mvc_ratio = fabs ( stats <S2SV_ModEnd> -> mvc_abs ) / <S2SV_ModStart> DOUBLE_DIVIDE_CHECK ( fabs ( stats <S2SV_ModEnd> -> MVc ) ) <S2SV_ModStart> ; * mv_ratio_accumulator += pct * ( mvr_ratio < stats -> mvr_abs ? mvr_ratio : stats -> mvr_abs ) <S2SV_ModEnd> ; * mv_ratio_accumulator += <S2SV_ModStart> ; * mv_ratio_accumulator += pct * ( mvc_ratio < stats -> mvc_abs ? mvc_ratio : stats -> mvc_abs ) <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> frame ; section -> weight += frame -> weight ; section -> <S2SV_ModStart> sr_coded_error ; section -> <S2SV_ModEnd> pcnt_inter += frame -> <S2SV_ModStart> += frame -> pcnt_neutral ; section -> intra_skip_pct += frame -> intra_skip_pct ; section -> inactive_zone_rows += frame -> inactive_zone_rows ; section -> inactive_zone_cols += frame -> inactive_zone_cols
<S2SV_ModStart> * b_boost ) { TWO_PASS <S2SV_ModEnd> * const twopass = <S2SV_ModStart> ++ i ) { const FIRSTPASS_STATS * this_frame = read_frame_stats ( twopass , i + offset ) ; if ( this_frame == NULL <S2SV_ModEnd> ) break ; accumulate_frame_motion_stats <S2SV_ModStart> break ; accumulate_frame_motion_stats ( <S2SV_ModEnd> this_frame , & this_frame_mv_in_out <S2SV_ModStart> decay_accumulator *= get_prediction_decay_rate ( cpi , <S2SV_ModEnd> this_frame ) ; decay_accumulator <S2SV_ModStart> ; } boost_score += decay_accumulator * <S2SV_ModEnd> calc_frame_boost ( cpi , <S2SV_ModStart> calc_frame_boost ( cpi , this_frame , this_frame_mv_in_out , GF_MAX_BOOST <S2SV_ModEnd> ) ; } * <S2SV_ModStart> -- i ) { const FIRSTPASS_STATS * this_frame = read_frame_stats ( twopass , i + offset ) ; if ( this_frame == NULL <S2SV_ModEnd> ) break ; accumulate_frame_motion_stats <S2SV_ModStart> break ; accumulate_frame_motion_stats ( <S2SV_ModEnd> this_frame , & this_frame_mv_in_out <S2SV_ModStart> decay_accumulator *= get_prediction_decay_rate ( cpi , <S2SV_ModEnd> this_frame ) ; decay_accumulator <S2SV_ModStart> ; } boost_score += decay_accumulator * <S2SV_ModEnd> calc_frame_boost ( cpi , <S2SV_ModStart> calc_frame_boost ( cpi , this_frame , this_frame_mv_in_out , GF_MAX_BOOST <S2SV_ModEnd> ) ; } * <S2SV_ModStart> f_frames ) * 20 ) ; arf_boost = MAX ( arf_boost , MIN_ARF_GF_BOOST
<S2SV_ModStart> pt_high , int q , vpx_bit_depth_t bit_depth <S2SV_ModStart> ( vp9_convert_qindex_to_q ( q , bit_depth ) * 0.01 <S2SV_ModEnd> + pt_low , pt_high
<S2SV_ModStart> VP9_COMP * cpi , const <S2SV_ModStart> this_frame , double this_frame_mv_in_out , double max_boost <S2SV_ModStart> { double frame_boost ; const double lq = vp9_convert_qindex_to_q ( cpi -> rc . avg_frame_qindex [ INTER_FRAME ] , cpi -> common . bit_depth ) ; const double boost_q_correction = MIN ( ( 0.5 + ( lq * 0.015 ) ) , 1.5 ) ; int num_mbs = ( cpi -> oxcf . resize_mode != RESIZE_NONE ) ? cpi -> initial_mbs : cpi -> common . MBs ; num_mbs = ( int ) MAX ( 1 , num_mbs * calculate_active_area ( cpi , this_frame ) ) ; frame_boost = ( BASELINE_ERR_PER_MB * num_mbs ) <S2SV_ModEnd> / DOUBLE_DIVIDE_CHECK ( this_frame <S2SV_ModStart> this_frame -> coded_error ) ; frame_boost = frame_boost * BOOST_FACTOR * boost_q_correction <S2SV_ModEnd> ; if ( this_frame_mv_in_out <S2SV_ModStart> MIN ( frame_boost , max_boost * boost_q_correction <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> * cpi , const TWO_PASS * twopass , const VP9EncoderConfig * oxcf , const <S2SV_ModStart> this_frame ) { const FIRSTPASS_STATS * const <S2SV_ModEnd> stats = & twopass <S2SV_ModStart> twopass -> total_stats ; const double av_weight = stats -> weight <S2SV_ModEnd> / stats -> count <S2SV_ModStart> stats -> count ; const double av_err = ( stats -> coded_error * av_weight ) / stats -> count ; double <S2SV_ModStart> pow ( this_frame -> coded_error * this_frame -> weight <S2SV_ModEnd> / DOUBLE_DIVIDE_CHECK ( av_err <S2SV_ModStart> ( av_err ) , oxcf -> two_pass_vbrbias / 100.0 ) ; modified_error *= pow ( calculate_active_area ( cpi , this_frame ) , ACT_AREA_CORRECTION <S2SV_ModEnd> ) ; return fclamp
<S2SV_ModStart> * this_frame ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> cpi -> rc ; VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> cpi -> oxcf ; TWO_PASS <S2SV_ModEnd> * const twopass = <S2SV_ModStart> twopass ; FIRSTPASS_STATS next_frame <S2SV_ModEnd> ; const FIRSTPASS_STATS * <S2SV_ModStart> ; const FIRSTPASS_STATS * const start_pos = twopass -> stats_in <S2SV_ModEnd> ; int i ; <S2SV_ModStart> gf_group_err = 0.0 ; # if GROUP_ADAPTIVE_MAXQ double gf_group_raw_error = 0.0 ; # endif double gf_group_skip_pct = 0.0 ; double gf_group_inactive_zone_rows = 0.0 ; <S2SV_ModStart> ; double mv_ratio_accumulator_thresh ; unsigned int allow_alt_ref = is_altref_enabled ( cpi ) ; int f_boost = 0 ; int b_boost = 0 ; int flash_detected ; int active_max_gf_interval ; int active_min_gf_interval ; int64_t gf_group_bits ; double gf_group_error_left ; int gf_arf_bits ; const int is_key_frame = frame_is_intra_only ( cm ) ; const int arf_active_or_kf = is_key_frame || rc -> source_alt_ref_active ; if ( is_key_frame == 0 ) { vp9_zero ( twopass -> gf_group ) ; } vpx_clear_system_state ( ) ; vp9_zero ( next_frame ) ; mod_frame_err = calculate_modified_err ( cpi , twopass , oxcf , this_frame ) ; gf_first_frame_err = mod_frame_err ; if ( arf_active_or_kf ) { <S2SV_ModEnd> gf_group_err -= gf_first_frame_err ; <S2SV_ModStart> gf_group_err -= gf_first_frame_err ; # if GROUP_ADAPTIVE_MAXQ gf_group_raw_error -= this_frame -> coded_error ; # endif gf_group_skip_pct -= this_frame -> intra_skip_pct ; gf_group_inactive_zone_rows -= this_frame -> inactive_zone_rows ; } mv_ratio_accumulator_thresh = ( cpi -> initial_height + cpi -> initial_width ) / 4.0 ; { int int_max_q = ( int ) ( vp9_convert_qindex_to_q ( twopass -> active_worst_quality , <S2SV_ModEnd> cpi -> common . <S2SV_ModStart> cpi -> common . bit_depth ) ) ; int int_lbq = ( int ) ( vp9_convert_qindex_to_q ( rc -> last_boosted_qindex , <S2SV_ModEnd> cpi -> common . <S2SV_ModStart> cpi -> common . bit_depth ) ) ; active_min_gf_interval = rc -> min_gf_interval + MIN ( 2 , int_max_q / 200 ) ; if ( active_min_gf_interval > rc -> max_gf_interval ) active_min_gf_interval = rc -> max_gf_interval ; if ( cpi -> multi_arf_allowed ) { active_max_gf_interval = rc -> max_gf_interval ; } else { active_max_gf_interval = 12 + MIN ( 4 , ( int_lbq / 6 ) ) ; if ( active_max_gf_interval < active_min_gf_interval ) active_max_gf_interval = active_min_gf_interval <S2SV_ModEnd> ; if ( active_max_gf_interval <S2SV_ModStart> rc -> max_gf_interval ; if ( active_max_gf_interval < active_min_gf_interval ) active_max_gf_interval = active_min_gf_interval ; } } <S2SV_ModStart> calculate_modified_err ( cpi , twopass , oxcf , <S2SV_ModStart> gf_group_err += mod_frame_err ; # if GROUP_ADAPTIVE_MAXQ gf_group_raw_error += this_frame -> coded_error ; # endif gf_group_skip_pct += this_frame -> intra_skip_pct ; gf_group_inactive_zone_rows += this_frame -> inactive_zone_rows ; <S2SV_ModStart> loop_decay_rate = get_prediction_decay_rate ( cpi <S2SV_ModEnd> , & next_frame ) <S2SV_ModStart> decay_accumulator * loop_decay_rate ; zero_motion_accumulator = MIN ( zero_motion_accumulator , get_zero_motion_factor ( cpi , & next_frame ) ) ; <S2SV_ModEnd> if ( detect_transition_to_still ( <S2SV_ModStart> if ( detect_transition_to_still ( cpi <S2SV_ModEnd> , i , 5 <S2SV_ModStart> } } boost_score += <S2SV_ModEnd> decay_accumulator * calc_frame_boost ( <S2SV_ModStart> & next_frame , this_frame_mv_in_out , GF_MAX_BOOST <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ( ( i >= ( active_max_gf_interval + arf_active_or_kf ) && <S2SV_ModEnd> zero_motion_accumulator < 0.995 ) <S2SV_ModStart> zero_motion_accumulator < 0.995 ) <S2SV_ModEnd> || ( ( i <S2SV_ModStart> || ( ( i >= active_min_gf_interval + arf_active_or_kf <S2SV_ModEnd> ) && ( ! <S2SV_ModStart> - old_boost_score ) < BOOST_BREAKOUT <S2SV_ModEnd> ) ) ) ) <S2SV_ModStart> * 1000.0 ) ; rc -> constrained_gf_group = ( i >= rc -> frames_to_key ) ? 1 : 0 ; if ( allow_alt_ref && ( i < cpi -> oxcf . lag_in_frames ) && ( i >= rc -> min_gf_interval ) ) { rc -> gfu_boost = calc_arf_boost ( cpi , 0 , ( i - 1 ) , ( i - 1 ) , & f_boost , & b_boost ) ; rc -> source_alt_ref_pending = 1 ; cpi -> multi_arf_enabled = ( cpi -> multi_arf_allowed && ( rc -> baseline_gf_interval >= 6 ) && ( zero_motion_accumulator < 0.995 ) ) ? 1 : 0 ; } else { rc -> gfu_boost = MAX ( ( int ) boost_score , MIN_ARF_GF_BOOST ) ; rc -> source_alt_ref_pending = 0 ; } rc -> baseline_gf_interval = i - ( is_key_frame || rc -> source_alt_ref_pending ) ; if ( is_two_pass_svc ( cpi ) && cpi -> svc . number_temporal_layers > 1 ) { int count = ( 1 << ( cpi -> svc . number_temporal_layers - 1 ) ) - 1 ; int new_gf_interval = ( rc -> baseline_gf_interval + count ) & ( ~ count ) ; int j ; for ( j = 0 ; j < new_gf_interval - rc -> baseline_gf_interval ; ++ j ) { <S2SV_ModEnd> if ( EOF == <S2SV_ModStart> ) ) break ; gf_group_err += calculate_modified_err ( cpi , twopass , oxcf , this_frame ) ; # if GROUP_ADAPTIVE_MAXQ gf_group_raw_error += this_frame -> coded_error ; # endif gf_group_skip_pct += this_frame -> intra_skip_pct ; gf_group_inactive_zone_rows += this_frame -> inactive_zone_rows ; } <S2SV_ModEnd> rc -> baseline_gf_interval = <S2SV_ModStart> rc -> baseline_gf_interval = new_gf_interval ; } rc -> frames_till_gf_update_due = rc -> baseline_gf_interval ; reset_fpf_position ( twopass , start_pos ) ; gf_group_bits = calculate_total_gf_group_bits ( cpi , gf_group_err ) ; # if GROUP_ADAPTIVE_MAXQ if ( ( <S2SV_ModEnd> cpi -> oxcf . <S2SV_ModStart> cpi -> oxcf . rc_mode != VPX_Q ) && ( rc -> baseline_gf_interval > 1 ) ) { const int vbr_group_bits_per_frame = ( int ) ( gf_group_bits / rc -> baseline_gf_interval ) ; const double group_av_err = gf_group_raw_error / rc -> baseline_gf_interval ; const double group_av_skip_pct = gf_group_skip_pct / rc -> baseline_gf_interval ; const double group_av_inactive_zone = ( ( gf_group_inactive_zone_rows * 2 ) / ( rc -> baseline_gf_interval * ( double ) cm -> mb_rows ) ) ; int tmp_q ; double rc_factor = 1.0 ; if ( rc -> rate_error_estimate > 0 ) { rc_factor = MAX ( RC_FACTOR_MIN , ( double ) ( 100 - rc -> rate_error_estimate ) / 100.0 ) ; } else { rc_factor = MIN ( RC_FACTOR_MAX , ( double ) ( 100 - rc -> rate_error_estimate ) / 100.0 ) ; } tmp_q = get_twopass_worst_quality ( cpi , group_av_err , ( group_av_skip_pct + group_av_inactive_zone ) , vbr_group_bits_per_frame , twopass -> kfgroup_inter_fraction * rc_factor ) ; twopass -> active_worst_quality = MAX ( tmp_q , twopass -> active_worst_quality >> 1 <S2SV_ModEnd> ) ; } # <S2SV_ModStart> ; } # endif gf_arf_bits = calculate_boost_bits ( rc -> baseline_gf_interval , rc -> gfu_boost , gf_group_bits ) ; twopass -> kf_group_error_left -= ( int64_t ) gf_group_err ; if ( rc -> source_alt_ref_pending ) { gf_group_error_left = gf_group_err - mod_frame_err ; } else if ( is_key_frame == 0 ) { gf_group_error_left = gf_group_err - gf_first_frame_err ; } else { gf_group_error_left = gf_group_err ; } allocate_gf_group_bits ( cpi , gf_group_bits , gf_group_error_left , gf_arf_bits ) ; reset_fpf_position ( twopass , start_pos ) ; if <S2SV_ModEnd> ( cpi -> common <S2SV_ModStart> frame_type != KEY_FRAME ) { twopass -> section_intra_rating = calculate_section_intra_ratio ( start_pos , twopass -> stats_in_end , rc -> baseline_gf_interval ) ; } if ( oxcf -> resize_mode == RESIZE_DYNAMIC ) { cpi -> rc . next_frame_size_selector = UNSCALED <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> int detect_flash ( const TWO_PASS <S2SV_ModEnd> * twopass , int <S2SV_ModStart> int offset ) { const FIRSTPASS_STATS * const next_frame = <S2SV_ModEnd> read_frame_stats ( twopass , <S2SV_ModStart> read_frame_stats ( twopass , offset ) ; return next_frame != NULL && next_frame -> pcnt_second_ref > next_frame -> pcnt_inter && next_frame -> pcnt_second_ref >= 0.5 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> static int detect_transition_to_still ( VP9_COMP * cpi <S2SV_ModEnd> , int frame_interval , <S2SV_ModStart> double last_decay_rate ) { TWO_PASS * const twopass = & cpi -> twopass ; RATE_CONTROL * const rc = & cpi -> rc <S2SV_ModEnd> ; if ( frame_interval <S2SV_ModStart> if ( frame_interval > rc -> min_gf_interval <S2SV_ModEnd> && loop_decay_rate >= 0.999 <S2SV_ModStart> { int j ; <S2SV_ModEnd> for ( j = <S2SV_ModStart> ++ j ) { const FIRSTPASS_STATS * stats = & twopass -> stats_in [ j ] ; if ( stats >= twopass -> stats_in_end <S2SV_ModEnd> ) break ; if <S2SV_ModStart> break ; if ( stats -> pcnt_inter - stats -> <S2SV_ModEnd> pcnt_motion < 0.999 ) <S2SV_ModStart> ) break ; } return j == still_interval ; } return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> cpi -> rc ; TWO_PASS <S2SV_ModEnd> * const twopass = <S2SV_ModStart> & cpi -> twopass ; GF_GROUP * const gf_group = & twopass -> gf_group ; const VP9EncoderConfig * const oxcf = & cpi -> oxcf <S2SV_ModStart> ; const FIRSTPASS_STATS * const <S2SV_ModStart> ; FIRSTPASS_STATS last_frame ; int kf_bits = 0 ; int loop_decay_counter = 0 ; <S2SV_ModStart> double decay_accumulator = 1.0 ; double av_decay_accumulator = 0.0 <S2SV_ModStart> frame_type = KEY_FRAME ; vp9_zero ( * gf_group ) ; <S2SV_ModStart> source_alt_ref_active = 0 ; cpi -> multi_arf_last_grp_enabled = 0 ; <S2SV_ModStart> = calculate_modified_err ( cpi , twopass , oxcf <S2SV_ModStart> < twopass -> stats_in_end && rc -> frames_to_key < cpi -> oxcf . key_freq <S2SV_ModStart> calculate_modified_err ( cpi , twopass , oxcf , <S2SV_ModStart> oxcf . auto_key && twopass -> stats_in < twopass -> stats_in_end <S2SV_ModEnd> ) { double loop_decay_rate <S2SV_ModStart> last_frame , this_frame , twopass -> stats_in <S2SV_ModEnd> ) ) break ; <S2SV_ModStart> loop_decay_rate = get_prediction_decay_rate ( cpi , twopass -> stats_in <S2SV_ModEnd> ) ; recent_loop_decay [ <S2SV_ModStart> if ( detect_transition_to_still ( cpi <S2SV_ModEnd> , i , cpi <S2SV_ModStart> i , cpi -> oxcf . key_freq <S2SV_ModEnd> - i , loop_decay_rate <S2SV_ModStart> frames_to_key >= 2 * cpi -> oxcf . key_freq <S2SV_ModEnd> ) break ; } <S2SV_ModStart> rc -> frames_to_key > cpi -> oxcf . key_freq <S2SV_ModEnd> ) { FIRSTPASS_STATS tmp_frame <S2SV_ModStart> ) ; kf_group_err = 0.0 <S2SV_ModEnd> ; for ( i <S2SV_ModStart> calculate_modified_err ( cpi , twopass , oxcf , <S2SV_ModStart> == twopass -> stats_in_end || rc -> frames_to_key >= cpi -> oxcf . key_freq <S2SV_ModStart> ; } if ( is_two_pass_svc ( cpi ) && cpi -> svc . number_temporal_layers > 1 ) { int count = ( 1 << ( cpi -> svc . number_temporal_layers - 1 ) ) - 1 ; int new_frame_to_key = ( rc -> frames_to_key + count ) & ( ~ count ) ; int j ; for ( j = 0 ; j < new_frame_to_key - rc -> frames_to_key ; ++ j ) { if ( EOF == input_stats ( twopass , this_frame ) ) break ; <S2SV_ModEnd> kf_group_err += calculate_modified_err ( <S2SV_ModStart> calculate_modified_err ( cpi , twopass , oxcf , this_frame ) ; } rc -> frames_to_key = new_frame_to_key ; } if ( twopass -> stats_in >= twopass -> stats_in_end ) { kf_group_err += calculate_modified_err ( cpi , twopass , oxcf , <S2SV_ModStart> = 0 ; } twopass -> kf_group_bits = MAX ( 0 , twopass -> kf_group_bits ) ; <S2SV_ModStart> 0 ; i < ( rc -> frames_to_key - 1 ) <S2SV_ModEnd> ; ++ i ) <S2SV_ModStart> ) ) break ; zero_motion_accumulator = MIN ( zero_motion_accumulator , get_zero_motion_factor ( cpi , & next_frame ) ) ; if ( ( i <= rc -> max_gf_interval ) || ( ( i <= ( rc -> max_gf_interval * 4 ) ) && ( decay_accumulator > 0.5 ) ) ) { const double frame_boost = calc_frame_boost ( cpi , this_frame , 0 , KF_MAX_BOOST ) <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> loop_decay_rate = get_prediction_decay_rate ( cpi , <S2SV_ModEnd> & next_frame ) ; <S2SV_ModStart> , MIN_DECAY_FACTOR ) ; av_decay_accumulator += decay_accumulator ; ++ loop_decay_counter ; <S2SV_ModStart> += ( decay_accumulator * frame_boost ) ; } } av_decay_accumulator /= ( double ) loop_decay_counter <S2SV_ModEnd> ; reset_fpf_position ( twopass <S2SV_ModStart> , start_position ) ; twopass -> kf_zeromotion_pct = ( int ) ( zero_motion_accumulator * 100.0 <S2SV_ModEnd> ) ; twopass -> <S2SV_ModStart> twopass -> section_intra_rating = calculate_section_intra_ratio ( start_position , twopass -> stats_in_end , rc -> frames_to_key ) ; rc -> kf_boost = <S2SV_ModStart> ( int ) ( av_decay_accumulator * boost_score ) ; rc -> kf_boost = MAX ( rc -> kf_boost , <S2SV_ModEnd> ( rc -> frames_to_key <S2SV_ModStart> * 3 ) ) ; rc -> kf_boost = MAX ( rc -> kf_boost , MIN_KF_BOOST ) ; kf_bits = calculate_boost_bits <S2SV_ModEnd> ( ( rc -> <S2SV_ModStart> frames_to_key - 1 ) , rc -> kf_boost , twopass -> kf_group_bits ) ; if ( twopass -> kf_group_bits ) { twopass -> kfgroup_inter_fraction = ( double ) ( twopass -> kf_group_bits - kf_bits ) / ( double ) twopass -> kf_group_bits <S2SV_ModEnd> ; } else { <S2SV_ModStart> ; } else { twopass -> kfgroup_inter_fraction = 1.0 <S2SV_ModEnd> ; } twopass -> <S2SV_ModStart> twopass -> kf_group_bits -= kf_bits ; gf_group -> bit_allocation [ 0 ] = kf_bits ; gf_group -> update_type [ 0 ] = KF_UPDATE ; gf_group -> rf_level [ 0 ] = KF_STD ; <S2SV_ModEnd> twopass -> kf_group_error_left = <S2SV_ModStart> modified_error_left -= kf_group_err ; if ( oxcf -> resize_mode == RESIZE_DYNAMIC ) { cpi -> rc . next_frame_size_selector = UNSCALED ; }
<S2SV_ModStart> , tmp_err , n <S2SV_ModEnd> ; const BLOCK_SIZE bsize <S2SV_ModStart> [ bsize ] ; const int new_mv_mode_penalty = NEW_MV_MODE_PENALTY ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const int sr = get_search_range ( cpi ) <S2SV_ModEnd> ; step_param += sr <S2SV_ModStart> ( bsize ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { v_fn_ptr . vf = highbd_get_block_variance_fn ( bsize , xd -> bd ) ; } # endif <S2SV_ModStart> ( x , & cpi -> ss_cfg , & <S2SV_ModStart> num00 , & v_fn_ptr <S2SV_ModEnd> , ref_mv ) ; <S2SV_ModStart> best_motion_err = tmp_err ; * best_mv = tmp_mv <S2SV_ModEnd> ; } n = <S2SV_ModStart> -> diamond_search_sad ( x , & cpi -> ss_cfg <S2SV_ModStart> , & v_fn_ptr , <S2SV_ModEnd> ref_mv ) ; if <S2SV_ModStart> best_motion_err = tmp_err ; * best_mv = tmp_mv <S2SV_ModEnd> ; } } }
<S2SV_ModStart> * rc , const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) { <S2SV_ModStart> int64_t ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE bsize <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 : <S2SV_ModStart> case BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 : <S2SV_ModStart> case BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : return <S2SV_ModStart> ; default : return vpx_mse16x16 <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> double get_prediction_decay_rate ( const VP9_COMP * cpi <S2SV_ModEnd> , const FIRSTPASS_STATS * <S2SV_ModStart> ) { const double sr_decay_rate = get_sr_decay_rate ( cpi , next_frame ) ; const double zero_motion_factor = ( 0.95 * pow ( ( next_frame -> pcnt_inter - next_frame -> pcnt_motion ) , ZM_POWER_FACTOR ) ) ; return MAX ( zero_motion_factor , ( sr_decay_rate + ( ( 1.0 - sr_decay_rate ) * zero_motion_factor ) ) <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> static int input_stats ( TWO_PASS <S2SV_ModEnd> * p , FIRSTPASS_STATS
<S2SV_ModStart> fprintf ( fpfile , "%12.0lf<S2SV_blank>%12.4lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf" "%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.4lf" "%12.4lf<S2SV_blank>%12.4lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.0lf<S2SV_blank>%12.4lf\\n" <S2SV_ModEnd> , stats -> frame <S2SV_ModStart> frame , stats -> weight , stats -> <S2SV_ModStart> sr_coded_error , stats -> <S2SV_ModEnd> pcnt_inter , stats -> <S2SV_ModStart> , stats -> pcnt_neutral , stats -> intra_skip_pct , stats -> inactive_zone_rows , stats -> inactive_zone_cols
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static const FIRSTPASS_STATS * read_frame_stats ( const TWO_PASS * p <S2SV_ModEnd> , int offset ) <S2SV_ModStart> int offset ) { if ( <S2SV_ModEnd> ( offset >= 0 <S2SV_ModStart> ( offset >= 0 && p -> stats_in + offset <S2SV_ModEnd> >= p -> stats_in_end <S2SV_ModStart> p -> stats_in_end ) || <S2SV_ModEnd> ( offset < 0 <S2SV_ModStart> ( offset < 0 && p -> stats_in + offset <S2SV_ModEnd> < p -> stats_in_start <S2SV_ModStart> p -> stats_in_start ) ) { return NULL ; } return & p -> stats_in <S2SV_ModEnd> [ offset ] ; <S2SV_ModStart> [ offset ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> static void reset_fpf_position ( TWO_PASS <S2SV_ModEnd> * p , const
<S2SV_ModStart> frame ; section -> weight -= frame -> weight ; section -> <S2SV_ModStart> sr_coded_error ; section -> <S2SV_ModEnd> pcnt_inter -= frame -> <S2SV_ModStart> -= frame -> pcnt_neutral ; section -> intra_skip_pct -= frame -> intra_skip_pct ; section -> inactive_zone_rows -= frame -> inactive_zone_rows ; section -> inactive_zone_cols -= frame -> inactive_zone_cols
<S2SV_ModStart> static int test_candidate_kf ( TWO_PASS <S2SV_ModEnd> * twopass , const <S2SV_ModStart> is_viable_kf = 0 ; double pcnt_intra = 1.0 - this_frame -> pcnt_inter ; double modified_pcnt_inter = this_frame -> pcnt_inter - this_frame -> pcnt_neutral ; <S2SV_ModStart> this_frame -> pcnt_second_ref < SECOND_REF_USEAGE_THRESH <S2SV_ModEnd> ) && ( next_frame <S2SV_ModStart> next_frame -> pcnt_second_ref < SECOND_REF_USEAGE_THRESH ) && ( ( this_frame -> pcnt_inter < VERY_LOW_INTER_THRESH ) || ( ( pcnt_intra > MIN_INTRA_LEVEL ) && ( pcnt_intra > ( INTRA_VS_INTER_THRESH * modified_pcnt_inter ) <S2SV_ModEnd> ) && ( ( <S2SV_ModStart> coded_error ) ) < KF_II_ERR_THRESHOLD <S2SV_ModEnd> ) && ( ( <S2SV_ModStart> -> coded_error ) > ERR_CHANGE_THRESHOLD <S2SV_ModEnd> ) || ( fabs <S2SV_ModStart> -> intra_error ) > ERR_CHANGE_THRESHOLD <S2SV_ModEnd> ) || ( ( <S2SV_ModStart> coded_error ) ) > II_IMPROVEMENT_THRESHOLD <S2SV_ModEnd> ) ) ) ) <S2SV_ModStart> double next_iiratio = ( BOOST_FACTOR <S2SV_ModEnd> * local_next_frame . intra_error <S2SV_ModStart> if ( next_iiratio > KF_II_MAX ) next_iiratio = KF_II_MAX <S2SV_ModEnd> ; if ( local_next_frame
<S2SV_ModStart> ) { if ( is_two_pass_svc ( cpi ) <S2SV_ModEnd> ) { int i
<S2SV_ModStart> ( VP9_COMP * cpi , const struct lookahead_entry * source <S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> * ctx = & cpi -> td . pc_root -> none <S2SV_ModEnd> ; int i ; <S2SV_ModStart> recon_yoffset , recon_uvoffset ; <S2SV_ModEnd> int64_t intra_error = 0 <S2SV_ModStart> second_ref_count = 0 ; const int intrapenalty = INTRA_MODE_PENALTY ; double neutral_count ; int intra_skip_count = 0 ; int image_data_start_row = INVALID_ROW <S2SV_ModEnd> ; int new_mv_count = <S2SV_ModStart> sum_in_vectors = 0 ; MV lastmv = { 0 , 0 } ; TWO_PASS <S2SV_ModEnd> * twopass = & <S2SV_ModStart> , 0 } ; int recon_y_stride , recon_uv_stride , uv_mb_height ; YV12_BUFFER_CONFIG * const lst_yv12 = get_ref_frame_buffer ( cpi , LAST_FRAME ) ; YV12_BUFFER_CONFIG * gld_yv12 = get_ref_frame_buffer ( cpi , GOLDEN_FRAME ) ; YV12_BUFFER_CONFIG * const new_yv12 = get_frame_new_buffer ( cm ) ; <S2SV_ModStart> first_ref_buf = lst_yv12 ; LAYER_CONTEXT * const lc = is_two_pass_svc ( cpi ) ? & <S2SV_ModEnd> cpi -> svc . <S2SV_ModStart> cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id ] : NULL ; double intra_factor ; double brightness_factor ; BufferPool * const pool = cm -> buffer_pool ; assert ( new_yv12 != NULL ) ; assert ( ( lc != NULL ) || frame_is_intra_only ( cm ) || ( lst_yv12 != NULL ) ) ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { vp9_zero_array ( cpi -> twopass . frame_mb_stats_buf , cm -> initial_mbs ) ; } # endif vpx_clear_system_state ( ) ; intra_factor = 0.0 ; brightness_factor = 0.0 ; neutral_count = 0.0 ; set_first_pass_params ( cpi ) ; vp9_set_quantizer ( cm , find_fp_qindex ( cm -> bit_depth ) ) ; if ( lc != NULL ) { twopass = & lc -> twopass ; cpi -> lst_fb_idx = cpi -> svc . spatial_layer_id ; cpi -> ref_frame_flags = VP9_LAST_FLAG ; if ( cpi -> svc . number_spatial_layers + cpi -> svc . spatial_layer_id < REF_FRAMES ) { cpi -> gld_fb_idx = cpi -> svc . number_spatial_layers + cpi -> svc . spatial_layer_id ; cpi -> ref_frame_flags |= VP9_GOLD_FLAG ; cpi -> refresh_golden_frame = ( lc -> current_video_frame_in_layer == 0 ) ; } else { cpi -> refresh_golden_frame = 0 ; } if ( lc -> current_video_frame_in_layer == 0 ) cpi -> ref_frame_flags = 0 ; vp9_scale_references ( cpi ) ; if ( cpi -> ref_frame_flags & VP9_LAST_FLAG ) { first_ref_buf = vp9_get_scaled_ref_frame ( cpi , LAST_FRAME ) ; if ( first_ref_buf == NULL ) first_ref_buf = get_ref_frame_buffer ( cpi , LAST_FRAME ) ; } if ( cpi -> ref_frame_flags & VP9_GOLD_FLAG ) { gld_yv12 = vp9_get_scaled_ref_frame ( cpi , GOLDEN_FRAME ) ; if ( gld_yv12 == NULL ) { gld_yv12 = get_ref_frame_buffer ( cpi , GOLDEN_FRAME ) ; } } else { gld_yv12 = NULL ; } set_ref_ptrs ( cm , xd , ( cpi -> ref_frame_flags & VP9_LAST_FLAG ) ? LAST_FRAME : NONE , ( cpi -> ref_frame_flags & VP9_GOLD_FLAG ) ? GOLDEN_FRAME : NONE ) ; cpi -> Source = vp9_scale_if_required ( cm , cpi -> un_scaled_source , & cpi -> scaled_source ) ; } vp9_setup_block_planes ( & x -> e_mbd , cm -> subsampling_x , cm -> subsampling_y ) ; vp9_setup_src_planes ( x , cpi -> Source , 0 , 0 ) ; vp9_setup_dst_planes ( xd -> plane , new_yv12 , 0 , 0 ) ; if ( ! frame_is_intra_only ( cm ) ) { vp9_setup_pre_planes ( xd , 0 , first_ref_buf , 0 , 0 , NULL ) ; } xd -> mi = cm -> mi_grid_visible ; xd -> mi [ 0 ] = cm -> mi <S2SV_ModEnd> ; vp9_frame_init_quantizer ( cpi <S2SV_ModStart> , 0 ) ; recon_y_stride = new_yv12 -> y_stride ; recon_uv_stride = new_yv12 -> uv_stride ; uv_mb_height = 16 >> ( new_yv12 -> y_height > new_yv12 -> uv_height ) ; <S2SV_ModStart> ++ mb_row ) { MV best_ref_mv = { 0 , 0 } <S2SV_ModEnd> ; xd -> up_available <S2SV_ModStart> ! mb_row ) ; <S2SV_ModEnd> const BLOCK_SIZE bsize = <S2SV_ModStart> , mb_col ) ; double log_intra ; int level_sample ; # if CONFIG_FP_MB_STATS const int mb_index = mb_row * cm -> mb_cols + mb_col ; # endif vpx_clear_system_state <S2SV_ModEnd> ( ) ; xd <S2SV_ModStart> -> mi_cols ) ; x -> skip_encode = 0 ; xd -> mi [ 0 ] -> mbmi . mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi . tx_size = use_dc_pred ? ( bsize >= BLOCK_16X16 ? TX_16X16 : TX_8X8 ) : TX_4X4 ; vp9_encode_intra_block_plane ( x , bsize , 0 ) ; this_error = vpx_get_mb_ss ( x -> plane [ 0 ] . src_diff ) ; if ( this_error < UL_INTRA_THRESH ) { ++ intra_skip_count ; } else if ( ( mb_col > 0 ) && ( image_data_start_row == INVALID_ROW ) ) { image_data_start_row = mb_row ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) { switch ( cm -> bit_depth ) { case VPX_BITS_8 : break ; case VPX_BITS_10 : this_error >>= 4 ; break ; case VPX_BITS_12 : this_error >>= 8 ; break ; default : assert ( 0 && "cm->bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>" "VPX_BITS_10<S2SV_blank>or<S2SV_blank>VPX_BITS_12" ) ; return ; } } # endif vpx_clear_system_state ( ) ; log_intra = log ( this_error + 1.0 ) ; if ( log_intra < 10.0 ) intra_factor += 1.0 + ( ( 10.0 - log_intra ) * 0.05 ) ; else intra_factor += 1.0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) level_sample = CONVERT_TO_SHORTPTR ( x -> plane [ 0 ] . src . buf ) [ 0 ] ; else level_sample = x -> plane [ 0 ] . src . buf [ 0 ] ; # else level_sample = x -> plane [ 0 ] . src . buf [ 0 ] ; # endif if ( ( level_sample < DARK_THRESH ) && ( log_intra < 9.0 ) ) brightness_factor += 1.0 + ( 0.01 * ( DARK_THRESH - level_sample ) ) ; else brightness_factor += 1.0 ; <S2SV_ModEnd> this_error += intrapenalty ; <S2SV_ModStart> int64_t ) this_error ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] = 0 ; } # endif <S2SV_ModStart> BORDER_MV_PIXELS_B16 ; if ( ( lc == NULL && <S2SV_ModStart> current_video_frame > 0 ) || ( lc != NULL && lc -> current_video_frame_in_layer > 0 ) ) <S2SV_ModStart> int tmp_err , motion_error , raw_motion_error ; MV mv = { 0 , 0 } , tmp_mv = { 0 , 0 } ; struct buf_2d unscaled_last_source_buf_2d <S2SV_ModEnd> ; xd -> plane <S2SV_ModStart> y_buffer + recon_yoffset ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { motion_error = highbd_get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & xd -> plane [ 0 ] . pre [ 0 ] , xd -> bd ) ; } else { motion_error = get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & xd -> plane [ 0 ] . pre [ 0 ] ) ; } # else motion_error = get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & xd -> plane [ 0 ] . pre [ 0 ] ) ; # endif unscaled_last_source_buf_2d . buf = cpi -> unscaled_last_source -> y_buffer + recon_yoffset ; unscaled_last_source_buf_2d . stride = cpi -> unscaled_last_source -> y_stride ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { raw_motion_error = highbd_get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & unscaled_last_source_buf_2d , xd -> bd ) ; } else { raw_motion_error = get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & unscaled_last_source_buf_2d ) ; } # else raw_motion_error = get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & unscaled_last_source_buf_2d ) ; # endif if ( raw_motion_error > 25 || lc != NULL ) { first_pass_motion_search ( cpi , x , & best_ref_mv , & mv , & motion_error ) ; if ( ! is_zero_mv ( & best_ref_mv ) ) { tmp_err = INT_MAX ; first_pass_motion_search ( cpi , x , & zero_mv , & tmp_mv , & tmp_err ) ; <S2SV_ModEnd> if ( tmp_err < <S2SV_ModStart> = tmp_err ; mv = tmp_mv ; } } if ( ( ( lc == NULL && <S2SV_ModEnd> cm -> current_video_frame > <S2SV_ModStart> -> current_video_frame > 1 ) || ( lc != NULL && lc -> current_video_frame_in_layer > 1 ) ) <S2SV_ModStart> y_buffer + recon_yoffset ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { gf_motion_error = highbd_get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & xd -> plane [ 0 ] . pre [ 0 ] , xd -> bd ) ; } else { gf_motion_error = get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & xd -> plane [ 0 ] . pre [ 0 ] ) ; } # else gf_motion_error = get_prediction_error ( bsize , & x -> plane [ 0 ] . src , & xd -> plane [ 0 ] . pre [ 0 ] ) ; # endif <S2SV_ModEnd> first_pass_motion_search ( cpi , <S2SV_ModStart> zero_mv , & tmp_mv <S2SV_ModEnd> , & gf_motion_error ) <S2SV_ModStart> & gf_motion_error ) ; <S2SV_ModEnd> if ( gf_motion_error < <S2SV_ModStart> += motion_error ; } } else { sr_coded_error += motion_error ; } best_ref_mv . row = 0 ; best_ref_mv . col = 0 ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] = 0 ; cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_DCINTRA_MASK ; cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_MOTION_ZERO_MASK ; if ( this_error > FPMB_ERROR_LARGE_TH ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_ERROR_LARGE_MASK ; } else if ( this_error < FPMB_ERROR_SMALL_TH ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_ERROR_SMALL_MASK ; } } # endif <S2SV_ModEnd> if ( motion_error <= <S2SV_ModStart> <= this_error ) { vpx_clear_system_state ( ) ; <S2SV_ModStart> * 10 ) && ( this_error < ( <S2SV_ModEnd> 2 * intrapenalty ) <S2SV_ModStart> 2 * intrapenalty ) ) ) { neutral_count += 1.0 ; } else if ( ( this_error > NCOUNT_INTRA_THRESH ) && ( this_error < ( NCOUNT_INTRA_FACTOR * motion_error ) ) ) { neutral_count += ( double ) motion_error / DOUBLE_DIVIDE_CHECK ( ( double ) this_error ) ; } mv <S2SV_ModEnd> . row *= 8 <S2SV_ModStart> 8 ; mv . <S2SV_ModEnd> col *= 8 ; <S2SV_ModStart> mv [ 0 ] . as_mv <S2SV_ModStart> sum_mvr += mv . <S2SV_ModEnd> row ; sum_mvr_abs += <S2SV_ModStart> abs ( mv . <S2SV_ModEnd> row ) ; sum_mvc <S2SV_ModStart> sum_mvc += mv . <S2SV_ModEnd> col ; sum_mvc_abs += <S2SV_ModStart> abs ( mv . <S2SV_ModEnd> col ) ; sum_mvrs <S2SV_ModStart> sum_mvrs += mv . row * mv <S2SV_ModEnd> . row ; sum_mvcs <S2SV_ModStart> sum_mvcs += mv . col * mv <S2SV_ModEnd> . col ; ++ <S2SV_ModStart> ++ intercount ; best_ref_mv = mv ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] = 0 ; cpi -> twopass . frame_mb_stats_buf [ mb_index ] &= ~ FPMB_DCINTRA_MASK ; cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_MOTION_ZERO_MASK ; if ( this_error > FPMB_ERROR_LARGE_TH ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_ERROR_LARGE_MASK ; } else if ( this_error < FPMB_ERROR_SMALL_TH ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_ERROR_SMALL_MASK ; } } # endif if ( ! is_zero_mv ( & mv ) <S2SV_ModEnd> ) { ++ mvcount <S2SV_ModStart> { ++ mvcount ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] &= ~ FPMB_MOTION_ZERO_MASK ; <S2SV_ModStart> if ( mv . as_mv . col > 0 && mv . as_mv . col >= abs ( mv . as_mv . row ) ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_MOTION_RIGHT_MASK ; } else if ( mv . as_mv . row < 0 && abs ( mv . as_mv . row ) >= abs ( mv . as_mv . col ) ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_MOTION_UP_MASK ; } else if ( mv . as_mv . col < 0 && abs ( mv . as_mv . col ) >= abs ( mv . as_mv . row ) ) { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_MOTION_LEFT_MASK ; } else { cpi -> twopass . frame_mb_stats_buf [ mb_index ] |= FPMB_MOTION_DOWN_MASK ; } } # endif if ( ! is_equal_mv ( & mv , & lastmv ) <S2SV_ModEnd> ) ++ new_mv_count ; <S2SV_ModStart> ) ++ new_mv_count ; lastmv = mv <S2SV_ModEnd> ; if ( mb_row <S2SV_ModStart> if ( mv . <S2SV_ModEnd> row > 0 ) <S2SV_ModStart> else if ( mv <S2SV_ModEnd> . row < 0 <S2SV_ModStart> if ( mv . <S2SV_ModEnd> row > 0 ) <S2SV_ModStart> else if ( mv <S2SV_ModEnd> . row < 0 <S2SV_ModStart> if ( mv . <S2SV_ModEnd> col > 0 ) <S2SV_ModStart> else if ( mv <S2SV_ModEnd> . col < 0 <S2SV_ModStart> if ( mv . <S2SV_ModEnd> col > 0 ) <S2SV_ModStart> else if ( mv <S2SV_ModEnd> . col < 0 <S2SV_ModStart> cm -> mb_cols ; vpx_clear_system_state ( ) ; } if ( ( image_data_start_row > cm -> mb_rows / 2 ) || ( image_data_start_row == INVALID_ROW ) ) { image_data_start_row = cm -> mb_rows / 2 ; } if ( image_data_start_row > 0 ) { intra_skip_count = MAX ( 0 , intra_skip_count - ( image_data_start_row * cm -> mb_cols * 2 ) ) ; } <S2SV_ModEnd> { FIRSTPASS_STATS fps ; <S2SV_ModStart> { FIRSTPASS_STATS fps ; const int num_mbs = ( cpi -> oxcf . resize_mode != RESIZE_NONE ) ? cpi -> initial_mbs : cpi -> common . MBs ; const double min_err = 200 * sqrt ( num_mbs ) ; intra_factor = intra_factor / ( double ) num_mbs ; brightness_factor = brightness_factor / ( double ) num_mbs ; fps . weight = intra_factor * brightness_factor ; fps . <S2SV_ModEnd> frame = cm -> <S2SV_ModStart> -> svc . spatial_layer_id ; fps . coded_error = ( double ) ( coded_error >> 8 ) + min_err ; fps . sr_coded_error = ( double ) ( sr_coded_error >> 8 ) + min_err <S2SV_ModStart> intra_error >> 8 ) + min_err <S2SV_ModEnd> ; fps . count <S2SV_ModStart> double ) intercount / num_mbs <S2SV_ModEnd> ; fps . pcnt_second_ref <S2SV_ModStart> double ) second_ref_count / num_mbs <S2SV_ModEnd> ; fps . pcnt_neutral <S2SV_ModStart> double ) neutral_count / num_mbs ; fps . intra_skip_pct = ( double ) intra_skip_count / num_mbs ; fps . inactive_zone_rows = ( double ) image_data_start_row ; fps . inactive_zone_cols = ( double ) 0 <S2SV_ModEnd> ; if ( mvcount <S2SV_ModStart> double ) sum_mvrs - ( ( double ) sum_mvr * sum_mvr <S2SV_ModEnd> / mvcount ) ) <S2SV_ModStart> double ) sum_mvcs - ( ( double ) sum_mvc * sum_mvc <S2SV_ModEnd> / mvcount ) ) <S2SV_ModStart> double ) mvcount / num_mbs <S2SV_ModEnd> ; } else { <S2SV_ModStart> ( double ) ( <S2SV_ModEnd> source -> ts_end - <S2SV_ModStart> source -> ts_end - <S2SV_ModEnd> source -> ts_start ) <S2SV_ModStart> & fps ) ; # if CONFIG_FP_MB_STATS if ( cpi -> use_fp_mb_stats ) { output_fpmb_stats ( twopass -> frame_mb_stats_buf , cm , cpi -> output_pkt_list ) ; } # endif <S2SV_ModStart> != NULL ) { ref_cnt_fb ( pool -> frame_bufs , & cm -> ref_frame_map [ cpi -> gld_fb_idx ] , cm -> ref_frame_map [ cpi -> lst_fb_idx ] <S2SV_ModEnd> ) ; } twopass <S2SV_ModStart> -> sr_update_lag ; } vpx_extend_frame_borders ( new_yv12 ) ; if ( lc != NULL <S2SV_ModEnd> ) { vp9_update_reference_frames ( <S2SV_ModStart> ; } else { ref_cnt_fb ( pool -> frame_bufs , & cm -> ref_frame_map [ cpi -> lst_fb_idx ] , cm -> new_fb_idx ) ; } <S2SV_ModEnd> if ( cm -> <S2SV_ModStart> current_video_frame == 0 && cpi -> gld_fb_idx != INVALID_IDX && lc == NULL ) { ref_cnt_fb ( pool -> frame_bufs , & cm -> ref_frame_map [ cpi -> gld_fb_idx ] , cm -> ref_frame_map [ cpi -> lst_fb_idx ] <S2SV_ModEnd> ) ; } if <S2SV_ModStart> cm -> current_video_frame ; if ( cpi -> use_svc ) vp9_inc_frame_in_layer ( cpi ) ;
<S2SV_ModStart> cpi -> svc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> oxcf ; const int is_two_pass_svc <S2SV_ModEnd> = ( svc -> <S2SV_ModStart> number_spatial_layers > 1 ) || <S2SV_ModEnd> ( svc -> number_temporal_layers <S2SV_ModStart> ( svc -> number_temporal_layers > 1 ) ; TWO_PASS * const twopass = is_two_pass_svc ? <S2SV_ModEnd> & svc -> layer_context <S2SV_ModStart> spatial_layer_id ] . twopass : & cpi -> twopass ; double frame_rate ; FIRSTPASS_STATS * stats ; <S2SV_ModEnd> zero_stats ( & twopass <S2SV_ModStart> stats_in_end ) return ; stats = & twopass -> total_stats ; * stats <S2SV_ModEnd> = * twopass -> <S2SV_ModStart> twopass -> total_left_stats = * stats <S2SV_ModEnd> ; frame_rate = 10000000.0 <S2SV_ModStart> frame_rate = 10000000.0 * stats -> count / stats -> <S2SV_ModEnd> duration ; if ( <S2SV_ModStart> duration ; if ( is_two_pass_svc <S2SV_ModEnd> ) { vp9_update_spatial_layer_framerate ( <S2SV_ModStart> ( int64_t ) ( stats -> <S2SV_ModEnd> duration * svc -> <S2SV_ModStart> ( int64_t ) ( stats -> <S2SV_ModEnd> duration * oxcf -> <S2SV_ModStart> 10000000.0 ) ; } <S2SV_ModEnd> twopass -> sr_update_lag = <S2SV_ModStart> = 1 ; { const double avg_error = stats -> coded_error / DOUBLE_DIVIDE_CHECK ( stats -> count ) ; const FIRSTPASS_STATS * s = twopass -> stats_in ; double modified_error_total = 0.0 ; twopass -> modified_error_min = ( avg_error * oxcf -> two_pass_vbrmin_section ) / 100 ; twopass -> modified_error_max = ( avg_error * oxcf -> two_pass_vbrmax_section ) / 100 ; while ( s < twopass -> stats_in_end ) { <S2SV_ModEnd> modified_error_total += calculate_modified_err ( <S2SV_ModStart> calculate_modified_err ( cpi , twopass , oxcf , s ) ; ++ s <S2SV_ModEnd> ; } twopass -> <S2SV_ModStart> twopass -> modified_error_left = modified_error_total ; } cpi -> rc . vbr_bits_off_target = 0 ; cpi -> rc . vbr_bits_off_target_fast = 0 ; cpi -> rc . rate_error_estimate = 0 ; twopass -> kf_zeromotion_pct = 100 ; twopass -> last_kfgroup_zeromotion_pct = 100 ; if ( oxcf -> resize_mode != RESIZE_NONE ) { vp9_init_subsampling ( cpi <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> cpi -> rc ; TWO_PASS <S2SV_ModEnd> * const twopass = <S2SV_ModStart> & cpi -> twopass ; GF_GROUP * const gf_group = & twopass -> gf_group <S2SV_ModStart> ; FIRSTPASS_STATS this_frame ; int target_rate ; LAYER_CONTEXT * const lc = is_two_pass_svc ( cpi ) ? & cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id ] : 0 ; if ( lc != NULL ) { frames_left = ( int ) ( twopass -> total_stats . count - lc -> current_video_frame_in_layer ) ; } else { frames_left = ( int ) ( twopass -> total_stats . count - cm -> current_video_frame ) ; } if ( ! twopass -> stats_in ) return ; if ( gf_group -> update_type [ gf_group -> index ] == ARF_UPDATE ) { int target_rate ; configure_buffer_updates ( cpi ) ; target_rate = gf_group -> bit_allocation [ gf_group -> index ] ; target_rate = vp9_rc_clamp_pframe_target_size ( cpi , target_rate ) ; rc -> base_frame_target = target_rate ; cm -> frame_type = INTER_FRAME ; if ( lc != NULL ) { if ( cpi -> svc . spatial_layer_id == 0 ) { lc -> is_key_frame = 0 ; } else { lc -> is_key_frame = cpi -> svc . layer_context [ 0 ] . is_key_frame ; if ( lc -> is_key_frame ) cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG ) ; } } if ( cpi -> sf . allow_partition_search_skip && cpi -> oxcf . pass == 2 && ( ! cpi -> use_svc || is_two_pass_svc ( cpi ) ) ) { cpi -> partition_search_skippable_frame = is_skippable_frame ( cpi ) ; } return ; } vpx_clear_system_state ( ) ; if ( cpi -> oxcf . rc_mode == VPX_Q ) { twopass -> active_worst_quality = cpi -> oxcf . cq_level ; } else if ( cm -> current_video_frame == 0 || ( lc != NULL && lc -> current_video_frame_in_layer == 0 ) ) { const int section_target_bandwidth = ( int ) ( twopass -> bits_left / frames_left ) ; const double section_length = twopass -> total_left_stats . count ; const double section_error = twopass -> total_left_stats . coded_error / section_length ; const double section_intra_skip = twopass -> total_left_stats . intra_skip_pct / section_length ; const double section_inactive_zone = ( twopass -> total_left_stats . inactive_zone_rows * 2 ) / ( ( double ) cm -> mb_rows * section_length ) ; const int tmp_q = get_twopass_worst_quality ( cpi , section_error , section_intra_skip + section_inactive_zone , section_target_bandwidth , DEFAULT_GRP_WEIGHT ) ; twopass -> active_worst_quality = tmp_q ; twopass -> baseline_active_worst_quality = tmp_q ; rc -> ni_av_qi = tmp_q ; rc -> last_q [ INTER_FRAME ] = tmp_q ; rc -> avg_q = vp9_convert_qindex_to_q ( tmp_q , cm -> bit_depth ) ; rc -> avg_frame_qindex [ INTER_FRAME ] = tmp_q ; rc -> last_q [ KEY_FRAME ] = ( tmp_q + cpi -> oxcf . best_allowed_q ) / 2 ; rc -> avg_frame_qindex [ KEY_FRAME ] = rc -> last_q [ KEY_FRAME ] ; } vp9_zero ( this_frame ) ; if ( EOF == input_stats ( twopass , & this_frame ) ) return ; if ( this_frame . intra_skip_pct >= FC_ANIMATION_THRESH ) twopass -> fr_content_type = FC_GRAPHICS_ANIMATION ; else twopass -> fr_content_type = FC_NORMAL ; if ( rc -> frames_to_key == 0 || ( cpi -> frame_flags & FRAMEFLAGS_KEY ) ) { FIRSTPASS_STATS this_frame_copy ; this_frame_copy = this_frame ; find_next_key_frame ( cpi , & this_frame ) ; this_frame = this_frame_copy ; } else { cm -> frame_type = INTER_FRAME ; } if ( lc != NULL ) { if ( <S2SV_ModEnd> cpi -> svc . <S2SV_ModStart> cpi -> svc . spatial_layer_id == 0 ) { lc -> is_key_frame = ( cm -> frame_type == KEY_FRAME ) ; if ( lc -> is_key_frame ) { cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG & ~ VP9_GOLD_FLAG & ~ VP9_ALT_FLAG ) ; lc -> frames_from_key_frame = 0 ; cpi -> svc . encode_intra_empty_frame = 1 ; } } else { cm -> frame_type = INTER_FRAME ; lc -> is_key_frame = <S2SV_ModEnd> cpi -> svc . <S2SV_ModStart> svc . layer_context [ 0 ] . is_key_frame ; if ( lc -> is_key_frame ) { cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG ) ; lc -> frames_from_key_frame = 0 ; } } } if ( rc -> frames_till_gf_update_due == 0 ) { define_gf_group ( cpi , & this_frame ) ; rc -> frames_till_gf_update_due = rc -> baseline_gf_interval ; if ( lc != NULL ) cpi -> refresh_golden_frame = 1 ; # if ARF_STATS_OUTPUT { FILE * fpfile ; fpfile = fopen ( "arf.stt" , "a" ) ; ++ arf_count ; fprintf ( fpfile , "%10d<S2SV_blank>%10ld<S2SV_blank>%10d<S2SV_blank>%10d<S2SV_blank>%10ld\\n" , cm -> current_video_frame , rc -> frames_till_gf_update_due , rc -> kf_boost , arf_count , rc -> gfu_boost ) ; fclose ( fpfile ) ; } # endif } configure_buffer_updates ( cpi ) ; if ( cpi -> sf . allow_partition_search_skip && cpi -> oxcf . pass == 2 && ( ! cpi -> use_svc || is_two_pass_svc ( cpi ) ) ) { cpi -> partition_search_skippable_frame = is_skippable_frame ( cpi ) ; } target_rate = gf_group -> bit_allocation [ gf_group -> index ] ; if ( cpi -> common . frame_type == KEY_FRAME ) target_rate = vp9_rc_clamp_iframe_target_size ( cpi , target_rate ) ; else target_rate = vp9_rc_clamp_pframe_target_size ( cpi , target_rate ) ; rc -> base_frame_target = target_rate ; { const int num_mbs = ( cpi -> oxcf . resize_mode != RESIZE_NONE ) ? cpi -> initial_mbs : cpi -> common . MBs ; twopass -> mb_av_energy = log ( ( ( this_frame . intra_error * 256.0 ) / num_mbs ) + 1.0 ) ; } <S2SV_ModEnd> subtract_stats ( & twopass
<S2SV_ModStart> * cpi ) { TWO_PASS * const twopass = & cpi -> twopass ; RATE_CONTROL * const rc = & cpi -> rc ; const int bits_used = rc -> base_frame_target ; rc -> vbr_bits_off_target += rc -> base_frame_target - rc -> projected_frame_size ; twopass -> bits_left = MAX ( twopass -> bits_left - bits_used , 0 ) ; if ( rc -> total_actual_bits ) { rc -> rate_error_estimate = ( int ) ( ( rc -> vbr_bits_off_target * 100 ) / rc -> total_actual_bits ) ; rc -> rate_error_estimate = clamp ( rc -> rate_error_estimate , - 100 , 100 ) ; } else { rc -> rate_error_estimate = 0 ; } <S2SV_ModEnd> if ( cpi -> <S2SV_ModStart> -> common . frame_type != KEY_FRAME && ! vp9_is_upper_layer_key_frame ( cpi ) ) { twopass -> <S2SV_ModEnd> kf_group_bits -= bits_used ; <S2SV_ModStart> kf_group_bits -= bits_used ; twopass -> last_kfgroup_zeromotion_pct = twopass -> kf_zeromotion_pct ; } twopass -> kf_group_bits = MAX ( twopass -> kf_group_bits <S2SV_ModEnd> , 0 ) ; <S2SV_ModStart> , 0 ) ; ++ twopass -> gf_group . index ; if ( ( cpi -> oxcf . rc_mode != VPX_Q ) && ( cpi -> twopass . gf_zeromotion_pct < VLOW_MOTION_THRESHOLD ) && ! cpi -> rc . is_src_frame_alt_ref ) { const int maxq_adj_limit = rc -> worst_quality - twopass -> active_worst_quality ; const int minq_adj_limit = ( cpi -> oxcf . rc_mode == VPX_CQ ? MINQ_ADJ_LIMIT_CQ : MINQ_ADJ_LIMIT ) ; if ( rc -> rate_error_estimate > cpi -> oxcf . under_shoot_pct ) { -- twopass -> extend_maxq ; if ( rc -> rolling_target_bits >= rc -> rolling_actual_bits ) ++ twopass -> extend_minq ; } else if ( rc -> rate_error_estimate < - cpi -> oxcf . over_shoot_pct ) { -- twopass -> extend_minq ; if ( rc -> rolling_target_bits < rc -> rolling_actual_bits ) ++ twopass -> extend_maxq ; } else { if ( rc -> projected_frame_size > ( 2 * rc -> base_frame_target ) && rc -> projected_frame_size > ( 2 * rc -> avg_frame_bandwidth ) ) ++ twopass -> extend_maxq ; if ( rc -> rolling_target_bits < rc -> rolling_actual_bits ) -- twopass -> extend_minq ; else if ( rc -> rolling_target_bits > rc -> rolling_actual_bits ) -- twopass -> extend_maxq ; } twopass -> extend_minq = clamp ( twopass -> extend_minq , 0 , minq_adj_limit ) ; twopass -> extend_maxq = clamp ( twopass -> extend_maxq , 0 , maxq_adj_limit ) ; if ( ! frame_is_kf_gf_arf ( cpi ) && ! cpi -> rc . is_src_frame_alt_ref ) { int fast_extra_thresh = rc -> base_frame_target / HIGH_UNDERSHOOT_RATIO ; if ( rc -> projected_frame_size < fast_extra_thresh ) { rc -> vbr_bits_off_target_fast += fast_extra_thresh - rc -> projected_frame_size ; rc -> vbr_bits_off_target_fast = MIN ( rc -> vbr_bits_off_target_fast , ( 4 * rc -> avg_frame_bandwidth ) ) ; if ( rc -> avg_frame_bandwidth ) { twopass -> extend_minq_fast = ( int ) ( rc -> vbr_bits_off_target_fast * 8 / rc -> avg_frame_bandwidth ) ; } twopass -> extend_minq_fast = MIN ( twopass -> extend_minq_fast , minq_adj_limit - twopass -> extend_minq ) ; } else if ( rc -> vbr_bits_off_target_fast ) { twopass -> extend_minq_fast = MIN ( twopass -> extend_minq_fast , minq_adj_limit - twopass -> extend_minq ) ; } else { twopass -> extend_minq_fast = 0 ; } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> { section -> frame = 0.0 ; section -> weight <S2SV_ModStart> ; section -> sr_coded_error <S2SV_ModEnd> = 0.0 ; section <S2SV_ModStart> ; section -> pcnt_neutral = 0.0 ; section -> intra_skip_pct = 0.0 ; section -> inactive_zone_rows = 0.0 ; section -> inactive_zone_cols
<S2SV_ModStart> ; i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx ->
<S2SV_ModStart> unsigned int subsampling_y , # if CONFIG_VP9_HIGHBITDEPTH int use_highbitdepth , # endif <S2SV_ModStart> ( ctx ) { const int legacy_byte_alignment = 0 ; <S2SV_ModStart> ++ ) if ( vpx_alloc_frame_buffer <S2SV_ModEnd> ( & ctx -> <S2SV_ModStart> subsampling_x , subsampling_y , # if CONFIG_VP9_HIGHBITDEPTH use_highbitdepth , # endif VP9_ENC_BORDER_IN_PIXELS , legacy_byte_alignment <S2SV_ModEnd> ) ) goto bail
<S2SV_ModStart> , int64_t ts_end , # if CONFIG_VP9_HIGHBITDEPTH int use_highbitdepth , # endif <S2SV_ModStart> 4 ; # endif int width = src -> y_crop_width ; int height = src -> y_crop_height ; int uv_width = src -> uv_crop_width ; int uv_height = src -> uv_crop_height ; int subsampling_x = src -> subsampling_x ; int subsampling_y = src -> subsampling_y ; int larger_dimensions , new_dimensions ; <S2SV_ModStart> -> write_idx ) ; new_dimensions = width != buf -> img . y_crop_width || height != buf -> img . y_crop_height || uv_width != buf -> img . uv_crop_width || uv_height != buf -> img . uv_crop_height ; larger_dimensions = width > buf -> img . y_width || height > buf -> img . y_height || uv_width > buf -> img . uv_width || uv_height > buf -> img . uv_height ; assert ( ! larger_dimensions || new_dimensions ) ; <S2SV_ModStart> if USE_PARTIAL_COPY if ( ! new_dimensions && <S2SV_ModStart> } } else { # endif if ( larger_dimensions ) { YV12_BUFFER_CONFIG new_img ; memset ( & new_img , 0 , sizeof ( new_img ) ) ; if ( vpx_alloc_frame_buffer ( & new_img , width , height , subsampling_x , subsampling_y , # if CONFIG_VP9_HIGHBITDEPTH use_highbitdepth , # endif VP9_ENC_BORDER_IN_PIXELS , 0 ) ) return 1 ; vpx_free_frame_buffer ( & buf -> img ) ; buf -> img = new_img ; } else if ( new_dimensions ) { buf -> img . y_crop_width = src -> y_crop_width ; buf -> img . y_crop_height = src -> y_crop_height ; buf -> img . uv_crop_width = src -> uv_crop_width ; buf -> img . uv_crop_height = src -> uv_crop_height ; buf -> img . subsampling_x = src -> subsampling_x ; buf -> img . subsampling_y = src -> subsampling_y ; } <S2SV_ModStart> -> img ) ; # if USE_PARTIAL_COPY } <S2SV_ModEnd> # endif buf ->
<S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> x -> e_mbd ; const MV_SPEED_FEATURES * const mv_sf = & cpi -> sf . mv ; const <S2SV_ModStart> MV ref_full ; int cost_list [ 5 ] ; int step_param = mv_sf -> reduce_first_step_size <S2SV_ModEnd> ; step_param = MIN <S2SV_ModStart> MIN ( step_param , MAX_MVSEARCH_STEPS - 2 <S2SV_ModEnd> ) ; vp9_set_mv_search_range ( <S2SV_ModStart> errorperbit , 0 , cond_cost_list ( cpi , cost_list ) , <S2SV_ModStart> v_fn_ptr , 0 , mv_sf -> subpel_iters_per_step , cond_cost_list ( cpi , cost_list ) , <S2SV_ModEnd> NULL , NULL , <S2SV_ModStart> distortion , & sse , NULL , 0 , 0 <S2SV_ModStart> = tmp_row_max ; return vpx_sad16x16 <S2SV_ModEnd> ( x -> plane <S2SV_ModStart> . dst . stride <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> * cpi , const MV * ref_mv , int_mv * <S2SV_ModEnd> dst_mv , int mb_row <S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> err , tmp_err ; MV tmp_mv ; err = vpx_sad16x16 <S2SV_ModEnd> ( x -> plane <S2SV_ModStart> 0 ] . stride <S2SV_ModEnd> ) ; dst_mv -> <S2SV_ModStart> do_16x16_motion_iteration ( cpi , ref_mv , & tmp_mv , mb_row , mb_col ) ; if ( tmp_err < err ) { err = tmp_err ; dst_mv -> as_mv = tmp_mv ; } if ( ref_mv -> row != 0 || ref_mv -> col != 0 ) { unsigned int tmp_err ; MV zero_ref_mv = { 0 , 0 } , tmp_mv ; tmp_err = do_16x16_motion_iteration ( cpi , & zero_ref_mv , & tmp_mv , mb_row , mb_col ) ; if ( tmp_err < err ) { dst_mv -> as_mv = tmp_mv <S2SV_ModEnd> ; err = tmp_err
<S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> err ; err = vpx_sad16x16 <S2SV_ModEnd> ( x -> plane <S2SV_ModStart> 0 ] . stride <S2SV_ModEnd> ) ; dst_mv ->
<S2SV_ModStart> VP9_COMP * cpi , PREDICTION_MODE <S2SV_ModEnd> * pbest_mode ) { <S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> x -> e_mbd ; PREDICTION_MODE <S2SV_ModEnd> best_mode = - 1 <S2SV_ModStart> vp9_predict_intra_block ( xd , <S2SV_ModEnd> 2 , TX_16X16 , <S2SV_ModStart> ) ; err = vpx_sad16x16 ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , xd -> plane [ 0 ] . dst . buf , xd -> plane [ 0 ] . dst . stride <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> gld_y_offset = 0 ; MV gld_top_mv = { 0 , 0 } ; MODE_INFO mi_local ; vp9_zero ( mi_local ) <S2SV_ModEnd> ; x -> mv_row_min <S2SV_ModStart> mb_row ++ ) { MV gld_left_mv = gld_top_mv <S2SV_ModEnd> ; int mb_y_in_offset = <S2SV_ModStart> int gld_y_in_offset = gld_y_offset <S2SV_ModEnd> ; x -> mv_col_min <S2SV_ModStart> , mb_col ) ; gld_left_mv <S2SV_ModEnd> = mb_stats -> ref <S2SV_ModStart> mb_stats -> ref [ GOLDEN_FRAME <S2SV_ModEnd> ] . m . <S2SV_ModStart> m . mv . as_mv ; if ( mb_col == 0 ) { gld_top_mv = gld_left_mv <S2SV_ModEnd> ; } xd ->
<S2SV_ModStart> YV12_BUFFER_CONFIG * golden_ref , const MV <S2SV_ModEnd> * prev_golden_ref_mv , YV12_BUFFER_CONFIG <S2SV_ModStart> = & cpi -> td .
<S2SV_ModStart> ( cpi , GOLDEN_FRAME ) ; assert ( golden_ref != NULL <S2SV_ModStart> [ i ] ; memset <S2SV_ModEnd> ( frame_stats -> mb_stats <S2SV_ModStart> Source ) ; } vpx_clear_system_state <S2SV_ModEnd> ( ) ; separate_arf_mbs
<S2SV_ModStart> static int get_max_filter_level ( const VP9_COMP * cpi ) { if ( cpi -> oxcf . pass == 2 <S2SV_ModEnd> ) { return cpi <S2SV_ModStart> : MAX_LOOP_FILTER ; } else { return MAX_LOOP_FILTER ; } }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const YV12_BUFFER_CONFIG <S2SV_ModStart> int partial_frame ) { const <S2SV_ModStart> cpi -> common ; const <S2SV_ModStart> cpi ) ; int filt_direction = 0 ; int64_t best_err ; int filt_best <S2SV_ModEnd> ; int filt_mid = <S2SV_ModStart> filt_mid / 4 ; int64_t <S2SV_ModEnd> ss_err [ MAX_LOOP_FILTER + <S2SV_ModStart> + 1 ] ; memset <S2SV_ModEnd> ( ss_err , 0xFF <S2SV_ModStart> , min_filter_level ) ; int64_t <S2SV_ModEnd> bias = ( best_err <S2SV_ModStart> * filter_step ; if ( ( cpi -> oxcf . pass == 2 ) && <S2SV_ModStart> section_intra_rating < 20 ) ) bias = ( <S2SV_ModEnd> bias * cpi -> <S2SV_ModStart> -> twopass . section_intra_rating ) <S2SV_ModStart> < 0 ) { ss_err [ filt_low ] <S2SV_ModEnd> = try_filter_frame ( sd <S2SV_ModStart> , partial_frame ) ; } if ( ( ss_err [ filt_low ] <S2SV_ModEnd> - bias ) < <S2SV_ModStart> ) { if ( ss_err [ filt_low ] < best_err ) best_err = ss_err [ filt_low ] <S2SV_ModEnd> ; filt_best = filt_low <S2SV_ModStart> < 0 ) { ss_err [ filt_high ] <S2SV_ModEnd> = try_filter_frame ( sd <S2SV_ModStart> , partial_frame ) ; } if ( ss_err [ filt_high ] <S2SV_ModEnd> < ( best_err - <S2SV_ModStart> ) { best_err = ss_err [ filt_high ] <S2SV_ModEnd> ; filt_best = filt_high <S2SV_ModStart> filt_best ; } } return <S2SV_ModEnd> filt_best ; } <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> try_filter_frame ( const YV12_BUFFER_CONFIG <S2SV_ModStart> cpi -> common ; int64_t filt_err ; if ( cpi -> num_workers > 1 ) vp9_loop_filter_frame_mt ( cm -> frame_to_show , cm , cpi -> td . mb . e_mbd . plane , filt_level , 1 , partial_frame , cpi -> workers , cpi -> num_workers , & cpi -> lf_row_sync ) ; else vp9_loop_filter_frame ( cm -> frame_to_show , <S2SV_ModEnd> cm , & cpi <S2SV_ModStart> , & cpi -> td . <S2SV_ModStart> , partial_frame ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) { filt_err = vp9_highbd_get_y_sse ( sd , cm -> frame_to_show ) ; } else { <S2SV_ModStart> -> frame_to_show ) ; } # else filt_err = vp9_get_y_sse ( sd , cm -> frame_to_show ) ; # endif
<S2SV_ModStart> if ( method == LPF_PICK_MINIMAL_LPF && lf -> filter_level ) { lf -> filter_level = 0 ; } else if ( method >= <S2SV_ModStart> -> base_qindex , 0 , cm -> bit_depth ) ; # if CONFIG_VP9_HIGHBITDEPTH int filt_guess ; switch ( cm -> bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> filt_guess = ROUND_POWER_OF_TWO ( <S2SV_ModStart> , 18 ) ; break ; case VPX_BITS_10 : filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 4060632 , 20 ) ; break ; case VPX_BITS_12 : filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 16242526 , 22 ) ; break ; default : assert ( 0 && "bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>" "or<S2SV_blank>VPX_BITS_12" ) ; return ; } # else int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158 , 18 ) ; # endif <S2SV_ModStart> ; } else { lf -> filter_level =
<S2SV_ModStart> , int64_t * out_dist_sum , unsigned int * var_y , unsigned int * sse_y <S2SV_ModStart> [ 0 ] ; const int64_t dc_thr = p -> quant_thred [ 0 ] >> 6 ; const int64_t ac_thr = p -> quant_thred [ 1 ] >> 6 ; const uint32_t dc_quant = pd -> dequant [ 0 ] ; const uint32_t ac_quant = pd -> dequant [ 1 ] ; unsigned <S2SV_ModStart> & sse ) ; int skip_dc = 0 ; * var_y = var ; * sse_y = sse ; if ( cpi -> common . tx_mode == TX_MODE_SELECT ) { if ( sse > ( var << 2 ) ) xd -> mi [ 0 ] -> mbmi . tx_size = MIN ( max_txsize_lookup [ bsize ] , tx_mode_to_biggest_tx_size [ cpi -> common . tx_mode ] ) ; else xd -> mi [ 0 ] -> mbmi . tx_size = TX_8X8 ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cyclic_refresh_segment_id_boosted ( xd -> mi [ 0 ] -> mbmi . segment_id ) ) xd -> mi [ 0 ] -> mbmi . tx_size = TX_8X8 ; else if ( xd -> mi [ 0 ] -> mbmi . tx_size > TX_16X16 ) xd -> mi [ 0 ] -> mbmi . tx_size = TX_16X16 ; } else { xd -> mi [ 0 ] -> mbmi . tx_size = MIN ( max_txsize_lookup [ bsize ] , tx_mode_to_biggest_tx_size [ cpi -> common . tx_mode ] ) ; } { const BLOCK_SIZE unit_size = txsize_to_bsize [ xd -> mi [ 0 ] -> mbmi . tx_size ] ; const unsigned int num_blk_log2 = ( b_width_log2_lookup [ bsize ] - b_width_log2_lookup [ unit_size ] ) + ( b_height_log2_lookup [ bsize ] - b_height_log2_lookup [ unit_size ] ) ; const unsigned int sse_tx = sse >> num_blk_log2 ; const unsigned int var_tx = var >> num_blk_log2 ; x -> skip_txfm [ 0 ] = SKIP_TXFM_NONE ; if ( var_tx < ac_thr || var == 0 ) { x -> skip_txfm [ 0 ] = SKIP_TXFM_AC_ONLY ; if ( sse_tx - var_tx < dc_thr || sse == var ) x -> skip_txfm [ 0 ] = SKIP_TXFM_AC_DC ; } else { if ( sse_tx - var_tx < dc_thr || sse == var ) skip_dc = 1 ; } } if ( x -> skip_txfm [ 0 ] == SKIP_TXFM_AC_DC ) { * out_rate_sum = 0 ; * out_dist_sum = sse << 4 ; return ; } if ( ! skip_dc ) { # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , dc_quant >> ( xd -> bd - 5 ) , & rate , & dist ) ; } else { vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , dc_quant >> 3 , & rate , & dist ) ; } # else vp9_model_rd_from_var_lapndz ( sse - var , num_pels_log2_lookup [ bsize ] , dc_quant >> 3 , & rate , & dist ) ; # endif } if ( ! skip_dc ) { * out_rate_sum = rate >> 1 <S2SV_ModEnd> ; * out_dist_sum = <S2SV_ModStart> << 3 ; } else { * out_rate_sum = 0 ; * out_dist_sum = ( sse - var ) << 4 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , ac_quant >> ( xd -> bd - 5 ) , & rate , & dist ) ; } else { vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , ac_quant >> 3 , & rate , & dist ) ; } # else vp9_model_rd_from_var_lapndz ( var , num_pels_log2_lookup [ bsize ] , ac_quant >> 3 , & rate , & dist ) ; # endif * out_rate_sum += rate ; * out_dist_sum += dist << 4 ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_pick_inter_mode ( VP9_COMP * <S2SV_ModStart> MACROBLOCK * x , TileDataEnc * tile_data , int mi_row , int mi_col , RD_COST * rd_cost , BLOCK_SIZE bsize , PICK_MODE_CONTEXT * ctx ) { VP9_COMMON * const cm = & cpi -> common ; SPEED_FEATURES * const sf = & cpi -> sf ; TileInfo * const tile_info = & tile_data -> tile_info ; MACROBLOCKD * const <S2SV_ModEnd> xd = & x <S2SV_ModStart> e_mbd ; MB_MODE_INFO * const <S2SV_ModStart> 0 ] -> mbmi <S2SV_ModEnd> ; struct macroblockd_plane * <S2SV_ModStart> [ 0 ] ; PREDICTION_MODE <S2SV_ModEnd> best_mode = ZEROMV ; <S2SV_ModStart> , best_ref_frame = LAST_FRAME ; MV_REFERENCE_FRAME usable_ref_frame ; TX_SIZE best_tx_size = TX_SIZES <S2SV_ModStart> , VP9_ALT_FLAG } ; RD_COST this_rdc , best_rdc ; uint8_t skip_txfm = SKIP_TXFM_NONE , best_mode_skip_txfm = SKIP_TXFM_NONE ; unsigned int var_y = UINT_MAX ; unsigned int sse_y = UINT_MAX ; const int reduction_fac = ( bsize <= BLOCK_16X16 ) ? ( ( bsize <= BLOCK_8X8 ) ? 4 : 2 ) : 0 ; const int intra_cost_penalty = vp9_get_intra_cost_penalty ( <S2SV_ModEnd> cm -> base_qindex , <S2SV_ModStart> , cm -> y_dc_delta_q , cm -> bit_depth ) >> reduction_fac <S2SV_ModEnd> ; const int64_t inter_mode_thresh <S2SV_ModStart> intra_cost_penalty , 0 ) <S2SV_ModEnd> ; const int * <S2SV_ModStart> rd_threshes = cpi -> rd . threshes [ mbmi -> <S2SV_ModEnd> segment_id ] [ bsize <S2SV_ModStart> * const rd_thresh_freq_fact = tile_data -> thresh_freq_fact [ bsize ] ; INTERP_FILTER filter_ref ; const int bsl = mi_width_log2_lookup [ bsize ] ; const int pred_filter_search = cm -> <S2SV_ModEnd> interp_filter == SWITCHABLE ? <S2SV_ModStart> interp_filter == SWITCHABLE ? ( ( ( mi_row + mi_col ) >> bsl ) + get_chessboard_index ( cm -> current_video_frame ) ) & 0x1 : 0 ; int const_motion [ MAX_REF_FRAMES ] = { 0 } ; const int bh = num_4x4_blocks_high_lookup [ bsize ] << 2 ; const int bw = num_4x4_blocks_wide_lookup [ bsize ] << 2 ; PRED_BUFFER tmp [ 4 ] ; DECLARE_ALIGNED ( 16 , uint8_t , pred_buf [ 3 * 64 * 64 ] ) ; # if CONFIG_VP9_HIGHBITDEPTH DECLARE_ALIGNED ( 16 , uint16_t , pred_buf_16 [ 3 * 64 * 64 ] ) ; # endif struct buf_2d orig_dst = pd -> dst ; PRED_BUFFER * best_pred = NULL ; PRED_BUFFER * this_mode_pred = NULL ; const int pixels_in_block = bh * bw ; int reuse_inter_pred = cpi -> sf . reuse_inter_pred_sby && ctx -> pred_pixel_ready ; int ref_frame_skip_mask = 0 ; int idx ; int best_pred_sad = INT_MAX ; int best_early_term = 0 ; int ref_frame_cost [ MAX_REF_FRAMES ] ; init_ref_frame_cost ( cm , xd , ref_frame_cost ) ; if ( reuse_inter_pred ) { int i ; for ( i = 0 ; i < 3 ; i ++ ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) tmp [ i ] . data = CONVERT_TO_BYTEPTR ( & pred_buf_16 [ pixels_in_block * i ] ) ; else tmp [ i ] . data = & pred_buf [ pixels_in_block * i ] ; # else tmp [ i ] . data = & pred_buf [ pixels_in_block * i ] ; # endif tmp [ i ] . stride = bw ; tmp [ i ] . in_use = 0 ; } tmp [ 3 ] . data = pd -> dst . buf ; tmp [ 3 ] . stride = pd -> dst . stride ; tmp [ 3 ] . in_use = 0 ; } x -> skip_encode = cpi -> sf . skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ; x <S2SV_ModEnd> -> skip = 0 <S2SV_ModStart> skip = 0 ; <S2SV_ModEnd> if ( xd -> <S2SV_ModStart> mbmi . interp_filter ; else filter_ref = cm -> interp_filter ; vp9_rd_cost_reset ( & best_rdc ) ; vp9_rd_cost_reset ( rd_cost ) ; mbmi -> sb_type = bsize ; mbmi -> ref_frame [ 0 ] = NONE ; mbmi -> ref_frame [ 1 ] = NONE ; mbmi -> tx_size = MIN ( max_txsize_lookup [ bsize ] , tx_mode_to_biggest_tx_size [ cm -> tx_mode ] ) ; # if CONFIG_VP9_TEMPORAL_DENOISING vp9_denoiser_reset_frame_stats ( ctx ) ; # endif if ( cpi -> rc . frames_since_golden == 0 && ! cpi -> use_svc ) { usable_ref_frame = LAST_FRAME ; } else { usable_ref_frame = GOLDEN_FRAME ; } <S2SV_ModStart> LAST_FRAME ; ref_frame <= usable_ref_frame <S2SV_ModEnd> ; ++ ref_frame ) <S2SV_ModStart> ++ ref_frame ) { const YV12_BUFFER_CONFIG * yv12 = get_ref_frame_buffer ( cpi , ref_frame ) ; x -> pred_mv_sad [ ref_frame ] = INT_MAX ; frame_mv [ NEWMV ] [ ref_frame ] . as_int = INVALID_MV ; frame_mv [ ZEROMV ] [ ref_frame ] . as_int = 0 ; if ( ( cpi -> ref_frame_flags & flag_list [ ref_frame ] ) && ( yv12 != NULL ) ) { int_mv * const candidates = x -> mbmi_ext -> ref_mvs [ ref_frame ] ; const struct scale_factors * const sf = & cm -> frame_refs [ ref_frame - 1 ] . sf ; vp9_setup_pred_block ( xd , yv12_mb [ ref_frame ] , yv12 , mi_row , mi_col , sf , sf ) ; if ( cm -> use_prev_frame_mvs ) vp9_find_mv_refs ( cm , xd , xd -> mi [ 0 ] , ref_frame , candidates , mi_row , mi_col , NULL , NULL , x -> mbmi_ext -> mode_context ) ; else const_motion [ ref_frame ] = mv_refs_rt ( cm , x , xd , tile_info , xd -> mi [ 0 ] , ref_frame , candidates , mi_row , mi_col ) ; vp9_find_best_ref_mvs ( xd , cm -> allow_high_precision_mv , candidates , & frame_mv [ NEARESTMV ] [ ref_frame ] , & frame_mv [ NEARMV ] [ ref_frame ] ) ; if ( ! vp9_is_scaled ( sf ) && bsize >= BLOCK_8X8 ) vp9_mv_pred ( cpi , x , yv12_mb [ ref_frame ] [ 0 ] . buf , yv12 -> y_stride , ref_frame , bsize ) ; } else { ref_frame_skip_mask |= ( 1 << ref_frame ) ; } } for ( idx = 0 ; idx < RT_INTER_MODES ; ++ idx ) { int rate_mv = 0 ; int mode_rd_thresh ; int mode_index ; int i ; int64_t this_sse ; int is_skippable ; int this_early_term = 0 ; PREDICTION_MODE this_mode = ref_mode_set [ idx ] . pred_mode ; if ( cpi -> use_svc ) this_mode = ref_mode_set_svc [ idx ] . pred_mode ; if ( ! ( cpi -> sf . inter_mode_mask [ bsize ] & ( 1 << this_mode ) ) ) continue ; ref_frame = ref_mode_set [ idx ] . ref_frame ; if ( cpi -> use_svc ) ref_frame = ref_mode_set_svc [ idx ] . ref_frame ; if ( ! <S2SV_ModEnd> ( cpi -> ref_frame_flags <S2SV_ModStart> ) ) continue ; if ( const_motion [ ref_frame ] && this_mode == NEARMV ) continue ; i = <S2SV_ModEnd> ( ref_frame == LAST_FRAME <S2SV_ModStart> ref_frame == LAST_FRAME ) ? GOLDEN_FRAME : LAST_FRAME ; if ( ( cpi -> ref_frame_flags & flag_list [ i ] ) && sf -> reference_masking ) if ( x -> pred_mv_sad [ ref_frame ] > ( x -> pred_mv_sad [ i ] << 1 ) ) ref_frame_skip_mask |= ( 1 << ref_frame ) ; if ( ref_frame_skip_mask & ( 1 << ref_frame ) ) continue ; for ( i = 0 ; i < MAX_MB_PLANE ; i ++ ) xd -> plane [ i ] . pre [ 0 ] = yv12_mb [ ref_frame ] [ i ] ; mbmi -> ref_frame [ 0 ] = ref_frame ; set_ref_ptrs ( cm , xd , ref_frame , NONE ) ; mode_index = mode_idx [ ref_frame ] [ <S2SV_ModEnd> INTER_OFFSET ( this_mode ) <S2SV_ModStart> INTER_OFFSET ( this_mode ) ] ; mode_rd_thresh = best_mode_skip_txfm ? rd_threshes [ mode_index ] << 1 : rd_threshes [ mode_index ] ; if ( rd_less_than_thresh ( best_rdc . rdcost , mode_rd_thresh , rd_thresh_freq_fact [ mode_index ] ) <S2SV_ModEnd> ) continue ; if <S2SV_ModStart> == NEWMV ) { if ( ref_frame > LAST_FRAME && ! cpi -> use_svc ) { int tmp_sad ; int dis , cost_list [ 5 ] ; if ( bsize < BLOCK_16X16 ) continue ; tmp_sad = vp9_int_pro_motion_estimation ( cpi , x , bsize , mi_row , mi_col ) ; if ( tmp_sad > x -> pred_mv_sad [ LAST_FRAME ] ) continue ; if ( tmp_sad + ( num_pels_log2_lookup [ bsize ] << 4 ) > best_pred_sad ) continue ; frame_mv [ NEWMV ] [ ref_frame ] . as_int = mbmi -> mv [ 0 ] . as_int ; rate_mv = vp9_mv_bit_cost ( & frame_mv [ NEWMV ] [ ref_frame ] . as_mv , & x -> mbmi_ext -> ref_mvs [ ref_frame ] [ 0 ] . as_mv , x -> nmvjointcost , x -> mvcost , MV_COST_WEIGHT ) ; frame_mv [ NEWMV ] [ ref_frame ] . as_mv . row >>= 3 ; frame_mv [ NEWMV ] [ ref_frame ] . as_mv . col >>= 3 ; cpi -> find_fractional_mv_step ( x , & frame_mv [ NEWMV ] [ ref_frame ] . as_mv , & x -> mbmi_ext -> ref_mvs [ ref_frame ] [ 0 ] . as_mv , cpi -> common . allow_high_precision_mv , x -> errorperbit , & cpi -> fn_ptr [ bsize ] , cpi -> sf . mv . subpel_force_stop , cpi -> sf . mv . subpel_iters_per_step , cond_cost_list ( cpi , cost_list ) , x -> nmvjointcost , x -> mvcost , & dis , & x -> pred_sse [ ref_frame ] , NULL , 0 , 0 ) ; } else if ( ! combined_motion_search ( cpi , x , bsize , mi_row , mi_col , & frame_mv [ NEWMV ] [ ref_frame ] , & rate_mv , best_rdc . rdcost ) ) { continue ; } } if ( this_mode == NEWMV && ref_frame == LAST_FRAME && frame_mv [ NEWMV ] [ LAST_FRAME ] . as_int != INVALID_MV ) { const int pre_stride = xd -> plane [ 0 ] . pre [ 0 ] . stride ; const uint8_t * const pre_buf = xd -> plane [ 0 ] . pre [ 0 ] . buf + ( frame_mv [ NEWMV ] [ LAST_FRAME ] . as_mv . row >> 3 ) * pre_stride + ( frame_mv [ NEWMV ] [ LAST_FRAME ] . as_mv . col >> 3 ) ; best_pred_sad = cpi -> fn_ptr [ bsize ] . sdf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , pre_buf , pre_stride ) ; x -> pred_mv_sad [ LAST_FRAME ] = best_pred_sad ; } if ( cpi -> use_svc ) { if ( this_mode == NEWMV && ref_frame == GOLDEN_FRAME && <S2SV_ModEnd> frame_mv [ NEWMV ] <S2SV_ModStart> [ NEWMV ] [ GOLDEN_FRAME ] . as_int != INVALID_MV ) { const int pre_stride = xd -> plane [ 0 ] . pre [ 0 ] . stride ; const uint8_t * const pre_buf = xd -> plane [ 0 ] . pre [ 0 ] . buf + <S2SV_ModEnd> ( frame_mv [ NEWMV <S2SV_ModStart> [ NEWMV ] [ GOLDEN_FRAME ] . as_mv . row >> 3 ) * pre_stride + ( frame_mv [ NEWMV ] [ GOLDEN_FRAME ] . as_mv . col >> 3 ) ; best_pred_sad = cpi -> fn_ptr [ bsize ] . sdf ( x -> plane [ 0 ] . src . buf , x -> plane [ 0 ] . src . stride , pre_buf , pre_stride ) ; x -> pred_mv_sad [ GOLDEN_FRAME ] = best_pred_sad ; } <S2SV_ModEnd> } if ( this_mode <S2SV_ModStart> ( this_mode != NEARESTMV && <S2SV_ModEnd> frame_mv [ this_mode ] <S2SV_ModStart> ] . as_int ; if ( reuse_inter_pred ) { if ( ! this_mode_pred ) { this_mode_pred = & tmp [ 3 ] ; } else { this_mode_pred = & tmp [ get_pred_buffer ( tmp , 3 ) ] ; pd -> dst . buf = this_mode_pred -> data ; pd -> dst . stride = bw ; } } <S2SV_ModStart> == SWITCHABLE ) && pred_filter_search && ( ref_frame == LAST_FRAME || ( ref_frame == GOLDEN_FRAME && cpi -> use_svc ) ) && ( <S2SV_ModStart> . as_mv . row | mbmi -> mv [ 0 ] . as_mv . col ) <S2SV_ModStart> 0x07 ) != 0 ) ) { <S2SV_ModEnd> int pf_rate [ 3 <S2SV_ModStart> [ 3 ] ; unsigned int pf_var [ 3 ] ; unsigned int pf_sse [ 3 ] ; TX_SIZE pf_tx_size [ 3 ] ; int64_t best_cost = INT64_MAX ; INTERP_FILTER best_filter = SWITCHABLE , filter ; PRED_BUFFER * current_pred = this_mode_pred ; for ( filter = EIGHTTAP ; filter <= EIGHTTAP_SMOOTH ; ++ filter ) { int64_t cost ; <S2SV_ModStart> mbmi -> interp_filter = filter <S2SV_ModEnd> ; vp9_build_inter_predictors_sby ( xd <S2SV_ModStart> , & pf_rate [ filter ] , & pf_dist [ filter ] , & pf_var [ filter ] , & pf_sse [ filter ] ) ; pf_rate [ filter ] += vp9_get_switchable_rate ( cpi , xd ) ; cost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , pf_rate [ filter ] , pf_dist [ filter ] ) ; pf_tx_size [ filter ] = mbmi -> tx_size ; if ( cost < best_cost ) { best_filter = filter ; best_cost = cost ; skip_txfm = x -> skip_txfm [ 0 ] ; if ( reuse_inter_pred ) { if ( this_mode_pred != current_pred ) { free_pred_buffer ( this_mode_pred ) ; this_mode_pred = current_pred ; } if ( filter < EIGHTTAP_SHARP ) { current_pred = & tmp [ get_pred_buffer ( tmp , 3 ) ] ; pd -> dst . buf = current_pred -> data ; pd -> dst . stride = bw ; } } } } if ( reuse_inter_pred && this_mode_pred != current_pred ) free_pred_buffer ( current_pred ) ; mbmi -> interp_filter = best_filter ; mbmi -> tx_size = pf_tx_size [ best_filter ] ; this_rdc . rate = pf_rate [ best_filter ] ; this_rdc . dist = pf_dist [ best_filter ] ; var_y = pf_var [ best_filter ] ; sse_y = pf_sse [ best_filter ] ; x -> skip_txfm [ 0 ] = skip_txfm ; if ( reuse_inter_pred ) { pd -> dst . buf = this_mode_pred -> data ; pd -> dst . stride = this_mode_pred -> stride ; } <S2SV_ModEnd> } else { mbmi <S2SV_ModStart> , bsize ) ; if ( bsize > BLOCK_32X32 && ! cyclic_refresh_segment_id_boosted ( xd -> mi [ 0 ] -> mbmi . segment_id ) && cm -> base_qindex ) { model_rd_for_sb_y_large ( cpi , bsize , x , xd , & this_rdc . rate , & this_rdc . dist , & var_y , & sse_y , mi_row , mi_col , & this_early_term ) ; } else { <S2SV_ModStart> , xd , & this_rdc . rate , & this_rdc . dist , & var_y , & sse_y ) ; } } if ( ! this_early_term ) { this_sse = ( int64_t ) sse_y ; block_yrd ( cpi , x , & this_rdc . rate , & this_rdc . dist , & is_skippable , & this_sse , 0 , bsize , MIN ( mbmi -> tx_size , TX_16X16 ) ) ; x -> skip_txfm [ 0 ] = is_skippable ; if ( is_skippable ) { this_rdc . rate = vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 1 ) ; } else { if ( RDCOST ( x -> rdmult , x -> rddiv , this_rdc . rate , this_rdc . dist ) < RDCOST ( x -> rdmult , x -> rddiv , 0 , this_sse ) ) { this_rdc . rate += vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 0 ) ; } else { this_rdc . rate = vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 1 ) ; this_rdc . dist = this_sse ; x -> skip_txfm [ 0 ] = SKIP_TXFM_AC_DC ; } } if ( cm -> interp_filter == SWITCHABLE ) { if ( ( mbmi -> mv [ 0 ] . as_mv . row | mbmi -> mv [ 0 ] . as_mv . col ) & 0x07 ) this_rdc . rate += vp9_get_switchable_rate ( cpi , xd ) ; } } else { this_rdc . rate += cm -> interp_filter == SWITCHABLE ? vp9_get_switchable_rate ( cpi , xd ) : 0 ; this_rdc . rate += vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 1 ) ; } if ( x -> color_sensitivity [ 0 ] || x -> color_sensitivity [ 1 ] ) { int uv_rate = 0 ; int64_t uv_dist = 0 ; if ( x -> color_sensitivity [ 0 ] ) vp9_build_inter_predictors_sbp ( xd , mi_row , mi_col , bsize , 1 ) ; if ( x -> color_sensitivity [ 1 ] ) vp9_build_inter_predictors_sbp ( xd , mi_row , mi_col , bsize , 2 ) ; model_rd_for_sb_uv ( cpi , bsize , x , xd , & uv_rate , & uv_dist , & var_y , & sse_y ) ; this_rdc . rate += uv_rate ; this_rdc . dist += uv_dist ; } this_rdc . <S2SV_ModEnd> rate += rate_mv ; <S2SV_ModStart> rate += rate_mv ; this_rdc . rate += cpi -> inter_mode_cost [ x -> mbmi_ext -> mode_context [ ref_frame ] ] [ INTER_OFFSET ( this_mode ) ] ; this_rdc . rate += ref_frame_cost [ ref_frame ] ; this_rdc . rdcost = RDCOST ( x -> rdmult , x -> rddiv , this_rdc . rate , this_rdc . dist ) ; if ( cpi -> allow_encode_breakout ) { encode_breakout_test ( cpi , x , bsize , mi_row , mi_col , ref_frame , this_mode , var_y , sse_y , yv12_mb , & this_rdc . rate , & this_rdc . dist ) ; if ( x -> skip ) { this_rdc . rate += rate_mv ; this_rdc . rdcost = RDCOST ( x -> rdmult , x -> rddiv , this_rdc . rate , this_rdc . dist ) ; } } # if CONFIG_VP9_TEMPORAL_DENOISING if ( cpi -> oxcf . noise_sensitivity > 0 ) vp9_denoiser_update_frame_stats ( mbmi , sse_y , this_mode , ctx ) ; # else ( void ) ctx ; # endif if ( this_rdc . rdcost < best_rdc . rdcost || x -> skip ) { best_rdc = this_rdc <S2SV_ModEnd> ; best_mode = this_mode <S2SV_ModStart> mbmi -> interp_filter ; best_tx_size = mbmi -> tx_size ; <S2SV_ModStart> best_ref_frame = ref_frame ; best_mode_skip_txfm = x -> skip_txfm [ 0 ] ; best_early_term = this_early_term ; if ( reuse_inter_pred ) { free_pred_buffer ( best_pred ) ; best_pred = this_mode_pred ; } } else { if ( reuse_inter_pred ) free_pred_buffer ( this_mode_pred ) ; } if ( x -> skip ) break ; if ( best_early_term && idx > 0 ) { x -> skip = 1 ; break ; <S2SV_ModEnd> } } mbmi -> <S2SV_ModStart> best_pred_filter ; mbmi -> tx_size = best_tx_size ; mbmi -> <S2SV_ModStart> ] . as_int ; x -> skip_txfm [ 0 ] = best_mode_skip_txfm ; if ( best_rdc . rdcost == INT64_MAX || ( ! x -> skip && best_rdc . rdcost > inter_mode_thresh && bsize <= cpi -> sf . max_intra_bsize ) ) { struct estimate_block_intra_args args = { cpi , x , DC_PRED , 0 , 0 } ; const TX_SIZE intra_tx_size = MIN ( max_txsize_lookup [ bsize ] , tx_mode_to_biggest_tx_size [ cpi -> common . tx_mode ] ) ; int i ; TX_SIZE best_intra_tx_size = TX_SIZES ; if ( reuse_inter_pred && best_pred != NULL ) { if ( best_pred -> data == orig_dst . buf ) { this_mode_pred = & tmp [ get_pred_buffer ( tmp , 3 ) ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) vpx_highbd_convolve_copy ( best_pred -> data , best_pred -> stride , this_mode_pred -> data , this_mode_pred -> stride , NULL , 0 , NULL , 0 , bw , bh , xd -> bd ) ; else vpx_convolve_copy ( best_pred -> data , best_pred -> stride , this_mode_pred -> data , this_mode_pred -> stride , NULL , 0 , NULL , 0 , bw , bh ) ; # else vpx_convolve_copy ( best_pred -> data , best_pred -> stride , this_mode_pred -> data , this_mode_pred -> stride , NULL , 0 , NULL , 0 , bw , bh ) ; # endif best_pred = this_mode_pred ; } } pd -> dst = orig_dst ; for ( i = 0 ; i < 4 ; ++ i ) { const PREDICTION_MODE this_mode = intra_mode_list [ i ] ; THR_MODES mode_index = mode_idx [ INTRA_FRAME ] [ mode_offset ( this_mode ) ] ; int mode_rd_thresh = rd_threshes [ mode_index ] ; if ( ! ( ( 1 << this_mode ) & cpi -> sf . intra_y_mode_bsize_mask [ bsize ] ) ) continue ; if ( rd_less_than_thresh ( best_rdc . rdcost , mode_rd_thresh , rd_thresh_freq_fact [ mode_index ] ) ) continue ; mbmi -> mode = this_mode ; mbmi -> ref_frame [ 0 ] = INTRA_FRAME ; args . mode = this_mode ; args . rate = 0 ; args . dist = 0 ; mbmi -> tx_size = intra_tx_size ; vp9_foreach_transformed_block_in_plane ( xd , bsize , 0 , estimate_block_intra , & args ) ; this_rdc . rate = args . rate ; this_rdc . dist = args . dist ; this_rdc . rate += cpi <S2SV_ModEnd> -> mbmode_cost [ this_mode <S2SV_ModStart> [ this_mode ] ; this_rdc . rate += ref_frame_cost [ INTRA_FRAME ] ; this_rdc . <S2SV_ModStart> rate += intra_cost_penalty ; this_rdc . rdcost <S2SV_ModEnd> = RDCOST ( x <S2SV_ModStart> x -> rddiv , this_rdc . rate , this_rdc . <S2SV_ModEnd> dist ) ; if <S2SV_ModStart> ) ; if ( this_rdc . rdcost < best_rdc . rdcost ) { best_rdc = this_rdc ; best_mode = this_mode ; best_intra_tx_size = mbmi -> tx_size ; best_ref_frame = INTRA_FRAME ; mbmi -> uv_mode = this_mode ; mbmi -> mv [ 0 ] . as_int = INVALID_MV ; best_mode_skip_txfm = x -> skip_txfm [ 0 ] ; } } if ( best_ref_frame != INTRA_FRAME ) { mbmi -> tx_size = best_tx_size ; } else { mbmi -> tx_size = best_intra_tx_size ; } } pd -> dst = orig_dst ; mbmi -> mode = best_mode ; mbmi -> ref_frame [ 0 ] = best_ref_frame ; x -> skip_txfm [ 0 ] = best_mode_skip_txfm ; if ( reuse_inter_pred && best_pred != NULL ) { if ( best_pred -> data != orig_dst . buf && is_inter_mode ( mbmi -> mode ) ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cm -> use_highbitdepth ) vpx_highbd_convolve_copy ( best_pred -> data , best_pred -> stride , pd -> dst . buf , pd -> dst . stride , NULL , 0 , NULL , 0 , bw , bh , xd -> bd ) ; else vpx_convolve_copy ( best_pred -> data , best_pred -> stride , pd -> dst . buf , pd -> dst . stride , NULL , 0 , NULL , 0 , bw , bh ) ; # else vpx_convolve_copy ( best_pred -> data , best_pred -> stride , pd -> dst . buf , pd -> dst . stride , NULL , 0 , NULL , 0 , bw , bh ) ; # endif } } if ( cpi -> sf . adaptive_rd_thresh ) { THR_MODES best_mode_idx = mode_idx [ best_ref_frame ] [ mode_offset ( mbmi -> mode ) ] ; if ( best_ref_frame == INTRA_FRAME ) { int intra_modes = sizeof ( intra_mode_list ) / sizeof ( PREDICTION_MODE ) ; int i ; for ( i = 0 ; i < intra_modes ; i ++ ) { update_thresh_freq_fact ( cpi , tile_data , bsize , INTRA_FRAME , best_mode_idx , intra_mode_list [ i ] ) ; } } else { for ( ref_frame = LAST_FRAME ; ref_frame <= GOLDEN_FRAME ; ++ ref_frame ) { PREDICTION_MODE this_mode ; if ( best_ref_frame != ref_frame ) continue ; for ( this_mode = NEARESTMV ; this_mode <= NEWMV ; ++ this_mode ) { update_thresh_freq_fact ( cpi , tile_data , bsize , ref_frame , best_mode_idx , this_mode ) ; } } } } * rd_cost = best_rdc <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi , <S2SV_ModStart> , & cpi -> td .
<S2SV_ModStart> -> y_dc_delta_q ) ; int <S2SV_ModEnd> i ; x -> <S2SV_ModStart> [ 0 ] . quant_fp = quants -> y_quant_fp [ qindex ] ; x -> plane [ 0 ] . round_fp = quants -> y_round_fp [ qindex ] ; x -> plane [ 0 ] . <S2SV_ModStart> [ qindex ] ; xd -> plane [ 0 ] . dequant = cpi <S2SV_ModEnd> -> y_dequant [ qindex <S2SV_ModStart> y_dequant [ qindex ] ; x -> plane [ 0 ] . quant_thred [ 0 ] = x -> plane [ 0 ] . zbin [ 0 ] * x -> plane [ 0 ] . zbin [ 0 ] ; x -> plane [ 0 ] . quant_thred [ 1 ] = x -> plane [ 0 ] . zbin [ 1 ] * x -> plane [ 0 ] . zbin [ 1 <S2SV_ModEnd> ] ; for ( <S2SV_ModStart> [ i ] . quant_fp = quants -> uv_quant_fp [ qindex ] ; x -> plane [ i ] . round_fp = quants -> uv_round_fp [ qindex ] ; x -> plane [ i ] . <S2SV_ModStart> [ qindex ] ; xd -> plane [ i ] . dequant = cpi <S2SV_ModEnd> -> uv_dequant [ qindex <S2SV_ModStart> uv_dequant [ qindex ] ; x -> plane [ i ] . quant_thred [ 0 ] = x -> plane [ i ] . zbin [ 0 ] * x -> plane [ i ] . zbin [ 0 ] ; x -> plane [ i ] . quant_thred [ 1 ] = x -> plane [ i ] . zbin [ 1 ] * x -> plane [ i ] . zbin [ 1 ] ; } <S2SV_ModEnd> x -> skip_block = <S2SV_ModStart> x -> skip_block = segfeature_active <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> ( cpi , x , x
<S2SV_ModStart> const int qzbin_factor = get_qzbin_factor ( q , cm -> bit_depth <S2SV_ModEnd> ) ; const int <S2SV_ModStart> ++ i ) { int qrounding_factor_fp = i == 0 ? 48 : 42 ; if ( q == 0 ) qrounding_factor_fp = 64 ; <S2SV_ModStart> , cm -> y_dc_delta_q , cm -> bit_depth <S2SV_ModStart> ( q , 0 , cm -> bit_depth <S2SV_ModStart> ) ; quants -> y_quant_fp [ q ] [ i ] = ( 1 << 16 ) / quant ; quants -> y_round_fp [ q ] [ i ] = ( qrounding_factor_fp <S2SV_ModEnd> * quant ) >> <S2SV_ModStart> ) >> 7 ; quants -> y_zbin [ q ] [ i ] = ROUND_POWER_OF_TWO ( qzbin_factor * quant , 7 ) ; quants -> y_round [ q ] [ i ] = ( qrounding_factor * quant ) >> 7 ; cpi <S2SV_ModEnd> -> y_dequant [ q <S2SV_ModStart> , cm -> uv_dc_delta_q , cm -> bit_depth <S2SV_ModStart> , cm -> uv_ac_delta_q , cm -> bit_depth <S2SV_ModStart> ) ; quants -> uv_quant_fp [ q ] [ i ] = ( 1 << 16 ) / quant ; quants -> uv_round_fp [ q ] [ i ] = ( qrounding_factor_fp <S2SV_ModEnd> * quant ) >> <S2SV_ModStart> ) >> 7 ; quants -> uv_zbin <S2SV_ModEnd> [ q ] [ <S2SV_ModStart> ) ; quants -> uv_round <S2SV_ModEnd> [ q ] [ <S2SV_ModStart> ) >> 7 ; cpi -> uv_dequant [ q ] [ i ] = quant ; <S2SV_ModEnd> } for ( i <S2SV_ModStart> ] ; quants -> y_quant_fp [ q ] [ i ] = quants -> y_quant_fp [ q ] [ 1 ] ; quants -> y_round_fp [ q ] [ i ] = quants -> y_round_fp [ q ] [ 1 ] ; quants -> <S2SV_ModStart> [ 1 ] ; cpi <S2SV_ModEnd> -> y_dequant [ q <S2SV_ModStart> [ i ] = cpi <S2SV_ModEnd> -> y_dequant [ q <S2SV_ModStart> ] ; quants -> uv_quant_fp [ q ] [ i ] = quants -> uv_quant_fp [ q ] [ 1 ] ; quants -> uv_round_fp [ q ] [ i ] = quants -> uv_round_fp [ q ] [ 1 ] ; quants -> <S2SV_ModStart> [ 1 ] ; cpi <S2SV_ModEnd> -> uv_dequant [ q <S2SV_ModStart> [ i ] = cpi <S2SV_ModEnd> -> uv_dequant [ q <S2SV_ModStart> [ 1 ] ; <S2SV_ModEnd> } } } <S2SV_null>
<S2SV_ModStart> [ plane ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbd_quantize_b <S2SV_ModEnd> ( BLOCK_OFFSET ( p <S2SV_ModStart> pd -> dequant , & p -> eobs [ block ] , scan , iscan ) ; return ; } # endif vpx_quantize_b ( BLOCK_OFFSET ( p -> coeff , block ) , 16 , x -> skip_block , p -> zbin , p -> round , p -> quant , p -> quant_shift , BLOCK_OFFSET ( p -> qcoeff , block ) , BLOCK_OFFSET ( pd -> dqcoeff , block ) , pd -> dequant <S2SV_ModEnd> , & p ->
<S2SV_ModStart> -> common ; const RATE_CONTROL * rc <S2SV_ModEnd> = & cpi -> <S2SV_ModStart> = & cpi -> <S2SV_ModEnd> rc ; int64_t critical_level <S2SV_ModStart> ; int64_t critical_level = rc -> optimal_buffer_level >> 3 <S2SV_ModEnd> ; int64_t buff_lvl_step = <S2SV_ModStart> 0 ; int active_worst_quality ; int ambient_qp ; unsigned int num_frames_weight_key = 5 * cpi -> svc . number_temporal_layers <S2SV_ModStart> rc -> worst_quality ; ambient_qp = <S2SV_ModEnd> ( cm -> current_video_frame <S2SV_ModStart> ( cm -> current_video_frame < num_frames_weight_key ) ? MIN ( <S2SV_ModEnd> rc -> avg_frame_qindex [ <S2SV_ModStart> avg_frame_qindex [ INTER_FRAME ] <S2SV_ModEnd> , rc -> avg_frame_qindex <S2SV_ModStart> avg_frame_qindex [ KEY_FRAME ] ) : <S2SV_ModEnd> rc -> avg_frame_qindex [ <S2SV_ModStart> avg_frame_qindex [ INTER_FRAME ] ; active_worst_quality = MIN ( rc -> worst_quality , ambient_qp * 5 / 4 ) ; if ( rc -> buffer_level > rc -> optimal_buffer_level ) { int max_adjustment_down = active_worst_quality / 3 ; if ( max_adjustment_down ) { buff_lvl_step = ( ( rc -> maximum_buffer_size - rc -> optimal_buffer_level ) / max_adjustment_down ) ; if ( buff_lvl_step ) adjustment = ( int ) ( ( rc -> buffer_level - rc -> optimal_buffer_level ) / buff_lvl_step ) ; active_worst_quality -= adjustment ; } } else if ( rc -> buffer_level > critical_level ) { if ( critical_level ) { buff_lvl_step = ( rc -> optimal_buffer_level - critical_level ) ; if ( buff_lvl_step ) { adjustment = ( int ) ( ( rc -> worst_quality - ambient_qp ) * ( rc -> optimal_buffer_level - rc -> buffer_level ) / buff_lvl_step ) ; } active_worst_quality = ambient_qp <S2SV_ModEnd> + adjustment ; }
<S2SV_ModStart> & cpi -> rc ; const VP9EncoderConfig * oxcf = & cpi -> oxcf ; const SVC * const svc = & cpi -> svc <S2SV_ModStart> target = ( ( rc -> <S2SV_ModEnd> starting_buffer_level / 2 ) <S2SV_ModStart> ( int ) ( rc -> starting_buffer_level / 2 ) ; } else { int kf_boost = 32 ; double framerate = cpi -> framerate ; if ( svc -> number_temporal_layers > 1 && oxcf -> rc_mode == VPX_CBR ) { const int layer = LAYER_IDS_TO_IDX ( svc -> spatial_layer_id , svc -> temporal_layer_id , svc -> number_temporal_layers ) ; const LAYER_CONTEXT * lc = & svc -> layer_context [ layer ] ; framerate = lc -> framerate ; } <S2SV_ModEnd> kf_boost = MAX ( <S2SV_ModStart> kf_boost = MAX ( kf_boost , ( int ) ( 2 * framerate <S2SV_ModEnd> - 16 ) ) <S2SV_ModStart> rc -> frames_since_key < framerate <S2SV_ModEnd> / 2 ) { <S2SV_ModStart> -> frames_since_key / ( framerate <S2SV_ModEnd> / 2 ) ) <S2SV_ModStart> ) * rc -> avg_frame_bandwidth <S2SV_ModEnd> ) >> 4 ;
<S2SV_ModStart> cpi -> rc ; const <S2SV_ModStart> target = rc -> avg_frame_bandwidth <S2SV_ModEnd> * kf_ratio ; return
<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf = & <S2SV_ModStart> const int64_t diff = rc <S2SV_ModEnd> -> optimal_buffer_level - rc <S2SV_ModStart> one_pct_bits = 1 + rc <S2SV_ModEnd> -> optimal_buffer_level / 100 <S2SV_ModStart> MAX ( rc -> avg_frame_bandwidth <S2SV_ModEnd> >> 4 , FRAME_OVERHEAD_BITS <S2SV_ModStart> ) ; int target ; if ( oxcf -> gf_cbr_boost_pct ) { const int af_ratio_pct = oxcf -> gf_cbr_boost_pct + 100 ; target = cpi -> refresh_golden_frame ? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio_pct ) / ( rc -> baseline_gf_interval * 100 + af_ratio_pct - 100 ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * 100 ) / ( rc -> baseline_gf_interval * 100 + af_ratio_pct - 100 ) ; } else { target = rc -> avg_frame_bandwidth ; } if ( is_one_pass_cbr_svc ( cpi ) ) { int layer = LAYER_IDS_TO_IDX ( svc -> spatial_layer_id , svc -> temporal_layer_id , svc -> number_temporal_layers ) <S2SV_ModEnd> ; const LAYER_CONTEXT * <S2SV_ModStart> svc -> layer_context [ layer <S2SV_ModEnd> ] ; target = <S2SV_ModStart> / 200 ; } if ( oxcf -> rc_max_inter_bitrate_pct ) { const int max_rate = rc -> avg_frame_bandwidth * oxcf -> rc_max_inter_bitrate_pct / 100 ; target = MIN ( target , max_rate ) ; }
<S2SV_ModStart> ? ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> baseline_gf_interval <S2SV_ModStart> : ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> baseline_gf_interval <S2SV_ModStart> target = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif return
<S2SV_ModStart> x2 , double x1 , vpx_bit_depth_t bit_depth <S2SV_ModStart> ; i ++ ) { <S2SV_ModStart> <= vp9_convert_qindex_to_q ( i , bit_depth <S2SV_ModStart> ) return i ; }
<S2SV_ModStart> * cpi ) { const RATE_CONTROL * const rc = & cpi -> rc ; double rcf ; <S2SV_ModStart> == KEY_FRAME ) { rcf = rc -> rate_correction_factors [ KF_STD ] ; } else if ( cpi -> oxcf . pass == 2 ) { RATE_FACTOR_LEVEL rf_lvl = cpi -> twopass . gf_group . rf_level [ cpi -> twopass . gf_group . index ] ; rcf = rc -> rate_correction_factors [ rf_lvl ] <S2SV_ModEnd> ; } else { <S2SV_ModStart> refresh_golden_frame ) && ! rc -> is_src_frame_alt_ref && ! <S2SV_ModEnd> cpi -> use_svc && <S2SV_ModStart> cpi -> use_svc && ( <S2SV_ModStart> cpi -> oxcf . rc_mode != VPX_CBR || cpi -> oxcf . gf_cbr_boost_pct > 20 ) ) rcf = rc -> rate_correction_factors [ GF_ARF_STD ] ; else rcf = rc -> rate_correction_factors [ INTER_NORMAL ] ; } rcf *= rcf_mult [ rc -> frame_size_selector ] ; return fclamp ( rcf , MIN_BPB_FACTOR , MAX_BPB_FACTOR ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; int q ; int * rtc_minq ; ASSIGN_MINQ_TABLE ( cm -> bit_depth , rtc_minq ) ; <S2SV_ModStart> = vp9_convert_qindex_to_q ( qindex , cm -> bit_depth <S2SV_ModStart> last_boosted_q * 0.75 ) , cm -> bit_depth <S2SV_ModStart> q_val ; active_best_quality = get_kf_active_quality ( rc , <S2SV_ModEnd> rc -> avg_frame_qindex [ <S2SV_ModStart> [ KEY_FRAME ] , cm -> bit_depth <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> = vp9_convert_qindex_to_q ( active_best_quality , cm -> bit_depth <S2SV_ModStart> , q_val * q_adj_factor , cm -> bit_depth <S2SV_ModStart> ; } active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth <S2SV_ModEnd> ) ; } else <S2SV_ModStart> active_worst_quality ) active_best_quality = rtc_minq <S2SV_ModEnd> [ rc -> avg_frame_qindex <S2SV_ModStart> ; else active_best_quality = rtc_minq <S2SV_ModEnd> [ active_worst_quality ] ; <S2SV_ModStart> active_worst_quality ) active_best_quality = rtc_minq <S2SV_ModEnd> [ rc -> avg_frame_qindex <S2SV_ModStart> ; else active_best_quality = rtc_minq <S2SV_ModEnd> [ active_worst_quality ] ; <S2SV_ModStart> ! rc -> this_key_frame_forced && <S2SV_ModEnd> ! ( cm -> <S2SV_ModStart> == 0 ) ) { int qdelta = 0 ; vpx_clear_system_state ( ) ; qdelta = vp9_compute_qdelta_by_rate ( & cpi -> rc , cm -> frame_type , active_worst_quality , 2.0 , cm -> bit_depth ) ; * top_index = active_worst_quality + qdelta ; * top_index = ( * top_index > * bottom_index ) ? * top_index : * bottom_index <S2SV_ModEnd> ; } # endif
<S2SV_ModStart> -> rc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> cpi -> oxcf ; const int cq_level = get_active_cq_level ( rc , oxcf ) ; <S2SV_ModStart> ; int q ; int * inter_minq ; ASSIGN_MINQ_TABLE ( cm -> bit_depth , inter_minq ) ; <S2SV_ModStart> cm ) ) { <S2SV_ModEnd> if ( rc -> <S2SV_ModStart> = vp9_convert_qindex_to_q ( qindex , cm -> bit_depth <S2SV_ModStart> , last_boosted_q * 0.75 , cm -> bit_depth <S2SV_ModStart> ) ; } else <S2SV_ModEnd> { double q_adj_factor = <S2SV_ModStart> q_val ; active_best_quality = get_kf_active_quality ( rc , <S2SV_ModEnd> rc -> avg_frame_qindex [ <S2SV_ModStart> [ KEY_FRAME ] , cm -> bit_depth <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> = vp9_convert_qindex_to_q ( active_best_quality , cm -> bit_depth <S2SV_ModStart> , q_val * q_adj_factor , cm -> bit_depth ) ; } <S2SV_ModEnd> } else if ( <S2SV_ModStart> if ( oxcf -> rc_mode == VPX_CQ <S2SV_ModEnd> ) { if ( <S2SV_ModStart> if ( q < cq_level ) q = cq_level ; active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; <S2SV_ModEnd> active_best_quality = active_best_quality * <S2SV_ModStart> if ( oxcf -> rc_mode == VPX_Q <S2SV_ModEnd> ) { if ( <S2SV_ModStart> ) { active_best_quality = cq_level ; } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; } } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth <S2SV_ModEnd> ) ; } } <S2SV_ModStart> if ( oxcf -> rc_mode == VPX_Q ) { active_best_quality = cq_level <S2SV_ModEnd> ; } else { <S2SV_ModStart> ( ( oxcf -> rc_mode == VPX_CQ <S2SV_ModEnd> ) && ( active_best_quality <S2SV_ModStart> && ( active_best_quality < cq_level ) ) { active_best_quality = cq_level <S2SV_ModEnd> ; } } } <S2SV_ModStart> ; # if LIMIT_QRANGE_FOR_ALTREF_AND_KEY { int qdelta = 0 ; vpx_clear_system_state ( ) ; <S2SV_ModStart> ! rc -> this_key_frame_forced && <S2SV_ModEnd> ! ( cm -> <S2SV_ModStart> == 0 ) ) { qdelta = vp9_compute_qdelta_by_rate ( & cpi -> rc , cm -> frame_type , active_worst_quality , 2.0 , cm -> bit_depth ) ; } else if ( ! rc -> is_src_frame_alt_ref && ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) ) { qdelta = vp9_compute_qdelta_by_rate ( & cpi -> rc , cm -> frame_type , active_worst_quality , 1.75 , cm -> bit_depth ) ; } * top_index = active_worst_quality + qdelta ; * top_index = ( * top_index > * bottom_index ) ? * top_index : * bottom_index <S2SV_ModEnd> ; } # endif <S2SV_ModStart> if ( oxcf -> rc_mode == VPX_Q <S2SV_ModEnd> ) { q = <S2SV_ModStart> top_index ; } } <S2SV_ModEnd> assert ( * top_index
<S2SV_ModStart> -> rc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> cpi -> oxcf ; const GF_GROUP * gf_group = & cpi -> twopass . gf_group ; const int cq_level = get_active_cq_level ( rc , oxcf ) ; int active_best_quality ; int active_worst_quality = cpi -> twopass . active_worst_quality ; int q ; int * inter_minq ; ASSIGN_MINQ_TABLE ( cm -> bit_depth , inter_minq ) <S2SV_ModEnd> ; if ( frame_is_intra_only <S2SV_ModStart> frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) { <S2SV_ModEnd> if ( rc -> <S2SV_ModStart> -> this_key_frame_forced ) { double last_boosted_q ; int delta_qindex ; int qindex ; if ( cpi -> twopass . last_kfgroup_zeromotion_pct >= STATIC_MOTION_THRESH ) { qindex = MIN ( rc -> last_kf_qindex , rc -> last_boosted_qindex ) ; active_best_quality = qindex ; <S2SV_ModEnd> last_boosted_q = vp9_convert_qindex_to_q ( <S2SV_ModStart> = vp9_convert_qindex_to_q ( qindex , cm -> bit_depth ) ; <S2SV_ModEnd> delta_qindex = vp9_compute_qdelta ( <S2SV_ModStart> last_boosted_q , last_boosted_q * 1.25 , cm -> bit_depth ) ; active_worst_quality = MIN <S2SV_ModEnd> ( qindex + delta_qindex <S2SV_ModStart> qindex + delta_qindex , active_worst_quality ) ; } else { qindex = rc -> last_boosted_qindex ; last_boosted_q = vp9_convert_qindex_to_q ( qindex , cm -> bit_depth ) ; delta_qindex = vp9_compute_qdelta ( rc , last_boosted_q , last_boosted_q * 0.75 , cm -> bit_depth ) ; active_best_quality = MAX ( qindex + delta_qindex , <S2SV_ModStart> -> best_quality ) ; } <S2SV_ModStart> q_val ; active_best_quality = get_kf_active_quality ( rc , active_worst_quality , cm -> bit_depth <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> = vp9_convert_qindex_to_q ( active_best_quality , cm -> bit_depth <S2SV_ModStart> , q_val * q_adj_factor , cm -> bit_depth ) ; } <S2SV_ModEnd> } else if ( <S2SV_ModStart> if ( oxcf -> rc_mode == VPX_CQ <S2SV_ModEnd> ) { if ( <S2SV_ModStart> if ( q < cq_level ) q = cq_level ; active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; <S2SV_ModEnd> active_best_quality = active_best_quality * <S2SV_ModStart> if ( oxcf -> rc_mode == VPX_Q <S2SV_ModEnd> ) { if ( <S2SV_ModStart> ) { active_best_quality = cq_level ; } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth ) ; if ( gf_group -> rf_level [ gf_group -> index ] == GF_ARF_LOW ) active_best_quality = ( active_best_quality + cq_level + 1 ) / 2 ; } } else { active_best_quality = get_gf_active_quality ( rc , q , cm -> bit_depth <S2SV_ModEnd> ) ; } } <S2SV_ModStart> if ( oxcf -> rc_mode == VPX_Q ) { active_best_quality = cq_level <S2SV_ModEnd> ; } else { <S2SV_ModStart> ( ( oxcf -> rc_mode == VPX_CQ <S2SV_ModEnd> ) && ( active_best_quality <S2SV_ModStart> && ( active_best_quality < cq_level ) ) { active_best_quality = cq_level ; } } } if ( ( cpi -> oxcf . rc_mode != VPX_Q ) && ( cpi -> twopass . gf_zeromotion_pct < VLOW_MOTION_THRESHOLD ) ) { if ( frame_is_intra_only ( cm ) || ( ! rc -> is_src_frame_alt_ref && ( cpi -> refresh_golden_frame || cpi -> refresh_alt_ref_frame ) ) ) { active_best_quality -= ( cpi -> twopass . extend_minq + cpi -> twopass . extend_minq_fast ) ; active_worst_quality += ( cpi -> twopass . extend_maxq / 2 ) ; } else { active_best_quality -= ( cpi -> twopass . extend_minq + cpi -> twopass . extend_minq_fast ) / 2 ; active_worst_quality += cpi -> twopass . extend_maxq ; } } # if LIMIT_QRANGE_FOR_ALTREF_AND_KEY vpx_clear_system_state ( ) ; if ( ! ( ( frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) ) || ! rc -> this_key_frame_forced || ( cpi -> twopass . last_kfgroup_zeromotion_pct < STATIC_MOTION_THRESH ) ) { int qdelta = vp9_frame_type_qdelta ( cpi , gf_group -> rf_level [ gf_group -> index ] , active_worst_quality ) ; active_worst_quality = MAX ( active_worst_quality + qdelta , active_best_quality ) ; } # endif if ( rc -> frame_size_selector != UNSCALED && ! frame_is_kf_gf_arf ( cpi ) ) { int qdelta = vp9_compute_qdelta_by_rate ( rc , cm -> frame_type , active_best_quality , 2.0 , cm -> bit_depth ) ; active_best_quality = MAX ( active_best_quality + qdelta , rc -> best_quality ) ; } active_best_quality = clamp ( active_best_quality , rc -> best_quality , rc -> worst_quality ) ; active_worst_quality = clamp ( active_worst_quality , active_best_quality , rc -> worst_quality ) ; if ( oxcf -> rc_mode == VPX_Q ) { q = active_best_quality ; } else if ( ( frame_is_intra_only ( cm ) || vp9_is_upper_layer_key_frame ( cpi ) ) && <S2SV_ModEnd> rc -> this_key_frame_forced ) <S2SV_ModStart> -> this_key_frame_forced ) { if ( cpi -> twopass . last_kfgroup_zeromotion_pct >= STATIC_MOTION_THRESH ) { q = MIN ( rc -> last_kf_qindex , rc -> last_boosted_qindex ) ; } else { q = rc -> last_boosted_qindex ; } <S2SV_ModEnd> } else { q <S2SV_ModStart> if ( q > active_worst_quality <S2SV_ModEnd> ) { if ( <S2SV_ModStart> rc -> max_frame_bandwidth ) active_worst_quality = q ; else q = active_worst_quality ; } } clamp ( q , active_best_quality , active_worst_quality ) ; * top_index = active_worst_quality <S2SV_ModEnd> ; * bottom_index = <S2SV_ModStart> ; * bottom_index = active_best_quality ; <S2SV_ModEnd> assert ( * top_index
<S2SV_ModStart> double factor ) { RATE_CONTROL * const rc = & cpi -> rc ; factor /= rcf_mult [ cpi -> rc . frame_size_selector ] ; factor = fclamp ( factor , MIN_BPB_FACTOR , MAX_BPB_FACTOR ) ; <S2SV_ModStart> == KEY_FRAME ) { rc -> rate_correction_factors [ KF_STD ] = factor ; } else if ( cpi -> oxcf . pass == 2 ) { RATE_FACTOR_LEVEL rf_lvl = cpi -> twopass . gf_group . rf_level [ cpi -> twopass . gf_group . index ] ; rc -> rate_correction_factors [ rf_lvl ] <S2SV_ModEnd> = factor ; } <S2SV_ModStart> refresh_golden_frame ) && ! rc -> is_src_frame_alt_ref && ! <S2SV_ModEnd> cpi -> use_svc && <S2SV_ModStart> cpi -> use_svc && ( <S2SV_ModStart> cpi -> oxcf . rc_mode != VPX_CBR || cpi -> oxcf . gf_cbr_boost_pct > 20 ) ) rc -> rate_correction_factors [ GF_ARF_STD ] <S2SV_ModEnd> = factor ; else <S2SV_ModStart> = factor ; else rc -> rate_correction_factors [ INTER_NORMAL ] <S2SV_ModEnd> = factor ; }
<S2SV_ModStart> frames_since_golden = 0 ; <S2SV_ModEnd> rc -> source_alt_ref_pending =
<S2SV_ModStart> & cpi -> common <S2SV_ModEnd> ; RATE_CONTROL * const <S2SV_ModStart> bits_off_target += rc -> avg_frame_bandwidth <S2SV_ModEnd> - encoded_frame_size ; } <S2SV_ModStart> rc -> bits_off_target , rc <S2SV_ModEnd> -> maximum_buffer_size ) ; <S2SV_ModStart> bits_off_target ; if ( is_one_pass_cbr_svc ( cpi ) <S2SV_ModEnd> ) { update_layer_buffer_level (
<S2SV_ModStart> rc -> source_alt_ref_pending ) { <S2SV_ModStart> source_alt_ref_active = 0 ; }
<S2SV_ModStart> encoded_frame_size ) { int i <S2SV_ModEnd> = 0 ; int <S2SV_ModStart> temporal_layer_id ; for ( i <S2SV_ModEnd> = current_temporal_layer + 1 <S2SV_ModStart> current_temporal_layer + 1 ; i <S2SV_ModEnd> < svc -> number_temporal_layers <S2SV_ModStart> -> number_temporal_layers ; ++ i ) { const int layer = LAYER_IDS_TO_IDX ( svc -> spatial_layer_id , i , svc -> number_temporal_layers ) ; <S2SV_ModEnd> LAYER_CONTEXT * lc = <S2SV_ModStart> svc -> layer_context [ layer <S2SV_ModEnd> ] ; RATE_CONTROL * <S2SV_ModStart> lrc -> bits_off_target , lrc <S2SV_ModEnd> -> maximum_buffer_size ) ;
<S2SV_ModStart> qstart , double qtarget , vpx_bit_depth_t bit_depth <S2SV_ModStart> ( vp9_convert_qindex_to_q ( i , bit_depth <S2SV_ModStart> ( vp9_convert_qindex_to_q ( i , bit_depth
<S2SV_ModStart> qindex , double rate_target_ratio , vpx_bit_depth_t bit_depth <S2SV_ModStart> , qindex , 1.0 , bit_depth <S2SV_ModStart> ++ i ) { <S2SV_ModEnd> if ( vp9_rc_bits_per_mb ( <S2SV_ModStart> , i , 1.0 , bit_depth <S2SV_ModStart> ) <= target_bits_per_mb ) { target_index = i ; break ; } <S2SV_ModEnd> } return target_index -
<S2SV_ModStart> vp9_convert_qindex_to_q ( int qindex , vpx_bit_depth_t bit_depth ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : <S2SV_ModEnd> return vp9_ac_quant ( qindex <S2SV_ModStart> ( qindex , 0 , bit_depth <S2SV_ModStart> ) / 4.0 ; case VPX_BITS_10 : return vp9_ac_quant ( qindex , 0 , bit_depth ) / 16.0 ; case VPX_BITS_12 : return vp9_ac_quant ( qindex , 0 , bit_depth ) / 64.0 ; default : assert ( 0 && "bit_depth<S2SV_blank>should<S2SV_blank>be<S2SV_blank>VPX_BITS_8,<S2SV_blank>VPX_BITS_10<S2SV_blank>or<S2SV_blank>VPX_BITS_12" ) ; return - 1.0 ; } # else return vp9_ac_quant ( qindex , 0 , bit_depth ) / 4.0 ; # endif
<S2SV_ModStart> qindex , double correction_factor , vpx_bit_depth_t bit_depth <S2SV_ModStart> = vp9_convert_qindex_to_q ( qindex , bit_depth <S2SV_ModStart> frame_type == KEY_FRAME ? 2700000 : 1800000 ; assert ( correction_factor <= MAX_BPB_FACTOR && correction_factor >= MIN_BPB_FACTOR ) <S2SV_ModEnd> ; enumerator += ( <S2SV_ModStart> ( int ) ( <S2SV_ModEnd> enumerator * correction_factor / <S2SV_ModStart> correction_factor / q ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> -> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf = & <S2SV_ModStart> max_rate = rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> rc_max_intra_bitrate_pct
<S2SV_ModStart> -> rc ; const VP9EncoderConfig * oxcf = & cpi -> oxcf ; const <S2SV_ModStart> min_frame_bandwidth , rc -> avg_frame_bandwidth <S2SV_ModEnd> >> 5 ) ; <S2SV_ModStart> rc -> max_frame_bandwidth ; if ( oxcf -> rc_max_inter_bitrate_pct ) { const int max_rate = rc -> avg_frame_bandwidth * oxcf -> rc_max_inter_bitrate_pct / 100 ; target = MIN ( target , max_rate ) ; }
<S2SV_ModStart> * cpi , int frame_target <S2SV_ModEnd> , int * frame_under_shoot_limit <S2SV_ModStart> cpi -> oxcf . rc_mode == VPX_Q <S2SV_ModEnd> ) { * frame_under_shoot_limit <S2SV_ModStart> ; } else { const int tolerance <S2SV_ModEnd> = ( cpi -> <S2SV_ModStart> sf . recode_tolerance * frame_target <S2SV_ModEnd> ) / 100 ; <S2SV_ModStart> / 100 ; * frame_under_shoot_limit = MAX ( frame_target - tolerance - 200 , 0 ) ; * frame_over_shoot_limit = MIN ( frame_target + tolerance + 200 , <S2SV_ModEnd> cpi -> rc . <S2SV_ModStart> rc . max_frame_bandwidth ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * oxcf = & <S2SV_ModStart> oxcf -> drop_frames_water_mark * rc <S2SV_ModEnd> -> optimal_buffer_level / 100
<S2SV_ModStart> == 0 || ( cpi <S2SV_ModEnd> -> frame_flags & FRAMEFLAGS_KEY <S2SV_ModStart> oxcf . auto_key && 0 <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> frames_to_key = cpi -> oxcf . key_freq <S2SV_ModEnd> ; rc -> kf_boost <S2SV_ModStart> -> source_alt_ref_active = 0 <S2SV_ModEnd> ; } else { <S2SV_ModStart> frame_type = INTER_FRAME ; } if ( rc -> frames_till_gf_update_due == 0 ) { if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) vp9_cyclic_refresh_set_golden_update ( cpi ) ; else rc -> baseline_gf_interval = ( rc -> min_gf_interval + rc -> max_gf_interval ) / 2 ; rc -> frames_till_gf_update_due = rc -> baseline_gf_interval ; if ( rc -> frames_till_gf_update_due > rc -> frames_to_key ) rc -> frames_till_gf_update_due = rc -> frames_to_key ; cpi -> refresh_golden_frame = 1 ; rc -> gfu_boost = DEFAULT_GF_BOOST ; } if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) vp9_cyclic_refresh_update_parameters ( cpi ) ; if ( cm -> frame_type == KEY_FRAME ) target = calc_iframe_target_size_one_pass_cbr ( cpi ) ; else target = <S2SV_ModEnd> calc_pframe_target_size_one_pass_cbr ( cpi ) <S2SV_ModStart> ( cpi ) ; <S2SV_ModEnd> vp9_rc_set_frame_target ( cpi , <S2SV_ModStart> , target ) ; if ( cpi -> oxcf . resize_mode == RESIZE_DYNAMIC ) cpi -> resize_pending = vp9_resize_one_pass_cbr ( cpi ) ; else cpi -> resize_pending = 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> == 0 || ( cpi <S2SV_ModEnd> -> frame_flags & FRAMEFLAGS_KEY <S2SV_ModStart> oxcf . auto_key && 0 <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> frames_to_key = cpi -> oxcf . key_freq <S2SV_ModEnd> ; rc -> kf_boost <S2SV_ModStart> rc -> baseline_gf_interval = ( rc -> min_gf_interval + rc -> max_gf_interval ) / 2 <S2SV_ModEnd> ; rc -> frames_till_gf_update_due <S2SV_ModStart> rc -> frames_to_key ) { rc -> frames_till_gf_update_due = rc -> frames_to_key ; rc -> constrained_gf_group = 1 ; } else { rc -> constrained_gf_group = 0 ; } <S2SV_ModEnd> cpi -> refresh_golden_frame =
<S2SV_ModStart> target = rc -> avg_frame_bandwidth ; const int layer = LAYER_IDS_TO_IDX ( cpi -> svc . spatial_layer_id , cpi -> svc . temporal_layer_id , cpi -> svc . number_temporal_layers ) <S2SV_ModEnd> ; if ( ( <S2SV_ModStart> 0 ) || ( cpi <S2SV_ModEnd> -> frame_flags & FRAMEFLAGS_KEY <S2SV_ModStart> frames_since_key % cpi -> oxcf . key_freq <S2SV_ModEnd> == 0 ) ) <S2SV_ModStart> 0 ; if ( is_two_pass_svc ( cpi ) ) { cpi -> svc . layer_context [ layer ] . is_key_frame = 1 ; cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG & ~ VP9_GOLD_FLAG & ~ VP9_ALT_FLAG ) ; } else if ( is_one_pass_cbr_svc ( cpi ) ) { cpi -> svc . layer_context [ layer ] . is_key_frame = 1 ; reset_temporal_layer_to_zero ( cpi ) ; cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG & ~ VP9_GOLD_FLAG & ~ VP9_ALT_FLAG ) ; target = calc_iframe_target_size_one_pass_cbr ( cpi ) ; } } else { cm -> frame_type = INTER_FRAME ; if ( is_two_pass_svc ( cpi ) ) { LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ layer ] ; if ( cpi -> svc . spatial_layer_id == 0 ) { lc -> is_key_frame = 0 ; } else { lc -> is_key_frame = cpi -> svc . layer_context [ cpi -> svc . temporal_layer_id ] . is_key_frame ; if ( lc -> is_key_frame ) cpi -> ref_frame_flags &= ( ~ VP9_LAST_FLAG ) ; } cpi -> ref_frame_flags &= ( ~ VP9_ALT_FLAG ) ; } else if ( is_one_pass_cbr_svc ( cpi ) ) { LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ layer ] ; if ( cpi -> svc . spatial_layer_id == 0 ) { lc -> is_key_frame = 0 ; } else { lc -> is_key_frame = cpi -> svc . layer_context [ cpi -> svc . temporal_layer_id ] . is_key_frame ; } target = calc_pframe_target_size_one_pass_cbr ( cpi ) ; } } if ( <S2SV_ModEnd> cpi -> oxcf . <S2SV_ModStart> cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ ) vp9_cyclic_refresh_update_parameters ( cpi ) ; <S2SV_ModEnd> vp9_rc_set_frame_target ( cpi ,
<S2SV_ModStart> void vp9_rc_init ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf , int <S2SV_ModStart> * rc ) { int i ; <S2SV_ModStart> 0 && oxcf -> rc_mode == VPX_CBR <S2SV_ModEnd> ) { rc -> <S2SV_ModStart> rc -> avg_frame_qindex [ KEY_FRAME <S2SV_ModEnd> ] = oxcf -> <S2SV_ModStart> rc -> avg_frame_qindex [ INTER_FRAME <S2SV_ModEnd> ] = oxcf -> <S2SV_ModStart> rc -> avg_frame_qindex [ KEY_FRAME <S2SV_ModEnd> ] = ( oxcf <S2SV_ModStart> rc -> avg_frame_qindex [ INTER_FRAME <S2SV_ModEnd> ] = ( oxcf <S2SV_ModStart> ) / 2 ; } rc -> last_q [ KEY_FRAME ] = oxcf -> best_allowed_q ; rc -> last_q [ INTER_FRAME ] = oxcf -> worst_allowed_q ; rc -> buffer_level = rc -> starting_buffer_level ; rc -> bits_off_target = rc -> starting_buffer_level ; rc -> rolling_target_bits = rc -> avg_frame_bandwidth ; rc -> rolling_actual_bits = rc -> avg_frame_bandwidth ; rc -> long_rolling_target_bits = rc -> avg_frame_bandwidth ; rc -> long_rolling_actual_bits = rc -> avg_frame_bandwidth ; rc -> total_actual_bits = 0 ; rc -> total_target_bits = 0 ; rc -> total_target_vs_actual = 0 ; rc -> frames_since_key = 8 ; rc -> this_key_frame_forced = 0 ; rc -> next_key_frame_forced = 0 ; rc -> source_alt_ref_pending = 0 ; rc -> source_alt_ref_active = 0 ; rc -> frames_till_gf_update_due = 0 ; rc -> ni_av_qi = oxcf -> worst_allowed_q ; rc -> ni_tot_qi = 0 ; rc -> ni_frames = 0 ; rc -> tot_q = 0.0 ; rc -> avg_q = vp9_convert_qindex_to_q ( oxcf -> worst_allowed_q , oxcf -> bit_depth ) ; for ( i = 0 ; i < RATE_FACTOR_LEVELS ; ++ i ) { rc -> rate_correction_factors [ i ] = 1.0 ; } rc -> min_gf_interval = oxcf -> min_gf_interval ; rc -> max_gf_interval = oxcf -> max_gf_interval ; if ( rc -> min_gf_interval == 0 ) rc -> min_gf_interval = vp9_rc_get_default_min_gf_interval ( oxcf -> width , oxcf -> height , oxcf -> init_framerate ) ; if ( rc -> max_gf_interval == 0 ) rc -> max_gf_interval = vp9_rc_get_default_max_gf_interval ( oxcf -> init_framerate , rc -> min_gf_interval ) ; rc -> baseline_gf_interval = ( rc -> min_gf_interval + rc -> max_gf_interval <S2SV_ModEnd> ) / 2 ; <S2SV_ModStart> / 2 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> void vp9_rc_init_minq_luts ( void ) { init_minq_luts ( kf_low_motion_minq_8 , kf_high_motion_minq_8 , arfgf_low_motion_minq_8 , arfgf_high_motion_minq_8 , inter_minq_8 , rtc_minq_8 , VPX_BITS_8 ) ; # if CONFIG_VP9_HIGHBITDEPTH init_minq_luts ( kf_low_motion_minq_10 , kf_high_motion_minq_10 , arfgf_low_motion_minq_10 , arfgf_high_motion_minq_10 , inter_minq_10 , rtc_minq_10 , VPX_BITS_10 ) ; init_minq_luts ( kf_low_motion_minq_12 , kf_high_motion_minq_12 , arfgf_low_motion_minq_12 , arfgf_high_motion_minq_12 , inter_minq_12 , rtc_minq_12 , VPX_BITS_12 ) ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> if ( cpi -> oxcf . <S2SV_ModStart> cpi -> oxcf . rc_mode == VPX_CBR <S2SV_ModEnd> ) q = rc_pick_q_and_bounds_one_pass_cbr <S2SV_ModStart> ) { if ( <S2SV_ModEnd> cpi -> sf .
<S2SV_ModStart> uint64_t bytes_used ) { const <S2SV_ModStart> -> common ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> cpi -> rc ; const int qindex = cm -> base_qindex ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled ) { vp9_cyclic_refresh_postencode ( cpi ) ; } <S2SV_ModEnd> rc -> projected_frame_size = <S2SV_ModStart> ) ; vp9_rc_update_rate_correction_factors ( cpi <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> [ KEY_FRAME ] = qindex <S2SV_ModEnd> ; rc -> avg_frame_qindex <S2SV_ModStart> [ KEY_FRAME ] + qindex <S2SV_ModEnd> , 2 ) ; <S2SV_ModStart> , 2 ) ; if ( cpi -> use_svc ) { int i = 0 ; SVC * svc = & cpi -> svc ; for ( i = 0 ; i < svc -> number_temporal_layers ; ++ i ) { const int layer = LAYER_IDS_TO_IDX ( svc -> spatial_layer_id , i , svc -> number_temporal_layers ) ; LAYER_CONTEXT * lc = & svc -> layer_context [ layer ] ; RATE_CONTROL * lrc = & lc -> rc ; lrc -> last_q [ KEY_FRAME ] = rc -> last_q [ KEY_FRAME ] ; lrc -> avg_frame_qindex [ KEY_FRAME ] = rc -> avg_frame_qindex [ KEY_FRAME ] ; } } } else { if ( rc -> is_src_frame_alt_ref || ! <S2SV_ModEnd> ( cpi -> refresh_golden_frame <S2SV_ModStart> cpi -> refresh_alt_ref_frame ) || <S2SV_ModEnd> ( cpi -> use_svc <S2SV_ModStart> use_svc && oxcf -> rc_mode == VPX_CBR <S2SV_ModEnd> ) ) { rc <S2SV_ModStart> rc -> last_q [ INTER_FRAME ] = qindex <S2SV_ModEnd> ; rc -> avg_frame_qindex <S2SV_ModStart> rc -> avg_frame_qindex [ INTER_FRAME ] = <S2SV_ModEnd> ROUND_POWER_OF_TWO ( 3 * <S2SV_ModStart> rc -> avg_frame_qindex [ INTER_FRAME ] + qindex <S2SV_ModEnd> , 2 ) ; <S2SV_ModStart> tot_q += vp9_convert_qindex_to_q ( qindex , cm -> bit_depth <S2SV_ModEnd> ) ; rc -> <S2SV_ModStart> rc -> tot_q / <S2SV_ModEnd> rc -> ni_frames ; <S2SV_ModStart> rc -> ni_tot_qi += qindex <S2SV_ModEnd> ; rc -> ni_av_qi <S2SV_ModStart> -> ni_frames ; } } if ( ( qindex <S2SV_ModEnd> < rc -> last_boosted_qindex <S2SV_ModStart> -> last_boosted_qindex ) || <S2SV_ModEnd> ( cm -> frame_type <S2SV_ModStart> == KEY_FRAME ) || ( ! rc -> constrained_gf_group && ( <S2SV_ModStart> rc -> last_boosted_qindex = qindex ; } if ( cm -> frame_type == KEY_FRAME ) rc -> last_kf_qindex = qindex ; <S2SV_ModEnd> update_buffer_level ( cpi , <S2SV_ModStart> rc -> total_target_bits += <S2SV_ModEnd> cm -> show_frame ? <S2SV_ModStart> show_frame ? rc -> avg_frame_bandwidth : 0 <S2SV_ModEnd> ; rc -> total_target_vs_actual <S2SV_ModStart> total_target_bits ; if ( ! cpi -> use_svc ) { if ( is_altref_enabled ( cpi ) <S2SV_ModEnd> && cpi -> refresh_alt_ref_frame <S2SV_ModStart> ( cpi ) ; } <S2SV_ModStart> frames_to_key -- ; } if ( oxcf -> pass != 0 ) { cpi -> resize_pending = rc -> next_frame_size_selector != rc -> frame_size_selector ; rc -> frame_size_selector = rc -> next_frame_size_selector ; }
<S2SV_ModStart> ) ; cpi -> <S2SV_ModEnd> rc . frames_since_key ++ <S2SV_ModStart> . frames_to_key -- ; cpi -> rc . rc_2_frame = 0 ; cpi -> rc . rc_1_frame = 0 ;
<S2SV_ModStart> int i , target_bits_per_mb , bits_per_mb_at_this_q <S2SV_ModStart> active_best_quality ; do { if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cm -> seg . enabled && cpi -> svc . temporal_layer_id == 0 && cpi -> svc . spatial_layer_id == 0 ) { bits_per_mb_at_this_q = ( int ) vp9_cyclic_refresh_rc_bits_per_mb ( cpi , i , correction_factor ) ; } else { <S2SV_ModEnd> bits_per_mb_at_this_q = ( int <S2SV_ModStart> , i , correction_factor , cm -> bit_depth ) ; } <S2SV_ModEnd> if ( bits_per_mb_at_this_q <= <S2SV_ModStart> <= active_worst_quality ) ; if ( cpi -> oxcf . rc_mode == VPX_CBR && ( cpi -> rc . rc_1_frame * cpi -> rc . rc_2_frame == - 1 ) && cpi -> rc . q_1_frame != cpi -> rc . q_2_frame ) { q = clamp ( q , MIN ( cpi -> rc . q_1_frame , cpi -> rc . q_2_frame ) , MAX ( cpi -> rc . q_1_frame , cpi -> rc . q_2_frame ) ) ; }
<S2SV_ModStart> this_frame_target = target ; if ( cpi -> oxcf . resize_mode == RESIZE_DYNAMIC && rc -> frame_size_selector != UNSCALED ) rc -> this_frame_target = ( int ) ( rc -> this_frame_target * rate_thresh_mult [ rc -> frame_size_selector ] ) ;
<S2SV_ModStart> ( VP9_COMP * cpi <S2SV_ModEnd> ) { const VP9_COMMON <S2SV_ModStart> projected_size_based_on_q = 0 ; if ( cpi -> rc . is_src_frame_alt_ref ) return ; vpx_clear_system_state ( ) ; if ( cpi -> oxcf . aq_mode == CYCLIC_REFRESH_AQ && cpi -> common . seg . enabled ) { projected_size_based_on_q = vp9_cyclic_refresh_estimate_bits_at_q ( cpi , rate_correction_factor ) ; } else { projected_size_based_on_q = vp9_estimate_bits_at_q ( cpi -> common . <S2SV_ModEnd> frame_type , cm -> <S2SV_ModStart> -> MBs , rate_correction_factor , cm -> bit_depth ) ; } <S2SV_ModEnd> if ( projected_size_based_on_q > <S2SV_ModStart> if ( projected_size_based_on_q > FRAME_OVERHEAD_BITS ) correction_factor = ( int ) ( ( 100 * ( int64_t ) cpi -> rc . projected_frame_size ) / projected_size_based_on_q ) ; adjustment_limit = 0.25 + 0.5 * MIN ( 1 , fabs ( log10 ( 0.01 * correction_factor ) ) ) ; cpi -> rc . q_2_frame = cpi -> rc . q_1_frame ; cpi -> rc . q_1_frame = cm -> base_qindex ; cpi -> rc . rc_2_frame = cpi -> rc . rc_1_frame ; if ( correction_factor > 110 ) cpi -> rc . rc_1_frame = - 1 ; else if ( correction_factor < 90 ) cpi -> rc . rc_1_frame = 1 ; else cpi -> rc . rc_1_frame = 0 ; <S2SV_ModEnd> if ( correction_factor >
<S2SV_ModStart> rd2 , rd ; int rate ; int64_t dist ; int64_t sse ; if ( args -> exit_early <S2SV_ModEnd> ) return ; if <S2SV_ModStart> ( mbmi ) ) { struct encode_b_args arg = { x , NULL , & mbmi -> skip } ; vp9_encode_block_intra ( <S2SV_ModEnd> plane , block , <S2SV_ModStart> , tx_size , & arg ) ; dist_block ( x , plane , block , tx_size , & dist , & sse ) ; } else if ( max_txsize_lookup [ plane_bsize ] == tx_size ) { if ( x -> skip_txfm [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] == SKIP_TXFM_NONE ) { <S2SV_ModEnd> vp9_xform_quant ( x , <S2SV_ModStart> ) ; dist_block ( x , plane , block , tx_size , & dist , & sse ) ; } else if ( x -> skip_txfm [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] == SKIP_TXFM_AC_ONLY ) { tran_low_t * const coeff = BLOCK_OFFSET ( x -> plane [ plane ] . coeff , block ) ; tran_low_t * const dqcoeff = BLOCK_OFFSET ( xd -> plane [ plane ] . dqcoeff , block ) ; vp9_xform_quant_dc ( x , plane , block , plane_bsize , tx_size ) ; sse = x -> bsse [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] << 4 ; dist = sse ; if ( x -> plane [ plane ] . eobs [ block ] ) { const int64_t orig_sse = ( int64_t ) coeff [ 0 ] * coeff [ 0 ] ; const int64_t resd_sse = coeff [ 0 ] - dqcoeff [ 0 ] ; int64_t dc_correct = orig_sse - resd_sse * resd_sse ; # if CONFIG_VP9_HIGHBITDEPTH dc_correct >>= ( ( xd -> bd - 8 ) * 2 ) ; # endif if ( tx_size != TX_32X32 ) dc_correct >>= 2 ; dist = MAX ( 0 , sse - dc_correct ) ; } } else { x -> plane [ plane ] . eobs [ block ] = 0 ; sse = x -> bsse [ ( plane << 2 ) + ( block >> ( tx_size << 1 ) ) ] << 4 ; dist = sse ; } } else { vp9_xform_quant ( x , plane , block , plane_bsize , tx_size ) ; dist_block ( x , plane , block , tx_size , & dist , & sse ) ; } rd = RDCOST ( x -> rdmult , x -> rddiv , 0 , dist ) ; if ( args -> this_rd + rd > args -> best_rd ) { args -> exit_early = 1 ; return ; } rate = <S2SV_ModEnd> rate_block ( plane , <S2SV_ModStart> x -> rddiv , rate , <S2SV_ModEnd> dist ) ; rd2 <S2SV_ModStart> rddiv , 0 , <S2SV_ModEnd> sse ) ; rd <S2SV_ModStart> args -> this_rate += <S2SV_ModEnd> rate ; args -> <S2SV_ModStart> args -> this_dist += <S2SV_ModEnd> dist ; args -> <S2SV_ModStart> args -> this_sse += <S2SV_ModEnd> sse ; args -> <S2SV_ModStart> ) { args -> exit_early <S2SV_ModEnd> = 1 ; return <S2SV_ModStart> ; return ; } args -> skippable &= ! x -> plane [ plane ] . eobs [ block ] ;
<S2SV_ModStart> [ MAX_REF_FRAMES ] , int this_mode , const MV_REFERENCE_FRAME ref_frames [ 2 ] ) { if ( ( this_mode == NEARMV || this_mode == NEARESTMV || this_mode == ZEROMV ) && frame_mv [ this_mode ] [ ref_frames [ 0 ] ] . as_int == 0 && ( ref_frames [ 1 ] <S2SV_ModEnd> == NONE || frame_mv <S2SV_ModStart> [ this_mode ] [ ref_frames [ 1 ] <S2SV_ModEnd> ] . as_int == <S2SV_ModStart> rfc = mode_context [ ref_frames [ 0 ] <S2SV_ModEnd> ] ; int c1 <S2SV_ModStart> ) ; if ( ref_frames [ 1 ] <S2SV_ModEnd> == NONE ) { <S2SV_ModStart> [ NEARESTMV ] [ ref_frames [ 0 ] <S2SV_ModEnd> ] . as_int == <S2SV_ModStart> [ NEARMV ] [ ref_frames [ 0 ] <S2SV_ModEnd> ] . as_int == <S2SV_ModStart> [ NEARESTMV ] [ ref_frames [ 0 ] ] . as_int == 0 && frame_mv [ NEARESTMV ] [ ref_frames [ 1 ] <S2SV_ModEnd> ] . as_int == <S2SV_ModStart> [ NEARMV ] [ ref_frames [ 0 ] ] . as_int == 0 && frame_mv [ NEARMV ] [ ref_frames [ 1 ] <S2SV_ModEnd> ] . as_int ==
<S2SV_ModStart> VP9_COMP * cpi , MACROBLOCK * const x , <S2SV_ModStart> int * skip_uv , PREDICTION_MODE <S2SV_ModEnd> * mode_uv ) { <S2SV_ModStart> * mode_uv ) { <S2SV_ModEnd> if ( cpi ->
<S2SV_ModStart> static int conditional_skipintra ( PREDICTION_MODE mode , PREDICTION_MODE <S2SV_ModEnd> best_intra_mode ) { if
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int cost_coeffs ( MACROBLOCK <S2SV_ModStart> block ] ; const tran_low_t <S2SV_ModEnd> * const qcoeff = <S2SV_ModStart> c , cost ; # if CONFIG_VP9_HIGHBITDEPTH const int16_t * cat6_high_cost = vp9_get_high_cost_table ( xd -> bd ) ; # else const int16_t * cat6_high_cost = vp9_get_high_cost_table ( 8 ) ; # endif <S2SV_ModStart> : get_uv_tx_size ( mbmi , pd <S2SV_ModStart> [ 0 ] ; int16_t prev_t ; EXTRABIT e ; vp9_get_token_extra ( v , & prev_t , & e ) <S2SV_ModEnd> ; cost = ( <S2SV_ModStart> [ prev_t ] + vp9_get_cost ( prev_t , e , cat6_high_cost ) <S2SV_ModEnd> ; token_cache [ 0 <S2SV_ModStart> [ c ] ; int16_t <S2SV_ModEnd> t ; v = <S2SV_ModStart> [ rc ] ; vp9_get_token_extra ( v , & t , & e ) <S2SV_ModEnd> ; if ( use_fast_coef_costing <S2SV_ModStart> [ t ] + vp9_get_cost ( t , e , cat6_high_cost ) <S2SV_ModEnd> ; } else { <S2SV_ModStart> [ t ] + vp9_get_cost ( t , e , cat6_high_cost ) <S2SV_ModEnd> ; token_cache [ rc
<S2SV_ModStart> VP9_COMP * cpi , PREDICTION_MODE <S2SV_ModEnd> mode , int mode_context <S2SV_ModStart> mode , int mode_context <S2SV_ModEnd> ) { assert ( <S2SV_ModStart> ) ) ; return cpi <S2SV_ModEnd> -> inter_mode_cost [ mode_context <S2SV_ModStart> ) ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> static void dist_block ( MACROBLOCK * x , <S2SV_ModStart> , TX_SIZE tx_size , int64_t * out_dist , int64_t * out_sse <S2SV_ModEnd> ) { const int <S2SV_ModStart> = tx_size << 1 <S2SV_ModEnd> ; MACROBLOCKD * const <S2SV_ModStart> 0 : 2 ; tran_low_t <S2SV_ModEnd> * const coeff = <S2SV_ModStart> , block ) ; tran_low_t <S2SV_ModEnd> * const dqcoeff = <S2SV_ModStart> , block ) ; # if CONFIG_VP9_HIGHBITDEPTH const int bd = ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ? xd -> bd : 8 ; * out_dist = vp9_highbd_block_error <S2SV_ModEnd> ( coeff , dqcoeff <S2SV_ModStart> ss_txfrm_size , & this_sse , bd ) >> shift ; # else * out_dist = vp9_block_error ( coeff , dqcoeff , 16 << ss_txfrm_size , & this_sse ) >> shift ; # endif * out_sse <S2SV_ModEnd> = this_sse >> shift <S2SV_ModStart> ss_txfrm_size ) ) >> # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> ( shift + 2 + ( bd - 8 ) * 2 ) ; # else ( shift + 2 ) ; # endif * out_dist <S2SV_ModEnd> += ( p >> <S2SV_ModStart> >> 4 ) ; * out_sse <S2SV_ModEnd> += p ; }
<S2SV_ModStart> src . buf [ vp9_raster_block_offset <S2SV_ModEnd> ( BLOCK_8X8 , i <S2SV_ModStart> dst . buf [ vp9_raster_block_offset <S2SV_ModEnd> ( BLOCK_8X8 , i <S2SV_ModStart> InterpKernel * kernel = vp9_filter_kernels [ <S2SV_ModEnd> mi -> mbmi . <S2SV_ModStart> -> mbmi . interp_filter ] <S2SV_ModEnd> ; for ( ref <S2SV_ModStart> ] . buf [ vp9_raster_block_offset <S2SV_ModEnd> ( BLOCK_8X8 , i <S2SV_ModStart> stride ) ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_highbd_build_inter_predictor <S2SV_ModEnd> ( pre , pd <S2SV_ModStart> width , height , ref , <S2SV_ModEnd> kernel , MV_PRECISION_Q3 , <S2SV_ModStart> i / 2 ) , xd -> bd ) ; } else { vp9_build_inter_predictor ( pre , pd -> pre [ ref ] . stride , dst , pd -> dst . stride , & mi -> bmi [ i ] . as_mv [ ref ] . as_mv , & xd -> block_refs [ ref ] -> sf , width , height , ref , kernel , MV_PRECISION_Q3 , mi_col * MI_SIZE + 4 * ( i % 2 ) , mi_row * MI_SIZE + 4 * ( i / 2 ) ) ; } # else vp9_build_inter_predictor ( pre , pd -> pre [ ref ] . stride , dst , pd -> dst . stride , & mi -> bmi [ i ] . as_mv [ ref ] . as_mv , & xd -> block_refs [ ref ] -> sf , width , height , ref , kernel , MV_PRECISION_Q3 , mi_col * MI_SIZE + 4 * ( i % 2 ) , mi_row * MI_SIZE + 4 * ( i / 2 ) ) ; # endif } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbd_subtract_block ( height , width , vp9_raster_block_offset_int16 <S2SV_ModEnd> ( BLOCK_8X8 , i <S2SV_ModStart> src . stride , dst , pd -> dst . stride , xd -> bd ) ; } else { vpx_subtract_block ( height , width , vp9_raster_block_offset_int16 ( BLOCK_8X8 , i , p -> src_diff ) , 8 , src , p -> src . stride , dst , pd -> dst . stride ) ; } # else vpx_subtract_block ( height , width , vp9_raster_block_offset_int16 ( BLOCK_8X8 , i , p -> src_diff ) , 8 , src , p -> src . stride , dst , pd -> dst . stride ) ; # endif <S2SV_ModEnd> k = i ; <S2SV_ModStart> rd1 , rd2 ; tran_low_t <S2SV_ModEnd> * coeff ; k <S2SV_ModStart> x -> fwd_txm4x4 ( vp9_raster_block_offset_int16 <S2SV_ModEnd> ( BLOCK_8X8 , k <S2SV_ModStart> -> iscan ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { thisdistortion += vp9_highbd_block_error ( coeff , BLOCK_OFFSET ( pd -> dqcoeff , k ) , 16 , & ssz , xd -> bd ) ; } else { <S2SV_ModStart> & ssz ) ; } # else thisdistortion += vp9_block_error ( coeff , BLOCK_OFFSET ( pd -> dqcoeff , k ) , 16 , & ssz ) ; # endif
<S2SV_ModStart> static void estimate_ref_frame_costs ( const VP9_COMMON * cm , const MACROBLOCKD * xd , <S2SV_ModEnd> int segment_id , unsigned <S2SV_ModStart> int * ref_costs_comp , vpx_prob <S2SV_ModEnd> * comp_mode_p ) { <S2SV_ModStart> * comp_mode_p ) { int seg_ref_active = segfeature_active ( & cm -> seg , segment_id , SEG_LVL_REF_FRAME ) ; if ( seg_ref_active ) { memset <S2SV_ModEnd> ( ref_costs_single , 0 <S2SV_ModStart> ref_costs_single ) ) ; memset <S2SV_ModEnd> ( ref_costs_comp , 0 <S2SV_ModStart> ; } else { vpx_prob <S2SV_ModEnd> intra_inter_p = vp9_get_intra_inter_prob ( <S2SV_ModStart> , xd ) ; vpx_prob <S2SV_ModEnd> comp_inter_p = 128 ; <S2SV_ModStart> != COMPOUND_REFERENCE ) { vpx_prob <S2SV_ModEnd> ref_single_p1 = vp9_get_pred_prob_single_ref_p1 ( <S2SV_ModStart> , xd ) ; vpx_prob <S2SV_ModEnd> ref_single_p2 = vp9_get_pred_prob_single_ref_p2 ( <S2SV_ModStart> != SINGLE_REFERENCE ) { vpx_prob <S2SV_ModEnd> ref_comp_p = vp9_get_pred_prob_comp_ref_p (
<S2SV_ModStart> MACROBLOCK * x , BLOCK_SIZE bsize , int * rate2 , int64_t * distortion , int * skippable , int * rate_y , int * rate_uv , int * disable_skip <S2SV_ModEnd> , int_mv ( * <S2SV_ModStart> mi_col , int_mv single_newmv [ MAX_REF_FRAMES ] , INTERP_FILTER ( * single_filter ) [ MAX_REF_FRAMES ] , int ( * single_skippable ) <S2SV_ModStart> , const int64_t ref_best_rd , int64_t * mask_filter , int64_t filter_cache [ ] <S2SV_ModStart> 0 ] -> mbmi ; MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext <S2SV_ModStart> ) ; const int <S2SV_ModEnd> this_mode = mbmi -> <S2SV_ModStart> [ 2 ] ; # if CONFIG_VP9_HIGHBITDEPTH DECLARE_ALIGNED ( 16 , uint16_t , tmp_buf16 [ MAX_MB_PLANE * 64 * 64 ] ) ; uint8_t * tmp_buf ; # else DECLARE_ALIGNED ( 16 , uint8_t , tmp_buf [ <S2SV_ModEnd> MAX_MB_PLANE * 64 * <S2SV_ModStart> * 64 * 64 ] ) ; # endif <S2SV_ModEnd> int pred_exists = 0 <S2SV_ModStart> ; int64_t rd , tmp_rd , <S2SV_ModStart> rs = 0 ; INTERP_FILTER best_filter = SWITCHABLE ; uint8_t skip_txfm [ MAX_MB_PLANE << 2 ] = { 0 } ; int64_t bsse [ MAX_MB_PLANE << 2 ] = { 0 } ; int bsl = mi_width_log2_lookup [ bsize ] ; int pred_filter_search = cpi -> sf . cb_pred_filter_search ? ( ( ( mi_row + mi_col ) >> bsl ) + get_chessboard_index ( cm -> current_video_frame ) ) & 0x1 : 0 ; int skip_txfm_sb = 0 ; int64_t skip_sse_sb = INT64_MAX ; int64_t distortion_y = 0 , distortion_uv = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { tmp_buf = CONVERT_TO_BYTEPTR ( tmp_buf16 ) ; } else { tmp_buf = ( uint8_t * ) tmp_buf16 ; } # endif if ( pred_filter_search ) { INTERP_FILTER af = SWITCHABLE , lf = SWITCHABLE ; if ( xd -> up_available ) af = xd -> mi [ - xd -> mi_stride ] -> mbmi . interp_filter ; if ( xd -> left_available ) lf = xd -> mi [ - 1 ] -> mbmi . interp_filter ; if ( ( this_mode != NEWMV ) || ( af == lf ) ) best_filter = af ; } <S2SV_ModStart> ) return INT64_MAX ; if ( cpi -> sf . adaptive_mode_search ) { if ( single_filter [ this_mode ] [ refs [ 0 ] ] == single_filter [ this_mode ] [ refs [ 1 ] ] ) best_filter = single_filter [ this_mode ] [ refs [ 0 ] ] ; } <S2SV_ModStart> . as_mv , & x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ refs <S2SV_ModStart> . as_mv , & x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ refs <S2SV_ModStart> cpi , x , <S2SV_ModEnd> bsize , mi_row , <S2SV_ModStart> ) return INT64_MAX ; frame_mv [ refs [ 0 ] ] . as_int = xd -> mi [ 0 ] -> bmi [ 0 ] . as_mv [ 0 ] . as_int = tmp_mv . as_int ; single_newmv [ refs [ 0 ] ] . as_int = tmp_mv . as_int ; if ( discount_newmv_test ( cpi , this_mode , tmp_mv , mode_mv , refs [ 0 ] ) ) { * rate2 += MAX ( ( rate_mv / NEW_MV_DISCOUNT_FACTOR ) , 1 ) ; } else { <S2SV_ModStart> rate2 += rate_mv ; } <S2SV_ModEnd> } } for ( <S2SV_ModStart> 0 ; i < is_comp_pred + 1 <S2SV_ModEnd> ; ++ i ) <S2SV_ModStart> . stride ; } if ( discount_newmv_test ( cpi , this_mode , frame_mv [ refs [ 0 ] ] , mode_mv , refs [ 0 ] ) ) { * rate2 += MIN ( cost_mv_ref ( cpi , this_mode , mbmi_ext -> mode_context [ refs [ 0 ] ] ) , cost_mv_ref ( cpi , NEARESTMV , mbmi_ext -> mode_context [ refs [ 0 ] ] ) ) ; } else { <S2SV_ModStart> cpi , this_mode , mbmi_ext -> mode_context [ refs [ 0 ] ] ) ; } if ( RDCOST ( x -> rdmult , x -> rddiv , * rate2 , 0 ) > ref_best_rd && mbmi -> mode != NEARESTMV ) return INT64_MAX <S2SV_ModEnd> ; pred_exists = 0 <S2SV_ModStart> . as_mv ) ; <S2SV_ModEnd> for ( i = <S2SV_ModStart> ; ++ i ) filter_cache <S2SV_ModEnd> [ i ] = <S2SV_ModStart> != BILINEAR ) { <S2SV_ModEnd> if ( x -> <S2SV_ModStart> . disable_filter_search_var_thresh ) { <S2SV_ModEnd> best_filter = EIGHTTAP ; <S2SV_ModStart> EIGHTTAP ; } else if ( best_filter == SWITCHABLE ) <S2SV_ModStart> ; int64_t rs_rd ; int tmp_skip_sb = 0 ; int64_t tmp_skip_sse = INT64_MAX ; <S2SV_ModStart> rs = vp9_get_switchable_rate ( cpi , xd <S2SV_ModEnd> ) ; rs_rd = <S2SV_ModStart> , tmp_dist_sum ) ; filter_cache <S2SV_ModEnd> [ i ] = <S2SV_ModStart> ] = rd ; filter_cache <S2SV_ModEnd> [ SWITCHABLE_FILTERS ] = <S2SV_ModStart> ] = MIN ( filter_cache <S2SV_ModEnd> [ SWITCHABLE_FILTERS ] , <S2SV_ModStart> rd += rs_rd ; * mask_filter = MAX ( * mask_filter <S2SV_ModEnd> , rd ) ; <S2SV_ModStart> dist_sum = 0 ; if ( i > 0 && cpi -> sf . adaptive_interp_filter_search && ( cpi -> sf . interp_filter_search_mask & ( 1 << i ) ) ) { rate_sum = INT_MAX ; dist_sum = INT64_MAX ; continue ; } <S2SV_ModStart> rate_sum , & dist_sum , & tmp_skip_sb , & tmp_skip_sse <S2SV_ModStart> , dist_sum ) ; filter_cache <S2SV_ModEnd> [ i ] = <S2SV_ModStart> ] = rd ; filter_cache <S2SV_ModEnd> [ SWITCHABLE_FILTERS ] = <S2SV_ModStart> ] = MIN ( filter_cache <S2SV_ModEnd> [ SWITCHABLE_FILTERS ] , <S2SV_ModStart> rd += rs_rd ; * mask_filter = MAX ( * mask_filter <S2SV_ModEnd> , rd ) ; <S2SV_ModStart> best_rd = rd ; <S2SV_ModEnd> best_filter = mbmi -> <S2SV_ModStart> pred_exists = 1 ; tmp_rd = best_rd ; skip_txfm_sb = tmp_skip_sb ; skip_sse_sb = tmp_skip_sse ; memcpy ( skip_txfm , x -> skip_txfm , sizeof ( skip_txfm ) ) ; memcpy ( bsse , x -> bsse , sizeof ( bsse ) ) ; <S2SV_ModStart> cm -> interp_filter : <S2SV_ModEnd> best_filter ; rs = <S2SV_ModStart> SWITCHABLE ? vp9_get_switchable_rate ( cpi , xd <S2SV_ModEnd> ) : 0 ; <S2SV_ModStart> 64 ; } } rd = tmp_rd + RDCOST ( x -> rdmult , x -> rddiv , rs , 0 ) ; } else { int tmp_rate ; int64_t tmp_dist ; <S2SV_ModEnd> vp9_build_inter_predictors_sb ( xd , <S2SV_ModStart> , bsize ) ; model_rd_for_sb ( cpi , bsize , x , xd , & tmp_rate , & tmp_dist , & skip_txfm_sb , & skip_sse_sb ) ; rd = RDCOST ( x -> rdmult , x -> rddiv , rs + tmp_rate , tmp_dist ) ; memcpy ( skip_txfm , x -> skip_txfm , sizeof ( skip_txfm ) ) ; memcpy ( bsse , x -> bsse , sizeof ( bsse ) ) ; } if ( ! is_comp_pred ) single_filter [ this_mode ] [ refs [ 0 ] ] = mbmi -> interp_filter ; if ( cpi -> sf . adaptive_mode_search ) if ( is_comp_pred ) if ( single_skippable [ this_mode ] [ refs [ 0 ] ] && single_skippable [ this_mode ] [ refs [ 1 ] ] ) memset ( skip_txfm , SKIP_TXFM_AC_DC , sizeof ( skip_txfm ) ) ; <S2SV_ModEnd> if ( cpi -> <S2SV_ModStart> < INT64_MAX ) { <S2SV_ModEnd> if ( rd / <S2SV_ModStart> ) * rate2 += rs ; memcpy ( x -> skip_txfm , skip_txfm , sizeof ( skip_txfm ) ) ; memcpy ( x -> bsse , bsse , sizeof ( bsse ) <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ; if ( ! skip_txfm_sb ) { int skippable_y , skippable_uv ; int64_t sseuv = INT64_MAX ; int64_t rdcosty = INT64_MAX ; vp9_subtract_plane ( x , bsize , 0 ) ; super_block_yrd ( cpi , x , rate_y , & distortion_y , & skippable_y , psse , bsize , ref_best_rd ) ; if ( * rate_y == INT_MAX ) { * rate2 = INT_MAX ; * distortion = INT64_MAX ; restore_dst_buf ( xd , orig_dst , orig_dst_stride ) ; return INT64_MAX ; } * rate2 += * rate_y ; * distortion += distortion_y ; rdcosty = RDCOST ( x -> rdmult , x -> rddiv , * rate2 , * distortion ) ; rdcosty = MIN ( rdcosty , RDCOST ( x -> rdmult , x -> rddiv , 0 , * psse ) ) ; if ( ! super_block_uvrd ( cpi , x , rate_uv , & distortion_uv , & skippable_uv , & sseuv , bsize , ref_best_rd - rdcosty ) ) { * rate2 = INT_MAX ; * distortion = INT64_MAX ; restore_dst_buf ( xd , orig_dst , orig_dst_stride ) ; return INT64_MAX ; } * psse += sseuv ; * rate2 += * rate_uv ; * distortion += distortion_uv ; * skippable = skippable_y && skippable_uv ; } else { <S2SV_ModEnd> x -> skip = <S2SV_ModStart> skip = 1 ; * disable_skip <S2SV_ModEnd> = 1 ; * <S2SV_ModStart> 1 ) ; * distortion = skip_sse_sb ; <S2SV_ModEnd> } if ( ! <S2SV_ModStart> } if ( ! is_comp_pred ) single_skippable [ this_mode ] [ refs [ 0 ] ] = * skippable <S2SV_ModEnd> ; restore_dst_buf ( xd <S2SV_ModStart> orig_dst_stride ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> rate_mv ) { const VP9_COMMON * const cm = & cpi -> common ; const <S2SV_ModStart> ite , ref ; <S2SV_ModEnd> const InterpKernel * kernel <S2SV_ModStart> InterpKernel * kernel = vp9_filter_kernels [ mbmi -> interp_filter ] ; struct scale_factors sf <S2SV_ModEnd> ; struct buf_2d backup_yv12 <S2SV_ModStart> [ MAX_MB_PLANE ] ; <S2SV_ModEnd> int last_besterr [ 2 <S2SV_ModStart> ] ) } ; # if CONFIG_VP9_HIGHBITDEPTH DECLARE_ALIGNED ( 16 , uint16_t , second_pred_alloc_16 [ 64 * 64 ] ) ; uint8_t * second_pred ; # else DECLARE_ALIGNED ( 16 , uint8_t , second_pred [ 64 * 64 ] ) ; # endif <S2SV_ModStart> [ ref ] = x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ refs <S2SV_ModStart> . as_int ; } # if CONFIG_VP9_HIGHBITDEPTH vp9_setup_scale_factors_for_frame ( & sf , cm -> width , cm -> height , cm -> width , cm -> height , cm -> use_highbitdepth ) ; # else vp9_setup_scale_factors_for_frame ( & sf , cm -> width , cm -> height , cm -> width , cm -> height ) ; # endif <S2SV_ModStart> x -> sadperbit16 ; MV <S2SV_ModEnd> tmp_mv ; int search_range <S2SV_ModStart> [ 1 ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { second_pred = CONVERT_TO_BYTEPTR ( second_pred_alloc_16 ) ; vp9_highbd_build_inter_predictor ( ref_yv12 [ ! id ] . buf , ref_yv12 [ ! id ] . stride , second_pred , pw , & frame_mv [ refs [ ! id ] ] . as_mv , & sf , pw , ph , 0 , kernel , MV_PRECISION_Q3 , mi_col * MI_SIZE , mi_row * MI_SIZE , xd -> bd ) ; } else { second_pred = ( uint8_t * ) second_pred_alloc_16 ; <S2SV_ModStart> . as_mv , & sf , pw , ph , 0 , kernel , MV_PRECISION_Q3 , mi_col * MI_SIZE , mi_row * MI_SIZE ) ; } # else vp9_build_inter_predictor ( ref_yv12 [ ! id ] . buf , ref_yv12 [ ! id ] . stride , second_pred , pw , & frame_mv [ refs [ ! id ] ] . as_mv , & sf , pw , ph , 0 , kernel , MV_PRECISION_Q3 , mi_col * MI_SIZE , mi_row * MI_SIZE ) ; # endif if ( id ) xd -> <S2SV_ModEnd> plane [ 0 ] <S2SV_ModStart> as_mv ) ; tmp_mv <S2SV_ModEnd> = frame_mv [ refs <S2SV_ModStart> id ] ] . as_mv ; tmp_mv <S2SV_ModEnd> . col >>= 3 <S2SV_ModStart> 3 ; tmp_mv . <S2SV_ModEnd> row >>= 3 ; <S2SV_ModStart> x , & tmp_mv , sadpb , search_range , & cpi -> fn_ptr [ bsize ] , & ref_mv [ id ] . as_mv , second_pred <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> x , & tmp_mv <S2SV_ModEnd> , & ref_mv [ <S2SV_ModStart> bestsme = cpi -> find_fractional_mv_step <S2SV_ModEnd> ( x , & <S2SV_ModStart> x , & tmp_mv , & ref_mv [ id ] . as_mv , <S2SV_ModEnd> cpi -> common . <S2SV_ModStart> cpi -> sf . mv . subpel_iters_per_step , NULL , <S2SV_ModEnd> x -> nmvjointcost , <S2SV_ModStart> [ 0 ] = ref_yv12 [ 0 ] <S2SV_ModEnd> ; if ( bestsme <S2SV_ModStart> id ] ] . as_mv = tmp_mv <S2SV_ModEnd> ; last_besterr [ id <S2SV_ModStart> . as_mv , & x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ refs <S2SV_ModStart> MV_COST_WEIGHT ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> src . buf [ vp9_raster_block_offset <S2SV_ModEnd> ( BLOCK_8X8 , i <S2SV_ModStart> ] . buf [ vp9_raster_block_offset <S2SV_ModEnd> ( BLOCK_8X8 , i <S2SV_ModStart> ] . buf [ vp9_raster_block_offset <S2SV_ModEnd> ( BLOCK_8X8 , i
<S2SV_ModStart> , int64_t * out_dist_sum , int * skip_txfm_sb , int64_t * skip_sse_sb <S2SV_ModStart> unsigned int sse ; unsigned int var = 0 ; unsigned int sum_sse = 0 ; int64_t total_sse = 0 ; int skip_flag = 1 ; const int shift = 6 ; int rate ; int64_t dist ; const int dequant_shift = # if CONFIG_VP9_HIGHBITDEPTH ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) ? xd -> bd - 5 : # endif 3 ; x -> pred_sse [ ref ] = 0 ; <S2SV_ModStart> , pd ) ; const TX_SIZE max_tx_size = max_txsize_lookup [ bs ] ; const BLOCK_SIZE unit_size = txsize_to_bsize [ max_tx_size ] ; const int64_t dc_thr = p -> quant_thred [ 0 ] >> shift ; const int64_t ac_thr = p -> quant_thred [ 1 ] >> shift ; const int64_t low_dc_thr = MIN ( 50 , dc_thr >> 2 ) ; const int64_t low_ac_thr = MIN ( 80 , ac_thr >> 2 ) ; int bw = 1 << ( b_width_log2_lookup [ bs ] - b_width_log2_lookup [ unit_size ] ) ; int bh = 1 << ( b_height_log2_lookup [ bs ] - b_width_log2_lookup [ unit_size ] ) ; int idx , idy ; int lw = b_width_log2_lookup [ unit_size ] + 2 ; int lh = b_height_log2_lookup [ unit_size ] + 2 ; sum_sse = 0 ; for ( idy = 0 ; idy < bh ; ++ idy ) { for ( idx = 0 ; idx < bw ; ++ idx ) { uint8_t * src = <S2SV_ModEnd> p -> src . <S2SV_ModStart> -> src . buf + ( idy * <S2SV_ModEnd> p -> src . <S2SV_ModStart> -> src . stride << lh ) + ( idx << lw ) ; uint8_t * dst = <S2SV_ModEnd> pd -> dst . <S2SV_ModStart> -> dst . buf + ( idy * <S2SV_ModEnd> pd -> dst . <S2SV_ModStart> -> dst . stride << lh ) + ( idx << lh ) ; int block_idx = ( idy << 1 ) + idx ; int low_err_skip = 0 ; var = cpi -> fn_ptr [ unit_size ] . vf ( src , p -> src . stride , dst , pd -> dst . stride <S2SV_ModStart> & sse ) ; x -> bsse [ ( i << 2 ) + block_idx ] = sse ; sum_sse += sse ; x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_NONE ; if ( ! x -> select_tx_size ) { if ( var < ac_thr || var == 0 ) { x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_AC_ONLY ; if ( sse - var < dc_thr || sse == var ) { x -> skip_txfm [ ( i << 2 ) + block_idx ] = SKIP_TXFM_AC_DC ; if ( ! sse || ( var < low_ac_thr && sse - var < low_dc_thr ) ) low_err_skip = 1 ; } } } if ( skip_flag && ! low_err_skip ) skip_flag = 0 ; if ( i == 0 ) x -> <S2SV_ModEnd> pred_sse [ ref ] <S2SV_ModStart> pred_sse [ ref ] += sse ; } } total_sse += sum_sse ; <S2SV_ModEnd> if ( cpi -> <S2SV_ModStart> if ( cpi -> sf . simple_model_rd_from_var <S2SV_ModEnd> ) { int64_t rate <S2SV_ModStart> { int64_t rate ; const int64_t square_error = sum_sse <S2SV_ModEnd> ; int quantizer = <S2SV_ModStart> [ 1 ] >> dequant_shift <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ; } else { vp9_model_rd_from_var_lapndz ( sum_sse , num_pels_log2_lookup [ bs ] , pd -> dequant [ 1 ] >> dequant_shift , <S2SV_ModEnd> & rate , & <S2SV_ModStart> ; } } * skip_txfm_sb = skip_flag ; * skip_sse_sb = total_sse << 4 ; *
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rate_block ( int plane <S2SV_ModStart> & y_idx ) ; return <S2SV_ModEnd> cost_coeffs ( args ->
<S2SV_ModStart> * x , int row , int col , PREDICTION_MODE <S2SV_ModEnd> * best_mode , const <S2SV_ModStart> int64_t rd_thresh ) { PREDICTION_MODE <S2SV_ModEnd> mode ; MACROBLOCKD * <S2SV_ModStart> src . buf [ row * 4 * src_stride + col * 4 <S2SV_ModEnd> ] ; uint8_t * <S2SV_ModStart> dst . buf [ row * 4 * src_stride + col * 4 <S2SV_ModEnd> ] ; ENTROPY_CONTEXT ta <S2SV_ModStart> * 8 ] ; # if CONFIG_VP9_HIGHBITDEPTH uint16_t best_dst16 [ 8 * 8 ] ; # endif memcpy <S2SV_ModEnd> ( ta , a <S2SV_ModStart> ta ) ) ; memcpy <S2SV_ModEnd> ( tl , l <S2SV_ModStart> tx_size = TX_4X4 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> ) continue ; } memcpy <S2SV_ModEnd> ( tempa , ta <S2SV_ModStart> ta ) ) ; memcpy <S2SV_ModEnd> ( templ , tl <S2SV_ModStart> const int block = ( row + idy ) * 2 + ( col + idx ) <S2SV_ModEnd> ; const uint8_t * <S2SV_ModStart> * const src_diff = vp9_raster_block_offset_int16 <S2SV_ModEnd> ( BLOCK_8X8 , block <S2SV_ModStart> -> src_diff ) ; tran_low_t <S2SV_ModEnd> * const coeff = <S2SV_ModStart> vp9_predict_intra_block ( xd , <S2SV_ModEnd> 1 , TX_4X4 , <S2SV_ModStart> dst , dst_stride , col + idx , row + idy , 0 ) ; vpx_highbd_subtract_block <S2SV_ModEnd> ( 4 , 4 <S2SV_ModStart> , dst , dst_stride , xd -> bd <S2SV_ModStart> [ TX_4X4 ] ; vp9_highbd_fwht4x4 <S2SV_ModEnd> ( src_diff , coeff <S2SV_ModStart> >= best_rd ) goto next_highbd ; vp9_highbd_iwht4x4_add <S2SV_ModEnd> ( BLOCK_OFFSET ( pd <S2SV_ModStart> eobs [ block ] , xd -> bd <S2SV_ModStart> [ tx_type ] ; if ( tx_type == DCT_DCT ) vpx_highbd_fdct4x4 ( src_diff , coeff , 8 ) ; else vp9_highbd_fht4x4 <S2SV_ModEnd> ( src_diff , coeff <S2SV_ModStart> ) ; distortion += vp9_highbd_block_error ( <S2SV_ModEnd> coeff , BLOCK_OFFSET ( <S2SV_ModStart> 16 , & unused , xd -> bd <S2SV_ModStart> >= best_rd ) goto next_highbd ; vp9_highbd_iht4x4_add <S2SV_ModEnd> ( tx_type , BLOCK_OFFSET <S2SV_ModStart> eobs [ block ] , xd -> bd <S2SV_ModStart> best_mode = mode ; memcpy <S2SV_ModEnd> ( a , tempa <S2SV_ModStart> tempa ) ) ; memcpy <S2SV_ModEnd> ( l , templ <S2SV_ModStart> ; ++ idy ) { memcpy ( best_dst16 <S2SV_ModEnd> + idy * 8 <S2SV_ModStart> idy * 8 , CONVERT_TO_SHORTPTR ( <S2SV_ModStart> + idy * dst_stride ) <S2SV_ModStart> , num_4x4_blocks_wide * 4 * sizeof ( uint16_t ) ) ; } } next_highbd <S2SV_ModEnd> : { } } <S2SV_ModStart> ; ++ idy ) { memcpy ( CONVERT_TO_SHORTPTR <S2SV_ModEnd> ( dst_init + idy <S2SV_ModStart> + idy * dst_stride ) , best_dst16 <S2SV_ModEnd> + idy * 8 <S2SV_ModStart> , num_4x4_blocks_wide * 4 * sizeof ( uint16_t ) ) ; } <S2SV_ModEnd> return best_rd ; } <S2SV_ModStart> return best_rd ; } # endif for ( mode = DC_PRED ; mode <= TM_PRED ; ++ mode ) { int64_t this_rd ; int ratey = 0 ; int64_t distortion = 0 ; int rate = bmode_costs [ mode ] ; if ( ! ( cpi -> sf . intra_y_mode_mask [ TX_4X4 ] & ( 1 << mode ) ) ) continue ; if ( cpi -> sf . mode_search_skip_flags & FLAG_SKIP_INTRA_DIRMISMATCH ) { if ( conditional_skipintra ( mode , * best_mode ) ) continue ; } memcpy ( tempa , ta , sizeof ( ta ) ) ; memcpy ( templ , tl , sizeof ( tl ) ) ; for ( idy = 0 ; idy < num_4x4_blocks_high ; ++ idy ) { for ( idx = 0 ; idx < num_4x4_blocks_wide ; ++ idx ) { const int block = ( row + idy ) * 2 + ( col + idx ) ; const uint8_t * const src = & src_init [ idx * 4 + idy * 4 * src_stride ] ; uint8_t * const dst = & dst_init [ idx * 4 + idy * 4 * dst_stride ] ; int16_t * const src_diff = vp9_raster_block_offset_int16 ( BLOCK_8X8 , block , p -> src_diff ) ; tran_low_t * const coeff = BLOCK_OFFSET ( x -> plane [ 0 ] . coeff , block ) ; xd -> mi [ 0 ] -> bmi [ block ] . as_mode = mode ; vp9_predict_intra_block ( xd , 1 , TX_4X4 , mode , x -> skip_encode ? src : dst , x -> skip_encode ? src_stride : dst_stride , dst , dst_stride , col + idx , row + idy , 0 ) ; vpx_subtract_block ( 4 , 4 , src_diff , 8 , src , src_stride , dst , dst_stride ) ; if ( xd -> lossless ) { const scan_order * so = & vp9_default_scan_orders [ TX_4X4 ] ; vp9_fwht4x4 ( src_diff , coeff , 8 ) ; vp9_regular_quantize_b_4x4 ( x , 0 , block , so -> scan , so -> iscan ) ; ratey += cost_coeffs ( x , 0 , block , tempa + idx , templ + idy , TX_4X4 , so -> scan , so -> neighbors , cpi -> sf . use_fast_coef_costing ) ; if ( RDCOST ( x -> rdmult , x -> rddiv , ratey , distortion ) >= best_rd ) goto next ; vp9_iwht4x4_add ( BLOCK_OFFSET ( pd -> dqcoeff , block ) , dst , dst_stride , p -> eobs [ block ] ) ; } else { int64_t unused ; const TX_TYPE tx_type = get_tx_type_4x4 ( PLANE_TYPE_Y , xd , block ) ; const scan_order * so = & vp9_scan_orders [ TX_4X4 ] [ tx_type ] ; vp9_fht4x4 ( src_diff , coeff , 8 , tx_type ) ; vp9_regular_quantize_b_4x4 ( x , 0 , block , so -> scan , so -> iscan ) ; ratey += cost_coeffs ( x , 0 , block , tempa + idx , templ + idy , TX_4X4 , so -> scan , so -> neighbors , cpi -> sf . use_fast_coef_costing ) ; distortion += vp9_block_error ( coeff , BLOCK_OFFSET ( pd -> dqcoeff , block ) , 16 , & unused ) >> 2 ; if ( RDCOST ( x -> rdmult , x -> rddiv , ratey , distortion ) >= best_rd ) goto next ; vp9_iht4x4_add ( tx_type , BLOCK_OFFSET ( pd -> dqcoeff , block ) , dst , dst_stride , p -> eobs [ block ] ) ; } } } rate += ratey ; this_rd = RDCOST ( x -> rdmult , x -> rddiv , rate , distortion ) ; if ( this_rd < best_rd ) { * bestrate = rate ; * bestratey = ratey ; * bestdistortion = distortion ; best_rd = this_rd ; * best_mode = mode ; memcpy ( a , tempa , sizeof ( tempa ) ) ; memcpy ( l , templ , sizeof ( templ ) ) ; for ( idy = 0 ; idy < num_4x4_blocks_high * 4 ; ++ idy ) memcpy ( best_dst + idy * 8 , dst_init + idy * dst_stride , num_4x4_blocks_wide * 4 ) ; } next : { } } if ( best_rd >= rd_thresh || x -> skip_encode ) return best_rd ; for ( idy = 0 ; idy < num_4x4_blocks_high * 4 ; ++ idy ) memcpy ( dst_init + idy * dst_stride , best_dst + idy * 8 , num_4x4_blocks_wide * 4 ) ; return best_rd ; }
<S2SV_ModStart> x -> e_mbd ; PREDICTION_MODE mode ; PREDICTION_MODE <S2SV_ModEnd> mode_selected = DC_PRED ; <S2SV_ModStart> int64_t this_distortion , this_sse ; memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) <S2SV_ModStart> uv_mode = mode ; if ( ! <S2SV_ModStart> bsize , best_rd ) <S2SV_ModEnd> ) continue ; this_rate <S2SV_ModStart> this_rate = this_rate_tokenonly + cpi <S2SV_ModEnd> -> intra_uv_mode_cost [ cpi <S2SV_ModStart> ( ! x -> select_tx_size ) swap_block_ptr ( x , ctx , 2 , 0 , 1 , MAX_MB_PLANE ) ; <S2SV_ModEnd> } } xd ->
<S2SV_ModStart> BLOCK_SIZE bsize , int64_t best_rd ) { PREDICTION_MODE mode ; PREDICTION_MODE <S2SV_ModEnd> mode_selected = DC_PRED ; <S2SV_ModStart> = TX_4X4 ; int * bmode_costs ; const MODE_INFO * above_mi = xd -> above_mi ; const MODE_INFO * left_mi = xd -> left_mi ; const PREDICTION_MODE A = vp9_above_block_mode ( mic , above_mi , 0 ) ; const PREDICTION_MODE L = vp9_left_block_mode ( mic , left_mi , 0 ) ; bmode_costs = cpi <S2SV_ModEnd> -> y_mode_costs [ A <S2SV_ModStart> [ L ] ; memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) ; for ( mode = DC_PRED ; mode <= TM_PRED ; mode ++ ) { if ( cpi -> sf . use_nonrd_pick_mode ) { if ( conditional_skipintra ( mode , mode_selected ) ) continue ; if ( * skippable ) break ; <S2SV_ModStart> mode = mode ; super_block_yrd <S2SV_ModEnd> ( cpi , x <S2SV_ModStart> , NULL , bsize <S2SV_ModEnd> , best_rd ) ; <S2SV_ModStart> = s ; } <S2SV_ModEnd> } mic -> mbmi
<S2SV_ModStart> above_mi = xd -> above_mi <S2SV_ModEnd> ; const MODE_INFO * <S2SV_ModStart> left_mi = xd -> left_mi <S2SV_ModEnd> ; const BLOCK_SIZE bsize <S2SV_ModStart> int * bmode_costs = cpi -> mbmode_cost ; memcpy <S2SV_ModEnd> ( t_above , xd <S2SV_ModStart> t_above ) ) ; memcpy <S2SV_ModEnd> ( t_left , xd <S2SV_ModStart> += num_4x4_blocks_wide ) { PREDICTION_MODE <S2SV_ModEnd> best_mode = DC_PRED ; <S2SV_ModStart> KEY_FRAME ) { const PREDICTION_MODE <S2SV_ModEnd> A = vp9_above_block_mode ( <S2SV_ModStart> i ) ; const PREDICTION_MODE <S2SV_ModEnd> L = vp9_left_block_mode ( <S2SV_ModStart> ) ; bmode_costs = cpi -> y_mode_costs [ A ] [ L ] ; } this_rd = rd_pick_intra4x4block ( cpi , mb , idy , idx <S2SV_ModEnd> , & best_mode ,
<S2SV_ModStart> uv_mode = DC_PRED ; memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) ; <S2SV_ModStart> = * rate_tokenonly + cpi <S2SV_ModEnd> -> intra_uv_mode_cost [ cm
<S2SV_ModStart> MACROBLOCK * x , <S2SV_ModEnd> BLOCK_SIZE bsize , int <S2SV_ModStart> x -> e_mbd ; const <S2SV_ModStart> = { { 0 , 0 <S2SV_ModStart> = INT_MAX ; int <S2SV_ModEnd> step_param ; int sadpb <S2SV_ModStart> ; MV ref_mv = x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ ref <S2SV_ModStart> = x -> mv_row_max ; int cost_list [ 5 ] <S2SV_ModStart> [ 0 ] = x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ ref <S2SV_ModStart> [ 1 ] = x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ ref <S2SV_ModStart> pred_mv [ ref ] <S2SV_ModEnd> ; if ( scaled_ref_frame <S2SV_ModStart> cpi -> sf . mv . auto_mv_step_size && cm -> <S2SV_ModEnd> show_frame ) { step_param <S2SV_ModStart> = ( vp9_init_search_range ( <S2SV_ModEnd> x -> max_mv_context [ <S2SV_ModStart> cpi -> mv_step_param ) / 2 <S2SV_ModEnd> ; } else { <S2SV_ModStart> && bsize < BLOCK_64X64 <S2SV_ModEnd> ) { int boffset <S2SV_ModStart> = 2 * ( b_width_log2_lookup [ BLOCK_64X64 ] - MIN ( b_height_log2_lookup [ bsize ] , b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ) ) ; step_param <S2SV_ModStart> b_height_log2_lookup [ bsize ] <S2SV_ModEnd> ; int tlevel = <S2SV_ModStart> step_param += 2 ; if ( cpi -> oxcf . resize_mode != RESIZE_DYNAMIC ) { int i ; <S2SV_ModStart> i <= ALTREF_FRAME && cm -> <S2SV_ModEnd> show_frame ; ++ i <S2SV_ModStart> [ ref ] . row = 0 ; x -> pred_mv [ ref ] . col <S2SV_ModEnd> = 0 ; tmp_mv <S2SV_ModStart> i < MAX_MB_PLANE ; ++ i <S2SV_ModEnd> ) xd -> plane <S2SV_ModStart> ; } return ; } <S2SV_ModStart> row >>= 3 ; bestsme = vp9_full_pixel_search ( cpi , x , bsize , & mvp_full , step_param , sadpb , cond_cost_list ( cpi , cost_list ) , & ref_mv , & tmp_mv -> as_mv , INT_MAX , 1 ) ; x -> mv_col_min = tmp_col_min ; x -> mv_col_max = tmp_col_max ; x -> mv_row_min = tmp_row_min ; x -> mv_row_max = tmp_row_max <S2SV_ModEnd> ; if ( bestsme <S2SV_ModStart> bestsme < INT_MAX ) { int dis ; cpi -> find_fractional_mv_step <S2SV_ModEnd> ( x , & <S2SV_ModStart> , & ref_mv , cm -> allow_high_precision_mv , x -> errorperbit , <S2SV_ModStart> [ bsize ] , <S2SV_ModEnd> cpi -> sf . <S2SV_ModStart> cpi -> sf . mv . subpel_force_stop , <S2SV_ModEnd> cpi -> sf . <S2SV_ModStart> cpi -> sf . mv . subpel_iters_per_step , cond_cost_list ( cpi , cost_list ) , x -> nmvjointcost , x -> mvcost , & dis <S2SV_ModEnd> , & x -> <S2SV_ModStart> pred_sse [ ref ] , NULL , 0 , 0 <S2SV_ModStart> -> sf . adaptive_motion_search <S2SV_ModEnd> ) x -> pred_mv <S2SV_ModStart> pred_mv [ ref ] = tmp_mv -> as_mv <S2SV_ModEnd> ; if ( scaled_ref_frame
<S2SV_ModStart> , int mode_index , <S2SV_ModEnd> int64_t comp_pred_diff [ REFERENCE_MODES <S2SV_ModStart> REFERENCE_MODES ] , int64_t <S2SV_ModEnd> best_filter_diff [ SWITCHABLE_FILTER_CONTEXTS ] <S2SV_ModStart> best_filter_diff [ SWITCHABLE_FILTER_CONTEXTS ] , int skippable <S2SV_ModStart> skip ; ctx -> skippable = skippable ; ctx -> <S2SV_ModStart> ] ; ctx -> mbmi_ext = * x -> mbmi_ext <S2SV_ModEnd> ; ctx -> single_pred_diff <S2SV_ModStart> [ REFERENCE_MODE_SELECT ] ; memcpy <S2SV_ModEnd> ( ctx -> best_filter_diff
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> super_block_uvrd ( const VP9_COMP <S2SV_ModStart> ] -> mbmi ; const TX_SIZE uv_tx_size <S2SV_ModEnd> = get_uv_tx_size ( mbmi <S2SV_ModStart> = get_uv_tx_size ( mbmi , & xd -> plane [ 1 ] <S2SV_ModStart> pnsse = 0 ; int is_cost_valid = 1 ; <S2SV_ModStart> ref_best_rd < 0 ) is_cost_valid = 0 <S2SV_ModEnd> ; if ( is_inter_block <S2SV_ModStart> is_inter_block ( mbmi ) && is_cost_valid <S2SV_ModStart> plane , bsize , uv_tx_size <S2SV_ModEnd> , cpi -> sf <S2SV_ModStart> pnrate == INT_MAX ) { is_cost_valid = 0 ; break ; } <S2SV_ModEnd> * rate += pnrate <S2SV_ModStart> &= pnskip ; } if ( ! is_cost_valid ) { * rate = INT_MAX ; * distortion = INT64_MAX ; * sse = INT64_MAX ; * skippable = 0 ; } return is_cost_valid <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * ctx , int m , int n , int min_plane , int max_plane ) { int i ; for ( i = min_plane ; i < max_plane ; ++ i ) { <S2SV_ModEnd> struct macroblock_plane * const <S2SV_ModStart> * const p = & x -> plane [ i ] <S2SV_ModEnd> ; struct macroblockd_plane * <S2SV_ModStart> * const pd = & <S2SV_ModStart> -> e_mbd . plane [ i ] ; p -> <S2SV_ModEnd> coeff = ctx -> <S2SV_ModStart> [ i ] [ m ] ; p -> <S2SV_ModEnd> qcoeff = ctx -> <S2SV_ModStart> [ i ] [ m ] ; pd -> <S2SV_ModEnd> dqcoeff = ctx -> <S2SV_ModStart> [ i ] [ m ] ; p -> <S2SV_ModEnd> eobs = ctx -> <S2SV_ModStart> [ i ] [ m ] ; ctx -> coeff_pbuf [ i ] [ m ] = ctx -> coeff_pbuf [ i ] [ n ] ; ctx -> qcoeff_pbuf [ i ] [ m ] = ctx -> qcoeff_pbuf [ i ] [ n ] ; ctx -> dqcoeff_pbuf [ i ] [ m ] = ctx -> dqcoeff_pbuf [ i ] [ n ] ; ctx -> eobs_pbuf [ i ] [ m ] = ctx -> eobs_pbuf [ i ] [ n ] ; ctx -> coeff_pbuf [ i ] [ n ] = p -> <S2SV_ModEnd> coeff ; ctx -> <S2SV_ModStart> [ i ] [ n ] = p -> <S2SV_ModEnd> qcoeff ; ctx -> <S2SV_ModStart> [ i ] [ n ] = pd -> <S2SV_ModEnd> dqcoeff ; ctx -> <S2SV_ModStart> [ i ] [ n ] = p -> <S2SV_ModEnd> eobs ; } }
<S2SV_ModStart> ; struct rdcost_block_args args ; vp9_zero ( args ) <S2SV_ModEnd> ; args . x <S2SV_ModStart> . use_fast_coef_costing = use_fast_coef_casting ; args . skippable = 1 <S2SV_ModStart> if ( args . exit_early <S2SV_ModEnd> ) { * rate <S2SV_ModStart> ; * skippable = args . skippable <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> int64_t vp9_block_error_c ( const tran_low_t <S2SV_ModEnd> * coeff , const <S2SV_ModStart> * coeff , const tran_low_t <S2SV_ModEnd> * dqcoeff , intptr_t
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_rd_pick_inter_mode_sb ( VP9_COMP * <S2SV_ModStart> VP9_COMP * cpi , TileDataEnc * tile_data , <S2SV_ModStart> MACROBLOCK * x , <S2SV_ModEnd> int mi_row , int <S2SV_ModStart> , int mi_col , RD_COST * rd_cost , <S2SV_ModEnd> BLOCK_SIZE bsize , PICK_MODE_CONTEXT <S2SV_ModStart> cpi -> common ; TileInfo * const tile_info = & tile_data -> tile_info ; RD_OPT * const rd_opt = & cpi -> rd ; SPEED_FEATURES * const sf = & cpi -> sf ; <S2SV_ModStart> 0 ] -> mbmi ; MB_MODE_INFO_EXT * const mbmi_ext = x -> mbmi_ext <S2SV_ModStart> cm -> seg ; PREDICTION_MODE <S2SV_ModEnd> this_mode ; MV_REFERENCE_FRAME ref_frame <S2SV_ModStart> int comp_pred , i , k <S2SV_ModStart> { 0 } } ; INTERP_FILTER single_inter_filter [ MB_MODE_COUNT ] [ MAX_REF_FRAMES ] ; int single_skippable [ MB_MODE_COUNT ] [ MAX_REF_FRAMES ] <S2SV_ModStart> = best_rd_so_far ; int64_t <S2SV_ModEnd> best_pred_diff [ REFERENCE_MODES ] <S2SV_ModStart> ] ; MB_MODE_INFO best_mbmode ; int best_mode_skippable = 0 ; int midx , best_mode_index = - 1 <S2SV_ModEnd> ; unsigned int ref_costs_single <S2SV_ModStart> [ MAX_REF_FRAMES ] ; vpx_prob <S2SV_ModEnd> comp_mode_p ; int64_t best_intra_rd <S2SV_ModStart> best_intra_rd = INT64_MAX ; unsigned int best_pred_sse = UINT_MAX ; PREDICTION_MODE best_intra_mode = DC_PRED <S2SV_ModEnd> ; int rate_uv_intra [ <S2SV_ModStart> [ TX_SIZES ] ; PREDICTION_MODE <S2SV_ModEnd> mode_uv [ TX_SIZES ] <S2SV_ModStart> [ TX_SIZES ] ; const int intra_cost_penalty = vp9_get_intra_cost_penalty ( <S2SV_ModEnd> cm -> base_qindex , <S2SV_ModStart> , cm -> y_dc_delta_q , cm -> bit_depth ) <S2SV_ModEnd> ; int best_skip2 = <S2SV_ModStart> best_skip2 = 0 ; uint8_t ref_frame_skip_mask [ 2 ] = { 0 } ; uint16_t mode_skip_mask [ MAX_REF_FRAMES ] = { 0 } <S2SV_ModEnd> ; int mode_skip_start = <S2SV_ModStart> ; int mode_skip_start = sf -> <S2SV_ModEnd> mode_skip_start + 1 ; <S2SV_ModStart> * const rd_threshes = rd_opt -> threshes <S2SV_ModEnd> [ segment_id ] [ <S2SV_ModStart> * const rd_thresh_freq_fact = tile_data -> thresh_freq_fact [ bsize ] ; int64_t mode_threshold [ MAX_MODES ] ; int * mode_map = tile_data -> mode_map <S2SV_ModEnd> [ bsize ] ; <S2SV_ModStart> const int mode_search_skip_flags = sf -> mode_search_skip_flags ; int64_t mask_filter = 0 ; int64_t filter_cache [ SWITCHABLE_FILTER_CONTEXTS ] ; vp9_zero ( best_mbmode ) ; x -> skip_encode = sf -> <S2SV_ModEnd> skip_encode_frame && x -> <S2SV_ModStart> q_index < QIDX_SKIP_THRESH ; for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) filter_cache [ i ] = INT64_MAX ; estimate_ref_frame_costs ( cm , xd <S2SV_ModEnd> , segment_id , ref_costs_single <S2SV_ModStart> 0 ; i < <S2SV_ModEnd> SWITCHABLE_FILTER_CONTEXTS ; i ++ <S2SV_ModStart> ] = INT_MAX ; for ( i = 0 ; i < MB_MODE_COUNT ; ++ i ) { for ( k = 0 ; k < MAX_REF_FRAMES ; ++ k ) { single_inter_filter [ i ] [ k ] = SWITCHABLE ; single_skippable [ i ] [ k ] = 0 ; } } rd_cost -> rate <S2SV_ModEnd> = INT_MAX ; for <S2SV_ModStart> ref_frame ] ) { assert ( get_ref_frame_buffer ( cpi , ref_frame ) != NULL ) ; setup_buffer_inter ( cpi , x , <S2SV_ModEnd> ref_frame , bsize , <S2SV_ModStart> ++ ref_frame ) { <S2SV_ModEnd> if ( ! ( <S2SV_ModStart> ] ) ) { ref_frame_skip_mask [ 0 ] |= ( 1 << ref_frame ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> ; } else if <S2SV_ModStart> } else if ( sf -> <S2SV_ModEnd> reference_masking ) { for <S2SV_ModStart> ] ) { mode_skip_mask [ ref_frame ] |= INTER_NEAREST_NEAR_ZERO <S2SV_ModEnd> ; break ; } <S2SV_ModStart> } } if ( segfeature_active <S2SV_ModEnd> ( seg , segment_id <S2SV_ModStart> , SEG_LVL_REF_FRAME ) && get_segdata <S2SV_ModEnd> ( seg , segment_id <S2SV_ModStart> ) ref_frame ) { ref_frame_skip_mask [ 0 ] |= ( 1 << ref_frame ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK ; } <S2SV_ModEnd> } if ( ! <S2SV_ModStart> } if ( ! segfeature_active <S2SV_ModEnd> ( seg , segment_id <S2SV_ModStart> 0 ) ) { ref_frame_skip_mask [ 0 ] = ( 1 << LAST_FRAME ) | ( 1 << GOLDEN_FRAME ) ; ref_frame_skip_mask [ 1 ] = SECOND_REF_FRAME_MASK ; mode_skip_mask [ ALTREF_FRAME ] = ~ INTER_NEAREST_NEAR_ZERO <S2SV_ModEnd> ; if ( frame_mv <S2SV_ModStart> != 0 ) mode_skip_mask [ ALTREF_FRAME ] <S2SV_ModStart> |= ( 1 << NEARMV <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> != 0 ) mode_skip_mask [ ALTREF_FRAME ] <S2SV_ModStart> |= ( 1 << NEARESTMV ) ; } } if ( cpi -> rc . is_src_frame_alt_ref ) { if ( sf -> alt_ref_search_fp ) { mode_skip_mask [ ALTREF_FRAME ] = 0 ; ref_frame_skip_mask [ 0 ] = ~ ( 1 << ALTREF_FRAME ) ; ref_frame_skip_mask [ 1 ] = SECOND_REF_FRAME_MASK ; } } if ( sf -> alt_ref_search_fp ) if ( ! cm -> show_frame && x -> pred_mv_sad [ GOLDEN_FRAME ] < INT_MAX ) if ( x -> pred_mv_sad [ ALTREF_FRAME ] > ( x -> pred_mv_sad [ GOLDEN_FRAME ] << 1 ) ) mode_skip_mask [ ALTREF_FRAME ] |= INTER_ALL ; if ( sf -> adaptive_mode_search ) { if ( cm -> show_frame && ! cpi -> rc . is_src_frame_alt_ref && cpi -> rc . frames_since_golden >= 3 ) if ( x -> pred_mv_sad [ GOLDEN_FRAME ] > ( x -> pred_mv_sad [ LAST_FRAME ] << 1 ) ) mode_skip_mask [ GOLDEN_FRAME ] |= INTER_ALL <S2SV_ModEnd> ; } if ( <S2SV_ModStart> if ( bsize > sf -> max_intra_bsize ) { ref_frame_skip_mask [ 0 ] |= ( 1 << INTRA_FRAME ) ; ref_frame_skip_mask [ 1 ] |= ( 1 << INTRA_FRAME ) ; } mode_skip_mask [ INTRA_FRAME ] |= ~ ( sf -> intra_y_mode_mask [ max_txsize_lookup [ bsize ] ] ) ; for ( i = 0 ; i <= LAST_NEW_MV_INDEX ; ++ i ) mode_threshold [ i ] = 0 ; for ( i = LAST_NEW_MV_INDEX + 1 ; i < MAX_MODES ; ++ i ) mode_threshold [ i ] = ( ( int64_t ) rd_threshes [ i ] * rd_thresh_freq_fact [ i ] ) >> 5 ; midx = sf -> schedule_mode_search ? mode_skip_start : 0 ; while ( midx > 4 ) { uint8_t end_pos = 0 ; for ( i = 5 ; i < midx ; ++ i ) { if ( mode_threshold [ mode_map [ i - 1 ] ] > mode_threshold [ mode_map [ i ] ] ) { uint8_t tmp = mode_map [ i ] ; mode_map [ i ] = mode_map [ i - 1 ] ; mode_map [ i - 1 ] = tmp ; end_pos = i ; } } midx = end_pos ; } for ( midx = 0 ; midx < MAX_MODES ; ++ midx <S2SV_ModEnd> ) { int mode_index <S2SV_ModStart> ) { int mode_index = mode_map [ midx ] ; <S2SV_ModEnd> int mode_excluded = 0 <S2SV_ModStart> skippable = 0 ; <S2SV_ModEnd> int this_skip2 = 0 <S2SV_ModStart> early_term = 0 ; this_mode = vp9_mode_order [ mode_index ] . mode ; ref_frame = vp9_mode_order [ mode_index ] . ref_frame [ 0 ] ; second_ref_frame = vp9_mode_order [ mode_index ] . ref_frame [ 1 ] ; if ( midx == mode_skip_start && best_mode_index >= 0 <S2SV_ModEnd> ) { switch ( <S2SV_ModStart> ) { switch ( best_mbmode <S2SV_ModEnd> . ref_frame [ 0 <S2SV_ModStart> ; case LAST_FRAME : ref_frame_skip_mask [ 0 ] |= LAST_FRAME_MODE_MASK ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case GOLDEN_FRAME : ref_frame_skip_mask [ 0 ] |= GOLDEN_FRAME_MODE_MASK ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case ALTREF_FRAME : ref_frame_skip_mask [ 0 ] <S2SV_ModEnd> |= ALT_REF_MODE_MASK ; break <S2SV_ModStart> && "Invalid<S2SV_blank>Reference<S2SV_blank>frame" ) ; break ; } } if ( ( ref_frame_skip_mask [ 0 ] & ( 1 << ref_frame ) ) && ( ref_frame_skip_mask [ 1 ] & ( 1 << MAX ( 0 , second_ref_frame ) ) ) ) continue ; if ( mode_skip_mask [ ref_frame ] <S2SV_ModEnd> & ( 1 << <S2SV_ModStart> & ( 1 << this_mode ) ) continue ; if ( best_mode_skippable && sf -> schedule_mode_search ) mode_threshold [ mode_index ] <<= 1 <S2SV_ModEnd> ; if ( best_rd <S2SV_ModStart> if ( best_rd < mode_threshold [ mode_index ] ) continue ; if ( sf -> motion_field_mode_search ) { const int mi_width = MIN ( num_8x8_blocks_wide_lookup [ bsize ] , tile_info -> mi_col_end - mi_col ) ; const int mi_height = MIN ( num_8x8_blocks_high_lookup [ bsize ] , tile_info -> mi_row_end - mi_row ) ; const int bsl = mi_width_log2_lookup [ bsize ] ; int cb_partition_search_ctrl = ( ( ( mi_row + mi_col ) >> bsl ) + get_chessboard_index ( cm -> current_video_frame ) ) & 0x1 ; MB_MODE_INFO * ref_mbmi ; int const_motion = 1 ; int skip_ref_frame = ! cb_partition_search_ctrl ; MV_REFERENCE_FRAME rf = NONE ; int_mv ref_mv ; ref_mv . as_int = INVALID_MV ; if ( ( mi_row - 1 ) >= tile_info -> mi_row_start ) { ref_mv = xd -> mi [ - xd -> mi_stride ] -> mbmi . mv [ 0 ] ; rf = xd -> mi [ - xd -> mi_stride ] -> mbmi . ref_frame [ 0 ] ; for ( i = 0 ; i < mi_width ; ++ i ) { ref_mbmi = & xd -> mi [ - xd -> mi_stride + i ] -> mbmi ; const_motion &= ( ref_mv . as_int == ref_mbmi -> mv [ 0 ] . as_int ) && ( ref_frame == ref_mbmi -> ref_frame [ 0 ] ) ; skip_ref_frame &= ( rf == ref_mbmi -> ref_frame [ 0 ] ) ; } } if ( ( mi_col - 1 ) >= tile_info -> mi_col_start ) { if ( ref_mv . as_int == INVALID_MV ) ref_mv = xd -> mi [ - 1 ] -> mbmi . mv [ 0 ] ; if ( rf == NONE ) rf = xd -> mi [ - 1 ] -> mbmi . ref_frame [ 0 ] ; for ( i = 0 ; i < mi_height ; ++ i ) { ref_mbmi = & xd -> mi [ i * xd -> mi_stride - 1 ] -> mbmi ; const_motion &= ( ref_mv . as_int == ref_mbmi -> mv [ 0 ] . as_int ) && ( ref_frame == ref_mbmi -> ref_frame [ 0 ] ) ; skip_ref_frame &= ( rf == ref_mbmi -> ref_frame [ 0 ] ) ; } } if ( skip_ref_frame && this_mode != NEARESTMV && this_mode != NEWMV ) if ( rf > INTRA_FRAME ) if ( ref_frame != rf ) continue ; if ( const_motion ) if ( this_mode == NEARMV || this_mode == ZEROMV ) continue ; } <S2SV_ModEnd> comp_pred = second_ref_frame > <S2SV_ModStart> ) { if ( ! cpi -> allow_comp_inter_inter ) continue ; if ( ! ( cpi -> ref_frame_flags & flag_list [ second_ref_frame ] ) ) continue ; if ( segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) continue ; if ( <S2SV_ModStart> & FLAG_SKIP_COMP_BESTINTRA ) && best_mode_index >= 0 && best_mbmode <S2SV_ModEnd> . ref_frame [ 0 <S2SV_ModStart> 0 ] == INTRA_FRAME <S2SV_ModEnd> ) continue ; mode_excluded <S2SV_ModStart> ) { if ( sf -> adaptive_mode_search ) if ( ( x -> source_variance << num_pels_log2_lookup [ bsize ] ) > best_pred_sse <S2SV_ModEnd> ) continue ; if <S2SV_ModStart> ) { if ( best_mode_index >= 0 && best_mbmode <S2SV_ModEnd> . ref_frame [ 0 <S2SV_ModStart> } } else { const MV_REFERENCE_FRAME ref_frames [ 2 ] = { ref_frame , second_ref_frame } ; <S2SV_ModEnd> if ( ! check_best_zero_mv <S2SV_ModStart> check_best_zero_mv ( cpi , mbmi_ext -> mode_context , frame_mv , this_mode , ref_frames ) ) continue ; } mbmi -> mode = this_mode ; mbmi -> uv_mode = DC_PRED <S2SV_ModEnd> ; mbmi -> ref_frame <S2SV_ModStart> cm -> interp_filter ; mbmi -> mv [ 0 ] . as_int = mbmi -> mv [ 1 ] . as_int = 0 ; <S2SV_ModStart> i ] ; } <S2SV_ModEnd> if ( ref_frame == <S2SV_ModStart> { TX_SIZE uv_tx ; struct macroblockd_plane * const pd = & xd -> plane [ 1 ] ; memset ( x -> skip_txfm , 0 , sizeof ( x -> skip_txfm ) ) ; super_block_yrd <S2SV_ModEnd> ( cpi , x <S2SV_ModStart> , NULL , bsize <S2SV_ModEnd> , best_rd ) ; <S2SV_ModStart> -> tx_size , bsize , pd -> subsampling_x , pd -> subsampling_y <S2SV_ModStart> { choose_intra_uv_mode ( cpi , x <S2SV_ModStart> rate2 = rate_y + cpi <S2SV_ModEnd> -> mbmode_cost [ mbmi <S2SV_ModStart> cpi , x , bsize <S2SV_ModEnd> , & rate2 , <S2SV_ModStart> & rate_y , & rate_uv , & disable_skip , <S2SV_ModEnd> frame_mv , mi_row , <S2SV_ModStart> , mi_col , single_newmv , single_inter_filter , single_skippable <S2SV_ModStart> & total_sse , best_rd , & mask_filter , filter_cache <S2SV_ModStart> ! disable_skip ) { <S2SV_ModEnd> if ( skippable ) <S2SV_ModStart> + rate_uv ) ; rate2 += vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 1 ) ; <S2SV_ModEnd> } else if ( <S2SV_ModStart> } else if ( <S2SV_ModEnd> ref_frame != INTRA_FRAME && <S2SV_ModStart> + rate_uv ) ; <S2SV_ModEnd> this_skip2 = 1 ; <S2SV_ModStart> ; } } else <S2SV_ModEnd> { rate2 += vp9_cost_bit <S2SV_ModStart> distortion2 ) ; } rd_variance_adjustment ( cpi , x , bsize , & this_rd , ref_frame , x -> source_variance ) ; <S2SV_ModStart> mode ; } } <S2SV_ModEnd> if ( ! disable_skip <S2SV_ModStart> ] , this_rd ) <S2SV_ModEnd> ; } if ( <S2SV_ModStart> = 1 ; } else { best_pred_sse = x -> pred_sse [ ref_frame ] ; } rd_cost -> rate = rate2 ; rd_cost -> dist = distortion2 ; rd_cost -> rdcost = this_rd <S2SV_ModEnd> ; best_rd = this_rd <S2SV_ModStart> best_skip2 = this_skip2 ; best_mode_skippable = skippable ; <S2SV_ModStart> ( ! x -> select_tx_size <S2SV_ModEnd> ) swap_block_ptr ( x <S2SV_ModStart> x , ctx , 1 , 0 , 0 , max_plane ) ; memcpy <S2SV_ModEnd> ( ctx -> zcoeff_blk <S2SV_ModStart> ] , sizeof ( ctx -> zcoeff_blk [ 0 ] <S2SV_ModEnd> ) * ctx -> <S2SV_ModStart> MIN_EARLY_TERM_INDEX ) ) { <S2SV_ModEnd> int qstep = xd <S2SV_ModStart> scale = 4 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { qstep >>= ( xd -> bd - 8 ) ; } # endif <S2SV_ModStart> [ SINGLE_REFERENCE ] ) <S2SV_ModEnd> best_pred_rd [ SINGLE_REFERENCE ] <S2SV_ModStart> ] = single_rd ; <S2SV_ModEnd> } else { if <S2SV_ModStart> [ COMPOUND_REFERENCE ] ) <S2SV_ModEnd> best_pred_rd [ COMPOUND_REFERENCE ] <S2SV_ModStart> ] = single_rd ; <S2SV_ModEnd> } if ( hybrid_rd <S2SV_ModStart> { int64_t ref = filter_cache <S2SV_ModEnd> [ cm -> interp_filter <S2SV_ModStart> ; else if ( filter_cache <S2SV_ModEnd> [ i ] == <S2SV_ModStart> INT64_MAX ) adj_rd = mask_filter <S2SV_ModEnd> - ref + 10 <S2SV_ModStart> ; else adj_rd = filter_cache <S2SV_ModEnd> [ i ] - <S2SV_ModStart> adj_rd ) ; } <S2SV_ModEnd> } } if ( <S2SV_ModStart> ; } if ( best_mbmode . mode == NEWMV ) { const MV_REFERENCE_FRAME refs [ 2 ] = { best_mbmode . ref_frame [ 0 ] , best_mbmode . ref_frame [ 1 ] } ; int comp_pred_mode = refs [ 1 ] > INTRA_FRAME ; if ( frame_mv [ NEARESTMV ] [ refs [ 0 ] ] . as_int == best_mbmode . mv [ 0 ] . as_int && ( ( comp_pred_mode && frame_mv [ NEARESTMV ] [ refs [ 1 ] ] . as_int == best_mbmode . mv [ 1 ] . as_int ) || ! comp_pred_mode ) ) best_mbmode . mode = NEARESTMV ; else if ( frame_mv [ NEARMV ] [ refs [ 0 ] ] . as_int == best_mbmode . mv [ 0 ] . as_int && ( ( comp_pred_mode && frame_mv [ NEARMV ] [ refs [ 1 ] ] . as_int == best_mbmode . mv [ 1 ] . as_int ) || ! comp_pred_mode ) ) best_mbmode . mode = NEARMV ; else if ( best_mbmode . mv [ 0 ] . as_int == 0 && ( ( comp_pred_mode && best_mbmode . mv [ 1 ] . as_int == 0 ) || ! comp_pred_mode ) ) best_mbmode . mode = ZEROMV ; } if ( best_mode_index < 0 || <S2SV_ModStart> best_rd >= best_rd_so_far ) { rd_cost -> rate = INT_MAX ; rd_cost -> rdcost = INT64_MAX ; return ; } if ( sf -> <S2SV_ModEnd> use_uv_intra_rd_estimate ) { if <S2SV_ModStart> ) { if ( best_mbmode <S2SV_ModEnd> . ref_frame [ 0 <S2SV_ModStart> = get_uv_tx_size ( mbmi , & xd -> plane [ 1 ] <S2SV_ModStart> ) ; if ( ! cpi -> rc . is_src_frame_alt_ref ) vp9_update_rd_thresh_fact ( tile_data -> thresh_freq_fact , sf -> adaptive_rd_thresh , bsize , best_mode_index ) ; <S2SV_ModEnd> * mbmi = best_mbmode <S2SV_ModStart> == 0 ) ; } else { vp9_zero ( best_filter_diff ) ; } x -> skip |= best_mode_skippable ; if ( ! x -> skip && ! x -> select_tx_size ) { int has_high_freq_coeff = 0 ; int plane ; int max_plane = is_inter_block ( & xd -> mi [ 0 ] -> mbmi ) ? MAX_MB_PLANE : 1 ; for ( plane = 0 ; plane < max_plane ; ++ plane ) { x -> plane [ plane ] . eobs = ctx -> eobs_pbuf [ plane ] [ 1 ] ; has_high_freq_coeff |= vp9_has_high_freq_in_plane ( x , bsize , plane ) ; } for ( plane = max_plane ; plane < MAX_MB_PLANE ; ++ plane ) { x -> plane [ plane ] . eobs = ctx -> eobs_pbuf [ plane ] [ 2 ] ; has_high_freq_coeff |= vp9_has_high_freq_in_plane ( x , bsize , plane ) ; } best_mode_skippable |= ! has_high_freq_coeff ; } assert ( best_mode_index >= 0 ) ; store_coding_context ( x , ctx , best_mode_index , best_pred_diff , best_filter_diff , best_mode_skippable ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp9_rd_pick_inter_mode_sub8x8 ( VP9_COMP * <S2SV_ModStart> VP9_COMP * cpi , TileDataEnc * tile_data , <S2SV_ModStart> MACROBLOCK * x , <S2SV_ModEnd> int mi_row , int <S2SV_ModStart> , int mi_col , RD_COST * rd_cost <S2SV_ModEnd> , BLOCK_SIZE bsize , <S2SV_ModStart> ) { VP9_COMMON * const <S2SV_ModStart> & cpi -> common ; RD_OPT * const rd_opt = & cpi -> rd ; SPEED_FEATURES * const sf = & cpi -> sf ; MACROBLOCKD * const <S2SV_ModEnd> xd = & x <S2SV_ModStart> e_mbd ; MB_MODE_INFO * const <S2SV_ModStart> const struct segmentation * const <S2SV_ModStart> = best_rd_so_far ; int64_t <S2SV_ModEnd> best_pred_diff [ REFERENCE_MODES ] <S2SV_ModStart> ] ; MB_MODE_INFO best_mbmode ; int ref_index , best_ref_index <S2SV_ModEnd> = 0 ; unsigned <S2SV_ModStart> [ MAX_REF_FRAMES ] ; vpx_prob comp_mode_p <S2SV_ModEnd> ; INTERP_FILTER tmp_best_filter = <S2SV_ModStart> SWITCHABLE ; int rate_uv_intra , rate_uv_tokenonly ; int64_t dist_uv ; int skip_uv ; PREDICTION_MODE mode_uv = DC_PRED ; const int intra_cost_penalty = vp9_get_intra_cost_penalty ( <S2SV_ModEnd> cm -> base_qindex , <S2SV_ModStart> , cm -> y_dc_delta_q , cm -> bit_depth <S2SV_ModStart> = 0 ; int ref_frame_skip_mask [ 2 ] = { 0 } ; int64_t mask_filter = 0 ; int64_t filter_cache [ SWITCHABLE_FILTER_CONTEXTS ] ; int internal_active_edge = vp9_active_edge_sb ( cpi , mi_row , mi_col ) && vp9_internal_image_edge ( cpi ) <S2SV_ModEnd> ; x -> skip_encode <S2SV_ModStart> x -> skip_encode = sf -> <S2SV_ModEnd> skip_encode_frame && x -> <S2SV_ModStart> q_index < QIDX_SKIP_THRESH ; memset <S2SV_ModEnd> ( x -> zcoeff_blk <S2SV_ModStart> 0 , 4 ) ; vp9_zero ( best_mbmode ) ; for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) filter_cache [ i ] = INT64_MAX <S2SV_ModStart> ; } estimate_ref_frame_costs ( cm , xd <S2SV_ModEnd> , segment_id , ref_costs_single <S2SV_ModStart> 0 ; i < SWITCHABLE_FILTER_CONTEXTS <S2SV_ModEnd> ; i ++ ) <S2SV_ModStart> ; i ++ ) best_filter_rd <S2SV_ModEnd> [ i ] = <S2SV_ModStart> ] = INT64_MAX ; rate_uv_intra = INT_MAX ; rd_cost -> rate <S2SV_ModEnd> = INT_MAX ; for <S2SV_ModStart> ref_frame ] ) { setup_buffer_inter <S2SV_ModEnd> ( cpi , x <S2SV_ModStart> cpi , x , <S2SV_ModEnd> ref_frame , bsize , <S2SV_ModStart> yv12_mb ) ; } else { ref_frame_skip_mask [ 0 ] <S2SV_ModEnd> |= ( 1 << <S2SV_ModStart> << ref_frame ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK ; } frame_mv [ NEWMV ] [ ref_frame ] . as_int = INVALID_MV ; frame_mv [ ZEROMV ] [ ref_frame ] . as_int = 0 ; } for ( ref_index = 0 ; ref_index <S2SV_ModEnd> < MAX_REFS ; ++ <S2SV_ModStart> < MAX_REFS ; ++ ref_index <S2SV_ModEnd> ) { int mode_excluded <S2SV_ModStart> skippable = 0 ; <S2SV_ModEnd> int i ; int <S2SV_ModStart> early_term = 0 ; <S2SV_ModEnd> ref_frame = vp9_ref_order [ <S2SV_ModStart> ref_frame = vp9_ref_order [ ref_index <S2SV_ModEnd> ] . ref_frame [ <S2SV_ModStart> second_ref_frame = vp9_ref_order [ ref_index <S2SV_ModEnd> ] . ref_frame [ <S2SV_ModStart> ] ; if ( ref_index > 2 && sf -> <S2SV_ModEnd> mode_skip_start < MAX_MODES ) <S2SV_ModStart> ) { if ( ref_index <S2SV_ModEnd> == 3 ) { <S2SV_ModStart> ) { switch ( best_mbmode <S2SV_ModEnd> . ref_frame [ 0 <S2SV_ModStart> { case INTRA_FRAME : <S2SV_ModEnd> break ; case LAST_FRAME <S2SV_ModStart> ; case LAST_FRAME : ref_frame_skip_mask [ 0 ] |= ( 1 << GOLDEN_FRAME ) | ( 1 << ALTREF_FRAME ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case GOLDEN_FRAME : ref_frame_skip_mask [ 0 ] |= ( 1 << LAST_FRAME ) | ( 1 << ALTREF_FRAME ) ; ref_frame_skip_mask [ 1 ] |= SECOND_REF_FRAME_MASK <S2SV_ModEnd> ; break ; case <S2SV_ModStart> ; case ALTREF_FRAME : ref_frame_skip_mask [ 0 ] |= ( 1 << GOLDEN_FRAME ) | ( 1 << LAST_FRAME ) <S2SV_ModEnd> ; break ; case <S2SV_ModStart> && "Invalid<S2SV_blank>Reference<S2SV_blank>frame" ) ; break ; } } } if ( ( ref_frame_skip_mask [ 0 ] <S2SV_ModEnd> & ( 1 << <S2SV_ModStart> & ( 1 << ref_frame ) ) && ( ref_frame_skip_mask [ 1 ] & ( 1 << MAX ( 0 , second_ref_frame ) ) <S2SV_ModEnd> ) ) continue ; <S2SV_ModStart> ) ) continue ; if ( ! internal_active_edge && rd_less_than_thresh ( best_rd , rd_opt -> threshes <S2SV_ModEnd> [ segment_id ] [ <S2SV_ModStart> [ bsize ] [ ref_index ] , tile_data -> thresh_freq_fact <S2SV_ModEnd> [ bsize ] [ <S2SV_ModStart> [ bsize ] [ ref_index ] ) ) continue ; comp_pred = second_ref_frame > INTRA_FRAME ; if ( comp_pred ) { if ( ! cpi -> allow_comp_inter_inter ) continue ; if ( ! ( cpi -> ref_frame_flags & flag_list [ second_ref_frame ] ) ) continue ; if ( segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) continue ; if ( ( sf -> mode_search_skip_flags & FLAG_SKIP_COMP_BESTINTRA ) && best_mbmode . <S2SV_ModEnd> ref_frame [ 0 ] <S2SV_ModStart> ref_frame [ 0 ] == INTRA_FRAME ) continue ; } if ( ref_frame > INTRA_FRAME && vp9_is_scaled ( & cm -> frame_refs [ ref_frame - 1 ] . sf ) ) continue ; if ( second_ref_frame > INTRA_FRAME <S2SV_ModEnd> && vp9_is_scaled ( & <S2SV_ModStart> ) ) continue ; if ( comp_pred ) mode_excluded = cm -> reference_mode == SINGLE_REFERENCE ; else if ( ref_frame != INTRA_FRAME ) mode_excluded = cm -> reference_mode == COMPOUND_REFERENCE ; if ( segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) && get_segdata ( seg , segment_id , SEG_LVL_REF_FRAME ) != ( int ) ref_frame ) { continue ; } else if ( ! segfeature_active ( seg , segment_id , SEG_LVL_REF_FRAME ) ) { if ( cpi -> rc . is_src_frame_alt_ref && ( cpi -> oxcf . arnr_max_frames == 0 ) ) continue ; } mbmi -> tx_size = TX_4X4 ; mbmi -> uv_mode = DC_PRED ; mbmi -> ref_frame [ 0 ] = ref_frame ; mbmi -> ref_frame [ 1 ] = second_ref_frame <S2SV_ModEnd> ; mbmi -> interp_filter <S2SV_ModStart> cm -> interp_filter ; x -> skip = 0 ; set_ref_ptrs ( cm , xd , ref_frame , second_ref_frame ) ; <S2SV_ModEnd> for ( i = <S2SV_ModStart> i ] ; } <S2SV_ModEnd> if ( ref_frame == <S2SV_ModStart> { int rate ; <S2SV_ModEnd> if ( rd_pick_intra_sub_8x8_y_mode ( <S2SV_ModStart> ; if ( rate_uv_intra <S2SV_ModEnd> == INT_MAX ) { <S2SV_ModStart> choose_intra_uv_mode ( cpi , x , <S2SV_ModStart> TX_4X4 , & rate_uv_intra , & rate_uv_tokenonly , & dist_uv , & skip_uv , & mode_uv <S2SV_ModEnd> ) ; } rate2 <S2SV_ModStart> } rate2 += rate_uv_intra <S2SV_ModEnd> ; rate_uv = rate_uv_tokenonly <S2SV_ModStart> ; rate_uv = rate_uv_tokenonly <S2SV_ModEnd> ; distortion2 += dist_uv <S2SV_ModStart> ; distortion2 += dist_uv <S2SV_ModEnd> ; distortion_uv = dist_uv <S2SV_ModStart> ; distortion_uv = dist_uv <S2SV_ModEnd> ; mbmi -> uv_mode <S2SV_ModStart> -> uv_mode = mode_uv <S2SV_ModEnd> ; } else { <S2SV_ModStart> = comp_pred ? & x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ second_ref_frame <S2SV_ModStart> == LAST_FRAME ) ? rd_opt -> threshes <S2SV_ModEnd> [ segment_id ] [ <S2SV_ModStart> [ THR_LAST ] : rd_opt -> threshes <S2SV_ModEnd> [ segment_id ] [ <S2SV_ModStart> == GOLDEN_FRAME ) ? rd_opt -> threshes <S2SV_ModEnd> [ segment_id ] [ <S2SV_ModStart> ] : this_rd_thresh ; <S2SV_ModEnd> for ( i = <S2SV_ModStart> ; ++ i ) filter_cache <S2SV_ModEnd> [ i ] = <S2SV_ModStart> x -> source_variance < sf -> <S2SV_ModEnd> disable_filter_search_var_thresh ) { tmp_best_filter <S2SV_ModStart> } else if ( sf -> <S2SV_ModEnd> adaptive_pred_interp_filter == 1 && <S2SV_ModStart> } else if ( sf -> <S2SV_ModEnd> adaptive_pred_interp_filter == 2 ) <S2SV_ModStart> ; int64_t rs_rd ; MB_MODE_INFO_EXT * mbmi_ext = x -> mbmi_ext ; <S2SV_ModStart> switchable_filter_index ; tmp_rd = rd_pick_best_sub8x8_mode <S2SV_ModEnd> ( cpi , x <S2SV_ModStart> cpi , x , & mbmi_ext <S2SV_ModEnd> -> ref_mvs [ ref_frame <S2SV_ModStart> rs = vp9_get_switchable_rate ( cpi , xd <S2SV_ModEnd> ) ; rs_rd = <S2SV_ModStart> , 0 ) ; filter_cache <S2SV_ModEnd> [ switchable_filter_index ] = <S2SV_ModStart> ] = tmp_rd ; filter_cache <S2SV_ModEnd> [ SWITCHABLE_FILTERS ] = <S2SV_ModStart> ] = MIN ( filter_cache <S2SV_ModEnd> [ SWITCHABLE_FILTERS ] , <S2SV_ModStart> tmp_rd += rs_rd ; mask_filter = MAX ( mask_filter <S2SV_ModEnd> , tmp_rd ) ; <S2SV_ModStart> switchable_filter_index == 0 && sf -> <S2SV_ModEnd> use_rd_breakout && best_rd < <S2SV_ModStart> ) { tmp_rd = rd_pick_best_sub8x8_mode <S2SV_ModEnd> ( cpi , x <S2SV_ModStart> cpi , x , & x -> mbmi_ext <S2SV_ModEnd> -> ref_mvs [ ref_frame <S2SV_ModStart> rate2 += vp9_get_switchable_rate ( cpi , xd <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> , BLOCK_8X8 ) ; memset ( x -> skip_txfm , SKIP_TXFM_NONE , sizeof ( x -> skip_txfm ) ) ; if ( ! <S2SV_ModStart> BLOCK_8X8 , tmp_best_rdu ) <S2SV_ModEnd> ) continue ; rate2 <S2SV_ModStart> total_sse += uv_sse ; <S2SV_ModEnd> } } if ( <S2SV_ModStart> ! disable_skip ) { if ( <S2SV_ModEnd> ref_frame != INTRA_FRAME && <S2SV_ModStart> ; } } else <S2SV_ModEnd> { rate2 += vp9_cost_bit <S2SV_ModStart> rate2 , distortion2 ) <S2SV_ModEnd> ; } if ( <S2SV_ModStart> max_plane = MAX_MB_PLANE ; best_ref_index = ref_index <S2SV_ModEnd> ; if ( ref_frame <S2SV_ModStart> = 1 ; } rd_cost -> rate = rate2 ; rd_cost -> dist = distortion2 ; rd_cost -> rdcost = this_rd <S2SV_ModEnd> ; best_rd = this_rd <S2SV_ModStart> ( ! x -> select_tx_size <S2SV_ModEnd> ) swap_block_ptr ( x <S2SV_ModStart> x , ctx , 1 , 0 , 0 , max_plane ) ; memcpy <S2SV_ModEnd> ( ctx -> zcoeff_blk <S2SV_ModStart> x -> zcoeff_blk [ TX_4X4 <S2SV_ModEnd> ] , sizeof ( <S2SV_ModStart> ] , sizeof ( ctx -> zcoeff_blk [ 0 ] <S2SV_ModEnd> ) * ctx -> <S2SV_ModStart> ; if ( ( sf -> <S2SV_ModEnd> mode_search_skip_flags & FLAG_EARLY_TERMINATE ) <S2SV_ModStart> FLAG_EARLY_TERMINATE ) && ( ref_index <S2SV_ModEnd> > MIN_EARLY_TERM_INDEX ) ) <S2SV_ModStart> MIN_EARLY_TERM_INDEX ) ) { <S2SV_ModEnd> int qstep = xd <S2SV_ModStart> scale = 4 ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { qstep >>= ( xd -> bd - 8 ) ; } # endif <S2SV_ModStart> ) ; if ( ! comp_pred <S2SV_ModEnd> && single_rd < best_pred_rd <S2SV_ModStart> [ SINGLE_REFERENCE ] ) <S2SV_ModEnd> best_pred_rd [ SINGLE_REFERENCE ] <S2SV_ModStart> ] = single_rd ; else if ( comp_pred <S2SV_ModEnd> && single_rd < best_pred_rd <S2SV_ModStart> [ COMPOUND_REFERENCE ] ) <S2SV_ModEnd> best_pred_rd [ COMPOUND_REFERENCE ] <S2SV_ModStart> ] = single_rd ; <S2SV_ModEnd> if ( hybrid_rd < <S2SV_ModStart> { int64_t ref = filter_cache <S2SV_ModEnd> [ cm -> interp_filter <S2SV_ModStart> ; else if ( filter_cache <S2SV_ModEnd> [ i ] == <S2SV_ModStart> INT64_MAX ) adj_rd = mask_filter <S2SV_ModEnd> - ref + 10 <S2SV_ModStart> ; else adj_rd = filter_cache <S2SV_ModEnd> [ i ] - <S2SV_ModStart> ] , adj_rd ) <S2SV_ModEnd> ; } } if <S2SV_ModStart> best_rd >= best_rd_so_far ) { rd_cost -> rate = INT_MAX ; rd_cost -> rdcost = INT64_MAX ; return ; } if ( sf -> <S2SV_ModEnd> use_uv_intra_rd_estimate ) { if <S2SV_ModStart> ) { if ( best_mbmode <S2SV_ModEnd> . ref_frame [ 0 <S2SV_ModStart> == INTRA_FRAME ) { <S2SV_ModEnd> * mbmi = best_mbmode <S2SV_ModStart> mbmi = best_mbmode ; <S2SV_ModEnd> rd_pick_intra_sbuv_mode ( cpi , <S2SV_ModStart> ctx , & rate_uv_intra , & rate_uv_tokenonly , & dist_uv , & skip_uv , BLOCK_8X8 , TX_4X4 <S2SV_ModEnd> ) ; } } <S2SV_ModStart> ( best_rd == INT64_MAX ) { rd_cost -> rate = INT_MAX ; rd_cost -> dist = INT64_MAX ; rd_cost -> rdcost = INT64_MAX ; return <S2SV_ModEnd> ; } assert ( <S2SV_ModStart> best_mbmode ) ) ; vp9_update_rd_thresh_fact ( tile_data -> thresh_freq_fact , sf -> adaptive_rd_thresh , bsize , best_ref_index ) ; <S2SV_ModEnd> * mbmi = best_mbmode <S2SV_ModStart> ; ++ i ) memcpy <S2SV_ModEnd> ( & xd -> <S2SV_ModStart> best_filter_diff ) ; } <S2SV_ModEnd> store_coding_context ( x , <S2SV_ModStart> x , ctx , best_ref_index , best_pred_diff , best_filter_diff , 0 ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> MACROBLOCK * x , RD_COST * rd_cost , <S2SV_ModEnd> BLOCK_SIZE bsize , PICK_MODE_CONTEXT <S2SV_ModStart> x -> e_mbd ; struct macroblockd_plane * const pd = xd -> plane ; <S2SV_ModStart> , dist_uv = 0 <S2SV_ModEnd> ; TX_SIZE max_uv_tx_size ; <S2SV_ModStart> ] = INTRA_FRAME ; xd -> mi [ 0 ] -> mbmi . ref_frame [ 1 ] = NONE ; <S2SV_ModStart> y_skip , bsize , <S2SV_ModEnd> best_rd ) >= best_rd <S2SV_ModStart> >= best_rd ) { rd_cost -> rate <S2SV_ModEnd> = INT_MAX ; return <S2SV_ModStart> INT_MAX ; return ; } } else { y_skip = 0 ; if ( rd_pick_intra_sub_8x8_y_mode ( cpi , x , & rate_y , & rate_y_tokenonly , & dist_y , best_rd ) >= best_rd ) { rd_cost -> rate = INT_MAX ; return ; } <S2SV_ModStart> . tx_size , bsize , pd [ 1 ] . subsampling_x , pd [ 1 ] . subsampling_y <S2SV_ModStart> , & uv_skip , MAX ( BLOCK_8X8 , bsize ) , max_uv_tx_size ) ; <S2SV_ModEnd> if ( y_skip && <S2SV_ModStart> && uv_skip ) { rd_cost -> rate <S2SV_ModEnd> = rate_y + rate_uv <S2SV_ModStart> , 1 ) ; rd_cost -> dist <S2SV_ModEnd> = dist_y + dist_uv <S2SV_ModStart> dist_y + dist_uv ; } else { rd_cost -> rate = rate_y + rate_uv + vp9_cost_bit ( vp9_get_skip_prob ( cm , xd ) , 0 ) ; rd_cost -> dist = dist_y + dist_uv ; } ctx -> mic = * xd -> mi [ 0 ] ; ctx -> mbmi_ext = * x -> mbmi_ext ; rd_cost -> rdcost = RDCOST ( x -> rdmult , x -> rddiv , rd_cost -> rate , rd_cost -> dist ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * 16 ) return filteredinterp_filters1000 <S2SV_ModEnd> ; else if ( <S2SV_ModStart> * 13 ) return filteredinterp_filters875 <S2SV_ModEnd> ; else if ( <S2SV_ModStart> * 11 ) return filteredinterp_filters750 <S2SV_ModEnd> ; else if ( <S2SV_ModStart> * 9 ) return filteredinterp_filters625 ; else return filteredinterp_filters500 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * output ) { <S2SV_ModEnd> const int16_t * filter
<S2SV_ModStart> * output ) { <S2SV_ModEnd> const int16_t * filter
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> input , sizeof ( output [ 0 ] <S2SV_ModEnd> ) * length )
<S2SV_ModStart> height2 ) ) ; assert ( width > 0 ) ; assert ( height > 0 ) ; assert ( width2 > 0 ) ; assert ( height2 > 0 ) ;
<S2SV_ModStart> int * segcounts , vpx_prob <S2SV_ModEnd> * segment_tree_probs ) {
<S2SV_ModStart> int * segcounts , vpx_prob <S2SV_ModEnd> * probs ) {
<S2SV_ModStart> static void count_segs ( const VP9_COMMON * cm , MACROBLOCKD * xd , const TileInfo * <S2SV_ModEnd> tile , MODE_INFO * <S2SV_ModStart> , MODE_INFO * * mi <S2SV_ModEnd> , int * no_pred_segcounts <S2SV_ModStart> int mi_col ) { <S2SV_ModEnd> int segment_id ; if <S2SV_ModStart> xd -> mi = mi <S2SV_ModEnd> ; segment_id = xd <S2SV_ModStart> const BLOCK_SIZE bsize = xd -> mi <S2SV_ModEnd> [ 0 ] -> <S2SV_ModStart> const int pred_segment_id = get_segment_id <S2SV_ModEnd> ( cm , cm
<S2SV_ModStart> static void count_segs_sb ( const VP9_COMMON * cm , MACROBLOCKD * xd , const TileInfo * tile , MODE_INFO * * mi <S2SV_ModEnd> , int * no_pred_segcounts <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> const int mis = <S2SV_ModStart> bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] -> <S2SV_ModStart> bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] -> <S2SV_ModStart> ) { count_segs ( cm , xd , tile , mi <S2SV_ModEnd> , no_pred_segcounts , temporal_predictor_count <S2SV_ModStart> ) { count_segs ( cm , xd , tile , mi <S2SV_ModEnd> , no_pred_segcounts , temporal_predictor_count <S2SV_ModStart> ) ; count_segs ( cm , xd , tile , mi <S2SV_ModEnd> + hbs * mis <S2SV_ModStart> ) { count_segs ( cm , xd , tile , mi <S2SV_ModEnd> , no_pred_segcounts , temporal_predictor_count <S2SV_ModStart> ) ; count_segs ( cm , xd , tile , mi <S2SV_ModEnd> + hbs , no_pred_segcounts <S2SV_ModStart> ) ; count_segs_sb ( cm , xd <S2SV_ModEnd> , tile , & <S2SV_ModStart> , tile , & mi <S2SV_ModEnd> [ mi_dr * mis
<S2SV_ModStart> <S2SV_null> void vp9_choose_segmap_coding_method ( VP9_COMMON * cm , MACROBLOCKD * xd ) { <S2SV_ModEnd> struct segmentation * seg <S2SV_ModStart> { 0 } ; vpx_prob <S2SV_ModEnd> no_pred_tree [ SEG_TREE_PROBS ] <S2SV_ModStart> [ SEG_TREE_PROBS ] ; vpx_prob <S2SV_ModEnd> t_pred_tree [ SEG_TREE_PROBS ] <S2SV_ModStart> [ SEG_TREE_PROBS ] ; vpx_prob <S2SV_ModEnd> t_nopred_prob [ PREDICTION_PROBS ] <S2SV_ModStart> [ PREDICTION_PROBS ] ; memset <S2SV_ModEnd> ( seg -> tree_probs <S2SV_ModStart> tree_probs ) ) ; memset <S2SV_ModEnd> ( seg -> pred_probs <S2SV_ModStart> { TileInfo tile ; MODE_INFO * * mi_ptr ; <S2SV_ModStart> mi_ptr += 8 * cm -> mi_stride ) { MODE_INFO * * <S2SV_ModEnd> mi = mi_ptr ; <S2SV_ModStart> 8 ) count_segs_sb ( cm , xd <S2SV_ModEnd> , & tile , <S2SV_ModStart> temporal_update = 1 ; memcpy <S2SV_ModEnd> ( seg -> tree_probs <S2SV_ModStart> t_pred_tree ) ) ; memcpy <S2SV_ModEnd> ( seg -> pred_probs <S2SV_ModStart> temporal_update = 0 ; memcpy <S2SV_ModEnd> ( seg -> tree_probs
<S2SV_ModStart> enabled = 0 ; seg -> update_map = 0 ; seg -> update_data = 0 ;
<S2SV_ModStart> update_data = 0 ; memset <S2SV_ModEnd> ( seg -> tree_probs
<S2SV_ModStart> abs_delta = abs_delta ; memcpy <S2SV_ModEnd> ( seg -> feature_data
<S2SV_ModStart> int speed ) { const int boosted = frame_is_boosted ( cpi ) ; <S2SV_ModStart> -> adaptive_rd_thresh = 1 <S2SV_ModEnd> ; sf -> allow_skip_recode <S2SV_ModStart> >= 1 ) { if ( ( cpi -> twopass . fr_content_type == FC_GRAPHICS_ANIMATION ) || vp9_internal_image_edge ( cpi ) ) { sf -> use_square_partition_only = ! frame_is_boosted ( cpi ) ; } else { <S2SV_ModStart> ( cm ) ; } <S2SV_ModStart> 1 ; sf -> <S2SV_ModEnd> use_rd_breakout = 1 ; <S2SV_ModStart> 1 ; sf -> mv . <S2SV_ModStart> 2 ; sf -> mv . <S2SV_ModStart> TX_16X16 ] = INTRA_DC_H_V ; sf -> tx_size_search_breakout = 1 ; sf -> partition_search_breakout_rate_thr = 80 <S2SV_ModStart> sf -> tx_size_search_method = frame_is_boosted <S2SV_ModEnd> ( cpi ) ? <S2SV_ModStart> USE_FULL_RD : USE_LARGESTALL ; sf -> reference_masking = cpi -> oxcf . resize_mode != RESIZE_DYNAMIC ? 1 : 0 ; sf -> mode_search_skip_flags = ( cm -> frame_type == KEY_FRAME ) ? 0 : <S2SV_ModEnd> FLAG_SKIP_INTRA_DIRMISMATCH | FLAG_SKIP_INTRA_BESTINTER | <S2SV_ModStart> RELAXED_NEIGHBORING_MIN_MAX ; sf -> allow_partition_search_skip = 1 <S2SV_ModEnd> ; } if ( <S2SV_ModStart> >= 3 ) { sf -> use_square_partition_only = ! frame_is_intra_only ( cm ) ; sf -> tx_size_search_method = frame_is_intra_only ( cm ) ? USE_FULL_RD : USE_LARGESTALL ; sf -> mv . subpel_search_method = SUBPEL_TREE_PRUNED ; sf -> adaptive_pred_interp_filter = 0 ; sf -> adaptive_mode_search = 1 ; sf -> cb_partition_search = ! boosted ; sf -> cb_pred_filter_search = 1 ; sf -> alt_ref_search_fp = 1 <S2SV_ModEnd> ; sf -> recode_loop <S2SV_ModStart> 6 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC ; sf -> intra_uv_mode_mask [ TX_32X32 ] = INTRA_DC ; sf -> adaptive_interp_filter_search <S2SV_ModEnd> = 1 ; } <S2SV_ModStart> USE_LARGESTALL ; sf -> mv . search_method = BIGDIA ; sf -> mv . subpel_search_method = SUBPEL_TREE_PRUNED_MORE <S2SV_ModEnd> ; sf -> adaptive_rd_thresh <S2SV_ModStart> adaptive_rd_thresh = 4 ; if ( cm -> frame_type != KEY_FRAME ) <S2SV_ModStart> sf -> mode_search_skip_flags |= <S2SV_ModEnd> FLAG_EARLY_TERMINATE ; sf -> <S2SV_ModStart> 200 ; sf -> use_lp32x32fdct = 1 ; sf -> use_fast_coef_updates = ONE_LOOP_REDUCED ; sf -> use_fast_coef_costing = 1 ; sf -> motion_field_mode_search = ! boosted ; sf -> partition_search_breakout_rate_thr = 300 <S2SV_ModEnd> ; } if ( <S2SV_ModStart> i ; sf -> <S2SV_ModEnd> optimize_coefficients = 0 ; <S2SV_ModStart> 0 ; sf -> mv . <S2SV_ModStart> [ i ] = INTRA_DC <S2SV_ModEnd> ; sf -> intra_uv_mode_mask <S2SV_ModStart> [ i ] = INTRA_DC ; } sf -> partition_search_breakout_rate_thr = 500 ; sf -> mv . reduce_first_step_size = 1 ; sf -> simple_model_rd_from_var = 1 <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> static void set_rt_speed_feature ( VP9_COMP * cpi <S2SV_ModEnd> , SPEED_FEATURES * sf <S2SV_ModStart> sf , int speed , vp9e_tune_content content ) { VP9_COMMON * const cm = & cpi -> common ; const int is_keyframe = cm -> frame_type == KEY_FRAME ; const int frames_since_key = is_keyframe ? 0 : cpi -> rc . frames_since_key ; <S2SV_ModEnd> sf -> static_segmentation = <S2SV_ModStart> 1 ; sf -> <S2SV_ModEnd> use_fast_coef_costing = 1 ; <S2SV_ModStart> ; if ( speed >= <S2SV_ModEnd> 1 ) { sf <S2SV_ModStart> USE_FULL_RD : USE_LARGESTALL ; <S2SV_ModEnd> sf -> use_rd_breakout = <S2SV_ModStart> 1 ; sf -> mv . <S2SV_ModStart> TX_16X16 ] = INTRA_DC_H_V <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) { sf -> mode_search_skip_flags = ( cm -> frame_type == KEY_FRAME ) ? 0 : <S2SV_ModEnd> FLAG_SKIP_INTRA_DIRMISMATCH | FLAG_SKIP_INTRA_BESTINTER | <S2SV_ModStart> FLAG_SKIP_INTRA_LOWVAR ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 2 ; <S2SV_ModStart> 2 ; sf -> reference_masking = ( cpi -> oxcf . resize_mode != RESIZE_DYNAMIC && cpi -> svc . number_spatial_layers == 1 ) ? 1 : 0 <S2SV_ModEnd> ; sf -> disable_filter_search_var_thresh <S2SV_ModStart> RELAXED_NEIGHBORING_MIN_MAX ; sf -> lf_motion_threshold = LOW_MOTION_THRESHOLD <S2SV_ModEnd> ; sf -> adjust_partitioning_from_last_frame <S2SV_ModStart> 3 ; sf -> <S2SV_ModEnd> use_lp32x32fdct = 1 ; <S2SV_ModStart> sf -> intra_y_mode_mask [ TX_16X16 ] = INTRA_DC_H_V <S2SV_ModEnd> ; } if ( <S2SV_ModStart> 100 ; sf -> <S2SV_ModEnd> use_uv_intra_rd_estimate = 1 ; <S2SV_ModStart> 1 ; sf -> mv . <S2SV_ModStart> 1 ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 4 ; <S2SV_ModStart> -> lpf_pick = LPF_PICK_FROM_Q <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ( 0 == ( frames_since_key <S2SV_ModEnd> + 1 ) % <S2SV_ModStart> ) ; sf -> mv . <S2SV_ModStart> [ i ] = INTRA_DC <S2SV_ModEnd> ; } sf -> <S2SV_ModStart> [ TX_32X32 ] = INTRA_DC <S2SV_ModEnd> ; sf -> frame_parameter_update <S2SV_ModStart> 0 ; sf -> mv . <S2SV_ModEnd> search_method = FAST_HEX ; <S2SV_ModStart> FAST_HEX ; sf -> inter_mode_mask <S2SV_ModEnd> [ BLOCK_32X32 ] = <S2SV_ModStart> [ BLOCK_32X32 ] = INTER_NEAREST_NEAR_NEW ; sf -> inter_mode_mask <S2SV_ModEnd> [ BLOCK_32X64 ] = <S2SV_ModStart> [ BLOCK_32X64 ] = INTER_NEAREST ; sf -> inter_mode_mask <S2SV_ModEnd> [ BLOCK_64X32 ] = <S2SV_ModStart> [ BLOCK_64X32 ] = INTER_NEAREST ; sf -> inter_mode_mask <S2SV_ModEnd> [ BLOCK_64X64 ] = <S2SV_ModStart> [ BLOCK_64X64 ] = INTER_NEAREST <S2SV_ModEnd> ; sf -> max_intra_bsize <S2SV_ModStart> ) { sf -> use_quant_fp = ! is_keyframe ; sf -> auto_min_max_partition_size = is_keyframe ? RELAXED_NEIGHBORING_MIN_MAX : STRICT_NEIGHBORING_MIN_MAX ; sf -> default_max_partition_size <S2SV_ModEnd> = BLOCK_32X32 ; sf <S2SV_ModStart> BLOCK_32X32 ; sf -> default_min_partition_size <S2SV_ModEnd> = BLOCK_8X8 ; sf <S2SV_ModStart> BLOCK_8X8 ; sf -> force_frame_boost = is_keyframe || ( frames_since_key % <S2SV_ModEnd> ( sf -> last_partitioning_redo_frequency <S2SV_ModStart> sf -> max_delta_qindex = is_keyframe <S2SV_ModEnd> ? 20 : 15 <S2SV_ModStart> 1 ; sf -> <S2SV_ModEnd> allow_skip_recode = 0 ; <S2SV_ModStart> allow_skip_recode = 0 ; sf -> inter_mode_mask [ BLOCK_32X32 ] = INTER_NEAREST_NEW_ZERO ; sf -> inter_mode_mask [ BLOCK_32X64 ] = INTER_NEAREST_NEW_ZERO ; sf -> inter_mode_mask [ BLOCK_64X32 ] = INTER_NEAREST_NEW_ZERO ; sf -> inter_mode_mask [ BLOCK_64X64 ] = INTER_NEAREST_NEW_ZERO ; sf -> adaptive_rd_thresh = 2 ; sf -> reuse_inter_pred_sby = 1 ; sf -> partition_search_breakout_rate_thr = 200 ; sf -> coeff_prob_appx_step = 4 ; sf -> use_fast_coef_updates = is_keyframe ? TWO_LOOP : ONE_LOOP_REDUCED ; sf -> mode_search_skip_flags = FLAG_SKIP_INTRA_DIRMISMATCH ; sf -> tx_size_search_method = is_keyframe ? USE_LARGESTALL : USE_TX_8X8 ; sf -> simple_model_rd_from_var = 1 ; if ( ! is_keyframe ) { int i ; if ( content == VP9E_CONTENT_SCREEN ) { for ( i = 0 ; i < BLOCK_SIZES ; ++ i ) sf -> intra_y_mode_bsize_mask [ i ] = INTRA_DC_TM_H_V ; } else { for ( i = 0 ; i < BLOCK_SIZES ; ++ i ) if ( i >= BLOCK_16X16 ) sf -> intra_y_mode_bsize_mask [ i ] = INTRA_DC ; else sf -> intra_y_mode_bsize_mask [ i ] = INTRA_DC_H_V ; } } <S2SV_ModStart> sf -> partition_search_type = VAR_BASED_PARTITION <S2SV_ModEnd> ; sf -> use_nonrd_pick_mode <S2SV_ModStart> 1 ; sf -> mv . search_method = NSTEP ; sf -> mv . reduce_first_step_size = 1 ; sf -> skip_encode_sb = 0 <S2SV_ModEnd> ; } if ( <S2SV_ModStart> >= 7 ) { sf -> adaptive_rd_thresh = 3 ; sf -> mv . search_method = FAST_DIAMOND ; sf -> mv . fullpel_search_step_param = 10 ; if ( cpi -> svc . number_temporal_layers > 2 && cpi -> svc . temporal_layer_id == 0 ) { sf -> mv . search_method = NSTEP ; sf -> mv . fullpel_search_step_param = 6 ; } } if ( speed >= 8 ) { sf -> adaptive_rd_thresh = 4 ; sf -> mv . subpel_force_stop = 2 ; sf -> lpf_pick = LPF_PICK_MINIMAL_LPF <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> static void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w , int <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w , word <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w , word <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w , word
<S2SV_ModStart> static void encode_uniform ( vpx_writer <S2SV_ModEnd> * w , int <S2SV_ModStart> < m ) { vpx_write_literal <S2SV_ModEnd> ( w , v <S2SV_ModStart> ; } else { vpx_write_literal <S2SV_ModEnd> ( w , m <S2SV_ModStart> - 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w , (
<S2SV_ModStart> static int prob_diff_update_cost ( vpx_prob newp , vpx_prob <S2SV_ModEnd> oldp ) { int
<S2SV_ModStart> <S2SV_null> void vp9_cond_prob_diff_update ( vpx_writer * w , vpx_prob <S2SV_ModEnd> * oldp , const <S2SV_ModStart> ] ) { const vpx_prob <S2SV_ModEnd> upd = DIFF_UPDATE_PROB ; <S2SV_ModStart> upd = DIFF_UPDATE_PROB ; vpx_prob <S2SV_ModEnd> newp = get_binary_prob ( <S2SV_ModStart> > 0 ) { vpx_write <S2SV_ModEnd> ( w , 1 <S2SV_ModStart> ; } else { vpx_write <S2SV_ModEnd> ( w , 0
<S2SV_ModStart> int * ct , vpx_prob oldp , vpx_prob * bestp , vpx_prob <S2SV_ModEnd> upd ) { const <S2SV_ModStart> bestsavings = 0 ; vpx_prob <S2SV_ModEnd> newp , bestnewp =
<S2SV_ModStart> * ct , const vpx_prob * oldp , vpx_prob * bestp , vpx_prob upd , int stepsize ) { int <S2SV_ModEnd> i , old_b , <S2SV_ModStart> ; int newp ; vpx_prob <S2SV_ModEnd> bestnewp , newplist [ <S2SV_ModStart> , oldplist ) ; memcpy <S2SV_ModEnd> ( newplist , oldp <S2SV_ModStart> oldp , sizeof ( vpx_prob <S2SV_ModEnd> ) * UNCONSTRAINED_NODES ) <S2SV_ModStart> [ PIVOT_NODE ] ; if ( * bestp > oldp [ PIVOT_NODE ] ) { step = - stepsize ; for ( newp = * bestp ; newp > <S2SV_ModEnd> oldp [ PIVOT_NODE ] <S2SV_ModStart> newp ; } } } else { step = stepsize ; for ( newp = * bestp ; newp < oldp [ PIVOT_NODE ] ; newp += step ) { if ( newp < 1 || newp > 255 ) continue ; newplist [ PIVOT_NODE ] = newp ; vp9_model_to_full_probs ( newplist , newplist ) ; for ( i = UNCONSTRAINED_NODES , new_b = 0 ; i < ENTROPY_NODES ; ++ i ) new_b += cost_branch256 ( ct + 2 * i , newplist [ i ] ) ; new_b += cost_branch256 ( ct + 2 * PIVOT_NODE , newplist [ PIVOT_NODE ] ) ; update_b = prob_diff_update_cost ( newp , oldp [ PIVOT_NODE ] ) + vp9_cost_upd256 ; savings = old_b - new_b - update_b ; if ( savings > bestsavings ) { bestsavings = savings ; bestnewp = newp ; } } } * bestp = bestnewp <S2SV_ModEnd> ; return bestsavings ;
<S2SV_ModStart> <S2SV_null> void vp9_write_prob_diff_update ( vpx_writer * w , vpx_prob newp , vpx_prob <S2SV_ModEnd> oldp ) { const
<S2SV_ModStart> INLINE int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w , int <S2SV_ModStart> int test ) { vpx_write_literal <S2SV_ModEnd> ( w , word
<S2SV_ModStart> LAYER_CONTEXT * get_layer_context ( VP9_COMP * const cpi ) { if ( is_one_pass_cbr_svc ( cpi ) ) return & cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id * cpi -> svc . number_temporal_layers + cpi -> svc . temporal_layer_id ] ; else return ( cpi -> svc . number_temporal_layers > 1 && cpi -> oxcf . rc_mode == VPX_CBR ) ? & cpi -> svc . layer_context [ cpi -> svc . <S2SV_ModEnd> temporal_layer_id ] : & <S2SV_ModStart> temporal_layer_id ] : & cpi -> svc . layer_context [ cpi -> svc . <S2SV_ModEnd> spatial_layer_id ] ; }
<S2SV_ModStart> <S2SV_null> void vp9_inc_frame_in_layer ( VP9_COMP * const cpi <S2SV_ModEnd> ) { LAYER_CONTEXT * <S2SV_ModStart> * const lc = & cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id * cpi -> svc . number_temporal_layers <S2SV_ModEnd> ] ; ++ lc <S2SV_ModStart> lc -> current_video_frame_in_layer ; ++ lc -> frames_from_key_frame ;
<S2SV_ModStart> -> svc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> -> oxcf ; int sl , tl ; int alt_ref_idx = svc -> number_spatial_layers ; svc -> spatial_layer_id = 0 ; svc -> temporal_layer_id = 0 ; if ( cpi -> oxcf . error_resilient_mode == 0 && cpi -> oxcf . pass == 2 ) { if ( vpx_realloc_frame_buffer ( & cpi -> svc . empty_frame . img , SMALL_FRAME_WIDTH , SMALL_FRAME_HEIGHT , cpi -> common . subsampling_x , cpi -> common . subsampling_y , # if CONFIG_VP9_HIGHBITDEPTH cpi -> common . use_highbitdepth , # endif VP9_ENC_BORDER_IN_PIXELS , cpi -> common . byte_alignment , NULL , NULL , NULL ) ) vpx_internal_error ( & cpi -> common . error , VPX_CODEC_MEM_ERROR , "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>empty<S2SV_blank>frame<S2SV_blank>for<S2SV_blank>multiple<S2SV_blank>frame<S2SV_blank>" "contexts" ) ; memset ( cpi -> svc . empty_frame . img . buffer_alloc , 0x80 , cpi -> svc . empty_frame . img . buffer_alloc_sz ) ; } for ( sl = 0 ; sl < oxcf -> ss_number_layers ; ++ sl ) { for ( tl = 0 ; tl < oxcf -> ts_number_layers ; ++ tl ) { int layer = LAYER_IDS_TO_IDX ( sl , tl , oxcf -> ts_number_layers ) ; LAYER_CONTEXT * const lc = & svc -> layer_context [ layer ] ; RATE_CONTROL * const lrc = & lc -> rc ; int i ; lc -> current_video_frame_in_layer = 0 ; lc -> layer_size = 0 ; lc -> frames_from_key_frame = 0 ; lc -> last_frame_type = FRAME_TYPES ; lrc -> ni_av_qi = oxcf -> worst_allowed_q ; lrc -> total_actual_bits = 0 ; lrc -> total_target_vs_actual = 0 ; lrc -> ni_tot_qi = 0 ; lrc -> tot_q = 0.0 ; lrc -> avg_q = 0.0 ; lrc -> ni_frames = 0 ; lrc -> decimation_count = 0 ; lrc -> decimation_factor = 0 ; for ( i = 0 ; i < RATE_FACTOR_LEVELS ; ++ i ) { lrc -> rate_correction_factors [ i ] = 1.0 ; } if ( cpi -> oxcf . rc_mode == VPX_CBR ) { lc -> target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; lrc -> last_q [ INTER_FRAME ] = oxcf -> worst_allowed_q ; lrc -> avg_frame_qindex [ INTER_FRAME ] = oxcf -> worst_allowed_q ; lrc -> avg_frame_qindex [ KEY_FRAME ] = oxcf -> worst_allowed_q ; } else { lc -> target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; lrc -> last_q [ KEY_FRAME ] = oxcf -> best_allowed_q ; lrc -> last_q [ INTER_FRAME ] = oxcf -> best_allowed_q ; lrc -> avg_frame_qindex [ KEY_FRAME ] = ( oxcf -> worst_allowed_q + oxcf -> best_allowed_q ) / 2 ; lrc -> avg_frame_qindex [ INTER_FRAME ] = ( oxcf -> worst_allowed_q + oxcf -> best_allowed_q ) / 2 ; if ( oxcf -> ss_enable_auto_arf [ sl ] ) lc -> alt_ref_idx = alt_ref_idx ++ ; else lc -> alt_ref_idx = INVALID_IDX ; lc -> gold_ref_idx = INVALID_IDX ; } lrc -> buffer_level = oxcf -> starting_buffer_level_ms * lc -> target_bandwidth / 1000 ; lrc -> bits_off_target = lrc -> buffer_level ; } } if ( ! <S2SV_ModEnd> ( svc -> number_temporal_layers <S2SV_ModStart> -> number_temporal_layers > 1 && cpi -> oxcf . rc_mode == VPX_CBR ) && alt_ref_idx < REF_FRAMES ) <S2SV_ModEnd> svc -> layer_context [ <S2SV_ModStart> svc -> layer_context [ 0 ] . gold_ref_idx = alt_ref_idx ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ++ i ) { TWO_PASS <S2SV_ModEnd> * const twopass =
<S2SV_ModStart> lc = get_layer_context ( cpi <S2SV_ModEnd> ) ; const int <S2SV_ModStart> target_bandwidth ; cpi -> alt_ref_source = lc -> alt_ref_source <S2SV_ModEnd> ; if ( cpi
<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> lc = get_layer_context ( cpi <S2SV_ModEnd> ) ; lc -> <S2SV_ModStart> target_bandwidth ; lc -> alt_ref_source = cpi -> alt_ref_source <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> -> svc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> -> rc ; int sl , tl , layer = 0 , spatial_layer_target ; float bitrate_alloc = 1.0 ; if ( svc -> temporal_layering_mode != VP9E_TEMPORAL_LAYERING_MODE_NOLAYERING ) { for ( sl = 0 ; sl < oxcf -> ss_number_layers ; ++ sl ) { spatial_layer_target = 0 ; for ( tl = 0 ; tl < oxcf -> ts_number_layers ; ++ tl ) { layer = LAYER_IDS_TO_IDX ( sl , tl , oxcf -> ts_number_layers ) ; svc -> layer_context [ layer ] . target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; } layer = LAYER_IDS_TO_IDX ( sl , ( ( oxcf -> ts_number_layers - 1 ) < 0 ? 0 : ( oxcf -> ts_number_layers - 1 ) ) , oxcf -> ts_number_layers ) ; spatial_layer_target = svc -> layer_context [ layer ] . target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; for ( tl = 0 ; tl < oxcf -> ts_number_layers ; ++ tl ) { LAYER_CONTEXT * const lc = & svc -> layer_context [ sl * oxcf -> ts_number_layers + tl ] ; RATE_CONTROL * const lrc = & lc -> rc ; lc -> spatial_layer_target_bandwidth = spatial_layer_target ; bitrate_alloc = ( float ) lc -> target_bandwidth / spatial_layer_target ; lrc -> starting_buffer_level = ( int64_t ) ( rc -> starting_buffer_level * bitrate_alloc ) ; lrc -> optimal_buffer_level = ( int64_t ) ( rc -> optimal_buffer_level * bitrate_alloc ) ; lrc -> maximum_buffer_size = ( int64_t ) ( rc -> maximum_buffer_size * bitrate_alloc ) ; lrc -> bits_off_target = MIN ( lrc -> bits_off_target , lrc -> maximum_buffer_size ) ; lrc -> buffer_level = MIN ( lrc -> buffer_level , lrc -> maximum_buffer_size ) ; lc -> framerate = cpi -> framerate / oxcf -> ts_rate_decimator [ tl ] ; lrc -> avg_frame_bandwidth = ( int ) ( lc -> target_bandwidth / lc -> framerate ) ; lrc -> max_frame_bandwidth = rc -> max_frame_bandwidth ; lrc -> worst_quality = rc -> worst_quality ; lrc -> best_quality = rc -> best_quality ; } } } else { int layer_end <S2SV_ModEnd> ; if ( svc <S2SV_ModStart> -> number_temporal_layers > 1 && cpi -> oxcf . rc_mode == VPX_CBR <S2SV_ModStart> & lc -> rc ; lc -> target_bandwidth = oxcf -> layer_target_bitrate [ layer ] ; bitrate_alloc = ( float ) lc -> target_bandwidth / target_bandwidth ; lrc -> starting_buffer_level = ( int64_t ) ( rc -> starting_buffer_level * bitrate_alloc ) ; lrc -> optimal_buffer_level = ( int64_t ) ( rc -> optimal_buffer_level * bitrate_alloc ) ; lrc -> maximum_buffer_size = ( int64_t ) ( rc -> maximum_buffer_size * bitrate_alloc ) ; lrc -> bits_off_target = MIN ( lrc -> bits_off_target , lrc -> maximum_buffer_size ) ; lrc -> buffer_level = MIN ( lrc -> buffer_level , lrc -> maximum_buffer_size ) <S2SV_ModStart> -> number_temporal_layers > 1 && cpi -> oxcf . rc_mode == VPX_CBR <S2SV_ModEnd> ) { lc -> <S2SV_ModStart> lc -> framerate = cpi <S2SV_ModEnd> -> framerate / oxcf <S2SV_ModStart> lc -> framerate = cpi <S2SV_ModEnd> -> framerate ; } <S2SV_ModStart> ; } lrc -> avg_frame_bandwidth <S2SV_ModEnd> = ( int ) <S2SV_ModStart> best_quality ; } } }
<S2SV_ModStart> framerate ) { const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> lc = get_layer_context ( cpi <S2SV_ModEnd> ) ; RATE_CONTROL * <S2SV_ModStart> framerate ; lrc -> avg_frame_bandwidth <S2SV_ModEnd> = ( int ) <S2SV_ModStart> ) ( lrc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> two_pass_vbrmin_section <S2SV_ModStart> int64_t ) lrc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf -> two_pass_vbrmax_section <S2SV_ModStart> / 100 ) ; vp9_rc_set_gf_interval_range ( cpi , lrc ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> -> svc ; const VP9EncoderConfig <S2SV_ModEnd> * const oxcf = <S2SV_ModStart> lc = get_layer_context ( cpi <S2SV_ModEnd> ) ; RATE_CONTROL * <S2SV_ModStart> rc ; const int st_idx = svc -> spatial_layer_id * svc -> number_temporal_layers + <S2SV_ModEnd> svc -> temporal_layer_id ; <S2SV_ModStart> svc -> temporal_layer_id ; const int tl = svc -> temporal_layer_id ; lc -> framerate = cpi <S2SV_ModEnd> -> framerate / oxcf <S2SV_ModStart> oxcf -> ts_rate_decimator [ tl <S2SV_ModEnd> ] ; lrc -> <S2SV_ModStart> ] ; lrc -> avg_frame_bandwidth <S2SV_ModEnd> = ( int ) <S2SV_ModStart> max_frame_bandwidth ; if ( tl <S2SV_ModEnd> == 0 ) { <S2SV_ModStart> avg_frame_size = lrc -> avg_frame_bandwidth <S2SV_ModEnd> ; } else { <S2SV_ModStart> const double prev_layer_framerate = cpi <S2SV_ModEnd> -> framerate / oxcf <S2SV_ModStart> oxcf -> ts_rate_decimator [ tl <S2SV_ModEnd> - 1 ] ; <S2SV_ModStart> prev_layer_target_bandwidth = oxcf -> layer_target_bitrate [ st_idx - 1 ] <S2SV_ModEnd> ; lc -> avg_frame_size
<S2SV_ModStart> ) { MACROBLOCK * const x = & cpi -> td . <S2SV_ModEnd> mb ; MACROBLOCKD * <S2SV_ModStart> x -> e_mbd ; const MV_SPEED_FEATURES * const mv_sf = & cpi -> sf . mv ; <S2SV_ModStart> int bestsme = INT_MAX ; int distortion ; unsigned int sse ; int cost_list [ 5 ] <S2SV_ModStart> stride = stride ; step_param = mv_sf -> reduce_first_step_size ; step_param = MIN ( step_param , MAX_MVSEARCH_STEPS - 2 ) <S2SV_ModEnd> ; vp9_hex_search ( x <S2SV_ModStart> sadpb , 1 , cond_cost_list ( cpi , cost_list ) , <S2SV_ModStart> , ref_mv ) ; bestsme = cpi -> find_fractional_mv_step ( x , ref_mv , & best_ref_mv1 , cpi -> common . allow_high_precision_mv , x -> errorperbit , & cpi -> fn_ptr [ BLOCK_16X16 ] , 0 , mv_sf -> subpel_iters_per_step , cond_cost_list ( cpi , cost_list ) , NULL , NULL , & distortion , & sse , NULL , 0 , 0 ) ; <S2SV_ModEnd> x -> plane [
<S2SV_ModStart> VP9_COMP * cpi , YV12_BUFFER_CONFIG * * frames , <S2SV_ModStart> ; int mb_cols = ( frames [ alt_ref_index ] -> y_crop_width + 15 ) >> 4 <S2SV_ModEnd> ; int mb_rows = <S2SV_ModStart> ; int mb_rows = ( frames [ alt_ref_index ] -> y_crop_height + 15 ) >> 4 <S2SV_ModEnd> ; int mb_y_offset = <S2SV_ModStart> mb_uv_offset = 0 ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , unsigned <S2SV_ModStart> unsigned int , accumulator [ <S2SV_ModEnd> 16 * 16 * <S2SV_ModStart> * 16 * 3 ] ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , uint16_t <S2SV_ModStart> , uint16_t , count [ <S2SV_ModEnd> 16 * 16 * <S2SV_ModStart> * 16 * 3 ] <S2SV_ModStart> = & cpi -> td . <S2SV_ModStart> YV12_BUFFER_CONFIG * f = <S2SV_ModEnd> frames [ alt_ref_index ] <S2SV_ModStart> , * dst2 ; # if CONFIG_VP9_HIGHBITDEPTH DECLARE_ALIGNED ( 16 , uint16_t , predictor16 [ 16 * 16 * 3 ] ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16 , uint8_t <S2SV_ModStart> 16 , uint8_t , predictor8 [ 16 * 16 * 3 ] ) ; uint8_t * predictor ; # else DECLARE_ALIGNED ( 16 , uint8_t , predictor [ <S2SV_ModEnd> 16 * 16 * <S2SV_ModStart> * 16 * 3 ] ) ; # endif <S2SV_ModEnd> const int mb_uv_height = <S2SV_ModStart> ] . subsampling_y ; const int mb_uv_width = 16 >> mbd -> plane [ 1 ] . subsampling_x ; <S2SV_ModStart> ; int i ; # if CONFIG_VP9_HIGHBITDEPTH if ( mbd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { predictor = CONVERT_TO_BYTEPTR ( predictor16 ) ; } else { predictor = predictor8 ; } # endif <S2SV_ModEnd> for ( i = <S2SV_ModStart> mb_row ++ ) { cpi -> td . <S2SV_ModEnd> mb . mv_row_min = <S2SV_ModStart> ) ; cpi -> td . <S2SV_ModStart> mv_row_max = ( ( <S2SV_ModEnd> mb_rows - 1 - <S2SV_ModStart> * VP9_INTERP_EXTEND ) ; <S2SV_ModEnd> for ( mb_col = <S2SV_ModStart> ; int stride ; memset <S2SV_ModEnd> ( accumulator , 0 <S2SV_ModStart> ] ) ) ; memset <S2SV_ModEnd> ( count , 0 <S2SV_ModStart> ] ) ) ; cpi -> td . <S2SV_ModEnd> mb . mv_col_min = <S2SV_ModStart> ) ; cpi -> td . <S2SV_ModStart> mv_col_max = ( ( <S2SV_ModEnd> mb_cols - 1 - <S2SV_ModStart> * VP9_INTERP_EXTEND ) ; <S2SV_ModEnd> for ( frame = <S2SV_ModStart> frame ++ ) { const int thresh_low = 10000 ; const int thresh_high = 20000 ; if ( <S2SV_ModEnd> frames [ frame ] <S2SV_ModStart> { int err = <S2SV_ModEnd> temporal_filter_find_matching_mb_c ( cpi , <S2SV_ModStart> temporal_filter_find_matching_mb_c ( cpi , <S2SV_ModEnd> frames [ alt_ref_index ] <S2SV_ModStart> y_buffer + mb_y_offset , <S2SV_ModEnd> frames [ frame ] <S2SV_ModStart> y_buffer + mb_y_offset , <S2SV_ModEnd> frames [ frame ] <S2SV_ModStart> -> y_stride ) ; <S2SV_ModEnd> filter_weight = err < <S2SV_ModStart> filter_weight = err < thresh_low <S2SV_ModEnd> ? 2 : err <S2SV_ModStart> 2 : err < thresh_high <S2SV_ModEnd> ? 1 : 0 <S2SV_ModStart> temporal_filter_predictors_mb_c ( mbd , frames [ frame ] -> y_buffer + mb_y_offset , frames [ frame ] -> u_buffer + mb_uv_offset , frames [ frame ] -> v_buffer + mb_uv_offset , frames [ frame ] -> y_stride , mb_uv_width , mb_uv_height , mbd -> mi [ 0 ] -> bmi [ 0 ] . as_mv [ 0 ] . as_mv . row , mbd -> mi [ 0 ] -> bmi [ 0 ] . as_mv [ 0 ] . as_mv . col , predictor , scale , mb_col * 16 , mb_row * 16 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( mbd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { int adj_strength = strength + 2 * ( mbd -> bd - 8 ) ; vp9_highbd_temporal_filter_apply ( f -> y_buffer + mb_y_offset , f -> y_stride , predictor , 16 , 16 , adj_strength , filter_weight , accumulator , count ) ; vp9_highbd_temporal_filter_apply ( f -> u_buffer + mb_uv_offset , f -> uv_stride , predictor + 256 , mb_uv_width , mb_uv_height , adj_strength , filter_weight , accumulator + 256 , count + 256 ) ; vp9_highbd_temporal_filter_apply ( f -> v_buffer + mb_uv_offset , f -> uv_stride , predictor + 512 , mb_uv_width , mb_uv_height , adj_strength , filter_weight , accumulator + 512 , count + 512 ) ; } else { vp9_temporal_filter_apply ( f -> y_buffer + mb_y_offset , f -> y_stride , predictor , 16 , 16 , strength , filter_weight , accumulator , count ) ; vp9_temporal_filter_apply ( f -> u_buffer + mb_uv_offset , f -> uv_stride , predictor + 256 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 256 , count + 256 ) ; vp9_temporal_filter_apply ( f -> v_buffer + mb_uv_offset , f -> uv_stride , predictor + 512 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 512 , count + 512 ) ; } # else vp9_temporal_filter_apply ( f -> y_buffer + mb_y_offset , f -> y_stride , predictor , 16 , 16 , strength , filter_weight , accumulator , count ) ; vp9_temporal_filter_apply ( f -> u_buffer + mb_uv_offset , f -> uv_stride , predictor + 256 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 256 , count + 256 ) ; vp9_temporal_filter_apply ( f -> v_buffer + mb_uv_offset , f -> uv_stride , predictor + 512 , mb_uv_width , mb_uv_height , strength , filter_weight , accumulator + 512 , count + 512 ) ; # endif } } # if CONFIG_VP9_HIGHBITDEPTH if ( mbd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { uint16_t * dst1_16 ; uint16_t * dst2_16 ; dst1 = cpi -> alt_ref_buffer . y_buffer ; dst1_16 = CONVERT_TO_SHORTPTR ( dst1 ) <S2SV_ModEnd> ; stride = cpi <S2SV_ModStart> ) ; pval *= <S2SV_ModEnd> fixed_divide [ count [ <S2SV_ModStart> pval >>= 19 ; dst1_16 [ byte ] = ( uint16_t <S2SV_ModEnd> ) pval ; byte <S2SV_ModStart> alt_ref_buffer . v_buffer ; dst1_16 = CONVERT_TO_SHORTPTR ( dst1 ) ; dst2_16 = CONVERT_TO_SHORTPTR ( dst2 ) ; <S2SV_ModStart> 0 ; j < mb_uv_width <S2SV_ModEnd> ; j ++ , <S2SV_ModStart> ) ; pval *= <S2SV_ModEnd> fixed_divide [ count [ <S2SV_ModStart> pval >>= 19 ; dst1_16 [ byte ] = ( uint16_t <S2SV_ModEnd> ) pval ; pval <S2SV_ModStart> ) ; pval *= <S2SV_ModEnd> fixed_divide [ count [ <S2SV_ModStart> pval >>= 19 ; dst2_16 [ byte ] = ( uint16_t <S2SV_ModEnd> ) pval ; byte <S2SV_ModStart> byte += stride - mb_uv_width ; } } else { dst1 = cpi -> alt_ref_buffer . y_buffer ; stride = cpi -> alt_ref_buffer . y_stride ; byte = mb_y_offset ; for ( i = 0 , k = 0 ; i < 16 ; i ++ ) { for ( j = 0 ; j < 16 ; j ++ , k ++ ) { unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - 16 ; } dst1 = cpi -> alt_ref_buffer . u_buffer ; dst2 = cpi -> alt_ref_buffer . v_buffer ; stride = cpi -> alt_ref_buffer . uv_stride ; byte = mb_uv_offset ; for ( i = 0 , k = 256 ; i < mb_uv_height ; i ++ ) { for ( j = 0 ; j < mb_uv_width ; j ++ , k ++ ) { int m = k + 256 ; unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; pval = accumulator [ m ] + ( count [ m ] >> 1 ) ; pval *= fixed_divide [ count [ m ] ] ; pval >>= 19 ; dst2 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - mb_uv_width ; } } # else dst1 = cpi -> alt_ref_buffer . y_buffer ; stride = cpi -> alt_ref_buffer . y_stride ; byte = mb_y_offset ; for ( i = 0 , k = 0 ; i < 16 ; i ++ ) { for ( j = 0 ; j < 16 ; j ++ , k ++ ) { unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - 16 ; } dst1 = cpi -> alt_ref_buffer . u_buffer ; dst2 = cpi -> alt_ref_buffer . v_buffer ; stride = cpi -> alt_ref_buffer . uv_stride ; byte = mb_uv_offset ; for ( i = 0 , k = 256 ; i < mb_uv_height ; i ++ ) { for ( j = 0 ; j < mb_uv_width ; j ++ , k ++ ) { int m = k + 256 ; unsigned int pval = accumulator [ k ] + ( count [ k ] >> 1 ) ; pval *= fixed_divide [ count [ k ] ] ; pval >>= 19 ; dst1 [ byte ] = ( uint8_t ) pval ; pval = accumulator [ m ] + ( count [ m ] >> 1 ) ; pval *= fixed_divide [ count [ m ] ] ; pval >>= 19 ; dst2 [ byte ] = ( uint8_t ) pval ; byte ++ ; } byte += stride - mb_uv_width ; } # endif mb_y_offset += 16 ; mb_uv_offset += mb_uv_width ; } mb_y_offset += 16 * ( f -> y_stride - mb_cols ) <S2SV_ModEnd> ; mb_uv_offset += mb_uv_height <S2SV_ModStart> ; mb_uv_offset += mb_uv_height * <S2SV_ModEnd> f -> uv_stride - <S2SV_ModStart> f -> uv_stride - mb_uv_width * mb_cols <S2SV_ModEnd> ; } for (
<S2SV_ModStart> int stride , int uv_block_width , int uv_block_height <S2SV_ModEnd> , int mv_row , <S2SV_ModStart> * const kernel = vp9_filter_kernels [ <S2SV_ModEnd> xd -> mi [ <S2SV_ModStart> -> mbmi . interp_filter ] <S2SV_ModEnd> ; enum mv_precision mv_precision_uv <S2SV_ModStart> uv_stride ; if ( uv_block_width <S2SV_ModEnd> == 8 ) { <S2SV_ModStart> = MV_PRECISION_Q3 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_highbd_build_inter_predictor ( y_mb_ptr , stride , & pred [ 0 ] , 16 , & mv , scale , 16 , 16 , which_mv , kernel , MV_PRECISION_Q3 , x , y , xd -> bd ) ; vp9_highbd_build_inter_predictor ( u_mb_ptr , uv_stride , & pred [ 256 ] , uv_block_width , & mv , scale , uv_block_width , uv_block_height , which_mv , kernel , mv_precision_uv , x , y , xd -> bd ) ; vp9_highbd_build_inter_predictor ( v_mb_ptr , uv_stride , & pred [ 512 ] , uv_block_width , & mv , scale , uv_block_width , uv_block_height , which_mv , kernel , mv_precision_uv , x , y , xd -> bd ) ; return ; } # endif <S2SV_ModStart> [ 256 ] , uv_block_width , & mv , scale , uv_block_width , uv_block_height <S2SV_ModEnd> , which_mv , kernel <S2SV_ModStart> [ 512 ] , uv_block_width , & mv , scale , uv_block_width , uv_block_height <S2SV_ModEnd> , which_mv , kernel
<S2SV_ModStart> frame2 , unsigned int block_width , unsigned int block_height <S2SV_ModEnd> , int strength , <S2SV_ModStart> byte = 0 ; const int rounding = strength > 0 ? 1 << ( strength - 1 ) : 0 ; <S2SV_ModStart> 0 ; i < block_height <S2SV_ModEnd> ; i ++ ) <S2SV_ModStart> 0 ; j < block_width <S2SV_ModEnd> ; j ++ , <S2SV_ModStart> 3 ; modifier += rounding <S2SV_ModEnd> ; modifier >>= strength <S2SV_ModStart> byte += stride - block_width <S2SV_ModEnd> ; } } <S2SV_null>
<S2SV_ModStart> * t , const vpx_prob * context_tree , int32_t <S2SV_ModEnd> extra , uint8_t token
<S2SV_ModStart> * t , const vpx_prob <S2SV_ModEnd> * context_tree , uint8_t
<S2SV_ModStart> 1 ) ; return segfeature_active <S2SV_ModEnd> ( seg , segment_id
<S2SV_ModStart> args = argv ; ( void ) plane ; ( void ) plane_bsize ; ( void ) tx_size ; <S2SV_ModStart> ( ! args -> <S2SV_ModEnd> eobs [ block ]
<S2SV_ModStart> args = arg ; ThreadData * const td = args -> td ; MACROBLOCK * const x = & td -> mb ; <S2SV_ModStart> * const xd = & x -> e_mbd <S2SV_ModEnd> ; struct macroblock_plane * <S2SV_ModStart> * p = & x -> <S2SV_ModEnd> plane [ plane ]
<S2SV_ModStart> args -> cpi ; ThreadData * const td = args -> td ; MACROBLOCK * const x = & td -> mb ; MACROBLOCKD * const xd = & x -> e_mbd <S2SV_ModEnd> ; TOKENEXTRA * * <S2SV_ModStart> * p = & x -> <S2SV_ModEnd> plane [ plane ] <S2SV_ModStart> -> plane_type ; const tran_low_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff , block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan , * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = td -> rd_counts . coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob <S2SV_ModEnd> ( * const coef_probs <S2SV_ModStart> -> common . fc -> <S2SV_ModEnd> coef_probs [ tx_size ] <S2SV_ModStart> [ COEFF_CONTEXTS ] = td -> counts -> <S2SV_ModEnd> eob_branch [ tx_size ] <S2SV_ModStart> , tx_size ) ; int16_t token ; EXTRABIT extra ; <S2SV_ModStart> ] ] ; } vp9_get_token_extra ( v , & token , & extra ) ; <S2SV_ModStart> [ pt ] , <S2SV_ModEnd> extra , ( uint8_t <S2SV_ModStart> , ( uint8_t ) <S2SV_ModEnd> token , ( uint8_t <S2SV_ModStart> ] = vp9_pt_energy_class [ <S2SV_ModEnd> token ] ; ++
<S2SV_ModStart> args = { x -> plane [ plane ] . eobs
<S2SV_ModStart> VP9_COMP * cpi , ThreadData * td , <S2SV_ModStart> cpi -> common ; MACROBLOCK * const x = & td -> mb ; <S2SV_ModStart> const xd = & x -> <S2SV_ModEnd> e_mbd ; MB_MODE_INFO * <S2SV_ModStart> 0 ] -> mbmi <S2SV_ModEnd> ; const int ctx <S2SV_ModStart> int skip_inc = ! segfeature_active <S2SV_ModEnd> ( & cm -> <S2SV_ModStart> = { cpi , td <S2SV_ModEnd> , t } ; <S2SV_ModStart> ( ! dry_run ) td -> counts -> <S2SV_ModEnd> skip [ ctx ] <S2SV_ModStart> , bsize ) ; <S2SV_ModEnd> return ; } if <S2SV_ModStart> ! dry_run ) { td -> counts -> <S2SV_ModEnd> skip [ ctx ] <S2SV_ModStart> & arg ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> unsigned int i , vpx_tree <S2SV_ModEnd> tree , unsigned int
<S2SV_ModStart> * tokens , const vpx_tree_index <S2SV_ModEnd> * tree , int <S2SV_ModStart> ; do { const vpx_tree_index <S2SV_ModEnd> j = tree [
<S2SV_ModStart> * tokens , const vpx_tree_index <S2SV_ModEnd> * tree ) {
<S2SV_ModStart> <S2SV_null> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree , unsigned int
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k__cospi_m16_m16 = _mm_set1_epi16 ( ( int16_t ) <S2SV_ModStart> k__cospi_p16_p16 = _mm_set1_epi16 ( ( int16_t )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k__sinpi_p03_p03 = _mm_set1_epi16 ( ( int16_t )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k__cospi_p16_p16 = _mm_set1_epi16 ( ( int16_t )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k__cospi_p16_p16 = _mm_set1_epi16 ( ( int16_t ) <S2SV_ModStart> ) ; const __m128i k__cospi_p08_m24 = pair_set_epi16 ( cospi_8_64 , - cospi_24_64 <S2SV_ModEnd> ) ; const __m128i <S2SV_ModStart> [ 2 ] , <S2SV_ModEnd> k__cospi_p24_p08 ) ; v <S2SV_ModStart> ) ; v [ 3 ] = _mm_madd_epi16 ( u [ 3 <S2SV_ModEnd> ] , k__cospi_p24_p08 ) <S2SV_ModStart> , k__cospi_p24_p08 ) ; v [ 4 ] = _mm_madd_epi16 ( u [ 2 ] , k__cospi_p08_m24 ) ; v [ 5 ] = _mm_madd_epi16 ( u [ 3 ] , k__cospi_p08_m24 ) ; v [ 6 ] = _mm_madd_epi16 ( u [ 0 ] , k__cospi_p24_p08 ) ; v [ 7 ] = _mm_madd_epi16 ( u [ 1 ] , k__cospi_p24_p08 ) ; <S2SV_ModStart> [ 2 ] = _mm_add_epi16 ( p [ 3 ] , t [ 2 ] ) ; s [ 3 ] = <S2SV_ModStart> ) ; s [ 4 ] = _mm_sub_epi16 ( p [ 4 ] , t [ 5 ] ) ; s [ 5 ] = _mm_add_epi16 <S2SV_ModEnd> ( p [ 4
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k__cospi_p16_p16 = _mm_set1_epi16 ( ( int16_t )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> k__cospi_p16_p16 = _mm_set1_epi16 ( ( int16_t )
<S2SV_ModStart> __m128i * res , const int bit ) { <S2SV_ModEnd> __m128i sign0 = _mm_srai_epi16 <S2SV_ModStart> ) ; if ( bit == 2 ) { const __m128i const_rounding = _mm_set1_epi16 ( 1 ) ; res [ 0 ] = _mm_add_epi16 ( res [ 0 ] , const_rounding ) ; res [ 1 ] = _mm_add_epi16 ( res [ 1 ] , const_rounding ) ; res [ 2 ] = _mm_add_epi16 ( res [ 2 ] , const_rounding ) ; res [ 3 ] = _mm_add_epi16 ( res [ 3 ] , const_rounding ) ; res [ 4 ] = _mm_add_epi16 ( res [ 4 ] , const_rounding ) ; res [ 5 ] = _mm_add_epi16 ( res [ 5 ] , const_rounding ) ; res [ 6 ] = _mm_add_epi16 ( res [ 6 ] , const_rounding ) ; res [ 7 ] = _mm_add_epi16 ( res [ 7 ] , const_rounding <S2SV_ModEnd> ) ; } res <S2SV_ModStart> , sign7 ) ; if ( bit == 1 ) { res [ 0 ] = _mm_srai_epi16 ( res [ 0 ] , 1 ) ; res [ 1 ] = _mm_srai_epi16 ( res [ 1 ] , 1 ) ; res [ 2 ] = _mm_srai_epi16 ( res [ 2 ] , 1 ) ; res [ 3 ] = _mm_srai_epi16 ( res [ 3 ] , 1 ) ; res [ 4 ] = _mm_srai_epi16 ( res [ 4 ] , 1 ) ; res [ 5 ] = _mm_srai_epi16 ( res [ 5 ] , 1 ) ; res [ 6 ] = _mm_srai_epi16 ( res [ 6 ] , 1 ) ; res [ 7 ] = _mm_srai_epi16 ( res [ 7 ] , 1 ) ; } else { res [ 0 ] = _mm_srai_epi16 ( res [ 0 ] , 2 ) ; res [ 1 ] = _mm_srai_epi16 ( res [ 1 ] , 2 ) ; res [ 2 ] = _mm_srai_epi16 ( res [ 2 ] , 2 ) ; res [ 3 ] = _mm_srai_epi16 ( res [ 3 ] , 2 ) ; res [ 4 ] = _mm_srai_epi16 ( res [ 4 ] , 2 ) ; res [ 5 ] = _mm_srai_epi16 ( res [ 5 ] , 2 ) ; res [ 6 ] = _mm_srai_epi16 ( res [ 6 ] , 2 ) ; res [ 7 ] = _mm_srai_epi16 ( res [ 7 ] , 2 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> int16_t * input , tran_low_t <S2SV_ModEnd> * output , int <S2SV_ModStart> { case DCT_DCT : vpx_fdct16x16_sse2 <S2SV_ModEnd> ( input , output
<S2SV_ModStart> int16_t * input , tran_low_t <S2SV_ModEnd> * output , int <S2SV_ModStart> { case DCT_DCT : vpx_fdct4x4_sse2 <S2SV_ModEnd> ( input , output
<S2SV_ModStart> int16_t * input , tran_low_t <S2SV_ModEnd> * output , int <S2SV_ModStart> { case DCT_DCT : vpx_fdct8x8_sse2 <S2SV_ModEnd> ( input , output
<S2SV_ModStart> INLINE void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output , __m128i
<S2SV_ModStart> INLINE void write_buffer_4x4 ( tran_low_t <S2SV_ModEnd> * output , __m128i <S2SV_ModStart> , 2 ) ; store_output ( & out01 , <S2SV_ModEnd> ( output + 0 <S2SV_ModStart> 0 * 8 ) ) ; store_output ( & out23 , <S2SV_ModEnd> ( output + 1 <S2SV_ModStart> 1 * 8 ) <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> INLINE void write_buffer_8x8 ( tran_low_t <S2SV_ModEnd> * output , __m128i <S2SV_ModStart> int stride ) { store_output ( & res [ 0 ] , <S2SV_ModEnd> ( output + 0 <S2SV_ModStart> 0 * stride ) ) ; store_output ( & res [ 1 ] , <S2SV_ModEnd> ( output + 1 <S2SV_ModStart> 1 * stride ) ) ; store_output ( & res [ 2 ] , <S2SV_ModEnd> ( output + 2 <S2SV_ModStart> 2 * stride ) ) ; store_output ( & res [ 3 ] , <S2SV_ModEnd> ( output + 3 <S2SV_ModStart> 3 * stride ) ) ; store_output ( & res [ 4 ] , <S2SV_ModEnd> ( output + 4 <S2SV_ModStart> 4 * stride ) ) ; store_output ( & res [ 5 ] , <S2SV_ModEnd> ( output + 5 <S2SV_ModStart> 5 * stride ) ) ; store_output ( & res [ 6 ] , <S2SV_ModEnd> ( output + 6 <S2SV_ModStart> 6 * stride ) ) ; store_output ( & res [ 7 ] , <S2SV_ModEnd> ( output + 7 <S2SV_ModStart> 7 * stride ) <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) {
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> ) { vp9_ref_frame_t * const <S2SV_ModStart> { YV12_BUFFER_CONFIG * fb = get_ref_frame ( & ctx -> cpi -> common <S2SV_ModEnd> , frame -> idx <S2SV_ModStart> , frame -> idx ) ; if ( fb == NULL ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; yuvconfig2image ( &
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> map -> active_map , ( int ) <S2SV_ModStart> map -> rows , ( int )
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> , vp8_postproc_cfg_t * ) <S2SV_ModEnd> ; if ( config <S2SV_ModStart> ; ( void ) <S2SV_ModEnd> args ; return VPX_CODEC_INCAPABLE
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) {
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> va_list args ) { ( void ) ctx ; ( void ) args ;
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) {
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> && ( cfg -> <S2SV_ModEnd> g_pass == VPX_RC_FIRST_PASS ||
<S2SV_ModStart> ( vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> , va_list args )
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> ctx -> cpi ; vpx_svc_extra_cfg_t <S2SV_ModEnd> * const params = <S2SV_ModStart> va_arg ( args , vpx_svc_extra_cfg_t * ) ; int sl , tl ; for ( sl = 0 ; sl < <S2SV_ModEnd> cpi -> svc . <S2SV_ModStart> cpi -> svc . number_spatial_layers ; ++ sl ) { for ( tl = 0 ; tl < <S2SV_ModEnd> cpi -> svc . <S2SV_ModStart> cpi -> svc . number_temporal_layers ; ++ tl ) { const int layer = LAYER_IDS_TO_IDX ( sl , tl , cpi -> svc . number_temporal_layers ) ; LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ layer ] ; lc -> max_q = params -> max_quantizers [ sl ] ; lc -> min_q = params -> min_quantizers [ sl ] ; lc -> scaling_factor_num = params -> scaling_factor_num [ sl ] ; lc -> scaling_factor_den = params -> scaling_factor_den [ sl ] ; } } <S2SV_ModEnd> return VPX_CODEC_OK ; }
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) {
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) {
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) {
<S2SV_ModStart> -> cpi ) ; # if CONFIG_MULTITHREAD pthread_mutex_destroy ( & ctx -> buffer_pool -> pool_mutex ) ; # endif vpx_free ( ctx -> buffer_pool ) ; vpx_free <S2SV_ModEnd> ( ctx ) ;
<S2SV_ModStart> res = VPX_CODEC_OK ; VP9_COMP * const cpi = ctx -> cpi ; const vpx_rational_t * const timebase = & ctx -> cfg . g_timebase ; size_t data_sz ; if ( img != NULL ) { <S2SV_ModEnd> res = validate_img ( <S2SV_ModStart> , img ) ; if ( res == VPX_CODEC_OK && cpi != NULL ) { data_sz = ctx -> cfg . g_w * ctx -> cfg . g_h * get_image_bps ( img ) / 8 * ( cpi -> multi_arf_allowed ? 8 : 2 ) ; if ( data_sz < 4096 ) data_sz = 4096 ; if ( ctx -> cx_data == NULL || ctx -> cx_data_sz < data_sz ) { ctx -> cx_data_sz = data_sz ; free ( ctx -> cx_data ) ; ctx -> cx_data = ( unsigned char * ) malloc ( ctx -> cx_data_sz ) ; if ( ctx -> cx_data == NULL ) { return VPX_CODEC_MEM_ERROR ; } } } } <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; } vp9_apply_encoding_flags ( cpi , flags ) ; <S2SV_ModEnd> if ( ctx -> <S2SV_ModStart> res == VPX_CODEC_OK && <S2SV_ModEnd> cpi != NULL ) <S2SV_ModStart> { unsigned int lib_flags = 0 <S2SV_ModStart> sd ; int64_t dst_time_stamp = timebase_units_to_ticks ( timebase , pts ) ; int64_t dst_end_time_stamp = timebase_units_to_ticks ( timebase , pts + duration ) <S2SV_ModEnd> ; size_t size , <S2SV_ModStart> init_flags & VPX_CODEC_USE_PSNR ) cpi <S2SV_ModEnd> -> b_calculate_psnr = 1 <S2SV_ModStart> -> b_calculate_psnr = 1 <S2SV_ModEnd> ; if ( img <S2SV_ModStart> if ( vp9_receive_raw_frame ( cpi , flags | ctx -> next_frame_flags <S2SV_ModEnd> , & sd , <S2SV_ModStart> dst_end_time_stamp ) ) { <S2SV_ModEnd> res = update_error_state ( <S2SV_ModStart> error ) ; } ctx -> next_frame_flags = 0 ; <S2SV_ModStart> = ctx -> cx_data_sz <S2SV_ModEnd> ; if ( ctx <S2SV_ModStart> 1 != vp9_get_compressed_data ( <S2SV_ModEnd> cpi , & lib_flags <S2SV_ModStart> ( size ) { vpx_codec_cx_pkt_t pkt ; # if CONFIG_SPATIAL_SVC if ( cpi -> use_svc ) cpi -> svc . layer_context [ cpi -> svc . spatial_layer_id * cpi -> svc . number_temporal_layers ] . layer_size += size ; # endif if ( ! <S2SV_ModEnd> cpi -> common . <S2SV_ModStart> -> common . show_frame || ( cpi -> use_svc && cpi -> svc . spatial_layer_id < cpi -> svc . number_spatial_layers - 1 ) <S2SV_ModEnd> ) { if ( <S2SV_ModStart> cx_data_sz -= size ; if ( ctx -> output_cx_pkt_cb . output_cx_pkt ) { pkt . kind = VPX_CODEC_CX_FRAME_PKT ; pkt . data . frame . pts = ticks_to_timebase_units ( timebase , dst_time_stamp ) ; pkt . data . frame . duration = ( unsigned long ) ticks_to_timebase_units ( timebase , <S2SV_ModEnd> dst_end_time_stamp - dst_time_stamp ) <S2SV_ModStart> ) ; pkt . data . frame . flags = get_frame_pkt_flags ( cpi , lib_flags ) ; pkt . data . frame . buf = ctx -> pending_cx_data ; pkt . data . frame . sz = size ; ctx -> pending_cx_data = NULL ; ctx -> pending_cx_data_sz = 0 ; ctx -> pending_frame_count = 0 ; ctx -> pending_frame_magnitude = 0 ; ctx -> output_cx_pkt_cb . output_cx_pkt ( & pkt , ctx -> output_cx_pkt_cb . user_priv ) ; } continue ; } pkt . <S2SV_ModStart> frame . pts = ticks_to_timebase_units ( timebase , dst_time_stamp ) <S2SV_ModEnd> ; pkt . data <S2SV_ModStart> ( unsigned long ) ticks_to_timebase_units ( timebase , dst_end_time_stamp - dst_time_stamp <S2SV_ModEnd> ) ; pkt . <S2SV_ModStart> frame . flags = get_frame_pkt_flags ( cpi , lib_flags ) <S2SV_ModEnd> ; if ( ctx <S2SV_ModStart> pending_cx_data_sz += size ; if ( ! ctx -> output_cx_pkt_cb . output_cx_pkt ) <S2SV_ModStart> = - 1 ; if ( ctx -> output_cx_pkt_cb . output_cx_pkt ) ctx -> output_cx_pkt_cb . output_cx_pkt ( & pkt , ctx -> output_cx_pkt_cb . user_priv ) ; else <S2SV_ModStart> cx_data_sz -= size ; # if VPX_ENCODER_ABI_VERSION > ( 5 + VPX_CODEC_ABI_VERSION ) # if CONFIG_SPATIAL_SVC if ( cpi -> use_svc && ! ctx -> output_cx_pkt_cb . output_cx_pkt ) { vpx_codec_cx_pkt_t pkt_sizes , pkt_psnr ; int sl ; vp9_zero ( pkt_sizes ) ; vp9_zero ( pkt_psnr ) ; pkt_sizes . kind = VPX_CODEC_SPATIAL_SVC_LAYER_SIZES ; pkt_psnr . kind = VPX_CODEC_SPATIAL_SVC_LAYER_PSNR ; for ( sl = 0 ; sl < cpi -> svc . number_spatial_layers ; ++ sl ) { LAYER_CONTEXT * lc = & cpi -> svc . layer_context [ sl * cpi -> svc . number_temporal_layers ] ; pkt_sizes . data . layer_sizes [ sl ] = lc -> layer_size ; pkt_psnr . data . layer_psnr [ sl ] = lc -> psnr_pkt ; lc -> layer_size = 0 ; } vpx_codec_pkt_list_add ( & ctx -> pkt_list . head , & pkt_sizes ) ; vpx_codec_pkt_list_add ( & ctx -> pkt_list . head , & pkt_psnr ) ; } # endif # endif if ( is_one_pass_cbr_svc ( cpi ) && ( cpi -> svc . spatial_layer_id == cpi -> svc . number_spatial_layers - 1 ) ) { break ; }
<S2SV_ModStart> sd ; vp9_ppflags_t flags ; vp9_zero ( flags ) <S2SV_ModEnd> ; if ( ctx
<S2SV_ModStart> * data ) { vpx_codec_err_t res = VPX_CODEC_OK ; ( void ) data ; if ( ctx -> priv == NULL ) { vpx_codec_alg_priv_t * const priv = vpx_calloc ( 1 , sizeof ( * priv ) ) ; if ( priv == NULL ) return VPX_CODEC_MEM_ERROR ; ctx -> priv = ( vpx_codec_priv_t * ) priv ; ctx -> priv -> init_flags = ctx -> init_flags ; ctx -> priv -> enc . total_encoders = 1 ; priv -> buffer_pool = ( BufferPool * ) vpx_calloc ( 1 , sizeof ( BufferPool ) ) ; if ( priv -> buffer_pool == NULL ) return VPX_CODEC_MEM_ERROR ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & priv -> buffer_pool -> pool_mutex , NULL ) ) { return VPX_CODEC_MEM_ERROR ; } # endif if ( ctx -> config . enc ) { priv -> cfg = * ctx -> config . enc ; ctx -> config . enc = & priv -> cfg ; } priv -> extra_cfg = default_extra_cfg ; once ( vp9_initialize_enc ) ; res = validate_config ( priv , & priv -> cfg , & priv -> extra_cfg ) ; if ( res == VPX_CODEC_OK ) { set_encoder_config ( & priv -> oxcf , & priv -> cfg , & priv -> extra_cfg ) ; # if CONFIG_VP9_HIGHBITDEPTH priv -> oxcf . use_highbitdepth = ( ctx -> init_flags & VPX_CODEC_USE_HIGHBITDEPTH ) ? 1 : 0 ; # endif priv -> cpi = vp9_create_compressor ( & priv -> oxcf , priv -> buffer_pool ) ; if ( priv -> cpi == NULL ) res = VPX_CODEC_MEM_ERROR ; else priv -> cpi -> output_pkt_list = & priv -> pkt_list . head ; } } return res <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> { vpx_codec_err_t res ; int force_key = 0 ; if ( cfg -> g_w != ctx -> cfg . g_w || cfg -> g_h != ctx -> cfg . g_h ) { if ( cfg -> g_lag_in_frames > 1 || cfg -> g_pass != VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR ( "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" <S2SV_ModStart> ( "Cannot<S2SV_blank>change<S2SV_blank>width<S2SV_blank>or<S2SV_blank>height<S2SV_blank>after<S2SV_blank>initialization" ) ; if ( ! valid_ref_frame_size ( ctx -> cfg . g_w , ctx -> cfg . g_h , cfg -> g_w , cfg -> g_h ) || ( ctx -> cpi -> initial_width && ( int ) cfg -> g_w > ctx -> cpi -> initial_width ) || ( ctx -> cpi -> initial_height && ( int ) cfg -> g_h > ctx -> cpi -> initial_height ) ) force_key = 1 ; } <S2SV_ModStart> -> extra_cfg ) ; force_key |= ctx -> cpi -> common . profile != ctx -> oxcf . profile ; <S2SV_ModStart> oxcf ) ; } if ( force_key ) ctx -> next_frame_flags |= VPX_EFLAG_FORCE_KF ;
<S2SV_ModStart> deadline ) { MODE new_mode = BEST ; switch ( ctx -> cfg . g_pass ) { case VPX_RC_ONE_PASS : if ( deadline > 0 ) { const vpx_codec_enc_cfg_t * const cfg = & ctx -> cfg ; <S2SV_ModEnd> const uint64_t duration_us = <S2SV_ModStart> * ( uint64_t ) cfg -> <S2SV_ModEnd> g_timebase . num / <S2SV_ModStart> / ( uint64_t ) cfg -> <S2SV_ModEnd> g_timebase . den ; <S2SV_ModStart> g_timebase . den ; new_mode <S2SV_ModEnd> = ( deadline > <S2SV_ModStart> > duration_us ) ? GOOD : REALTIME ; } else { new_mode = BEST ; } break ; case VPX_RC_FIRST_PASS : break ; case VPX_RC_LAST_PASS : new_mode = deadline > 0 ? GOOD : BEST ; break ; } <S2SV_ModEnd> if ( ctx -> <S2SV_ModStart> oxcf . mode != new_mode <S2SV_ModEnd> ) { ctx -> <S2SV_ModStart> oxcf . mode = new_mode <S2SV_ModEnd> ; vp9_change_config ( ctx
<S2SV_ModStart> static vpx_codec_err_t set_encoder_config ( VP9EncoderConfig <S2SV_ModEnd> * oxcf , const <S2SV_ModStart> * extra_cfg ) { const int is_vbr = cfg -> rc_end_usage == VPX_VBR ; int sl , tl ; <S2SV_ModStart> g_profile ; oxcf -> max_threads = ( int ) cfg -> g_threads ; oxcf -> <S2SV_ModStart> oxcf -> bit_depth = cfg -> g_bit_depth ; oxcf -> input_bit_depth = cfg -> g_input_bit_depth ; oxcf -> init_framerate <S2SV_ModEnd> = ( double ) <S2SV_ModStart> if ( oxcf -> init_framerate <S2SV_ModEnd> > 180 ) oxcf <S2SV_ModStart> 180 ) oxcf -> init_framerate = 30 ; oxcf -> mode = GOOD <S2SV_ModEnd> ; switch ( cfg <S2SV_ModStart> VPX_RC_ONE_PASS : oxcf -> pass = 0 <S2SV_ModEnd> ; break ; case <S2SV_ModStart> VPX_RC_FIRST_PASS : oxcf -> pass = 1 <S2SV_ModEnd> ; break ; case <S2SV_ModStart> VPX_RC_LAST_PASS : oxcf -> pass = 2 <S2SV_ModEnd> ; break ; } <S2SV_ModStart> g_lag_in_frames ; oxcf -> rc_mode = cfg -> rc_end_usage <S2SV_ModEnd> ; oxcf -> target_bandwidth <S2SV_ModStart> oxcf -> target_bandwidth = 1000 * <S2SV_ModStart> rc_max_intra_bitrate_pct ; oxcf -> rc_max_inter_bitrate_pct = extra_cfg -> rc_max_inter_bitrate_pct ; oxcf -> gf_cbr_boost_pct = extra_cfg -> gf_cbr_boost_pct ; oxcf -> best_allowed_q = extra_cfg -> lossless ? 0 : vp9_quantizer_to_qindex ( cfg -> rc_min_quantizer ) <S2SV_ModEnd> ; oxcf -> worst_allowed_q <S2SV_ModStart> oxcf -> worst_allowed_q = extra_cfg -> lossless ? 0 : vp9_quantizer_to_qindex ( cfg -> rc_max_quantizer ) <S2SV_ModEnd> ; oxcf -> cq_level <S2SV_ModStart> oxcf -> cq_level = vp9_quantizer_to_qindex ( extra_cfg -> cq_level ) <S2SV_ModEnd> ; oxcf -> fixed_q <S2SV_ModStart> rc_overshoot_pct ; oxcf -> scaled_frame_width = cfg -> rc_scaled_width ; oxcf -> scaled_frame_height = cfg -> rc_scaled_height ; if ( cfg -> rc_resize_allowed == 1 ) { oxcf -> resize_mode = ( oxcf -> scaled_frame_width == 0 || oxcf -> scaled_frame_height == 0 ) ? RESIZE_DYNAMIC : RESIZE_FIXED ; } else { oxcf -> resize_mode = RESIZE_NONE ; } oxcf -> maximum_buffer_size_ms = is_vbr ? 240000 : <S2SV_ModEnd> cfg -> rc_buf_sz ; <S2SV_ModStart> rc_buf_sz ; oxcf -> starting_buffer_level_ms = is_vbr ? 60000 : <S2SV_ModEnd> cfg -> rc_buf_initial_sz ; <S2SV_ModStart> rc_buf_initial_sz ; oxcf -> optimal_buffer_level_ms = is_vbr ? 60000 : <S2SV_ModEnd> cfg -> rc_buf_optimal_sz ; <S2SV_ModStart> kf_max_dist ; oxcf -> speed = abs ( extra_cfg -> cpu_used ) <S2SV_ModEnd> ; oxcf -> encode_breakout <S2SV_ModStart> static_thresh ; oxcf -> enable_auto_arf <S2SV_ModEnd> = extra_cfg -> enable_auto_alt_ref <S2SV_ModStart> cfg -> rc_twopass_stats_in ; # if CONFIG_FP_MB_STATS oxcf -> firstpass_mb_stats_in = cfg -> rc_firstpass_mb_stats_in ; # endif oxcf -> color_space = extra_cfg -> color_space <S2SV_ModEnd> ; oxcf -> arnr_max_frames <S2SV_ModStart> arnr_strength ; oxcf -> min_gf_interval = extra_cfg -> min_gf_interval ; oxcf -> max_gf_interval = extra_cfg -> max_gf_interval <S2SV_ModEnd> ; oxcf -> tuning <S2SV_ModStart> tuning ; oxcf -> content = extra_cfg -> content ; oxcf -> <S2SV_ModStart> tile_rows ; oxcf -> <S2SV_ModEnd> error_resilient_mode = cfg -> <S2SV_ModStart> cfg -> ss_number_layers ; oxcf -> ts_number_layers = cfg -> ts_number_layers ; oxcf -> temporal_layering_mode = ( enum vp9e_temporal_layering_mode ) cfg -> temporal_layering_mode ; for ( sl = 0 ; sl < oxcf -> ss_number_layers ; ++ sl ) { # if CONFIG_SPATIAL_SVC oxcf -> ss_enable_auto_arf [ sl ] = cfg -> ss_enable_auto_alt_ref [ sl ] ; # endif for ( tl = 0 ; tl < oxcf -> ts_number_layers ; ++ tl ) { oxcf -> layer_target_bitrate [ sl * oxcf -> ts_number_layers + tl ] = 1000 * cfg -> layer_target_bitrate [ sl * oxcf -> ts_number_layers + tl ] ; } } if <S2SV_ModEnd> ( oxcf -> ss_number_layers <S2SV_ModStart> ( oxcf -> ss_number_layers == 1 && oxcf -> pass != 0 ) { oxcf -> ss_target_bitrate [ 0 ] = ( int ) oxcf -> target_bandwidth ; # if CONFIG_SPATIAL_SVC oxcf -> ss_enable_auto_arf [ 0 ] = extra_cfg -> enable_auto_alt_ref ; # endif } if ( oxcf -> ts_number_layers <S2SV_ModStart> > 1 ) { for ( tl = 0 ; tl < VPX_TS_MAX_LAYERS ; ++ tl ) { oxcf -> ts_rate_decimator [ tl ] = cfg -> ts_rate_decimator [ tl ] ? cfg -> ts_rate_decimator [ tl ] : 1 ; } <S2SV_ModEnd> } else if ( <S2SV_ModStart> if ( oxcf -> <S2SV_ModEnd> ts_number_layers == 1 ) <S2SV_ModStart> ) { oxcf -> <S2SV_ModEnd> ts_rate_decimator [ 0 ]
<S2SV_ModStart> cfg , rc_undershoot_pct , 100 <S2SV_ModEnd> ) ; RANGE_CHECK_HI ( <S2SV_ModStart> cfg , rc_overshoot_pct , 100 <S2SV_ModEnd> ) ; RANGE_CHECK_HI ( <S2SV_ModStart> ) ; RANGE_CHECK ( extra_cfg , min_gf_interval , 0 , ( MAX_LAG_BUFFERS - 1 ) ) ; RANGE_CHECK ( extra_cfg , max_gf_interval , 0 , ( MAX_LAG_BUFFERS - 1 ) ) ; if ( extra_cfg -> max_gf_interval > 0 ) { RANGE_CHECK ( extra_cfg , max_gf_interval , 2 , ( MAX_LAG_BUFFERS - 1 ) ) ; } if ( extra_cfg -> min_gf_interval > 0 && extra_cfg -> max_gf_interval > 0 ) { RANGE_CHECK ( extra_cfg , max_gf_interval , extra_cfg -> min_gf_interval , ( MAX_LAG_BUFFERS - 1 ) ) ; } if ( cfg -> rc_resize_allowed == 1 ) { RANGE_CHECK ( cfg , rc_scaled_width , 0 , cfg -> g_w ) ; RANGE_CHECK ( cfg , rc_scaled_height , 0 , cfg -> g_h ) ; } RANGE_CHECK ( <S2SV_ModStart> if ( cfg -> ss_number_layers * cfg -> ts_number_layers > VPX_MAX_LAYERS ) ERROR ( "ss_number_layers<S2SV_blank>*<S2SV_blank>ts_number_layers<S2SV_blank>is<S2SV_blank>out<S2SV_blank>of<S2SV_blank>range" ) ; if ( cfg -> ts_number_layers > <S2SV_ModEnd> 1 ) { unsigned <S2SV_ModStart> ) { unsigned int sl , tl ; for ( sl = 1 ; sl < cfg -> ss_number_layers ; ++ sl ) { for ( tl = 1 ; tl < cfg -> ts_number_layers ; ++ tl ) { const int layer = LAYER_IDS_TO_IDX ( sl , tl , cfg -> ts_number_layers ) ; if ( cfg -> layer_target_bitrate [ layer ] < cfg -> layer_target_bitrate [ layer <S2SV_ModEnd> - 1 ] ) <S2SV_ModStart> ( "ts_target_bitrate<S2SV_blank>entries<S2SV_blank>are<S2SV_blank>not<S2SV_blank>increasing" ) ; } } <S2SV_ModStart> ) ; for ( tl <S2SV_ModEnd> = cfg -> ts_number_layers <S2SV_ModStart> ts_number_layers - 2 ; tl <S2SV_ModEnd> > 0 ; -- <S2SV_ModStart> > 0 ; -- tl <S2SV_ModEnd> ) if ( cfg <S2SV_ModStart> cfg -> ts_rate_decimator [ tl <S2SV_ModEnd> - 1 ] != <S2SV_ModStart> cfg -> ts_rate_decimator [ tl ] ) ERROR ( "ts_rate_decimator<S2SV_blank>factors<S2SV_blank>are<S2SV_blank>not<S2SV_blank>powers<S2SV_blank>of<S2SV_blank>2" ) ; } # if CONFIG_SPATIAL_SVC if ( ( cfg -> ss_number_layers > 1 || cfg -> ts_number_layers > 1 ) && cfg -> g_pass == VPX_RC_LAST_PASS ) { unsigned int i , alt_ref_sum = 0 ; for ( i = 0 ; i < cfg -> ss_number_layers ; ++ i ) { if ( cfg -> ss_enable_auto_alt_ref [ i ] ) ++ alt_ref_sum ; } if ( alt_ref_sum > REF_FRAMES - cfg -> ss_number_layers ) ERROR ( "Not<S2SV_blank>enough<S2SV_blank>ref<S2SV_blank>buffers<S2SV_blank>for<S2SV_blank>svc<S2SV_blank>alt<S2SV_blank>ref<S2SV_blank>frames" ) ; if ( cfg -> ss_number_layers * cfg -> ts_number_layers > 3 && cfg -> g_error_resilient == 0 ) ERROR ( "Multiple<S2SV_blank>frame<S2SV_blank>context<S2SV_blank>are<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>for<S2SV_blank>more<S2SV_blank>than<S2SV_blank>3<S2SV_blank>layers" ) ; } # endif <S2SV_ModEnd> if ( cfg -> <S2SV_ModStart> "kf_min_dist<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>auto<S2SV_blank>mode,<S2SV_blank>use<S2SV_blank>0<S2SV_blank>" "or<S2SV_blank>kf_max_dist<S2SV_blank>instead." ) ; RANGE_CHECK <S2SV_ModEnd> ( extra_cfg , enable_auto_alt_ref <S2SV_ModStart> ( extra_cfg , enable_auto_alt_ref , 0 , 2 <S2SV_ModStart> , cpu_used , - 8 , 8 <S2SV_ModEnd> ) ; RANGE_CHECK_HI ( <S2SV_ModStart> RANGE_CHECK ( extra_cfg , <S2SV_ModEnd> cq_level , 0 , <S2SV_ModStart> , 0 , 63 ) ; RANGE_CHECK ( cfg , g_bit_depth , VPX_BITS_8 , VPX_BITS_12 ) ; RANGE_CHECK ( cfg , g_input_bit_depth , 8 , 12 ) ; RANGE_CHECK ( extra_cfg , content , VP9E_CONTENT_DEFAULT , VP9E_CONTENT_INVALID - 1 <S2SV_ModStart> == VPX_RC_LAST_PASS ) { const <S2SV_ModStart> ( FIRSTPASS_STATS ) ; const <S2SV_ModStart> ( cfg -> ss_number_layers > 1 || cfg -> ts_number_layers <S2SV_ModStart> -> ss_number_layers || ( unsigned <S2SV_ModStart> ) ; } } # if ! CONFIG_VP9_HIGHBITDEPTH if ( cfg -> g_profile > ( unsigned int ) PROFILE_1 ) { ERROR ( "Profile<S2SV_blank>><S2SV_blank>1<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>this<S2SV_blank>build<S2SV_blank>configuration" ) ; } # endif <S2SV_ModStart> int ) PROFILE_1 && cfg -> g_bit_depth > VPX_BITS_8 ) { ERROR ( "Codec<S2SV_blank>high<S2SV_blank>bit-depth<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank><<S2SV_blank>2" ) ; } <S2SV_ModEnd> if ( cfg -> <S2SV_ModStart> ( cfg -> g_profile <= <S2SV_ModEnd> ( unsigned int ) <S2SV_ModStart> int ) PROFILE_1 && cfg -> g_input_bit_depth > 8 ) { ERROR ( "Source<S2SV_blank>high<S2SV_blank>bit-depth<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank><<S2SV_blank>2" ) ; } if ( cfg -> g_profile > ( unsigned int ) PROFILE_1 && cfg -> g_bit_depth == VPX_BITS_8 ) { ERROR ( "Codec<S2SV_blank>bit-depth<S2SV_blank>8<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile<S2SV_blank>><S2SV_blank>1" ) ; } RANGE_CHECK ( extra_cfg , color_space , VPX_CS_UNKNOWN , VPX_CS_SRGB <S2SV_ModEnd> ) ; return VPX_CODEC_OK
<S2SV_ModStart> case VPX_IMG_FMT_I420 : case VPX_IMG_FMT_I42016 : break ; case <S2SV_ModStart> : case VPX_IMG_FMT_I444 : case VPX_IMG_FMT_I440 : if ( ctx -> cfg . g_profile != ( unsigned int ) PROFILE_1 ) { ERROR ( "Invalid<S2SV_blank>image<S2SV_blank>format.<S2SV_blank>I422,<S2SV_blank>I444,<S2SV_blank>I440<S2SV_blank>images<S2SV_blank>are<S2SV_blank>" "not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile." ) ; } break ; case VPX_IMG_FMT_I42216 : case VPX_IMG_FMT_I44416 : case VPX_IMG_FMT_I44016 : if ( ctx -> cfg . g_profile != ( unsigned int ) PROFILE_1 && ctx -> cfg . g_profile != ( unsigned int ) PROFILE_3 ) { ERROR ( "Invalid<S2SV_blank>image<S2SV_blank>format.<S2SV_blank>16-bit<S2SV_blank>I422,<S2SV_blank>I444,<S2SV_blank>I440<S2SV_blank>images<S2SV_blank>are<S2SV_blank>" "not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>profile." ) ; } <S2SV_ModStart> ( "Invalid<S2SV_blank>image<S2SV_blank>format.<S2SV_blank>Only<S2SV_blank>YV12,<S2SV_blank>I420,<S2SV_blank>I422,<S2SV_blank>I444<S2SV_blank>images<S2SV_blank>are<S2SV_blank>" "supported." ) ; break
<S2SV_ModStart> i , j ; # ifdef TEST_SUPPLEMENTAL_SUPERFRAME_DATA uint8_t marker_test = 0xc0 ; int mag_test = 2 ; int frames_test = 4 ; int index_sz_test = 2 + mag_test * frames_test ; marker_test |= frames_test - 1 ; marker_test |= ( mag_test - 1 ) << 3 ; * x ++ = marker_test ; for ( i = 0 ; i < mag_test * frames_test ; ++ i ) * x ++ = 0 ; * x ++ = marker_test ; ctx -> pending_cx_data_sz += index_sz_test ; printf ( "Added<S2SV_blank>supplemental<S2SV_blank>superframe<S2SV_blank>data\\n" ) ; # endif <S2SV_ModStart> pending_cx_data_sz += index_sz ; # ifdef TEST_SUPPLEMENTAL_SUPERFRAME_DATA index_sz += index_sz_test ; # endif
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> vpx_ref_frame_t * ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> ; YV12_BUFFER_CONFIG sd ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> ; return vp9_copy_reference_dec ( frame_worker_data <S2SV_ModEnd> -> pbi , (
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VPX_CODEC_INCAPABLE ; } if ( <S2SV_ModStart> if ( ctx -> frame_workers ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModEnd> const VP9_COMMON * const <S2SV_ModStart> const cm = & frame_worker_data <S2SV_ModEnd> -> pbi -> common <S2SV_ModStart> cm -> display_height ; return VPX_CODEC_OK ; <S2SV_ModStart> return VPX_CODEC_ERROR ; } } <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> if ( ctx -> frame_workers ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; RefCntBuffer * const frame_bufs = frame_worker_data -> pbi -> common . buffer_pool -> frame_bufs ; if ( frame_worker_data <S2SV_ModEnd> -> pbi -> common <S2SV_ModStart> -> common . frame_to_show == NULL ) return VPX_CODEC_ERROR ; if ( ctx -> last_show_frame >= 0 ) * corrupted = frame_bufs [ ctx -> last_show_frame ] . buf . corrupted <S2SV_ModEnd> ; return VPX_CODEC_OK ; <S2SV_ModStart> } else { return VPX_CODEC_ERROR ; } } return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VPX_CODEC_INCAPABLE ; } if ( <S2SV_ModStart> if ( ctx -> frame_workers ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; * update_info = frame_worker_data <S2SV_ModEnd> -> pbi -> refresh_frame_flags <S2SV_ModStart> -> pbi -> refresh_frame_flags <S2SV_ModEnd> ; return VPX_CODEC_OK ; <S2SV_ModStart> } else { return VPX_CODEC_ERROR ; } } return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VPX_CODEC_INCAPABLE ; } if ( <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; fb = get_ref_frame ( & frame_worker_data -> pbi -> common <S2SV_ModEnd> , data -> idx <S2SV_ModStart> , data -> idx ) ; if ( fb == NULL ) return VPX_CODEC_ERROR <S2SV_ModEnd> ; yuvconfig2image ( &
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> va_list args ) { ( void ) ctx ; ( void ) args ; return VPX_CODEC_INCAPABLE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) {
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> ; } # else ( void ) ctx ; ( void ) args ;
<S2SV_ModStart> vpx_codec_alg_priv_t * ctx , <S2SV_ModEnd> va_list args ) { <S2SV_ModStart> vpx_ref_frame_t * ) ; if ( ctx -> frame_parallel_decode ) { set_error_detail ( ctx , "Not<S2SV_blank>supported<S2SV_blank>in<S2SV_blank>frame<S2SV_blank>parallel<S2SV_blank>decode" ) ; return VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> ; YV12_BUFFER_CONFIG sd ; VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> return vp9_set_reference_dec ( & frame_worker_data <S2SV_ModEnd> -> pbi -> common
<S2SV_ModStart> int64_t deadline ) { const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; ( void ) deadline <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> . h ) { int is_intra_only = 0 ; <S2SV_ModStart> const vpx_codec_err_t res = decoder_peek_si_internal <S2SV_ModEnd> ( * data , <S2SV_ModStart> & ctx -> si , & is_intra_only , ctx -> decrypt_cb , ctx -> decrypt_state <S2SV_ModStart> ) return res ; if ( ! ctx -> si . is_kf && ! is_intra_only ) return VPX_CODEC_ERROR ; <S2SV_ModStart> ( ! ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; frame_worker_data -> data = * data ; frame_worker_data -> data_size = data_sz ; frame_worker_data -> user_priv = user_priv ; frame_worker_data -> received_frame = 1 ; frame_worker_data -> pbi -> decrypt_cb = ctx -> decrypt_cb ; frame_worker_data -> pbi -> decrypt_state = ctx -> decrypt_state ; worker -> had_error = 0 ; winterface -> execute ( worker ) ; * data = frame_worker_data -> data_end ; if ( worker -> had_error ) return update_error_state ( ctx , & frame_worker_data -> pbi -> common . error ) ; check_resync ( ctx , frame_worker_data -> pbi ) ; } else { VPxWorker * const worker = & ctx -> frame_workers [ ctx -> next_submit_worker_id ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; if ( ctx -> next_submit_worker_id != ctx -> last_submit_worker_id ) vp9_frameworker_copy_context ( & ctx -> frame_workers [ ctx -> next_submit_worker_id ] , & ctx -> frame_workers [ ctx -> last_submit_worker_id ] ) ; frame_worker_data -> pbi -> ready_for_new_data = 0 ; if ( frame_worker_data -> scratch_buffer_size < data_sz ) { frame_worker_data -> scratch_buffer = ( uint8_t * ) vpx_realloc ( frame_worker_data -> scratch_buffer , data_sz ) ; if ( frame_worker_data -> scratch_buffer == NULL ) { set_error_detail ( ctx , "Failed<S2SV_blank>to<S2SV_blank>reallocate<S2SV_blank>scratch<S2SV_blank>buffer" ) ; return VPX_CODEC_MEM_ERROR ; } frame_worker_data -> scratch_buffer_size = data_sz ; } frame_worker_data -> data_size = data_sz ; memcpy ( frame_worker_data -> scratch_buffer , * data , data_sz ) ; frame_worker_data -> frame_decoded = 0 ; frame_worker_data -> frame_context_ready = 0 ; frame_worker_data -> received_frame = 1 ; frame_worker_data -> data = frame_worker_data -> scratch_buffer ; frame_worker_data -> user_priv = user_priv ; if ( ctx -> next_submit_worker_id != ctx -> last_submit_worker_id ) ctx -> last_submit_worker_id = ( ctx -> last_submit_worker_id + 1 ) % ctx -> num_frame_workers ; ctx -> next_submit_worker_id = ( ctx -> next_submit_worker_id + 1 ) % ctx -> num_frame_workers ; -- ctx -> available_threads ; worker -> had_error = 0 ; winterface -> launch ( worker ) ; } <S2SV_ModEnd> return VPX_CODEC_OK ; }
<S2SV_ModStart> ; const uint8_t * const <S2SV_ModStart> data_sz ; vpx_codec_err_t res ; uint32_t frame_sizes <S2SV_ModEnd> [ 8 ] ; <S2SV_ModStart> 8 ] ; int frame_count <S2SV_ModEnd> ; if ( data <S2SV_ModStart> ( data == NULL && <S2SV_ModEnd> data_sz == 0 ) <S2SV_ModStart> data_sz == 0 ) { ctx -> flushed = 1 ; return VPX_CODEC_OK ; } ctx -> flushed = 0 ; if ( ctx -> frame_workers == NULL ) { const vpx_codec_err_t res = init_decoder ( ctx ) ; if ( res != VPX_CODEC_OK ) return res ; } res = vp9_parse_superframe_index <S2SV_ModEnd> ( data , data_sz <S2SV_ModStart> data , data_sz , frame_sizes , & frame_count , ctx -> decrypt_cb , ctx -> decrypt_state ) ; if ( res != VPX_CODEC_OK ) return res ; if ( ctx -> frame_parallel_decode ) { if ( frame_count > 0 ) { int i ; for ( i = 0 ; i < frame_count ; ++ i ) { const uint8_t * data_start_copy = data_start ; const uint32_t frame_size = frame_sizes [ i ] ; if ( data_start < data || frame_size > ( uint32_t ) ( data_end - data_start ) ) { set_error_detail ( ctx , "Invalid<S2SV_blank>frame<S2SV_blank>size<S2SV_blank>in<S2SV_blank>index" ) ; return VPX_CODEC_CORRUPT_FRAME ; } if ( ctx -> available_threads == 0 ) { if ( ctx -> num_cache_frames < FRAME_CACHE_SIZE ) { wait_worker_and_cache_frame ( ctx ) ; } else { set_error_detail ( ctx , "Frame<S2SV_blank>output<S2SV_blank>cache<S2SV_blank>is<S2SV_blank>full." ) ; return VPX_CODEC_ERROR ; } } res = decode_one ( ctx , & data_start_copy , frame_size , user_priv , deadline ) ; if ( res != VPX_CODEC_OK ) return res ; data_start += frame_size ; } } else { if ( ctx -> available_threads == 0 ) { if ( ctx -> num_cache_frames < FRAME_CACHE_SIZE ) { wait_worker_and_cache_frame ( ctx ) ; } else { set_error_detail ( ctx , "Frame<S2SV_blank>output<S2SV_blank>cache<S2SV_blank>is<S2SV_blank>full." ) ; return VPX_CODEC_ERROR ; } } res = decode_one ( ctx , & data , data_sz , user_priv , deadline ) ; if ( res != VPX_CODEC_OK ) return res ; } } else { if ( frame_count > 0 ) { int i ; for ( i = 0 ; i < frame_count ; ++ i ) { const uint8_t * data_start_copy = data_start ; const uint32_t frame_size = frame_sizes [ i ] ; vpx_codec_err_t res ; if ( data_start < data || frame_size > ( uint32_t ) ( data_end - data_start ) ) { set_error_detail ( ctx , "Invalid<S2SV_blank>frame<S2SV_blank>size<S2SV_blank>in<S2SV_blank>index" ) ; return VPX_CODEC_CORRUPT_FRAME ; } res = decode_one ( ctx , & data_start_copy , frame_size , user_priv , deadline ) ; if ( res != VPX_CODEC_OK ) return res ; data_start += frame_size ; } } else { while ( data_start < data_end ) { const uint32_t frame_size = ( uint32_t ) ( data_end - data_start ) ; const vpx_codec_err_t res = decode_one ( ctx , & data_start , frame_size , user_priv , deadline ) ; if ( res != VPX_CODEC_OK ) return res ; while ( data_start < data_end <S2SV_ModEnd> ) { const uint8_t <S2SV_ModStart> const uint8_t marker = read_marker ( ctx -> decrypt_cb , ctx -> decrypt_state , data_start ) ; if ( marker ) break ; ++ data_start ; } } } } <S2SV_ModEnd> return res ; }
<S2SV_ModStart> if ( ctx -> frame_workers != NULL ) { int i ; for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { VPxWorker * const worker = & ctx -> frame_workers [ i ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; vpx_get_worker_interface ( ) -> end ( worker ) ; vp9_remove_common ( & frame_worker_data -> pbi -> common ) ; # if CONFIG_VP9_POSTPROC vp9_free_postproc_buffers ( & frame_worker_data -> pbi -> common ) ; # endif vp9_decoder_remove ( frame_worker_data <S2SV_ModEnd> -> pbi ) ; <S2SV_ModStart> -> pbi ) ; vpx_free ( frame_worker_data -> scratch_buffer ) ; # if CONFIG_MULTITHREAD pthread_mutex_destroy ( & frame_worker_data -> stats_mutex ) ; pthread_cond_destroy ( & frame_worker_data -> stats_cond ) ; # endif vpx_free ( frame_worker_data ) ; } # if CONFIG_MULTITHREAD pthread_mutex_destroy ( & ctx -> buffer_pool -> pool_mutex ) ; # endif } if ( ctx -> buffer_pool ) { vp9_free_ref_frame_buffers ( ctx -> buffer_pool ) ; vp9_free_internal_frame_buffers ( & ctx -> buffer_pool -> int_frame_buffers ) ; } vpx_free ( ctx -> frame_workers ) ; vpx_free ( ctx -> buffer_pool ) ; <S2SV_ModEnd> vpx_free ( ctx )
<S2SV_ModStart> if ( ctx -> frame_parallel_decode && ctx -> available_threads > 0 && ! ctx -> flushed ) { return NULL ; } if ( ctx -> num_cache_frames > 0 ) { release_last_output_frame ( ctx ) ; ctx -> last_show_frame = ctx -> frame_cache [ ctx -> frame_cache_read ] . fb_idx ; if ( ctx -> need_resync ) return NULL ; img = & ctx -> frame_cache [ ctx -> frame_cache_read ] . img ; ctx -> frame_cache_read = ( ctx -> frame_cache_read + 1 ) % FRAME_CACHE_SIZE ; -- ctx -> num_cache_frames ; return img ; } if ( * iter == NULL && ctx -> frame_workers != NULL ) { do { YV12_BUFFER_CONFIG sd ; vp9_ppflags_t flags = { 0 , 0 , 0 } ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; VPxWorker * const worker = & ctx -> frame_workers [ ctx -> next_output_worker_id ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; ctx -> next_output_worker_id = ( ctx -> next_output_worker_id + 1 ) % ctx -> num_frame_workers ; if ( ctx -> base . init_flags & VPX_CODEC_USE_POSTPROC ) set_ppflags ( ctx , & flags ) ; if ( winterface -> sync ( worker ) ) { if ( frame_worker_data -> received_frame == 1 ) { ++ ctx -> available_threads ; frame_worker_data -> received_frame = 0 ; check_resync ( ctx , frame_worker_data -> pbi ) ; } if ( vp9_get_raw_frame ( frame_worker_data -> pbi , & sd , & flags ) == 0 ) { VP9_COMMON * const cm = & frame_worker_data -> pbi -> common ; RefCntBuffer * const frame_bufs = cm -> buffer_pool -> frame_bufs ; release_last_output_frame ( ctx ) ; ctx -> last_show_frame = frame_worker_data -> pbi -> common . new_fb_idx ; if ( ctx -> need_resync ) return NULL ; yuvconfig2image ( & ctx -> img , & sd , frame_worker_data -> user_priv ) ; ctx -> img . fb_priv = frame_bufs [ cm -> new_fb_idx ] . raw_frame_buffer . priv ; img = & ctx -> img ; return img ; } } else { frame_worker_data -> received_frame = 0 ; ++ ctx -> available_threads ; ctx -> need_resync = 1 ; if ( ctx -> flushed != 1 ) return NULL ; } } while ( ctx -> next_output_worker_id != ctx -> next_submit_worker_id ) ; } return NULL <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> * data ) { ( void ) data ; <S2SV_ModStart> ) { vpx_codec_alg_priv_t * const priv = vpx_calloc ( 1 <S2SV_ModEnd> , sizeof ( * <S2SV_ModStart> , sizeof ( * priv <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ) ; if ( priv <S2SV_ModEnd> == NULL ) return <S2SV_ModStart> NULL ) return VPX_CODEC_MEM_ERROR <S2SV_ModEnd> ; ctx -> priv <S2SV_ModStart> ( vpx_codec_priv_t * ) priv <S2SV_ModEnd> ; ctx -> priv <S2SV_ModStart> ctx -> init_flags ; priv -> si . sz = sizeof ( priv -> si ) ; priv -> flushed = 0 ; priv -> frame_parallel_decode = ( ctx -> config . dec && ( ctx -> config . dec -> threads > 1 ) && ( ctx -> init_flags & VPX_CODEC_USE_FRAME_THREADING ) ) ? 1 : 0 ; <S2SV_ModStart> . dec ) { priv <S2SV_ModEnd> -> cfg = * <S2SV_ModStart> . dec = & priv <S2SV_ModEnd> -> cfg ; }
<S2SV_ModStart> * si ) { return decoder_peek_si_internal ( data , data_sz , si <S2SV_ModEnd> , NULL , NULL <S2SV_ModStart> , NULL , NULL , NULL ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> if ( ctx -> frame_workers <S2SV_ModEnd> == NULL ) {
<S2SV_ModStart> * ctx ) { int i ; for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { VPxWorker * const worker = & ctx -> frame_workers [ i ] ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> const cm = & frame_worker_data <S2SV_ModEnd> -> pbi -> common <S2SV_ModStart> pbi -> common ; BufferPool * const pool = cm -> buffer_pool ; <S2SV_ModStart> cm -> new_fb_idx = INVALID_IDX ; cm -> byte_alignment = ctx -> byte_alignment ; cm -> skip_loop_filter = ctx -> skip_loop_filter <S2SV_ModEnd> ; if ( ctx <S2SV_ModStart> != NULL ) { pool <S2SV_ModEnd> -> get_fb_cb = ctx <S2SV_ModStart> ctx -> get_ext_fb_cb ; pool <S2SV_ModEnd> -> release_fb_cb = ctx <S2SV_ModStart> ctx -> release_ext_fb_cb ; pool <S2SV_ModEnd> -> cb_priv = ctx <S2SV_ModStart> ; } else { pool <S2SV_ModEnd> -> get_fb_cb = vp9_get_frame_buffer <S2SV_ModStart> get_fb_cb = vp9_get_frame_buffer ; pool <S2SV_ModEnd> -> release_fb_cb = vp9_release_frame_buffer <S2SV_ModStart> ( vp9_alloc_internal_frame_buffers ( & pool <S2SV_ModEnd> -> int_frame_buffers ) ) <S2SV_ModStart> , "Failed<S2SV_blank>to<S2SV_blank>initialize<S2SV_blank>internal<S2SV_blank>frame<S2SV_blank>buffers" ) ; pool <S2SV_ModEnd> -> cb_priv = & <S2SV_ModStart> -> cb_priv = & pool <S2SV_ModEnd> -> int_frame_buffers ; } <S2SV_ModStart> int_frame_buffers ; } } }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static vpx_codec_err_t <S2SV_ModEnd> init_decoder ( vpx_codec_alg_priv_t * <S2SV_ModStart> * ctx ) { int i ; const VPxWorkerInterface * const winterface = vpx_get_worker_interface ( ) ; ctx -> last_show_frame = - 1 ; ctx -> next_submit_worker_id = 0 ; ctx -> last_submit_worker_id = 0 ; ctx -> next_output_worker_id = 0 ; ctx -> frame_cache_read = 0 ; ctx -> frame_cache_write = 0 ; ctx -> num_cache_frames = 0 ; ctx -> need_resync = 1 ; ctx -> num_frame_workers = ( ctx -> frame_parallel_decode == 1 ) ? <S2SV_ModEnd> ctx -> cfg . <S2SV_ModStart> -> cfg . threads : 1 ; if ( ctx -> num_frame_workers > MAX_DECODE_THREADS ) ctx -> num_frame_workers = MAX_DECODE_THREADS ; ctx -> available_threads = ctx -> num_frame_workers ; ctx -> flushed = 0 ; ctx -> buffer_pool = ( BufferPool * ) vpx_calloc ( 1 , sizeof ( BufferPool ) ) ; if ( ctx -> buffer_pool == NULL ) return VPX_CODEC_MEM_ERROR ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & ctx -> buffer_pool -> pool_mutex , NULL ) ) { set_error_detail ( ctx , "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>buffer<S2SV_blank>pool<S2SV_blank>mutex" ) ; return VPX_CODEC_MEM_ERROR ; } # endif ctx -> frame_workers = ( VPxWorker * ) vpx_malloc ( ctx -> num_frame_workers * sizeof ( * ctx -> frame_workers ) ) ; if ( ctx -> frame_workers == NULL ) { set_error_detail ( ctx , "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_workers" ) ; return VPX_CODEC_MEM_ERROR ; } for ( i = 0 ; i < ctx -> num_frame_workers ; ++ i ) { VPxWorker * const worker = & ctx -> frame_workers [ i ] ; FrameWorkerData * frame_worker_data = NULL ; winterface -> init ( worker ) ; worker -> data1 = vpx_memalign ( 32 , sizeof ( FrameWorkerData ) ) ; if ( worker -> data1 == NULL ) { set_error_detail ( ctx , "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data" ) ; return VPX_CODEC_MEM_ERROR ; } frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; frame_worker_data <S2SV_ModEnd> -> pbi = vp9_decoder_create <S2SV_ModStart> pbi = vp9_decoder_create ( ctx -> buffer_pool ) ; if ( frame_worker_data <S2SV_ModEnd> -> pbi == NULL <S2SV_ModStart> pbi == NULL ) { set_error_detail ( ctx , "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data" ) ; return VPX_CODEC_MEM_ERROR ; } frame_worker_data -> pbi -> frame_worker_owner = worker ; frame_worker_data -> worker_id = i ; frame_worker_data -> scratch_buffer = NULL ; frame_worker_data -> scratch_buffer_size = 0 ; frame_worker_data -> frame_context_ready = 0 ; frame_worker_data -> received_frame = 0 ; # if CONFIG_MULTITHREAD if ( pthread_mutex_init ( & frame_worker_data -> stats_mutex , NULL ) ) { set_error_detail ( ctx , "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data<S2SV_blank>mutex" ) ; return VPX_CODEC_MEM_ERROR ; } if ( pthread_cond_init ( & frame_worker_data -> stats_cond , NULL ) ) { set_error_detail ( ctx , "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>frame_worker_data<S2SV_blank>cond" ) ; return VPX_CODEC_MEM_ERROR ; } # endif frame_worker_data -> pbi -> max_threads = ( ctx -> frame_parallel_decode == 0 ) ? ctx -> cfg . threads : 0 ; frame_worker_data -> pbi -> inv_tile_order = ctx -> invert_tile_order ; frame_worker_data -> pbi -> frame_parallel_decode = ctx -> frame_parallel_decode ; frame_worker_data -> pbi -> common . frame_parallel_decode = ctx -> frame_parallel_decode ; worker -> hook = ( VPxWorkerHook ) frame_worker_hook ; if ( ! winterface -> reset ( worker ) ) { set_error_detail ( ctx , "Frame<S2SV_blank>Worker<S2SV_blank>thread<S2SV_blank>creation<S2SV_blank>failed" ) ; return VPX_CODEC_MEM_ERROR ; } } <S2SV_ModEnd> if ( ! ctx <S2SV_ModStart> ( ctx ) ; return VPX_CODEC_OK ;
<S2SV_ModStart> flags -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg . <S2SV_ModStart> postproc_cfg . noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> error -> error_code ) set_error_detail ( ctx , <S2SV_ModEnd> error -> has_detail ? <S2SV_ModStart> -> detail : NULL )
<S2SV_ModStart> <S2SV_null> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( const <S2SV_ModStart> ; return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx ->
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_svc_internal ( SvcContext <S2SV_ModStart> == NULL ) { SvcInternal_t <S2SV_ModEnd> * const si = <S2SV_ModStart> const si = ( SvcInternal_t <S2SV_ModEnd> * ) malloc ( <S2SV_ModStart> ; } return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx ->
<S2SV_ModStart> char * input_ptr ; SvcInternal_t * const si = get_svc_internal ( svc_ctx ) ; vpx_codec_err_t res = VPX_CODEC_OK ; int i , alt_ref_enabled = 0 <S2SV_ModEnd> ; if ( options <S2SV_ModStart> if ( strcmp ( "spatial-layers" , option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( "temporal-layers" , option_name ) == 0 ) { svc_ctx -> temporal_layers = atoi ( option_value ) ; } else if ( strcmp ( "scale-factors" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , SCALE_FACTOR , option_value , si -> svc_params . scaling_factor_num , si -> svc_params . scaling_factor_den <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> if ( strcmp ( "max-quantizers" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , QUANTIZER , option_value , si -> svc_params . max_quantizers , NULL <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> if ( strcmp ( "min-quantizers" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , QUANTIZER , option_value , si -> svc_params . min_quantizers , NULL <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> VPX_CODEC_OK ) break ; } else if ( strcmp ( "auto-alt-refs" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , AUTO_ALT_REF , option_value , si -> enable_auto_alt_ref , NULL <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> VPX_CODEC_OK ) break ; } else if ( strcmp ( "bitrates" , option_name ) == 0 ) { res = parse_layer_options_from_string ( svc_ctx , BITRATE , option_value , si -> bitrates , NULL ) ; if ( res != VPX_CODEC_OK ) break ; } else if ( strcmp ( "multi-frame-contexts" , option_name ) == 0 ) { si -> use_multiple_frame_contexts = atoi ( option_value ) <S2SV_ModEnd> ; } else { <S2SV_ModStart> ( input_string ) ; for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) { if ( si -> svc_params . max_quantizers [ i ] > MAX_QUANTIZER || si -> svc_params . max_quantizers [ i ] < 0 || si -> svc_params . min_quantizers [ i ] > si -> svc_params . max_quantizers [ i ] || si -> svc_params . min_quantizers [ i ] < 0 ) res = VPX_CODEC_INVALID_PARAM ; } if ( si -> use_multiple_frame_contexts && ( svc_ctx -> spatial_layers > 3 || svc_ctx -> spatial_layers * svc_ctx -> temporal_layers > 4 ) ) res = VPX_CODEC_INVALID_PARAM ; for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) alt_ref_enabled += si -> enable_auto_alt_ref [ i ] ; if ( alt_ref_enabled > REF_FRAMES - svc_ctx -> spatial_layers ) { svc_log ( svc_ctx , SVC_LOG_ERROR , "svc:<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>ref:<S2SV_blank>Maxinum<S2SV_blank>%d(REF_FRAMES<S2SV_blank>-<S2SV_blank>layers)<S2SV_blank>layers<S2SV_blank>could" "enabled<S2SV_blank>auto<S2SV_blank>alt<S2SV_blank>reference<S2SV_blank>frame,<S2SV_blank>but<S2SV_blank>%<S2SV_blank>layers<S2SV_blank>are<S2SV_blank>enabled\\n" , REF_FRAMES - svc_ctx -> spatial_layers , alt_ref_enabled ) ; res = VPX_CODEC_INVALID_PARAM ; }
<S2SV_ModStart> SvcContext * svc_ctx , SVC_LOG_LEVEL <S2SV_ModEnd> level , const char <S2SV_ModStart> ; va_list ap ; SvcInternal_t <S2SV_ModEnd> * const si =
<S2SV_ModStart> * svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si = <S2SV_ModStart> const si = ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx ->
<S2SV_ModStart> ) { int number_of_frames <S2SV_ModEnd> ; int i , <S2SV_ModStart> ; double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si = <S2SV_ModStart> ( svc_ctx ) ; number_of_frames = si -> psnr_pkt_received ; if ( number_of_frames <S2SV_ModEnd> <= 0 ) return <S2SV_ModStart> , "\\n" ) ; <S2SV_ModEnd> for ( i = <S2SV_ModStart> 0 ; i < svc_ctx -> spatial_layers <S2SV_ModEnd> ; ++ i ) <S2SV_ModStart> ++ i ) { <S2SV_ModEnd> svc_log ( svc_ctx , <S2SV_ModStart> } } si -> psnr_pkt_received <S2SV_ModEnd> = 0 ; svc_log
<S2SV_ModStart> vpx_codec_cx_pkt_t * cx_pkt ; SvcInternal_t <S2SV_ModEnd> * const si = <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; } svc_log_reset ( svc_ctx ) ; res = vpx_codec_encode ( codec_ctx , rawimg , pts , ( uint32_t ) duration , 0 , <S2SV_ModEnd> deadline ) ; if <S2SV_ModStart> -> kind ) { # if VPX_ENCODER_ABI_VERSION > ( 5 + VPX_CODEC_ABI_VERSION ) # if CONFIG_SPATIAL_SVC case VPX_CODEC_SPATIAL_SVC_LAYER_PSNR : { int i ; for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) { int j ; svc_log ( svc_ctx , SVC_LOG_DEBUG , "SVC<S2SV_blank>frame:<S2SV_blank>%d,<S2SV_blank>layer:<S2SV_blank>%d,<S2SV_blank>PSNR(Total/Y/U/V):<S2SV_blank>" "%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank>\\n" , si -> psnr_pkt_received , i , cx_pkt -> data . layer_psnr [ i ] . psnr [ 0 ] , cx_pkt -> data . layer_psnr [ i ] . psnr [ 1 ] , cx_pkt -> data . layer_psnr [ i ] . psnr [ 2 ] , cx_pkt -> data . layer_psnr [ i ] . psnr [ 3 ] ) ; svc_log ( svc_ctx , SVC_LOG_DEBUG , "SVC<S2SV_blank>frame:<S2SV_blank>%d,<S2SV_blank>layer:<S2SV_blank>%d,<S2SV_blank>SSE(Total/Y/U/V):<S2SV_blank>" "%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank><S2SV_blank>%2.3f<S2SV_blank>\\n" , si -> psnr_pkt_received , i , cx_pkt -> data . layer_psnr [ i ] . sse [ 0 ] , cx_pkt -> data . layer_psnr [ i ] . sse [ 1 ] , cx_pkt -> data . layer_psnr [ i ] . sse [ 2 ] , cx_pkt -> data . layer_psnr [ i ] . sse [ 3 ] ) ; for ( j = 0 ; j < COMPONENTS ; ++ j ) { si -> psnr_sum [ i ] [ j ] += cx_pkt -> data . layer_psnr [ i ] . psnr [ j ] ; si -> sse_sum [ i ] [ j ] += cx_pkt -> data . layer_psnr [ i ] . sse [ j ] ; } } ++ si -> psnr_pkt_received ; break ; } case VPX_CODEC_SPATIAL_SVC_LAYER_SIZES : { int i ; for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) <S2SV_ModEnd> si -> bytes_sum [ <S2SV_ModStart> si -> bytes_sum [ i ] += cx_pkt -> data . layer_sizes [ i ] ; break ; } # endif # endif default : { break ; } } } <S2SV_ModEnd> return VPX_CODEC_OK ; } <S2SV_ModStart> return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> svc_ctx ) { const SvcInternal_t <S2SV_ModEnd> * const si =
<S2SV_ModStart> * enc_cfg ) { vpx_codec_err_t res ; int i ; SvcInternal_t <S2SV_ModEnd> * const si = <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; } if ( svc_ctx -> temporal_layering_mode == 3 ) { svc_ctx -> temporal_layers = 3 ; } else if ( svc_ctx -> temporal_layering_mode == 2 ) { svc_ctx -> temporal_layers = 2 ; } for ( i = 0 ; i < VPX_SS_MAX_LAYERS ; ++ i ) { si -> svc_params . max_quantizers [ i ] = MAX_QUANTIZER ; si -> svc_params . min_quantizers [ i ] = 0 ; si -> svc_params . scaling_factor_num [ i ] = DEFAULT_SCALE_FACTORS_NUM [ i ] ; si -> svc_params . scaling_factor_den [ i ] = DEFAULT_SCALE_FACTORS_DEN [ i ] ; } res = parse_options ( svc_ctx , si -> options <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ) return res ; if ( svc_ctx -> spatial_layers < 1 ) svc_ctx -> spatial_layers = 1 ; if ( svc_ctx -> spatial_layers > VPX_SS_MAX_LAYERS ) svc_ctx -> spatial_layers = VPX_SS_MAX_LAYERS ; if ( svc_ctx -> temporal_layers < 1 ) svc_ctx -> temporal_layers = 1 ; if ( svc_ctx -> temporal_layers > VPX_TS_MAX_LAYERS ) svc_ctx -> temporal_layers = VPX_TS_MAX_LAYERS ; if ( svc_ctx -> temporal_layers * svc_ctx -> spatial_layers > VPX_MAX_LAYERS ) { svc_log ( svc_ctx , SVC_LOG_ERROR , "spatial<S2SV_blank>layers<S2SV_blank>*<S2SV_blank>temporal<S2SV_blank>layers<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>number<S2SV_blank>of<S2SV_blank>" "allowed<S2SV_blank>layers<S2SV_blank>of<S2SV_blank>%d\\n" , svc_ctx -> spatial_layers * svc_ctx -> temporal_layers , ( int ) VPX_MAX_LAYERS ) ; return VPX_CODEC_INVALID_PARAM ; } assign_layer_bitrates ( svc_ctx , enc_cfg ) ; # if CONFIG_SPATIAL_SVC for ( i = 0 ; i < svc_ctx -> spatial_layers ; ++ i ) enc_cfg -> ss_enable_auto_alt_ref [ i ] = si -> enable_auto_alt_ref [ i ] ; # endif if ( svc_ctx -> temporal_layers > 1 ) { int i ; for ( i = 0 ; i < svc_ctx -> temporal_layers ; ++ i ) { enc_cfg -> ts_target_bitrate [ i ] = enc_cfg -> rc_target_bitrate / svc_ctx -> temporal_layers ; enc_cfg -> ts_rate_decimator [ i ] = 1 << ( svc_ctx -> temporal_layers - 1 - i ) ; } } if ( svc_ctx -> threads ) enc_cfg -> g_threads = svc_ctx -> threads ; enc_cfg -> ss_number_layers = svc_ctx -> spatial_layers ; enc_cfg -> ts_number_layers = svc_ctx -> temporal_layers ; if ( enc_cfg -> rc_end_usage == VPX_CBR ) { enc_cfg -> rc_resize_allowed = 0 ; enc_cfg -> rc_min_quantizer = 2 ; enc_cfg -> rc_max_quantizer = 63 ; enc_cfg -> rc_undershoot_pct = 50 ; enc_cfg -> rc_overshoot_pct = 50 ; enc_cfg -> rc_buf_initial_sz = 20 ; enc_cfg -> rc_buf_optimal_sz = 600 ; enc_cfg -> rc_buf_sz = 1000 ; } if ( enc_cfg -> g_error_resilient == 0 && si -> use_multiple_frame_contexts == 0 ) enc_cfg -> g_error_resilient = 1 ; res = vpx_codec_enc_init ( codec_ctx , iface , enc_cfg , VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> res != VPX_CODEC_OK ) { svc_log ( svc_ctx , SVC_LOG_ERROR , "svc_enc_init<S2SV_blank>error\\n" ) ; return res ; } vpx_codec_control ( codec_ctx , VP9E_SET_SVC , 1 ) ; <S2SV_ModEnd> vpx_codec_control ( codec_ctx , <S2SV_ModStart> vpx_codec_control ( codec_ctx , VP9E_SET_SVC_PARAMETERS , & si -> svc_params <S2SV_ModEnd> ) ; return VPX_CODEC_OK
<S2SV_ModStart> * svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * si ; if <S2SV_ModStart> ; si = ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx -> <S2SV_ModStart> { free ( si <S2SV_ModEnd> ) ; svc_ctx ->
<S2SV_ModStart> * options ) { SvcInternal_t <S2SV_ModEnd> * const si =
<S2SV_ModStart> entry -> fn ( ( vpx_codec_alg_priv_t * ) ctx -> priv <S2SV_ModEnd> , ap ) ;
<S2SV_ModStart> VPX_CODEC_ERROR ; else { <S2SV_ModEnd> ctx -> iface -> <S2SV_ModStart> iface -> destroy ( ( vpx_codec_alg_priv_t * ) ctx -> priv <S2SV_ModEnd> ) ; ctx ->
<S2SV_ModStart> vpx_codec_iface_t * iface , const <S2SV_ModStart> ( ( flags & <S2SV_ModEnd> VPX_CODEC_USE_POSTPROC ) && ! <S2SV_ModStart> cfg ; res = <S2SV_ModEnd> ctx -> iface -> <S2SV_ModStart> ctx ) ; } <S2SV_ModEnd> } return SAVE_STATUS (
<S2SV_ModStart> data && data_sz ) || ( data && ! data_sz ) <S2SV_ModStart> dec . decode ( get_alg_priv ( ctx ) <S2SV_ModEnd> , data , data_sz
<S2SV_ModStart> dec . get_frame ( get_alg_priv ( ctx ) <S2SV_ModEnd> , iter ) ;
<S2SV_ModStart> dec . get_si ( get_alg_priv ( ctx ) <S2SV_ModEnd> , si ) ;
<S2SV_ModStart> dec . set_fb_fn ( get_alg_priv ( ctx ) <S2SV_ModEnd> , cb_get , cb_release
<S2SV_ModStart> ; vpx_codec_enc_cfg_map_t * map ; int i <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; for ( i = 0 ; i < iface -> enc . cfg_map_count ; ++ i ) { <S2SV_ModStart> -> enc . cfg_maps + i ; <S2SV_ModEnd> if ( map ->
<S2SV_ModStart> enc . cfg_set ( get_alg_priv ( ctx ) <S2SV_ModEnd> , cfg ) ;
<S2SV_ModStart> ( ( flags & <S2SV_ModEnd> VPX_CODEC_USE_PSNR ) && ! <S2SV_ModStart> } } if ( <S2SV_ModEnd> res ) break ;
<S2SV_ModStart> vpx_codec_iface_t * iface , const <S2SV_ModStart> ( ( flags & <S2SV_ModEnd> VPX_CODEC_USE_PSNR ) && ! <S2SV_ModStart> ctx ) ; } <S2SV_ModEnd> } return SAVE_STATUS (
<S2SV_ModStart> enc . encode ( get_alg_priv ( ctx ) <S2SV_ModEnd> , img , pts <S2SV_ModStart> enc . encode ( get_alg_priv ( ctx ) <S2SV_ModEnd> , img , pts
<S2SV_ModStart> enc . get_cx_data ( get_alg_priv ( ctx ) <S2SV_ModEnd> , iter ) ;
<S2SV_ModStart> enc . get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; } return
<S2SV_ModStart> enc . get_preview ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; } return
<S2SV_ModStart> ycs , bps ; unsigned int stride_in_bytes ; <S2SV_ModStart> 12 ; break ; case VPX_IMG_FMT_I422 : case VPX_IMG_FMT_I440 : bps = 16 ; break ; case VPX_IMG_FMT_I444 : bps = 24 ; break ; case VPX_IMG_FMT_I42016 : bps = 24 ; break ; case VPX_IMG_FMT_I42216 : case VPX_IMG_FMT_I44016 : bps = 32 ; break ; case VPX_IMG_FMT_I44416 : bps = 48 ; break ; <S2SV_ModStart> : case VPX_IMG_FMT_VPXYV12 : case VPX_IMG_FMT_I422 : case VPX_IMG_FMT_I42016 : case VPX_IMG_FMT_I42216 : <S2SV_ModStart> case VPX_IMG_FMT_I420 : case VPX_IMG_FMT_I440 : case <S2SV_ModStart> VPX_IMG_FMT_VPXI420 : case VPX_IMG_FMT_VPXYV12 : case VPX_IMG_FMT_I42016 : case VPX_IMG_FMT_I44016 <S2SV_ModStart> - 1 ) ; stride_in_bytes = ( fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? s * 2 : s ; <S2SV_ModStart> ! img_data ) { const uint64_t alloc_size = <S2SV_ModEnd> ( fmt & VPX_IMG_FMT_PLANAR <S2SV_ModStart> & VPX_IMG_FMT_PLANAR ) ? ( uint64_t ) <S2SV_ModStart> bps / 8 : ( uint64_t ) h * s ; if ( alloc_size != ( size_t ) alloc_size <S2SV_ModEnd> ) goto fail ; <S2SV_ModStart> fail ; img -> img_data = ( uint8_t * ) vpx_memalign ( buf_align , ( size_t ) alloc_size ) ; img -> img_data_owner = 1 ; } if ( ! img -> img_data ) goto fail ; img -> fmt = fmt ; img -> bit_depth = ( fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 16 : 8 <S2SV_ModEnd> ; img -> w <S2SV_ModStart> [ VPX_PLANE_ALPHA ] = stride_in_bytes <S2SV_ModEnd> ; img -> stride <S2SV_ModStart> [ VPX_PLANE_V ] = stride_in_bytes <S2SV_ModEnd> >> xcs ; if
<S2SV_ModStart> img -> img_data_owner ) vpx_free <S2SV_ModEnd> ( img -> img_data
<S2SV_ModStart> ; } else { const int bytes_per_sample = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ; <S2SV_ModStart> = data + x * bytes_per_sample <S2SV_ModStart> = data + x * bytes_per_sample + <S2SV_ModEnd> y * img -> <S2SV_ModStart> [ VPX_PLANE_U ] = data <S2SV_ModEnd> + ( x >> <S2SV_ModStart> img -> x_chroma_shift ) * bytes_per_sample + <S2SV_ModEnd> ( y >> img <S2SV_ModStart> [ VPX_PLANE_V ] = data <S2SV_ModEnd> + ( x >> <S2SV_ModStart> img -> x_chroma_shift ) * bytes_per_sample + <S2SV_ModEnd> ( y >> img <S2SV_ModStart> [ VPX_PLANE_V ] = data <S2SV_ModEnd> + ( x >> <S2SV_ModStart> img -> x_chroma_shift ) * bytes_per_sample + <S2SV_ModEnd> ( y >> img <S2SV_ModStart> [ VPX_PLANE_U ] = data <S2SV_ModEnd> + ( x >> <S2SV_ModStart> img -> x_chroma_shift ) * bytes_per_sample + <S2SV_ModEnd> ( y >> img
<S2SV_ModStart> if ( x ) memset <S2SV_ModEnd> ( x , 0
<S2SV_ModStart> 1 ] ) ; free <S2SV_ModEnd> ( addr ) ; <S2SV_ModStart> ( addr ) ; <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> x = NULL ; addr = malloc <S2SV_ModEnd> ( size + align <S2SV_ModStart> + ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr )
<S2SV_ModStart> memblk = NULL ; new_addr = realloc <S2SV_ModEnd> ( addr , size <S2SV_ModStart> + ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( new_addr )
<S2SV_ModStart> ) ; # if <S2SV_ModEnd> HAVE_MEDIA flags |= HAS_MEDIA <S2SV_ModStart> endif # if HAVE_NEON || HAVE_NEON_ASM
<S2SV_ModStart> void ) src_pitch ; memcpy <S2SV_ModEnd> ( dest , source
<S2SV_ModStart> if ( interpolation ) memcpy <S2SV_ModEnd> ( temp_area , temp_area <S2SV_ModStart> ; } else { memcpy <S2SV_ModEnd> ( temp_area + i <S2SV_ModStart> dest_band_height ) ; } memcpy <S2SV_ModEnd> ( temp_area , temp_area
<S2SV_ModStart> ; i ++ ) memset <S2SV_ModEnd> ( dst -> y_buffer <S2SV_ModStart> ; i ++ ) memcpy <S2SV_ModEnd> ( dst -> y_buffer <S2SV_ModStart> ; i ++ ) memset <S2SV_ModEnd> ( dst -> u_buffer <S2SV_ModStart> ; i ++ ) memcpy <S2SV_ModEnd> ( dst -> u_buffer <S2SV_ModStart> ; i ++ ) memset <S2SV_ModEnd> ( dst -> v_buffer <S2SV_ModStart> ; i ++ ) memcpy <S2SV_ModEnd> ( dst -> v_buffer
<S2SV_ModStart> buffer_alloc ) ; } memset <S2SV_ModEnd> ( ybf , 0
<S2SV_ModStart> y_stride ; ybf -> uv_crop_width = ( width + 1 ) / 2 ; ybf -> uv_crop_height = ( height + 1 ) / 2 ; ybf ->
<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1 , src_ptr1 <S2SV_ModStart> , extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2 , src_ptr2 <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1 , src_ptr1 <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2 , src_ptr2
<S2SV_ModStart> ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { assert ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ; <S2SV_ModStart> ++ row ) { memcpy_short_addr <S2SV_ModEnd> ( dst , src <S2SV_ModStart> ++ row ) { memcpy_short_addr <S2SV_ModEnd> ( dst , src <S2SV_ModStart> ++ row ) { memcpy_short_addr <S2SV_ModEnd> ( dst , src <S2SV_ModStart> ( dst_ybc ) ; return ; } else { assert ( ! ( dst_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) ) ; } # endif for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst , src , src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } src = src_ybc -> u_buffer ; dst = dst_ybc -> u_buffer ; for ( row = 0 ; row < src_ybc -> uv_height ; ++ row ) { memcpy ( dst , src , src_ybc -> uv_width ) ; src += src_ybc -> uv_stride ; dst += dst_ybc -> uv_stride ; } src = src_ybc -> v_buffer ; dst = dst_ybc -> v_buffer ; for ( row = 0 ; row < src_ybc -> uv_height ; ++ row ) { memcpy ( dst , src , src_ybc -> uv_width ) ; src += src_ybc -> uv_stride ; dst += dst_ybc -> uv_stride ; } vp8_yv12_extend_frame_borders_c ( dst_ybc ) ;
<S2SV_ModStart> * ybf ) { const int uv_border = ybf -> border / 2 ; assert ( ybf -> border % 2 == 0 ) ; <S2SV_ModStart> >= 0 ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ybf -> flags & YV12_FLAG_HIGHBITDEPTH ) { extend_plane_high ( ybf -> y_buffer , ybf -> y_stride , ybf -> y_crop_width , ybf -> y_crop_height , ybf -> border , ybf -> border , ybf -> border + ybf -> y_height - ybf -> y_crop_height , ybf -> border + ybf -> y_width - ybf -> y_crop_width ) ; extend_plane_high ( ybf -> u_buffer , ybf -> uv_stride , ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; extend_plane_high ( ybf -> v_buffer , ybf -> uv_stride , ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width ) ; return ; } # endif <S2SV_ModStart> ybf -> uv_stride , ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width <S2SV_ModEnd> ) ; extend_plane ( <S2SV_ModStart> ybf -> uv_stride , ybf -> uv_crop_width , ybf -> uv_crop_height , uv_border , uv_border , uv_border + ybf -> uv_height - ybf -> uv_crop_height , uv_border + ybf -> uv_width - ybf -> uv_crop_width <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> dst_ybc -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { const uint16_t * src16 = CONVERT_TO_SHORTPTR ( src ) ; uint16_t * dst16 = CONVERT_TO_SHORTPTR ( dst ) ; <S2SV_ModStart> ++ row ) { memcpy ( dst16 , src16 , src_ybc -> y_width * sizeof ( uint16_t ) ) ; src16 += src_ybc -> y_stride ; dst16 += dst_ybc -> y_stride ; } return ; } # endif for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy <S2SV_ModEnd> ( dst , src
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vpx_codec_peek_stream_info ( decoder -> codec_interface <S2SV_ModEnd> ( ) , buf
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ] ) ; break ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( uint8_t * ) calloc ( min_size , sizeof ( uint8_t ) <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> , progress = 0 , frame_parallel = 0 <S2SV_ModStart> 0 ; int ec_enabled = 0 ; int keep_going <S2SV_ModStart> use_y4m = 1 ; int opt_yv12 = 0 ; int opt_i420 = 0 ; <S2SV_ModStart> cfg = { 0 , 0 , 0 } ; # if CONFIG_VP9_HIGHBITDEPTH int output_bit_depth = 0 ; # endif <S2SV_ModEnd> # if CONFIG_VP8_DECODER vp8_postproc_cfg_t <S2SV_ModStart> scaled_img = NULL ; # if CONFIG_VP9_HIGHBITDEPTH vpx_image_t * img_shifted = NULL ; # endif <S2SV_ModStart> int frame_avail , got_data , flush_decoder = 0 <S2SV_ModStart> ext_fb_list = { 0 , NULL <S2SV_ModStart> VpxDecInputContext input = { NULL , NULL <S2SV_ModEnd> } ; struct VpxInputContext <S2SV_ModStart> ; struct VpxInputContext vpx_input_ctx ; # if CONFIG_WEBM_IO struct WebmInputContext webm_ctx ; memset ( & ( webm_ctx ) , 0 , sizeof ( webm_ctx ) ) ; input . webm_ctx = & webm_ctx ; # endif input . <S2SV_ModEnd> vpx_input_ctx = & vpx_input_ctx <S2SV_ModStart> vpx_input_ctx = & vpx_input_ctx <S2SV_ModEnd> ; exec_name = argv_ <S2SV_ModStart> flipuv = 1 ; opt_yv12 = 1 ; # if CONFIG_VP9_HIGHBITDEPTH output_bit_depth = 8 ; # endif <S2SV_ModStart> flipuv = 0 ; opt_i420 = 1 ; <S2SV_ModStart> & arg , & rawvideo , argi ) ) { use_y4m = 0 ; } else if ( arg_match ( & arg , & <S2SV_ModStart> & arg ) ; # if CONFIG_VP9_DECODER || CONFIG_VP10_DECODER <S2SV_ModStart> & arg , & frameparallelarg , argi ) ) frame_parallel = 1 ; # endif else if ( arg_match ( & arg , & <S2SV_ModStart> & arg ) ; else if ( arg_match ( & arg , & continuearg , argi ) ) keep_going = 1 ; # if CONFIG_VP9_HIGHBITDEPTH else if ( arg_match ( & arg , & outbitdeptharg , argi ) ) { output_bit_depth = arg_parse_uint ( & arg ) ; } # endif <S2SV_ModStart> ( ! fn ) { free ( argv ) ; <S2SV_ModStart> usage_exit ( ) ; } <S2SV_ModStart> ! infile ) { fatal ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>input<S2SV_blank>file<S2SV_blank>\'%s\'" <S2SV_ModEnd> , strcmp ( fn <S2SV_ModStart> fn : "stdin" ) <S2SV_ModEnd> ; } # if <S2SV_ModStart> ( stderr , "YUV4MPEG2<S2SV_blank>not<S2SV_blank>supported<S2SV_blank>with<S2SV_blank>output<S2SV_blank>patterns," "<S2SV_blank>try<S2SV_blank>--i420<S2SV_blank>or<S2SV_blank>--yv12<S2SV_blank>or<S2SV_blank>--rawvideo.\\n" <S2SV_ModEnd> ) ; return EXIT_FAILURE <S2SV_ModStart> VPX_CODEC_USE_ERROR_CONCEALMENT : 0 ) | ( frame_parallel ? VPX_CODEC_USE_FRAME_THREADING : 0 ) <S2SV_ModStart> decoder , interface -> codec_interface ( ) , <S2SV_ModEnd> & cfg , dec_flags <S2SV_ModStart> timer ; int corrupted = 0 <S2SV_ModStart> , detail ) ; if ( ! keep_going ) <S2SV_ModStart> timer ) ; } else { flush_decoder = 1 ; } } else { flush_decoder = 1 ; <S2SV_ModStart> & timer ) ; if ( flush_decoder ) { if ( vpx_codec_decode ( & decoder , NULL , 0 , NULL , 0 ) ) { warn ( "Failed<S2SV_blank>to<S2SV_blank>flush<S2SV_blank>decoder:<S2SV_blank>%s" , vpx_codec_error ( & decoder ) ) ; } } <S2SV_ModStart> ) ; if ( ! frame_parallel && <S2SV_ModStart> decoder ) ) ; if ( ! keep_going ) <S2SV_ModStart> vpx_img_alloc ( NULL , img -> fmt <S2SV_ModEnd> , display_width , display_height <S2SV_ModStart> display_height , 16 ) ; scaled_img -> bit_depth = img -> bit_depth <S2SV_ModStart> -> d_h ) { # if CONFIG_LIBYUV libyuv_scale <S2SV_ModEnd> ( img , scaled_img <S2SV_ModStart> img = scaled_img ; # else fprintf ( stderr , "Failed<S2SV_blank><S2SV_blank>to<S2SV_blank>scale<S2SV_blank>output<S2SV_blank>frame:<S2SV_blank>%s.\\n" "Scaling<S2SV_blank>is<S2SV_blank>disabled<S2SV_blank>in<S2SV_blank>this<S2SV_blank>configuration.<S2SV_blank>" "To<S2SV_blank>enable<S2SV_blank>scaling,<S2SV_blank>configure<S2SV_blank>with<S2SV_blank>--enable-libyuv\\n" , vpx_codec_error ( & decoder ) ) ; return EXIT_FAILURE ; # endif } } # if CONFIG_VP9_HIGHBITDEPTH if ( ! output_bit_depth ) { output_bit_depth = img -> bit_depth ; } if ( output_bit_depth != img -> bit_depth ) { const vpx_img_fmt_t shifted_fmt = output_bit_depth == 8 ? img -> fmt ^ ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) : img -> fmt | VPX_IMG_FMT_HIGHBITDEPTH ; if ( img_shifted && img_shifted_realloc_required ( img , img_shifted , shifted_fmt ) ) { vpx_img_free ( img_shifted ) ; img_shifted = NULL ; } if ( ! img_shifted ) { img_shifted = vpx_img_alloc ( NULL , shifted_fmt , img -> d_w , img -> d_h , 16 ) ; img_shifted -> bit_depth = output_bit_depth ; } if ( output_bit_depth > img -> bit_depth ) { vpx_img_upshift ( img_shifted , img , output_bit_depth - img -> bit_depth ) ; } else { vpx_img_downshift ( img_shifted , img , img -> bit_depth - output_bit_depth ) ; } img = img_shifted ; } # endif <S2SV_ModEnd> if ( single_file ) <S2SV_ModStart> 0 ; if ( img -> fmt == VPX_IMG_FMT_I440 || img -> fmt == VPX_IMG_FMT_I44016 ) { fprintf ( stderr , "Cannot<S2SV_blank>produce<S2SV_blank>y4m<S2SV_blank>output<S2SV_blank>for<S2SV_blank>440<S2SV_blank>sampling.\\n" ) ; goto fail ; } if ( <S2SV_ModStart> , img -> fmt , img -> bit_depth <S2SV_ModStart> ) ; } } else { if ( frame_out == 1 ) { if ( opt_i420 ) { if ( img -> fmt != VPX_IMG_FMT_I420 && img -> fmt != VPX_IMG_FMT_I42016 ) { fprintf ( stderr , "Cannot<S2SV_blank>produce<S2SV_blank>i420<S2SV_blank>output<S2SV_blank>for<S2SV_blank>bit-stream.\\n" ) ; goto fail ; } } if ( opt_yv12 ) { if ( ( img -> fmt != VPX_IMG_FMT_I420 && img -> fmt != VPX_IMG_FMT_YV12 ) || img -> bit_depth != 8 ) { fprintf ( stderr , "Cannot<S2SV_blank>produce<S2SV_blank>yv12<S2SV_blank>output<S2SV_blank>for<S2SV_blank>bit-stream.\\n" ) ; goto fail ; } } } } <S2SV_ModStart> ; } } } <S2SV_ModEnd> } if ( summary <S2SV_ModStart> ( scaled_img ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( img_shifted ) vpx_img_free ( img_shifted ) ; # endif
<S2SV_ModStart> file ) fatal ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>output<S2SV_blank>file<S2SV_blank>\'%s\'" <S2SV_ModEnd> , name ) ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> img , plane ) * ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 )
<S2SV_ModStart> <S2SV_null> void usage_exit ( void <S2SV_ModStart> vpx_codec_iface_name ( decoder -> codec_interface <S2SV_ModEnd> ( ) ) )
<S2SV_ModStart> i , y ; # if CONFIG_VP9_HIGHBITDEPTH const int bytes_per_sample = ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ? 2 : 1 ) ; # else const int bytes_per_sample = 1 ; # endif <S2SV_ModStart> fwrite ( buf , bytes_per_sample <S2SV_ModEnd> , w , file
<S2SV_ModStart> & stream -> ebml ) <S2SV_ModEnd> ; } # endif
<S2SV_ModStart> const img2 ) { uint32_t l_w = img1 -> d_w ; <S2SV_ModEnd> uint32_t c_w = ( <S2SV_ModStart> -> d_h ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( img1 -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) { l_w *= 2 ; c_w *= 2 ; } # endif <S2SV_ModStart> [ VPX_PLANE_Y ] , l_w <S2SV_ModEnd> ) == 0 )
<S2SV_ModStart> framerate . num ; # if CONFIG_VP9_HIGHBITDEPTH if ( img ) { if ( ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) <S2SV_ModEnd> && ( img -> <S2SV_ModStart> ) { if ( img -> fmt != VPX_IMG_FMT_I42016 ) { fprintf ( stderr , "%s<S2SV_blank>can<S2SV_blank>only<S2SV_blank>scale<S2SV_blank>4:2:0<S2SV_blank>inputs\\n" , exec_name ) ; exit ( EXIT_FAILURE ) ; } # if CONFIG_LIBYUV if ( <S2SV_ModStart> stream -> img ) { <S2SV_ModStart> vpx_img_alloc ( NULL , VPX_IMG_FMT_I42016 , cfg -> g_w , cfg -> g_h , 16 ) ; } I420Scale_16 ( ( uint16 * ) img -> planes [ VPX_PLANE_Y ] , img -> stride [ VPX_PLANE_Y ] / 2 , ( uint16 * ) img -> planes [ VPX_PLANE_U ] , img -> stride [ VPX_PLANE_U ] / 2 , ( uint16 * ) img -> planes [ VPX_PLANE_V ] , img -> stride [ VPX_PLANE_V ] / 2 , img -> d_w , img -> d_h , ( uint16 * ) stream -> img -> planes [ VPX_PLANE_Y ] , stream -> img -> stride [ VPX_PLANE_Y ] / 2 , ( uint16 * ) stream -> img -> planes [ VPX_PLANE_U ] , stream -> img -> stride [ VPX_PLANE_U ] / 2 , ( uint16 * ) stream -> img -> planes [ VPX_PLANE_V ] , stream -> img -> stride [ VPX_PLANE_V ] / 2 , stream -> img -> d_w , stream -> img -> d_h , kFilterBox ) ; img = stream -> img ; # else stream -> encoder . err = 1 ; ctx_exit_on_error ( & stream -> encoder , "Stream<S2SV_blank>%d:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame.\\n" "Scaling<S2SV_blank>disabled<S2SV_blank>in<S2SV_blank>this<S2SV_blank>configuration.<S2SV_blank>\\n" "To<S2SV_blank>enable,<S2SV_blank>configure<S2SV_blank>with<S2SV_blank>--enable-libyuv\\n" , stream -> index ) ; # endif } } # endif if ( img && ( img -> d_w != cfg -> g_w || img -> d_h != cfg -> g_h ) ) { if ( img -> fmt != VPX_IMG_FMT_I420 && img -> fmt != VPX_IMG_FMT_YV12 ) { fprintf ( stderr , "%s<S2SV_blank>can<S2SV_blank>only<S2SV_blank>scale<S2SV_blank>4:2:0<S2SV_blank>8bpp<S2SV_blank>inputs\\n" , exec_name ) ; exit ( EXIT_FAILURE ) ; } # if CONFIG_LIBYUV if ( ! stream -> img ) stream -> img = vpx_img_alloc ( NULL , VPX_IMG_FMT_I420 <S2SV_ModEnd> , cfg -> g_w <S2SV_ModStart> stream -> img ; # else stream -> encoder . err = 1 ; ctx_exit_on_error ( & stream -> encoder , "Stream<S2SV_blank>%d:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>frame.\\n" "Scaling<S2SV_blank>disabled<S2SV_blank>in<S2SV_blank>this<S2SV_blank>configuration.<S2SV_blank>\\n" "To<S2SV_blank>enable,<S2SV_blank>configure<S2SV_blank>with<S2SV_blank>--enable-libyuv\\n" , stream -> index ) ; # endif
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> = 0 ; static int64_t <S2SV_ModEnd> ivf_header_pos = 0 ; <S2SV_ModStart> . write_webm ) { <S2SV_ModEnd> write_webm_block ( & stream <S2SV_ModStart> VPX_FRAME_IS_FRAGMENT ) ) { const int64_t <S2SV_ModEnd> currpos = ftello ( <S2SV_ModStart> sz ; break ; # if CONFIG_FP_MB_STATS case VPX_CODEC_FPMB_STATS_PKT : stats_write ( & stream -> fpmb_stats , pkt -> data . firstpass_mb_stats . buf , pkt -> data . firstpass_mb_stats . sz ) ; stream -> nbytes += pkt -> data . raw . sz ; break ; # endif
<S2SV_ModStart> VPX_CODEC_USE_OUTPUT_PARTITION : 0 ; # if CONFIG_VP9_HIGHBITDEPTH flags |= stream -> config . use_16bit_internal ? VPX_CODEC_USE_HIGHBITDEPTH : 0 ; # endif <S2SV_ModStart> global -> codec -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> decoder , decoder -> codec_interface <S2SV_ModEnd> ( ) , NULL
<S2SV_ModStart> ; vpx_image_t raw ; # if CONFIG_VP9_HIGHBITDEPTH vpx_image_t raw_shift ; int allocated_raw_shift = 0 ; int use_16bit_internal = 0 ; int input_shift = 0 ; # endif <S2SV_ModStart> ; struct VpxInputContext input <S2SV_ModEnd> ; struct VpxEncoderConfig global <S2SV_ModStart> res = 0 ; memset ( & input , 0 , sizeof ( input ) ) ; <S2SV_ModStart> 1 ; input . only_i420 <S2SV_ModEnd> = 1 ; input <S2SV_ModStart> 1 ; input . bit_depth = 0 <S2SV_ModEnd> ; argv = argv_dup <S2SV_ModStart> , argv ) ; switch ( global . color_type ) { case I420 : input . fmt = VPX_IMG_FMT_I420 ; break ; case I422 : input . fmt = VPX_IMG_FMT_I422 ; break ; case I444 : input . fmt = VPX_IMG_FMT_I444 ; break ; case I440 : input . fmt = VPX_IMG_FMT_I440 ; break ; case YV12 : input . fmt = VPX_IMG_FMT_YV12 ; break ; } <S2SV_ModStart> = - 1 ; int64_t <S2SV_ModEnd> lagged_count = 0 ; <S2SV_ModStart> input . height ) { <S2SV_ModStart> } } ) ; } <S2SV_ModStart> "Specify<S2SV_blank>stream<S2SV_blank>dimensions<S2SV_blank>with<S2SV_blank>--width<S2SV_blank>(-w)<S2SV_blank>" "<S2SV_blank>and<S2SV_blank>--height<S2SV_blank>(-h)" ) ; if ( ! input . bit_depth ) { FOREACH_STREAM ( { if ( stream -> config . cfg . g_input_bit_depth ) input . bit_depth = stream -> config . cfg . g_input_bit_depth ; else input . bit_depth = stream -> config . cfg . g_input_bit_depth = ( int ) stream -> config . cfg . g_bit_depth ; } ) ; if ( input . bit_depth > 8 ) input . fmt |= VPX_IMG_FMT_HIGHBITDEPTH ; } else { FOREACH_STREAM ( { stream -> config . cfg . g_input_bit_depth = input . bit_depth ; } ) ; } <S2SV_ModStart> ( & raw , input . fmt , <S2SV_ModEnd> input . width , <S2SV_ModStart> stream , & global , & input . pixel_aspect_ratio <S2SV_ModStart> global ) ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( strcmp ( global . codec -> name , "vp9" ) == 0 || strcmp ( global . codec -> name , "vp10" ) == 0 ) { FOREACH_STREAM ( { if ( stream -> config . use_16bit_internal ) { use_16bit_internal = 1 ; } if ( stream -> config . cfg . g_profile == 0 ) { input_shift = 0 ; } else { input_shift = ( int ) stream -> config . cfg . g_bit_depth - stream -> config . cfg . g_input_bit_depth ; } } ) ; } # endif <S2SV_ModStart> , estimated_time_left ) ; <S2SV_ModEnd> } } else frame_avail <S2SV_ModStart> . skip_frames ) { # if CONFIG_VP9_HIGHBITDEPTH vpx_image_t * frame_to_encode ; if ( input_shift || ( use_16bit_internal && input . bit_depth == 8 ) ) { assert ( use_16bit_internal ) ; if ( ! allocated_raw_shift ) { vpx_img_alloc ( & raw_shift , raw . fmt | VPX_IMG_FMT_HIGHBITDEPTH , input . width , input . height , 32 ) ; allocated_raw_shift = 1 ; } vpx_img_upshift ( & raw_shift , & raw , input_shift ) ; frame_to_encode = & raw_shift ; } else { frame_to_encode = & raw ; } vpx_usec_timer_start ( & timer ) ; if ( use_16bit_internal ) { assert ( frame_to_encode -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ; FOREACH_STREAM ( { if ( stream -> config . use_16bit_internal ) encode_frame ( stream , & global , frame_avail ? frame_to_encode : NULL , frames_in ) ; else assert ( 0 ) ; } ) ; } else { assert ( ( frame_to_encode -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) == 0 ) ; FOREACH_STREAM ( encode_frame ( stream , & global , frame_avail ? frame_to_encode : NULL , frames_in ) ) ; } # else <S2SV_ModStart> frames_in ) ) ; # endif <S2SV_ModStart> input . length && streams != NULL && <S2SV_ModStart> . limit ) { const int64_t <S2SV_ModEnd> frame_in_lagged = ( seen_frames <S2SV_ModStart> ; } else { const int64_t <S2SV_ModEnd> input_pos = ftello ( <S2SV_ModStart> . file ) ; const int64_t <S2SV_ModEnd> input_pos_lagged = input_pos - <S2SV_ModStart> input_pos - lagged_count ; const <S2SV_ModStart> ( stdout ) ; if ( ! global . quiet ) fprintf ( stderr , "\\033[K" ) ; <S2SV_ModStart> global . quiet ) { <S2SV_ModStart> stderr , "\\rPass<S2SV_blank>%d/%d<S2SV_blank>frame<S2SV_blank>%4d/%-4d<S2SV_blank>%7" PRId64 "B<S2SV_blank>%7" PRId64 "b/f<S2SV_blank>%7" <S2SV_ModEnd> PRId64 "b/s" "<S2SV_blank>%7" PRId64 <S2SV_ModStart> , seen_frames ? ( int64_t <S2SV_ModEnd> ) ( stream -> <S2SV_ModStart> , seen_frames ) ) ) ; } <S2SV_ModEnd> if ( global . <S2SV_ModStart> global . show_psnr ) { if ( global . codec -> fourcc == VP9_FOURCC ) { FOREACH_STREAM ( show_psnr ( stream , ( 1 << stream -> config . cfg . g_input_bit_depth ) - 1 ) ) ; } else { FOREACH_STREAM ( show_psnr ( stream , 255.0 ) ) ; } } <S2SV_ModEnd> FOREACH_STREAM ( vpx_codec_destroy ( <S2SV_ModStart> 1 ) ) ; # if CONFIG_FP_MB_STATS FOREACH_STREAM ( stats_close ( & stream -> fpmb_stats , global . passes - 1 ) ) ; # endif <S2SV_ModStart> f ) ; } ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( allocated_raw_shift ) vpx_img_free ( & raw_shift
<S2SV_ModStart> ) ; if ( stream == NULL ) { <S2SV_ModEnd> fatal ( "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>new<S2SV_blank>stream." ) <S2SV_ModStart> ( "Failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>new<S2SV_blank>stream." ) ; } <S2SV_ModStart> global -> codec -> codec_interface <S2SV_ModEnd> ( ) , & <S2SV_ModStart> stream -> config . write_webm = 1 ; # if CONFIG_WEBM_IO stream -> config . <S2SV_ModStart> STEREO_FORMAT_MONO ; stream -> ebml . last_pts_ns = - 1 ; stream -> ebml . writer = NULL ; stream -> ebml . segment = NULL <S2SV_ModEnd> ; # endif stream
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; } input -> pixel_aspect_ratio . numerator = 1 ; input -> pixel_aspect_ratio . denominator = 1 ; input -> <S2SV_ModStart> pic_h ; input -> pixel_aspect_ratio . numerator = input -> y4m . par_n ; input -> pixel_aspect_ratio . denominator = input -> y4m . par_d ; input -> <S2SV_ModStart> fps_d ; input -> fmt = input -> y4m . vpx_fmt ; input -> bit_depth = input -> y4m . bit_depth <S2SV_ModEnd> ; } else fatal
<S2SV_ModStart> struct VpxEncoderConfig * global , const struct VpxRational * pixel_aspect_ratio <S2SV_ModStart> -> codec -> fourcc , pixel_aspect_ratio
<S2SV_ModStart> struct arg arg ; const int num_encoder = get_vpx_encoder_count ( ) ; if ( num_encoder < 1 ) die ( "Error:<S2SV_blank>no<S2SV_blank>valid<S2SV_blank>encoder<S2SV_blank>available\\n" ) ; <S2SV_ModStart> codec = get_vpx_encoder_by_index ( num_encoder - 1 ) ; global -> passes = 0 ; global -> color_type = I420 <S2SV_ModEnd> ; global -> deadline <S2SV_ModStart> ) ) global -> color_type = YV12 ; else if ( arg_match ( & arg , & use_i420 , argi ) ) global -> color_type = I420 ; else if ( arg_match ( & arg , & use_i422 , argi ) ) global -> color_type = I422 ; else if ( arg_match ( & arg , & use_i444 , argi ) ) global -> color_type = I444 ; else if ( arg_match ( & arg , & use_i440 , argi ) ) global -> color_type = I440 <S2SV_ModEnd> ; else if ( <S2SV_ModStart> = 1 ; else <S2SV_ModEnd> argj ++ ; } <S2SV_ModStart> { # if CONFIG_VP9_ENCODER || CONFIG_VP10_ENCODER if ( global -> codec != NULL && global -> codec -> name != NULL )
<S2SV_ModStart> eos_mark_found = 0 ; # if CONFIG_VP9_HIGHBITDEPTH int test_16bit_internal = 0 ; # endif <S2SV_ModStart> vp9_arg_ctrl_map ; # endif # if CONFIG_VP10_ENCODER } else if ( strcmp ( global -> codec -> name , "vp10" ) == 0 ) { ctrl_args = vp10_args ; ctrl_args_map = vp10_arg_ctrl_map ; # endif <S2SV_ModStart> ; } if ( arg_match ( & arg , & outputfile , argi ) ) { config -> out_fn = arg . val ; } else if ( arg_match ( & arg , & fpf_name , argi ) ) { config -> stats_fn = arg . val ; # if CONFIG_FP_MB_STATS } else if ( arg_match ( & arg , & fpmbf_name , argi ) ) { config -> fpmb_stats_fn = arg . val ; # endif } else if ( arg_match ( & arg , & use_webm , argi ) ) { # if CONFIG_WEBM_IO config -> write_webm = 1 ; # else die ( "Error:<S2SV_blank>--webm<S2SV_blank>specified<S2SV_blank>but<S2SV_blank>webm<S2SV_blank>is<S2SV_blank>disabled." ) ; # endif } else if ( arg_match ( & arg , & use_ivf , argi ) ) { config -> write_webm = 0 <S2SV_ModEnd> ; } else if <S2SV_ModStart> & arg ) ; # if CONFIG_VP9_HIGHBITDEPTH } else if ( arg_match ( & arg , & bitdeptharg , argi ) ) { config -> cfg . g_bit_depth = arg_parse_enum_or_int ( & arg ) ; } else if ( arg_match ( & arg , & inbitdeptharg , argi ) ) { config -> cfg . g_input_bit_depth = arg_parse_uint ( & arg ) ; # endif # if CONFIG_WEBM_IO <S2SV_ModStart> & arg ) ; # endif <S2SV_ModStart> & arg , & resize_width , argi ) ) { config -> cfg . rc_scaled_width = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg , & resize_height , argi ) ) { config -> cfg . rc_scaled_height = arg_parse_uint ( & arg ) ; } else if ( arg_match ( & arg , & <S2SV_ModStart> kf_mode = VPX_KF_DISABLED ; # if CONFIG_VP9_HIGHBITDEPTH } else if ( arg_match ( & arg , & test16bitinternalarg , argi ) ) { if ( strcmp ( global -> codec -> name , "vp9" ) == 0 || strcmp ( global -> codec -> name , "vp10" ) == 0 ) { test_16bit_internal = 1 ; } # endif <S2SV_ModStart> ++ ) if ( ctrl_args_map != NULL && <S2SV_ModStart> assert ( j < ( int ) <S2SV_ModStart> ) ; if ( ctrl_args_map != NULL && j < ( int ) <S2SV_ModEnd> ARG_CTRL_CNT_MAX ) { config <S2SV_ModStart> ++ ; } } # if CONFIG_VP9_HIGHBITDEPTH if ( strcmp ( global -> codec -> name , "vp9" ) == 0 || strcmp ( global -> codec -> name , "vp10" ) == 0 ) { config -> use_16bit_internal = test_16bit_internal | ( config -> cfg . g_profile > 1 ) ; } # endif
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>statistics<S2SV_blank>store" ) ; } # if CONFIG_FP_MB_STATS if ( stream -> config . fpmb_stats_fn ) { if ( ! stats_open_file ( & stream -> fpmb_stats , stream -> config . fpmb_stats_fn , pass ) ) fatal ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>mb<S2SV_blank>statistics<S2SV_blank>store" ) ; } else { if ( ! stats_open_mem ( & stream -> fpmb_stats , pass ) ) fatal ( "Failed<S2SV_blank>to<S2SV_blank>open<S2SV_blank>mb<S2SV_blank>statistics<S2SV_blank>store" ) ; } # endif <S2SV_ModStart> if ( pass ) { <S2SV_ModStart> -> stats ) ; # if CONFIG_FP_MB_STATS stream -> config . cfg . rc_firstpass_mb_stats_in = stats_get ( & stream -> fpmb_stats ) ; # endif }
<S2SV_ModStart> struct stream_state * stream , double peak <S2SV_ModStart> stream -> psnr_samples_total , peak <S2SV_ModEnd> , ( double )
<S2SV_ModStart> global -> codec -> codec_interface ( ) ) ) ; fprintf ( stderr , "Source<S2SV_blank>file:<S2SV_blank>%s<S2SV_blank>File<S2SV_blank>Type:<S2SV_blank>%s<S2SV_blank>Format:<S2SV_blank>%s\\n" , <S2SV_ModEnd> input -> filename , <S2SV_ModStart> input -> filename , file_type_to_string ( input -> file_type ) , image_format_to_string ( input -> fmt ) <S2SV_ModEnd> ) ; } if <S2SV_ModStart> ) ; SHOW ( g_bit_depth ) ; SHOW ( g_input_bit_depth ) ; SHOW ( <S2SV_ModStart> ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_scaled_width ) ; SHOW ( rc_scaled_height
<S2SV_ModStart> else { struct vp9_ref_frame ref_enc , ref_dec ; ref_enc <S2SV_ModEnd> . idx = 0 <S2SV_ModStart> idx = 0 ; ref_dec . idx = 0 ; <S2SV_ModStart> , VP9_GET_REFERENCE , & ref_enc ) ; enc_img = ref_enc <S2SV_ModEnd> . img ; vpx_codec_control <S2SV_ModStart> , VP9_GET_REFERENCE , & ref_dec ) ; dec_img = ref_dec . img ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( enc_img . fmt & VPX_IMG_FMT_HIGHBITDEPTH ) != ( dec_img . fmt & VPX_IMG_FMT_HIGHBITDEPTH ) ) { if ( enc_img . fmt & VPX_IMG_FMT_HIGHBITDEPTH ) { vpx_img_alloc ( & enc_img , enc_img . fmt - VPX_IMG_FMT_HIGHBITDEPTH , enc_img . d_w , enc_img . d_h , 16 ) ; vpx_img_truncate_16_to_8 ( & enc_img , & ref_enc . img ) ; } if ( dec_img . fmt & VPX_IMG_FMT_HIGHBITDEPTH ) { vpx_img_alloc ( & dec_img , dec_img . fmt - VPX_IMG_FMT_HIGHBITDEPTH , dec_img . d_w , dec_img . d_h , 16 ) ; vpx_img_truncate_16_to_8 ( & dec_img , & ref_dec . img ) ; } } # endif <S2SV_ModEnd> } ctx_exit_on_error ( & <S2SV_ModStart> [ 4 ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( enc_img . fmt & VPX_IMG_FMT_HIGHBITDEPTH ) { find_mismatch_high ( & enc_img , & dec_img , y , u , v ) ; } else { <S2SV_ModStart> , v ) ; } # else find_mismatch ( & enc_img , & dec_img , y , u , v ) ; # endif
<S2SV_ModStart> <S2SV_null> void usage_exit ( void <S2SV_ModStart> ) { int i ; const int num_encoder = get_vpx_encoder_count ( ) <S2SV_ModStart> ) ; # endif # if CONFIG_VP10_ENCODER fprintf ( stderr , "\\nVP10<S2SV_blank>Specific<S2SV_blank>Options:\\n" ) ; arg_show_usage ( stderr , vp10_args ) ; # endif <S2SV_ModStart> 0 ; i < num_encoder <S2SV_ModEnd> ; ++ i ) <S2SV_ModStart> ( i ) ; const char * defstr = ( i == ( num_encoder - 1 ) ) ? "(default)" : "" ; fprintf ( stderr , "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>%-6s<S2SV_blank>-<S2SV_blank>%s<S2SV_blank>%s\\n" <S2SV_ModEnd> , encoder -> name <S2SV_ModStart> vpx_codec_iface_name ( encoder -> codec_interface ( ) ) , defstr ) ; } fprintf ( stderr , "\\n<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" ) ; fprintf ( stderr , "Use<S2SV_blank>--codec<S2SV_blank>to<S2SV_blank>switch<S2SV_blank>to<S2SV_blank>a<S2SV_blank>non-default<S2SV_blank>encoder.\\n\\n" ) ; <S2SV_ModEnd> exit ( EXIT_FAILURE )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static
<S2SV_ModStart> stream_state * streami ; ( void ) global ; <S2SV_ModStart> config . cfg . g_input_bit_depth > ( unsigned int ) stream -> config . cfg . g_bit_depth ) { fatal ( "Stream<S2SV_blank>%d:<S2SV_blank>codec<S2SV_blank>bit<S2SV_blank>depth<S2SV_blank>(%d)<S2SV_blank>less<S2SV_blank>than<S2SV_blank>input<S2SV_blank>bit<S2SV_blank>depth<S2SV_blank>(%d)" , stream -> index , ( int ) stream -> config . cfg . g_bit_depth , stream -> config . cfg . g_input_bit_depth ) ; } for ( streami = stream ; streami ; streami = streami -> next ) { if ( ! streami -> config . out_fn ) fatal ( "Stream<S2SV_blank>%d:<S2SV_blank>Output<S2SV_blank>file<S2SV_blank>is<S2SV_blank>required<S2SV_blank>(specify<S2SV_blank>with<S2SV_blank>-o)" , streami -> index ) ; if ( streami != stream ) { const char * a = stream <S2SV_ModEnd> -> config . out_fn <S2SV_ModStart> -> config . out_fn ; const char * b = streami -> config . out_fn ; if ( ! strcmp ( a , b ) && strcmp ( a , "/dev/null" ) && strcmp ( a , ":nul" ) ) fatal ( "Stream<S2SV_blank>%d:<S2SV_blank>duplicate<S2SV_blank>output<S2SV_blank>file<S2SV_blank>(from<S2SV_blank>stream<S2SV_blank>%d)" , streami -> index , stream -> index ) ; } <S2SV_ModEnd> if ( streami != <S2SV_ModStart> stream -> config . stats_fn ; const char * b = streami -> config . stats_fn ; if ( a && b && ! strcmp ( a , b ) ) fatal ( "Stream<S2SV_blank>%d:<S2SV_blank>duplicate<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>(from<S2SV_blank>stream<S2SV_blank>%d)" , streami -> index , stream -> index ) ; } # if CONFIG_FP_MB_STATS <S2SV_ModEnd> if ( streami != <S2SV_ModStart> stream -> config . fpmb_stats_fn ; const char * b = streami -> config . fpmb_stats_fn ; if ( a && b && ! strcmp ( a , b ) ) fatal ( "Stream<S2SV_blank>%d:<S2SV_blank>duplicate<S2SV_blank>mb<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>(from<S2SV_blank>stream<S2SV_blank>%d)" , streami -> index , stream -> index ) ; } # endif <S2SV_ModEnd> } } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ; if ( stats -> file == NULL ) fatal ( "First-pass<S2SV_blank>stats<S2SV_blank>file<S2SV_blank>does<S2SV_blank>not<S2SV_blank>exist!" ) ; if (
<S2SV_ModStart> framerate , vpx_img_fmt_t fmt , unsigned int bit_depth <S2SV_ModStart> { const char * color ; switch ( bit_depth ) { case 8 : <S2SV_ModEnd> color = fmt == <S2SV_ModStart> "C422\\n" : "C420jpeg\\n" ; break ; case 9 : color = fmt == VPX_IMG_FMT_I44416 ? "C444p9<S2SV_blank>XYSCSS=444P9\\n" : fmt == VPX_IMG_FMT_I42216 ? "C422p9<S2SV_blank>XYSCSS=422P9\\n" : "C420p9<S2SV_blank>XYSCSS=420P9\\n" ; break ; case 10 : color = fmt == VPX_IMG_FMT_I44416 ? "C444p10<S2SV_blank>XYSCSS=444P10\\n" : fmt == VPX_IMG_FMT_I42216 ? "C422p10<S2SV_blank>XYSCSS=422P10\\n" : "C420p10<S2SV_blank>XYSCSS=420P10\\n" ; break ; case 12 : color = fmt == VPX_IMG_FMT_I44416 ? "C444p12<S2SV_blank>XYSCSS=444P12\\n" : fmt == VPX_IMG_FMT_I42216 ? "C422p12<S2SV_blank>XYSCSS=422P12\\n" : "C420p12<S2SV_blank>XYSCSS=420P12\\n" ; break ; case 14 : color = fmt == VPX_IMG_FMT_I44416 ? "C444p14<S2SV_blank>XYSCSS=444P14\\n" : fmt == VPX_IMG_FMT_I42216 ? "C422p14<S2SV_blank>XYSCSS=422P14\\n" : "C420p14<S2SV_blank>XYSCSS=420P14\\n" ; break ; case 16 : color = fmt == VPX_IMG_FMT_I44416 ? "C444p16<S2SV_blank>XYSCSS=444P16\\n" : fmt == VPX_IMG_FMT_I42216 ? "C422p16<S2SV_blank>XYSCSS=422P16\\n" : "C420p16<S2SV_blank>XYSCSS=420P16\\n" ; break ; default : color = NULL ; assert ( 0 ) ; }
<S2SV_ModStart> ) { int c_sz ; ( void ) _aux
<S2SV_ModStart> * _aux ) { ( void ) _y4m ; ( void ) _dst ; ( void ) _aux ;
<S2SV_ModStart> c_h ; int c_sz ; int bytes_per_sample = _y4m -> bit_depth > 8 ? 2 : 1 <S2SV_ModStart> bps = _y4m -> bps <S2SV_ModEnd> ; pic_sz = _y4m <S2SV_ModStart> * _y4m -> pic_h * bytes_per_sample <S2SV_ModStart> _y4m -> dst_c_dec_h ; c_w *= bytes_per_sample ; <S2SV_ModStart> _img -> stride [ VPX_PLANE_Y <S2SV_ModEnd> ] = _img -> <S2SV_ModStart> _img -> stride [ VPX_PLANE_ALPHA ] = _y4m -> pic_w * bytes_per_sample <S2SV_ModEnd> ; _img -> stride <S2SV_ModStart> _img -> stride [ VPX_PLANE_U <S2SV_ModEnd> ] = _img -> <S2SV_ModStart> _img -> stride [ VPX_PLANE_V <S2SV_ModEnd> ] = c_w ; <S2SV_ModStart> _img -> planes [ VPX_PLANE_Y <S2SV_ModEnd> ] = _y4m -> <S2SV_ModStart> _img -> planes [ VPX_PLANE_U <S2SV_ModEnd> ] = _y4m -> <S2SV_ModStart> _img -> planes [ VPX_PLANE_V <S2SV_ModEnd> ] = _y4m -> <S2SV_ModStart> _img -> planes [ VPX_PLANE_ALPHA <S2SV_ModEnd> ] = _y4m ->
<S2SV_ModStart> buffer [ 80 ] = { 0 } <S2SV_ModStart> VPX_IMG_FMT_I420 ; _y4m -> bps = 12 ; _y4m -> bit_depth = 8 ; <S2SV_ModEnd> if ( strcmp ( <S2SV_ModStart> _y4m -> chroma_type , "420p10" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> dst_c_dec_h = 2 ; _y4m -> src_c_dec_v = 2 ; _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * ( ( _y4m -> pic_h + 1 ) / 2 ) ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; _y4m -> bit_depth = 10 ; _y4m -> bps = 15 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42016 ; if ( only_420 ) { fprintf ( stderr , "Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>420p10<S2SV_blank>to<S2SV_blank>420jpeg\\n" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , "420p12" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> dst_c_dec_h = 2 ; _y4m -> src_c_dec_v = 2 ; _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * ( ( _y4m -> pic_h + 1 ) / 2 ) ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; _y4m -> bit_depth = 12 ; _y4m -> bps = 18 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42016 ; if ( only_420 ) { fprintf ( stderr , "Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>420p12<S2SV_blank>to<S2SV_blank>420jpeg\\n" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , <S2SV_ModStart> VPX_IMG_FMT_I422 ; _y4m -> bps <S2SV_ModEnd> = 16 ; _y4m <S2SV_ModStart> -> convert = y4m_convert_null ; } } else if ( strcmp ( _y4m -> chroma_type , "422p10" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> src_c_dec_v = 1 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42216 ; _y4m -> bps = 20 ; _y4m -> bit_depth = 10 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * _y4m -> pic_h ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; if ( only_420 ) { fprintf ( stderr , "Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>422p10<S2SV_blank>to<S2SV_blank>420jpeg\\n" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , "422p12" ) == 0 ) { _y4m -> src_c_dec_h = 2 ; _y4m -> src_c_dec_v = 1 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I42216 ; _y4m -> bps = 24 ; _y4m -> bit_depth = 12 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * ( _y4m -> pic_w * _y4m -> pic_h + 2 * ( ( _y4m -> pic_w + 1 ) / 2 ) * _y4m -> pic_h ) ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; if ( only_420 ) { fprintf ( stderr , "Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>422p12<S2SV_blank>to<S2SV_blank>420jpeg\\n" ) ; return - 1 <S2SV_ModStart> VPX_IMG_FMT_I444 ; _y4m -> bps <S2SV_ModEnd> = 24 ; _y4m <S2SV_ModStart> _y4m -> chroma_type , "444p10" <S2SV_ModEnd> ) == 0 ) <S2SV_ModStart> src_c_dec_v = 1 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I44416 ; _y4m -> bps = 30 ; _y4m -> bit_depth = 10 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * 3 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; <S2SV_ModStart> ( only_420 ) { <S2SV_ModEnd> fprintf ( stderr , <S2SV_ModStart> fprintf ( stderr , "Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>444p10<S2SV_blank>to<S2SV_blank>420jpeg\\n" <S2SV_ModEnd> ) ; return - <S2SV_ModStart> - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , "444p12" ) == 0 ) { _y4m -> src_c_dec_h = 1 ; _y4m -> src_c_dec_v = 1 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I44416 ; _y4m -> bps = 36 ; _y4m -> bit_depth = 12 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 2 * 3 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; if ( only_420 ) { fprintf ( stderr , "Unsupported<S2SV_blank>conversion<S2SV_blank>from<S2SV_blank>444p12<S2SV_blank>to<S2SV_blank>420jpeg\\n" ) ; return - 1 ; } } else if ( strcmp ( _y4m -> chroma_type , "444alpha" ) == 0 ) { _y4m -> src_c_dec_h = 1 ; _y4m -> src_c_dec_v = 1 ; if ( only_420 ) { _y4m -> dst_c_dec_h = 2 ; _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 3 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> convert = y4m_convert_444_420jpeg ; } else { _y4m -> vpx_fmt = VPX_IMG_FMT_444A ; _y4m -> bps = 32 ; _y4m -> dst_c_dec_h = _y4m -> src_c_dec_h ; _y4m -> dst_c_dec_v = _y4m -> src_c_dec_v ; _y4m -> dst_buf_read_sz = 4 * _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_null ; } } else if ( strcmp ( _y4m -> chroma_type , "mono" ) == 0 ) { _y4m -> src_c_dec_h = _y4m -> src_c_dec_v = 0 ; _y4m -> dst_c_dec_h = _y4m -> dst_c_dec_v = 2 ; _y4m -> dst_buf_read_sz = _y4m -> pic_w * _y4m -> pic_h ; _y4m -> aux_buf_sz = _y4m -> aux_buf_read_sz = 0 ; _y4m -> convert = y4m_convert_mono_420jpeg ; } else { fprintf ( stderr , "Unknown<S2SV_blank>chroma<S2SV_blank>sampling<S2SV_blank>type:<S2SV_blank>%s\\n" , _y4m -> chroma_type ) ; return - 1 ; } <S2SV_ModStart> -> dst_c_dec_v ) ; if ( _y4m -> bit_depth == 8 ) <S2SV_ModStart> -> dst_buf_sz ) ; else _y4m -> dst_buf <S2SV_ModEnd> = ( unsigned char <S2SV_ModStart> * ) malloc ( 2 * _y4m -> dst_buf_sz ) ; if ( _y4m -> aux_buf_sz > 0 ) _y4m -> aux_buf = ( unsigned char * ) malloc ( _y4m -> aux_buf_sz <S2SV_ModEnd> ) ; return 0
<S2SV_ModStart> num_token_partitions - 1 ) { <S2SV_ModStart> num_token_partitions - 1 ; } if ( pbi -> decoding_thread_count > pbi -> common . mb_rows - 1 ) { pbi -> decoding_thread_count = pbi -> common . mb_rows - 1 ; }
<S2SV_ModStart> ; # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi )
<S2SV_ModStart> pbi -> allocated_decoding_thread_count ; ++ i <S2SV_ModEnd> ) { sem_post ( <S2SV_ModStart> pbi -> allocated_decoding_thread_count ; ++ i <S2SV_ModEnd> ) { sem_destroy ( <S2SV_ModStart> de_thread_data = NULL ; vp8mt_de_alloc_temp_buffers ( pbi , pbi -> common . mb_rows ) ;
<S2SV_ModStart> { int i ; <S2SV_ModEnd> vpx_free ( pbi -> <S2SV_ModStart> pbi -> mt_yabove_row ) { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> { vpx_free ( pbi <S2SV_ModStart> pbi -> mt_uabove_row ) { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> { vpx_free ( pbi <S2SV_ModStart> pbi -> mt_vabove_row ) { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> { vpx_free ( pbi <S2SV_ModStart> pbi -> mt_yleft_col ) { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> { vpx_free ( pbi <S2SV_ModStart> pbi -> mt_uleft_col ) { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> { vpx_free ( pbi <S2SV_ModStart> pbi -> mt_vleft_col ) { for ( i = 0 ; i < mb_rows ; ++ i ) <S2SV_ModEnd> { vpx_free ( pbi <S2SV_ModStart> NULL ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 0 ; fail : vp9_set_mb_mi ( cm , 0 , 0 ) ;
<S2SV_ModStart> , x_e , x_f <S2SV_ModEnd> ; WORD32 n0 , <S2SV_ModStart> * x0 ++ ; y0 [ h2 ] = ixheaacd_add32_sat ( x_0 , x_2 ) ; y0 [ h2 + 1 ] = ixheaacd_add32_sat ( x_1 , x_3 ) ; y1 [ h2 ] = ixheaacd_add32_sat ( x_4 , x_6 ) ; y1 [ h2 + 1 ] = ixheaacd_add32_sat ( x_5 , x_7 ) ; y2 [ h2 ] = ixheaacd_sub32_sat ( x_0 , x_2 ) ; y2 [ h2 + 1 ] = ixheaacd_sub32_sat ( x_1 , x_3 ) ; y3 [ h2 ] = ixheaacd_sub32_sat ( x_4 , x_6 ) ; y3 [ h2 + 1 ] = ixheaacd_sub32_sat ( x_5 , x_7 ) ; x_8 = * x2 ++ ; x_9 = * x2 ++ ; x_a = * x2 ++ ; x_b = * x2 ++ ; x_c = * x2 ++ ; x_d = * x2 ++ ; x_e = * x2 ++ ; x_f = * x2 ++ ; y0 [ h2 + 2 ] = ixheaacd_add32_sat ( x_8 , x_a ) ; y0 [ h2 + 3 ] = ixheaacd_add32_sat ( x_9 , x_b ) <S2SV_ModEnd> ; y1 [ h2 <S2SV_ModStart> ; y1 [ h2 + 2 ] = ixheaacd_add32_sat ( x_c , x_e ) <S2SV_ModEnd> ; y1 [ h2 <S2SV_ModStart> y1 [ h2 + 3 ] = ixheaacd_add32_sat ( x_d , x_f ) ; y2 [ h2 + 2 ] = ixheaacd_sub32_sat ( x_8 , x_a ) ; y2 [ h2 + 3 ] = ixheaacd_sub32_sat ( x_9 , x_b ) <S2SV_ModEnd> ; y3 [ h2 <S2SV_ModStart> ; y3 [ h2 + 2 ] = ixheaacd_sub32_sat ( x_c , x_e ) <S2SV_ModEnd> ; y3 [ h2 <S2SV_ModStart> y3 [ h2 + 3 ] = ixheaacd_sub32_sat ( x_d , x_f ) <S2SV_ModEnd> ; } x0 +=
<S2SV_ModStart> h2 , fft_jmp ; WORD64 <S2SV_ModEnd> xt0_0 , yt0_0 , <S2SV_ModStart> xt2_0 , yt2_0 ; WORD64 <S2SV_ModEnd> xh0_0 , xh1_0 , <S2SV_ModStart> ] ; xh0_0 = ( WORD64 ) x_0 + ( WORD64 ) <S2SV_ModEnd> x_l1_0 ; xl0_0 = <S2SV_ModStart> x_l1_0 ; xl0_0 = ( WORD64 ) x_0 - ( WORD64 ) <S2SV_ModEnd> x_l1_0 ; xh20_0 = <S2SV_ModStart> x_l1_0 ; xh20_0 = ( WORD64 ) x_h2_0 + ( WORD64 ) <S2SV_ModEnd> x_l2_0 ; xl20_0 = <S2SV_ModStart> x_l2_0 ; xl20_0 = ( WORD64 ) x_h2_0 - ( WORD64 ) <S2SV_ModEnd> x_l2_0 ; x [ <S2SV_ModStart> [ 0 ] = ( WORD32 ) ixheaacd_add64_sat ( xh0_0 , xh20_0 ) ; xt0_0 = ( WORD64 ) xh0_0 - ( WORD64 ) <S2SV_ModEnd> xh20_0 ; x_1 = <S2SV_ModStart> ] ; xh1_0 = ( WORD64 ) x_1 + ( WORD64 ) <S2SV_ModEnd> x_l1_1 ; xl1_0 = <S2SV_ModStart> x_l1_1 ; xl1_0 = ( WORD64 ) x_1 - ( WORD64 ) <S2SV_ModEnd> x_l1_1 ; xh21_0 = <S2SV_ModStart> x_l1_1 ; xh21_0 = ( WORD64 ) x_h2_1 + ( WORD64 ) <S2SV_ModEnd> x_l2_1 ; xl21_0 = <S2SV_ModStart> x_l2_1 ; xl21_0 = ( WORD64 ) x_h2_1 - ( WORD64 ) <S2SV_ModEnd> x_l2_1 ; x [ <S2SV_ModStart> [ 1 ] = ( WORD32 ) ixheaacd_add64_sat ( xh1_0 , xh21_0 ) ; yt0_0 = ( WORD64 ) xh1_0 - ( WORD64 ) <S2SV_ModEnd> xh21_0 ; xt1_0 = <S2SV_ModStart> xh21_0 ; xt1_0 = ( WORD64 ) xl0_0 + ( WORD64 ) <S2SV_ModEnd> xl21_0 ; xt2_0 = <S2SV_ModStart> xl21_0 ; xt2_0 = ( WORD64 ) xl0_0 - ( WORD64 ) <S2SV_ModEnd> xl21_0 ; yt2_0 = <S2SV_ModStart> xl21_0 ; yt2_0 = ( WORD64 ) xl1_0 + ( WORD64 ) <S2SV_ModEnd> xl20_0 ; yt1_0 = <S2SV_ModStart> xl20_0 ; yt1_0 = ( WORD64 ) xl1_0 - ( WORD64 ) <S2SV_ModEnd> xl20_0 ; mul_11 =
<S2SV_ModStart> ++ ; timag = ixheaacd_add32_sat <S2SV_ModEnd> ( i1 , r1 <S2SV_ModStart> timag ; treal = ixheaacd_sub32_sat ( i2 , r2 ) ; treal = ( ixheaacd_shl32_sat ( treal , shift ) ) ; filter_states [ j ] = treal ; treal = ixheaacd_sub32_sat ( i1 , r1 ) ; treal = ( ixheaacd_shl32_sat ( treal , shift ) ) ; * filter_states ++ = treal ; timag = ixheaacd_add32_sat <S2SV_ModEnd> ( i2 , r2
<S2SV_ModStart> ; } if ( ptr_hbe_txposer -> <S2SV_ModStart> NULL ) ( * ( ptr_hbe_txposer -> ixheaacd_cmplx_anal_fft ) ) <S2SV_ModEnd> ( u_in , u_out
<S2SV_ModStart> synth_size ; if ( ptr_hbe_txposer -> <S2SV_ModStart> NULL ) ( * ( ptr_hbe_txposer -> ixheaacd_real_synth_fft ) ) <S2SV_ModEnd> ( synth_buf_r , synth_out
<S2SV_ModStart> * ) ixheaacd_analy_cos_sin_table_kl_8 ; ptr_hbe_txposer -> <S2SV_ModStart> = & ixheaacd_real_synth_fft_p2 ; ptr_hbe_txposer -> <S2SV_ModStart> * ) ixheaacd_analy_cos_sin_table_kl_16 ; ptr_hbe_txposer -> <S2SV_ModStart> = & ixheaacd_real_synth_fft_p2 ; ptr_hbe_txposer -> <S2SV_ModStart> * ) ixheaacd_analy_cos_sin_table_kl_24 ; ptr_hbe_txposer -> <S2SV_ModStart> = & ixheaacd_real_synth_fft_p3 ; ptr_hbe_txposer -> <S2SV_ModStart> * ) ixheaacd_analy_cos_sin_table_kl_32 ; ptr_hbe_txposer -> <S2SV_ModStart> = & ixheaacd_real_synth_fft_p2 ; ptr_hbe_txposer -> <S2SV_ModStart> * ) ixheaacd_analy_cos_sin_table_kl_8 ; ptr_hbe_txposer -> <S2SV_ModStart> = & ixheaacd_real_synth_fft_p2 ; ptr_hbe_txposer -> <S2SV_ModStart> ) ; break ; <S2SV_ModEnd> } } if ( <S2SV_ModStart> - 1 ; } }
<S2SV_ModStart> ; } else { if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( ( ctxt -> options & XML_PARSE_NOENT ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDVALID ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDLOAD ) == 0 ) && ( ( ctxt -> options & XML_PARSE_DTDATTR ) == 0 ) && ( ctxt -> replaceEntities == 0 ) && ( ctxt -> validate == 0 ) ) return ;
<S2SV_ModStart> port = port & USHRT_MAX <S2SV_ModEnd> ; * str =
<S2SV_ModStart> { ALOGE ( "b/26366256" ) ; android_errorWriteLog ( 0x534e4554 , "26366256"
<S2SV_ModStart> { ALOGE ( "b/26366256" ) ; android_errorWriteLog ( 0x534e4554 , "26366256"
<S2SV_ModStart> { ALOGE ( "b/26366256" ) ; android_errorWriteLog ( 0x534e4554 , "26366256"
<S2SV_ModStart> { ALOGE ( "b/26366256" ) ; android_errorWriteLog ( 0x534e4554 , "26366256"
<S2SV_ModStart> ( "b/26366256" ) ; android_errorWriteLog ( 0x534e4554 , "26366256" ) ;
<S2SV_ModStart> pWTIntFrame -> numSamples ; if ( numSamples <= 0 ) { ALOGE ( "b/26366256" ) ; return ; }
<S2SV_ModStart> pWTIntFrame -> numSamples ; if ( numSamples <= 0 ) { ALOGE ( "b/26366256" ) ; return ; }
<S2SV_ModStart> pWTIntFrame -> numSamples ; if ( numSamples <= 0 ) { ALOGE ( "b/26366256" ) ; return ; }
<S2SV_ModStart> pWTIntFrame -> numSamples ; if ( numSamples <= 0 ) { ALOGE ( "b/26366256" ) ; return ; }
<S2SV_ModStart> = numSamples ; } if ( pWTIntFrame -> numSamples < 0 ) { ALOGE ( "b/26366256" ) ; pWTIntFrame -> numSamples = 0 ; }
<S2SV_ModStart> ( * pStackPtr >= ( CDL_STACK_SIZE - 1 ) ) { ALOGE ( "b/34031018,<S2SV_blank>stackPtr(%d)" , * pStackPtr ) ; android_errorWriteLog ( 0x534e4554 , "34031018" ) ; return EAS_ERROR_FILE_FORMAT ; } <S2SV_ModEnd> * pStackPtr = *
<S2SV_ModStart> wvplSize ) ; } if ( dls . pDLS ) { <S2SV_ModStart> artCount = 1 ; }
<S2SV_ModStart> } } if ( dataSize < 0 ||
<S2SV_ModStart> i * samples_per_partition ; int idx = ( int ) partword [ j ] [ i ] ; if ( idx < info -> partitions && <S2SV_ModEnd> info -> stagemasks [ <S2SV_ModStart> info -> stagemasks [ idx <S2SV_ModEnd> ] & ( 1
<S2SV_ModStart> < book -> dim && i < n
<S2SV_ModStart> < book -> dim && i < n <S2SV_ModStart> < book -> dim && i < n
<S2SV_ModStart> ) goto errout ; int limit = ( info -> type == 2 ? vi -> channels : 1 ) * ci -> blocksizes [ 1 ] / 2 ; if ( info -> begin > info -> end || info -> end > limit ) { goto errout ; }
<S2SV_ModStart> map_zone * zone ; size_t tilemap_size ; <S2SV_ModStart> ] . height ; tilemap_size = <S2SV_ModEnd> x_size * y_size * <S2SV_ModStart> ( struct map_tile ) ; if ( x_size == 0 || tilemap_size / x_size / sizeof ( struct map_tile ) != y_size || ! ( tilemap = malloc ( tilemap_size
<S2SV_ModStart> > available_length ) { size_t original_length = memory_length ; <S2SV_ModStart> qp -> d_memory , original_length <S2SV_ModEnd> ) ; qp ->
<S2SV_ModStart> ; if ( q < p ) { DPRINTF ( ( "Wrapped<S2SV_blank>around<S2SV_blank>%p<S2SV_blank><<S2SV_blank>%p\\n" , q , p ) ) ; goto out ; } if ( q
<S2SV_ModStart> ) + tail ; size_t ss = sst -> sst_dirlen < h -> h_min_size_standard_stream ? CDF_SHORT_SEC_SIZE ( h ) : CDF_SEC_SIZE ( h ) ; <S2SV_ModStart> - b ) <= ss <S2SV_ModEnd> * sst -> sst_len <S2SV_ModStart> - b ) , ss <S2SV_ModEnd> * sst -> sst_len <S2SV_ModStart> sst -> sst_len , ss <S2SV_ModEnd> , sst -> sst_len
<S2SV_ModStart> = ( cdf_secid_t ) ( <S2SV_ModStart> sat_len * size ) / sizeof ( maxsector ) ) <S2SV_ModStart> } if ( sid >= maxsector ) { DPRINTF ( ( "Sector<S2SV_blank>%d<S2SV_blank>>=<S2SV_blank>%d\\n" <S2SV_ModEnd> , sid , maxsector
<S2SV_ModStart> -> c . len = 20 + level <S2SV_ModEnd> ) * sizeof (
<S2SV_ModStart> ; if ( pos + len <S2SV_ModStart> SIZE_T_FORMAT "u\\n" , pos + len
<S2SV_ModStart> size_t count , const cdf_directory_t * root_storage <S2SV_ModEnd> ) { size_t i <S2SV_ModStart> NOTMIME ( ms ) && root_storage <S2SV_ModStart> str = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd> , clsid2mime ) ;
<S2SV_ModStart> * sst , const cdf_directory_t * root_storage <S2SV_ModEnd> ) { cdf_summary_info_header_t si <S2SV_ModStart> ; break ; } if ( root_storage ) { <S2SV_ModStart> str = cdf_clsid_to_mime ( root_storage -> d_storage_uuid <S2SV_ModEnd> , clsid2desc ) ; <S2SV_ModStart> return - 2 ; } <S2SV_ModStart> info , count , root_storage <S2SV_ModEnd> ) ; free (
<S2SV_ModStart> & scn , root_storage <S2SV_ModEnd> ) ) < 0
<S2SV_ModStart> ++ ) { size_t tail = <S2SV_ModEnd> ( i << 1 <S2SV_ModStart> 1 ) + 1 ; if ( cdf_check_stream_offset ( sst , h , p , tail * sizeof ( uint32_t ) , __LINE__ ) == - 1 ) goto out ; size_t ofs = CDF_GETUINT32 ( p , tail
<S2SV_ModStart> count ) { size_t <S2SV_ModEnd> maxcount ; const cdf_summary_info_header_t <S2SV_ModStart> ssi -> si_count = CDF_TOLE4 <S2SV_ModEnd> ( si -> si_count <S2SV_ModStart> info = NULL ; if ( cdf_read_property_info ( sst , h , CDF_TOLE4 ( <S2SV_ModEnd> sd -> sd_offset ) <S2SV_ModStart> == - 1 ) <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> return - 1 ; <S2SV_ModEnd> return 0 ; }
<S2SV_ModStart> elf_phnum_max = FILE_ELF_PHNUM_MAX ; ms -> elf_notes_max = FILE_ELF_NOTES_MAX ;
<S2SV_ModStart> ; return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;
<S2SV_ModStart> ; return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : ms -> elf_notes_max = * ( const size_t * ) val ; return 0 ;
<S2SV_ModStart> , 1 ) ; if ( nelements == 0 ) { DPRINTF ( ( "CDF_VECTOR<S2SV_blank>with<S2SV_blank>nelements<S2SV_blank>==<S2SV_blank>0\\n" ) ) ; goto out ; } <S2SV_ModStart> ; j < nelements && i < sh . sh_properties ; <S2SV_ModEnd> j ++ , i
<S2SV_ModStart> * buffer ) { goffset offset = 0 ; gsize original_size = client -> auth_buffer -> len ; g_byte_array_append ( client -> auth_buffer , buffer -> data , buffer -> pos ) ; while ( TRUE ) { guint8 * line_start = client -> auth_buffer -> data + offset ; gsize remaining_data = client -> auth_buffer -> len - offset ; guint8 * line_end ; line_end = memmem ( line_start , remaining_data , AUTH_LINE_SENTINEL , strlen ( AUTH_LINE_SENTINEL ) ) ; if ( line_end ) { offset = ( line_end + strlen ( AUTH_LINE_SENTINEL ) - line_start ) ; if ( ! auth_line_is_valid ( line_start , line_end ) ) return FIND_AUTH_END_ABORT ; * line_end = 0 ; if ( auth_line_is_begin ( line_start ) ) return offset - original_size ; } else { g_byte_array_remove_range ( client -> auth_buffer , 0 , offset ) ; if ( client -> auth_buffer -> len >= 16 * 1024 ) return FIND_AUTH_END_ABORT ; return FIND_AUTH_END_CONTINUE ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> & client -> proxy ) ; g_byte_array_free ( client -> auth_buffer , TRUE
<S2SV_ModStart> ) ; client -> auth_buffer = g_byte_array_new ( ) <S2SV_ModEnd> ; client -> rewrite_reply
<S2SV_ModStart> extra_data ) ; } else if ( auth_end == FIND_AUTH_END_ABORT ) { buffer_unref ( buffer ) ; if ( client -> proxy -> log_messages ) g_print ( "Invalid<S2SV_blank>AUTH<S2SV_blank>line,<S2SV_blank>aborting\\n" ) ; side_closed ( side ) ; break ; }
<S2SV_ModStart> -> b ) { } else if ( warn_script_unsaved && fv -> script_unsaved && AskScriptChanged ( ) == 2 ) { return false ;
<S2SV_ModStart> event -> type == et_controlevent && event -> u . control . subtype == et_textchanged ) { sd -> fv -> script_unsaved = ! GTextFieldIsEmpty ( GWidgetGetControl ( sd -> gw , CID_Script ) ) ; } else if ( event -> type == et_controlevent && event -> u . control . subtype == et_save ) { sd -> fv -> script_unsaved = false ; } else if ( event -> type ==
<S2SV_ModStart> ( file ) ; GTextFieldSaved ( gt ) ;
<S2SV_ModStart> ( header_len > LEVEL_3_MAX_HEADER_LEN || header_len < RAW_DATA_LEN ( header )
<S2SV_ModStart> uint8_t * result ; if ( nbytes > LEVEL_3_MAX_HEADER_LEN ) { return NULL ; }
<S2SV_ModStart> H264SwDecMalloc ( u32 size , u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> # if defined ( <S2SV_ModStart> ; numBytes += size * num <S2SV_ModStart> return malloc ( size * num
<S2SV_ModStart> H264SwDecMalloc ( u32 size , u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( size <S2SV_ModStart> return malloc ( size * num
<S2SV_ModStart> sizeof ( u8 ) , <S2SV_ModEnd> strmLen ) ; if
<S2SV_ModStart> sizeof ( decContainer_t ) , 1
<S2SV_ModStart> H264SwDecMalloc ( u32 size , u32 num ) { if ( size > UINT32_MAX / num ) { ALOGE ( "can\'t<S2SV_blank>allocate<S2SV_blank>%u<S2SV_blank>*<S2SV_blank>%u<S2SV_blank>bytes" , size , num ) ; android_errorWriteLog ( 0x534e4554 , "27855419" ) ; return NULL ; } <S2SV_ModEnd> return malloc ( size <S2SV_ModStart> return malloc ( size * num
<S2SV_ModStart> H264SwDecMalloc ( u32 size , u32 num ) { if ( size > UINT32_MAX / num ) { return NULL ; } <S2SV_ModEnd> return malloc ( size <S2SV_ModStart> return malloc ( size * num
<S2SV_ModStart> ) H264SwDecMalloc ( size , 1
<S2SV_ModStart> ( dpbSize ) ; if ( picSizeInMbs > ( UINT32_MAX - 32 - 15 ) / 384 ) { ALOGE ( "b/28533562" ) ; android_errorWriteLog ( 0x534e4554 , "28533562" ) ; return ( MEMORY_ALLOCATION_ERROR ) ; }
<S2SV_ModStart> -> activeSpsId ] ; if ( pStorage -> activeSps -> picWidthInMbs == 0 ) { pStorage -> picSizeInMbs = 0 ; } else if ( pStorage -> activeSps -> picHeightInMbs > UINT32_MAX / pStorage -> activeSps -> picWidthInMbs ) { return ( MEMORY_ALLOCATION_ERROR ) ; } else { <S2SV_ModStart> activeSps -> picHeightInMbs ; }
<S2SV_ModStart> uuid , int32_t sessionId __unused , int32_t ioId __unused <S2SV_ModEnd> , effect_handle_t * pHandle
<S2SV_ModStart> pReplyData == NULL || replySize == NULL || <S2SV_ModStart> effect_config_t ) || pReplyData == NULL || replySize <S2SV_ModStart> ) ) || pReplyData == NULL || replySize <S2SV_ModStart> pReplyData == NULL || replySize == NULL || <S2SV_ModStart> pReplyData == NULL || replySize == NULL || <S2SV_ModStart> : if ( pReplyData == NULL || replySize
<S2SV_ModStart> ( downmix_object_t * pDownmixer __unused , bool init __unused <S2SV_ModEnd> ) { return 0
<S2SV_ModStart> * ) pCmdData ; if ( cmd -> psize != sizeof ( int32_t ) ) { android_errorWriteLog ( 0x534e4554 , "63662938" ) ; return - EINVAL ; }
<S2SV_ModStart> "add" ; if ( multiuser_get_app_id ( uid ) <S2SV_ModEnd> >= AID_APP ) {
<S2SV_ModStart> perm = "add" ; if ( uid >= AID_APP ) { return 0 ; }
<S2SV_ModStart> , value ) ; if ( ! strcmp ( key , "path" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options , data -> obj , FSCK_MSG_GITMODULES_PATH , "disallowed<S2SV_blank>submodule<S2SV_blank>path:<S2SV_blank>%s" , value ) ;
<S2SV_ModStart> * s ) { size_t len = strlen ( s ) + 1 ; <S2SV_ModStart> r = pool_alloc ( len ) ; memcpy <S2SV_ModEnd> ( r , s <S2SV_ModStart> ( r , s , len
<S2SV_ModStart> + 1 ) ; memcpy <S2SV_ModEnd> ( m , name <S2SV_ModStart> ( m , name , nlen + 1
<S2SV_ModStart> , name ) ; if ( ! strcmp ( key , "url" ) && value && looks_like_command_line_option ( value ) ) data -> ret |= report ( data -> options , data -> obj , FSCK_MSG_GITMODULES_URL , "disallowed<S2SV_blank>submodule<S2SV_blank>url:<S2SV_blank>%s" , value ) ;
<S2SV_ModStart> object * obj , const char * name <S2SV_ModEnd> , void * data
<S2SV_ModStart> object * obj , const char * name <S2SV_ModEnd> , void * data <S2SV_ModStart> * data ) { <S2SV_ModEnd> add_preferred_base_object ( name ) <S2SV_ModStart> flags |= OBJECT_ADDED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> object * obj , <S2SV_ModEnd> const char * name
<S2SV_ModStart> object * obj , const char * name <S2SV_ModEnd> , void * cb_data <S2SV_ModStart> finish_object ( obj , name <S2SV_ModEnd> , cb_data ) ; <S2SV_ModStart> stdout , obj , name <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> blob -> object ; size_t pathlen ; <S2SV_ModStart> flags |= SEEN ; pathlen = path -> len ; strbuf_addstr ( path , name ) ; <S2SV_ModStart> ( obj , path -> buf <S2SV_ModEnd> , cb_data ) ; <S2SV_ModStart> , cb_data ) ; strbuf_setlen ( path , pathlen ) ;
<S2SV_ModStart> flags |= SEEN ; strbuf_addstr ( base , name ) ; <S2SV_ModStart> ( obj , base -> buf , cb_data <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> show_object ( obj , <S2SV_ModEnd> name , data ) <S2SV_ModStart> obj , show_object , & base <S2SV_ModEnd> , path , data
<S2SV_ModStart> object * object , const char * name <S2SV_ModEnd> , void * data
<S2SV_ModStart> object * object , const char * name <S2SV_ModEnd> , void * data <S2SV_ModStart> bitmap_pos < 0 ) <S2SV_ModEnd> bitmap_pos = ext_index_add_object ( <S2SV_ModStart> , name ) ; <S2SV_ModEnd> bitmap_set ( base ,
<S2SV_ModStart> object * object , const char * name <S2SV_ModEnd> , void * data
<S2SV_ModStart> object , NULL , <S2SV_ModEnd> data ) ; }
<S2SV_ModStart> object * obj , <S2SV_ModEnd> const char * name
<S2SV_ModStart> object * obj , const char * name ) { const <S2SV_ModEnd> char * p ; <S2SV_ModStart> , out ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> l >> 2 ; if ( q + o >= e ) goto out ;
<S2SV_ModStart> cdf_secid_t id ) { size_t ss = <S2SV_ModEnd> CDF_SEC_SIZE ( h ) <S2SV_ModStart> CDF_SEC_SIZE ( h ) ; size_t pos = CDF_SEC_POS ( h , id ) ; assert ( ss <S2SV_ModStart> , ( off_t ) pos , <S2SV_ModEnd> ( ( char *
<S2SV_ModStart> cdf_secid_t id ) { size_t ss = <S2SV_ModEnd> CDF_SHORT_SEC_SIZE ( h ) <S2SV_ModStart> CDF_SHORT_SEC_SIZE ( h ) ; size_t pos = CDF_SHORT_SEC_POS ( h , id ) ; assert ( ss <S2SV_ModStart> == len ) ; if ( sst -> sst_len < ( size_t ) id ) { DPRINTF ( ( "bad<S2SV_blank>sector<S2SV_blank>id<S2SV_blank>%d<S2SV_blank>><S2SV_blank>%d\\n" , id , sst -> sst_len ) ) ; return - 1 ; } <S2SV_ModStart> -> sst_tab ) + pos <S2SV_ModEnd> , len ) ;
<S2SV_ModStart> i ++ ) { size_t ofs = CDF_GETUINT32 ( p , ( i << 1 ) + 1 ) ; <S2SV_ModStart> * ) p + ofs <S2SV_ModEnd> - 2 * sizeof <S2SV_ModStart> * sizeof ( uint32_t ) <S2SV_ModStart> "%" SIZE_T_FORMAT "u)<S2SV_blank>id=%x<S2SV_blank>type=%x<S2SV_blank>offs=0x%tx,0x%x\\n" , i , <S2SV_ModEnd> inp [ i ] <S2SV_ModStart> q - p , offs <S2SV_ModEnd> ) ) ; if
<S2SV_ModStart> { size_t ss = CDF_SHORT_SEC_SIZE <S2SV_ModEnd> ( h ) ; <S2SV_ModStart> if ( pos > CDF_SEC_SIZE ( h ) <S2SV_ModEnd> * sst -> sst_len <S2SV_ModStart> "u\\n" , pos , CDF_SEC_SIZE ( h ) <S2SV_ModEnd> * sst -> sst_len
<S2SV_ModStart> { size_t ss = CDF_SHORT_SEC_SIZE <S2SV_ModEnd> ( h ) ,
<S2SV_ModStart> , ret ) ; } if ( error == NULL ) <S2SV_ModEnd> if ( verify & <S2SV_ModStart> , verify ) ; <S2SV_ModEnd> } table = NULL
<S2SV_ModStart> ( ms ) { uint32_t nestsize = ( uint32_t <S2SV_ModEnd> ) ms -> nest_size
<S2SV_ModStart> , MOV_GPMF_TRAK_SUBTYPE ) ; if ( mp4 == 0 ) { printf ( "error:<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>MP4/MOV\\n" , argv [ 1 ] ) ; return - 1 ; } <S2SV_ModStart> , index ) ; double <S2SV_ModEnd> in = 0.0 , <S2SV_ModStart> ms ) ) { double in = 0.0 , out = 0.0 ; <S2SV_ModStart> , fourcc , GPMF_SAMPLE_RATE_PRECISE , & in , & out ) ; printf ( "%c%c%c%c<S2SV_blank>sampling<S2SV_blank>rate<S2SV_blank>=<S2SV_blank>%f<S2SV_blank>Hz<S2SV_blank>(from<S2SV_blank>%f<S2SV_blank>to<S2SV_blank>%f)\\n" <S2SV_ModEnd> , PRINTF_4CC ( fourcc <S2SV_ModStart> fourcc ) , rate , in , out
<S2SV_ModStart> the_url [ sizeof ( the_url <S2SV_ModEnd> ) - 1 ]
<S2SV_ModStart> ; i < len && j < sizeof ( szLineConv ) - 1 ; i ++ , j <S2SV_ModEnd> ++ ) { if <S2SV_ModStart> != 0x80 ) { if ( j + 1 < sizeof ( szLineConv ) - 1 ) { <S2SV_ModStart> 0xbf ; } else break ; } else <S2SV_ModStart> == 0xc0 ) { if ( j + 1 < sizeof ( szLineConv ) - 1 && i + 1 < len ) { szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; } else { break ; } <S2SV_ModEnd> } else if ( <S2SV_ModStart> == 0xe0 ) { if ( j + 2 < sizeof ( szLineConv ) - 1 && i + 2 < len ) { szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; } else { break ; } <S2SV_ModEnd> } else if ( <S2SV_ModStart> == 0xf0 ) { if ( j + 3 < sizeof ( szLineConv ) - 1 && i + 3 < len ) { szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; szLineConv [ j ] = szLine [ i ] ; i ++ ; j ++ ; } else { break ; } <S2SV_ModEnd> } else { i <S2SV_ModStart> continue ; } } if ( j < sizeof ( szLineConv ) - 1 && i < len ) szLineConv [ j ] = szLine [ i ] ; } if ( j >= sizeof ( szLineConv ) ) szLineConv [ sizeof ( szLineConv ) - 1 ] = 0 ; else <S2SV_ModEnd> szLineConv [ j ]
<S2SV_ModStart> allow_add_in_command = allow_add_in_command ; if ( strlen ( fileName ) >= sizeof <S2SV_ModEnd> ( cat_enum . szPath <S2SV_ModStart> ( cat_enum . szPath ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , fileName ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szPath <S2SV_ModStart> , "." ) ; if ( strlen ( fileName ) >= sizeof <S2SV_ModEnd> ( cat_enum . szRad1 <S2SV_ModStart> ( cat_enum . szRad1 ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , fileName ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szRad1 <S2SV_ModStart> ; } else { if ( strlen ( <S2SV_ModEnd> sep + 1 ) <S2SV_ModStart> sep + 1 ) >= sizeof <S2SV_ModEnd> ( cat_enum . szRad1 <S2SV_ModStart> ( cat_enum . szRad1 ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , ( <S2SV_ModEnd> sep + 1 ) <S2SV_ModStart> sep + 1 ) ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szRad1 , sep + 1 ) <S2SV_ModStart> ] = 0 ; } <S2SV_ModStart> strchr ( cat_enum . szRad1 , '*' ) ; if ( strlen ( sep + 1 ) >= sizeof ( cat_enum . szRad2 ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "File<S2SV_blank>name<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long.\\n" , ( sep + 1 ) ) ) ; return GF_NOT_SUPPORTED ; } strcpy ( cat_enum . szRad2 , sep + 1 ) ; sep [ 0 ] = 0 ; sep = strchr ( cat_enum . szRad2 <S2SV_ModEnd> , '%' ) ; <S2SV_ModStart> ( sep ) { if ( strlen ( sep ) >= sizeof ( cat_enum . szOpt ) ) { GF_LOG ( GF_LOG_ERROR , GF_LOG_CONTAINER , ( "Invalid<S2SV_blank>option:<S2SV_blank>%s.\\n" , sep ) ) ; return GF_NOT_SUPPORTED ; }
<S2SV_ModStart> no_mime_check ) ) { strncpy <S2SV_ModEnd> ( the_url , evt <S2SV_ModStart> -> navigate . to_url , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 <S2SV_ModEnd> ; fprintf ( stderr
<S2SV_ModStart> char * ext ; if ( strlen ( url_arg ) >= sizeof ( the_url ) ) { fprintf ( stderr , "Input<S2SV_blank>url<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long,<S2SV_blank>truncating<S2SV_blank>to<S2SV_blank>%d<S2SV_blank>chars.\\n" , url_arg , ( int ) ( sizeof ( the_url ) - 1 ) ) ; strncpy ( the_url , url_arg , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 ; } else { <S2SV_ModStart> , url_arg ) ; } <S2SV_ModStart> ( ! e ) { strncpy <S2SV_ModEnd> ( the_url , gf_dm_sess_get_cache_name <S2SV_ModStart> gf_dm_sess_get_cache_name ( sess ) , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_cfg ) - 1 ] = 0 ; } <S2SV_ModEnd> gf_dm_sess_del ( sess ) <S2SV_ModStart> ( str ) { strncpy <S2SV_ModEnd> ( the_url , "MP4Client<S2SV_blank>" <S2SV_ModStart> the_url , "MP4Client<S2SV_blank>" GPAC_FULL_VERSION , sizeof ( the_url ) - 1 ) ; the_url [ sizeof ( the_url ) - 1 ] = 0 <S2SV_ModEnd> ; gf_term_connect ( term
<S2SV_ModStart> sep - opt_string ; if ( sepIdx >= sizeof ( szSec ) ) { fprintf ( stderr , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>Section<S2SV_blank>name<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , opt_string ) ; return ; } <S2SV_ModStart> sep2 - sep ; if ( sepIdx >= sizeof ( szKey ) ) { fprintf ( stderr , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>key<S2SV_blank>name<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , opt_string ) ; return ; } <S2SV_ModStart> ] = 0 ; if ( strlen ( <S2SV_ModEnd> sep2 + 1 ) <S2SV_ModStart> sep2 + 1 ) >= sizeof ( szVal ) ) { fprintf ( stderr , "Badly<S2SV_blank>formatted<S2SV_blank>option<S2SV_blank>%s<S2SV_blank>-<S2SV_blank>value<S2SV_blank>is<S2SV_blank>too<S2SV_blank>long\\n" , opt_string ) ; return ; } strcpy ( szVal , sep2 + 1 )
<S2SV_ModStart> ext , szName [ 1024 <S2SV_ModEnd> ] , szExt [ <S2SV_ModStart> plug -> priv ; if ( strlen ( url ) >= sizeof ( szName ) ) return GF_FALSE ; <S2SV_ModStart> ext ) > 1 && strlen ( ext ) <= sizeof ( szExt )
<S2SV_ModStart> & sptr ) ; if ( i >= ( u32 ) ARRAY_LENGTH ( szLineConv ) ) return NULL ;
<S2SV_ModStart> 0 ; while ( ( i < to_read ) && <S2SV_ModStart> ] != 0 ) <S2SV_ModEnd> ) { i ++
<S2SV_ModStart> -> dref ) { GF_Box * dref ; <S2SV_ModStart> , ( "[iso<S2SV_blank>file]<S2SV_blank>Missing<S2SV_blank>dref<S2SV_blank>box<S2SV_blank>in<S2SV_blank>dinf\\n" ) ) ; dref = gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF <S2SV_ModStart> ( GF_DataReferenceBox * ) dref ; gf_isom_box_add_for_dump_mode ( s , dref <S2SV_ModEnd> ) ; } return
<S2SV_ModStart> ctx -> rounds , dec_tables . T <S2SV_ModEnd> ) ; # elif <S2SV_ModStart> ctx -> rounds , dec_tables . T <S2SV_ModEnd> ) ; # else
<S2SV_ModStart> ctx -> rounds , enc_tables . T <S2SV_ModEnd> ) ; # elif <S2SV_ModStart> ctx -> rounds , enc_tables . T <S2SV_ModEnd> ) ; # else
<S2SV_ModStart> ( void ) { dec_tables . counter_head ++ ; dec_tables . counter_tail ++ ;
<S2SV_ModStart> ( void ) { enc_tables . counter_head ++ ; enc_tables . counter_tail ++ ; <S2SV_ModStart> const void * ) & enc_tables , sizeof ( enc_tables <S2SV_ModEnd> ) ) ; }
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> i = 0 ; len - i >= 8 * 32 <S2SV_ModEnd> ; i += 8 <S2SV_ModStart> 32 ] ; } for ( ; i < len ; i += 32 ) { ( void ) tab [ i ] ; }
<S2SV_ModStart> ) { vpn_packet_t outpkt ; if ( len > sizeof outpkt . data ) return
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> close_connection ( h2o_http2_conn_t * <S2SV_ModStart> ( conn ) ; return - 1 ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( conn ) ; if ( <S2SV_ModStart> parse_input ( conn ) != 0 ) return
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> parse_input ( h2o_http2_conn_t * <S2SV_ModStart> } ) ; } return <S2SV_ModStart> close_connection ( conn ) <S2SV_ModEnd> ; } h2o_buffer_consume ( <S2SV_ModStart> on_read ) ; return 0 <S2SV_ModStart> -> sock ) ; return 0 ;
<S2SV_ModStart> == MT_CPTYPE_PASSSALT ) { if ( cpkt . length != 16 ) { fprintf ( stderr , _ ( "Invalid<S2SV_blank>salt<S2SV_blank>length:<S2SV_blank>%d<S2SV_blank>(instead<S2SV_blank>of<S2SV_blank>16)<S2SV_blank>received<S2SV_blank>from<S2SV_blank>server<S2SV_blank>%s\\n" ) , cpkt . length , ether_ntoa ( ( struct ether_addr * ) dstmac ) ) ; } <S2SV_ModStart> cpkt . data , 16 <S2SV_ModEnd> ) ; send_auth (
<S2SV_ModStart> ] ; int plen , act_pass_len <S2SV_ModStart> ) ; # endif act_pass_len = strnlen ( password , 82 ) ; <S2SV_ModStart> ] = 0 ; memcpy <S2SV_ModEnd> ( md5data + 1 <S2SV_ModStart> 1 , password , act_pass_len ) <S2SV_ModEnd> ; memcpy ( md5data <S2SV_ModStart> md5data + 1 + act_pass_len <S2SV_ModEnd> , pass_salt , 16 <S2SV_ModStart> * ) md5data , 1 + act_pass_len + 16 <S2SV_ModEnd> ) ; md5_finish (
<S2SV_ModStart> . cptype == MT_CPTYPE_PASSWORD && cpkt . length == 17 <S2SV_ModStart> LOG_WARNING , _ ( "(%d)<S2SV_blank>Unhandeled<S2SV_blank>control<S2SV_blank>packet<S2SV_blank>type:<S2SV_blank>%d,<S2SV_blank>length:<S2SV_blank>%d" <S2SV_ModEnd> ) , curconn -> <S2SV_ModStart> , cpkt . cptype , cpkt . length
<S2SV_ModStart> char * slavename ; int act_pass_len ; <S2SV_ModStart> ; } # endif act_pass_len = strlen ( user -> password ) ; act_pass_len = act_pass_len <= 82 ? act_pass_len : 82 ; <S2SV_ModStart> ] = 0 ; memcpy <S2SV_ModEnd> ( md5data + 1 <S2SV_ModStart> user -> password , act_pass_len <S2SV_ModEnd> ) ; memcpy ( <S2SV_ModStart> md5data + 1 + act_pass_len <S2SV_ModEnd> , curconn -> pass_salt <S2SV_ModStart> * ) md5data , 1 + act_pass_len + 16 <S2SV_ModEnd> ) ; md5_finish (
<S2SV_ModStart> ) ; if ( act_size > MT_PACKET_LEN - packet -> size <S2SV_ModEnd> ) { fprintf (
<S2SV_ModStart> ) { if ( length > MT_PACKET_LEN - packet -> size <S2SV_ModEnd> ) { fprintf (
<S2SV_ModStart> data_len ; if ( data_len > MT_PACKET_LEN - 4 - packet -> size <S2SV_ModEnd> ) { fprintf (
<S2SV_ModStart> sizeof ( uint16_t ) ) || ( ( effect_param_t * ) pCmdData ) -> psize > * replySize - sizeof ( effect_param_t
<S2SV_ModStart> < ( int ) sizeof ( effect_param_t ) || ( ( effect_param_t * ) pCmdData ) -> psize > * replySize -
<S2SV_ModStart> ; if ( param2 < 0 || param2 <S2SV_ModStart> = - EINVAL ; if ( param2 < 0 ) { android_errorWriteLog ( 0x534e4554 , "32438598" ) ; ALOGW ( "\\tERROR<S2SV_blank>EQ_PARAM_BAND_LEVEL<S2SV_blank>band<S2SV_blank>%d" , param2 ) ; } <S2SV_ModStart> param_tmp ; if ( param2 < 0 || <S2SV_ModStart> = - EINVAL ; if ( param2 < 0 ) { android_errorWriteLog ( 0x534e4554 , "32436341" ) ; ALOGW ( "\\tERROR<S2SV_blank>EQ_PARAM_CENTER_FREQ<S2SV_blank>band<S2SV_blank>%d" , param2 ) ; } <S2SV_ModStart> param_tmp ; if ( param2 < 0 || <S2SV_ModStart> = - EINVAL ; if ( param2 < 0 ) { android_errorWriteLog ( 0x534e4554 , "32247948" ) ; ALOGW ( "\\tERROR<S2SV_blank>EQ_PARAM_BAND_FREQ_RANGE<S2SV_blank>band<S2SV_blank>%d" , param2 ) ; }
<S2SV_ModStart> int status = - EINVAL <S2SV_ModEnd> ; bool recompute_flag = <S2SV_ModStart> active_stream_count = 0 ; uint32_t session_id ; uint32_t stream_type ; effect_uuid_t uuid ; <S2SV_ModStart> , handle ) ; if ( recv_contex == NULL ) { return status ; } <S2SV_ModStart> ( & vol_listner_init_lock ) ; session_id = recv_contex -> session_id ; stream_type = recv_contex -> stream_type ; uuid = recv_contex -> desc -> uuid <S2SV_ModStart> uuid ) , & uuid <S2SV_ModEnd> , sizeof ( effect_uuid_t <S2SV_ModStart> context -> session_id == <S2SV_ModEnd> session_id ) && ( <S2SV_ModStart> context -> stream_type == <S2SV_ModEnd> stream_type ) ) { <S2SV_ModStart> ) ; list_remove ( node <S2SV_ModEnd> ) ; PRINT_STREAM_TYPE ( <S2SV_ModStart> ( "something<S2SV_blank>wrong<S2SV_blank>...<S2SV_blank><<<---<S2SV_blank>Found<S2SV_blank>NOTHING<S2SV_blank>to<S2SV_blank>remove<S2SV_blank>...<S2SV_blank>????<S2SV_blank>--->>>>>" ) ; pthread_mutex_unlock ( & vol_listner_init_lock ) ; return status ;
<S2SV_ModStart> r -> server_princ , r -> client_princ ? & r -> client_princ -> name : NULL , r -> client_princ ? & r -> client_princ -> realm : NULL <S2SV_ModEnd> , NULL , NULL
<S2SV_ModStart> kvno ; krb5_data rspac ; const char * tgt_realm = krb5_principal_get_realm ( context , krbtgt -> entry . principal ) <S2SV_ModStart> client , cp , tgt_realm ,
<S2SV_ModStart> client , krb5_principal client_principal , const char * tgt_realm <S2SV_ModStart> . principal ) , tgt_realm <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ) { if ( 3 == <S2SV_ModStart> o_column_count , o_element_count ) && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> { * o_column_idx =
<S2SV_ModStart> ) { if ( 3 == <S2SV_ModStart> o_column_count , o_element_count ) && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> { * o_column_idx =
<S2SV_ModStart> ) { if ( 3 == <S2SV_ModStart> o_column_count , o_element_count ) && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> { * o_row_idx = <S2SV_ModStart> ; return ; } LIBXSMM_ASSERT ( 0 != l_row && 0 != l_column ) ;
<S2SV_ModStart> ) { if ( 3 == <S2SV_ModStart> o_column_count , o_element_count ) && 0 != * o_row_count && 0 != * o_column_count && 0 != * o_element_count ) <S2SV_ModEnd> { * o_column_idx = <S2SV_ModStart> ; return ; } LIBXSMM_ASSERT ( 0 != l_row && 0 != l_column ) ;
<S2SV_ModStart> [ 0 ] ; <S2SV_ModEnd> j = x * <S2SV_ModStart> size + b ; if ( j >= 0 && j < elements * size ) { <S2SV_ModStart> [ 0 ] ; <S2SV_ModEnd> j = ( ( <S2SV_ModStart> ) + b ; if ( j >= 0 && j < elements * size ) { <S2SV_ModStart> [ 0 ] ; <S2SV_ModEnd> j = ( x <S2SV_ModStart> size + b ; if ( j >= 0 && j < elements * size ) {
<S2SV_ModStart> * sr ) { <S2SV_ModEnd> uint16_t StructSize ; uint16_t <S2SV_ModStart> SDRC_SUCCESS ) ; } smb_ofile_flush ( sr , sr -> fid_ofile <S2SV_ModEnd> ) ; ( void
<S2SV_ModStart> SDRC_ERROR ) ; } smb_ofile_flush <S2SV_ModEnd> ( sr , sr <S2SV_ModStart> -> f_mutex ) ; smb_ofile_flush <S2SV_ModEnd> ( sr , file
<S2SV_ModStart> 1 , '/' ) ; if ( ptr == NULL ) return ( ENOENT ) ; ptr ++ <S2SV_ModEnd> ; rw_exit ( &
<S2SV_ModStart> ; } dt -> proto = IP_GET_IPPROTO ( p ) ; dt ->
<S2SV_ModStart> ; long len ; qboolean isLocalConfig ; <S2SV_ModStart> , "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; isLocalConfig = ! strcmp ( filename , "autoexec.cfg" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> -> next ) { if ( isLocalConfig && search -> pack ) continue ;
<S2SV_ModStart> void * dllhandle ; if ( COM_CompareExtension ( name , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , name ) ; return NULL ; }
<S2SV_ModStart> , ".txt" ) ; if ( ! COM_CompareExtension ( filename , ".txt" ) ) { Com_Printf ( "Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".txt\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n" ) ; return ; }
<S2SV_ModStart> { Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! COM_CompareExtension ( filename , ".cfg" ) ) { Com_Printf ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> , ch , seq , size << 3
<S2SV_ModStart> , int * offset , int maxoffset <S2SV_ModStart> == INTERNAL_NODE ) { if ( bloc >= maxoffset ) { * ch = 0 ; * offset = maxoffset + 1 ; return ; }
<S2SV_ModStart> , int * offset , int maxoffset <S2SV_ModStart> , NULL , fout , maxoffset
<S2SV_ModStart> , byte * fout , int maxoffset <S2SV_ModStart> , NYT , fout , maxoffset <S2SV_ModStart> , NULL , fout , maxoffset
<S2SV_ModStart> , byte * fout , int maxoffset <S2SV_ModStart> , node , fout , maxoffset <S2SV_ModStart> ( child ) { if ( bloc >= maxoffset ) { bloc = maxoffset + 1 ; return ; }
<S2SV_ModStart> i , nbits ; if ( msg -> readcount > msg -> cursize ) { return 0 ; } <S2SV_ModStart> -> oob ) { if ( msg -> readcount + ( bits >> 3 ) > msg -> cursize ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> bits & 7 ; if ( msg -> bit + nbits > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; } <S2SV_ModStart> & msg -> bit , msg -> cursize << 3 <S2SV_ModStart> nbits ) ) ; if ( msg -> bit > msg -> cursize << 3 ) { msg -> readcount = msg -> cursize + 1 ; return 0 ; }
<S2SV_ModStart> if ( msg -> overflowed ) { <S2SV_ModEnd> return ; } if <S2SV_ModStart> ) { if ( msg -> cursize + ( bits >> 3 ) > msg -> maxsize ) { msg -> overflowed = qtrue ; return ; } if ( <S2SV_ModStart> bits & 7 ; if ( msg -> bit + nbits > msg -> maxsize << 3 ) { msg -> overflowed = qtrue ; return ; } <S2SV_ModStart> & msg -> bit , msg -> maxsize << 3 <S2SV_ModStart> >> 8 ) ; if ( msg -> bit > msg -> maxsize << 3 ) { msg -> overflowed = qtrue ; return ; }
<S2SV_ModStart> , CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> | CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , s_alDriver -> string ) ; return qfalse ; }
<S2SV_ModStart> , ".txt" ) ; if ( ! COM_CompareExtension ( filename , ".txt" ) ) { Com_Printf ( "Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".txt\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n" ) ; return ; }
<S2SV_ModStart> { Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! COM_CompareExtension ( filename , ".cfg" ) ) { Com_Printf ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> , ".txt" ) ; if ( ! COM_CompareExtension ( filename , ".txt" ) ) { Com_Printf ( "Con_Dump_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".txt\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n" ) ; return ; }
<S2SV_ModStart> { Com_Printf ( "Usage:<S2SV_blank>writeconfig<S2SV_blank><filename>\\n" ) ; return ; } if ( ! COM_CompareExtension ( filename , ".cfg" ) ) { Com_Printf ( "Com_WriteConfig_f:<S2SV_blank>Only<S2SV_blank>the<S2SV_blank>\\".cfg\\"<S2SV_blank>extension<S2SV_blank>is<S2SV_blank>supported<S2SV_blank>by<S2SV_blank>this<S2SV_blank>command!\\n"
<S2SV_ModStart> , CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> | CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , s_alDriver -> string ) ; return qfalse ; }
<S2SV_ModStart> , CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> | CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , s_alDriver -> string ) ; return qfalse ; }
<S2SV_ModStart> ; long len ; qboolean isLocalConfig ; <S2SV_ModStart> , "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; isLocalConfig = ! strcmp ( filename , "autoexec.cfg" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> -> next ) { if ( isLocalConfig && search -> pack ) continue ;
<S2SV_ModStart> void * dllhandle ; if ( COM_CompareExtension ( name , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , name ) ; return NULL ; }
<S2SV_ModStart> ; long len ; qboolean isLocalConfig ; <S2SV_ModStart> , "Filesystem<S2SV_blank>call<S2SV_blank>made<S2SV_blank>without<S2SV_blank>initialization" ) ; isLocalConfig = ! strcmp ( filename , "autoexec.cfg" ) || ! strcmp ( filename , Q3CONFIG_CFG ) ; <S2SV_ModStart> -> next ) { if ( isLocalConfig && search -> pack ) continue ;
<S2SV_ModStart> void * dllhandle ; if ( COM_CompareExtension ( name , ".pk3" ) ) { Com_Printf ( "Rejecting<S2SV_blank>DLL<S2SV_blank>named<S2SV_blank>\\"%s\\"" , name ) ; return NULL ; }
<S2SV_ModStart> localtime ( & t ) ; if ( tm == NULL ) return g_strdup ( "???"
<S2SV_ModStart> { NICK_REC * list , * newlist <S2SV_ModStart> ( list == nick ) { newlist = nick -> next ; } else { newlist = list ; <S2SV_ModEnd> while ( list -> <S2SV_ModStart> -> next ; } g_hash_table_remove ( channel -> nicks , nick -> nick ) ; if ( newlist != NULL ) { g_hash_table_insert ( channel -> nicks , newlist -> nick , newlist ) ; }
<S2SV_ModStart> ) ; signal_remove ( "server<S2SV_blank>disconnected" , ( SIGNAL_FUNC ) sig_server_disconnected ) ; signal_remove (
<S2SV_ModStart> ) read_settings ) ; signal_add ( "server<S2SV_blank>disconnected" , ( SIGNAL_FUNC ) sig_server_disconnected ) ;
<S2SV_ModStart> -> alternate_nick ) ; g_free_not_null ( ircconn -> sasl_username ) ; g_free_not_null ( ircconn -> sasl_password ) ;
<S2SV_ModStart> rec -> sasl_username = g_strdup ( src -> sasl_username ) <S2SV_ModEnd> ; rec -> sasl_password <S2SV_ModStart> rec -> sasl_password = g_strdup ( src -> sasl_password ) <S2SV_ModEnd> ; * dest =
<S2SV_ModStart> conn -> sasl_username = g_strdup ( ircnet -> sasl_username ) ; conn -> sasl_password = g_strdup ( ircnet -> sasl_password ) <S2SV_ModEnd> ; } else g_warning
<S2SV_ModStart> = VIPS_FOREIGN_LOAD_GET_CLASS ( load ) ; if ( load -> error ) return ( NULL <S2SV_ModStart> load -> real ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load -> <S2SV_ModStart> , out ) ) { vips_operation_invalidate ( VIPS_OPERATION ( load ) ) ; load -> error = TRUE ; return ( NULL ) ; } <S2SV_ModEnd> vips_image_pipelinev ( load ->
<S2SV_ModStart> == NULL ) { flush_cmd ( ) ;
<S2SV_ModStart> seen_r = 0 ; <S2SV_ModEnd> if ( scanned >
<S2SV_ModStart> ) return false ; if ( ndp_msg_type_info ( msg_type ) -> addrto_validate ) return ndp_msg_type_info ( msg_type ) -> addrto_validate ( & msg -> addrto ) ; else
<S2SV_ModStart> , uint32_t * ifindex , int * hoplimit <S2SV_ModStart> unsigned char cbuf [ 2 * <S2SV_ModStart> ( cmsghdr -> cmsg_level != IPPROTO_IPV6 ) continue ; switch ( cmsghdr -> cmsg_type ) { case IPV6_PKTINFO : if ( <S2SV_ModEnd> cmsghdr -> cmsg_len == <S2SV_ModStart> -> ipi6_ifindex ; } break ; case IPV6_HOPLIMIT : if ( cmsghdr -> cmsg_len == CMSG_LEN ( sizeof ( int ) ) ) { int * val ; val = ( int * ) CMSG_DATA ( cmsghdr ) ; * hoplimit = * val ; } break ; }
<S2SV_ModStart> ( ndp , "Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_MULTICAST_HOPS." ) ; err = - errno ; goto close_sock ; } val = 1 ; ret = setsockopt ( sock , IPPROTO_IPV6 , IPV6_RECVHOPLIMIT , & val , sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp , "Failed<S2SV_blank>to<S2SV_blank>setsockopt<S2SV_blank>IPV6_RECVHOPLIMIT,."
<S2SV_ModStart> & msg -> ifindex , & msg -> hoplimit <S2SV_ModStart> dbg ( ndp , "rcvd<S2SV_blank>from:<S2SV_blank>%s,<S2SV_blank>ifindex:<S2SV_blank>%u,<S2SV_blank>hoplimit:<S2SV_blank>%d" <S2SV_ModEnd> , str_in6_addr ( & <S2SV_ModStart> , msg -> ifindex , msg -> hoplimit ) ; if ( msg -> hoplimit != 255 ) { warn ( ndp , "ignoring<S2SV_blank>packet<S2SV_blank>with<S2SV_blank>bad<S2SV_blank>hop<S2SV_blank>limit<S2SV_blank>(%d)" , msg -> hoplimit ) ; err = 0 ; goto free_msg ; } <S2SV_ModEnd> if ( len <
<S2SV_ModStart> err = json_tokener_success ; if ( ( len < - 1 ) || ( len == - 1 && strlen ( str ) > INT32_MAX ) ) { tok -> err = json_tokener_error_size ; return NULL ; }
<S2SV_ModStart> ( x & ( 1U << ( unsigned int ) <S2SV_ModEnd> i ) ) return
<S2SV_ModStart> ( x & ( 1U << ( unsigned int ) <S2SV_ModEnd> i ) ) return
<S2SV_ModStart> , "Compression<S2SV_blank>type<S2SV_blank>incompatible<S2SV_blank>with<S2SV_blank>image<S2SV_blank>type" ) ; goto done ; <S2SV_ModStart> ctx , "Compression<S2SV_blank>not<S2SV_blank>allowed<S2SV_blank>with<S2SV_blank>top-down<S2SV_blank>images" ) ; goto done
<S2SV_ModStart> 6 ] ) ; if ( rctx -> image_width < 1 || rctx -> image_height < 1 ) { iw_set_error ( rctx -> ctx , "Invalid<S2SV_blank>image<S2SV_blank>dimensions" ) ; goto done ; }
<S2SV_ModStart> ( ')' ) ) { r = ONIGERR_INVALID_GROUP_NAME ; onig_scan_env_set_error_string ( env , r , p - 1 , p + 1 ) ; return r ; } <S2SV_ModEnd> PINC ; name_end =
<S2SV_ModStart> += svbranch . len + 1
<S2SV_ModStart> ( j ) ; if ( len < j + msg -> len + 1 ) { LM_ERR ( "not<S2SV_blank>enough<S2SV_blank>space<S2SV_blank>to<S2SV_blank>encode<S2SV_blank>sip<S2SV_blank>message\\n" ) ; return - 1 ; }
<S2SV_ModStart> == \'"\' ) { char * p = end = <S2SV_ModEnd> * value + 1 <S2SV_ModStart> * value + 1 ; while ( * p ) { if ( * p == '\\\\' ) { p ++ ; * end = * p ; } else { * end = * p ; if ( * p == \'"\' ) break ; } p ++ ; end ++ ; } if ( * end != \'"\' <S2SV_ModEnd> ) { DBG ( <S2SV_ModStart> = '\\0' ; end = ++ p <S2SV_ModEnd> ; } else {
<S2SV_ModStart> , bit_tags ) ; fputc ( '<S2SV_blank>' , file ) ; fputs ( <S2SV_ModEnd> tag -> bit_name , <S2SV_ModStart> tag -> bit_name , file ) ; fputc ( '=' , file ) ; save_quoted ( tag -> bit_val , file <S2SV_ModEnd> ) ; } fprintf
<S2SV_ModStart> value , valsz , "<S2SV_blank>\\\\\\"\'$`<>" <S2SV_ModEnd> ) ; fputs ( <S2SV_ModStart> value , valsz , "\\"\\\\" ) ; fputs ( "\\"" <S2SV_ModEnd> , stdout ) ;
<S2SV_ModStart> * * tmpname , const char * dir , const char * prefix <S2SV_ModEnd> ) { char * <S2SV_ModStart> char * localtmp ; const <S2SV_ModStart> fd , rc ; tmpenv = dir ? dir : <S2SV_ModEnd> getenv ( "TMPDIR" ) <S2SV_ModStart> ) ; if ( ! tmpenv ) tmpenv = _PATH_TMP ; <S2SV_ModEnd> rc = asprintf ( <S2SV_ModStart> "%s/%s.XXXXXX" , tmpenv , prefix <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ( ctl -> pw , ".chfn"
<S2SV_ModStart> ( setpwnam ( pw , ".chsh"
<S2SV_ModStart> struct passwd * pwd , const char * prefix <S2SV_ModStart> tmpname = NULL ; <S2SV_ModEnd> pw_init ( ) ; <S2SV_ModStart> ( & tmpname , "/etc" , prefix <S2SV_ModEnd> ) ) == NULL
<S2SV_ModStart> tmpname = NULL ; <S2SV_ModEnd> if ( ( fd <S2SV_ModStart> ( & tmpname , "/etc" , ".vipw" <S2SV_ModEnd> ) ) == NULL
<S2SV_ModStart> ( status ) ; child = ( pid_t ) - 1 ; <S2SV_ModStart> ; if ( caught_signal && child != ( pid_t ) - 1 <S2SV_ModStart> ( caught_signal ) { if ( child != ( pid_t ) - 1 ) { <S2SV_ModStart> "<S2SV_blank>...killed.\\n" ) ) ; }
<S2SV_ModStart> , file ) ; int num = snprintf ( outfilename , sizeof ( outfilename ) , <S2SV_ModEnd> "%s_%05d.j2k" , argv [ <S2SV_ModStart> , snum ) ; if ( num >= sizeof ( outfilename ) ) { fprintf ( stderr , "maximum<S2SV_blank>length<S2SV_blank>of<S2SV_blank>output<S2SV_blank>prefix<S2SV_blank>exceeded\\n" ) ; return 1 ; }
<S2SV_ModStart> ) goto not_found ; if ( e - p > HOST_NAME_MAX - 1 ) goto not_found ;
<S2SV_ModStart> || e == p ) goto not_found ; if ( e - p > HOST_NAME_MAX - 1
<S2SV_ModStart> -> target_enc ) { return ONIGERR_NOT_SUPPORTED_ENCODING_COMBINATION <S2SV_ModEnd> ; } else {
<S2SV_ModStart> ( code == gcode && wordlist [ key ] . index >= 0
<S2SV_ModStart> r ; } } if ( * state != CCS_START )
<S2SV_ModStart> , len , group <S2SV_ModEnd> ; Node * qn <S2SV_ModStart> Node * * tp ; unsigned int parse_depth ; group = 0 <S2SV_ModStart> term ) goto end_of_token ; parse_depth = env -> parse_depth <S2SV_ModStart> ) return ONIGERR_TARGET_OF_REPEAT_OPERATOR_INVALID ; parse_depth ++ ; if ( parse_depth > ParseDepthLimit ) return ONIGERR_PARSE_DEPTH_LIMIT_OVER ;
<S2SV_ModStart> ( OP_EXACT1 ) ; <S2SV_ModEnd> DATA_ENSURE ( 1 ) <S2SV_ModStart> p ++ ; s <S2SV_ModEnd> ++ ; MOP_OUT ;
<S2SV_ModStart> reg -> dmin ; if ( q >= end ) return 0 ;
<S2SV_ModStart> == CCV_SB ) { if ( * vs > 0xff ) return ONIGERR_INVALID_CODE_POINT_VALUE ;
<S2SV_ModStart> != ONIG_INFINITE_DISTANCE ) { if ( p - str < reg -> dmax ) { * low = ( UChar * ) str ; if ( low_prev ) * low_prev = onigenc_get_prev_char_head ( reg -> enc , str , * low ) ; } else { <S2SV_ModStart> * low ) ; }
<S2SV_ModStart> cond_len , then_len , else_len , <S2SV_ModStart> + then_len + SIZE_OP_ATOMIC_END + <S2SV_ModEnd> SIZE_OP_JUMP ; r = <S2SV_ModStart> Else ) ) { <S2SV_ModEnd> else_len = compile_length_tree ( <S2SV_ModStart> Else , reg ) ; if ( else_len < 0 ) return else_len ; } else else_len = 0 <S2SV_ModStart> jump . addr = SIZE_OP_ATOMIC_END + <S2SV_ModStart> SIZE_INC_OP ; r = add_op ( reg , OP_ATOMIC_END ) ; if ( r != 0 ) return r ; if ( IS_NOT_NULL ( Else ) ) { r =
<S2SV_ModStart> += tlen ; } len += SIZE_OP_JUMP + SIZE_OP_ATOMIC_END ; <S2SV_ModStart> Else ) ) { <S2SV_ModEnd> tlen = compile_length_tree (
<S2SV_ModStart> ( num < 0 || num >= 256
<S2SV_ModStart> ( num < 0 || num >= 256
<S2SV_ModStart> * val ) { int temp_size = 500 ; char * temp = malloc ( temp_size ) <S2SV_ModEnd> ; int i = <S2SV_ModStart> ; ; ) { if ( i >= temp_size ) { temp_size *= 2 ; temp = realloc ( temp , temp_size ) ; }
<S2SV_ModStart> bits & 0x1F ; if ( ld -> buffer_size < words * 4 ) ld -> bytes_left = 0 ; else
<S2SV_ModStart> == 1 ) { if ( i >= MAX_CHANNELS - num_excl_chan - 7 ) return n ;
<S2SV_ModStart> gfi = 0 ; last_name = 0 ;
<S2SV_ModStart> while ( isspace ( ( unsigned char )
<S2SV_ModStart> p , * q <S2SV_ModEnd> ; Clp_Parser * clp <S2SV_ModStart> ) ; printf ( "Copyright<S2SV_blank>(C)<S2SV_blank>1992-2010<S2SV_blank>I.<S2SV_blank>Lee<S2SV_blank>Hetherington,<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n" <S2SV_ModEnd> ) ; exit ( <S2SV_ModStart> 0 && isspace ( ( unsigned char ) <S2SV_ModStart> 18 ; isspace ( ( unsigned char ) <S2SV_ModStart> == 0 ) { set_lenIV ( line <S2SV_ModEnd> ) ; } else <S2SV_ModStart> , "string<S2SV_blank>currentfile" ) ) ) { set_cs_start ( line ) <S2SV_ModEnd> ; } } if <S2SV_ModStart> ) && isdigit ( ( unsigned char ) <S2SV_ModStart> ) && isdigit ( ( unsigned char ) <S2SV_ModStart> p ; isspace ( ( unsigned char )
<S2SV_ModStart> 0 && isspace ( ( unsigned char ) <S2SV_ModStart> 18 ; isspace ( ( unsigned char ) <S2SV_ModStart> last && isspace ( ( unsigned char ) <S2SV_ModStart> 4 && isxdigit ( ( unsigned char ) <S2SV_ModStart> ) && isxdigit ( ( unsigned char ) <S2SV_ModStart> ) && isxdigit ( ( unsigned char ) <S2SV_ModStart> ) && isxdigit ( ( unsigned char )
<S2SV_ModStart> if ( isspace ( ( unsigned char )
<S2SV_ModStart> ) ; printf ( "Copyright<S2SV_blank>(C)<S2SV_blank>2000-2010<S2SV_blank>Eddie<S2SV_blank>Kohler<S2SV_blank>et<S2SV_blank>al.\\n\\\nThis<S2SV_blank>is<S2SV_blank>free<S2SV_blank>software;<S2SV_blank>see<S2SV_blank>the<S2SV_blank>source<S2SV_blank>for<S2SV_blank>copying<S2SV_blank>conditions.\\n\\\nThere<S2SV_blank>is<S2SV_blank>NO<S2SV_blank>warranty,<S2SV_blank>not<S2SV_blank>even<S2SV_blank>for<S2SV_blank>merchantability<S2SV_blank>or<S2SV_blank>fitness<S2SV_blank>for<S2SV_blank>a\\n\\\nparticular<S2SV_blank>purpose.\\n" <S2SV_ModEnd> ) ; exit ( <S2SV_ModStart> if ( isupper ( ( unsigned char ) <S2SV_ModStart> ) || isdigit ( ( unsigned char ) <S2SV_ModStart> if ( islower ( ( unsigned char )
<S2SV_ModStart> 9 ; isspace ( ( unsigned char ) <S2SV_ModStart> && ! isspace ( ( unsigned char )
<S2SV_ModStart> job_data_size_limit ) { return skip ( c , body_size + 2 <S2SV_ModEnd> , MSG_JOB_TOO_BIG ) ;
<S2SV_ModStart> ; krb5_key_data * key_data = NULL ; if ( n_key_data < <S2SV_ModEnd> 0 ) return NULL <S2SV_ModStart> ) ; if ( key_data <S2SV_ModEnd> == NULL ) goto <S2SV_ModStart> i = 0 ; ret [ i ] != NULL <S2SV_ModEnd> ; i ++ ) <S2SV_ModStart> ; i ++ ) <S2SV_ModEnd> free ( ret [
<S2SV_ModStart> ) ; if ( bersecretkey == NULL ) { st = ENOMEM ; goto cleanup ; } if ( bersecretkey [ 0 ] != NULL || ! create_standalone_prinicipal ) { <S2SV_ModEnd> st = krb5_add_ber_mem_ldap_mod ( <S2SV_ModStart> LDAP_MOD_BVALUES , bersecretkey ) ; if ( st != 0 ) goto cleanup ; } <S2SV_ModEnd> if ( ! (
<S2SV_ModStart> & arg_val ) ; arg = ( arg != NULL ) ? arg : "" ;
<S2SV_ModStart> ; if ( retval || pname_data . length == 0 || pname_data . data [ pname_data . length - 1 ] != '\\0'
<S2SV_ModStart> ; krb5_data null_server ; krb5_data d ; <S2SV_ModStart> ( retval ) ; d = make_data ( ( char * ) sendauth_version , strlen ( sendauth_version ) + 1 ) ; if ( ! data_eq ( inbuf , d <S2SV_ModEnd> ) ) { problem <S2SV_ModStart> ; if ( appl_version != NULL && ! problem ) { d = make_data ( appl_version , strlen ( appl_version ) + 1 ) ; if ( ! data_eq ( inbuf , d ) <S2SV_ModEnd> ) { problem =
<S2SV_ModStart> : if ( retval == 0 && server_ptr == NULL ) retval = KRB5_KDB_NOENTRY ; if ( retval
<S2SV_ModStart> [ 0 ] == NULL || * realms [ 0 ] ==
<S2SV_ModStart> ) if ( REMAIN == 0 || REMAIN
<S2SV_ModStart> . gr_token ) ; <S2SV_ModEnd> ret_freegc ( AUTH_FAILED ) <S2SV_ModStart> & gd -> checksum <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> goto errout ; } <S2SV_ModEnd> gr -> gr_ctx . <S2SV_ModStart> gr_ctx . value = "xxxx" ; <S2SV_ModEnd> gr -> gr_ctx . <S2SV_ModStart> gr -> gr_ctx . length = 4 <S2SV_ModEnd> ; gr -> gr_win
<S2SV_ModStart> no_server ) ) ; princ -> pw_expiration = 0 ; clear ( princ -> attributes , KRB5_KDB_REQUIRES_PWCHANGE ) ;
<S2SV_ModStart> ) ; if ( ! code <S2SV_ModEnd> || code == KRB5_PREAUTH_FAILED <S2SV_ModStart> || code == KRB5_PREAUTH_FAILED || code == KRB5KDC_ERR_KEY_EXP
<S2SV_ModStart> , princ ) ; success = data_eq_string ( * realm , <S2SV_ModEnd> handle -> params . <S2SV_ModStart> -> params . realm ) && data_eq_string ( * c1 , "kadmin" ) && ! data_eq_string ( * c2 , "history" ) ; <S2SV_ModEnd> fail_princ : if (
<S2SV_ModStart> context_handle ; if ( ctx -> terminated ||
<S2SV_ModStart> context_handle ; if ( ctx -> terminated ||
<S2SV_ModStart> data_set = GSS_C_NO_BUFFER_SET ; if ( ctx -> terminated || ! ctx -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; }
<S2SV_ModStart> NULL ; kgctx . established = 1 ; kgctx .
<S2SV_ModStart> goto cleanup ; } if ( comp1 -> data != NULL ) memcpy ( comp1_str , comp1 -> data , comp1 -> length ) ; if ( ( krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_SRV_HST || krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_SRV_INST || ( krb5_princ_type ( kdc_context , request -> server ) == KRB5_NT_UNKNOWN && kdc_active_realm -> realm_host_based_services != NULL && ( krb5_match_config_pattern ( kdc_active_realm -> realm_host_based_services , comp1_str ) == TRUE || krb5_match_config_pattern ( kdc_active_realm -> realm_host_based_services , KRB5_CONF_ASTERISK ) == TRUE ) ) ) && ( kdc_active_realm -> realm_no_host_referral == NULL || ( krb5_match_config_pattern ( kdc_active_realm -> realm_no_host_referral , KRB5_CONF_ASTERISK ) == FALSE && krb5_match_config_pattern ( kdc_active_realm -> realm_no_host_referral , comp1_str ) == FALSE ) ) ) { if ( memchr ( comp2 -> data , '.' , comp2 -> length ) == NULL ) goto cleanup ; temp_buf = calloc ( 1 , comp2 <S2SV_ModEnd> -> length + 1 <S2SV_ModStart> ) ; if ( <S2SV_ModEnd> ! temp_buf ) { <S2SV_ModStart> goto cleanup ; } if ( comp2 -> data != NULL ) memcpy <S2SV_ModEnd> ( temp_buf , comp2 <S2SV_ModStart> , comp2 -> length <S2SV_ModEnd> ) ; retval =
<S2SV_ModStart> check_anon ( kdc_active_realm , client . princ <S2SV_ModEnd> , request -> server
<S2SV_ModStart> * objp ) ; * objp = NULL ;
<S2SV_ModStart> = tl2 ; } * tl_data_head = NULL ;
<S2SV_ModStart> & out_buf ) ; <S2SV_ModEnd> XDR_DESTROY ( & temp_xdrs
<S2SV_ModStart> ) if ( REMAIN == 0 || REMAIN
<S2SV_ModStart> int ret , last_pwd , n_new_keys <S2SV_ModStart> ( keyblocks ) { n_new_keys = count_new_keys ( kdb -> n_key_data , kdb -> key_data ) ; <S2SV_ModStart> handle -> context , n_new_keys <S2SV_ModEnd> , kdb -> key_data
<S2SV_ModStart> ) ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> & KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK ; <S2SV_ModStart> ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK ; if ( ( mask & <S2SV_ModStart> ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; ret = kdb_get_entry
<S2SV_ModStart> ) ; if ( entry == NULL ) return EINVAL ; if ( <S2SV_ModStart> & KADM5_POLICY ) && entry -> policy == NULL <S2SV_ModEnd> ) return KADM5_BAD_MASK ; <S2SV_ModStart> KADM5_BAD_MASK ; if ( ( mask & KADM5_POLICY ) && ( mask & KADM5_POLICY_CLR ) ) return KADM5_BAD_MASK <S2SV_ModEnd> ; if ( mask
<S2SV_ModStart> ; kret = 0 ; if ( sprinc == NULL ) return NULL
<S2SV_ModStart> passptr ; if ( password == NULL ||
<S2SV_ModStart> ) ) ; goto bailout <S2SV_ModEnd> ; } ptr = <S2SV_ModStart> ) ) ; goto bailout <S2SV_ModEnd> ; } vno = <S2SV_ModStart> vno ) ; goto bailout <S2SV_ModEnd> ; } ap_req . <S2SV_ModStart> ) ) ; goto bailout <S2SV_ModEnd> ; } ap_req .
<S2SV_ModStart> ; if ( ent == NULL ) { st = KRB5_KDB_NOENTRY ; <S2SV_ModEnd> goto cleanup ; } <S2SV_ModStart> goto cleanup ; } st = populate_policy ( context , ld , ent , pol_name , * policy ) ;
<S2SV_ModStart> { if ( rep != NULL && rep <S2SV_ModStart> secret . data = ( char * )
<S2SV_ModStart> i + 1 ; if ( i < n_key_data - 1 ) <S2SV_ModStart> = key_data [ i + 1
<S2SV_ModStart> FALSE ; } } if ( ! <S2SV_ModEnd> xdr_opaque ( xdrs , <S2SV_ModStart> , size ) ) return FALSE ; if ( ( * objp ) [ size - 1 ] != '\\0' ) return FALSE ; if ( memchr ( * objp , '\\0' , size - 1 ) != NULL ) return FALSE ; return TRUE
<S2SV_ModStart> ) return KADM5_BAD_MASK ; if ( mask & KADM5_TL_DATA ) { for ( tl_data_tail = entry -> tl_data ; tl_data_tail != NULL ; tl_data_tail = tl_data_tail -> tl_data_next ) { if ( tl_data_tail -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; } }
<S2SV_ModStart> = NULL ; char <S2SV_ModEnd> * strval [ 10 <S2SV_ModStart> = FALSE ; krb5_boolean <S2SV_ModEnd> establish_links = FALSE ; <S2SV_ModStart> == TRUE ) { if ( subtreelist == NULL ) { st = krb5_get_subtree_info ( ldap_context , & subtreelist , & ntrees ) ; if ( st ) goto cleanup ; } st = validate_xargs ( context , ldap_server_handle , & xargs , standalone_principal_dn , subtreelist , <S2SV_ModEnd> ntrees ) ; if <S2SV_ModStart> if ( st ) <S2SV_ModEnd> goto cleanup ; }
<S2SV_ModStart> retval = KRB5_PREAUTH_FAILED ; if ( retval == 0 ) rs . enc_tkt_reply -> flags |= TKT_FLG_PRE_AUTH ;
<S2SV_ModStart> char * config ; <S2SV_ModEnd> armor_key = cb -> <S2SV_ModStart> -> respond = respond ; rs -> enc_tkt_reply = enc_tkt_reply
<S2SV_ModStart> ) ( arg , EINVAL <S2SV_ModEnd> , NULL , NULL <S2SV_ModStart> ) ( arg , EINVAL <S2SV_ModEnd> , NULL , NULL
<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( ctx -> seq == NULL ) { * minor_status = 0 <S2SV_ModStart> length < token_wrapper_len + 22 <S2SV_ModEnd> ) { * minor_status
<S2SV_ModStart> ( ! retval ) r = k5memdup0 ( realm , rlen , & retval ) ; <S2SV_ModEnd> while ( ! retval
<S2SV_ModStart> tmpmin ; size_t i <S2SV_ModEnd> ; gss_delete_sec_context ( &
<S2SV_ModStart> is == NULL ) return retval <S2SV_ModEnd> ; status = X509_NAME_cmp <S2SV_ModStart> retval = 0 ; <S2SV_ModEnd> X509_NAME_free ( is ->
<S2SV_ModStart> i , j ; * md_out = NULL ; md = calloc ( 1 , sizeof ( <S2SV_ModEnd> * md ) ) <S2SV_ModStart> ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_subject_name ( cert <S2SV_ModStart> ( cert ) , & md -> subject_dn ) ; if ( ret ) goto cleanup ; ret = rfc2253_name <S2SV_ModEnd> ( X509_get_issuer_name ( cert <S2SV_ModStart> ( cert ) , & md -> issuer_dn ) ; if ( ret ) goto cleanup ; <S2SV_ModEnd> ret = crypto_retrieve_X509_sans (
<S2SV_ModStart> ( errcode != 0 && state -> status == NULL ) state -> status = "UNKNOWN_REASON" <S2SV_ModEnd> ; au_state -> status
<S2SV_ModStart> ) ; cleanup : if ( status == NULL ) status = "UNKNOWN_REASON" <S2SV_ModEnd> ; if ( reply_key
<S2SV_ModStart> if ( code ) { * status = "DECODE_PA_FOR_USER" ; return code ; } <S2SV_ModEnd> code = verify_for_user_checksum (
<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { * status = "INVALID_S4U2PROXY_OPTIONS" ; <S2SV_ModStart> server_princ ) ) { * status = "EVIDENCE_TICKET_MISMATCH" ;
<S2SV_ModStart> if ( code ) { * status = "DECODE_PA_S4U_X509_USER" ; return code ; } <S2SV_ModEnd> code = verify_s4u_x509_user_checksum (
<S2SV_ModStart> MSKWAJ_HDR_HASFILEEXT ) ) { int len <S2SV_ModEnd> ; char * fn <S2SV_ModStart> ; if ( ! ( hdr -> filename = fn ) ) return MSPACK_ERR_NOMEMORY ; <S2SV_ModEnd> if ( hdr -> <S2SV_ModStart> ) { if ( ( len = <S2SV_ModStart> ] , 9 ) ) < 2 <S2SV_ModEnd> ) return MSPACK_ERR_READ ; <S2SV_ModStart> 0 ; i < len ; i ++ ) if ( ! ( * fn ++ <S2SV_ModEnd> = buf [ i <S2SV_ModStart> ) ) break ; if ( i == 9 && buf [ 8 ] != '\\0' ) return MSPACK_ERR_DATAFORMAT ; if ( sys -> seek ( fh , ( off_t ) ( i + 1 - len ) , MSPACK_SYS_SEEK_CUR <S2SV_ModEnd> ) ) return MSPACK_ERR_SEEK <S2SV_ModStart> ) ) return MSPACK_ERR_SEEK ; fn -- <S2SV_ModStart> '.' ; if ( ( len = <S2SV_ModStart> ] , 4 ) ) < 2 <S2SV_ModEnd> ) return MSPACK_ERR_READ ; <S2SV_ModStart> 0 ; i < len ; i ++ ) if ( ! ( * fn ++ <S2SV_ModEnd> = buf [ i <S2SV_ModStart> ) ) break ; if ( i == 4 && buf [ 3 ] != '\\0' ) return MSPACK_ERR_DATAFORMAT ; if ( sys -> seek ( fh , ( off_t ) ( i + 1 - len ) , MSPACK_SYS_SEEK_CUR <S2SV_ModEnd> ) ) return MSPACK_ERR_SEEK <S2SV_ModStart> ) ) return MSPACK_ERR_SEEK ; fn --
<S2SV_ModStart> intel_started = 1 ; if ( bits_left == 0 ) <S2SV_ModStart> ENSURE_BITS ( 16 ) <S2SV_ModEnd> ; bits_left = 0
<S2SV_ModStart> ) { if ( name_len == 40 && memcmp ( name , content_name , 40 <S2SV_ModEnd> ) == 0 ) <S2SV_ModStart> == 0 ) { chm -> sec1 . content = fi ; } else if ( name_len == 44 && memcmp ( name , control_name , 44 <S2SV_ModEnd> ) == 0 ) <S2SV_ModStart> chm -> sec1 . control <S2SV_ModEnd> = fi ; } <S2SV_ModStart> } else if ( name_len == 41 && memcmp ( name , spaninfo_name , 41 <S2SV_ModEnd> ) == 0 ) <S2SV_ModStart> chm -> sec1 . spaninfo <S2SV_ModEnd> = fi ; } <S2SV_ModStart> } else if ( name_len == 105 && memcmp ( name , rtable_name , 105 <S2SV_ModEnd> ) == 0 ) <S2SV_ModStart> chm -> sec1 . <S2SV_ModEnd> rtable = fi ; <S2SV_ModStart> rtable = fi ; <S2SV_ModEnd> } fi -> next
<S2SV_ModStart> && chm -> index_root >= <S2SV_ModEnd> chm -> num_chunks ) <S2SV_ModStart> ) goto chunk_end ; if ( name_len == 0 ) goto chunk_end ;
<S2SV_ModStart> ; if ( chunk_num >= <S2SV_ModEnd> chm -> num_chunks )
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * create_output_name ( <S2SV_ModStart> char * create_output_name ( char * fname ) { char * out , * p ; if ( ( out = malloc ( strlen ( fname ) + 1 <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> ) ) ) { <S2SV_ModEnd> while ( * fname <S2SV_ModStart> ( * fname == '/' || * fname == '\\\\' <S2SV_ModEnd> ) fname ++ ; <S2SV_ModStart> ) fname ++ ; strcpy ( out , ( * fname ) ? fname : "x" ) ; for ( p = out ; * p ; p ++ ) { if ( p [ 0 ] == '.' && p [ 1 ] == '.' && ( p [ 2 ] == '/' || p [ 2 ] == '\\\\' ) ) { p [ 0 ] = p [ 1 ] = 'x' ; } } } return out <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> outname = create_output_name ( <S2SV_ModEnd> f [ i ] <S2SV_ModStart> i ] -> filename <S2SV_ModEnd> ) ; printf (
<S2SV_ModStart> ) goto chunk_end ; <S2SV_ModEnd> name = p ; <S2SV_ModStart> READ_ENCINT ( length ) ; if ( name_len < 2 || ! name [ 0 ] || ! name [ 1 ] ) continue
<S2SV_ModStart> ) ; if ( rar -> dictionary_size == 0 ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , "Invalid<S2SV_blank>zero<S2SV_blank>dictionary<S2SV_blank>size" ) ; return ( ARCHIVE_FATAL ) ; } if (
<S2SV_ModStart> * ) _a ; const size_t max_write = INT_MAX ; <S2SV_ModStart> ARCHIVE_STATE_DATA , "archive_write_data" ) ; if ( s > max_write ) s = max_write
<S2SV_ModStart> ; int r ; size_t <S2SV_ModEnd> ffmax , parent_len ; <S2SV_ModStart> children . cnt , ( int ) <S2SV_ModStart> ; if ( ( <S2SV_ModEnd> l = np -> <S2SV_ModStart> l ; if ( <S2SV_ModEnd> np -> file -> <S2SV_ModStart> ; if ( parent_len > 240 || <S2SV_ModEnd> np -> mb_len > <S2SV_ModStart> -> mb_len > 240 || parent_len + np -> mb_len > 240 <S2SV_ModStart> ; } if ( <S2SV_ModEnd> l == ffmax ) <S2SV_ModStart> ; else if ( <S2SV_ModEnd> l == ffmax - <S2SV_ModStart> ; else if ( <S2SV_ModEnd> l == ffmax -
<S2SV_ModStart> skipsize = LOGICAL_BLOCK_SIZE * ( int64_t ) <S2SV_ModStart> skipsize = LOGICAL_BLOCK_SIZE * ( int64_t )
<S2SV_ModStart> ; filename [ filename_size <S2SV_ModEnd> ] = '\\0' ;
<S2SV_ModStart> cpio -> extract_flags |= ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ; cpio -> extract_flags |= <S2SV_ModStart> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NODOTDOT ; cpio -> extract_flags &= ~ ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS
<S2SV_ModStart> src == '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_MISC , "Path<S2SV_blank>is<S2SV_blank>absolute" ) ; return ( ARCHIVE_FAILED ) ; } separator = * src ++ ; } <S2SV_ModEnd> for ( ; ;
<S2SV_ModStart> ( ae ) ; assert ( ( ae = archive_entry_new ( ) ) != NULL ) ; archive_entry_copy_pathname ( ae , "/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp" ) ; archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; assert ( 0 == archive_write_header ( a , ae ) ) ; assert ( 0 == archive_write_finish_entry ( a ) ) ; assertFileExists ( "/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp" ) ; assert ( 0 == unlink ( "/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp" ) ) ; assert ( archive_entry_clear ( ae ) != NULL ) ; archive_entry_copy_pathname ( ae , "/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp" ) ; archive_entry_set_mode ( ae , S_IFREG | 0777 ) ; archive_write_disk_set_options ( a , ARCHIVE_EXTRACT_SECURE_NOABSOLUTEPATHS ) ; failure ( "Extracting<S2SV_blank>an<S2SV_blank>absolute<S2SV_blank>path<S2SV_blank>should<S2SV_blank>fail<S2SV_blank>here." ) ; assertEqualInt ( ARCHIVE_FAILED , archive_write_header ( a , ae ) ) ; archive_entry_free ( ae ) ; assert ( 0 == archive_write_finish_entry ( a ) ) ; assertFileNotExists ( "/tmp/libarchive_test-test_write_disk_secure-absolute_path.tmp" ) ;
<S2SV_ModStart> , bid , best_bid , n <S2SV_ModStart> r ; for ( n = 0 ; n < 25 ; ++ n <S2SV_ModEnd> ) { number_bidders = <S2SV_ModStart> ) ; } } archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , "Input<S2SV_blank>requires<S2SV_blank>too<S2SV_blank>many<S2SV_blank>filters<S2SV_blank>for<S2SV_blank>decoding" ) ; return ( ARCHIVE_FATAL ) ;
<S2SV_ModStart> { case kEmptyStream : if ( h -> emptyStreamBools != NULL ) return ( - 1 ) ; <S2SV_ModStart> ; break ; } if ( h -> emptyFileBools != NULL ) return ( - 1 ) ; <S2SV_ModStart> ; break ; } if ( h -> antiBools != NULL ) return ( - 1 ) ; <S2SV_ModStart> -> numFiles * 4 ) return ( - 1 ) ; if ( zip -> entry_names != NULL <S2SV_ModStart> = * p ; if ( h -> attrBools != NULL ) return ( - 1 ) ;
<S2SV_ModStart> 2 ; if ( lha -> compsize < 0 ) goto invalid ; if (
<S2SV_ModStart> return ARCHIVE_WARN ; } if ( argc >= MAX_PACK_ARGS ) { archive_set_error ( a , ARCHIVE_ERRNO_FILE_FORMAT , "Too<S2SV_blank>many<S2SV_blank>arguments" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> & p ) ; <S2SV_ModEnd> } if ( argc
<S2SV_ModStart> # endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if (
<S2SV_ModStart> { case 0 : if ( rsrc -> uncompressed_size != rsrc -> compressed_size ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , "Malformed<S2SV_blank>OS<S2SV_blank>X<S2SV_blank>metadata<S2SV_blank>entry:<S2SV_blank>inconsistent<S2SV_blank>size" ) ; return ( ARCHIVE_FATAL ) ; } <S2SV_ModStart> ) rsrc -> uncompressed_size ) ; return ( ARCHIVE_WARN ) ; } if ( rsrc -> compressed_size > ( 4 * 1024 * 1024 ) ) { archive_set_error ( & a -> archive , ARCHIVE_ERRNO_FILE_FORMAT , "Mac<S2SV_blank>metadata<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large:<S2SV_blank>%jd<S2SV_blank>><S2SV_blank>4M<S2SV_blank>bytes" , ( intmax_t ) rsrc -> compressed_size <S2SV_ModStart> { case 0 : if ( ( size_t ) bytes_avail > metadata_bytes ) bytes_avail = metadata_bytes ;
<S2SV_ModStart> ( outbuff ) - 128 <S2SV_ModEnd> ) ) { outbuff
<S2SV_ModStart> - 1 ) ; if ( unpack_streams > SIZE_MAX - UMAX_ENTRY ) { return ( - 1 ) ; }
<S2SV_ModStart> get_line_size ( * b + len , * avail - len <S2SV_ModEnd> , nl ) ;
<S2SV_ModStart> == AE_IFLNK ) { if ( cpio -> entry_bytes_remaining > 1024 * 1024 ) { archive_set_error ( & a -> archive , ENOMEM , "Rejecting<S2SV_blank>malformed<S2SV_blank>cpio<S2SV_blank>archive:<S2SV_blank>symlink<S2SV_blank>contents<S2SV_blank>exceed<S2SV_blank>1<S2SV_blank>megabyte" ) ; return ( ARCHIVE_FATAL ) ; }
<S2SV_ModStart> ) { if ( length > SMKTREE_DECODE_MAX_RECURSION ) { av_log ( NULL , AV_LOG_ERROR , "Maximum<S2SV_blank>tree<S2SV_blank>recursion<S2SV_blank>level<S2SV_blank>exceeded.\\n" ) ; return AVERROR_INVALIDDATA ; } if (
<S2SV_ModStart> ] ; if ( temp_buffer & 0xfffffe00 ) continue ; if ( temp_buffer < 2 <S2SV_ModEnd> ) continue ; if <S2SV_ModStart> else if ( temp_buffer >= 0x100 && temp_buffer <S2SV_ModStart> ; else if ( temp_buffer >= 0x120 &&
<S2SV_ModStart> asize ; uint16_t auxsize ; int ret <S2SV_ModStart> [ NSV_ST_VIDEO ] ; if ( ( ret = <S2SV_ModStart> pkt , vsize ) ) < 0 ) return ret <S2SV_ModStart> ) ; } } if ( ( ret = <S2SV_ModStart> pkt , asize ) ) < 0 ) return ret
<S2SV_ModStart> == '[' ) { size_t <S2SV_ModEnd> len ; if ( <S2SV_ModStart> ; } len = <S2SV_ModEnd> ( cp - ( <S2SV_ModStart> if ( len > <S2SV_ModEnd> sizeof ( buf )
<S2SV_ModStart> { u8 label_len ; <S2SV_ModEnd> GET8 ( label_len ) <S2SV_ModStart> return - 1 ; if ( j + label_len > length ) return - 1 ;
<S2SV_ModStart> ( base_name ) ; char need_to_append_dot ; struct search_domain * dom ; if ( ! base_len ) return NULL ; <S2SV_ModEnd> need_to_append_dot = base_name [ <S2SV_ModStart> 0 : 1 ; <S2SV_ModEnd> for ( dom =
<S2SV_ModStart> 0 ; int i <S2SV_ModEnd> = 0 ; uint8_t <S2SV_ModStart> [ buffer_caret ] & ! TGA_RLE_FLAG <S2SV_ModEnd> ) + 1 ) <S2SV_ModStart> ++ ; if ( ( bitmap_caret <S2SV_ModEnd> + ( encoded_pixels * <S2SV_ModStart> * pixel_block_size ) ) >= image_block_size <S2SV_ModEnd> ) { gdFree ( <S2SV_ModStart> i ++ ) { memcpy ( tga -> bitmap + bitmap_caret , decompression_buffer + buffer_caret , pixel_block_size ) ; bitmap_caret += pixel_block_size ; <S2SV_ModEnd> } buffer_caret += pixel_block_size <S2SV_ModStart> ++ ; if ( ( bitmap_caret <S2SV_ModEnd> + ( encoded_pixels * <S2SV_ModStart> * pixel_block_size ) ) >= image_block_size ) { gdFree ( decompression_buffer ) ; gdFree ( conversion_buffer ) ; return - 1 ; } memcpy ( tga -> bitmap + bitmap_caret , decompression_buffer + buffer_caret , encoded_pixels * pixel_block_size ) ; bitmap_caret += ( encoded_pixels * pixel_block_size ) ; buffer_caret += ( encoded_pixels * pixel_block_size ) ; <S2SV_ModEnd> } } gdFree (
<S2SV_ModStart> -> bits == TGA_BPP_32 && <S2SV_ModEnd> tga -> alphabits )
<S2SV_ModStart> ) ; # endif if ( ! ( <S2SV_ModEnd> ( tga -> bits <S2SV_ModStart> ( tga -> bits == TGA_BPP_24 && tga -> alphabits == 0 ) || ( tga -> bits == TGA_BPP_32 && tga -> alphabits == 8 ) ) ) { gd_error_ex ( GD_WARNING , "gd-tga:<S2SV_blank>%u<S2SV_blank>bits<S2SV_blank>per<S2SV_blank>pixel<S2SV_blank>with<S2SV_blank>%u<S2SV_blank>alpha<S2SV_blank>bits<S2SV_blank>not<S2SV_blank>supported\\n" , tga -> bits , tga -> alphabits <S2SV_ModEnd> ) ; return - <S2SV_ModStart> ; return - 1 <S2SV_ModEnd> ; } tga ->
<S2SV_ModStart> return NULL ; } if ( color < 0 || ( ! gdImageTrueColor ( im ) && color >= gdImageColorsTotal ( im ) ) <S2SV_ModEnd> ) { return NULL <S2SV_ModStart> return NULL ; } match = 1 ; for ( y = 0 ; match && y < height ; y ++ ) { for ( x = 0 ; match && x < width ; x ++ ) { match = ( gdColorMatch ( im , color , gdImageGetPixel ( im , x , y ) , threshold ) ) > 0 ; } } if ( y == height - 1 ) { return NULL ; }
<S2SV_ModStart> ; buffer_caret ++ ; if ( encoded_pixels != 0 ) { if ( ! ( ( buffer_caret + ( encoded_pixels * pixel_block_size ) ) < image_block_size ) ) { gdFree ( decompression_buffer ) ; gdFree ( conversion_buffer ) ; return - 1 ; } <S2SV_ModStart> ] ; } } } <S2SV_ModStart> ; buffer_caret ++ ; if ( encoded_pixels != 0 ) { if ( ! ( ( buffer_caret + ( encoded_pixels * pixel_block_size ) ) < image_block_size ) ) { gdFree ( decompression_buffer ) ; gdFree ( conversion_buffer ) ; return - 1 ; } <S2SV_ModStart> ; } } } }
<S2SV_ModStart> != tmp_im ) { gdImageDestroy <S2SV_ModEnd> ( tmp_im ) ;
<S2SV_ModStart> dctx -> dp ; if ( dp -> pos < 0 || dp -> pos >= dp -> realSize ) { return 0 ; } <S2SV_ModStart> = remain ; } if ( dp -> pos + rlen > dp -> realSize ) { rlen = dp -> realSize - dp -> pos ; }
<S2SV_ModStart> { char buf [ 1024 <S2SV_ModEnd> ] ; int len
<S2SV_ModStart> ; } } } gdCtxPuts ( out , "#define<S2SV_blank>" ) ; gdCtxPuts ( out , name ) ; gdCtxPuts ( out , "_width<S2SV_blank>" ) ; <S2SV_ModStart> gdCtxPrintf ( out , "%d\\n" <S2SV_ModEnd> , gdImageSX ( image <S2SV_ModStart> image ) ) ; gdCtxPuts ( out , "#define<S2SV_blank>" ) ; gdCtxPuts ( out , name ) ; gdCtxPuts ( out , "_height<S2SV_blank>" ) ; <S2SV_ModStart> gdCtxPrintf ( out , "%d\\n" <S2SV_ModEnd> , gdImageSY ( image <S2SV_ModStart> image ) ) ; gdCtxPuts ( out , "static<S2SV_blank>unsigned<S2SV_blank>char<S2SV_blank>" ) ; gdCtxPuts ( out , name ) ; gdCtxPuts ( out , "_bits[]<S2SV_blank>=<S2SV_blank>{\\n<S2SV_blank><S2SV_blank>" <S2SV_ModEnd> ) ; free ( <S2SV_ModStart> ( p ) { gdCtxPuts <S2SV_ModEnd> ( out , ",<S2SV_blank>" <S2SV_ModStart> 12 ) ) { gdCtxPuts <S2SV_ModEnd> ( out , "\\n<S2SV_blank><S2SV_blank>" <S2SV_ModStart> ; } } } gdCtxPuts <S2SV_ModEnd> ( out , "};\\n"
<S2SV_ModStart> 0.0 ; int iSrc <S2SV_ModEnd> ; if ( iRight <S2SV_ModStart> -- ; } } <S2SV_ModEnd> res -> ContribRow [ <S2SV_ModStart> [ u ] . Left = iLeft ; res -> ContribRow [ u ] . Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ] .
<S2SV_ModStart> { if ( remain <= <S2SV_ModEnd> 0 ) { return
<S2SV_ModStart> gdIOCtxPtr out ) { _gdImageGifCtx ( im , out ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) return NULL ; if ( ! _gdImageGifCtx <S2SV_ModEnd> ( im , out <S2SV_ModStart> im , out ) ) { <S2SV_ModEnd> rv = gdDPExtractData ( <S2SV_ModStart> , size ) ; } else { rv = NULL ; }
<S2SV_ModStart> * out ) { _gdImageWBMPCtx ( image , fg , out <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> ) return NULL ; if ( ! _gdImageWBMPCtx <S2SV_ModEnd> ( im , fg <S2SV_ModStart> fg , out ) ) { <S2SV_ModEnd> rv = gdDPExtractData ( <S2SV_ModStart> , size ) ; } else { rv = NULL ; }
<S2SV_ModStart> ) { if ( buffer_caret + pixel_block_size > rle_size ) { gdFree ( decompression_buffer ) ; gdFree ( conversion_buffer ) ; return - 1 ; } if (
<S2SV_ModStart> main ( ) { check_file ( "heap_overflow_1.tga" ) ; check_file ( "heap_overflow_2.tga" <S2SV_ModEnd> ) ; return gdNumFailures
<S2SV_ModStart> LineContribType * res ; size_t weights_size ; if ( overflow2 ( windows_size , sizeof ( double ) ) ) { return NULL ; } else { weights_size = windows_size * sizeof ( double ) ; } res = ( LineContribType * ) gdMalloc ( sizeof ( LineContribType ) ) ; if ( ! res ) { return NULL ; } res -> WindowSize = windows_size ; res -> LineLength = line_length ; if ( overflow2 ( line_length , sizeof ( ContributionType ) ) ) { gdFree ( res ) ; return NULL ; } res -> ContribRow = ( ContributionType * ) gdMalloc ( line_length * sizeof ( ContributionType ) ) ; if ( res -> ContribRow == NULL ) { gdFree ( res ) ; return NULL ; } for ( u = 0 ; <S2SV_ModEnd> u < line_length ; <S2SV_ModStart> ; u ++ ) <S2SV_ModEnd> { res -> ContribRow <S2SV_ModStart> * ) gdMalloc ( weights_size ) ; if ( <S2SV_ModEnd> res -> ContribRow [ <S2SV_ModStart> unsigned int i ; <S2SV_ModEnd> for ( i = <S2SV_ModStart> = 0 ; i < <S2SV_ModEnd> u ; i ++
<S2SV_ModStart> ( border < 0 || color < 0 <S2SV_ModStart> ) { return ; } if ( ! im -> trueColor ) { if ( ( color > ( im -> colorsTotal - 1 ) ) || ( border > ( im -> colorsTotal - 1 ) ) ) { return ; }
<S2SV_ModStart> ) ) > image_block_size || buffer_caret + pixel_block_size > rle_size <S2SV_ModStart> ) ) > image_block_size || buffer_caret + ( encoded_pixels * pixel_block_size ) > rle_size
<S2SV_ModStart> type = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> line += 3 ; len -= 3 ; <S2SV_ModStart> ! ( ptr = memchr <S2SV_ModEnd> ( line , '<S2SV_blank>' <S2SV_ModStart> ( line , '<S2SV_blank>' , len <S2SV_ModStart> ] = '\\0' ; if ( len < 1 ) goto out_err ; <S2SV_ModStart> ptr + 1 ; len -= 1 ; <S2SV_ModStart> ! ( ptr = memchr <S2SV_ModEnd> ( line , '\\n' <S2SV_ModStart> ( line , '\\n' , len
<S2SV_ModStart> == PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET , "Invalid<S2SV_blank>empty<S2SV_blank>packet" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if (
<S2SV_ModStart> line = line_end ; <S2SV_ModEnd> error = add_push_report_pkt (
<S2SV_ModStart> ; error = 0 <S2SV_ModEnd> ; switch ( pkt
<S2SV_ModStart> 0x08 ) off |= ( ( unsigned ) <S2SV_ModStart> delta ++ << 24UL )
<S2SV_ModStart> ) return GIT_EBUFS ; if ( len != 0 && len < PKT_LEN_SIZE ) return GIT_ERROR ;
<S2SV_ModStart> ) return GIT_EBUFS ; if ( len != 0 && len < PKT_LEN_SIZE ) return GIT_ERROR ;
<S2SV_ModStart> == PKT_LEN_SIZE ) { giterr_set_str ( GITERR_NET , "Invalid<S2SV_blank>empty<S2SV_blank>packet" ) ; return GIT_ERROR <S2SV_ModEnd> ; } if (
<S2SV_ModStart> line = line_end ; <S2SV_ModEnd> error = add_push_report_pkt (
<S2SV_ModStart> ; error = 0 <S2SV_ModEnd> ; switch ( pkt
<S2SV_ModStart> len = 0 ; # define ADD_DELTA ( o , shift ) { if ( delta < delta_end ) ( o ) |= ( ( unsigned ) <S2SV_ModEnd> * delta ++ << <S2SV_ModStart> * delta ++ << shift ) ; else goto fail ; } if ( cmd & 0x01 ) ADD_DELTA ( off , 0UL ) ; if ( cmd & 0x02 ) ADD_DELTA ( off , 8UL ) <S2SV_ModEnd> ; if ( cmd <S2SV_ModStart> cmd & 0x04 ) ADD_DELTA ( off , 16UL ) <S2SV_ModEnd> ; if ( cmd <S2SV_ModStart> cmd & 0x08 ) ADD_DELTA ( off , <S2SV_ModEnd> 24UL ) ; if <S2SV_ModStart> cmd & 0x10 ) ADD_DELTA ( len , 0UL ) <S2SV_ModEnd> ; if ( cmd <S2SV_ModStart> cmd & 0x20 ) ADD_DELTA ( len , 8UL ) <S2SV_ModEnd> ; if ( cmd <S2SV_ModStart> cmd & 0x40 ) ADD_DELTA ( len , 16UL ) <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> len = 0x10000 ; # undef ADD_DELTA
<S2SV_ModStart> cert ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> ; giterr_clear ( ) <S2SV_ModEnd> ; error = t
<S2SV_ModStart> cert ; int is_valid = ( error == GIT_OK ) <S2SV_ModStart> ; giterr_clear ( ) <S2SV_ModEnd> ; error = t
<S2SV_ModStart> , len = 0 , end <S2SV_ModStart> undef ADD_DELTA if ( GIT_ADD_SIZET_OVERFLOW ( & end , off , len ) || base_len < end <S2SV_ModEnd> || res_sz < len
<S2SV_ModStart> s_addr = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr .
<S2SV_ModStart> s_addr = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr .
<S2SV_ModStart> * object + size < * object || * object + size <S2SV_ModStart> BPLIST_STRING : if ( * object + size < * object || <S2SV_ModStart> + size * 2 < * object || * object + size * 2 <S2SV_ModStart> * object + size < * object || * object + size <S2SV_ModStart> * object + size < * object || * object + size > bplist -> offset_table ) { PLIST_BIN_ERR ( "%s:<S2SV_blank>BPLIST_DICT<S2SV_blank>data<S2SV_blank>bytes<S2SV_blank>point<S2SV_blank>outside<S2SV_blank>of<S2SV_blank>valid<S2SV_blank>range\\n" <S2SV_ModEnd> , __func__ ) ;
<S2SV_ModStart> p = 0 ; int wv , w1 , w2 , w3 , w4 ; int tmpval [ 4 ] ; int tmpcnt <S2SV_ModEnd> = 0 ; do <S2SV_ModStart> 0 ; do { while ( ptr < buf + len && ( * ptr == '<S2SV_blank>' || * ptr == '\\t' || * ptr == '\\n' || * ptr == '\\r' ) ) { ptr ++ ; } <S2SV_ModEnd> if ( * ptr <S2SV_ModStart> { break ; } if ( ( wv = base64_table [ ( int ) ( unsigned char ) * ptr ++ ] ) == - 1 ) { continue ; } tmpval [ tmpcnt ++ ] = wv ; if ( tmpcnt == 4 ) { tmpcnt = 0 ; w1 = tmpval [ 0 ] ; w2 = tmpval [ 1 ] ; w3 = tmpval [ 2 ] ; w4 = tmpval [ 3 ] ; if ( w2 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w1 << 2 ) + ( w2 >> 4 ) ) & 0xFF ) ; } if ( w3 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w2 << 4 ) + ( w3 >> 2 ) ) & 0xFF ) ; } if ( w4 >= 0 ) { outbuf [ p ++ ] = ( unsigned char ) ( ( ( w3 << 6 ) + w4 ) & 0xFF ) ; } <S2SV_ModEnd> } } while (
<S2SV_ModStart> & filestats ) ; if ( filestats . st_size < 8 ) { printf ( "ERROR:<S2SV_blank>Input<S2SV_blank>file<S2SV_blank>is<S2SV_blank>too<S2SV_blank>small<S2SV_blank>to<S2SV_blank>contain<S2SV_blank>valid<S2SV_blank>plist<S2SV_blank>data.\\n" ) ; return - 1 ; }
<S2SV_ModStart> 1 ) ) ; if ( ! data -> strval ) { plist_free_data ( data ) ; PLIST_BIN_ERR ( "%s:<S2SV_blank>Could<S2SV_blank>not<S2SV_blank>allocate<S2SV_blank>%" PRIu64 "<S2SV_blank>bytes\\n" , __func__ , sizeof ( char ) * ( size + 1 ) ) ; return NULL ; }
<S2SV_ModStart> s_addr = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr .
<S2SV_ModStart> s_addr = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr .
<S2SV_ModStart> passIC + 2 ; ( ( <S2SV_ModStart> passIC + 1 ] ) && ( kk < input -> length ) )
<S2SV_ModStart> ; if ( name != NULL && namelen == 0 ) namelen = strlen ( name ) ; if ( name
<S2SV_ModStart> reset_globals ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> reset_globals ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> reset_globals ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> reset_globals ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ikev2_ke * ke ; <S2SV_ModEnd> char fromname [ ADDRTOT_BUF <S2SV_ModStart> , ADDRTOT_BUF ) ; if ( ! md -> chain [ ISAKMP_NEXT_v2KE ] ) { if ( md -> chain [ ISAKMP_NEXT_v2N ] ) { libreswan_log ( "Received<S2SV_blank>Notify(%d):<S2SV_blank>%s" , md -> chain [ ISAKMP_NEXT_v2N ] -> payload . v2n . isan_type , enum_name ( & ikev2_notify_names , md -> chain [ ISAKMP_NEXT_v2N ] -> payload . v2n . isan_type ) ) ; } libreswan_log ( "rejecting<S2SV_blank>I1<S2SV_blank>from<S2SV_blank>%s:%u,<S2SV_blank>no<S2SV_blank>KE<S2SV_blank>payload<S2SV_blank>present" , fromname , md -> sender_port ) ; return STF_FAIL + v2N_INVALID_KE_PAYLOAD ; } ke = & md -> chain [ ISAKMP_NEXT_v2KE ] -> payload . v2ke ; st -> st_oakley . group = lookup_group ( ke -> isak_group ) ; if ( st -> st_oakley . group == NULL ) { libreswan_log ( <S2SV_ModEnd> "rejecting<S2SV_blank>I1<S2SV_blank>from<S2SV_blank>%s:%u,<S2SV_blank>invalid<S2SV_blank>DH<S2SV_blank>group=%u" , fromname , <S2SV_ModStart> isak_group ) ; return STF_FAIL +
<S2SV_ModStart> loid [ 16 ] , reallen <S2SV_ModStart> } if ( ( err = der_length_sequence ( siginfo , 2 , & reallen ) ) != CRYPT_OK ) { XFREE ( out ) ; goto bail_2 ; } if ( ( reallen == outlen ) && (
<S2SV_ModStart> ; } if ( options -> flags & ( UV_PROCESS_SETUID | UV_PROCESS_SETGID ) ) { SAVE_ERRNO ( setgroups ( 0 , NULL ) ) ; } if (
<S2SV_ModStart> buf ; buf = g_malloc0 <S2SV_ModEnd> ( size ) ;
<S2SV_ModStart> ! ( buf = g_try_malloc0 <S2SV_ModEnd> ( size ) )
<S2SV_ModStart> dom , - 1 ) ; virCheckReadOnlyGoto ( dom -> conn -> flags , error
<S2SV_ModStart> ) { if ( user_sid_size > ( ( record_data_size - 4 ) - user_sid_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , "%s:<S2SV_blank>user<S2SV_blank>SID<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , function ) ; goto on_error ; } if ( <S2SV_ModStart> != 0 ) { if ( strings_size > ( ( record_data_size - 4 ) - strings_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , "%s:<S2SV_blank>strings<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , function ) ; goto on_error ; } <S2SV_ModStart> != 0 ) { if ( data_size > ( ( record_data_size - 4 ) - data_offset ) ) { libcerror_error_set ( error , LIBCERROR_ERROR_DOMAIN_RUNTIME , LIBCERROR_RUNTIME_ERROR_VALUE_OUT_OF_BOUNDS , "%s:<S2SV_blank>data<S2SV_blank>size<S2SV_blank>value<S2SV_blank>out<S2SV_blank>of<S2SV_blank>bounds." , function ) ; goto on_error ; } <S2SV_ModStart> & ( record_data [ record_data_offset <S2SV_ModEnd> ] ) , (
<S2SV_ModStart> ) ) ) { if ( uri_ptr [ alias_len ] == '.' ) { char * s = uri_ptr + alias_len + 1 ; if ( * s == '.' ) ++ s ; if ( * s == '/' || * s == '\\0' ) { size_t vlen = buffer_string_length ( ds -> value ) ; if ( 0 != alias_len && ds -> key -> ptr [ alias_len - 1 ] != '/' && 0 != vlen && ds -> value -> ptr [ vlen - 1 ] == '/' ) { con -> http_status = 403 ; return HANDLER_FINISHED ; } } }
<S2SV_ModStart> >= 0 ) { const int qslen = blen - qs ; <S2SV_ModStart> s + qs , ( size_t ) qslen ) ; qs = j ; j += qslen <S2SV_ModEnd> ; } buffer_string_set_length (
<S2SV_ModStart> __LINE__ , CONST_STR_LEN ( "%2f?" ) , CONST_STR_LEN ( "/?" ) ) ; run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN ( "/%2f?" ) , CONST_STR_LEN ( "//?" ) ) ; run_burl_normalize ( psrc , ptmp , flags , __LINE__ , CONST_STR_LEN (
<S2SV_ModStart> ) return false ; if ( url_len >= sizeof ( url_address ) ) { applog ( LOG_WARNING , "%s:<S2SV_blank>Truncating<S2SV_blank>overflowed<S2SV_blank>address<S2SV_blank>\'%.*s\'" , __func__ , url_len , url_begin ) ; url_len = sizeof ( url_address ) - 1 ; }
<S2SV_ModStart> ) ; if ( n2size < 1 ) <S2SV_ModEnd> { applog ( LOG_INFO
<S2SV_ModStart> descriptor -> msg , "\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" <S2SV_ModEnd> , descriptor , rec_number <S2SV_ModStart> == SQL_DESC_COUNT && ( intptr_t <S2SV_ModEnd> ) value < 0 <S2SV_ModStart> field_identifier == SQL_DESC_PARAMETER_TYPE && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_INPUT && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_OUTPUT && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_INPUT_OUTPUT && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_INPUT_OUTPUT_STREAM && ( intptr_t )
<S2SV_ModStart> descriptor -> msg , "\\n\\t\\tEntry:\\\n\\n\\t\\t\\tDescriptor<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tRec<S2SV_blank>Number<S2SV_blank>=<S2SV_blank>%d\\\n\\n\\t\\t\\tField<S2SV_blank>Ident<S2SV_blank>=<S2SV_blank>%s\\\n\\n\\t\\t\\tValue<S2SV_blank>=<S2SV_blank>%p\\\n\\n\\t\\t\\tBuffer<S2SV_blank>Length<S2SV_blank>=<S2SV_blank>%d" <S2SV_ModEnd> , descriptor , rec_number <S2SV_ModStart> == SQL_DESC_COUNT && ( intptr_t <S2SV_ModEnd> ) value < 0 <S2SV_ModStart> field_identifier == SQL_DESC_PARAMETER_TYPE && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_INPUT && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_OUTPUT && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_INPUT_OUTPUT && ( intptr_t ) <S2SV_ModStart> value != SQL_PARAM_INPUT_OUTPUT_STREAM && ( intptr_t )
<S2SV_ModStart> , SQL_DROP ) ; <S2SV_ModEnd> return 0 ; }
<S2SV_ModStart> in ) { return NULL <S2SV_ModEnd> ; } while (
<S2SV_ModStart> in ) { return NULL <S2SV_ModEnd> ; } while (
<S2SV_ModStart> in ) { return NULL <S2SV_ModEnd> ; } while (
<S2SV_ModStart> in ) { return NULL <S2SV_ModEnd> ; } while (
<S2SV_ModStart> strncpy ( szFileName , pszFileName , <S2SV_ModStart> szFileName ) - 5 <S2SV_ModEnd> ) ; } else
<S2SV_ModStart> * newnamep ) { uid_t ruid , suid , euid ; int fret = - 1 ; int fd = - 1 , ifindex <S2SV_ModEnd> = - 1 , <S2SV_ModStart> - 1 , ret <S2SV_ModEnd> ; bool grab_newname = <S2SV_ModStart> < 0 ) { usernic_error ( <S2SV_ModEnd> "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , getpid ( <S2SV_ModStart> ) ) ; return fret <S2SV_ModEnd> ; } fd = <S2SV_ModStart> < 0 ) { usernic_error ( <S2SV_ModEnd> "Failed<S2SV_blank>opening<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>path<S2SV_blank>for<S2SV_blank>\'%d\'." , pid ) <S2SV_ModStart> , pid ) ; goto do_partial_cleanup ; } ret = getresuid ( & ruid , & euid , & suid ) ; if ( ret < 0 ) { usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>retrieve<S2SV_blank>real,<S2SV_blank>effective,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>" "user<S2SV_blank>IDs:<S2SV_blank>%s\\n" , strerror ( errno ) ) ; goto do_partial_cleanup ; } ret = <S2SV_ModEnd> setns ( fd , <S2SV_ModStart> setns ( fd , CLONE_NEWNET ) ; <S2SV_ModEnd> close ( fd ) <S2SV_ModStart> ( fd ) ; fd = - 1 ; if ( ret < 0 ) { usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>the<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>of<S2SV_blank>" "the<S2SV_blank>container<S2SV_blank>with<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , pid , strerror ( errno ) ) ; goto do_partial_cleanup ; } ret = setresuid ( ruid , ruid , 0 ) ; if ( ret < 0 ) { usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>drop<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" "user<S2SV_blank>id<S2SV_blank>and<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" "ID<S2SV_blank>to<S2SV_blank>0:<S2SV_blank>%s.\\n" , ruid , strerror ( errno ) ) ; goto do_full_cleanup ; } <S2SV_ModEnd> if ( ! * <S2SV_ModStart> newnamep = VETH_DEF_NAME ; ifindex = if_nametoindex ( oldname ) ; if ( ! ifindex ) { usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>netdev<S2SV_blank>index:<S2SV_blank>%s.\\n" , strerror ( errno ) ) ; goto do_full_cleanup ; } } ret = lxc_netdev_rename_by_name ( oldname , * newnamep ) ; if ( ret < 0 ) { usernic_error ( "Error<S2SV_blank>%d<S2SV_blank>renaming<S2SV_blank>netdev<S2SV_blank>%s<S2SV_blank>to<S2SV_blank>%s<S2SV_blank>in<S2SV_blank>container.\\n" , ret , <S2SV_ModEnd> oldname , * newnamep <S2SV_ModStart> , * newnamep ) ; goto do_full_cleanup <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ifname [ IFNAMSIZ ] ; char <S2SV_ModEnd> * namep = ifname <S2SV_ModStart> namep ) ) { usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>get<S2SV_blank>new<S2SV_blank>netdev<S2SV_blank>name:<S2SV_blank>%s.\\n" , strerror ( errno ) ) ; goto do_full_cleanup <S2SV_ModEnd> ; } * newnamep <S2SV_ModStart> * newnamep ) goto do_full_cleanup ; } fret = 0 ; do_full_cleanup : ret = setresuid ( ruid , euid , suid ) ; if ( ret < 0 ) { usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>restore<S2SV_blank>privilege<S2SV_blank>by<S2SV_blank>setting<S2SV_blank>effective<S2SV_blank>" "user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>real<S2SV_blank>user<S2SV_blank>id<S2SV_blank>to<S2SV_blank>%d,<S2SV_blank>and<S2SV_blank>saved<S2SV_blank>user<S2SV_blank>" "ID<S2SV_blank>to<S2SV_blank>%d:<S2SV_blank>%s.\\n" , ruid , euid , suid , strerror ( errno ) ) ; fret = - 1 ; } ret = <S2SV_ModEnd> setns ( ofd , <S2SV_ModStart> setns ( ofd , CLONE_NEWNET ) ; if ( ret < 0 ) { usernic_error ( "Failed<S2SV_blank>to<S2SV_blank>setns()<S2SV_blank>to<S2SV_blank>original<S2SV_blank>network<S2SV_blank>namespace<S2SV_blank>" "of<S2SV_blank>PID<S2SV_blank>%d:<S2SV_blank>%s.\\n" , ofd , strerror ( errno ) ) ; fret = - 1 ; } do_partial_cleanup : if ( fd >= 0 ) close ( fd ) ; close ( <S2SV_ModEnd> ofd ) ; return <S2SV_ModStart> ofd ) ; return fret <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) ; r = safe_mount <S2SV_ModEnd> ( "cgroup_root" , path <S2SV_ModStart> | MS_RELATIME , "size=10240k,mode=755" , root
<S2SV_ModStart> ) ; if ( safe_mount ( hostpath , path , 0 , MS_BIND , NULL , rootfs -> path ? rootfs -> mount : <S2SV_ModEnd> NULL ) != 0
<S2SV_ModStart> ; } ret = safe_mount ( path , destpath , "none" , MS_BIND , NULL , conf -> rootfs . mount <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> LXC_AUTO_PROC_MIXED , "%r/proc/sys/net" , "%r/proc/tty" <S2SV_ModEnd> , NULL , MS_BIND <S2SV_ModStart> LXC_AUTO_PROC_MASK , LXC_AUTO_PROC_MIXED , "%r/proc/tty" <S2SV_ModEnd> , "%r/proc/sys/net" , NULL <S2SV_ModStart> ) ; r = safe_mount ( source , destination , default_mounts [ i ] . fstype , mflags , default_mounts [ i ] . options , conf -> rootfs . path ? conf -> rootfs . mount : NULL <S2SV_ModEnd> ) ; saved_errno =
<S2SV_ModStart> ; } if ( safe_mount <S2SV_ModEnd> ( "none" , path <S2SV_ModStart> , 0 , "size=100000,mode=755" , rootfs -> path ? rootfs -> mount : NULL
<S2SV_ModStart> data , int optional , const char * rootfs <S2SV_ModStart> # endif if ( safe_mount <S2SV_ModEnd> ( fsname , target <S2SV_ModStart> ~ MS_REMOUNT , data , rootfs <S2SV_ModStart> MS_REMOUNT , data ) < 0
<S2SV_ModStart> ( mntent , path , rootfs -> mount
<S2SV_ModStart> const char * path , const char * rootfs <S2SV_ModStart> , mntdata , optional , rootfs
<S2SV_ModStart> ( mntent , path , rootfs
<S2SV_ModStart> , mntent -> mnt_dir , NULL
<S2SV_ModStart> ; } if ( safe_mount ( console -> name , path , "none" , MS_BIND , 0 , rootfs -> mount <S2SV_ModEnd> ) ) { ERROR
<S2SV_ModStart> ; } if ( safe_mount ( console -> name , lxcpath , "none" , MS_BIND , 0 , rootfs -> mount ) ) { ERROR ( "failed<S2SV_blank>to<S2SV_blank>mount<S2SV_blank>\'%s\'<S2SV_blank>on<S2SV_blank>\'%s\'" , <S2SV_ModEnd> console -> name , <S2SV_ModStart> -> name , lxcpath ) ; return - 1 ; } ret = snprintf ( lxcpath , sizeof ( lxcpath ) , "%s/console" , ttydir ) ; if ( ret >= sizeof ( lxcpath ) ) { ERROR ( "lxc/console<S2SV_blank>path<S2SV_blank>too<S2SV_blank>long" ) ; return - 1 ; } ret = symlink ( lxcpath , path ) ; if ( ret ) { SYSERROR ( "failed<S2SV_blank>to<S2SV_blank>create<S2SV_blank>symlink<S2SV_blank>for<S2SV_blank>console" ) ; return - 1 ; } INFO ( "console<S2SV_blank>has<S2SV_blank>been<S2SV_blank>setup<S2SV_blank>on<S2SV_blank>%s" , lxcpath ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> payload -> ipc_socket ; int procfd = payload -> procfd ; <S2SV_ModStart> attach_flags & LXC_ATTACH_LSM ) && init_ctx -> lsm_label <S2SV_ModStart> { int on_exec ; <S2SV_ModEnd> on_exec = options -> <S2SV_ModStart> 1 : 0 ; if ( lsm_set_label_at ( procfd , on_exec , init_ctx -> lsm_label ) <S2SV_ModEnd> < 0 ) { <S2SV_ModStart> ; } } } close ( procfd ) ;
<S2SV_ModStart> [ 2 ] ; int procfd ; <S2SV_ModStart> 1 ) ; } procfd = open ( "/proc" , O_DIRECTORY | O_RDONLY ) ; if ( procfd < 0 ) { SYSERROR ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc" ) ; shutdown ( ipc_sockets [ 1 ] , SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModStart> . exec_payload = exec_payload , . procfd = procfd
<S2SV_ModStart> len = strlen ( "/lxc/lock/" <S2SV_ModEnd> ) + strlen ( <S2SV_ModStart> dest , len , "%s/lxc/lock/%s" <S2SV_ModEnd> , rundir , p <S2SV_ModStart> < 0 ) { free ( dest ) ; free ( rundir ) ; return NULL ; } ret = snprintf ( dest , len , "%s/lxc/lock/%s/.%s" , rundir , p , n ) ; free ( rundir <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ( dest ) ; <S2SV_ModEnd> return NULL ; }
<S2SV_ModStart> * pathname = RUNTIME_PATH "/lxc/lock/var/lib/lxc/" <S2SV_ModEnd> ; ret = stat
<S2SV_ModStart> payload -> ipc_socket ; <S2SV_ModEnd> lxc_attach_options_t * options = <S2SV_ModStart> ; int fd ; int lsm_labelfd ; <S2SV_ModStart> ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>(0):<S2SV_blank>%s." , strerror ( errno ) <S2SV_ModEnd> ) ; shutdown ( <S2SV_ModStart> ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(1):<S2SV_blank>%s." , strerror ( errno ) <S2SV_ModEnd> ) ; shutdown ( <S2SV_ModStart> ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>message<S2SV_blank>from<S2SV_blank>initial<S2SV_blank>process<S2SV_blank>" "that<S2SV_blank>it<S2SV_blank>is<S2SV_blank>done<S2SV_blank>pre-initializing<S2SV_blank>(2):<S2SV_blank>%s" , strerror ( errno ) ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModEnd> if ( ( init_ctx <S2SV_ModStart> "Process<S2SV_blank>can<S2SV_blank>use<S2SV_blank>execve()<S2SV_blank>gainable<S2SV_blank>" "privileges." ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; <S2SV_ModStart> INFO ( "PR_SET_NO_NEW_PRIVS<S2SV_blank>is<S2SV_blank>set.<S2SV_blank>Process<S2SV_blank>cannot<S2SV_blank>use<S2SV_blank>execve()<S2SV_blank>" "gainable<S2SV_blank>privileges." ) ; } status = 3 ; ret = lxc_write_nointr ( ipc_socket , & status , sizeof ( status ) ) ; if ( ret <= 0 ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>set<S2SV_blank>up<S2SV_blank>LSM<S2SV_blank>labels<S2SV_blank>(3):<S2SV_blank>%s." , strerror ( errno ) ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 <S2SV_ModStart> { int on_exec ; ret = lxc_abstract_unix_recv_fd ( ipc_socket , & lsm_labelfd , NULL , 0 ) ; if ( ret <= 0 ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>parent<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s." , strerror ( errno ) ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 ) ; } <S2SV_ModStart> if ( lsm_set_label_at ( lsm_labelfd <S2SV_ModEnd> , on_exec , init_ctx <S2SV_ModStart> < 0 ) { SYSERROR ( "Failed<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label." ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; close ( lsm_labelfd ) ; rexit ( - 1 ) ; } close ( lsm_labelfd ) ; <S2SV_ModEnd> } if ( init_ctx <S2SV_ModStart> ( "Loading<S2SV_blank>seccomp<S2SV_blank>policy" ) ; shutdown ( ipc_socket , SHUT_RDWR ) ; rexit ( - 1 ) ; } shutdown ( ipc_socket , SHUT_RDWR ) ; close ( ipc_socket ) ; <S2SV_ModEnd> lxc_proc_put_context_info ( init_ctx ) <S2SV_ModStart> "Unable<S2SV_blank>to<S2SV_blank>clear<S2SV_blank>CLOEXEC<S2SV_blank>from<S2SV_blank>fd" ) ; } <S2SV_ModEnd> rexit ( payload ->
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int lsm_set_label_at ( int lsm_labelfd <S2SV_ModEnd> , int on_exec , <S2SV_ModStart> char * lsm_label ) { int fret = - 1 <S2SV_ModEnd> ; const char * <S2SV_ModStart> ) == 0 ) return 0 <S2SV_ModEnd> ; if ( strcmp <S2SV_ModStart> ) == 0 ) return 0 <S2SV_ModEnd> ; if ( strcmp <S2SV_ModStart> on_exec = 0 ; <S2SV_ModEnd> if ( strcmp ( <S2SV_ModStart> ( "Failed<S2SV_blank>to<S2SV_blank>write<S2SV_blank>apparmor<S2SV_blank>profile" ) ; <S2SV_ModEnd> goto out ; } <S2SV_ModStart> ( "Failed<S2SV_blank>to<S2SV_blank>write<S2SV_blank>apparmor<S2SV_blank>profile" ) ; <S2SV_ModEnd> goto out ; } <S2SV_ModStart> if ( write ( lsm_labelfd <S2SV_ModEnd> , command , size <S2SV_ModStart> ) { SYSERROR ( "Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label:<S2SV_blank>%s." , command ) ; goto out ; } INFO ( "Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s." , command ) ; } else if ( strcmp ( name , "SELinux" ) == 0 ) { if ( write ( lsm_labelfd , lsm_label , strlen ( lsm_label ) + 1 ) < 0 ) { SYSERROR ( "Unable<S2SV_blank>to<S2SV_blank>set<S2SV_blank>LSM<S2SV_blank>label" ) ; goto out ; } INFO ( "Set<S2SV_blank>LSM<S2SV_blank>label<S2SV_blank>to:<S2SV_blank>%s." , lsm_label ) ; } else <S2SV_ModEnd> { ERROR ( "Unable<S2SV_blank>to<S2SV_blank>restore<S2SV_blank>label<S2SV_blank>for<S2SV_blank>unknown<S2SV_blank>LSM:<S2SV_blank>%s" <S2SV_ModStart> , name ) ; goto out ; } fret = 0 ; <S2SV_ModEnd> out : free ( <S2SV_ModStart> ) ; if ( lsm_labelfd <S2SV_ModEnd> != - 1 ) <S2SV_ModStart> 1 ) close ( lsm_labelfd ) ; return fret <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> [ 2 ] ; <S2SV_ModEnd> signed long personality ; <S2SV_ModStart> ( pid ) { int procfd = - 1 ; <S2SV_ModStart> goto cleanup_error ; } procfd = open ( "/proc" , O_DIRECTORY | O_RDONLY | O_CLOEXEC ) ; if ( procfd < 0 ) { SYSERROR ( "Unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>/proc." <S2SV_ModEnd> ) ; goto cleanup_error <S2SV_ModStart> goto cleanup_error ; } status = 0 ; ret = lxc_write_nointr ( ipc_sockets [ 0 ] , & status , sizeof ( status ) <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> <= 0 ) { ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>initialization<S2SV_blank>(0)" <S2SV_ModEnd> ) ; goto cleanup_error <S2SV_ModStart> goto cleanup_error ; } ret = lxc_read_nointr_expect ( ipc_sockets [ 0 ] , & attached_pid , sizeof ( attached_pid ) , NULL ) ; if ( ret <= 0 ) { if ( ret != 0 ) ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>pid<S2SV_blank>of<S2SV_blank>attached<S2SV_blank>process" ) ; goto cleanup_error ; } <S2SV_ModStart> 0 ) ERROR ( "error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>receive<S2SV_blank>notification<S2SV_blank>" "from<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>(1)" <S2SV_ModEnd> ) ; goto cleanup_error <S2SV_ModStart> ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>notify<S2SV_blank>attached<S2SV_blank>process<S2SV_blank>for<S2SV_blank>" "initialization<S2SV_blank>(2):<S2SV_blank>%s." , strerror ( errno ) <S2SV_ModEnd> ) ; goto cleanup_error <S2SV_ModStart> goto cleanup_error ; } expected = 3 ; ret = lxc_read_nointr_expect ( ipc_sockets [ 0 ] , & status , sizeof ( status ) , & expected ) ; if ( ret <= 0 ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>for<S2SV_blank>the<S2SV_blank>child<S2SV_blank>to<S2SV_blank>tell<S2SV_blank>us<S2SV_blank>to<S2SV_blank>open<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(3):<S2SV_blank>%s." , strerror ( errno ) ) ; goto cleanup_error ; } if ( ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_LSM ) && init_ctx -> lsm_label ) { int on_exec , labelfd ; on_exec = options -> attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0 ; labelfd = lsm_openat ( procfd , attached_pid , on_exec ) ; if ( labelfd < 0 ) goto cleanup_error ; ret = lxc_abstract_unix_send_fd ( ipc_sockets [ 0 ] , labelfd , NULL , 0 ) ; if ( ret <= 0 ) { ERROR ( "Error<S2SV_blank>using<S2SV_blank>IPC<S2SV_blank>to<S2SV_blank>send<S2SV_blank>child<S2SV_blank>LSM<S2SV_blank>fd<S2SV_blank>(4):<S2SV_blank>%s." , strerror ( errno ) ) ; goto cleanup_error ; } } <S2SV_ModStart> 0 ; cleanup_error : if ( procfd >= 0 ) close ( procfd ) ; <S2SV_ModStart> namespaces |= CLONE_NEWCGROUP ; <S2SV_ModEnd> ret = lxc_attach_to_ns ( <S2SV_ModStart> exec_payload = exec_payload , <S2SV_ModEnd> } ; pid =
<S2SV_ModStart> fc -> pid , fc -> uid ,
<S2SV_ModStart> ( pid_t tpid , uid_t tuid , <S2SV_ModStart> ) { if ( ! may_move_pid ( tpid , tuid , <S2SV_ModEnd> cred . pid ) <S2SV_ModStart> cred . pid ) ) { fail = true ; break ; } if ( fprintf ( pids_file , "%d" , ( int ) cred . pid )
<S2SV_ModStart> * nextcg ) { <S2SV_ModEnd> bool answer = false <S2SV_ModStart> false ; char * c2 = get_pid_cgroup ( pid , contrl ) ; char * linecmp <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> ( ! c2 ) return false <S2SV_ModEnd> ; prune_init_slice ( c2 <S2SV_ModStart> if ( nextcg ) { <S2SV_ModStart> , cg ) ; } <S2SV_ModStart> answer = true ; out : free ( c2 <S2SV_ModEnd> ) ; return answer
<S2SV_ModStart> { if ( ! caller_may_see_dir ( fc -> pid , controller , cgroup ) ) { ret = - ENOENT ; goto out ; } if ( !
<S2SV_ModStart> NULL , * controller , * next = NULL <S2SV_ModStart> ; if ( ! caller_is_in_ancestor ( fc -> pid , controller , path1 , & next ) ) { if ( fpath && strcmp ( next , fpath ) == 0 ) ret = - EEXIST ; else ret = - ENOENT <S2SV_ModEnd> ; goto out ; <S2SV_ModStart> } if ( ! fc_may_access ( fc , controller , path1 , NULL , O_RDWR ) ) { ret = - EACCES ; goto out ; } if ( ! <S2SV_ModStart> ( cgdir ) ; free ( next ) ;
<S2SV_ModStart> ; if ( ! caller_may_see_dir ( fc -> pid , controller , path1 ) ) { ret = - ENOENT ; goto out ; } if ( !
<S2SV_ModStart> } if ( cgroup ) { if ( ! caller_may_see_dir ( fc -> pid , controller , cgroup ) ) return - ENOENT ; if ( <S2SV_ModEnd> ! fc_may_access ( fc <S2SV_ModStart> , O_RDONLY ) ) <S2SV_ModEnd> return - EACCES ;
<S2SV_ModStart> NULL , * controller , * next = NULL <S2SV_ModStart> goto out ; } <S2SV_ModEnd> if ( ! caller_is_in_ancestor <S2SV_ModStart> controller , cgroup , & next ) ) { if ( ! fpath || strcmp ( next , fpath ) == 0 ) ret = - EBUSY ; else ret = - ENOENT ; goto out ; } if ( ! fc_may_access ( fc , controller , cgdir , NULL , O_WRONLY <S2SV_ModEnd> ) ) { ret <S2SV_ModStart> } if ( ! caller_is_in_ancestor ( fc -> pid , controller , cgroup , NULL ) ) { ret = - EACCES ; goto out ; } if ( ! <S2SV_ModStart> ( cgdir ) ; free ( next ) ;
<S2SV_ModStart> test_ptr ) == IS_ARRAY && Z_TYPE_PP ( ptr ) == IS_ARRAY
<S2SV_ModStart> == tmp ) { goto softfail <S2SV_ModEnd> ; } case 'A' <S2SV_ModStart> ) ) ) { goto softfail <S2SV_ModEnd> ; } state -> <S2SV_ModStart> -> end ) ; softfail : state -> offset = 0 ;
<S2SV_ModStart> = 3 * len + 8
<S2SV_ModStart> { char * to = g . inf , * sufx = "" ; size_t pre = 0 <S2SV_ModEnd> ; if ( g <S2SV_ModStart> ( g . decode ) { if ( <S2SV_ModEnd> ( g . headis <S2SV_ModStart> != NULL ) { pre = justname ( g . inf ) - g . inf ; to = justname ( g . hname ) <S2SV_ModEnd> ; len = strlen <S2SV_ModStart> len = strlen ( to ) ; } else if ( <S2SV_ModEnd> strcmp ( to + <S2SV_ModStart> len , ".tgz" ) == 0 ) sufx = ".tar" ; } else sufx = g . sufx ; <S2SV_ModEnd> g . outf = <S2SV_ModStart> outf = MALLOC ( pre + len + strlen ( sufx ) <S2SV_ModEnd> + 1 ) ; <S2SV_ModStart> g . outf , g . inf , pre ) ; memcpy <S2SV_ModEnd> ( g . outf <S2SV_ModStart> g . outf + pre , to , len ) ; strcpy ( g . outf + pre + len , <S2SV_ModEnd> sufx ) ; g
<S2SV_ModStart> ) return MS_FALSE ; if ( strchr ( timestring , '\\'' ) || strchr ( timestring , '\\\\' ) ) { msSetError ( MS_MISCERR , "Invalid<S2SV_blank>time<S2SV_blank>filter." , "msPostGISLayerSetTimeFilter()" ) ; return MS_FALSE ; }
<S2SV_ModStart> ; jpc_tsfb_band_t bnds [ JPC_MAXBANDS <S2SV_ModEnd> ] ; jpc_pchg_t *
<S2SV_ModStart> ; int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0 ;
<S2SV_ModStart> { int m ; if ( n < 0 || n >= 32 ) { return EOF ; } <S2SV_ModEnd> assert ( ! (
<S2SV_ModStart> "expn[%d]<S2SV_blank>=<S2SV_blank>0x%04x;<S2SV_blank>mant[%d]<S2SV_blank>=<S2SV_blank>0x%04x;\\n" , i , JAS_CAST ( unsigned , <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd -> <S2SV_ModStart> [ i ] ) ) , i , JAS_CAST ( unsigned , <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd -> <S2SV_ModStart> i ] ) ) )
<S2SV_ModStart> -> hsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> ( pirlvl -> prcwidthexpn <S2SV_ModStart> -> vsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> ( pirlvl -> prcheightexpn <S2SV_ModStart> picomp -> hsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> ( pirlvl -> prcwidthexpn <S2SV_ModStart> picomp -> vsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> ( pirlvl -> prcheightexpn
<S2SV_ModStart> ; if ( roishift < 0 ) { jas_eprintf ( "warning:<S2SV_blank>forcing<S2SV_blank>negative<S2SV_blank>ROI<S2SV_blank>shift<S2SV_blank>to<S2SV_blank>zero<S2SV_blank>" "(bitstream<S2SV_blank>is<S2SV_blank>probably<S2SV_blank>corrupt)\\n" ) ; roishift = 0 ; } if ( roishift <S2SV_ModStart> ; mask = ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << numbps ) -
<S2SV_ModStart> -> numlvls > 0 && jas_seq2d_size ( a )
<S2SV_ModStart> hdr -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; } <S2SV_ModEnd> actualnumcolors = hdr ->
<S2SV_ModStart> cmap = 0 ; assert ( <S2SV_ModEnd> jas_image_numcmpts ( image ) <S2SV_ModStart> jas_image_numcmpts ( image ) <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if ( ! ( <S2SV_ModEnd> data [ i ] <S2SV_ModStart> ( image ) ) ) ) { goto error ; } <S2SV_ModEnd> } pad = RAS_ROWSIZE <S2SV_ModStart> == EOF ) { goto error ; } z = ( z << 8 ) | c ; nz += 8 ; } v = ( z >> ( nz - hdr -> depth ) ) & RAS_ONES ( hdr -> depth ) ; z &= RAS_ONES ( nz - hdr -> depth ) ; nz -= hdr -> depth ; if ( jas_image_numcmpts ( image ) == 3 ) { jas_matrix_setv ( data [ 0 ] , x , ( RAS_GETRED ( v ) ) ) ; jas_matrix_setv ( data [ 1 ] , x , ( RAS_GETGREEN ( v ) ) ) ; jas_matrix_setv ( data [ 2 ] , x , ( RAS_GETBLUE ( v ) ) ) ; } else { jas_matrix_setv ( data [ 0 ] , x , ( v ) ) ; } } if ( pad ) { if ( ( c = jas_stream_getc ( in ) ) == EOF ) { goto error ; } } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { if ( jas_image_writecmpt ( image , i , 0 , y , hdr -> width , 1 , data [ i ] ) ) { goto error ; } } } for ( i = 0 ; i < jas_image_numcmpts ( image ) ; ++ i ) { jas_matrix_destroy ( data [ i ] ) ; data [ i ] = 0 ; } return 0 ; error : for ( i = 0 ; i < 3 ; ++ i ) { if ( data [ i ] ) { jas_matrix_destroy ( data [ i ] ) ; } } <S2SV_ModStart> - 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; int i ; assert ( numcmpts <= 3 ) ; for ( i = 0 ; i < 3 ; ++ i ) { data [ i ] = 0 ; } <S2SV_ModStart> ++ i ) { if ( ! ( <S2SV_ModStart> ( image ) ) ) ) { goto error ; } <S2SV_ModEnd> } rowsize = RAS_ROWSIZE <S2SV_ModStart> ] ) ) { goto error <S2SV_ModEnd> ; } } z <S2SV_ModStart> == EOF ) { goto error ; } nz -= 8 ; z &= RAS_ONES ( nz ) ; } } if ( nz > 0 ) { c = ( z >> ( 8 - nz ) ) & RAS_ONES ( nz ) ; if ( jas_stream_putc ( out , c ) == EOF ) { goto error ; } } if ( pad % 2 ) { if ( jas_stream_putc ( out , 0 ) == EOF ) { goto error ; } } } for ( i = 0 ; i < numcmpts ; ++ i ) { jas_matrix_destroy ( data [ i ] ) ; data [ i ] = 0 ; } return 0 ; error : for ( i = 0 ; i < numcmpts ; ++ i ) { if ( data [ i ] ) { jas_matrix_destroy ( data [ i ] ) ; } } <S2SV_ModStart> - 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> unsigned char * buf <S2SV_ModEnd> ; assert ( bufsize <S2SV_ModStart> char ) ) ) && bufsize

<S2SV_ModStart> int m ; int hstartrow <S2SV_ModEnd> ; if ( bufsize <S2SV_ModStart> >= 2 ) { hstartrow <S2SV_ModEnd> = ( numrows + <S2SV_ModStart> m = numrows - hstartrow <S2SV_ModEnd> ; n = m <S2SV_ModStart> = & a [ hstartrow <S2SV_ModEnd> * stride ] ;
<S2SV_ModStart> int m ; int hstartrow <S2SV_ModEnd> ; if ( bufsize <S2SV_ModStart> ! ( buf = jas_alloc3 ( bufsize , JPC_QMFB_COLGRPSIZE , <S2SV_ModEnd> sizeof ( jpc_fix_t ) <S2SV_ModStart> >= 2 ) { hstartrow <S2SV_ModEnd> = ( numrows + <S2SV_ModStart> m = numrows - hstartrow <S2SV_ModEnd> ; n = m <S2SV_ModStart> = & a [ hstartrow <S2SV_ModEnd> * stride ] ;
<S2SV_ModStart> ! ( buf = jas_alloc3 ( bufsize , numcols <S2SV_ModEnd> , sizeof ( jpc_fix_t
<S2SV_ModStart> i ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } if (
<S2SV_ModStart> ; long n ; image = 0 ; info = 0 ; <S2SV_ModStart> ( "cannot<S2SV_blank>get<S2SV_blank>header\\n" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG ( <S2SV_ModStart> ( "cannot<S2SV_blank>get<S2SV_blank>info\\n" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG ( <S2SV_ModStart> ( 1 , ( "BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%ld;<S2SV_blank>width<S2SV_blank>%ld;<S2SV_blank>height<S2SV_blank>%ld;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>" "depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%ld;<S2SV_blank>siz<S2SV_blank>%ld;<S2SV_blank>hres<S2SV_blank>%ld;<S2SV_blank>vres<S2SV_blank>%ld;<S2SV_blank>numcolors<S2SV_blank>%ld;<S2SV_blank>" "mincolors<S2SV_blank>%ld\\n" , JAS_CAST ( long <S2SV_ModEnd> , info -> len <S2SV_ModStart> , info -> len ) , JAS_CAST ( long <S2SV_ModStart> , info -> width ) , JAS_CAST ( long <S2SV_ModStart> , info -> height ) , JAS_CAST ( long <S2SV_ModStart> , info -> numplanes ) , JAS_CAST ( long , info -> depth ) , JAS_CAST ( long <S2SV_ModEnd> , info -> enctype <S2SV_ModStart> , info -> enctype ) , JAS_CAST ( long <S2SV_ModStart> , info -> siz ) , JAS_CAST ( long <S2SV_ModStart> , info -> hres ) , JAS_CAST ( long <S2SV_ModStart> , info -> vres ) , JAS_CAST ( long , info -> numcolors ) , JAS_CAST ( long <S2SV_ModEnd> , info -> mincolors <S2SV_ModStart> -> mincolors ) ) ) ; if ( info -> width < 0 || info -> height < 0 || info -> numplanes < 0 || info -> depth < 0 || info -> siz < 0 || info -> hres < 0 || info -> vres < 0 ) { jas_eprintf ( "corrupt<S2SV_blank>bit<S2SV_blank>stream\\n" ) ; goto error ; } <S2SV_ModEnd> if ( ! bmp_issupported <S2SV_ModStart> ( "error:<S2SV_blank>unsupported<S2SV_blank>BMP<S2SV_blank>encoding\\n" ) ; goto error <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ( "error:<S2SV_blank>possibly<S2SV_blank>bad<S2SV_blank>bitmap<S2SV_blank>offset?\\n" ) ; goto error <S2SV_ModEnd> ; } if ( <S2SV_ModStart> n ) ) { goto error <S2SV_ModEnd> ; } } numcmpts <S2SV_ModStart> ) ) ) { goto error <S2SV_ModEnd> ; } if ( <S2SV_ModStart> image ) ) { goto error ; } <S2SV_ModStart> ( info ) ; return image ; error : if ( info ) { bmp_info_destroy ( info ) ; } if ( image ) { <S2SV_ModStart> ( image ) ; } <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( inmem ) ? jas_stream_memopen2 <S2SV_ModEnd> ( 0 , size
<S2SV_ModStart> { int m ; if ( n < 0 ) { jas_deprecated ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_gobble" ) ; }
<S2SV_ModStart> int bufsize ) { char * new_buf ; size_t new_bufsize <S2SV_ModEnd> ; JAS_DBGLOG ( 100 <S2SV_ModStart> ) ; if ( bufsize < 0 ) { jas_deprecated ( "negative<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>for<S2SV_blank>jas_stream_memopen" ) ; } if ( buf && bufsize <= 0 ) { jas_eprintf ( "Invalid<S2SV_blank>use<S2SV_blank>of<S2SV_blank>jas_stream_memopen<S2SV_blank>detected.\\n" ) ; jas_deprecated ( "A<S2SV_blank>user-provided<S2SV_blank>buffer<S2SV_blank>for<S2SV_blank>" "jas_stream_memopen<S2SV_blank>cannot<S2SV_blank>be<S2SV_blank>growable.\\n" ) ; } <S2SV_ModEnd> if ( bufsize <= <S2SV_ModStart> <= 0 ) { new_bufsize = 0 ; new_buf = 0 <S2SV_ModEnd> ; } else { <S2SV_ModStart> ; } else { new_bufsize = bufsize ; new_buf = buf ; } return jas_stream_memopen2 ( new_buf , new_bufsize ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> { int m ; if ( n < 0 ) { jas_deprecated ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_pad" ) ; }
<S2SV_ModStart> char * bufptr ; if ( cnt < 0 ) { jas_deprecated ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_read" ) ; }
<S2SV_ModStart> char * bufptr ; if ( cnt < 0 ) { jas_deprecated ( "negative<S2SV_blank>count<S2SV_blank>for<S2SV_blank>jas_stream_write" ) ; }
<S2SV_ModStart> int cnt ) { ssize_t <S2SV_ModEnd> n ; assert (
<S2SV_ModStart> jas_stream_memobj_t * m , size_t <S2SV_ModEnd> bufsize ) { unsigned <S2SV_ModStart> char * buf ; <S2SV_ModEnd> JAS_DBGLOG ( 100 , <S2SV_ModStart> ( 100 , ( "mem_resize(%p,<S2SV_blank>%zu)\\n" <S2SV_ModEnd> , m , bufsize <S2SV_ModStart> bufsize ) ) ; if ( ! bufsize ) { jas_eprintf ( "mem_resize<S2SV_blank>was<S2SV_blank>not<S2SV_blank>really<S2SV_blank>designed<S2SV_blank>to<S2SV_blank>handle<S2SV_blank>a<S2SV_blank>buffer<S2SV_blank>of<S2SV_blank>size<S2SV_blank>0\\n" "This<S2SV_blank>may<S2SV_blank>not<S2SV_blank>work.\\n" ) ; }
<S2SV_ModStart> * ) obj ; size_t <S2SV_ModEnd> newpos ; JAS_DBGLOG (
<S2SV_ModStart> int cnt ) { size_t <S2SV_ModEnd> n ; int ret <S2SV_ModStart> * ) obj ; size_t newbufsize ; size_t <S2SV_ModEnd> newpos ; assert ( <S2SV_ModStart> < newpos ) { if ( ! jas_safe_size_mul ( newbufsize , 2 , & newbufsize ) ) { <S2SV_ModEnd> JAS_DBGLOG ( 100 , <S2SV_ModStart> ( 100 , ( "new<S2SV_blank>buffer<S2SV_blank>size<S2SV_blank>would<S2SV_blank>cause<S2SV_blank>overflow\\n" ) ) ; <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> 1 ; } } JAS_DBGLOG ( 100 , ( "mem_write<S2SV_blank>resizing<S2SV_blank>from<S2SV_blank>%d<S2SV_blank>to<S2SV_blank>%zu\\n" , m -> bufsize_ , newbufsize ) ) ; assert ( newbufsize > 0 ) ; if ( mem_resize ( m , newbufsize ) ) { return - 1 ; } }
<S2SV_ModStart> ; char * fmtname ; int debug <S2SV_ModStart> verbose = 0 ; debug = 0 ; <S2SV_ModStart> ; break ; case OPT_DEBUG : debug = atoi ( jas_optarg ) ; break ; case <S2SV_ModStart> break ; } } jas_setdbglevel ( debug ) ; <S2SV_ModStart> ) ) ) { jas_stream_close ( instream ) ;
<S2SV_ModStart> return 0 ; } JAS_DBGLOG ( 1 , ( "BMP<S2SV_blank>header:<S2SV_blank>magic<S2SV_blank>0x%x;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>res1<S2SV_blank>%d;<S2SV_blank>res2<S2SV_blank>%d;<S2SV_blank>off<S2SV_blank>%d\\n" , hdr . magic , hdr . siz , hdr . reserved1 , hdr . reserved2 , hdr . off ) ) ; <S2SV_ModStart> return 0 ; } JAS_DBGLOG ( 1 , ( "BMP<S2SV_blank>information:<S2SV_blank>len<S2SV_blank>%d;<S2SV_blank>width<S2SV_blank>%d;<S2SV_blank>height<S2SV_blank>%d;<S2SV_blank>numplanes<S2SV_blank>%d;<S2SV_blank>" "depth<S2SV_blank>%d;<S2SV_blank>enctype<S2SV_blank>%d;<S2SV_blank>siz<S2SV_blank>%d;<S2SV_blank>hres<S2SV_blank>%d;<S2SV_blank>vres<S2SV_blank>%d;<S2SV_blank>numcolors<S2SV_blank>%d;<S2SV_blank>" "mincolors<S2SV_blank>%d\\n" , info -> len , info -> width , info -> height , info -> numplanes , info -> depth , info -> enctype , info -> siz , info -> hres , info -> vres , info -> numcolors , info -> mincolors ) ) ;
<S2SV_ModStart> } v |= ( JAS_CAST ( uint_fast32_t , c ) <S2SV_ModEnd> << 24 ) ;
<S2SV_ModStart> ( 101 , ( "jas_malloc(%zu)\\n" <S2SV_ModEnd> , size ) )
<S2SV_ModStart> ( 101 , ( "jas_realloc(%x,<S2SV_blank>%zu)\\n" <S2SV_ModEnd> , ptr , size
<S2SV_ModStart> ; int i ; size_t size ; matrix = 0 ; <S2SV_ModStart> < 0 ) { goto error <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) ) { goto error <S2SV_ModEnd> ; } matrix -> <S2SV_ModStart> matrix -> datasize_ = 0 ; if ( ! jas_safe_size_mul ( numrows , numcols , & size ) ) { goto error ; } matrix -> datasize_ = size <S2SV_ModEnd> ; if ( matrix <S2SV_ModStart> ) ) ) { goto error <S2SV_ModEnd> ; } } if <S2SV_ModStart> ) ) ) { goto error <S2SV_ModEnd> ; } } for <S2SV_ModStart> ; return matrix ; error : if ( matrix ) { jas_matrix_destroy ( matrix ) ; } return 0 ;
<S2SV_ModStart> picomp -> pirlvls ; if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> r ) % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpx ) ) <S2SV_ModStart> r ) % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpy ) )
<S2SV_ModStart> ++ pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> -> hsamp * ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << ( pirlvl -> <S2SV_ModStart> -> vsamp * ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << ( pirlvl -> <S2SV_ModStart> r ) % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpx ) ) <S2SV_ModStart> r ) % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpy ) )

<S2SV_ModStart> ++ pirlvl ) { if ( pirlvl -> prcwidthexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 || pirlvl -> prcheightexpn + pi -> picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - 2 ) { return - 1 ; } <S2SV_ModStart> -> hsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> ( pirlvl -> prcwidthexpn <S2SV_ModStart> -> vsamp * ( JAS_CAST ( uint_fast32_t , 1 ) << <S2SV_ModEnd> ( pirlvl -> prcheightexpn <S2SV_ModStart> r ) % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpx ) ) <S2SV_ModStart> -> x % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpx ) ) <S2SV_ModStart> r ) % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpy ) ) <S2SV_ModStart> -> y % ( JAS_CAST ( uint_fast32_t , 1 ) <S2SV_ModEnd> << rpy ) )

<S2SV_ModStart> ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( "all<S2SV_blank>tiles<S2SV_blank>are<S2SV_blank>outside<S2SV_blank>the<S2SV_blank>image<S2SV_blank>area\\n" ) ; return - 1 ; } if (

<S2SV_ModStart> -> info = boxinfo <S2SV_ModEnd> ; box -> len <S2SV_ModStart> datalen ) ) { <S2SV_ModEnd> jas_eprintf ( "cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n" ) <S2SV_ModStart> jas_stream_rewind ( tmpstream ) ; box -> ops = & boxinfo -> ops
<S2SV_ModStart> ; size_t max_mem ; size_t max_samples ; char optstr [ 32 ] ; <S2SV_ModStart> [ 0 ] ; max_samples = 64 * JAS_MEBI ; <S2SV_ModStart> ; break ; case OPT_MAXSAMPLES : max_samples = strtoull ( jas_optarg , 0 , 10 ) ; break ; case <S2SV_ModStart> "unknown<S2SV_blank>image<S2SV_blank>format\\n" ) ; } snprintf ( optstr , sizeof ( optstr ) , "max_samples=%-zu" , max_samples ) ; <S2SV_ModStart> instream , fmtid , optstr <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> if ( ! ( fmtname = jas_image_fmttostr ( fmtid ) ) ) { jas_eprintf ( "format<S2SV_blank>name<S2SV_blank>lookup<S2SV_blank>failed\\n" ) ; return EXIT_FAILURE ; } if ( ! ( <S2SV_ModStart> = 0 ; } printf ( "%s<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%d<S2SV_blank>%ld\\n" , fmtname <S2SV_ModEnd> , numcmpts , width <S2SV_ModStart> height , depth , JAS_CAST ( long , jas_image_rawsize ( image ) <S2SV_ModEnd> ) ) ; jas_image_destroy
<S2SV_ModStart> ; size_t j ; jas_uchar <S2SV_ModEnd> * dp ; dp
<S2SV_ModStart> * val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if ( <S2SV_ModStart> ( - JAS_CAST ( jas_longlong <S2SV_ModEnd> , ( ( ( <S2SV_ModStart> ) : JAS_CAST ( jas_longlong <S2SV_ModEnd> , tmp ) ;
<S2SV_ModStart> * val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if (
<S2SV_ModStart> * val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if (
<S2SV_ModStart> * val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if (
<S2SV_ModStart> , int n , jas_ulonglong <S2SV_ModEnd> * val ) { <S2SV_ModStart> ; int c ; jas_ulonglong <S2SV_ModEnd> v ; v =
<S2SV_ModStart> jas_iccprof_t * jas_iccprof_createfrombuf ( jas_uchar <S2SV_ModEnd> * buf , int
<S2SV_ModStart> , int n , jas_longlong val ) { jas_ulonglong <S2SV_ModEnd> tmp ; tmp =
<S2SV_ModStart> , int n , jas_ulonglong <S2SV_ModEnd> val ) { int
<S2SV_ModStart> - 1 ; } if ( siz -> comps [ i ] . hsamp == 0 || siz -> comps [ i ] . hsamp > 255 ) { jas_eprintf ( "invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , siz -> comps [ i ] . hsamp ) ; jas_free ( siz -> comps ) ; return - 1 ; } if ( siz -> comps [ i ] . vsamp == 0 || siz -> comps [ i ] . vsamp > 255 ) { jas_eprintf ( "invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , siz -> comps [ i ] . vsamp ) ; jas_free ( siz -> comps ) ; return - 1 ; }
<S2SV_ModStart> jpc_dec_cmpt_t * cmpt ; size_t size ; <S2SV_ModStart> -> tileheight ) ; if ( ! jas_safe_size_mul ( dec -> numhtiles , dec -> numvtiles , & size <S2SV_ModEnd> ) ) { return <S2SV_ModStart> - 1 ; } dec -> numtiles = size ; JAS_DBGLOG ( 10 , ( "numtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numhtiles<S2SV_blank>=<S2SV_blank>%d;<S2SV_blank>numvtiles<S2SV_blank>=<S2SV_blank>%d;\\n" , dec -> numtiles , dec -> numhtiles , dec -> numvtiles ) ) ; if ( ! ( dec -> tiles = jas_alloc2 ( dec -> numtiles , sizeof ( jpc_dec_tile_t ) ) ) ) { return - 1 ; }
<S2SV_ModStart> { jas_eprintf ( "RCT<S2SV_blank>requires<S2SV_blank>at<S2SV_blank>least<S2SV_blank>three<S2SV_blank>components\\n" ) ; return - 1 ; } if ( ! jas_image_cmpt_domains_same ( dec -> image ) ) { jas_eprintf ( "RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n" <S2SV_ModStart> - 1 ; } if ( ! jas_image_cmpt_domains_same ( dec -> image ) ) { jas_eprintf ( "RCT<S2SV_blank>requires<S2SV_blank>all<S2SV_blank>components<S2SV_blank>have<S2SV_blank>the<S2SV_blank>same<S2SV_blank>domain\\n" ) ; return - 1 ; }
<S2SV_ModStart> break ; } } <S2SV_ModEnd> if ( ! cmpt <S2SV_ModStart> goto error ; } jas_tvparser_destroy ( tvp ) ;
<S2SV_ModStart> -> len = len ; JAS_DBGLOG ( 10 , ( "preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%d\\n" , \'"\' , boxinfo -> name , \'"\' , box -> type , box -> len ) ) <S2SV_ModStart> datalen ) ) { box -> ops = & jp2_boxinfo_unk . ops ;
<S2SV_ModStart> ) { jas_eprintf ( "got<S2SV_blank>box<S2SV_blank>type<S2SV_blank>%s\\n" <S2SV_ModEnd> , box -> info
<S2SV_ModStart> ! ( box = jp2_box_create0 ( <S2SV_ModEnd> ) ) ) { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> box -> type =
<S2SV_ModStart> ! ( box = jp2_box_create0 ( ) ) ) { goto error ; } <S2SV_ModEnd> if ( jp2_getuint32 ( <S2SV_ModStart> ( 10 , ( "preliminary<S2SV_blank>processing<S2SV_blank>of<S2SV_blank>JP2<S2SV_blank>box:<S2SV_blank>" "type=%c%s%c<S2SV_blank>(0x%08x);<S2SV_blank>length=%" PRIuFAST32 "\\n" <S2SV_ModEnd> , \'"\' , boxinfo <S2SV_ModStart> == 1 ) { JAS_DBGLOG ( 10 , ( "big<S2SV_blank>length\\n" ) ) ;
<S2SV_ModStart> ) ) ) { jas_eprintf ( "cannot<S2SV_blank>copy<S2SV_blank>box<S2SV_blank>data\\n" ) ;
<S2SV_ModStart> ; unsigned int i ; bpcc -> bpcs = 0
<S2SV_ModStart> ; unsigned int channo ; cdef -> ents = 0
<S2SV_ModStart> ; unsigned int i ; cmap -> ents = 0
<S2SV_ModStart> lutdata = 0 ; pclr -> bpc = 0 ;
<S2SV_ModStart> pirlvl -> prcwidthexpn + <S2SV_ModEnd> picomp -> numrlvls > <S2SV_ModStart> pirlvl -> prcheightexpn + <S2SV_ModEnd> picomp -> numrlvls >
<S2SV_ModStart> ; uint_fast8_t tmp ; siz -> comps = 0 ; <S2SV_ModStart> numcomps ) ) { goto error ; } if ( ! siz -> width || ! siz -> height ) { jas_eprintf ( "reference<S2SV_blank>grid<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n" ) ; goto error ; } if ( ! siz -> tilewidth || ! siz -> tileheight ) { jas_eprintf ( "tile<S2SV_blank>cannot<S2SV_blank>have<S2SV_blank>zero<S2SV_blank>area\\n" ) ; goto error ; } if ( ! siz -> numcomps || siz -> numcomps > 16384 ) { jas_eprintf ( "number<S2SV_blank>of<S2SV_blank>components<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto error ; } if ( siz -> xoff >= siz -> width ) { jas_eprintf ( "XOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto error ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( "YOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto error ; } if ( siz -> tilexoff > siz -> xoff || siz -> tilexoff + siz -> tilewidth <= siz -> xoff ) { jas_eprintf ( "XTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto error ; } if ( siz -> tileyoff > siz -> yoff || siz -> tileyoff + siz -> tileheight <= siz -> yoff ) { jas_eprintf ( "YTOsiz<S2SV_blank>not<S2SV_blank>in<S2SV_blank>permissible<S2SV_blank>range\\n" ) ; goto error ; } if ( ! ( siz -> comps = jas_alloc2 ( siz -> numcomps , sizeof ( jpc_sizcomp_t ) ) ) ) { goto error ; } for ( i = 0 ; i < siz -> numcomps ; ++ i ) { if ( jpc_getuint8 ( in , & tmp ) || jpc_getuint8 ( in , & siz -> comps [ i ] . hsamp ) || jpc_getuint8 ( in , & siz -> comps [ i ] . vsamp ) ) { goto error ; } if ( siz -> comps [ i ] . hsamp == 0 || siz -> comps [ i ] . hsamp > 255 ) { jas_eprintf ( "invalid<S2SV_blank>XRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , siz -> comps [ i ] . hsamp ) ; goto error ; } if ( siz -> comps [ i ] . vsamp == 0 || siz -> comps [ i ] . vsamp > 255 ) { jas_eprintf ( "invalid<S2SV_blank>YRsiz<S2SV_blank>value<S2SV_blank>%d\\n" , siz -> comps [ i ] . vsamp ) ; goto error ; } siz -> comps [ i ] . sgnd = ( tmp >> 7 ) & 1 ; siz -> comps [ i ] . prec = ( tmp & 0x7f ) + 1 ; } if ( jas_stream_eof ( in ) ) { goto error ; } return 0 ; error : if ( siz -> comps ) { jas_free ( siz -> comps ) ; } <S2SV_ModStart> - 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> port = 0 ; size_t pathlen = 0 ; <S2SV_ModStart> ; case AF_UNIX : pathlen = sizeof ( <S2SV_ModEnd> ( ( struct sockaddr_un <S2SV_ModStart> sock_addr ) -> sun_path ) ; if ( MAXPATHLEN <= pathlen ) { pathlen = MAXPATHLEN - 1 ; } strncpy ( addr_text , ( ( struct sockaddr_un * ) sock_addr ) -> sun_path , pathlen ) ; addr_text [ pathlen <S2SV_ModEnd> ] = '\\0' ;
<S2SV_ModStart> ( ! el ) { if ( c -> rbytes > 1024 ) { char * ptr = c -> rcurr ; while ( * ptr == '<S2SV_blank>' ) { ++ ptr ; } if ( strcmp ( ptr , "get<S2SV_blank>" ) && strcmp ( ptr , "gets<S2SV_blank>" ) ) { conn_set_state ( c , conn_closing ) ; return 1 ; } } return 0 ; } <S2SV_ModEnd> cont = el +
<S2SV_ModStart> ; int res ; int num_allocs = 0 ; <S2SV_ModStart> -> rsize ) { if ( num_allocs == 4 ) { return gotdata ; } ++ num_allocs ;
<S2SV_ModStart> ; } it = limited_get <S2SV_ModEnd> ( key , nkey <S2SV_ModStart> , nkey , c <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> 0 && ntokens >= 4 <S2SV_ModEnd> && settings . lru_maintainer_thread <S2SV_ModStart> 0 && ntokens >= 4 <S2SV_ModEnd> && settings . lru_maintainer_thread
<S2SV_ModStart> ; } if ( ptr - c -> rcurr > 100 || ( strncmp ( ptr , "get<S2SV_blank>" , 4 ) && strncmp <S2SV_ModEnd> ( ptr , "gets<S2SV_blank>" <S2SV_ModStart> ( ptr , "gets<S2SV_blank>" , 5 )
<S2SV_ModStart> } } if ( <S2SV_ModEnd> udp_specified && settings .
<S2SV_ModStart> settings . udpport = 0 <S2SV_ModEnd> ; settings . inter
<S2SV_ModStart> goto error ; } memset ( newserv , 0 , sizeof ( struct service ) ) ;
<S2SV_ModStart> } } while ( ( i < ( int ) header_buf_used ) && ( <S2SV_ModStart> i ] == '\\n' )
<S2SV_ModStart> IGDdatas * ) d ; if ( l >= MINIUPNPC_URL_MAXSIZE ) l = MINIUPNPC_URL_MAXSIZE - 1
<S2SV_ModStart> struct xmlparser parser ; memset ( data , 0 , sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser . xmlstart
<S2SV_ModStart> struct xmlparser parser ; memset ( data , 0 , sizeof ( struct NameValueParserData ) ) <S2SV_ModEnd> ; parser . xmlstart
<S2SV_ModStart> ) ; if ( l > ( unsigned ) ( buf + n - p ) <S2SV_ModEnd> ) { syslog ( <S2SV_ModStart> ) ; if ( l > ( unsigned ) ( buf + n - p ) <S2SV_ModEnd> ) { syslog ( <S2SV_ModStart> ) ; if ( l > ( unsigned ) ( buf + n - p ) <S2SV_ModEnd> ) { syslog ( <S2SV_ModStart> ) ; if ( l > ( unsigned ) ( buf + n - p ) <S2SV_ModEnd> ) { syslog (
<S2SV_ModStart> { 0x05 , 0x00 } ; const char bad_command4 [ ] = { 0x04 , 0x01 , 0x60 , 0x8f , 0xff , 0xff , 0xff , 0x7f <S2SV_ModStart> , n ) ; if ( n == 0 ) { <S2SV_ModStart> ( s ) ; s = connect_unix_socket ( sockpath ) ; } n = SENDCOMMAND ( bad_command4 , sizeof ( bad_command4 ) ) ; n = read ( s , buf , sizeof ( buf ) ) ; printf ( "Response<S2SV_blank>received<S2SV_blank>%d<S2SV_blank>bytes\\n" , ( int ) n ) ; printresponse ( buf , n ) ; close ( s ) ;
<S2SV_ModStart> , "updateDevice()<S2SV_blank>:<S2SV_blank>memory<S2SV_blank>allocation<S2SV_blank>error" ) ; * pp = p -> next ;
<S2SV_ModStart> - 3 ; } if ( desc == NULL ) desc = "" ;
<S2SV_ModStart> curY += 8 ; <S2SV_ModEnd> break ; case 2 <S2SV_ModStart> curY += 8 ; <S2SV_ModEnd> break ; case 3 <S2SV_ModStart> curY += 4 ; <S2SV_ModEnd> break ; case 4 <S2SV_ModStart> 2 ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; }
<S2SV_ModStart> curY += 8 ; <S2SV_ModEnd> break ; case 2 <S2SV_ModStart> curY += 8 ; <S2SV_ModEnd> break ; case 3 <S2SV_ModStart> curY += 4 ; <S2SV_ModEnd> break ; case 4 <S2SV_ModStart> 2 ; break ; } while ( context -> pass > 0 && context -> pass < 4 && context -> curY >= p -> height ) { switch ( ++ context -> pass ) { case 2 : context -> curY = i -> posY + 4 ; break ; case 3 : context -> curY = i -> posY + 2 ; break ; case 4 : context -> curY = i -> posY + 1 ; break ; }
<S2SV_ModStart> -> parent ) ; if ( ( i -> width > i -> parent -> width ) || ( i -> height > i -> parent -> height ) ) { # if ! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log , "***<S2SV_blank>ERROR<S2SV_blank>***<S2SV_blank>Image<S2SV_blank>bigger<S2SV_blank>than<S2SV_blank>global<S2SV_blank>GIF<S2SV_blank>canvas<S2SV_blank>!\\n" ) ; # endif return - 1 ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if ! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log , "***<S2SV_blank>WARNING<S2SV_blank>***<S2SV_blank>Adjusting<S2SV_blank>X<S2SV_blank>position\\n" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if ! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log , "***<S2SV_blank>WARNING<S2SV_blank>***<S2SV_blank>Adjusting<S2SV_blank>Y<S2SV_blank>position\\n" ) ; # endif i -> posY = i -> parent -> height - i -> height ; }
<S2SV_ModStart> old_code = act_code ; if ( npix > 0 ) <S2SV_ModStart> ) = casspecial ; if ( npix >= ( <S2SV_ModEnd> stack_top - stackp ) <S2SV_ModStart> stack_top - stackp ) ) { WritePixels ( i , & context , stackp , stack_top - stackp ) ; } else if ( npix > 0 ) { WritePixels ( i , & context , stackp , npix ) ; } <S2SV_ModEnd> npix -= ( stack_top
<S2SV_ModStart> u64 base_addr , size ; if ( get_securelevel ( ) > 0 ) return - EPERM
<S2SV_ModStart> ; } else { # ifdef UPNP_ENABLE_POST_WRITE <S2SV_ModStart> ) return HTTP_UNAUTHORIZED ; # else return HTTP_NOT_FOUND ; # endif
<S2SV_ModStart> SizeOfHeader + 8 ) ) goto Error ; if ( ( Offset + Len ) > SizeOfTag + 8
<S2SV_ModStart> cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] == NULL ) { for ( j = 0 ; j < i ; j ++ ) { _cmsFree ( ContextID , c16 -> Curves [ j ] ) ; } _cmsFree ( ContextID , c16 -> Curves ) ; _cmsFree ( ContextID , c16 ) ; return NULL ; }
<S2SV_ModStart> ( Lut ) ; Lut = NULL ; <S2SV_ModStart> Result ; Error : if ( Lut != NULL )
<S2SV_ModStart> ( len - o - 4
<S2SV_ModStart> , "corrupt<S2SV_blank>BSON" ) ; VALIDATE_TEST ( "test59.bson" , BSON_VALIDATE_NONE , 9 , BSON_VALIDATE_NONE , "corrupt<S2SV_blank>BSON" ) ;
<S2SV_ModStart> mk_security_check_url ( sr -> uri_processed <S2SV_ModEnd> ) < 0 )
<S2SV_ModStart> fd ; sr -> fd_is_fdt = MK_FALSE ; sr ->
<S2SV_ModStart> > 0 ) { if ( sr -> fd_is_fdt == MK_TRUE ) { <S2SV_ModStart> ( sr ) ; } else { close ( sr -> fd_file ) ; }
<S2SV_ModStart> vhost_fdt_hash = hash ; sr -> fd_is_fdt = MK_TRUE ;
<S2SV_ModStart> i ; size_t e ; mrb_value nil <S2SV_ModStart> v ) ) { <S2SV_ModEnd> mrb_gc_mark ( mrb , <S2SV_ModStart> ) ; } } e = c -> stend - c -> stbase ; nil = mrb_nil_value ( ) ; for ( ; i < e ; i ++ ) { c -> stbase [ i ] = nil ;
<S2SV_ModStart> mrb -> c ; enum mrb_fiber_state status ; <S2SV_ModStart> mrb , c ) ; status = c -> status <S2SV_ModStart> if ( resume && <S2SV_ModEnd> status == MRB_FIBER_TRANSFERRED ) <S2SV_ModStart> ; } if ( <S2SV_ModEnd> status == MRB_FIBER_RUNNING || <S2SV_ModStart> status == MRB_FIBER_RUNNING || <S2SV_ModEnd> status == MRB_FIBER_RESUMED ) <S2SV_ModStart> ; } if ( <S2SV_ModEnd> status == MRB_FIBER_TERMINATED ) <S2SV_ModStart> "resuming<S2SV_blank>dead<S2SV_blank>fiber" ) ; } old_c <S2SV_ModEnd> -> status = resume <S2SV_ModStart> -> root_c ) ; fiber_switch_context ( mrb , c ) ; if ( <S2SV_ModEnd> status == MRB_FIBER_CREATED ) <S2SV_ModStart> , * e ; mrb_stack_extend ( mrb , len + 2 ) ; <S2SV_ModEnd> b = c -> <S2SV_ModStart> len ) ; } <S2SV_ModEnd> if ( vmexec )
<S2SV_ModStart> & orig ) ; fptr_orig = io_get_open_fptr ( mrb , orig ) ; <S2SV_ModStart> ) mrb_io_alloc ( mrb <S2SV_ModEnd> ) ; DATA_TYPE (
<S2SV_ModStart> ( * s && ( <S2SV_ModStart> * s != \'\\"\' ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 ) ) <S2SV_ModStart> char ) * s ) && ( ptmp != ( tmp + sizeof ( tmp ) - 1 )
<S2SV_ModStart> "%s" , s + 2 <S2SV_ModEnd> ) ; } return
<S2SV_ModStart> -> status = IMAP_FATAL ; return ; } if ( strlen ( idata -> buf ) < litlen ) { mutt_debug ( 1 , "Error<S2SV_blank>parsing<S2SV_blank>STATUS<S2SV_blank>mailbox\\n" )
<S2SV_ModStart> group [ LONG_STRING ] = "" <S2SV_ModStart> sscanf ( line , "%1023s<S2SV_blank>" ANUM "<S2SV_blank>" ANUM "<S2SV_blank>%c<S2SV_blank>%8191[^\\n]" <S2SV_ModEnd> , group , & <S2SV_ModStart> ) < 4 ) { mutt_debug ( 4 , "Cannot<S2SV_blank>parse<S2SV_blank>server<S2SV_blank>line:<S2SV_blank>%s\\n" , line ) ; return 0 ; } <S2SV_ModEnd> nntp_data = nntp_data_find (
<S2SV_ModStart> s ) ) { if ( dlen < 2 ) break ; dlen -= 2 <S2SV_ModEnd> ; * pt ++
<S2SV_ModStart> -> buf + 2 , sizeof ( obuf )
<S2SV_ModStart> -> buf + 2 , sizeof ( buf2 ) <S2SV_ModStart> -> buf + 2 , sizeof ( buf2 )
<S2SV_ModStart> const char * in , size_t olen <S2SV_ModStart> in += 4 ; if ( len == olen ) return len ; <S2SV_ModStart> != '=' ) { if ( len == olen ) return len ; <S2SV_ModStart> != '=' ) { if ( len == olen ) return len ;
<S2SV_ModStart> == ENCBASE64 ) { const int olen = <S2SV_ModEnd> 3 * len / <S2SV_ModStart> / 4 + 1 ; char * out = mutt_mem_malloc ( olen <S2SV_ModStart> ( out , it , olen
<S2SV_ModStart> ( buffer , encoded , sizeof ( buffer )
<S2SV_ModStart> ( out2 , out1 , sizeof ( out2 ) <S2SV_ModStart> ( out2 , out1 , sizeof ( out2 )
<S2SV_ModStart> + 1 ) ; if ( strlen ( line ) == 0 ) return - 1 ;
<S2SV_ModStart> struct ImapMbox mx ; size_t len = 0 ; <S2SV_ModStart> ( errstr ) ; len = <S2SV_ModStart> ( mbox ) , "%smailboxes<S2SV_blank>" <S2SV_ModEnd> , subscribe ? "" <S2SV_ModStart> ? "" : "un" ) ; imap_quote_string ( mbox + len , sizeof ( mbox ) - len , path , true <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> mutt_bcache_del ( bcache , cache_id ( id ) <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> pop_data -> bcache , cache_id ( ctx -> hdrs [ i ] -> data ) <S2SV_ModEnd> ) == 0 )
<S2SV_ModStart> pop_data -> bcache , cache_id ( h -> data ) <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> pop_data -> bcache , cache_id ( h -> data ) <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> pop_data -> bcache , cache_id ( h -> data ) <S2SV_ModEnd> ) ; else {
<S2SV_ModStart> pop_data -> bcache , cache_id ( <S2SV_ModStart> i ] -> data )
<S2SV_ModStart> unsigned char ) ) ; if ( fc . messages == NULL ) return - 1
<S2SV_ModStart> \'"\' ; dlen -= 3 <S2SV_ModEnd> ; for ( ;
<S2SV_ModStart> -> account . user , false <S2SV_ModStart> -> account . pass , false
<S2SV_ModStart> , list . name , true
<S2SV_ModStart> -> p . str , false <S2SV_ModStart> term ) , delim , false <S2SV_ModStart> -> p . str , false <S2SV_ModStart> -> p . str , false <S2SV_ModStart> -> p . str , false
<S2SV_ModStart> , dlen , buf , false
<S2SV_ModStart> const char * src , bool quote_backtick ) { const char * quote = "`\\"\\\\" ; if ( ! quote_backtick ) quote ++ <S2SV_ModEnd> ; char * pt
<S2SV_ModStart> return ; if ( is_link ( fname ) ) { fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n" , fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> == 0 ) { copy_file_as_user <S2SV_ModEnd> ( "/etc/skel/.zshrc" , fname <S2SV_ModStart> return ; if ( is_link ( fname ) ) { fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n" , fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> == 0 ) { copy_file_as_user <S2SV_ModEnd> ( "/etc/skel/.cshrc" , fname <S2SV_ModStart> return ; if ( is_link ( fname ) ) { fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n" , fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> == 0 ) { copy_file_as_user <S2SV_ModEnd> ( "/etc/skel/.bashrc" , fname
<S2SV_ModStart> ( "setregid" ) ; <S2SV_ModEnd> char * arg [ <S2SV_ModStart> [ 0 ] = "/bin/sh" <S2SV_ModEnd> ; arg [ 1
<S2SV_ModStart> == 0 ) { struct utsname u ; int rv = uname ( & u ) ; if ( rv != 0 ) errExit ( "uname" ) ; int major ; int minor ; if ( 2 != sscanf ( u . release , "%d.%d" , & major , & minor ) ) { fprintf ( stderr , "Error:<S2SV_blank>cannot<S2SV_blank>extract<S2SV_blank>Linux<S2SV_blank>kernel<S2SV_blank>version:<S2SV_blank>%s\\n" , u . version ) ; exit ( 1 ) ; } if ( major < 4 || ( major == 4 && minor < 8 ) ) { fprintf ( stderr , "Error:<S2SV_blank>--allow-debuggers<S2SV_blank>is<S2SV_blank>disabled<S2SV_blank>on<S2SV_blank>Linux<S2SV_blank>kernels<S2SV_blank>prior<S2SV_blank>to<S2SV_blank>4.8.<S2SV_blank>" "A<S2SV_blank>bug<S2SV_blank>in<S2SV_blank>ptrace<S2SV_blank>call<S2SV_blank>allows<S2SV_blank>a<S2SV_blank>full<S2SV_blank>bypass<S2SV_blank>of<S2SV_blank>the<S2SV_blank>seccomp<S2SV_blank>filter.<S2SV_blank>" "Your<S2SV_blank>current<S2SV_blank>kernel<S2SV_blank>version<S2SV_blank>is<S2SV_blank>%d.%d.\\n" , major , minor ) ; exit ( 1 ) ; }
<S2SV_ModStart> 1 ) ; } copy_file_as_user ( src , <S2SV_ModEnd> dest , getuid ( <S2SV_ModStart> , getgid ( ) <S2SV_ModEnd> , S_IRUSR | S_IWUSR <S2SV_ModStart> S_IRUSR | S_IWUSR ) ; fs_logger2 ( "clone" , dest <S2SV_ModEnd> ) ; unlink (
<S2SV_ModStart> 1 ) ; } copy_file_as_user ( src , <S2SV_ModEnd> dest , getuid ( <S2SV_ModStart> , getgid ( ) <S2SV_ModEnd> , S_IRUSR | S_IWUSR <S2SV_ModStart> S_IRUSR | S_IWUSR ) ; fs_logger2 ( "clone" , dest <S2SV_ModEnd> ) ; unlink (
<S2SV_ModStart> return ; if ( is_link ( fname ) ) { fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n" , fname ) ; exit ( 1 ) ; } if ( <S2SV_ModStart> == 0 ) { copy_file_as_user ( "/etc/skel/.zshrc" , fname , u , g , 0644 ) ; fs_logger ( "clone<S2SV_blank>/etc/skel/.zshrc" ) ; } else { touch_file_as_user ( fname , u , g , 0644 ) ; fs_logger2 ( "touch" , fname ) ; } free ( fname ) ; } else if ( arg_csh ) { if ( asprintf ( & fname , "%s/.cshrc" , homedir ) == - 1 ) errExit ( "asprintf" ) ; struct stat s ; if ( stat ( fname , & s ) == 0 ) return ; <S2SV_ModStart> if ( is_link ( fname <S2SV_ModEnd> ) ) { fprintf <S2SV_ModStart> fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n" , fname <S2SV_ModEnd> ) ; exit ( <S2SV_ModStart> ; } if ( stat ( "/etc/skel/.cshrc" , & s ) == 0 ) { copy_file_as_user ( "/etc/skel/.cshrc" , fname , u , g , 0644 ) ; fs_logger ( "clone<S2SV_blank>/etc/skel/.cshrc" ) ; } else { touch_file_as_user ( fname , u , g , 0644 ) ; fs_logger2 ( "touch" , fname ) ; } free ( fname ) ; } else { if ( asprintf ( & fname , "%s/.bashrc" , homedir <S2SV_ModEnd> ) == - 1 <S2SV_ModStart> 1 ) errExit ( "asprintf" ) ; struct stat s ; if ( stat ( fname , & s ) == 0 ) return ; if ( is_link ( fname ) ) { fprintf ( stderr , "Error:<S2SV_blank>invalid<S2SV_blank>%s<S2SV_blank>file\\n" , fname ) ; exit ( 1 ) ; } if ( stat ( "/etc/skel/.bashrc" , & s ) == 0 ) { copy_file_as_user ( "/etc/skel/.bashrc" , fname , u , g , 0644 <S2SV_ModEnd> ) ; fs_logger ( <S2SV_ModStart> ) ; fs_logger ( "clone<S2SV_blank>/etc/skel/.bashrc" ) ; <S2SV_ModEnd> } free ( fname <S2SV_ModStart> fname ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> src ) ) { char * rp = realpath ( src , NULL ) ; if ( ! rp ) { <S2SV_ModStart> fprintf ( stderr , "Error:<S2SV_blank>Cannot<S2SV_blank>access<S2SV_blank>%s\\n" , src <S2SV_ModEnd> ) ; exit ( <S2SV_ModStart> 1 ) ; } if ( strncmp ( rp , cfg . homedir , strlen ( cfg . homedir ) ) != 0 ) { <S2SV_ModEnd> fprintf ( stderr , <S2SV_ModStart> fprintf ( stderr , "Error:<S2SV_blank>.asoundrc<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symbolic<S2SV_blank>link<S2SV_blank>pointing<S2SV_blank>to<S2SV_blank>a<S2SV_blank>file<S2SV_blank>outside<S2SV_blank>home<S2SV_blank>directory\\n" ) ; exit ( 1 ) ; } free ( rp ) ; } copy_file_as_user ( src , dest , getuid ( ) , getgid ( ) , 0644 ) ; <S2SV_ModEnd> fs_logger2 ( "clone" , <S2SV_ModStart> ( "clone" , dest <S2SV_ModEnd> ) ; return 1
<S2SV_ModStart> fprintf ( stderr , "Warning:<S2SV_blank>invalid<S2SV_blank>.Xauthority<S2SV_blank>file\\n" ) ; return 0 ; } copy_file_as_user ( src , <S2SV_ModEnd> dest , getuid ( <S2SV_ModStart> , getgid ( ) , 0600 ) ; fs_logger2 ( "clone" , dest <S2SV_ModEnd> ) ; return 1
<S2SV_ModStart> 1 ) ; } copy_file_as_user <S2SV_ModEnd> ( src , dest <S2SV_ModStart> | S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( "clone" , <S2SV_ModStart> ( "clone" , dest <S2SV_ModEnd> ) ; unlink (
<S2SV_ModStart> 1 ) ; } copy_file_as_user <S2SV_ModEnd> ( src , dest <S2SV_ModStart> | S_IWUSR ) ; <S2SV_ModEnd> fs_logger2 ( "clone" , <S2SV_ModStart> ( "clone" , dest <S2SV_ModEnd> ) ; unlink (
<S2SV_ModStart> == 0 ) { <S2SV_ModEnd> copy_file ( "/etc/skel/.zshrc" , <S2SV_ModStart> g , 0644 ) ; <S2SV_ModEnd> fs_logger ( "clone<S2SV_blank>/etc/skel/.zshrc" ) <S2SV_ModStart> "clone<S2SV_blank>/etc/skel/.zshrc" ) ; } else { touch_file_as_user ( fname , u , g , 0644 <S2SV_ModEnd> ) ; fs_logger2 ( <S2SV_ModStart> , fname ) ; <S2SV_ModEnd> } free ( fname <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> copy_file ( "/etc/skel/.cshrc" , <S2SV_ModStart> g , 0644 ) ; <S2SV_ModEnd> fs_logger ( "clone<S2SV_blank>/etc/skel/.cshrc" ) <S2SV_ModStart> "clone<S2SV_blank>/etc/skel/.cshrc" ) ; } else { touch_file_as_user ( fname , u , g , 0644 <S2SV_ModEnd> ) ; fs_logger2 ( <S2SV_ModStart> , fname ) ; <S2SV_ModEnd> } free ( fname <S2SV_ModStart> == 0 ) { <S2SV_ModEnd> copy_file ( "/etc/skel/.bashrc" , <S2SV_ModStart> g , 0644 ) ; <S2SV_ModEnd> fs_logger ( "clone<S2SV_blank>/etc/skel/.bashrc" ) <S2SV_ModStart> "clone<S2SV_blank>/etc/skel/.bashrc" ) ; } <S2SV_ModEnd> free ( fname )
<S2SV_ModStart> rp ) ; } copy_file_as_user <S2SV_ModEnd> ( src , dest <S2SV_ModStart> , 0644 ) ; <S2SV_ModEnd> fs_logger2 ( "clone" , <S2SV_ModStart> ( "clone" , dest <S2SV_ModEnd> ) ; return 1
<S2SV_ModStart> return 0 ; } copy_file_as_user <S2SV_ModEnd> ( src , dest <S2SV_ModStart> , 0600 ) ; <S2SV_ModEnd> fs_logger2 ( "clone" , <S2SV_ModStart> ( "clone" , dest <S2SV_ModEnd> ) ; return 1
<S2SV_ModStart> ( fp ) ; unlink ( RUN_LIB_FILE ) ;
<S2SV_ModStart> ; # ifdef HAVE_SECCOMP create_empty_dir_as_root ( RUN_SECCOMP_DIR , 0755 ) ;
<S2SV_ModStart> save_nonewprivs ( ) ; <S2SV_ModEnd> save_cpu ( ) ; <S2SV_ModStart> ) rv ; } fs_rdonly ( RUN_SECCOMP_DIR ) ; # endif set_caps ( ) ; <S2SV_ModEnd> FILE * rj =
<S2SV_ModStart> ] ) ) { char t <S2SV_ModEnd> = from_hex ( s <S2SV_ModStart> s [ 2 ] ) ; * d ++ = ( char ) ( ( isprint ( t ) ) ? t : '<S2SV_blank>'
<S2SV_ModStart> ; } } } fix_google_param ( google_out ) ; fix_google_param ( google_sig ) ; fix_google_param ( google_reqId ) ; fix_google_param ( google_version ) ; fix_google_param ( responseHandler ) ; fix_google_param ( outFileName ) ;
<S2SV_ModStart> error ) ) { <S2SV_ModEnd> return - 1 ;
<S2SV_ModStart> ] . dimensions ; unsigned int actual_size = rtype == 2 ? n * 2 : n ; unsigned int limit_r_begin = ( r -> begin < actual_size ? r -> begin : actual_size ) ; unsigned int limit_r_end = ( r -> end < actual_size ? r -> end : actual_size ) ; int n_read = limit_r_end - limit_r_begin <S2SV_ModEnd> ; int part_read =
<S2SV_ModStart> residue_config + i ; unsigned int actual_size = f -> blocksize_1 / 2 ; unsigned int limit_r_begin = r -> begin < actual_size ? r -> begin : actual_size ; unsigned int limit_r_end = r -> end < actual_size ? r -> end : actual_size ; int n_read = limit_r_end - limit_r_begin <S2SV_ModEnd> ; int part_read =
<S2SV_ModStart> , inverse_db_table [ y & 255 <S2SV_ModStart> , inverse_db_table [ y & 255
<S2SV_ModStart> [ 1 ] ; <S2SV_ModEnd> return NULL ; }
<S2SV_ModStart> ) ++ r ; if <S2SV_ModEnd> ( pow ( ( <S2SV_ModStart> 1 , dim ) <= entries ) return - 1 ; if <S2SV_ModEnd> ( ( int ) <S2SV_ModStart> , dim ) ) > entries ) return - 1 <S2SV_ModEnd> ; return r ;
<S2SV_ModStart> ) ; if ( current_length >= 32 ) return error ( f , VORBIS_invalid_setup ) ; if ( <S2SV_ModStart> == 1 ) { int values = lookup1_values ( c -> entries , c -> dimensions ) ; if ( values < 0 ) return error ( f , VORBIS_invalid_setup ) ; <S2SV_ModStart> c -> lookup_values = ( uint32 ) values <S2SV_ModEnd> ; } else { <S2SV_ModStart> < g -> values - 1 ; ++ j ) if ( p [ j ] . x == p [ j + 1 ] . x ) return error ( f , VORBIS_invalid_setup ) ; for ( j = 0 ; j < g -> values <S2SV_ModStart> 8 ) + 1 ; if ( m -> coupling_steps > f -> channels ) return error ( f , VORBIS_invalid_setup )
<S2SV_ModStart> f , n ) ; if ( w == NULL ) return 0
<S2SV_ModStart> , xfr_cmd , fname <S2SV_ModEnd> ) ; free (
<S2SV_ModStart> ( int fd , const char * cmd , const char * args_extra <S2SV_ModEnd> ) { pid_t pid <S2SV_ModStart> { long fl ; int argc ; char * argv [ RUNCMD_ARGS_MAX + 1 ] ; int r <S2SV_ModEnd> ; term_remove ( STI <S2SV_ModStart> , STO ) ; argc = 0 ; r = split_quoted ( cmd , & argc , argv , RUNCMD_ARGS_MAX ) ; if ( r < 0 ) { fd_printf ( STDERR_FILENO , "Cannot<S2SV_blank>parse<S2SV_blank>command\\n" ) ; exit ( RUNCMD_EXEC_FAIL ) ; } r = split_quoted ( args_extra , & argc , argv , RUNCMD_ARGS_MAX ) ; if ( r < 0 ) { fd_printf ( STDERR_FILENO , "Cannot<S2SV_blank>parse<S2SV_blank>extra<S2SV_blank>args\\n" ) ; exit ( RUNCMD_EXEC_FAIL ) ; } if ( argc < 1 ) { fd_printf ( STDERR_FILENO , "No<S2SV_blank>command<S2SV_blank>given\\n" ) ; exit ( RUNCMD_EXEC_FAIL ) ; } argv [ argc ] = NULL ; fd_printf ( STDERR_FILENO , "$<S2SV_blank>%s<S2SV_blank>%s\\n" , cmd , args_extra ) ; establish_child_signal_handlers ( ) ; sigprocmask ( SIG_SETMASK , & sigm_old , NULL ) ; execvp ( argv [ 0 ] , argv ) ; <S2SV_ModEnd> fd_printf ( STDERR_FILENO , <S2SV_ModStart> fd_printf ( STDERR_FILENO , "exec:<S2SV_blank>%s\\n" , strerror ( errno ) <S2SV_ModEnd> ) ; exit ( <S2SV_ModStart> ) ; exit ( RUNCMD_EXEC_FAIL <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> ( filegen_string ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR , "stats<S2SV_blank>%s<S2SV_blank>unrecognized" , filegen_string ) ; continue ; } <S2SV_ModStart> ( filegen_file ) ; if ( NULL == filegen ) { msyslog ( LOG_ERR , "filegen<S2SV_blank>category<S2SV_blank>\'%s\'<S2SV_blank>unrecognized" , filegen_file ) ; continue ; }
<S2SV_ModStart> & protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir , <S2SV_ModStart> & cryptostats ) ; <S2SV_ModEnd> filegen_register ( statsdir , <S2SV_ModStart> & timingstats ) ; <S2SV_ModEnd> step_callback = & ntpd_time_stepped
<S2SV_ModStart> "ntp_parser.y" { char prefix <S2SV_ModEnd> ; char * type <S2SV_ModStart> ; char * type ; switch ( <S2SV_ModEnd> ( yyvsp [ ( <S2SV_ModStart> ] . String ) [ 0 ] ) { case '+' : case '-' : case '=' : prefix = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) [ 0 ] ; type = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) + 1 ; break ; default : prefix = '=' ; type = ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ; } ( yyval . Attr_val ) = create_attr_sval ( prefix , estrdup ( type ) ) ; YYFREE ( ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ) ; } break ; case 216 : # line 1022 "ntp_parser.y" { enqueue ( cfgt . nic_rules , create_nic_rule_node ( ( yyvsp [ ( 3 ) - ( 3 ) ] . Integer ) , NULL , ( yyvsp [ ( 2 ) - ( 3 ) ] . Integer ) ) ) ; } break ; case 217 : # line 1027 "ntp_parser.y" { enqueue ( cfgt . nic_rules , create_nic_rule_node ( 0 , ( yyvsp [ ( 3 ) - ( 3 ) ] . String ) , ( yyvsp [ ( 2 ) - ( 3 ) ] . Integer ) ) ) ; } break ; case 227 : # line 1058 "ntp_parser.y" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , create_ival ( ( yyvsp [ ( 2 ) - ( 2 ) ] . Integer ) ) ) ; } break ; case 228 : # line 1059 "ntp_parser.y" { ( yyval . Queue ) = enqueue_in_new_queue ( create_ival ( ( yyvsp [ ( 1 ) - ( 1 ) ] . Integer ) ) ) ; } break ; case 229 : # line 1064 "ntp_parser.y" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , ( yyvsp [ ( 2 ) - ( 2 ) ] . Attr_val ) ) ; } break ; case 230 : # line 1066 "ntp_parser.y" { ( yyval . Queue ) = enqueue_in_new_queue ( ( yyvsp [ ( 1 ) - ( 1 ) ] . Attr_val ) ) ; } break ; case 231 : # line 1071 "ntp_parser.y" { ( yyval . Attr_val ) = create_attr_ival ( 'i' , ( yyvsp [ ( 1 ) - ( 1 ) ] . Integer ) ) ; } break ; case 233 : # line 1077 "ntp_parser.y" { ( yyval . Attr_val ) = create_attr_shorts ( '-' , ( yyvsp [ ( 2 ) - ( 5 ) ] . Integer ) , ( yyvsp [ ( 4 ) - ( 5 ) ] . Integer ) ) ; } break ; case 234 : # line 1081 "ntp_parser.y" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , create_pval ( ( yyvsp [ ( 2 ) - ( 2 <S2SV_ModEnd> ) ] . String <S2SV_ModStart> . String ) ) ) ; } break ; case 235 : # line 1082 "ntp_parser.y" { ( yyval . Queue ) = enqueue_in_new_queue ( create_pval ( ( yyvsp [ ( 1 ) - ( 1 ) ] . String ) ) ) ; } break ; case 236 : # line 1086 "ntp_parser.y" { ( yyval . Queue ) = enqueue ( ( yyvsp [ ( 1 ) - ( 2 ) ] . Queue ) , ( yyvsp [ ( 2 ) - ( 2 ) ] . Address_node ) ) ; } break ; case 237 : # line 1087 "ntp_parser.y" { ( yyval . Queue ) = enqueue_in_new_queue ( ( yyvsp [ ( 1 ) - ( 1 <S2SV_ModEnd> ) ] . Address_node <S2SV_ModStart> } break ; case <S2SV_ModEnd> 238 : # line <S2SV_ModStart> 238 : # line 1092 <S2SV_ModEnd> "ntp_parser.y" { if ( <S2SV_ModStart> 239 : # line 1100 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 240 : # line 1101 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 241 : # line 1105 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 243 : # line 1116 <S2SV_ModEnd> "ntp_parser.y" { cfgt . <S2SV_ModStart> 244 : # line 1130 <S2SV_ModEnd> "ntp_parser.y" { old_config_style = <S2SV_ModStart> 245 : # line 1134 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 246 : # line 1135 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 247 : # line 1139 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 248 : # line 1140 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 249 : # line 1144 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 250 : # line 1145 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 251 : # line 1150 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 252 : # line 1154 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 253 : # line 1158 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 254 : # line 1162 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 255 : # line 1163 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 256 : # line 1168 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 257 : # line 1172 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 258 : # line 1173 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 259 : # line 1178 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 260 : # line 1180 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 261 : # line 1182 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 262 : # line 1184 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> 263 : # line 1186 <S2SV_ModEnd> "ntp_parser.y" { ( yyval <S2SV_ModStart> break ; # line 3836 <S2SV_ModEnd> "ntp_parser.c" default : break
<S2SV_ModStart> , multipart_media ; struct range_data * r = & clt -> clt_ranges ; struct range * range ; size_t content_length = 0 <S2SV_ModEnd> ; int code = <S2SV_ModStart> , nranges , ret <S2SV_ModEnd> ; char content_range [ <S2SV_ModStart> ; if ( ( nranges = parse_ranges ( clt , <S2SV_ModEnd> range_str , st -> <S2SV_ModStart> , st -> st_size ) ) < 1 <S2SV_ModEnd> ) { code = <S2SV_ModStart> , path ) ; r -> range_media = media ; <S2SV_ModEnd> if ( nranges == <S2SV_ModStart> == 1 ) { range = & r -> range [ 0 ] ; <S2SV_ModStart> ) goto abort ; range = & r -> range [ 0 ] ; content_length += <S2SV_ModEnd> range -> end - <S2SV_ModStart> start + 1 ; } else { arc4random_buf ( & clt -> clt_boundary , sizeof ( clt -> clt_boundary ) ) ; for ( i = 0 ; i < nranges ; i ++ ) { range = & r -> range [ i ] ; if ( ( ret = snprintf ( NULL , 0 , "\\r\\n--%llu\\r\\n" "Content-Type:<S2SV_blank>%s/%s\\r\\n" "Content-Range:<S2SV_blank>bytes<S2SV_blank>%lld-%lld/%lld\\r\\n\\r\\n" , clt -> clt_boundary , media -> media_type , media -> media_subtype , range -> start , range -> end , st -> st_size ) ) < 0 <S2SV_ModEnd> ) goto abort ; <S2SV_ModStart> abort ; content_length += ret + <S2SV_ModEnd> range -> end - <S2SV_ModStart> start + 1 ; <S2SV_ModEnd> } if ( ( <S2SV_ModStart> } if ( ( ret = snprintf ( NULL , 0 , "\\r\\n--%llu--\\r\\n" , clt -> clt_boundary ) ) < 0 <S2SV_ModEnd> ) goto abort ; <S2SV_ModStart> abort ; content_length += ret <S2SV_ModEnd> ; ( void ) <S2SV_ModStart> . media_subtype ) , "byteranges;<S2SV_blank>boundary=%llu" , clt -> clt_boundary <S2SV_ModEnd> ) ; media = <S2SV_ModStart> & multipart_media ; } r -> range_toread = TOREAD_HTTP_RANGE <S2SV_ModEnd> ; ret = server_response_http <S2SV_ModStart> ; case 0 : close ( fd ) ; <S2SV_ModStart> : break ; } clt -> clt_fd = fd ; if ( clt -> clt_srvbev != NULL ) bufferevent_free ( clt -> clt_srvbev ) ; clt -> clt_srvbev_throttled = 0 ; clt -> clt_srvbev = bufferevent_new ( clt -> clt_fd , server_read_httprange , server_write , server_file_error , clt ) ; if ( clt -> clt_srvbev == NULL ) { errstr = "failed<S2SV_blank>to<S2SV_blank>allocate<S2SV_blank>file<S2SV_blank>buffer<S2SV_blank>event" ; goto fail ; } bufferevent_setwatermark ( clt -> clt_srvbev , EV_READ , 0 , clt -> clt_sndbufsiz ) ; bufferevent_settimeout ( clt -> clt_srvbev , srv_conf -> timeout . tv_sec , srv_conf -> timeout . tv_sec ) ; bufferevent_enable ( clt -> clt_srvbev , EV_READ ) ; bufferevent_disable ( clt -> clt_bev , EV_READ ) ; done : server_reset_http ( clt ) ; return ( 0 ) ; fail : bufferevent_disable <S2SV_ModEnd> ( clt -> clt_bev <S2SV_ModStart> | EV_WRITE ) ; <S2SV_ModEnd> bufferevent_free ( clt -> <S2SV_ModStart> NULL ; abort : <S2SV_ModEnd> if ( fd !=
<S2SV_ModStart> = sshd_hostkey_sign ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( void ) { <S2SV_ModEnd> struct monitor * mon <S2SV_ModStart> , 1 ) ; <S2SV_ModEnd> return mon ; }
<S2SV_ModStart> authenticated = 0 ; <S2SV_ModEnd> if ( ( r <S2SV_ModStart> ; } if ( ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( "%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user" , __func__ ) ; goto done ; } if (
<S2SV_ModStart> struct sshbuf * b = NULL <S2SV_ModStart> ; char * pkalg = NULL <S2SV_ModStart> ; u_char * pkblob = NULL , * sig = NULL <S2SV_ModEnd> , have_sig ; size_t <S2SV_ModStart> NULL ; if ( <S2SV_ModEnd> ( r = sshpkt_get_u8 <S2SV_ModStart> ( r ) ) ; } if ( ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( "%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user" , __func__ ) ; goto done <S2SV_ModStart> ( b ) ; <S2SV_ModEnd> auth2_record_key ( authctxt , <S2SV_ModStart> r ) ) ; if ( ! authctxt -> valid || authctxt -> user == NULL ) { debug2 ( "%s:<S2SV_blank>disabled<S2SV_blank>because<S2SV_blank>of<S2SV_blank>invalid<S2SV_blank>user" , __func__ ) ; goto done ; } <S2SV_ModStart> ( ca_s ) ; free ( sig ) ;
<S2SV_ModStart> ac , av , "cDdksE:a:P:t:" <S2SV_ModEnd> ) ) != - <S2SV_ModStart> 'k' : k_flag ++ ; break ; case 'P' : if ( pkcs11_whitelist != NULL ) fatal ( "-P<S2SV_blank>option<S2SV_blank>already<S2SV_blank>specified" ) ; pkcs11_whitelist = xstrdup ( optarg ) <S2SV_ModStart> ) ; if ( pkcs11_whitelist == NULL ) pkcs11_whitelist = xstrdup ( DEFAULT_PKCS11_WHITELIST ) ; if ( <S2SV_ModStart> if ( pledge ( "stdio<S2SV_blank>rpath<S2SV_blank>cpath<S2SV_blank>unix<S2SV_blank>id<S2SV_blank>proc<S2SV_blank>exec" <S2SV_ModEnd> , NULL ) ==
<S2SV_ModStart> ( stderr , "usage:<S2SV_blank>ssh-agent<S2SV_blank>[-c<S2SV_blank>|<S2SV_blank>-s]<S2SV_blank>[-Dd]<S2SV_blank>[-a<S2SV_blank>bind_address]<S2SV_blank>[-E<S2SV_blank>fingerprint_hash]\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>[-P<S2SV_blank>pkcs11_whitelist]<S2SV_blank>[-t<S2SV_blank>life]<S2SV_blank>[command<S2SV_blank>[arg<S2SV_blank>...]]\\n" <S2SV_ModEnd> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>ssh-agent<S2SV_blank>[-c<S2SV_blank>|<S2SV_blank>-s]<S2SV_blank>-k\\n" ) ; exit
<S2SV_ModStart> flags & O_ACCMODE ) != O_RDONLY <S2SV_ModEnd> || ( flags & <S2SV_ModStart> || ( flags & ( O_CREAT | O_TRUNC ) ) != 0 <S2SV_ModEnd> ) ) { verbose
<S2SV_ModStart> st ; int r , dontmax = 0 <S2SV_ModStart> ) return SSH_ERR_INVALID_FORMAT ; if ( ( st . st_mode & S_IFREG ) == 0 || st . st_size <= 0 ) { st . st_size = 64 * 1024 ; dontmax = 1 ; } if ( ( r = sshbuf_allocate ( blob , st . st_size ) ) != 0 || ( dontmax && ( r = sshbuf_set_max_size ( blob , st . st_size ) ) != 0 ) ) return r ;
<S2SV_ModStart> || options . disable_forwarding || ! use_privsep
<S2SV_ModStart> ! options . disable_forwarding && use_privsep
<S2SV_ModStart> end ) ) { if ( tp -> snd_numholes >= TCP_SACKHOLE_LIMIT ) goto done ; <S2SV_ModStart> start ) ) { if ( tp -> snd_numholes >= TCP_SACKHOLE_LIMIT ) goto done ;
<S2SV_ModStart> ull ; if ( * cp == '\\0' || <S2SV_ModEnd> strchr ( cp , <S2SV_ModStart> '/' ) != NULL || <S2SV_ModEnd> strcmp ( cp , <S2SV_ModStart> strcmp ( cp , "." ) == 0 || strcmp ( cp , <S2SV_ModStart> ".." ) == 0 <S2SV_ModEnd> ) { run_err (
<S2SV_ModStart> ) return SSH_ERR_INVALID_ARGUMENT ; ssh_dispatch_set ( ssh , SSH2_MSG_KEXINIT , NULL ) ;
<S2SV_ModStart> 0 ; # endif if ( strlen ( password ) > MAX_PASSWORD_LEN ) return 0 ;
<S2SV_ModStart> OFPERR_OFPBPC_BAD_VALUE ; default : return OFPERR_OFPGMFC_BAD_TYPE <S2SV_ModEnd> ; } switch ( <S2SV_ModStart> OFPERR_OFPBPC_BAD_VALUE ; default : return OFPERR_OFPGMFC_BAD_COMMAND <S2SV_ModEnd> ; } if (
<S2SV_ModStart> = OFPERR_OFPBAC_BAD_LEN ; } else { <S2SV_ModStart> -> header ; } }
<S2SV_ModStart> trust_data . dwUIChoice = WTD_UI_NONE <S2SV_ModEnd> ; trust_data . fdwRevocationChecks <S2SV_ModStart> . pcwszFilePath ) ; switch ( r ) { case ERROR_SUCCESS : break ; case TRUST_E_NOSIGNATURE : uprintf ( "PKI:<S2SV_blank>File<S2SV_blank>does<S2SV_blank>not<S2SV_blank>appear<S2SV_blank>to<S2SV_blank>be<S2SV_blank>signed:<S2SV_blank>%s" , WinPKIErrorString ( ) ) ; MessageBoxExU ( hDlg , lmprintf ( MSG_284 ) , lmprintf ( MSG_283 ) , MB_OK | MB_ICONERROR | MB_IS_RTL , selected_langid ) ; break ; default : uprintf ( "PKI:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>validate<S2SV_blank>signature:<S2SV_blank>%s" , WinPKIErrorString ( ) ) ; MessageBoxExU ( hDlg , lmprintf ( MSG_240 ) , lmprintf ( MSG_283 ) , MB_OK | MB_ICONERROR | MB_IS_RTL , selected_langid ) ; break ; }
<S2SV_ModStart> ; if ( ( ( <S2SV_ModStart> ) != 0x8009 ) && ( ( error_code >> 16 ) != 0x800B ) ) <S2SV_ModStart> CRYPT_E_NO_TRUSTED_SIGNER : return "None<S2SV_blank>of<S2SV_blank>the<S2SV_blank>signers<S2SV_blank>of<S2SV_blank>the<S2SV_blank>cryptographic<S2SV_blank>message<S2SV_blank>or<S2SV_blank>certificate<S2SV_blank>trust<S2SV_blank>list<S2SV_blank>is<S2SV_blank>trusted." ; case CERT_E_UNTRUSTEDROOT : return "The<S2SV_blank>root<S2SV_blank>certificate<S2SV_blank>is<S2SV_blank>not<S2SV_blank>trusted." ; case TRUST_E_NOSIGNATURE : return "Not<S2SV_blank>digitally<S2SV_blank>signed." ; case TRUST_E_EXPLICIT_DISTRUST : return "One<S2SV_blank>of<S2SV_blank>the<S2SV_blank>certificates<S2SV_blank>used<S2SV_blank>was<S2SV_blank>marked<S2SV_blank>as<S2SV_blank>untrusted<S2SV_blank>by<S2SV_blank>the<S2SV_blank>user."
<S2SV_ModStart> * kw ) { PyUnicodeObject <S2SV_ModEnd> * logical = NULL <S2SV_ModStart> FriBidiParType base = FRIBIDI_TYPE_RTL <S2SV_ModEnd> ; int clean = <S2SV_ModStart> "logical" , "base_direction" , <S2SV_ModEnd> "clean" , "reordernsm" , <S2SV_ModStart> args , kw , "U|iii" <S2SV_ModEnd> , kwargs , & <S2SV_ModStart> & base , & <S2SV_ModEnd> clean , & reordernsm <S2SV_ModStart> & reordernsm ) ) { return NULL ; } <S2SV_ModEnd> if ( ! ( <S2SV_ModStart> == FRIBIDI_TYPE_ON ) ) { <S2SV_ModStart> , base ) ; } return unicode_log2vis <S2SV_ModEnd> ( logical , base <S2SV_ModStart> , reordernsm ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> 'p' : if ( ! client -> auth_user ) { disconnect_client ( client , true , "client<S2SV_blank>password<S2SV_blank>pkt<S2SV_blank>before<S2SV_blank>startup<S2SV_blank>packet" ) ; return false ; } if (
<S2SV_ModStart> buf ; client -> <S2SV_ModEnd> pool = get_pool (
<S2SV_ModStart> ; if ( ! user ) { slog_error ( client , "Password<S2SV_blank>packet<S2SV_blank>before<S2SV_blank>auth<S2SV_blank>packet?" ) ; return false ; } if ( !
<S2SV_ModStart> 0 ; if ( <S2SV_ModEnd> size_left < 4 )
<S2SV_ModStart> { uint32_t id ; if ( size_left < 4 ) { LogError ( "Process_ipfix<S2SV_blank>[%u]<S2SV_blank>Template<S2SV_blank>withdraw<S2SV_blank>size<S2SV_blank>error<S2SV_blank>at<S2SV_blank>%s<S2SV_blank>line<S2SV_blank>%u" , exporter -> info . id , __FILE__ , __LINE__ , strerror ( errno ) ) ; size_left = 0 ; continue ; }
<S2SV_ModStart> gdIOCtxPtr out ) { _gdImageGifCtx ( im , out ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> , NULL ) ; if ( ! _gdImageGifCtx <S2SV_ModEnd> ( im , out <S2SV_ModStart> im , out ) ) { <S2SV_ModEnd> rv = gdDPExtractData ( <S2SV_ModStart> , size ) ; } else { rv = NULL ; }
<S2SV_ModStart> * out ) { _gdImageWBMPCtx ( image , fg , out <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> , NULL ) ; if ( ! _gdImageWBMPCtx <S2SV_ModEnd> ( im , fg <S2SV_ModStart> fg , out ) ) { <S2SV_ModEnd> rv = gdDPExtractData ( <S2SV_ModStart> , size ) ; } else { rv = NULL ; }
<S2SV_ModStart> ; PHP_SHA512_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error , 0 , "broken<S2SV_blank>signature" ) ; } return FAILURE ; } <S2SV_ModStart> ; PHP_SHA256_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error , 0 , "broken<S2SV_blank>signature" ) ; } return FAILURE ; } <S2SV_ModStart> ; PHP_SHA1_CTX context ; if ( sig_len < sizeof ( digest ) ) { if ( error ) { spprintf ( error , 0 , "broken<S2SV_blank>signature" ) ; } return FAILURE ; } <S2SV_ModStart> ; PHP_MD5_CTX context ; if ( sig_len < sizeof ( digest <S2SV_ModEnd> ) ) { if <S2SV_ModStart> return FAILURE ; } PHP_MD5Init ( & context ) ; read_len = end_of_phar ; if ( read_len > sizeof ( buf ) ) { read_size = sizeof ( buf ) ; } else { read_size = ( int ) read_len ; } while ( ( len = php_stream_read ( fp , ( char * ) buf , read_size ) ) > 0 ) { PHP_MD5Update ( & context , buf , len ) ; read_len -= ( zend_off_t ) len ; if ( read_len < read_size ) { read_size = ( int ) read_len ; } } PHP_MD5Final ( digest , & context ) ; if ( memcmp ( digest , sig , sizeof ( digest ) ) ) { if ( error ) { spprintf ( error , 0 , "broken<S2SV_blank>signature" ) ; } return FAILURE ; }
<S2SV_ModStart> != entry . uncompressed_filesize || read <= 8
<S2SV_ModStart> double_encode TSRMLS_CC ) ; if ( new_len > INT_MAX ) { efree ( replaced ) ; RETURN_FALSE ; }
<S2SV_ModStart> ) { char * start , * <S2SV_ModStart> return 0 ; } start = var -> ptr + var -> already_scanned ; <S2SV_ModStart> vsep = memchr ( start <S2SV_ModEnd> , '&' , var <S2SV_ModStart> var -> end - start <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ! eof ) { var -> already_scanned = var -> end - var -> ptr ; <S2SV_ModStart> -> end ) ; var -> already_scanned = 0 ;
<S2SV_ModStart> if ( ! eof && vars -> str . c != vars -> ptr
<S2SV_ModStart> { long elements ; if ( * p >= max - 2 ) { zend_error ( E_WARNING , "Bad<S2SV_blank>unserialize<S2SV_blank>data" ) ; return - 1 ; } <S2SV_ModStart> name ) ; return - 1 <S2SV_ModEnd> ; } return elements
<S2SV_ModStart> cursor ; # line 501 <S2SV_ModEnd> "ext/standard/var_unserializer.c" { YYCTYPE yych <S2SV_ModStart> yy3 : # line 875 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { return 0 <S2SV_ModStart> ; } # line 563 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy4 : yych <S2SV_ModStart> YYCURSOR ; # line 869 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { php_error_docref ( <S2SV_ModStart> ; } # line 612 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy16 : yych <S2SV_ModStart> YYCURSOR ; # line 717 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { size_t len <S2SV_ModStart> ) ; if ( elements < 0 ) { efree ( class_name ) ; return 0 ; } if ( <S2SV_ModStart> ; } # line 795 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy25 : yych <S2SV_ModStart> YYCURSOR ; # line 704 "ext/standard/var_unserializer.re" { long elements ; <S2SV_ModEnd> if ( ! var_hash <S2SV_ModStart> * rval ) ; elements = object_common1 ( UNSERIALIZE_PASSTHRU , ZEND_STANDARD_CLASS_DEF_PTR ) ; if ( elements < 0 ) { return 0 ; } <S2SV_ModStart> object_common2 ( UNSERIALIZE_PASSTHRU , elements <S2SV_ModEnd> ) ; } # <S2SV_ModStart> ; } # line 833 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy32 : yych <S2SV_ModStart> YYCURSOR ; # line 683 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { long elements <S2SV_ModStart> ; } # line 875 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy39 : yych <S2SV_ModStart> YYCURSOR ; # line 648 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { size_t len <S2SV_ModStart> ; } # line 931 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy46 : yych <S2SV_ModStart> YYCURSOR ; # line 615 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { size_t len <S2SV_ModStart> ; } # line 985 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy53 : yych <S2SV_ModStart> YYCURSOR ; # line 605 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { # if <S2SV_ModStart> ; } # line 1083 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy65 : yych <S2SV_ModStart> YYCURSOR ; # line 590 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { * p <S2SV_ModStart> ; } # line 1157 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy76 : yych <S2SV_ModStart> YYCURSOR ; # line 563 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { # if <S2SV_ModStart> ; } # line 1211 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy83 : yych <S2SV_ModStart> YYCURSOR ; # line 556 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { * p <S2SV_ModStart> ; } # line 1226 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy87 : ++ <S2SV_ModStart> YYCURSOR ; # line 549 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { * p <S2SV_ModStart> ; } # line 1236 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy89 : yych <S2SV_ModStart> YYCURSOR ; # line 526 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { long id <S2SV_ModStart> ; } # line 1282 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy95 : yych <S2SV_ModStart> YYCURSOR ; # line 505 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { long id <S2SV_ModStart> ; } # line 1326 <S2SV_ModEnd> "ext/standard/var_unserializer.c" } # line <S2SV_ModStart> "ext/standard/var_unserializer.c" } # line 877 <S2SV_ModEnd> "ext/standard/var_unserializer.re" return 0 ;
<S2SV_ModStart> { return ; } if ( input <= 0.0 || output <= 0.0 ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Gamma<S2SV_blank>values<S2SV_blank>should<S2SV_blank>be<S2SV_blank>positive" ) ; RETURN_FALSE ; }
<S2SV_ModStart> } if ( yych <= '/' ) goto yy18 ; if ( yych >= ';' <S2SV_ModEnd> ) goto yy18 ; <S2SV_ModStart> ; } # line 805 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy25 : yych <S2SV_ModStart> ; } # line 837 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy32 : yych <S2SV_ModStart> ; } # line 882 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy39 : yych <S2SV_ModStart> ; } # line 937 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy46 : yych <S2SV_ModStart> ; } # line 990 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy53 : yych <S2SV_ModStart> ; } # line 1087 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy65 : yych <S2SV_ModStart> ; } # line 1162 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy76 : yych <S2SV_ModStart> ; } # line 1215 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy83 : yych <S2SV_ModStart> ; } # line 1229 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy87 : ++ <S2SV_ModStart> ; } # line 1238 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy89 : yych <S2SV_ModStart> ; } # line 1286 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy95 : yych <S2SV_ModStart> ; } # line 1335 <S2SV_ModEnd> "ext/standard/var_unserializer.c" } # line
<S2SV_ModStart> request_processed = 1 ; apr_brigade_cleanup ( brigade ) ;
<S2SV_ModStart> += len2 ; } if ( len >= FPM_LOG_BUFFER ) { zlog ( ZLOG_NOTICE , "the<S2SV_blank>log<S2SV_blank>buffer<S2SV_blank>is<S2SV_blank>full<S2SV_blank>(%d).<S2SV_blank>The<S2SV_blank>access<S2SV_blank>log<S2SV_blank>request<S2SV_blank>has<S2SV_blank>been<S2SV_blank>truncated." , FPM_LOG_BUFFER ) ; len = FPM_LOG_BUFFER ; break ; }
<S2SV_ModStart> -> count ) { <S2SV_ModEnd> zend_throw_exception ( spl_ce_OutOfRangeException ,
<S2SV_ModStart> data_size + 1 ; const zend_uchar * const packet_end = ( zend_uchar * ) row_buffer -> ptr + data_size ; <S2SV_ModStart> this_field_len_pos = p ; const <S2SV_ModStart> & p ) ; if ( len != MYSQLND_NULL_LENGTH && ( ( p + len ) > packet_end ) ) { php_error_docref ( NULL , E_WARNING , "Malformed<S2SV_blank>server<S2SV_blank>packet.<S2SV_blank>Field<S2SV_blank>length<S2SV_blank>pointing<S2SV_blank>" MYSQLND_SZ_T_SPEC "<S2SV_blank>bytes<S2SV_blank>after<S2SV_blank>end<S2SV_blank>of<S2SV_blank>packet" , ( p + len ) - packet_end - 1 ) ; DBG_RETURN ( FAIL ) ; }
<S2SV_ModStart> == SUCCESS ) { if ( Z_TYPE_PP ( var2 ) != IS_DOUBLE ) { zval dval ; dval = * * var ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval ) ; matrix [ i ] [ j ] = ( float ) Z_DVAL ( dval ) ; } else { matrix [ i ] [ j ] = ( float ) Z_DVAL_PP ( var2 ) ; } } else { php_error_docref ( NULL TSRMLS_CC , E_WARNING , "You<S2SV_blank>must<S2SV_blank>have<S2SV_blank>a<S2SV_blank>3x3<S2SV_blank>matrix" ) ; RETURN_FALSE ; } } } } res = gdImageConvolution ( im_src , matrix , ( float ) div , ( float ) offset ) ; if ( res ) { RETURN_TRUE <S2SV_ModEnd> ; } else { <S2SV_ModStart> ; } else { <S2SV_ModEnd> RETURN_FALSE ; } } <S2SV_ModStart> RETURN_FALSE ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> rect . x = Z_LVAL ( lval ) ; } else { rect . x = <S2SV_ModStart> ( tmp ) ; } <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> rect . y = Z_LVAL ( lval ) ; } else { rect . y = <S2SV_ModStart> ( tmp ) ; } <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> rect . width = Z_LVAL ( lval ) ; } else { rect . width = <S2SV_ModStart> ( tmp ) ; } <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval ) ; <S2SV_ModStart> rect . height = Z_LVAL ( lval ) ; } else { rect . height = <S2SV_ModStart> ( tmp ) ; }
<S2SV_ModStart> ; case IS_STRING : { zval dval ; dval = * * zval_affine_elem ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; affine [ <S2SV_ModStart> [ i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default : <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect . <S2SV_ModStart> rect . x = Z_LVAL ( lval ) ; } else { rect . x = <S2SV_ModStart> tmp ) ; } } <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect . <S2SV_ModStart> rect . y = Z_LVAL ( lval ) ; } else { rect . y = <S2SV_ModStart> tmp ) ; } } <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect . <S2SV_ModStart> rect . width = Z_LVAL ( lval ) ; } else { rect . width = <S2SV_ModStart> tmp ) ; } } <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_LONG ) { zval lval ; lval = * * tmp ; zval_copy_ctor ( & lval ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; rect . <S2SV_ModStart> rect . height = Z_LVAL ( lval ) ; } else { rect . height = <S2SV_ModStart> ( tmp ) ; }
<S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_DOUBLE ) { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; x = <S2SV_ModStart> ) ; x = Z_DVAL ( dval ) ; } else { x = <S2SV_ModStart> ( tmp ) ; } <S2SV_ModStart> != FAILURE ) { if ( Z_TYPE_PP ( tmp ) != IS_DOUBLE ) { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; y = <S2SV_ModStart> ) ; y = Z_DVAL ( dval ) ; } else { y = <S2SV_ModStart> ( tmp ) ; }
<S2SV_ModStart> ; case IS_STRING : { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; m1 [ <S2SV_ModStart> [ i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default : <S2SV_ModStart> ; case IS_STRING : { zval dval ; dval = * * tmp ; zval_copy_ctor ( & dval ) ; convert_to_double ( & dval <S2SV_ModEnd> ) ; m2 [ <S2SV_ModStart> [ i ] = Z_DVAL ( dval ) ; } <S2SV_ModEnd> break ; default :
<S2SV_ModStart> == SUCCESS ) { if ( Z_TYPE_PP ( var ) != IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long ( <S2SV_ModStart> ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points [ <S2SV_ModStart> ] . x = Z_LVAL ( lval ) ; } else { points [ i ] . x = <S2SV_ModStart> ( var ) ; } <S2SV_ModStart> == SUCCESS ) { if ( Z_TYPE_PP ( var ) != IS_LONG ) { zval lval ; lval = * * var ; zval_copy_ctor ( & lval <S2SV_ModEnd> ) ; convert_to_long ( <S2SV_ModStart> ) ; convert_to_long ( & lval <S2SV_ModEnd> ) ; points [ <S2SV_ModStart> ] . y = Z_LVAL ( lval ) ; } else { points [ i ] . y = <S2SV_ModStart> ) ; } } }
<S2SV_ModStart> wp -> socket_mode = 0660 <S2SV_ModEnd> ; if ( !
<S2SV_ModStart> ) { buffer = zend_string_safe_alloc ( 1 , len , 0 <S2SV_ModEnd> , 0 ) ;
<S2SV_ModStart> ; } buffer = zend_string_safe_alloc ( 1 , len , 0 <S2SV_ModEnd> , 0 ) ;
<S2SV_ModStart> . get_debug_info = spl_array_get_debug_info ; spl_handler_ArrayObject . get_gc = spl_array_get_gc
<S2SV_ModStart> } } if ( tmp_line_len >= 1 && <S2SV_ModStart> tmp_line_len ; if ( tmp_line_len >= 1 && <S2SV_ModStart> ++ ; } } \\\n} <S2SV_ModEnd> if ( strncasecmp (
<S2SV_ModStart> serialize = pdo_row_serialize ; pdo_row_ce -> unserialize = zend_class_unserialize_deny ;
<S2SV_ModStart> = Z_LVAL_P ( pcount ) ; ZVAL_UNDEF ( & entry ) ; ZVAL_UNDEF ( & inf <S2SV_ModStart> ; } if ( <S2SV_ModEnd> * p == ',' <S2SV_ModStart> outexcept ; } } if ( Z_TYPE ( entry ) != IS_OBJECT ) { zval_ptr_dtor ( & entry ) ; zval_ptr_dtor ( & inf ) ; goto outexcept <S2SV_ModEnd> ; } hash =
<S2SV_ModStart> -> config -> pm_max_requests ; fpm_globals . listening_socket = dup ( wp -> listening_socket )
<S2SV_ModStart> - 1 ) ; <S2SV_ModEnd> return 0 ; }
<S2SV_ModStart> rval ) ) ; zend_object_store_ctor_failed ( * rval TSRMLS_CC ) ;
<S2SV_ModStart> cursor ; # line 496 <S2SV_ModEnd> "ext/standard/var_unserializer.c" { YYCTYPE yych <S2SV_ModStart> yy3 : # line 861 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { return 0 <S2SV_ModStart> ; } # line 558 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy4 : yych <S2SV_ModStart> YYCURSOR ; # line 855 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { php_error_docref ( <S2SV_ModStart> ; } # line 607 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy16 : yych <S2SV_ModStart> YYCURSOR ; # line 708 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { size_t len <S2SV_ModStart> ; } # line 785 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy25 : yych <S2SV_ModStart> YYCURSOR ; # line 699 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { if ( <S2SV_ModStart> ; } # line 819 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy32 : yych <S2SV_ModStart> YYCURSOR ; # line 678 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { long elements <S2SV_ModStart> ; } # line 861 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy39 : yych <S2SV_ModStart> YYCURSOR ; # line 643 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { size_t len <S2SV_ModStart> ; } # line 917 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy46 : yych <S2SV_ModStart> YYCURSOR ; # line 610 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { size_t len <S2SV_ModStart> ; } # line 971 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy53 : yych <S2SV_ModStart> YYCURSOR ; # line 600 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { # if <S2SV_ModStart> ; } # line 1069 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy65 : yych <S2SV_ModStart> YYCURSOR ; # line 585 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { * p <S2SV_ModStart> ; } # line 1143 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy76 : yych <S2SV_ModStart> YYCURSOR ; # line 558 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { # if <S2SV_ModStart> ; } # line 1197 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy83 : yych <S2SV_ModStart> YYCURSOR ; # line 551 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { * p <S2SV_ModStart> ; } # line 1212 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy87 : ++ <S2SV_ModStart> YYCURSOR ; # line 544 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { * p <S2SV_ModStart> ; } # line 1222 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy89 : yych <S2SV_ModStart> YYCURSOR ; # line 521 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { long id <S2SV_ModStart> ; } # line 1268 <S2SV_ModEnd> "ext/standard/var_unserializer.c" yy95 : yych <S2SV_ModStart> YYCURSOR ; # line 500 <S2SV_ModEnd> "ext/standard/var_unserializer.re" { long id <S2SV_ModStart> ; } # line 1312 <S2SV_ModEnd> "ext/standard/var_unserializer.c" } # line <S2SV_ModStart> "ext/standard/var_unserializer.c" } # line 863 <S2SV_ModEnd> "ext/standard/var_unserializer.re" return 0 ;
<S2SV_ModStart> ; RETURN_FALSE ; } INTL_CHECK_LOCALE_LEN ( slocale_len ) ;
<S2SV_ModStart> ; RETURN_FALSE ; } if ( length > INT_MAX ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Length<S2SV_blank>parameter<S2SV_blank>must<S2SV_blank>be<S2SV_blank>no<S2SV_blank>more<S2SV_blank>than<S2SV_blank>%d" , INT_MAX ) ; RETURN_FALSE ; }
<S2SV_ModStart> nc ) ) ; if ( overflow2 ( sidx , nc ) ) { goto fail1 ; } <S2SV_ModStart> , 1 ) ; if ( cidx == NULL ) { goto fail1 ; }
<S2SV_ModStart> 0.0 ; int iSrc <S2SV_ModEnd> ; if ( iRight <S2SV_ModStart> -- ; } } <S2SV_ModEnd> res -> ContribRow [ <S2SV_ModStart> [ u ] . Left = iLeft ; res -> ContribRow [ u ] . Right = iRight ; for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ] .
<S2SV_ModStart> ; if ( q < p || q
<S2SV_ModStart> ( border < 0 || color < 0
<S2SV_ModStart> ; php_unserialize_data_t var_hash ; int skip = 0 ; <S2SV_ModStart> zval * * tmp ; skip = 0 <S2SV_ModStart> http_session_vars ) ) { skip = 1 <S2SV_ModEnd> ; } } if <S2SV_ModStart> TSRMLS_CC ) ) { if ( ! skip ) { <S2SV_ModStart> var_hash TSRMLS_CC ) ; } <S2SV_ModStart> current ) ; } if ( ! skip ) { <S2SV_ModStart> , namelen ) ; }
<S2SV_ModStart> ; php_unserialize_data_t var_hash ; int skip = 0 ; <S2SV_ModStart> ; q = p ; skip = 0 <S2SV_ModStart> http_session_vars ) ) { skip = 1 <S2SV_ModEnd> ; } } if <S2SV_ModStart> TSRMLS_CC ) ) { if ( ! skip ) { <S2SV_ModStart> var_hash TSRMLS_CC ) ; } <S2SV_ModStart> current ) ; } if ( ! skip ) { <S2SV_ModStart> , namelen ) ; }
<S2SV_ModStart> status = U_ZERO_ERROR ; buflen ++ ;
<S2SV_ModStart> ) { char * start , * <S2SV_ModStart> return 0 ; } start = var -> ptr + var -> already_scanned ; <S2SV_ModStart> vsep = memchr ( start <S2SV_ModEnd> , '&' , var <S2SV_ModStart> var -> end - start <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ! eof ) { var -> already_scanned = var -> end - var -> ptr ; <S2SV_ModStart> -> end ) ; var -> already_scanned = 0 ;
<S2SV_ModStart> ; RETURN_FALSE ; } if ( len > INT_MAX ) { php_error_docref ( NULL TSRMLS_CC , E_WARNING , "Length<S2SV_blank>parameter<S2SV_blank>must<S2SV_blank>be<S2SV_blank>no<S2SV_blank>more<S2SV_blank>than<S2SV_blank>%d" , INT_MAX ) ; RETURN_FALSE ; }
<S2SV_ModStart> zend_throw_error ( exception_ce , "%s" ,
<S2SV_ModStart> * classes = NULL ; zval * retval <S2SV_ModStart> ) ; } } retval = var_tmp_var ( & var_hash ) ; <S2SV_ModStart> ( ! php_var_unserialize_ex ( retval <S2SV_ModEnd> , & p , <S2SV_ModStart> class_hash ) ; } <S2SV_ModEnd> if ( ! EG <S2SV_ModStart> } RETURN_FALSE ; } ZVAL_COPY ( return_value , retval <S2SV_ModEnd> ) ; PHP_VAR_UNSERIALIZE_DESTROY (
<S2SV_ModStart> ) ; if ( zend_hash_find <S2SV_ModEnd> ( ht , Z_STRVAL_P
<S2SV_ModStart> ; # ifdef HAVE_IPV6 <S2SV_ModEnd> if ( * ( <S2SV_ModStart> > 1 ) { char * <S2SV_ModStart> str_len - 2 ) , * e = NULL <S2SV_ModStart> } * portno = strtol <S2SV_ModEnd> ( p + 2 <S2SV_ModStart> ( p + 2 , & e , 10 ) ; if ( e && * e ) { if ( get_err ) { * err = strpprintf ( 0 , "Failed<S2SV_blank>to<S2SV_blank>parse<S2SV_blank>address<S2SV_blank>\\"%s\\"" , str ) ; } return NULL ; } <S2SV_ModEnd> return estrndup ( str <S2SV_ModStart> ( colon ) { char * e = NULL ; * portno = strtol ( colon + 1 , & e , 10 ) ; if ( ! e || ! * e ) { return <S2SV_ModEnd> estrndup ( str , <S2SV_ModStart> str ) ; } } <S2SV_ModEnd> if ( get_err ) <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ) { int old_bin_num <S2SV_ModEnd> = ZEND_MM_SRUN_BIN_NUM ( info <S2SV_ModStart> [ old_bin_num ] ; if ( size <= ZEND_MM_MAX_SMALL_SIZE ) { int <S2SV_ModStart> endif return ptr ; }
<S2SV_ModStart> return NULL ; } if ( overflow2 ( sizeof ( unsigned char * ) , sx ) ) { return NULL ; }
<S2SV_ModStart> & var_hash TSRMLS_CC ) || ( Z_TYPE_P ( intern -> array ) != IS_ARRAY && Z_TYPE_P ( intern -> array ) != IS_OBJECT ) ) { zval_ptr_dtor ( & intern -> array ) ; <S2SV_ModEnd> goto outexcept ; }
<S2SV_ModStart> if ( ! offset || ! ht
<S2SV_ModStart> php_zip_get_property_ptr_ptr ; zip_object_handlers . get_gc = php_zip_get_gc ; zip_object_handlers .
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void oidc_scrub_headers ( request_rec
<S2SV_ModStart> "Could<S2SV_blank>not<S2SV_blank>set<S2SV_blank>remote<S2SV_blank>user" ) ; } oidc_scrub_headers ( r ) ;
<S2SV_ModStart> r -> pool , "The<S2SV_blank>OpenID<S2SV_blank>Connect<S2SV_blank>callback<S2SV_blank>URL<S2SV_blank>received<S2SV_blank>an<S2SV_blank>invalid<S2SV_blank>request" ) , <S2SV_ModEnd> HTTP_INTERNAL_SERVER_ERROR ) ; }
<S2SV_ModStart> { int res , i , indexes , index_bytes ; unsigned int ids ; long long bytes <S2SV_ModEnd> ; long long * <S2SV_ModStart> & id_table ) ; ids = id_table . xattr_ids ; xattr_table_start <S2SV_ModEnd> = id_table . xattr_table_start <S2SV_ModStart> id_table . xattr_table_start ; index_bytes = SQUASHFS_XATTR_BLOCK_BYTES ( ( long long ) ids ) ; indexes = SQUASHFS_XATTR_BLOCKS ( ( long long ) ids ) ; if ( index_bytes != ( sBlk -> bytes_used - ( <S2SV_ModEnd> sBlk -> xattr_id_table_start + <S2SV_ModStart> sizeof ( id_table ) ) ) ) { ERROR ( "read_xattrs_from_disk:<S2SV_blank>Bad<S2SV_blank>xattr_ids<S2SV_blank>count<S2SV_blank>in<S2SV_blank>super<S2SV_blank>block\\n" ) ; return 0 ; } if ( table_start != NULL ) * table_start = id_table . xattr_table_start ; if ( flag ) return id_table . xattr_ids ; index = malloc ( index_bytes ) ; if ( index == NULL ) MEM_ERROR ( ) ; res = read_fs_bytes ( fd , sBlk -> xattr_id_table_start + sizeof ( id_table ) <S2SV_ModStart> bytes = SQUASHFS_XATTR_BYTES ( ( long long ) <S2SV_ModStart> xattr_ids ) + ( ( long long )
<S2SV_ModStart> , NULL ) ; <S2SV_ModEnd> if ( ! ( <S2SV_ModStart> ) ; if ( rowbytes > INT_MAX / mainprog_ptr -> height ) { png_destroy_read_struct ( & png_ptr , & info_ptr , NULL ) ; return PNG_OUT_OF_MEMORY_ERROR ; } if (
<S2SV_ModStart> in_count / 2 ; if ( count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;
<S2SV_ModStart> key_nulls , & key_count ) ; if ( key_count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , key_count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) )
<S2SV_ModStart> = ncolumns ; } Assert ( ncolumns <= MaxTupleAttributeNumber ) ;
<S2SV_ModStart> out ) ; } if ( pcount < 0 || pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , pcount , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;
<S2SV_ModStart> return NULL ; } if ( key_count > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "number<S2SV_blank>of<S2SV_blank>pairs<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , key_count , ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;
<S2SV_ModStart> ) ) ) ; if ( state . num > QUERYTYPEMAXITEMS ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "number<S2SV_blank>of<S2SV_blank>query<S2SV_blank>items<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , state . num , ( int ) QUERYTYPEMAXITEMS ) ) ) ;
<S2SV_ModStart> * pos ) { check_stack_depth ( ) ;
<S2SV_ModStart> ; } num ++ ; if ( num > MaxAllocSize / ITEMSIZE ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "number<S2SV_blank>of<S2SV_blank>levels<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , num , ( int ) ( MaxAllocSize / ITEMSIZE ) ) ) )
<S2SV_ModStart> += charlen ; } if ( num + 1 > MaxAllocSize / sizeof ( nodeitem ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "number<S2SV_blank>of<S2SV_blank>levels<S2SV_blank>(%d)<S2SV_blank>exceeds<S2SV_blank>the<S2SV_blank>maximum<S2SV_blank>allowed<S2SV_blank>(%d)" , num + 1 , ( int ) ( MaxAllocSize / sizeof ( nodeitem ) ) ) ) ) ;
<S2SV_ModStart> * pos ) { check_stack_depth ( ) ;
<S2SV_ModStart> flag = 0 ; check_stack_depth ( ) ;
<S2SV_ModStart> ) ) ) ; if ( LTXTQUERY_TOO_BIG ( state . num , state . sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "ltxtquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) ) ) ;
<S2SV_ModStart> npts ; int size ; int base_size <S2SV_ModStart> depth ++ ; } base_size = sizeof ( path -> <S2SV_ModEnd> p [ 0 ] <S2SV_ModStart> [ 0 ] ) * npts ; size = offsetof ( PATH , <S2SV_ModEnd> p [ 0 ] <S2SV_ModStart> [ 0 ] ) + base_size ; if ( base_size / npts != sizeof ( path -> p [ 0 ] ) || size <= base_size ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "too<S2SV_blank>many<S2SV_blank>points<S2SV_blank>requested" ) ) ) <S2SV_ModEnd> ; path = (
<S2SV_ModStart> int size ; int base_size ; int <S2SV_ModStart> ) ) ) ; base_size = sizeof ( poly -> p [ 0 ] ) * npts ; <S2SV_ModStart> 0 ] ) + base_size ; if ( base_size / npts != <S2SV_ModStart> [ 0 ] ) || size <= base_size ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "too<S2SV_blank>many<S2SV_blank>points<S2SV_blank>requested" ) ) ) <S2SV_ModEnd> ; poly = (
<S2SV_ModStart> return query ; } if ( TSQUERY_TOO_BIG ( list_length ( state . polstr ) , state . sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) ) ) ;
<S2SV_ModStart> sumlen , & nnode ) ; if ( TSQUERY_TOO_BIG ( nnode , sumlen ) ) ereport ( ERROR , ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ) , errmsg ( "tsquery<S2SV_blank>is<S2SV_blank>too<S2SV_blank>large" ) )
<S2SV_ModStart> lowstr [ MAXDATELEN + MAXDATEFIELDS <S2SV_ModEnd> ] ; char * <S2SV_ModStart> strlen ( str ) > MAXDATELEN <S2SV_ModEnd> ) { errno =
<S2SV_ModStart> HAVE_INT64_TIMESTAMP char fstr [ 7 ] ; int i ; cp ++ ; for ( i = 0 ; i < 6 ; i ++ ) fstr [ i ] = * cp != '\\0' ? * cp ++ : '0' ; fstr [ i ] <S2SV_ModEnd> = '\\0' ; *
<S2SV_ModStart> HAVE_INT64_TIMESTAMP char fstr [ 7 ] ; int i ; cp ++ ; for ( i = 0 ; i < 6 ; i ++ ) fstr [ i ] = * cp != '\\0' ? * cp ++ : '0' ; fstr [ i ] <S2SV_ModEnd> = '\\0' ; *
<S2SV_ModStart> nf ] = lp ; if ( nf >= MAXDATEFIELDS ) return - 1 <S2SV_ModStart> ; nf ++ ; <S2SV_ModEnd> } * numfields =
<S2SV_ModStart> strlen ( str ) > MAXDATELEN ) { errno = PGTYPES_INTVL_BAD_INTERVAL ; return NULL ; } if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || ( DecodeInterval ( field , ftype , nf , & dtype , tm , & fsec ) != 0 && DecodeISO8601Interval ( str , & dtype , tm , & fsec ) != 0 ) ) { errno = PGTYPES_INTVL_BAD_INTERVAL ; return NULL ; } result = ( interval * ) pgtypes_alloc ( sizeof ( interval ) ) ; if ( ! result ) return NULL ; if ( dtype != DTK_DELTA <S2SV_ModEnd> ) { errno = <S2SV_ModStart> errno = PGTYPES_INTVL_BAD_INTERVAL ; free ( result ) ; return NULL ; } if ( tm2interval ( tm , fsec , result ) != 0 <S2SV_ModEnd> ) { errno = <S2SV_ModStart> errno = PGTYPES_INTVL_BAD_INTERVAL ; <S2SV_ModEnd> free ( result ) <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> errno = 0 ;
<S2SV_ModStart> strlen ( str ) > MAXDATELEN ) { errno = PGTYPES_TS_BAD_TIMESTAMP ; return ( noresult ) ; } if ( ParseDateTime ( str , lowstr , field , ftype , & nf , ptr ) != 0 || DecodeDateTime ( field , ftype , nf , & dtype , tm , & fsec , 0 ) != 0 ) { errno = PGTYPES_TS_BAD_TIMESTAMP ; return ( noresult ) ; } switch ( dtype ) { case DTK_DATE : if ( tm2timestamp ( tm , fsec , NULL , & result ) != 0 <S2SV_ModEnd> ) { errno =
<S2SV_ModStart> ) { # line 62 <S2SV_ModEnd> "dt_test2.pgc" date date1 ; <S2SV_ModStart> date1 ; # line 63 <S2SV_ModEnd> "dt_test2.pgc" timestamp ts1 , <S2SV_ModStart> ts2 ; # line 64 <S2SV_ModEnd> "dt_test2.pgc" char * text <S2SV_ModStart> text ; # line 65 <S2SV_ModEnd> "dt_test2.pgc" interval * i1 <S2SV_ModStart> i1 ; # line 66 <S2SV_ModEnd> "dt_test2.pgc" date * dc <S2SV_ModStart> dc ; # line 67 <S2SV_ModEnd> "dt_test2.pgc" int i ,
<S2SV_ModStart> + 1 ] ; <S2SV_ModEnd> size_t pathlen ; path <S2SV_ModStart> = '\\0' ; } res = is_symlink_path ( p , path , pathlen <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> < 0 ) { if ( errno == EPERM ) { <S2SV_ModEnd> pr_log_pri ( PR_LOG_WARNING , <S2SV_ModStart> pr_log_pri ( PR_LOG_WARNING , "error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>" "(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)" , path ) ; } <S2SV_ModEnd> errno = EPERM ;
<S2SV_ModStart> + 1 ] ; <S2SV_ModEnd> size_t pathlen ; path <S2SV_ModStart> = '\\0' ; } res = is_symlink_path ( p , path , pathlen <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> < 0 ) { if ( errno == EPERM ) { <S2SV_ModEnd> pr_log_pri ( PR_LOG_WARNING , <S2SV_ModStart> pr_log_pri ( PR_LOG_WARNING , "error:<S2SV_blank>DefaultRoot<S2SV_blank>%s<S2SV_blank>is<S2SV_blank>a<S2SV_blank>symlink<S2SV_blank>" "(denied<S2SV_blank>by<S2SV_blank>AllowChrootSymlinks<S2SV_blank>config)" , path ) ; } <S2SV_ModEnd> errno = EPERM ;
<S2SV_ModStart> ) ; if ( setsid ( ) == ( pid_t ) - 1 ) die_with_error ( "setsid" ) ; if (
<S2SV_ModStart> { mode_t old_umask ; const <S2SV_ModEnd> char * base_path = <S2SV_ModStart> ) ; base_path = "/tmp" ; <S2SV_ModEnd> __debug__ ( ( "creating<S2SV_blank>new<S2SV_blank>namespace\\n"
<S2SV_ModStart> 0 ; next_byte : if ( s -> pc - pc_start > 14 ) { goto illegal_op ; }
<S2SV_ModStart> ++ ; p = cmd [ 0 ] ? <S2SV_ModStart> cmd + 1 ) : NULL
<S2SV_ModStart> ; case 'l' : { RBinObject * obj = r_bin_cur_object ( core -> bin ) ; <S2SV_ModStart> : 0 ) ; } <S2SV_ModStart> ; case 'i' : { RBinObject * obj = r_bin_cur_object ( core -> bin ) ; <S2SV_ModStart> : 0 ) ; }
<S2SV_ModStart> ( lds ) { if ( len < 4 ) { return ; }
<S2SV_ModStart> -> sh_size < 1 || shdr -> sh_size > SIZE_MAX
<S2SV_ModStart> -> sh_size < 1 || shdr -> sh_size > SIZE_MAX
<S2SV_ModStart> i = 0 ; ( i + 3 ) <S2SV_ModEnd> < sec -> size <S2SV_ModStart> i = 0 ; ( i + 7 ) <S2SV_ModEnd> < sec -> size
<S2SV_ModStart> i = 0 ; i >= 0 && <S2SV_ModStart> goto out_error ; } if ( ( st32 ) verdef -> vd_next < 1 ) { eprintf ( "Warning:<S2SV_blank>Invalid<S2SV_blank>vd_next<S2SV_blank>in<S2SV_blank>the<S2SV_blank>ELF<S2SV_blank>version\\n" ) ; break ; }
<S2SV_ModStart> ( pos + 8 + 8 <S2SV_ModStart> -> size ; } const <S2SV_ModStart> + 4 ) ) ; const int <S2SV_ModEnd> max_val = ( ut32
<S2SV_ModStart> -- parameters_size ; } if ( p4 <= 0 ) { return ; }
<S2SV_ModStart> ) ; RAnalOp next_op = { 0 }
<S2SV_ModStart> ] . name ) { continue ; } <S2SV_ModEnd> if ( values [
<S2SV_ModStart> obuf || obuf_len < 1 <S2SV_ModEnd> ) { return NULL <S2SV_ModStart> ; } break ; # if 0 <S2SV_ModStart> ) ; break ; # endif <S2SV_ModStart> . length ) ; if ( value -> encoding . block . data ) { <S2SV_ModStart> , ut8 ) ; } <S2SV_ModStart> + 1 ) ; if ( value -> encoding . block . data ) { <S2SV_ModStart> , ut8 ) ; }

<S2SV_ModStart> - 1 ; } int len = to - from ; <S2SV_ModStart> buf = calloc ( len <S2SV_ModEnd> , 1 ) ; <S2SV_ModStart> from , buf , len <S2SV_ModEnd> ) ; while ( <S2SV_ModStart> needle ) > 5 + rc <S2SV_ModStart> { bool is_wide32 = ( <S2SV_ModStart> + 2 < to ) && ( <S2SV_ModEnd> ! w [ 0 <S2SV_ModStart> w [ 4 ] )
<S2SV_ModStart> { int i ; struct minidump_directory entry <S2SV_ModEnd> ; sdb_num_set ( obj <S2SV_ModStart> , 0 ) ; ut64 rvadir = obj -> hdr -> stream_directory_rva ; <S2SV_ModStart> i ++ ) { ut32 delta = <S2SV_ModEnd> i * sizeof ( <S2SV_ModStart> ( struct minidump_directory ) ; int r = r_buf_read_at ( obj -> b , rvadir + delta , ( ut8 * ) & entry , sizeof ( struct minidump_directory ) ) ; if ( r ) { <S2SV_ModEnd> r_bin_mdmp_init_directory_entry ( obj , <S2SV_ModStart> r_bin_mdmp_init_directory_entry ( obj , & entry ) ; } <S2SV_ModEnd> } return true ;
<S2SV_ModStart> dfs , j ) int vdaux = verdef -> vd_aux ; if ( vdaux < 1 ) { sdb_free ( sdb_verdef ) ; goto out_error ; } vstart += vdaux <S2SV_ModEnd> ; if ( vstart
<S2SV_ModStart> == 0 ) { if ( dbg_data_len < 20 ) { eprintf ( "Truncated<S2SV_blank>NB10<S2SV_blank>entry,<S2SV_blank>not<S2SV_blank>enough<S2SV_blank>data<S2SV_blank>to<S2SV_blank>parse\\n" ) ; return 0 ; } SCV_NB10_HEADER nb10_hdr = { { 0 } } <S2SV_ModEnd> ; init_cv_nb10_header ( & <S2SV_ModStart> . age ) ; res -> file_name [ 0 ] = 0 ; if ( nb10_hdr . file_name ) { <S2SV_ModStart> - 1 ) ; }
<S2SV_ModStart> nb10sz = 16 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ! ret ) { <S2SV_ModEnd> return NULL ; } <S2SV_ModStart> return NULL ; } int sz = bin -> nlibs * sizeof ( struct dyld_cache_image_info ) ; image_infos = malloc ( sz ) ; if ( ! image_infos ) { free ( ret ) ; return NULL ; } r_buf_read_at <S2SV_ModEnd> ( bin -> b <S2SV_ModStart> ( bin -> b , <S2SV_ModEnd> bin -> hdr . <S2SV_ModStart> -> hdr . startaddr , ( ut8 * ) image_infos , sz <S2SV_ModStart> ) ; dyld_vmbase = r_buf_read64le <S2SV_ModEnd> ( bin -> b <S2SV_ModStart> ( bin -> b , <S2SV_ModEnd> bin -> hdr . <S2SV_ModStart> offset = liboff ; int pfo = <S2SV_ModEnd> image_infos [ idx ] <S2SV_ModStart> idx ] . pathFileOffset ; if ( pfo < 0 || pfo <S2SV_ModStart> ) { eprintf ( "corrupted<S2SV_blank>file:<S2SV_blank>pathFileOffset<S2SV_blank>><S2SV_blank>bin->size<S2SV_blank>(%d)\\n" , pfo <S2SV_ModEnd> ) ; free ( <S2SV_ModStart> ; } libname = r_buf_read_string <S2SV_ModEnd> ( bin -> b <S2SV_ModStart> ( bin -> b , pfo , 64 <S2SV_ModEnd> ) ; data =
<S2SV_ModStart> struct r_bin_dyldcache_obj_t * bin = R_NEW0 ( struct r_bin_dyldcache_obj_t ) <S2SV_ModStart> ; if ( ! bin <S2SV_ModEnd> ) { return NULL <S2SV_ModStart> return NULL ; } <S2SV_ModEnd> if ( ! buf <S2SV_ModStart> ) ; if ( ! bin -> b ||
<S2SV_ModStart> op > 0xbf ) { return 1 ; } <S2SV_ModEnd> WasmOpDef * opdef = <S2SV_ModStart> < buf_len ) ) { goto err ; } <S2SV_ModEnd> if ( ! ( <S2SV_ModStart> ) ) ) ) { goto err ; } <S2SV_ModEnd> int i = 0 <S2SV_ModStart> <= buf_len ) ) { goto beach ; } <S2SV_ModEnd> op -> len += <S2SV_ModStart> < buf_len ) ) { goto beach ; } <S2SV_ModEnd> op -> len += <S2SV_ModStart> op -> txt ) + 10 <S2SV_ModStart> i ++ ) { int optxtlen = strlen ( op -> txt ) ; <S2SV_ModStart> op -> txt + optxtlen , R_ASM_BUFSIZE - optxtlen <S2SV_ModEnd> , "%d<S2SV_blank>" , table
<S2SV_ModStart> -> sh_info && ( end - <S2SV_ModStart> char * ) defs > i <S2SV_ModEnd> ) ; ++ cnt <S2SV_ModStart> ( vdaux < 1 || ( char * ) UINTPTR_MAX - vstart < vdaux <S2SV_ModStart> vstart > end || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ ( <S2SV_ModStart> ( Verdaux ) ) <S2SV_ModEnd> ) { sdb_free ( <S2SV_ModStart> vstart > end || end - vstart < <S2SV_ModEnd> sizeof ( Elf_ ( <S2SV_ModStart> ( Verdaux ) ) <S2SV_ModEnd> ) { sdb_free (
<S2SV_ModStart> ] == '<S2SV_blank>' ) { input ++ ; } <S2SV_ModEnd> ptr = strchr ( <S2SV_ModStart> , off ) ) { <S2SV_ModStart> input ) ; } } <S2SV_ModStart> offset ) ) ) { <S2SV_ModStart> ( "Unknown<S2SV_blank>filesystem<S2SV_blank>type\\n" ) ; } <S2SV_ModStart> -> offset ) ) { <S2SV_ModStart> , input ) ; }
<S2SV_ModStart> & EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data ) <S2SV_ModStart> EXT2_BLOCK_SIZE ( data ) ) ; if ( ! buf ) { return - 1 ; } <S2SV_ModEnd> struct grub_ext4_extent_header * leaf <S2SV_ModStart> ( GRUB_ERR_BAD_FS , "invalid<S2SV_blank>extent" ) ; free ( buf <S2SV_ModStart> . len ) ) { free ( buf ) ; return 0 ; } <S2SV_ModEnd> else { grub_disk_addr_t start <S2SV_ModStart> . start ) ; free ( buf ) ; <S2SV_ModStart> , "something<S2SV_blank>wrong<S2SV_blank>with<S2SV_blank>extent" ) ; free ( buf ) ; <S2SV_ModStart> - 1 ; } free ( buf ) ; <S2SV_ModStart> ( ! indir ) { return grub_errno ; } <S2SV_ModEnd> if ( grub_disk_read ( <S2SV_ModStart> , indir ) ) { return grub_errno ; } <S2SV_ModEnd> blknr = grub_le_to_cpu32 ( <S2SV_ModStart> ( ! indir ) { return grub_errno ; } <S2SV_ModEnd> if ( grub_disk_read ( <S2SV_ModStart> , indir ) ) { return grub_errno ; } <S2SV_ModEnd> if ( grub_disk_read ( <S2SV_ModStart> , indir ) ) { return grub_errno ; } <S2SV_ModEnd> blknr = grub_le_to_cpu32 (
<S2SV_ModStart> , buf ) ) { return 0 ; } <S2SV_ModEnd> ext_block = ( struct
<S2SV_ModStart> * c ) { char * fpath = grub_malloc ( <S2SV_ModEnd> grub_strlen ( currpath ) <S2SV_ModStart> currpath ) + 1 ) ; char * name = fpath ; char * next ; enum grub_fshelp_filetype type = GRUB_FSHELP_DIR ; grub_fshelp_node_t currnode = currroot ; grub_fshelp_node_t oldnode = currroot ; c -> currroot = currroot ; grub_strncpy ( fpath , currpath , <S2SV_ModEnd> grub_strlen ( currpath ) <S2SV_ModStart> + 1 ) ; <S2SV_ModEnd> while ( * name <S2SV_ModStart> * currfound = currnode ; free ( fpath ) <S2SV_ModStart> , c ) ; free ( fpath ) ; <S2SV_ModStart> if ( grub_errno ) { free ( fpath ) ; return grub_errno ; } <S2SV_ModEnd> break ; } if <S2SV_ModStart> , c ) ; free ( fpath ) ; <S2SV_ModStart> ( oldnode , c ) ; free ( fpath <S2SV_ModStart> , c ) ; free ( fpath ) ; <S2SV_ModStart> foundtype = type ; free ( fpath ) ; <S2SV_ModStart> = next ; } free ( fpath ) ;
<S2SV_ModStart> file -> device ) { <S2SV_ModStart> -> disk ) ; }
<S2SV_ModStart> ) { if ( ! disk ) { eprintf ( "oops.<S2SV_blank>no<S2SV_blank>disk\\n" ) ; return 1 ; } <S2SV_ModEnd> const int blocksize = <S2SV_ModStart> int blocksize = 512 <S2SV_ModEnd> ; RIOBind * iob <S2SV_ModStart> if ( bio ) { <S2SV_ModStart> iob = bio ; } if ( <S2SV_ModEnd> iob -> read_at ( <S2SV_ModStart> size * blocksize ) <S2SV_ModEnd> == - 1 ) <S2SV_ModStart> == - 1 ) { <S2SV_ModStart> return 1 ; } <S2SV_ModEnd> return 0 ; }
<S2SV_ModStart> r_buf_new ( ) ; if ( ! tbuf ) { return NULL ; }
<S2SV_ModStart> n_got * sizeof ( struct reloc_struct_t <S2SV_ModEnd> ) ) ; if

<S2SV_ModStart> if ( ! data || len < 2 ) { return 0 ; } <S2SV_ModEnd> memset ( op ,
<S2SV_ModStart> ) ; } } return - 1 ;
<S2SV_ModStart> != 0 ) { char * filename = grub_malloc ( <S2SV_ModEnd> dirent . namelen + <S2SV_ModStart> . namelen + 1 ) ; <S2SV_ModEnd> struct grub_fshelp_node * fdiro <S2SV_ModStart> type = GRUB_FSHELP_UNKNOWN ; if ( ! filename ) { break ; } <S2SV_ModStart> if ( grub_errno ) { free ( filename ) ; return 0 ; } <S2SV_ModEnd> fdiro = grub_malloc ( <S2SV_ModStart> ( ! fdiro ) { free ( filename ) ; return 0 ; } <S2SV_ModEnd> fdiro -> data = <S2SV_ModStart> if ( grub_errno ) { free ( filename ) ; <S2SV_ModEnd> grub_free ( fdiro ) <S2SV_ModStart> , closure ) ) { free ( filename ) ; return 1 ; } free ( filename ) <S2SV_ModEnd> ; } fpos +=
<S2SV_ModStart> fileblock < INDIRECT_BLOCKS ) { <S2SV_ModStart> fileblock ] ) ; }
<S2SV_ModStart> filesize - pos ; if ( len < 1 || len == 0xffffffff ) { return - 1 ; }
<S2SV_ModStart> -> list . objects || ! object -> list . objects [ 0 ] || ! object -> list . objects [ 1 ] || <S2SV_ModEnd> object -> list .
<S2SV_ModStart> != X86R_UNDEFINED ) { if ( reg_index < 2 ) { <S2SV_ModStart> ] = temp ; } <S2SV_ModStart> offset += temp ; if ( reg_index < 2 ) { <S2SV_ModStart> ] = X86R_UNDEFINED ; }
<S2SV_ModStart> ) ; RAnalOp next_op = { 0 }
<S2SV_ModStart> ( ! esil ) { return ; } <S2SV_ModEnd> r_anal_esil_to_reil_setup ( esil ,
<S2SV_ModStart> , 0 ) ; int minsz = R_MIN ( len , size ) ; minsz = R_MAX ( minsz , 0 ) ; <S2SV_ModStart> 0 ; j < minsz <S2SV_ModEnd> ; j ++ ) <S2SV_ModStart> j ++ ) { ut8 ch = ( ( j + idx - 1 ) > minsz ) ? 0xff : <S2SV_ModEnd> buf [ j + <S2SV_ModStart> j + idx ] ; r_cons_printf ( "%02x" , ch <S2SV_ModStart> val != UT64_MAX ) { <S2SV_ModStart> . val ) ; } <S2SV_ModStart> ptr != UT64_MAX ) { <S2SV_ModStart> . ptr ) ; } <S2SV_ModStart> != - 1 ) { <S2SV_ModStart> . refptr ) ; }
<S2SV_ModStart> ; if ( argReg > regsz ) { return ; <S2SV_ModEnd> } p4 = r_uleb128
<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { return NULL ; }
<S2SV_ModStart> R_ANAL_OP_TYPE_CJMP ; if ( len > 1 ) { if ( <S2SV_ModStart> ] <= 127 ) { <S2SV_ModStart> op -> size ; } else { <S2SV_ModEnd> op -> jump = <S2SV_ModStart> op -> size ; } } else { op -> jump = addr ; }
<S2SV_ModStart> str_struct . string ; if ( name > 1024 ) { <S2SV_ModStart> 0 ) ; } else { eprintf ( "Invalid<S2SV_blank>string<S2SV_blank>pointer<S2SV_blank>at<S2SV_blank>%p\\n" , name ) ; } }
<S2SV_ModStart> , count ) ; char * txt = op -> txt ; int txtLen = strlen ( op -> txt ) ; int txtLeft = R_ASM_BUFSIZE - txtLen ; txt += txtLen ; <S2SV_ModStart> i < count && txtLen <S2SV_ModEnd> + 10 < R_ASM_BUFSIZE <S2SV_ModStart> i ++ ) { snprintf ( txt , txtLeft <S2SV_ModEnd> , "%d<S2SV_blank>" , table <S2SV_ModStart> i ] ) ; txtLen = strlen ( txt ) ; txt += txtLen ; txtLeft -= txtLen ; } snprintf ( txt , txtLeft - 1 <S2SV_ModEnd> , "%d" , def
<S2SV_ModStart> if ( buf ) { if ( pos + real_offset + len >= size ) { grub_errno = GRUB_ERR_BAD_FS ; return grub_errno ; } <S2SV_ModStart> , len ) ; }
<S2SV_ModStart> , 0 ) ; st32 vnaux = entry -> vn_aux ; if ( vnaux < 1 ) { goto beach ; } vstart += vnaux <S2SV_ModEnd> ; for ( j
<S2SV_ModStart> ( sts ) { if ( len < 4 ) { return ; }
<S2SV_ModStart> bin -> dyld_info = calloc ( 1 , <S2SV_ModEnd> sizeof ( struct dyld_info_command <S2SV_ModStart> ) ; if ( bin -> dyld_info ) { if ( <S2SV_ModStart> ( "Cannot<S2SV_blank>parse<S2SV_blank>dyldinfo\\n" ) ; R_FREE <S2SV_ModEnd> ( bin -> dyld_info <S2SV_ModStart> ) ; } } }
<S2SV_ModStart> vdaux < 1 || vstart + vdaux < vstart <S2SV_ModEnd> ) { sdb_free (
<S2SV_ModStart> eoc ) { i ++ <S2SV_ModEnd> ; } if (
<S2SV_ModStart> ptr = NULL ; ut32 len = sec -> payload_len ; <S2SV_ModStart> sec -> payload_data ; int buflen = bin -> buf -> length - ( ut32 ) sec -> payload_data <S2SV_ModEnd> ; ut32 count = <S2SV_ModStart> ( i < len && len < buflen <S2SV_ModStart> ) ) ) { goto beach ; } if ( i + 4 >= buflen ) { goto beach <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) ) { goto beach <S2SV_ModEnd> ; } ptr -> <S2SV_ModStart> ) ) ) { goto beach ; } if ( i + 4 >= buflen ) { goto beach <S2SV_ModEnd> ; } ptr -> <S2SV_ModStart> } return ret ; beach : free ( ptr ) ; return ret ;
<S2SV_ModStart> sec -> payload_data ; int buflen = bin -> buf -> length - ( ut32 ) sec -> payload_data ; <S2SV_ModStart> ( i < len && len < buflen <S2SV_ModStart> ) ) ) { goto beach <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) ) { goto beach <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) ) { goto beach <S2SV_ModEnd> ; } ut32 j <S2SV_ModStart> } return ret ; beach : free ( ptr ) ; return ret ;
<S2SV_ModStart> ptr = NULL ; if ( ! ( ret = r_list_newf ( ( RListFree ) free ) ) ) { return NULL ; } ut8 * buf = bin -> buf -> buf + ( ut32 ) sec -> payload_data ; <S2SV_ModStart> -> buf -> length - <S2SV_ModEnd> ( ut32 ) sec
<S2SV_ModStart> ) { token ++ ; } if ( operand >= MAX_OPERANDS ) { eprintf ( "Too<S2SV_blank>many<S2SV_blank>operands\\n" ) ; return false
<S2SV_ModStart> -> header . types_size <S2SV_ModEnd> ) { continue ;
<S2SV_ModStart> regs [ 0 ] % 6 <S2SV_ModStart> ] = 0x8b ; data [ l ++ ] = ( ( ( ut32 ) op -> operands [ 0 ] . reg ) << 3 ) | 0x5 ; data [ l ++ ] = offset ; data [ l ++ ] = offset >> 8 ; data [ l ++ ] = offset >> 16 ; data [ l ++ ] = offset >> 24 ; return l ; } if ( a -> bits == 64 ) { if ( op -> operands [ 0 ] . type & OT_QWORD ) { if ( ! ( op -> operands [ 1 ] . type & OT_QWORD ) ) { if ( op -> operands [ 1 ] . regs [ 0 ] != - 1 ) { data [ l ++ ] = 0x67 ; } data [ l ++ ] = 0x48 ; } } else if ( op -> operands [ 1 ] . type & OT_DWORD ) { data [ l ++ ] = 0x44 ; } else if ( ! ( op -> operands [ 1 ] . type & OT_QWORD ) ) { data [ l ++ ] = 0x67 ; } if ( op -> operands [ 1 ] . type & OT_QWORD && op -> operands [ 0 ] . type & OT_QWORD ) { data [ l ++ ] = 0x48 ; } } if ( op -> operands [ 0 ] . type & OT_WORD ) { data [ l ++ ] = 0x66 ; data [ l ++ ] = op -> operands [ 1 ] . type & OT_BYTE ? 0x8a : 0x8b ; } else { data [ l ++ ] = ( op -> operands [ 1 ] . type & OT_BYTE || op -> operands [ 0 ] . type & OT_BYTE ) ? 0x8a : 0x8b ; } if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_UNDEFINED ) { if ( a -> bits == 64 ) { data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 0x4 ; data [ l ++ ] = 0x25 ; } else { <S2SV_ModStart> 3 | 0x5 ; } <S2SV_ModStart> offset >> 24 ; } else { if ( op -> operands [ 1 ] . scale [ 0 ] > 1 ) { data [ l ++ ] = op -> operands [ 0 ] . reg << 3 | 4 ; if ( op -> operands [ 1 ] . scale [ 0 ] >= 2 ) { base = 5 ; } if ( base ) { data [ l ++ ] = getsib ( op -> operands [ 1 ] . scale [ 0 ] ) << 6 | op -> operands [ 1 ] . regs [ 0 ] << 3 | base ; } else { data [ l ++ ] = getsib ( op -> operands [ 1 ] . scale [ 0 ] ) << 3 | op -> operands [ 1 ] . regs [ 0 ] ; } if ( offset || base ) { data [ l ++ ] = offset ; data [ l ++ ] = offset >> 8 ; data [ l ++ ] = offset >> 16 ; data [ l ++ ] = offset >> 24 ; } <S2SV_ModStart> ; } if ( op -> operands [ 1 ] . regs [ 1 ] != X86R_UNDEFINED <S2SV_ModEnd> ) { data [ <S2SV_ModStart> l ++ ] = op -> operands [ 1 ] . regs [ 1 ] << 3 | op -> operands [ 1 ] . regs [ 0 ] ; return l ; } if ( offset || op -> operands [ 1 ] . regs [ 0 ] == X86R_EBP ) { mod = 0x2 ; if ( op -> operands [ 1 ] . offset > 127 ) { mod = 0x4 ; } } if ( a -> bits == 64 && offset && op -> operands [ 0 ] . type & OT_QWORD ) { if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_RIP ) { data [ l ++ ] = 0x5 <S2SV_ModEnd> ; } else { <S2SV_ModStart> ; } else { if ( op -> operands [ 1 ] . offset > 127 ) { data [ l ++ ] = 0x80 | <S2SV_ModEnd> op -> operands [ <S2SV_ModStart> reg << 3 | op -> operands [ 1 ] . regs [ 0 ] <S2SV_ModEnd> ; } else { <S2SV_ModStart> ; } else { data [ l ++ ] = 0x40 | op -> operands [ 1 ] . regs [ 0 ] ; } } if ( op -> operands [ 1 ] . offset > 127 ) { mod = 0x1 ; } } else { if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_EIP && ( op -> operands [ 0 ] . type & OT_DWORD ) ) { data [ l ++ ] = 0x0d ; } else if ( op -> operands [ 1 ] . regs [ 0 ] == X86R_RIP && ( op -> operands [ 0 ] . type & OT_QWORD ) ) { data [ l ++ ] = 0x05 ; } else { data [ l ++ ] = mod << 5 | <S2SV_ModEnd> op -> operands [ <S2SV_ModStart> reg << 3 | <S2SV_ModEnd> op -> operands [
<S2SV_ModStart> << 24 ) ; snprintf <S2SV_ModEnd> ( op -> buf_asm <S2SV_ModStart> op -> buf_asm , sizeof ( op -> buf_asm ) , <S2SV_ModStart> << 8 ) ; snprintf <S2SV_ModEnd> ( op -> buf_asm <S2SV_ModStart> ( op -> buf_asm , sizeof ( op -> buf_asm ) <S2SV_ModStart> ) >> 4 ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA <S2SV_ModStart> [ 2 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA <S2SV_ModStart> [ 4 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i" , vA <S2SV_ModStart> [ 1 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i" , vA <S2SV_ModStart> ) >> 4 ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>%#x" , vA <S2SV_ModStart> [ 2 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>%#04hx" , vA <S2SV_ModStart> ; # undef llint snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i:v%i,<S2SV_blank>0x%" PFMT64x , <S2SV_ModStart> [ 3 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i" , vA <S2SV_ModStart> [ 3 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x" , vA <S2SV_ModStart> [ 2 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%#x" , vA <S2SV_ModStart> { case 1 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i}" , buf <S2SV_ModStart> ; case 2 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> ; case 3 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> ; case 4 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> break ; default : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{}" ) ; <S2SV_ModStart> , str ) ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , ",<S2SV_blank>[%04x]" , vB <S2SV_ModStart> [ 4 ] ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i..v%i},<S2SV_blank>[%04x]" , vC <S2SV_ModStart> { case 1 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i}" , buf <S2SV_ModStart> ; case 2 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> ; case 3 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> ; case 4 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> break ; default : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{}" ) ; <S2SV_ModStart> , str ) ; snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , ",<S2SV_blank>[%04x]" , vB <S2SV_ModStart> - 1 ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>string+%i" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , <S2SV_ModStart> ! flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>class+%i" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>%s" , vA <S2SV_ModStart> ! flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>field+%i" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>%s" , vA <S2SV_ModStart> - 1 ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[obj+%04x]" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>[0x%" PFMT64x "]" <S2SV_ModStart> - 1 ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>thing+%i" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , <S2SV_ModStart> ( flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>class+%i" , vA <S2SV_ModStart> ( flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>%s" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>field+%i" , vA <S2SV_ModStart> - 1 ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>string+%i" , vA <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>v%i,<S2SV_blank>0x%" PFMT64x , <S2SV_ModStart> ( flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i..v%i},<S2SV_blank>%s" , vC <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i..v%i},<S2SV_blank>class+%i" , vC <S2SV_ModStart> ( flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i..v%i},<S2SV_blank>%s" , vC <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i..v%i},<S2SV_blank>method+%i" , vC <S2SV_ModStart> { case 1 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i}" , buf <S2SV_ModStart> ; case 2 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> ; case 3 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> ; case 4 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> ; case 5 : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i,<S2SV_blank>v%i}" , buf <S2SV_ModStart> break ; default : snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , "<S2SV_blank>{}" ) ; <S2SV_ModStart> ( flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , ",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x" , flag_str <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , ",<S2SV_blank>class+%i" , vB <S2SV_ModStart> ( flag_str ) { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , ",<S2SV_blank>%s<S2SV_blank>;<S2SV_blank>0x%x" , flag_str <S2SV_ModStart> ; } else { snprintf ( str , sizeof ( str ) <S2SV_ModEnd> , ",<S2SV_blank>method+%i" , vB
<S2SV_ModStart> info -> has_va ; <S2SV_ModEnd> char * arch = <S2SV_ModStart> char * arch = strdup ( info -> arch ) ; char * cpu = info -> cpu ? strdup ( info -> cpu ) : NULL <S2SV_ModEnd> ; ut16 bits = <S2SV_ModStart> ) ; if ( cpu && * <S2SV_ModEnd> cpu ) { r_config_set <S2SV_ModStart> config , "anal.cpu" , <S2SV_ModEnd> cpu ) ; } <S2SV_ModStart> ( r , binfile ) ; free ( cpu ) ; free ( arch
<S2SV_ModStart> ) + i ; size_t vstart_off = i ; <S2SV_ModStart> vdaux < 1 || shdr -> sh_size - vstart_off < vdaux <S2SV_ModEnd> ) { sdb_free ( <S2SV_ModStart> out_error ; } vstart += vdaux ; vstart_off <S2SV_ModStart> aux . vda_next ; vstart_off += aux . vda_next ;
<S2SV_ModStart> case '=' : case \'"\' : case '\\\\' : case
<S2SV_ModStart> * arg ) { char ch = * arg ; switch ( ch <S2SV_ModEnd> ) { case '@' <S2SV_ModStart> case ';' : case '=' : case <S2SV_ModStart> * b ++ = ch <S2SV_ModEnd> ; break ; }
<S2SV_ModStart> ) { r_cons_printf ( "\\"k<S2SV_blank>bin/pe/%s/%d=%s.%s\\"\\n" <S2SV_ModEnd> , module , symbol <S2SV_ModStart> else { r_cons_printf ( "\\"k<S2SV_blank>bin/pe/%s/%d=%s\\"\\n" <S2SV_ModEnd> , module , symbol
<S2SV_ModStart> ; continue ; } char op0 = 0 ; <S2SV_ModStart> ( q ) { op0 = * q ; <S2SV_ModStart> { cmd = p <S2SV_ModEnd> ; } else { <S2SV_ModStart> { * p = op0 <S2SV_ModEnd> ; cmd = p
<S2SV_ModStart> ( filter ) ) ; gchar * dot_filename ; gchar * png_filename ; gchar * command_line <S2SV_ModStart> , "}\\n" ) ; dot_filename = g_strdup_printf ( "/tmp/rs-filter-graph.%u" , g_random_int ( ) ) ; png_filename = g_strdup_printf ( "%s.%u.png" , dot_filename , g_random_int ( ) ) ; g_file_set_contents ( dot_filename <S2SV_ModEnd> , str -> str <S2SV_ModStart> , NULL ) ; command_line = g_strdup_printf ( "dot<S2SV_blank>-Tpng<S2SV_blank>>%s<S2SV_blank><%s" , png_filename , dot_filename ) ; <S2SV_ModStart> 0 != system ( command_line <S2SV_ModEnd> ) ) g_warning ( <S2SV_ModStart> ( "Calling<S2SV_blank>dot<S2SV_blank>failed" ) ; g_free ( command_line ) ; command_line = g_strdup_printf ( "gnome-open<S2SV_blank>%s" , png_filename ) ; <S2SV_ModStart> 0 != system ( command_line <S2SV_ModEnd> ) ) g_warning ( <S2SV_ModStart> ) g_warning ( "Calling<S2SV_blank>gnome-open<S2SV_blank>failed." ) ; g_free ( command_line ) ; g_free ( dot_filename ) ; g_free ( png_filename
<S2SV_ModStart> , int tagval , uint32 <S2SV_ModEnd> * length ) {
<S2SV_ModStart> ; } while ( indexw < width && <S2SV_ModStart> ; } while ( indexw < width && <S2SV_ModStart> ; } while ( indexw < width && <S2SV_ModStart> ; } while ( indexw < width &&
<S2SV_ModStart> uint8 * data ; struct stream packet = * s ; <S2SV_ModStart> ) ; if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( "cliprdr_process(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>packet<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & packet ) ; } if (
<S2SV_ModStart> ; int tagval ; struct stream packet ; <S2SV_ModStart> , length ) ; packet = * s ; <S2SV_ModStart> ) return False ; if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( "cssp_read_tsrequest(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>version<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & packet ) ; } <S2SV_ModStart> ) return False ; if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( "cssp_read_tsrequest(),<S2SV_blank>consume<S2SV_blank>of<S2SV_blank>token<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & packet ) ; } s_realloc ( token , length ) ; s_reset ( token ) <S2SV_ModEnd> ; out_uint8p ( token
<S2SV_ModStart> char * buf ; struct stream packet = * s ; if ( ! s_check ( s ) ) { rdp_protocol_error ( "lspci_process(),<S2SV_blank>stream<S2SV_blank>is<S2SV_blank>in<S2SV_blank>unstable<S2SV_blank>state" , & packet ) ; }
<S2SV_ModStart> STREAM s ) { uint32 length ; struct stream packet = * s <S2SV_ModEnd> ; ber_parse_header ( s <S2SV_ModStart> & length ) ; if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( "mcs_parse_domain_params(),<S2SV_blank>consume<S2SV_blank>domain<S2SV_blank>params<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & packet ) ; }
<S2SV_ModStart> ; uint8 result ; uint32 <S2SV_ModEnd> length ; STREAM s <S2SV_ModStart> length ; STREAM s ; struct stream packet <S2SV_ModStart> ) return False ; packet = * s ; <S2SV_ModStart> , length ) ; if ( ! s_check_rem ( s , length ) ) { rdp_protocol_error ( "mcs_recv_connect_response(),<S2SV_blank>consume<S2SV_blank>connect<S2SV_blank>id<S2SV_blank>from<S2SV_blank>stream<S2SV_blank>would<S2SV_blank>overrun" , & packet ) ; }
<S2SV_ModStart> uint8 * next_order ; struct stream packet = * s ; <S2SV_ModStart> , type ) ; if ( ! s_check_rem ( s , length + 7 ) ) { rdp_protocol_error ( "process_secondary_order(),<S2SV_blank>next<S2SV_blank>order<S2SV_blank>pointer<S2SV_blank>would<S2SV_blank>overrun<S2SV_blank>stream" , & packet ) ; }
<S2SV_ModStart> ; exfat_error ( "exFAT<S2SV_blank>file<S2SV_blank>system<S2SV_blank>is<S2SV_blank>not<S2SV_blank>found" ) ; return - EIO ; } if ( ef -> sb -> sector_bits < 9 ) { exfat_close ( ef -> dev ) ; exfat_error ( "too<S2SV_blank>small<S2SV_blank>sector<S2SV_blank>size:<S2SV_blank>2^%hhd" , ef -> sb -> sector_bits ) ; free ( ef -> sb ) ; return - EIO ; } if ( ( int ) ef -> sb -> sector_bits + ( int ) ef -> sb -> spc_bits > 25 ) { exfat_close ( ef -> dev ) ; exfat_error ( "too<S2SV_blank>big<S2SV_blank>cluster<S2SV_blank>size:<S2SV_blank>2^(%hhd+%hhd)" , ef -> sb -> sector_bits , ef -> sb -> spc_bits ) ; free ( ef -> sb <S2SV_ModStart> ; } if ( <S2SV_ModEnd> le64_to_cpu ( ef ->
<S2SV_ModStart> >= sizeof ( spath ) ) return - 1 ; if ( strstr ( name , ".." ) || strchr ( name , '/'
<S2SV_ModStart> l == 0 ) # ifdef SUPER_SECURE memcpy ( own_dir , "/dev/null/" , 2 ) ; # else <S2SV_ModStart> , 2 ) ; # endif
<S2SV_ModStart> char * key ; <S2SV_ModEnd> } * pair , <S2SV_ModStart> ( it ) ; <S2SV_ModEnd> for ( it =
<S2SV_ModStart> char * key ; <S2SV_ModEnd> } * pair , <S2SV_ModStart> ( it ) ; <S2SV_ModEnd> for ( it =
<S2SV_ModStart> char * key ; <S2SV_ModEnd> } * pair ,
<S2SV_ModStart> char * key ; <S2SV_ModEnd> } * pair ,
<S2SV_ModStart> dest , rpmpsm psm , int exclusive <S2SV_ModStart> Fopen ( dest , exclusive ? "wx.ufdio" : "a.ufdio" <S2SV_ModEnd> ) ; umask ( <S2SV_ModStart> ( old_umask ) ; if ( ! exclusive && wfd != NULL && ! linkSane ( wfd , dest ) ) { rc = RPMERR_OPEN_FAILED ; goto exit ; }
<S2SV_ModStart> dest , psm , 1 , <S2SV_ModStart> dest , psm , 1 , <S2SV_ModStart> dest , psm , 0 ,
<S2SV_ModStart> fn , psm , 0 ,
<S2SV_ModStart> sb . st_mode ) ) { struct stat dsb ; if ( stat ( fn , & dsb ) == 0 && S_ISDIR ( dsb . st_mode ) ) { uid_t fuid ; if ( sb . st_uid == 0 || ( rpmugUid ( rpmfilesFUser ( fi , ix ) , & fuid ) == 0 && sb . st_uid == fuid ) ) { sb = dsb ; } } <S2SV_ModEnd> } if ( S_ISLNK
<S2SV_ModStart> path , rpmfi fi , const struct stat * fsb <S2SV_ModStart> st_mode ) ) { uid_t luid = dsb . st_uid ; <S2SV_ModStart> dsb . st_mode ) && ( luid == 0 || luid == fsb -> st_uid ) ) <S2SV_ModEnd> return 0 ; }
<S2SV_ModStart> ( fpath , fi , & sb
<S2SV_ModStart> ( * sock , "%s" , <S2SV_ModStart> ( * sock , "%s" ,
<S2SV_ModStart> pData -> socket , "%s" , <S2SV_ModStart> pData -> socket , "%s" ,
<S2SV_ModStart> ( "auth_tag_len" ) ; id_key_set = rb_intern_const ( "key_set" ) ;
<S2SV_ModStart> NULL ) ; } if ( p_key ) rb_ivar_set ( self , id_key_set , Qtrue ) ;
<S2SV_ModStart> ; char * name <S2SV_ModEnd> ; name = StringValueCStr <S2SV_ModStart> cipher , NULL , NULL <S2SV_ModEnd> , NULL , -
<S2SV_ModStart> sizeof iv ) ; rb_ivar_set ( self , id_key_set , Qtrue ) ;
<S2SV_ModStart> , NULL ) ; rb_ivar_set ( self , id_key_set , Qtrue ) ;
<S2SV_ModStart> & str ) ; if ( ! RTEST ( rb_attr_get ( self , id_key_set ) ) ) ossl_raise ( eCipherError , "key<S2SV_blank>not<S2SV_blank>set" ) ;
<S2SV_ModStart> * val ) { if ( opt_disable_client_reconnect ) { applog ( LOG_WARNING , "Stratum<S2SV_blank>client.reconnect<S2SV_blank>received<S2SV_blank>but<S2SV_blank>is<S2SV_blank>disabled,<S2SV_blank>not<S2SV_blank>reconnecting." ) ; return false ; } <S2SV_ModEnd> char * url , <S2SV_ModStart> [ 256 ] ; char * sockaddr_url , * stratum_port , * tmp ; url = ( char * ) json_string_value ( json_array_get ( val , 0 ) ) ; if ( ! url ) url = pool -> sockaddr_url ; port <S2SV_ModEnd> = ( char * <S2SV_ModStart> json_array_get ( val , <S2SV_ModEnd> 1 ) ) ; <S2SV_ModStart> pool -> stratum_port ; snprintf ( address , sizeof ( address ) <S2SV_ModEnd> , "%s:%s" , url
<S2SV_ModStart> 128 ) ) ) { applog ( LOG_WARNING , "%s:<S2SV_blank>Failed<S2SV_blank>to<S2SV_blank>convert<S2SV_blank>header<S2SV_blank>to<S2SV_blank>header_bin,<S2SV_blank>got<S2SV_blank>%s" , __func__ , header ) ; pool_failed ( pool ) ; return false ; } <S2SV_ModEnd> cb1 = ( unsigned
<S2SV_ModStart> ) ; if ( n2size < 1 ) <S2SV_ModEnd> { applog ( LOG_INFO
<S2SV_ModStart> * prefix , struct manager_ctx * manager , struct <S2SV_ModStart> , server -> password ) ; if ( server -> method ) fprintf ( f , ",\\n\\"method\\":\\"%s\\"" , server -> method ) ; else if ( manager -> method ) fprintf ( f , ",\\n\\"method\\":\\"%s\\"" , manager -> method <S2SV_ModStart> if ( server -> <S2SV_ModEnd> plugin ) fprintf (
<S2SV_ModStart> [ BUF_SIZE ] ; int i ; int port ; port = atoi ( server -> port ) <S2SV_ModEnd> ; build_config ( working_dir <S2SV_ModStart> build_config ( working_dir , manager , server ) <S2SV_ModEnd> ; memset ( cmd <S2SV_ModStart> cmd , BUF_SIZE , "%s<S2SV_blank>--manager-address<S2SV_blank>%s<S2SV_blank>-f<S2SV_blank>%s/.shadowsocks_%d.pid<S2SV_blank>-c<S2SV_blank>%s/.shadowsocks_%d.conf" , executable , <S2SV_ModEnd> manager -> manager_address , <S2SV_ModStart> manager_address , working_dir , <S2SV_ModEnd> port , working_dir , <S2SV_ModStart> port , working_dir , <S2SV_ModEnd> port ) ; if
<S2SV_ModStart> s , scopeCount ) ; if ( Stream_GetRemainingLength ( s ) / sizeof ( LICENSE_BLOB ) < scopeCount ) return FALSE
<S2SV_ModStart> ; uint8_t retval ; int <S2SV_ModEnd> keylen ; rec_off = <S2SV_ModStart> ; uint8_t retval ; int <S2SV_ModEnd> keylen ; rec_off =
<S2SV_ModStart> ) ; if ( keylen >= nodesize - rec_off <S2SV_ModEnd> ) { tsk_error_set_errno ( <S2SV_ModStart> cur_node , keylen , ( nodesize - rec_off ) <S2SV_ModEnd> ) ; free (
<S2SV_ModStart> ( p -> tokenpos >= ( p -> tokenlen - 1 ) <S2SV_ModEnd> ) { p ->
<S2SV_ModStart> where TSRMLS_DC ) { <S2SV_ModEnd> int o_name_len = name_len <S2SV_ModStart> ; char * buf , * buf2 <S2SV_ModEnd> , * d , <S2SV_ModStart> ; int l ; <S2SV_ModEnd> buf = estrndup ( <S2SV_ModStart> , name_len ) ; <S2SV_ModEnd> name_len = php_url_decode ( <S2SV_ModStart> ) { decrypt_return_plain : efree ( buf ) ; <S2SV_ModEnd> memcpy ( * where <S2SV_ModStart> decrypt_return_plain ; } } buf2 = estrndup ( value , value_len ) ; <S2SV_ModEnd> value_len = php_url_decode ( <S2SV_ModStart> ) ; skip_cookie : efree ( buf ) ; efree ( buf2 ) ; <S2SV_ModEnd> return * where ;
<S2SV_ModStart> TSRMLS_DC ) { char * buf , * buf2 <S2SV_ModEnd> , * d , <S2SV_ModStart> ; int l ; <S2SV_ModEnd> buf = estrndup ( <S2SV_ModStart> , name_len ) ; <S2SV_ModEnd> name_len = php_url_decode ( <S2SV_ModStart> ) { encrypt_return_plain : efree ( buf ) ; <S2SV_ModEnd> return estrndup ( value <S2SV_ModStart> encrypt_return_plain ; } } buf2 = estrndup ( value , value_len ) ; <S2SV_ModEnd> value_len = php_url_decode ( <S2SV_ModStart> ( d ) ; efree ( buf ) ; efree ( buf2 ) ; <S2SV_ModEnd> return d_url ; }
<S2SV_ModStart> 4 ] ; int nb_bits = req [ offset + 5 ] ; int <S2SV_ModStart> || MODBUS_MAX_WRITE_BITS < nb || nb_bits * 8 < nb <S2SV_ModStart> [ offset + 4 ] ; int nb_bytes = req [ offset + 5 <S2SV_ModStart> < 1 || MODBUS_MAX_WRITE_REGISTERS < nb || nb_bytes * 8
<S2SV_ModStart> . controlselector ) ; memcpy ( msg , & msg_tmp , sizeof ( * msg ) ) ; <S2SV_ModStart> ( peekonly ) { <S2SV_ModEnd> goto peekout ; } <S2SV_ModStart> msg ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd> , bus -> m_pdwGetRing <S2SV_ModStart> bus -> m_pdwGetRing + sizeof ( * msg ) - space_rem , buf_size ) ; } else if ( space_rem == sizeof ( * msg ) ) { if ( buf ) memcpy_fromio ( buf <S2SV_ModEnd> , bus -> m_pdwGetRing <S2SV_ModStart> bus -> m_pdwGetRing , buf_size ) ; } else { if ( buf ) { <S2SV_ModEnd> memcpy_fromio ( buf , <S2SV_ModStart> bus -> m_pdwGetRing + curr_grp + sizeof ( * msg ) , space_rem - sizeof ( * msg ) ) ; memcpy_fromio ( buf + space_rem - sizeof ( * msg ) , bus -> m_pdwGetRing , bytes_to_read - space_rem ) ; } } } else { if ( buf ) memcpy_fromio ( buf , bus -> m_pdwGetRing + curr_grp + sizeof ( * msg ) , <S2SV_ModEnd> buf_size ) ; } <S2SV_ModStart> buf_size ) ; } <S2SV_ModEnd> saa7164_writel ( bus ->
<S2SV_ModStart> static int enable ( bool start_restricted <S2SV_ModEnd> ) { LOG_INFO ( <S2SV_ModStart> ) { LOG_INFO ( LOG_TAG , "%s:<S2SV_blank>start<S2SV_blank>restricted<S2SV_blank>=<S2SV_blank>%d" , __func__ , start_restricted ) ; restricted_mode = start_restricted <S2SV_ModEnd> ; if ( !
<S2SV_ModStart> * bd_addr ) { if ( is_restricted_mode ( ) && ! btif_storage_is_restricted_device ( bd_addr ) ) return BT_STATUS_SUCCESS ;
<S2SV_ModStart> ( config ) ; if ( ! is_restricted_mode ( ) ) btif_config_remove_restricted ( config ) ;
<S2SV_ModStart> LINK_KEY ) ) ; if ( is_restricted_mode ( ) ) { BTIF_TRACE_WARNING ( "%s:<S2SV_blank>\'%s\'<S2SV_blank>pairing<S2SV_blank>will<S2SV_blank>be<S2SV_blank>removed<S2SV_blank>if<S2SV_blank>unrestricted" , __func__ , bdstr ) ; btif_config_set_int ( bdstr , "Restricted" , 1 ) ; }
<S2SV_ModStart> sBtInterface -> enable ( false
<S2SV_ModStart> bt_interface -> enable ( false
<S2SV_ModStart> bt_interface -> enable ( false
<S2SV_ModStart> bt_interface -> enable ( false <S2SV_ModStart> bt_interface -> enable ( false <S2SV_ModStart> bt_interface -> enable ( false <S2SV_ModStart> bt_interface -> enable ( false <S2SV_ModStart> bt_interface -> enable ( false <S2SV_ModStart> bt_interface -> enable ( false <S2SV_ModStart> bt_interface -> enable ( false <S2SV_ModStart> bt_interface -> enable ( false
<S2SV_ModStart> ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 1 , MSG_NOSIGNAL )
<S2SV_ModStart> { int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , length , MSG_NOSIGNAL ) <S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , length , MSG_NOSIGNAL )
<S2SV_ModStart> ( "error<S2SV_blank>:<S2SV_blank>a2dp<S2SV_blank>not<S2SV_blank>ready,<S2SV_blank>wait<S2SV_blank>250<S2SV_blank>ms<S2SV_blank>and<S2SV_blank>retry" ) ; TEMP_FAILURE_RETRY ( usleep ( 250000 ) <S2SV_ModEnd> ) ; skt_disconnect ( <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; } TEMP_FAILURE_RETRY ( usleep ( 250000 ) <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> ( "success" ) ; TEMP_FAILURE_RETRY ( usleep ( 250000 ) <S2SV_ModEnd> ) ; return 0
<S2SV_ModStart> , us_delay ) ; TEMP_FAILURE_RETRY ( usleep ( us_delay ) <S2SV_ModEnd> ) ; pthread_mutex_unlock (
<S2SV_ModStart> , us_delay ) ; TEMP_FAILURE_RETRY ( usleep ( us_delay ) <S2SV_ModEnd> ) ; pthread_mutex_unlock (
<S2SV_ModStart> ( ( read = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , len , MSG_NOSIGNAL )
<S2SV_ModStart> POLLOUT ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 1 , 500 ) <S2SV_ModStart> ( ( sent = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , len , MSG_NOSIGNAL )
<S2SV_ModStart> p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_RDWR | O_CLOEXEC ) ) <S2SV_ModStart> p_dev -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_RDWR | O_CLOEXEC ) )
<S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 1 , 50 )
<S2SV_ModStart> ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , sizeof ( ev )
<S2SV_ModStart> { ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( * ev )
<S2SV_ModStart> ) ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart> data_size , 0 ) )
<S2SV_ModStart> ( ( addr_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( val , O_RDONLY ) <S2SV_ModStart> val ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> , val , FACTORY_BT_BDADDR_STORAGE_LEN )
<S2SV_ModStart> btif_config_flush ( ) ; TEMP_FAILURE_RETRY ( usleep ( 100000 ) <S2SV_ModEnd> ) ; kill (
<S2SV_ModStart> , keylockstates ) ; TEMP_FAILURE_RETRY ( usleep ( 200000 ) <S2SV_ModEnd> ) ; toggle_os_keylockstates (
<S2SV_ModStart> hidreport ) ) ; TEMP_FAILURE_RETRY ( usleep ( 200000 ) <S2SV_ModEnd> ) ; memset (
<S2SV_ModStart> ) ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sig_on ) , 0 )
<S2SV_ModStart> "btif_hl_select_close_connected" ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , 0 ) )
<S2SV_ModStart> = ( int ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> mtu , MSG_DONTWAIT ) )
<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL , NULL ) )
<S2SV_ModStart> ( "btif_hl_select_wake_reset" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , MSG_WAITALL ) )
<S2SV_ModStart> "btif_hl_select_wakeup" ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , 0 ) )
<S2SV_ModStart> ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( clonedev , O_RDWR ) <S2SV_ModStart> ( ( err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & ifr ) ) ) <S2SV_ModStart> { int flags = TEMP_FAILURE_RETRY ( <S2SV_ModStart> F_GETFL , 0 ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> fcntl ( fd , <S2SV_ModStart> flags | O_NONBLOCK ) )
<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> + sizeof ( tETH_HDR )
<S2SV_ModStart> { ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( btpan_cb . congest_packet ) <S2SV_ModStart> 0 ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 1 , 0 )
<S2SV_ModStart> &= ~ IFF_UP ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> caddr_t ) & ifr )
<S2SV_ModStart> ) ; err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> SIOCGIFHWADDR , & ifr ) <S2SV_ModStart> ; } err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> caddr_t ) & ifr ) <S2SV_ModStart> IFF_MULTICAST ; err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) & ifr ) )
<S2SV_ModStart> > 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( uinput_fd , UI_DEV_DESTROY )
<S2SV_ModStart> = value ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( event ) ) )
<S2SV_ModStart> ) { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> x ] , O_RDWR ) <S2SV_ModStart> 0x0000 ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , sizeof ( dev ) <S2SV_ModStart> - 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_SET_EVBIT , EV_KEY ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ioctl ( fd , <S2SV_ModStart> UI_SET_EVBIT , EV_REL ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ioctl ( fd , <S2SV_ModStart> , UI_SET_EVBIT , EV_SYN ) <S2SV_ModStart> ; x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ] . mapped_id ) ) ; if ( TEMP_FAILURE_RETRY <S2SV_ModEnd> ( ioctl ( fd <S2SV_ModStart> , UI_DEV_CREATE , NULL )
<S2SV_ModStart> SOCK_THREAD_FD_EXCEPTION ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> FIONREAD , & size ) <S2SV_ModStart> { int count = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL | MSG_DONTWAIT ) ) <S2SV_ModStart> if ( drop_it || TEMP_FAILURE_RETRY ( <S2SV_ModStart> , & size ) )
<S2SV_ModStart> { int sent = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , len , MSG_DONTWAIT )
<S2SV_ModStart> ; int received = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , size , 0 )
<S2SV_ModStart> out ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , FIONREAD , size )
<S2SV_ModStart> SOCK_THREAD_FD_EXCEPTION ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , & size ) ) <S2SV_ModStart> && size ) ) { <S2SV_ModEnd> BTA_JvRfcommWrite ( slot -> <S2SV_ModStart> -> id ) ; } <S2SV_ModStart> if ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> FIONREAD , & size )
<S2SV_ModStart> ; ssize_t sent = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> len , MSG_DONTWAIT )
<S2SV_ModStart> ; int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> client_address , & clen )
<S2SV_ModStart> flags ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , 0 ) )
<S2SV_ModStart> } ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> cmd ) , 0 )
<S2SV_ModStart> ; } } return TEMP_FAILURE_RETRY ( <S2SV_ModStart> size_send , 0 ) )
<S2SV_ModStart> 0 } ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , 0 ) )
<S2SV_ModStart> 0 } ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , 0 ) )
<S2SV_ModStart> cmd_fdr ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> cmd ) , MSG_WAITALL )
<S2SV_ModStart> opts ; opts = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( s , F_GETFL ) <S2SV_ModStart> O_NONBLOCK ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , F_SETFL , opts )
<S2SV_ModStart> ; int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> poll_count , - 1 )
<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , r , MSG_WAITALL )
<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , s , 0 )
<S2SV_ModStart> do { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & msg , MSG_NOSIGNAL )
<S2SV_ModStart> do { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> delay , & delay )
<S2SV_ModStart> logfile_fd != INVALID_FD ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> , data , length )
<S2SV_ModStart> ; } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | S_IWGRP | S_IROTH ) <S2SV_ModStart> ; return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> , "btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea" , 16 )
<S2SV_ModStart> ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , length , 0 )
<S2SV_ModStart> { int client_socket = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , NULL , NULL ) <S2SV_ModStart> client_socket_ = client_socket ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 16 , 0 )
<S2SV_ModStart> { ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> + transmitted_length , length )
<S2SV_ModStart> { ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> + transmitted_length , length )
<S2SV_ModStart> , __func__ ) ; TEMP_FAILURE_RETRY ( usleep ( 10000 ) <S2SV_ModEnd> ) ; kill (
<S2SV_ModStart> != '\\0' ) ; int dir_fd = - 1 ; FILE * fp = NULL ; static const char * temp_file_ext = ".new" ; const int filename_len = strlen ( filename ) ; const int temp_filename_len = filename_len + strlen ( temp_file_ext ) + 1 ; char * <S2SV_ModEnd> temp_filename = osi_calloc ( <S2SV_ModStart> temp_filename = osi_calloc ( temp_filename_len ) ; snprintf ( temp_filename , temp_filename_len , "%s%s" , filename , temp_file_ext ) ; char * temp_dirname = osi_strdup ( filename ) ; const char * directoryname = dirname ( temp_dirname <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ; if ( ! directoryname ) { LOG_ERROR ( "%s<S2SV_blank>error<S2SV_blank>extracting<S2SV_blank>directory<S2SV_blank>from<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , filename , strerror ( errno ) ) ; goto error ; } dir_fd = TEMP_FAILURE_RETRY ( open ( directoryname , O_RDONLY ) ) ; if ( dir_fd < 0 ) { LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>open<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , directoryname , strerror ( errno ) ) ; goto error ; } <S2SV_ModEnd> fp = fopen ( <S2SV_ModStart> ( node ) ; if ( <S2SV_ModStart> section -> name ) < 0 ) { LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } <S2SV_ModEnd> for ( const list_node_t <S2SV_ModStart> ( enode ) ; if ( <S2SV_ModStart> entry -> value ) < 0 ) { LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } <S2SV_ModEnd> } if ( list_next <S2SV_ModStart> -> sections ) ) { if ( <S2SV_ModStart> '\\n' , fp ) == EOF ) { LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>write<S2SV_blank>to<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } } } if ( fsync ( fileno ( fp ) ) < 0 ) { LOG_WARN ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; } if ( <S2SV_ModEnd> fclose ( fp ) <S2SV_ModStart> fclose ( fp ) == EOF ) { LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>file<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , temp_filename , strerror ( errno ) ) ; goto error ; } fp = NULL <S2SV_ModStart> goto error ; } if ( fsync ( dir_fd ) < 0 ) { LOG_WARN ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>fsync<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , directoryname , strerror ( errno ) ) ; } if ( close ( dir_fd ) < 0 ) { LOG_ERROR ( "%s<S2SV_blank>unable<S2SV_blank>to<S2SV_blank>close<S2SV_blank>dir<S2SV_blank>\'%s\':<S2SV_blank>%s" , __func__ , directoryname , strerror ( errno ) ) ; goto error ; } osi_free ( temp_filename ) ; osi_free ( temp_dirname <S2SV_ModEnd> ) ; return true <S2SV_ModStart> true ; error : <S2SV_ModEnd> unlink ( temp_filename ) <S2SV_ModStart> ( temp_filename ) ; if ( fp ) fclose ( fp ) ; if ( dir_fd != - 1 ) close ( dir_fd ) ; osi_free ( temp_filename ) ; osi_free ( temp_dirname <S2SV_ModEnd> ) ; return false
<S2SV_ModStart> tv_usec = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> , & timeout ) )
<S2SV_ModStart> ; int bytes_read = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , reader -> buffer_size )
<S2SV_ModStart> do { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MAX_EVENTS , - 1 )
<S2SV_ModStart> ; int flags = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd , F_GETFL ) <S2SV_ModStart> ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , flags | O_NONBLOCK ) <S2SV_ModStart> false ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , F_SETFL , flags )
<S2SV_ModStart> ; int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , NULL , NULL )
<S2SV_ModStart> 0 ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> FIONREAD , & size )
<S2SV_ModStart> NULL ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> count , MSG_DONTWAIT ) )
<S2SV_ModStart> NULL ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart> count , MSG_DONTWAIT ) )
<S2SV_ModStart> ; ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & msg , MSG_DONTWAIT )
<S2SV_ModStart> ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( addr ) ) ) <S2SV_ModStart> error ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 , 0 ) ) <S2SV_ModStart> error ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 2 , 0 ) <S2SV_ModStart> error ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , length , 0 )
<S2SV_ModStart> POLLHUP ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ch_id ] . read_poll_tmo_ms ) <S2SV_ModStart> ; } n = TEMP_FAILURE_RETRY ( <S2SV_ModStart> n_read , 0 ) )
<S2SV_ModStart> ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , p_buf , msglen )
<S2SV_ModStart> POLLIN ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 1 , 0 ) <S2SV_ModStart> ( ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> remote , & len )
<S2SV_ModStart> sig_recv = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , MSG_WAITALL ) )
<S2SV_ModStart> ) { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> , 1 , 1 ) <S2SV_ModStart> ; return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> buf , UIPC_FLUSH_BUFFER_SIZE ) )
<S2SV_ModStart> active_set ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL , NULL ) )
<S2SV_ModStart> ( "UIPC<S2SV_blank>SEND<S2SV_blank>WAKE<S2SV_blank>UP" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) , 0 ) )
<S2SV_ModStart> * data ) { UINT16 buflen = <S2SV_ModEnd> ( UINT16 ) ( <S2SV_ModStart> ( BT_HDR ) ) ; if ( buflen < len ) { android_errorWriteWithInfoLog ( 0x534e4554 , "28672558" , - 1 , NULL , 0 ) ; return NULL ; } BT_HDR * p_buf = GKI_getbuf ( buflen
<S2SV_ModStart> ( pin_code == NULL || pin_len > PIN_CODE_LEN
<S2SV_ModStart> ( alarm_timer ) ; btif_config_write ( <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> alarm_timer , CONFIG_SETTLE_PERIOD_MS , timer_config_save_cb <S2SV_ModEnd> , NULL ) ;
<S2SV_ModStart> LEGACY_CONFIG_FILE_PATH ) ; } btif_config_devcache_cleanup ( ) ;
<S2SV_ModStart> bufsize - namelen - 1 <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> ; char file [ 1024 <S2SV_ModEnd> ] ; strlcat ( <S2SV_ModStart> fscanf ( maps , "%*x-%*x<S2SV_blank>%*s<S2SV_blank>%zx<S2SV_blank>%5s<S2SV_blank>%ld<S2SV_blank>%1023s\\n" <S2SV_ModEnd> , & offset ,
<S2SV_ModStart> int numInts ) { if ( numFds < 0 || numInts < 0 || numFds > kMaxNativeFds || numInts > kMaxNativeInts ) { return NULL ; } size_t mallocSize = <S2SV_ModEnd> sizeof ( native_handle_t ) <S2SV_ModStart> ( native_handle_t ) + ( <S2SV_ModStart> numFds + numInts ) ) ; native_handle_t * h = malloc ( mallocSize
<S2SV_ModStart> ; } size_t data_size ; if ( validate_and_calculate_camera_metadata_entry_data_size ( & data_size , <S2SV_ModEnd> entry . type , <S2SV_ModStart> entry . count ) != OK ) { ALOGE ( "%s:<S2SV_blank>Entry<S2SV_blank>data<S2SV_blank>size<S2SV_blank>is<S2SV_blank>invalid.<S2SV_blank>type:<S2SV_blank>%u<S2SV_blank>count:<S2SV_blank>%u" , __FUNCTION__ , entry . type , entry . count ) ; return ERROR ; } <S2SV_ModEnd> if ( data_size !=
<S2SV_ModStart> || src == NULL ) return ERROR ; if ( src -> entry_count + dst -> entry_count < src -> entry_count ) return ERROR ; if ( src -> data_count + dst -> data_count < src -> data_count
<S2SV_ModStart> return ERROR ; } if ( metadata -> data_count > metadata -> data_capacity ) { ALOGE ( "%s:<S2SV_blank>Data<S2SV_blank>count<S2SV_blank>(%" PRIu32 ")<S2SV_blank>should<S2SV_blank>be<S2SV_blank><=<S2SV_blank>data<S2SV_blank>capacity<S2SV_blank>" "(%" PRIu32 ")" , __FUNCTION__ , metadata -> data_count , metadata -> data_capacity ) ; android_errorWriteLog ( SN_EVENT_LOG_ID , "30591838" ) ; return ERROR ; }
<S2SV_ModStart> ) ; # endif # ifdef HAVE_MKDTEMP if ( no_rc_dir && tmp_dir != rc_dir ) if ( rmdir ( tmp_dir ) != 0 ) { fprintf ( stderr , "Can\'t<S2SV_blank>remove<S2SV_blank>temporary<S2SV_blank>directory<S2SV_blank>(%s)!\\n" , tmp_dir ) ; exit ( 1 ) ; } # endif
<S2SV_ModStart> tmp_dir = "/tmp" ; # ifdef HAVE_MKDTEMP tmp_dir = mkdtemp ( Strnew_m_charp ( tmp_dir , "/w3m-XXXXXX" , NULL ) -> ptr ) ; if ( tmp_dir == NULL ) tmp_dir = rc_dir ; # endif
<S2SV_ModStart> CLOSE_DT ; if ( h_env -> envc == 0 || ( h_env -> envc_real < h_env -> nenv && envs [ h_env -> envc ] . env != HTML_DL && envs [ h_env -> envc ] . env != HTML_DL_COMPACT ) ) { PUSH_ENV ( HTML_DL ) ; } if (
<S2SV_ModStart> = 0 , nattr ; tagname [ 0 ] = '\\0'
<S2SV_ModStart> ) { if ( l == NULL ) break ; if (
<S2SV_ModStart> -= INDENT_INCR ; } if ( tbl -> indent < 0 ) tbl -> indent = 0 ; <S2SV_ModStart> offset -= INDENT_INCR ; if ( offset < 0 ) offset = 0 ;
<S2SV_ModStart> newlen = x -> area_size <S2SV_ModEnd> * 6 / 5 <S2SV_ModStart> newlen == x -> area_size <S2SV_ModEnd> ) newlen += 2
<S2SV_ModStart> return NULL ; } else { matvar -> name [ tmp - 1 ] = '\\0' ; }
<S2SV_ModStart> nread ; if ( is_url ( source ) ) { pcap_snprintf ( errmsgbuf , PCAP_ERRBUF_SIZE , "Source<S2SV_blank>string<S2SV_blank>refers<S2SV_blank>to<S2SV_blank>a<S2SV_blank>remote<S2SV_blank>device" ) ; goto error ; } if (
<S2SV_ModStart> usersp ; # endif char * crypt_password ; <S2SV_ModStart> pw_passwd ; # endif crypt_password = crypt ( password , user_password ) ; if ( crypt_password == NULL ) { pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" ) ; return - 1 ; } <S2SV_ModStart> strcmp ( user_password , crypt_password <S2SV_ModEnd> ) != 0 )
<S2SV_ModStart> { # ifdef _WIN32 DWORD error ; HANDLE Token ; char errmsgbuf [ PCAP_ERRBUF_SIZE ] ; <S2SV_ModEnd> if ( LogonUser ( <S2SV_ModStart> == 0 ) { pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" ) ; error = GetLastError ( ) ; if ( error != ERROR_LOGON_FAILURE ) { pcap_fmt_errmsg_for_win32_err ( errmsgbuf , PCAP_ERRBUF_SIZE , error , "LogonUser()<S2SV_blank>failed" ) ; rpcapd_log ( LOGPRIO_ERROR , "%s" , errmsgbuf ) ; } return - 1 ; } if ( ImpersonateLoggedOnUser ( Token ) == 0 ) { pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" ) ; pcap_fmt_errmsg_for_win32_err ( errmsgbuf <S2SV_ModEnd> , PCAP_ERRBUF_SIZE , GetLastError <S2SV_ModStart> GetLastError ( ) , "ImpersonateLoggedOnUser()<S2SV_blank>failed" ) ; rpcapd_log ( LOGPRIO_ERROR , "%s" , errmsgbuf ) ; CloseHandle ( Token ) ; return - 1 ; } <S2SV_ModEnd> CloseHandle ( Token ) <S2SV_ModStart> Token ) ; return <S2SV_ModEnd> 0 ; # else <S2SV_ModStart> 0 ; # else int error ; <S2SV_ModStart> errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" <S2SV_ModEnd> ) ; return - <S2SV_ModStart> errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" <S2SV_ModEnd> ) ; return - <S2SV_ModStart> pw_passwd ; # endif errno = 0 ; <S2SV_ModStart> == NULL ) { error = errno ; pcap_snprintf ( errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" ) ; if ( error == 0 ) { rpcapd_log ( LOGPRIO_ERROR , "crypt()<S2SV_blank>failed" ) ; } else { rpcapd_log ( LOGPRIO_ERROR , "crypt()<S2SV_blank>failed:<S2SV_blank>%s" , strerror ( error ) ) ; } <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> errbuf , PCAP_ERRBUF_SIZE , "Authentication<S2SV_blank>failed" <S2SV_ModEnd> ) ; return - <S2SV_ModStart> pw_uid ) ) { error = errno ; <S2SV_ModStart> errbuf , PCAP_ERRBUF_SIZE , error <S2SV_ModEnd> , "setuid" ) ; <S2SV_ModStart> , "setuid" ) ; rpcapd_log ( LOGPRIO_ERROR , "setuid()<S2SV_blank>failed:<S2SV_blank>%s" , strerror ( error ) ) ;
<S2SV_ModStart> rpcap_findalldevs_if * findalldevs_if ; uint32 replylen ; <S2SV_ModStart> return 0 ; } replylen = 0 ; <S2SV_ModStart> d -> description ) replylen <S2SV_ModEnd> += strlen ( d <S2SV_ModStart> d -> name ) replylen <S2SV_ModEnd> += strlen ( d <S2SV_ModStart> -> name ) ; replylen <S2SV_ModEnd> += sizeof ( struct <S2SV_ModStart> AF_INET6 : # endif replylen <S2SV_ModEnd> += ( sizeof ( <S2SV_ModStart> RPCAP_MSG_FINDALLIF_REPLY , nif , replylen <S2SV_ModEnd> ) ; for (
<S2SV_ModStart> ( struct block_trailer ) || ( total_length > BT_SHB_INSANE_MAX ) <S2SV_ModStart> errbuf , PCAP_ERRBUF_SIZE , "Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>invalid<S2SV_blank>length<S2SV_blank>%" PRIsize "<S2SV_blank><<S2SV_blank>_%lu_<S2SV_blank><<S2SV_blank>%lu<S2SV_blank>(BT_SHB_INSANE_MAX)" <S2SV_ModEnd> , sizeof ( * <S2SV_ModStart> ( struct block_trailer ) , total_length , BT_SHB_INSANE_MAX <S2SV_ModEnd> ) ; * err
<S2SV_ModStart> errbuf , PCAP_ERRBUF_SIZE , "truncated<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file;<S2SV_blank>tried<S2SV_blank>to<S2SV_blank>read<S2SV_blank>%" <S2SV_ModEnd> PRIsize "<S2SV_blank>bytes,<S2SV_blank>only<S2SV_blank>got<S2SV_blank>%" PRIsize ,
<S2SV_ModStart> PCAP_ERRBUF_SIZE , "Section<S2SV_blank>Header<S2SV_blank>Block<S2SV_blank>in<S2SV_blank>pcapng<S2SV_blank>dump<S2SV_blank>file<S2SV_blank>has<S2SV_blank>invalid<S2SV_blank>length<S2SV_blank>%" PRIsize "<S2SV_blank><<S2SV_blank>_%u_<S2SV_blank><<S2SV_blank>%u<S2SV_blank>(BT_SHB_INSANE_MAX)" <S2SV_ModEnd> , sizeof ( *
<S2SV_ModStart> if ( len < 32 ) ND_PRINT ( ( ndo , "<S2SV_blank>len=%d<S2SV_blank>[bad:<S2SV_blank><<S2SV_blank>32]" <S2SV_ModEnd> , len ) )
<S2SV_ModStart> ( ( ndo , "%s" , tstr <S2SV_ModEnd> ) ) ; }
<S2SV_ModStart> == FALSE ) { ND_TCHECK_16BITS ( obj_tptr + offset ) ; <S2SV_ModStart> { case INT_SWITCHING_TYPE_SUBOBJ : ND_TCHECK_8BITS ( obj_tptr + offset + 2 ) ; <S2SV_ModStart> + 2 ) ) ) ; ND_TCHECK_8BITS ( obj_tptr + offset + 3 <S2SV_ModStart> 1000000 ) ) ; ND_TCHECK_32BITS ( obj_tptr + offset + 8 ) ; <S2SV_ModStart> ; case WAVELENGTH_SUBOBJ : ND_TCHECK_32BITS ( obj_tptr + offset + 4 ) ;
<S2SV_ModStart> msg_len_valid = 0 ; if ( is_ipv6 ) { <S2SV_ModStart> , sizeof ( struct olsr_msg6 ) ) ; <S2SV_ModEnd> msgptr . v6 = <S2SV_ModStart> ; } else { ND_TCHECK2 ( * tptr , sizeof ( struct olsr_msg4 ) ) ; <S2SV_ModStart> : { u_int name_entries ; u_int addr_size ; int name_entries_valid ; u_int i ; if ( msg_tlen < 4 ) goto trunc ; ND_TCHECK2 ( * msg_data , 4 ) ; name_entries <S2SV_ModStart> + 2 ) ; <S2SV_ModEnd> addr_size = 4 ; <S2SV_ModStart> addr_size = 4 ; if ( is_ipv6 ) addr_size = 16 ; name_entries_valid = 0 <S2SV_ModEnd> ; if ( ( <S2SV_ModStart> ) name_entries_valid = 1 <S2SV_ModEnd> ; ND_PRINT ( (
<S2SV_ModStart> * b , * t , c ; const u_char * s <S2SV_ModEnd> ; int i , <S2SV_ModStart> ; b = ( u_char <S2SV_ModEnd> * ) malloc ( <S2SV_ModStart> for ( s = <S2SV_ModEnd> p , t = <S2SV_ModStart> ; i > 0 && ND_TTEST ( * s ) <S2SV_ModStart> { if ( i <= 1 || ! ND_TTEST ( * s ) ) break ; <S2SV_ModEnd> i -- ; c <S2SV_ModStart> s ++ ^ 0x20 <S2SV_ModEnd> ; } * t
<S2SV_ModStart> ; case DH6OPT_RECONF_MSG : if ( optlen != 1 ) { ND_PRINT ( ( ndo , "<S2SV_blank>?)" ) ) ; break ; }
<S2SV_ModStart> if ( len < 10 <S2SV_ModEnd> ) ND_PRINT ( (
<S2SV_ModStart> ! ND_TTEST2 ( * TPA <S2SV_ModEnd> ( ap ) , <S2SV_ModStart> ( ( ndo , "who-has<S2SV_blank>" ) ) ; tpaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ( ( ndo , "<S2SV_blank>tell<S2SV_blank>" ) ) ; spaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case ARPOP_REPLY : spaddr_print_ip ( ndo , ap , pro ) ; ND_PRINT ( ( ndo , "<S2SV_blank>is-at<S2SV_blank>%s" <S2SV_ModEnd> , linkaddr_string ( ndo <S2SV_ModStart> ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>" <S2SV_ModEnd> , linkaddr_string ( ndo <S2SV_ModStart> ( ap ) ) ) ) ; tpaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ( ( ndo , "%s<S2SV_blank>at<S2SV_blank>" <S2SV_ModEnd> , linkaddr_string ( ndo <S2SV_ModStart> ( ap ) ) ) ) ; spaddr_print_ip ( ndo , ap , pro <S2SV_ModEnd> ) ; break ;
<S2SV_ModStart> ( ( ndo , "who-has<S2SV_blank>" ) ) ; atmarp_tpaddr_print ( ndo , ap , pro <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ( ( ndo , "<S2SV_blank>tell<S2SV_blank>" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ; case ARPOP_REPLY : atmarp_spaddr_print ( ndo , ap , pro ) ; ND_PRINT ( ( ndo , "<S2SV_blank>is-at<S2SV_blank>" <S2SV_ModEnd> ) ) ; atmarp_addr_print <S2SV_ModStart> ( ( ndo , "at<S2SV_blank>" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ( ( ndo , "for<S2SV_blank>" ) ) ; atmarp_spaddr_print ( ndo , ap , pro <S2SV_ModEnd> ) ; break ;
<S2SV_ModStart> ) ; if ( tlen == BGP_VPN_RD_LEN + 4 + sizeof ( struct in_addr ) && <S2SV_ModStart> ; else if ( tlen == BGP_VPN_RD_LEN + 3 + sizeof ( struct in6_addr ) &&
<S2SV_ModStart> ( ! er ) { ND_TCHECK ( <S2SV_ModEnd> dp [ 0 ] <S2SV_ModStart> [ 0 ] ) ; ND_PRINT ( ( ndo , "<S2SV_blank>c<S2SV_blank>%04x" , EXTRACT_32BITS ( & dp [ 0 ] ) ) ) ; } <S2SV_ModEnd> return ; case NFSPROC_READLINK
<S2SV_ModStart> ND_TCHECK ( dp [ 4 <S2SV_ModEnd> ] ) ; ND_PRINT <S2SV_ModStart> -> ndo_vflag ) { ND_PRINT ( ( ndo , "<S2SV_blank><%s>" , tok2str ( nfsv3_writemodes , NULL , EXTRACT_32BITS ( & dp [ 3 ] <S2SV_ModEnd> ) ) ) )
<S2SV_ModStart> ( uint32_t ) ; ND_TCHECK <S2SV_ModEnd> ( dp [ 0 <S2SV_ModStart> dp [ 0 ] <S2SV_ModEnd> ) ; astat =
<S2SV_ModStart> != 0 ) { ND_TCHECK_16BITS ( & dp -> icmp_cksum ) ;
<S2SV_ModStart> length < 3 ) goto trunc ; <S2SV_ModEnd> if ( * data <S2SV_ModStart> length < 1 ) goto trunc ; if ( * data ) ND_PRINT ( ( ndo , "Tag[%u]<S2SV_blank>" , * data ) ) ; else ND_PRINT ( ( ndo , "Tag[Unused]<S2SV_blank>" ) ) ; data ++ ; length -- ; } <S2SV_ModEnd> break ; case EGRESS_VLAN_NAME <S2SV_ModStart> ; case EGRESS_VLAN_NAME : if ( length < 1 ) goto trunc ; <S2SV_ModStart> i = 0 ; i < length && * data <S2SV_ModEnd> ; i ++ ,
<S2SV_ModStart> , length - 1 <S2SV_ModEnd> ) ; return hdrlen
<S2SV_ModStart> , length - 1 <S2SV_ModEnd> ) ; else isoclns_print <S2SV_ModStart> , p , length <S2SV_ModEnd> ) ; break ;
<S2SV_ModStart> , length - 1 <S2SV_ModEnd> ) ; return (
<S2SV_ModStart> , length + 1 ) ; break ; case NLPID_SNAP : if ( snap_print ( ndo , p , length <S2SV_ModStart> -> ndo_snapend - p <S2SV_ModEnd> , NULL , NULL
<S2SV_ModStart> , bp , len ) ; break ; case ETHERTYPE_TEB : ether_print ( ndo , bp , len <S2SV_ModStart> -> ndo_snapend - bp <S2SV_ModEnd> , NULL , NULL
<S2SV_ModStart> p , u_int length <S2SV_ModEnd> ) { if ( <S2SV_ModStart> ) { if ( ! ND_TTEST ( * p ) <S2SV_ModEnd> ) { ND_PRINT ( <S2SV_ModStart> p , "\\n\\t" , length <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> p , "\\n\\t" , length <S2SV_ModEnd> ) ; break ; <S2SV_ModStart> ) ; if ( length <S2SV_ModEnd> > 1 ) print_unknown_data <S2SV_ModStart> p , "\\n\\t" , length <S2SV_ModEnd> ) ; break ;
<S2SV_ModStart> , p , length <S2SV_ModEnd> ) ; return (
<S2SV_ModStart> , p , length <S2SV_ModEnd> ) ; break ;
<S2SV_ModStart> , p , length <S2SV_ModEnd> ) ; break ;
<S2SV_ModStart> , p , length <S2SV_ModEnd> ) ; break ;
<S2SV_ModStart> if ( optlen == 6 <S2SV_ModEnd> ) ND_PRINT ( ( <S2SV_ModStart> ( ( ndo , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>6]" <S2SV_ModEnd> ) ) ; break <S2SV_ModStart> ; case 42 : switch ( optlen ) { case 6 : ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; break ; case 8 : ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; ND_PRINT ( ( ndo , "<S2SV_blank>(elapsed<S2SV_blank>time<S2SV_blank>%u)" , EXTRACT_16BITS ( option + 6 ) ) ) ; break ; case 10 : ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; ND_PRINT ( ( ndo , "<S2SV_blank>(elapsed<S2SV_blank>time<S2SV_blank>%u)" , EXTRACT_32BITS ( option + 6 ) ) ) ; break ; default : ND_PRINT ( ( ndo , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>6<S2SV_blank>or<S2SV_blank>8<S2SV_blank>or<S2SV_blank>10]" ) ) ; break ; } break ; case 43 : if ( optlen == 6 ) ND_PRINT ( ( ndo , "<S2SV_blank>%u" , EXTRACT_32BITS ( option + 2 ) ) ) ; else <S2SV_ModStart> ndo , "<S2SV_blank>%u" , EXTRACT_16BITS <S2SV_ModEnd> ( option + 2 <S2SV_ModStart> ( ( ndo , "<S2SV_blank>[optlen<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>or<S2SV_blank>6]" <S2SV_ModEnd> ) ) ; break
<S2SV_ModStart> ; depth ++ ; if ( depth == 10 ) ND_PRINT ( ( ndo , "(too<S2SV_blank>many<S2SV_blank>nested<S2SV_blank>levels,<S2SV_blank>not<S2SV_blank>recursing)" ) ) ; else
<S2SV_ModStart> ; return ; } if ( ! ND_TTEST2 ( * bp , 2 ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>[|OPT]" ) ) ; return ; }
<S2SV_ModStart> > 0 ) { if ( total_subobj_len < 4 ) goto invalid ; <S2SV_ModStart> ; if ( subobj_len < 4 || subobj_len > total_subobj_len <S2SV_ModEnd> ) goto invalid ;
<S2SV_ModStart> ) ) ) ; ND_TCHECK ( bp -> bp_flags ) ;
<S2SV_ModStart> ! ext_dp -> icmp_length && ND_TTEST2 ( ext_dp -> icmp_ext_version_res , plen - ICMP_EXTD_MINLEN ) <S2SV_ModStart> plen - ICMP_EXTD_MINLEN ; if ( ND_TTEST2 ( ext_dp -> icmp_ext_version_res , hlen ) ) { <S2SV_ModStart> hlen ) ) ; }
<S2SV_ModStart> ; case IPOPT_TS : if ( ip_printts <S2SV_ModEnd> ( ndo , cp <S2SV_ModStart> ; break ; case IPOPT_RR : case IPOPT_SSRR : case IPOPT_LSRR : if ( ip_printroute ( ndo , cp , option_len ) == - 1 ) goto trunc ; break ; case
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printts ( netdissect_options * <S2SV_ModStart> ) ) ; return ( 0 ) <S2SV_ModStart> length ) ) ; ND_TCHECK ( cp [ 2 ] ) ; <S2SV_ModStart> ] ) ) ; ND_TCHECK ( cp [ 3 ] ) ; <S2SV_ModStart> ) type = "<S2SV_blank>^<S2SV_blank>" ; ND_TCHECK2 ( cp [ len ] , hoplen ) <S2SV_ModStart> "}" ) ) ; return ( 0 ) ; trunc : return ( - 1 ) ;
<S2SV_ModStart> bp2 ; ND_TCHECK ( * dp <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> { ND_TCHECK ( * tptr <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> ; } trunc : ND_PRINT ( ( ndo , "[|esis]" ) ) <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> ; u_int tval ; u_int <S2SV_ModEnd> i ; if ( <S2SV_ModStart> ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>Priority:<S2SV_blank>%u,<S2SV_blank>RES:<S2SV_blank>%u,<S2SV_blank>Sel:<S2SV_blank>%u,<S2SV_blank>Protocol<S2SV_blank>ID:<S2SV_blank>%u" <S2SV_ModEnd> , tval >> 5 <S2SV_ModStart> tval & 0x07 ) , <S2SV_ModEnd> EXTRACT_16BITS ( tptr +
<S2SV_ModStart> < length ) { if ( i + 4 > length ) return - 1 ; <S2SV_ModStart> + 4 ) ) ; if ( i + 4 + optlen > length ) return - 1
<S2SV_ModStart> "<S2SV_blank>status=(" ) ) ; ND_TCHECK_32BITS ( cp ) ;
<S2SV_ModStart> = 0 ; int elt ; u_int offset , max_offset ; if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if ( ! ND_TTEST2 ( * cp , 1 ) ) return ( NULL ) ; max_offset = ( u_int ) ( cp - bp ) ; if ( ( ( i = * cp ++ ) & INDIR_MASK ) != INDIR_MASK ) { compress = 0 ; rp = cp + l ; } if ( i != 0 ) while ( i && cp < ndo -> ndo_snapend ) { if ( ( i & INDIR_MASK ) == INDIR_MASK ) { if ( ! compress ) { rp = cp + 1 ; compress = 1 ; } <S2SV_ModEnd> if ( ! ND_TTEST2 <S2SV_ModStart> ( NULL ) ; offset = ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( offset >= max_offset ) { ND_PRINT ( ( ndo , "<BAD<S2SV_blank>PTR>" ) ) ; return ( NULL ) ; } max_offset = offset ; cp = bp + offset ; if ( ( l = labellen ( ndo , cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; <S2SV_ModEnd> if ( ! ND_TTEST2 <S2SV_ModStart> ( NULL ) ; <S2SV_ModEnd> i = * cp <S2SV_ModStart> * cp ++ ; <S2SV_ModEnd> continue ; } if <S2SV_ModStart> cp += l ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> * cp ++ ; <S2SV_ModEnd> if ( ! compress
<S2SV_ModStart> < tmp ) { ND_TCHECK2 ( * tptr , alen ) ;
<S2SV_ModStart> ; uint32_t vqp_obj_type ; u_int <S2SV_ModEnd> tlen ; uint8_t nitems <S2SV_ModStart> ( * vqp_common_header ) ; if ( sizeof ( struct vqp_common_header_t ) > tlen ) goto trunc <S2SV_ModStart> * ) tptr ; ND_TCHECK ( * vqp_obj_tlv ) ; if ( sizeof ( struct vqp_obj_tlv_t ) > tlen ) goto trunc ; <S2SV_ModStart> , vqp_obj_len ) ; if ( vqp_obj_len > tlen ) goto trunc ; <S2SV_ModStart> { case VQP_OBJ_IP_ADDRESS : if ( vqp_obj_len != 4 ) goto trunc ; <S2SV_ModStart> : case VQP_OBJ_MAC_NULL : if ( vqp_obj_len != ETHER_ADDR_LEN ) goto trunc ;
<S2SV_ModStart> * ) bp ; ep = ndo -> ndo_snapend ; ND_TCHECK ( dp -> ip6r_segleft ) ; <S2SV_ModStart> = dp -> ip6r_len <S2SV_ModEnd> ; ND_PRINT ( (
<S2SV_ModStart> * ) obj_tptr ; switch ( rsvp_obj_ctype ) { case RSVP_CTYPE_1 : if ( obj_tlen < sizeof ( struct rsvp_obj_frr_t ) ) return - 1 ; <S2SV_ModStart> -> bandwidth ) ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> return - 1 ; bw . i = EXTRACT_32BITS ( obj_ptr . rsvp_obj_frr -> bandwidth ) ;
<S2SV_ModStart> , 1 ) ) { ND_TCHECK_16BITS ( & bp [ 6 ] ) ; <S2SV_ModStart> ) ) ) ; }
<S2SV_ModStart> ) ; if ( <S2SV_ModEnd> ND_TTEST2 ( cp ,
<S2SV_ModStart> n >= 0 && <S2SV_ModEnd> ND_TTEST ( * ps <S2SV_ModStart> io < ie && <S2SV_ModEnd> ND_TTEST ( * io
<S2SV_ModStart> ":<S2SV_blank>" ) ) ; ND_TCHECK_16BITS ( p + l2info -> cookie_len ) ;
<S2SV_ModStart> ) ) ) { if ( caplen < hdrlen + 1 ) { ND_PRINT ( ( ndo , "%s" , tstr ) ) ; return hdrlen ; }
<S2SV_ModStart> opt_len == 12 && ( flags & TH_SYN ) <S2SV_ModEnd> ) && ! (
<S2SV_ModStart> opt ; if ( opt_len < 4 ) return 0 ; if ( <S2SV_ModEnd> flags & TH_SYN ) <S2SV_ModStart> opt += 4 ; opt_len -= 4 ; <S2SV_ModStart> & MP_DSS_a ) { if ( opt_len < 8 ) return 0 ; <S2SV_ModStart> opt += 8 ; opt_len -= 8 ; } else { if ( opt_len < 4 ) return 0 ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> opt += 4 ; opt_len -= 4 ; <S2SV_ModStart> & MP_DSS_m ) { if ( opt_len < 8 ) return 0 ; <S2SV_ModStart> opt += 8 ; opt_len -= 8 ; } else { if ( opt_len < 4 ) return 0 ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> opt += 4 ; opt_len -= 4 ; } if ( opt_len < 4 ) return 0 ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> opt += 4 ; opt_len -= 4 ; if ( opt_len < 2 ) return 0 ; <S2SV_ModStart> opt += 2 ; opt_len -= 2 ; if ( opt_len >= 2 ) { ND_PRINT ( ( ndo , "<S2SV_blank>csum<S2SV_blank>0x%x" , EXTRACT_16BITS ( opt ) ) ) ; opt_len -= 2 ; } } if ( opt_len != 0 ) return 0 ; return 1 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> opt_len == 12 && ( <S2SV_ModStart> flags & TH_SYN ) ) <S2SV_ModStart> opt_len == 24 && ( flags & TH_ACK ) <S2SV_ModEnd> ) ) return 0
<S2SV_ModStart> 0 ] ) ) ) ; ND_TCHECK ( tptr [ 1 ]
<S2SV_ModStart> goto trunc ; } ND_TCHECK_128BITS ( & bp [ i + 2 ] ) ;
<S2SV_ModStart> pos = id ; int sysid_len ; sysid_len = SYSTEM_ID_LEN ; if ( sysid_len > id_len ) sysid_len = id_len ; <S2SV_ModStart> 1 ; i <= sysid_len <S2SV_ModEnd> ; i ++ )
<S2SV_ModStart> : case ISIS_SUBTLV_EXT_IS_REACH_BW_CONSTRAINTS_OLD : if ( subl == 0 ) break ; <S2SV_ModStart> te_class ++ ) { <S2SV_ModEnd> bw . i =
<S2SV_ModStart> const u_char * tptr , const u_int length ) { u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE ; <S2SV_ModStart> hexdump = FALSE ; if ( length < 1 ) { ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Network<S2SV_blank>Address<S2SV_blank>Type<S2SV_blank>(invalid,<S2SV_blank>no<S2SV_blank>data" ) ) ; return hexdump ; } <S2SV_ModStart> { case AFNUM_INET : if ( length != 1 + 4 ) { ND_PRINT ( ( ndo , "(invalid<S2SV_blank>IPv4<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , length - 1 ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> ; case AFNUM_INET6 : if ( length != 1 + 16 ) { ND_PRINT ( ( ndo , "(invalid<S2SV_blank>IPv6<S2SV_blank>address<S2SV_blank>length<S2SV_blank>%u)" , length - 1 ) ) ; hexdump = TRUE ; break ; }
<S2SV_ModStart> "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank>must<S2SV_blank>be<S2SV_blank>>=<S2SV_blank>1)" ) ) ; goto next_tlv <S2SV_ModEnd> ; } chassis_id_length = <S2SV_ModStart> "\\n\\t<S2SV_blank><S2SV_blank>(TLV<S2SV_blank>too<S2SV_blank>short)" ) ) ; goto next_tlv <S2SV_ModEnd> ; } chassis_id_type = <S2SV_ModStart> "\\n\\t<S2SV_blank><S2SV_blank>(TLV<S2SV_blank>too<S2SV_blank>short)" ) ) ; goto next_tlv <S2SV_ModEnd> ; } switch ( <S2SV_ModStart> { case CFM_CHASSIS_ID_MAC_ADDRESS : if ( chassis_id_length != ETHER_ADDR_LEN ) { ND_PRINT ( ( ndo , "<S2SV_blank>(invalid<S2SV_blank>MAC<S2SV_blank>address<S2SV_blank>length)" ) ) ; hexdump = TRUE ; break ; } <S2SV_ModStart> ( ndo , tptr + 1 , chassis_id_length <S2SV_ModStart> == 0 ) { break <S2SV_ModEnd> ; } mgmt_addr_length = <S2SV_ModStart> ; cfm_tlv_len -- ; ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Domain<S2SV_blank>Length<S2SV_blank>%u" , mgmt_addr_length ) ) ; <S2SV_ModStart> "\\n\\t<S2SV_blank><S2SV_blank>(TLV<S2SV_blank>too<S2SV_blank>short)" ) ) ; goto next_tlv <S2SV_ModEnd> ; } cfm_tlv_len -= <S2SV_ModStart> } cfm_tlv_len -= mgmt_addr_length ; hex_print ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Domain:<S2SV_blank>" , tptr , mgmt_addr_length ) <S2SV_ModStart> ( ( ndo , "<S2SV_blank>(Management<S2SV_blank>Address<S2SV_blank>Length<S2SV_blank>is<S2SV_blank>missing)" ) ) ; hexdump = TRUE ; break <S2SV_ModEnd> ; } mgmt_addr_length = <S2SV_ModStart> ; cfm_tlv_len -- ; ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address<S2SV_blank>Length<S2SV_blank>%u" , mgmt_addr_length ) ) ; <S2SV_ModStart> } cfm_tlv_len -= mgmt_addr_length ; hex_print ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>Management<S2SV_blank>Address:<S2SV_blank>" , tptr , mgmt_addr_length ) <S2SV_ModStart> , cfm_tlv_len ) ; next_tlv :
<S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> memcpy ( & ssid <S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> memcpy ( & challenge <S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> memcpy ( & rates <S2SV_ModStart> , p + offset <S2SV_ModEnd> , tim . length
<S2SV_ModStart> > 0 ) { if ( len < ( u_int ) advance ) goto trunc ; <S2SV_ModStart> ) ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ; case IPPROTO_ROUTING : ND_TCHECK ( * cp ) ; <S2SV_ModStart> ) ip6 ) ; if ( advance < 0 ) return ; <S2SV_ModStart> ndo , cp ) ; if ( advance < 0 ) return <S2SV_ModStart> & padlen ) ; if ( advance < 0 ) return ;
<S2SV_ModStart> ) ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> ) ) ) ; ND_TCHECK <S2SV_ModEnd> ( dp -> icmp6_data16 <S2SV_ModStart> icmp6_data16 [ 1 ] <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> [ 1 ] & 0xc0 ) ND_PRINT ( ( ndo , "<S2SV_blank>" <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> [ 1 ] & 0x80 ) ND_PRINT ( ( ndo , "M" ) ) ; if ( dp -> icmp6_data16 [ 1 ] &
<S2SV_ModStart> ) + 1 ; ND_TCHECK2 ( * s , 1 ) ;
<S2SV_ModStart> { case PIMV2_HELLO_OPTION_HOLDTIME : if ( olen != 2 ) { ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>2<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; } else { <S2SV_ModStart> bp ) ) ; } <S2SV_ModStart> ; case PIMV2_HELLO_OPTION_GENID : if ( olen != 4 ) { ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; } else { <S2SV_ModStart> ) ) ) ; } <S2SV_ModStart> ; case PIMV2_HELLO_OPTION_REFRESH_CAP : if ( olen != 4 ) { ND_PRINT ( ( ndo , "ERROR:<S2SV_blank>Option<S2SV_blank>Length<S2SV_blank>!=<S2SV_blank>4<S2SV_blank>Bytes<S2SV_blank>(%u)" , olen ) ) ; } else { <S2SV_ModStart> ) ) ) ; }
<S2SV_ModStart> return len ; } ND_TCHECK_32BITS <S2SV_ModEnd> ( p + 2 <S2SV_ModStart> ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT (
<S2SV_ModStart> return len ; } ND_TCHECK ( p [ 2 ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> return len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> return len ; } ND_TCHECK ( p [ 3 ] <S2SV_ModEnd> ) ; ND_PRINT (
<S2SV_ModStart> return 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; compproto
<S2SV_ModStart> return len ; } ND_TCHECK_24BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> return len ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; ND_PRINT <S2SV_ModStart> return len ; } ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> return len ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; ND_PRINT <S2SV_ModStart> return 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; if <S2SV_ModStart> return 0 ; } ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> return 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; ND_PRINT <S2SV_ModStart> return 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; ND_PRINT
<S2SV_ModStart> cp ; register struct bsnamemem <S2SV_ModEnd> * tp ; char <S2SV_ModStart> if ( tp -> bs_name <S2SV_ModEnd> ) return ( tp <S2SV_ModStart> return ( tp -> bs_name <S2SV_ModEnd> ) ; cp = <S2SV_ModStart> '\\0' ; tp -> bs_name <S2SV_ModEnd> = strdup ( buf <S2SV_ModStart> if ( tp -> bs_name <S2SV_ModEnd> == NULL ) ( <S2SV_ModStart> return ( tp -> bs_name <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> cp ; register struct bsnamemem <S2SV_ModEnd> * tp ; if <S2SV_ModStart> if ( tp -> bs_name ) return ( tp -> bs_name ) ; tp -> bs_name <S2SV_ModEnd> = cp = ( <S2SV_ModStart> if ( tp -> bs_name <S2SV_ModEnd> == NULL ) ( <S2SV_ModStart> return ( tp -> bs_name <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> <S2SV_null> static inline struct bsnamemem <S2SV_ModEnd> * lookup_bytestring ( netdissect_options <S2SV_ModStart> nlen ) { struct bsnamemem <S2SV_ModEnd> * tp ; register <S2SV_ModStart> while ( tp -> bs_nxt ) if ( nlen == tp -> bs_nbytes && tp -> bs_addr0 == i && tp -> bs_addr1 == j && tp -> bs_addr2 <S2SV_ModEnd> == k && memcmp <S2SV_ModStart> ) ( tp -> bs_bytes <S2SV_ModEnd> ) , nlen ) <S2SV_ModStart> tp = tp -> bs_nxt ; tp -> bs_addr0 = i ; tp -> bs_addr1 = j ; tp -> bs_addr2 = k ; tp -> bs_bytes <S2SV_ModEnd> = ( u_char * <S2SV_ModStart> if ( tp -> bs_bytes <S2SV_ModEnd> == NULL ) ( <S2SV_ModStart> memcpy ( tp -> bs_bytes , bs , nlen ) ; tp -> bs_nbytes = nlen ; tp -> bs_nxt = ( struct bsnamemem <S2SV_ModEnd> * ) calloc ( <S2SV_ModStart> if ( tp -> bs_nxt <S2SV_ModEnd> == NULL ) (
<S2SV_ModStart> "MLPPP,<S2SV_blank>" ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo , "[|mlppp]" ) ) ; return ; } if ( ! ND_TTEST_16BITS ( p ) ) { ND_PRINT ( ( ndo , "[|mlppp]" ) ) ; return ; }
<S2SV_ModStart> ( sfsname ) { <S2SV_ModEnd> char temp [ NFSX_V3FHMAX <S2SV_ModStart> + 1 ] ; u_int stringlen ; stringlen = len ; if ( stringlen > NFSX_V3FHMAX ) stringlen = NFSX_V3FHMAX ; <S2SV_ModStart> temp , sfsname , stringlen <S2SV_ModEnd> ) ; temp [ <S2SV_ModStart> ) ; temp [ stringlen <S2SV_ModEnd> ] = '\\0' ;
<S2SV_ModStart> goto trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ; ND_TCHECK_16BITS ( & bp [ i + 4 ] ) ;
<S2SV_ModStart> buf ) ) ; if ( plenbytes < 0 ) return plenbytes ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options * <S2SV_ModStart> u_char * tptr , const u_int len , const u_char recurse , const <S2SV_ModStart> u_char * msg ; ND_TCHECK_8BITS ( tptr ) ; if ( * tptr != 0 ) { ND_PRINT ( ( ndo , "%sRPKI-RTRv%u<S2SV_blank>(unknown)" , indent_string ( 8 ) , * tptr ) ) ; return len ; } if ( len < sizeof ( rpki_rtr_pdu ) ) { ND_PRINT ( ( ndo , "(%u<S2SV_blank>bytes<S2SV_blank>is<S2SV_blank>too<S2SV_blank>few<S2SV_blank>to<S2SV_blank>decode)" , len ) ) ; goto invalid ; } ND_TCHECK2 ( * tptr , sizeof ( rpki_rtr_pdu ) ) ; <S2SV_ModStart> -> length ) ; <S2SV_ModEnd> hexdump = FALSE ; <S2SV_ModStart> , pdu_len ) ) ; if ( pdu_len < sizeof ( rpki_rtr_pdu ) || pdu_len > len ) goto invalid <S2SV_ModStart> : case RPKI_RTR_END_OF_DATA_PDU : if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 4 ) goto invalid ; ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_ModStart> : case RPKI_RTR_CACHE_RESET_PDU : if ( pdu_len != sizeof ( rpki_rtr_pdu ) ) goto invalid ; <S2SV_ModStart> ; case RPKI_RTR_CACHE_RESPONSE_PDU : if ( pdu_len != sizeof ( rpki_rtr_pdu ) ) goto invalid ; <S2SV_ModStart> rpki_rtr_pdu_ipv4_prefix * pdu ; if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 12 ) goto invalid ; ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_ModStart> rpki_rtr_pdu_ipv6_prefix * pdu ; if ( pdu_len != sizeof ( rpki_rtr_pdu ) + 24 ) goto invalid ; ND_TCHECK2 ( * tptr , pdu_len ) ; <S2SV_ModStart> tlen , error_code ; tlen = sizeof ( rpki_rtr_pdu ) ; if ( pdu_len < tlen + 4 ) goto invalid ; ND_TCHECK2 ( * tptr , tlen + 4 ) ; <S2SV_ModStart> -> encapsulated_pdu_length ) ; tlen += 4 <S2SV_ModEnd> ; error_code = EXTRACT_16BITS <S2SV_ModStart> encapsulated_pdu_length ) ) ; if ( encapsulated_pdu_length ) { if ( pdu_len < tlen + encapsulated_pdu_length ) goto invalid ; if ( ! recurse ) { ND_TCHECK2 ( * tptr , tlen + encapsulated_pdu_length ) ; } else <S2SV_ModEnd> { ND_PRINT ( ( <S2SV_ModStart> ) ) ) ; <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo , <S2SV_ModStart> ( ndo , tptr + tlen , encapsulated_pdu_length , 0 <S2SV_ModStart> indent + 2 ) ; } tlen += encapsulated_pdu_length ; } if ( pdu_len < tlen + 4 ) goto invalid ; ND_TCHECK2 ( * tptr , tlen + 4 ) ; text_length = EXTRACT_32BITS ( tptr + tlen ) ; tlen += 4 ; if ( text_length ) { if ( pdu_len < tlen + text_length ) goto invalid ; ND_PRINT ( ( ndo , "%sError<S2SV_blank>text:<S2SV_blank>" , indent_string ( indent + 2 ) ) ) ; if ( fn_printn ( ndo , tptr + tlen , text_length , ndo -> ndo_snapend ) ) goto trunc ; } } break ; default : <S2SV_ModEnd> ND_TCHECK2 ( * tptr <S2SV_ModStart> ( * tptr , pdu_len ) ; <S2SV_ModEnd> hexdump = TRUE ; <S2SV_ModStart> ) ; } return pdu_len ; invalid : ND_PRINT ( ( ndo , "%s" , istr ) ) ; ND_TCHECK2 ( * tptr , len ) ; return len ; trunc : ND_PRINT ( ( ndo , "\\n\\t%s" , tstr ) ) ; return len <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> u_int len ) { <S2SV_ModEnd> if ( ! ndo <S2SV_ModStart> ; } while ( len ) { u_int pdu_len = <S2SV_ModEnd> rpki_rtr_pdu_print ( ndo , <S2SV_ModStart> rpki_rtr_pdu_print ( ndo , pptr , len , 1 , 8 ) ; len -= pdu_len ; pptr <S2SV_ModEnd> += pdu_len ; } <S2SV_ModStart> += pdu_len ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> = ndo -> ndo_snapend ; ND_TCHECK_16BITS ( & ip -> ip_len )
<S2SV_ModStart> , EXTRACT_LE_16BITS ( p <S2SV_ModEnd> ) ) ) ;
<S2SV_ModStart> ; case BGP_CAPCODE_RESTART : ND_TCHECK_16BITS ( opt + i + 2 ) ;
<S2SV_ModStart> if ( l_strnstart ( ndo , <S2SV_ModStart> if ( l_strnstart ( ndo , <S2SV_ModStart> if ( l_strnstart ( ndo , <S2SV_ModStart> if ( l_strnstart ( ndo , <S2SV_ModStart> if ( l_strnstart ( ndo , <S2SV_ModStart> if ( l_strnstart ( ndo , <S2SV_ModStart> if ( l_strnstart ( ndo ,
<S2SV_ModStart> static int l_strnstart ( netdissect_options * ndo , <S2SV_ModStart> u_int l2 ) { if ( ! ND_TTEST2 ( * str2 , tl1 ) ) { return 0 ; }
<S2SV_ModStart> ) op + OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options
<S2SV_ModStart> p ++ ; } ND_TCHECK ( * p ) ;
<S2SV_ModStart> depth _U_ ) { const struct ikev2_id * idp ; <S2SV_ModStart> char * typedata ; idp = ( const struct ikev2_id * ) ext ; ND_TCHECK ( * idp <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY (
<S2SV_ModStart> unsigned int len ; ND_TCHECK2 ( * ext , sizeof ( a ) <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY (
<S2SV_ModStart> ; ND_TCHECK ( * k <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY (
<S2SV_ModStart> , unicodestr ) ; # define MAILSLOT_BROWSE_STR "\\\\MAILSLOT\\\\BROWSE" ND_TCHECK2 ( * ( data1 + 2 ) , strlen ( MAILSLOT_BROWSE_STR ) + 1 ) ; <S2SV_ModStart> + 2 ) , MAILSLOT_BROWSE_STR <S2SV_ModEnd> ) == 0 ) <S2SV_ModStart> ; return ; } # undef MAILSLOT_BROWSE_STR # define PIPE_LANMAN_STR "\\\\PIPE\\\\LANMAN" ND_TCHECK2 ( * ( data1 + 2 ) , strlen ( PIPE_LANMAN_STR ) + 1 ) ; <S2SV_ModStart> + 2 ) , PIPE_LANMAN_STR <S2SV_ModEnd> ) == 0 ) <S2SV_ModStart> ; return ; } # undef PIPE_LANMAN_STR
<S2SV_ModStart> ( * tptr , 2 <S2SV_ModEnd> ) ) return (
<S2SV_ModStart> { case EAP_FRAME_TYPE_PACKET : ND_TCHECK_8BITS ( tptr ) ; <S2SV_ModStart> = * ( tptr ) ; ND_TCHECK_16BITS ( tptr + 2 <S2SV_ModStart> <= 2 ) { ND_TCHECK_8BITS ( tptr + 4 ) ; <S2SV_ModStart> eap_type_values , "unknown" , subtype ) , subtype <S2SV_ModEnd> ) ) ; switch <S2SV_ModStart> < len ) { ND_TCHECK_8BITS ( tptr + count ) ; <S2SV_ModStart> ; case EAP_TYPE_TTLS : case EAP_TYPE_TLS : ND_TCHECK_8BITS ( tptr + 5 ) ; if ( subtype == EAP_TYPE_TTLS ) <S2SV_ModStart> ) ) ) ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> ) ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ; <S2SV_ModStart> ; case EAP_TYPE_FAST : ND_TCHECK_8BITS ( tptr + 5 ) ; <S2SV_ModStart> ) ) ) { ND_TCHECK_32BITS ( tptr + 6 ) ; <S2SV_ModStart> : case EAP_TYPE_SIM : ND_TCHECK_8BITS ( tptr + 5 ) ;
<S2SV_ModStart> bitmap , p + offset + 3 , <S2SV_ModEnd> tim . length - <S2SV_ModStart> length - 3 ) ; offset += <S2SV_ModEnd> tim . length - <S2SV_ModStart> . length - 3 ; length -= <S2SV_ModEnd> tim . length - <S2SV_ModStart> length - 3 ; <S2SV_ModEnd> if ( ! pbody
<S2SV_ModStart> { char * ret ; size_t len <S2SV_ModStart> ) return NULL ; len = <S2SV_ModEnd> strlen ( ptr ) <S2SV_ModStart> strlen ( ptr ) ; if ( len > 0 && ptr [ len <S2SV_ModStart> '\\n' ) ptr [ len <S2SV_ModEnd> - 1 ] =
<S2SV_ModStart> h -> caplen ; u_int <S2SV_ModEnd> hdrlen ; uint16_t fc <S2SV_ModStart> ; uint8_t seq ; <S2SV_ModEnd> uint16_t panid = 0 <S2SV_ModStart> panid = 0 ; if ( caplen < 3 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return caplen ; } hdrlen = 3 ; fc = EXTRACT_LE_16BITS ( p ) ; seq = EXTRACT_LE_8BITS ( p + 2 ) ; p += 3 ; caplen -= 3 ; ND_PRINT ( ( ndo , "IEEE<S2SV_blank>802.15.4<S2SV_blank>%s<S2SV_blank>packet<S2SV_blank>" , ftypes [ FC_FRAME_TYPE ( fc ) ] ) ) ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , "seq<S2SV_blank>%02x<S2SV_blank>" , seq ) ) ; switch ( FC_DEST_ADDRESSING_MODE ( fc ) ) { case FC_ADDRESSING_MODE_NONE : if ( fc & FC_PAN_ID_COMPRESSION ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , "none<S2SV_blank>" ) ) ; break ; case FC_ADDRESSING_MODE_RESERVED : if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo , "reserved<S2SV_blank>destination<S2SV_blank>addressing<S2SV_blank>mode" ) ) ; return hdrlen ; case FC_ADDRESSING_MODE_SHORT : if ( caplen < 2 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } <S2SV_ModEnd> panid = EXTRACT_LE_16BITS ( <S2SV_ModStart> p += 2 ; caplen -= 2 ; hdrlen += 2 ; if ( caplen < 2 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModStart> , EXTRACT_LE_16BITS ( p + 2 ) ) ) ; p += 2 ; caplen -= 2 ; hdrlen <S2SV_ModEnd> += 2 ; break <S2SV_ModStart> ; break ; case FC_ADDRESSING_MODE_LONG : if ( caplen < 2 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } <S2SV_ModEnd> panid = EXTRACT_LE_16BITS ( <S2SV_ModStart> p += 2 ; caplen -= 2 ; hdrlen += 2 ; if ( caplen < 8 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModStart> ( ndo , p + 2 <S2SV_ModStart> p += 8 ; caplen -= 8 ; hdrlen += 8 ; break ; } if ( ndo -> ndo_vflag ) <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> ) ; switch ( FC_SRC_ADDRESSING_MODE ( fc ) ) { case FC_ADDRESSING_MODE_NONE : if ( ndo -> ndo_vflag ) <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> ; break ; case FC_ADDRESSING_MODE_RESERVED : if ( ndo -> ndo_vflag ) <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> return 0 ; case FC_ADDRESSING_MODE_SHORT <S2SV_ModEnd> : if ( ! <S2SV_ModStart> ! ( fc & FC_PAN_ID_COMPRESSION ) ) { if ( caplen < 2 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } <S2SV_ModEnd> panid = EXTRACT_LE_16BITS ( <S2SV_ModStart> p += 2 ; caplen -= 2 ; hdrlen += 2 ; } if ( caplen < 2 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> p += 2 ; caplen -= 2 ; hdrlen += 2 ; break ; case FC_ADDRESSING_MODE_LONG <S2SV_ModEnd> : if ( ! <S2SV_ModStart> ! ( fc & FC_PAN_ID_COMPRESSION ) ) { if ( caplen < 2 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } <S2SV_ModEnd> panid = EXTRACT_LE_16BITS ( <S2SV_ModStart> p += 2 ; caplen -= 2 ; hdrlen += 2 ; } if ( caplen < 8 ) { ND_PRINT ( ( ndo , "[|802.15.4]" ) ) ; return hdrlen ; } if ( ndo -> ndo_vflag ) <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> p += 8 ; caplen -= 8 ; hdrlen += 8 ; break ; } <S2SV_ModEnd> if ( ! ndo <S2SV_ModStart> caplen ) ; return hdrlen <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> static char buf [ 1024 + 1 ] ; char * bufp = buf ; size_t space_left = sizeof ( buf ) , string_size <S2SV_ModEnd> ; register u_int rotbit <S2SV_ModStart> rotbit ) ) { if ( space_left <= 1 ) return ( buf ) ; string_size = strlcpy ( bufp , sepstr , space_left ) ; if ( string_size >= space_left ) return ( buf ) ; bufp += string_size ; space_left -= string_size ; if ( space_left <= 1 ) return ( buf ) ; string_size = strlcpy ( bufp <S2SV_ModEnd> , lp -> s <S2SV_ModStart> , lp -> s , space_left ) ; if ( string_size >= space_left ) return ( buf ) ; bufp += string_size ; space_left -= string_size <S2SV_ModEnd> ; sepstr = sep <S2SV_ModStart> ; } if ( bufp == buf <S2SV_ModEnd> ) ( void )
<S2SV_ModStart> * p ) { return <S2SV_ModEnd> chdlc_print ( ndo , <S2SV_ModStart> ndo , p , h -> len <S2SV_ModEnd> ) ; } <S2SV_null>
<S2SV_ModStart> { u_int proto ; const u_char * bp = p ; if ( length < CHDLC_HDRLEN ) goto trunc ; ND_TCHECK2 ( * p , CHDLC_HDRLEN ) ; <S2SV_ModStart> ETHERTYPE_ISO : if ( length < 2 ) goto trunc ; ND_TCHECK_16BITS ( p ) ; if ( <S2SV_ModStart> ( CHDLC_HDRLEN ) ; trunc : ND_PRINT ( ( ndo , "[|chdlc]" ) ) ; return ndo -> ndo_snapend - bp ;
<S2SV_ModStart> if ( tlen < 1U +
<S2SV_ModStart> ( ndo , p <S2SV_ModEnd> ) ) ) ;
<S2SV_ModStart> INTOUT ( ) ; ND_TCHECK_32BITS ( bp ) ;
<S2SV_ModStart> { case MFR_CTRL_IE_MAGIC_NUM : if ( ie_len != 4 ) { ND_PRINT ( ( ndo , "(invalid<S2SV_blank>length)" ) ) ; break ; }
<S2SV_ModStart> ( ( ndo , "%s" , tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> LDP_TLV_FT_SESSION : TLV_TCHECK ( 12 <S2SV_ModEnd> ) ; ft_flags = <S2SV_ModStart> ( ( ndo , "%s" , tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> * ) tptr ; if ( len < VTP_VLAN_INFO_FIXED_PART_LEN ) goto trunc ; <S2SV_ModStart> ) ) ) ; len -= VTP_VLAN_INFO_FIXED_PART_LEN ; tptr += VTP_VLAN_INFO_FIXED_PART_LEN ; if ( len < 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ) goto trunc ; ND_TCHECK2 ( * tptr , vtp_vlan -> name_len ) ; fn_printzp ( ndo , tptr , vtp_vlan -> name_len , NULL ) ; len -= 4 * ( ( vtp_vlan -> name_len + 3 ) / 4 ) ; tptr += 4 * ( ( vtp_vlan -> name_len <S2SV_ModEnd> + 3 ) / <S2SV_ModStart> > 0 ) { if ( len < 2 ) goto trunc ; ND_TCHECK2 ( * tptr , 2 ) ; <S2SV_ModStart> ) ; if ( len < tlv_len * 2 + 2 ) { ND_PRINT ( ( ndo , "<S2SV_blank>(TLV<S2SV_blank>goes<S2SV_blank>past<S2SV_blank>the<S2SV_blank>end<S2SV_blank>of<S2SV_blank>the<S2SV_blank>packet)" ) ) ; <S2SV_ModEnd> return ; } ND_TCHECK2 <S2SV_ModStart> + 2 ) ; if ( tlv_len != 1 ) { ND_PRINT ( ( ndo , "<S2SV_blank>(invalid<S2SV_blank>TLV<S2SV_blank>length<S2SV_blank>%u<S2SV_blank>!=<S2SV_blank>1)" , tlv_len ) ) ; return ; } else { <S2SV_ModStart> ; break ; } }
<S2SV_ModStart> pptr , u_int len , const unsigned attr_set_level <S2SV_ModStart> ; } if ( attr_set_level == 10 ) ND_PRINT ( ( ndo , "(too<S2SV_blank>many<S2SV_blank>nested<S2SV_blank>levels,<S2SV_blank>not<S2SV_blank>recursing)" ) ) ; else if ( <S2SV_ModStart> , tptr , alen , attr_set_level + 1
<S2SV_ModStart> , p , alen , 0
<S2SV_ModStart> > 2 ) { ND_TCHECK2 ( * tptr , 2 ) ; <S2SV_ModStart> = len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ) , stlv_len ) <S2SV_ModStart> { case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( ( <S2SV_ModStart> len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; <S2SV_ModStart> ( tmp ) { if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( ( <S2SV_ModStart> ; len = len - ISIS_SUBTLV_SPB_INSTANCE_VLAN_TUPLE_LEN ; stlv_len = stlv_len <S2SV_ModStart> ; case ISIS_SUBTLV_SPBM_SI : if ( stlv_len < 8 ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( ( <S2SV_ModStart> : break ; } tptr += stlv_len ; len -= stlv_len ;
<S2SV_ModStart> > 2 ) { ND_TCHECK2 ( * tptr , 2 ) ; <S2SV_ModStart> = len - 2 ; if ( len < stlv_len ) goto trunc ; ND_TCHECK2 ( * ( tptr ) , stlv_len ) <S2SV_ModStart> case ISIS_SUBTLV_SPB_MCID : { if ( stlv_len < ISIS_SUBTLV_SPB_MCID_MIN_LEN ) goto trunc <S2SV_ModEnd> ; subtlv_spb_mcid = ( <S2SV_ModStart> tptr = tptr + ISIS_SUBTLV_SPB_MCID_MIN_LEN ; len = len - ISIS_SUBTLV_SPB_MCID_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_MCID_MIN_LEN <S2SV_ModEnd> ; break ; } <S2SV_ModStart> case ISIS_SUBTLV_SPB_DIGEST : { if ( stlv_len < ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( ( <S2SV_ModStart> len - ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_DIGEST_MIN_LEN ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_BVID : { while ( stlv_len <S2SV_ModEnd> >= ISIS_SUBTLV_SPB_BVID_MIN_LEN ) { <S2SV_ModStart> >= ISIS_SUBTLV_SPB_BVID_MIN_LEN ) { <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> len - ISIS_SUBTLV_SPB_BVID_MIN_LEN ; stlv_len = stlv_len - ISIS_SUBTLV_SPB_BVID_MIN_LEN ; <S2SV_ModStart> : break ; } tptr += stlv_len ; len -= stlv_len ;
<S2SV_ModStart> ) ) ; } if ( ! ND_TTEST ( rp -> rm_call . cb_proc ) ) return ( 0 ) ; <S2SV_ModStart> -> rm_call . cb_proc ) ; if ( ! ND_TTEST ( rp -> rm_call . cb_vers ) ) return ( 0
<S2SV_ModStart> l2info -> header_len ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> { case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ] , 2 ) ; <S2SV_ModStart> { case LS_COOKIE_ID : ND_TCHECK2 ( p [ 0 ] , 2 ) ;
<S2SV_ModStart> goto trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;
<S2SV_ModStart> ; u_int plen ; char asbuf [ sizeof ( astostr ) ] ; <S2SV_ModStart> return - 1 ; ND_TCHECK_32BITS ( pptr + 1 ) ; as_printf ( ndo , asbuf , sizeof ( asbuf ) , EXTRACT_32BITS ( pptr + 1 ) ) ; <S2SV_ModStart> ND_TCHECK2 ( pptr [ 5 <S2SV_ModEnd> ] , ( plen <S2SV_ModStart> , & pptr [ 5 <S2SV_ModEnd> ] , ( plen <S2SV_ModStart> buflen , "origin<S2SV_blank>AS:<S2SV_blank>%s,<S2SV_blank>route<S2SV_blank>target<S2SV_blank>%s" , asbuf <S2SV_ModEnd> , bgp_vpn_rd_print ( ndo
<S2SV_ModStart> { case RSVP_CTYPE_1 : ND_TCHECK_32BITS ( obj_tptr ) ;
<S2SV_ModStart> netal ; if ( snpal == 6 ) ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>SNPA<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s" , snpal , etheraddr_string ( ndo , snpa ) ) ) ; else ND_PRINT ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>SNPA<S2SV_blank>(length:<S2SV_blank>%u):<S2SV_blank>%s" , snpal , linkaddr_string ( ndo , snpa , LINKADDR_OTHER , snpal ) ) ) ; if ( netal != <S2SV_ModEnd> 0 ) ND_PRINT ( <S2SV_ModStart> ( ( ndo , "\\n\\t<S2SV_blank><S2SV_blank>NET<S2SV_blank>(length:<S2SV_blank>%u)<S2SV_blank>%s" , netal , <S2SV_ModEnd> isonsap_string ( ndo ,
<S2SV_ModStart> rxent -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh ->
<S2SV_ModStart> rxent -> serviceId = EXTRACT_16BITS <S2SV_ModEnd> ( & rxh ->
<S2SV_ModStart> ep , uint32_t phase _U_ <S2SV_ModStart> _U_ , int depth _U_ <S2SV_ModStart> < ep ) { <S2SV_ModEnd> switch ( ntohs ( <S2SV_ModStart> oakley_t_map [ 0 ] ) ; ND_PRINT ( ( ndo , "<S2SV_blank>attrs=(" ) <S2SV_ModStart> nmap ) ; } ND_PRINT ( ( ndo , ")" ) ) ; <S2SV_ModStart> } case IPSECDOI_NTYPE_REPLAY_STATUS : ND_PRINT ( ( ndo , "<S2SV_blank>status=(" ) ) ; <S2SV_ModStart> "dis" ) ) ; ND_PRINT ( ( ndo , ")" ) ) <S2SV_ModEnd> ; break ; default <S2SV_ModStart> break ; default : if ( ndo -> ndo_vflag > 3 ) { ND_PRINT ( ( ndo , "<S2SV_blank>data=(" ) ) ; if ( ! rawprint ( ndo , ( const uint8_t * ) ( cp ) , ep - cp ) ) goto trunc ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> ")" ) ) ; } else { if ( ! ike_show_somedata ( ndo , cp , ep ) ) goto trunc ; } break ; }
<S2SV_ModStart> ( ( ndo , "<S2SV_blank>n<S2SV_blank>len=%u" <S2SV_ModEnd> , ntohs ( e <S2SV_ModStart> ) ; if ( ntohs ( e . len ) > 4 ) { if ( ndo -> ndo_vflag > 2 <S2SV_ModEnd> ) { ND_PRINT ( <S2SV_ModStart> } else if ( ndo -> ndo_vflag > 1 <S2SV_ModEnd> ) { ND_PRINT ( <S2SV_ModStart> u_char * ) ( <S2SV_ModEnd> ext + 1 ) <S2SV_ModStart> goto trunc ; } }
<S2SV_ModStart> ( ( ndo , "<S2SV_blank>len=%u<S2SV_blank>method=%s" <S2SV_ModEnd> , len - 4 <S2SV_ModStart> ) ; if ( len > 4 ) { if ( ndo -> ndo_vflag > 1 <S2SV_ModEnd> ) { ND_PRINT ( <S2SV_ModStart> ( ndo -> ndo_vflag <S2SV_ModEnd> ) { if ( <S2SV_ModStart> goto trunc ; } }
<S2SV_ModStart> cp ; u_char showspi <S2SV_ModEnd> , showsomedata ; const <S2SV_ModStart> showspi = 1 ; <S2SV_ModEnd> showsomedata = 0 ; <S2SV_ModStart> ; showsomedata = 1 <S2SV_ModEnd> ; break ; case <S2SV_ModStart> spi_size ; if ( cp < ep ) { if ( ndo -> ndo_vflag > 3 <S2SV_ModEnd> || ( showsomedata && <S2SV_ModStart> < 30 ) ) <S2SV_ModEnd> { ND_PRINT ( ( <S2SV_ModStart> else if ( showsomedata <S2SV_ModEnd> ) { if ( <S2SV_ModStart> ) goto trunc ; }
<S2SV_ModStart> < length ) { if ( i + 2 > length ) return - 1 ; <S2SV_ModStart> + 2 ) ) ; if ( i + 2 + optlen > length ) return - 1
<S2SV_ModStart> ; case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> length ) ) { ND_TCHECK_8BITS ( tptr ) ;
<S2SV_ModStart> ) ] ) ; ND_TCHECK ( rhp -> rh_short . sh_flags ) ;
<S2SV_ModStart> struct aodv_hello * ah ; ND_TCHECK ( * ep ) <S2SV_ModStart> ) goto trunc ; if ( ep -> length < 4 ) { ND_PRINT ( ( ndo , "\\n\\text<S2SV_blank>HELLO<S2SV_blank>-<S2SV_blank>bad<S2SV_blank>length<S2SV_blank>%u" , ep -> length ) ) ; break ; }
<S2SV_ModStart> ( * prep ) || ! ND_TTEST ( * prep ) ) <S2SV_ModEnd> return ( - 1 <S2SV_ModStart> - 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS (
<S2SV_ModStart> 0 ) return ; ND_PRINT ( ( ndo , "%s" , tstr ) ) ; <S2SV_ModStart> 0 ) return ; ND_PRINT ( ( ndo , "%s" , tstr ) ) ; <S2SV_ModStart> 0 ) return ; ND_PRINT ( ( ndo , "%s" , tstr ) ) ; <S2SV_ModStart> 0 ) return ; ND_PRINT ( ( ndo , "%s" , tstr ) ) ; <S2SV_ModStart> 0 ) return ; ND_PRINT ( ( ndo , "%s" , tstr ) ) ; <S2SV_ModStart> >= 0 ) return ; ND_PRINT ( ( ndo , "%s" , tstr ) )
<S2SV_ModStart> tunnel_type , flags ; ND_TCHECK2 ( tptr [ 0 ] , 5 ) ; <S2SV_ModStart> ; tlen = len <S2SV_ModEnd> ; ND_PRINT ( (
<S2SV_ModStart> , int * len , int * truncated <S2SV_ModStart> char * s ; <S2SV_ModEnd> s = * pptr <S2SV_ModStart> = * pptr ; for ( ; ; ) { if ( * len == 0 ) { return NULL ; } if ( ! ND_TTEST ( <S2SV_ModEnd> * * pptr ) <S2SV_ModStart> * * pptr ) ) { * truncated = 1 ; return NULL ; } if ( * * pptr == '\\0' ) { break ; } <S2SV_ModEnd> ( * pptr ) <S2SV_ModStart> len ) -- ; <S2SV_ModEnd> return s ; }
<S2SV_ModStart> lose = 0 ; int truncated = 0 ; <S2SV_ModStart> parse , & parselen , & truncated ) ; if ( truncated ) goto trunc <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> if ( lose ) goto trunc ; <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> opcode ) ) ; return ; trunc : ND_PRINT ( ( ndo , "<S2SV_blank>[|zephyr]<S2SV_blank>(%d)" , length ) ) ; return ;
<S2SV_ModStart> 0 ] , BGP_VPN_RD_LEN + 4 <S2SV_ModStart> ; pptr += BGP_VPN_RD_LEN + 4
<S2SV_ModStart> ( ( ndo , "%s" , icmp6_tstr <S2SV_ModEnd> ) ) ; }
<S2SV_ModStart> ( ( ndo , "%s" , icmp6_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> ( ( ndo , "%s" , icmp6_tstr <S2SV_ModEnd> ) ) ; }
<S2SV_ModStart> ( ( ndo , "%s" , icmp6_tstr <S2SV_ModEnd> ) ) ; }
<S2SV_ModStart> ( ( ndo , "%s" , mldv2_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> ( ( ndo , "%s" , mldv2_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> ( ( ndo , "%s" , rpl_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> ( ( ndo , "%s" , rpl_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> ( ( ndo , "%s" , rpl_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> length -= optlen ; ND_TCHECK ( opt -> rpl_dio_len ) ; <S2SV_ModStart> ( ( ndo , "%s" , rpl_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> ( ( ndo , "%s" , rpl_tstr <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> obj_tlen ; int hexdump , ret <S2SV_ModStart> ) ) ) ; ret = <S2SV_ModEnd> lmp_print_data_link_subobjs ( ndo , <S2SV_ModStart> 12 , 12 ) ; if ( ret == - 1 ) goto trunc ; if ( ret == TRUE <S2SV_ModStart> ) ) ) ; ret = <S2SV_ModEnd> lmp_print_data_link_subobjs ( ndo , <S2SV_ModStart> 36 , 36 ) ; if ( ret == - 1 ) goto trunc ; if ( ret == TRUE <S2SV_ModStart> ) ) ) ; ret = <S2SV_ModEnd> lmp_print_data_link_subobjs ( ndo , <S2SV_ModStart> 12 , 12 ) ; if ( ret == - 1 ) goto trunc ; if ( ret == TRUE
<S2SV_ModStart> ) ) ) ; ND_TCHECK_32BITS ( obj_tptr + offset + 4 ) ; <S2SV_ModStart> ( hexdump ) ; trunc : return - 1 ;
<S2SV_ModStart> ) ) ) ; <S2SV_ModEnd> } else { ND_PRINT <S2SV_ModStart> ) ) ) ; } return ; <S2SV_ModEnd> } sport = EXTRACT_16BITS <S2SV_ModStart> uint16_t ) ) ; ND_TCHECK_16BITS ( bp ) ;
<S2SV_ModStart> ( ! saw_digit ) { bp ++ ; goto invalid ; } <S2SV_ModEnd> break ; } c <S2SV_ModStart> bp != '\\r' ) { bp ++ ; goto invalid ; } <S2SV_ModEnd> bp ++ ; len <S2SV_ModStart> bp != '\\n' ) { bp ++ ; goto invalid ; } <S2SV_ModEnd> bp ++ ; len <S2SV_ModStart> ) ; trunc : * endp = bp ; <S2SV_ModStart> ) ; invalid : * endp = bp ;
<S2SV_ModStart> -> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> -> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> -> ndo_vflag ) { ND_TCHECK_32BITS ( & bp [ hlen + 4 ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> hlen = IP6M_MINLEN ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ] & 0xf0 ) { <S2SV_ModStart> "K" ) ) ; } <S2SV_ModStart> hlen += 1 ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> ] ) ) ; ND_TCHECK <S2SV_ModEnd> ( mh -> ip6m_data8 <S2SV_ModStart> ip6m_data8 [ 1 ] ) ; if ( mh -> ip6m_data8 [ 1 ] <S2SV_ModStart> hlen = IP6M_MINLEN ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> hlen += 2 ; ND_TCHECK_16BITS ( & bp [ hlen ] <S2SV_ModEnd> ) ; ND_PRINT ( <S2SV_ModStart> IP6M_MINLEN ; ND_TCHECK2 ( bp [ hlen ] , <S2SV_ModEnd> 16 ) ; ND_PRINT
<S2SV_ModStart> ; return ; } if ( len < sizeof ( struct eigrp_common_header ) ) { ND_PRINT ( ( ndo , "EIGRP<S2SV_blank>%s,<S2SV_blank>length:<S2SV_blank>%u<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , tok2str ( eigrp_opcode_values , "unknown<S2SV_blank>(%u)" , eigrp_com_header -> opcode ) , len , ( u_int ) sizeof ( struct eigrp_common_header ) ) ) ; return ; } <S2SV_ModStart> eigrp_tlv_len ) ) ; if ( eigrp_tlv_len < sizeof ( struct eigrp_tlv_header ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) sizeof ( struct eigrp_tlv_header ) ) ) ; break ; } <S2SV_ModStart> * ) tlv_tptr ; if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_general_parm ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_general_parm ) ) ) ) ; break ; } <S2SV_ModStart> * ) tlv_tptr ; if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_sw_version ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_sw_version ) ) ) ) ; break ; } <S2SV_ModStart> * ) tlv_tptr ; if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_ip_int ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_ip_int ) ) ) ) ; break ; } <S2SV_ModStart> * ) tlv_tptr ; if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_ip_ext ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_ip_ext ) ) ) ) ; break ; } <S2SV_ModStart> * ) tlv_tptr ; if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_at_cable_setup ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_at_cable_setup ) ) ) ) ; break ; } <S2SV_ModStart> * ) tlv_tptr ; if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_at_int ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_at_int ) ) ) ) ; break ; } <S2SV_ModStart> * ) tlv_tptr ; if ( tlv_tlen < sizeof ( * tlv_ptr . eigrp_tlv_at_ext ) ) { ND_PRINT ( ( ndo , "<S2SV_blank>(too<S2SV_blank>short,<S2SV_blank><<S2SV_blank>%u)" , ( u_int ) ( sizeof ( struct eigrp_tlv_header ) + sizeof ( * tlv_ptr . eigrp_tlv_at_ext ) ) ) ) ; break ; }
<S2SV_ModStart> ND_TCHECK ( lshp -> ls_length <S2SV_ModEnd> ) ; ND_PRINT (
<S2SV_ModStart> , const u_char * ep2 <S2SV_ModEnd> ) { int totlen <S2SV_ModStart> ; uint32_t t ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> = 4 ; else { ND_TCHECK_16BITS ( & p [ 2 ] ) ; <S2SV_ModStart> 2 ] ) ; } if ( ep2 <S2SV_ModEnd> < p + totlen <S2SV_ModStart> ) ) ; return ep2 <S2SV_ModEnd> + 1 ; } <S2SV_ModStart> + 1 ; } ND_TCHECK_16BITS ( & p [ 0 ] ) ; <S2SV_ModStart> [ 2 ] ; if ( ! <S2SV_ModStart> ] , 2 ) ) { ND_PRINT ( ( ndo , ")" ) ) ; goto trunc ; } <S2SV_ModEnd> } else { ND_PRINT <S2SV_ModStart> ndo , "len=%d<S2SV_blank>value=" , totlen - 4 ) ) ; if ( ! <S2SV_ModEnd> rawprint ( ndo , <S2SV_ModStart> [ 4 ] , totlen - 4 ) ) { <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> ")" ) ) ; goto trunc ; } } ND_PRINT ( ( ndo , ")" ) ) ; <S2SV_ModStart> p + totlen ; trunc : return NULL ;
<S2SV_ModStart> , const u_char * ep2 <S2SV_ModEnd> , const struct attrmap <S2SV_ModStart> t , v ; ND_TCHECK ( p [ 0 ] ) ; <S2SV_ModStart> = 4 ; else { ND_TCHECK_16BITS ( & p [ 2 ] ) ; <S2SV_ModStart> 2 ] ) ; } if ( ep2 <S2SV_ModEnd> < p + totlen <S2SV_ModStart> ) ) ; return ep2 <S2SV_ModEnd> + 1 ; } <S2SV_ModStart> + 1 ; } ND_TCHECK_16BITS ( & p [ 0 ] ) ; <S2SV_ModStart> ndo , "value=" ) ) ; ND_TCHECK_16BITS ( & p [ 2 ] <S2SV_ModStart> ) ) ; else { if ( ! <S2SV_ModStart> ] , 2 ) ) { ND_PRINT ( ( ndo , ")" ) ) ; goto trunc ; } } <S2SV_ModEnd> } else { ND_PRINT <S2SV_ModStart> ndo , "len=%d<S2SV_blank>value=" , totlen - 4 ) ) ; if ( ! <S2SV_ModEnd> rawprint ( ndo , <S2SV_ModStart> [ 4 ] , totlen - 4 ) ) { <S2SV_ModEnd> ND_PRINT ( ( ndo <S2SV_ModStart> ")" ) ) ; goto trunc ; } } ND_PRINT ( ( ndo , ")" ) ) ; <S2SV_ModStart> p + totlen ; trunc : return NULL ;
<S2SV_ModStart> ndo , cp , ep2 <S2SV_ModEnd> , map , nmap <S2SV_ModStart> , nmap ) ; if ( cp == NULL ) { ND_PRINT ( ( ndo , ")" ) ) ; goto trunc ; }
<S2SV_ModStart> map && nmap ) <S2SV_ModEnd> cp = ikev1_attrmap_print ( <S2SV_ModStart> ndo , cp , ep2 , map , nmap ) ; else cp = ikev1_attr_print ( ndo , cp , ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> ep < ep2 ) <S2SV_ModEnd> ND_PRINT ( ( ndo
<S2SV_ModStart> ndo , cp , ep2 , map , nmap ) ; } else cp = ikev1_attr_print ( ndo , cp , ep2 ) ; if ( cp == NULL ) goto trunc ; } if <S2SV_ModStart> ep < ep2 ) <S2SV_ModEnd> ND_PRINT ( ( ndo
<S2SV_ModStart> { case BGP_CAPCODE_MP : ND_TCHECK_8BITS ( opt + i + 5 ) ;
<S2SV_ModStart> ; case LLDP_PRIVATE_8023_SUBTYPE_MTU : if ( tlv_len < 6 ) { return hexdump ; }
<S2SV_ModStart> netinfo6 * ni ; unsigned int length_left ; u_int j ; ND_TCHECK ( rp -> rip6_cmd <S2SV_ModEnd> ) ; switch ( <S2SV_ModStart> { case RIP6_REQUEST : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> / sizeof ( * <S2SV_ModStart> ( j == 1 ) { ND_TCHECK ( rp -> rip6_nets ) ; if ( <S2SV_ModEnd> rp -> rip6_nets -> <S2SV_ModStart> ; break ; } } <S2SV_ModStart> * ni ) != length_left ) ND_PRINT ( ( ndo , "<S2SV_blank>ripng-req<S2SV_blank>%u[%u]:" , j , length <S2SV_ModEnd> ) ) ; else <S2SV_ModStart> ( ( ndo , "<S2SV_blank>ripng-req<S2SV_blank>%u:" , j ) <S2SV_ModEnd> ) ; for ( <S2SV_ModStart> rp -> rip6_nets ; length_left <S2SV_ModEnd> >= sizeof ( * <S2SV_ModStart> * ni ) ; length_left <S2SV_ModEnd> -= sizeof ( * <S2SV_ModStart> ++ ni ) { ND_TCHECK ( * ni ) ; <S2SV_ModStart> 0 ) ; } if ( length_left != 0 ) goto trunc ; <S2SV_ModStart> ; case RIP6_RESPONSE : length_left = length ; if ( length_left < ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ) goto trunc ; length_left -= ( sizeof ( struct rip6 ) - sizeof ( struct netinfo6 ) ) ; j = length_left <S2SV_ModEnd> / sizeof ( * <S2SV_ModStart> * ni ) != length_left ) ND_PRINT ( ( ndo , "<S2SV_blank>ripng-resp<S2SV_blank>%d[%u]:" , j , length <S2SV_ModEnd> ) ) ; else <S2SV_ModStart> j ) ) ; <S2SV_ModEnd> for ( ni = <S2SV_ModStart> rp -> rip6_nets ; length_left <S2SV_ModEnd> >= sizeof ( * <S2SV_ModStart> * ni ) ; length_left <S2SV_ModEnd> -= sizeof ( * <S2SV_ModStart> ++ ni ) { ND_TCHECK ( * ni ) ; <S2SV_ModStart> ; } if ( length_left != 0 ) goto trunc <S2SV_ModEnd> ; break ; default <S2SV_ModStart> ; break ; } ND_TCHECK ( rp -> rip6_vers ) ; <S2SV_ModStart> rip6_vers ) ) ; return ; trunc : ND_PRINT ( ( ndo , "[|ripng]" ) ) ; return ;
<S2SV_ModStart> : case IPOPT_LSRR : if ( <S2SV_ModStart> cp , option_len ) == - 1 ) goto trunc
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options * <S2SV_ModStart> ) ) ; return ( 0 ) <S2SV_ModStart> "<S2SV_blank>[bad<S2SV_blank>length<S2SV_blank>%u]" , length ) ) ; ND_TCHECK ( cp [ 2 ] <S2SV_ModStart> += 4 ) { ND_TCHECK2 ( cp [ len ] , 4 ) ; <S2SV_ModStart> ) ) ; } return ( 0 ) ; trunc : return ( - 1 ) ;
<S2SV_ModStart> needcomma = 0 ; ND_TCHECK2 ( * dp , sizeof ( * ni6 ) ) ; <S2SV_ModStart> 1 ) + 4 ; ND_TCHECK ( cp [ 0 ] )
<S2SV_ModStart> * bp2 ) { ND_TCHECK ( bp [ 0 ] ) ; <S2SV_ModStart> goto trunc ; } ND_TCHECK ( bp [ 3 ] ) ;
<S2SV_ModStart> ; uint16_t length ; tlen = len ; while ( tlen >= 3 ) { <S2SV_ModStart> , 3 ) ; <S2SV_ModEnd> type = * tptr <S2SV_ModStart> + 1 ) ; tptr += 3 ; tlen -= 3 ; <S2SV_ModStart> , length ) ) ; if ( length < 3 ) goto trunc ; length -= 3 <S2SV_ModStart> 3 ] , length <S2SV_ModEnd> ) ; switch ( <S2SV_ModStart> { case BGP_AIGP_TLV : if ( length < 8 ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( ( <S2SV_ModStart> , EXTRACT_64BITS ( tptr <S2SV_ModEnd> ) ) ) ; <S2SV_ModStart> ( ndo , tptr <S2SV_ModEnd> , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , length <S2SV_ModStart> , "\\n\\t<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>" , length <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> struct tcp_sock_t * tcp_socket = NULL , * tcp6_socket = NULL ; for ( ; ; ) { <S2SV_ModEnd> tcp_socket = tcp_open ( <S2SV_ModStart> tcp_open ( desired_port ) ; tcp6_socket = tcp6_open ( desired_port ) ; if ( tcp_socket || tcp6_socket || g_options . only_desired_port ) break ; <S2SV_ModEnd> desired_port ++ ; if <S2SV_ModStart> desired_port = 49152 ; NOTE ( "Access<S2SV_blank>to<S2SV_blank>desired<S2SV_blank>port<S2SV_blank>failed,<S2SV_blank>trying<S2SV_blank>alternative<S2SV_blank>port<S2SV_blank>%d" , desired_port ) ; } if ( tcp_socket == NULL && tcp6_socket <S2SV_ModEnd> == NULL ) goto <S2SV_ModStart> cleanup_tcp ; uint16_t real_port ; if ( tcp_socket ) real_port <S2SV_ModStart> = tcp_port_number_get ( tcp_socket ) ; else real_port = tcp_port_number_get ( tcp6_socket <S2SV_ModStart> ( stdout ) ; NOTE ( "Port:<S2SV_blank>%d,<S2SV_blank>IPv4<S2SV_blank>%savailable,<S2SV_blank>IPv6<S2SV_blank>%savailable" , real_port , tcp_socket ? "" : "not<S2SV_blank>" , tcp6_socket ? "" : "not<S2SV_blank>" ) ; <S2SV_ModStart> args -> tcp = tcp_conn_select ( tcp_socket , tcp6_socket <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ( tcp_socket ) ; if ( tcp6_socket != NULL ) tcp_close ( tcp6_socket ) ;
<S2SV_ModStart> ) { ERR ( "IPv4:<S2SV_blank>callocing<S2SV_blank>this<S2SV_blank>failed" <S2SV_ModEnd> ) ; goto error <S2SV_ModStart> sd = socket ( AF_INET <S2SV_ModEnd> , SOCK_STREAM , 0 <S2SV_ModStart> ) { ERR ( "IPv4<S2SV_blank>socket<S2SV_blank>open<S2SV_blank>failed" ) ; goto error ; } struct sockaddr_in <S2SV_ModEnd> addr ; memset ( <S2SV_ModStart> ) ; addr . sin_family = AF_INET ; addr . sin_port <S2SV_ModEnd> = htons ( port <S2SV_ModStart> ) ; addr . sin_addr . s_addr = htonl ( 0x7F000001 ) <S2SV_ModEnd> ; if ( bind <S2SV_ModStart> 1 ) ERR ( "IPv4<S2SV_blank>bind<S2SV_blank>on<S2SV_blank>port<S2SV_blank>failed.<S2SV_blank>" <S2SV_ModEnd> "Requested<S2SV_blank>port<S2SV_blank>may<S2SV_blank>be<S2SV_blank>taken<S2SV_blank>or<S2SV_blank>require<S2SV_blank>root<S2SV_blank>permissions." ) ; goto <S2SV_ModStart> ) { ERR ( "IPv4<S2SV_blank>listen<S2SV_blank>failed<S2SV_blank>on<S2SV_blank>socket" <S2SV_ModEnd> ) ; goto error
<S2SV_ModStart> . command == RELAY_COMMAND_BEGIN_DIR && circ -> purpose != CIRCUIT_PURPOSE_S_REND_JOINED
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int addrs_in_same_network_family ( const
<S2SV_ModStart> ; or_circuit_t * or_circ = NULL ; origin_circuit_t * origin_circ = NULL ; crypt_path_t * layer_hint <S2SV_ModStart> ( circ ) ) { <S2SV_ModStart> ( circ ) ; } else { tor_assert ( circ -> purpose == CIRCUIT_PURPOSE_S_REND_JOINED ) ; origin_circ = TO_ORIGIN_CIRCUIT ( circ ) ; layer_hint = origin_circ -> cpath -> prev ; } <S2SV_ModStart> circ , end_reason , layer_hint <S2SV_ModEnd> ) ; return 0 <S2SV_ModStart> circ , END_STREAM_REASON_NOTDIRECTORY , layer_hint <S2SV_ModEnd> ) ; return 0 <S2SV_ModStart> circ , END_STREAM_REASON_INTERNAL , layer_hint <S2SV_ModEnd> ) ; return 0 <S2SV_ModStart> circ , END_STREAM_REASON_EXITPOLICY , layer_hint <S2SV_ModEnd> ) ; return 0 <S2SV_ModStart> == CIRCUIT_PURPOSE_S_REND_JOINED ) { tor_assert ( origin_circ <S2SV_ModEnd> ) ; log_info ( <S2SV_ModStart> circ , END_STREAM_REASON_DONE , layer_hint <S2SV_ModEnd> ) ; connection_free (
<S2SV_ModStart> char buf [ MAX_PKT_SIZE + 1 <S2SV_ModStart> sizeof ( buf ) - 1 <S2SV_ModStart> > 0 ) { <S2SV_ModEnd> if ( sa .
<S2SV_ModStart> ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> , * ny ; size_t maxw , maxh , max , offx , loopmaxw , offy , loopmaxh ; int offset , upb ; size_t i <S2SV_ModEnd> ; upb = ( <S2SV_ModStart> ; maxw = ( size_t ) img -> comps [ 0 ] . w ; maxh = ( size_t ) img -> comps [ 0 ] . h ; max = maxw * maxh ; y = img -> comps [ 0 ] . data ; cb = img -> comps [ 1 ] . data ; cr = img -> comps [ 2 ] . data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g <S2SV_ModEnd> = ( int * <S2SV_ModStart> ( int ) * max ) ; d2 = b <S2SV_ModEnd> = ( int * <S2SV_ModStart> ( int ) * <S2SV_ModEnd> max ) ; if <S2SV_ModStart> ) goto fails ; offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; offy = img -> y0 & 1U ; loopmaxh = maxh - offy ; if ( offy > 0U ) { size_t j ; for ( j = 0 ; j < maxw ; ++ j ) { sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; ++ y ; ++ r ; ++ g ; ++ b ; } } <S2SV_ModStart> ; i < ( loopmaxh & ~ ( size_t <S2SV_ModEnd> ) 1U ) ; <S2SV_ModStart> += 2U ) { size_t j ; <S2SV_ModStart> b + maxw ; if ( offx > 0U ) { sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; ++ y ; ++ r ; ++ g ; ++ b ; sycc_to_rgb ( offset , upb , * ny , * cb , * cr , nr , ng , nb ) ; ++ ny ; ++ nr ; ++ ng ; ++ nb ; } <S2SV_ModStart> ; j < ( loopmaxw & ~ ( size_t <S2SV_ModEnd> ) 1U ) ; <S2SV_ModStart> if ( j < loopmaxw <S2SV_ModEnd> ) { sycc_to_rgb ( <S2SV_ModStart> if ( i < loopmaxh ) { size_t j ; <S2SV_ModEnd> for ( j = <S2SV_ModStart> maxw & ~ ( size_t <S2SV_ModEnd> ) 1U ) ; <S2SV_ModStart> data = d2 ; <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> ] . w = img -> comps [ 2 ] . w = img -> comps [ 0 ] . w ; <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> ] . h = <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> [ 2 ] . h = img -> comps [ 0 ] . h ; img -> comps [ 1 ] . dx = <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> [ 2 ] . dx = img -> comps [ 0 ] . dx ; <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> [ 1 ] . dy = <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> [ 2 ] . <S2SV_ModEnd> dy = img -> <S2SV_ModStart> dy ; img -> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> ; return ; fails <S2SV_ModStart> return ; fails : <S2SV_ModEnd> free ( r ) <S2SV_ModStart> ( r ) ; <S2SV_ModEnd> free ( g ) <S2SV_ModStart> ( g ) ; <S2SV_ModEnd> free ( b )
<S2SV_ModStart> , * cr ; size_t <S2SV_ModEnd> maxw , maxh , <S2SV_ModStart> , maxh , max , offx , loopmaxw <S2SV_ModStart> offset , upb ; size_t i <S2SV_ModEnd> ; upb = ( <S2SV_ModStart> ; maxw = ( size_t <S2SV_ModEnd> ) img -> comps <S2SV_ModStart> ; maxh = ( size_t <S2SV_ModEnd> ) img -> comps <S2SV_ModStart> ( int ) * <S2SV_ModEnd> max ) ; d1 <S2SV_ModStart> ( int ) * <S2SV_ModEnd> max ) ; d2 <S2SV_ModStart> ( int ) * <S2SV_ModEnd> max ) ; if <S2SV_ModStart> ) goto fails ; offx = img -> x0 & 1U ; loopmaxw = maxw - offx ; <S2SV_ModStart> ++ i ) { size_t j ; if ( offx > 0U ) { sycc_to_rgb ( offset , upb , * y , 0 , 0 , r , g , b ) ; ++ y ; ++ r ; ++ g ; ++ b ; } <S2SV_ModStart> ; j < ( loopmaxw & ~ ( size_t <S2SV_ModEnd> ) 1U ) ; <S2SV_ModStart> if ( j < loopmaxw <S2SV_ModEnd> ) { sycc_to_rgb ( <S2SV_ModStart> data = d2 ; <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> ] . w = img -> comps [ 2 ] . w = img -> comps [ 0 ] . w ; <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> ] . h = <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> [ 2 ] . h = img -> comps [ 0 ] . h ; img -> comps [ 1 ] . dx = <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> [ 2 ] . dx = img -> comps [ 0 ] . dx ; img -> comps [ 1 ] . dy = <S2SV_ModEnd> img -> comps [ <S2SV_ModStart> [ 2 ] . <S2SV_ModEnd> dy = img -> <S2SV_ModStart> dy ; img -> color_space = OPJ_CLRSPC_SRGB <S2SV_ModEnd> ; return ; fails <S2SV_ModStart> return ; fails : <S2SV_ModEnd> free ( r ) <S2SV_ModStart> ( r ) ; <S2SV_ModEnd> free ( g ) <S2SV_ModStart> ( g ) ; <S2SV_ModEnd> free ( b )
<S2SV_ModStart> , * cr ; size_t <S2SV_ModEnd> maxw , maxh , <S2SV_ModStart> ; maxw = ( size_t <S2SV_ModEnd> ) img -> comps <S2SV_ModStart> ; maxh = ( size_t <S2SV_ModEnd> ) img -> comps <S2SV_ModStart> ( int ) * <S2SV_ModEnd> max ) ; d1 <S2SV_ModStart> ( int ) * <S2SV_ModEnd> max ) ; d2 <S2SV_ModStart> ( int ) * <S2SV_ModEnd> max ) ; if <S2SV_ModStart> data = d2 ; img -> color_space = OPJ_CLRSPC_SRGB ; <S2SV_ModStart> return ; fails : free ( r ) ; free ( g ) ; <S2SV_ModEnd> free ( b )
<S2SV_ModStart> ) { for ( pad = ( <S2SV_ModEnd> w % 4 )
<S2SV_ModStart> h ; if ( ( <S2SV_ModStart> numcomps < 4 ) || ( image -> comps [ 0 ] . dx != image -> comps [ 1 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 2 ] . dx ) || ( image -> comps [ 0 ] . dx != image -> comps [ 3 ] . dx ) || ( image -> comps [ 0 ] . dy != image -> comps [ 1 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 2 ] . dy ) || ( image -> comps [ 0 ] . dy != image -> comps [ 3 ] . dy ) ) { fprintf ( stderr , "%s:%d:color_cmyk_to_rgb\\n\\tCAN<S2SV_blank>NOT<S2SV_blank>CONVERT\\n" , __FILE__ , __LINE__ ) ; return ; } <S2SV_ModEnd> max = w *
<S2SV_ModStart> ] ; cmap_len = get_tga_ushort <S2SV_ModEnd> ( & tga [ <S2SV_ModStart> if 0 x_origin = get_tga_ushort <S2SV_ModEnd> ( & tga [ <S2SV_ModStart> ) ; y_origin = get_tga_ushort <S2SV_ModEnd> ( & tga [ <S2SV_ModStart> # endif image_w = get_tga_ushort <S2SV_ModEnd> ( & tga [ <S2SV_ModStart> ) ; image_h = get_tga_ushort <S2SV_ModEnd> ( & tga [
<S2SV_ModStart> = OPJ_CLRSPC_SRGB ; } if ( image_height != 0 && image_width > 10000000 / image_height / numcomps ) { char ch ; OPJ_UINT64 expected_file_size = ( OPJ_UINT64 ) image_width * image_height * numcomps ; long curpos = ftell ( f ) ; if ( expected_file_size > ( OPJ_UINT64 ) INT_MAX ) { expected_file_size = ( OPJ_UINT64 ) INT_MAX ; } fseek ( f , ( long ) expected_file_size - 1 , SEEK_SET ) ; if ( fread ( & ch , 1 , 1 , f ) != 1 ) { fclose ( f ) ; return NULL ; } fseek ( f , curpos , SEEK_SET ) ; }
<S2SV_ModStart> csty |= 0x01 ; if ( parameters -> numresolution == 1 ) { parameters -> res_spec = 1 ; parameters -> prcw_init [ 0 ] = 128 ; parameters -> prch_init [ 0 ] = 128 ; } else { <S2SV_ModStart> ] = 256 ; }
<S2SV_ModStart> ; * p_tx0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> tx0 <S2SV_ModStart> * p_cp -> tdx , <S2SV_ModEnd> p_image -> x0 ) <S2SV_ModStart> ; * p_tx1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> tx0 <S2SV_ModStart> * p_cp -> tdx , <S2SV_ModEnd> p_image -> x1 ) <S2SV_ModStart> ; * p_ty0 = ( OPJ_INT32 ) opj_uint_max <S2SV_ModEnd> ( p_cp -> ty0 <S2SV_ModStart> * p_cp -> tdy , <S2SV_ModEnd> p_image -> y0 ) <S2SV_ModStart> ; * p_ty1 = ( OPJ_INT32 ) opj_uint_min <S2SV_ModEnd> ( p_cp -> ty0 <S2SV_ModStart> * p_cp -> tdy , <S2SV_ModEnd> p_image -> y1 )
<S2SV_ModStart> OPJ_UINT32 x , y , written <S2SV_ModStart> x = y = written = <S2SV_ModStart> * pix = c1 ; written ++ <S2SV_ModStart> pix = c1 ; written ++ ; <S2SV_ModStart> } } } } if ( written != width * height ) { fprintf ( stderr , "warning,<S2SV_blank>image\'s<S2SV_blank>actual<S2SV_blank>size<S2SV_blank>does<S2SV_blank>not<S2SV_blank>match<S2SV_blank>advertized<S2SV_blank>one\\n" ) ; return OPJ_FALSE ; }
<S2SV_ModStart> m_current_tile_number ] ) ; <S2SV_ModEnd> l_mco_size = 5 + <S2SV_ModStart> = l_mco_size ; } l_current_data = p_j2k -> m_specific_param . m_encoder . m_header_tile_data ;
<S2SV_ModStart> if ( header -> biBitCount == 0 ) { fprintf ( stderr , "Error,<S2SV_blank>invalid<S2SV_blank>biBitCount<S2SV_blank>%d\\n" , 0 ) ; return OPJ_FALSE ; } if ( header ->
<S2SV_ModStart> l_current_pi -> include = 00 ; if ( l_step_l <= ( SIZE_MAX / ( l_tcp -> numlayers + 1U ) ) ) { l_current_pi -> include = <S2SV_ModStart> OPJ_INT16 ) ) ; }
<S2SV_ModStart> ( p_stream ) ; if ( p_total_data_size < 4 ) { opj_event_msg ( p_manager , EVT_ERROR , "Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOD<S2SV_blank>marker\\n" ) ; return OPJ_FALSE ; }
<S2SV_ModStart> ( p_stream ) ; <S2SV_ModEnd> if ( p_total_data_size <
<S2SV_ModStart> & J2K_CP_CSTY_SOP ) { if ( length < 6 ) { if ( p_t2_mode == FINAL_PASS ) { opj_event_msg ( p_manager , EVT_ERROR , "opj_t2_encode_packet():<S2SV_blank>only<S2SV_blank>%u<S2SV_blank>bytes<S2SV_blank>remaining<S2SV_blank>in<S2SV_blank>" "output<S2SV_blank>buffer.<S2SV_blank>%u<S2SV_blank>needed.\\n" , length , 6 ) ; } return OPJ_FALSE ; } <S2SV_ModStart> & J2K_CP_CSTY_EPH ) { if ( length < 2 ) { if ( p_t2_mode == FINAL_PASS ) { opj_event_msg ( p_manager , EVT_ERROR , "opj_t2_encode_packet():<S2SV_blank>only<S2SV_blank>%u<S2SV_blank>bytes<S2SV_blank>remaining<S2SV_blank>in<S2SV_blank>" "output<S2SV_blank>buffer.<S2SV_blank>%u<S2SV_blank>needed.\\n" , length , 2 ) ; } return OPJ_FALSE ; }
<S2SV_ModStart> levelno ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if (
<S2SV_ModStart> levelno ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if (
<S2SV_ModStart> levelno ; if ( rpx >= 31 || ( ( comp -> dx << rpx ) >> rpx ) != comp -> dx || rpy >= 31 || ( ( comp -> dy << rpy ) >> rpy ) != comp -> dy ) { continue ; } if (
<S2SV_ModStart> ++ ; } } if ( Info_h . biWidth == 0 || Info_h . biHeight == 0 ) { fclose ( IN ) ; return NULL ; } if ( Info_h . biBitCount > ( ( ( OPJ_UINT32 ) - 1 ) - 31 ) / Info_h . biWidth ) { fclose ( IN ) ; return NULL ; } <S2SV_ModStart> == 2 ) { if ( 8 > ( ( ( OPJ_UINT32 ) - 1 ) - 31 ) / Info_h . biWidth ) { fclose ( IN ) ; return NULL ; } <S2SV_ModStart> * 4U ; } if ( stride > ( ( OPJ_UINT32 ) - 1 ) / sizeof ( OPJ_UINT8 ) / Info_h . biHeight ) { fclose ( IN ) ; return NULL ; }
<S2SV_ModStart> p_j2k , p_data , p_total_data_size , <S2SV_ModStart> p_j2k , p_data , p_total_data_size ,
<S2SV_ModStart> p_j2k , p_data , p_total_data_size ,
<S2SV_ModStart> * p_data , OPJ_UINT32 p_total_data_size , OPJ_UINT32 <S2SV_ModStart> ( p_manager ) ; if ( p_total_data_size < 12 ) { opj_event_msg ( p_manager , EVT_ERROR , "Not<S2SV_blank>enough<S2SV_blank>bytes<S2SV_blank>in<S2SV_blank>output<S2SV_blank>buffer<S2SV_blank>to<S2SV_blank>write<S2SV_blank>SOT<S2SV_blank>marker\\n" ) ; return OPJ_FALSE ; }
<S2SV_ModStart> ; char lbase [ 512 <S2SV_ModEnd> ] ; char strbase <S2SV_ModStart> ; char strbase [ 512 <S2SV_ModEnd> ] ; char ltest <S2SV_ModStart> ; char ltest [ 512 <S2SV_ModEnd> ] ; char strtest <S2SV_ModStart> ; char strtest [ 512 <S2SV_ModEnd> ] ; if ( <S2SV_ModStart> sscanf ( lbase , "%511[^\\r\\n]" <S2SV_ModEnd> , strbase ) ; <S2SV_ModStart> sscanf ( ltest , "%511[^\\r\\n]" <S2SV_ModEnd> , strtest ) ; <S2SV_ModStart> assert ( nbase != 511 && ntest != 511 <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> fscanf ( f , "PG%31[<S2SV_blank>\\t]%c%c%31[<S2SV_blank>\\t+-]%d%31[<S2SV_blank>\\t]%d%31[<S2SV_blank>\\t]%d" <S2SV_ModEnd> , temp , &
<S2SV_ModStart> ) opj_calloc ( ( size_t ) ( <S2SV_ModStart> l_tcp -> numlayers + 1U <S2SV_ModEnd> ) * l_step_l ,
<S2SV_ModStart> sun_family = AF_UNIX ; memcpy ( sun . sun_path <S2SV_ModEnd> , path , strlen <S2SV_ModStart> ) ; sun_len = sizeof ( struct sockaddr_un ) ; <S2SV_ModEnd> if ( bind (
<S2SV_ModStart> sun_family = AF_UNIX ; memcpy ( sun . sun_path <S2SV_ModEnd> , address , strlen <S2SV_ModStart> ) ; sun_len = sizeof ( struct sockaddr_un ) ; <S2SV_ModEnd> client -> control =
<S2SV_ModStart> * ptr ) { if ( dir_len > PATH_MAX ) { uwsgi_log ( "invalid<S2SV_blank>path<S2SV_blank>size:<S2SV_blank>%d<S2SV_blank>(max<S2SV_blank>%d)\\n" , dir_len , PATH_MAX ) ; return NULL ; } char * src = uwsgi_concat2n ( dir , dir_len , "" , 0 ) <S2SV_ModEnd> ; char * dst <S2SV_ModStart> ( dst ) ; free ( src ) ; <S2SV_ModStart> return NULL ; } free ( src ) ;
<S2SV_ModStart> ; } if ( ( parv [ 1 ] [ 0 ] == ':' ) || strchr ( parv [ 1 ] , '<S2SV_blank>' ) ) { sendto_one ( sptr , err_str ( ERR_CANNOTDOCOMMAND ) , me . name , "*" , "AUTHENTICATE" , "Invalid<S2SV_blank>parameter" ) ; return 0 ; } if (
<S2SV_ModStart> tmsize_t s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;
<S2SV_ModStart> tsize_t s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;
<S2SV_ModStart> tmsize_t s ) { if ( s == 0 ) return ( ( void * ) NULL ) ;
<S2SV_ModStart> s ) ) { return <S2SV_ModStart> , occ0 ) ; <S2SV_ModEnd> } else return 0
<S2SV_ModStart> > 0 ) ; if <S2SV_ModEnd> ( ( occ0 % <S2SV_ModStart> occ0 % rowsize ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "PredictorDecodeTile" , "%s" , "occ0%rowsize<S2SV_blank>!=<S2SV_blank>0" ) ; return 0 ; } <S2SV_ModEnd> assert ( sp -> <S2SV_ModStart> > 0 ) { if ( ! <S2SV_ModStart> op0 , rowsize ) ) return 0
<S2SV_ModStart> != NULL ) ; if ( ! <S2SV_ModStart> bp , cc ) ) return 0
<S2SV_ModStart> > 0 ) ; if <S2SV_ModEnd> ( ( cc0 % <S2SV_ModStart> cc0 % rowsize ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "PredictorEncodeTile" , "%s" , "(cc0%rowsize)!=0" ) ; return 0 ; } <S2SV_ModEnd> while ( cc >
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF * <S2SV_ModStart> ( cc ) ; if <S2SV_ModEnd> ( cc % ( <S2SV_ModStart> bps * stride ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "fpAcc" , "%s" , "cc%(bps*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( ! tmp <S2SV_ModStart> ! tmp ) return 0 <S2SV_ModStart> ( tmp ) ; return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF * <S2SV_ModStart> ( cc ) ; if <S2SV_ModEnd> ( ( cc % <S2SV_ModStart> * stride ) ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "fpDiff" , "%s" , "(cc%(bps*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( ! tmp <S2SV_ModStart> ! tmp ) return 0 <S2SV_ModStart> ; cp -- ) return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc16 ( TIFF * <S2SV_ModStart> cc / 2 ; if <S2SV_ModEnd> ( ( cc % <S2SV_ModStart> * stride ) ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "horAcc16" , "%s" , "cc%(2*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( wc > <S2SV_ModStart> 0 ) ; } return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc32 ( TIFF * <S2SV_ModStart> cc / 4 ; if <S2SV_ModEnd> ( ( cc % <S2SV_ModStart> * stride ) ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "horAcc32" , "%s" , "cc%(4*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( wc > <S2SV_ModStart> 0 ) ; } return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF * <S2SV_ModStart> * ) cp0 ; if <S2SV_ModEnd> ( ( cc % <S2SV_ModStart> cc % stride ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "horAcc8" , "%s" , "(cc%stride)!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( cc > <S2SV_ModStart> ) ; } } return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff16 ( TIFF * <S2SV_ModStart> cc / 2 ; if <S2SV_ModEnd> ( ( cc % <S2SV_ModStart> * stride ) ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%(2*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( wc > <S2SV_ModStart> 0 ) ; } return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff32 ( TIFF * <S2SV_ModStart> cc / 4 ; if <S2SV_ModEnd> ( ( cc % <S2SV_ModStart> * stride ) ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "horDiff32" , "%s" , "(cc%(4*stride))!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( wc > <S2SV_ModStart> 0 ) ; } return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF * <S2SV_ModStart> * ) cp0 ; if <S2SV_ModEnd> ( ( cc % <S2SV_ModStart> cc % stride ) != 0 ) { TIFFErrorExt ( tif -> tif_clientdata , "horDiff8" , "%s" , "(cc%stride)!=0" ) ; return 0 ; } <S2SV_ModEnd> if ( cc > <S2SV_ModStart> ) ; } } return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF * <S2SV_ModStart> , wc ) ; return
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc32 ( TIFF * <S2SV_ModStart> , wc ) ; return
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF * <S2SV_ModStart> cc / 2 ; if ( ! <S2SV_ModStart> cp0 , cc ) ) return 0 <S2SV_ModStart> , wc ) ; return 1 ;
<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff32 ( TIFF * <S2SV_ModStart> cc / 4 ; if ( ! <S2SV_ModStart> cp0 , cc ) ) return 0 <S2SV_ModStart> , wc ) ; return 1 ;
<S2SV_ModStart> td_imagelength ; stripsperplane = TIFFhowmany_32_maxuint_compat <S2SV_ModEnd> ( td -> td_imagelength <S2SV_ModStart> ( td -> td_imagelength , <S2SV_ModEnd> rowsperstrip ) ; stripinplane
<S2SV_ModStart> uint16 bitspersample , samplesperpixel = 1 <S2SV_ModStart> uint16 input_compression , input_photometric = PHOTOMETRIC_MINISBLACK
<S2SV_ModStart> bytes_read = 0 ; uint32 <S2SV_ModEnd> strip , nstrips =
<S2SV_ModStart> { int i , bytes_per_sample , bytes_per_pixel , shift_width , result = 1 ; uint32 j <S2SV_ModEnd> ; int32 bytes_read = <S2SV_ModStart> ; uint16 bps , planar ; uint32 nstrips ; uint32 <S2SV_ModEnd> strips_per_sample ; uint32 src_rowsize
<S2SV_ModStart> ; s < ns && row < imagelength
<S2SV_ModStart> ; col < imagewidth && colb < imagew
<S2SV_ModStart> ; col < imagewidth && colb < imagew
<S2SV_ModStart> ; tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ; if ( bps != 8 ) { TIFFError ( TIFFFileName ( in ) , "Error,<S2SV_blank>can<S2SV_blank>only<S2SV_blank>handle<S2SV_blank>BitsPerSample=8<S2SV_blank>in<S2SV_blank>%s" , "cpContig2SeparateByRow" ) ; return 0 ; }
<S2SV_ModStart> ; tsample_t s ; uint16 bps = 0 ; ( void ) TIFFGetField ( in , TIFFTAG_BITSPERSAMPLE , & bps ) ; if ( bps != 8 ) { TIFFError ( TIFFFileName ( in ) , "Error,<S2SV_blank>can<S2SV_blank>only<S2SV_blank>handle<S2SV_blank>BitsPerSample=8<S2SV_blank>in<S2SV_blank>%s" , "cpSeparate2ContigByRow" ) ; return 0 ; }
<S2SV_ModStart> ; ( void ) TIFFGetFieldDefaulted <S2SV_ModEnd> ( in , TIFFTAG_PLANARCONFIG
<S2SV_ModStart> ) { uint16 bitspersample = 1
<S2SV_ModStart> , "(cc0%rowsize)!=0" ) ; _TIFFfree ( working_copy ) ;
<S2SV_ModStart> ; uint8 * tmp <S2SV_ModEnd> ; if ( cc <S2SV_ModStart> return 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ;
<S2SV_ModStart> ; uint8 * tmp <S2SV_ModEnd> ; if ( ( <S2SV_ModStart> return 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ;
<S2SV_ModStart> , int outskew , int64 <S2SV_ModEnd> inskew ) { while
<S2SV_ModStart> ( in ) ; int64 iskew = ( int64 ) imagew - ( int64 ) <S2SV_ModEnd> tilew ; uint8 * <S2SV_ModStart> } if ( colb > iskew <S2SV_ModEnd> ) { uint32 width
<S2SV_ModStart> -> tif_rawcc ) ) { tif -> tif_rawcc = 0 ; tif -> tif_rawcp = tif -> tif_rawdata ; <S2SV_ModStart> ( 0 ) ; }
<S2SV_ModStart> unsigned char * buffer , tsize_t buffersize <S2SV_ModStart> { case 0xd8 : if ( * bufferoffset + 2 > buffersize ) return ( 0 ) ; <S2SV_ModStart> == 0 ) { if ( * bufferoffset + datalen + 2 + 6 > buffersize ) return ( 0 ) ; <S2SV_ModStart> , datalen + 2 ) ; if ( * bufferoffset + 9 >= buffersize ) return ( 0 <S2SV_ModStart> h_samp = 1 ; if ( * bufferoffset + 11 + 3 * ( ncomp - 1 ) >= buffersize ) return ( 0 ) ; <S2SV_ModStart> : case 0xdb : if ( * bufferoffset + datalen + 2 > buffersize ) return ( 0 ) ; <S2SV_ModStart> == 0 ) { if ( * bufferoffset + datalen + 2 > buffersize ) return ( 0 ) ; <S2SV_ModStart> ; } else { if ( * bufferoffset + 2 > buffersize ) return ( 0 ) ; <S2SV_ModStart> datalen + 1 ; if ( * bufferoffset + * striplength - i > buffersize ) return ( 0 ) ;
<S2SV_ModStart> striplength , buffer , t2p -> tiff_datasize ,
<S2SV_ModStart> yres = 0.0 ; uint32 nstrips = 0 , ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 ; <S2SV_ModStart> ( ! read_buff ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( "loadImage" , "Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer" ) ; return ( - 1 ) ; } <S2SV_ModStart> + 3 ) ; } <S2SV_ModStart> < buffsize ) { if ( buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( "loadImage" , "Unable<S2SV_blank>to<S2SV_blank>allocate/reallocate<S2SV_blank>read<S2SV_blank>buffer" ) ; return ( - 1 ) ; }
<S2SV_ModStart> ) / 8 ; if ( bytes_per_pixel > sizeof ( swapbuff ) ) { TIFFError ( "reverseSamplesBytes" , "bytes_per_pixel<S2SV_blank>too<S2SV_blank>large" ) ; return ( 1 ) ; }
<S2SV_ModStart> ; } bufp += stripsize <S2SV_ModEnd> ; } return 1
<S2SV_ModStart> ; uint32 strip ; uint32 nstrips <S2SV_ModEnd> ; uint32 rowsperstrip ; <S2SV_ModStart> td_rowsperstrip ) return ; nstrips = TIFFhowmany_32 ( td -> td_imagelength , rowsperstrip ) ; if ( nstrips == 0 ) return ; <S2SV_ModEnd> newcounts = ( uint64 <S2SV_ModStart> _TIFFCheckMalloc ( tif , nstrips <S2SV_ModEnd> , sizeof ( uint64 <S2SV_ModStart> _TIFFCheckMalloc ( tif , nstrips <S2SV_ModEnd> , sizeof ( uint64 <S2SV_ModStart> 0 ; strip < nstrips <S2SV_ModEnd> ; strip ++ ) <S2SV_ModStart> [ strip ] = stripbytes ? offset : 0 <S2SV_ModEnd> ; offset += stripbytes <S2SV_ModStart> td -> td_nstrips = nstrips <S2SV_ModEnd> ; TIFFSetField ( tif
<S2SV_ModStart> tif_dir ; uint32 nstrips <S2SV_ModEnd> ; nstrips = (
<S2SV_ModStart> ) ; } } if ( tile_buffsize > 0xFFFFFFFFU - 3 ) { TIFFError ( "readContigTilesIntoBuffer" , "Integer<S2SV_blank>overflow<S2SV_blank>when<S2SV_blank>calculating<S2SV_blank>buffer<S2SV_blank>size." ) ; exit ( - 1 ) ; } <S2SV_ModStart> = _TIFFmalloc ( tile_buffsize + 3 <S2SV_ModStart> == 0 ) return 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize + 1 ] = 0 ; tilebuf [ tile_buffsize + 2 ] =
<S2SV_ModStart> { if ( count > <S2SV_ModEnd> 4 ) { int
<S2SV_ModStart> - 1 ) { if ( code >= clear ) { fprintf ( stderr , "bad<S2SV_blank>input:<S2SV_blank>code=%d<S2SV_blank>is<S2SV_blank>larger<S2SV_blank>than<S2SV_blank>clear=%d\\n" , code , clear ) ; return 0 ; }
<S2SV_ModStart> ) ; retval = htc_request_check_hdrs ( sp , hp <S2SV_ModEnd> ) ; return ( <S2SV_ModStart> retval ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>
<S2SV_ModStart> ( ! vct_iscrlf ( <S2SV_ModEnd> r ) ) {
<S2SV_ModStart> ( ! vct_iscrlf ( <S2SV_ModEnd> p ) ) { <S2SV_ModStart> ; ! vct_iscrlf ( <S2SV_ModEnd> p ) ; p
<S2SV_ModStart> ( ! vct_iscrlf ( & <S2SV_ModStart> ( ! vct_iscrlf ( &
<S2SV_ModStart> ( ! vct_iscrlf ( <S2SV_ModEnd> p ) ) ; <S2SV_ModStart> ( ! vct_iscrlf ( <S2SV_ModEnd> p ) ) ; <S2SV_ModStart> if ( vct_iscrlf ( <S2SV_ModEnd> p ) ) { <S2SV_ModStart> ( ! vct_iscrlf ( <S2SV_ModEnd> p ) ) p <S2SV_ModStart> if ( vct_iscrlf ( <S2SV_ModEnd> p ) ) break <S2SV_ModStart> && ! vct_iscrlf ( <S2SV_ModEnd> p ) ) p
<S2SV_ModStart> VFP_OK ) break ; if ( l > ll ) l = ll ;
<S2SV_ModStart> ; LARGE_INTEGER offset ; size_t devicePathLen = 0 <S2SV_ModEnd> ; if ( ! <S2SV_ModStart> ) ) break ; if ( ! NT_SUCCESS ( RtlUnalignedStringCchLengthW ( request -> DevicePath , TC_MAX_PATH , & devicePathLen ) ) || ( devicePathLen < 28 ) || ( devicePathLen > 30 ) || ( memcmp ( request -> DevicePath , L"\\\\Device\\\\Harddisk" , 16 * sizeof ( WCHAR ) ) ) || ( memcmp ( & request -> DevicePath [ devicePathLen - 11 ] , L"\\\\Partition0" , 11 * sizeof ( WCHAR ) ) ) ) { Irp -> IoStatus . Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus . Information = 0 ; break ; } <S2SV_ModStart> ntStatus ) ) { byte * readBuffer = TCalloc ( TC_MAX_VOLUME_SECTOR_SIZE ) ; if ( ! readBuffer ) { Irp -> IoStatus . Status = STATUS_INSUFFICIENT_RESOURCES ; Irp -> IoStatus . Information = 0 ; } else { <S2SV_ModStart> IoStatus , readBuffer , TC_MAX_VOLUME_SECTOR_SIZE <S2SV_ModEnd> , & offset , <S2SV_ModStart> NT_SUCCESS ( ntStatus ) ) { if ( IoStatus . Information >= TC_SECTOR_SIZE_BIOS <S2SV_ModStart> IoStatus . Status = STATUS_INVALID_PARAMETER ; Irp -> IoStatus . Information = 0 ; } } else { Irp -> IoStatus . Status = <S2SV_ModStart> . Information = 0 ; } TCfree ( readBuffer )
<S2SV_ModStart> ( buf + idx ) ; assert ( ( num_properties + 1 ) != 0 <S2SV_ModStart> . len ) ; assert ( ( idx + ( a -> names [ i ] . len * 2 ) ) <= len ) ; <S2SV_ModStart> idx += 4 ; assert ( v -> len + idx <= len ) ; <S2SV_ModStart> == szMAPI_UNICODE_STRING ) { assert ( v -> len != 0 ) ;
<S2SV_ModStart> { case MAPI_ATTACH_LONG_FILENAME : assert ( a -> type == szMAPI_STRING ) ; <S2SV_ModStart> ; case MAPI_ATTACH_DATA_OBJ : assert ( ( a -> type == szMAPI_BINARY ) || ( a -> type == szMAPI_OBJECT ) ) ; <S2SV_ModStart> ; case MAPI_ATTACH_MIME_TAG : assert ( a -> type == szMAPI_STRING ) ; <S2SV_ModStart> ; case MAPI_ATTACH_CONTENT_ID : assert ( a -> type == szMAPI_STRING ) ;
<S2SV_ModStart> ; j ++ ) { if ( a -> type == szMAPI_BINARY ) <S2SV_ModStart> len ) ; } }
<S2SV_ModStart> if ( a -> type == szMAPI_BINARY && a -> <S2SV_ModStart> } else if ( a -> type == szMAPI_BINARY &&
<S2SV_ModStart> size_t size ) { size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; <S2SV_ModStart> ( "checked_xcalloc" , ( res <S2SV_ModEnd> ) ) ; return
<S2SV_ModStart> * checked_xmalloc ( size_t num , size_t size ) { size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; <S2SV_ModEnd> alloc_limit_assert ( "checked_xmalloc" , <S2SV_ModStart> alloc_limit_assert ( "checked_xmalloc" , res <S2SV_ModEnd> ) ; return xmalloc <S2SV_ModStart> ; return xmalloc ( num ,
<S2SV_ModStart> size_t size ) { size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; void * ptr ; <S2SV_ModEnd> ptr = malloc ( <S2SV_ModStart> ptr = malloc ( res <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> , '\\0' , ( res <S2SV_ModEnd> ) ) ; }
<S2SV_ModStart> * xmalloc ( size_t num , size_t size ) { size_t res ; if ( check_mul_overflow ( num , size , & res ) ) abort ( ) ; <S2SV_ModEnd> void * ptr = <S2SV_ModStart> ptr = malloc ( res <S2SV_ModEnd> ) ; if (
<S2SV_ModStart> buf ; } else if ( pool -> free_total < NW_BUF_POOL_MAX_SIZE ) <S2SV_ModStart> ) ; } } else { free ( buf ) ; }
<S2SV_ModStart> obj ; } else if ( cache -> free_total < NW_CACHE_MAX_SIZE ) <S2SV_ModStart> ) ; } } else { free ( obj ) ; }
<S2SV_ModStart> send_buf_size ; uint32_t pkg_size ; if ( pkg -> body_size > RPC_PKG_MAX_BODY_SIZE ) { return - 1 ; } pkg_size <S2SV_ModStart> ( send_buf_size ) ; if ( send_buf == NULL ) { return - 1 ; } <S2SV_ModEnd> } memcpy ( send_buf
<S2SV_ModStart> ( connection == NULL || strlen ( connection ) > UT_WS_SVR_MAX_HEADER_SIZE
<S2SV_ModStart> if ( length > 1 <S2SV_ModEnd> ) { if (
<S2SV_ModStart> * mask2 , * mask3 , * mask4 , * mask5 , * mask6 , * mask7 <S2SV_ModEnd> ; const char * <S2SV_ModStart> mask2 = NULL ; mask3 = NULL ; mask4 = NULL ; mask5 = NULL ; mask6 = NULL ; mask7 <S2SV_ModEnd> = NULL ; dir_separator <S2SV_ModStart> ) return NULL ; length = strlen ( mask <S2SV_ModEnd> ) + 256 + <S2SV_ModStart> 256 + 1 ; mask2 <S2SV_ModEnd> = malloc ( length <S2SV_ModStart> ; if ( ! mask2 <S2SV_ModEnd> ) goto end ; <S2SV_ModStart> & seconds ) ; mask2 <S2SV_ModEnd> [ 0 ] = <S2SV_ModStart> ] = '\\0' ; if ( strftime ( mask2 <S2SV_ModEnd> , length - 1 <S2SV_ModStart> length - 1 , mask , date_tmp ) == 0 ) mask2 [ 0 ] = '\\0' ; mask3 = weechat_string_replace ( mask2 , dir_separator , "\\01" ) ; if ( ! mask3 ) goto end ; mask4 = weechat_buffer_string_replace_local_var ( buffer , mask3 ) ; if ( ! mask4 ) goto end ; mask5 = weechat_string_replace ( mask4 , dir_separator , weechat_config_string ( logger_config_file_replacement_char ) ) ; if ( ! mask5 ) goto end ; # ifdef __CYGWIN__ mask6 = weechat_string_replace ( mask5 , "\\\\" , weechat_config_string ( logger_config_file_replacement_char ) ) ; # else mask6 = strdup ( mask5 ) ; # endif if ( ! mask6 ) goto end ; mask7 = weechat_string_replace ( mask6 , "\\01" , dir_separator ) ; if ( ! mask7 ) goto end <S2SV_ModEnd> ; if ( weechat_config_boolean <S2SV_ModStart> ) ) weechat_string_tolower ( mask7 <S2SV_ModEnd> ) ; if ( <S2SV_ModStart> ) , mask , mask7 <S2SV_ModEnd> ) ; } end <S2SV_ModStart> ) ; if ( mask3 ) free ( mask3 ) ; if ( mask4 ) free ( mask4 ) ; if ( mask5 ) free ( mask5 ) ; if ( mask6 ) free ( mask6 ) ; return mask7 <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>
<S2SV_ModStart> "3" "SIG<S2SV_blank>padding<S2SV_blank>does<S2SV_blank>not<S2SV_blank>check<S2SV_blank>out" ; } ( * psig ) = s + <S2SV_ModEnd> padlen + 3 ; <S2SV_ModStart> padlen + 3 ; { const u_char * p ; size_t cnt_ffs = 0 ; for ( p = s + 2 ; p < s + padlen + 2 ; p ++ ) if ( * p == 0xFF ) cnt_ffs ++ ; if ( cnt_ffs != padlen ) return "4" "invalid<S2SV_blank>Padding<S2SV_blank>String" ; } <S2SV_ModEnd> return NULL ; }
<S2SV_ModStart> ( ctx , expr -> unary . child
<S2SV_ModStart> = NULL ; return ( * field_rtrn != NULL ) <S2SV_ModEnd> ; case EXPR_FIELD_REF :
<S2SV_ModStart> ) ; if ( ! str ) return false ; if (
<S2SV_ModStart> eol ( s ) && ! eof ( s )
<S2SV_ModStart> > LAST_KEYMAP_FILE_TYPE ) { if ( file -> file_type == FILE_TYPE_GEOMETRY ) { log_vrb ( ctx , 1 , "Geometry<S2SV_blank>sections<S2SV_blank>are<S2SV_blank>not<S2SV_blank>supported;<S2SV_blank>ignoring\\n" ) ; } else { <S2SV_ModStart> file_type ) ) ; }
<S2SV_ModStart> pred_txt , pred_rtrn ) || ! expr -> action . args
<S2SV_ModStart> ) return false ; <S2SV_ModEnd> i = 0 ; <S2SV_ModStart> ++ ; } } }
<S2SV_ModStart> = NULL ; return ( * elem_rtrn != NULL && * field_rtrn != NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF : <S2SV_ModStart> array_ref . entry ; if ( expr -> array_ref . element != XKB_ATOM_NONE && * elem_rtrn == NULL ) return false ; if ( * field_rtrn == NULL ) return false ;
<S2SV_ModStart> ( ParseCommon * ) <S2SV_ModEnd> append ) ; return
<S2SV_ModStart> ; } if ( ! page_name_is_good ( page <S2SV_ModEnd> ) ) { http_response_set_status
<S2SV_ModStart> if ( page && page_name_is_good ( page ) && <S2SV_ModStart> NULL ) ) { if ( page_name_is_good ( page ) ) { <S2SV_ModStart> ) ; return ; } <S2SV_ModStart> if ( page && page_name_is_good ( page ) && <S2SV_ModStart> ; if ( page && page_name_is_good ( page )
<S2SV_ModStart> ( len > BUFSIZE - <S2SV_ModEnd> sizeof ( struct nbd_reply
<S2SV_ModStart> > 0 ) { <S2SV_ModEnd> DEBUG ( "accept,<S2SV_blank>" ) <S2SV_ModStart> { continue ; } handle_modern_connection ( servers , sock ) ; } for ( i = 0 ; i < servers -> len ; i ++ ) { int net ; SERVER * serve ; serve = & ( g_array_index ( servers , SERVER , i ) ) ; if ( serve -> socket < 0 ) { continue ; } if ( FD_ISSET ( serve -> socket , & rset ) ) { <S2SV_ModEnd> if ( ( net <S2SV_ModStart> net = accept ( serve -> socket <S2SV_ModEnd> , ( struct sockaddr <S2SV_ModStart> ; continue ; } handle_connection ( servers , net , serve , NULL <S2SV_ModEnd> ) ; } }
<S2SV_ModStart> struct printparam pp ; unsigned <S2SV_ModEnd> contentlen = 0 ; <S2SV_ModStart> ) sb ++ ; sscanf ( sb , "%u" , & contentlen ) ; if ( contentlen > LINESIZE * 1024 ) contentlen = 0 <S2SV_ModEnd> ; } else if <S2SV_ModStart> ( & pp , "<form<S2SV_blank>method=\\"POST\\"<S2SV_blank>action=\\"/U\\"<S2SV_blank>enctype=\\"application/x-www-form-urlencoded\\"><textarea<S2SV_blank>cols=\\"80\\"<S2SV_blank>rows=\\"30\\"<S2SV_blank>name=\\"conffile\\">" <S2SV_ModEnd> ) ; while ( <S2SV_ModStart> case 'U' : { unsigned <S2SV_ModEnd> l = 0 ; <S2SV_ModStart> ( ! writable || ! contentlen || <S2SV_ModStart> ; } while ( l < contentlen && <S2SV_ModStart> * ) buf , ( contentlen - l ) > LINESIZE - 1 ? LINESIZE - 1 : contentlen - l <S2SV_ModEnd> , '+' , conf <S2SV_ModStart> - l ) ; if ( ! l ) { if ( i < 9 || <S2SV_ModEnd> strncasecmp ( buf , <S2SV_ModStart> ! error ) { buf [ i ] = 0 ; <S2SV_ModStart> } l += i <S2SV_ModEnd> ; } if (
<S2SV_ModStart> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}\\n" "\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>function<S2SV_blank>setTimer()<S2SV_blank>{\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>checkSession();\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>timerID<S2SV_blank>=<S2SV_blank>setInterval(\'checkSession()\',<S2SV_blank>%d);\\n" <S2SV_ModEnd> "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>}\\n" "\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>function<S2SV_blank>receiveMessage(e)<S2SV_blank>{\\n" "<S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank><S2SV_blank>console.debug(\'receiveMessage:<S2SV_blank>\'<S2SV_blank>+<S2SV_blank>e.data<S2SV_blank>+<S2SV_blank>\'<S2SV_blank>from<S2SV_blank>\'<S2SV_blank>+<S2SV_blank>e.origin);\\n" <S2SV_ModStart> & s_poll_interval ) ; int poll_interval = s_poll_interval ? strtol ( s_poll_interval , NULL , 10 ) : 0 ; if ( ( poll_interval <= 0 ) || ( poll_interval > 3600 * 24 ) ) poll_interval = 3000 <S2SV_ModEnd> ; const char * <S2SV_ModStart> session_state , op_iframe_id , poll_interval <S2SV_ModEnd> , redirect_uri , redirect_uri
